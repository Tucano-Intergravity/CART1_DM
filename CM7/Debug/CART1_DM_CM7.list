
CART1_DM_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da90  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  0800dd30  0800dd30  0000ed30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ddbc  0800ddbc  0000f088  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ddbc  0800ddbc  0000edbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ddc4  0800ddc4  0000f088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ddc4  0800ddc4  0000edc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ddc8  0800ddc8  0000edc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  24000000  0800ddcc  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000464  24000088  0800de54  0000f088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240004ec  0800de54  0000f4ec  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000f088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001faff  00000000  00000000  0000f0b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a8f  00000000  00000000  0002ebb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018f8  00000000  00000000  00032648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000135a  00000000  00000000  00033f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003fc21  00000000  00000000  0003529a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000223bb  00000000  00000000  00074ebb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a4071  00000000  00000000  00097276  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0023b2e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000072cc  00000000  00000000  0023b32c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  002425f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000088 	.word	0x24000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800dd18 	.word	0x0800dd18

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400008c 	.word	0x2400008c
 80002dc:	0800dd18 	.word	0x0800dd18

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006b0:	4b49      	ldr	r3, [pc, #292]	@ (80007d8 <SystemInit+0x12c>)
 80006b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006b6:	4a48      	ldr	r2, [pc, #288]	@ (80007d8 <SystemInit+0x12c>)
 80006b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006c0:	4b45      	ldr	r3, [pc, #276]	@ (80007d8 <SystemInit+0x12c>)
 80006c2:	691b      	ldr	r3, [r3, #16]
 80006c4:	4a44      	ldr	r2, [pc, #272]	@ (80007d8 <SystemInit+0x12c>)
 80006c6:	f043 0310 	orr.w	r3, r3, #16
 80006ca:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006cc:	4b43      	ldr	r3, [pc, #268]	@ (80007dc <SystemInit+0x130>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f003 030f 	and.w	r3, r3, #15
 80006d4:	2b06      	cmp	r3, #6
 80006d6:	d807      	bhi.n	80006e8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006d8:	4b40      	ldr	r3, [pc, #256]	@ (80007dc <SystemInit+0x130>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f023 030f 	bic.w	r3, r3, #15
 80006e0:	4a3e      	ldr	r2, [pc, #248]	@ (80007dc <SystemInit+0x130>)
 80006e2:	f043 0307 	orr.w	r3, r3, #7
 80006e6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006e8:	4b3d      	ldr	r3, [pc, #244]	@ (80007e0 <SystemInit+0x134>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a3c      	ldr	r2, [pc, #240]	@ (80007e0 <SystemInit+0x134>)
 80006ee:	f043 0301 	orr.w	r3, r3, #1
 80006f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006f4:	4b3a      	ldr	r3, [pc, #232]	@ (80007e0 <SystemInit+0x134>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006fa:	4b39      	ldr	r3, [pc, #228]	@ (80007e0 <SystemInit+0x134>)
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	4938      	ldr	r1, [pc, #224]	@ (80007e0 <SystemInit+0x134>)
 8000700:	4b38      	ldr	r3, [pc, #224]	@ (80007e4 <SystemInit+0x138>)
 8000702:	4013      	ands	r3, r2
 8000704:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000706:	4b35      	ldr	r3, [pc, #212]	@ (80007dc <SystemInit+0x130>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f003 0308 	and.w	r3, r3, #8
 800070e:	2b00      	cmp	r3, #0
 8000710:	d007      	beq.n	8000722 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000712:	4b32      	ldr	r3, [pc, #200]	@ (80007dc <SystemInit+0x130>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f023 030f 	bic.w	r3, r3, #15
 800071a:	4a30      	ldr	r2, [pc, #192]	@ (80007dc <SystemInit+0x130>)
 800071c:	f043 0307 	orr.w	r3, r3, #7
 8000720:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000722:	4b2f      	ldr	r3, [pc, #188]	@ (80007e0 <SystemInit+0x134>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000728:	4b2d      	ldr	r3, [pc, #180]	@ (80007e0 <SystemInit+0x134>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800072e:	4b2c      	ldr	r3, [pc, #176]	@ (80007e0 <SystemInit+0x134>)
 8000730:	2200      	movs	r2, #0
 8000732:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000734:	4b2a      	ldr	r3, [pc, #168]	@ (80007e0 <SystemInit+0x134>)
 8000736:	4a2c      	ldr	r2, [pc, #176]	@ (80007e8 <SystemInit+0x13c>)
 8000738:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800073a:	4b29      	ldr	r3, [pc, #164]	@ (80007e0 <SystemInit+0x134>)
 800073c:	4a2b      	ldr	r2, [pc, #172]	@ (80007ec <SystemInit+0x140>)
 800073e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000740:	4b27      	ldr	r3, [pc, #156]	@ (80007e0 <SystemInit+0x134>)
 8000742:	4a2b      	ldr	r2, [pc, #172]	@ (80007f0 <SystemInit+0x144>)
 8000744:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000746:	4b26      	ldr	r3, [pc, #152]	@ (80007e0 <SystemInit+0x134>)
 8000748:	2200      	movs	r2, #0
 800074a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800074c:	4b24      	ldr	r3, [pc, #144]	@ (80007e0 <SystemInit+0x134>)
 800074e:	4a28      	ldr	r2, [pc, #160]	@ (80007f0 <SystemInit+0x144>)
 8000750:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000752:	4b23      	ldr	r3, [pc, #140]	@ (80007e0 <SystemInit+0x134>)
 8000754:	2200      	movs	r2, #0
 8000756:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000758:	4b21      	ldr	r3, [pc, #132]	@ (80007e0 <SystemInit+0x134>)
 800075a:	4a25      	ldr	r2, [pc, #148]	@ (80007f0 <SystemInit+0x144>)
 800075c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800075e:	4b20      	ldr	r3, [pc, #128]	@ (80007e0 <SystemInit+0x134>)
 8000760:	2200      	movs	r2, #0
 8000762:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000764:	4b1e      	ldr	r3, [pc, #120]	@ (80007e0 <SystemInit+0x134>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a1d      	ldr	r2, [pc, #116]	@ (80007e0 <SystemInit+0x134>)
 800076a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800076e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000770:	4b1b      	ldr	r3, [pc, #108]	@ (80007e0 <SystemInit+0x134>)
 8000772:	2200      	movs	r2, #0
 8000774:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000776:	4b1f      	ldr	r3, [pc, #124]	@ (80007f4 <SystemInit+0x148>)
 8000778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800077a:	4a1e      	ldr	r2, [pc, #120]	@ (80007f4 <SystemInit+0x148>)
 800077c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000780:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000782:	4b1d      	ldr	r3, [pc, #116]	@ (80007f8 <SystemInit+0x14c>)
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	4b1d      	ldr	r3, [pc, #116]	@ (80007fc <SystemInit+0x150>)
 8000788:	4013      	ands	r3, r2
 800078a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800078e:	d202      	bcs.n	8000796 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000790:	4b1b      	ldr	r3, [pc, #108]	@ (8000800 <SystemInit+0x154>)
 8000792:	2201      	movs	r2, #1
 8000794:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000796:	4b12      	ldr	r3, [pc, #72]	@ (80007e0 <SystemInit+0x134>)
 8000798:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800079c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d113      	bne.n	80007cc <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80007a4:	4b0e      	ldr	r3, [pc, #56]	@ (80007e0 <SystemInit+0x134>)
 80007a6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007aa:	4a0d      	ldr	r2, [pc, #52]	@ (80007e0 <SystemInit+0x134>)
 80007ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007b0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80007b4:	4b13      	ldr	r3, [pc, #76]	@ (8000804 <SystemInit+0x158>)
 80007b6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80007ba:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80007bc:	4b08      	ldr	r3, [pc, #32]	@ (80007e0 <SystemInit+0x134>)
 80007be:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007c2:	4a07      	ldr	r2, [pc, #28]	@ (80007e0 <SystemInit+0x134>)
 80007c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80007c8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	e000ed00 	.word	0xe000ed00
 80007dc:	52002000 	.word	0x52002000
 80007e0:	58024400 	.word	0x58024400
 80007e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80007e8:	02020200 	.word	0x02020200
 80007ec:	01ff0000 	.word	0x01ff0000
 80007f0:	01010280 	.word	0x01010280
 80007f4:	580000c0 	.word	0x580000c0
 80007f8:	5c001000 	.word	0x5c001000
 80007fc:	ffff0000 	.word	0xffff0000
 8000800:	51008108 	.word	0x51008108
 8000804:	52004000 	.word	0x52004000

08000808 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 800080c:	4b09      	ldr	r3, [pc, #36]	@ (8000834 <ExitRun0Mode+0x2c>)
 800080e:	68db      	ldr	r3, [r3, #12]
 8000810:	4a08      	ldr	r2, [pc, #32]	@ (8000834 <ExitRun0Mode+0x2c>)
 8000812:	f023 0302 	bic.w	r3, r3, #2
 8000816:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000818:	bf00      	nop
 800081a:	4b06      	ldr	r3, [pc, #24]	@ (8000834 <ExitRun0Mode+0x2c>)
 800081c:	685b      	ldr	r3, [r3, #4]
 800081e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000822:	2b00      	cmp	r3, #0
 8000824:	d0f9      	beq.n	800081a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000826:	bf00      	nop
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	58024800 	.word	0x58024800

08000838 <HAL_TIM_PeriodElapsedCallback>:
uint32_t cnt1ms = 0;

float TC[20];

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000848:	d136      	bne.n	80008b8 <HAL_TIM_PeriodElapsedCallback+0x80>
	{
		// 1ms마다 실행되는 코드
		f1ms = true;
 800084a:	4b1e      	ldr	r3, [pc, #120]	@ (80008c4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800084c:	2201      	movs	r2, #1
 800084e:	701a      	strb	r2, [r3, #0]
		cnt1ms++;
 8000850:	4b1d      	ldr	r3, [pc, #116]	@ (80008c8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	3301      	adds	r3, #1
 8000856:	4a1c      	ldr	r2, [pc, #112]	@ (80008c8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000858:	6013      	str	r3, [r2, #0]

		if (cnt1ms%10 == 0)
 800085a:	4b1b      	ldr	r3, [pc, #108]	@ (80008c8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800085c:	6819      	ldr	r1, [r3, #0]
 800085e:	4b1b      	ldr	r3, [pc, #108]	@ (80008cc <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000860:	fba3 2301 	umull	r2, r3, r3, r1
 8000864:	08da      	lsrs	r2, r3, #3
 8000866:	4613      	mov	r3, r2
 8000868:	009b      	lsls	r3, r3, #2
 800086a:	4413      	add	r3, r2
 800086c:	005b      	lsls	r3, r3, #1
 800086e:	1aca      	subs	r2, r1, r3
 8000870:	2a00      	cmp	r2, #0
 8000872:	d102      	bne.n	800087a <HAL_TIM_PeriodElapsedCallback+0x42>
		{
			f10ms = true;
 8000874:	4b16      	ldr	r3, [pc, #88]	@ (80008d0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000876:	2201      	movs	r2, #1
 8000878:	701a      	strb	r2, [r3, #0]
		}

		if (cnt1ms%100 == 0)
 800087a:	4b13      	ldr	r3, [pc, #76]	@ (80008c8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800087c:	681a      	ldr	r2, [r3, #0]
 800087e:	4b15      	ldr	r3, [pc, #84]	@ (80008d4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000880:	fba3 1302 	umull	r1, r3, r3, r2
 8000884:	095b      	lsrs	r3, r3, #5
 8000886:	2164      	movs	r1, #100	@ 0x64
 8000888:	fb01 f303 	mul.w	r3, r1, r3
 800088c:	1ad3      	subs	r3, r2, r3
 800088e:	2b00      	cmp	r3, #0
 8000890:	d102      	bne.n	8000898 <HAL_TIM_PeriodElapsedCallback+0x60>
		{
			f100ms = true;
 8000892:	4b11      	ldr	r3, [pc, #68]	@ (80008d8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000894:	2201      	movs	r2, #1
 8000896:	701a      	strb	r2, [r3, #0]
		}

		if (cnt1ms%1000 == 0)
 8000898:	4b0b      	ldr	r3, [pc, #44]	@ (80008c8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800089a:	681a      	ldr	r2, [r3, #0]
 800089c:	4b0f      	ldr	r3, [pc, #60]	@ (80008dc <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800089e:	fba3 1302 	umull	r1, r3, r3, r2
 80008a2:	099b      	lsrs	r3, r3, #6
 80008a4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80008a8:	fb01 f303 	mul.w	r3, r1, r3
 80008ac:	1ad3      	subs	r3, r2, r3
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d102      	bne.n	80008b8 <HAL_TIM_PeriodElapsedCallback+0x80>
		{
			f1000ms = true;
 80008b2:	4b0b      	ldr	r3, [pc, #44]	@ (80008e0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80008b4:	2201      	movs	r2, #1
 80008b6:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80008b8:	bf00      	nop
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr
 80008c4:	24000268 	.word	0x24000268
 80008c8:	2400026c 	.word	0x2400026c
 80008cc:	cccccccd 	.word	0xcccccccd
 80008d0:	24000269 	.word	0x24000269
 80008d4:	51eb851f 	.word	0x51eb851f
 80008d8:	2400026a 	.word	0x2400026a
 80008dc:	10624dd3 	.word	0x10624dd3
 80008e0:	2400026b 	.word	0x2400026b

080008e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b086      	sub	sp, #24
 80008e8:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80008ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80008ee:	617b      	str	r3, [r7, #20]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80008f0:	bf00      	nop
 80008f2:	4b82      	ldr	r3, [pc, #520]	@ (8000afc <main+0x218>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d004      	beq.n	8000908 <main+0x24>
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	1e5a      	subs	r2, r3, #1
 8000902:	617a      	str	r2, [r7, #20]
 8000904:	2b00      	cmp	r3, #0
 8000906:	dcf4      	bgt.n	80008f2 <main+0xe>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000908:	f002 f966 	bl	8002bd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800090c:	f000 f904 	bl	8000b18 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000910:	4b7a      	ldr	r3, [pc, #488]	@ (8000afc <main+0x218>)
 8000912:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000916:	4a79      	ldr	r2, [pc, #484]	@ (8000afc <main+0x218>)
 8000918:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800091c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000920:	4b76      	ldr	r3, [pc, #472]	@ (8000afc <main+0x218>)
 8000922:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000926:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800092a:	613b      	str	r3, [r7, #16]
 800092c:	693b      	ldr	r3, [r7, #16]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800092e:	2000      	movs	r0, #0
 8000930:	f006 fba8 	bl	8007084 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000934:	2100      	movs	r1, #0
 8000936:	2000      	movs	r0, #0
 8000938:	f006 fbbe 	bl	80070b8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800093c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000940:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000942:	bf00      	nop
 8000944:	4b6d      	ldr	r3, [pc, #436]	@ (8000afc <main+0x218>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800094c:	2b00      	cmp	r3, #0
 800094e:	d104      	bne.n	800095a <main+0x76>
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	1e5a      	subs	r2, r3, #1
 8000954:	617a      	str	r2, [r7, #20]
 8000956:	2b00      	cmp	r3, #0
 8000958:	dcf4      	bgt.n	8000944 <main+0x60>
if ( timeout < 0 )
 800095a:	697b      	ldr	r3, [r7, #20]
 800095c:	2b00      	cmp	r3, #0
 800095e:	da01      	bge.n	8000964 <main+0x80>
{
Error_Handler();
 8000960:	f000 fc54 	bl	800120c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000964:	f000 fb60 	bl	8001028 <MX_GPIO_Init>
  MX_DMA_Init();
 8000968:	f000 fb3e 	bl	8000fe8 <MX_DMA_Init>
  MX_SPI1_Init();
 800096c:	f000 fa96 	bl	8000e9c <MX_SPI1_Init>
  MX_TIM2_Init();
 8000970:	f000 faec 	bl	8000f4c <MX_TIM2_Init>
  MX_ADC1_Init();
 8000974:	f000 f94c 	bl	8000c10 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 8000978:	4861      	ldr	r0, [pc, #388]	@ (8000b00 <main+0x21c>)
 800097a:	f00a fd97 	bl	800b4ac <HAL_TIM_Base_Start_IT>

  InitPT();
 800097e:	f000 fc4b 	bl	8001218 <InitPT>

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000982:	2000      	movs	r0, #0
 8000984:	f001 fed2 	bl	800272c <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8000988:	2001      	movs	r0, #1
 800098a:	f001 fecf 	bl	800272c <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 800098e:	2002      	movs	r0, #2
 8000990:	f001 fecc 	bl	800272c <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000994:	2101      	movs	r1, #1
 8000996:	2000      	movs	r0, #0
 8000998:	f001 ffbc 	bl	8002914 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 800099c:	4b59      	ldr	r3, [pc, #356]	@ (8000b04 <main+0x220>)
 800099e:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009a2:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80009a4:	4b57      	ldr	r3, [pc, #348]	@ (8000b04 <main+0x220>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80009aa:	4b56      	ldr	r3, [pc, #344]	@ (8000b04 <main+0x220>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80009b0:	4b54      	ldr	r3, [pc, #336]	@ (8000b04 <main+0x220>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80009b6:	4b53      	ldr	r3, [pc, #332]	@ (8000b04 <main+0x220>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80009bc:	4951      	ldr	r1, [pc, #324]	@ (8000b04 <main+0x220>)
 80009be:	2000      	movs	r0, #0
 80009c0:	f002 f82c 	bl	8002a1c <BSP_COM_Init>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <main+0xea>
  {
    Error_Handler();
 80009ca:	f000 fc1f 	bl	800120c <Error_Handler>
  }

  /* USER CODE BEGIN BSP */
  /* -- Sample board code to send message over COM1 port ---- */
  printf("Welcome to STM32 world !\n\r");
 80009ce:	484e      	ldr	r0, [pc, #312]	@ (8000b08 <main+0x224>)
 80009d0:	f00c fb28 	bl	800d024 <iprintf>
  /* -- Sample board code to switch on leds ---- */
  BSP_LED_On(LED_GREEN);
 80009d4:	2000      	movs	r0, #0
 80009d6:	f001 ff1f 	bl	8002818 <BSP_LED_On>
  BSP_LED_On(LED_YELLOW);
 80009da:	2001      	movs	r0, #1
 80009dc:	f001 ff1c 	bl	8002818 <BSP_LED_On>
  BSP_LED_Off(LED_RED);
 80009e0:	2002      	movs	r0, #2
 80009e2:	f001 ff43 	bl	800286c <BSP_LED_Off>
//		  BSP_LED_Toggle(LED_YELLOW);
//		  BSP_LED_Toggle(LED_RED);
//		  /* ..... Perform your action ..... */
//	  }

	  if (f10ms == true)
 80009e6:	4b49      	ldr	r3, [pc, #292]	@ (8000b0c <main+0x228>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	d1fb      	bne.n	80009e6 <main+0x102>
	  {
		  f10ms = false;
 80009ee:	4b47      	ldr	r3, [pc, #284]	@ (8000b0c <main+0x228>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	701a      	strb	r2, [r3, #0]

		  uint8_t ch[MAX_SV_NUM] ={0};
 80009f4:	1d3b      	adds	r3, r7, #4
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	605a      	str	r2, [r3, #4]
 80009fc:	811a      	strh	r2, [r3, #8]
		  ch[0] = 0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	713b      	strb	r3, [r7, #4]
		  ch[1] = 1;
 8000a02:	2301      	movs	r3, #1
 8000a04:	717b      	strb	r3, [r7, #5]
		  ch[2] = 0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	71bb      	strb	r3, [r7, #6]
		  ch[3] = 1;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	71fb      	strb	r3, [r7, #7]
		  ch[4] = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	723b      	strb	r3, [r7, #8]
		  ch[5] = 1;
 8000a12:	2301      	movs	r3, #1
 8000a14:	727b      	strb	r3, [r7, #9]
		  ch[6] = 0;
 8000a16:	2300      	movs	r3, #0
 8000a18:	72bb      	strb	r3, [r7, #10]
		  ch[7] = 1;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	72fb      	strb	r3, [r7, #11]
		  ch[8] = 0;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	733b      	strb	r3, [r7, #12]
		  ch[9] = 1;
 8000a22:	2301      	movs	r3, #1
 8000a24:	737b      	strb	r3, [r7, #13]
		  sv_single_con(ch);
 8000a26:	1d3b      	adds	r3, r7, #4
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f000 fc17 	bl	800125c <sv_single_con>

		  TC[TC_CH1] = MAX31855_GetThermocoupleTemperature(TC_CH1);
 8000a2e:	2000      	movs	r0, #0
 8000a30:	f001 fe2a 	bl	8002688 <MAX31855_GetThermocoupleTemperature>
 8000a34:	eef0 7a40 	vmov.f32	s15, s0
 8000a38:	4b35      	ldr	r3, [pc, #212]	@ (8000b10 <main+0x22c>)
 8000a3a:	edc3 7a00 	vstr	s15, [r3]
		  TC[TC_CH2] = MAX31855_GetThermocoupleTemperature(TC_CH2);
 8000a3e:	2001      	movs	r0, #1
 8000a40:	f001 fe22 	bl	8002688 <MAX31855_GetThermocoupleTemperature>
 8000a44:	eef0 7a40 	vmov.f32	s15, s0
 8000a48:	4b31      	ldr	r3, [pc, #196]	@ (8000b10 <main+0x22c>)
 8000a4a:	edc3 7a01 	vstr	s15, [r3, #4]
		  TC[TC_CH3] = MAX31855_GetThermocoupleTemperature(TC_CH3);
 8000a4e:	2002      	movs	r0, #2
 8000a50:	f001 fe1a 	bl	8002688 <MAX31855_GetThermocoupleTemperature>
 8000a54:	eef0 7a40 	vmov.f32	s15, s0
 8000a58:	4b2d      	ldr	r3, [pc, #180]	@ (8000b10 <main+0x22c>)
 8000a5a:	edc3 7a02 	vstr	s15, [r3, #8]
		  TC[TC_CH4] = MAX31855_GetThermocoupleTemperature(TC_CH4);
 8000a5e:	2003      	movs	r0, #3
 8000a60:	f001 fe12 	bl	8002688 <MAX31855_GetThermocoupleTemperature>
 8000a64:	eef0 7a40 	vmov.f32	s15, s0
 8000a68:	4b29      	ldr	r3, [pc, #164]	@ (8000b10 <main+0x22c>)
 8000a6a:	edc3 7a03 	vstr	s15, [r3, #12]
		  TC[TC_CH5] = MAX31855_GetThermocoupleTemperature(TC_CH5);
 8000a6e:	2004      	movs	r0, #4
 8000a70:	f001 fe0a 	bl	8002688 <MAX31855_GetThermocoupleTemperature>
 8000a74:	eef0 7a40 	vmov.f32	s15, s0
 8000a78:	4b25      	ldr	r3, [pc, #148]	@ (8000b10 <main+0x22c>)
 8000a7a:	edc3 7a04 	vstr	s15, [r3, #16]
		  TC[TC_CH6] = MAX31855_GetThermocoupleTemperature(TC_CH6);
 8000a7e:	2005      	movs	r0, #5
 8000a80:	f001 fe02 	bl	8002688 <MAX31855_GetThermocoupleTemperature>
 8000a84:	eef0 7a40 	vmov.f32	s15, s0
 8000a88:	4b21      	ldr	r3, [pc, #132]	@ (8000b10 <main+0x22c>)
 8000a8a:	edc3 7a05 	vstr	s15, [r3, #20]
		  TC[TC_CH7] = MAX31855_GetThermocoupleTemperature(TC_CH7);
 8000a8e:	2006      	movs	r0, #6
 8000a90:	f001 fdfa 	bl	8002688 <MAX31855_GetThermocoupleTemperature>
 8000a94:	eef0 7a40 	vmov.f32	s15, s0
 8000a98:	4b1d      	ldr	r3, [pc, #116]	@ (8000b10 <main+0x22c>)
 8000a9a:	edc3 7a06 	vstr	s15, [r3, #24]
		  TC[TC_CH8] = MAX31855_GetThermocoupleTemperature(TC_CH8);
 8000a9e:	2007      	movs	r0, #7
 8000aa0:	f001 fdf2 	bl	8002688 <MAX31855_GetThermocoupleTemperature>
 8000aa4:	eef0 7a40 	vmov.f32	s15, s0
 8000aa8:	4b19      	ldr	r3, [pc, #100]	@ (8000b10 <main+0x22c>)
 8000aaa:	edc3 7a07 	vstr	s15, [r3, #28]
		  TC[TC_CH9] = MAX31855_GetThermocoupleTemperature(TC_CH9);
 8000aae:	2008      	movs	r0, #8
 8000ab0:	f001 fdea 	bl	8002688 <MAX31855_GetThermocoupleTemperature>
 8000ab4:	eef0 7a40 	vmov.f32	s15, s0
 8000ab8:	4b15      	ldr	r3, [pc, #84]	@ (8000b10 <main+0x22c>)
 8000aba:	edc3 7a08 	vstr	s15, [r3, #32]
		  TC[TC_CH10] = MAX31855_GetThermocoupleTemperature(TC_CH10);
 8000abe:	2009      	movs	r0, #9
 8000ac0:	f001 fde2 	bl	8002688 <MAX31855_GetThermocoupleTemperature>
 8000ac4:	eef0 7a40 	vmov.f32	s15, s0
 8000ac8:	4b11      	ldr	r3, [pc, #68]	@ (8000b10 <main+0x22c>)
 8000aca:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
		  TC[TC_CH11] = MAX31855_GetThermocoupleTemperature(TC_CH11);
 8000ace:	200a      	movs	r0, #10
 8000ad0:	f001 fdda 	bl	8002688 <MAX31855_GetThermocoupleTemperature>
 8000ad4:	eef0 7a40 	vmov.f32	s15, s0
 8000ad8:	4b0d      	ldr	r3, [pc, #52]	@ (8000b10 <main+0x22c>)
 8000ada:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
		  TC[TC_CH12] = MAX31855_GetThermocoupleTemperature(TC_CH12);
 8000ade:	200b      	movs	r0, #11
 8000ae0:	f001 fdd2 	bl	8002688 <MAX31855_GetThermocoupleTemperature>
 8000ae4:	eef0 7a40 	vmov.f32	s15, s0
 8000ae8:	4b09      	ldr	r3, [pc, #36]	@ (8000b10 <main+0x22c>)
 8000aea:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

		  BSP_LED_Toggle(LED_RED);
 8000aee:	2002      	movs	r0, #2
 8000af0:	f001 fee6 	bl	80028c0 <BSP_LED_Toggle>

		  GetADCRaw(ADC_results);
 8000af4:	4807      	ldr	r0, [pc, #28]	@ (8000b14 <main+0x230>)
 8000af6:	f000 fba1 	bl	800123c <GetADCRaw>
	  if (f10ms == true)
 8000afa:	e774      	b.n	80009e6 <main+0x102>
 8000afc:	58024400 	.word	0x58024400
 8000b00:	2400021c 	.word	0x2400021c
 8000b04:	240000a4 	.word	0x240000a4
 8000b08:	0800dd30 	.word	0x0800dd30
 8000b0c:	24000269 	.word	0x24000269
 8000b10:	24000270 	.word	0x24000270
 8000b14:	240002c0 	.word	0x240002c0

08000b18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b09c      	sub	sp, #112	@ 0x70
 8000b1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b22:	224c      	movs	r2, #76	@ 0x4c
 8000b24:	2100      	movs	r1, #0
 8000b26:	4618      	mov	r0, r3
 8000b28:	f00c fb66 	bl	800d1f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b2c:	1d3b      	adds	r3, r7, #4
 8000b2e:	2220      	movs	r2, #32
 8000b30:	2100      	movs	r1, #0
 8000b32:	4618      	mov	r0, r3
 8000b34:	f00c fb60 	bl	800d1f8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000b38:	2004      	movs	r0, #4
 8000b3a:	f006 fad1 	bl	80070e0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b3e:	2300      	movs	r3, #0
 8000b40:	603b      	str	r3, [r7, #0]
 8000b42:	4b31      	ldr	r3, [pc, #196]	@ (8000c08 <SystemClock_Config+0xf0>)
 8000b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b46:	4a30      	ldr	r2, [pc, #192]	@ (8000c08 <SystemClock_Config+0xf0>)
 8000b48:	f023 0301 	bic.w	r3, r3, #1
 8000b4c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000b4e:	4b2e      	ldr	r3, [pc, #184]	@ (8000c08 <SystemClock_Config+0xf0>)
 8000b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	603b      	str	r3, [r7, #0]
 8000b58:	4b2c      	ldr	r3, [pc, #176]	@ (8000c0c <SystemClock_Config+0xf4>)
 8000b5a:	699b      	ldr	r3, [r3, #24]
 8000b5c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b60:	4a2a      	ldr	r2, [pc, #168]	@ (8000c0c <SystemClock_Config+0xf4>)
 8000b62:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b66:	6193      	str	r3, [r2, #24]
 8000b68:	4b28      	ldr	r3, [pc, #160]	@ (8000c0c <SystemClock_Config+0xf4>)
 8000b6a:	699b      	ldr	r3, [r3, #24]
 8000b6c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b70:	603b      	str	r3, [r7, #0]
 8000b72:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b74:	bf00      	nop
 8000b76:	4b25      	ldr	r3, [pc, #148]	@ (8000c0c <SystemClock_Config+0xf4>)
 8000b78:	699b      	ldr	r3, [r3, #24]
 8000b7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b82:	d1f8      	bne.n	8000b76 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b84:	2302      	movs	r3, #2
 8000b86:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b8c:	2340      	movs	r3, #64	@ 0x40
 8000b8e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b90:	2302      	movs	r3, #2
 8000b92:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b94:	2300      	movs	r3, #0
 8000b96:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b98:	2304      	movs	r3, #4
 8000b9a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000b9c:	230a      	movs	r3, #10
 8000b9e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000bac:	230c      	movs	r3, #12
 8000bae:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f006 fae9 	bl	8007194 <HAL_RCC_OscConfig>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000bc8:	f000 fb20 	bl	800120c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bcc:	233f      	movs	r3, #63	@ 0x3f
 8000bce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000be0:	2300      	movs	r3, #0
 8000be2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000be4:	2300      	movs	r3, #0
 8000be6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000be8:	2300      	movs	r3, #0
 8000bea:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000bec:	1d3b      	adds	r3, r7, #4
 8000bee:	2101      	movs	r1, #1
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f006 ff29 	bl	8007a48 <HAL_RCC_ClockConfig>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000bfc:	f000 fb06 	bl	800120c <Error_Handler>
  }
}
 8000c00:	bf00      	nop
 8000c02:	3770      	adds	r7, #112	@ 0x70
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	58000400 	.word	0x58000400
 8000c0c:	58024800 	.word	0x58024800

08000c10 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b08a      	sub	sp, #40	@ 0x28
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c16:	f107 031c 	add.w	r3, r7, #28
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	605a      	str	r2, [r3, #4]
 8000c20:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c22:	463b      	mov	r3, r7
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]
 8000c30:	615a      	str	r2, [r3, #20]
 8000c32:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c34:	4b8a      	ldr	r3, [pc, #552]	@ (8000e60 <MX_ADC1_Init+0x250>)
 8000c36:	4a8b      	ldr	r2, [pc, #556]	@ (8000e64 <MX_ADC1_Init+0x254>)
 8000c38:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV64;
 8000c3a:	4b89      	ldr	r3, [pc, #548]	@ (8000e60 <MX_ADC1_Init+0x250>)
 8000c3c:	f44f 1210 	mov.w	r2, #2359296	@ 0x240000
 8000c40:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c42:	4b87      	ldr	r3, [pc, #540]	@ (8000e60 <MX_ADC1_Init+0x250>)
 8000c44:	2208      	movs	r2, #8
 8000c46:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c48:	4b85      	ldr	r3, [pc, #532]	@ (8000e60 <MX_ADC1_Init+0x250>)
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000c4e:	4b84      	ldr	r3, [pc, #528]	@ (8000e60 <MX_ADC1_Init+0x250>)
 8000c50:	2208      	movs	r2, #8
 8000c52:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c54:	4b82      	ldr	r3, [pc, #520]	@ (8000e60 <MX_ADC1_Init+0x250>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c5a:	4b81      	ldr	r3, [pc, #516]	@ (8000e60 <MX_ADC1_Init+0x250>)
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 13;
 8000c60:	4b7f      	ldr	r3, [pc, #508]	@ (8000e60 <MX_ADC1_Init+0x250>)
 8000c62:	220d      	movs	r2, #13
 8000c64:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c66:	4b7e      	ldr	r3, [pc, #504]	@ (8000e60 <MX_ADC1_Init+0x250>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c6c:	4b7c      	ldr	r3, [pc, #496]	@ (8000e60 <MX_ADC1_Init+0x250>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c72:	4b7b      	ldr	r3, [pc, #492]	@ (8000e60 <MX_ADC1_Init+0x250>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000c78:	4b79      	ldr	r3, [pc, #484]	@ (8000e60 <MX_ADC1_Init+0x250>)
 8000c7a:	2203      	movs	r2, #3
 8000c7c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c7e:	4b78      	ldr	r3, [pc, #480]	@ (8000e60 <MX_ADC1_Init+0x250>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c84:	4b76      	ldr	r3, [pc, #472]	@ (8000e60 <MX_ADC1_Init+0x250>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000c8a:	4b75      	ldr	r3, [pc, #468]	@ (8000e60 <MX_ADC1_Init+0x250>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8000c92:	4b73      	ldr	r3, [pc, #460]	@ (8000e60 <MX_ADC1_Init+0x250>)
 8000c94:	2201      	movs	r2, #1
 8000c96:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c98:	4871      	ldr	r0, [pc, #452]	@ (8000e60 <MX_ADC1_Init+0x250>)
 8000c9a:	f002 fa8d 	bl	80031b8 <HAL_ADC_Init>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000ca4:	f000 fab2 	bl	800120c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000cac:	f107 031c 	add.w	r3, r7, #28
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	486b      	ldr	r0, [pc, #428]	@ (8000e60 <MX_ADC1_Init+0x250>)
 8000cb4:	f003 fcba 	bl	800462c <HAL_ADCEx_MultiModeConfigChannel>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000cbe:	f000 faa5 	bl	800120c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000cc2:	4b69      	ldr	r3, [pc, #420]	@ (8000e68 <MX_ADC1_Init+0x258>)
 8000cc4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cc6:	2306      	movs	r3, #6
 8000cc8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8000cca:	2303      	movs	r3, #3
 8000ccc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cce:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000cd2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000cd4:	2304      	movs	r3, #4
 8000cd6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ce0:	463b      	mov	r3, r7
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	485e      	ldr	r0, [pc, #376]	@ (8000e60 <MX_ADC1_Init+0x250>)
 8000ce6:	f002 ff2f 	bl	8003b48 <HAL_ADC_ConfigChannel>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000cf0:	f000 fa8c 	bl	800120c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000cf4:	4b5d      	ldr	r3, [pc, #372]	@ (8000e6c <MX_ADC1_Init+0x25c>)
 8000cf6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000cf8:	230c      	movs	r3, #12
 8000cfa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cfc:	463b      	mov	r3, r7
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4857      	ldr	r0, [pc, #348]	@ (8000e60 <MX_ADC1_Init+0x250>)
 8000d02:	f002 ff21 	bl	8003b48 <HAL_ADC_ConfigChannel>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000d0c:	f000 fa7e 	bl	800120c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000d10:	4b57      	ldr	r3, [pc, #348]	@ (8000e70 <MX_ADC1_Init+0x260>)
 8000d12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000d14:	2312      	movs	r3, #18
 8000d16:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d18:	463b      	mov	r3, r7
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4850      	ldr	r0, [pc, #320]	@ (8000e60 <MX_ADC1_Init+0x250>)
 8000d1e:	f002 ff13 	bl	8003b48 <HAL_ADC_ConfigChannel>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000d28:	f000 fa70 	bl	800120c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000d2c:	4b51      	ldr	r3, [pc, #324]	@ (8000e74 <MX_ADC1_Init+0x264>)
 8000d2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000d30:	2318      	movs	r3, #24
 8000d32:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d34:	463b      	mov	r3, r7
 8000d36:	4619      	mov	r1, r3
 8000d38:	4849      	ldr	r0, [pc, #292]	@ (8000e60 <MX_ADC1_Init+0x250>)
 8000d3a:	f002 ff05 	bl	8003b48 <HAL_ADC_ConfigChannel>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8000d44:	f000 fa62 	bl	800120c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000d48:	4b4b      	ldr	r3, [pc, #300]	@ (8000e78 <MX_ADC1_Init+0x268>)
 8000d4a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000d4c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d50:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d52:	463b      	mov	r3, r7
 8000d54:	4619      	mov	r1, r3
 8000d56:	4842      	ldr	r0, [pc, #264]	@ (8000e60 <MX_ADC1_Init+0x250>)
 8000d58:	f002 fef6 	bl	8003b48 <HAL_ADC_ConfigChannel>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_ADC1_Init+0x156>
  {
    Error_Handler();
 8000d62:	f000 fa53 	bl	800120c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000d66:	4b45      	ldr	r3, [pc, #276]	@ (8000e7c <MX_ADC1_Init+0x26c>)
 8000d68:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000d6a:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8000d6e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d70:	463b      	mov	r3, r7
 8000d72:	4619      	mov	r1, r3
 8000d74:	483a      	ldr	r0, [pc, #232]	@ (8000e60 <MX_ADC1_Init+0x250>)
 8000d76:	f002 fee7 	bl	8003b48 <HAL_ADC_ConfigChannel>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_ADC1_Init+0x174>
  {
    Error_Handler();
 8000d80:	f000 fa44 	bl	800120c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000d84:	4b3e      	ldr	r3, [pc, #248]	@ (8000e80 <MX_ADC1_Init+0x270>)
 8000d86:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000d88:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 8000d8c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d8e:	463b      	mov	r3, r7
 8000d90:	4619      	mov	r1, r3
 8000d92:	4833      	ldr	r0, [pc, #204]	@ (8000e60 <MX_ADC1_Init+0x250>)
 8000d94:	f002 fed8 	bl	8003b48 <HAL_ADC_ConfigChannel>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_ADC1_Init+0x192>
  {
    Error_Handler();
 8000d9e:	f000 fa35 	bl	800120c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000da2:	4b38      	ldr	r3, [pc, #224]	@ (8000e84 <MX_ADC1_Init+0x274>)
 8000da4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000da6:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8000daa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dac:	463b      	mov	r3, r7
 8000dae:	4619      	mov	r1, r3
 8000db0:	482b      	ldr	r0, [pc, #172]	@ (8000e60 <MX_ADC1_Init+0x250>)
 8000db2:	f002 fec9 	bl	8003b48 <HAL_ADC_ConfigChannel>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_ADC1_Init+0x1b0>
  {
    Error_Handler();
 8000dbc:	f000 fa26 	bl	800120c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000dc0:	4b31      	ldr	r3, [pc, #196]	@ (8000e88 <MX_ADC1_Init+0x278>)
 8000dc2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000dc4:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8000dc8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dca:	463b      	mov	r3, r7
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4824      	ldr	r0, [pc, #144]	@ (8000e60 <MX_ADC1_Init+0x250>)
 8000dd0:	f002 feba 	bl	8003b48 <HAL_ADC_ConfigChannel>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_ADC1_Init+0x1ce>
  {
    Error_Handler();
 8000dda:	f000 fa17 	bl	800120c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000dde:	4b2b      	ldr	r3, [pc, #172]	@ (8000e8c <MX_ADC1_Init+0x27c>)
 8000de0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000de2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000de6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000de8:	463b      	mov	r3, r7
 8000dea:	4619      	mov	r1, r3
 8000dec:	481c      	ldr	r0, [pc, #112]	@ (8000e60 <MX_ADC1_Init+0x250>)
 8000dee:	f002 feab 	bl	8003b48 <HAL_ADC_ConfigChannel>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_ADC1_Init+0x1ec>
  {
    Error_Handler();
 8000df8:	f000 fa08 	bl	800120c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8000dfc:	4b24      	ldr	r3, [pc, #144]	@ (8000e90 <MX_ADC1_Init+0x280>)
 8000dfe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8000e00:	f240 2306 	movw	r3, #518	@ 0x206
 8000e04:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e06:	463b      	mov	r3, r7
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4815      	ldr	r0, [pc, #84]	@ (8000e60 <MX_ADC1_Init+0x250>)
 8000e0c:	f002 fe9c 	bl	8003b48 <HAL_ADC_ConfigChannel>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_ADC1_Init+0x20a>
  {
    Error_Handler();
 8000e16:	f000 f9f9 	bl	800120c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 8000e1a:	4b1e      	ldr	r3, [pc, #120]	@ (8000e94 <MX_ADC1_Init+0x284>)
 8000e1c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8000e1e:	f44f 7303 	mov.w	r3, #524	@ 0x20c
 8000e22:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e24:	463b      	mov	r3, r7
 8000e26:	4619      	mov	r1, r3
 8000e28:	480d      	ldr	r0, [pc, #52]	@ (8000e60 <MX_ADC1_Init+0x250>)
 8000e2a:	f002 fe8d 	bl	8003b48 <HAL_ADC_ConfigChannel>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_ADC1_Init+0x228>
  {
    Error_Handler();
 8000e34:	f000 f9ea 	bl	800120c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 8000e38:	4b17      	ldr	r3, [pc, #92]	@ (8000e98 <MX_ADC1_Init+0x288>)
 8000e3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8000e3c:	f240 2312 	movw	r3, #530	@ 0x212
 8000e40:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e42:	463b      	mov	r3, r7
 8000e44:	4619      	mov	r1, r3
 8000e46:	4806      	ldr	r0, [pc, #24]	@ (8000e60 <MX_ADC1_Init+0x250>)
 8000e48:	f002 fe7e 	bl	8003b48 <HAL_ADC_ConfigChannel>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_ADC1_Init+0x246>
  {
    Error_Handler();
 8000e52:	f000 f9db 	bl	800120c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e56:	bf00      	nop
 8000e58:	3728      	adds	r7, #40	@ 0x28
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	240000b8 	.word	0x240000b8
 8000e64:	40022000 	.word	0x40022000
 8000e68:	08600004 	.word	0x08600004
 8000e6c:	0c900008 	.word	0x0c900008
 8000e70:	10c00010 	.word	0x10c00010
 8000e74:	1d500080 	.word	0x1d500080
 8000e78:	21800100 	.word	0x21800100
 8000e7c:	2a000400 	.word	0x2a000400
 8000e80:	2e300800 	.word	0x2e300800
 8000e84:	3ac04000 	.word	0x3ac04000
 8000e88:	3ef08000 	.word	0x3ef08000
 8000e8c:	43210000 	.word	0x43210000
 8000e90:	47520000 	.word	0x47520000
 8000e94:	4b840000 	.word	0x4b840000
 8000e98:	4fb80000 	.word	0x4fb80000

08000e9c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ea0:	4b28      	ldr	r3, [pc, #160]	@ (8000f44 <MX_SPI1_Init+0xa8>)
 8000ea2:	4a29      	ldr	r2, [pc, #164]	@ (8000f48 <MX_SPI1_Init+0xac>)
 8000ea4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ea6:	4b27      	ldr	r3, [pc, #156]	@ (8000f44 <MX_SPI1_Init+0xa8>)
 8000ea8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000eac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000eae:	4b25      	ldr	r3, [pc, #148]	@ (8000f44 <MX_SPI1_Init+0xa8>)
 8000eb0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000eb4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000eb6:	4b23      	ldr	r3, [pc, #140]	@ (8000f44 <MX_SPI1_Init+0xa8>)
 8000eb8:	2207      	movs	r2, #7
 8000eba:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ebc:	4b21      	ldr	r3, [pc, #132]	@ (8000f44 <MX_SPI1_Init+0xa8>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ec2:	4b20      	ldr	r3, [pc, #128]	@ (8000f44 <MX_SPI1_Init+0xa8>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ec8:	4b1e      	ldr	r3, [pc, #120]	@ (8000f44 <MX_SPI1_Init+0xa8>)
 8000eca:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000ece:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000ed0:	4b1c      	ldr	r3, [pc, #112]	@ (8000f44 <MX_SPI1_Init+0xa8>)
 8000ed2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000ed6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ed8:	4b1a      	ldr	r3, [pc, #104]	@ (8000f44 <MX_SPI1_Init+0xa8>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ede:	4b19      	ldr	r3, [pc, #100]	@ (8000f44 <MX_SPI1_Init+0xa8>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ee4:	4b17      	ldr	r3, [pc, #92]	@ (8000f44 <MX_SPI1_Init+0xa8>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000eea:	4b16      	ldr	r3, [pc, #88]	@ (8000f44 <MX_SPI1_Init+0xa8>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ef0:	4b14      	ldr	r3, [pc, #80]	@ (8000f44 <MX_SPI1_Init+0xa8>)
 8000ef2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ef6:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000ef8:	4b12      	ldr	r3, [pc, #72]	@ (8000f44 <MX_SPI1_Init+0xa8>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000efe:	4b11      	ldr	r3, [pc, #68]	@ (8000f44 <MX_SPI1_Init+0xa8>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f04:	4b0f      	ldr	r3, [pc, #60]	@ (8000f44 <MX_SPI1_Init+0xa8>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f44 <MX_SPI1_Init+0xa8>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000f10:	4b0c      	ldr	r3, [pc, #48]	@ (8000f44 <MX_SPI1_Init+0xa8>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000f16:	4b0b      	ldr	r3, [pc, #44]	@ (8000f44 <MX_SPI1_Init+0xa8>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000f1c:	4b09      	ldr	r3, [pc, #36]	@ (8000f44 <MX_SPI1_Init+0xa8>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000f22:	4b08      	ldr	r3, [pc, #32]	@ (8000f44 <MX_SPI1_Init+0xa8>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000f28:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <MX_SPI1_Init+0xa8>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f2e:	4805      	ldr	r0, [pc, #20]	@ (8000f44 <MX_SPI1_Init+0xa8>)
 8000f30:	f009 fe14 	bl	800ab5c <HAL_SPI_Init>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8000f3a:	f000 f967 	bl	800120c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	24000194 	.word	0x24000194
 8000f48:	40013000 	.word	0x40013000

08000f4c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b088      	sub	sp, #32
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f52:	f107 0310 	add.w	r3, r7, #16
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	609a      	str	r2, [r3, #8]
 8000f5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f60:	1d3b      	adds	r3, r7, #4
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f6a:	4b1e      	ldr	r3, [pc, #120]	@ (8000fe4 <MX_TIM2_Init+0x98>)
 8000f6c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f70:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 8000f72:	4b1c      	ldr	r3, [pc, #112]	@ (8000fe4 <MX_TIM2_Init+0x98>)
 8000f74:	223f      	movs	r2, #63	@ 0x3f
 8000f76:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f78:	4b1a      	ldr	r3, [pc, #104]	@ (8000fe4 <MX_TIM2_Init+0x98>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000f7e:	4b19      	ldr	r3, [pc, #100]	@ (8000fe4 <MX_TIM2_Init+0x98>)
 8000f80:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f84:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f86:	4b17      	ldr	r3, [pc, #92]	@ (8000fe4 <MX_TIM2_Init+0x98>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f8c:	4b15      	ldr	r3, [pc, #84]	@ (8000fe4 <MX_TIM2_Init+0x98>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f92:	4814      	ldr	r0, [pc, #80]	@ (8000fe4 <MX_TIM2_Init+0x98>)
 8000f94:	f00a fa33 	bl	800b3fe <HAL_TIM_Base_Init>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000f9e:	f000 f935 	bl	800120c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fa2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fa6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fa8:	f107 0310 	add.w	r3, r7, #16
 8000fac:	4619      	mov	r1, r3
 8000fae:	480d      	ldr	r0, [pc, #52]	@ (8000fe4 <MX_TIM2_Init+0x98>)
 8000fb0:	f00a fbfc 	bl	800b7ac <HAL_TIM_ConfigClockSource>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000fba:	f000 f927 	bl	800120c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fc6:	1d3b      	adds	r3, r7, #4
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4806      	ldr	r0, [pc, #24]	@ (8000fe4 <MX_TIM2_Init+0x98>)
 8000fcc:	f00a fe4c 	bl	800bc68 <HAL_TIMEx_MasterConfigSynchronization>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000fd6:	f000 f919 	bl	800120c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fda:	bf00      	nop
 8000fdc:	3720      	adds	r7, #32
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	2400021c 	.word	0x2400021c

08000fe8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fee:	4b0d      	ldr	r3, [pc, #52]	@ (8001024 <MX_DMA_Init+0x3c>)
 8000ff0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ff4:	4a0b      	ldr	r2, [pc, #44]	@ (8001024 <MX_DMA_Init+0x3c>)
 8000ff6:	f043 0301 	orr.w	r3, r3, #1
 8000ffa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000ffe:	4b09      	ldr	r3, [pc, #36]	@ (8001024 <MX_DMA_Init+0x3c>)
 8001000:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001004:	f003 0301 	and.w	r3, r3, #1
 8001008:	607b      	str	r3, [r7, #4]
 800100a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800100c:	2200      	movs	r2, #0
 800100e:	2100      	movs	r1, #0
 8001010:	200b      	movs	r0, #11
 8001012:	f003 fcc4 	bl	800499e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001016:	200b      	movs	r0, #11
 8001018:	f003 fcdb 	bl	80049d2 <HAL_NVIC_EnableIRQ>

}
 800101c:	bf00      	nop
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	58024400 	.word	0x58024400

08001028 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b08c      	sub	sp, #48	@ 0x30
 800102c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102e:	f107 031c 	add.w	r3, r7, #28
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	605a      	str	r2, [r3, #4]
 8001038:	609a      	str	r2, [r3, #8]
 800103a:	60da      	str	r2, [r3, #12]
 800103c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800103e:	4b63      	ldr	r3, [pc, #396]	@ (80011cc <MX_GPIO_Init+0x1a4>)
 8001040:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001044:	4a61      	ldr	r2, [pc, #388]	@ (80011cc <MX_GPIO_Init+0x1a4>)
 8001046:	f043 0310 	orr.w	r3, r3, #16
 800104a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800104e:	4b5f      	ldr	r3, [pc, #380]	@ (80011cc <MX_GPIO_Init+0x1a4>)
 8001050:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001054:	f003 0310 	and.w	r3, r3, #16
 8001058:	61bb      	str	r3, [r7, #24]
 800105a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800105c:	4b5b      	ldr	r3, [pc, #364]	@ (80011cc <MX_GPIO_Init+0x1a4>)
 800105e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001062:	4a5a      	ldr	r2, [pc, #360]	@ (80011cc <MX_GPIO_Init+0x1a4>)
 8001064:	f043 0320 	orr.w	r3, r3, #32
 8001068:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800106c:	4b57      	ldr	r3, [pc, #348]	@ (80011cc <MX_GPIO_Init+0x1a4>)
 800106e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001072:	f003 0320 	and.w	r3, r3, #32
 8001076:	617b      	str	r3, [r7, #20]
 8001078:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800107a:	4b54      	ldr	r3, [pc, #336]	@ (80011cc <MX_GPIO_Init+0x1a4>)
 800107c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001080:	4a52      	ldr	r2, [pc, #328]	@ (80011cc <MX_GPIO_Init+0x1a4>)
 8001082:	f043 0304 	orr.w	r3, r3, #4
 8001086:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800108a:	4b50      	ldr	r3, [pc, #320]	@ (80011cc <MX_GPIO_Init+0x1a4>)
 800108c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001090:	f003 0304 	and.w	r3, r3, #4
 8001094:	613b      	str	r3, [r7, #16]
 8001096:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001098:	4b4c      	ldr	r3, [pc, #304]	@ (80011cc <MX_GPIO_Init+0x1a4>)
 800109a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800109e:	4a4b      	ldr	r2, [pc, #300]	@ (80011cc <MX_GPIO_Init+0x1a4>)
 80010a0:	f043 0301 	orr.w	r3, r3, #1
 80010a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010a8:	4b48      	ldr	r3, [pc, #288]	@ (80011cc <MX_GPIO_Init+0x1a4>)
 80010aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010b6:	4b45      	ldr	r3, [pc, #276]	@ (80011cc <MX_GPIO_Init+0x1a4>)
 80010b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010bc:	4a43      	ldr	r2, [pc, #268]	@ (80011cc <MX_GPIO_Init+0x1a4>)
 80010be:	f043 0308 	orr.w	r3, r3, #8
 80010c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010c6:	4b41      	ldr	r3, [pc, #260]	@ (80011cc <MX_GPIO_Init+0x1a4>)
 80010c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010cc:	f003 0308 	and.w	r3, r3, #8
 80010d0:	60bb      	str	r3, [r7, #8]
 80010d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010d4:	4b3d      	ldr	r3, [pc, #244]	@ (80011cc <MX_GPIO_Init+0x1a4>)
 80010d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010da:	4a3c      	ldr	r2, [pc, #240]	@ (80011cc <MX_GPIO_Init+0x1a4>)
 80010dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010e4:	4b39      	ldr	r3, [pc, #228]	@ (80011cc <MX_GPIO_Init+0x1a4>)
 80010e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010ee:	607b      	str	r3, [r7, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80010f2:	2200      	movs	r2, #0
 80010f4:	f64f 71fd 	movw	r1, #65533	@ 0xfffd
 80010f8:	4835      	ldr	r0, [pc, #212]	@ (80011d0 <MX_GPIO_Init+0x1a8>)
 80010fa:	f005 ff8f 	bl	800701c <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80010fe:	2200      	movs	r2, #0
 8001100:	f647 41ff 	movw	r1, #31999	@ 0x7cff
 8001104:	4833      	ldr	r0, [pc, #204]	@ (80011d4 <MX_GPIO_Init+0x1ac>)
 8001106:	f005 ff89 	bl	800701c <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800110a:	2200      	movs	r2, #0
 800110c:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 8001110:	4831      	ldr	r0, [pc, #196]	@ (80011d8 <MX_GPIO_Init+0x1b0>)
 8001112:	f005 ff83 	bl	800701c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001116:	f64f 73fd 	movw	r3, #65533	@ 0xfffd
 800111a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111c:	2301      	movs	r3, #1
 800111e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001124:	2300      	movs	r3, #0
 8001126:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001128:	f107 031c 	add.w	r3, r7, #28
 800112c:	4619      	mov	r1, r3
 800112e:	4828      	ldr	r0, [pc, #160]	@ (80011d0 <MX_GPIO_Init+0x1a8>)
 8001130:	f005 fdc4 	bl	8006cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8001134:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8001138:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800113a:	2303      	movs	r3, #3
 800113c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001142:	f107 031c 	add.w	r3, r7, #28
 8001146:	4619      	mov	r1, r3
 8001148:	4824      	ldr	r0, [pc, #144]	@ (80011dc <MX_GPIO_Init+0x1b4>)
 800114a:	f005 fdb7 	bl	8006cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin PD11 PD12 PD13
                           PD14 PD0 PD1 PD2
                           PD3 PD4 PD5 PD6
                           PD7 */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800114e:	f647 43ff 	movw	r3, #31999	@ 0x7cff
 8001152:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001154:	2301      	movs	r3, #1
 8001156:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115c:	2300      	movs	r3, #0
 800115e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001160:	f107 031c 	add.w	r3, r7, #28
 8001164:	4619      	mov	r1, r3
 8001166:	481b      	ldr	r0, [pc, #108]	@ (80011d4 <MX_GPIO_Init+0x1ac>)
 8001168:	f005 fda8 	bl	8006cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800116c:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001170:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001172:	2301      	movs	r3, #1
 8001174:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117a:	2300      	movs	r3, #0
 800117c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800117e:	f107 031c 	add.w	r3, r7, #28
 8001182:	4619      	mov	r1, r3
 8001184:	4814      	ldr	r0, [pc, #80]	@ (80011d8 <MX_GPIO_Init+0x1b0>)
 8001186:	f005 fd99 	bl	8006cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800118a:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 800118e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001190:	2302      	movs	r3, #2
 8001192:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001198:	2300      	movs	r3, #0
 800119a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800119c:	230a      	movs	r3, #10
 800119e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a0:	f107 031c 	add.w	r3, r7, #28
 80011a4:	4619      	mov	r1, r3
 80011a6:	480e      	ldr	r0, [pc, #56]	@ (80011e0 <MX_GPIO_Init+0x1b8>)
 80011a8:	f005 fd88 	bl	8006cbc <HAL_GPIO_Init>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 80011ac:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 80011b0:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 80011b4:	f001 fdae 	bl	8002d14 <HAL_SYSCFG_AnalogSwitchConfig>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80011b8:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 80011bc:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 80011c0:	f001 fda8 	bl	8002d14 <HAL_SYSCFG_AnalogSwitchConfig>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80011c4:	bf00      	nop
 80011c6:	3730      	adds	r7, #48	@ 0x30
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	58024400 	.word	0x58024400
 80011d0:	58021000 	.word	0x58021000
 80011d4:	58020c00 	.word	0x58020c00
 80011d8:	58020800 	.word	0x58020800
 80011dc:	58021400 	.word	0x58021400
 80011e0:	58020000 	.word	0x58020000

080011e4 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d102      	bne.n	80011fa <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 80011f4:	4b04      	ldr	r3, [pc, #16]	@ (8001208 <BSP_PB_Callback+0x24>)
 80011f6:	2201      	movs	r2, #1
 80011f8:	601a      	str	r2, [r3, #0]
  }
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	240000b4 	.word	0x240000b4

0800120c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001210:	b672      	cpsid	i
}
 8001212:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001214:	bf00      	nop
 8001216:	e7fd      	b.n	8001214 <Error_Handler+0x8>

08001218 <InitPT>:

extern void Error_Handler(void);


void InitPT(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
    if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, N_ADC_CH) != HAL_OK)
 800121c:	220d      	movs	r2, #13
 800121e:	4905      	ldr	r1, [pc, #20]	@ (8001234 <InitPT+0x1c>)
 8001220:	4805      	ldr	r0, [pc, #20]	@ (8001238 <InitPT+0x20>)
 8001222:	f002 f96b 	bl	80034fc <HAL_ADC_Start_DMA>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <InitPT+0x18>
    {
        Error_Handler();
 800122c:	f7ff ffee 	bl	800120c <Error_Handler>
    }
}
 8001230:	bf00      	nop
 8001232:	bd80      	pop	{r7, pc}
 8001234:	240002dc 	.word	0x240002dc
 8001238:	240000b8 	.word	0x240000b8

0800123c <GetADCRaw>:

void GetADCRaw(uint16_t* buf)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
	memcpy((void*)buf, (void*)adc_buffer, sizeof(uint16_t)*N_ADC_CH);
 8001244:	221a      	movs	r2, #26
 8001246:	4904      	ldr	r1, [pc, #16]	@ (8001258 <GetADCRaw+0x1c>)
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f00c f850 	bl	800d2ee <memcpy>
}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	240002dc 	.word	0x240002dc

0800125c <sv_single_con>:

#include "solenoidvalve.h"
#include <stdint.h>

void sv_single_con(uint8_t* ch)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i<MAX_SV_NUM; i++) {
 8001264:	2300      	movs	r3, #0
 8001266:	73fb      	strb	r3, [r7, #15]
 8001268:	e0d1      	b.n	800140e <sv_single_con+0x1b2>
		switch(i) {
 800126a:	7bfb      	ldrb	r3, [r7, #15]
 800126c:	2b09      	cmp	r3, #9
 800126e:	f200 80ca 	bhi.w	8001406 <sv_single_con+0x1aa>
 8001272:	a201      	add	r2, pc, #4	@ (adr r2, 8001278 <sv_single_con+0x1c>)
 8001274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001278:	080012a1 	.word	0x080012a1
 800127c:	080012c1 	.word	0x080012c1
 8001280:	080012e3 	.word	0x080012e3
 8001284:	08001305 	.word	0x08001305
 8001288:	08001327 	.word	0x08001327
 800128c:	0800134d 	.word	0x0800134d
 8001290:	08001373 	.word	0x08001373
 8001294:	08001399 	.word	0x08001399
 8001298:	080013bf 	.word	0x080013bf
 800129c:	080013e1 	.word	0x080013e1
		case 0: // SV CH1
			if (ch[0] == 0) {
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d105      	bne.n	80012b4 <sv_single_con+0x58>
				HAL_GPIO_WritePin(SV_CH1_PORT, SV_CH1_GPIO, GPIO_PIN_RESET);
 80012a8:	2200      	movs	r2, #0
 80012aa:	2101      	movs	r1, #1
 80012ac:	485c      	ldr	r0, [pc, #368]	@ (8001420 <sv_single_con+0x1c4>)
 80012ae:	f005 feb5 	bl	800701c <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(SV_CH1_PORT, SV_CH1_GPIO, GPIO_PIN_SET);
			}
			break;
 80012b2:	e0a9      	b.n	8001408 <sv_single_con+0x1ac>
				HAL_GPIO_WritePin(SV_CH1_PORT, SV_CH1_GPIO, GPIO_PIN_SET);
 80012b4:	2201      	movs	r2, #1
 80012b6:	2101      	movs	r1, #1
 80012b8:	4859      	ldr	r0, [pc, #356]	@ (8001420 <sv_single_con+0x1c4>)
 80012ba:	f005 feaf 	bl	800701c <HAL_GPIO_WritePin>
			break;
 80012be:	e0a3      	b.n	8001408 <sv_single_con+0x1ac>
		case 1:
			if (ch[1] == 0) {
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	3301      	adds	r3, #1
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d105      	bne.n	80012d6 <sv_single_con+0x7a>
				HAL_GPIO_WritePin(SV_CH2_PORT, SV_CH2_GPIO, GPIO_PIN_RESET);
 80012ca:	2200      	movs	r2, #0
 80012cc:	2108      	movs	r1, #8
 80012ce:	4854      	ldr	r0, [pc, #336]	@ (8001420 <sv_single_con+0x1c4>)
 80012d0:	f005 fea4 	bl	800701c <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(SV_CH2_PORT, SV_CH2_GPIO, GPIO_PIN_SET);
			}
			break;
 80012d4:	e098      	b.n	8001408 <sv_single_con+0x1ac>
				HAL_GPIO_WritePin(SV_CH2_PORT, SV_CH2_GPIO, GPIO_PIN_SET);
 80012d6:	2201      	movs	r2, #1
 80012d8:	2108      	movs	r1, #8
 80012da:	4851      	ldr	r0, [pc, #324]	@ (8001420 <sv_single_con+0x1c4>)
 80012dc:	f005 fe9e 	bl	800701c <HAL_GPIO_WritePin>
			break;
 80012e0:	e092      	b.n	8001408 <sv_single_con+0x1ac>
		case 2:
			if (ch[2] == 0) {
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	3302      	adds	r3, #2
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d105      	bne.n	80012f8 <sv_single_con+0x9c>
				HAL_GPIO_WritePin(SV_CH3_PORT, SV_CH3_GPIO, GPIO_PIN_RESET);
 80012ec:	2200      	movs	r2, #0
 80012ee:	2110      	movs	r1, #16
 80012f0:	484b      	ldr	r0, [pc, #300]	@ (8001420 <sv_single_con+0x1c4>)
 80012f2:	f005 fe93 	bl	800701c <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(SV_CH3_PORT, SV_CH3_GPIO, GPIO_PIN_SET);
			}
			break;
 80012f6:	e087      	b.n	8001408 <sv_single_con+0x1ac>
				HAL_GPIO_WritePin(SV_CH3_PORT, SV_CH3_GPIO, GPIO_PIN_SET);
 80012f8:	2201      	movs	r2, #1
 80012fa:	2110      	movs	r1, #16
 80012fc:	4848      	ldr	r0, [pc, #288]	@ (8001420 <sv_single_con+0x1c4>)
 80012fe:	f005 fe8d 	bl	800701c <HAL_GPIO_WritePin>
			break;
 8001302:	e081      	b.n	8001408 <sv_single_con+0x1ac>
		case 3:
			if (ch[3] == 0) {
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3303      	adds	r3, #3
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d105      	bne.n	800131a <sv_single_con+0xbe>
				HAL_GPIO_WritePin(SV_CH4_PORT, SV_CH4_GPIO, GPIO_PIN_RESET);
 800130e:	2200      	movs	r2, #0
 8001310:	2180      	movs	r1, #128	@ 0x80
 8001312:	4843      	ldr	r0, [pc, #268]	@ (8001420 <sv_single_con+0x1c4>)
 8001314:	f005 fe82 	bl	800701c <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(SV_CH4_PORT, SV_CH4_GPIO, GPIO_PIN_SET);
			}
			break;
 8001318:	e076      	b.n	8001408 <sv_single_con+0x1ac>
				HAL_GPIO_WritePin(SV_CH4_PORT, SV_CH4_GPIO, GPIO_PIN_SET);
 800131a:	2201      	movs	r2, #1
 800131c:	2180      	movs	r1, #128	@ 0x80
 800131e:	4840      	ldr	r0, [pc, #256]	@ (8001420 <sv_single_con+0x1c4>)
 8001320:	f005 fe7c 	bl	800701c <HAL_GPIO_WritePin>
			break;
 8001324:	e070      	b.n	8001408 <sv_single_con+0x1ac>
		case 4:
			if (ch[4] == 0) {
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	3304      	adds	r3, #4
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d106      	bne.n	800133e <sv_single_con+0xe2>
				HAL_GPIO_WritePin(SV_CH5_PORT, SV_CH5_GPIO, GPIO_PIN_RESET);
 8001330:	2200      	movs	r2, #0
 8001332:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001336:	483a      	ldr	r0, [pc, #232]	@ (8001420 <sv_single_con+0x1c4>)
 8001338:	f005 fe70 	bl	800701c <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(SV_CH5_PORT, SV_CH5_GPIO, GPIO_PIN_SET);
			}
			break;
 800133c:	e064      	b.n	8001408 <sv_single_con+0x1ac>
				HAL_GPIO_WritePin(SV_CH5_PORT, SV_CH5_GPIO, GPIO_PIN_SET);
 800133e:	2201      	movs	r2, #1
 8001340:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001344:	4836      	ldr	r0, [pc, #216]	@ (8001420 <sv_single_con+0x1c4>)
 8001346:	f005 fe69 	bl	800701c <HAL_GPIO_WritePin>
			break;
 800134a:	e05d      	b.n	8001408 <sv_single_con+0x1ac>
		case 5:
			if (ch[5] == 0) {
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	3305      	adds	r3, #5
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d106      	bne.n	8001364 <sv_single_con+0x108>
				HAL_GPIO_WritePin(SV_CH6_PORT, SV_CH6_GPIO, GPIO_PIN_RESET);
 8001356:	2200      	movs	r2, #0
 8001358:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800135c:	4830      	ldr	r0, [pc, #192]	@ (8001420 <sv_single_con+0x1c4>)
 800135e:	f005 fe5d 	bl	800701c <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(SV_CH6_PORT, SV_CH6_GPIO, GPIO_PIN_SET);
			}
			break;
 8001362:	e051      	b.n	8001408 <sv_single_con+0x1ac>
				HAL_GPIO_WritePin(SV_CH6_PORT, SV_CH6_GPIO, GPIO_PIN_SET);
 8001364:	2201      	movs	r2, #1
 8001366:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800136a:	482d      	ldr	r0, [pc, #180]	@ (8001420 <sv_single_con+0x1c4>)
 800136c:	f005 fe56 	bl	800701c <HAL_GPIO_WritePin>
			break;
 8001370:	e04a      	b.n	8001408 <sv_single_con+0x1ac>
		case 6:
			if (ch[6] == 0) {
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	3306      	adds	r3, #6
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d106      	bne.n	800138a <sv_single_con+0x12e>
				HAL_GPIO_WritePin(SV_CH7_PORT, SV_CH7_GPIO, GPIO_PIN_RESET);
 800137c:	2200      	movs	r2, #0
 800137e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001382:	4827      	ldr	r0, [pc, #156]	@ (8001420 <sv_single_con+0x1c4>)
 8001384:	f005 fe4a 	bl	800701c <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(SV_CH7_PORT, SV_CH7_GPIO, GPIO_PIN_SET);
			}
			break;
 8001388:	e03e      	b.n	8001408 <sv_single_con+0x1ac>
				HAL_GPIO_WritePin(SV_CH7_PORT, SV_CH7_GPIO, GPIO_PIN_SET);
 800138a:	2201      	movs	r2, #1
 800138c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001390:	4823      	ldr	r0, [pc, #140]	@ (8001420 <sv_single_con+0x1c4>)
 8001392:	f005 fe43 	bl	800701c <HAL_GPIO_WritePin>
			break;
 8001396:	e037      	b.n	8001408 <sv_single_con+0x1ac>
		case 7:
			if (ch[7] == 0) {
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	3307      	adds	r3, #7
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d106      	bne.n	80013b0 <sv_single_con+0x154>
				HAL_GPIO_WritePin(SV_CH8_PORT, SV_CH8_GPIO, GPIO_PIN_RESET);
 80013a2:	2200      	movs	r2, #0
 80013a4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80013a8:	481d      	ldr	r0, [pc, #116]	@ (8001420 <sv_single_con+0x1c4>)
 80013aa:	f005 fe37 	bl	800701c <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(SV_CH8_PORT, SV_CH8_GPIO, GPIO_PIN_SET);
			}
			break;
 80013ae:	e02b      	b.n	8001408 <sv_single_con+0x1ac>
				HAL_GPIO_WritePin(SV_CH8_PORT, SV_CH8_GPIO, GPIO_PIN_SET);
 80013b0:	2201      	movs	r2, #1
 80013b2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80013b6:	481a      	ldr	r0, [pc, #104]	@ (8001420 <sv_single_con+0x1c4>)
 80013b8:	f005 fe30 	bl	800701c <HAL_GPIO_WritePin>
			break;
 80013bc:	e024      	b.n	8001408 <sv_single_con+0x1ac>
		case 8:
			if (ch[8] == 0) {
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	3308      	adds	r3, #8
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d105      	bne.n	80013d4 <sv_single_con+0x178>
				HAL_GPIO_WritePin(SV_CH9_PORT, SV_CH9_GPIO, GPIO_PIN_RESET);
 80013c8:	2200      	movs	r2, #0
 80013ca:	2140      	movs	r1, #64	@ 0x40
 80013cc:	4815      	ldr	r0, [pc, #84]	@ (8001424 <sv_single_con+0x1c8>)
 80013ce:	f005 fe25 	bl	800701c <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(SV_CH9_PORT, SV_CH9_GPIO, GPIO_PIN_SET);
			}
			break;
 80013d2:	e019      	b.n	8001408 <sv_single_con+0x1ac>
				HAL_GPIO_WritePin(SV_CH9_PORT, SV_CH9_GPIO, GPIO_PIN_SET);
 80013d4:	2201      	movs	r2, #1
 80013d6:	2140      	movs	r1, #64	@ 0x40
 80013d8:	4812      	ldr	r0, [pc, #72]	@ (8001424 <sv_single_con+0x1c8>)
 80013da:	f005 fe1f 	bl	800701c <HAL_GPIO_WritePin>
			break;
 80013de:	e013      	b.n	8001408 <sv_single_con+0x1ac>
		case 9:
			if (ch[9] == 0) {
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	3309      	adds	r3, #9
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d106      	bne.n	80013f8 <sv_single_con+0x19c>
				HAL_GPIO_WritePin(SV_CH10_PORT, SV_CH10_GPIO, GPIO_PIN_RESET);
 80013ea:	2200      	movs	r2, #0
 80013ec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013f0:	480c      	ldr	r0, [pc, #48]	@ (8001424 <sv_single_con+0x1c8>)
 80013f2:	f005 fe13 	bl	800701c <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(SV_CH10_PORT, SV_CH10_GPIO, GPIO_PIN_SET);
			}
			break;
 80013f6:	e007      	b.n	8001408 <sv_single_con+0x1ac>
				HAL_GPIO_WritePin(SV_CH10_PORT, SV_CH10_GPIO, GPIO_PIN_SET);
 80013f8:	2201      	movs	r2, #1
 80013fa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013fe:	4809      	ldr	r0, [pc, #36]	@ (8001424 <sv_single_con+0x1c8>)
 8001400:	f005 fe0c 	bl	800701c <HAL_GPIO_WritePin>
			break;
 8001404:	e000      	b.n	8001408 <sv_single_con+0x1ac>
		default:
			break;
 8001406:	bf00      	nop
	for (uint8_t i = 0; i<MAX_SV_NUM; i++) {
 8001408:	7bfb      	ldrb	r3, [r7, #15]
 800140a:	3301      	adds	r3, #1
 800140c:	73fb      	strb	r3, [r7, #15]
 800140e:	7bfb      	ldrb	r3, [r7, #15]
 8001410:	2b09      	cmp	r3, #9
 8001412:	f67f af2a 	bls.w	800126a <sv_single_con+0xe>
		}
	}

}
 8001416:	bf00      	nop
 8001418:	bf00      	nop
 800141a:	3710      	adds	r7, #16
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	58021000 	.word	0x58021000
 8001424:	58020800 	.word	0x58020800

08001428 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800142e:	4b0a      	ldr	r3, [pc, #40]	@ (8001458 <HAL_MspInit+0x30>)
 8001430:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001434:	4a08      	ldr	r2, [pc, #32]	@ (8001458 <HAL_MspInit+0x30>)
 8001436:	f043 0302 	orr.w	r3, r3, #2
 800143a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800143e:	4b06      	ldr	r3, [pc, #24]	@ (8001458 <HAL_MspInit+0x30>)
 8001440:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001444:	f003 0302 	and.w	r3, r3, #2
 8001448:	607b      	str	r3, [r7, #4]
 800144a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800144c:	bf00      	nop
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	58024400 	.word	0x58024400

0800145c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b0bc      	sub	sp, #240	@ 0xf0
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001464:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
 8001472:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001474:	f107 0318 	add.w	r3, r7, #24
 8001478:	22c0      	movs	r2, #192	@ 0xc0
 800147a:	2100      	movs	r1, #0
 800147c:	4618      	mov	r0, r3
 800147e:	f00b febb 	bl	800d1f8 <memset>
  if(hadc->Instance==ADC1)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a67      	ldr	r2, [pc, #412]	@ (8001624 <HAL_ADC_MspInit+0x1c8>)
 8001488:	4293      	cmp	r3, r2
 800148a:	f040 80c6 	bne.w	800161a <HAL_ADC_MspInit+0x1be>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800148e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001492:	f04f 0300 	mov.w	r3, #0
 8001496:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 800149a:	2304      	movs	r3, #4
 800149c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 800149e:	230a      	movs	r3, #10
 80014a0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80014a2:	2302      	movs	r3, #2
 80014a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80014a6:	2302      	movs	r3, #2
 80014a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80014aa:	2302      	movs	r3, #2
 80014ac:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80014ae:	23c0      	movs	r3, #192	@ 0xc0
 80014b0:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80014b2:	2320      	movs	r3, #32
 80014b4:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80014ba:	2300      	movs	r3, #0
 80014bc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014c0:	f107 0318 	add.w	r3, r7, #24
 80014c4:	4618      	mov	r0, r3
 80014c6:	f006 fe4b 	bl	8008160 <HAL_RCCEx_PeriphCLKConfig>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 80014d0:	f7ff fe9c 	bl	800120c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80014d4:	4b54      	ldr	r3, [pc, #336]	@ (8001628 <HAL_ADC_MspInit+0x1cc>)
 80014d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80014da:	4a53      	ldr	r2, [pc, #332]	@ (8001628 <HAL_ADC_MspInit+0x1cc>)
 80014dc:	f043 0320 	orr.w	r3, r3, #32
 80014e0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80014e4:	4b50      	ldr	r3, [pc, #320]	@ (8001628 <HAL_ADC_MspInit+0x1cc>)
 80014e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80014ea:	f003 0320 	and.w	r3, r3, #32
 80014ee:	617b      	str	r3, [r7, #20]
 80014f0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014f2:	4b4d      	ldr	r3, [pc, #308]	@ (8001628 <HAL_ADC_MspInit+0x1cc>)
 80014f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014f8:	4a4b      	ldr	r2, [pc, #300]	@ (8001628 <HAL_ADC_MspInit+0x1cc>)
 80014fa:	f043 0304 	orr.w	r3, r3, #4
 80014fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001502:	4b49      	ldr	r3, [pc, #292]	@ (8001628 <HAL_ADC_MspInit+0x1cc>)
 8001504:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001508:	f003 0304 	and.w	r3, r3, #4
 800150c:	613b      	str	r3, [r7, #16]
 800150e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001510:	4b45      	ldr	r3, [pc, #276]	@ (8001628 <HAL_ADC_MspInit+0x1cc>)
 8001512:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001516:	4a44      	ldr	r2, [pc, #272]	@ (8001628 <HAL_ADC_MspInit+0x1cc>)
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001520:	4b41      	ldr	r3, [pc, #260]	@ (8001628 <HAL_ADC_MspInit+0x1cc>)
 8001522:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800152e:	4b3e      	ldr	r3, [pc, #248]	@ (8001628 <HAL_ADC_MspInit+0x1cc>)
 8001530:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001534:	4a3c      	ldr	r2, [pc, #240]	@ (8001628 <HAL_ADC_MspInit+0x1cc>)
 8001536:	f043 0320 	orr.w	r3, r3, #32
 800153a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800153e:	4b3a      	ldr	r3, [pc, #232]	@ (8001628 <HAL_ADC_MspInit+0x1cc>)
 8001540:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001544:	f003 0320 	and.w	r3, r3, #32
 8001548:	60bb      	str	r3, [r7, #8]
 800154a:	68bb      	ldr	r3, [r7, #8]
    PA7     ------> ADC1_INP7
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800154c:	2333      	movs	r3, #51	@ 0x33
 800154e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001552:	2303      	movs	r3, #3
 8001554:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	2300      	movs	r3, #0
 800155a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800155e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001562:	4619      	mov	r1, r3
 8001564:	4831      	ldr	r0, [pc, #196]	@ (800162c <HAL_ADC_MspInit+0x1d0>)
 8001566:	f005 fba9 	bl	8006cbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800156a:	23ff      	movs	r3, #255	@ 0xff
 800156c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001570:	2303      	movs	r3, #3
 8001572:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001580:	4619      	mov	r1, r3
 8001582:	482b      	ldr	r0, [pc, #172]	@ (8001630 <HAL_ADC_MspInit+0x1d4>)
 8001584:	f005 fb9a 	bl	8006cbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001588:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800158c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001590:	2303      	movs	r3, #3
 8001592:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	2300      	movs	r3, #0
 8001598:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800159c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80015a0:	4619      	mov	r1, r3
 80015a2:	4824      	ldr	r0, [pc, #144]	@ (8001634 <HAL_ADC_MspInit+0x1d8>)
 80015a4:	f005 fb8a 	bl	8006cbc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 80015a8:	4b23      	ldr	r3, [pc, #140]	@ (8001638 <HAL_ADC_MspInit+0x1dc>)
 80015aa:	4a24      	ldr	r2, [pc, #144]	@ (800163c <HAL_ADC_MspInit+0x1e0>)
 80015ac:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80015ae:	4b22      	ldr	r3, [pc, #136]	@ (8001638 <HAL_ADC_MspInit+0x1dc>)
 80015b0:	2209      	movs	r2, #9
 80015b2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015b4:	4b20      	ldr	r3, [pc, #128]	@ (8001638 <HAL_ADC_MspInit+0x1dc>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001638 <HAL_ADC_MspInit+0x1dc>)
 80015bc:	2200      	movs	r2, #0
 80015be:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80015c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001638 <HAL_ADC_MspInit+0x1dc>)
 80015c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015c6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001638 <HAL_ADC_MspInit+0x1dc>)
 80015ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80015ce:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015d0:	4b19      	ldr	r3, [pc, #100]	@ (8001638 <HAL_ADC_MspInit+0x1dc>)
 80015d2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015d6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80015d8:	4b17      	ldr	r3, [pc, #92]	@ (8001638 <HAL_ADC_MspInit+0x1dc>)
 80015da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015de:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80015e0:	4b15      	ldr	r3, [pc, #84]	@ (8001638 <HAL_ADC_MspInit+0x1dc>)
 80015e2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80015e6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015e8:	4b13      	ldr	r3, [pc, #76]	@ (8001638 <HAL_ADC_MspInit+0x1dc>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80015ee:	4812      	ldr	r0, [pc, #72]	@ (8001638 <HAL_ADC_MspInit+0x1dc>)
 80015f0:	f003 fa1c 	bl	8004a2c <HAL_DMA_Init>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <HAL_ADC_MspInit+0x1a2>
    {
      Error_Handler();
 80015fa:	f7ff fe07 	bl	800120c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a0d      	ldr	r2, [pc, #52]	@ (8001638 <HAL_ADC_MspInit+0x1dc>)
 8001602:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001604:	4a0c      	ldr	r2, [pc, #48]	@ (8001638 <HAL_ADC_MspInit+0x1dc>)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800160a:	2200      	movs	r2, #0
 800160c:	2100      	movs	r1, #0
 800160e:	2012      	movs	r0, #18
 8001610:	f003 f9c5 	bl	800499e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001614:	2012      	movs	r0, #18
 8001616:	f003 f9dc 	bl	80049d2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800161a:	bf00      	nop
 800161c:	37f0      	adds	r7, #240	@ 0xf0
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40022000 	.word	0x40022000
 8001628:	58024400 	.word	0x58024400
 800162c:	58020800 	.word	0x58020800
 8001630:	58020000 	.word	0x58020000
 8001634:	58021400 	.word	0x58021400
 8001638:	2400011c 	.word	0x2400011c
 800163c:	40020010 	.word	0x40020010

08001640 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b0ba      	sub	sp, #232	@ 0xe8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001648:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]
 8001654:	60da      	str	r2, [r3, #12]
 8001656:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001658:	f107 0310 	add.w	r3, r7, #16
 800165c:	22c0      	movs	r2, #192	@ 0xc0
 800165e:	2100      	movs	r1, #0
 8001660:	4618      	mov	r0, r3
 8001662:	f00b fdc9 	bl	800d1f8 <memset>
  if(hspi->Instance==SPI1)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a26      	ldr	r2, [pc, #152]	@ (8001704 <HAL_SPI_MspInit+0xc4>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d145      	bne.n	80016fc <HAL_SPI_MspInit+0xbc>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001670:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001674:	f04f 0300 	mov.w	r3, #0
 8001678:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800167c:	2300      	movs	r3, #0
 800167e:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001680:	f107 0310 	add.w	r3, r7, #16
 8001684:	4618      	mov	r0, r3
 8001686:	f006 fd6b 	bl	8008160 <HAL_RCCEx_PeriphCLKConfig>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001690:	f7ff fdbc 	bl	800120c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001694:	4b1c      	ldr	r3, [pc, #112]	@ (8001708 <HAL_SPI_MspInit+0xc8>)
 8001696:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800169a:	4a1b      	ldr	r2, [pc, #108]	@ (8001708 <HAL_SPI_MspInit+0xc8>)
 800169c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80016a0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80016a4:	4b18      	ldr	r3, [pc, #96]	@ (8001708 <HAL_SPI_MspInit+0xc8>)
 80016a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80016aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80016b2:	4b15      	ldr	r3, [pc, #84]	@ (8001708 <HAL_SPI_MspInit+0xc8>)
 80016b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016b8:	4a13      	ldr	r2, [pc, #76]	@ (8001708 <HAL_SPI_MspInit+0xc8>)
 80016ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80016be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016c2:	4b11      	ldr	r3, [pc, #68]	@ (8001708 <HAL_SPI_MspInit+0xc8>)
 80016c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016cc:	60bb      	str	r3, [r7, #8]
 80016ce:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PG9     ------> SPI1_MISO
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80016d0:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80016d4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d8:	2302      	movs	r3, #2
 80016da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e4:	2300      	movs	r3, #0
 80016e6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016ea:	2305      	movs	r3, #5
 80016ec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016f0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80016f4:	4619      	mov	r1, r3
 80016f6:	4805      	ldr	r0, [pc, #20]	@ (800170c <HAL_SPI_MspInit+0xcc>)
 80016f8:	f005 fae0 	bl	8006cbc <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80016fc:	bf00      	nop
 80016fe:	37e8      	adds	r7, #232	@ 0xe8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40013000 	.word	0x40013000
 8001708:	58024400 	.word	0x58024400
 800170c:	58021800 	.word	0x58021800

08001710 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001720:	d116      	bne.n	8001750 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001722:	4b0d      	ldr	r3, [pc, #52]	@ (8001758 <HAL_TIM_Base_MspInit+0x48>)
 8001724:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001728:	4a0b      	ldr	r2, [pc, #44]	@ (8001758 <HAL_TIM_Base_MspInit+0x48>)
 800172a:	f043 0301 	orr.w	r3, r3, #1
 800172e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001732:	4b09      	ldr	r3, [pc, #36]	@ (8001758 <HAL_TIM_Base_MspInit+0x48>)
 8001734:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001738:	f003 0301 	and.w	r3, r3, #1
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001740:	2200      	movs	r2, #0
 8001742:	2100      	movs	r1, #0
 8001744:	201c      	movs	r0, #28
 8001746:	f003 f92a 	bl	800499e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800174a:	201c      	movs	r0, #28
 800174c:	f003 f941 	bl	80049d2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001750:	bf00      	nop
 8001752:	3710      	adds	r7, #16
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	58024400 	.word	0x58024400

0800175c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001760:	bf00      	nop
 8001762:	e7fd      	b.n	8001760 <NMI_Handler+0x4>

08001764 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001768:	bf00      	nop
 800176a:	e7fd      	b.n	8001768 <HardFault_Handler+0x4>

0800176c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001770:	bf00      	nop
 8001772:	e7fd      	b.n	8001770 <MemManage_Handler+0x4>

08001774 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001778:	bf00      	nop
 800177a:	e7fd      	b.n	8001778 <BusFault_Handler+0x4>

0800177c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001780:	bf00      	nop
 8001782:	e7fd      	b.n	8001780 <UsageFault_Handler+0x4>

08001784 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017b2:	f001 fa83 	bl	8002cbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
	...

080017bc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80017c0:	4802      	ldr	r0, [pc, #8]	@ (80017cc <DMA1_Stream0_IRQHandler+0x10>)
 80017c2:	f003 fef9 	bl	80055b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	2400011c 	.word	0x2400011c

080017d0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80017d4:	4802      	ldr	r0, [pc, #8]	@ (80017e0 <ADC_IRQHandler+0x10>)
 80017d6:	f001 ff55 	bl	8003684 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	240000b8 	.word	0x240000b8

080017e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017e8:	4802      	ldr	r0, [pc, #8]	@ (80017f4 <TIM2_IRQHandler+0x10>)
 80017ea:	f009 fed7 	bl	800b59c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	2400021c 	.word	0x2400021c

080017f8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 80017fc:	2000      	movs	r0, #0
 80017fe:	f001 f8fb 	bl	80029f8 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}

08001806 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b086      	sub	sp, #24
 800180a:	af00      	add	r7, sp, #0
 800180c:	60f8      	str	r0, [r7, #12]
 800180e:	60b9      	str	r1, [r7, #8]
 8001810:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001812:	2300      	movs	r3, #0
 8001814:	617b      	str	r3, [r7, #20]
 8001816:	e00a      	b.n	800182e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001818:	f3af 8000 	nop.w
 800181c:	4601      	mov	r1, r0
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	1c5a      	adds	r2, r3, #1
 8001822:	60ba      	str	r2, [r7, #8]
 8001824:	b2ca      	uxtb	r2, r1
 8001826:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	3301      	adds	r3, #1
 800182c:	617b      	str	r3, [r7, #20]
 800182e:	697a      	ldr	r2, [r7, #20]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	429a      	cmp	r2, r3
 8001834:	dbf0      	blt.n	8001818 <_read+0x12>
  }

  return len;
 8001836:	687b      	ldr	r3, [r7, #4]
}
 8001838:	4618      	mov	r0, r3
 800183a:	3718      	adds	r7, #24
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800184c:	2300      	movs	r3, #0
 800184e:	617b      	str	r3, [r7, #20]
 8001850:	e009      	b.n	8001866 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	1c5a      	adds	r2, r3, #1
 8001856:	60ba      	str	r2, [r7, #8]
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	4618      	mov	r0, r3
 800185c:	f001 f940 	bl	8002ae0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	3301      	adds	r3, #1
 8001864:	617b      	str	r3, [r7, #20]
 8001866:	697a      	ldr	r2, [r7, #20]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	429a      	cmp	r2, r3
 800186c:	dbf1      	blt.n	8001852 <_write+0x12>
  }
  return len;
 800186e:	687b      	ldr	r3, [r7, #4]
}
 8001870:	4618      	mov	r0, r3
 8001872:	3718      	adds	r7, #24
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <_close>:

int _close(int file)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001880:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001884:	4618      	mov	r0, r3
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018a0:	605a      	str	r2, [r3, #4]
  return 0;
 80018a2:	2300      	movs	r3, #0
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <_isatty>:

int _isatty(int file)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018b8:	2301      	movs	r3, #1
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018c6:	b480      	push	{r7}
 80018c8:	b085      	sub	sp, #20
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	60f8      	str	r0, [r7, #12]
 80018ce:	60b9      	str	r1, [r7, #8]
 80018d0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018d2:	2300      	movs	r3, #0
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3714      	adds	r7, #20
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018e8:	4a14      	ldr	r2, [pc, #80]	@ (800193c <_sbrk+0x5c>)
 80018ea:	4b15      	ldr	r3, [pc, #84]	@ (8001940 <_sbrk+0x60>)
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018f4:	4b13      	ldr	r3, [pc, #76]	@ (8001944 <_sbrk+0x64>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d102      	bne.n	8001902 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018fc:	4b11      	ldr	r3, [pc, #68]	@ (8001944 <_sbrk+0x64>)
 80018fe:	4a12      	ldr	r2, [pc, #72]	@ (8001948 <_sbrk+0x68>)
 8001900:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001902:	4b10      	ldr	r3, [pc, #64]	@ (8001944 <_sbrk+0x64>)
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4413      	add	r3, r2
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	429a      	cmp	r2, r3
 800190e:	d207      	bcs.n	8001920 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001910:	f00b fcc0 	bl	800d294 <__errno>
 8001914:	4603      	mov	r3, r0
 8001916:	220c      	movs	r2, #12
 8001918:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800191a:	f04f 33ff 	mov.w	r3, #4294967295
 800191e:	e009      	b.n	8001934 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001920:	4b08      	ldr	r3, [pc, #32]	@ (8001944 <_sbrk+0x64>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001926:	4b07      	ldr	r3, [pc, #28]	@ (8001944 <_sbrk+0x64>)
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4413      	add	r3, r2
 800192e:	4a05      	ldr	r2, [pc, #20]	@ (8001944 <_sbrk+0x64>)
 8001930:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001932:	68fb      	ldr	r3, [r7, #12]
}
 8001934:	4618      	mov	r0, r3
 8001936:	3718      	adds	r7, #24
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	24080000 	.word	0x24080000
 8001940:	00000400 	.word	0x00000400
 8001944:	240002f8 	.word	0x240002f8
 8001948:	240004f0 	.word	0x240004f0

0800194c <MAX31855_CS_Enable>:

extern SPI_HandleTypeDef hspi1; // SPI1 핸들러 외부 선언

// CS 핀을 Low로 설정 (SPI 통신 시작)
void MAX31855_CS_Enable(uint8_t ch)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	71fb      	strb	r3, [r7, #7]
	switch(ch) {
 8001956:	79fb      	ldrb	r3, [r7, #7]
 8001958:	2b0b      	cmp	r3, #11
 800195a:	f200 8329 	bhi.w	8001fb0 <MAX31855_CS_Enable+0x664>
 800195e:	a201      	add	r2, pc, #4	@ (adr r2, 8001964 <MAX31855_CS_Enable+0x18>)
 8001960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001964:	08001995 	.word	0x08001995
 8001968:	08001a17 	.word	0x08001a17
 800196c:	08001a99 	.word	0x08001a99
 8001970:	08001b1b 	.word	0x08001b1b
 8001974:	08001b9d 	.word	0x08001b9d
 8001978:	08001c1f 	.word	0x08001c1f
 800197c:	08001ca5 	.word	0x08001ca5
 8001980:	08001d27 	.word	0x08001d27
 8001984:	08001da9 	.word	0x08001da9
 8001988:	08001e2b 	.word	0x08001e2b
 800198c:	08001ead 	.word	0x08001ead
 8001990:	08001f2f 	.word	0x08001f2f
	case TC_CH1:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_RESET);
 8001994:	2200      	movs	r2, #0
 8001996:	2101      	movs	r1, #1
 8001998:	48c1      	ldr	r0, [pc, #772]	@ (8001ca0 <MAX31855_CS_Enable+0x354>)
 800199a:	f005 fb3f 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 800199e:	2201      	movs	r2, #1
 80019a0:	2102      	movs	r1, #2
 80019a2:	48bf      	ldr	r0, [pc, #764]	@ (8001ca0 <MAX31855_CS_Enable+0x354>)
 80019a4:	f005 fb3a 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 80019a8:	2201      	movs	r2, #1
 80019aa:	2104      	movs	r1, #4
 80019ac:	48bc      	ldr	r0, [pc, #752]	@ (8001ca0 <MAX31855_CS_Enable+0x354>)
 80019ae:	f005 fb35 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 80019b2:	2201      	movs	r2, #1
 80019b4:	2108      	movs	r1, #8
 80019b6:	48ba      	ldr	r0, [pc, #744]	@ (8001ca0 <MAX31855_CS_Enable+0x354>)
 80019b8:	f005 fb30 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 80019bc:	2201      	movs	r2, #1
 80019be:	2110      	movs	r1, #16
 80019c0:	48b7      	ldr	r0, [pc, #732]	@ (8001ca0 <MAX31855_CS_Enable+0x354>)
 80019c2:	f005 fb2b 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 80019c6:	2201      	movs	r2, #1
 80019c8:	2120      	movs	r1, #32
 80019ca:	48b5      	ldr	r0, [pc, #724]	@ (8001ca0 <MAX31855_CS_Enable+0x354>)
 80019cc:	f005 fb26 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 80019d0:	2201      	movs	r2, #1
 80019d2:	2140      	movs	r1, #64	@ 0x40
 80019d4:	48b2      	ldr	r0, [pc, #712]	@ (8001ca0 <MAX31855_CS_Enable+0x354>)
 80019d6:	f005 fb21 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 80019da:	2201      	movs	r2, #1
 80019dc:	2180      	movs	r1, #128	@ 0x80
 80019de:	48b0      	ldr	r0, [pc, #704]	@ (8001ca0 <MAX31855_CS_Enable+0x354>)
 80019e0:	f005 fb1c 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 80019e4:	2201      	movs	r2, #1
 80019e6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80019ea:	48ad      	ldr	r0, [pc, #692]	@ (8001ca0 <MAX31855_CS_Enable+0x354>)
 80019ec:	f005 fb16 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 80019f0:	2201      	movs	r2, #1
 80019f2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80019f6:	48aa      	ldr	r0, [pc, #680]	@ (8001ca0 <MAX31855_CS_Enable+0x354>)
 80019f8:	f005 fb10 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 80019fc:	2201      	movs	r2, #1
 80019fe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a02:	48a7      	ldr	r0, [pc, #668]	@ (8001ca0 <MAX31855_CS_Enable+0x354>)
 8001a04:	f005 fb0a 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001a0e:	48a4      	ldr	r0, [pc, #656]	@ (8001ca0 <MAX31855_CS_Enable+0x354>)
 8001a10:	f005 fb04 	bl	800701c <HAL_GPIO_WritePin>
		break;
 8001a14:	e2cd      	b.n	8001fb2 <MAX31855_CS_Enable+0x666>
	case TC_CH2:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8001a16:	2201      	movs	r2, #1
 8001a18:	2101      	movs	r1, #1
 8001a1a:	48a1      	ldr	r0, [pc, #644]	@ (8001ca0 <MAX31855_CS_Enable+0x354>)
 8001a1c:	f005 fafe 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_RESET);
 8001a20:	2200      	movs	r2, #0
 8001a22:	2102      	movs	r1, #2
 8001a24:	489e      	ldr	r0, [pc, #632]	@ (8001ca0 <MAX31855_CS_Enable+0x354>)
 8001a26:	f005 faf9 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	2104      	movs	r1, #4
 8001a2e:	489c      	ldr	r0, [pc, #624]	@ (8001ca0 <MAX31855_CS_Enable+0x354>)
 8001a30:	f005 faf4 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8001a34:	2201      	movs	r2, #1
 8001a36:	2108      	movs	r1, #8
 8001a38:	4899      	ldr	r0, [pc, #612]	@ (8001ca0 <MAX31855_CS_Enable+0x354>)
 8001a3a:	f005 faef 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8001a3e:	2201      	movs	r2, #1
 8001a40:	2110      	movs	r1, #16
 8001a42:	4897      	ldr	r0, [pc, #604]	@ (8001ca0 <MAX31855_CS_Enable+0x354>)
 8001a44:	f005 faea 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8001a48:	2201      	movs	r2, #1
 8001a4a:	2120      	movs	r1, #32
 8001a4c:	4894      	ldr	r0, [pc, #592]	@ (8001ca0 <MAX31855_CS_Enable+0x354>)
 8001a4e:	f005 fae5 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8001a52:	2201      	movs	r2, #1
 8001a54:	2140      	movs	r1, #64	@ 0x40
 8001a56:	4892      	ldr	r0, [pc, #584]	@ (8001ca0 <MAX31855_CS_Enable+0x354>)
 8001a58:	f005 fae0 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	2180      	movs	r1, #128	@ 0x80
 8001a60:	488f      	ldr	r0, [pc, #572]	@ (8001ca0 <MAX31855_CS_Enable+0x354>)
 8001a62:	f005 fadb 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8001a66:	2201      	movs	r2, #1
 8001a68:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a6c:	488c      	ldr	r0, [pc, #560]	@ (8001ca0 <MAX31855_CS_Enable+0x354>)
 8001a6e:	f005 fad5 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8001a72:	2201      	movs	r2, #1
 8001a74:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a78:	4889      	ldr	r0, [pc, #548]	@ (8001ca0 <MAX31855_CS_Enable+0x354>)
 8001a7a:	f005 facf 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a84:	4886      	ldr	r0, [pc, #536]	@ (8001ca0 <MAX31855_CS_Enable+0x354>)
 8001a86:	f005 fac9 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001a90:	4883      	ldr	r0, [pc, #524]	@ (8001ca0 <MAX31855_CS_Enable+0x354>)
 8001a92:	f005 fac3 	bl	800701c <HAL_GPIO_WritePin>
		break;
 8001a96:	e28c      	b.n	8001fb2 <MAX31855_CS_Enable+0x666>
	case TC_CH3:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8001a98:	2201      	movs	r2, #1
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	4880      	ldr	r0, [pc, #512]	@ (8001ca0 <MAX31855_CS_Enable+0x354>)
 8001a9e:	f005 fabd 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	2102      	movs	r1, #2
 8001aa6:	487e      	ldr	r0, [pc, #504]	@ (8001ca0 <MAX31855_CS_Enable+0x354>)
 8001aa8:	f005 fab8 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_RESET);
 8001aac:	2200      	movs	r2, #0
 8001aae:	2104      	movs	r1, #4
 8001ab0:	487b      	ldr	r0, [pc, #492]	@ (8001ca0 <MAX31855_CS_Enable+0x354>)
 8001ab2:	f005 fab3 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	2108      	movs	r1, #8
 8001aba:	4879      	ldr	r0, [pc, #484]	@ (8001ca0 <MAX31855_CS_Enable+0x354>)
 8001abc:	f005 faae 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	2110      	movs	r1, #16
 8001ac4:	4876      	ldr	r0, [pc, #472]	@ (8001ca0 <MAX31855_CS_Enable+0x354>)
 8001ac6:	f005 faa9 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8001aca:	2201      	movs	r2, #1
 8001acc:	2120      	movs	r1, #32
 8001ace:	4874      	ldr	r0, [pc, #464]	@ (8001ca0 <MAX31855_CS_Enable+0x354>)
 8001ad0:	f005 faa4 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	2140      	movs	r1, #64	@ 0x40
 8001ad8:	4871      	ldr	r0, [pc, #452]	@ (8001ca0 <MAX31855_CS_Enable+0x354>)
 8001ada:	f005 fa9f 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8001ade:	2201      	movs	r2, #1
 8001ae0:	2180      	movs	r1, #128	@ 0x80
 8001ae2:	486f      	ldr	r0, [pc, #444]	@ (8001ca0 <MAX31855_CS_Enable+0x354>)
 8001ae4:	f005 fa9a 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8001ae8:	2201      	movs	r2, #1
 8001aea:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001aee:	486c      	ldr	r0, [pc, #432]	@ (8001ca0 <MAX31855_CS_Enable+0x354>)
 8001af0:	f005 fa94 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8001af4:	2201      	movs	r2, #1
 8001af6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001afa:	4869      	ldr	r0, [pc, #420]	@ (8001ca0 <MAX31855_CS_Enable+0x354>)
 8001afc:	f005 fa8e 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8001b00:	2201      	movs	r2, #1
 8001b02:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b06:	4866      	ldr	r0, [pc, #408]	@ (8001ca0 <MAX31855_CS_Enable+0x354>)
 8001b08:	f005 fa88 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001b12:	4863      	ldr	r0, [pc, #396]	@ (8001ca0 <MAX31855_CS_Enable+0x354>)
 8001b14:	f005 fa82 	bl	800701c <HAL_GPIO_WritePin>
		break;
 8001b18:	e24b      	b.n	8001fb2 <MAX31855_CS_Enable+0x666>
	case TC_CH4:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	2101      	movs	r1, #1
 8001b1e:	4860      	ldr	r0, [pc, #384]	@ (8001ca0 <MAX31855_CS_Enable+0x354>)
 8001b20:	f005 fa7c 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8001b24:	2201      	movs	r2, #1
 8001b26:	2102      	movs	r1, #2
 8001b28:	485d      	ldr	r0, [pc, #372]	@ (8001ca0 <MAX31855_CS_Enable+0x354>)
 8001b2a:	f005 fa77 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8001b2e:	2201      	movs	r2, #1
 8001b30:	2104      	movs	r1, #4
 8001b32:	485b      	ldr	r0, [pc, #364]	@ (8001ca0 <MAX31855_CS_Enable+0x354>)
 8001b34:	f005 fa72 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_RESET);
 8001b38:	2200      	movs	r2, #0
 8001b3a:	2108      	movs	r1, #8
 8001b3c:	4858      	ldr	r0, [pc, #352]	@ (8001ca0 <MAX31855_CS_Enable+0x354>)
 8001b3e:	f005 fa6d 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8001b42:	2201      	movs	r2, #1
 8001b44:	2110      	movs	r1, #16
 8001b46:	4856      	ldr	r0, [pc, #344]	@ (8001ca0 <MAX31855_CS_Enable+0x354>)
 8001b48:	f005 fa68 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	2120      	movs	r1, #32
 8001b50:	4853      	ldr	r0, [pc, #332]	@ (8001ca0 <MAX31855_CS_Enable+0x354>)
 8001b52:	f005 fa63 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8001b56:	2201      	movs	r2, #1
 8001b58:	2140      	movs	r1, #64	@ 0x40
 8001b5a:	4851      	ldr	r0, [pc, #324]	@ (8001ca0 <MAX31855_CS_Enable+0x354>)
 8001b5c:	f005 fa5e 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8001b60:	2201      	movs	r2, #1
 8001b62:	2180      	movs	r1, #128	@ 0x80
 8001b64:	484e      	ldr	r0, [pc, #312]	@ (8001ca0 <MAX31855_CS_Enable+0x354>)
 8001b66:	f005 fa59 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001b70:	484b      	ldr	r0, [pc, #300]	@ (8001ca0 <MAX31855_CS_Enable+0x354>)
 8001b72:	f005 fa53 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8001b76:	2201      	movs	r2, #1
 8001b78:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b7c:	4848      	ldr	r0, [pc, #288]	@ (8001ca0 <MAX31855_CS_Enable+0x354>)
 8001b7e:	f005 fa4d 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8001b82:	2201      	movs	r2, #1
 8001b84:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b88:	4845      	ldr	r0, [pc, #276]	@ (8001ca0 <MAX31855_CS_Enable+0x354>)
 8001b8a:	f005 fa47 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001b94:	4842      	ldr	r0, [pc, #264]	@ (8001ca0 <MAX31855_CS_Enable+0x354>)
 8001b96:	f005 fa41 	bl	800701c <HAL_GPIO_WritePin>
		break;
 8001b9a:	e20a      	b.n	8001fb2 <MAX31855_CS_Enable+0x666>
	case TC_CH5:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	2101      	movs	r1, #1
 8001ba0:	483f      	ldr	r0, [pc, #252]	@ (8001ca0 <MAX31855_CS_Enable+0x354>)
 8001ba2:	f005 fa3b 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	2102      	movs	r1, #2
 8001baa:	483d      	ldr	r0, [pc, #244]	@ (8001ca0 <MAX31855_CS_Enable+0x354>)
 8001bac:	f005 fa36 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	2104      	movs	r1, #4
 8001bb4:	483a      	ldr	r0, [pc, #232]	@ (8001ca0 <MAX31855_CS_Enable+0x354>)
 8001bb6:	f005 fa31 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8001bba:	2201      	movs	r2, #1
 8001bbc:	2108      	movs	r1, #8
 8001bbe:	4838      	ldr	r0, [pc, #224]	@ (8001ca0 <MAX31855_CS_Enable+0x354>)
 8001bc0:	f005 fa2c 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_RESET);
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	2110      	movs	r1, #16
 8001bc8:	4835      	ldr	r0, [pc, #212]	@ (8001ca0 <MAX31855_CS_Enable+0x354>)
 8001bca:	f005 fa27 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8001bce:	2201      	movs	r2, #1
 8001bd0:	2120      	movs	r1, #32
 8001bd2:	4833      	ldr	r0, [pc, #204]	@ (8001ca0 <MAX31855_CS_Enable+0x354>)
 8001bd4:	f005 fa22 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8001bd8:	2201      	movs	r2, #1
 8001bda:	2140      	movs	r1, #64	@ 0x40
 8001bdc:	4830      	ldr	r0, [pc, #192]	@ (8001ca0 <MAX31855_CS_Enable+0x354>)
 8001bde:	f005 fa1d 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8001be2:	2201      	movs	r2, #1
 8001be4:	2180      	movs	r1, #128	@ 0x80
 8001be6:	482e      	ldr	r0, [pc, #184]	@ (8001ca0 <MAX31855_CS_Enable+0x354>)
 8001be8:	f005 fa18 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8001bec:	2201      	movs	r2, #1
 8001bee:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001bf2:	482b      	ldr	r0, [pc, #172]	@ (8001ca0 <MAX31855_CS_Enable+0x354>)
 8001bf4:	f005 fa12 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001bfe:	4828      	ldr	r0, [pc, #160]	@ (8001ca0 <MAX31855_CS_Enable+0x354>)
 8001c00:	f005 fa0c 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8001c04:	2201      	movs	r2, #1
 8001c06:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c0a:	4825      	ldr	r0, [pc, #148]	@ (8001ca0 <MAX31855_CS_Enable+0x354>)
 8001c0c:	f005 fa06 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8001c10:	2201      	movs	r2, #1
 8001c12:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001c16:	4822      	ldr	r0, [pc, #136]	@ (8001ca0 <MAX31855_CS_Enable+0x354>)
 8001c18:	f005 fa00 	bl	800701c <HAL_GPIO_WritePin>
		break;
 8001c1c:	e1c9      	b.n	8001fb2 <MAX31855_CS_Enable+0x666>
	case TC_CH6:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8001c1e:	2201      	movs	r2, #1
 8001c20:	2101      	movs	r1, #1
 8001c22:	481f      	ldr	r0, [pc, #124]	@ (8001ca0 <MAX31855_CS_Enable+0x354>)
 8001c24:	f005 f9fa 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8001c28:	2201      	movs	r2, #1
 8001c2a:	2102      	movs	r1, #2
 8001c2c:	481c      	ldr	r0, [pc, #112]	@ (8001ca0 <MAX31855_CS_Enable+0x354>)
 8001c2e:	f005 f9f5 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8001c32:	2201      	movs	r2, #1
 8001c34:	2104      	movs	r1, #4
 8001c36:	481a      	ldr	r0, [pc, #104]	@ (8001ca0 <MAX31855_CS_Enable+0x354>)
 8001c38:	f005 f9f0 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	2108      	movs	r1, #8
 8001c40:	4817      	ldr	r0, [pc, #92]	@ (8001ca0 <MAX31855_CS_Enable+0x354>)
 8001c42:	f005 f9eb 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8001c46:	2201      	movs	r2, #1
 8001c48:	2110      	movs	r1, #16
 8001c4a:	4815      	ldr	r0, [pc, #84]	@ (8001ca0 <MAX31855_CS_Enable+0x354>)
 8001c4c:	f005 f9e6 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_RESET);
 8001c50:	2200      	movs	r2, #0
 8001c52:	2120      	movs	r1, #32
 8001c54:	4812      	ldr	r0, [pc, #72]	@ (8001ca0 <MAX31855_CS_Enable+0x354>)
 8001c56:	f005 f9e1 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	2140      	movs	r1, #64	@ 0x40
 8001c5e:	4810      	ldr	r0, [pc, #64]	@ (8001ca0 <MAX31855_CS_Enable+0x354>)
 8001c60:	f005 f9dc 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8001c64:	2201      	movs	r2, #1
 8001c66:	2180      	movs	r1, #128	@ 0x80
 8001c68:	480d      	ldr	r0, [pc, #52]	@ (8001ca0 <MAX31855_CS_Enable+0x354>)
 8001c6a:	f005 f9d7 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001c74:	480a      	ldr	r0, [pc, #40]	@ (8001ca0 <MAX31855_CS_Enable+0x354>)
 8001c76:	f005 f9d1 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001c80:	4807      	ldr	r0, [pc, #28]	@ (8001ca0 <MAX31855_CS_Enable+0x354>)
 8001c82:	f005 f9cb 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8001c86:	2201      	movs	r2, #1
 8001c88:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c8c:	4804      	ldr	r0, [pc, #16]	@ (8001ca0 <MAX31855_CS_Enable+0x354>)
 8001c8e:	f005 f9c5 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8001c92:	2201      	movs	r2, #1
 8001c94:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001c98:	4801      	ldr	r0, [pc, #4]	@ (8001ca0 <MAX31855_CS_Enable+0x354>)
 8001c9a:	f005 f9bf 	bl	800701c <HAL_GPIO_WritePin>
		break;
 8001c9e:	e188      	b.n	8001fb2 <MAX31855_CS_Enable+0x666>
 8001ca0:	58020c00 	.word	0x58020c00
	case TC_CH7:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	48c4      	ldr	r0, [pc, #784]	@ (8001fbc <MAX31855_CS_Enable+0x670>)
 8001caa:	f005 f9b7 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8001cae:	2201      	movs	r2, #1
 8001cb0:	2102      	movs	r1, #2
 8001cb2:	48c2      	ldr	r0, [pc, #776]	@ (8001fbc <MAX31855_CS_Enable+0x670>)
 8001cb4:	f005 f9b2 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8001cb8:	2201      	movs	r2, #1
 8001cba:	2104      	movs	r1, #4
 8001cbc:	48bf      	ldr	r0, [pc, #764]	@ (8001fbc <MAX31855_CS_Enable+0x670>)
 8001cbe:	f005 f9ad 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	2108      	movs	r1, #8
 8001cc6:	48bd      	ldr	r0, [pc, #756]	@ (8001fbc <MAX31855_CS_Enable+0x670>)
 8001cc8:	f005 f9a8 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8001ccc:	2201      	movs	r2, #1
 8001cce:	2110      	movs	r1, #16
 8001cd0:	48ba      	ldr	r0, [pc, #744]	@ (8001fbc <MAX31855_CS_Enable+0x670>)
 8001cd2:	f005 f9a3 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	2120      	movs	r1, #32
 8001cda:	48b8      	ldr	r0, [pc, #736]	@ (8001fbc <MAX31855_CS_Enable+0x670>)
 8001cdc:	f005 f99e 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_RESET);
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	2140      	movs	r1, #64	@ 0x40
 8001ce4:	48b5      	ldr	r0, [pc, #724]	@ (8001fbc <MAX31855_CS_Enable+0x670>)
 8001ce6:	f005 f999 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8001cea:	2201      	movs	r2, #1
 8001cec:	2180      	movs	r1, #128	@ 0x80
 8001cee:	48b3      	ldr	r0, [pc, #716]	@ (8001fbc <MAX31855_CS_Enable+0x670>)
 8001cf0:	f005 f994 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001cfa:	48b0      	ldr	r0, [pc, #704]	@ (8001fbc <MAX31855_CS_Enable+0x670>)
 8001cfc:	f005 f98e 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8001d00:	2201      	movs	r2, #1
 8001d02:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001d06:	48ad      	ldr	r0, [pc, #692]	@ (8001fbc <MAX31855_CS_Enable+0x670>)
 8001d08:	f005 f988 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d12:	48aa      	ldr	r0, [pc, #680]	@ (8001fbc <MAX31855_CS_Enable+0x670>)
 8001d14:	f005 f982 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8001d18:	2201      	movs	r2, #1
 8001d1a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001d1e:	48a7      	ldr	r0, [pc, #668]	@ (8001fbc <MAX31855_CS_Enable+0x670>)
 8001d20:	f005 f97c 	bl	800701c <HAL_GPIO_WritePin>
		break;
 8001d24:	e145      	b.n	8001fb2 <MAX31855_CS_Enable+0x666>
	case TC_CH8:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8001d26:	2201      	movs	r2, #1
 8001d28:	2101      	movs	r1, #1
 8001d2a:	48a4      	ldr	r0, [pc, #656]	@ (8001fbc <MAX31855_CS_Enable+0x670>)
 8001d2c:	f005 f976 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8001d30:	2201      	movs	r2, #1
 8001d32:	2102      	movs	r1, #2
 8001d34:	48a1      	ldr	r0, [pc, #644]	@ (8001fbc <MAX31855_CS_Enable+0x670>)
 8001d36:	f005 f971 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	2104      	movs	r1, #4
 8001d3e:	489f      	ldr	r0, [pc, #636]	@ (8001fbc <MAX31855_CS_Enable+0x670>)
 8001d40:	f005 f96c 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8001d44:	2201      	movs	r2, #1
 8001d46:	2108      	movs	r1, #8
 8001d48:	489c      	ldr	r0, [pc, #624]	@ (8001fbc <MAX31855_CS_Enable+0x670>)
 8001d4a:	f005 f967 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8001d4e:	2201      	movs	r2, #1
 8001d50:	2110      	movs	r1, #16
 8001d52:	489a      	ldr	r0, [pc, #616]	@ (8001fbc <MAX31855_CS_Enable+0x670>)
 8001d54:	f005 f962 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8001d58:	2201      	movs	r2, #1
 8001d5a:	2120      	movs	r1, #32
 8001d5c:	4897      	ldr	r0, [pc, #604]	@ (8001fbc <MAX31855_CS_Enable+0x670>)
 8001d5e:	f005 f95d 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8001d62:	2201      	movs	r2, #1
 8001d64:	2140      	movs	r1, #64	@ 0x40
 8001d66:	4895      	ldr	r0, [pc, #596]	@ (8001fbc <MAX31855_CS_Enable+0x670>)
 8001d68:	f005 f958 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_RESET);
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	2180      	movs	r1, #128	@ 0x80
 8001d70:	4892      	ldr	r0, [pc, #584]	@ (8001fbc <MAX31855_CS_Enable+0x670>)
 8001d72:	f005 f953 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8001d76:	2201      	movs	r2, #1
 8001d78:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001d7c:	488f      	ldr	r0, [pc, #572]	@ (8001fbc <MAX31855_CS_Enable+0x670>)
 8001d7e:	f005 f94d 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8001d82:	2201      	movs	r2, #1
 8001d84:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001d88:	488c      	ldr	r0, [pc, #560]	@ (8001fbc <MAX31855_CS_Enable+0x670>)
 8001d8a:	f005 f947 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d94:	4889      	ldr	r0, [pc, #548]	@ (8001fbc <MAX31855_CS_Enable+0x670>)
 8001d96:	f005 f941 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001da0:	4886      	ldr	r0, [pc, #536]	@ (8001fbc <MAX31855_CS_Enable+0x670>)
 8001da2:	f005 f93b 	bl	800701c <HAL_GPIO_WritePin>
		break;
 8001da6:	e104      	b.n	8001fb2 <MAX31855_CS_Enable+0x666>
	case TC_CH9:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8001da8:	2201      	movs	r2, #1
 8001daa:	2101      	movs	r1, #1
 8001dac:	4883      	ldr	r0, [pc, #524]	@ (8001fbc <MAX31855_CS_Enable+0x670>)
 8001dae:	f005 f935 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8001db2:	2201      	movs	r2, #1
 8001db4:	2102      	movs	r1, #2
 8001db6:	4881      	ldr	r0, [pc, #516]	@ (8001fbc <MAX31855_CS_Enable+0x670>)
 8001db8:	f005 f930 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	2104      	movs	r1, #4
 8001dc0:	487e      	ldr	r0, [pc, #504]	@ (8001fbc <MAX31855_CS_Enable+0x670>)
 8001dc2:	f005 f92b 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	2108      	movs	r1, #8
 8001dca:	487c      	ldr	r0, [pc, #496]	@ (8001fbc <MAX31855_CS_Enable+0x670>)
 8001dcc:	f005 f926 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	2110      	movs	r1, #16
 8001dd4:	4879      	ldr	r0, [pc, #484]	@ (8001fbc <MAX31855_CS_Enable+0x670>)
 8001dd6:	f005 f921 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8001dda:	2201      	movs	r2, #1
 8001ddc:	2120      	movs	r1, #32
 8001dde:	4877      	ldr	r0, [pc, #476]	@ (8001fbc <MAX31855_CS_Enable+0x670>)
 8001de0:	f005 f91c 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8001de4:	2201      	movs	r2, #1
 8001de6:	2140      	movs	r1, #64	@ 0x40
 8001de8:	4874      	ldr	r0, [pc, #464]	@ (8001fbc <MAX31855_CS_Enable+0x670>)
 8001dea:	f005 f917 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8001dee:	2201      	movs	r2, #1
 8001df0:	2180      	movs	r1, #128	@ 0x80
 8001df2:	4872      	ldr	r0, [pc, #456]	@ (8001fbc <MAX31855_CS_Enable+0x670>)
 8001df4:	f005 f912 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_RESET);
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001dfe:	486f      	ldr	r0, [pc, #444]	@ (8001fbc <MAX31855_CS_Enable+0x670>)
 8001e00:	f005 f90c 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8001e04:	2201      	movs	r2, #1
 8001e06:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001e0a:	486c      	ldr	r0, [pc, #432]	@ (8001fbc <MAX31855_CS_Enable+0x670>)
 8001e0c:	f005 f906 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8001e10:	2201      	movs	r2, #1
 8001e12:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e16:	4869      	ldr	r0, [pc, #420]	@ (8001fbc <MAX31855_CS_Enable+0x670>)
 8001e18:	f005 f900 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001e22:	4866      	ldr	r0, [pc, #408]	@ (8001fbc <MAX31855_CS_Enable+0x670>)
 8001e24:	f005 f8fa 	bl	800701c <HAL_GPIO_WritePin>
		break;
 8001e28:	e0c3      	b.n	8001fb2 <MAX31855_CS_Enable+0x666>
	case TC_CH10:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	2101      	movs	r1, #1
 8001e2e:	4863      	ldr	r0, [pc, #396]	@ (8001fbc <MAX31855_CS_Enable+0x670>)
 8001e30:	f005 f8f4 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8001e34:	2201      	movs	r2, #1
 8001e36:	2102      	movs	r1, #2
 8001e38:	4860      	ldr	r0, [pc, #384]	@ (8001fbc <MAX31855_CS_Enable+0x670>)
 8001e3a:	f005 f8ef 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8001e3e:	2201      	movs	r2, #1
 8001e40:	2104      	movs	r1, #4
 8001e42:	485e      	ldr	r0, [pc, #376]	@ (8001fbc <MAX31855_CS_Enable+0x670>)
 8001e44:	f005 f8ea 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8001e48:	2201      	movs	r2, #1
 8001e4a:	2108      	movs	r1, #8
 8001e4c:	485b      	ldr	r0, [pc, #364]	@ (8001fbc <MAX31855_CS_Enable+0x670>)
 8001e4e:	f005 f8e5 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8001e52:	2201      	movs	r2, #1
 8001e54:	2110      	movs	r1, #16
 8001e56:	4859      	ldr	r0, [pc, #356]	@ (8001fbc <MAX31855_CS_Enable+0x670>)
 8001e58:	f005 f8e0 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	2120      	movs	r1, #32
 8001e60:	4856      	ldr	r0, [pc, #344]	@ (8001fbc <MAX31855_CS_Enable+0x670>)
 8001e62:	f005 f8db 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8001e66:	2201      	movs	r2, #1
 8001e68:	2140      	movs	r1, #64	@ 0x40
 8001e6a:	4854      	ldr	r0, [pc, #336]	@ (8001fbc <MAX31855_CS_Enable+0x670>)
 8001e6c:	f005 f8d6 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8001e70:	2201      	movs	r2, #1
 8001e72:	2180      	movs	r1, #128	@ 0x80
 8001e74:	4851      	ldr	r0, [pc, #324]	@ (8001fbc <MAX31855_CS_Enable+0x670>)
 8001e76:	f005 f8d1 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001e80:	484e      	ldr	r0, [pc, #312]	@ (8001fbc <MAX31855_CS_Enable+0x670>)
 8001e82:	f005 f8cb 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_RESET);
 8001e86:	2200      	movs	r2, #0
 8001e88:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001e8c:	484b      	ldr	r0, [pc, #300]	@ (8001fbc <MAX31855_CS_Enable+0x670>)
 8001e8e:	f005 f8c5 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8001e92:	2201      	movs	r2, #1
 8001e94:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e98:	4848      	ldr	r0, [pc, #288]	@ (8001fbc <MAX31855_CS_Enable+0x670>)
 8001e9a:	f005 f8bf 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001ea4:	4845      	ldr	r0, [pc, #276]	@ (8001fbc <MAX31855_CS_Enable+0x670>)
 8001ea6:	f005 f8b9 	bl	800701c <HAL_GPIO_WritePin>
		break;
 8001eaa:	e082      	b.n	8001fb2 <MAX31855_CS_Enable+0x666>
	case TC_CH11:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8001eac:	2201      	movs	r2, #1
 8001eae:	2101      	movs	r1, #1
 8001eb0:	4842      	ldr	r0, [pc, #264]	@ (8001fbc <MAX31855_CS_Enable+0x670>)
 8001eb2:	f005 f8b3 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	2102      	movs	r1, #2
 8001eba:	4840      	ldr	r0, [pc, #256]	@ (8001fbc <MAX31855_CS_Enable+0x670>)
 8001ebc:	f005 f8ae 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	2104      	movs	r1, #4
 8001ec4:	483d      	ldr	r0, [pc, #244]	@ (8001fbc <MAX31855_CS_Enable+0x670>)
 8001ec6:	f005 f8a9 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8001eca:	2201      	movs	r2, #1
 8001ecc:	2108      	movs	r1, #8
 8001ece:	483b      	ldr	r0, [pc, #236]	@ (8001fbc <MAX31855_CS_Enable+0x670>)
 8001ed0:	f005 f8a4 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	2110      	movs	r1, #16
 8001ed8:	4838      	ldr	r0, [pc, #224]	@ (8001fbc <MAX31855_CS_Enable+0x670>)
 8001eda:	f005 f89f 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8001ede:	2201      	movs	r2, #1
 8001ee0:	2120      	movs	r1, #32
 8001ee2:	4836      	ldr	r0, [pc, #216]	@ (8001fbc <MAX31855_CS_Enable+0x670>)
 8001ee4:	f005 f89a 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8001ee8:	2201      	movs	r2, #1
 8001eea:	2140      	movs	r1, #64	@ 0x40
 8001eec:	4833      	ldr	r0, [pc, #204]	@ (8001fbc <MAX31855_CS_Enable+0x670>)
 8001eee:	f005 f895 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	2180      	movs	r1, #128	@ 0x80
 8001ef6:	4831      	ldr	r0, [pc, #196]	@ (8001fbc <MAX31855_CS_Enable+0x670>)
 8001ef8:	f005 f890 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8001efc:	2201      	movs	r2, #1
 8001efe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001f02:	482e      	ldr	r0, [pc, #184]	@ (8001fbc <MAX31855_CS_Enable+0x670>)
 8001f04:	f005 f88a 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8001f08:	2201      	movs	r2, #1
 8001f0a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f0e:	482b      	ldr	r0, [pc, #172]	@ (8001fbc <MAX31855_CS_Enable+0x670>)
 8001f10:	f005 f884 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_RESET);
 8001f14:	2200      	movs	r2, #0
 8001f16:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f1a:	4828      	ldr	r0, [pc, #160]	@ (8001fbc <MAX31855_CS_Enable+0x670>)
 8001f1c:	f005 f87e 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8001f20:	2201      	movs	r2, #1
 8001f22:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001f26:	4825      	ldr	r0, [pc, #148]	@ (8001fbc <MAX31855_CS_Enable+0x670>)
 8001f28:	f005 f878 	bl	800701c <HAL_GPIO_WritePin>
		break;
 8001f2c:	e041      	b.n	8001fb2 <MAX31855_CS_Enable+0x666>
	case TC_CH12:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8001f2e:	2201      	movs	r2, #1
 8001f30:	2101      	movs	r1, #1
 8001f32:	4822      	ldr	r0, [pc, #136]	@ (8001fbc <MAX31855_CS_Enable+0x670>)
 8001f34:	f005 f872 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8001f38:	2201      	movs	r2, #1
 8001f3a:	2102      	movs	r1, #2
 8001f3c:	481f      	ldr	r0, [pc, #124]	@ (8001fbc <MAX31855_CS_Enable+0x670>)
 8001f3e:	f005 f86d 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8001f42:	2201      	movs	r2, #1
 8001f44:	2104      	movs	r1, #4
 8001f46:	481d      	ldr	r0, [pc, #116]	@ (8001fbc <MAX31855_CS_Enable+0x670>)
 8001f48:	f005 f868 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	2108      	movs	r1, #8
 8001f50:	481a      	ldr	r0, [pc, #104]	@ (8001fbc <MAX31855_CS_Enable+0x670>)
 8001f52:	f005 f863 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8001f56:	2201      	movs	r2, #1
 8001f58:	2110      	movs	r1, #16
 8001f5a:	4818      	ldr	r0, [pc, #96]	@ (8001fbc <MAX31855_CS_Enable+0x670>)
 8001f5c:	f005 f85e 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8001f60:	2201      	movs	r2, #1
 8001f62:	2120      	movs	r1, #32
 8001f64:	4815      	ldr	r0, [pc, #84]	@ (8001fbc <MAX31855_CS_Enable+0x670>)
 8001f66:	f005 f859 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	2140      	movs	r1, #64	@ 0x40
 8001f6e:	4813      	ldr	r0, [pc, #76]	@ (8001fbc <MAX31855_CS_Enable+0x670>)
 8001f70:	f005 f854 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8001f74:	2201      	movs	r2, #1
 8001f76:	2180      	movs	r1, #128	@ 0x80
 8001f78:	4810      	ldr	r0, [pc, #64]	@ (8001fbc <MAX31855_CS_Enable+0x670>)
 8001f7a:	f005 f84f 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001f84:	480d      	ldr	r0, [pc, #52]	@ (8001fbc <MAX31855_CS_Enable+0x670>)
 8001f86:	f005 f849 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f90:	480a      	ldr	r0, [pc, #40]	@ (8001fbc <MAX31855_CS_Enable+0x670>)
 8001f92:	f005 f843 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8001f96:	2201      	movs	r2, #1
 8001f98:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f9c:	4807      	ldr	r0, [pc, #28]	@ (8001fbc <MAX31855_CS_Enable+0x670>)
 8001f9e:	f005 f83d 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_RESET);
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001fa8:	4804      	ldr	r0, [pc, #16]	@ (8001fbc <MAX31855_CS_Enable+0x670>)
 8001faa:	f005 f837 	bl	800701c <HAL_GPIO_WritePin>
		break;
 8001fae:	e000      	b.n	8001fb2 <MAX31855_CS_Enable+0x666>
	default:
		break;
 8001fb0:	bf00      	nop
	}
}
 8001fb2:	bf00      	nop
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	58020c00 	.word	0x58020c00

08001fc0 <MAX31855_CS_Disable>:

// CS 핀을 High로 설정 (SPI 통신 종료)
void MAX31855_CS_Disable(uint8_t ch)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	71fb      	strb	r3, [r7, #7]
	switch(ch) {
 8001fca:	79fb      	ldrb	r3, [r7, #7]
 8001fcc:	2b0b      	cmp	r3, #11
 8001fce:	f200 8329 	bhi.w	8002624 <MAX31855_CS_Disable+0x664>
 8001fd2:	a201      	add	r2, pc, #4	@ (adr r2, 8001fd8 <MAX31855_CS_Disable+0x18>)
 8001fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fd8:	08002009 	.word	0x08002009
 8001fdc:	0800208b 	.word	0x0800208b
 8001fe0:	0800210d 	.word	0x0800210d
 8001fe4:	0800218f 	.word	0x0800218f
 8001fe8:	08002211 	.word	0x08002211
 8001fec:	08002293 	.word	0x08002293
 8001ff0:	08002319 	.word	0x08002319
 8001ff4:	0800239b 	.word	0x0800239b
 8001ff8:	0800241d 	.word	0x0800241d
 8001ffc:	0800249f 	.word	0x0800249f
 8002000:	08002521 	.word	0x08002521
 8002004:	080025a3 	.word	0x080025a3
	case TC_CH1:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8002008:	2201      	movs	r2, #1
 800200a:	2101      	movs	r1, #1
 800200c:	48c1      	ldr	r0, [pc, #772]	@ (8002314 <MAX31855_CS_Disable+0x354>)
 800200e:	f005 f805 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8002012:	2201      	movs	r2, #1
 8002014:	2102      	movs	r1, #2
 8002016:	48bf      	ldr	r0, [pc, #764]	@ (8002314 <MAX31855_CS_Disable+0x354>)
 8002018:	f005 f800 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 800201c:	2201      	movs	r2, #1
 800201e:	2104      	movs	r1, #4
 8002020:	48bc      	ldr	r0, [pc, #752]	@ (8002314 <MAX31855_CS_Disable+0x354>)
 8002022:	f004 fffb 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8002026:	2201      	movs	r2, #1
 8002028:	2108      	movs	r1, #8
 800202a:	48ba      	ldr	r0, [pc, #744]	@ (8002314 <MAX31855_CS_Disable+0x354>)
 800202c:	f004 fff6 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8002030:	2201      	movs	r2, #1
 8002032:	2110      	movs	r1, #16
 8002034:	48b7      	ldr	r0, [pc, #732]	@ (8002314 <MAX31855_CS_Disable+0x354>)
 8002036:	f004 fff1 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 800203a:	2201      	movs	r2, #1
 800203c:	2120      	movs	r1, #32
 800203e:	48b5      	ldr	r0, [pc, #724]	@ (8002314 <MAX31855_CS_Disable+0x354>)
 8002040:	f004 ffec 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8002044:	2201      	movs	r2, #1
 8002046:	2140      	movs	r1, #64	@ 0x40
 8002048:	48b2      	ldr	r0, [pc, #712]	@ (8002314 <MAX31855_CS_Disable+0x354>)
 800204a:	f004 ffe7 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 800204e:	2201      	movs	r2, #1
 8002050:	2180      	movs	r1, #128	@ 0x80
 8002052:	48b0      	ldr	r0, [pc, #704]	@ (8002314 <MAX31855_CS_Disable+0x354>)
 8002054:	f004 ffe2 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8002058:	2201      	movs	r2, #1
 800205a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800205e:	48ad      	ldr	r0, [pc, #692]	@ (8002314 <MAX31855_CS_Disable+0x354>)
 8002060:	f004 ffdc 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8002064:	2201      	movs	r2, #1
 8002066:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800206a:	48aa      	ldr	r0, [pc, #680]	@ (8002314 <MAX31855_CS_Disable+0x354>)
 800206c:	f004 ffd6 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8002070:	2201      	movs	r2, #1
 8002072:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002076:	48a7      	ldr	r0, [pc, #668]	@ (8002314 <MAX31855_CS_Disable+0x354>)
 8002078:	f004 ffd0 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 800207c:	2201      	movs	r2, #1
 800207e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002082:	48a4      	ldr	r0, [pc, #656]	@ (8002314 <MAX31855_CS_Disable+0x354>)
 8002084:	f004 ffca 	bl	800701c <HAL_GPIO_WritePin>
		break;
 8002088:	e2cd      	b.n	8002626 <MAX31855_CS_Disable+0x666>
	case TC_CH2:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 800208a:	2201      	movs	r2, #1
 800208c:	2101      	movs	r1, #1
 800208e:	48a1      	ldr	r0, [pc, #644]	@ (8002314 <MAX31855_CS_Disable+0x354>)
 8002090:	f004 ffc4 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8002094:	2201      	movs	r2, #1
 8002096:	2102      	movs	r1, #2
 8002098:	489e      	ldr	r0, [pc, #632]	@ (8002314 <MAX31855_CS_Disable+0x354>)
 800209a:	f004 ffbf 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 800209e:	2201      	movs	r2, #1
 80020a0:	2104      	movs	r1, #4
 80020a2:	489c      	ldr	r0, [pc, #624]	@ (8002314 <MAX31855_CS_Disable+0x354>)
 80020a4:	f004 ffba 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 80020a8:	2201      	movs	r2, #1
 80020aa:	2108      	movs	r1, #8
 80020ac:	4899      	ldr	r0, [pc, #612]	@ (8002314 <MAX31855_CS_Disable+0x354>)
 80020ae:	f004 ffb5 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 80020b2:	2201      	movs	r2, #1
 80020b4:	2110      	movs	r1, #16
 80020b6:	4897      	ldr	r0, [pc, #604]	@ (8002314 <MAX31855_CS_Disable+0x354>)
 80020b8:	f004 ffb0 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 80020bc:	2201      	movs	r2, #1
 80020be:	2120      	movs	r1, #32
 80020c0:	4894      	ldr	r0, [pc, #592]	@ (8002314 <MAX31855_CS_Disable+0x354>)
 80020c2:	f004 ffab 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 80020c6:	2201      	movs	r2, #1
 80020c8:	2140      	movs	r1, #64	@ 0x40
 80020ca:	4892      	ldr	r0, [pc, #584]	@ (8002314 <MAX31855_CS_Disable+0x354>)
 80020cc:	f004 ffa6 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 80020d0:	2201      	movs	r2, #1
 80020d2:	2180      	movs	r1, #128	@ 0x80
 80020d4:	488f      	ldr	r0, [pc, #572]	@ (8002314 <MAX31855_CS_Disable+0x354>)
 80020d6:	f004 ffa1 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 80020da:	2201      	movs	r2, #1
 80020dc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80020e0:	488c      	ldr	r0, [pc, #560]	@ (8002314 <MAX31855_CS_Disable+0x354>)
 80020e2:	f004 ff9b 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 80020e6:	2201      	movs	r2, #1
 80020e8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80020ec:	4889      	ldr	r0, [pc, #548]	@ (8002314 <MAX31855_CS_Disable+0x354>)
 80020ee:	f004 ff95 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 80020f2:	2201      	movs	r2, #1
 80020f4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80020f8:	4886      	ldr	r0, [pc, #536]	@ (8002314 <MAX31855_CS_Disable+0x354>)
 80020fa:	f004 ff8f 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 80020fe:	2201      	movs	r2, #1
 8002100:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002104:	4883      	ldr	r0, [pc, #524]	@ (8002314 <MAX31855_CS_Disable+0x354>)
 8002106:	f004 ff89 	bl	800701c <HAL_GPIO_WritePin>
		break;
 800210a:	e28c      	b.n	8002626 <MAX31855_CS_Disable+0x666>
	case TC_CH3:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 800210c:	2201      	movs	r2, #1
 800210e:	2101      	movs	r1, #1
 8002110:	4880      	ldr	r0, [pc, #512]	@ (8002314 <MAX31855_CS_Disable+0x354>)
 8002112:	f004 ff83 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8002116:	2201      	movs	r2, #1
 8002118:	2102      	movs	r1, #2
 800211a:	487e      	ldr	r0, [pc, #504]	@ (8002314 <MAX31855_CS_Disable+0x354>)
 800211c:	f004 ff7e 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8002120:	2201      	movs	r2, #1
 8002122:	2104      	movs	r1, #4
 8002124:	487b      	ldr	r0, [pc, #492]	@ (8002314 <MAX31855_CS_Disable+0x354>)
 8002126:	f004 ff79 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 800212a:	2201      	movs	r2, #1
 800212c:	2108      	movs	r1, #8
 800212e:	4879      	ldr	r0, [pc, #484]	@ (8002314 <MAX31855_CS_Disable+0x354>)
 8002130:	f004 ff74 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8002134:	2201      	movs	r2, #1
 8002136:	2110      	movs	r1, #16
 8002138:	4876      	ldr	r0, [pc, #472]	@ (8002314 <MAX31855_CS_Disable+0x354>)
 800213a:	f004 ff6f 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 800213e:	2201      	movs	r2, #1
 8002140:	2120      	movs	r1, #32
 8002142:	4874      	ldr	r0, [pc, #464]	@ (8002314 <MAX31855_CS_Disable+0x354>)
 8002144:	f004 ff6a 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8002148:	2201      	movs	r2, #1
 800214a:	2140      	movs	r1, #64	@ 0x40
 800214c:	4871      	ldr	r0, [pc, #452]	@ (8002314 <MAX31855_CS_Disable+0x354>)
 800214e:	f004 ff65 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8002152:	2201      	movs	r2, #1
 8002154:	2180      	movs	r1, #128	@ 0x80
 8002156:	486f      	ldr	r0, [pc, #444]	@ (8002314 <MAX31855_CS_Disable+0x354>)
 8002158:	f004 ff60 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 800215c:	2201      	movs	r2, #1
 800215e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002162:	486c      	ldr	r0, [pc, #432]	@ (8002314 <MAX31855_CS_Disable+0x354>)
 8002164:	f004 ff5a 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8002168:	2201      	movs	r2, #1
 800216a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800216e:	4869      	ldr	r0, [pc, #420]	@ (8002314 <MAX31855_CS_Disable+0x354>)
 8002170:	f004 ff54 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8002174:	2201      	movs	r2, #1
 8002176:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800217a:	4866      	ldr	r0, [pc, #408]	@ (8002314 <MAX31855_CS_Disable+0x354>)
 800217c:	f004 ff4e 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8002180:	2201      	movs	r2, #1
 8002182:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002186:	4863      	ldr	r0, [pc, #396]	@ (8002314 <MAX31855_CS_Disable+0x354>)
 8002188:	f004 ff48 	bl	800701c <HAL_GPIO_WritePin>
		break;
 800218c:	e24b      	b.n	8002626 <MAX31855_CS_Disable+0x666>
	case TC_CH4:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 800218e:	2201      	movs	r2, #1
 8002190:	2101      	movs	r1, #1
 8002192:	4860      	ldr	r0, [pc, #384]	@ (8002314 <MAX31855_CS_Disable+0x354>)
 8002194:	f004 ff42 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8002198:	2201      	movs	r2, #1
 800219a:	2102      	movs	r1, #2
 800219c:	485d      	ldr	r0, [pc, #372]	@ (8002314 <MAX31855_CS_Disable+0x354>)
 800219e:	f004 ff3d 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 80021a2:	2201      	movs	r2, #1
 80021a4:	2104      	movs	r1, #4
 80021a6:	485b      	ldr	r0, [pc, #364]	@ (8002314 <MAX31855_CS_Disable+0x354>)
 80021a8:	f004 ff38 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 80021ac:	2201      	movs	r2, #1
 80021ae:	2108      	movs	r1, #8
 80021b0:	4858      	ldr	r0, [pc, #352]	@ (8002314 <MAX31855_CS_Disable+0x354>)
 80021b2:	f004 ff33 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 80021b6:	2201      	movs	r2, #1
 80021b8:	2110      	movs	r1, #16
 80021ba:	4856      	ldr	r0, [pc, #344]	@ (8002314 <MAX31855_CS_Disable+0x354>)
 80021bc:	f004 ff2e 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 80021c0:	2201      	movs	r2, #1
 80021c2:	2120      	movs	r1, #32
 80021c4:	4853      	ldr	r0, [pc, #332]	@ (8002314 <MAX31855_CS_Disable+0x354>)
 80021c6:	f004 ff29 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 80021ca:	2201      	movs	r2, #1
 80021cc:	2140      	movs	r1, #64	@ 0x40
 80021ce:	4851      	ldr	r0, [pc, #324]	@ (8002314 <MAX31855_CS_Disable+0x354>)
 80021d0:	f004 ff24 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 80021d4:	2201      	movs	r2, #1
 80021d6:	2180      	movs	r1, #128	@ 0x80
 80021d8:	484e      	ldr	r0, [pc, #312]	@ (8002314 <MAX31855_CS_Disable+0x354>)
 80021da:	f004 ff1f 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 80021de:	2201      	movs	r2, #1
 80021e0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80021e4:	484b      	ldr	r0, [pc, #300]	@ (8002314 <MAX31855_CS_Disable+0x354>)
 80021e6:	f004 ff19 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 80021ea:	2201      	movs	r2, #1
 80021ec:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80021f0:	4848      	ldr	r0, [pc, #288]	@ (8002314 <MAX31855_CS_Disable+0x354>)
 80021f2:	f004 ff13 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 80021f6:	2201      	movs	r2, #1
 80021f8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80021fc:	4845      	ldr	r0, [pc, #276]	@ (8002314 <MAX31855_CS_Disable+0x354>)
 80021fe:	f004 ff0d 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8002202:	2201      	movs	r2, #1
 8002204:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002208:	4842      	ldr	r0, [pc, #264]	@ (8002314 <MAX31855_CS_Disable+0x354>)
 800220a:	f004 ff07 	bl	800701c <HAL_GPIO_WritePin>
		break;
 800220e:	e20a      	b.n	8002626 <MAX31855_CS_Disable+0x666>
	case TC_CH5:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8002210:	2201      	movs	r2, #1
 8002212:	2101      	movs	r1, #1
 8002214:	483f      	ldr	r0, [pc, #252]	@ (8002314 <MAX31855_CS_Disable+0x354>)
 8002216:	f004 ff01 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 800221a:	2201      	movs	r2, #1
 800221c:	2102      	movs	r1, #2
 800221e:	483d      	ldr	r0, [pc, #244]	@ (8002314 <MAX31855_CS_Disable+0x354>)
 8002220:	f004 fefc 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8002224:	2201      	movs	r2, #1
 8002226:	2104      	movs	r1, #4
 8002228:	483a      	ldr	r0, [pc, #232]	@ (8002314 <MAX31855_CS_Disable+0x354>)
 800222a:	f004 fef7 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 800222e:	2201      	movs	r2, #1
 8002230:	2108      	movs	r1, #8
 8002232:	4838      	ldr	r0, [pc, #224]	@ (8002314 <MAX31855_CS_Disable+0x354>)
 8002234:	f004 fef2 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8002238:	2201      	movs	r2, #1
 800223a:	2110      	movs	r1, #16
 800223c:	4835      	ldr	r0, [pc, #212]	@ (8002314 <MAX31855_CS_Disable+0x354>)
 800223e:	f004 feed 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8002242:	2201      	movs	r2, #1
 8002244:	2120      	movs	r1, #32
 8002246:	4833      	ldr	r0, [pc, #204]	@ (8002314 <MAX31855_CS_Disable+0x354>)
 8002248:	f004 fee8 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 800224c:	2201      	movs	r2, #1
 800224e:	2140      	movs	r1, #64	@ 0x40
 8002250:	4830      	ldr	r0, [pc, #192]	@ (8002314 <MAX31855_CS_Disable+0x354>)
 8002252:	f004 fee3 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8002256:	2201      	movs	r2, #1
 8002258:	2180      	movs	r1, #128	@ 0x80
 800225a:	482e      	ldr	r0, [pc, #184]	@ (8002314 <MAX31855_CS_Disable+0x354>)
 800225c:	f004 fede 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8002260:	2201      	movs	r2, #1
 8002262:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002266:	482b      	ldr	r0, [pc, #172]	@ (8002314 <MAX31855_CS_Disable+0x354>)
 8002268:	f004 fed8 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 800226c:	2201      	movs	r2, #1
 800226e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002272:	4828      	ldr	r0, [pc, #160]	@ (8002314 <MAX31855_CS_Disable+0x354>)
 8002274:	f004 fed2 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8002278:	2201      	movs	r2, #1
 800227a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800227e:	4825      	ldr	r0, [pc, #148]	@ (8002314 <MAX31855_CS_Disable+0x354>)
 8002280:	f004 fecc 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8002284:	2201      	movs	r2, #1
 8002286:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800228a:	4822      	ldr	r0, [pc, #136]	@ (8002314 <MAX31855_CS_Disable+0x354>)
 800228c:	f004 fec6 	bl	800701c <HAL_GPIO_WritePin>
		break;
 8002290:	e1c9      	b.n	8002626 <MAX31855_CS_Disable+0x666>
	case TC_CH6:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8002292:	2201      	movs	r2, #1
 8002294:	2101      	movs	r1, #1
 8002296:	481f      	ldr	r0, [pc, #124]	@ (8002314 <MAX31855_CS_Disable+0x354>)
 8002298:	f004 fec0 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 800229c:	2201      	movs	r2, #1
 800229e:	2102      	movs	r1, #2
 80022a0:	481c      	ldr	r0, [pc, #112]	@ (8002314 <MAX31855_CS_Disable+0x354>)
 80022a2:	f004 febb 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 80022a6:	2201      	movs	r2, #1
 80022a8:	2104      	movs	r1, #4
 80022aa:	481a      	ldr	r0, [pc, #104]	@ (8002314 <MAX31855_CS_Disable+0x354>)
 80022ac:	f004 feb6 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 80022b0:	2201      	movs	r2, #1
 80022b2:	2108      	movs	r1, #8
 80022b4:	4817      	ldr	r0, [pc, #92]	@ (8002314 <MAX31855_CS_Disable+0x354>)
 80022b6:	f004 feb1 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 80022ba:	2201      	movs	r2, #1
 80022bc:	2110      	movs	r1, #16
 80022be:	4815      	ldr	r0, [pc, #84]	@ (8002314 <MAX31855_CS_Disable+0x354>)
 80022c0:	f004 feac 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 80022c4:	2201      	movs	r2, #1
 80022c6:	2120      	movs	r1, #32
 80022c8:	4812      	ldr	r0, [pc, #72]	@ (8002314 <MAX31855_CS_Disable+0x354>)
 80022ca:	f004 fea7 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 80022ce:	2201      	movs	r2, #1
 80022d0:	2140      	movs	r1, #64	@ 0x40
 80022d2:	4810      	ldr	r0, [pc, #64]	@ (8002314 <MAX31855_CS_Disable+0x354>)
 80022d4:	f004 fea2 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 80022d8:	2201      	movs	r2, #1
 80022da:	2180      	movs	r1, #128	@ 0x80
 80022dc:	480d      	ldr	r0, [pc, #52]	@ (8002314 <MAX31855_CS_Disable+0x354>)
 80022de:	f004 fe9d 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 80022e2:	2201      	movs	r2, #1
 80022e4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80022e8:	480a      	ldr	r0, [pc, #40]	@ (8002314 <MAX31855_CS_Disable+0x354>)
 80022ea:	f004 fe97 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 80022ee:	2201      	movs	r2, #1
 80022f0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80022f4:	4807      	ldr	r0, [pc, #28]	@ (8002314 <MAX31855_CS_Disable+0x354>)
 80022f6:	f004 fe91 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 80022fa:	2201      	movs	r2, #1
 80022fc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002300:	4804      	ldr	r0, [pc, #16]	@ (8002314 <MAX31855_CS_Disable+0x354>)
 8002302:	f004 fe8b 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8002306:	2201      	movs	r2, #1
 8002308:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800230c:	4801      	ldr	r0, [pc, #4]	@ (8002314 <MAX31855_CS_Disable+0x354>)
 800230e:	f004 fe85 	bl	800701c <HAL_GPIO_WritePin>
		break;
 8002312:	e188      	b.n	8002626 <MAX31855_CS_Disable+0x666>
 8002314:	58020c00 	.word	0x58020c00
	case TC_CH7:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8002318:	2201      	movs	r2, #1
 800231a:	2101      	movs	r1, #1
 800231c:	48c4      	ldr	r0, [pc, #784]	@ (8002630 <MAX31855_CS_Disable+0x670>)
 800231e:	f004 fe7d 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8002322:	2201      	movs	r2, #1
 8002324:	2102      	movs	r1, #2
 8002326:	48c2      	ldr	r0, [pc, #776]	@ (8002630 <MAX31855_CS_Disable+0x670>)
 8002328:	f004 fe78 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 800232c:	2201      	movs	r2, #1
 800232e:	2104      	movs	r1, #4
 8002330:	48bf      	ldr	r0, [pc, #764]	@ (8002630 <MAX31855_CS_Disable+0x670>)
 8002332:	f004 fe73 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8002336:	2201      	movs	r2, #1
 8002338:	2108      	movs	r1, #8
 800233a:	48bd      	ldr	r0, [pc, #756]	@ (8002630 <MAX31855_CS_Disable+0x670>)
 800233c:	f004 fe6e 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8002340:	2201      	movs	r2, #1
 8002342:	2110      	movs	r1, #16
 8002344:	48ba      	ldr	r0, [pc, #744]	@ (8002630 <MAX31855_CS_Disable+0x670>)
 8002346:	f004 fe69 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 800234a:	2201      	movs	r2, #1
 800234c:	2120      	movs	r1, #32
 800234e:	48b8      	ldr	r0, [pc, #736]	@ (8002630 <MAX31855_CS_Disable+0x670>)
 8002350:	f004 fe64 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8002354:	2201      	movs	r2, #1
 8002356:	2140      	movs	r1, #64	@ 0x40
 8002358:	48b5      	ldr	r0, [pc, #724]	@ (8002630 <MAX31855_CS_Disable+0x670>)
 800235a:	f004 fe5f 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 800235e:	2201      	movs	r2, #1
 8002360:	2180      	movs	r1, #128	@ 0x80
 8002362:	48b3      	ldr	r0, [pc, #716]	@ (8002630 <MAX31855_CS_Disable+0x670>)
 8002364:	f004 fe5a 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8002368:	2201      	movs	r2, #1
 800236a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800236e:	48b0      	ldr	r0, [pc, #704]	@ (8002630 <MAX31855_CS_Disable+0x670>)
 8002370:	f004 fe54 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8002374:	2201      	movs	r2, #1
 8002376:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800237a:	48ad      	ldr	r0, [pc, #692]	@ (8002630 <MAX31855_CS_Disable+0x670>)
 800237c:	f004 fe4e 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8002380:	2201      	movs	r2, #1
 8002382:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002386:	48aa      	ldr	r0, [pc, #680]	@ (8002630 <MAX31855_CS_Disable+0x670>)
 8002388:	f004 fe48 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 800238c:	2201      	movs	r2, #1
 800238e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002392:	48a7      	ldr	r0, [pc, #668]	@ (8002630 <MAX31855_CS_Disable+0x670>)
 8002394:	f004 fe42 	bl	800701c <HAL_GPIO_WritePin>
		break;
 8002398:	e145      	b.n	8002626 <MAX31855_CS_Disable+0x666>
	case TC_CH8:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 800239a:	2201      	movs	r2, #1
 800239c:	2101      	movs	r1, #1
 800239e:	48a4      	ldr	r0, [pc, #656]	@ (8002630 <MAX31855_CS_Disable+0x670>)
 80023a0:	f004 fe3c 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 80023a4:	2201      	movs	r2, #1
 80023a6:	2102      	movs	r1, #2
 80023a8:	48a1      	ldr	r0, [pc, #644]	@ (8002630 <MAX31855_CS_Disable+0x670>)
 80023aa:	f004 fe37 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 80023ae:	2201      	movs	r2, #1
 80023b0:	2104      	movs	r1, #4
 80023b2:	489f      	ldr	r0, [pc, #636]	@ (8002630 <MAX31855_CS_Disable+0x670>)
 80023b4:	f004 fe32 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 80023b8:	2201      	movs	r2, #1
 80023ba:	2108      	movs	r1, #8
 80023bc:	489c      	ldr	r0, [pc, #624]	@ (8002630 <MAX31855_CS_Disable+0x670>)
 80023be:	f004 fe2d 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 80023c2:	2201      	movs	r2, #1
 80023c4:	2110      	movs	r1, #16
 80023c6:	489a      	ldr	r0, [pc, #616]	@ (8002630 <MAX31855_CS_Disable+0x670>)
 80023c8:	f004 fe28 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 80023cc:	2201      	movs	r2, #1
 80023ce:	2120      	movs	r1, #32
 80023d0:	4897      	ldr	r0, [pc, #604]	@ (8002630 <MAX31855_CS_Disable+0x670>)
 80023d2:	f004 fe23 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 80023d6:	2201      	movs	r2, #1
 80023d8:	2140      	movs	r1, #64	@ 0x40
 80023da:	4895      	ldr	r0, [pc, #596]	@ (8002630 <MAX31855_CS_Disable+0x670>)
 80023dc:	f004 fe1e 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 80023e0:	2201      	movs	r2, #1
 80023e2:	2180      	movs	r1, #128	@ 0x80
 80023e4:	4892      	ldr	r0, [pc, #584]	@ (8002630 <MAX31855_CS_Disable+0x670>)
 80023e6:	f004 fe19 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 80023ea:	2201      	movs	r2, #1
 80023ec:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80023f0:	488f      	ldr	r0, [pc, #572]	@ (8002630 <MAX31855_CS_Disable+0x670>)
 80023f2:	f004 fe13 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 80023f6:	2201      	movs	r2, #1
 80023f8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80023fc:	488c      	ldr	r0, [pc, #560]	@ (8002630 <MAX31855_CS_Disable+0x670>)
 80023fe:	f004 fe0d 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8002402:	2201      	movs	r2, #1
 8002404:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002408:	4889      	ldr	r0, [pc, #548]	@ (8002630 <MAX31855_CS_Disable+0x670>)
 800240a:	f004 fe07 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 800240e:	2201      	movs	r2, #1
 8002410:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002414:	4886      	ldr	r0, [pc, #536]	@ (8002630 <MAX31855_CS_Disable+0x670>)
 8002416:	f004 fe01 	bl	800701c <HAL_GPIO_WritePin>
		break;
 800241a:	e104      	b.n	8002626 <MAX31855_CS_Disable+0x666>
	case TC_CH9:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 800241c:	2201      	movs	r2, #1
 800241e:	2101      	movs	r1, #1
 8002420:	4883      	ldr	r0, [pc, #524]	@ (8002630 <MAX31855_CS_Disable+0x670>)
 8002422:	f004 fdfb 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8002426:	2201      	movs	r2, #1
 8002428:	2102      	movs	r1, #2
 800242a:	4881      	ldr	r0, [pc, #516]	@ (8002630 <MAX31855_CS_Disable+0x670>)
 800242c:	f004 fdf6 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8002430:	2201      	movs	r2, #1
 8002432:	2104      	movs	r1, #4
 8002434:	487e      	ldr	r0, [pc, #504]	@ (8002630 <MAX31855_CS_Disable+0x670>)
 8002436:	f004 fdf1 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 800243a:	2201      	movs	r2, #1
 800243c:	2108      	movs	r1, #8
 800243e:	487c      	ldr	r0, [pc, #496]	@ (8002630 <MAX31855_CS_Disable+0x670>)
 8002440:	f004 fdec 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8002444:	2201      	movs	r2, #1
 8002446:	2110      	movs	r1, #16
 8002448:	4879      	ldr	r0, [pc, #484]	@ (8002630 <MAX31855_CS_Disable+0x670>)
 800244a:	f004 fde7 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 800244e:	2201      	movs	r2, #1
 8002450:	2120      	movs	r1, #32
 8002452:	4877      	ldr	r0, [pc, #476]	@ (8002630 <MAX31855_CS_Disable+0x670>)
 8002454:	f004 fde2 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8002458:	2201      	movs	r2, #1
 800245a:	2140      	movs	r1, #64	@ 0x40
 800245c:	4874      	ldr	r0, [pc, #464]	@ (8002630 <MAX31855_CS_Disable+0x670>)
 800245e:	f004 fddd 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8002462:	2201      	movs	r2, #1
 8002464:	2180      	movs	r1, #128	@ 0x80
 8002466:	4872      	ldr	r0, [pc, #456]	@ (8002630 <MAX31855_CS_Disable+0x670>)
 8002468:	f004 fdd8 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 800246c:	2201      	movs	r2, #1
 800246e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002472:	486f      	ldr	r0, [pc, #444]	@ (8002630 <MAX31855_CS_Disable+0x670>)
 8002474:	f004 fdd2 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8002478:	2201      	movs	r2, #1
 800247a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800247e:	486c      	ldr	r0, [pc, #432]	@ (8002630 <MAX31855_CS_Disable+0x670>)
 8002480:	f004 fdcc 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8002484:	2201      	movs	r2, #1
 8002486:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800248a:	4869      	ldr	r0, [pc, #420]	@ (8002630 <MAX31855_CS_Disable+0x670>)
 800248c:	f004 fdc6 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8002490:	2201      	movs	r2, #1
 8002492:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002496:	4866      	ldr	r0, [pc, #408]	@ (8002630 <MAX31855_CS_Disable+0x670>)
 8002498:	f004 fdc0 	bl	800701c <HAL_GPIO_WritePin>
		break;
 800249c:	e0c3      	b.n	8002626 <MAX31855_CS_Disable+0x666>
	case TC_CH10:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 800249e:	2201      	movs	r2, #1
 80024a0:	2101      	movs	r1, #1
 80024a2:	4863      	ldr	r0, [pc, #396]	@ (8002630 <MAX31855_CS_Disable+0x670>)
 80024a4:	f004 fdba 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 80024a8:	2201      	movs	r2, #1
 80024aa:	2102      	movs	r1, #2
 80024ac:	4860      	ldr	r0, [pc, #384]	@ (8002630 <MAX31855_CS_Disable+0x670>)
 80024ae:	f004 fdb5 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 80024b2:	2201      	movs	r2, #1
 80024b4:	2104      	movs	r1, #4
 80024b6:	485e      	ldr	r0, [pc, #376]	@ (8002630 <MAX31855_CS_Disable+0x670>)
 80024b8:	f004 fdb0 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 80024bc:	2201      	movs	r2, #1
 80024be:	2108      	movs	r1, #8
 80024c0:	485b      	ldr	r0, [pc, #364]	@ (8002630 <MAX31855_CS_Disable+0x670>)
 80024c2:	f004 fdab 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 80024c6:	2201      	movs	r2, #1
 80024c8:	2110      	movs	r1, #16
 80024ca:	4859      	ldr	r0, [pc, #356]	@ (8002630 <MAX31855_CS_Disable+0x670>)
 80024cc:	f004 fda6 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 80024d0:	2201      	movs	r2, #1
 80024d2:	2120      	movs	r1, #32
 80024d4:	4856      	ldr	r0, [pc, #344]	@ (8002630 <MAX31855_CS_Disable+0x670>)
 80024d6:	f004 fda1 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 80024da:	2201      	movs	r2, #1
 80024dc:	2140      	movs	r1, #64	@ 0x40
 80024de:	4854      	ldr	r0, [pc, #336]	@ (8002630 <MAX31855_CS_Disable+0x670>)
 80024e0:	f004 fd9c 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 80024e4:	2201      	movs	r2, #1
 80024e6:	2180      	movs	r1, #128	@ 0x80
 80024e8:	4851      	ldr	r0, [pc, #324]	@ (8002630 <MAX31855_CS_Disable+0x670>)
 80024ea:	f004 fd97 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 80024ee:	2201      	movs	r2, #1
 80024f0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80024f4:	484e      	ldr	r0, [pc, #312]	@ (8002630 <MAX31855_CS_Disable+0x670>)
 80024f6:	f004 fd91 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 80024fa:	2201      	movs	r2, #1
 80024fc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002500:	484b      	ldr	r0, [pc, #300]	@ (8002630 <MAX31855_CS_Disable+0x670>)
 8002502:	f004 fd8b 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8002506:	2201      	movs	r2, #1
 8002508:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800250c:	4848      	ldr	r0, [pc, #288]	@ (8002630 <MAX31855_CS_Disable+0x670>)
 800250e:	f004 fd85 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8002512:	2201      	movs	r2, #1
 8002514:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002518:	4845      	ldr	r0, [pc, #276]	@ (8002630 <MAX31855_CS_Disable+0x670>)
 800251a:	f004 fd7f 	bl	800701c <HAL_GPIO_WritePin>
		break;
 800251e:	e082      	b.n	8002626 <MAX31855_CS_Disable+0x666>
	case TC_CH11:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8002520:	2201      	movs	r2, #1
 8002522:	2101      	movs	r1, #1
 8002524:	4842      	ldr	r0, [pc, #264]	@ (8002630 <MAX31855_CS_Disable+0x670>)
 8002526:	f004 fd79 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 800252a:	2201      	movs	r2, #1
 800252c:	2102      	movs	r1, #2
 800252e:	4840      	ldr	r0, [pc, #256]	@ (8002630 <MAX31855_CS_Disable+0x670>)
 8002530:	f004 fd74 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8002534:	2201      	movs	r2, #1
 8002536:	2104      	movs	r1, #4
 8002538:	483d      	ldr	r0, [pc, #244]	@ (8002630 <MAX31855_CS_Disable+0x670>)
 800253a:	f004 fd6f 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 800253e:	2201      	movs	r2, #1
 8002540:	2108      	movs	r1, #8
 8002542:	483b      	ldr	r0, [pc, #236]	@ (8002630 <MAX31855_CS_Disable+0x670>)
 8002544:	f004 fd6a 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8002548:	2201      	movs	r2, #1
 800254a:	2110      	movs	r1, #16
 800254c:	4838      	ldr	r0, [pc, #224]	@ (8002630 <MAX31855_CS_Disable+0x670>)
 800254e:	f004 fd65 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8002552:	2201      	movs	r2, #1
 8002554:	2120      	movs	r1, #32
 8002556:	4836      	ldr	r0, [pc, #216]	@ (8002630 <MAX31855_CS_Disable+0x670>)
 8002558:	f004 fd60 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 800255c:	2201      	movs	r2, #1
 800255e:	2140      	movs	r1, #64	@ 0x40
 8002560:	4833      	ldr	r0, [pc, #204]	@ (8002630 <MAX31855_CS_Disable+0x670>)
 8002562:	f004 fd5b 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8002566:	2201      	movs	r2, #1
 8002568:	2180      	movs	r1, #128	@ 0x80
 800256a:	4831      	ldr	r0, [pc, #196]	@ (8002630 <MAX31855_CS_Disable+0x670>)
 800256c:	f004 fd56 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8002570:	2201      	movs	r2, #1
 8002572:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002576:	482e      	ldr	r0, [pc, #184]	@ (8002630 <MAX31855_CS_Disable+0x670>)
 8002578:	f004 fd50 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 800257c:	2201      	movs	r2, #1
 800257e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002582:	482b      	ldr	r0, [pc, #172]	@ (8002630 <MAX31855_CS_Disable+0x670>)
 8002584:	f004 fd4a 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8002588:	2201      	movs	r2, #1
 800258a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800258e:	4828      	ldr	r0, [pc, #160]	@ (8002630 <MAX31855_CS_Disable+0x670>)
 8002590:	f004 fd44 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8002594:	2201      	movs	r2, #1
 8002596:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800259a:	4825      	ldr	r0, [pc, #148]	@ (8002630 <MAX31855_CS_Disable+0x670>)
 800259c:	f004 fd3e 	bl	800701c <HAL_GPIO_WritePin>
		break;
 80025a0:	e041      	b.n	8002626 <MAX31855_CS_Disable+0x666>
	case TC_CH12:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 80025a2:	2201      	movs	r2, #1
 80025a4:	2101      	movs	r1, #1
 80025a6:	4822      	ldr	r0, [pc, #136]	@ (8002630 <MAX31855_CS_Disable+0x670>)
 80025a8:	f004 fd38 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 80025ac:	2201      	movs	r2, #1
 80025ae:	2102      	movs	r1, #2
 80025b0:	481f      	ldr	r0, [pc, #124]	@ (8002630 <MAX31855_CS_Disable+0x670>)
 80025b2:	f004 fd33 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 80025b6:	2201      	movs	r2, #1
 80025b8:	2104      	movs	r1, #4
 80025ba:	481d      	ldr	r0, [pc, #116]	@ (8002630 <MAX31855_CS_Disable+0x670>)
 80025bc:	f004 fd2e 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 80025c0:	2201      	movs	r2, #1
 80025c2:	2108      	movs	r1, #8
 80025c4:	481a      	ldr	r0, [pc, #104]	@ (8002630 <MAX31855_CS_Disable+0x670>)
 80025c6:	f004 fd29 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 80025ca:	2201      	movs	r2, #1
 80025cc:	2110      	movs	r1, #16
 80025ce:	4818      	ldr	r0, [pc, #96]	@ (8002630 <MAX31855_CS_Disable+0x670>)
 80025d0:	f004 fd24 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 80025d4:	2201      	movs	r2, #1
 80025d6:	2120      	movs	r1, #32
 80025d8:	4815      	ldr	r0, [pc, #84]	@ (8002630 <MAX31855_CS_Disable+0x670>)
 80025da:	f004 fd1f 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 80025de:	2201      	movs	r2, #1
 80025e0:	2140      	movs	r1, #64	@ 0x40
 80025e2:	4813      	ldr	r0, [pc, #76]	@ (8002630 <MAX31855_CS_Disable+0x670>)
 80025e4:	f004 fd1a 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 80025e8:	2201      	movs	r2, #1
 80025ea:	2180      	movs	r1, #128	@ 0x80
 80025ec:	4810      	ldr	r0, [pc, #64]	@ (8002630 <MAX31855_CS_Disable+0x670>)
 80025ee:	f004 fd15 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 80025f2:	2201      	movs	r2, #1
 80025f4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80025f8:	480d      	ldr	r0, [pc, #52]	@ (8002630 <MAX31855_CS_Disable+0x670>)
 80025fa:	f004 fd0f 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 80025fe:	2201      	movs	r2, #1
 8002600:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002604:	480a      	ldr	r0, [pc, #40]	@ (8002630 <MAX31855_CS_Disable+0x670>)
 8002606:	f004 fd09 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 800260a:	2201      	movs	r2, #1
 800260c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002610:	4807      	ldr	r0, [pc, #28]	@ (8002630 <MAX31855_CS_Disable+0x670>)
 8002612:	f004 fd03 	bl	800701c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8002616:	2201      	movs	r2, #1
 8002618:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800261c:	4804      	ldr	r0, [pc, #16]	@ (8002630 <MAX31855_CS_Disable+0x670>)
 800261e:	f004 fcfd 	bl	800701c <HAL_GPIO_WritePin>
		break;
 8002622:	e000      	b.n	8002626 <MAX31855_CS_Disable+0x666>
	default:
		break;
 8002624:	bf00      	nop
	}
}
 8002626:	bf00      	nop
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	58020c00 	.word	0x58020c00

08002634 <MAX31855_ReadData>:

// SPI를 통해 MAX31855에서 32비트 데이터 읽기
uint32_t MAX31855_ReadData(uint8_t ch)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	4603      	mov	r3, r0
 800263c:	71fb      	strb	r3, [r7, #7]
	uint8_t rxBuffer[4] = {0}; // 4바이트(32비트) 데이터 버퍼
 800263e:	2300      	movs	r3, #0
 8002640:	60bb      	str	r3, [r7, #8]
	uint32_t rawData = 0;
 8002642:	2300      	movs	r3, #0
 8002644:	60fb      	str	r3, [r7, #12]

	MAX31855_CS_Enable(ch); // CS Low → SPI 시작
 8002646:	79fb      	ldrb	r3, [r7, #7]
 8002648:	4618      	mov	r0, r3
 800264a:	f7ff f97f 	bl	800194c <MAX31855_CS_Enable>
	HAL_SPI_Receive(&hspi1, rxBuffer, 4, SPI_TIMEOUT); // 32비트(4바이트) 데이터 수신
 800264e:	f107 0108 	add.w	r1, r7, #8
 8002652:	2364      	movs	r3, #100	@ 0x64
 8002654:	2204      	movs	r2, #4
 8002656:	480b      	ldr	r0, [pc, #44]	@ (8002684 <MAX31855_ReadData+0x50>)
 8002658:	f008 fba4 	bl	800ada4 <HAL_SPI_Receive>
	MAX31855_CS_Disable(ch); // CS High → SPI 종료
 800265c:	79fb      	ldrb	r3, [r7, #7]
 800265e:	4618      	mov	r0, r3
 8002660:	f7ff fcae 	bl	8001fc0 <MAX31855_CS_Disable>

	// 4바이트 데이터를 32비트 정수로 변환
	rawData = ((uint32_t)rxBuffer[0] << 24) |
 8002664:	7a3b      	ldrb	r3, [r7, #8]
 8002666:	061a      	lsls	r2, r3, #24
			((uint32_t)rxBuffer[1] << 16) |
 8002668:	7a7b      	ldrb	r3, [r7, #9]
 800266a:	041b      	lsls	r3, r3, #16
	rawData = ((uint32_t)rxBuffer[0] << 24) |
 800266c:	431a      	orrs	r2, r3
			((uint32_t)rxBuffer[2] << 8) |
 800266e:	7abb      	ldrb	r3, [r7, #10]
 8002670:	021b      	lsls	r3, r3, #8
			((uint32_t)rxBuffer[1] << 16) |
 8002672:	4313      	orrs	r3, r2
			((uint32_t)rxBuffer[3]);
 8002674:	7afa      	ldrb	r2, [r7, #11]
	rawData = ((uint32_t)rxBuffer[0] << 24) |
 8002676:	4313      	orrs	r3, r2
 8002678:	60fb      	str	r3, [r7, #12]

	return rawData;
 800267a:	68fb      	ldr	r3, [r7, #12]
}
 800267c:	4618      	mov	r0, r3
 800267e:	3710      	adds	r7, #16
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	24000194 	.word	0x24000194

08002688 <MAX31855_GetThermocoupleTemperature>:

// 열전대(Hot Junction) 온도 변환 함수
float MAX31855_GetThermocoupleTemperature(uint8_t ch)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	4603      	mov	r3, r0
 8002690:	71fb      	strb	r3, [r7, #7]
	uint32_t rawData = MAX31855_ReadData(ch);
 8002692:	79fb      	ldrb	r3, [r7, #7]
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff ffcd 	bl	8002634 <MAX31855_ReadData>
 800269a:	60b8      	str	r0, [r7, #8]
	int16_t tempData = (rawData >> 18) & 0x3FFF; // 상위 14비트 추출
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	0c9b      	lsrs	r3, r3, #18
 80026a0:	81fb      	strh	r3, [r7, #14]

	// 음수 보정 (2의 보수 변환)
	if (rawData & 0x80000000)
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	da05      	bge.n	80026b4 <MAX31855_GetThermocoupleTemperature+0x2c>
	{
		tempData |= 0xC000; // 부호 확장
 80026a8:	89fb      	ldrh	r3, [r7, #14]
 80026aa:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 80026ae:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 80026b2:	81fb      	strh	r3, [r7, #14]
	}

	return (float)tempData * 0.25; // 해상도 0.25°C 변환
 80026b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80026b8:	ee07 3a90 	vmov	s15, r3
 80026bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026c0:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 80026c4:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80026c8:	eeb0 0a67 	vmov.f32	s0, s15
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
	...

080026d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80026d4:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8002710 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80026d8:	f7fe f896 	bl	8000808 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80026dc:	f7fd ffe6 	bl	80006ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026e0:	480c      	ldr	r0, [pc, #48]	@ (8002714 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80026e2:	490d      	ldr	r1, [pc, #52]	@ (8002718 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80026e4:	4a0d      	ldr	r2, [pc, #52]	@ (800271c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80026e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026e8:	e002      	b.n	80026f0 <LoopCopyDataInit>

080026ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026ee:	3304      	adds	r3, #4

080026f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026f4:	d3f9      	bcc.n	80026ea <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002720 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026f8:	4c0a      	ldr	r4, [pc, #40]	@ (8002724 <LoopFillZerobss+0x22>)
  movs r3, #0
 80026fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026fc:	e001      	b.n	8002702 <LoopFillZerobss>

080026fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002700:	3204      	adds	r2, #4

08002702 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002702:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002704:	d3fb      	bcc.n	80026fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002706:	f00a fdcb 	bl	800d2a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800270a:	f7fe f8eb 	bl	80008e4 <main>
  bx  lr
 800270e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002710:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002714:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002718:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 800271c:	0800ddcc 	.word	0x0800ddcc
  ldr r2, =_sbss
 8002720:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 8002724:	240004ec 	.word	0x240004ec

08002728 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002728:	e7fe      	b.n	8002728 <ADC3_IRQHandler>
	...

0800272c <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b08c      	sub	sp, #48	@ 0x30
 8002730:	af00      	add	r7, sp, #0
 8002732:	4603      	mov	r3, r0
 8002734:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002736:	2300      	movs	r3, #0
 8002738:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800273a:	79fb      	ldrb	r3, [r7, #7]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d009      	beq.n	8002754 <BSP_LED_Init+0x28>
 8002740:	79fb      	ldrb	r3, [r7, #7]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d006      	beq.n	8002754 <BSP_LED_Init+0x28>
 8002746:	79fb      	ldrb	r3, [r7, #7]
 8002748:	2b02      	cmp	r3, #2
 800274a:	d003      	beq.n	8002754 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800274c:	f06f 0301 	mvn.w	r3, #1
 8002750:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002752:	e055      	b.n	8002800 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8002754:	79fb      	ldrb	r3, [r7, #7]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d10f      	bne.n	800277a <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 800275a:	4b2c      	ldr	r3, [pc, #176]	@ (800280c <BSP_LED_Init+0xe0>)
 800275c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002760:	4a2a      	ldr	r2, [pc, #168]	@ (800280c <BSP_LED_Init+0xe0>)
 8002762:	f043 0302 	orr.w	r3, r3, #2
 8002766:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800276a:	4b28      	ldr	r3, [pc, #160]	@ (800280c <BSP_LED_Init+0xe0>)
 800276c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002770:	f003 0302 	and.w	r3, r3, #2
 8002774:	617b      	str	r3, [r7, #20]
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	e021      	b.n	80027be <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 800277a:	79fb      	ldrb	r3, [r7, #7]
 800277c:	2b01      	cmp	r3, #1
 800277e:	d10f      	bne.n	80027a0 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8002780:	4b22      	ldr	r3, [pc, #136]	@ (800280c <BSP_LED_Init+0xe0>)
 8002782:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002786:	4a21      	ldr	r2, [pc, #132]	@ (800280c <BSP_LED_Init+0xe0>)
 8002788:	f043 0310 	orr.w	r3, r3, #16
 800278c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002790:	4b1e      	ldr	r3, [pc, #120]	@ (800280c <BSP_LED_Init+0xe0>)
 8002792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002796:	f003 0310 	and.w	r3, r3, #16
 800279a:	613b      	str	r3, [r7, #16]
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	e00e      	b.n	80027be <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 80027a0:	4b1a      	ldr	r3, [pc, #104]	@ (800280c <BSP_LED_Init+0xe0>)
 80027a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027a6:	4a19      	ldr	r2, [pc, #100]	@ (800280c <BSP_LED_Init+0xe0>)
 80027a8:	f043 0302 	orr.w	r3, r3, #2
 80027ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80027b0:	4b16      	ldr	r3, [pc, #88]	@ (800280c <BSP_LED_Init+0xe0>)
 80027b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 80027be:	79fb      	ldrb	r3, [r7, #7]
 80027c0:	4a13      	ldr	r2, [pc, #76]	@ (8002810 <BSP_LED_Init+0xe4>)
 80027c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80027c6:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80027c8:	2301      	movs	r3, #1
 80027ca:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 80027cc:	2300      	movs	r3, #0
 80027ce:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027d0:	2303      	movs	r3, #3
 80027d2:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80027d4:	79fb      	ldrb	r3, [r7, #7]
 80027d6:	4a0f      	ldr	r2, [pc, #60]	@ (8002814 <BSP_LED_Init+0xe8>)
 80027d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027dc:	f107 0218 	add.w	r2, r7, #24
 80027e0:	4611      	mov	r1, r2
 80027e2:	4618      	mov	r0, r3
 80027e4:	f004 fa6a 	bl	8006cbc <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80027e8:	79fb      	ldrb	r3, [r7, #7]
 80027ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002814 <BSP_LED_Init+0xe8>)
 80027ec:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80027f0:	79fb      	ldrb	r3, [r7, #7]
 80027f2:	4a07      	ldr	r2, [pc, #28]	@ (8002810 <BSP_LED_Init+0xe4>)
 80027f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80027f8:	2200      	movs	r2, #0
 80027fa:	4619      	mov	r1, r3
 80027fc:	f004 fc0e 	bl	800701c <HAL_GPIO_WritePin>
  }

  return ret;
 8002800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8002802:	4618      	mov	r0, r3
 8002804:	3730      	adds	r7, #48	@ 0x30
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	58024400 	.word	0x58024400
 8002810:	0800dd5c 	.word	0x0800dd5c
 8002814:	2400000c 	.word	0x2400000c

08002818 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	4603      	mov	r3, r0
 8002820:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002822:	2300      	movs	r3, #0
 8002824:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8002826:	79fb      	ldrb	r3, [r7, #7]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d009      	beq.n	8002840 <BSP_LED_On+0x28>
 800282c:	79fb      	ldrb	r3, [r7, #7]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d006      	beq.n	8002840 <BSP_LED_On+0x28>
 8002832:	79fb      	ldrb	r3, [r7, #7]
 8002834:	2b02      	cmp	r3, #2
 8002836:	d003      	beq.n	8002840 <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002838:	f06f 0301 	mvn.w	r3, #1
 800283c:	60fb      	str	r3, [r7, #12]
 800283e:	e00b      	b.n	8002858 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8002840:	79fb      	ldrb	r3, [r7, #7]
 8002842:	4a08      	ldr	r2, [pc, #32]	@ (8002864 <BSP_LED_On+0x4c>)
 8002844:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002848:	79fb      	ldrb	r3, [r7, #7]
 800284a:	4a07      	ldr	r2, [pc, #28]	@ (8002868 <BSP_LED_On+0x50>)
 800284c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002850:	2201      	movs	r2, #1
 8002852:	4619      	mov	r1, r3
 8002854:	f004 fbe2 	bl	800701c <HAL_GPIO_WritePin>
  }

  return ret;
 8002858:	68fb      	ldr	r3, [r7, #12]
}
 800285a:	4618      	mov	r0, r3
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	2400000c 	.word	0x2400000c
 8002868:	0800dd5c 	.word	0x0800dd5c

0800286c <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	4603      	mov	r3, r0
 8002874:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002876:	2300      	movs	r3, #0
 8002878:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800287a:	79fb      	ldrb	r3, [r7, #7]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d009      	beq.n	8002894 <BSP_LED_Off+0x28>
 8002880:	79fb      	ldrb	r3, [r7, #7]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d006      	beq.n	8002894 <BSP_LED_Off+0x28>
 8002886:	79fb      	ldrb	r3, [r7, #7]
 8002888:	2b02      	cmp	r3, #2
 800288a:	d003      	beq.n	8002894 <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800288c:	f06f 0301 	mvn.w	r3, #1
 8002890:	60fb      	str	r3, [r7, #12]
 8002892:	e00b      	b.n	80028ac <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002894:	79fb      	ldrb	r3, [r7, #7]
 8002896:	4a08      	ldr	r2, [pc, #32]	@ (80028b8 <BSP_LED_Off+0x4c>)
 8002898:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800289c:	79fb      	ldrb	r3, [r7, #7]
 800289e:	4a07      	ldr	r2, [pc, #28]	@ (80028bc <BSP_LED_Off+0x50>)
 80028a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80028a4:	2200      	movs	r2, #0
 80028a6:	4619      	mov	r1, r3
 80028a8:	f004 fbb8 	bl	800701c <HAL_GPIO_WritePin>
  }

  return ret;
 80028ac:	68fb      	ldr	r3, [r7, #12]
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3710      	adds	r7, #16
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	2400000c 	.word	0x2400000c
 80028bc:	0800dd5c 	.word	0x0800dd5c

080028c0 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	4603      	mov	r3, r0
 80028c8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80028ca:	2300      	movs	r3, #0
 80028cc:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80028ce:	79fb      	ldrb	r3, [r7, #7]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d009      	beq.n	80028e8 <BSP_LED_Toggle+0x28>
 80028d4:	79fb      	ldrb	r3, [r7, #7]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d006      	beq.n	80028e8 <BSP_LED_Toggle+0x28>
 80028da:	79fb      	ldrb	r3, [r7, #7]
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d003      	beq.n	80028e8 <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80028e0:	f06f 0301 	mvn.w	r3, #1
 80028e4:	60fb      	str	r3, [r7, #12]
 80028e6:	e00b      	b.n	8002900 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80028e8:	79fb      	ldrb	r3, [r7, #7]
 80028ea:	4a08      	ldr	r2, [pc, #32]	@ (800290c <BSP_LED_Toggle+0x4c>)
 80028ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80028f0:	79fb      	ldrb	r3, [r7, #7]
 80028f2:	4907      	ldr	r1, [pc, #28]	@ (8002910 <BSP_LED_Toggle+0x50>)
 80028f4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80028f8:	4619      	mov	r1, r3
 80028fa:	4610      	mov	r0, r2
 80028fc:	f004 fba7 	bl	800704e <HAL_GPIO_TogglePin>
  }

  return ret;
 8002900:	68fb      	ldr	r3, [r7, #12]
}
 8002902:	4618      	mov	r0, r3
 8002904:	3710      	adds	r7, #16
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	2400000c 	.word	0x2400000c
 8002910:	0800dd5c 	.word	0x0800dd5c

08002914 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b088      	sub	sp, #32
 8002918:	af00      	add	r7, sp, #0
 800291a:	4603      	mov	r3, r0
 800291c:	460a      	mov	r2, r1
 800291e:	71fb      	strb	r3, [r7, #7]
 8002920:	4613      	mov	r3, r2
 8002922:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8002924:	4b2e      	ldr	r3, [pc, #184]	@ (80029e0 <BSP_PB_Init+0xcc>)
 8002926:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800292a:	4a2d      	ldr	r2, [pc, #180]	@ (80029e0 <BSP_PB_Init+0xcc>)
 800292c:	f043 0304 	orr.w	r3, r3, #4
 8002930:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002934:	4b2a      	ldr	r3, [pc, #168]	@ (80029e0 <BSP_PB_Init+0xcc>)
 8002936:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800293a:	f003 0304 	and.w	r3, r3, #4
 800293e:	60bb      	str	r3, [r7, #8]
 8002940:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8002942:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002946:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8002948:	2302      	movs	r3, #2
 800294a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800294c:	2302      	movs	r3, #2
 800294e:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8002950:	79bb      	ldrb	r3, [r7, #6]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d10c      	bne.n	8002970 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002956:	2300      	movs	r3, #0
 8002958:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 800295a:	79fb      	ldrb	r3, [r7, #7]
 800295c:	4a21      	ldr	r2, [pc, #132]	@ (80029e4 <BSP_PB_Init+0xd0>)
 800295e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002962:	f107 020c 	add.w	r2, r7, #12
 8002966:	4611      	mov	r1, r2
 8002968:	4618      	mov	r0, r3
 800296a:	f004 f9a7 	bl	8006cbc <HAL_GPIO_Init>
 800296e:	e031      	b.n	80029d4 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8002970:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002974:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002976:	79fb      	ldrb	r3, [r7, #7]
 8002978:	4a1a      	ldr	r2, [pc, #104]	@ (80029e4 <BSP_PB_Init+0xd0>)
 800297a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800297e:	f107 020c 	add.w	r2, r7, #12
 8002982:	4611      	mov	r1, r2
 8002984:	4618      	mov	r0, r3
 8002986:	f004 f999 	bl	8006cbc <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 800298a:	79fb      	ldrb	r3, [r7, #7]
 800298c:	00db      	lsls	r3, r3, #3
 800298e:	4a16      	ldr	r2, [pc, #88]	@ (80029e8 <BSP_PB_Init+0xd4>)
 8002990:	441a      	add	r2, r3
 8002992:	79fb      	ldrb	r3, [r7, #7]
 8002994:	4915      	ldr	r1, [pc, #84]	@ (80029ec <BSP_PB_Init+0xd8>)
 8002996:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800299a:	4619      	mov	r1, r3
 800299c:	4610      	mov	r0, r2
 800299e:	f004 f93c 	bl	8006c1a <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80029a2:	79fb      	ldrb	r3, [r7, #7]
 80029a4:	00db      	lsls	r3, r3, #3
 80029a6:	4a10      	ldr	r2, [pc, #64]	@ (80029e8 <BSP_PB_Init+0xd4>)
 80029a8:	1898      	adds	r0, r3, r2
 80029aa:	79fb      	ldrb	r3, [r7, #7]
 80029ac:	4a10      	ldr	r2, [pc, #64]	@ (80029f0 <BSP_PB_Init+0xdc>)
 80029ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029b2:	461a      	mov	r2, r3
 80029b4:	2100      	movs	r1, #0
 80029b6:	f004 f911 	bl	8006bdc <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80029ba:	2028      	movs	r0, #40	@ 0x28
 80029bc:	79fb      	ldrb	r3, [r7, #7]
 80029be:	4a0d      	ldr	r2, [pc, #52]	@ (80029f4 <BSP_PB_Init+0xe0>)
 80029c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029c4:	2200      	movs	r2, #0
 80029c6:	4619      	mov	r1, r3
 80029c8:	f001 ffe9 	bl	800499e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80029cc:	2328      	movs	r3, #40	@ 0x28
 80029ce:	4618      	mov	r0, r3
 80029d0:	f001 ffff 	bl	80049d2 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3720      	adds	r7, #32
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	58024400 	.word	0x58024400
 80029e4:	24000018 	.word	0x24000018
 80029e8:	240002fc 	.word	0x240002fc
 80029ec:	0800dd64 	.word	0x0800dd64
 80029f0:	2400001c 	.word	0x2400001c
 80029f4:	24000020 	.word	0x24000020

080029f8 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	4603      	mov	r3, r0
 8002a00:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8002a02:	79fb      	ldrb	r3, [r7, #7]
 8002a04:	00db      	lsls	r3, r3, #3
 8002a06:	4a04      	ldr	r2, [pc, #16]	@ (8002a18 <BSP_PB_IRQHandler+0x20>)
 8002a08:	4413      	add	r3, r2
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f004 f91a 	bl	8006c44 <HAL_EXTI_IRQHandler>
}
 8002a10:	bf00      	nop
 8002a12:	3708      	adds	r7, #8
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	240002fc 	.word	0x240002fc

08002a1c <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	4603      	mov	r3, r0
 8002a24:	6039      	str	r1, [r7, #0]
 8002a26:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8002a2c:	79fb      	ldrb	r3, [r7, #7]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d003      	beq.n	8002a3a <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002a32:	f06f 0301 	mvn.w	r3, #1
 8002a36:	60fb      	str	r3, [r7, #12]
 8002a38:	e018      	b.n	8002a6c <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8002a3a:	79fb      	ldrb	r3, [r7, #7]
 8002a3c:	2294      	movs	r2, #148	@ 0x94
 8002a3e:	fb02 f303 	mul.w	r3, r2, r3
 8002a42:	4a0d      	ldr	r2, [pc, #52]	@ (8002a78 <BSP_COM_Init+0x5c>)
 8002a44:	4413      	add	r3, r2
 8002a46:	4618      	mov	r0, r3
 8002a48:	f000 f86e 	bl	8002b28 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8002a4c:	79fb      	ldrb	r3, [r7, #7]
 8002a4e:	2294      	movs	r2, #148	@ 0x94
 8002a50:	fb02 f303 	mul.w	r3, r2, r3
 8002a54:	4a08      	ldr	r2, [pc, #32]	@ (8002a78 <BSP_COM_Init+0x5c>)
 8002a56:	4413      	add	r3, r2
 8002a58:	6839      	ldr	r1, [r7, #0]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f000 f80e 	bl	8002a7c <MX_USART3_Init>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d002      	beq.n	8002a6c <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002a66:	f06f 0303 	mvn.w	r3, #3
 8002a6a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3710      	adds	r7, #16
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	24000304 	.word	0x24000304

08002a7c <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8002a86:	4b15      	ldr	r3, [pc, #84]	@ (8002adc <MX_USART3_Init+0x60>)
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	220c      	movs	r2, #12
 8002a9a:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	895b      	ldrh	r3, [r3, #10]
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685a      	ldr	r2, [r3, #4]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	891b      	ldrh	r3, [r3, #8]
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	899b      	ldrh	r3, [r3, #12]
 8002abc:	461a      	mov	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002ac8:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f009 f978 	bl	800bdc0 <HAL_UART_Init>
 8002ad0:	4603      	mov	r3, r0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3708      	adds	r7, #8
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	24000008 	.word	0x24000008

08002ae0 <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8002ae8:	4b09      	ldr	r3, [pc, #36]	@ (8002b10 <__io_putchar+0x30>)
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	461a      	mov	r2, r3
 8002aee:	2394      	movs	r3, #148	@ 0x94
 8002af0:	fb02 f303 	mul.w	r3, r2, r3
 8002af4:	4a07      	ldr	r2, [pc, #28]	@ (8002b14 <__io_putchar+0x34>)
 8002af6:	1898      	adds	r0, r3, r2
 8002af8:	1d39      	adds	r1, r7, #4
 8002afa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002afe:	2201      	movs	r2, #1
 8002b00:	f009 f9b8 	bl	800be74 <HAL_UART_Transmit>
  return ch;
 8002b04:	687b      	ldr	r3, [r7, #4]
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3708      	adds	r7, #8
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	24000398 	.word	0x24000398
 8002b14:	24000304 	.word	0x24000304

08002b18 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8002b1c:	2000      	movs	r0, #0
 8002b1e:	f7fe fb61 	bl	80011e4 <BSP_PB_Callback>
}
 8002b22:	bf00      	nop
 8002b24:	bd80      	pop	{r7, pc}
	...

08002b28 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b08a      	sub	sp, #40	@ 0x28
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8002b30:	4b27      	ldr	r3, [pc, #156]	@ (8002bd0 <COM1_MspInit+0xa8>)
 8002b32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b36:	4a26      	ldr	r2, [pc, #152]	@ (8002bd0 <COM1_MspInit+0xa8>)
 8002b38:	f043 0308 	orr.w	r3, r3, #8
 8002b3c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002b40:	4b23      	ldr	r3, [pc, #140]	@ (8002bd0 <COM1_MspInit+0xa8>)
 8002b42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b46:	f003 0308 	and.w	r3, r3, #8
 8002b4a:	613b      	str	r3, [r7, #16]
 8002b4c:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8002b4e:	4b20      	ldr	r3, [pc, #128]	@ (8002bd0 <COM1_MspInit+0xa8>)
 8002b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b54:	4a1e      	ldr	r2, [pc, #120]	@ (8002bd0 <COM1_MspInit+0xa8>)
 8002b56:	f043 0308 	orr.w	r3, r3, #8
 8002b5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002b5e:	4b1c      	ldr	r3, [pc, #112]	@ (8002bd0 <COM1_MspInit+0xa8>)
 8002b60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b64:	f003 0308 	and.w	r3, r3, #8
 8002b68:	60fb      	str	r3, [r7, #12]
 8002b6a:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8002b6c:	4b18      	ldr	r3, [pc, #96]	@ (8002bd0 <COM1_MspInit+0xa8>)
 8002b6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002b72:	4a17      	ldr	r2, [pc, #92]	@ (8002bd0 <COM1_MspInit+0xa8>)
 8002b74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b78:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002b7c:	4b14      	ldr	r3, [pc, #80]	@ (8002bd0 <COM1_MspInit+0xa8>)
 8002b7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002b82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b86:	60bb      	str	r3, [r7, #8]
 8002b88:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 8002b8a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b8e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002b90:	2302      	movs	r3, #2
 8002b92:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b94:	2302      	movs	r3, #2
 8002b96:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8002b9c:	2307      	movs	r3, #7
 8002b9e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8002ba0:	f107 0314 	add.w	r3, r7, #20
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	480b      	ldr	r0, [pc, #44]	@ (8002bd4 <COM1_MspInit+0xac>)
 8002ba8:	f004 f888 	bl	8006cbc <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8002bac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002bb0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8002bb6:	2307      	movs	r3, #7
 8002bb8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8002bba:	f107 0314 	add.w	r3, r7, #20
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	4804      	ldr	r0, [pc, #16]	@ (8002bd4 <COM1_MspInit+0xac>)
 8002bc2:	f004 f87b 	bl	8006cbc <HAL_GPIO_Init>
}
 8002bc6:	bf00      	nop
 8002bc8:	3728      	adds	r7, #40	@ 0x28
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	58024400 	.word	0x58024400
 8002bd4:	58020c00 	.word	0x58020c00

08002bd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bde:	2003      	movs	r0, #3
 8002be0:	f001 fed2 	bl	8004988 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002be4:	f005 f8e6 	bl	8007db4 <HAL_RCC_GetSysClockFreq>
 8002be8:	4602      	mov	r2, r0
 8002bea:	4b15      	ldr	r3, [pc, #84]	@ (8002c40 <HAL_Init+0x68>)
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	0a1b      	lsrs	r3, r3, #8
 8002bf0:	f003 030f 	and.w	r3, r3, #15
 8002bf4:	4913      	ldr	r1, [pc, #76]	@ (8002c44 <HAL_Init+0x6c>)
 8002bf6:	5ccb      	ldrb	r3, [r1, r3]
 8002bf8:	f003 031f 	and.w	r3, r3, #31
 8002bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8002c00:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002c02:	4b0f      	ldr	r3, [pc, #60]	@ (8002c40 <HAL_Init+0x68>)
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	f003 030f 	and.w	r3, r3, #15
 8002c0a:	4a0e      	ldr	r2, [pc, #56]	@ (8002c44 <HAL_Init+0x6c>)
 8002c0c:	5cd3      	ldrb	r3, [r2, r3]
 8002c0e:	f003 031f 	and.w	r3, r3, #31
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	fa22 f303 	lsr.w	r3, r2, r3
 8002c18:	4a0b      	ldr	r2, [pc, #44]	@ (8002c48 <HAL_Init+0x70>)
 8002c1a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002c1c:	4a0b      	ldr	r2, [pc, #44]	@ (8002c4c <HAL_Init+0x74>)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c22:	2000      	movs	r0, #0
 8002c24:	f000 f814 	bl	8002c50 <HAL_InitTick>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e002      	b.n	8002c38 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002c32:	f7fe fbf9 	bl	8001428 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3708      	adds	r7, #8
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	58024400 	.word	0x58024400
 8002c44:	0800dd4c 	.word	0x0800dd4c
 8002c48:	24000004 	.word	0x24000004
 8002c4c:	24000000 	.word	0x24000000

08002c50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002c58:	4b15      	ldr	r3, [pc, #84]	@ (8002cb0 <HAL_InitTick+0x60>)
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d101      	bne.n	8002c64 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e021      	b.n	8002ca8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002c64:	4b13      	ldr	r3, [pc, #76]	@ (8002cb4 <HAL_InitTick+0x64>)
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	4b11      	ldr	r3, [pc, #68]	@ (8002cb0 <HAL_InitTick+0x60>)
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c72:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f001 feb7 	bl	80049ee <HAL_SYSTICK_Config>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e00e      	b.n	8002ca8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2b0f      	cmp	r3, #15
 8002c8e:	d80a      	bhi.n	8002ca6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c90:	2200      	movs	r2, #0
 8002c92:	6879      	ldr	r1, [r7, #4]
 8002c94:	f04f 30ff 	mov.w	r0, #4294967295
 8002c98:	f001 fe81 	bl	800499e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c9c:	4a06      	ldr	r2, [pc, #24]	@ (8002cb8 <HAL_InitTick+0x68>)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	e000      	b.n	8002ca8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3708      	adds	r7, #8
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	24000028 	.word	0x24000028
 8002cb4:	24000000 	.word	0x24000000
 8002cb8:	24000024 	.word	0x24000024

08002cbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002cc0:	4b06      	ldr	r3, [pc, #24]	@ (8002cdc <HAL_IncTick+0x20>)
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	4b06      	ldr	r3, [pc, #24]	@ (8002ce0 <HAL_IncTick+0x24>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4413      	add	r3, r2
 8002ccc:	4a04      	ldr	r2, [pc, #16]	@ (8002ce0 <HAL_IncTick+0x24>)
 8002cce:	6013      	str	r3, [r2, #0]
}
 8002cd0:	bf00      	nop
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	24000028 	.word	0x24000028
 8002ce0:	2400039c 	.word	0x2400039c

08002ce4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ce8:	4b03      	ldr	r3, [pc, #12]	@ (8002cf8 <HAL_GetTick+0x14>)
 8002cea:	681b      	ldr	r3, [r3, #0]
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	2400039c 	.word	0x2400039c

08002cfc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002d00:	4b03      	ldr	r3, [pc, #12]	@ (8002d10 <HAL_GetREVID+0x14>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	0c1b      	lsrs	r3, r3, #16
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr
 8002d10:	5c001000 	.word	0x5c001000

08002d14 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002d1e:	4b07      	ldr	r3, [pc, #28]	@ (8002d3c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002d20:	685a      	ldr	r2, [r3, #4]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	43db      	mvns	r3, r3
 8002d26:	401a      	ands	r2, r3
 8002d28:	4904      	ldr	r1, [pc, #16]	@ (8002d3c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	604b      	str	r3, [r1, #4]
}
 8002d30:	bf00      	nop
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr
 8002d3c:	58000400 	.word	0x58000400

08002d40 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	431a      	orrs	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	609a      	str	r2, [r3, #8]
}
 8002d5a:	bf00      	nop
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr

08002d66 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002d66:	b480      	push	{r7}
 8002d68:	b083      	sub	sp, #12
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
 8002d6e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	431a      	orrs	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	609a      	str	r2, [r3, #8]
}
 8002d80:	bf00      	nop
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b087      	sub	sp, #28
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d107      	bne.n	8002dcc <LL_ADC_SetChannelPreselection+0x24>
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	0e9b      	lsrs	r3, r3, #26
 8002dc0:	f003 031f 	and.w	r3, r3, #31
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dca:	e015      	b.n	8002df8 <LL_ADC_SetChannelPreselection+0x50>
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	fa93 f3a3 	rbit	r3, r3
 8002dd6:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 8002de2:	2320      	movs	r3, #32
 8002de4:	e003      	b.n	8002dee <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	fab3 f383 	clz	r3, r3
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	f003 031f 	and.w	r3, r3, #31
 8002df2:	2201      	movs	r2, #1
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	69d2      	ldr	r2, [r2, #28]
 8002dfc:	431a      	orrs	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 8002e02:	bf00      	nop
 8002e04:	371c      	adds	r7, #28
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr

08002e0e <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002e0e:	b480      	push	{r7}
 8002e10:	b087      	sub	sp, #28
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	60f8      	str	r0, [r7, #12]
 8002e16:	60b9      	str	r1, [r7, #8]
 8002e18:	607a      	str	r2, [r7, #4]
 8002e1a:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	3360      	adds	r3, #96	@ 0x60
 8002e20:	461a      	mov	r2, r3
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	4413      	add	r3, r2
 8002e28:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	430b      	orrs	r3, r1
 8002e3c:	431a      	orrs	r2, r3
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002e42:	bf00      	nop
 8002e44:	371c      	adds	r7, #28
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr

08002e4e <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002e4e:	b480      	push	{r7}
 8002e50:	b085      	sub	sp, #20
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	60f8      	str	r0, [r7, #12]
 8002e56:	60b9      	str	r1, [r7, #8]
 8002e58:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	f003 031f 	and.w	r3, r3, #31
 8002e68:	6879      	ldr	r1, [r7, #4]
 8002e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e6e:	431a      	orrs	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	611a      	str	r2, [r3, #16]
}
 8002e74:	bf00      	nop
 8002e76:	3714      	adds	r7, #20
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b087      	sub	sp, #28
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	3360      	adds	r3, #96	@ 0x60
 8002e90:	461a      	mov	r2, r3
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	4413      	add	r3, r2
 8002e98:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	431a      	orrs	r2, r3
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	601a      	str	r2, [r3, #0]
  }
}
 8002eaa:	bf00      	nop
 8002eac:	371c      	adds	r7, #28
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr

08002eb6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	b083      	sub	sp, #12
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e000      	b.n	8002ed0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b087      	sub	sp, #28
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	3330      	adds	r3, #48	@ 0x30
 8002eec:	461a      	mov	r2, r3
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	0a1b      	lsrs	r3, r3, #8
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	f003 030c 	and.w	r3, r3, #12
 8002ef8:	4413      	add	r3, r2
 8002efa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	f003 031f 	and.w	r3, r3, #31
 8002f06:	211f      	movs	r1, #31
 8002f08:	fa01 f303 	lsl.w	r3, r1, r3
 8002f0c:	43db      	mvns	r3, r3
 8002f0e:	401a      	ands	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	0e9b      	lsrs	r3, r3, #26
 8002f14:	f003 011f 	and.w	r1, r3, #31
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	f003 031f 	and.w	r3, r3, #31
 8002f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f22:	431a      	orrs	r2, r3
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002f28:	bf00      	nop
 8002f2a:	371c      	adds	r7, #28
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	f023 0203 	bic.w	r2, r3, #3
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	431a      	orrs	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	60da      	str	r2, [r3, #12]
}
 8002f4e:	bf00      	nop
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr

08002f5a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	b083      	sub	sp, #12
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f66:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d101      	bne.n	8002f72 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e000      	b.n	8002f74 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b087      	sub	sp, #28
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	3314      	adds	r3, #20
 8002f90:	461a      	mov	r2, r3
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	0e5b      	lsrs	r3, r3, #25
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	f003 0304 	and.w	r3, r3, #4
 8002f9c:	4413      	add	r3, r2
 8002f9e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	0d1b      	lsrs	r3, r3, #20
 8002fa8:	f003 031f 	and.w	r3, r3, #31
 8002fac:	2107      	movs	r1, #7
 8002fae:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb2:	43db      	mvns	r3, r3
 8002fb4:	401a      	ands	r2, r3
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	0d1b      	lsrs	r3, r3, #20
 8002fba:	f003 031f 	and.w	r3, r3, #31
 8002fbe:	6879      	ldr	r1, [r7, #4]
 8002fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc4:	431a      	orrs	r2, r3
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002fca:	bf00      	nop
 8002fcc:	371c      	adds	r7, #28
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
	...

08002fd8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b085      	sub	sp, #20
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ff0:	43db      	mvns	r3, r3
 8002ff2:	401a      	ands	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f003 0318 	and.w	r3, r3, #24
 8002ffa:	4908      	ldr	r1, [pc, #32]	@ (800301c <LL_ADC_SetChannelSingleDiff+0x44>)
 8002ffc:	40d9      	lsrs	r1, r3
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	400b      	ands	r3, r1
 8003002:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003006:	431a      	orrs	r2, r3
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800300e:	bf00      	nop
 8003010:	3714      	adds	r7, #20
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	000fffff 	.word	0x000fffff

08003020 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f003 031f 	and.w	r3, r3, #31
}
 8003030:	4618      	mov	r0, r3
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 800304c:	4618      	mov	r0, r3
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689a      	ldr	r2, [r3, #8]
 8003064:	4b04      	ldr	r3, [pc, #16]	@ (8003078 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003066:	4013      	ands	r3, r2
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	6093      	str	r3, [r2, #8]
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr
 8003078:	5fffffc0 	.word	0x5fffffc0

0800307c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800308c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003090:	d101      	bne.n	8003096 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003092:	2301      	movs	r3, #1
 8003094:	e000      	b.n	8003098 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689a      	ldr	r2, [r3, #8]
 80030b0:	4b05      	ldr	r3, [pc, #20]	@ (80030c8 <LL_ADC_EnableInternalRegulator+0x24>)
 80030b2:	4013      	ands	r3, r2
 80030b4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr
 80030c8:	6fffffc0 	.word	0x6fffffc0

080030cc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80030e0:	d101      	bne.n	80030e6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80030e2:	2301      	movs	r3, #1
 80030e4:	e000      	b.n	80030e8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689a      	ldr	r2, [r3, #8]
 8003100:	4b05      	ldr	r3, [pc, #20]	@ (8003118 <LL_ADC_Enable+0x24>)
 8003102:	4013      	ands	r3, r2
 8003104:	f043 0201 	orr.w	r2, r3, #1
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr
 8003118:	7fffffc0 	.word	0x7fffffc0

0800311c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f003 0301 	and.w	r3, r3, #1
 800312c:	2b01      	cmp	r3, #1
 800312e:	d101      	bne.n	8003134 <LL_ADC_IsEnabled+0x18>
 8003130:	2301      	movs	r3, #1
 8003132:	e000      	b.n	8003136 <LL_ADC_IsEnabled+0x1a>
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
	...

08003144 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689a      	ldr	r2, [r3, #8]
 8003150:	4b05      	ldr	r3, [pc, #20]	@ (8003168 <LL_ADC_REG_StartConversion+0x24>)
 8003152:	4013      	ands	r3, r2
 8003154:	f043 0204 	orr.w	r2, r3, #4
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800315c:	bf00      	nop
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr
 8003168:	7fffffc0 	.word	0x7fffffc0

0800316c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f003 0304 	and.w	r3, r3, #4
 800317c:	2b04      	cmp	r3, #4
 800317e:	d101      	bne.n	8003184 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003180:	2301      	movs	r3, #1
 8003182:	e000      	b.n	8003186 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr

08003192 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003192:	b480      	push	{r7}
 8003194:	b083      	sub	sp, #12
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f003 0308 	and.w	r3, r3, #8
 80031a2:	2b08      	cmp	r3, #8
 80031a4:	d101      	bne.n	80031aa <LL_ADC_INJ_IsConversionOngoing+0x18>
 80031a6:	2301      	movs	r3, #1
 80031a8:	e000      	b.n	80031ac <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80031b8:	b590      	push	{r4, r7, lr}
 80031ba:	b089      	sub	sp, #36	@ 0x24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031c0:	2300      	movs	r3, #0
 80031c2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80031c4:	2300      	movs	r3, #0
 80031c6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d101      	bne.n	80031d2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e18f      	b.n	80034f2 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d109      	bne.n	80031f4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f7fe f93b 	bl	800145c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7ff ff3f 	bl	800307c <LL_ADC_IsDeepPowerDownEnabled>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d004      	beq.n	800320e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4618      	mov	r0, r3
 800320a:	f7ff ff25 	bl	8003058 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4618      	mov	r0, r3
 8003214:	f7ff ff5a 	bl	80030cc <LL_ADC_IsInternalRegulatorEnabled>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d114      	bne.n	8003248 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f7ff ff3e 	bl	80030a4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003228:	4b87      	ldr	r3, [pc, #540]	@ (8003448 <HAL_ADC_Init+0x290>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	099b      	lsrs	r3, r3, #6
 800322e:	4a87      	ldr	r2, [pc, #540]	@ (800344c <HAL_ADC_Init+0x294>)
 8003230:	fba2 2303 	umull	r2, r3, r2, r3
 8003234:	099b      	lsrs	r3, r3, #6
 8003236:	3301      	adds	r3, #1
 8003238:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800323a:	e002      	b.n	8003242 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	3b01      	subs	r3, #1
 8003240:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d1f9      	bne.n	800323c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4618      	mov	r0, r3
 800324e:	f7ff ff3d 	bl	80030cc <LL_ADC_IsInternalRegulatorEnabled>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d10d      	bne.n	8003274 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800325c:	f043 0210 	orr.w	r2, r3, #16
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003268:	f043 0201 	orr.w	r2, r3, #1
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4618      	mov	r0, r3
 800327a:	f7ff ff77 	bl	800316c <LL_ADC_REG_IsConversionOngoing>
 800327e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003284:	f003 0310 	and.w	r3, r3, #16
 8003288:	2b00      	cmp	r3, #0
 800328a:	f040 8129 	bne.w	80034e0 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	2b00      	cmp	r3, #0
 8003292:	f040 8125 	bne.w	80034e0 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800329a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800329e:	f043 0202 	orr.w	r2, r3, #2
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7ff ff36 	bl	800311c <LL_ADC_IsEnabled>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d136      	bne.n	8003324 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a65      	ldr	r2, [pc, #404]	@ (8003450 <HAL_ADC_Init+0x298>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d004      	beq.n	80032ca <HAL_ADC_Init+0x112>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a63      	ldr	r2, [pc, #396]	@ (8003454 <HAL_ADC_Init+0x29c>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d10e      	bne.n	80032e8 <HAL_ADC_Init+0x130>
 80032ca:	4861      	ldr	r0, [pc, #388]	@ (8003450 <HAL_ADC_Init+0x298>)
 80032cc:	f7ff ff26 	bl	800311c <LL_ADC_IsEnabled>
 80032d0:	4604      	mov	r4, r0
 80032d2:	4860      	ldr	r0, [pc, #384]	@ (8003454 <HAL_ADC_Init+0x29c>)
 80032d4:	f7ff ff22 	bl	800311c <LL_ADC_IsEnabled>
 80032d8:	4603      	mov	r3, r0
 80032da:	4323      	orrs	r3, r4
 80032dc:	2b00      	cmp	r3, #0
 80032de:	bf0c      	ite	eq
 80032e0:	2301      	moveq	r3, #1
 80032e2:	2300      	movne	r3, #0
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	e008      	b.n	80032fa <HAL_ADC_Init+0x142>
 80032e8:	485b      	ldr	r0, [pc, #364]	@ (8003458 <HAL_ADC_Init+0x2a0>)
 80032ea:	f7ff ff17 	bl	800311c <LL_ADC_IsEnabled>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	bf0c      	ite	eq
 80032f4:	2301      	moveq	r3, #1
 80032f6:	2300      	movne	r3, #0
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d012      	beq.n	8003324 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a53      	ldr	r2, [pc, #332]	@ (8003450 <HAL_ADC_Init+0x298>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d004      	beq.n	8003312 <HAL_ADC_Init+0x15a>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a51      	ldr	r2, [pc, #324]	@ (8003454 <HAL_ADC_Init+0x29c>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d101      	bne.n	8003316 <HAL_ADC_Init+0x15e>
 8003312:	4a52      	ldr	r2, [pc, #328]	@ (800345c <HAL_ADC_Init+0x2a4>)
 8003314:	e000      	b.n	8003318 <HAL_ADC_Init+0x160>
 8003316:	4a52      	ldr	r2, [pc, #328]	@ (8003460 <HAL_ADC_Init+0x2a8>)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	4619      	mov	r1, r3
 800331e:	4610      	mov	r0, r2
 8003320:	f7ff fd0e 	bl	8002d40 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003324:	f7ff fcea 	bl	8002cfc <HAL_GetREVID>
 8003328:	4603      	mov	r3, r0
 800332a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800332e:	4293      	cmp	r3, r2
 8003330:	d914      	bls.n	800335c <HAL_ADC_Init+0x1a4>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	2b10      	cmp	r3, #16
 8003338:	d110      	bne.n	800335c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	7d5b      	ldrb	r3, [r3, #21]
 800333e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003344:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800334a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	7f1b      	ldrb	r3, [r3, #28]
 8003350:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003352:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003354:	f043 030c 	orr.w	r3, r3, #12
 8003358:	61bb      	str	r3, [r7, #24]
 800335a:	e00d      	b.n	8003378 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	7d5b      	ldrb	r3, [r3, #21]
 8003360:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003366:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800336c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	7f1b      	ldrb	r3, [r3, #28]
 8003372:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003374:	4313      	orrs	r3, r2
 8003376:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	7f1b      	ldrb	r3, [r3, #28]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d106      	bne.n	800338e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a1b      	ldr	r3, [r3, #32]
 8003384:	3b01      	subs	r3, #1
 8003386:	045b      	lsls	r3, r3, #17
 8003388:	69ba      	ldr	r2, [r7, #24]
 800338a:	4313      	orrs	r3, r2
 800338c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003392:	2b00      	cmp	r3, #0
 8003394:	d009      	beq.n	80033aa <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800339a:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033a2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68da      	ldr	r2, [r3, #12]
 80033b0:	4b2c      	ldr	r3, [pc, #176]	@ (8003464 <HAL_ADC_Init+0x2ac>)
 80033b2:	4013      	ands	r3, r2
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	6812      	ldr	r2, [r2, #0]
 80033b8:	69b9      	ldr	r1, [r7, #24]
 80033ba:	430b      	orrs	r3, r1
 80033bc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7ff fed2 	bl	800316c <LL_ADC_REG_IsConversionOngoing>
 80033c8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7ff fedf 	bl	8003192 <LL_ADC_INJ_IsConversionOngoing>
 80033d4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d15f      	bne.n	800349c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d15c      	bne.n	800349c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	7d1b      	ldrb	r3, [r3, #20]
 80033e6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 80033ec:	4313      	orrs	r3, r2
 80033ee:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68da      	ldr	r2, [r3, #12]
 80033f6:	4b1c      	ldr	r3, [pc, #112]	@ (8003468 <HAL_ADC_Init+0x2b0>)
 80033f8:	4013      	ands	r3, r2
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	6812      	ldr	r2, [r2, #0]
 80033fe:	69b9      	ldr	r1, [r7, #24]
 8003400:	430b      	orrs	r3, r1
 8003402:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800340a:	2b01      	cmp	r3, #1
 800340c:	d130      	bne.n	8003470 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003412:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	691a      	ldr	r2, [r3, #16]
 800341a:	4b14      	ldr	r3, [pc, #80]	@ (800346c <HAL_ADC_Init+0x2b4>)
 800341c:	4013      	ands	r3, r2
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003422:	3a01      	subs	r2, #1
 8003424:	0411      	lsls	r1, r2, #16
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800342a:	4311      	orrs	r1, r2
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003430:	4311      	orrs	r1, r2
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003436:	430a      	orrs	r2, r1
 8003438:	431a      	orrs	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f042 0201 	orr.w	r2, r2, #1
 8003442:	611a      	str	r2, [r3, #16]
 8003444:	e01c      	b.n	8003480 <HAL_ADC_Init+0x2c8>
 8003446:	bf00      	nop
 8003448:	24000000 	.word	0x24000000
 800344c:	053e2d63 	.word	0x053e2d63
 8003450:	40022000 	.word	0x40022000
 8003454:	40022100 	.word	0x40022100
 8003458:	58026000 	.word	0x58026000
 800345c:	40022300 	.word	0x40022300
 8003460:	58026300 	.word	0x58026300
 8003464:	fff0c003 	.word	0xfff0c003
 8003468:	ffffbffc 	.word	0xffffbffc
 800346c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	691a      	ldr	r2, [r3, #16]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f022 0201 	bic.w	r2, r2, #1
 800347e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	430a      	orrs	r2, r1
 8003494:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 ff64 	bl	8004364 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d10c      	bne.n	80034be <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034aa:	f023 010f 	bic.w	r1, r3, #15
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	1e5a      	subs	r2, r3, #1
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	430a      	orrs	r2, r1
 80034ba:	631a      	str	r2, [r3, #48]	@ 0x30
 80034bc:	e007      	b.n	80034ce <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f022 020f 	bic.w	r2, r2, #15
 80034cc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034d2:	f023 0303 	bic.w	r3, r3, #3
 80034d6:	f043 0201 	orr.w	r2, r3, #1
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	655a      	str	r2, [r3, #84]	@ 0x54
 80034de:	e007      	b.n	80034f0 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034e4:	f043 0210 	orr.w	r2, r3, #16
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80034f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3724      	adds	r7, #36	@ 0x24
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd90      	pop	{r4, r7, pc}
 80034fa:	bf00      	nop

080034fc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b086      	sub	sp, #24
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a55      	ldr	r2, [pc, #340]	@ (8003664 <HAL_ADC_Start_DMA+0x168>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d004      	beq.n	800351c <HAL_ADC_Start_DMA+0x20>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a54      	ldr	r2, [pc, #336]	@ (8003668 <HAL_ADC_Start_DMA+0x16c>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d101      	bne.n	8003520 <HAL_ADC_Start_DMA+0x24>
 800351c:	4b53      	ldr	r3, [pc, #332]	@ (800366c <HAL_ADC_Start_DMA+0x170>)
 800351e:	e000      	b.n	8003522 <HAL_ADC_Start_DMA+0x26>
 8003520:	4b53      	ldr	r3, [pc, #332]	@ (8003670 <HAL_ADC_Start_DMA+0x174>)
 8003522:	4618      	mov	r0, r3
 8003524:	f7ff fd7c 	bl	8003020 <LL_ADC_GetMultimode>
 8003528:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4618      	mov	r0, r3
 8003530:	f7ff fe1c 	bl	800316c <LL_ADC_REG_IsConversionOngoing>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	f040 808c 	bne.w	8003654 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003542:	2b01      	cmp	r3, #1
 8003544:	d101      	bne.n	800354a <HAL_ADC_Start_DMA+0x4e>
 8003546:	2302      	movs	r3, #2
 8003548:	e087      	b.n	800365a <HAL_ADC_Start_DMA+0x15e>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2201      	movs	r2, #1
 800354e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d005      	beq.n	8003564 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	2b05      	cmp	r3, #5
 800355c:	d002      	beq.n	8003564 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	2b09      	cmp	r3, #9
 8003562:	d170      	bne.n	8003646 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003564:	68f8      	ldr	r0, [r7, #12]
 8003566:	f000 fddf 	bl	8004128 <ADC_Enable>
 800356a:	4603      	mov	r3, r0
 800356c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800356e:	7dfb      	ldrb	r3, [r7, #23]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d163      	bne.n	800363c <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003578:	4b3e      	ldr	r3, [pc, #248]	@ (8003674 <HAL_ADC_Start_DMA+0x178>)
 800357a:	4013      	ands	r3, r2
 800357c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a37      	ldr	r2, [pc, #220]	@ (8003668 <HAL_ADC_Start_DMA+0x16c>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d002      	beq.n	8003594 <HAL_ADC_Start_DMA+0x98>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	e000      	b.n	8003596 <HAL_ADC_Start_DMA+0x9a>
 8003594:	4b33      	ldr	r3, [pc, #204]	@ (8003664 <HAL_ADC_Start_DMA+0x168>)
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	6812      	ldr	r2, [r2, #0]
 800359a:	4293      	cmp	r3, r2
 800359c:	d002      	beq.n	80035a4 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d105      	bne.n	80035b0 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035a8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d006      	beq.n	80035ca <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035c0:	f023 0206 	bic.w	r2, r3, #6
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	659a      	str	r2, [r3, #88]	@ 0x58
 80035c8:	e002      	b.n	80035d0 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035d4:	4a28      	ldr	r2, [pc, #160]	@ (8003678 <HAL_ADC_Start_DMA+0x17c>)
 80035d6:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035dc:	4a27      	ldr	r2, [pc, #156]	@ (800367c <HAL_ADC_Start_DMA+0x180>)
 80035de:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035e4:	4a26      	ldr	r2, [pc, #152]	@ (8003680 <HAL_ADC_Start_DMA+0x184>)
 80035e6:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	221c      	movs	r2, #28
 80035ee:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	685a      	ldr	r2, [r3, #4]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f042 0210 	orr.w	r2, r2, #16
 8003606:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003610:	4619      	mov	r1, r3
 8003612:	4610      	mov	r0, r2
 8003614:	f7ff fc8e 	bl	8002f34 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	3340      	adds	r3, #64	@ 0x40
 8003622:	4619      	mov	r1, r3
 8003624:	68ba      	ldr	r2, [r7, #8]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f001 fd5c 	bl	80050e4 <HAL_DMA_Start_IT>
 800362c:	4603      	mov	r3, r0
 800362e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4618      	mov	r0, r3
 8003636:	f7ff fd85 	bl	8003144 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800363a:	e00d      	b.n	8003658 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8003644:	e008      	b.n	8003658 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8003652:	e001      	b.n	8003658 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003654:	2302      	movs	r3, #2
 8003656:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003658:	7dfb      	ldrb	r3, [r7, #23]
}
 800365a:	4618      	mov	r0, r3
 800365c:	3718      	adds	r7, #24
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	40022000 	.word	0x40022000
 8003668:	40022100 	.word	0x40022100
 800366c:	40022300 	.word	0x40022300
 8003670:	58026300 	.word	0x58026300
 8003674:	fffff0fe 	.word	0xfffff0fe
 8003678:	0800423d 	.word	0x0800423d
 800367c:	08004315 	.word	0x08004315
 8003680:	08004331 	.word	0x08004331

08003684 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b08a      	sub	sp, #40	@ 0x28
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800368c:	2300      	movs	r3, #0
 800368e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a87      	ldr	r2, [pc, #540]	@ (80038c4 <HAL_ADC_IRQHandler+0x240>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d004      	beq.n	80036b4 <HAL_ADC_IRQHandler+0x30>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a86      	ldr	r2, [pc, #536]	@ (80038c8 <HAL_ADC_IRQHandler+0x244>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d101      	bne.n	80036b8 <HAL_ADC_IRQHandler+0x34>
 80036b4:	4b85      	ldr	r3, [pc, #532]	@ (80038cc <HAL_ADC_IRQHandler+0x248>)
 80036b6:	e000      	b.n	80036ba <HAL_ADC_IRQHandler+0x36>
 80036b8:	4b85      	ldr	r3, [pc, #532]	@ (80038d0 <HAL_ADC_IRQHandler+0x24c>)
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7ff fcb0 	bl	8003020 <LL_ADC_GetMultimode>
 80036c0:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	f003 0302 	and.w	r3, r3, #2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d017      	beq.n	80036fc <HAL_ADC_IRQHandler+0x78>
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d012      	beq.n	80036fc <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036da:	f003 0310 	and.w	r3, r3, #16
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d105      	bne.n	80036ee <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036e6:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 ff92 	bl	8004618 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2202      	movs	r2, #2
 80036fa:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	f003 0304 	and.w	r3, r3, #4
 8003702:	2b00      	cmp	r3, #0
 8003704:	d004      	beq.n	8003710 <HAL_ADC_IRQHandler+0x8c>
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	f003 0304 	and.w	r3, r3, #4
 800370c:	2b00      	cmp	r3, #0
 800370e:	d10a      	bne.n	8003726 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003716:	2b00      	cmp	r3, #0
 8003718:	f000 8083 	beq.w	8003822 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	f003 0308 	and.w	r3, r3, #8
 8003722:	2b00      	cmp	r3, #0
 8003724:	d07d      	beq.n	8003822 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800372a:	f003 0310 	and.w	r3, r3, #16
 800372e:	2b00      	cmp	r3, #0
 8003730:	d105      	bne.n	800373e <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003736:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4618      	mov	r0, r3
 8003744:	f7ff fbb7 	bl	8002eb6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d062      	beq.n	8003814 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a5d      	ldr	r2, [pc, #372]	@ (80038c8 <HAL_ADC_IRQHandler+0x244>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d002      	beq.n	800375e <HAL_ADC_IRQHandler+0xda>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	e000      	b.n	8003760 <HAL_ADC_IRQHandler+0xdc>
 800375e:	4b59      	ldr	r3, [pc, #356]	@ (80038c4 <HAL_ADC_IRQHandler+0x240>)
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	6812      	ldr	r2, [r2, #0]
 8003764:	4293      	cmp	r3, r2
 8003766:	d008      	beq.n	800377a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d005      	beq.n	800377a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	2b05      	cmp	r3, #5
 8003772:	d002      	beq.n	800377a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	2b09      	cmp	r3, #9
 8003778:	d104      	bne.n	8003784 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	623b      	str	r3, [r7, #32]
 8003782:	e00c      	b.n	800379e <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a4f      	ldr	r2, [pc, #316]	@ (80038c8 <HAL_ADC_IRQHandler+0x244>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d002      	beq.n	8003794 <HAL_ADC_IRQHandler+0x110>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	e000      	b.n	8003796 <HAL_ADC_IRQHandler+0x112>
 8003794:	4b4b      	ldr	r3, [pc, #300]	@ (80038c4 <HAL_ADC_IRQHandler+0x240>)
 8003796:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800379e:	6a3b      	ldr	r3, [r7, #32]
 80037a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d135      	bne.n	8003814 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0308 	and.w	r3, r3, #8
 80037b2:	2b08      	cmp	r3, #8
 80037b4:	d12e      	bne.n	8003814 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7ff fcd6 	bl	800316c <LL_ADC_REG_IsConversionOngoing>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d11a      	bne.n	80037fc <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	685a      	ldr	r2, [r3, #4]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f022 020c 	bic.w	r2, r2, #12
 80037d4:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037da:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d112      	bne.n	8003814 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037f2:	f043 0201 	orr.w	r2, r3, #1
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	655a      	str	r2, [r3, #84]	@ 0x54
 80037fa:	e00b      	b.n	8003814 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003800:	f043 0210 	orr.w	r2, r3, #16
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800380c:	f043 0201 	orr.w	r2, r3, #1
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 f96f 	bl	8003af8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	220c      	movs	r2, #12
 8003820:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	f003 0320 	and.w	r3, r3, #32
 8003828:	2b00      	cmp	r3, #0
 800382a:	d004      	beq.n	8003836 <HAL_ADC_IRQHandler+0x1b2>
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	f003 0320 	and.w	r3, r3, #32
 8003832:	2b00      	cmp	r3, #0
 8003834:	d10b      	bne.n	800384e <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800383c:	2b00      	cmp	r3, #0
 800383e:	f000 80a0 	beq.w	8003982 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003848:	2b00      	cmp	r3, #0
 800384a:	f000 809a 	beq.w	8003982 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003852:	f003 0310 	and.w	r3, r3, #16
 8003856:	2b00      	cmp	r3, #0
 8003858:	d105      	bne.n	8003866 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800385e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4618      	mov	r0, r3
 800386c:	f7ff fb75 	bl	8002f5a <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003870:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4618      	mov	r0, r3
 8003878:	f7ff fb1d 	bl	8002eb6 <LL_ADC_REG_IsTriggerSourceSWStart>
 800387c:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a11      	ldr	r2, [pc, #68]	@ (80038c8 <HAL_ADC_IRQHandler+0x244>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d002      	beq.n	800388e <HAL_ADC_IRQHandler+0x20a>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	e000      	b.n	8003890 <HAL_ADC_IRQHandler+0x20c>
 800388e:	4b0d      	ldr	r3, [pc, #52]	@ (80038c4 <HAL_ADC_IRQHandler+0x240>)
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	6812      	ldr	r2, [r2, #0]
 8003894:	4293      	cmp	r3, r2
 8003896:	d008      	beq.n	80038aa <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d005      	beq.n	80038aa <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	2b06      	cmp	r3, #6
 80038a2:	d002      	beq.n	80038aa <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	2b07      	cmp	r3, #7
 80038a8:	d104      	bne.n	80038b4 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	623b      	str	r3, [r7, #32]
 80038b2:	e014      	b.n	80038de <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a03      	ldr	r2, [pc, #12]	@ (80038c8 <HAL_ADC_IRQHandler+0x244>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d00a      	beq.n	80038d4 <HAL_ADC_IRQHandler+0x250>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	e008      	b.n	80038d6 <HAL_ADC_IRQHandler+0x252>
 80038c4:	40022000 	.word	0x40022000
 80038c8:	40022100 	.word	0x40022100
 80038cc:	40022300 	.word	0x40022300
 80038d0:	58026300 	.word	0x58026300
 80038d4:	4b84      	ldr	r3, [pc, #528]	@ (8003ae8 <HAL_ADC_IRQHandler+0x464>)
 80038d6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d047      	beq.n	8003974 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80038e4:	6a3b      	ldr	r3, [r7, #32]
 80038e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d007      	beq.n	80038fe <HAL_ADC_IRQHandler+0x27a>
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d03f      	beq.n	8003974 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80038f4:	6a3b      	ldr	r3, [r7, #32]
 80038f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d13a      	bne.n	8003974 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003908:	2b40      	cmp	r3, #64	@ 0x40
 800390a:	d133      	bne.n	8003974 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800390c:	6a3b      	ldr	r3, [r7, #32]
 800390e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d12e      	bne.n	8003974 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4618      	mov	r0, r3
 800391c:	f7ff fc39 	bl	8003192 <LL_ADC_INJ_IsConversionOngoing>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d11a      	bne.n	800395c <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	685a      	ldr	r2, [r3, #4]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003934:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800393a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003946:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800394a:	2b00      	cmp	r3, #0
 800394c:	d112      	bne.n	8003974 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003952:	f043 0201 	orr.w	r2, r3, #1
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	655a      	str	r2, [r3, #84]	@ 0x54
 800395a:	e00b      	b.n	8003974 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003960:	f043 0210 	orr.w	r2, r3, #16
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800396c:	f043 0201 	orr.w	r2, r3, #1
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f000 fe27 	bl	80045c8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2260      	movs	r2, #96	@ 0x60
 8003980:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003988:	2b00      	cmp	r3, #0
 800398a:	d011      	beq.n	80039b0 <HAL_ADC_IRQHandler+0x32c>
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003992:	2b00      	cmp	r3, #0
 8003994:	d00c      	beq.n	80039b0 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800399a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 f8bc 	bl	8003b20 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2280      	movs	r2, #128	@ 0x80
 80039ae:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d012      	beq.n	80039e0 <HAL_ADC_IRQHandler+0x35c>
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00d      	beq.n	80039e0 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039c8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f000 fe0d 	bl	80045f0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80039de:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d012      	beq.n	8003a10 <HAL_ADC_IRQHandler+0x38c>
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d00d      	beq.n	8003a10 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039f8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 fdff 	bl	8004604 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a0e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	f003 0310 	and.w	r3, r3, #16
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d043      	beq.n	8003aa2 <HAL_ADC_IRQHandler+0x41e>
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	f003 0310 	and.w	r3, r3, #16
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d03e      	beq.n	8003aa2 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d102      	bne.n	8003a32 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a30:	e021      	b.n	8003a76 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d015      	beq.n	8003a64 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a2a      	ldr	r2, [pc, #168]	@ (8003ae8 <HAL_ADC_IRQHandler+0x464>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d004      	beq.n	8003a4c <HAL_ADC_IRQHandler+0x3c8>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a29      	ldr	r2, [pc, #164]	@ (8003aec <HAL_ADC_IRQHandler+0x468>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d101      	bne.n	8003a50 <HAL_ADC_IRQHandler+0x3cc>
 8003a4c:	4b28      	ldr	r3, [pc, #160]	@ (8003af0 <HAL_ADC_IRQHandler+0x46c>)
 8003a4e:	e000      	b.n	8003a52 <HAL_ADC_IRQHandler+0x3ce>
 8003a50:	4b28      	ldr	r3, [pc, #160]	@ (8003af4 <HAL_ADC_IRQHandler+0x470>)
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7ff faf2 	bl	800303c <LL_ADC_GetMultiDMATransfer>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00b      	beq.n	8003a76 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a62:	e008      	b.n	8003a76 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	f003 0303 	and.w	r3, r3, #3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d001      	beq.n	8003a76 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8003a72:	2301      	movs	r3, #1
 8003a74:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d10e      	bne.n	8003a9a <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a80:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a8c:	f043 0202 	orr.w	r2, r3, #2
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f000 f84d 	bl	8003b34 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2210      	movs	r2, #16
 8003aa0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d018      	beq.n	8003ade <HAL_ADC_IRQHandler+0x45a>
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d013      	beq.n	8003ade <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aba:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ac6:	f043 0208 	orr.w	r2, r3, #8
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003ad6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f000 fd7f 	bl	80045dc <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003ade:	bf00      	nop
 8003ae0:	3728      	adds	r7, #40	@ 0x28
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	40022000 	.word	0x40022000
 8003aec:	40022100 	.word	0x40022100
 8003af0:	40022300 	.word	0x40022300
 8003af4:	58026300 	.word	0x58026300

08003af8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003b00:	bf00      	nop
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003b48:	b590      	push	{r4, r7, lr}
 8003b4a:	b08d      	sub	sp, #52	@ 0x34
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b52:	2300      	movs	r3, #0
 8003b54:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	4a65      	ldr	r2, [pc, #404]	@ (8003cf8 <HAL_ADC_ConfigChannel+0x1b0>)
 8003b62:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d101      	bne.n	8003b72 <HAL_ADC_ConfigChannel+0x2a>
 8003b6e:	2302      	movs	r3, #2
 8003b70:	e2c7      	b.n	8004102 <HAL_ADC_ConfigChannel+0x5ba>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7ff faf4 	bl	800316c <LL_ADC_REG_IsConversionOngoing>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	f040 82ac 	bne.w	80040e4 <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	db2c      	blt.n	8003bee <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d108      	bne.n	8003bb2 <HAL_ADC_ConfigChannel+0x6a>
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	0e9b      	lsrs	r3, r3, #26
 8003ba6:	f003 031f 	and.w	r3, r3, #31
 8003baa:	2201      	movs	r2, #1
 8003bac:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb0:	e016      	b.n	8003be0 <HAL_ADC_ConfigChannel+0x98>
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	fa93 f3a3 	rbit	r3, r3
 8003bbe:	613b      	str	r3, [r7, #16]
  return result;
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d101      	bne.n	8003bce <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 8003bca:	2320      	movs	r3, #32
 8003bcc:	e003      	b.n	8003bd6 <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	fab3 f383 	clz	r3, r3
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	f003 031f 	and.w	r3, r3, #31
 8003bda:	2201      	movs	r2, #1
 8003bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	6812      	ldr	r2, [r2, #0]
 8003be4:	69d1      	ldr	r1, [r2, #28]
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	6812      	ldr	r2, [r2, #0]
 8003bea:	430b      	orrs	r3, r1
 8003bec:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6818      	ldr	r0, [r3, #0]
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	6859      	ldr	r1, [r3, #4]
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	f7ff f96e 	bl	8002edc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4618      	mov	r0, r3
 8003c06:	f7ff fab1 	bl	800316c <LL_ADC_REG_IsConversionOngoing>
 8003c0a:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4618      	mov	r0, r3
 8003c12:	f7ff fabe 	bl	8003192 <LL_ADC_INJ_IsConversionOngoing>
 8003c16:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f040 80b8 	bne.w	8003d90 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	f040 80b4 	bne.w	8003d90 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6818      	ldr	r0, [r3, #0]
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	6819      	ldr	r1, [r3, #0]
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	461a      	mov	r2, r3
 8003c36:	f7ff f9a3 	bl	8002f80 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003c3a:	4b30      	ldr	r3, [pc, #192]	@ (8003cfc <HAL_ADC_ConfigChannel+0x1b4>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003c42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c46:	d10b      	bne.n	8003c60 <HAL_ADC_ConfigChannel+0x118>
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	695a      	ldr	r2, [r3, #20]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	089b      	lsrs	r3, r3, #2
 8003c54:	f003 0307 	and.w	r3, r3, #7
 8003c58:	005b      	lsls	r3, r3, #1
 8003c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5e:	e01d      	b.n	8003c9c <HAL_ADC_ConfigChannel+0x154>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	f003 0310 	and.w	r3, r3, #16
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d10b      	bne.n	8003c86 <HAL_ADC_ConfigChannel+0x13e>
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	695a      	ldr	r2, [r3, #20]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	089b      	lsrs	r3, r3, #2
 8003c7a:	f003 0307 	and.w	r3, r3, #7
 8003c7e:	005b      	lsls	r3, r3, #1
 8003c80:	fa02 f303 	lsl.w	r3, r2, r3
 8003c84:	e00a      	b.n	8003c9c <HAL_ADC_ConfigChannel+0x154>
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	695a      	ldr	r2, [r3, #20]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	089b      	lsrs	r3, r3, #2
 8003c92:	f003 0304 	and.w	r3, r3, #4
 8003c96:	005b      	lsls	r3, r3, #1
 8003c98:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9c:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	2b04      	cmp	r3, #4
 8003ca4:	d02c      	beq.n	8003d00 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6818      	ldr	r0, [r3, #0]
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	6919      	ldr	r1, [r3, #16]
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	6a3b      	ldr	r3, [r7, #32]
 8003cb4:	f7ff f8ab 	bl	8002e0e <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6818      	ldr	r0, [r3, #0]
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	6919      	ldr	r1, [r3, #16]
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	7e5b      	ldrb	r3, [r3, #25]
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d102      	bne.n	8003cce <HAL_ADC_ConfigChannel+0x186>
 8003cc8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003ccc:	e000      	b.n	8003cd0 <HAL_ADC_ConfigChannel+0x188>
 8003cce:	2300      	movs	r3, #0
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	f7ff f8d5 	bl	8002e80 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6818      	ldr	r0, [r3, #0]
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	6919      	ldr	r1, [r3, #16]
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	7e1b      	ldrb	r3, [r3, #24]
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d102      	bne.n	8003cec <HAL_ADC_ConfigChannel+0x1a4>
 8003ce6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003cea:	e000      	b.n	8003cee <HAL_ADC_ConfigChannel+0x1a6>
 8003cec:	2300      	movs	r3, #0
 8003cee:	461a      	mov	r2, r3
 8003cf0:	f7ff f8ad 	bl	8002e4e <LL_ADC_SetDataRightShift>
 8003cf4:	e04c      	b.n	8003d90 <HAL_ADC_ConfigChannel+0x248>
 8003cf6:	bf00      	nop
 8003cf8:	47ff0000 	.word	0x47ff0000
 8003cfc:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d06:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	069b      	lsls	r3, r3, #26
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d107      	bne.n	8003d24 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003d22:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d2a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	069b      	lsls	r3, r3, #26
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d107      	bne.n	8003d48 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003d46:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d4e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	069b      	lsls	r3, r3, #26
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d107      	bne.n	8003d6c <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003d6a:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d72:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	069b      	lsls	r3, r3, #26
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d107      	bne.n	8003d90 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003d8e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7ff f9c1 	bl	800311c <LL_ADC_IsEnabled>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	f040 81aa 	bne.w	80040f6 <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6818      	ldr	r0, [r3, #0]
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	6819      	ldr	r1, [r3, #0]
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	461a      	mov	r2, r3
 8003db0:	f7ff f912 	bl	8002fd8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	4a87      	ldr	r2, [pc, #540]	@ (8003fd8 <HAL_ADC_ConfigChannel+0x490>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	f040 809a 	bne.w	8003ef4 <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4984      	ldr	r1, [pc, #528]	@ (8003fdc <HAL_ADC_ConfigChannel+0x494>)
 8003dca:	428b      	cmp	r3, r1
 8003dcc:	d147      	bne.n	8003e5e <HAL_ADC_ConfigChannel+0x316>
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4983      	ldr	r1, [pc, #524]	@ (8003fe0 <HAL_ADC_ConfigChannel+0x498>)
 8003dd4:	428b      	cmp	r3, r1
 8003dd6:	d040      	beq.n	8003e5a <HAL_ADC_ConfigChannel+0x312>
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4981      	ldr	r1, [pc, #516]	@ (8003fe4 <HAL_ADC_ConfigChannel+0x49c>)
 8003dde:	428b      	cmp	r3, r1
 8003de0:	d039      	beq.n	8003e56 <HAL_ADC_ConfigChannel+0x30e>
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4980      	ldr	r1, [pc, #512]	@ (8003fe8 <HAL_ADC_ConfigChannel+0x4a0>)
 8003de8:	428b      	cmp	r3, r1
 8003dea:	d032      	beq.n	8003e52 <HAL_ADC_ConfigChannel+0x30a>
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	497e      	ldr	r1, [pc, #504]	@ (8003fec <HAL_ADC_ConfigChannel+0x4a4>)
 8003df2:	428b      	cmp	r3, r1
 8003df4:	d02b      	beq.n	8003e4e <HAL_ADC_ConfigChannel+0x306>
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	497d      	ldr	r1, [pc, #500]	@ (8003ff0 <HAL_ADC_ConfigChannel+0x4a8>)
 8003dfc:	428b      	cmp	r3, r1
 8003dfe:	d024      	beq.n	8003e4a <HAL_ADC_ConfigChannel+0x302>
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	497b      	ldr	r1, [pc, #492]	@ (8003ff4 <HAL_ADC_ConfigChannel+0x4ac>)
 8003e06:	428b      	cmp	r3, r1
 8003e08:	d01d      	beq.n	8003e46 <HAL_ADC_ConfigChannel+0x2fe>
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	497a      	ldr	r1, [pc, #488]	@ (8003ff8 <HAL_ADC_ConfigChannel+0x4b0>)
 8003e10:	428b      	cmp	r3, r1
 8003e12:	d016      	beq.n	8003e42 <HAL_ADC_ConfigChannel+0x2fa>
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4978      	ldr	r1, [pc, #480]	@ (8003ffc <HAL_ADC_ConfigChannel+0x4b4>)
 8003e1a:	428b      	cmp	r3, r1
 8003e1c:	d00f      	beq.n	8003e3e <HAL_ADC_ConfigChannel+0x2f6>
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4977      	ldr	r1, [pc, #476]	@ (8004000 <HAL_ADC_ConfigChannel+0x4b8>)
 8003e24:	428b      	cmp	r3, r1
 8003e26:	d008      	beq.n	8003e3a <HAL_ADC_ConfigChannel+0x2f2>
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4975      	ldr	r1, [pc, #468]	@ (8004004 <HAL_ADC_ConfigChannel+0x4bc>)
 8003e2e:	428b      	cmp	r3, r1
 8003e30:	d101      	bne.n	8003e36 <HAL_ADC_ConfigChannel+0x2ee>
 8003e32:	4b75      	ldr	r3, [pc, #468]	@ (8004008 <HAL_ADC_ConfigChannel+0x4c0>)
 8003e34:	e05a      	b.n	8003eec <HAL_ADC_ConfigChannel+0x3a4>
 8003e36:	2300      	movs	r3, #0
 8003e38:	e058      	b.n	8003eec <HAL_ADC_ConfigChannel+0x3a4>
 8003e3a:	4b74      	ldr	r3, [pc, #464]	@ (800400c <HAL_ADC_ConfigChannel+0x4c4>)
 8003e3c:	e056      	b.n	8003eec <HAL_ADC_ConfigChannel+0x3a4>
 8003e3e:	4b74      	ldr	r3, [pc, #464]	@ (8004010 <HAL_ADC_ConfigChannel+0x4c8>)
 8003e40:	e054      	b.n	8003eec <HAL_ADC_ConfigChannel+0x3a4>
 8003e42:	4b6e      	ldr	r3, [pc, #440]	@ (8003ffc <HAL_ADC_ConfigChannel+0x4b4>)
 8003e44:	e052      	b.n	8003eec <HAL_ADC_ConfigChannel+0x3a4>
 8003e46:	4b6c      	ldr	r3, [pc, #432]	@ (8003ff8 <HAL_ADC_ConfigChannel+0x4b0>)
 8003e48:	e050      	b.n	8003eec <HAL_ADC_ConfigChannel+0x3a4>
 8003e4a:	4b72      	ldr	r3, [pc, #456]	@ (8004014 <HAL_ADC_ConfigChannel+0x4cc>)
 8003e4c:	e04e      	b.n	8003eec <HAL_ADC_ConfigChannel+0x3a4>
 8003e4e:	4b72      	ldr	r3, [pc, #456]	@ (8004018 <HAL_ADC_ConfigChannel+0x4d0>)
 8003e50:	e04c      	b.n	8003eec <HAL_ADC_ConfigChannel+0x3a4>
 8003e52:	4b72      	ldr	r3, [pc, #456]	@ (800401c <HAL_ADC_ConfigChannel+0x4d4>)
 8003e54:	e04a      	b.n	8003eec <HAL_ADC_ConfigChannel+0x3a4>
 8003e56:	4b72      	ldr	r3, [pc, #456]	@ (8004020 <HAL_ADC_ConfigChannel+0x4d8>)
 8003e58:	e048      	b.n	8003eec <HAL_ADC_ConfigChannel+0x3a4>
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e046      	b.n	8003eec <HAL_ADC_ConfigChannel+0x3a4>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4970      	ldr	r1, [pc, #448]	@ (8004024 <HAL_ADC_ConfigChannel+0x4dc>)
 8003e64:	428b      	cmp	r3, r1
 8003e66:	d140      	bne.n	8003eea <HAL_ADC_ConfigChannel+0x3a2>
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	495c      	ldr	r1, [pc, #368]	@ (8003fe0 <HAL_ADC_ConfigChannel+0x498>)
 8003e6e:	428b      	cmp	r3, r1
 8003e70:	d039      	beq.n	8003ee6 <HAL_ADC_ConfigChannel+0x39e>
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	495b      	ldr	r1, [pc, #364]	@ (8003fe4 <HAL_ADC_ConfigChannel+0x49c>)
 8003e78:	428b      	cmp	r3, r1
 8003e7a:	d032      	beq.n	8003ee2 <HAL_ADC_ConfigChannel+0x39a>
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4959      	ldr	r1, [pc, #356]	@ (8003fe8 <HAL_ADC_ConfigChannel+0x4a0>)
 8003e82:	428b      	cmp	r3, r1
 8003e84:	d02b      	beq.n	8003ede <HAL_ADC_ConfigChannel+0x396>
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4958      	ldr	r1, [pc, #352]	@ (8003fec <HAL_ADC_ConfigChannel+0x4a4>)
 8003e8c:	428b      	cmp	r3, r1
 8003e8e:	d024      	beq.n	8003eda <HAL_ADC_ConfigChannel+0x392>
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4956      	ldr	r1, [pc, #344]	@ (8003ff0 <HAL_ADC_ConfigChannel+0x4a8>)
 8003e96:	428b      	cmp	r3, r1
 8003e98:	d01d      	beq.n	8003ed6 <HAL_ADC_ConfigChannel+0x38e>
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4955      	ldr	r1, [pc, #340]	@ (8003ff4 <HAL_ADC_ConfigChannel+0x4ac>)
 8003ea0:	428b      	cmp	r3, r1
 8003ea2:	d016      	beq.n	8003ed2 <HAL_ADC_ConfigChannel+0x38a>
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4953      	ldr	r1, [pc, #332]	@ (8003ff8 <HAL_ADC_ConfigChannel+0x4b0>)
 8003eaa:	428b      	cmp	r3, r1
 8003eac:	d00f      	beq.n	8003ece <HAL_ADC_ConfigChannel+0x386>
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4952      	ldr	r1, [pc, #328]	@ (8003ffc <HAL_ADC_ConfigChannel+0x4b4>)
 8003eb4:	428b      	cmp	r3, r1
 8003eb6:	d008      	beq.n	8003eca <HAL_ADC_ConfigChannel+0x382>
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4951      	ldr	r1, [pc, #324]	@ (8004004 <HAL_ADC_ConfigChannel+0x4bc>)
 8003ebe:	428b      	cmp	r3, r1
 8003ec0:	d101      	bne.n	8003ec6 <HAL_ADC_ConfigChannel+0x37e>
 8003ec2:	4b51      	ldr	r3, [pc, #324]	@ (8004008 <HAL_ADC_ConfigChannel+0x4c0>)
 8003ec4:	e012      	b.n	8003eec <HAL_ADC_ConfigChannel+0x3a4>
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	e010      	b.n	8003eec <HAL_ADC_ConfigChannel+0x3a4>
 8003eca:	4b51      	ldr	r3, [pc, #324]	@ (8004010 <HAL_ADC_ConfigChannel+0x4c8>)
 8003ecc:	e00e      	b.n	8003eec <HAL_ADC_ConfigChannel+0x3a4>
 8003ece:	4b4b      	ldr	r3, [pc, #300]	@ (8003ffc <HAL_ADC_ConfigChannel+0x4b4>)
 8003ed0:	e00c      	b.n	8003eec <HAL_ADC_ConfigChannel+0x3a4>
 8003ed2:	4b49      	ldr	r3, [pc, #292]	@ (8003ff8 <HAL_ADC_ConfigChannel+0x4b0>)
 8003ed4:	e00a      	b.n	8003eec <HAL_ADC_ConfigChannel+0x3a4>
 8003ed6:	4b4f      	ldr	r3, [pc, #316]	@ (8004014 <HAL_ADC_ConfigChannel+0x4cc>)
 8003ed8:	e008      	b.n	8003eec <HAL_ADC_ConfigChannel+0x3a4>
 8003eda:	4b4f      	ldr	r3, [pc, #316]	@ (8004018 <HAL_ADC_ConfigChannel+0x4d0>)
 8003edc:	e006      	b.n	8003eec <HAL_ADC_ConfigChannel+0x3a4>
 8003ede:	4b4f      	ldr	r3, [pc, #316]	@ (800401c <HAL_ADC_ConfigChannel+0x4d4>)
 8003ee0:	e004      	b.n	8003eec <HAL_ADC_ConfigChannel+0x3a4>
 8003ee2:	4b4f      	ldr	r3, [pc, #316]	@ (8004020 <HAL_ADC_ConfigChannel+0x4d8>)
 8003ee4:	e002      	b.n	8003eec <HAL_ADC_ConfigChannel+0x3a4>
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e000      	b.n	8003eec <HAL_ADC_ConfigChannel+0x3a4>
 8003eea:	2300      	movs	r3, #0
 8003eec:	4619      	mov	r1, r3
 8003eee:	4610      	mov	r0, r2
 8003ef0:	f7fe ff5a 	bl	8002da8 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	f280 80fc 	bge.w	80040f6 <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a36      	ldr	r2, [pc, #216]	@ (8003fdc <HAL_ADC_ConfigChannel+0x494>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d004      	beq.n	8003f12 <HAL_ADC_ConfigChannel+0x3ca>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a45      	ldr	r2, [pc, #276]	@ (8004024 <HAL_ADC_ConfigChannel+0x4dc>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d101      	bne.n	8003f16 <HAL_ADC_ConfigChannel+0x3ce>
 8003f12:	4b45      	ldr	r3, [pc, #276]	@ (8004028 <HAL_ADC_ConfigChannel+0x4e0>)
 8003f14:	e000      	b.n	8003f18 <HAL_ADC_ConfigChannel+0x3d0>
 8003f16:	4b45      	ldr	r3, [pc, #276]	@ (800402c <HAL_ADC_ConfigChannel+0x4e4>)
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f7fe ff37 	bl	8002d8c <LL_ADC_GetCommonPathInternalCh>
 8003f1e:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a2d      	ldr	r2, [pc, #180]	@ (8003fdc <HAL_ADC_ConfigChannel+0x494>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d004      	beq.n	8003f34 <HAL_ADC_ConfigChannel+0x3ec>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a3d      	ldr	r2, [pc, #244]	@ (8004024 <HAL_ADC_ConfigChannel+0x4dc>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d10e      	bne.n	8003f52 <HAL_ADC_ConfigChannel+0x40a>
 8003f34:	4829      	ldr	r0, [pc, #164]	@ (8003fdc <HAL_ADC_ConfigChannel+0x494>)
 8003f36:	f7ff f8f1 	bl	800311c <LL_ADC_IsEnabled>
 8003f3a:	4604      	mov	r4, r0
 8003f3c:	4839      	ldr	r0, [pc, #228]	@ (8004024 <HAL_ADC_ConfigChannel+0x4dc>)
 8003f3e:	f7ff f8ed 	bl	800311c <LL_ADC_IsEnabled>
 8003f42:	4603      	mov	r3, r0
 8003f44:	4323      	orrs	r3, r4
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	bf0c      	ite	eq
 8003f4a:	2301      	moveq	r3, #1
 8003f4c:	2300      	movne	r3, #0
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	e008      	b.n	8003f64 <HAL_ADC_ConfigChannel+0x41c>
 8003f52:	4837      	ldr	r0, [pc, #220]	@ (8004030 <HAL_ADC_ConfigChannel+0x4e8>)
 8003f54:	f7ff f8e2 	bl	800311c <LL_ADC_IsEnabled>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	bf0c      	ite	eq
 8003f5e:	2301      	moveq	r3, #1
 8003f60:	2300      	movne	r3, #0
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	f000 80b3 	beq.w	80040d0 <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a31      	ldr	r2, [pc, #196]	@ (8004034 <HAL_ADC_ConfigChannel+0x4ec>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d165      	bne.n	8004040 <HAL_ADC_ConfigChannel+0x4f8>
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d160      	bne.n	8004040 <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a2b      	ldr	r2, [pc, #172]	@ (8004030 <HAL_ADC_ConfigChannel+0x4e8>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	f040 80b6 	bne.w	80040f6 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a13      	ldr	r2, [pc, #76]	@ (8003fdc <HAL_ADC_ConfigChannel+0x494>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d004      	beq.n	8003f9e <HAL_ADC_ConfigChannel+0x456>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a22      	ldr	r2, [pc, #136]	@ (8004024 <HAL_ADC_ConfigChannel+0x4dc>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d101      	bne.n	8003fa2 <HAL_ADC_ConfigChannel+0x45a>
 8003f9e:	4a22      	ldr	r2, [pc, #136]	@ (8004028 <HAL_ADC_ConfigChannel+0x4e0>)
 8003fa0:	e000      	b.n	8003fa4 <HAL_ADC_ConfigChannel+0x45c>
 8003fa2:	4a22      	ldr	r2, [pc, #136]	@ (800402c <HAL_ADC_ConfigChannel+0x4e4>)
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003faa:	4619      	mov	r1, r3
 8003fac:	4610      	mov	r0, r2
 8003fae:	f7fe feda 	bl	8002d66 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003fb2:	4b21      	ldr	r3, [pc, #132]	@ (8004038 <HAL_ADC_ConfigChannel+0x4f0>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	099b      	lsrs	r3, r3, #6
 8003fb8:	4a20      	ldr	r2, [pc, #128]	@ (800403c <HAL_ADC_ConfigChannel+0x4f4>)
 8003fba:	fba2 2303 	umull	r2, r3, r2, r3
 8003fbe:	099b      	lsrs	r3, r3, #6
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	005b      	lsls	r3, r3, #1
 8003fc4:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8003fc6:	e002      	b.n	8003fce <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d1f9      	bne.n	8003fc8 <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003fd4:	e08f      	b.n	80040f6 <HAL_ADC_ConfigChannel+0x5ae>
 8003fd6:	bf00      	nop
 8003fd8:	47ff0000 	.word	0x47ff0000
 8003fdc:	40022000 	.word	0x40022000
 8003fe0:	04300002 	.word	0x04300002
 8003fe4:	08600004 	.word	0x08600004
 8003fe8:	0c900008 	.word	0x0c900008
 8003fec:	10c00010 	.word	0x10c00010
 8003ff0:	14f00020 	.word	0x14f00020
 8003ff4:	2a000400 	.word	0x2a000400
 8003ff8:	2e300800 	.word	0x2e300800
 8003ffc:	32601000 	.word	0x32601000
 8004000:	43210000 	.word	0x43210000
 8004004:	4b840000 	.word	0x4b840000
 8004008:	4fb80000 	.word	0x4fb80000
 800400c:	47520000 	.word	0x47520000
 8004010:	36902000 	.word	0x36902000
 8004014:	25b00200 	.word	0x25b00200
 8004018:	21800100 	.word	0x21800100
 800401c:	1d500080 	.word	0x1d500080
 8004020:	19200040 	.word	0x19200040
 8004024:	40022100 	.word	0x40022100
 8004028:	40022300 	.word	0x40022300
 800402c:	58026300 	.word	0x58026300
 8004030:	58026000 	.word	0x58026000
 8004034:	cb840000 	.word	0xcb840000
 8004038:	24000000 	.word	0x24000000
 800403c:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a31      	ldr	r2, [pc, #196]	@ (800410c <HAL_ADC_ConfigChannel+0x5c4>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d11e      	bne.n	8004088 <HAL_ADC_ConfigChannel+0x540>
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d119      	bne.n	8004088 <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a2d      	ldr	r2, [pc, #180]	@ (8004110 <HAL_ADC_ConfigChannel+0x5c8>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d14b      	bne.n	80040f6 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a2c      	ldr	r2, [pc, #176]	@ (8004114 <HAL_ADC_ConfigChannel+0x5cc>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d004      	beq.n	8004072 <HAL_ADC_ConfigChannel+0x52a>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a2a      	ldr	r2, [pc, #168]	@ (8004118 <HAL_ADC_ConfigChannel+0x5d0>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d101      	bne.n	8004076 <HAL_ADC_ConfigChannel+0x52e>
 8004072:	4a2a      	ldr	r2, [pc, #168]	@ (800411c <HAL_ADC_ConfigChannel+0x5d4>)
 8004074:	e000      	b.n	8004078 <HAL_ADC_ConfigChannel+0x530>
 8004076:	4a2a      	ldr	r2, [pc, #168]	@ (8004120 <HAL_ADC_ConfigChannel+0x5d8>)
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800407e:	4619      	mov	r1, r3
 8004080:	4610      	mov	r0, r2
 8004082:	f7fe fe70 	bl	8002d66 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004086:	e036      	b.n	80040f6 <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a25      	ldr	r2, [pc, #148]	@ (8004124 <HAL_ADC_ConfigChannel+0x5dc>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d131      	bne.n	80040f6 <HAL_ADC_ConfigChannel+0x5ae>
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d12c      	bne.n	80040f6 <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a1b      	ldr	r2, [pc, #108]	@ (8004110 <HAL_ADC_ConfigChannel+0x5c8>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d127      	bne.n	80040f6 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a1a      	ldr	r2, [pc, #104]	@ (8004114 <HAL_ADC_ConfigChannel+0x5cc>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d004      	beq.n	80040ba <HAL_ADC_ConfigChannel+0x572>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a18      	ldr	r2, [pc, #96]	@ (8004118 <HAL_ADC_ConfigChannel+0x5d0>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d101      	bne.n	80040be <HAL_ADC_ConfigChannel+0x576>
 80040ba:	4a18      	ldr	r2, [pc, #96]	@ (800411c <HAL_ADC_ConfigChannel+0x5d4>)
 80040bc:	e000      	b.n	80040c0 <HAL_ADC_ConfigChannel+0x578>
 80040be:	4a18      	ldr	r2, [pc, #96]	@ (8004120 <HAL_ADC_ConfigChannel+0x5d8>)
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80040c6:	4619      	mov	r1, r3
 80040c8:	4610      	mov	r0, r2
 80040ca:	f7fe fe4c 	bl	8002d66 <LL_ADC_SetCommonPathInternalCh>
 80040ce:	e012      	b.n	80040f6 <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040d4:	f043 0220 	orr.w	r2, r3, #32
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80040e2:	e008      	b.n	80040f6 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040e8:	f043 0220 	orr.w	r2, r3, #32
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80040fe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8004102:	4618      	mov	r0, r3
 8004104:	3734      	adds	r7, #52	@ 0x34
 8004106:	46bd      	mov	sp, r7
 8004108:	bd90      	pop	{r4, r7, pc}
 800410a:	bf00      	nop
 800410c:	c7520000 	.word	0xc7520000
 8004110:	58026000 	.word	0x58026000
 8004114:	40022000 	.word	0x40022000
 8004118:	40022100 	.word	0x40022100
 800411c:	40022300 	.word	0x40022300
 8004120:	58026300 	.word	0x58026300
 8004124:	cfb80000 	.word	0xcfb80000

08004128 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4618      	mov	r0, r3
 8004136:	f7fe fff1 	bl	800311c <LL_ADC_IsEnabled>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d16e      	bne.n	800421e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	689a      	ldr	r2, [r3, #8]
 8004146:	4b38      	ldr	r3, [pc, #224]	@ (8004228 <ADC_Enable+0x100>)
 8004148:	4013      	ands	r3, r2
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00d      	beq.n	800416a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004152:	f043 0210 	orr.w	r2, r3, #16
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800415e:	f043 0201 	orr.w	r2, r3, #1
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e05a      	b.n	8004220 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4618      	mov	r0, r3
 8004170:	f7fe ffc0 	bl	80030f4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004174:	f7fe fdb6 	bl	8002ce4 <HAL_GetTick>
 8004178:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a2b      	ldr	r2, [pc, #172]	@ (800422c <ADC_Enable+0x104>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d004      	beq.n	800418e <ADC_Enable+0x66>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a29      	ldr	r2, [pc, #164]	@ (8004230 <ADC_Enable+0x108>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d101      	bne.n	8004192 <ADC_Enable+0x6a>
 800418e:	4b29      	ldr	r3, [pc, #164]	@ (8004234 <ADC_Enable+0x10c>)
 8004190:	e000      	b.n	8004194 <ADC_Enable+0x6c>
 8004192:	4b29      	ldr	r3, [pc, #164]	@ (8004238 <ADC_Enable+0x110>)
 8004194:	4618      	mov	r0, r3
 8004196:	f7fe ff43 	bl	8003020 <LL_ADC_GetMultimode>
 800419a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a23      	ldr	r2, [pc, #140]	@ (8004230 <ADC_Enable+0x108>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d002      	beq.n	80041ac <ADC_Enable+0x84>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	e000      	b.n	80041ae <ADC_Enable+0x86>
 80041ac:	4b1f      	ldr	r3, [pc, #124]	@ (800422c <ADC_Enable+0x104>)
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	6812      	ldr	r2, [r2, #0]
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d02c      	beq.n	8004210 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d130      	bne.n	800421e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80041bc:	e028      	b.n	8004210 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7fe ffaa 	bl	800311c <LL_ADC_IsEnabled>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d104      	bne.n	80041d8 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4618      	mov	r0, r3
 80041d4:	f7fe ff8e 	bl	80030f4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80041d8:	f7fe fd84 	bl	8002ce4 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d914      	bls.n	8004210 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0301 	and.w	r3, r3, #1
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d00d      	beq.n	8004210 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041f8:	f043 0210 	orr.w	r2, r3, #16
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004204:	f043 0201 	orr.w	r2, r3, #1
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e007      	b.n	8004220 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	2b01      	cmp	r3, #1
 800421c:	d1cf      	bne.n	80041be <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	3710      	adds	r7, #16
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	8000003f 	.word	0x8000003f
 800422c:	40022000 	.word	0x40022000
 8004230:	40022100 	.word	0x40022100
 8004234:	40022300 	.word	0x40022300
 8004238:	58026300 	.word	0x58026300

0800423c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004248:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800424e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004252:	2b00      	cmp	r3, #0
 8004254:	d14b      	bne.n	80042ee <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800425a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0308 	and.w	r3, r3, #8
 800426c:	2b00      	cmp	r3, #0
 800426e:	d021      	beq.n	80042b4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4618      	mov	r0, r3
 8004276:	f7fe fe1e 	bl	8002eb6 <LL_ADC_REG_IsTriggerSourceSWStart>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d032      	beq.n	80042e6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d12b      	bne.n	80042e6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004292:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800429e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d11f      	bne.n	80042e6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042aa:	f043 0201 	orr.w	r2, r3, #1
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	655a      	str	r2, [r3, #84]	@ 0x54
 80042b2:	e018      	b.n	80042e6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	f003 0303 	and.w	r3, r3, #3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d111      	bne.n	80042e6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042c6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d105      	bne.n	80042e6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042de:	f043 0201 	orr.w	r2, r3, #1
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80042e6:	68f8      	ldr	r0, [r7, #12]
 80042e8:	f7ff fc06 	bl	8003af8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80042ec:	e00e      	b.n	800430c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042f2:	f003 0310 	and.w	r3, r3, #16
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d003      	beq.n	8004302 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80042fa:	68f8      	ldr	r0, [r7, #12]
 80042fc:	f7ff fc1a 	bl	8003b34 <HAL_ADC_ErrorCallback>
}
 8004300:	e004      	b.n	800430c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004306:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	4798      	blx	r3
}
 800430c:	bf00      	nop
 800430e:	3710      	adds	r7, #16
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004320:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004322:	68f8      	ldr	r0, [r7, #12]
 8004324:	f7ff fbf2 	bl	8003b0c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004328:	bf00      	nop
 800432a:	3710      	adds	r7, #16
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800433c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004342:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800434e:	f043 0204 	orr.w	r2, r3, #4
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004356:	68f8      	ldr	r0, [r7, #12]
 8004358:	f7ff fbec 	bl	8003b34 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800435c:	bf00      	nop
 800435e:	3710      	adds	r7, #16
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}

08004364 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a7a      	ldr	r2, [pc, #488]	@ (800455c <ADC_ConfigureBoostMode+0x1f8>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d004      	beq.n	8004380 <ADC_ConfigureBoostMode+0x1c>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a79      	ldr	r2, [pc, #484]	@ (8004560 <ADC_ConfigureBoostMode+0x1fc>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d109      	bne.n	8004394 <ADC_ConfigureBoostMode+0x30>
 8004380:	4b78      	ldr	r3, [pc, #480]	@ (8004564 <ADC_ConfigureBoostMode+0x200>)
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004388:	2b00      	cmp	r3, #0
 800438a:	bf14      	ite	ne
 800438c:	2301      	movne	r3, #1
 800438e:	2300      	moveq	r3, #0
 8004390:	b2db      	uxtb	r3, r3
 8004392:	e008      	b.n	80043a6 <ADC_ConfigureBoostMode+0x42>
 8004394:	4b74      	ldr	r3, [pc, #464]	@ (8004568 <ADC_ConfigureBoostMode+0x204>)
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800439c:	2b00      	cmp	r3, #0
 800439e:	bf14      	ite	ne
 80043a0:	2301      	movne	r3, #1
 80043a2:	2300      	moveq	r3, #0
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d01c      	beq.n	80043e4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80043aa:	f003 fe7d 	bl	80080a8 <HAL_RCC_GetHCLKFreq>
 80043ae:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80043b8:	d010      	beq.n	80043dc <ADC_ConfigureBoostMode+0x78>
 80043ba:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80043be:	d873      	bhi.n	80044a8 <ADC_ConfigureBoostMode+0x144>
 80043c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043c4:	d002      	beq.n	80043cc <ADC_ConfigureBoostMode+0x68>
 80043c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80043ca:	d16d      	bne.n	80044a8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	0c1b      	lsrs	r3, r3, #16
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d8:	60fb      	str	r3, [r7, #12]
        break;
 80043da:	e068      	b.n	80044ae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	089b      	lsrs	r3, r3, #2
 80043e0:	60fb      	str	r3, [r7, #12]
        break;
 80043e2:	e064      	b.n	80044ae <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80043e4:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80043e8:	f04f 0100 	mov.w	r1, #0
 80043ec:	f005 f8c2 	bl	8009574 <HAL_RCCEx_GetPeriphCLKFreq>
 80043f0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80043fa:	d051      	beq.n	80044a0 <ADC_ConfigureBoostMode+0x13c>
 80043fc:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004400:	d854      	bhi.n	80044ac <ADC_ConfigureBoostMode+0x148>
 8004402:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004406:	d047      	beq.n	8004498 <ADC_ConfigureBoostMode+0x134>
 8004408:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800440c:	d84e      	bhi.n	80044ac <ADC_ConfigureBoostMode+0x148>
 800440e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004412:	d03d      	beq.n	8004490 <ADC_ConfigureBoostMode+0x12c>
 8004414:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004418:	d848      	bhi.n	80044ac <ADC_ConfigureBoostMode+0x148>
 800441a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800441e:	d033      	beq.n	8004488 <ADC_ConfigureBoostMode+0x124>
 8004420:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004424:	d842      	bhi.n	80044ac <ADC_ConfigureBoostMode+0x148>
 8004426:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800442a:	d029      	beq.n	8004480 <ADC_ConfigureBoostMode+0x11c>
 800442c:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004430:	d83c      	bhi.n	80044ac <ADC_ConfigureBoostMode+0x148>
 8004432:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004436:	d01a      	beq.n	800446e <ADC_ConfigureBoostMode+0x10a>
 8004438:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800443c:	d836      	bhi.n	80044ac <ADC_ConfigureBoostMode+0x148>
 800443e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004442:	d014      	beq.n	800446e <ADC_ConfigureBoostMode+0x10a>
 8004444:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004448:	d830      	bhi.n	80044ac <ADC_ConfigureBoostMode+0x148>
 800444a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800444e:	d00e      	beq.n	800446e <ADC_ConfigureBoostMode+0x10a>
 8004450:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004454:	d82a      	bhi.n	80044ac <ADC_ConfigureBoostMode+0x148>
 8004456:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800445a:	d008      	beq.n	800446e <ADC_ConfigureBoostMode+0x10a>
 800445c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004460:	d824      	bhi.n	80044ac <ADC_ConfigureBoostMode+0x148>
 8004462:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004466:	d002      	beq.n	800446e <ADC_ConfigureBoostMode+0x10a>
 8004468:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800446c:	d11e      	bne.n	80044ac <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	0c9b      	lsrs	r3, r3, #18
 8004474:	005b      	lsls	r3, r3, #1
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	fbb2 f3f3 	udiv	r3, r2, r3
 800447c:	60fb      	str	r3, [r7, #12]
        break;
 800447e:	e016      	b.n	80044ae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	091b      	lsrs	r3, r3, #4
 8004484:	60fb      	str	r3, [r7, #12]
        break;
 8004486:	e012      	b.n	80044ae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	095b      	lsrs	r3, r3, #5
 800448c:	60fb      	str	r3, [r7, #12]
        break;
 800448e:	e00e      	b.n	80044ae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	099b      	lsrs	r3, r3, #6
 8004494:	60fb      	str	r3, [r7, #12]
        break;
 8004496:	e00a      	b.n	80044ae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	09db      	lsrs	r3, r3, #7
 800449c:	60fb      	str	r3, [r7, #12]
        break;
 800449e:	e006      	b.n	80044ae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	0a1b      	lsrs	r3, r3, #8
 80044a4:	60fb      	str	r3, [r7, #12]
        break;
 80044a6:	e002      	b.n	80044ae <ADC_ConfigureBoostMode+0x14a>
        break;
 80044a8:	bf00      	nop
 80044aa:	e000      	b.n	80044ae <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80044ac:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80044ae:	f7fe fc25 	bl	8002cfc <HAL_GetREVID>
 80044b2:	4603      	mov	r3, r0
 80044b4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d815      	bhi.n	80044e8 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	4a2b      	ldr	r2, [pc, #172]	@ (800456c <ADC_ConfigureBoostMode+0x208>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d908      	bls.n	80044d6 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	689a      	ldr	r2, [r3, #8]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044d2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80044d4:	e03e      	b.n	8004554 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	689a      	ldr	r2, [r3, #8]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80044e4:	609a      	str	r2, [r3, #8]
}
 80044e6:	e035      	b.n	8004554 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	085b      	lsrs	r3, r3, #1
 80044ec:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	4a1f      	ldr	r2, [pc, #124]	@ (8004570 <ADC_ConfigureBoostMode+0x20c>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d808      	bhi.n	8004508 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	689a      	ldr	r2, [r3, #8]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004504:	609a      	str	r2, [r3, #8]
}
 8004506:	e025      	b.n	8004554 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	4a1a      	ldr	r2, [pc, #104]	@ (8004574 <ADC_ConfigureBoostMode+0x210>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d80a      	bhi.n	8004526 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004522:	609a      	str	r2, [r3, #8]
}
 8004524:	e016      	b.n	8004554 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	4a13      	ldr	r2, [pc, #76]	@ (8004578 <ADC_ConfigureBoostMode+0x214>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d80a      	bhi.n	8004544 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004540:	609a      	str	r2, [r3, #8]
}
 8004542:	e007      	b.n	8004554 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	689a      	ldr	r2, [r3, #8]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004552:	609a      	str	r2, [r3, #8]
}
 8004554:	bf00      	nop
 8004556:	3710      	adds	r7, #16
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	40022000 	.word	0x40022000
 8004560:	40022100 	.word	0x40022100
 8004564:	40022300 	.word	0x40022300
 8004568:	58026300 	.word	0x58026300
 800456c:	01312d00 	.word	0x01312d00
 8004570:	005f5e10 	.word	0x005f5e10
 8004574:	00bebc20 	.word	0x00bebc20
 8004578:	017d7840 	.word	0x017d7840

0800457c <LL_ADC_IsEnabled>:
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f003 0301 	and.w	r3, r3, #1
 800458c:	2b01      	cmp	r3, #1
 800458e:	d101      	bne.n	8004594 <LL_ADC_IsEnabled+0x18>
 8004590:	2301      	movs	r3, #1
 8004592:	e000      	b.n	8004596 <LL_ADC_IsEnabled+0x1a>
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	370c      	adds	r7, #12
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr

080045a2 <LL_ADC_REG_IsConversionOngoing>:
{
 80045a2:	b480      	push	{r7}
 80045a4:	b083      	sub	sp, #12
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f003 0304 	and.w	r3, r3, #4
 80045b2:	2b04      	cmp	r3, #4
 80045b4:	d101      	bne.n	80045ba <LL_ADC_REG_IsConversionOngoing+0x18>
 80045b6:	2301      	movs	r3, #1
 80045b8:	e000      	b.n	80045bc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	4618      	mov	r0, r3
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80045e4:	bf00      	nop
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80045f8:	bf00      	nop
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800460c:	bf00      	nop
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004620:	bf00      	nop
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800462c:	b590      	push	{r4, r7, lr}
 800462e:	b09f      	sub	sp, #124	@ 0x7c
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004636:	2300      	movs	r3, #0
 8004638:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004642:	2b01      	cmp	r3, #1
 8004644:	d101      	bne.n	800464a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004646:	2302      	movs	r3, #2
 8004648:	e0be      	b.n	80047c8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2201      	movs	r2, #1
 800464e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004652:	2300      	movs	r3, #0
 8004654:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004656:	2300      	movs	r3, #0
 8004658:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a5c      	ldr	r2, [pc, #368]	@ (80047d0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d102      	bne.n	800466a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004664:	4b5b      	ldr	r3, [pc, #364]	@ (80047d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004666:	60bb      	str	r3, [r7, #8]
 8004668:	e001      	b.n	800466e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800466a:	2300      	movs	r3, #0
 800466c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d10b      	bne.n	800468c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004678:	f043 0220 	orr.w	r2, r3, #32
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e09d      	b.n	80047c8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	4618      	mov	r0, r3
 8004690:	f7ff ff87 	bl	80045a2 <LL_ADC_REG_IsConversionOngoing>
 8004694:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4618      	mov	r0, r3
 800469c:	f7ff ff81 	bl	80045a2 <LL_ADC_REG_IsConversionOngoing>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d17f      	bne.n	80047a6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80046a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d17c      	bne.n	80047a6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a47      	ldr	r2, [pc, #284]	@ (80047d0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d004      	beq.n	80046c0 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a46      	ldr	r2, [pc, #280]	@ (80047d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d101      	bne.n	80046c4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80046c0:	4b45      	ldr	r3, [pc, #276]	@ (80047d8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80046c2:	e000      	b.n	80046c6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80046c4:	4b45      	ldr	r3, [pc, #276]	@ (80047dc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80046c6:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d039      	beq.n	8004744 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80046d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	431a      	orrs	r2, r3
 80046de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046e0:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a3a      	ldr	r2, [pc, #232]	@ (80047d0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d004      	beq.n	80046f6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a38      	ldr	r2, [pc, #224]	@ (80047d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d10e      	bne.n	8004714 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80046f6:	4836      	ldr	r0, [pc, #216]	@ (80047d0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80046f8:	f7ff ff40 	bl	800457c <LL_ADC_IsEnabled>
 80046fc:	4604      	mov	r4, r0
 80046fe:	4835      	ldr	r0, [pc, #212]	@ (80047d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004700:	f7ff ff3c 	bl	800457c <LL_ADC_IsEnabled>
 8004704:	4603      	mov	r3, r0
 8004706:	4323      	orrs	r3, r4
 8004708:	2b00      	cmp	r3, #0
 800470a:	bf0c      	ite	eq
 800470c:	2301      	moveq	r3, #1
 800470e:	2300      	movne	r3, #0
 8004710:	b2db      	uxtb	r3, r3
 8004712:	e008      	b.n	8004726 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004714:	4832      	ldr	r0, [pc, #200]	@ (80047e0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004716:	f7ff ff31 	bl	800457c <LL_ADC_IsEnabled>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	bf0c      	ite	eq
 8004720:	2301      	moveq	r3, #1
 8004722:	2300      	movne	r3, #0
 8004724:	b2db      	uxtb	r3, r3
 8004726:	2b00      	cmp	r3, #0
 8004728:	d047      	beq.n	80047ba <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800472a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800472c:	689a      	ldr	r2, [r3, #8]
 800472e:	4b2d      	ldr	r3, [pc, #180]	@ (80047e4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004730:	4013      	ands	r3, r2
 8004732:	683a      	ldr	r2, [r7, #0]
 8004734:	6811      	ldr	r1, [r2, #0]
 8004736:	683a      	ldr	r2, [r7, #0]
 8004738:	6892      	ldr	r2, [r2, #8]
 800473a:	430a      	orrs	r2, r1
 800473c:	431a      	orrs	r2, r3
 800473e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004740:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004742:	e03a      	b.n	80047ba <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004744:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800474c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800474e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a1e      	ldr	r2, [pc, #120]	@ (80047d0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d004      	beq.n	8004764 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a1d      	ldr	r2, [pc, #116]	@ (80047d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d10e      	bne.n	8004782 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004764:	481a      	ldr	r0, [pc, #104]	@ (80047d0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004766:	f7ff ff09 	bl	800457c <LL_ADC_IsEnabled>
 800476a:	4604      	mov	r4, r0
 800476c:	4819      	ldr	r0, [pc, #100]	@ (80047d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800476e:	f7ff ff05 	bl	800457c <LL_ADC_IsEnabled>
 8004772:	4603      	mov	r3, r0
 8004774:	4323      	orrs	r3, r4
 8004776:	2b00      	cmp	r3, #0
 8004778:	bf0c      	ite	eq
 800477a:	2301      	moveq	r3, #1
 800477c:	2300      	movne	r3, #0
 800477e:	b2db      	uxtb	r3, r3
 8004780:	e008      	b.n	8004794 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004782:	4817      	ldr	r0, [pc, #92]	@ (80047e0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004784:	f7ff fefa 	bl	800457c <LL_ADC_IsEnabled>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	bf0c      	ite	eq
 800478e:	2301      	moveq	r3, #1
 8004790:	2300      	movne	r3, #0
 8004792:	b2db      	uxtb	r3, r3
 8004794:	2b00      	cmp	r3, #0
 8004796:	d010      	beq.n	80047ba <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004798:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800479a:	689a      	ldr	r2, [r3, #8]
 800479c:	4b11      	ldr	r3, [pc, #68]	@ (80047e4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800479e:	4013      	ands	r3, r2
 80047a0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80047a2:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80047a4:	e009      	b.n	80047ba <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047aa:	f043 0220 	orr.w	r2, r3, #32
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80047b8:	e000      	b.n	80047bc <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80047ba:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80047c4:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	377c      	adds	r7, #124	@ 0x7c
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd90      	pop	{r4, r7, pc}
 80047d0:	40022000 	.word	0x40022000
 80047d4:	40022100 	.word	0x40022100
 80047d8:	40022300 	.word	0x40022300
 80047dc:	58026300 	.word	0x58026300
 80047e0:	58026000 	.word	0x58026000
 80047e4:	fffff0e0 	.word	0xfffff0e0

080047e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b085      	sub	sp, #20
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f003 0307 	and.w	r3, r3, #7
 80047f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80047f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004828 <__NVIC_SetPriorityGrouping+0x40>)
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80047fe:	68ba      	ldr	r2, [r7, #8]
 8004800:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004804:	4013      	ands	r3, r2
 8004806:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004810:	4b06      	ldr	r3, [pc, #24]	@ (800482c <__NVIC_SetPriorityGrouping+0x44>)
 8004812:	4313      	orrs	r3, r2
 8004814:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004816:	4a04      	ldr	r2, [pc, #16]	@ (8004828 <__NVIC_SetPriorityGrouping+0x40>)
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	60d3      	str	r3, [r2, #12]
}
 800481c:	bf00      	nop
 800481e:	3714      	adds	r7, #20
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr
 8004828:	e000ed00 	.word	0xe000ed00
 800482c:	05fa0000 	.word	0x05fa0000

08004830 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004830:	b480      	push	{r7}
 8004832:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004834:	4b04      	ldr	r3, [pc, #16]	@ (8004848 <__NVIC_GetPriorityGrouping+0x18>)
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	0a1b      	lsrs	r3, r3, #8
 800483a:	f003 0307 	and.w	r3, r3, #7
}
 800483e:	4618      	mov	r0, r3
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr
 8004848:	e000ed00 	.word	0xe000ed00

0800484c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	4603      	mov	r3, r0
 8004854:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004856:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800485a:	2b00      	cmp	r3, #0
 800485c:	db0b      	blt.n	8004876 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800485e:	88fb      	ldrh	r3, [r7, #6]
 8004860:	f003 021f 	and.w	r2, r3, #31
 8004864:	4907      	ldr	r1, [pc, #28]	@ (8004884 <__NVIC_EnableIRQ+0x38>)
 8004866:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800486a:	095b      	lsrs	r3, r3, #5
 800486c:	2001      	movs	r0, #1
 800486e:	fa00 f202 	lsl.w	r2, r0, r2
 8004872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004876:	bf00      	nop
 8004878:	370c      	adds	r7, #12
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	e000e100 	.word	0xe000e100

08004888 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	4603      	mov	r3, r0
 8004890:	6039      	str	r1, [r7, #0]
 8004892:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004894:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004898:	2b00      	cmp	r3, #0
 800489a:	db0a      	blt.n	80048b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	b2da      	uxtb	r2, r3
 80048a0:	490c      	ldr	r1, [pc, #48]	@ (80048d4 <__NVIC_SetPriority+0x4c>)
 80048a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80048a6:	0112      	lsls	r2, r2, #4
 80048a8:	b2d2      	uxtb	r2, r2
 80048aa:	440b      	add	r3, r1
 80048ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80048b0:	e00a      	b.n	80048c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	b2da      	uxtb	r2, r3
 80048b6:	4908      	ldr	r1, [pc, #32]	@ (80048d8 <__NVIC_SetPriority+0x50>)
 80048b8:	88fb      	ldrh	r3, [r7, #6]
 80048ba:	f003 030f 	and.w	r3, r3, #15
 80048be:	3b04      	subs	r3, #4
 80048c0:	0112      	lsls	r2, r2, #4
 80048c2:	b2d2      	uxtb	r2, r2
 80048c4:	440b      	add	r3, r1
 80048c6:	761a      	strb	r2, [r3, #24]
}
 80048c8:	bf00      	nop
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr
 80048d4:	e000e100 	.word	0xe000e100
 80048d8:	e000ed00 	.word	0xe000ed00

080048dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048dc:	b480      	push	{r7}
 80048de:	b089      	sub	sp, #36	@ 0x24
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f003 0307 	and.w	r3, r3, #7
 80048ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	f1c3 0307 	rsb	r3, r3, #7
 80048f6:	2b04      	cmp	r3, #4
 80048f8:	bf28      	it	cs
 80048fa:	2304      	movcs	r3, #4
 80048fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	3304      	adds	r3, #4
 8004902:	2b06      	cmp	r3, #6
 8004904:	d902      	bls.n	800490c <NVIC_EncodePriority+0x30>
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	3b03      	subs	r3, #3
 800490a:	e000      	b.n	800490e <NVIC_EncodePriority+0x32>
 800490c:	2300      	movs	r3, #0
 800490e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004910:	f04f 32ff 	mov.w	r2, #4294967295
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	fa02 f303 	lsl.w	r3, r2, r3
 800491a:	43da      	mvns	r2, r3
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	401a      	ands	r2, r3
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004924:	f04f 31ff 	mov.w	r1, #4294967295
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	fa01 f303 	lsl.w	r3, r1, r3
 800492e:	43d9      	mvns	r1, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004934:	4313      	orrs	r3, r2
         );
}
 8004936:	4618      	mov	r0, r3
 8004938:	3724      	adds	r7, #36	@ 0x24
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
	...

08004944 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	3b01      	subs	r3, #1
 8004950:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004954:	d301      	bcc.n	800495a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004956:	2301      	movs	r3, #1
 8004958:	e00f      	b.n	800497a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800495a:	4a0a      	ldr	r2, [pc, #40]	@ (8004984 <SysTick_Config+0x40>)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	3b01      	subs	r3, #1
 8004960:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004962:	210f      	movs	r1, #15
 8004964:	f04f 30ff 	mov.w	r0, #4294967295
 8004968:	f7ff ff8e 	bl	8004888 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800496c:	4b05      	ldr	r3, [pc, #20]	@ (8004984 <SysTick_Config+0x40>)
 800496e:	2200      	movs	r2, #0
 8004970:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004972:	4b04      	ldr	r3, [pc, #16]	@ (8004984 <SysTick_Config+0x40>)
 8004974:	2207      	movs	r2, #7
 8004976:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3708      	adds	r7, #8
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	e000e010 	.word	0xe000e010

08004988 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f7ff ff29 	bl	80047e8 <__NVIC_SetPriorityGrouping>
}
 8004996:	bf00      	nop
 8004998:	3708      	adds	r7, #8
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}

0800499e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800499e:	b580      	push	{r7, lr}
 80049a0:	b086      	sub	sp, #24
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	4603      	mov	r3, r0
 80049a6:	60b9      	str	r1, [r7, #8]
 80049a8:	607a      	str	r2, [r7, #4]
 80049aa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80049ac:	f7ff ff40 	bl	8004830 <__NVIC_GetPriorityGrouping>
 80049b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	68b9      	ldr	r1, [r7, #8]
 80049b6:	6978      	ldr	r0, [r7, #20]
 80049b8:	f7ff ff90 	bl	80048dc <NVIC_EncodePriority>
 80049bc:	4602      	mov	r2, r0
 80049be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80049c2:	4611      	mov	r1, r2
 80049c4:	4618      	mov	r0, r3
 80049c6:	f7ff ff5f 	bl	8004888 <__NVIC_SetPriority>
}
 80049ca:	bf00      	nop
 80049cc:	3718      	adds	r7, #24
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049d2:	b580      	push	{r7, lr}
 80049d4:	b082      	sub	sp, #8
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	4603      	mov	r3, r0
 80049da:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049e0:	4618      	mov	r0, r3
 80049e2:	f7ff ff33 	bl	800484c <__NVIC_EnableIRQ>
}
 80049e6:	bf00      	nop
 80049e8:	3708      	adds	r7, #8
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}

080049ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b082      	sub	sp, #8
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f7ff ffa4 	bl	8004944 <SysTick_Config>
 80049fc:	4603      	mov	r3, r0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3708      	adds	r7, #8
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
	...

08004a08 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8004a0c:	4b06      	ldr	r3, [pc, #24]	@ (8004a28 <HAL_GetCurrentCPUID+0x20>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a14:	2b70      	cmp	r3, #112	@ 0x70
 8004a16:	d101      	bne.n	8004a1c <HAL_GetCurrentCPUID+0x14>
  {
    return  CM7_CPUID;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e000      	b.n	8004a1e <HAL_GetCurrentCPUID+0x16>
  }
  else
  {
    return CM4_CPUID;
 8004a1c:	2301      	movs	r3, #1
  }
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr
 8004a28:	e000ed00 	.word	0xe000ed00

08004a2c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b086      	sub	sp, #24
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004a34:	f7fe f956 	bl	8002ce4 <HAL_GetTick>
 8004a38:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d101      	bne.n	8004a44 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e316      	b.n	8005072 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a66      	ldr	r2, [pc, #408]	@ (8004be4 <HAL_DMA_Init+0x1b8>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d04a      	beq.n	8004ae4 <HAL_DMA_Init+0xb8>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a65      	ldr	r2, [pc, #404]	@ (8004be8 <HAL_DMA_Init+0x1bc>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d045      	beq.n	8004ae4 <HAL_DMA_Init+0xb8>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a63      	ldr	r2, [pc, #396]	@ (8004bec <HAL_DMA_Init+0x1c0>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d040      	beq.n	8004ae4 <HAL_DMA_Init+0xb8>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a62      	ldr	r2, [pc, #392]	@ (8004bf0 <HAL_DMA_Init+0x1c4>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d03b      	beq.n	8004ae4 <HAL_DMA_Init+0xb8>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a60      	ldr	r2, [pc, #384]	@ (8004bf4 <HAL_DMA_Init+0x1c8>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d036      	beq.n	8004ae4 <HAL_DMA_Init+0xb8>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a5f      	ldr	r2, [pc, #380]	@ (8004bf8 <HAL_DMA_Init+0x1cc>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d031      	beq.n	8004ae4 <HAL_DMA_Init+0xb8>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a5d      	ldr	r2, [pc, #372]	@ (8004bfc <HAL_DMA_Init+0x1d0>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d02c      	beq.n	8004ae4 <HAL_DMA_Init+0xb8>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a5c      	ldr	r2, [pc, #368]	@ (8004c00 <HAL_DMA_Init+0x1d4>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d027      	beq.n	8004ae4 <HAL_DMA_Init+0xb8>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a5a      	ldr	r2, [pc, #360]	@ (8004c04 <HAL_DMA_Init+0x1d8>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d022      	beq.n	8004ae4 <HAL_DMA_Init+0xb8>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a59      	ldr	r2, [pc, #356]	@ (8004c08 <HAL_DMA_Init+0x1dc>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d01d      	beq.n	8004ae4 <HAL_DMA_Init+0xb8>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a57      	ldr	r2, [pc, #348]	@ (8004c0c <HAL_DMA_Init+0x1e0>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d018      	beq.n	8004ae4 <HAL_DMA_Init+0xb8>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a56      	ldr	r2, [pc, #344]	@ (8004c10 <HAL_DMA_Init+0x1e4>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d013      	beq.n	8004ae4 <HAL_DMA_Init+0xb8>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a54      	ldr	r2, [pc, #336]	@ (8004c14 <HAL_DMA_Init+0x1e8>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d00e      	beq.n	8004ae4 <HAL_DMA_Init+0xb8>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a53      	ldr	r2, [pc, #332]	@ (8004c18 <HAL_DMA_Init+0x1ec>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d009      	beq.n	8004ae4 <HAL_DMA_Init+0xb8>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a51      	ldr	r2, [pc, #324]	@ (8004c1c <HAL_DMA_Init+0x1f0>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d004      	beq.n	8004ae4 <HAL_DMA_Init+0xb8>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a50      	ldr	r2, [pc, #320]	@ (8004c20 <HAL_DMA_Init+0x1f4>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d101      	bne.n	8004ae8 <HAL_DMA_Init+0xbc>
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e000      	b.n	8004aea <HAL_DMA_Init+0xbe>
 8004ae8:	2300      	movs	r3, #0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	f000 813b 	beq.w	8004d66 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2202      	movs	r2, #2
 8004af4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a37      	ldr	r2, [pc, #220]	@ (8004be4 <HAL_DMA_Init+0x1b8>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d04a      	beq.n	8004ba0 <HAL_DMA_Init+0x174>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a36      	ldr	r2, [pc, #216]	@ (8004be8 <HAL_DMA_Init+0x1bc>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d045      	beq.n	8004ba0 <HAL_DMA_Init+0x174>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a34      	ldr	r2, [pc, #208]	@ (8004bec <HAL_DMA_Init+0x1c0>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d040      	beq.n	8004ba0 <HAL_DMA_Init+0x174>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a33      	ldr	r2, [pc, #204]	@ (8004bf0 <HAL_DMA_Init+0x1c4>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d03b      	beq.n	8004ba0 <HAL_DMA_Init+0x174>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a31      	ldr	r2, [pc, #196]	@ (8004bf4 <HAL_DMA_Init+0x1c8>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d036      	beq.n	8004ba0 <HAL_DMA_Init+0x174>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a30      	ldr	r2, [pc, #192]	@ (8004bf8 <HAL_DMA_Init+0x1cc>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d031      	beq.n	8004ba0 <HAL_DMA_Init+0x174>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a2e      	ldr	r2, [pc, #184]	@ (8004bfc <HAL_DMA_Init+0x1d0>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d02c      	beq.n	8004ba0 <HAL_DMA_Init+0x174>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a2d      	ldr	r2, [pc, #180]	@ (8004c00 <HAL_DMA_Init+0x1d4>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d027      	beq.n	8004ba0 <HAL_DMA_Init+0x174>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a2b      	ldr	r2, [pc, #172]	@ (8004c04 <HAL_DMA_Init+0x1d8>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d022      	beq.n	8004ba0 <HAL_DMA_Init+0x174>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a2a      	ldr	r2, [pc, #168]	@ (8004c08 <HAL_DMA_Init+0x1dc>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d01d      	beq.n	8004ba0 <HAL_DMA_Init+0x174>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a28      	ldr	r2, [pc, #160]	@ (8004c0c <HAL_DMA_Init+0x1e0>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d018      	beq.n	8004ba0 <HAL_DMA_Init+0x174>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a27      	ldr	r2, [pc, #156]	@ (8004c10 <HAL_DMA_Init+0x1e4>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d013      	beq.n	8004ba0 <HAL_DMA_Init+0x174>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a25      	ldr	r2, [pc, #148]	@ (8004c14 <HAL_DMA_Init+0x1e8>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d00e      	beq.n	8004ba0 <HAL_DMA_Init+0x174>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a24      	ldr	r2, [pc, #144]	@ (8004c18 <HAL_DMA_Init+0x1ec>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d009      	beq.n	8004ba0 <HAL_DMA_Init+0x174>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a22      	ldr	r2, [pc, #136]	@ (8004c1c <HAL_DMA_Init+0x1f0>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d004      	beq.n	8004ba0 <HAL_DMA_Init+0x174>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a21      	ldr	r2, [pc, #132]	@ (8004c20 <HAL_DMA_Init+0x1f4>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d108      	bne.n	8004bb2 <HAL_DMA_Init+0x186>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f022 0201 	bic.w	r2, r2, #1
 8004bae:	601a      	str	r2, [r3, #0]
 8004bb0:	e007      	b.n	8004bc2 <HAL_DMA_Init+0x196>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f022 0201 	bic.w	r2, r2, #1
 8004bc0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004bc2:	e02f      	b.n	8004c24 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004bc4:	f7fe f88e 	bl	8002ce4 <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	2b05      	cmp	r3, #5
 8004bd0:	d928      	bls.n	8004c24 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2220      	movs	r2, #32
 8004bd6:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2203      	movs	r2, #3
 8004bdc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e246      	b.n	8005072 <HAL_DMA_Init+0x646>
 8004be4:	40020010 	.word	0x40020010
 8004be8:	40020028 	.word	0x40020028
 8004bec:	40020040 	.word	0x40020040
 8004bf0:	40020058 	.word	0x40020058
 8004bf4:	40020070 	.word	0x40020070
 8004bf8:	40020088 	.word	0x40020088
 8004bfc:	400200a0 	.word	0x400200a0
 8004c00:	400200b8 	.word	0x400200b8
 8004c04:	40020410 	.word	0x40020410
 8004c08:	40020428 	.word	0x40020428
 8004c0c:	40020440 	.word	0x40020440
 8004c10:	40020458 	.word	0x40020458
 8004c14:	40020470 	.word	0x40020470
 8004c18:	40020488 	.word	0x40020488
 8004c1c:	400204a0 	.word	0x400204a0
 8004c20:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0301 	and.w	r3, r3, #1
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d1c8      	bne.n	8004bc4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004c3a:	697a      	ldr	r2, [r7, #20]
 8004c3c:	4b83      	ldr	r3, [pc, #524]	@ (8004e4c <HAL_DMA_Init+0x420>)
 8004c3e:	4013      	ands	r3, r2
 8004c40:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004c4a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	691b      	ldr	r3, [r3, #16]
 8004c50:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c56:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	699b      	ldr	r3, [r3, #24]
 8004c5c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c62:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a1b      	ldr	r3, [r3, #32]
 8004c68:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004c6a:	697a      	ldr	r2, [r7, #20]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c74:	2b04      	cmp	r3, #4
 8004c76:	d107      	bne.n	8004c88 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c80:	4313      	orrs	r3, r2
 8004c82:	697a      	ldr	r2, [r7, #20]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004c88:	4b71      	ldr	r3, [pc, #452]	@ (8004e50 <HAL_DMA_Init+0x424>)
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	4b71      	ldr	r3, [pc, #452]	@ (8004e54 <HAL_DMA_Init+0x428>)
 8004c8e:	4013      	ands	r3, r2
 8004c90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c94:	d328      	bcc.n	8004ce8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	2b28      	cmp	r3, #40	@ 0x28
 8004c9c:	d903      	bls.n	8004ca6 <HAL_DMA_Init+0x27a>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	2b2e      	cmp	r3, #46	@ 0x2e
 8004ca4:	d917      	bls.n	8004cd6 <HAL_DMA_Init+0x2aa>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	2b3e      	cmp	r3, #62	@ 0x3e
 8004cac:	d903      	bls.n	8004cb6 <HAL_DMA_Init+0x28a>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	2b42      	cmp	r3, #66	@ 0x42
 8004cb4:	d90f      	bls.n	8004cd6 <HAL_DMA_Init+0x2aa>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	2b46      	cmp	r3, #70	@ 0x46
 8004cbc:	d903      	bls.n	8004cc6 <HAL_DMA_Init+0x29a>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	2b48      	cmp	r3, #72	@ 0x48
 8004cc4:	d907      	bls.n	8004cd6 <HAL_DMA_Init+0x2aa>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	2b4e      	cmp	r3, #78	@ 0x4e
 8004ccc:	d905      	bls.n	8004cda <HAL_DMA_Init+0x2ae>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	2b52      	cmp	r3, #82	@ 0x52
 8004cd4:	d801      	bhi.n	8004cda <HAL_DMA_Init+0x2ae>
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e000      	b.n	8004cdc <HAL_DMA_Init+0x2b0>
 8004cda:	2300      	movs	r3, #0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d003      	beq.n	8004ce8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ce6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	697a      	ldr	r2, [r7, #20]
 8004cee:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	695b      	ldr	r3, [r3, #20]
 8004cf6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	f023 0307 	bic.w	r3, r3, #7
 8004cfe:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d04:	697a      	ldr	r2, [r7, #20]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d0e:	2b04      	cmp	r3, #4
 8004d10:	d117      	bne.n	8004d42 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d16:	697a      	ldr	r2, [r7, #20]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d00e      	beq.n	8004d42 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f001 fdcf 	bl	80068c8 <DMA_CheckFifoParam>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d008      	beq.n	8004d42 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2240      	movs	r2, #64	@ 0x40
 8004d34:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e197      	b.n	8005072 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	697a      	ldr	r2, [r7, #20]
 8004d48:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f001 fd0a 	bl	8006764 <DMA_CalcBaseAndBitshift>
 8004d50:	4603      	mov	r3, r0
 8004d52:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d58:	f003 031f 	and.w	r3, r3, #31
 8004d5c:	223f      	movs	r2, #63	@ 0x3f
 8004d5e:	409a      	lsls	r2, r3
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	609a      	str	r2, [r3, #8]
 8004d64:	e0cd      	b.n	8004f02 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a3b      	ldr	r2, [pc, #236]	@ (8004e58 <HAL_DMA_Init+0x42c>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d022      	beq.n	8004db6 <HAL_DMA_Init+0x38a>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a39      	ldr	r2, [pc, #228]	@ (8004e5c <HAL_DMA_Init+0x430>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d01d      	beq.n	8004db6 <HAL_DMA_Init+0x38a>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a38      	ldr	r2, [pc, #224]	@ (8004e60 <HAL_DMA_Init+0x434>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d018      	beq.n	8004db6 <HAL_DMA_Init+0x38a>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a36      	ldr	r2, [pc, #216]	@ (8004e64 <HAL_DMA_Init+0x438>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d013      	beq.n	8004db6 <HAL_DMA_Init+0x38a>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a35      	ldr	r2, [pc, #212]	@ (8004e68 <HAL_DMA_Init+0x43c>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d00e      	beq.n	8004db6 <HAL_DMA_Init+0x38a>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a33      	ldr	r2, [pc, #204]	@ (8004e6c <HAL_DMA_Init+0x440>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d009      	beq.n	8004db6 <HAL_DMA_Init+0x38a>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a32      	ldr	r2, [pc, #200]	@ (8004e70 <HAL_DMA_Init+0x444>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d004      	beq.n	8004db6 <HAL_DMA_Init+0x38a>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a30      	ldr	r2, [pc, #192]	@ (8004e74 <HAL_DMA_Init+0x448>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d101      	bne.n	8004dba <HAL_DMA_Init+0x38e>
 8004db6:	2301      	movs	r3, #1
 8004db8:	e000      	b.n	8004dbc <HAL_DMA_Init+0x390>
 8004dba:	2300      	movs	r3, #0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	f000 8097 	beq.w	8004ef0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a24      	ldr	r2, [pc, #144]	@ (8004e58 <HAL_DMA_Init+0x42c>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d021      	beq.n	8004e10 <HAL_DMA_Init+0x3e4>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a22      	ldr	r2, [pc, #136]	@ (8004e5c <HAL_DMA_Init+0x430>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d01c      	beq.n	8004e10 <HAL_DMA_Init+0x3e4>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a21      	ldr	r2, [pc, #132]	@ (8004e60 <HAL_DMA_Init+0x434>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d017      	beq.n	8004e10 <HAL_DMA_Init+0x3e4>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a1f      	ldr	r2, [pc, #124]	@ (8004e64 <HAL_DMA_Init+0x438>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d012      	beq.n	8004e10 <HAL_DMA_Init+0x3e4>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a1e      	ldr	r2, [pc, #120]	@ (8004e68 <HAL_DMA_Init+0x43c>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d00d      	beq.n	8004e10 <HAL_DMA_Init+0x3e4>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a1c      	ldr	r2, [pc, #112]	@ (8004e6c <HAL_DMA_Init+0x440>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d008      	beq.n	8004e10 <HAL_DMA_Init+0x3e4>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a1b      	ldr	r2, [pc, #108]	@ (8004e70 <HAL_DMA_Init+0x444>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d003      	beq.n	8004e10 <HAL_DMA_Init+0x3e4>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a19      	ldr	r2, [pc, #100]	@ (8004e74 <HAL_DMA_Init+0x448>)
 8004e0e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2202      	movs	r2, #2
 8004e14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004e28:	697a      	ldr	r2, [r7, #20]
 8004e2a:	4b13      	ldr	r3, [pc, #76]	@ (8004e78 <HAL_DMA_Init+0x44c>)
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	2b40      	cmp	r3, #64	@ 0x40
 8004e36:	d021      	beq.n	8004e7c <HAL_DMA_Init+0x450>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	2b80      	cmp	r3, #128	@ 0x80
 8004e3e:	d102      	bne.n	8004e46 <HAL_DMA_Init+0x41a>
 8004e40:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004e44:	e01b      	b.n	8004e7e <HAL_DMA_Init+0x452>
 8004e46:	2300      	movs	r3, #0
 8004e48:	e019      	b.n	8004e7e <HAL_DMA_Init+0x452>
 8004e4a:	bf00      	nop
 8004e4c:	fe10803f 	.word	0xfe10803f
 8004e50:	5c001000 	.word	0x5c001000
 8004e54:	ffff0000 	.word	0xffff0000
 8004e58:	58025408 	.word	0x58025408
 8004e5c:	5802541c 	.word	0x5802541c
 8004e60:	58025430 	.word	0x58025430
 8004e64:	58025444 	.word	0x58025444
 8004e68:	58025458 	.word	0x58025458
 8004e6c:	5802546c 	.word	0x5802546c
 8004e70:	58025480 	.word	0x58025480
 8004e74:	58025494 	.word	0x58025494
 8004e78:	fffe000f 	.word	0xfffe000f
 8004e7c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	68d2      	ldr	r2, [r2, #12]
 8004e82:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004e84:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004e8c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004e94:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004e9c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	69db      	ldr	r3, [r3, #28]
 8004ea2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004ea4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a1b      	ldr	r3, [r3, #32]
 8004eaa:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004eac:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004eae:	697a      	ldr	r2, [r7, #20]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	697a      	ldr	r2, [r7, #20]
 8004eba:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	4b6e      	ldr	r3, [pc, #440]	@ (800507c <HAL_DMA_Init+0x650>)
 8004ec4:	4413      	add	r3, r2
 8004ec6:	4a6e      	ldr	r2, [pc, #440]	@ (8005080 <HAL_DMA_Init+0x654>)
 8004ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8004ecc:	091b      	lsrs	r3, r3, #4
 8004ece:	009a      	lsls	r2, r3, #2
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f001 fc45 	bl	8006764 <DMA_CalcBaseAndBitshift>
 8004eda:	4603      	mov	r3, r0
 8004edc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ee2:	f003 031f 	and.w	r3, r3, #31
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	409a      	lsls	r2, r3
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	605a      	str	r2, [r3, #4]
 8004eee:	e008      	b.n	8004f02 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2240      	movs	r2, #64	@ 0x40
 8004ef4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2203      	movs	r2, #3
 8004efa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e0b7      	b.n	8005072 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a5f      	ldr	r2, [pc, #380]	@ (8005084 <HAL_DMA_Init+0x658>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d072      	beq.n	8004ff2 <HAL_DMA_Init+0x5c6>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a5d      	ldr	r2, [pc, #372]	@ (8005088 <HAL_DMA_Init+0x65c>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d06d      	beq.n	8004ff2 <HAL_DMA_Init+0x5c6>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a5c      	ldr	r2, [pc, #368]	@ (800508c <HAL_DMA_Init+0x660>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d068      	beq.n	8004ff2 <HAL_DMA_Init+0x5c6>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a5a      	ldr	r2, [pc, #360]	@ (8005090 <HAL_DMA_Init+0x664>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d063      	beq.n	8004ff2 <HAL_DMA_Init+0x5c6>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a59      	ldr	r2, [pc, #356]	@ (8005094 <HAL_DMA_Init+0x668>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d05e      	beq.n	8004ff2 <HAL_DMA_Init+0x5c6>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a57      	ldr	r2, [pc, #348]	@ (8005098 <HAL_DMA_Init+0x66c>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d059      	beq.n	8004ff2 <HAL_DMA_Init+0x5c6>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a56      	ldr	r2, [pc, #344]	@ (800509c <HAL_DMA_Init+0x670>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d054      	beq.n	8004ff2 <HAL_DMA_Init+0x5c6>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a54      	ldr	r2, [pc, #336]	@ (80050a0 <HAL_DMA_Init+0x674>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d04f      	beq.n	8004ff2 <HAL_DMA_Init+0x5c6>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a53      	ldr	r2, [pc, #332]	@ (80050a4 <HAL_DMA_Init+0x678>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d04a      	beq.n	8004ff2 <HAL_DMA_Init+0x5c6>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a51      	ldr	r2, [pc, #324]	@ (80050a8 <HAL_DMA_Init+0x67c>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d045      	beq.n	8004ff2 <HAL_DMA_Init+0x5c6>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a50      	ldr	r2, [pc, #320]	@ (80050ac <HAL_DMA_Init+0x680>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d040      	beq.n	8004ff2 <HAL_DMA_Init+0x5c6>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a4e      	ldr	r2, [pc, #312]	@ (80050b0 <HAL_DMA_Init+0x684>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d03b      	beq.n	8004ff2 <HAL_DMA_Init+0x5c6>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a4d      	ldr	r2, [pc, #308]	@ (80050b4 <HAL_DMA_Init+0x688>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d036      	beq.n	8004ff2 <HAL_DMA_Init+0x5c6>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a4b      	ldr	r2, [pc, #300]	@ (80050b8 <HAL_DMA_Init+0x68c>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d031      	beq.n	8004ff2 <HAL_DMA_Init+0x5c6>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a4a      	ldr	r2, [pc, #296]	@ (80050bc <HAL_DMA_Init+0x690>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d02c      	beq.n	8004ff2 <HAL_DMA_Init+0x5c6>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a48      	ldr	r2, [pc, #288]	@ (80050c0 <HAL_DMA_Init+0x694>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d027      	beq.n	8004ff2 <HAL_DMA_Init+0x5c6>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a47      	ldr	r2, [pc, #284]	@ (80050c4 <HAL_DMA_Init+0x698>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d022      	beq.n	8004ff2 <HAL_DMA_Init+0x5c6>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a45      	ldr	r2, [pc, #276]	@ (80050c8 <HAL_DMA_Init+0x69c>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d01d      	beq.n	8004ff2 <HAL_DMA_Init+0x5c6>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a44      	ldr	r2, [pc, #272]	@ (80050cc <HAL_DMA_Init+0x6a0>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d018      	beq.n	8004ff2 <HAL_DMA_Init+0x5c6>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a42      	ldr	r2, [pc, #264]	@ (80050d0 <HAL_DMA_Init+0x6a4>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d013      	beq.n	8004ff2 <HAL_DMA_Init+0x5c6>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a41      	ldr	r2, [pc, #260]	@ (80050d4 <HAL_DMA_Init+0x6a8>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d00e      	beq.n	8004ff2 <HAL_DMA_Init+0x5c6>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a3f      	ldr	r2, [pc, #252]	@ (80050d8 <HAL_DMA_Init+0x6ac>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d009      	beq.n	8004ff2 <HAL_DMA_Init+0x5c6>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a3e      	ldr	r2, [pc, #248]	@ (80050dc <HAL_DMA_Init+0x6b0>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d004      	beq.n	8004ff2 <HAL_DMA_Init+0x5c6>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a3c      	ldr	r2, [pc, #240]	@ (80050e0 <HAL_DMA_Init+0x6b4>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d101      	bne.n	8004ff6 <HAL_DMA_Init+0x5ca>
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e000      	b.n	8004ff8 <HAL_DMA_Init+0x5cc>
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d032      	beq.n	8005062 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f001 fcdf 	bl	80069c0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	2b80      	cmp	r3, #128	@ 0x80
 8005008:	d102      	bne.n	8005010 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	685a      	ldr	r2, [r3, #4]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005018:	b2d2      	uxtb	r2, r2
 800501a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005024:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d010      	beq.n	8005050 <HAL_DMA_Init+0x624>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	2b08      	cmp	r3, #8
 8005034:	d80c      	bhi.n	8005050 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f001 fd5c 	bl	8006af4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005040:	2200      	movs	r2, #0
 8005042:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800504c:	605a      	str	r2, [r3, #4]
 800504e:	e008      	b.n	8005062 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005070:	2300      	movs	r3, #0
}
 8005072:	4618      	mov	r0, r3
 8005074:	3718      	adds	r7, #24
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	a7fdabf8 	.word	0xa7fdabf8
 8005080:	cccccccd 	.word	0xcccccccd
 8005084:	40020010 	.word	0x40020010
 8005088:	40020028 	.word	0x40020028
 800508c:	40020040 	.word	0x40020040
 8005090:	40020058 	.word	0x40020058
 8005094:	40020070 	.word	0x40020070
 8005098:	40020088 	.word	0x40020088
 800509c:	400200a0 	.word	0x400200a0
 80050a0:	400200b8 	.word	0x400200b8
 80050a4:	40020410 	.word	0x40020410
 80050a8:	40020428 	.word	0x40020428
 80050ac:	40020440 	.word	0x40020440
 80050b0:	40020458 	.word	0x40020458
 80050b4:	40020470 	.word	0x40020470
 80050b8:	40020488 	.word	0x40020488
 80050bc:	400204a0 	.word	0x400204a0
 80050c0:	400204b8 	.word	0x400204b8
 80050c4:	58025408 	.word	0x58025408
 80050c8:	5802541c 	.word	0x5802541c
 80050cc:	58025430 	.word	0x58025430
 80050d0:	58025444 	.word	0x58025444
 80050d4:	58025458 	.word	0x58025458
 80050d8:	5802546c 	.word	0x5802546c
 80050dc:	58025480 	.word	0x58025480
 80050e0:	58025494 	.word	0x58025494

080050e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b086      	sub	sp, #24
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	607a      	str	r2, [r7, #4]
 80050f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050f2:	2300      	movs	r3, #0
 80050f4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d101      	bne.n	8005100 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e226      	b.n	800554e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005106:	2b01      	cmp	r3, #1
 8005108:	d101      	bne.n	800510e <HAL_DMA_Start_IT+0x2a>
 800510a:	2302      	movs	r3, #2
 800510c:	e21f      	b.n	800554e <HAL_DMA_Start_IT+0x46a>
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2201      	movs	r2, #1
 8005112:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800511c:	b2db      	uxtb	r3, r3
 800511e:	2b01      	cmp	r3, #1
 8005120:	f040 820a 	bne.w	8005538 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2202      	movs	r2, #2
 8005128:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2200      	movs	r2, #0
 8005130:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a68      	ldr	r2, [pc, #416]	@ (80052d8 <HAL_DMA_Start_IT+0x1f4>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d04a      	beq.n	80051d2 <HAL_DMA_Start_IT+0xee>
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a66      	ldr	r2, [pc, #408]	@ (80052dc <HAL_DMA_Start_IT+0x1f8>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d045      	beq.n	80051d2 <HAL_DMA_Start_IT+0xee>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a65      	ldr	r2, [pc, #404]	@ (80052e0 <HAL_DMA_Start_IT+0x1fc>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d040      	beq.n	80051d2 <HAL_DMA_Start_IT+0xee>
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a63      	ldr	r2, [pc, #396]	@ (80052e4 <HAL_DMA_Start_IT+0x200>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d03b      	beq.n	80051d2 <HAL_DMA_Start_IT+0xee>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a62      	ldr	r2, [pc, #392]	@ (80052e8 <HAL_DMA_Start_IT+0x204>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d036      	beq.n	80051d2 <HAL_DMA_Start_IT+0xee>
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a60      	ldr	r2, [pc, #384]	@ (80052ec <HAL_DMA_Start_IT+0x208>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d031      	beq.n	80051d2 <HAL_DMA_Start_IT+0xee>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a5f      	ldr	r2, [pc, #380]	@ (80052f0 <HAL_DMA_Start_IT+0x20c>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d02c      	beq.n	80051d2 <HAL_DMA_Start_IT+0xee>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a5d      	ldr	r2, [pc, #372]	@ (80052f4 <HAL_DMA_Start_IT+0x210>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d027      	beq.n	80051d2 <HAL_DMA_Start_IT+0xee>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a5c      	ldr	r2, [pc, #368]	@ (80052f8 <HAL_DMA_Start_IT+0x214>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d022      	beq.n	80051d2 <HAL_DMA_Start_IT+0xee>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a5a      	ldr	r2, [pc, #360]	@ (80052fc <HAL_DMA_Start_IT+0x218>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d01d      	beq.n	80051d2 <HAL_DMA_Start_IT+0xee>
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a59      	ldr	r2, [pc, #356]	@ (8005300 <HAL_DMA_Start_IT+0x21c>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d018      	beq.n	80051d2 <HAL_DMA_Start_IT+0xee>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a57      	ldr	r2, [pc, #348]	@ (8005304 <HAL_DMA_Start_IT+0x220>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d013      	beq.n	80051d2 <HAL_DMA_Start_IT+0xee>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a56      	ldr	r2, [pc, #344]	@ (8005308 <HAL_DMA_Start_IT+0x224>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d00e      	beq.n	80051d2 <HAL_DMA_Start_IT+0xee>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a54      	ldr	r2, [pc, #336]	@ (800530c <HAL_DMA_Start_IT+0x228>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d009      	beq.n	80051d2 <HAL_DMA_Start_IT+0xee>
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a53      	ldr	r2, [pc, #332]	@ (8005310 <HAL_DMA_Start_IT+0x22c>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d004      	beq.n	80051d2 <HAL_DMA_Start_IT+0xee>
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a51      	ldr	r2, [pc, #324]	@ (8005314 <HAL_DMA_Start_IT+0x230>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d108      	bne.n	80051e4 <HAL_DMA_Start_IT+0x100>
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f022 0201 	bic.w	r2, r2, #1
 80051e0:	601a      	str	r2, [r3, #0]
 80051e2:	e007      	b.n	80051f4 <HAL_DMA_Start_IT+0x110>
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f022 0201 	bic.w	r2, r2, #1
 80051f2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	68b9      	ldr	r1, [r7, #8]
 80051fa:	68f8      	ldr	r0, [r7, #12]
 80051fc:	f001 f906 	bl	800640c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a34      	ldr	r2, [pc, #208]	@ (80052d8 <HAL_DMA_Start_IT+0x1f4>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d04a      	beq.n	80052a0 <HAL_DMA_Start_IT+0x1bc>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a33      	ldr	r2, [pc, #204]	@ (80052dc <HAL_DMA_Start_IT+0x1f8>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d045      	beq.n	80052a0 <HAL_DMA_Start_IT+0x1bc>
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a31      	ldr	r2, [pc, #196]	@ (80052e0 <HAL_DMA_Start_IT+0x1fc>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d040      	beq.n	80052a0 <HAL_DMA_Start_IT+0x1bc>
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a30      	ldr	r2, [pc, #192]	@ (80052e4 <HAL_DMA_Start_IT+0x200>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d03b      	beq.n	80052a0 <HAL_DMA_Start_IT+0x1bc>
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a2e      	ldr	r2, [pc, #184]	@ (80052e8 <HAL_DMA_Start_IT+0x204>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d036      	beq.n	80052a0 <HAL_DMA_Start_IT+0x1bc>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a2d      	ldr	r2, [pc, #180]	@ (80052ec <HAL_DMA_Start_IT+0x208>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d031      	beq.n	80052a0 <HAL_DMA_Start_IT+0x1bc>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a2b      	ldr	r2, [pc, #172]	@ (80052f0 <HAL_DMA_Start_IT+0x20c>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d02c      	beq.n	80052a0 <HAL_DMA_Start_IT+0x1bc>
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a2a      	ldr	r2, [pc, #168]	@ (80052f4 <HAL_DMA_Start_IT+0x210>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d027      	beq.n	80052a0 <HAL_DMA_Start_IT+0x1bc>
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a28      	ldr	r2, [pc, #160]	@ (80052f8 <HAL_DMA_Start_IT+0x214>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d022      	beq.n	80052a0 <HAL_DMA_Start_IT+0x1bc>
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a27      	ldr	r2, [pc, #156]	@ (80052fc <HAL_DMA_Start_IT+0x218>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d01d      	beq.n	80052a0 <HAL_DMA_Start_IT+0x1bc>
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a25      	ldr	r2, [pc, #148]	@ (8005300 <HAL_DMA_Start_IT+0x21c>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d018      	beq.n	80052a0 <HAL_DMA_Start_IT+0x1bc>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a24      	ldr	r2, [pc, #144]	@ (8005304 <HAL_DMA_Start_IT+0x220>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d013      	beq.n	80052a0 <HAL_DMA_Start_IT+0x1bc>
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a22      	ldr	r2, [pc, #136]	@ (8005308 <HAL_DMA_Start_IT+0x224>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d00e      	beq.n	80052a0 <HAL_DMA_Start_IT+0x1bc>
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a21      	ldr	r2, [pc, #132]	@ (800530c <HAL_DMA_Start_IT+0x228>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d009      	beq.n	80052a0 <HAL_DMA_Start_IT+0x1bc>
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a1f      	ldr	r2, [pc, #124]	@ (8005310 <HAL_DMA_Start_IT+0x22c>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d004      	beq.n	80052a0 <HAL_DMA_Start_IT+0x1bc>
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a1e      	ldr	r2, [pc, #120]	@ (8005314 <HAL_DMA_Start_IT+0x230>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d101      	bne.n	80052a4 <HAL_DMA_Start_IT+0x1c0>
 80052a0:	2301      	movs	r3, #1
 80052a2:	e000      	b.n	80052a6 <HAL_DMA_Start_IT+0x1c2>
 80052a4:	2300      	movs	r3, #0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d036      	beq.n	8005318 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f023 021e 	bic.w	r2, r3, #30
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f042 0216 	orr.w	r2, r2, #22
 80052bc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d03e      	beq.n	8005344 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f042 0208 	orr.w	r2, r2, #8
 80052d4:	601a      	str	r2, [r3, #0]
 80052d6:	e035      	b.n	8005344 <HAL_DMA_Start_IT+0x260>
 80052d8:	40020010 	.word	0x40020010
 80052dc:	40020028 	.word	0x40020028
 80052e0:	40020040 	.word	0x40020040
 80052e4:	40020058 	.word	0x40020058
 80052e8:	40020070 	.word	0x40020070
 80052ec:	40020088 	.word	0x40020088
 80052f0:	400200a0 	.word	0x400200a0
 80052f4:	400200b8 	.word	0x400200b8
 80052f8:	40020410 	.word	0x40020410
 80052fc:	40020428 	.word	0x40020428
 8005300:	40020440 	.word	0x40020440
 8005304:	40020458 	.word	0x40020458
 8005308:	40020470 	.word	0x40020470
 800530c:	40020488 	.word	0x40020488
 8005310:	400204a0 	.word	0x400204a0
 8005314:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f023 020e 	bic.w	r2, r3, #14
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f042 020a 	orr.w	r2, r2, #10
 800532a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005330:	2b00      	cmp	r3, #0
 8005332:	d007      	beq.n	8005344 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f042 0204 	orr.w	r2, r2, #4
 8005342:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a83      	ldr	r2, [pc, #524]	@ (8005558 <HAL_DMA_Start_IT+0x474>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d072      	beq.n	8005434 <HAL_DMA_Start_IT+0x350>
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a82      	ldr	r2, [pc, #520]	@ (800555c <HAL_DMA_Start_IT+0x478>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d06d      	beq.n	8005434 <HAL_DMA_Start_IT+0x350>
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a80      	ldr	r2, [pc, #512]	@ (8005560 <HAL_DMA_Start_IT+0x47c>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d068      	beq.n	8005434 <HAL_DMA_Start_IT+0x350>
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a7f      	ldr	r2, [pc, #508]	@ (8005564 <HAL_DMA_Start_IT+0x480>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d063      	beq.n	8005434 <HAL_DMA_Start_IT+0x350>
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a7d      	ldr	r2, [pc, #500]	@ (8005568 <HAL_DMA_Start_IT+0x484>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d05e      	beq.n	8005434 <HAL_DMA_Start_IT+0x350>
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a7c      	ldr	r2, [pc, #496]	@ (800556c <HAL_DMA_Start_IT+0x488>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d059      	beq.n	8005434 <HAL_DMA_Start_IT+0x350>
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a7a      	ldr	r2, [pc, #488]	@ (8005570 <HAL_DMA_Start_IT+0x48c>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d054      	beq.n	8005434 <HAL_DMA_Start_IT+0x350>
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a79      	ldr	r2, [pc, #484]	@ (8005574 <HAL_DMA_Start_IT+0x490>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d04f      	beq.n	8005434 <HAL_DMA_Start_IT+0x350>
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a77      	ldr	r2, [pc, #476]	@ (8005578 <HAL_DMA_Start_IT+0x494>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d04a      	beq.n	8005434 <HAL_DMA_Start_IT+0x350>
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a76      	ldr	r2, [pc, #472]	@ (800557c <HAL_DMA_Start_IT+0x498>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d045      	beq.n	8005434 <HAL_DMA_Start_IT+0x350>
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a74      	ldr	r2, [pc, #464]	@ (8005580 <HAL_DMA_Start_IT+0x49c>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d040      	beq.n	8005434 <HAL_DMA_Start_IT+0x350>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a73      	ldr	r2, [pc, #460]	@ (8005584 <HAL_DMA_Start_IT+0x4a0>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d03b      	beq.n	8005434 <HAL_DMA_Start_IT+0x350>
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a71      	ldr	r2, [pc, #452]	@ (8005588 <HAL_DMA_Start_IT+0x4a4>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d036      	beq.n	8005434 <HAL_DMA_Start_IT+0x350>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a70      	ldr	r2, [pc, #448]	@ (800558c <HAL_DMA_Start_IT+0x4a8>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d031      	beq.n	8005434 <HAL_DMA_Start_IT+0x350>
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a6e      	ldr	r2, [pc, #440]	@ (8005590 <HAL_DMA_Start_IT+0x4ac>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d02c      	beq.n	8005434 <HAL_DMA_Start_IT+0x350>
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a6d      	ldr	r2, [pc, #436]	@ (8005594 <HAL_DMA_Start_IT+0x4b0>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d027      	beq.n	8005434 <HAL_DMA_Start_IT+0x350>
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a6b      	ldr	r2, [pc, #428]	@ (8005598 <HAL_DMA_Start_IT+0x4b4>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d022      	beq.n	8005434 <HAL_DMA_Start_IT+0x350>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a6a      	ldr	r2, [pc, #424]	@ (800559c <HAL_DMA_Start_IT+0x4b8>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d01d      	beq.n	8005434 <HAL_DMA_Start_IT+0x350>
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a68      	ldr	r2, [pc, #416]	@ (80055a0 <HAL_DMA_Start_IT+0x4bc>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d018      	beq.n	8005434 <HAL_DMA_Start_IT+0x350>
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a67      	ldr	r2, [pc, #412]	@ (80055a4 <HAL_DMA_Start_IT+0x4c0>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d013      	beq.n	8005434 <HAL_DMA_Start_IT+0x350>
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a65      	ldr	r2, [pc, #404]	@ (80055a8 <HAL_DMA_Start_IT+0x4c4>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d00e      	beq.n	8005434 <HAL_DMA_Start_IT+0x350>
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a64      	ldr	r2, [pc, #400]	@ (80055ac <HAL_DMA_Start_IT+0x4c8>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d009      	beq.n	8005434 <HAL_DMA_Start_IT+0x350>
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a62      	ldr	r2, [pc, #392]	@ (80055b0 <HAL_DMA_Start_IT+0x4cc>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d004      	beq.n	8005434 <HAL_DMA_Start_IT+0x350>
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a61      	ldr	r2, [pc, #388]	@ (80055b4 <HAL_DMA_Start_IT+0x4d0>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d101      	bne.n	8005438 <HAL_DMA_Start_IT+0x354>
 8005434:	2301      	movs	r3, #1
 8005436:	e000      	b.n	800543a <HAL_DMA_Start_IT+0x356>
 8005438:	2300      	movs	r3, #0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d01a      	beq.n	8005474 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005448:	2b00      	cmp	r3, #0
 800544a:	d007      	beq.n	800545c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005456:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800545a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005460:	2b00      	cmp	r3, #0
 8005462:	d007      	beq.n	8005474 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800546e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005472:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a37      	ldr	r2, [pc, #220]	@ (8005558 <HAL_DMA_Start_IT+0x474>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d04a      	beq.n	8005514 <HAL_DMA_Start_IT+0x430>
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a36      	ldr	r2, [pc, #216]	@ (800555c <HAL_DMA_Start_IT+0x478>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d045      	beq.n	8005514 <HAL_DMA_Start_IT+0x430>
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a34      	ldr	r2, [pc, #208]	@ (8005560 <HAL_DMA_Start_IT+0x47c>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d040      	beq.n	8005514 <HAL_DMA_Start_IT+0x430>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a33      	ldr	r2, [pc, #204]	@ (8005564 <HAL_DMA_Start_IT+0x480>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d03b      	beq.n	8005514 <HAL_DMA_Start_IT+0x430>
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a31      	ldr	r2, [pc, #196]	@ (8005568 <HAL_DMA_Start_IT+0x484>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d036      	beq.n	8005514 <HAL_DMA_Start_IT+0x430>
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a30      	ldr	r2, [pc, #192]	@ (800556c <HAL_DMA_Start_IT+0x488>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d031      	beq.n	8005514 <HAL_DMA_Start_IT+0x430>
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a2e      	ldr	r2, [pc, #184]	@ (8005570 <HAL_DMA_Start_IT+0x48c>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d02c      	beq.n	8005514 <HAL_DMA_Start_IT+0x430>
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a2d      	ldr	r2, [pc, #180]	@ (8005574 <HAL_DMA_Start_IT+0x490>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d027      	beq.n	8005514 <HAL_DMA_Start_IT+0x430>
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a2b      	ldr	r2, [pc, #172]	@ (8005578 <HAL_DMA_Start_IT+0x494>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d022      	beq.n	8005514 <HAL_DMA_Start_IT+0x430>
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a2a      	ldr	r2, [pc, #168]	@ (800557c <HAL_DMA_Start_IT+0x498>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d01d      	beq.n	8005514 <HAL_DMA_Start_IT+0x430>
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a28      	ldr	r2, [pc, #160]	@ (8005580 <HAL_DMA_Start_IT+0x49c>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d018      	beq.n	8005514 <HAL_DMA_Start_IT+0x430>
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a27      	ldr	r2, [pc, #156]	@ (8005584 <HAL_DMA_Start_IT+0x4a0>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d013      	beq.n	8005514 <HAL_DMA_Start_IT+0x430>
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a25      	ldr	r2, [pc, #148]	@ (8005588 <HAL_DMA_Start_IT+0x4a4>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d00e      	beq.n	8005514 <HAL_DMA_Start_IT+0x430>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a24      	ldr	r2, [pc, #144]	@ (800558c <HAL_DMA_Start_IT+0x4a8>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d009      	beq.n	8005514 <HAL_DMA_Start_IT+0x430>
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a22      	ldr	r2, [pc, #136]	@ (8005590 <HAL_DMA_Start_IT+0x4ac>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d004      	beq.n	8005514 <HAL_DMA_Start_IT+0x430>
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a21      	ldr	r2, [pc, #132]	@ (8005594 <HAL_DMA_Start_IT+0x4b0>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d108      	bne.n	8005526 <HAL_DMA_Start_IT+0x442>
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f042 0201 	orr.w	r2, r2, #1
 8005522:	601a      	str	r2, [r3, #0]
 8005524:	e012      	b.n	800554c <HAL_DMA_Start_IT+0x468>
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f042 0201 	orr.w	r2, r2, #1
 8005534:	601a      	str	r2, [r3, #0]
 8005536:	e009      	b.n	800554c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800553e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800554c:	7dfb      	ldrb	r3, [r7, #23]
}
 800554e:	4618      	mov	r0, r3
 8005550:	3718      	adds	r7, #24
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	40020010 	.word	0x40020010
 800555c:	40020028 	.word	0x40020028
 8005560:	40020040 	.word	0x40020040
 8005564:	40020058 	.word	0x40020058
 8005568:	40020070 	.word	0x40020070
 800556c:	40020088 	.word	0x40020088
 8005570:	400200a0 	.word	0x400200a0
 8005574:	400200b8 	.word	0x400200b8
 8005578:	40020410 	.word	0x40020410
 800557c:	40020428 	.word	0x40020428
 8005580:	40020440 	.word	0x40020440
 8005584:	40020458 	.word	0x40020458
 8005588:	40020470 	.word	0x40020470
 800558c:	40020488 	.word	0x40020488
 8005590:	400204a0 	.word	0x400204a0
 8005594:	400204b8 	.word	0x400204b8
 8005598:	58025408 	.word	0x58025408
 800559c:	5802541c 	.word	0x5802541c
 80055a0:	58025430 	.word	0x58025430
 80055a4:	58025444 	.word	0x58025444
 80055a8:	58025458 	.word	0x58025458
 80055ac:	5802546c 	.word	0x5802546c
 80055b0:	58025480 	.word	0x58025480
 80055b4:	58025494 	.word	0x58025494

080055b8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b08a      	sub	sp, #40	@ 0x28
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80055c0:	2300      	movs	r3, #0
 80055c2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80055c4:	4b67      	ldr	r3, [pc, #412]	@ (8005764 <HAL_DMA_IRQHandler+0x1ac>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a67      	ldr	r2, [pc, #412]	@ (8005768 <HAL_DMA_IRQHandler+0x1b0>)
 80055ca:	fba2 2303 	umull	r2, r3, r2, r3
 80055ce:	0a9b      	lsrs	r3, r3, #10
 80055d0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055d6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055dc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80055de:	6a3b      	ldr	r3, [r7, #32]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a5f      	ldr	r2, [pc, #380]	@ (800576c <HAL_DMA_IRQHandler+0x1b4>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d04a      	beq.n	800568a <HAL_DMA_IRQHandler+0xd2>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a5d      	ldr	r2, [pc, #372]	@ (8005770 <HAL_DMA_IRQHandler+0x1b8>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d045      	beq.n	800568a <HAL_DMA_IRQHandler+0xd2>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a5c      	ldr	r2, [pc, #368]	@ (8005774 <HAL_DMA_IRQHandler+0x1bc>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d040      	beq.n	800568a <HAL_DMA_IRQHandler+0xd2>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a5a      	ldr	r2, [pc, #360]	@ (8005778 <HAL_DMA_IRQHandler+0x1c0>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d03b      	beq.n	800568a <HAL_DMA_IRQHandler+0xd2>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a59      	ldr	r2, [pc, #356]	@ (800577c <HAL_DMA_IRQHandler+0x1c4>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d036      	beq.n	800568a <HAL_DMA_IRQHandler+0xd2>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a57      	ldr	r2, [pc, #348]	@ (8005780 <HAL_DMA_IRQHandler+0x1c8>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d031      	beq.n	800568a <HAL_DMA_IRQHandler+0xd2>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a56      	ldr	r2, [pc, #344]	@ (8005784 <HAL_DMA_IRQHandler+0x1cc>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d02c      	beq.n	800568a <HAL_DMA_IRQHandler+0xd2>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a54      	ldr	r2, [pc, #336]	@ (8005788 <HAL_DMA_IRQHandler+0x1d0>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d027      	beq.n	800568a <HAL_DMA_IRQHandler+0xd2>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a53      	ldr	r2, [pc, #332]	@ (800578c <HAL_DMA_IRQHandler+0x1d4>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d022      	beq.n	800568a <HAL_DMA_IRQHandler+0xd2>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a51      	ldr	r2, [pc, #324]	@ (8005790 <HAL_DMA_IRQHandler+0x1d8>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d01d      	beq.n	800568a <HAL_DMA_IRQHandler+0xd2>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a50      	ldr	r2, [pc, #320]	@ (8005794 <HAL_DMA_IRQHandler+0x1dc>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d018      	beq.n	800568a <HAL_DMA_IRQHandler+0xd2>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a4e      	ldr	r2, [pc, #312]	@ (8005798 <HAL_DMA_IRQHandler+0x1e0>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d013      	beq.n	800568a <HAL_DMA_IRQHandler+0xd2>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a4d      	ldr	r2, [pc, #308]	@ (800579c <HAL_DMA_IRQHandler+0x1e4>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d00e      	beq.n	800568a <HAL_DMA_IRQHandler+0xd2>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a4b      	ldr	r2, [pc, #300]	@ (80057a0 <HAL_DMA_IRQHandler+0x1e8>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d009      	beq.n	800568a <HAL_DMA_IRQHandler+0xd2>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a4a      	ldr	r2, [pc, #296]	@ (80057a4 <HAL_DMA_IRQHandler+0x1ec>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d004      	beq.n	800568a <HAL_DMA_IRQHandler+0xd2>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a48      	ldr	r2, [pc, #288]	@ (80057a8 <HAL_DMA_IRQHandler+0x1f0>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d101      	bne.n	800568e <HAL_DMA_IRQHandler+0xd6>
 800568a:	2301      	movs	r3, #1
 800568c:	e000      	b.n	8005690 <HAL_DMA_IRQHandler+0xd8>
 800568e:	2300      	movs	r3, #0
 8005690:	2b00      	cmp	r3, #0
 8005692:	f000 842b 	beq.w	8005eec <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800569a:	f003 031f 	and.w	r3, r3, #31
 800569e:	2208      	movs	r2, #8
 80056a0:	409a      	lsls	r2, r3
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	4013      	ands	r3, r2
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	f000 80a2 	beq.w	80057f0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a2e      	ldr	r2, [pc, #184]	@ (800576c <HAL_DMA_IRQHandler+0x1b4>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d04a      	beq.n	800574c <HAL_DMA_IRQHandler+0x194>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a2d      	ldr	r2, [pc, #180]	@ (8005770 <HAL_DMA_IRQHandler+0x1b8>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d045      	beq.n	800574c <HAL_DMA_IRQHandler+0x194>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a2b      	ldr	r2, [pc, #172]	@ (8005774 <HAL_DMA_IRQHandler+0x1bc>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d040      	beq.n	800574c <HAL_DMA_IRQHandler+0x194>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a2a      	ldr	r2, [pc, #168]	@ (8005778 <HAL_DMA_IRQHandler+0x1c0>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d03b      	beq.n	800574c <HAL_DMA_IRQHandler+0x194>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a28      	ldr	r2, [pc, #160]	@ (800577c <HAL_DMA_IRQHandler+0x1c4>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d036      	beq.n	800574c <HAL_DMA_IRQHandler+0x194>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a27      	ldr	r2, [pc, #156]	@ (8005780 <HAL_DMA_IRQHandler+0x1c8>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d031      	beq.n	800574c <HAL_DMA_IRQHandler+0x194>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a25      	ldr	r2, [pc, #148]	@ (8005784 <HAL_DMA_IRQHandler+0x1cc>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d02c      	beq.n	800574c <HAL_DMA_IRQHandler+0x194>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a24      	ldr	r2, [pc, #144]	@ (8005788 <HAL_DMA_IRQHandler+0x1d0>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d027      	beq.n	800574c <HAL_DMA_IRQHandler+0x194>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a22      	ldr	r2, [pc, #136]	@ (800578c <HAL_DMA_IRQHandler+0x1d4>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d022      	beq.n	800574c <HAL_DMA_IRQHandler+0x194>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a21      	ldr	r2, [pc, #132]	@ (8005790 <HAL_DMA_IRQHandler+0x1d8>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d01d      	beq.n	800574c <HAL_DMA_IRQHandler+0x194>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a1f      	ldr	r2, [pc, #124]	@ (8005794 <HAL_DMA_IRQHandler+0x1dc>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d018      	beq.n	800574c <HAL_DMA_IRQHandler+0x194>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a1e      	ldr	r2, [pc, #120]	@ (8005798 <HAL_DMA_IRQHandler+0x1e0>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d013      	beq.n	800574c <HAL_DMA_IRQHandler+0x194>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a1c      	ldr	r2, [pc, #112]	@ (800579c <HAL_DMA_IRQHandler+0x1e4>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d00e      	beq.n	800574c <HAL_DMA_IRQHandler+0x194>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a1b      	ldr	r2, [pc, #108]	@ (80057a0 <HAL_DMA_IRQHandler+0x1e8>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d009      	beq.n	800574c <HAL_DMA_IRQHandler+0x194>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a19      	ldr	r2, [pc, #100]	@ (80057a4 <HAL_DMA_IRQHandler+0x1ec>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d004      	beq.n	800574c <HAL_DMA_IRQHandler+0x194>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a18      	ldr	r2, [pc, #96]	@ (80057a8 <HAL_DMA_IRQHandler+0x1f0>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d12f      	bne.n	80057ac <HAL_DMA_IRQHandler+0x1f4>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 0304 	and.w	r3, r3, #4
 8005756:	2b00      	cmp	r3, #0
 8005758:	bf14      	ite	ne
 800575a:	2301      	movne	r3, #1
 800575c:	2300      	moveq	r3, #0
 800575e:	b2db      	uxtb	r3, r3
 8005760:	e02e      	b.n	80057c0 <HAL_DMA_IRQHandler+0x208>
 8005762:	bf00      	nop
 8005764:	24000000 	.word	0x24000000
 8005768:	1b4e81b5 	.word	0x1b4e81b5
 800576c:	40020010 	.word	0x40020010
 8005770:	40020028 	.word	0x40020028
 8005774:	40020040 	.word	0x40020040
 8005778:	40020058 	.word	0x40020058
 800577c:	40020070 	.word	0x40020070
 8005780:	40020088 	.word	0x40020088
 8005784:	400200a0 	.word	0x400200a0
 8005788:	400200b8 	.word	0x400200b8
 800578c:	40020410 	.word	0x40020410
 8005790:	40020428 	.word	0x40020428
 8005794:	40020440 	.word	0x40020440
 8005798:	40020458 	.word	0x40020458
 800579c:	40020470 	.word	0x40020470
 80057a0:	40020488 	.word	0x40020488
 80057a4:	400204a0 	.word	0x400204a0
 80057a8:	400204b8 	.word	0x400204b8
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f003 0308 	and.w	r3, r3, #8
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	bf14      	ite	ne
 80057ba:	2301      	movne	r3, #1
 80057bc:	2300      	moveq	r3, #0
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d015      	beq.n	80057f0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f022 0204 	bic.w	r2, r2, #4
 80057d2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057d8:	f003 031f 	and.w	r3, r3, #31
 80057dc:	2208      	movs	r2, #8
 80057de:	409a      	lsls	r2, r3
 80057e0:	6a3b      	ldr	r3, [r7, #32]
 80057e2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057e8:	f043 0201 	orr.w	r2, r3, #1
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057f4:	f003 031f 	and.w	r3, r3, #31
 80057f8:	69ba      	ldr	r2, [r7, #24]
 80057fa:	fa22 f303 	lsr.w	r3, r2, r3
 80057fe:	f003 0301 	and.w	r3, r3, #1
 8005802:	2b00      	cmp	r3, #0
 8005804:	d06e      	beq.n	80058e4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a69      	ldr	r2, [pc, #420]	@ (80059b0 <HAL_DMA_IRQHandler+0x3f8>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d04a      	beq.n	80058a6 <HAL_DMA_IRQHandler+0x2ee>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a67      	ldr	r2, [pc, #412]	@ (80059b4 <HAL_DMA_IRQHandler+0x3fc>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d045      	beq.n	80058a6 <HAL_DMA_IRQHandler+0x2ee>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a66      	ldr	r2, [pc, #408]	@ (80059b8 <HAL_DMA_IRQHandler+0x400>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d040      	beq.n	80058a6 <HAL_DMA_IRQHandler+0x2ee>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a64      	ldr	r2, [pc, #400]	@ (80059bc <HAL_DMA_IRQHandler+0x404>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d03b      	beq.n	80058a6 <HAL_DMA_IRQHandler+0x2ee>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a63      	ldr	r2, [pc, #396]	@ (80059c0 <HAL_DMA_IRQHandler+0x408>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d036      	beq.n	80058a6 <HAL_DMA_IRQHandler+0x2ee>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a61      	ldr	r2, [pc, #388]	@ (80059c4 <HAL_DMA_IRQHandler+0x40c>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d031      	beq.n	80058a6 <HAL_DMA_IRQHandler+0x2ee>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a60      	ldr	r2, [pc, #384]	@ (80059c8 <HAL_DMA_IRQHandler+0x410>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d02c      	beq.n	80058a6 <HAL_DMA_IRQHandler+0x2ee>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a5e      	ldr	r2, [pc, #376]	@ (80059cc <HAL_DMA_IRQHandler+0x414>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d027      	beq.n	80058a6 <HAL_DMA_IRQHandler+0x2ee>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a5d      	ldr	r2, [pc, #372]	@ (80059d0 <HAL_DMA_IRQHandler+0x418>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d022      	beq.n	80058a6 <HAL_DMA_IRQHandler+0x2ee>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a5b      	ldr	r2, [pc, #364]	@ (80059d4 <HAL_DMA_IRQHandler+0x41c>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d01d      	beq.n	80058a6 <HAL_DMA_IRQHandler+0x2ee>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a5a      	ldr	r2, [pc, #360]	@ (80059d8 <HAL_DMA_IRQHandler+0x420>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d018      	beq.n	80058a6 <HAL_DMA_IRQHandler+0x2ee>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a58      	ldr	r2, [pc, #352]	@ (80059dc <HAL_DMA_IRQHandler+0x424>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d013      	beq.n	80058a6 <HAL_DMA_IRQHandler+0x2ee>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a57      	ldr	r2, [pc, #348]	@ (80059e0 <HAL_DMA_IRQHandler+0x428>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d00e      	beq.n	80058a6 <HAL_DMA_IRQHandler+0x2ee>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a55      	ldr	r2, [pc, #340]	@ (80059e4 <HAL_DMA_IRQHandler+0x42c>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d009      	beq.n	80058a6 <HAL_DMA_IRQHandler+0x2ee>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a54      	ldr	r2, [pc, #336]	@ (80059e8 <HAL_DMA_IRQHandler+0x430>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d004      	beq.n	80058a6 <HAL_DMA_IRQHandler+0x2ee>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a52      	ldr	r2, [pc, #328]	@ (80059ec <HAL_DMA_IRQHandler+0x434>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d10a      	bne.n	80058bc <HAL_DMA_IRQHandler+0x304>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	695b      	ldr	r3, [r3, #20]
 80058ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	bf14      	ite	ne
 80058b4:	2301      	movne	r3, #1
 80058b6:	2300      	moveq	r3, #0
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	e003      	b.n	80058c4 <HAL_DMA_IRQHandler+0x30c>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2300      	movs	r3, #0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d00d      	beq.n	80058e4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058cc:	f003 031f 	and.w	r3, r3, #31
 80058d0:	2201      	movs	r2, #1
 80058d2:	409a      	lsls	r2, r3
 80058d4:	6a3b      	ldr	r3, [r7, #32]
 80058d6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058dc:	f043 0202 	orr.w	r2, r3, #2
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058e8:	f003 031f 	and.w	r3, r3, #31
 80058ec:	2204      	movs	r2, #4
 80058ee:	409a      	lsls	r2, r3
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	4013      	ands	r3, r2
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	f000 808f 	beq.w	8005a18 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a2c      	ldr	r2, [pc, #176]	@ (80059b0 <HAL_DMA_IRQHandler+0x3f8>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d04a      	beq.n	800599a <HAL_DMA_IRQHandler+0x3e2>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a2a      	ldr	r2, [pc, #168]	@ (80059b4 <HAL_DMA_IRQHandler+0x3fc>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d045      	beq.n	800599a <HAL_DMA_IRQHandler+0x3e2>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a29      	ldr	r2, [pc, #164]	@ (80059b8 <HAL_DMA_IRQHandler+0x400>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d040      	beq.n	800599a <HAL_DMA_IRQHandler+0x3e2>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a27      	ldr	r2, [pc, #156]	@ (80059bc <HAL_DMA_IRQHandler+0x404>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d03b      	beq.n	800599a <HAL_DMA_IRQHandler+0x3e2>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a26      	ldr	r2, [pc, #152]	@ (80059c0 <HAL_DMA_IRQHandler+0x408>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d036      	beq.n	800599a <HAL_DMA_IRQHandler+0x3e2>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a24      	ldr	r2, [pc, #144]	@ (80059c4 <HAL_DMA_IRQHandler+0x40c>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d031      	beq.n	800599a <HAL_DMA_IRQHandler+0x3e2>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a23      	ldr	r2, [pc, #140]	@ (80059c8 <HAL_DMA_IRQHandler+0x410>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d02c      	beq.n	800599a <HAL_DMA_IRQHandler+0x3e2>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a21      	ldr	r2, [pc, #132]	@ (80059cc <HAL_DMA_IRQHandler+0x414>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d027      	beq.n	800599a <HAL_DMA_IRQHandler+0x3e2>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a20      	ldr	r2, [pc, #128]	@ (80059d0 <HAL_DMA_IRQHandler+0x418>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d022      	beq.n	800599a <HAL_DMA_IRQHandler+0x3e2>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a1e      	ldr	r2, [pc, #120]	@ (80059d4 <HAL_DMA_IRQHandler+0x41c>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d01d      	beq.n	800599a <HAL_DMA_IRQHandler+0x3e2>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a1d      	ldr	r2, [pc, #116]	@ (80059d8 <HAL_DMA_IRQHandler+0x420>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d018      	beq.n	800599a <HAL_DMA_IRQHandler+0x3e2>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a1b      	ldr	r2, [pc, #108]	@ (80059dc <HAL_DMA_IRQHandler+0x424>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d013      	beq.n	800599a <HAL_DMA_IRQHandler+0x3e2>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a1a      	ldr	r2, [pc, #104]	@ (80059e0 <HAL_DMA_IRQHandler+0x428>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d00e      	beq.n	800599a <HAL_DMA_IRQHandler+0x3e2>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a18      	ldr	r2, [pc, #96]	@ (80059e4 <HAL_DMA_IRQHandler+0x42c>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d009      	beq.n	800599a <HAL_DMA_IRQHandler+0x3e2>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a17      	ldr	r2, [pc, #92]	@ (80059e8 <HAL_DMA_IRQHandler+0x430>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d004      	beq.n	800599a <HAL_DMA_IRQHandler+0x3e2>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a15      	ldr	r2, [pc, #84]	@ (80059ec <HAL_DMA_IRQHandler+0x434>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d12a      	bne.n	80059f0 <HAL_DMA_IRQHandler+0x438>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 0302 	and.w	r3, r3, #2
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	bf14      	ite	ne
 80059a8:	2301      	movne	r3, #1
 80059aa:	2300      	moveq	r3, #0
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	e023      	b.n	80059f8 <HAL_DMA_IRQHandler+0x440>
 80059b0:	40020010 	.word	0x40020010
 80059b4:	40020028 	.word	0x40020028
 80059b8:	40020040 	.word	0x40020040
 80059bc:	40020058 	.word	0x40020058
 80059c0:	40020070 	.word	0x40020070
 80059c4:	40020088 	.word	0x40020088
 80059c8:	400200a0 	.word	0x400200a0
 80059cc:	400200b8 	.word	0x400200b8
 80059d0:	40020410 	.word	0x40020410
 80059d4:	40020428 	.word	0x40020428
 80059d8:	40020440 	.word	0x40020440
 80059dc:	40020458 	.word	0x40020458
 80059e0:	40020470 	.word	0x40020470
 80059e4:	40020488 	.word	0x40020488
 80059e8:	400204a0 	.word	0x400204a0
 80059ec:	400204b8 	.word	0x400204b8
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	2300      	movs	r3, #0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d00d      	beq.n	8005a18 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a00:	f003 031f 	and.w	r3, r3, #31
 8005a04:	2204      	movs	r2, #4
 8005a06:	409a      	lsls	r2, r3
 8005a08:	6a3b      	ldr	r3, [r7, #32]
 8005a0a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a10:	f043 0204 	orr.w	r2, r3, #4
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a1c:	f003 031f 	and.w	r3, r3, #31
 8005a20:	2210      	movs	r2, #16
 8005a22:	409a      	lsls	r2, r3
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	4013      	ands	r3, r2
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	f000 80a6 	beq.w	8005b7a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a85      	ldr	r2, [pc, #532]	@ (8005c48 <HAL_DMA_IRQHandler+0x690>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d04a      	beq.n	8005ace <HAL_DMA_IRQHandler+0x516>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a83      	ldr	r2, [pc, #524]	@ (8005c4c <HAL_DMA_IRQHandler+0x694>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d045      	beq.n	8005ace <HAL_DMA_IRQHandler+0x516>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a82      	ldr	r2, [pc, #520]	@ (8005c50 <HAL_DMA_IRQHandler+0x698>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d040      	beq.n	8005ace <HAL_DMA_IRQHandler+0x516>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a80      	ldr	r2, [pc, #512]	@ (8005c54 <HAL_DMA_IRQHandler+0x69c>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d03b      	beq.n	8005ace <HAL_DMA_IRQHandler+0x516>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a7f      	ldr	r2, [pc, #508]	@ (8005c58 <HAL_DMA_IRQHandler+0x6a0>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d036      	beq.n	8005ace <HAL_DMA_IRQHandler+0x516>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a7d      	ldr	r2, [pc, #500]	@ (8005c5c <HAL_DMA_IRQHandler+0x6a4>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d031      	beq.n	8005ace <HAL_DMA_IRQHandler+0x516>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a7c      	ldr	r2, [pc, #496]	@ (8005c60 <HAL_DMA_IRQHandler+0x6a8>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d02c      	beq.n	8005ace <HAL_DMA_IRQHandler+0x516>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a7a      	ldr	r2, [pc, #488]	@ (8005c64 <HAL_DMA_IRQHandler+0x6ac>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d027      	beq.n	8005ace <HAL_DMA_IRQHandler+0x516>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a79      	ldr	r2, [pc, #484]	@ (8005c68 <HAL_DMA_IRQHandler+0x6b0>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d022      	beq.n	8005ace <HAL_DMA_IRQHandler+0x516>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a77      	ldr	r2, [pc, #476]	@ (8005c6c <HAL_DMA_IRQHandler+0x6b4>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d01d      	beq.n	8005ace <HAL_DMA_IRQHandler+0x516>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a76      	ldr	r2, [pc, #472]	@ (8005c70 <HAL_DMA_IRQHandler+0x6b8>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d018      	beq.n	8005ace <HAL_DMA_IRQHandler+0x516>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a74      	ldr	r2, [pc, #464]	@ (8005c74 <HAL_DMA_IRQHandler+0x6bc>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d013      	beq.n	8005ace <HAL_DMA_IRQHandler+0x516>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a73      	ldr	r2, [pc, #460]	@ (8005c78 <HAL_DMA_IRQHandler+0x6c0>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d00e      	beq.n	8005ace <HAL_DMA_IRQHandler+0x516>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a71      	ldr	r2, [pc, #452]	@ (8005c7c <HAL_DMA_IRQHandler+0x6c4>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d009      	beq.n	8005ace <HAL_DMA_IRQHandler+0x516>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a70      	ldr	r2, [pc, #448]	@ (8005c80 <HAL_DMA_IRQHandler+0x6c8>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d004      	beq.n	8005ace <HAL_DMA_IRQHandler+0x516>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a6e      	ldr	r2, [pc, #440]	@ (8005c84 <HAL_DMA_IRQHandler+0x6cc>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d10a      	bne.n	8005ae4 <HAL_DMA_IRQHandler+0x52c>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 0308 	and.w	r3, r3, #8
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	bf14      	ite	ne
 8005adc:	2301      	movne	r3, #1
 8005ade:	2300      	moveq	r3, #0
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	e009      	b.n	8005af8 <HAL_DMA_IRQHandler+0x540>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 0304 	and.w	r3, r3, #4
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	bf14      	ite	ne
 8005af2:	2301      	movne	r3, #1
 8005af4:	2300      	moveq	r3, #0
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d03e      	beq.n	8005b7a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b00:	f003 031f 	and.w	r3, r3, #31
 8005b04:	2210      	movs	r2, #16
 8005b06:	409a      	lsls	r2, r3
 8005b08:	6a3b      	ldr	r3, [r7, #32]
 8005b0a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d018      	beq.n	8005b4c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d108      	bne.n	8005b3a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d024      	beq.n	8005b7a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	4798      	blx	r3
 8005b38:	e01f      	b.n	8005b7a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d01b      	beq.n	8005b7a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	4798      	blx	r3
 8005b4a:	e016      	b.n	8005b7a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d107      	bne.n	8005b6a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f022 0208 	bic.w	r2, r2, #8
 8005b68:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d003      	beq.n	8005b7a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b7e:	f003 031f 	and.w	r3, r3, #31
 8005b82:	2220      	movs	r2, #32
 8005b84:	409a      	lsls	r2, r3
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	4013      	ands	r3, r2
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	f000 8110 	beq.w	8005db0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a2c      	ldr	r2, [pc, #176]	@ (8005c48 <HAL_DMA_IRQHandler+0x690>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d04a      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x678>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a2b      	ldr	r2, [pc, #172]	@ (8005c4c <HAL_DMA_IRQHandler+0x694>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d045      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x678>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a29      	ldr	r2, [pc, #164]	@ (8005c50 <HAL_DMA_IRQHandler+0x698>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d040      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x678>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a28      	ldr	r2, [pc, #160]	@ (8005c54 <HAL_DMA_IRQHandler+0x69c>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d03b      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x678>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a26      	ldr	r2, [pc, #152]	@ (8005c58 <HAL_DMA_IRQHandler+0x6a0>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d036      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x678>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a25      	ldr	r2, [pc, #148]	@ (8005c5c <HAL_DMA_IRQHandler+0x6a4>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d031      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x678>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a23      	ldr	r2, [pc, #140]	@ (8005c60 <HAL_DMA_IRQHandler+0x6a8>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d02c      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x678>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a22      	ldr	r2, [pc, #136]	@ (8005c64 <HAL_DMA_IRQHandler+0x6ac>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d027      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x678>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a20      	ldr	r2, [pc, #128]	@ (8005c68 <HAL_DMA_IRQHandler+0x6b0>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d022      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x678>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a1f      	ldr	r2, [pc, #124]	@ (8005c6c <HAL_DMA_IRQHandler+0x6b4>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d01d      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x678>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a1d      	ldr	r2, [pc, #116]	@ (8005c70 <HAL_DMA_IRQHandler+0x6b8>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d018      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x678>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a1c      	ldr	r2, [pc, #112]	@ (8005c74 <HAL_DMA_IRQHandler+0x6bc>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d013      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x678>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a1a      	ldr	r2, [pc, #104]	@ (8005c78 <HAL_DMA_IRQHandler+0x6c0>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d00e      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x678>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a19      	ldr	r2, [pc, #100]	@ (8005c7c <HAL_DMA_IRQHandler+0x6c4>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d009      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x678>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a17      	ldr	r2, [pc, #92]	@ (8005c80 <HAL_DMA_IRQHandler+0x6c8>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d004      	beq.n	8005c30 <HAL_DMA_IRQHandler+0x678>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a16      	ldr	r2, [pc, #88]	@ (8005c84 <HAL_DMA_IRQHandler+0x6cc>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d12b      	bne.n	8005c88 <HAL_DMA_IRQHandler+0x6d0>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f003 0310 	and.w	r3, r3, #16
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	bf14      	ite	ne
 8005c3e:	2301      	movne	r3, #1
 8005c40:	2300      	moveq	r3, #0
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	e02a      	b.n	8005c9c <HAL_DMA_IRQHandler+0x6e4>
 8005c46:	bf00      	nop
 8005c48:	40020010 	.word	0x40020010
 8005c4c:	40020028 	.word	0x40020028
 8005c50:	40020040 	.word	0x40020040
 8005c54:	40020058 	.word	0x40020058
 8005c58:	40020070 	.word	0x40020070
 8005c5c:	40020088 	.word	0x40020088
 8005c60:	400200a0 	.word	0x400200a0
 8005c64:	400200b8 	.word	0x400200b8
 8005c68:	40020410 	.word	0x40020410
 8005c6c:	40020428 	.word	0x40020428
 8005c70:	40020440 	.word	0x40020440
 8005c74:	40020458 	.word	0x40020458
 8005c78:	40020470 	.word	0x40020470
 8005c7c:	40020488 	.word	0x40020488
 8005c80:	400204a0 	.word	0x400204a0
 8005c84:	400204b8 	.word	0x400204b8
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 0302 	and.w	r3, r3, #2
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	bf14      	ite	ne
 8005c96:	2301      	movne	r3, #1
 8005c98:	2300      	moveq	r3, #0
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	f000 8087 	beq.w	8005db0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ca6:	f003 031f 	and.w	r3, r3, #31
 8005caa:	2220      	movs	r2, #32
 8005cac:	409a      	lsls	r2, r3
 8005cae:	6a3b      	ldr	r3, [r7, #32]
 8005cb0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	2b04      	cmp	r3, #4
 8005cbc:	d139      	bne.n	8005d32 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f022 0216 	bic.w	r2, r2, #22
 8005ccc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	695a      	ldr	r2, [r3, #20]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005cdc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d103      	bne.n	8005cee <HAL_DMA_IRQHandler+0x736>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d007      	beq.n	8005cfe <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f022 0208 	bic.w	r2, r2, #8
 8005cfc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d02:	f003 031f 	and.w	r3, r3, #31
 8005d06:	223f      	movs	r2, #63	@ 0x3f
 8005d08:	409a      	lsls	r2, r3
 8005d0a:	6a3b      	ldr	r3, [r7, #32]
 8005d0c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2201      	movs	r2, #1
 8005d12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	f000 834a 	beq.w	80063bc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	4798      	blx	r3
          }
          return;
 8005d30:	e344      	b.n	80063bc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d018      	beq.n	8005d72 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d108      	bne.n	8005d60 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d02c      	beq.n	8005db0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	4798      	blx	r3
 8005d5e:	e027      	b.n	8005db0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d023      	beq.n	8005db0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	4798      	blx	r3
 8005d70:	e01e      	b.n	8005db0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d10f      	bne.n	8005da0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f022 0210 	bic.w	r2, r2, #16
 8005d8e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d003      	beq.n	8005db0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	f000 8306 	beq.w	80063c6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dbe:	f003 0301 	and.w	r3, r3, #1
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	f000 8088 	beq.w	8005ed8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2204      	movs	r2, #4
 8005dcc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a7a      	ldr	r2, [pc, #488]	@ (8005fc0 <HAL_DMA_IRQHandler+0xa08>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d04a      	beq.n	8005e70 <HAL_DMA_IRQHandler+0x8b8>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a79      	ldr	r2, [pc, #484]	@ (8005fc4 <HAL_DMA_IRQHandler+0xa0c>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d045      	beq.n	8005e70 <HAL_DMA_IRQHandler+0x8b8>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a77      	ldr	r2, [pc, #476]	@ (8005fc8 <HAL_DMA_IRQHandler+0xa10>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d040      	beq.n	8005e70 <HAL_DMA_IRQHandler+0x8b8>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a76      	ldr	r2, [pc, #472]	@ (8005fcc <HAL_DMA_IRQHandler+0xa14>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d03b      	beq.n	8005e70 <HAL_DMA_IRQHandler+0x8b8>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a74      	ldr	r2, [pc, #464]	@ (8005fd0 <HAL_DMA_IRQHandler+0xa18>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d036      	beq.n	8005e70 <HAL_DMA_IRQHandler+0x8b8>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a73      	ldr	r2, [pc, #460]	@ (8005fd4 <HAL_DMA_IRQHandler+0xa1c>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d031      	beq.n	8005e70 <HAL_DMA_IRQHandler+0x8b8>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a71      	ldr	r2, [pc, #452]	@ (8005fd8 <HAL_DMA_IRQHandler+0xa20>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d02c      	beq.n	8005e70 <HAL_DMA_IRQHandler+0x8b8>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a70      	ldr	r2, [pc, #448]	@ (8005fdc <HAL_DMA_IRQHandler+0xa24>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d027      	beq.n	8005e70 <HAL_DMA_IRQHandler+0x8b8>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a6e      	ldr	r2, [pc, #440]	@ (8005fe0 <HAL_DMA_IRQHandler+0xa28>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d022      	beq.n	8005e70 <HAL_DMA_IRQHandler+0x8b8>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a6d      	ldr	r2, [pc, #436]	@ (8005fe4 <HAL_DMA_IRQHandler+0xa2c>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d01d      	beq.n	8005e70 <HAL_DMA_IRQHandler+0x8b8>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a6b      	ldr	r2, [pc, #428]	@ (8005fe8 <HAL_DMA_IRQHandler+0xa30>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d018      	beq.n	8005e70 <HAL_DMA_IRQHandler+0x8b8>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a6a      	ldr	r2, [pc, #424]	@ (8005fec <HAL_DMA_IRQHandler+0xa34>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d013      	beq.n	8005e70 <HAL_DMA_IRQHandler+0x8b8>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a68      	ldr	r2, [pc, #416]	@ (8005ff0 <HAL_DMA_IRQHandler+0xa38>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d00e      	beq.n	8005e70 <HAL_DMA_IRQHandler+0x8b8>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a67      	ldr	r2, [pc, #412]	@ (8005ff4 <HAL_DMA_IRQHandler+0xa3c>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d009      	beq.n	8005e70 <HAL_DMA_IRQHandler+0x8b8>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a65      	ldr	r2, [pc, #404]	@ (8005ff8 <HAL_DMA_IRQHandler+0xa40>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d004      	beq.n	8005e70 <HAL_DMA_IRQHandler+0x8b8>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a64      	ldr	r2, [pc, #400]	@ (8005ffc <HAL_DMA_IRQHandler+0xa44>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d108      	bne.n	8005e82 <HAL_DMA_IRQHandler+0x8ca>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f022 0201 	bic.w	r2, r2, #1
 8005e7e:	601a      	str	r2, [r3, #0]
 8005e80:	e007      	b.n	8005e92 <HAL_DMA_IRQHandler+0x8da>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f022 0201 	bic.w	r2, r2, #1
 8005e90:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	3301      	adds	r3, #1
 8005e96:	60fb      	str	r3, [r7, #12]
 8005e98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d307      	bcc.n	8005eae <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 0301 	and.w	r3, r3, #1
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d1f2      	bne.n	8005e92 <HAL_DMA_IRQHandler+0x8da>
 8005eac:	e000      	b.n	8005eb0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005eae:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 0301 	and.w	r3, r3, #1
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d004      	beq.n	8005ec8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2203      	movs	r2, #3
 8005ec2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8005ec6:	e003      	b.n	8005ed0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	f000 8272 	beq.w	80063c6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	4798      	blx	r3
 8005eea:	e26c      	b.n	80063c6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a43      	ldr	r2, [pc, #268]	@ (8006000 <HAL_DMA_IRQHandler+0xa48>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d022      	beq.n	8005f3c <HAL_DMA_IRQHandler+0x984>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a42      	ldr	r2, [pc, #264]	@ (8006004 <HAL_DMA_IRQHandler+0xa4c>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d01d      	beq.n	8005f3c <HAL_DMA_IRQHandler+0x984>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a40      	ldr	r2, [pc, #256]	@ (8006008 <HAL_DMA_IRQHandler+0xa50>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d018      	beq.n	8005f3c <HAL_DMA_IRQHandler+0x984>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a3f      	ldr	r2, [pc, #252]	@ (800600c <HAL_DMA_IRQHandler+0xa54>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d013      	beq.n	8005f3c <HAL_DMA_IRQHandler+0x984>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a3d      	ldr	r2, [pc, #244]	@ (8006010 <HAL_DMA_IRQHandler+0xa58>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d00e      	beq.n	8005f3c <HAL_DMA_IRQHandler+0x984>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a3c      	ldr	r2, [pc, #240]	@ (8006014 <HAL_DMA_IRQHandler+0xa5c>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d009      	beq.n	8005f3c <HAL_DMA_IRQHandler+0x984>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a3a      	ldr	r2, [pc, #232]	@ (8006018 <HAL_DMA_IRQHandler+0xa60>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d004      	beq.n	8005f3c <HAL_DMA_IRQHandler+0x984>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a39      	ldr	r2, [pc, #228]	@ (800601c <HAL_DMA_IRQHandler+0xa64>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d101      	bne.n	8005f40 <HAL_DMA_IRQHandler+0x988>
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e000      	b.n	8005f42 <HAL_DMA_IRQHandler+0x98a>
 8005f40:	2300      	movs	r3, #0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	f000 823f 	beq.w	80063c6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f54:	f003 031f 	and.w	r3, r3, #31
 8005f58:	2204      	movs	r2, #4
 8005f5a:	409a      	lsls	r2, r3
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	4013      	ands	r3, r2
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	f000 80cd 	beq.w	8006100 <HAL_DMA_IRQHandler+0xb48>
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	f003 0304 	and.w	r3, r3, #4
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f000 80c7 	beq.w	8006100 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f76:	f003 031f 	and.w	r3, r3, #31
 8005f7a:	2204      	movs	r2, #4
 8005f7c:	409a      	lsls	r2, r3
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d049      	beq.n	8006020 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d109      	bne.n	8005faa <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	f000 8210 	beq.w	80063c0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005fa8:	e20a      	b.n	80063c0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	f000 8206 	beq.w	80063c0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005fbc:	e200      	b.n	80063c0 <HAL_DMA_IRQHandler+0xe08>
 8005fbe:	bf00      	nop
 8005fc0:	40020010 	.word	0x40020010
 8005fc4:	40020028 	.word	0x40020028
 8005fc8:	40020040 	.word	0x40020040
 8005fcc:	40020058 	.word	0x40020058
 8005fd0:	40020070 	.word	0x40020070
 8005fd4:	40020088 	.word	0x40020088
 8005fd8:	400200a0 	.word	0x400200a0
 8005fdc:	400200b8 	.word	0x400200b8
 8005fe0:	40020410 	.word	0x40020410
 8005fe4:	40020428 	.word	0x40020428
 8005fe8:	40020440 	.word	0x40020440
 8005fec:	40020458 	.word	0x40020458
 8005ff0:	40020470 	.word	0x40020470
 8005ff4:	40020488 	.word	0x40020488
 8005ff8:	400204a0 	.word	0x400204a0
 8005ffc:	400204b8 	.word	0x400204b8
 8006000:	58025408 	.word	0x58025408
 8006004:	5802541c 	.word	0x5802541c
 8006008:	58025430 	.word	0x58025430
 800600c:	58025444 	.word	0x58025444
 8006010:	58025458 	.word	0x58025458
 8006014:	5802546c 	.word	0x5802546c
 8006018:	58025480 	.word	0x58025480
 800601c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	f003 0320 	and.w	r3, r3, #32
 8006026:	2b00      	cmp	r3, #0
 8006028:	d160      	bne.n	80060ec <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a7f      	ldr	r2, [pc, #508]	@ (800622c <HAL_DMA_IRQHandler+0xc74>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d04a      	beq.n	80060ca <HAL_DMA_IRQHandler+0xb12>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a7d      	ldr	r2, [pc, #500]	@ (8006230 <HAL_DMA_IRQHandler+0xc78>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d045      	beq.n	80060ca <HAL_DMA_IRQHandler+0xb12>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a7c      	ldr	r2, [pc, #496]	@ (8006234 <HAL_DMA_IRQHandler+0xc7c>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d040      	beq.n	80060ca <HAL_DMA_IRQHandler+0xb12>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a7a      	ldr	r2, [pc, #488]	@ (8006238 <HAL_DMA_IRQHandler+0xc80>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d03b      	beq.n	80060ca <HAL_DMA_IRQHandler+0xb12>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a79      	ldr	r2, [pc, #484]	@ (800623c <HAL_DMA_IRQHandler+0xc84>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d036      	beq.n	80060ca <HAL_DMA_IRQHandler+0xb12>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a77      	ldr	r2, [pc, #476]	@ (8006240 <HAL_DMA_IRQHandler+0xc88>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d031      	beq.n	80060ca <HAL_DMA_IRQHandler+0xb12>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a76      	ldr	r2, [pc, #472]	@ (8006244 <HAL_DMA_IRQHandler+0xc8c>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d02c      	beq.n	80060ca <HAL_DMA_IRQHandler+0xb12>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a74      	ldr	r2, [pc, #464]	@ (8006248 <HAL_DMA_IRQHandler+0xc90>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d027      	beq.n	80060ca <HAL_DMA_IRQHandler+0xb12>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a73      	ldr	r2, [pc, #460]	@ (800624c <HAL_DMA_IRQHandler+0xc94>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d022      	beq.n	80060ca <HAL_DMA_IRQHandler+0xb12>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a71      	ldr	r2, [pc, #452]	@ (8006250 <HAL_DMA_IRQHandler+0xc98>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d01d      	beq.n	80060ca <HAL_DMA_IRQHandler+0xb12>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a70      	ldr	r2, [pc, #448]	@ (8006254 <HAL_DMA_IRQHandler+0xc9c>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d018      	beq.n	80060ca <HAL_DMA_IRQHandler+0xb12>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a6e      	ldr	r2, [pc, #440]	@ (8006258 <HAL_DMA_IRQHandler+0xca0>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d013      	beq.n	80060ca <HAL_DMA_IRQHandler+0xb12>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a6d      	ldr	r2, [pc, #436]	@ (800625c <HAL_DMA_IRQHandler+0xca4>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d00e      	beq.n	80060ca <HAL_DMA_IRQHandler+0xb12>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a6b      	ldr	r2, [pc, #428]	@ (8006260 <HAL_DMA_IRQHandler+0xca8>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d009      	beq.n	80060ca <HAL_DMA_IRQHandler+0xb12>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a6a      	ldr	r2, [pc, #424]	@ (8006264 <HAL_DMA_IRQHandler+0xcac>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d004      	beq.n	80060ca <HAL_DMA_IRQHandler+0xb12>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a68      	ldr	r2, [pc, #416]	@ (8006268 <HAL_DMA_IRQHandler+0xcb0>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d108      	bne.n	80060dc <HAL_DMA_IRQHandler+0xb24>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f022 0208 	bic.w	r2, r2, #8
 80060d8:	601a      	str	r2, [r3, #0]
 80060da:	e007      	b.n	80060ec <HAL_DMA_IRQHandler+0xb34>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f022 0204 	bic.w	r2, r2, #4
 80060ea:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	f000 8165 	beq.w	80063c0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80060fe:	e15f      	b.n	80063c0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006104:	f003 031f 	and.w	r3, r3, #31
 8006108:	2202      	movs	r2, #2
 800610a:	409a      	lsls	r2, r3
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	4013      	ands	r3, r2
 8006110:	2b00      	cmp	r3, #0
 8006112:	f000 80c5 	beq.w	80062a0 <HAL_DMA_IRQHandler+0xce8>
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	f003 0302 	and.w	r3, r3, #2
 800611c:	2b00      	cmp	r3, #0
 800611e:	f000 80bf 	beq.w	80062a0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006126:	f003 031f 	and.w	r3, r3, #31
 800612a:	2202      	movs	r2, #2
 800612c:	409a      	lsls	r2, r3
 800612e:	69fb      	ldr	r3, [r7, #28]
 8006130:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006138:	2b00      	cmp	r3, #0
 800613a:	d018      	beq.n	800616e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006142:	2b00      	cmp	r3, #0
 8006144:	d109      	bne.n	800615a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800614a:	2b00      	cmp	r3, #0
 800614c:	f000 813a 	beq.w	80063c4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006158:	e134      	b.n	80063c4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800615e:	2b00      	cmp	r3, #0
 8006160:	f000 8130 	beq.w	80063c4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800616c:	e12a      	b.n	80063c4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	f003 0320 	and.w	r3, r3, #32
 8006174:	2b00      	cmp	r3, #0
 8006176:	f040 8089 	bne.w	800628c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a2b      	ldr	r2, [pc, #172]	@ (800622c <HAL_DMA_IRQHandler+0xc74>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d04a      	beq.n	800621a <HAL_DMA_IRQHandler+0xc62>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a29      	ldr	r2, [pc, #164]	@ (8006230 <HAL_DMA_IRQHandler+0xc78>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d045      	beq.n	800621a <HAL_DMA_IRQHandler+0xc62>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a28      	ldr	r2, [pc, #160]	@ (8006234 <HAL_DMA_IRQHandler+0xc7c>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d040      	beq.n	800621a <HAL_DMA_IRQHandler+0xc62>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a26      	ldr	r2, [pc, #152]	@ (8006238 <HAL_DMA_IRQHandler+0xc80>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d03b      	beq.n	800621a <HAL_DMA_IRQHandler+0xc62>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a25      	ldr	r2, [pc, #148]	@ (800623c <HAL_DMA_IRQHandler+0xc84>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d036      	beq.n	800621a <HAL_DMA_IRQHandler+0xc62>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a23      	ldr	r2, [pc, #140]	@ (8006240 <HAL_DMA_IRQHandler+0xc88>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d031      	beq.n	800621a <HAL_DMA_IRQHandler+0xc62>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a22      	ldr	r2, [pc, #136]	@ (8006244 <HAL_DMA_IRQHandler+0xc8c>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d02c      	beq.n	800621a <HAL_DMA_IRQHandler+0xc62>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a20      	ldr	r2, [pc, #128]	@ (8006248 <HAL_DMA_IRQHandler+0xc90>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d027      	beq.n	800621a <HAL_DMA_IRQHandler+0xc62>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a1f      	ldr	r2, [pc, #124]	@ (800624c <HAL_DMA_IRQHandler+0xc94>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d022      	beq.n	800621a <HAL_DMA_IRQHandler+0xc62>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a1d      	ldr	r2, [pc, #116]	@ (8006250 <HAL_DMA_IRQHandler+0xc98>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d01d      	beq.n	800621a <HAL_DMA_IRQHandler+0xc62>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a1c      	ldr	r2, [pc, #112]	@ (8006254 <HAL_DMA_IRQHandler+0xc9c>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d018      	beq.n	800621a <HAL_DMA_IRQHandler+0xc62>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a1a      	ldr	r2, [pc, #104]	@ (8006258 <HAL_DMA_IRQHandler+0xca0>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d013      	beq.n	800621a <HAL_DMA_IRQHandler+0xc62>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a19      	ldr	r2, [pc, #100]	@ (800625c <HAL_DMA_IRQHandler+0xca4>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d00e      	beq.n	800621a <HAL_DMA_IRQHandler+0xc62>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a17      	ldr	r2, [pc, #92]	@ (8006260 <HAL_DMA_IRQHandler+0xca8>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d009      	beq.n	800621a <HAL_DMA_IRQHandler+0xc62>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a16      	ldr	r2, [pc, #88]	@ (8006264 <HAL_DMA_IRQHandler+0xcac>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d004      	beq.n	800621a <HAL_DMA_IRQHandler+0xc62>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a14      	ldr	r2, [pc, #80]	@ (8006268 <HAL_DMA_IRQHandler+0xcb0>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d128      	bne.n	800626c <HAL_DMA_IRQHandler+0xcb4>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f022 0214 	bic.w	r2, r2, #20
 8006228:	601a      	str	r2, [r3, #0]
 800622a:	e027      	b.n	800627c <HAL_DMA_IRQHandler+0xcc4>
 800622c:	40020010 	.word	0x40020010
 8006230:	40020028 	.word	0x40020028
 8006234:	40020040 	.word	0x40020040
 8006238:	40020058 	.word	0x40020058
 800623c:	40020070 	.word	0x40020070
 8006240:	40020088 	.word	0x40020088
 8006244:	400200a0 	.word	0x400200a0
 8006248:	400200b8 	.word	0x400200b8
 800624c:	40020410 	.word	0x40020410
 8006250:	40020428 	.word	0x40020428
 8006254:	40020440 	.word	0x40020440
 8006258:	40020458 	.word	0x40020458
 800625c:	40020470 	.word	0x40020470
 8006260:	40020488 	.word	0x40020488
 8006264:	400204a0 	.word	0x400204a0
 8006268:	400204b8 	.word	0x400204b8
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f022 020a 	bic.w	r2, r2, #10
 800627a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006290:	2b00      	cmp	r3, #0
 8006292:	f000 8097 	beq.w	80063c4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800629e:	e091      	b.n	80063c4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062a4:	f003 031f 	and.w	r3, r3, #31
 80062a8:	2208      	movs	r2, #8
 80062aa:	409a      	lsls	r2, r3
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	4013      	ands	r3, r2
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	f000 8088 	beq.w	80063c6 <HAL_DMA_IRQHandler+0xe0e>
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	f003 0308 	and.w	r3, r3, #8
 80062bc:	2b00      	cmp	r3, #0
 80062be:	f000 8082 	beq.w	80063c6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a41      	ldr	r2, [pc, #260]	@ (80063cc <HAL_DMA_IRQHandler+0xe14>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d04a      	beq.n	8006362 <HAL_DMA_IRQHandler+0xdaa>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a3f      	ldr	r2, [pc, #252]	@ (80063d0 <HAL_DMA_IRQHandler+0xe18>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d045      	beq.n	8006362 <HAL_DMA_IRQHandler+0xdaa>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a3e      	ldr	r2, [pc, #248]	@ (80063d4 <HAL_DMA_IRQHandler+0xe1c>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d040      	beq.n	8006362 <HAL_DMA_IRQHandler+0xdaa>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a3c      	ldr	r2, [pc, #240]	@ (80063d8 <HAL_DMA_IRQHandler+0xe20>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d03b      	beq.n	8006362 <HAL_DMA_IRQHandler+0xdaa>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a3b      	ldr	r2, [pc, #236]	@ (80063dc <HAL_DMA_IRQHandler+0xe24>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d036      	beq.n	8006362 <HAL_DMA_IRQHandler+0xdaa>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a39      	ldr	r2, [pc, #228]	@ (80063e0 <HAL_DMA_IRQHandler+0xe28>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d031      	beq.n	8006362 <HAL_DMA_IRQHandler+0xdaa>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a38      	ldr	r2, [pc, #224]	@ (80063e4 <HAL_DMA_IRQHandler+0xe2c>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d02c      	beq.n	8006362 <HAL_DMA_IRQHandler+0xdaa>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a36      	ldr	r2, [pc, #216]	@ (80063e8 <HAL_DMA_IRQHandler+0xe30>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d027      	beq.n	8006362 <HAL_DMA_IRQHandler+0xdaa>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a35      	ldr	r2, [pc, #212]	@ (80063ec <HAL_DMA_IRQHandler+0xe34>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d022      	beq.n	8006362 <HAL_DMA_IRQHandler+0xdaa>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a33      	ldr	r2, [pc, #204]	@ (80063f0 <HAL_DMA_IRQHandler+0xe38>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d01d      	beq.n	8006362 <HAL_DMA_IRQHandler+0xdaa>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a32      	ldr	r2, [pc, #200]	@ (80063f4 <HAL_DMA_IRQHandler+0xe3c>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d018      	beq.n	8006362 <HAL_DMA_IRQHandler+0xdaa>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a30      	ldr	r2, [pc, #192]	@ (80063f8 <HAL_DMA_IRQHandler+0xe40>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d013      	beq.n	8006362 <HAL_DMA_IRQHandler+0xdaa>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a2f      	ldr	r2, [pc, #188]	@ (80063fc <HAL_DMA_IRQHandler+0xe44>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d00e      	beq.n	8006362 <HAL_DMA_IRQHandler+0xdaa>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a2d      	ldr	r2, [pc, #180]	@ (8006400 <HAL_DMA_IRQHandler+0xe48>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d009      	beq.n	8006362 <HAL_DMA_IRQHandler+0xdaa>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a2c      	ldr	r2, [pc, #176]	@ (8006404 <HAL_DMA_IRQHandler+0xe4c>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d004      	beq.n	8006362 <HAL_DMA_IRQHandler+0xdaa>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a2a      	ldr	r2, [pc, #168]	@ (8006408 <HAL_DMA_IRQHandler+0xe50>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d108      	bne.n	8006374 <HAL_DMA_IRQHandler+0xdbc>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f022 021c 	bic.w	r2, r2, #28
 8006370:	601a      	str	r2, [r3, #0]
 8006372:	e007      	b.n	8006384 <HAL_DMA_IRQHandler+0xdcc>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f022 020e 	bic.w	r2, r2, #14
 8006382:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006388:	f003 031f 	and.w	r3, r3, #31
 800638c:	2201      	movs	r2, #1
 800638e:	409a      	lsls	r2, r3
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2201      	movs	r2, #1
 800639e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d009      	beq.n	80063c6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	4798      	blx	r3
 80063ba:	e004      	b.n	80063c6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80063bc:	bf00      	nop
 80063be:	e002      	b.n	80063c6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80063c0:	bf00      	nop
 80063c2:	e000      	b.n	80063c6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80063c4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80063c6:	3728      	adds	r7, #40	@ 0x28
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}
 80063cc:	40020010 	.word	0x40020010
 80063d0:	40020028 	.word	0x40020028
 80063d4:	40020040 	.word	0x40020040
 80063d8:	40020058 	.word	0x40020058
 80063dc:	40020070 	.word	0x40020070
 80063e0:	40020088 	.word	0x40020088
 80063e4:	400200a0 	.word	0x400200a0
 80063e8:	400200b8 	.word	0x400200b8
 80063ec:	40020410 	.word	0x40020410
 80063f0:	40020428 	.word	0x40020428
 80063f4:	40020440 	.word	0x40020440
 80063f8:	40020458 	.word	0x40020458
 80063fc:	40020470 	.word	0x40020470
 8006400:	40020488 	.word	0x40020488
 8006404:	400204a0 	.word	0x400204a0
 8006408:	400204b8 	.word	0x400204b8

0800640c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800640c:	b480      	push	{r7}
 800640e:	b087      	sub	sp, #28
 8006410:	af00      	add	r7, sp, #0
 8006412:	60f8      	str	r0, [r7, #12]
 8006414:	60b9      	str	r1, [r7, #8]
 8006416:	607a      	str	r2, [r7, #4]
 8006418:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800641e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006424:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a7f      	ldr	r2, [pc, #508]	@ (8006628 <DMA_SetConfig+0x21c>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d072      	beq.n	8006516 <DMA_SetConfig+0x10a>
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a7d      	ldr	r2, [pc, #500]	@ (800662c <DMA_SetConfig+0x220>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d06d      	beq.n	8006516 <DMA_SetConfig+0x10a>
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a7c      	ldr	r2, [pc, #496]	@ (8006630 <DMA_SetConfig+0x224>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d068      	beq.n	8006516 <DMA_SetConfig+0x10a>
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a7a      	ldr	r2, [pc, #488]	@ (8006634 <DMA_SetConfig+0x228>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d063      	beq.n	8006516 <DMA_SetConfig+0x10a>
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a79      	ldr	r2, [pc, #484]	@ (8006638 <DMA_SetConfig+0x22c>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d05e      	beq.n	8006516 <DMA_SetConfig+0x10a>
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a77      	ldr	r2, [pc, #476]	@ (800663c <DMA_SetConfig+0x230>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d059      	beq.n	8006516 <DMA_SetConfig+0x10a>
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a76      	ldr	r2, [pc, #472]	@ (8006640 <DMA_SetConfig+0x234>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d054      	beq.n	8006516 <DMA_SetConfig+0x10a>
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a74      	ldr	r2, [pc, #464]	@ (8006644 <DMA_SetConfig+0x238>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d04f      	beq.n	8006516 <DMA_SetConfig+0x10a>
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a73      	ldr	r2, [pc, #460]	@ (8006648 <DMA_SetConfig+0x23c>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d04a      	beq.n	8006516 <DMA_SetConfig+0x10a>
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a71      	ldr	r2, [pc, #452]	@ (800664c <DMA_SetConfig+0x240>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d045      	beq.n	8006516 <DMA_SetConfig+0x10a>
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a70      	ldr	r2, [pc, #448]	@ (8006650 <DMA_SetConfig+0x244>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d040      	beq.n	8006516 <DMA_SetConfig+0x10a>
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a6e      	ldr	r2, [pc, #440]	@ (8006654 <DMA_SetConfig+0x248>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d03b      	beq.n	8006516 <DMA_SetConfig+0x10a>
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a6d      	ldr	r2, [pc, #436]	@ (8006658 <DMA_SetConfig+0x24c>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d036      	beq.n	8006516 <DMA_SetConfig+0x10a>
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a6b      	ldr	r2, [pc, #428]	@ (800665c <DMA_SetConfig+0x250>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d031      	beq.n	8006516 <DMA_SetConfig+0x10a>
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a6a      	ldr	r2, [pc, #424]	@ (8006660 <DMA_SetConfig+0x254>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d02c      	beq.n	8006516 <DMA_SetConfig+0x10a>
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a68      	ldr	r2, [pc, #416]	@ (8006664 <DMA_SetConfig+0x258>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d027      	beq.n	8006516 <DMA_SetConfig+0x10a>
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a67      	ldr	r2, [pc, #412]	@ (8006668 <DMA_SetConfig+0x25c>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d022      	beq.n	8006516 <DMA_SetConfig+0x10a>
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a65      	ldr	r2, [pc, #404]	@ (800666c <DMA_SetConfig+0x260>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d01d      	beq.n	8006516 <DMA_SetConfig+0x10a>
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a64      	ldr	r2, [pc, #400]	@ (8006670 <DMA_SetConfig+0x264>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d018      	beq.n	8006516 <DMA_SetConfig+0x10a>
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a62      	ldr	r2, [pc, #392]	@ (8006674 <DMA_SetConfig+0x268>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d013      	beq.n	8006516 <DMA_SetConfig+0x10a>
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a61      	ldr	r2, [pc, #388]	@ (8006678 <DMA_SetConfig+0x26c>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d00e      	beq.n	8006516 <DMA_SetConfig+0x10a>
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a5f      	ldr	r2, [pc, #380]	@ (800667c <DMA_SetConfig+0x270>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d009      	beq.n	8006516 <DMA_SetConfig+0x10a>
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a5e      	ldr	r2, [pc, #376]	@ (8006680 <DMA_SetConfig+0x274>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d004      	beq.n	8006516 <DMA_SetConfig+0x10a>
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a5c      	ldr	r2, [pc, #368]	@ (8006684 <DMA_SetConfig+0x278>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d101      	bne.n	800651a <DMA_SetConfig+0x10e>
 8006516:	2301      	movs	r3, #1
 8006518:	e000      	b.n	800651c <DMA_SetConfig+0x110>
 800651a:	2300      	movs	r3, #0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d00d      	beq.n	800653c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006528:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800652e:	2b00      	cmp	r3, #0
 8006530:	d004      	beq.n	800653c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006536:	68fa      	ldr	r2, [r7, #12]
 8006538:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800653a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a39      	ldr	r2, [pc, #228]	@ (8006628 <DMA_SetConfig+0x21c>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d04a      	beq.n	80065dc <DMA_SetConfig+0x1d0>
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a38      	ldr	r2, [pc, #224]	@ (800662c <DMA_SetConfig+0x220>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d045      	beq.n	80065dc <DMA_SetConfig+0x1d0>
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a36      	ldr	r2, [pc, #216]	@ (8006630 <DMA_SetConfig+0x224>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d040      	beq.n	80065dc <DMA_SetConfig+0x1d0>
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a35      	ldr	r2, [pc, #212]	@ (8006634 <DMA_SetConfig+0x228>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d03b      	beq.n	80065dc <DMA_SetConfig+0x1d0>
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a33      	ldr	r2, [pc, #204]	@ (8006638 <DMA_SetConfig+0x22c>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d036      	beq.n	80065dc <DMA_SetConfig+0x1d0>
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a32      	ldr	r2, [pc, #200]	@ (800663c <DMA_SetConfig+0x230>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d031      	beq.n	80065dc <DMA_SetConfig+0x1d0>
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a30      	ldr	r2, [pc, #192]	@ (8006640 <DMA_SetConfig+0x234>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d02c      	beq.n	80065dc <DMA_SetConfig+0x1d0>
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a2f      	ldr	r2, [pc, #188]	@ (8006644 <DMA_SetConfig+0x238>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d027      	beq.n	80065dc <DMA_SetConfig+0x1d0>
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a2d      	ldr	r2, [pc, #180]	@ (8006648 <DMA_SetConfig+0x23c>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d022      	beq.n	80065dc <DMA_SetConfig+0x1d0>
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a2c      	ldr	r2, [pc, #176]	@ (800664c <DMA_SetConfig+0x240>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d01d      	beq.n	80065dc <DMA_SetConfig+0x1d0>
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a2a      	ldr	r2, [pc, #168]	@ (8006650 <DMA_SetConfig+0x244>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d018      	beq.n	80065dc <DMA_SetConfig+0x1d0>
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a29      	ldr	r2, [pc, #164]	@ (8006654 <DMA_SetConfig+0x248>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d013      	beq.n	80065dc <DMA_SetConfig+0x1d0>
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a27      	ldr	r2, [pc, #156]	@ (8006658 <DMA_SetConfig+0x24c>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d00e      	beq.n	80065dc <DMA_SetConfig+0x1d0>
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a26      	ldr	r2, [pc, #152]	@ (800665c <DMA_SetConfig+0x250>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d009      	beq.n	80065dc <DMA_SetConfig+0x1d0>
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a24      	ldr	r2, [pc, #144]	@ (8006660 <DMA_SetConfig+0x254>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d004      	beq.n	80065dc <DMA_SetConfig+0x1d0>
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a23      	ldr	r2, [pc, #140]	@ (8006664 <DMA_SetConfig+0x258>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d101      	bne.n	80065e0 <DMA_SetConfig+0x1d4>
 80065dc:	2301      	movs	r3, #1
 80065de:	e000      	b.n	80065e2 <DMA_SetConfig+0x1d6>
 80065e0:	2300      	movs	r3, #0
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d059      	beq.n	800669a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065ea:	f003 031f 	and.w	r3, r3, #31
 80065ee:	223f      	movs	r2, #63	@ 0x3f
 80065f0:	409a      	lsls	r2, r3
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006604:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	683a      	ldr	r2, [r7, #0]
 800660c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	2b40      	cmp	r3, #64	@ 0x40
 8006614:	d138      	bne.n	8006688 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	68ba      	ldr	r2, [r7, #8]
 8006624:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006626:	e086      	b.n	8006736 <DMA_SetConfig+0x32a>
 8006628:	40020010 	.word	0x40020010
 800662c:	40020028 	.word	0x40020028
 8006630:	40020040 	.word	0x40020040
 8006634:	40020058 	.word	0x40020058
 8006638:	40020070 	.word	0x40020070
 800663c:	40020088 	.word	0x40020088
 8006640:	400200a0 	.word	0x400200a0
 8006644:	400200b8 	.word	0x400200b8
 8006648:	40020410 	.word	0x40020410
 800664c:	40020428 	.word	0x40020428
 8006650:	40020440 	.word	0x40020440
 8006654:	40020458 	.word	0x40020458
 8006658:	40020470 	.word	0x40020470
 800665c:	40020488 	.word	0x40020488
 8006660:	400204a0 	.word	0x400204a0
 8006664:	400204b8 	.word	0x400204b8
 8006668:	58025408 	.word	0x58025408
 800666c:	5802541c 	.word	0x5802541c
 8006670:	58025430 	.word	0x58025430
 8006674:	58025444 	.word	0x58025444
 8006678:	58025458 	.word	0x58025458
 800667c:	5802546c 	.word	0x5802546c
 8006680:	58025480 	.word	0x58025480
 8006684:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	68ba      	ldr	r2, [r7, #8]
 800668e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	60da      	str	r2, [r3, #12]
}
 8006698:	e04d      	b.n	8006736 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a29      	ldr	r2, [pc, #164]	@ (8006744 <DMA_SetConfig+0x338>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d022      	beq.n	80066ea <DMA_SetConfig+0x2de>
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a27      	ldr	r2, [pc, #156]	@ (8006748 <DMA_SetConfig+0x33c>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d01d      	beq.n	80066ea <DMA_SetConfig+0x2de>
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a26      	ldr	r2, [pc, #152]	@ (800674c <DMA_SetConfig+0x340>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d018      	beq.n	80066ea <DMA_SetConfig+0x2de>
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a24      	ldr	r2, [pc, #144]	@ (8006750 <DMA_SetConfig+0x344>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d013      	beq.n	80066ea <DMA_SetConfig+0x2de>
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a23      	ldr	r2, [pc, #140]	@ (8006754 <DMA_SetConfig+0x348>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d00e      	beq.n	80066ea <DMA_SetConfig+0x2de>
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a21      	ldr	r2, [pc, #132]	@ (8006758 <DMA_SetConfig+0x34c>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d009      	beq.n	80066ea <DMA_SetConfig+0x2de>
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a20      	ldr	r2, [pc, #128]	@ (800675c <DMA_SetConfig+0x350>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d004      	beq.n	80066ea <DMA_SetConfig+0x2de>
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a1e      	ldr	r2, [pc, #120]	@ (8006760 <DMA_SetConfig+0x354>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d101      	bne.n	80066ee <DMA_SetConfig+0x2e2>
 80066ea:	2301      	movs	r3, #1
 80066ec:	e000      	b.n	80066f0 <DMA_SetConfig+0x2e4>
 80066ee:	2300      	movs	r3, #0
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d020      	beq.n	8006736 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066f8:	f003 031f 	and.w	r3, r3, #31
 80066fc:	2201      	movs	r2, #1
 80066fe:	409a      	lsls	r2, r3
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	683a      	ldr	r2, [r7, #0]
 800670a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	2b40      	cmp	r3, #64	@ 0x40
 8006712:	d108      	bne.n	8006726 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	68ba      	ldr	r2, [r7, #8]
 8006722:	60da      	str	r2, [r3, #12]
}
 8006724:	e007      	b.n	8006736 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	68ba      	ldr	r2, [r7, #8]
 800672c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	60da      	str	r2, [r3, #12]
}
 8006736:	bf00      	nop
 8006738:	371c      	adds	r7, #28
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr
 8006742:	bf00      	nop
 8006744:	58025408 	.word	0x58025408
 8006748:	5802541c 	.word	0x5802541c
 800674c:	58025430 	.word	0x58025430
 8006750:	58025444 	.word	0x58025444
 8006754:	58025458 	.word	0x58025458
 8006758:	5802546c 	.word	0x5802546c
 800675c:	58025480 	.word	0x58025480
 8006760:	58025494 	.word	0x58025494

08006764 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006764:	b480      	push	{r7}
 8006766:	b085      	sub	sp, #20
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a42      	ldr	r2, [pc, #264]	@ (800687c <DMA_CalcBaseAndBitshift+0x118>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d04a      	beq.n	800680c <DMA_CalcBaseAndBitshift+0xa8>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a41      	ldr	r2, [pc, #260]	@ (8006880 <DMA_CalcBaseAndBitshift+0x11c>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d045      	beq.n	800680c <DMA_CalcBaseAndBitshift+0xa8>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a3f      	ldr	r2, [pc, #252]	@ (8006884 <DMA_CalcBaseAndBitshift+0x120>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d040      	beq.n	800680c <DMA_CalcBaseAndBitshift+0xa8>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a3e      	ldr	r2, [pc, #248]	@ (8006888 <DMA_CalcBaseAndBitshift+0x124>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d03b      	beq.n	800680c <DMA_CalcBaseAndBitshift+0xa8>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a3c      	ldr	r2, [pc, #240]	@ (800688c <DMA_CalcBaseAndBitshift+0x128>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d036      	beq.n	800680c <DMA_CalcBaseAndBitshift+0xa8>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a3b      	ldr	r2, [pc, #236]	@ (8006890 <DMA_CalcBaseAndBitshift+0x12c>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d031      	beq.n	800680c <DMA_CalcBaseAndBitshift+0xa8>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a39      	ldr	r2, [pc, #228]	@ (8006894 <DMA_CalcBaseAndBitshift+0x130>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d02c      	beq.n	800680c <DMA_CalcBaseAndBitshift+0xa8>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a38      	ldr	r2, [pc, #224]	@ (8006898 <DMA_CalcBaseAndBitshift+0x134>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d027      	beq.n	800680c <DMA_CalcBaseAndBitshift+0xa8>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a36      	ldr	r2, [pc, #216]	@ (800689c <DMA_CalcBaseAndBitshift+0x138>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d022      	beq.n	800680c <DMA_CalcBaseAndBitshift+0xa8>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a35      	ldr	r2, [pc, #212]	@ (80068a0 <DMA_CalcBaseAndBitshift+0x13c>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d01d      	beq.n	800680c <DMA_CalcBaseAndBitshift+0xa8>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a33      	ldr	r2, [pc, #204]	@ (80068a4 <DMA_CalcBaseAndBitshift+0x140>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d018      	beq.n	800680c <DMA_CalcBaseAndBitshift+0xa8>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a32      	ldr	r2, [pc, #200]	@ (80068a8 <DMA_CalcBaseAndBitshift+0x144>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d013      	beq.n	800680c <DMA_CalcBaseAndBitshift+0xa8>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a30      	ldr	r2, [pc, #192]	@ (80068ac <DMA_CalcBaseAndBitshift+0x148>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d00e      	beq.n	800680c <DMA_CalcBaseAndBitshift+0xa8>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a2f      	ldr	r2, [pc, #188]	@ (80068b0 <DMA_CalcBaseAndBitshift+0x14c>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d009      	beq.n	800680c <DMA_CalcBaseAndBitshift+0xa8>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a2d      	ldr	r2, [pc, #180]	@ (80068b4 <DMA_CalcBaseAndBitshift+0x150>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d004      	beq.n	800680c <DMA_CalcBaseAndBitshift+0xa8>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a2c      	ldr	r2, [pc, #176]	@ (80068b8 <DMA_CalcBaseAndBitshift+0x154>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d101      	bne.n	8006810 <DMA_CalcBaseAndBitshift+0xac>
 800680c:	2301      	movs	r3, #1
 800680e:	e000      	b.n	8006812 <DMA_CalcBaseAndBitshift+0xae>
 8006810:	2300      	movs	r3, #0
 8006812:	2b00      	cmp	r3, #0
 8006814:	d024      	beq.n	8006860 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	b2db      	uxtb	r3, r3
 800681c:	3b10      	subs	r3, #16
 800681e:	4a27      	ldr	r2, [pc, #156]	@ (80068bc <DMA_CalcBaseAndBitshift+0x158>)
 8006820:	fba2 2303 	umull	r2, r3, r2, r3
 8006824:	091b      	lsrs	r3, r3, #4
 8006826:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f003 0307 	and.w	r3, r3, #7
 800682e:	4a24      	ldr	r2, [pc, #144]	@ (80068c0 <DMA_CalcBaseAndBitshift+0x15c>)
 8006830:	5cd3      	ldrb	r3, [r2, r3]
 8006832:	461a      	mov	r2, r3
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2b03      	cmp	r3, #3
 800683c:	d908      	bls.n	8006850 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	461a      	mov	r2, r3
 8006844:	4b1f      	ldr	r3, [pc, #124]	@ (80068c4 <DMA_CalcBaseAndBitshift+0x160>)
 8006846:	4013      	ands	r3, r2
 8006848:	1d1a      	adds	r2, r3, #4
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	659a      	str	r2, [r3, #88]	@ 0x58
 800684e:	e00d      	b.n	800686c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	461a      	mov	r2, r3
 8006856:	4b1b      	ldr	r3, [pc, #108]	@ (80068c4 <DMA_CalcBaseAndBitshift+0x160>)
 8006858:	4013      	ands	r3, r2
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	6593      	str	r3, [r2, #88]	@ 0x58
 800685e:	e005      	b.n	800686c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006870:	4618      	mov	r0, r3
 8006872:	3714      	adds	r7, #20
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr
 800687c:	40020010 	.word	0x40020010
 8006880:	40020028 	.word	0x40020028
 8006884:	40020040 	.word	0x40020040
 8006888:	40020058 	.word	0x40020058
 800688c:	40020070 	.word	0x40020070
 8006890:	40020088 	.word	0x40020088
 8006894:	400200a0 	.word	0x400200a0
 8006898:	400200b8 	.word	0x400200b8
 800689c:	40020410 	.word	0x40020410
 80068a0:	40020428 	.word	0x40020428
 80068a4:	40020440 	.word	0x40020440
 80068a8:	40020458 	.word	0x40020458
 80068ac:	40020470 	.word	0x40020470
 80068b0:	40020488 	.word	0x40020488
 80068b4:	400204a0 	.word	0x400204a0
 80068b8:	400204b8 	.word	0x400204b8
 80068bc:	aaaaaaab 	.word	0xaaaaaaab
 80068c0:	0800dd68 	.word	0x0800dd68
 80068c4:	fffffc00 	.word	0xfffffc00

080068c8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b085      	sub	sp, #20
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068d0:	2300      	movs	r3, #0
 80068d2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	699b      	ldr	r3, [r3, #24]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d120      	bne.n	800691e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068e0:	2b03      	cmp	r3, #3
 80068e2:	d858      	bhi.n	8006996 <DMA_CheckFifoParam+0xce>
 80068e4:	a201      	add	r2, pc, #4	@ (adr r2, 80068ec <DMA_CheckFifoParam+0x24>)
 80068e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ea:	bf00      	nop
 80068ec:	080068fd 	.word	0x080068fd
 80068f0:	0800690f 	.word	0x0800690f
 80068f4:	080068fd 	.word	0x080068fd
 80068f8:	08006997 	.word	0x08006997
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006900:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006904:	2b00      	cmp	r3, #0
 8006906:	d048      	beq.n	800699a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800690c:	e045      	b.n	800699a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006912:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006916:	d142      	bne.n	800699e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006918:	2301      	movs	r3, #1
 800691a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800691c:	e03f      	b.n	800699e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	699b      	ldr	r3, [r3, #24]
 8006922:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006926:	d123      	bne.n	8006970 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800692c:	2b03      	cmp	r3, #3
 800692e:	d838      	bhi.n	80069a2 <DMA_CheckFifoParam+0xda>
 8006930:	a201      	add	r2, pc, #4	@ (adr r2, 8006938 <DMA_CheckFifoParam+0x70>)
 8006932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006936:	bf00      	nop
 8006938:	08006949 	.word	0x08006949
 800693c:	0800694f 	.word	0x0800694f
 8006940:	08006949 	.word	0x08006949
 8006944:	08006961 	.word	0x08006961
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	73fb      	strb	r3, [r7, #15]
        break;
 800694c:	e030      	b.n	80069b0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006952:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006956:	2b00      	cmp	r3, #0
 8006958:	d025      	beq.n	80069a6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800695e:	e022      	b.n	80069a6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006964:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006968:	d11f      	bne.n	80069aa <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800696e:	e01c      	b.n	80069aa <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006974:	2b02      	cmp	r3, #2
 8006976:	d902      	bls.n	800697e <DMA_CheckFifoParam+0xb6>
 8006978:	2b03      	cmp	r3, #3
 800697a:	d003      	beq.n	8006984 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800697c:	e018      	b.n	80069b0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	73fb      	strb	r3, [r7, #15]
        break;
 8006982:	e015      	b.n	80069b0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006988:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800698c:	2b00      	cmp	r3, #0
 800698e:	d00e      	beq.n	80069ae <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	73fb      	strb	r3, [r7, #15]
    break;
 8006994:	e00b      	b.n	80069ae <DMA_CheckFifoParam+0xe6>
        break;
 8006996:	bf00      	nop
 8006998:	e00a      	b.n	80069b0 <DMA_CheckFifoParam+0xe8>
        break;
 800699a:	bf00      	nop
 800699c:	e008      	b.n	80069b0 <DMA_CheckFifoParam+0xe8>
        break;
 800699e:	bf00      	nop
 80069a0:	e006      	b.n	80069b0 <DMA_CheckFifoParam+0xe8>
        break;
 80069a2:	bf00      	nop
 80069a4:	e004      	b.n	80069b0 <DMA_CheckFifoParam+0xe8>
        break;
 80069a6:	bf00      	nop
 80069a8:	e002      	b.n	80069b0 <DMA_CheckFifoParam+0xe8>
        break;
 80069aa:	bf00      	nop
 80069ac:	e000      	b.n	80069b0 <DMA_CheckFifoParam+0xe8>
    break;
 80069ae:	bf00      	nop
    }
  }

  return status;
 80069b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3714      	adds	r7, #20
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr
 80069be:	bf00      	nop

080069c0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b085      	sub	sp, #20
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a38      	ldr	r2, [pc, #224]	@ (8006ab4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d022      	beq.n	8006a1e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a36      	ldr	r2, [pc, #216]	@ (8006ab8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d01d      	beq.n	8006a1e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a35      	ldr	r2, [pc, #212]	@ (8006abc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d018      	beq.n	8006a1e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a33      	ldr	r2, [pc, #204]	@ (8006ac0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d013      	beq.n	8006a1e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a32      	ldr	r2, [pc, #200]	@ (8006ac4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d00e      	beq.n	8006a1e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a30      	ldr	r2, [pc, #192]	@ (8006ac8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d009      	beq.n	8006a1e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a2f      	ldr	r2, [pc, #188]	@ (8006acc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d004      	beq.n	8006a1e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a2d      	ldr	r2, [pc, #180]	@ (8006ad0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d101      	bne.n	8006a22 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e000      	b.n	8006a24 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006a22:	2300      	movs	r3, #0
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d01a      	beq.n	8006a5e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	3b08      	subs	r3, #8
 8006a30:	4a28      	ldr	r2, [pc, #160]	@ (8006ad4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006a32:	fba2 2303 	umull	r2, r3, r2, r3
 8006a36:	091b      	lsrs	r3, r3, #4
 8006a38:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006a3a:	68fa      	ldr	r2, [r7, #12]
 8006a3c:	4b26      	ldr	r3, [pc, #152]	@ (8006ad8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006a3e:	4413      	add	r3, r2
 8006a40:	009b      	lsls	r3, r3, #2
 8006a42:	461a      	mov	r2, r3
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	4a24      	ldr	r2, [pc, #144]	@ (8006adc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006a4c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f003 031f 	and.w	r3, r3, #31
 8006a54:	2201      	movs	r2, #1
 8006a56:	409a      	lsls	r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006a5c:	e024      	b.n	8006aa8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	3b10      	subs	r3, #16
 8006a66:	4a1e      	ldr	r2, [pc, #120]	@ (8006ae0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006a68:	fba2 2303 	umull	r2, r3, r2, r3
 8006a6c:	091b      	lsrs	r3, r3, #4
 8006a6e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	4a1c      	ldr	r2, [pc, #112]	@ (8006ae4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d806      	bhi.n	8006a86 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	4a1b      	ldr	r2, [pc, #108]	@ (8006ae8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d902      	bls.n	8006a86 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	3308      	adds	r3, #8
 8006a84:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006a86:	68fa      	ldr	r2, [r7, #12]
 8006a88:	4b18      	ldr	r3, [pc, #96]	@ (8006aec <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006a8a:	4413      	add	r3, r2
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	461a      	mov	r2, r3
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4a16      	ldr	r2, [pc, #88]	@ (8006af0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006a98:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f003 031f 	and.w	r3, r3, #31
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	409a      	lsls	r2, r3
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006aa8:	bf00      	nop
 8006aaa:	3714      	adds	r7, #20
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr
 8006ab4:	58025408 	.word	0x58025408
 8006ab8:	5802541c 	.word	0x5802541c
 8006abc:	58025430 	.word	0x58025430
 8006ac0:	58025444 	.word	0x58025444
 8006ac4:	58025458 	.word	0x58025458
 8006ac8:	5802546c 	.word	0x5802546c
 8006acc:	58025480 	.word	0x58025480
 8006ad0:	58025494 	.word	0x58025494
 8006ad4:	cccccccd 	.word	0xcccccccd
 8006ad8:	16009600 	.word	0x16009600
 8006adc:	58025880 	.word	0x58025880
 8006ae0:	aaaaaaab 	.word	0xaaaaaaab
 8006ae4:	400204b8 	.word	0x400204b8
 8006ae8:	4002040f 	.word	0x4002040f
 8006aec:	10008200 	.word	0x10008200
 8006af0:	40020880 	.word	0x40020880

08006af4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b085      	sub	sp, #20
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d04a      	beq.n	8006ba0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2b08      	cmp	r3, #8
 8006b0e:	d847      	bhi.n	8006ba0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a25      	ldr	r2, [pc, #148]	@ (8006bac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d022      	beq.n	8006b60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a24      	ldr	r2, [pc, #144]	@ (8006bb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d01d      	beq.n	8006b60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a22      	ldr	r2, [pc, #136]	@ (8006bb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d018      	beq.n	8006b60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a21      	ldr	r2, [pc, #132]	@ (8006bb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d013      	beq.n	8006b60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a1f      	ldr	r2, [pc, #124]	@ (8006bbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d00e      	beq.n	8006b60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a1e      	ldr	r2, [pc, #120]	@ (8006bc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d009      	beq.n	8006b60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a1c      	ldr	r2, [pc, #112]	@ (8006bc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d004      	beq.n	8006b60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a1b      	ldr	r2, [pc, #108]	@ (8006bc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d101      	bne.n	8006b64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006b60:	2301      	movs	r3, #1
 8006b62:	e000      	b.n	8006b66 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006b64:	2300      	movs	r3, #0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d00a      	beq.n	8006b80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006b6a:	68fa      	ldr	r2, [r7, #12]
 8006b6c:	4b17      	ldr	r3, [pc, #92]	@ (8006bcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006b6e:	4413      	add	r3, r2
 8006b70:	009b      	lsls	r3, r3, #2
 8006b72:	461a      	mov	r2, r3
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	4a15      	ldr	r2, [pc, #84]	@ (8006bd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006b7c:	671a      	str	r2, [r3, #112]	@ 0x70
 8006b7e:	e009      	b.n	8006b94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006b80:	68fa      	ldr	r2, [r7, #12]
 8006b82:	4b14      	ldr	r3, [pc, #80]	@ (8006bd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006b84:	4413      	add	r3, r2
 8006b86:	009b      	lsls	r3, r3, #2
 8006b88:	461a      	mov	r2, r3
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4a11      	ldr	r2, [pc, #68]	@ (8006bd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006b92:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	3b01      	subs	r3, #1
 8006b98:	2201      	movs	r2, #1
 8006b9a:	409a      	lsls	r2, r3
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8006ba0:	bf00      	nop
 8006ba2:	3714      	adds	r7, #20
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr
 8006bac:	58025408 	.word	0x58025408
 8006bb0:	5802541c 	.word	0x5802541c
 8006bb4:	58025430 	.word	0x58025430
 8006bb8:	58025444 	.word	0x58025444
 8006bbc:	58025458 	.word	0x58025458
 8006bc0:	5802546c 	.word	0x5802546c
 8006bc4:	58025480 	.word	0x58025480
 8006bc8:	58025494 	.word	0x58025494
 8006bcc:	1600963f 	.word	0x1600963f
 8006bd0:	58025940 	.word	0x58025940
 8006bd4:	1000823f 	.word	0x1000823f
 8006bd8:	40020940 	.word	0x40020940

08006bdc <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b087      	sub	sp, #28
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	60f8      	str	r0, [r7, #12]
 8006be4:	460b      	mov	r3, r1
 8006be6:	607a      	str	r2, [r7, #4]
 8006be8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8006bea:	2300      	movs	r3, #0
 8006bec:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d101      	bne.n	8006bf8 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	e00a      	b.n	8006c0e <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8006bf8:	7afb      	ldrb	r3, [r7, #11]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d103      	bne.n	8006c06 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	605a      	str	r2, [r3, #4]
      break;
 8006c04:	e002      	b.n	8006c0c <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	75fb      	strb	r3, [r7, #23]
      break;
 8006c0a:	bf00      	nop
  }

  return status;
 8006c0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	371c      	adds	r7, #28
 8006c12:	46bd      	mov	sp, r7
 8006c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c18:	4770      	bx	lr

08006c1a <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8006c1a:	b480      	push	{r7}
 8006c1c:	b083      	sub	sp, #12
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	6078      	str	r0, [r7, #4]
 8006c22:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d101      	bne.n	8006c2e <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	e003      	b.n	8006c36 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	683a      	ldr	r2, [r7, #0]
 8006c32:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8006c34:	2300      	movs	r3, #0
  }
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	370c      	adds	r7, #12
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr
	...

08006c44 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b086      	sub	sp, #24
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	0c1b      	lsrs	r3, r3, #16
 8006c52:	f003 0303 	and.w	r3, r3, #3
 8006c56:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f003 031f 	and.w	r3, r3, #31
 8006c60:	2201      	movs	r2, #1
 8006c62:	fa02 f303 	lsl.w	r3, r2, r3
 8006c66:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8006c68:	f7fd fece 	bl	8004a08 <HAL_GetCurrentCPUID>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	2b03      	cmp	r3, #3
 8006c70:	d105      	bne.n	8006c7e <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	011a      	lsls	r2, r3, #4
 8006c76:	4b0f      	ldr	r3, [pc, #60]	@ (8006cb4 <HAL_EXTI_IRQHandler+0x70>)
 8006c78:	4413      	add	r3, r2
 8006c7a:	617b      	str	r3, [r7, #20]
 8006c7c:	e004      	b.n	8006c88 <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	011a      	lsls	r2, r3, #4
 8006c82:	4b0d      	ldr	r3, [pc, #52]	@ (8006cb8 <HAL_EXTI_IRQHandler+0x74>)
 8006c84:	4413      	add	r3, r2
 8006c86:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	68fa      	ldr	r2, [r7, #12]
 8006c8e:	4013      	ands	r3, r2
 8006c90:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d009      	beq.n	8006cac <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	68fa      	ldr	r2, [r7, #12]
 8006c9c:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d002      	beq.n	8006cac <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	4798      	blx	r3
    }
  }
}
 8006cac:	bf00      	nop
 8006cae:	3718      	adds	r7, #24
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}
 8006cb4:	58000088 	.word	0x58000088
 8006cb8:	580000c8 	.word	0x580000c8

08006cbc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b089      	sub	sp, #36	@ 0x24
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006cca:	4b89      	ldr	r3, [pc, #548]	@ (8006ef0 <HAL_GPIO_Init+0x234>)
 8006ccc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006cce:	e194      	b.n	8006ffa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	2101      	movs	r1, #1
 8006cd6:	69fb      	ldr	r3, [r7, #28]
 8006cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8006cdc:	4013      	ands	r3, r2
 8006cde:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	f000 8186 	beq.w	8006ff4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	f003 0303 	and.w	r3, r3, #3
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d005      	beq.n	8006d00 <HAL_GPIO_Init+0x44>
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	f003 0303 	and.w	r3, r3, #3
 8006cfc:	2b02      	cmp	r3, #2
 8006cfe:	d130      	bne.n	8006d62 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006d06:	69fb      	ldr	r3, [r7, #28]
 8006d08:	005b      	lsls	r3, r3, #1
 8006d0a:	2203      	movs	r2, #3
 8006d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d10:	43db      	mvns	r3, r3
 8006d12:	69ba      	ldr	r2, [r7, #24]
 8006d14:	4013      	ands	r3, r2
 8006d16:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	68da      	ldr	r2, [r3, #12]
 8006d1c:	69fb      	ldr	r3, [r7, #28]
 8006d1e:	005b      	lsls	r3, r3, #1
 8006d20:	fa02 f303 	lsl.w	r3, r2, r3
 8006d24:	69ba      	ldr	r2, [r7, #24]
 8006d26:	4313      	orrs	r3, r2
 8006d28:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	69ba      	ldr	r2, [r7, #24]
 8006d2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006d36:	2201      	movs	r2, #1
 8006d38:	69fb      	ldr	r3, [r7, #28]
 8006d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d3e:	43db      	mvns	r3, r3
 8006d40:	69ba      	ldr	r2, [r7, #24]
 8006d42:	4013      	ands	r3, r2
 8006d44:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	091b      	lsrs	r3, r3, #4
 8006d4c:	f003 0201 	and.w	r2, r3, #1
 8006d50:	69fb      	ldr	r3, [r7, #28]
 8006d52:	fa02 f303 	lsl.w	r3, r2, r3
 8006d56:	69ba      	ldr	r2, [r7, #24]
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	69ba      	ldr	r2, [r7, #24]
 8006d60:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	f003 0303 	and.w	r3, r3, #3
 8006d6a:	2b03      	cmp	r3, #3
 8006d6c:	d017      	beq.n	8006d9e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	68db      	ldr	r3, [r3, #12]
 8006d72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006d74:	69fb      	ldr	r3, [r7, #28]
 8006d76:	005b      	lsls	r3, r3, #1
 8006d78:	2203      	movs	r2, #3
 8006d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d7e:	43db      	mvns	r3, r3
 8006d80:	69ba      	ldr	r2, [r7, #24]
 8006d82:	4013      	ands	r3, r2
 8006d84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	689a      	ldr	r2, [r3, #8]
 8006d8a:	69fb      	ldr	r3, [r7, #28]
 8006d8c:	005b      	lsls	r3, r3, #1
 8006d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d92:	69ba      	ldr	r2, [r7, #24]
 8006d94:	4313      	orrs	r3, r2
 8006d96:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	69ba      	ldr	r2, [r7, #24]
 8006d9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	f003 0303 	and.w	r3, r3, #3
 8006da6:	2b02      	cmp	r3, #2
 8006da8:	d123      	bne.n	8006df2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006daa:	69fb      	ldr	r3, [r7, #28]
 8006dac:	08da      	lsrs	r2, r3, #3
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	3208      	adds	r2, #8
 8006db2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	f003 0307 	and.w	r3, r3, #7
 8006dbe:	009b      	lsls	r3, r3, #2
 8006dc0:	220f      	movs	r2, #15
 8006dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8006dc6:	43db      	mvns	r3, r3
 8006dc8:	69ba      	ldr	r2, [r7, #24]
 8006dca:	4013      	ands	r3, r2
 8006dcc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	691a      	ldr	r2, [r3, #16]
 8006dd2:	69fb      	ldr	r3, [r7, #28]
 8006dd4:	f003 0307 	and.w	r3, r3, #7
 8006dd8:	009b      	lsls	r3, r3, #2
 8006dda:	fa02 f303 	lsl.w	r3, r2, r3
 8006dde:	69ba      	ldr	r2, [r7, #24]
 8006de0:	4313      	orrs	r3, r2
 8006de2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006de4:	69fb      	ldr	r3, [r7, #28]
 8006de6:	08da      	lsrs	r2, r3, #3
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	3208      	adds	r2, #8
 8006dec:	69b9      	ldr	r1, [r7, #24]
 8006dee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006df8:	69fb      	ldr	r3, [r7, #28]
 8006dfa:	005b      	lsls	r3, r3, #1
 8006dfc:	2203      	movs	r2, #3
 8006dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8006e02:	43db      	mvns	r3, r3
 8006e04:	69ba      	ldr	r2, [r7, #24]
 8006e06:	4013      	ands	r3, r2
 8006e08:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	f003 0203 	and.w	r2, r3, #3
 8006e12:	69fb      	ldr	r3, [r7, #28]
 8006e14:	005b      	lsls	r3, r3, #1
 8006e16:	fa02 f303 	lsl.w	r3, r2, r3
 8006e1a:	69ba      	ldr	r2, [r7, #24]
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	69ba      	ldr	r2, [r7, #24]
 8006e24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	f000 80e0 	beq.w	8006ff4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006e34:	4b2f      	ldr	r3, [pc, #188]	@ (8006ef4 <HAL_GPIO_Init+0x238>)
 8006e36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006e3a:	4a2e      	ldr	r2, [pc, #184]	@ (8006ef4 <HAL_GPIO_Init+0x238>)
 8006e3c:	f043 0302 	orr.w	r3, r3, #2
 8006e40:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006e44:	4b2b      	ldr	r3, [pc, #172]	@ (8006ef4 <HAL_GPIO_Init+0x238>)
 8006e46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006e4a:	f003 0302 	and.w	r3, r3, #2
 8006e4e:	60fb      	str	r3, [r7, #12]
 8006e50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006e52:	4a29      	ldr	r2, [pc, #164]	@ (8006ef8 <HAL_GPIO_Init+0x23c>)
 8006e54:	69fb      	ldr	r3, [r7, #28]
 8006e56:	089b      	lsrs	r3, r3, #2
 8006e58:	3302      	adds	r3, #2
 8006e5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006e60:	69fb      	ldr	r3, [r7, #28]
 8006e62:	f003 0303 	and.w	r3, r3, #3
 8006e66:	009b      	lsls	r3, r3, #2
 8006e68:	220f      	movs	r2, #15
 8006e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e6e:	43db      	mvns	r3, r3
 8006e70:	69ba      	ldr	r2, [r7, #24]
 8006e72:	4013      	ands	r3, r2
 8006e74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	4a20      	ldr	r2, [pc, #128]	@ (8006efc <HAL_GPIO_Init+0x240>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d052      	beq.n	8006f24 <HAL_GPIO_Init+0x268>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	4a1f      	ldr	r2, [pc, #124]	@ (8006f00 <HAL_GPIO_Init+0x244>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d031      	beq.n	8006eea <HAL_GPIO_Init+0x22e>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	4a1e      	ldr	r2, [pc, #120]	@ (8006f04 <HAL_GPIO_Init+0x248>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d02b      	beq.n	8006ee6 <HAL_GPIO_Init+0x22a>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	4a1d      	ldr	r2, [pc, #116]	@ (8006f08 <HAL_GPIO_Init+0x24c>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d025      	beq.n	8006ee2 <HAL_GPIO_Init+0x226>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	4a1c      	ldr	r2, [pc, #112]	@ (8006f0c <HAL_GPIO_Init+0x250>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d01f      	beq.n	8006ede <HAL_GPIO_Init+0x222>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	4a1b      	ldr	r2, [pc, #108]	@ (8006f10 <HAL_GPIO_Init+0x254>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d019      	beq.n	8006eda <HAL_GPIO_Init+0x21e>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	4a1a      	ldr	r2, [pc, #104]	@ (8006f14 <HAL_GPIO_Init+0x258>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d013      	beq.n	8006ed6 <HAL_GPIO_Init+0x21a>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	4a19      	ldr	r2, [pc, #100]	@ (8006f18 <HAL_GPIO_Init+0x25c>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d00d      	beq.n	8006ed2 <HAL_GPIO_Init+0x216>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	4a18      	ldr	r2, [pc, #96]	@ (8006f1c <HAL_GPIO_Init+0x260>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d007      	beq.n	8006ece <HAL_GPIO_Init+0x212>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	4a17      	ldr	r2, [pc, #92]	@ (8006f20 <HAL_GPIO_Init+0x264>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d101      	bne.n	8006eca <HAL_GPIO_Init+0x20e>
 8006ec6:	2309      	movs	r3, #9
 8006ec8:	e02d      	b.n	8006f26 <HAL_GPIO_Init+0x26a>
 8006eca:	230a      	movs	r3, #10
 8006ecc:	e02b      	b.n	8006f26 <HAL_GPIO_Init+0x26a>
 8006ece:	2308      	movs	r3, #8
 8006ed0:	e029      	b.n	8006f26 <HAL_GPIO_Init+0x26a>
 8006ed2:	2307      	movs	r3, #7
 8006ed4:	e027      	b.n	8006f26 <HAL_GPIO_Init+0x26a>
 8006ed6:	2306      	movs	r3, #6
 8006ed8:	e025      	b.n	8006f26 <HAL_GPIO_Init+0x26a>
 8006eda:	2305      	movs	r3, #5
 8006edc:	e023      	b.n	8006f26 <HAL_GPIO_Init+0x26a>
 8006ede:	2304      	movs	r3, #4
 8006ee0:	e021      	b.n	8006f26 <HAL_GPIO_Init+0x26a>
 8006ee2:	2303      	movs	r3, #3
 8006ee4:	e01f      	b.n	8006f26 <HAL_GPIO_Init+0x26a>
 8006ee6:	2302      	movs	r3, #2
 8006ee8:	e01d      	b.n	8006f26 <HAL_GPIO_Init+0x26a>
 8006eea:	2301      	movs	r3, #1
 8006eec:	e01b      	b.n	8006f26 <HAL_GPIO_Init+0x26a>
 8006eee:	bf00      	nop
 8006ef0:	58000080 	.word	0x58000080
 8006ef4:	58024400 	.word	0x58024400
 8006ef8:	58000400 	.word	0x58000400
 8006efc:	58020000 	.word	0x58020000
 8006f00:	58020400 	.word	0x58020400
 8006f04:	58020800 	.word	0x58020800
 8006f08:	58020c00 	.word	0x58020c00
 8006f0c:	58021000 	.word	0x58021000
 8006f10:	58021400 	.word	0x58021400
 8006f14:	58021800 	.word	0x58021800
 8006f18:	58021c00 	.word	0x58021c00
 8006f1c:	58022000 	.word	0x58022000
 8006f20:	58022400 	.word	0x58022400
 8006f24:	2300      	movs	r3, #0
 8006f26:	69fa      	ldr	r2, [r7, #28]
 8006f28:	f002 0203 	and.w	r2, r2, #3
 8006f2c:	0092      	lsls	r2, r2, #2
 8006f2e:	4093      	lsls	r3, r2
 8006f30:	69ba      	ldr	r2, [r7, #24]
 8006f32:	4313      	orrs	r3, r2
 8006f34:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006f36:	4938      	ldr	r1, [pc, #224]	@ (8007018 <HAL_GPIO_Init+0x35c>)
 8006f38:	69fb      	ldr	r3, [r7, #28]
 8006f3a:	089b      	lsrs	r3, r3, #2
 8006f3c:	3302      	adds	r3, #2
 8006f3e:	69ba      	ldr	r2, [r7, #24]
 8006f40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006f44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	43db      	mvns	r3, r3
 8006f50:	69ba      	ldr	r2, [r7, #24]
 8006f52:	4013      	ands	r3, r2
 8006f54:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d003      	beq.n	8006f6a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006f62:	69ba      	ldr	r2, [r7, #24]
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	4313      	orrs	r3, r2
 8006f68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006f6a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006f6e:	69bb      	ldr	r3, [r7, #24]
 8006f70:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006f72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	43db      	mvns	r3, r3
 8006f7e:	69ba      	ldr	r2, [r7, #24]
 8006f80:	4013      	ands	r3, r2
 8006f82:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d003      	beq.n	8006f98 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006f90:	69ba      	ldr	r2, [r7, #24]
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	4313      	orrs	r3, r2
 8006f96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006f98:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006f9c:	69bb      	ldr	r3, [r7, #24]
 8006f9e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	43db      	mvns	r3, r3
 8006faa:	69ba      	ldr	r2, [r7, #24]
 8006fac:	4013      	ands	r3, r2
 8006fae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d003      	beq.n	8006fc4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006fbc:	69ba      	ldr	r2, [r7, #24]
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	69ba      	ldr	r2, [r7, #24]
 8006fc8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	43db      	mvns	r3, r3
 8006fd4:	69ba      	ldr	r2, [r7, #24]
 8006fd6:	4013      	ands	r3, r2
 8006fd8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d003      	beq.n	8006fee <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006fe6:	69ba      	ldr	r2, [r7, #24]
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	4313      	orrs	r3, r2
 8006fec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	69ba      	ldr	r2, [r7, #24]
 8006ff2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006ff4:	69fb      	ldr	r3, [r7, #28]
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	69fb      	ldr	r3, [r7, #28]
 8007000:	fa22 f303 	lsr.w	r3, r2, r3
 8007004:	2b00      	cmp	r3, #0
 8007006:	f47f ae63 	bne.w	8006cd0 <HAL_GPIO_Init+0x14>
  }
}
 800700a:	bf00      	nop
 800700c:	bf00      	nop
 800700e:	3724      	adds	r7, #36	@ 0x24
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr
 8007018:	58000400 	.word	0x58000400

0800701c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800701c:	b480      	push	{r7}
 800701e:	b083      	sub	sp, #12
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	460b      	mov	r3, r1
 8007026:	807b      	strh	r3, [r7, #2]
 8007028:	4613      	mov	r3, r2
 800702a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800702c:	787b      	ldrb	r3, [r7, #1]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d003      	beq.n	800703a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007032:	887a      	ldrh	r2, [r7, #2]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007038:	e003      	b.n	8007042 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800703a:	887b      	ldrh	r3, [r7, #2]
 800703c:	041a      	lsls	r2, r3, #16
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	619a      	str	r2, [r3, #24]
}
 8007042:	bf00      	nop
 8007044:	370c      	adds	r7, #12
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr

0800704e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800704e:	b480      	push	{r7}
 8007050:	b085      	sub	sp, #20
 8007052:	af00      	add	r7, sp, #0
 8007054:	6078      	str	r0, [r7, #4]
 8007056:	460b      	mov	r3, r1
 8007058:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	695b      	ldr	r3, [r3, #20]
 800705e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007060:	887a      	ldrh	r2, [r7, #2]
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	4013      	ands	r3, r2
 8007066:	041a      	lsls	r2, r3, #16
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	43d9      	mvns	r1, r3
 800706c:	887b      	ldrh	r3, [r7, #2]
 800706e:	400b      	ands	r3, r1
 8007070:	431a      	orrs	r2, r3
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	619a      	str	r2, [r3, #24]
}
 8007076:	bf00      	nop
 8007078:	3714      	adds	r7, #20
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr
	...

08007084 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8007084:	b480      	push	{r7}
 8007086:	b083      	sub	sp, #12
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800708c:	4a08      	ldr	r2, [pc, #32]	@ (80070b0 <HAL_HSEM_FastTake+0x2c>)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	3320      	adds	r3, #32
 8007092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007096:	4a07      	ldr	r2, [pc, #28]	@ (80070b4 <HAL_HSEM_FastTake+0x30>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d101      	bne.n	80070a0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800709c:	2300      	movs	r3, #0
 800709e:	e000      	b.n	80070a2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80070a0:	2301      	movs	r3, #1
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	370c      	adds	r7, #12
 80070a6:	46bd      	mov	sp, r7
 80070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ac:	4770      	bx	lr
 80070ae:	bf00      	nop
 80070b0:	58026400 	.word	0x58026400
 80070b4:	80000300 	.word	0x80000300

080070b8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80070c2:	4906      	ldr	r1, [pc, #24]	@ (80070dc <HAL_HSEM_Release+0x24>)
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80070d0:	bf00      	nop
 80070d2:	370c      	adds	r7, #12
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr
 80070dc:	58026400 	.word	0x58026400

080070e0 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b084      	sub	sp, #16
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80070e8:	4b29      	ldr	r3, [pc, #164]	@ (8007190 <HAL_PWREx_ConfigSupply+0xb0>)
 80070ea:	68db      	ldr	r3, [r3, #12]
 80070ec:	f003 0307 	and.w	r3, r3, #7
 80070f0:	2b06      	cmp	r3, #6
 80070f2:	d00a      	beq.n	800710a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80070f4:	4b26      	ldr	r3, [pc, #152]	@ (8007190 <HAL_PWREx_ConfigSupply+0xb0>)
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80070fc:	687a      	ldr	r2, [r7, #4]
 80070fe:	429a      	cmp	r2, r3
 8007100:	d001      	beq.n	8007106 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	e040      	b.n	8007188 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007106:	2300      	movs	r3, #0
 8007108:	e03e      	b.n	8007188 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800710a:	4b21      	ldr	r3, [pc, #132]	@ (8007190 <HAL_PWREx_ConfigSupply+0xb0>)
 800710c:	68db      	ldr	r3, [r3, #12]
 800710e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8007112:	491f      	ldr	r1, [pc, #124]	@ (8007190 <HAL_PWREx_ConfigSupply+0xb0>)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	4313      	orrs	r3, r2
 8007118:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800711a:	f7fb fde3 	bl	8002ce4 <HAL_GetTick>
 800711e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007120:	e009      	b.n	8007136 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007122:	f7fb fddf 	bl	8002ce4 <HAL_GetTick>
 8007126:	4602      	mov	r2, r0
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	1ad3      	subs	r3, r2, r3
 800712c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007130:	d901      	bls.n	8007136 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007132:	2301      	movs	r3, #1
 8007134:	e028      	b.n	8007188 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007136:	4b16      	ldr	r3, [pc, #88]	@ (8007190 <HAL_PWREx_ConfigSupply+0xb0>)
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800713e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007142:	d1ee      	bne.n	8007122 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2b1e      	cmp	r3, #30
 8007148:	d008      	beq.n	800715c <HAL_PWREx_ConfigSupply+0x7c>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2b2e      	cmp	r3, #46	@ 0x2e
 800714e:	d005      	beq.n	800715c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2b1d      	cmp	r3, #29
 8007154:	d002      	beq.n	800715c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2b2d      	cmp	r3, #45	@ 0x2d
 800715a:	d114      	bne.n	8007186 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800715c:	f7fb fdc2 	bl	8002ce4 <HAL_GetTick>
 8007160:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8007162:	e009      	b.n	8007178 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007164:	f7fb fdbe 	bl	8002ce4 <HAL_GetTick>
 8007168:	4602      	mov	r2, r0
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	1ad3      	subs	r3, r2, r3
 800716e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007172:	d901      	bls.n	8007178 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8007174:	2301      	movs	r3, #1
 8007176:	e007      	b.n	8007188 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8007178:	4b05      	ldr	r3, [pc, #20]	@ (8007190 <HAL_PWREx_ConfigSupply+0xb0>)
 800717a:	68db      	ldr	r3, [r3, #12]
 800717c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007180:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007184:	d1ee      	bne.n	8007164 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007186:	2300      	movs	r3, #0
}
 8007188:	4618      	mov	r0, r3
 800718a:	3710      	adds	r7, #16
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}
 8007190:	58024800 	.word	0x58024800

08007194 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b08c      	sub	sp, #48	@ 0x30
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d102      	bne.n	80071a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80071a2:	2301      	movs	r3, #1
 80071a4:	f000 bc48 	b.w	8007a38 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f003 0301 	and.w	r3, r3, #1
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	f000 8088 	beq.w	80072c6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80071b6:	4b99      	ldr	r3, [pc, #612]	@ (800741c <HAL_RCC_OscConfig+0x288>)
 80071b8:	691b      	ldr	r3, [r3, #16]
 80071ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80071be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80071c0:	4b96      	ldr	r3, [pc, #600]	@ (800741c <HAL_RCC_OscConfig+0x288>)
 80071c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80071c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071c8:	2b10      	cmp	r3, #16
 80071ca:	d007      	beq.n	80071dc <HAL_RCC_OscConfig+0x48>
 80071cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071ce:	2b18      	cmp	r3, #24
 80071d0:	d111      	bne.n	80071f6 <HAL_RCC_OscConfig+0x62>
 80071d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071d4:	f003 0303 	and.w	r3, r3, #3
 80071d8:	2b02      	cmp	r3, #2
 80071da:	d10c      	bne.n	80071f6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071dc:	4b8f      	ldr	r3, [pc, #572]	@ (800741c <HAL_RCC_OscConfig+0x288>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d06d      	beq.n	80072c4 <HAL_RCC_OscConfig+0x130>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d169      	bne.n	80072c4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80071f0:	2301      	movs	r3, #1
 80071f2:	f000 bc21 	b.w	8007a38 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071fe:	d106      	bne.n	800720e <HAL_RCC_OscConfig+0x7a>
 8007200:	4b86      	ldr	r3, [pc, #536]	@ (800741c <HAL_RCC_OscConfig+0x288>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a85      	ldr	r2, [pc, #532]	@ (800741c <HAL_RCC_OscConfig+0x288>)
 8007206:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800720a:	6013      	str	r3, [r2, #0]
 800720c:	e02e      	b.n	800726c <HAL_RCC_OscConfig+0xd8>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d10c      	bne.n	8007230 <HAL_RCC_OscConfig+0x9c>
 8007216:	4b81      	ldr	r3, [pc, #516]	@ (800741c <HAL_RCC_OscConfig+0x288>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a80      	ldr	r2, [pc, #512]	@ (800741c <HAL_RCC_OscConfig+0x288>)
 800721c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007220:	6013      	str	r3, [r2, #0]
 8007222:	4b7e      	ldr	r3, [pc, #504]	@ (800741c <HAL_RCC_OscConfig+0x288>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a7d      	ldr	r2, [pc, #500]	@ (800741c <HAL_RCC_OscConfig+0x288>)
 8007228:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800722c:	6013      	str	r3, [r2, #0]
 800722e:	e01d      	b.n	800726c <HAL_RCC_OscConfig+0xd8>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007238:	d10c      	bne.n	8007254 <HAL_RCC_OscConfig+0xc0>
 800723a:	4b78      	ldr	r3, [pc, #480]	@ (800741c <HAL_RCC_OscConfig+0x288>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a77      	ldr	r2, [pc, #476]	@ (800741c <HAL_RCC_OscConfig+0x288>)
 8007240:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007244:	6013      	str	r3, [r2, #0]
 8007246:	4b75      	ldr	r3, [pc, #468]	@ (800741c <HAL_RCC_OscConfig+0x288>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a74      	ldr	r2, [pc, #464]	@ (800741c <HAL_RCC_OscConfig+0x288>)
 800724c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007250:	6013      	str	r3, [r2, #0]
 8007252:	e00b      	b.n	800726c <HAL_RCC_OscConfig+0xd8>
 8007254:	4b71      	ldr	r3, [pc, #452]	@ (800741c <HAL_RCC_OscConfig+0x288>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a70      	ldr	r2, [pc, #448]	@ (800741c <HAL_RCC_OscConfig+0x288>)
 800725a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800725e:	6013      	str	r3, [r2, #0]
 8007260:	4b6e      	ldr	r3, [pc, #440]	@ (800741c <HAL_RCC_OscConfig+0x288>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a6d      	ldr	r2, [pc, #436]	@ (800741c <HAL_RCC_OscConfig+0x288>)
 8007266:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800726a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d013      	beq.n	800729c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007274:	f7fb fd36 	bl	8002ce4 <HAL_GetTick>
 8007278:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800727a:	e008      	b.n	800728e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800727c:	f7fb fd32 	bl	8002ce4 <HAL_GetTick>
 8007280:	4602      	mov	r2, r0
 8007282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007284:	1ad3      	subs	r3, r2, r3
 8007286:	2b64      	cmp	r3, #100	@ 0x64
 8007288:	d901      	bls.n	800728e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800728a:	2303      	movs	r3, #3
 800728c:	e3d4      	b.n	8007a38 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800728e:	4b63      	ldr	r3, [pc, #396]	@ (800741c <HAL_RCC_OscConfig+0x288>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007296:	2b00      	cmp	r3, #0
 8007298:	d0f0      	beq.n	800727c <HAL_RCC_OscConfig+0xe8>
 800729a:	e014      	b.n	80072c6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800729c:	f7fb fd22 	bl	8002ce4 <HAL_GetTick>
 80072a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80072a2:	e008      	b.n	80072b6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80072a4:	f7fb fd1e 	bl	8002ce4 <HAL_GetTick>
 80072a8:	4602      	mov	r2, r0
 80072aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ac:	1ad3      	subs	r3, r2, r3
 80072ae:	2b64      	cmp	r3, #100	@ 0x64
 80072b0:	d901      	bls.n	80072b6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80072b2:	2303      	movs	r3, #3
 80072b4:	e3c0      	b.n	8007a38 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80072b6:	4b59      	ldr	r3, [pc, #356]	@ (800741c <HAL_RCC_OscConfig+0x288>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d1f0      	bne.n	80072a4 <HAL_RCC_OscConfig+0x110>
 80072c2:	e000      	b.n	80072c6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f003 0302 	and.w	r3, r3, #2
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	f000 80ca 	beq.w	8007468 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80072d4:	4b51      	ldr	r3, [pc, #324]	@ (800741c <HAL_RCC_OscConfig+0x288>)
 80072d6:	691b      	ldr	r3, [r3, #16]
 80072d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80072dc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80072de:	4b4f      	ldr	r3, [pc, #316]	@ (800741c <HAL_RCC_OscConfig+0x288>)
 80072e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072e2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80072e4:	6a3b      	ldr	r3, [r7, #32]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d007      	beq.n	80072fa <HAL_RCC_OscConfig+0x166>
 80072ea:	6a3b      	ldr	r3, [r7, #32]
 80072ec:	2b18      	cmp	r3, #24
 80072ee:	d156      	bne.n	800739e <HAL_RCC_OscConfig+0x20a>
 80072f0:	69fb      	ldr	r3, [r7, #28]
 80072f2:	f003 0303 	and.w	r3, r3, #3
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d151      	bne.n	800739e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80072fa:	4b48      	ldr	r3, [pc, #288]	@ (800741c <HAL_RCC_OscConfig+0x288>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f003 0304 	and.w	r3, r3, #4
 8007302:	2b00      	cmp	r3, #0
 8007304:	d005      	beq.n	8007312 <HAL_RCC_OscConfig+0x17e>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	68db      	ldr	r3, [r3, #12]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d101      	bne.n	8007312 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	e392      	b.n	8007a38 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007312:	4b42      	ldr	r3, [pc, #264]	@ (800741c <HAL_RCC_OscConfig+0x288>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f023 0219 	bic.w	r2, r3, #25
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	68db      	ldr	r3, [r3, #12]
 800731e:	493f      	ldr	r1, [pc, #252]	@ (800741c <HAL_RCC_OscConfig+0x288>)
 8007320:	4313      	orrs	r3, r2
 8007322:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007324:	f7fb fcde 	bl	8002ce4 <HAL_GetTick>
 8007328:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800732a:	e008      	b.n	800733e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800732c:	f7fb fcda 	bl	8002ce4 <HAL_GetTick>
 8007330:	4602      	mov	r2, r0
 8007332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007334:	1ad3      	subs	r3, r2, r3
 8007336:	2b02      	cmp	r3, #2
 8007338:	d901      	bls.n	800733e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800733a:	2303      	movs	r3, #3
 800733c:	e37c      	b.n	8007a38 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800733e:	4b37      	ldr	r3, [pc, #220]	@ (800741c <HAL_RCC_OscConfig+0x288>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f003 0304 	and.w	r3, r3, #4
 8007346:	2b00      	cmp	r3, #0
 8007348:	d0f0      	beq.n	800732c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800734a:	f7fb fcd7 	bl	8002cfc <HAL_GetREVID>
 800734e:	4603      	mov	r3, r0
 8007350:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007354:	4293      	cmp	r3, r2
 8007356:	d817      	bhi.n	8007388 <HAL_RCC_OscConfig+0x1f4>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	691b      	ldr	r3, [r3, #16]
 800735c:	2b40      	cmp	r3, #64	@ 0x40
 800735e:	d108      	bne.n	8007372 <HAL_RCC_OscConfig+0x1de>
 8007360:	4b2e      	ldr	r3, [pc, #184]	@ (800741c <HAL_RCC_OscConfig+0x288>)
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007368:	4a2c      	ldr	r2, [pc, #176]	@ (800741c <HAL_RCC_OscConfig+0x288>)
 800736a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800736e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007370:	e07a      	b.n	8007468 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007372:	4b2a      	ldr	r3, [pc, #168]	@ (800741c <HAL_RCC_OscConfig+0x288>)
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	691b      	ldr	r3, [r3, #16]
 800737e:	031b      	lsls	r3, r3, #12
 8007380:	4926      	ldr	r1, [pc, #152]	@ (800741c <HAL_RCC_OscConfig+0x288>)
 8007382:	4313      	orrs	r3, r2
 8007384:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007386:	e06f      	b.n	8007468 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007388:	4b24      	ldr	r3, [pc, #144]	@ (800741c <HAL_RCC_OscConfig+0x288>)
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	691b      	ldr	r3, [r3, #16]
 8007394:	061b      	lsls	r3, r3, #24
 8007396:	4921      	ldr	r1, [pc, #132]	@ (800741c <HAL_RCC_OscConfig+0x288>)
 8007398:	4313      	orrs	r3, r2
 800739a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800739c:	e064      	b.n	8007468 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	68db      	ldr	r3, [r3, #12]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d047      	beq.n	8007436 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80073a6:	4b1d      	ldr	r3, [pc, #116]	@ (800741c <HAL_RCC_OscConfig+0x288>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f023 0219 	bic.w	r2, r3, #25
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	68db      	ldr	r3, [r3, #12]
 80073b2:	491a      	ldr	r1, [pc, #104]	@ (800741c <HAL_RCC_OscConfig+0x288>)
 80073b4:	4313      	orrs	r3, r2
 80073b6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073b8:	f7fb fc94 	bl	8002ce4 <HAL_GetTick>
 80073bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80073be:	e008      	b.n	80073d2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80073c0:	f7fb fc90 	bl	8002ce4 <HAL_GetTick>
 80073c4:	4602      	mov	r2, r0
 80073c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073c8:	1ad3      	subs	r3, r2, r3
 80073ca:	2b02      	cmp	r3, #2
 80073cc:	d901      	bls.n	80073d2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80073ce:	2303      	movs	r3, #3
 80073d0:	e332      	b.n	8007a38 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80073d2:	4b12      	ldr	r3, [pc, #72]	@ (800741c <HAL_RCC_OscConfig+0x288>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f003 0304 	and.w	r3, r3, #4
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d0f0      	beq.n	80073c0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073de:	f7fb fc8d 	bl	8002cfc <HAL_GetREVID>
 80073e2:	4603      	mov	r3, r0
 80073e4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d819      	bhi.n	8007420 <HAL_RCC_OscConfig+0x28c>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	691b      	ldr	r3, [r3, #16]
 80073f0:	2b40      	cmp	r3, #64	@ 0x40
 80073f2:	d108      	bne.n	8007406 <HAL_RCC_OscConfig+0x272>
 80073f4:	4b09      	ldr	r3, [pc, #36]	@ (800741c <HAL_RCC_OscConfig+0x288>)
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80073fc:	4a07      	ldr	r2, [pc, #28]	@ (800741c <HAL_RCC_OscConfig+0x288>)
 80073fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007402:	6053      	str	r3, [r2, #4]
 8007404:	e030      	b.n	8007468 <HAL_RCC_OscConfig+0x2d4>
 8007406:	4b05      	ldr	r3, [pc, #20]	@ (800741c <HAL_RCC_OscConfig+0x288>)
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	691b      	ldr	r3, [r3, #16]
 8007412:	031b      	lsls	r3, r3, #12
 8007414:	4901      	ldr	r1, [pc, #4]	@ (800741c <HAL_RCC_OscConfig+0x288>)
 8007416:	4313      	orrs	r3, r2
 8007418:	604b      	str	r3, [r1, #4]
 800741a:	e025      	b.n	8007468 <HAL_RCC_OscConfig+0x2d4>
 800741c:	58024400 	.word	0x58024400
 8007420:	4b9a      	ldr	r3, [pc, #616]	@ (800768c <HAL_RCC_OscConfig+0x4f8>)
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	691b      	ldr	r3, [r3, #16]
 800742c:	061b      	lsls	r3, r3, #24
 800742e:	4997      	ldr	r1, [pc, #604]	@ (800768c <HAL_RCC_OscConfig+0x4f8>)
 8007430:	4313      	orrs	r3, r2
 8007432:	604b      	str	r3, [r1, #4]
 8007434:	e018      	b.n	8007468 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007436:	4b95      	ldr	r3, [pc, #596]	@ (800768c <HAL_RCC_OscConfig+0x4f8>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a94      	ldr	r2, [pc, #592]	@ (800768c <HAL_RCC_OscConfig+0x4f8>)
 800743c:	f023 0301 	bic.w	r3, r3, #1
 8007440:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007442:	f7fb fc4f 	bl	8002ce4 <HAL_GetTick>
 8007446:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007448:	e008      	b.n	800745c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800744a:	f7fb fc4b 	bl	8002ce4 <HAL_GetTick>
 800744e:	4602      	mov	r2, r0
 8007450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007452:	1ad3      	subs	r3, r2, r3
 8007454:	2b02      	cmp	r3, #2
 8007456:	d901      	bls.n	800745c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007458:	2303      	movs	r3, #3
 800745a:	e2ed      	b.n	8007a38 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800745c:	4b8b      	ldr	r3, [pc, #556]	@ (800768c <HAL_RCC_OscConfig+0x4f8>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f003 0304 	and.w	r3, r3, #4
 8007464:	2b00      	cmp	r3, #0
 8007466:	d1f0      	bne.n	800744a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f003 0310 	and.w	r3, r3, #16
 8007470:	2b00      	cmp	r3, #0
 8007472:	f000 80a9 	beq.w	80075c8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007476:	4b85      	ldr	r3, [pc, #532]	@ (800768c <HAL_RCC_OscConfig+0x4f8>)
 8007478:	691b      	ldr	r3, [r3, #16]
 800747a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800747e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007480:	4b82      	ldr	r3, [pc, #520]	@ (800768c <HAL_RCC_OscConfig+0x4f8>)
 8007482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007484:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007486:	69bb      	ldr	r3, [r7, #24]
 8007488:	2b08      	cmp	r3, #8
 800748a:	d007      	beq.n	800749c <HAL_RCC_OscConfig+0x308>
 800748c:	69bb      	ldr	r3, [r7, #24]
 800748e:	2b18      	cmp	r3, #24
 8007490:	d13a      	bne.n	8007508 <HAL_RCC_OscConfig+0x374>
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	f003 0303 	and.w	r3, r3, #3
 8007498:	2b01      	cmp	r3, #1
 800749a:	d135      	bne.n	8007508 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800749c:	4b7b      	ldr	r3, [pc, #492]	@ (800768c <HAL_RCC_OscConfig+0x4f8>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d005      	beq.n	80074b4 <HAL_RCC_OscConfig+0x320>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	69db      	ldr	r3, [r3, #28]
 80074ac:	2b80      	cmp	r3, #128	@ 0x80
 80074ae:	d001      	beq.n	80074b4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80074b0:	2301      	movs	r3, #1
 80074b2:	e2c1      	b.n	8007a38 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80074b4:	f7fb fc22 	bl	8002cfc <HAL_GetREVID>
 80074b8:	4603      	mov	r3, r0
 80074ba:	f241 0203 	movw	r2, #4099	@ 0x1003
 80074be:	4293      	cmp	r3, r2
 80074c0:	d817      	bhi.n	80074f2 <HAL_RCC_OscConfig+0x35e>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6a1b      	ldr	r3, [r3, #32]
 80074c6:	2b20      	cmp	r3, #32
 80074c8:	d108      	bne.n	80074dc <HAL_RCC_OscConfig+0x348>
 80074ca:	4b70      	ldr	r3, [pc, #448]	@ (800768c <HAL_RCC_OscConfig+0x4f8>)
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80074d2:	4a6e      	ldr	r2, [pc, #440]	@ (800768c <HAL_RCC_OscConfig+0x4f8>)
 80074d4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80074d8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80074da:	e075      	b.n	80075c8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80074dc:	4b6b      	ldr	r3, [pc, #428]	@ (800768c <HAL_RCC_OscConfig+0x4f8>)
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6a1b      	ldr	r3, [r3, #32]
 80074e8:	069b      	lsls	r3, r3, #26
 80074ea:	4968      	ldr	r1, [pc, #416]	@ (800768c <HAL_RCC_OscConfig+0x4f8>)
 80074ec:	4313      	orrs	r3, r2
 80074ee:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80074f0:	e06a      	b.n	80075c8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80074f2:	4b66      	ldr	r3, [pc, #408]	@ (800768c <HAL_RCC_OscConfig+0x4f8>)
 80074f4:	68db      	ldr	r3, [r3, #12]
 80074f6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6a1b      	ldr	r3, [r3, #32]
 80074fe:	061b      	lsls	r3, r3, #24
 8007500:	4962      	ldr	r1, [pc, #392]	@ (800768c <HAL_RCC_OscConfig+0x4f8>)
 8007502:	4313      	orrs	r3, r2
 8007504:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007506:	e05f      	b.n	80075c8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	69db      	ldr	r3, [r3, #28]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d042      	beq.n	8007596 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007510:	4b5e      	ldr	r3, [pc, #376]	@ (800768c <HAL_RCC_OscConfig+0x4f8>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a5d      	ldr	r2, [pc, #372]	@ (800768c <HAL_RCC_OscConfig+0x4f8>)
 8007516:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800751a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800751c:	f7fb fbe2 	bl	8002ce4 <HAL_GetTick>
 8007520:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007522:	e008      	b.n	8007536 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007524:	f7fb fbde 	bl	8002ce4 <HAL_GetTick>
 8007528:	4602      	mov	r2, r0
 800752a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800752c:	1ad3      	subs	r3, r2, r3
 800752e:	2b02      	cmp	r3, #2
 8007530:	d901      	bls.n	8007536 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007532:	2303      	movs	r3, #3
 8007534:	e280      	b.n	8007a38 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007536:	4b55      	ldr	r3, [pc, #340]	@ (800768c <HAL_RCC_OscConfig+0x4f8>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800753e:	2b00      	cmp	r3, #0
 8007540:	d0f0      	beq.n	8007524 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007542:	f7fb fbdb 	bl	8002cfc <HAL_GetREVID>
 8007546:	4603      	mov	r3, r0
 8007548:	f241 0203 	movw	r2, #4099	@ 0x1003
 800754c:	4293      	cmp	r3, r2
 800754e:	d817      	bhi.n	8007580 <HAL_RCC_OscConfig+0x3ec>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6a1b      	ldr	r3, [r3, #32]
 8007554:	2b20      	cmp	r3, #32
 8007556:	d108      	bne.n	800756a <HAL_RCC_OscConfig+0x3d6>
 8007558:	4b4c      	ldr	r3, [pc, #304]	@ (800768c <HAL_RCC_OscConfig+0x4f8>)
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8007560:	4a4a      	ldr	r2, [pc, #296]	@ (800768c <HAL_RCC_OscConfig+0x4f8>)
 8007562:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007566:	6053      	str	r3, [r2, #4]
 8007568:	e02e      	b.n	80075c8 <HAL_RCC_OscConfig+0x434>
 800756a:	4b48      	ldr	r3, [pc, #288]	@ (800768c <HAL_RCC_OscConfig+0x4f8>)
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6a1b      	ldr	r3, [r3, #32]
 8007576:	069b      	lsls	r3, r3, #26
 8007578:	4944      	ldr	r1, [pc, #272]	@ (800768c <HAL_RCC_OscConfig+0x4f8>)
 800757a:	4313      	orrs	r3, r2
 800757c:	604b      	str	r3, [r1, #4]
 800757e:	e023      	b.n	80075c8 <HAL_RCC_OscConfig+0x434>
 8007580:	4b42      	ldr	r3, [pc, #264]	@ (800768c <HAL_RCC_OscConfig+0x4f8>)
 8007582:	68db      	ldr	r3, [r3, #12]
 8007584:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6a1b      	ldr	r3, [r3, #32]
 800758c:	061b      	lsls	r3, r3, #24
 800758e:	493f      	ldr	r1, [pc, #252]	@ (800768c <HAL_RCC_OscConfig+0x4f8>)
 8007590:	4313      	orrs	r3, r2
 8007592:	60cb      	str	r3, [r1, #12]
 8007594:	e018      	b.n	80075c8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007596:	4b3d      	ldr	r3, [pc, #244]	@ (800768c <HAL_RCC_OscConfig+0x4f8>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a3c      	ldr	r2, [pc, #240]	@ (800768c <HAL_RCC_OscConfig+0x4f8>)
 800759c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80075a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075a2:	f7fb fb9f 	bl	8002ce4 <HAL_GetTick>
 80075a6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80075a8:	e008      	b.n	80075bc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80075aa:	f7fb fb9b 	bl	8002ce4 <HAL_GetTick>
 80075ae:	4602      	mov	r2, r0
 80075b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075b2:	1ad3      	subs	r3, r2, r3
 80075b4:	2b02      	cmp	r3, #2
 80075b6:	d901      	bls.n	80075bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80075b8:	2303      	movs	r3, #3
 80075ba:	e23d      	b.n	8007a38 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80075bc:	4b33      	ldr	r3, [pc, #204]	@ (800768c <HAL_RCC_OscConfig+0x4f8>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d1f0      	bne.n	80075aa <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f003 0308 	and.w	r3, r3, #8
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d036      	beq.n	8007642 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	695b      	ldr	r3, [r3, #20]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d019      	beq.n	8007610 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80075dc:	4b2b      	ldr	r3, [pc, #172]	@ (800768c <HAL_RCC_OscConfig+0x4f8>)
 80075de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075e0:	4a2a      	ldr	r2, [pc, #168]	@ (800768c <HAL_RCC_OscConfig+0x4f8>)
 80075e2:	f043 0301 	orr.w	r3, r3, #1
 80075e6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075e8:	f7fb fb7c 	bl	8002ce4 <HAL_GetTick>
 80075ec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80075ee:	e008      	b.n	8007602 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80075f0:	f7fb fb78 	bl	8002ce4 <HAL_GetTick>
 80075f4:	4602      	mov	r2, r0
 80075f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075f8:	1ad3      	subs	r3, r2, r3
 80075fa:	2b02      	cmp	r3, #2
 80075fc:	d901      	bls.n	8007602 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80075fe:	2303      	movs	r3, #3
 8007600:	e21a      	b.n	8007a38 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007602:	4b22      	ldr	r3, [pc, #136]	@ (800768c <HAL_RCC_OscConfig+0x4f8>)
 8007604:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007606:	f003 0302 	and.w	r3, r3, #2
 800760a:	2b00      	cmp	r3, #0
 800760c:	d0f0      	beq.n	80075f0 <HAL_RCC_OscConfig+0x45c>
 800760e:	e018      	b.n	8007642 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007610:	4b1e      	ldr	r3, [pc, #120]	@ (800768c <HAL_RCC_OscConfig+0x4f8>)
 8007612:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007614:	4a1d      	ldr	r2, [pc, #116]	@ (800768c <HAL_RCC_OscConfig+0x4f8>)
 8007616:	f023 0301 	bic.w	r3, r3, #1
 800761a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800761c:	f7fb fb62 	bl	8002ce4 <HAL_GetTick>
 8007620:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007622:	e008      	b.n	8007636 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007624:	f7fb fb5e 	bl	8002ce4 <HAL_GetTick>
 8007628:	4602      	mov	r2, r0
 800762a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800762c:	1ad3      	subs	r3, r2, r3
 800762e:	2b02      	cmp	r3, #2
 8007630:	d901      	bls.n	8007636 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007632:	2303      	movs	r3, #3
 8007634:	e200      	b.n	8007a38 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007636:	4b15      	ldr	r3, [pc, #84]	@ (800768c <HAL_RCC_OscConfig+0x4f8>)
 8007638:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800763a:	f003 0302 	and.w	r3, r3, #2
 800763e:	2b00      	cmp	r3, #0
 8007640:	d1f0      	bne.n	8007624 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f003 0320 	and.w	r3, r3, #32
 800764a:	2b00      	cmp	r3, #0
 800764c:	d039      	beq.n	80076c2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	699b      	ldr	r3, [r3, #24]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d01c      	beq.n	8007690 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007656:	4b0d      	ldr	r3, [pc, #52]	@ (800768c <HAL_RCC_OscConfig+0x4f8>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a0c      	ldr	r2, [pc, #48]	@ (800768c <HAL_RCC_OscConfig+0x4f8>)
 800765c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007660:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007662:	f7fb fb3f 	bl	8002ce4 <HAL_GetTick>
 8007666:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007668:	e008      	b.n	800767c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800766a:	f7fb fb3b 	bl	8002ce4 <HAL_GetTick>
 800766e:	4602      	mov	r2, r0
 8007670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007672:	1ad3      	subs	r3, r2, r3
 8007674:	2b02      	cmp	r3, #2
 8007676:	d901      	bls.n	800767c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007678:	2303      	movs	r3, #3
 800767a:	e1dd      	b.n	8007a38 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800767c:	4b03      	ldr	r3, [pc, #12]	@ (800768c <HAL_RCC_OscConfig+0x4f8>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007684:	2b00      	cmp	r3, #0
 8007686:	d0f0      	beq.n	800766a <HAL_RCC_OscConfig+0x4d6>
 8007688:	e01b      	b.n	80076c2 <HAL_RCC_OscConfig+0x52e>
 800768a:	bf00      	nop
 800768c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007690:	4b9b      	ldr	r3, [pc, #620]	@ (8007900 <HAL_RCC_OscConfig+0x76c>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a9a      	ldr	r2, [pc, #616]	@ (8007900 <HAL_RCC_OscConfig+0x76c>)
 8007696:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800769a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800769c:	f7fb fb22 	bl	8002ce4 <HAL_GetTick>
 80076a0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80076a2:	e008      	b.n	80076b6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80076a4:	f7fb fb1e 	bl	8002ce4 <HAL_GetTick>
 80076a8:	4602      	mov	r2, r0
 80076aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ac:	1ad3      	subs	r3, r2, r3
 80076ae:	2b02      	cmp	r3, #2
 80076b0:	d901      	bls.n	80076b6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80076b2:	2303      	movs	r3, #3
 80076b4:	e1c0      	b.n	8007a38 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80076b6:	4b92      	ldr	r3, [pc, #584]	@ (8007900 <HAL_RCC_OscConfig+0x76c>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d1f0      	bne.n	80076a4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f003 0304 	and.w	r3, r3, #4
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	f000 8081 	beq.w	80077d2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80076d0:	4b8c      	ldr	r3, [pc, #560]	@ (8007904 <HAL_RCC_OscConfig+0x770>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a8b      	ldr	r2, [pc, #556]	@ (8007904 <HAL_RCC_OscConfig+0x770>)
 80076d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80076da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80076dc:	f7fb fb02 	bl	8002ce4 <HAL_GetTick>
 80076e0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80076e2:	e008      	b.n	80076f6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80076e4:	f7fb fafe 	bl	8002ce4 <HAL_GetTick>
 80076e8:	4602      	mov	r2, r0
 80076ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ec:	1ad3      	subs	r3, r2, r3
 80076ee:	2b64      	cmp	r3, #100	@ 0x64
 80076f0:	d901      	bls.n	80076f6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80076f2:	2303      	movs	r3, #3
 80076f4:	e1a0      	b.n	8007a38 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80076f6:	4b83      	ldr	r3, [pc, #524]	@ (8007904 <HAL_RCC_OscConfig+0x770>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d0f0      	beq.n	80076e4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	2b01      	cmp	r3, #1
 8007708:	d106      	bne.n	8007718 <HAL_RCC_OscConfig+0x584>
 800770a:	4b7d      	ldr	r3, [pc, #500]	@ (8007900 <HAL_RCC_OscConfig+0x76c>)
 800770c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800770e:	4a7c      	ldr	r2, [pc, #496]	@ (8007900 <HAL_RCC_OscConfig+0x76c>)
 8007710:	f043 0301 	orr.w	r3, r3, #1
 8007714:	6713      	str	r3, [r2, #112]	@ 0x70
 8007716:	e02d      	b.n	8007774 <HAL_RCC_OscConfig+0x5e0>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d10c      	bne.n	800773a <HAL_RCC_OscConfig+0x5a6>
 8007720:	4b77      	ldr	r3, [pc, #476]	@ (8007900 <HAL_RCC_OscConfig+0x76c>)
 8007722:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007724:	4a76      	ldr	r2, [pc, #472]	@ (8007900 <HAL_RCC_OscConfig+0x76c>)
 8007726:	f023 0301 	bic.w	r3, r3, #1
 800772a:	6713      	str	r3, [r2, #112]	@ 0x70
 800772c:	4b74      	ldr	r3, [pc, #464]	@ (8007900 <HAL_RCC_OscConfig+0x76c>)
 800772e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007730:	4a73      	ldr	r2, [pc, #460]	@ (8007900 <HAL_RCC_OscConfig+0x76c>)
 8007732:	f023 0304 	bic.w	r3, r3, #4
 8007736:	6713      	str	r3, [r2, #112]	@ 0x70
 8007738:	e01c      	b.n	8007774 <HAL_RCC_OscConfig+0x5e0>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	689b      	ldr	r3, [r3, #8]
 800773e:	2b05      	cmp	r3, #5
 8007740:	d10c      	bne.n	800775c <HAL_RCC_OscConfig+0x5c8>
 8007742:	4b6f      	ldr	r3, [pc, #444]	@ (8007900 <HAL_RCC_OscConfig+0x76c>)
 8007744:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007746:	4a6e      	ldr	r2, [pc, #440]	@ (8007900 <HAL_RCC_OscConfig+0x76c>)
 8007748:	f043 0304 	orr.w	r3, r3, #4
 800774c:	6713      	str	r3, [r2, #112]	@ 0x70
 800774e:	4b6c      	ldr	r3, [pc, #432]	@ (8007900 <HAL_RCC_OscConfig+0x76c>)
 8007750:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007752:	4a6b      	ldr	r2, [pc, #428]	@ (8007900 <HAL_RCC_OscConfig+0x76c>)
 8007754:	f043 0301 	orr.w	r3, r3, #1
 8007758:	6713      	str	r3, [r2, #112]	@ 0x70
 800775a:	e00b      	b.n	8007774 <HAL_RCC_OscConfig+0x5e0>
 800775c:	4b68      	ldr	r3, [pc, #416]	@ (8007900 <HAL_RCC_OscConfig+0x76c>)
 800775e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007760:	4a67      	ldr	r2, [pc, #412]	@ (8007900 <HAL_RCC_OscConfig+0x76c>)
 8007762:	f023 0301 	bic.w	r3, r3, #1
 8007766:	6713      	str	r3, [r2, #112]	@ 0x70
 8007768:	4b65      	ldr	r3, [pc, #404]	@ (8007900 <HAL_RCC_OscConfig+0x76c>)
 800776a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800776c:	4a64      	ldr	r2, [pc, #400]	@ (8007900 <HAL_RCC_OscConfig+0x76c>)
 800776e:	f023 0304 	bic.w	r3, r3, #4
 8007772:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d015      	beq.n	80077a8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800777c:	f7fb fab2 	bl	8002ce4 <HAL_GetTick>
 8007780:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007782:	e00a      	b.n	800779a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007784:	f7fb faae 	bl	8002ce4 <HAL_GetTick>
 8007788:	4602      	mov	r2, r0
 800778a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800778c:	1ad3      	subs	r3, r2, r3
 800778e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007792:	4293      	cmp	r3, r2
 8007794:	d901      	bls.n	800779a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8007796:	2303      	movs	r3, #3
 8007798:	e14e      	b.n	8007a38 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800779a:	4b59      	ldr	r3, [pc, #356]	@ (8007900 <HAL_RCC_OscConfig+0x76c>)
 800779c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800779e:	f003 0302 	and.w	r3, r3, #2
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d0ee      	beq.n	8007784 <HAL_RCC_OscConfig+0x5f0>
 80077a6:	e014      	b.n	80077d2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077a8:	f7fb fa9c 	bl	8002ce4 <HAL_GetTick>
 80077ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80077ae:	e00a      	b.n	80077c6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077b0:	f7fb fa98 	bl	8002ce4 <HAL_GetTick>
 80077b4:	4602      	mov	r2, r0
 80077b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077b8:	1ad3      	subs	r3, r2, r3
 80077ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80077be:	4293      	cmp	r3, r2
 80077c0:	d901      	bls.n	80077c6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80077c2:	2303      	movs	r3, #3
 80077c4:	e138      	b.n	8007a38 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80077c6:	4b4e      	ldr	r3, [pc, #312]	@ (8007900 <HAL_RCC_OscConfig+0x76c>)
 80077c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077ca:	f003 0302 	and.w	r3, r3, #2
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d1ee      	bne.n	80077b0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	f000 812d 	beq.w	8007a36 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80077dc:	4b48      	ldr	r3, [pc, #288]	@ (8007900 <HAL_RCC_OscConfig+0x76c>)
 80077de:	691b      	ldr	r3, [r3, #16]
 80077e0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80077e4:	2b18      	cmp	r3, #24
 80077e6:	f000 80bd 	beq.w	8007964 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077ee:	2b02      	cmp	r3, #2
 80077f0:	f040 809e 	bne.w	8007930 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80077f4:	4b42      	ldr	r3, [pc, #264]	@ (8007900 <HAL_RCC_OscConfig+0x76c>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a41      	ldr	r2, [pc, #260]	@ (8007900 <HAL_RCC_OscConfig+0x76c>)
 80077fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80077fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007800:	f7fb fa70 	bl	8002ce4 <HAL_GetTick>
 8007804:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007806:	e008      	b.n	800781a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007808:	f7fb fa6c 	bl	8002ce4 <HAL_GetTick>
 800780c:	4602      	mov	r2, r0
 800780e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007810:	1ad3      	subs	r3, r2, r3
 8007812:	2b02      	cmp	r3, #2
 8007814:	d901      	bls.n	800781a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007816:	2303      	movs	r3, #3
 8007818:	e10e      	b.n	8007a38 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800781a:	4b39      	ldr	r3, [pc, #228]	@ (8007900 <HAL_RCC_OscConfig+0x76c>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007822:	2b00      	cmp	r3, #0
 8007824:	d1f0      	bne.n	8007808 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007826:	4b36      	ldr	r3, [pc, #216]	@ (8007900 <HAL_RCC_OscConfig+0x76c>)
 8007828:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800782a:	4b37      	ldr	r3, [pc, #220]	@ (8007908 <HAL_RCC_OscConfig+0x774>)
 800782c:	4013      	ands	r3, r2
 800782e:	687a      	ldr	r2, [r7, #4]
 8007830:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8007832:	687a      	ldr	r2, [r7, #4]
 8007834:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007836:	0112      	lsls	r2, r2, #4
 8007838:	430a      	orrs	r2, r1
 800783a:	4931      	ldr	r1, [pc, #196]	@ (8007900 <HAL_RCC_OscConfig+0x76c>)
 800783c:	4313      	orrs	r3, r2
 800783e:	628b      	str	r3, [r1, #40]	@ 0x28
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007844:	3b01      	subs	r3, #1
 8007846:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800784e:	3b01      	subs	r3, #1
 8007850:	025b      	lsls	r3, r3, #9
 8007852:	b29b      	uxth	r3, r3
 8007854:	431a      	orrs	r2, r3
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800785a:	3b01      	subs	r3, #1
 800785c:	041b      	lsls	r3, r3, #16
 800785e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007862:	431a      	orrs	r2, r3
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007868:	3b01      	subs	r3, #1
 800786a:	061b      	lsls	r3, r3, #24
 800786c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007870:	4923      	ldr	r1, [pc, #140]	@ (8007900 <HAL_RCC_OscConfig+0x76c>)
 8007872:	4313      	orrs	r3, r2
 8007874:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007876:	4b22      	ldr	r3, [pc, #136]	@ (8007900 <HAL_RCC_OscConfig+0x76c>)
 8007878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800787a:	4a21      	ldr	r2, [pc, #132]	@ (8007900 <HAL_RCC_OscConfig+0x76c>)
 800787c:	f023 0301 	bic.w	r3, r3, #1
 8007880:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007882:	4b1f      	ldr	r3, [pc, #124]	@ (8007900 <HAL_RCC_OscConfig+0x76c>)
 8007884:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007886:	4b21      	ldr	r3, [pc, #132]	@ (800790c <HAL_RCC_OscConfig+0x778>)
 8007888:	4013      	ands	r3, r2
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800788e:	00d2      	lsls	r2, r2, #3
 8007890:	491b      	ldr	r1, [pc, #108]	@ (8007900 <HAL_RCC_OscConfig+0x76c>)
 8007892:	4313      	orrs	r3, r2
 8007894:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007896:	4b1a      	ldr	r3, [pc, #104]	@ (8007900 <HAL_RCC_OscConfig+0x76c>)
 8007898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800789a:	f023 020c 	bic.w	r2, r3, #12
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078a2:	4917      	ldr	r1, [pc, #92]	@ (8007900 <HAL_RCC_OscConfig+0x76c>)
 80078a4:	4313      	orrs	r3, r2
 80078a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80078a8:	4b15      	ldr	r3, [pc, #84]	@ (8007900 <HAL_RCC_OscConfig+0x76c>)
 80078aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078ac:	f023 0202 	bic.w	r2, r3, #2
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078b4:	4912      	ldr	r1, [pc, #72]	@ (8007900 <HAL_RCC_OscConfig+0x76c>)
 80078b6:	4313      	orrs	r3, r2
 80078b8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80078ba:	4b11      	ldr	r3, [pc, #68]	@ (8007900 <HAL_RCC_OscConfig+0x76c>)
 80078bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078be:	4a10      	ldr	r2, [pc, #64]	@ (8007900 <HAL_RCC_OscConfig+0x76c>)
 80078c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078c6:	4b0e      	ldr	r3, [pc, #56]	@ (8007900 <HAL_RCC_OscConfig+0x76c>)
 80078c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078ca:	4a0d      	ldr	r2, [pc, #52]	@ (8007900 <HAL_RCC_OscConfig+0x76c>)
 80078cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80078d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80078d2:	4b0b      	ldr	r3, [pc, #44]	@ (8007900 <HAL_RCC_OscConfig+0x76c>)
 80078d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078d6:	4a0a      	ldr	r2, [pc, #40]	@ (8007900 <HAL_RCC_OscConfig+0x76c>)
 80078d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80078dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80078de:	4b08      	ldr	r3, [pc, #32]	@ (8007900 <HAL_RCC_OscConfig+0x76c>)
 80078e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078e2:	4a07      	ldr	r2, [pc, #28]	@ (8007900 <HAL_RCC_OscConfig+0x76c>)
 80078e4:	f043 0301 	orr.w	r3, r3, #1
 80078e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80078ea:	4b05      	ldr	r3, [pc, #20]	@ (8007900 <HAL_RCC_OscConfig+0x76c>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a04      	ldr	r2, [pc, #16]	@ (8007900 <HAL_RCC_OscConfig+0x76c>)
 80078f0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80078f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078f6:	f7fb f9f5 	bl	8002ce4 <HAL_GetTick>
 80078fa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80078fc:	e011      	b.n	8007922 <HAL_RCC_OscConfig+0x78e>
 80078fe:	bf00      	nop
 8007900:	58024400 	.word	0x58024400
 8007904:	58024800 	.word	0x58024800
 8007908:	fffffc0c 	.word	0xfffffc0c
 800790c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007910:	f7fb f9e8 	bl	8002ce4 <HAL_GetTick>
 8007914:	4602      	mov	r2, r0
 8007916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007918:	1ad3      	subs	r3, r2, r3
 800791a:	2b02      	cmp	r3, #2
 800791c:	d901      	bls.n	8007922 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800791e:	2303      	movs	r3, #3
 8007920:	e08a      	b.n	8007a38 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007922:	4b47      	ldr	r3, [pc, #284]	@ (8007a40 <HAL_RCC_OscConfig+0x8ac>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800792a:	2b00      	cmp	r3, #0
 800792c:	d0f0      	beq.n	8007910 <HAL_RCC_OscConfig+0x77c>
 800792e:	e082      	b.n	8007a36 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007930:	4b43      	ldr	r3, [pc, #268]	@ (8007a40 <HAL_RCC_OscConfig+0x8ac>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a42      	ldr	r2, [pc, #264]	@ (8007a40 <HAL_RCC_OscConfig+0x8ac>)
 8007936:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800793a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800793c:	f7fb f9d2 	bl	8002ce4 <HAL_GetTick>
 8007940:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007942:	e008      	b.n	8007956 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007944:	f7fb f9ce 	bl	8002ce4 <HAL_GetTick>
 8007948:	4602      	mov	r2, r0
 800794a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800794c:	1ad3      	subs	r3, r2, r3
 800794e:	2b02      	cmp	r3, #2
 8007950:	d901      	bls.n	8007956 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007952:	2303      	movs	r3, #3
 8007954:	e070      	b.n	8007a38 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007956:	4b3a      	ldr	r3, [pc, #232]	@ (8007a40 <HAL_RCC_OscConfig+0x8ac>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800795e:	2b00      	cmp	r3, #0
 8007960:	d1f0      	bne.n	8007944 <HAL_RCC_OscConfig+0x7b0>
 8007962:	e068      	b.n	8007a36 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007964:	4b36      	ldr	r3, [pc, #216]	@ (8007a40 <HAL_RCC_OscConfig+0x8ac>)
 8007966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007968:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800796a:	4b35      	ldr	r3, [pc, #212]	@ (8007a40 <HAL_RCC_OscConfig+0x8ac>)
 800796c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800796e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007974:	2b01      	cmp	r3, #1
 8007976:	d031      	beq.n	80079dc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	f003 0203 	and.w	r2, r3, #3
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007982:	429a      	cmp	r2, r3
 8007984:	d12a      	bne.n	80079dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	091b      	lsrs	r3, r3, #4
 800798a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007992:	429a      	cmp	r2, r3
 8007994:	d122      	bne.n	80079dc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079a0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d11a      	bne.n	80079dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	0a5b      	lsrs	r3, r3, #9
 80079aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079b2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80079b4:	429a      	cmp	r2, r3
 80079b6:	d111      	bne.n	80079dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	0c1b      	lsrs	r3, r3, #16
 80079bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079c4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80079c6:	429a      	cmp	r2, r3
 80079c8:	d108      	bne.n	80079dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	0e1b      	lsrs	r3, r3, #24
 80079ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079d6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80079d8:	429a      	cmp	r2, r3
 80079da:	d001      	beq.n	80079e0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80079dc:	2301      	movs	r3, #1
 80079de:	e02b      	b.n	8007a38 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80079e0:	4b17      	ldr	r3, [pc, #92]	@ (8007a40 <HAL_RCC_OscConfig+0x8ac>)
 80079e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079e4:	08db      	lsrs	r3, r3, #3
 80079e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80079ea:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079f0:	693a      	ldr	r2, [r7, #16]
 80079f2:	429a      	cmp	r2, r3
 80079f4:	d01f      	beq.n	8007a36 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80079f6:	4b12      	ldr	r3, [pc, #72]	@ (8007a40 <HAL_RCC_OscConfig+0x8ac>)
 80079f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079fa:	4a11      	ldr	r2, [pc, #68]	@ (8007a40 <HAL_RCC_OscConfig+0x8ac>)
 80079fc:	f023 0301 	bic.w	r3, r3, #1
 8007a00:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007a02:	f7fb f96f 	bl	8002ce4 <HAL_GetTick>
 8007a06:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007a08:	bf00      	nop
 8007a0a:	f7fb f96b 	bl	8002ce4 <HAL_GetTick>
 8007a0e:	4602      	mov	r2, r0
 8007a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d0f9      	beq.n	8007a0a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007a16:	4b0a      	ldr	r3, [pc, #40]	@ (8007a40 <HAL_RCC_OscConfig+0x8ac>)
 8007a18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007a1a:	4b0a      	ldr	r3, [pc, #40]	@ (8007a44 <HAL_RCC_OscConfig+0x8b0>)
 8007a1c:	4013      	ands	r3, r2
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007a22:	00d2      	lsls	r2, r2, #3
 8007a24:	4906      	ldr	r1, [pc, #24]	@ (8007a40 <HAL_RCC_OscConfig+0x8ac>)
 8007a26:	4313      	orrs	r3, r2
 8007a28:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007a2a:	4b05      	ldr	r3, [pc, #20]	@ (8007a40 <HAL_RCC_OscConfig+0x8ac>)
 8007a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a2e:	4a04      	ldr	r2, [pc, #16]	@ (8007a40 <HAL_RCC_OscConfig+0x8ac>)
 8007a30:	f043 0301 	orr.w	r3, r3, #1
 8007a34:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007a36:	2300      	movs	r3, #0
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3730      	adds	r7, #48	@ 0x30
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}
 8007a40:	58024400 	.word	0x58024400
 8007a44:	ffff0007 	.word	0xffff0007

08007a48 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b086      	sub	sp, #24
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d101      	bne.n	8007a5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	e19c      	b.n	8007d96 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007a5c:	4b8a      	ldr	r3, [pc, #552]	@ (8007c88 <HAL_RCC_ClockConfig+0x240>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f003 030f 	and.w	r3, r3, #15
 8007a64:	683a      	ldr	r2, [r7, #0]
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d910      	bls.n	8007a8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a6a:	4b87      	ldr	r3, [pc, #540]	@ (8007c88 <HAL_RCC_ClockConfig+0x240>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f023 020f 	bic.w	r2, r3, #15
 8007a72:	4985      	ldr	r1, [pc, #532]	@ (8007c88 <HAL_RCC_ClockConfig+0x240>)
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	4313      	orrs	r3, r2
 8007a78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a7a:	4b83      	ldr	r3, [pc, #524]	@ (8007c88 <HAL_RCC_ClockConfig+0x240>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f003 030f 	and.w	r3, r3, #15
 8007a82:	683a      	ldr	r2, [r7, #0]
 8007a84:	429a      	cmp	r2, r3
 8007a86:	d001      	beq.n	8007a8c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007a88:	2301      	movs	r3, #1
 8007a8a:	e184      	b.n	8007d96 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f003 0304 	and.w	r3, r3, #4
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d010      	beq.n	8007aba <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	691a      	ldr	r2, [r3, #16]
 8007a9c:	4b7b      	ldr	r3, [pc, #492]	@ (8007c8c <HAL_RCC_ClockConfig+0x244>)
 8007a9e:	699b      	ldr	r3, [r3, #24]
 8007aa0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	d908      	bls.n	8007aba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007aa8:	4b78      	ldr	r3, [pc, #480]	@ (8007c8c <HAL_RCC_ClockConfig+0x244>)
 8007aaa:	699b      	ldr	r3, [r3, #24]
 8007aac:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	691b      	ldr	r3, [r3, #16]
 8007ab4:	4975      	ldr	r1, [pc, #468]	@ (8007c8c <HAL_RCC_ClockConfig+0x244>)
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f003 0308 	and.w	r3, r3, #8
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d010      	beq.n	8007ae8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	695a      	ldr	r2, [r3, #20]
 8007aca:	4b70      	ldr	r3, [pc, #448]	@ (8007c8c <HAL_RCC_ClockConfig+0x244>)
 8007acc:	69db      	ldr	r3, [r3, #28]
 8007ace:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	d908      	bls.n	8007ae8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007ad6:	4b6d      	ldr	r3, [pc, #436]	@ (8007c8c <HAL_RCC_ClockConfig+0x244>)
 8007ad8:	69db      	ldr	r3, [r3, #28]
 8007ada:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	695b      	ldr	r3, [r3, #20]
 8007ae2:	496a      	ldr	r1, [pc, #424]	@ (8007c8c <HAL_RCC_ClockConfig+0x244>)
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f003 0310 	and.w	r3, r3, #16
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d010      	beq.n	8007b16 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	699a      	ldr	r2, [r3, #24]
 8007af8:	4b64      	ldr	r3, [pc, #400]	@ (8007c8c <HAL_RCC_ClockConfig+0x244>)
 8007afa:	69db      	ldr	r3, [r3, #28]
 8007afc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d908      	bls.n	8007b16 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007b04:	4b61      	ldr	r3, [pc, #388]	@ (8007c8c <HAL_RCC_ClockConfig+0x244>)
 8007b06:	69db      	ldr	r3, [r3, #28]
 8007b08:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	699b      	ldr	r3, [r3, #24]
 8007b10:	495e      	ldr	r1, [pc, #376]	@ (8007c8c <HAL_RCC_ClockConfig+0x244>)
 8007b12:	4313      	orrs	r3, r2
 8007b14:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f003 0320 	and.w	r3, r3, #32
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d010      	beq.n	8007b44 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	69da      	ldr	r2, [r3, #28]
 8007b26:	4b59      	ldr	r3, [pc, #356]	@ (8007c8c <HAL_RCC_ClockConfig+0x244>)
 8007b28:	6a1b      	ldr	r3, [r3, #32]
 8007b2a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007b2e:	429a      	cmp	r2, r3
 8007b30:	d908      	bls.n	8007b44 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007b32:	4b56      	ldr	r3, [pc, #344]	@ (8007c8c <HAL_RCC_ClockConfig+0x244>)
 8007b34:	6a1b      	ldr	r3, [r3, #32]
 8007b36:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	69db      	ldr	r3, [r3, #28]
 8007b3e:	4953      	ldr	r1, [pc, #332]	@ (8007c8c <HAL_RCC_ClockConfig+0x244>)
 8007b40:	4313      	orrs	r3, r2
 8007b42:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f003 0302 	and.w	r3, r3, #2
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d010      	beq.n	8007b72 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	68da      	ldr	r2, [r3, #12]
 8007b54:	4b4d      	ldr	r3, [pc, #308]	@ (8007c8c <HAL_RCC_ClockConfig+0x244>)
 8007b56:	699b      	ldr	r3, [r3, #24]
 8007b58:	f003 030f 	and.w	r3, r3, #15
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d908      	bls.n	8007b72 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b60:	4b4a      	ldr	r3, [pc, #296]	@ (8007c8c <HAL_RCC_ClockConfig+0x244>)
 8007b62:	699b      	ldr	r3, [r3, #24]
 8007b64:	f023 020f 	bic.w	r2, r3, #15
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	68db      	ldr	r3, [r3, #12]
 8007b6c:	4947      	ldr	r1, [pc, #284]	@ (8007c8c <HAL_RCC_ClockConfig+0x244>)
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f003 0301 	and.w	r3, r3, #1
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d055      	beq.n	8007c2a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007b7e:	4b43      	ldr	r3, [pc, #268]	@ (8007c8c <HAL_RCC_ClockConfig+0x244>)
 8007b80:	699b      	ldr	r3, [r3, #24]
 8007b82:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	689b      	ldr	r3, [r3, #8]
 8007b8a:	4940      	ldr	r1, [pc, #256]	@ (8007c8c <HAL_RCC_ClockConfig+0x244>)
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	2b02      	cmp	r3, #2
 8007b96:	d107      	bne.n	8007ba8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007b98:	4b3c      	ldr	r3, [pc, #240]	@ (8007c8c <HAL_RCC_ClockConfig+0x244>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d121      	bne.n	8007be8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	e0f6      	b.n	8007d96 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	685b      	ldr	r3, [r3, #4]
 8007bac:	2b03      	cmp	r3, #3
 8007bae:	d107      	bne.n	8007bc0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007bb0:	4b36      	ldr	r3, [pc, #216]	@ (8007c8c <HAL_RCC_ClockConfig+0x244>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d115      	bne.n	8007be8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	e0ea      	b.n	8007d96 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d107      	bne.n	8007bd8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007bc8:	4b30      	ldr	r3, [pc, #192]	@ (8007c8c <HAL_RCC_ClockConfig+0x244>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d109      	bne.n	8007be8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	e0de      	b.n	8007d96 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007bd8:	4b2c      	ldr	r3, [pc, #176]	@ (8007c8c <HAL_RCC_ClockConfig+0x244>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f003 0304 	and.w	r3, r3, #4
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d101      	bne.n	8007be8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007be4:	2301      	movs	r3, #1
 8007be6:	e0d6      	b.n	8007d96 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007be8:	4b28      	ldr	r3, [pc, #160]	@ (8007c8c <HAL_RCC_ClockConfig+0x244>)
 8007bea:	691b      	ldr	r3, [r3, #16]
 8007bec:	f023 0207 	bic.w	r2, r3, #7
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	4925      	ldr	r1, [pc, #148]	@ (8007c8c <HAL_RCC_ClockConfig+0x244>)
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bfa:	f7fb f873 	bl	8002ce4 <HAL_GetTick>
 8007bfe:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c00:	e00a      	b.n	8007c18 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c02:	f7fb f86f 	bl	8002ce4 <HAL_GetTick>
 8007c06:	4602      	mov	r2, r0
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	1ad3      	subs	r3, r2, r3
 8007c0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d901      	bls.n	8007c18 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007c14:	2303      	movs	r3, #3
 8007c16:	e0be      	b.n	8007d96 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c18:	4b1c      	ldr	r3, [pc, #112]	@ (8007c8c <HAL_RCC_ClockConfig+0x244>)
 8007c1a:	691b      	ldr	r3, [r3, #16]
 8007c1c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	00db      	lsls	r3, r3, #3
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d1eb      	bne.n	8007c02 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f003 0302 	and.w	r3, r3, #2
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d010      	beq.n	8007c58 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	68da      	ldr	r2, [r3, #12]
 8007c3a:	4b14      	ldr	r3, [pc, #80]	@ (8007c8c <HAL_RCC_ClockConfig+0x244>)
 8007c3c:	699b      	ldr	r3, [r3, #24]
 8007c3e:	f003 030f 	and.w	r3, r3, #15
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d208      	bcs.n	8007c58 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c46:	4b11      	ldr	r3, [pc, #68]	@ (8007c8c <HAL_RCC_ClockConfig+0x244>)
 8007c48:	699b      	ldr	r3, [r3, #24]
 8007c4a:	f023 020f 	bic.w	r2, r3, #15
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	68db      	ldr	r3, [r3, #12]
 8007c52:	490e      	ldr	r1, [pc, #56]	@ (8007c8c <HAL_RCC_ClockConfig+0x244>)
 8007c54:	4313      	orrs	r3, r2
 8007c56:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007c58:	4b0b      	ldr	r3, [pc, #44]	@ (8007c88 <HAL_RCC_ClockConfig+0x240>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f003 030f 	and.w	r3, r3, #15
 8007c60:	683a      	ldr	r2, [r7, #0]
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d214      	bcs.n	8007c90 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c66:	4b08      	ldr	r3, [pc, #32]	@ (8007c88 <HAL_RCC_ClockConfig+0x240>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f023 020f 	bic.w	r2, r3, #15
 8007c6e:	4906      	ldr	r1, [pc, #24]	@ (8007c88 <HAL_RCC_ClockConfig+0x240>)
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	4313      	orrs	r3, r2
 8007c74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c76:	4b04      	ldr	r3, [pc, #16]	@ (8007c88 <HAL_RCC_ClockConfig+0x240>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f003 030f 	and.w	r3, r3, #15
 8007c7e:	683a      	ldr	r2, [r7, #0]
 8007c80:	429a      	cmp	r2, r3
 8007c82:	d005      	beq.n	8007c90 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007c84:	2301      	movs	r3, #1
 8007c86:	e086      	b.n	8007d96 <HAL_RCC_ClockConfig+0x34e>
 8007c88:	52002000 	.word	0x52002000
 8007c8c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f003 0304 	and.w	r3, r3, #4
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d010      	beq.n	8007cbe <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	691a      	ldr	r2, [r3, #16]
 8007ca0:	4b3f      	ldr	r3, [pc, #252]	@ (8007da0 <HAL_RCC_ClockConfig+0x358>)
 8007ca2:	699b      	ldr	r3, [r3, #24]
 8007ca4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d208      	bcs.n	8007cbe <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007cac:	4b3c      	ldr	r3, [pc, #240]	@ (8007da0 <HAL_RCC_ClockConfig+0x358>)
 8007cae:	699b      	ldr	r3, [r3, #24]
 8007cb0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	691b      	ldr	r3, [r3, #16]
 8007cb8:	4939      	ldr	r1, [pc, #228]	@ (8007da0 <HAL_RCC_ClockConfig+0x358>)
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f003 0308 	and.w	r3, r3, #8
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d010      	beq.n	8007cec <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	695a      	ldr	r2, [r3, #20]
 8007cce:	4b34      	ldr	r3, [pc, #208]	@ (8007da0 <HAL_RCC_ClockConfig+0x358>)
 8007cd0:	69db      	ldr	r3, [r3, #28]
 8007cd2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	d208      	bcs.n	8007cec <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007cda:	4b31      	ldr	r3, [pc, #196]	@ (8007da0 <HAL_RCC_ClockConfig+0x358>)
 8007cdc:	69db      	ldr	r3, [r3, #28]
 8007cde:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	695b      	ldr	r3, [r3, #20]
 8007ce6:	492e      	ldr	r1, [pc, #184]	@ (8007da0 <HAL_RCC_ClockConfig+0x358>)
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f003 0310 	and.w	r3, r3, #16
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d010      	beq.n	8007d1a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	699a      	ldr	r2, [r3, #24]
 8007cfc:	4b28      	ldr	r3, [pc, #160]	@ (8007da0 <HAL_RCC_ClockConfig+0x358>)
 8007cfe:	69db      	ldr	r3, [r3, #28]
 8007d00:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d208      	bcs.n	8007d1a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007d08:	4b25      	ldr	r3, [pc, #148]	@ (8007da0 <HAL_RCC_ClockConfig+0x358>)
 8007d0a:	69db      	ldr	r3, [r3, #28]
 8007d0c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	699b      	ldr	r3, [r3, #24]
 8007d14:	4922      	ldr	r1, [pc, #136]	@ (8007da0 <HAL_RCC_ClockConfig+0x358>)
 8007d16:	4313      	orrs	r3, r2
 8007d18:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f003 0320 	and.w	r3, r3, #32
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d010      	beq.n	8007d48 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	69da      	ldr	r2, [r3, #28]
 8007d2a:	4b1d      	ldr	r3, [pc, #116]	@ (8007da0 <HAL_RCC_ClockConfig+0x358>)
 8007d2c:	6a1b      	ldr	r3, [r3, #32]
 8007d2e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007d32:	429a      	cmp	r2, r3
 8007d34:	d208      	bcs.n	8007d48 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007d36:	4b1a      	ldr	r3, [pc, #104]	@ (8007da0 <HAL_RCC_ClockConfig+0x358>)
 8007d38:	6a1b      	ldr	r3, [r3, #32]
 8007d3a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	69db      	ldr	r3, [r3, #28]
 8007d42:	4917      	ldr	r1, [pc, #92]	@ (8007da0 <HAL_RCC_ClockConfig+0x358>)
 8007d44:	4313      	orrs	r3, r2
 8007d46:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007d48:	f000 f834 	bl	8007db4 <HAL_RCC_GetSysClockFreq>
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	4b14      	ldr	r3, [pc, #80]	@ (8007da0 <HAL_RCC_ClockConfig+0x358>)
 8007d50:	699b      	ldr	r3, [r3, #24]
 8007d52:	0a1b      	lsrs	r3, r3, #8
 8007d54:	f003 030f 	and.w	r3, r3, #15
 8007d58:	4912      	ldr	r1, [pc, #72]	@ (8007da4 <HAL_RCC_ClockConfig+0x35c>)
 8007d5a:	5ccb      	ldrb	r3, [r1, r3]
 8007d5c:	f003 031f 	and.w	r3, r3, #31
 8007d60:	fa22 f303 	lsr.w	r3, r2, r3
 8007d64:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007d66:	4b0e      	ldr	r3, [pc, #56]	@ (8007da0 <HAL_RCC_ClockConfig+0x358>)
 8007d68:	699b      	ldr	r3, [r3, #24]
 8007d6a:	f003 030f 	and.w	r3, r3, #15
 8007d6e:	4a0d      	ldr	r2, [pc, #52]	@ (8007da4 <HAL_RCC_ClockConfig+0x35c>)
 8007d70:	5cd3      	ldrb	r3, [r2, r3]
 8007d72:	f003 031f 	and.w	r3, r3, #31
 8007d76:	693a      	ldr	r2, [r7, #16]
 8007d78:	fa22 f303 	lsr.w	r3, r2, r3
 8007d7c:	4a0a      	ldr	r2, [pc, #40]	@ (8007da8 <HAL_RCC_ClockConfig+0x360>)
 8007d7e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007d80:	4a0a      	ldr	r2, [pc, #40]	@ (8007dac <HAL_RCC_ClockConfig+0x364>)
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007d86:	4b0a      	ldr	r3, [pc, #40]	@ (8007db0 <HAL_RCC_ClockConfig+0x368>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f7fa ff60 	bl	8002c50 <HAL_InitTick>
 8007d90:	4603      	mov	r3, r0
 8007d92:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3718      	adds	r7, #24
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
 8007d9e:	bf00      	nop
 8007da0:	58024400 	.word	0x58024400
 8007da4:	0800dd4c 	.word	0x0800dd4c
 8007da8:	24000004 	.word	0x24000004
 8007dac:	24000000 	.word	0x24000000
 8007db0:	24000024 	.word	0x24000024

08007db4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b089      	sub	sp, #36	@ 0x24
 8007db8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007dba:	4bb3      	ldr	r3, [pc, #716]	@ (8008088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007dbc:	691b      	ldr	r3, [r3, #16]
 8007dbe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007dc2:	2b18      	cmp	r3, #24
 8007dc4:	f200 8155 	bhi.w	8008072 <HAL_RCC_GetSysClockFreq+0x2be>
 8007dc8:	a201      	add	r2, pc, #4	@ (adr r2, 8007dd0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dce:	bf00      	nop
 8007dd0:	08007e35 	.word	0x08007e35
 8007dd4:	08008073 	.word	0x08008073
 8007dd8:	08008073 	.word	0x08008073
 8007ddc:	08008073 	.word	0x08008073
 8007de0:	08008073 	.word	0x08008073
 8007de4:	08008073 	.word	0x08008073
 8007de8:	08008073 	.word	0x08008073
 8007dec:	08008073 	.word	0x08008073
 8007df0:	08007e5b 	.word	0x08007e5b
 8007df4:	08008073 	.word	0x08008073
 8007df8:	08008073 	.word	0x08008073
 8007dfc:	08008073 	.word	0x08008073
 8007e00:	08008073 	.word	0x08008073
 8007e04:	08008073 	.word	0x08008073
 8007e08:	08008073 	.word	0x08008073
 8007e0c:	08008073 	.word	0x08008073
 8007e10:	08007e61 	.word	0x08007e61
 8007e14:	08008073 	.word	0x08008073
 8007e18:	08008073 	.word	0x08008073
 8007e1c:	08008073 	.word	0x08008073
 8007e20:	08008073 	.word	0x08008073
 8007e24:	08008073 	.word	0x08008073
 8007e28:	08008073 	.word	0x08008073
 8007e2c:	08008073 	.word	0x08008073
 8007e30:	08007e67 	.word	0x08007e67
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e34:	4b94      	ldr	r3, [pc, #592]	@ (8008088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f003 0320 	and.w	r3, r3, #32
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d009      	beq.n	8007e54 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007e40:	4b91      	ldr	r3, [pc, #580]	@ (8008088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	08db      	lsrs	r3, r3, #3
 8007e46:	f003 0303 	and.w	r3, r3, #3
 8007e4a:	4a90      	ldr	r2, [pc, #576]	@ (800808c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007e4c:	fa22 f303 	lsr.w	r3, r2, r3
 8007e50:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007e52:	e111      	b.n	8008078 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007e54:	4b8d      	ldr	r3, [pc, #564]	@ (800808c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007e56:	61bb      	str	r3, [r7, #24]
      break;
 8007e58:	e10e      	b.n	8008078 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007e5a:	4b8d      	ldr	r3, [pc, #564]	@ (8008090 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007e5c:	61bb      	str	r3, [r7, #24]
      break;
 8007e5e:	e10b      	b.n	8008078 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007e60:	4b8c      	ldr	r3, [pc, #560]	@ (8008094 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007e62:	61bb      	str	r3, [r7, #24]
      break;
 8007e64:	e108      	b.n	8008078 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007e66:	4b88      	ldr	r3, [pc, #544]	@ (8008088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e6a:	f003 0303 	and.w	r3, r3, #3
 8007e6e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007e70:	4b85      	ldr	r3, [pc, #532]	@ (8008088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e74:	091b      	lsrs	r3, r3, #4
 8007e76:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007e7a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007e7c:	4b82      	ldr	r3, [pc, #520]	@ (8008088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e80:	f003 0301 	and.w	r3, r3, #1
 8007e84:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007e86:	4b80      	ldr	r3, [pc, #512]	@ (8008088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e8a:	08db      	lsrs	r3, r3, #3
 8007e8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007e90:	68fa      	ldr	r2, [r7, #12]
 8007e92:	fb02 f303 	mul.w	r3, r2, r3
 8007e96:	ee07 3a90 	vmov	s15, r3
 8007e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e9e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	f000 80e1 	beq.w	800806c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	2b02      	cmp	r3, #2
 8007eae:	f000 8083 	beq.w	8007fb8 <HAL_RCC_GetSysClockFreq+0x204>
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	2b02      	cmp	r3, #2
 8007eb6:	f200 80a1 	bhi.w	8007ffc <HAL_RCC_GetSysClockFreq+0x248>
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d003      	beq.n	8007ec8 <HAL_RCC_GetSysClockFreq+0x114>
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	2b01      	cmp	r3, #1
 8007ec4:	d056      	beq.n	8007f74 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007ec6:	e099      	b.n	8007ffc <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ec8:	4b6f      	ldr	r3, [pc, #444]	@ (8008088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f003 0320 	and.w	r3, r3, #32
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d02d      	beq.n	8007f30 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007ed4:	4b6c      	ldr	r3, [pc, #432]	@ (8008088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	08db      	lsrs	r3, r3, #3
 8007eda:	f003 0303 	and.w	r3, r3, #3
 8007ede:	4a6b      	ldr	r2, [pc, #428]	@ (800808c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8007ee4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	ee07 3a90 	vmov	s15, r3
 8007eec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	ee07 3a90 	vmov	s15, r3
 8007ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007efa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007efe:	4b62      	ldr	r3, [pc, #392]	@ (8008088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f06:	ee07 3a90 	vmov	s15, r3
 8007f0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007f12:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8008098 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007f16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f2a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007f2e:	e087      	b.n	8008040 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	ee07 3a90 	vmov	s15, r3
 8007f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f3a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800809c <HAL_RCC_GetSysClockFreq+0x2e8>
 8007f3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f42:	4b51      	ldr	r3, [pc, #324]	@ (8008088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f4a:	ee07 3a90 	vmov	s15, r3
 8007f4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f52:	ed97 6a02 	vldr	s12, [r7, #8]
 8007f56:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8008098 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007f5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f6e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007f72:	e065      	b.n	8008040 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	ee07 3a90 	vmov	s15, r3
 8007f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f7e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80080a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007f82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f86:	4b40      	ldr	r3, [pc, #256]	@ (8008088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f8e:	ee07 3a90 	vmov	s15, r3
 8007f92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f96:	ed97 6a02 	vldr	s12, [r7, #8]
 8007f9a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008098 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007f9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fa6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007faa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fb2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007fb6:	e043      	b.n	8008040 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	ee07 3a90 	vmov	s15, r3
 8007fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fc2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80080a4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007fc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fca:	4b2f      	ldr	r3, [pc, #188]	@ (8008088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fd2:	ee07 3a90 	vmov	s15, r3
 8007fd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fda:	ed97 6a02 	vldr	s12, [r7, #8]
 8007fde:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8008098 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007fe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007fee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ff6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007ffa:	e021      	b.n	8008040 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	ee07 3a90 	vmov	s15, r3
 8008002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008006:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80080a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800800a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800800e:	4b1e      	ldr	r3, [pc, #120]	@ (8008088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008012:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008016:	ee07 3a90 	vmov	s15, r3
 800801a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800801e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008022:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8008098 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008026:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800802a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800802e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008032:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008036:	ee67 7a27 	vmul.f32	s15, s14, s15
 800803a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800803e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008040:	4b11      	ldr	r3, [pc, #68]	@ (8008088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008044:	0a5b      	lsrs	r3, r3, #9
 8008046:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800804a:	3301      	adds	r3, #1
 800804c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	ee07 3a90 	vmov	s15, r3
 8008054:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008058:	edd7 6a07 	vldr	s13, [r7, #28]
 800805c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008060:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008064:	ee17 3a90 	vmov	r3, s15
 8008068:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800806a:	e005      	b.n	8008078 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800806c:	2300      	movs	r3, #0
 800806e:	61bb      	str	r3, [r7, #24]
      break;
 8008070:	e002      	b.n	8008078 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008072:	4b07      	ldr	r3, [pc, #28]	@ (8008090 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008074:	61bb      	str	r3, [r7, #24]
      break;
 8008076:	bf00      	nop
  }

  return sysclockfreq;
 8008078:	69bb      	ldr	r3, [r7, #24]
}
 800807a:	4618      	mov	r0, r3
 800807c:	3724      	adds	r7, #36	@ 0x24
 800807e:	46bd      	mov	sp, r7
 8008080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008084:	4770      	bx	lr
 8008086:	bf00      	nop
 8008088:	58024400 	.word	0x58024400
 800808c:	03d09000 	.word	0x03d09000
 8008090:	003d0900 	.word	0x003d0900
 8008094:	017d7840 	.word	0x017d7840
 8008098:	46000000 	.word	0x46000000
 800809c:	4c742400 	.word	0x4c742400
 80080a0:	4a742400 	.word	0x4a742400
 80080a4:	4bbebc20 	.word	0x4bbebc20

080080a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b082      	sub	sp, #8
 80080ac:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80080ae:	f7ff fe81 	bl	8007db4 <HAL_RCC_GetSysClockFreq>
 80080b2:	4602      	mov	r2, r0
 80080b4:	4b10      	ldr	r3, [pc, #64]	@ (80080f8 <HAL_RCC_GetHCLKFreq+0x50>)
 80080b6:	699b      	ldr	r3, [r3, #24]
 80080b8:	0a1b      	lsrs	r3, r3, #8
 80080ba:	f003 030f 	and.w	r3, r3, #15
 80080be:	490f      	ldr	r1, [pc, #60]	@ (80080fc <HAL_RCC_GetHCLKFreq+0x54>)
 80080c0:	5ccb      	ldrb	r3, [r1, r3]
 80080c2:	f003 031f 	and.w	r3, r3, #31
 80080c6:	fa22 f303 	lsr.w	r3, r2, r3
 80080ca:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80080cc:	4b0a      	ldr	r3, [pc, #40]	@ (80080f8 <HAL_RCC_GetHCLKFreq+0x50>)
 80080ce:	699b      	ldr	r3, [r3, #24]
 80080d0:	f003 030f 	and.w	r3, r3, #15
 80080d4:	4a09      	ldr	r2, [pc, #36]	@ (80080fc <HAL_RCC_GetHCLKFreq+0x54>)
 80080d6:	5cd3      	ldrb	r3, [r2, r3]
 80080d8:	f003 031f 	and.w	r3, r3, #31
 80080dc:	687a      	ldr	r2, [r7, #4]
 80080de:	fa22 f303 	lsr.w	r3, r2, r3
 80080e2:	4a07      	ldr	r2, [pc, #28]	@ (8008100 <HAL_RCC_GetHCLKFreq+0x58>)
 80080e4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80080e6:	4a07      	ldr	r2, [pc, #28]	@ (8008104 <HAL_RCC_GetHCLKFreq+0x5c>)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80080ec:	4b04      	ldr	r3, [pc, #16]	@ (8008100 <HAL_RCC_GetHCLKFreq+0x58>)
 80080ee:	681b      	ldr	r3, [r3, #0]
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	3708      	adds	r7, #8
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}
 80080f8:	58024400 	.word	0x58024400
 80080fc:	0800dd4c 	.word	0x0800dd4c
 8008100:	24000004 	.word	0x24000004
 8008104:	24000000 	.word	0x24000000

08008108 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800810c:	f7ff ffcc 	bl	80080a8 <HAL_RCC_GetHCLKFreq>
 8008110:	4602      	mov	r2, r0
 8008112:	4b06      	ldr	r3, [pc, #24]	@ (800812c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008114:	69db      	ldr	r3, [r3, #28]
 8008116:	091b      	lsrs	r3, r3, #4
 8008118:	f003 0307 	and.w	r3, r3, #7
 800811c:	4904      	ldr	r1, [pc, #16]	@ (8008130 <HAL_RCC_GetPCLK1Freq+0x28>)
 800811e:	5ccb      	ldrb	r3, [r1, r3]
 8008120:	f003 031f 	and.w	r3, r3, #31
 8008124:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008128:	4618      	mov	r0, r3
 800812a:	bd80      	pop	{r7, pc}
 800812c:	58024400 	.word	0x58024400
 8008130:	0800dd4c 	.word	0x0800dd4c

08008134 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008138:	f7ff ffb6 	bl	80080a8 <HAL_RCC_GetHCLKFreq>
 800813c:	4602      	mov	r2, r0
 800813e:	4b06      	ldr	r3, [pc, #24]	@ (8008158 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008140:	69db      	ldr	r3, [r3, #28]
 8008142:	0a1b      	lsrs	r3, r3, #8
 8008144:	f003 0307 	and.w	r3, r3, #7
 8008148:	4904      	ldr	r1, [pc, #16]	@ (800815c <HAL_RCC_GetPCLK2Freq+0x28>)
 800814a:	5ccb      	ldrb	r3, [r1, r3]
 800814c:	f003 031f 	and.w	r3, r3, #31
 8008150:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008154:	4618      	mov	r0, r3
 8008156:	bd80      	pop	{r7, pc}
 8008158:	58024400 	.word	0x58024400
 800815c:	0800dd4c 	.word	0x0800dd4c

08008160 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008160:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008164:	b0ca      	sub	sp, #296	@ 0x128
 8008166:	af00      	add	r7, sp, #0
 8008168:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800816c:	2300      	movs	r3, #0
 800816e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008172:	2300      	movs	r3, #0
 8008174:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008178:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800817c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008180:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8008184:	2500      	movs	r5, #0
 8008186:	ea54 0305 	orrs.w	r3, r4, r5
 800818a:	d049      	beq.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800818c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008190:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008192:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008196:	d02f      	beq.n	80081f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008198:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800819c:	d828      	bhi.n	80081f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800819e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80081a2:	d01a      	beq.n	80081da <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80081a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80081a8:	d822      	bhi.n	80081f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d003      	beq.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80081ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80081b2:	d007      	beq.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80081b4:	e01c      	b.n	80081f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081b6:	4bb8      	ldr	r3, [pc, #736]	@ (8008498 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80081b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081ba:	4ab7      	ldr	r2, [pc, #732]	@ (8008498 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80081bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80081c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80081c2:	e01a      	b.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80081c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081c8:	3308      	adds	r3, #8
 80081ca:	2102      	movs	r1, #2
 80081cc:	4618      	mov	r0, r3
 80081ce:	f002 fb61 	bl	800a894 <RCCEx_PLL2_Config>
 80081d2:	4603      	mov	r3, r0
 80081d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80081d8:	e00f      	b.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80081da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081de:	3328      	adds	r3, #40	@ 0x28
 80081e0:	2102      	movs	r1, #2
 80081e2:	4618      	mov	r0, r3
 80081e4:	f002 fc08 	bl	800a9f8 <RCCEx_PLL3_Config>
 80081e8:	4603      	mov	r3, r0
 80081ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80081ee:	e004      	b.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80081f0:	2301      	movs	r3, #1
 80081f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80081f6:	e000      	b.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80081f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d10a      	bne.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008202:	4ba5      	ldr	r3, [pc, #660]	@ (8008498 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008204:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008206:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800820a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800820e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008210:	4aa1      	ldr	r2, [pc, #644]	@ (8008498 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008212:	430b      	orrs	r3, r1
 8008214:	6513      	str	r3, [r2, #80]	@ 0x50
 8008216:	e003      	b.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008218:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800821c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008220:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008228:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800822c:	f04f 0900 	mov.w	r9, #0
 8008230:	ea58 0309 	orrs.w	r3, r8, r9
 8008234:	d047      	beq.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008236:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800823a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800823c:	2b04      	cmp	r3, #4
 800823e:	d82a      	bhi.n	8008296 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008240:	a201      	add	r2, pc, #4	@ (adr r2, 8008248 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008246:	bf00      	nop
 8008248:	0800825d 	.word	0x0800825d
 800824c:	0800826b 	.word	0x0800826b
 8008250:	08008281 	.word	0x08008281
 8008254:	0800829f 	.word	0x0800829f
 8008258:	0800829f 	.word	0x0800829f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800825c:	4b8e      	ldr	r3, [pc, #568]	@ (8008498 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800825e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008260:	4a8d      	ldr	r2, [pc, #564]	@ (8008498 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008262:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008266:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008268:	e01a      	b.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800826a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800826e:	3308      	adds	r3, #8
 8008270:	2100      	movs	r1, #0
 8008272:	4618      	mov	r0, r3
 8008274:	f002 fb0e 	bl	800a894 <RCCEx_PLL2_Config>
 8008278:	4603      	mov	r3, r0
 800827a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800827e:	e00f      	b.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008280:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008284:	3328      	adds	r3, #40	@ 0x28
 8008286:	2100      	movs	r1, #0
 8008288:	4618      	mov	r0, r3
 800828a:	f002 fbb5 	bl	800a9f8 <RCCEx_PLL3_Config>
 800828e:	4603      	mov	r3, r0
 8008290:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008294:	e004      	b.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008296:	2301      	movs	r3, #1
 8008298:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800829c:	e000      	b.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800829e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d10a      	bne.n	80082be <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80082a8:	4b7b      	ldr	r3, [pc, #492]	@ (8008498 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80082aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082ac:	f023 0107 	bic.w	r1, r3, #7
 80082b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082b6:	4a78      	ldr	r2, [pc, #480]	@ (8008498 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80082b8:	430b      	orrs	r3, r1
 80082ba:	6513      	str	r3, [r2, #80]	@ 0x50
 80082bc:	e003      	b.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80082c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ce:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80082d2:	f04f 0b00 	mov.w	fp, #0
 80082d6:	ea5a 030b 	orrs.w	r3, sl, fp
 80082da:	d04c      	beq.n	8008376 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80082dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80082e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082e6:	d030      	beq.n	800834a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80082e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082ec:	d829      	bhi.n	8008342 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80082ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80082f0:	d02d      	beq.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80082f2:	2bc0      	cmp	r3, #192	@ 0xc0
 80082f4:	d825      	bhi.n	8008342 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80082f6:	2b80      	cmp	r3, #128	@ 0x80
 80082f8:	d018      	beq.n	800832c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80082fa:	2b80      	cmp	r3, #128	@ 0x80
 80082fc:	d821      	bhi.n	8008342 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d002      	beq.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8008302:	2b40      	cmp	r3, #64	@ 0x40
 8008304:	d007      	beq.n	8008316 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8008306:	e01c      	b.n	8008342 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008308:	4b63      	ldr	r3, [pc, #396]	@ (8008498 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800830a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800830c:	4a62      	ldr	r2, [pc, #392]	@ (8008498 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800830e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008312:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008314:	e01c      	b.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800831a:	3308      	adds	r3, #8
 800831c:	2100      	movs	r1, #0
 800831e:	4618      	mov	r0, r3
 8008320:	f002 fab8 	bl	800a894 <RCCEx_PLL2_Config>
 8008324:	4603      	mov	r3, r0
 8008326:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800832a:	e011      	b.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800832c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008330:	3328      	adds	r3, #40	@ 0x28
 8008332:	2100      	movs	r1, #0
 8008334:	4618      	mov	r0, r3
 8008336:	f002 fb5f 	bl	800a9f8 <RCCEx_PLL3_Config>
 800833a:	4603      	mov	r3, r0
 800833c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008340:	e006      	b.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008342:	2301      	movs	r3, #1
 8008344:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008348:	e002      	b.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800834a:	bf00      	nop
 800834c:	e000      	b.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800834e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008350:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008354:	2b00      	cmp	r3, #0
 8008356:	d10a      	bne.n	800836e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008358:	4b4f      	ldr	r3, [pc, #316]	@ (8008498 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800835a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800835c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8008360:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008364:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008366:	4a4c      	ldr	r2, [pc, #304]	@ (8008498 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008368:	430b      	orrs	r3, r1
 800836a:	6513      	str	r3, [r2, #80]	@ 0x50
 800836c:	e003      	b.n	8008376 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800836e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008372:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008376:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800837a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800837e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8008382:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8008386:	2300      	movs	r3, #0
 8008388:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800838c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8008390:	460b      	mov	r3, r1
 8008392:	4313      	orrs	r3, r2
 8008394:	d053      	beq.n	800843e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008396:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800839a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800839e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80083a2:	d035      	beq.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80083a4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80083a8:	d82e      	bhi.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80083aa:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80083ae:	d031      	beq.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80083b0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80083b4:	d828      	bhi.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80083b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80083ba:	d01a      	beq.n	80083f2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80083bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80083c0:	d822      	bhi.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d003      	beq.n	80083ce <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80083c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80083ca:	d007      	beq.n	80083dc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80083cc:	e01c      	b.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083ce:	4b32      	ldr	r3, [pc, #200]	@ (8008498 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80083d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083d2:	4a31      	ldr	r2, [pc, #196]	@ (8008498 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80083d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80083d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80083da:	e01c      	b.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80083dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083e0:	3308      	adds	r3, #8
 80083e2:	2100      	movs	r1, #0
 80083e4:	4618      	mov	r0, r3
 80083e6:	f002 fa55 	bl	800a894 <RCCEx_PLL2_Config>
 80083ea:	4603      	mov	r3, r0
 80083ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80083f0:	e011      	b.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80083f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083f6:	3328      	adds	r3, #40	@ 0x28
 80083f8:	2100      	movs	r1, #0
 80083fa:	4618      	mov	r0, r3
 80083fc:	f002 fafc 	bl	800a9f8 <RCCEx_PLL3_Config>
 8008400:	4603      	mov	r3, r0
 8008402:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008406:	e006      	b.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008408:	2301      	movs	r3, #1
 800840a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800840e:	e002      	b.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008410:	bf00      	nop
 8008412:	e000      	b.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008414:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008416:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800841a:	2b00      	cmp	r3, #0
 800841c:	d10b      	bne.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800841e:	4b1e      	ldr	r3, [pc, #120]	@ (8008498 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008420:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008422:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8008426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800842a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800842e:	4a1a      	ldr	r2, [pc, #104]	@ (8008498 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008430:	430b      	orrs	r3, r1
 8008432:	6593      	str	r3, [r2, #88]	@ 0x58
 8008434:	e003      	b.n	800843e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008436:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800843a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800843e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008446:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800844a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800844e:	2300      	movs	r3, #0
 8008450:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008454:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8008458:	460b      	mov	r3, r1
 800845a:	4313      	orrs	r3, r2
 800845c:	d056      	beq.n	800850c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800845e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008462:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008466:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800846a:	d038      	beq.n	80084de <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800846c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008470:	d831      	bhi.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008472:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008476:	d034      	beq.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8008478:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800847c:	d82b      	bhi.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800847e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008482:	d01d      	beq.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8008484:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008488:	d825      	bhi.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800848a:	2b00      	cmp	r3, #0
 800848c:	d006      	beq.n	800849c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800848e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008492:	d00a      	beq.n	80084aa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008494:	e01f      	b.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008496:	bf00      	nop
 8008498:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800849c:	4ba2      	ldr	r3, [pc, #648]	@ (8008728 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800849e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084a0:	4aa1      	ldr	r2, [pc, #644]	@ (8008728 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80084a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80084a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80084a8:	e01c      	b.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80084aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084ae:	3308      	adds	r3, #8
 80084b0:	2100      	movs	r1, #0
 80084b2:	4618      	mov	r0, r3
 80084b4:	f002 f9ee 	bl	800a894 <RCCEx_PLL2_Config>
 80084b8:	4603      	mov	r3, r0
 80084ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80084be:	e011      	b.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80084c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084c4:	3328      	adds	r3, #40	@ 0x28
 80084c6:	2100      	movs	r1, #0
 80084c8:	4618      	mov	r0, r3
 80084ca:	f002 fa95 	bl	800a9f8 <RCCEx_PLL3_Config>
 80084ce:	4603      	mov	r3, r0
 80084d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80084d4:	e006      	b.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80084d6:	2301      	movs	r3, #1
 80084d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80084dc:	e002      	b.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80084de:	bf00      	nop
 80084e0:	e000      	b.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80084e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d10b      	bne.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80084ec:	4b8e      	ldr	r3, [pc, #568]	@ (8008728 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80084ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084f0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80084f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084f8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80084fc:	4a8a      	ldr	r2, [pc, #552]	@ (8008728 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80084fe:	430b      	orrs	r3, r1
 8008500:	6593      	str	r3, [r2, #88]	@ 0x58
 8008502:	e003      	b.n	800850c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008504:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008508:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800850c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008514:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008518:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800851c:	2300      	movs	r3, #0
 800851e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008522:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8008526:	460b      	mov	r3, r1
 8008528:	4313      	orrs	r3, r2
 800852a:	d03a      	beq.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800852c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008532:	2b30      	cmp	r3, #48	@ 0x30
 8008534:	d01f      	beq.n	8008576 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8008536:	2b30      	cmp	r3, #48	@ 0x30
 8008538:	d819      	bhi.n	800856e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800853a:	2b20      	cmp	r3, #32
 800853c:	d00c      	beq.n	8008558 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800853e:	2b20      	cmp	r3, #32
 8008540:	d815      	bhi.n	800856e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008542:	2b00      	cmp	r3, #0
 8008544:	d019      	beq.n	800857a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8008546:	2b10      	cmp	r3, #16
 8008548:	d111      	bne.n	800856e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800854a:	4b77      	ldr	r3, [pc, #476]	@ (8008728 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800854c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800854e:	4a76      	ldr	r2, [pc, #472]	@ (8008728 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008550:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008554:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008556:	e011      	b.n	800857c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008558:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800855c:	3308      	adds	r3, #8
 800855e:	2102      	movs	r1, #2
 8008560:	4618      	mov	r0, r3
 8008562:	f002 f997 	bl	800a894 <RCCEx_PLL2_Config>
 8008566:	4603      	mov	r3, r0
 8008568:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800856c:	e006      	b.n	800857c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800856e:	2301      	movs	r3, #1
 8008570:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008574:	e002      	b.n	800857c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008576:	bf00      	nop
 8008578:	e000      	b.n	800857c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800857a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800857c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008580:	2b00      	cmp	r3, #0
 8008582:	d10a      	bne.n	800859a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008584:	4b68      	ldr	r3, [pc, #416]	@ (8008728 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008586:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008588:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800858c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008592:	4a65      	ldr	r2, [pc, #404]	@ (8008728 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008594:	430b      	orrs	r3, r1
 8008596:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008598:	e003      	b.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800859a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800859e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80085a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085aa:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80085ae:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80085b2:	2300      	movs	r3, #0
 80085b4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80085b8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80085bc:	460b      	mov	r3, r1
 80085be:	4313      	orrs	r3, r2
 80085c0:	d051      	beq.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80085c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80085c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80085cc:	d035      	beq.n	800863a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80085ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80085d2:	d82e      	bhi.n	8008632 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80085d4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80085d8:	d031      	beq.n	800863e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80085da:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80085de:	d828      	bhi.n	8008632 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80085e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085e4:	d01a      	beq.n	800861c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80085e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80085ea:	d822      	bhi.n	8008632 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d003      	beq.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80085f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085f4:	d007      	beq.n	8008606 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80085f6:	e01c      	b.n	8008632 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085f8:	4b4b      	ldr	r3, [pc, #300]	@ (8008728 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80085fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085fc:	4a4a      	ldr	r2, [pc, #296]	@ (8008728 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80085fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008602:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008604:	e01c      	b.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008606:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800860a:	3308      	adds	r3, #8
 800860c:	2100      	movs	r1, #0
 800860e:	4618      	mov	r0, r3
 8008610:	f002 f940 	bl	800a894 <RCCEx_PLL2_Config>
 8008614:	4603      	mov	r3, r0
 8008616:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800861a:	e011      	b.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800861c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008620:	3328      	adds	r3, #40	@ 0x28
 8008622:	2100      	movs	r1, #0
 8008624:	4618      	mov	r0, r3
 8008626:	f002 f9e7 	bl	800a9f8 <RCCEx_PLL3_Config>
 800862a:	4603      	mov	r3, r0
 800862c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008630:	e006      	b.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008632:	2301      	movs	r3, #1
 8008634:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008638:	e002      	b.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800863a:	bf00      	nop
 800863c:	e000      	b.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800863e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008640:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008644:	2b00      	cmp	r3, #0
 8008646:	d10a      	bne.n	800865e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008648:	4b37      	ldr	r3, [pc, #220]	@ (8008728 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800864a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800864c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008650:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008654:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008656:	4a34      	ldr	r2, [pc, #208]	@ (8008728 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008658:	430b      	orrs	r3, r1
 800865a:	6513      	str	r3, [r2, #80]	@ 0x50
 800865c:	e003      	b.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800865e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008662:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008666:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800866a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800866e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8008672:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008676:	2300      	movs	r3, #0
 8008678:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800867c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8008680:	460b      	mov	r3, r1
 8008682:	4313      	orrs	r3, r2
 8008684:	d056      	beq.n	8008734 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008686:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800868a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800868c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008690:	d033      	beq.n	80086fa <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008692:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008696:	d82c      	bhi.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008698:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800869c:	d02f      	beq.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800869e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80086a2:	d826      	bhi.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80086a4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80086a8:	d02b      	beq.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80086aa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80086ae:	d820      	bhi.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80086b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80086b4:	d012      	beq.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80086b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80086ba:	d81a      	bhi.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d022      	beq.n	8008706 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80086c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80086c4:	d115      	bne.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80086c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086ca:	3308      	adds	r3, #8
 80086cc:	2101      	movs	r1, #1
 80086ce:	4618      	mov	r0, r3
 80086d0:	f002 f8e0 	bl	800a894 <RCCEx_PLL2_Config>
 80086d4:	4603      	mov	r3, r0
 80086d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80086da:	e015      	b.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80086dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086e0:	3328      	adds	r3, #40	@ 0x28
 80086e2:	2101      	movs	r1, #1
 80086e4:	4618      	mov	r0, r3
 80086e6:	f002 f987 	bl	800a9f8 <RCCEx_PLL3_Config>
 80086ea:	4603      	mov	r3, r0
 80086ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80086f0:	e00a      	b.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80086f2:	2301      	movs	r3, #1
 80086f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80086f8:	e006      	b.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80086fa:	bf00      	nop
 80086fc:	e004      	b.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80086fe:	bf00      	nop
 8008700:	e002      	b.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008702:	bf00      	nop
 8008704:	e000      	b.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008706:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008708:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800870c:	2b00      	cmp	r3, #0
 800870e:	d10d      	bne.n	800872c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008710:	4b05      	ldr	r3, [pc, #20]	@ (8008728 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008712:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008714:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008718:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800871c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800871e:	4a02      	ldr	r2, [pc, #8]	@ (8008728 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008720:	430b      	orrs	r3, r1
 8008722:	6513      	str	r3, [r2, #80]	@ 0x50
 8008724:	e006      	b.n	8008734 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008726:	bf00      	nop
 8008728:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800872c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008730:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008734:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800873c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8008740:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008744:	2300      	movs	r3, #0
 8008746:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800874a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800874e:	460b      	mov	r3, r1
 8008750:	4313      	orrs	r3, r2
 8008752:	d055      	beq.n	8008800 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008754:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008758:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800875c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008760:	d033      	beq.n	80087ca <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8008762:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008766:	d82c      	bhi.n	80087c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008768:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800876c:	d02f      	beq.n	80087ce <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800876e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008772:	d826      	bhi.n	80087c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008774:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008778:	d02b      	beq.n	80087d2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800877a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800877e:	d820      	bhi.n	80087c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008780:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008784:	d012      	beq.n	80087ac <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8008786:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800878a:	d81a      	bhi.n	80087c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800878c:	2b00      	cmp	r3, #0
 800878e:	d022      	beq.n	80087d6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8008790:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008794:	d115      	bne.n	80087c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008796:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800879a:	3308      	adds	r3, #8
 800879c:	2101      	movs	r1, #1
 800879e:	4618      	mov	r0, r3
 80087a0:	f002 f878 	bl	800a894 <RCCEx_PLL2_Config>
 80087a4:	4603      	mov	r3, r0
 80087a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80087aa:	e015      	b.n	80087d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80087ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087b0:	3328      	adds	r3, #40	@ 0x28
 80087b2:	2101      	movs	r1, #1
 80087b4:	4618      	mov	r0, r3
 80087b6:	f002 f91f 	bl	800a9f8 <RCCEx_PLL3_Config>
 80087ba:	4603      	mov	r3, r0
 80087bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80087c0:	e00a      	b.n	80087d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80087c2:	2301      	movs	r3, #1
 80087c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80087c8:	e006      	b.n	80087d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80087ca:	bf00      	nop
 80087cc:	e004      	b.n	80087d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80087ce:	bf00      	nop
 80087d0:	e002      	b.n	80087d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80087d2:	bf00      	nop
 80087d4:	e000      	b.n	80087d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80087d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d10b      	bne.n	80087f8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80087e0:	4ba3      	ldr	r3, [pc, #652]	@ (8008a70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80087e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087e4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80087e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80087f0:	4a9f      	ldr	r2, [pc, #636]	@ (8008a70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80087f2:	430b      	orrs	r3, r1
 80087f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80087f6:	e003      	b.n	8008800 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008800:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008808:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800880c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008810:	2300      	movs	r3, #0
 8008812:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008816:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800881a:	460b      	mov	r3, r1
 800881c:	4313      	orrs	r3, r2
 800881e:	d037      	beq.n	8008890 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008820:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008826:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800882a:	d00e      	beq.n	800884a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800882c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008830:	d816      	bhi.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8008832:	2b00      	cmp	r3, #0
 8008834:	d018      	beq.n	8008868 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8008836:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800883a:	d111      	bne.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800883c:	4b8c      	ldr	r3, [pc, #560]	@ (8008a70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800883e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008840:	4a8b      	ldr	r2, [pc, #556]	@ (8008a70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008842:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008846:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008848:	e00f      	b.n	800886a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800884a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800884e:	3308      	adds	r3, #8
 8008850:	2101      	movs	r1, #1
 8008852:	4618      	mov	r0, r3
 8008854:	f002 f81e 	bl	800a894 <RCCEx_PLL2_Config>
 8008858:	4603      	mov	r3, r0
 800885a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800885e:	e004      	b.n	800886a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008860:	2301      	movs	r3, #1
 8008862:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008866:	e000      	b.n	800886a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8008868:	bf00      	nop
    }

    if (ret == HAL_OK)
 800886a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800886e:	2b00      	cmp	r3, #0
 8008870:	d10a      	bne.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008872:	4b7f      	ldr	r3, [pc, #508]	@ (8008a70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008874:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008876:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800887a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800887e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008880:	4a7b      	ldr	r2, [pc, #492]	@ (8008a70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008882:	430b      	orrs	r3, r1
 8008884:	6513      	str	r3, [r2, #80]	@ 0x50
 8008886:	e003      	b.n	8008890 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008888:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800888c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008890:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008898:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800889c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80088a0:	2300      	movs	r3, #0
 80088a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80088a6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80088aa:	460b      	mov	r3, r1
 80088ac:	4313      	orrs	r3, r2
 80088ae:	d039      	beq.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80088b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80088b6:	2b03      	cmp	r3, #3
 80088b8:	d81c      	bhi.n	80088f4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80088ba:	a201      	add	r2, pc, #4	@ (adr r2, 80088c0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80088bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088c0:	080088fd 	.word	0x080088fd
 80088c4:	080088d1 	.word	0x080088d1
 80088c8:	080088df 	.word	0x080088df
 80088cc:	080088fd 	.word	0x080088fd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088d0:	4b67      	ldr	r3, [pc, #412]	@ (8008a70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80088d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088d4:	4a66      	ldr	r2, [pc, #408]	@ (8008a70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80088d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80088da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80088dc:	e00f      	b.n	80088fe <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80088de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088e2:	3308      	adds	r3, #8
 80088e4:	2102      	movs	r1, #2
 80088e6:	4618      	mov	r0, r3
 80088e8:	f001 ffd4 	bl	800a894 <RCCEx_PLL2_Config>
 80088ec:	4603      	mov	r3, r0
 80088ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80088f2:	e004      	b.n	80088fe <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80088f4:	2301      	movs	r3, #1
 80088f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80088fa:	e000      	b.n	80088fe <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80088fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008902:	2b00      	cmp	r3, #0
 8008904:	d10a      	bne.n	800891c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008906:	4b5a      	ldr	r3, [pc, #360]	@ (8008a70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800890a:	f023 0103 	bic.w	r1, r3, #3
 800890e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008912:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008914:	4a56      	ldr	r2, [pc, #344]	@ (8008a70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008916:	430b      	orrs	r3, r1
 8008918:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800891a:	e003      	b.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800891c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008920:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008924:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800892c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008930:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008934:	2300      	movs	r3, #0
 8008936:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800893a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800893e:	460b      	mov	r3, r1
 8008940:	4313      	orrs	r3, r2
 8008942:	f000 809f 	beq.w	8008a84 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008946:	4b4b      	ldr	r3, [pc, #300]	@ (8008a74 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	4a4a      	ldr	r2, [pc, #296]	@ (8008a74 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800894c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008950:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008952:	f7fa f9c7 	bl	8002ce4 <HAL_GetTick>
 8008956:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800895a:	e00b      	b.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800895c:	f7fa f9c2 	bl	8002ce4 <HAL_GetTick>
 8008960:	4602      	mov	r2, r0
 8008962:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008966:	1ad3      	subs	r3, r2, r3
 8008968:	2b64      	cmp	r3, #100	@ 0x64
 800896a:	d903      	bls.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800896c:	2303      	movs	r3, #3
 800896e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008972:	e005      	b.n	8008980 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008974:	4b3f      	ldr	r3, [pc, #252]	@ (8008a74 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800897c:	2b00      	cmp	r3, #0
 800897e:	d0ed      	beq.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008980:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008984:	2b00      	cmp	r3, #0
 8008986:	d179      	bne.n	8008a7c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008988:	4b39      	ldr	r3, [pc, #228]	@ (8008a70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800898a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800898c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008990:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008994:	4053      	eors	r3, r2
 8008996:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800899a:	2b00      	cmp	r3, #0
 800899c:	d015      	beq.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800899e:	4b34      	ldr	r3, [pc, #208]	@ (8008a70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80089a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80089a6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80089aa:	4b31      	ldr	r3, [pc, #196]	@ (8008a70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80089ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089ae:	4a30      	ldr	r2, [pc, #192]	@ (8008a70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80089b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80089b4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80089b6:	4b2e      	ldr	r3, [pc, #184]	@ (8008a70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80089b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089ba:	4a2d      	ldr	r2, [pc, #180]	@ (8008a70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80089bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80089c0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80089c2:	4a2b      	ldr	r2, [pc, #172]	@ (8008a70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80089c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80089c8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80089ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80089d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089d6:	d118      	bne.n	8008a0a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089d8:	f7fa f984 	bl	8002ce4 <HAL_GetTick>
 80089dc:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80089e0:	e00d      	b.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80089e2:	f7fa f97f 	bl	8002ce4 <HAL_GetTick>
 80089e6:	4602      	mov	r2, r0
 80089e8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80089ec:	1ad2      	subs	r2, r2, r3
 80089ee:	f241 3388 	movw	r3, #5000	@ 0x1388
 80089f2:	429a      	cmp	r2, r3
 80089f4:	d903      	bls.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80089f6:	2303      	movs	r3, #3
 80089f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80089fc:	e005      	b.n	8008a0a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80089fe:	4b1c      	ldr	r3, [pc, #112]	@ (8008a70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a02:	f003 0302 	and.w	r3, r3, #2
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d0eb      	beq.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8008a0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d129      	bne.n	8008a66 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a16:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008a1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008a1e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008a22:	d10e      	bne.n	8008a42 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8008a24:	4b12      	ldr	r3, [pc, #72]	@ (8008a70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a26:	691b      	ldr	r3, [r3, #16]
 8008a28:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8008a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a30:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008a34:	091a      	lsrs	r2, r3, #4
 8008a36:	4b10      	ldr	r3, [pc, #64]	@ (8008a78 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8008a38:	4013      	ands	r3, r2
 8008a3a:	4a0d      	ldr	r2, [pc, #52]	@ (8008a70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a3c:	430b      	orrs	r3, r1
 8008a3e:	6113      	str	r3, [r2, #16]
 8008a40:	e005      	b.n	8008a4e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8008a42:	4b0b      	ldr	r3, [pc, #44]	@ (8008a70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a44:	691b      	ldr	r3, [r3, #16]
 8008a46:	4a0a      	ldr	r2, [pc, #40]	@ (8008a70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a48:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008a4c:	6113      	str	r3, [r2, #16]
 8008a4e:	4b08      	ldr	r3, [pc, #32]	@ (8008a70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a50:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8008a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a56:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008a5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a5e:	4a04      	ldr	r2, [pc, #16]	@ (8008a70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a60:	430b      	orrs	r3, r1
 8008a62:	6713      	str	r3, [r2, #112]	@ 0x70
 8008a64:	e00e      	b.n	8008a84 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008a66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8008a6e:	e009      	b.n	8008a84 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008a70:	58024400 	.word	0x58024400
 8008a74:	58024800 	.word	0x58024800
 8008a78:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a8c:	f002 0301 	and.w	r3, r2, #1
 8008a90:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008a94:	2300      	movs	r3, #0
 8008a96:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008a9a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008a9e:	460b      	mov	r3, r1
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	f000 8089 	beq.w	8008bb8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8008aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008aaa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008aac:	2b28      	cmp	r3, #40	@ 0x28
 8008aae:	d86b      	bhi.n	8008b88 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8008ab0:	a201      	add	r2, pc, #4	@ (adr r2, 8008ab8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ab6:	bf00      	nop
 8008ab8:	08008b91 	.word	0x08008b91
 8008abc:	08008b89 	.word	0x08008b89
 8008ac0:	08008b89 	.word	0x08008b89
 8008ac4:	08008b89 	.word	0x08008b89
 8008ac8:	08008b89 	.word	0x08008b89
 8008acc:	08008b89 	.word	0x08008b89
 8008ad0:	08008b89 	.word	0x08008b89
 8008ad4:	08008b89 	.word	0x08008b89
 8008ad8:	08008b5d 	.word	0x08008b5d
 8008adc:	08008b89 	.word	0x08008b89
 8008ae0:	08008b89 	.word	0x08008b89
 8008ae4:	08008b89 	.word	0x08008b89
 8008ae8:	08008b89 	.word	0x08008b89
 8008aec:	08008b89 	.word	0x08008b89
 8008af0:	08008b89 	.word	0x08008b89
 8008af4:	08008b89 	.word	0x08008b89
 8008af8:	08008b73 	.word	0x08008b73
 8008afc:	08008b89 	.word	0x08008b89
 8008b00:	08008b89 	.word	0x08008b89
 8008b04:	08008b89 	.word	0x08008b89
 8008b08:	08008b89 	.word	0x08008b89
 8008b0c:	08008b89 	.word	0x08008b89
 8008b10:	08008b89 	.word	0x08008b89
 8008b14:	08008b89 	.word	0x08008b89
 8008b18:	08008b91 	.word	0x08008b91
 8008b1c:	08008b89 	.word	0x08008b89
 8008b20:	08008b89 	.word	0x08008b89
 8008b24:	08008b89 	.word	0x08008b89
 8008b28:	08008b89 	.word	0x08008b89
 8008b2c:	08008b89 	.word	0x08008b89
 8008b30:	08008b89 	.word	0x08008b89
 8008b34:	08008b89 	.word	0x08008b89
 8008b38:	08008b91 	.word	0x08008b91
 8008b3c:	08008b89 	.word	0x08008b89
 8008b40:	08008b89 	.word	0x08008b89
 8008b44:	08008b89 	.word	0x08008b89
 8008b48:	08008b89 	.word	0x08008b89
 8008b4c:	08008b89 	.word	0x08008b89
 8008b50:	08008b89 	.word	0x08008b89
 8008b54:	08008b89 	.word	0x08008b89
 8008b58:	08008b91 	.word	0x08008b91
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008b5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b60:	3308      	adds	r3, #8
 8008b62:	2101      	movs	r1, #1
 8008b64:	4618      	mov	r0, r3
 8008b66:	f001 fe95 	bl	800a894 <RCCEx_PLL2_Config>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008b70:	e00f      	b.n	8008b92 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b76:	3328      	adds	r3, #40	@ 0x28
 8008b78:	2101      	movs	r1, #1
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f001 ff3c 	bl	800a9f8 <RCCEx_PLL3_Config>
 8008b80:	4603      	mov	r3, r0
 8008b82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008b86:	e004      	b.n	8008b92 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b88:	2301      	movs	r3, #1
 8008b8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008b8e:	e000      	b.n	8008b92 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8008b90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d10a      	bne.n	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008b9a:	4bbf      	ldr	r3, [pc, #764]	@ (8008e98 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008b9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b9e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8008ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ba6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008ba8:	4abb      	ldr	r2, [pc, #748]	@ (8008e98 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008baa:	430b      	orrs	r3, r1
 8008bac:	6553      	str	r3, [r2, #84]	@ 0x54
 8008bae:	e003      	b.n	8008bb8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008bb4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc0:	f002 0302 	and.w	r3, r2, #2
 8008bc4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008bc8:	2300      	movs	r3, #0
 8008bca:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008bce:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8008bd2:	460b      	mov	r3, r1
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	d041      	beq.n	8008c5c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bdc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008bde:	2b05      	cmp	r3, #5
 8008be0:	d824      	bhi.n	8008c2c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8008be2:	a201      	add	r2, pc, #4	@ (adr r2, 8008be8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8008be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008be8:	08008c35 	.word	0x08008c35
 8008bec:	08008c01 	.word	0x08008c01
 8008bf0:	08008c17 	.word	0x08008c17
 8008bf4:	08008c35 	.word	0x08008c35
 8008bf8:	08008c35 	.word	0x08008c35
 8008bfc:	08008c35 	.word	0x08008c35
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c04:	3308      	adds	r3, #8
 8008c06:	2101      	movs	r1, #1
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f001 fe43 	bl	800a894 <RCCEx_PLL2_Config>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008c14:	e00f      	b.n	8008c36 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c1a:	3328      	adds	r3, #40	@ 0x28
 8008c1c:	2101      	movs	r1, #1
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f001 feea 	bl	800a9f8 <RCCEx_PLL3_Config>
 8008c24:	4603      	mov	r3, r0
 8008c26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008c2a:	e004      	b.n	8008c36 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008c32:	e000      	b.n	8008c36 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8008c34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d10a      	bne.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008c3e:	4b96      	ldr	r3, [pc, #600]	@ (8008e98 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008c40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c42:	f023 0107 	bic.w	r1, r3, #7
 8008c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c4a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008c4c:	4a92      	ldr	r2, [pc, #584]	@ (8008e98 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008c4e:	430b      	orrs	r3, r1
 8008c50:	6553      	str	r3, [r2, #84]	@ 0x54
 8008c52:	e003      	b.n	8008c5c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c58:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c64:	f002 0304 	and.w	r3, r2, #4
 8008c68:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008c72:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008c76:	460b      	mov	r3, r1
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	d044      	beq.n	8008d06 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008c84:	2b05      	cmp	r3, #5
 8008c86:	d825      	bhi.n	8008cd4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8008c88:	a201      	add	r2, pc, #4	@ (adr r2, 8008c90 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8008c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c8e:	bf00      	nop
 8008c90:	08008cdd 	.word	0x08008cdd
 8008c94:	08008ca9 	.word	0x08008ca9
 8008c98:	08008cbf 	.word	0x08008cbf
 8008c9c:	08008cdd 	.word	0x08008cdd
 8008ca0:	08008cdd 	.word	0x08008cdd
 8008ca4:	08008cdd 	.word	0x08008cdd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cac:	3308      	adds	r3, #8
 8008cae:	2101      	movs	r1, #1
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f001 fdef 	bl	800a894 <RCCEx_PLL2_Config>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008cbc:	e00f      	b.n	8008cde <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cc2:	3328      	adds	r3, #40	@ 0x28
 8008cc4:	2101      	movs	r1, #1
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f001 fe96 	bl	800a9f8 <RCCEx_PLL3_Config>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008cd2:	e004      	b.n	8008cde <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008cda:	e000      	b.n	8008cde <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8008cdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008cde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d10b      	bne.n	8008cfe <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008ce6:	4b6c      	ldr	r3, [pc, #432]	@ (8008e98 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008ce8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cea:	f023 0107 	bic.w	r1, r3, #7
 8008cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008cf6:	4a68      	ldr	r2, [pc, #416]	@ (8008e98 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008cf8:	430b      	orrs	r3, r1
 8008cfa:	6593      	str	r3, [r2, #88]	@ 0x58
 8008cfc:	e003      	b.n	8008d06 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d02:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d0e:	f002 0320 	and.w	r3, r2, #32
 8008d12:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008d16:	2300      	movs	r3, #0
 8008d18:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008d1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008d20:	460b      	mov	r3, r1
 8008d22:	4313      	orrs	r3, r2
 8008d24:	d055      	beq.n	8008dd2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008d32:	d033      	beq.n	8008d9c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8008d34:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008d38:	d82c      	bhi.n	8008d94 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d3e:	d02f      	beq.n	8008da0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8008d40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d44:	d826      	bhi.n	8008d94 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008d46:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008d4a:	d02b      	beq.n	8008da4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8008d4c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008d50:	d820      	bhi.n	8008d94 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008d52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d56:	d012      	beq.n	8008d7e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008d58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d5c:	d81a      	bhi.n	8008d94 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d022      	beq.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8008d62:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d66:	d115      	bne.n	8008d94 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d6c:	3308      	adds	r3, #8
 8008d6e:	2100      	movs	r1, #0
 8008d70:	4618      	mov	r0, r3
 8008d72:	f001 fd8f 	bl	800a894 <RCCEx_PLL2_Config>
 8008d76:	4603      	mov	r3, r0
 8008d78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008d7c:	e015      	b.n	8008daa <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d82:	3328      	adds	r3, #40	@ 0x28
 8008d84:	2102      	movs	r1, #2
 8008d86:	4618      	mov	r0, r3
 8008d88:	f001 fe36 	bl	800a9f8 <RCCEx_PLL3_Config>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008d92:	e00a      	b.n	8008daa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d94:	2301      	movs	r3, #1
 8008d96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008d9a:	e006      	b.n	8008daa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008d9c:	bf00      	nop
 8008d9e:	e004      	b.n	8008daa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008da0:	bf00      	nop
 8008da2:	e002      	b.n	8008daa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008da4:	bf00      	nop
 8008da6:	e000      	b.n	8008daa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008da8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008daa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d10b      	bne.n	8008dca <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008db2:	4b39      	ldr	r3, [pc, #228]	@ (8008e98 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008db4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008db6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008dc2:	4a35      	ldr	r2, [pc, #212]	@ (8008e98 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008dc4:	430b      	orrs	r3, r1
 8008dc6:	6553      	str	r3, [r2, #84]	@ 0x54
 8008dc8:	e003      	b.n	8008dd2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008dce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dda:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008dde:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008de2:	2300      	movs	r3, #0
 8008de4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008de8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008dec:	460b      	mov	r3, r1
 8008dee:	4313      	orrs	r3, r2
 8008df0:	d058      	beq.n	8008ea4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008df6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008dfa:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008dfe:	d033      	beq.n	8008e68 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8008e00:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008e04:	d82c      	bhi.n	8008e60 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008e06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e0a:	d02f      	beq.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8008e0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e10:	d826      	bhi.n	8008e60 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008e12:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008e16:	d02b      	beq.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8008e18:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008e1c:	d820      	bhi.n	8008e60 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008e1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e22:	d012      	beq.n	8008e4a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008e24:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e28:	d81a      	bhi.n	8008e60 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d022      	beq.n	8008e74 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008e2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e32:	d115      	bne.n	8008e60 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008e34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e38:	3308      	adds	r3, #8
 8008e3a:	2100      	movs	r1, #0
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f001 fd29 	bl	800a894 <RCCEx_PLL2_Config>
 8008e42:	4603      	mov	r3, r0
 8008e44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008e48:	e015      	b.n	8008e76 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e4e:	3328      	adds	r3, #40	@ 0x28
 8008e50:	2102      	movs	r1, #2
 8008e52:	4618      	mov	r0, r3
 8008e54:	f001 fdd0 	bl	800a9f8 <RCCEx_PLL3_Config>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008e5e:	e00a      	b.n	8008e76 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e60:	2301      	movs	r3, #1
 8008e62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008e66:	e006      	b.n	8008e76 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008e68:	bf00      	nop
 8008e6a:	e004      	b.n	8008e76 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008e6c:	bf00      	nop
 8008e6e:	e002      	b.n	8008e76 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008e70:	bf00      	nop
 8008e72:	e000      	b.n	8008e76 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008e74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d10e      	bne.n	8008e9c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008e7e:	4b06      	ldr	r3, [pc, #24]	@ (8008e98 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008e80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e82:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008e8e:	4a02      	ldr	r2, [pc, #8]	@ (8008e98 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008e90:	430b      	orrs	r3, r1
 8008e92:	6593      	str	r3, [r2, #88]	@ 0x58
 8008e94:	e006      	b.n	8008ea4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8008e96:	bf00      	nop
 8008e98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ea0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008ea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eac:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008eb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008eba:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008ebe:	460b      	mov	r3, r1
 8008ec0:	4313      	orrs	r3, r2
 8008ec2:	d055      	beq.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ec8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008ecc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008ed0:	d033      	beq.n	8008f3a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8008ed2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008ed6:	d82c      	bhi.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008ed8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008edc:	d02f      	beq.n	8008f3e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8008ede:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008ee2:	d826      	bhi.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008ee4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008ee8:	d02b      	beq.n	8008f42 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8008eea:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008eee:	d820      	bhi.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008ef0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008ef4:	d012      	beq.n	8008f1c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8008ef6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008efa:	d81a      	bhi.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d022      	beq.n	8008f46 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8008f00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008f04:	d115      	bne.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f0a:	3308      	adds	r3, #8
 8008f0c:	2100      	movs	r1, #0
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f001 fcc0 	bl	800a894 <RCCEx_PLL2_Config>
 8008f14:	4603      	mov	r3, r0
 8008f16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008f1a:	e015      	b.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008f1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f20:	3328      	adds	r3, #40	@ 0x28
 8008f22:	2102      	movs	r1, #2
 8008f24:	4618      	mov	r0, r3
 8008f26:	f001 fd67 	bl	800a9f8 <RCCEx_PLL3_Config>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008f30:	e00a      	b.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f32:	2301      	movs	r3, #1
 8008f34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008f38:	e006      	b.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008f3a:	bf00      	nop
 8008f3c:	e004      	b.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008f3e:	bf00      	nop
 8008f40:	e002      	b.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008f42:	bf00      	nop
 8008f44:	e000      	b.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008f46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d10b      	bne.n	8008f68 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008f50:	4ba1      	ldr	r3, [pc, #644]	@ (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008f52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f54:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f5c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008f60:	4a9d      	ldr	r2, [pc, #628]	@ (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008f62:	430b      	orrs	r3, r1
 8008f64:	6593      	str	r3, [r2, #88]	@ 0x58
 8008f66:	e003      	b.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f78:	f002 0308 	and.w	r3, r2, #8
 8008f7c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008f80:	2300      	movs	r3, #0
 8008f82:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008f86:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008f8a:	460b      	mov	r3, r1
 8008f8c:	4313      	orrs	r3, r2
 8008f8e:	d01e      	beq.n	8008fce <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f9c:	d10c      	bne.n	8008fb8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fa2:	3328      	adds	r3, #40	@ 0x28
 8008fa4:	2102      	movs	r1, #2
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f001 fd26 	bl	800a9f8 <RCCEx_PLL3_Config>
 8008fac:	4603      	mov	r3, r0
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d002      	beq.n	8008fb8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008fb8:	4b87      	ldr	r3, [pc, #540]	@ (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008fba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fbc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008fc8:	4a83      	ldr	r2, [pc, #524]	@ (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008fca:	430b      	orrs	r3, r1
 8008fcc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008fce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd6:	f002 0310 	and.w	r3, r2, #16
 8008fda:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008fde:	2300      	movs	r3, #0
 8008fe0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008fe4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008fe8:	460b      	mov	r3, r1
 8008fea:	4313      	orrs	r3, r2
 8008fec:	d01e      	beq.n	800902c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ff2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008ff6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ffa:	d10c      	bne.n	8009016 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008ffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009000:	3328      	adds	r3, #40	@ 0x28
 8009002:	2102      	movs	r1, #2
 8009004:	4618      	mov	r0, r3
 8009006:	f001 fcf7 	bl	800a9f8 <RCCEx_PLL3_Config>
 800900a:	4603      	mov	r3, r0
 800900c:	2b00      	cmp	r3, #0
 800900e:	d002      	beq.n	8009016 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8009010:	2301      	movs	r3, #1
 8009012:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009016:	4b70      	ldr	r3, [pc, #448]	@ (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009018:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800901a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800901e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009022:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009026:	4a6c      	ldr	r2, [pc, #432]	@ (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009028:	430b      	orrs	r3, r1
 800902a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800902c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009034:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009038:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800903c:	2300      	movs	r3, #0
 800903e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009042:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009046:	460b      	mov	r3, r1
 8009048:	4313      	orrs	r3, r2
 800904a:	d03e      	beq.n	80090ca <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800904c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009050:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009054:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009058:	d022      	beq.n	80090a0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800905a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800905e:	d81b      	bhi.n	8009098 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8009060:	2b00      	cmp	r3, #0
 8009062:	d003      	beq.n	800906c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8009064:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009068:	d00b      	beq.n	8009082 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800906a:	e015      	b.n	8009098 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800906c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009070:	3308      	adds	r3, #8
 8009072:	2100      	movs	r1, #0
 8009074:	4618      	mov	r0, r3
 8009076:	f001 fc0d 	bl	800a894 <RCCEx_PLL2_Config>
 800907a:	4603      	mov	r3, r0
 800907c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009080:	e00f      	b.n	80090a2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009082:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009086:	3328      	adds	r3, #40	@ 0x28
 8009088:	2102      	movs	r1, #2
 800908a:	4618      	mov	r0, r3
 800908c:	f001 fcb4 	bl	800a9f8 <RCCEx_PLL3_Config>
 8009090:	4603      	mov	r3, r0
 8009092:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009096:	e004      	b.n	80090a2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009098:	2301      	movs	r3, #1
 800909a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800909e:	e000      	b.n	80090a2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80090a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d10b      	bne.n	80090c2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80090aa:	4b4b      	ldr	r3, [pc, #300]	@ (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80090ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090ae:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80090b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80090ba:	4a47      	ldr	r2, [pc, #284]	@ (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80090bc:	430b      	orrs	r3, r1
 80090be:	6593      	str	r3, [r2, #88]	@ 0x58
 80090c0:	e003      	b.n	80090ca <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80090ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090d2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80090d6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80090d8:	2300      	movs	r3, #0
 80090da:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80090dc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80090e0:	460b      	mov	r3, r1
 80090e2:	4313      	orrs	r3, r2
 80090e4:	d03b      	beq.n	800915e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80090e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80090ee:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80090f2:	d01f      	beq.n	8009134 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80090f4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80090f8:	d818      	bhi.n	800912c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80090fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80090fe:	d003      	beq.n	8009108 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8009100:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009104:	d007      	beq.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8009106:	e011      	b.n	800912c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009108:	4b33      	ldr	r3, [pc, #204]	@ (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800910a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800910c:	4a32      	ldr	r2, [pc, #200]	@ (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800910e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009112:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009114:	e00f      	b.n	8009136 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009116:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800911a:	3328      	adds	r3, #40	@ 0x28
 800911c:	2101      	movs	r1, #1
 800911e:	4618      	mov	r0, r3
 8009120:	f001 fc6a 	bl	800a9f8 <RCCEx_PLL3_Config>
 8009124:	4603      	mov	r3, r0
 8009126:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800912a:	e004      	b.n	8009136 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800912c:	2301      	movs	r3, #1
 800912e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009132:	e000      	b.n	8009136 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8009134:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009136:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800913a:	2b00      	cmp	r3, #0
 800913c:	d10b      	bne.n	8009156 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800913e:	4b26      	ldr	r3, [pc, #152]	@ (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009140:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009142:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009146:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800914a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800914e:	4a22      	ldr	r2, [pc, #136]	@ (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009150:	430b      	orrs	r3, r1
 8009152:	6553      	str	r3, [r2, #84]	@ 0x54
 8009154:	e003      	b.n	800915e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009156:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800915a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800915e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009166:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800916a:	673b      	str	r3, [r7, #112]	@ 0x70
 800916c:	2300      	movs	r3, #0
 800916e:	677b      	str	r3, [r7, #116]	@ 0x74
 8009170:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009174:	460b      	mov	r3, r1
 8009176:	4313      	orrs	r3, r2
 8009178:	d034      	beq.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800917a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800917e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009180:	2b00      	cmp	r3, #0
 8009182:	d003      	beq.n	800918c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8009184:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009188:	d007      	beq.n	800919a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800918a:	e011      	b.n	80091b0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800918c:	4b12      	ldr	r3, [pc, #72]	@ (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800918e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009190:	4a11      	ldr	r2, [pc, #68]	@ (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009192:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009196:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009198:	e00e      	b.n	80091b8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800919a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800919e:	3308      	adds	r3, #8
 80091a0:	2102      	movs	r1, #2
 80091a2:	4618      	mov	r0, r3
 80091a4:	f001 fb76 	bl	800a894 <RCCEx_PLL2_Config>
 80091a8:	4603      	mov	r3, r0
 80091aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80091ae:	e003      	b.n	80091b8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80091b0:	2301      	movs	r3, #1
 80091b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80091b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d10d      	bne.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80091c0:	4b05      	ldr	r3, [pc, #20]	@ (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80091c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80091c4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80091c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091ce:	4a02      	ldr	r2, [pc, #8]	@ (80091d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80091d0:	430b      	orrs	r3, r1
 80091d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80091d4:	e006      	b.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80091d6:	bf00      	nop
 80091d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80091e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ec:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80091f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80091f2:	2300      	movs	r3, #0
 80091f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80091f6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80091fa:	460b      	mov	r3, r1
 80091fc:	4313      	orrs	r3, r2
 80091fe:	d00c      	beq.n	800921a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009200:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009204:	3328      	adds	r3, #40	@ 0x28
 8009206:	2102      	movs	r1, #2
 8009208:	4618      	mov	r0, r3
 800920a:	f001 fbf5 	bl	800a9f8 <RCCEx_PLL3_Config>
 800920e:	4603      	mov	r3, r0
 8009210:	2b00      	cmp	r3, #0
 8009212:	d002      	beq.n	800921a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8009214:	2301      	movs	r3, #1
 8009216:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800921a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800921e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009222:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8009226:	663b      	str	r3, [r7, #96]	@ 0x60
 8009228:	2300      	movs	r3, #0
 800922a:	667b      	str	r3, [r7, #100]	@ 0x64
 800922c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009230:	460b      	mov	r3, r1
 8009232:	4313      	orrs	r3, r2
 8009234:	d038      	beq.n	80092a8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009236:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800923a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800923e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009242:	d018      	beq.n	8009276 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8009244:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009248:	d811      	bhi.n	800926e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800924a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800924e:	d014      	beq.n	800927a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8009250:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009254:	d80b      	bhi.n	800926e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009256:	2b00      	cmp	r3, #0
 8009258:	d011      	beq.n	800927e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800925a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800925e:	d106      	bne.n	800926e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009260:	4bc3      	ldr	r3, [pc, #780]	@ (8009570 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009264:	4ac2      	ldr	r2, [pc, #776]	@ (8009570 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009266:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800926a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800926c:	e008      	b.n	8009280 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800926e:	2301      	movs	r3, #1
 8009270:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009274:	e004      	b.n	8009280 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009276:	bf00      	nop
 8009278:	e002      	b.n	8009280 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800927a:	bf00      	nop
 800927c:	e000      	b.n	8009280 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800927e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009280:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009284:	2b00      	cmp	r3, #0
 8009286:	d10b      	bne.n	80092a0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009288:	4bb9      	ldr	r3, [pc, #740]	@ (8009570 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800928a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800928c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009290:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009294:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009298:	4ab5      	ldr	r2, [pc, #724]	@ (8009570 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800929a:	430b      	orrs	r3, r1
 800929c:	6553      	str	r3, [r2, #84]	@ 0x54
 800929e:	e003      	b.n	80092a8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80092a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80092a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80092b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80092b6:	2300      	movs	r3, #0
 80092b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80092ba:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80092be:	460b      	mov	r3, r1
 80092c0:	4313      	orrs	r3, r2
 80092c2:	d009      	beq.n	80092d8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80092c4:	4baa      	ldr	r3, [pc, #680]	@ (8009570 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80092c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092c8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80092cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80092d2:	4aa7      	ldr	r2, [pc, #668]	@ (8009570 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80092d4:	430b      	orrs	r3, r1
 80092d6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80092d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80092e4:	653b      	str	r3, [r7, #80]	@ 0x50
 80092e6:	2300      	movs	r3, #0
 80092e8:	657b      	str	r3, [r7, #84]	@ 0x54
 80092ea:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80092ee:	460b      	mov	r3, r1
 80092f0:	4313      	orrs	r3, r2
 80092f2:	d00a      	beq.n	800930a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80092f4:	4b9e      	ldr	r3, [pc, #632]	@ (8009570 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80092f6:	691b      	ldr	r3, [r3, #16]
 80092f8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80092fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009300:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009304:	4a9a      	ldr	r2, [pc, #616]	@ (8009570 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009306:	430b      	orrs	r3, r1
 8009308:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800930a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800930e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009312:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8009316:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009318:	2300      	movs	r3, #0
 800931a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800931c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009320:	460b      	mov	r3, r1
 8009322:	4313      	orrs	r3, r2
 8009324:	d009      	beq.n	800933a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009326:	4b92      	ldr	r3, [pc, #584]	@ (8009570 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009328:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800932a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800932e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009332:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009334:	4a8e      	ldr	r2, [pc, #568]	@ (8009570 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009336:	430b      	orrs	r3, r1
 8009338:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800933a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800933e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009342:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8009346:	643b      	str	r3, [r7, #64]	@ 0x40
 8009348:	2300      	movs	r3, #0
 800934a:	647b      	str	r3, [r7, #68]	@ 0x44
 800934c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009350:	460b      	mov	r3, r1
 8009352:	4313      	orrs	r3, r2
 8009354:	d00e      	beq.n	8009374 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009356:	4b86      	ldr	r3, [pc, #536]	@ (8009570 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009358:	691b      	ldr	r3, [r3, #16]
 800935a:	4a85      	ldr	r2, [pc, #532]	@ (8009570 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800935c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009360:	6113      	str	r3, [r2, #16]
 8009362:	4b83      	ldr	r3, [pc, #524]	@ (8009570 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009364:	6919      	ldr	r1, [r3, #16]
 8009366:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800936a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800936e:	4a80      	ldr	r2, [pc, #512]	@ (8009570 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009370:	430b      	orrs	r3, r1
 8009372:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009374:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800937c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009380:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009382:	2300      	movs	r3, #0
 8009384:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009386:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800938a:	460b      	mov	r3, r1
 800938c:	4313      	orrs	r3, r2
 800938e:	d009      	beq.n	80093a4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009390:	4b77      	ldr	r3, [pc, #476]	@ (8009570 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009392:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009394:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009398:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800939c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800939e:	4a74      	ldr	r2, [pc, #464]	@ (8009570 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80093a0:	430b      	orrs	r3, r1
 80093a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80093a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ac:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80093b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80093b2:	2300      	movs	r3, #0
 80093b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80093b6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80093ba:	460b      	mov	r3, r1
 80093bc:	4313      	orrs	r3, r2
 80093be:	d00a      	beq.n	80093d6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80093c0:	4b6b      	ldr	r3, [pc, #428]	@ (8009570 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80093c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093c4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80093c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80093d0:	4a67      	ldr	r2, [pc, #412]	@ (8009570 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80093d2:	430b      	orrs	r3, r1
 80093d4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80093d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093de:	2100      	movs	r1, #0
 80093e0:	62b9      	str	r1, [r7, #40]	@ 0x28
 80093e2:	f003 0301 	and.w	r3, r3, #1
 80093e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80093e8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80093ec:	460b      	mov	r3, r1
 80093ee:	4313      	orrs	r3, r2
 80093f0:	d011      	beq.n	8009416 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80093f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093f6:	3308      	adds	r3, #8
 80093f8:	2100      	movs	r1, #0
 80093fa:	4618      	mov	r0, r3
 80093fc:	f001 fa4a 	bl	800a894 <RCCEx_PLL2_Config>
 8009400:	4603      	mov	r3, r0
 8009402:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009406:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800940a:	2b00      	cmp	r3, #0
 800940c:	d003      	beq.n	8009416 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800940e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009412:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009416:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800941a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800941e:	2100      	movs	r1, #0
 8009420:	6239      	str	r1, [r7, #32]
 8009422:	f003 0302 	and.w	r3, r3, #2
 8009426:	627b      	str	r3, [r7, #36]	@ 0x24
 8009428:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800942c:	460b      	mov	r3, r1
 800942e:	4313      	orrs	r3, r2
 8009430:	d011      	beq.n	8009456 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009436:	3308      	adds	r3, #8
 8009438:	2101      	movs	r1, #1
 800943a:	4618      	mov	r0, r3
 800943c:	f001 fa2a 	bl	800a894 <RCCEx_PLL2_Config>
 8009440:	4603      	mov	r3, r0
 8009442:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009446:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800944a:	2b00      	cmp	r3, #0
 800944c:	d003      	beq.n	8009456 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800944e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009452:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009456:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800945a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800945e:	2100      	movs	r1, #0
 8009460:	61b9      	str	r1, [r7, #24]
 8009462:	f003 0304 	and.w	r3, r3, #4
 8009466:	61fb      	str	r3, [r7, #28]
 8009468:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800946c:	460b      	mov	r3, r1
 800946e:	4313      	orrs	r3, r2
 8009470:	d011      	beq.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009472:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009476:	3308      	adds	r3, #8
 8009478:	2102      	movs	r1, #2
 800947a:	4618      	mov	r0, r3
 800947c:	f001 fa0a 	bl	800a894 <RCCEx_PLL2_Config>
 8009480:	4603      	mov	r3, r0
 8009482:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009486:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800948a:	2b00      	cmp	r3, #0
 800948c:	d003      	beq.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800948e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009492:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009496:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800949a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800949e:	2100      	movs	r1, #0
 80094a0:	6139      	str	r1, [r7, #16]
 80094a2:	f003 0308 	and.w	r3, r3, #8
 80094a6:	617b      	str	r3, [r7, #20]
 80094a8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80094ac:	460b      	mov	r3, r1
 80094ae:	4313      	orrs	r3, r2
 80094b0:	d011      	beq.n	80094d6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80094b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094b6:	3328      	adds	r3, #40	@ 0x28
 80094b8:	2100      	movs	r1, #0
 80094ba:	4618      	mov	r0, r3
 80094bc:	f001 fa9c 	bl	800a9f8 <RCCEx_PLL3_Config>
 80094c0:	4603      	mov	r3, r0
 80094c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80094c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d003      	beq.n	80094d6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80094d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80094d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094de:	2100      	movs	r1, #0
 80094e0:	60b9      	str	r1, [r7, #8]
 80094e2:	f003 0310 	and.w	r3, r3, #16
 80094e6:	60fb      	str	r3, [r7, #12]
 80094e8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80094ec:	460b      	mov	r3, r1
 80094ee:	4313      	orrs	r3, r2
 80094f0:	d011      	beq.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80094f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094f6:	3328      	adds	r3, #40	@ 0x28
 80094f8:	2101      	movs	r1, #1
 80094fa:	4618      	mov	r0, r3
 80094fc:	f001 fa7c 	bl	800a9f8 <RCCEx_PLL3_Config>
 8009500:	4603      	mov	r3, r0
 8009502:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009506:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800950a:	2b00      	cmp	r3, #0
 800950c:	d003      	beq.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800950e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009512:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800951a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800951e:	2100      	movs	r1, #0
 8009520:	6039      	str	r1, [r7, #0]
 8009522:	f003 0320 	and.w	r3, r3, #32
 8009526:	607b      	str	r3, [r7, #4]
 8009528:	e9d7 1200 	ldrd	r1, r2, [r7]
 800952c:	460b      	mov	r3, r1
 800952e:	4313      	orrs	r3, r2
 8009530:	d011      	beq.n	8009556 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009532:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009536:	3328      	adds	r3, #40	@ 0x28
 8009538:	2102      	movs	r1, #2
 800953a:	4618      	mov	r0, r3
 800953c:	f001 fa5c 	bl	800a9f8 <RCCEx_PLL3_Config>
 8009540:	4603      	mov	r3, r0
 8009542:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009546:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800954a:	2b00      	cmp	r3, #0
 800954c:	d003      	beq.n	8009556 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800954e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009552:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8009556:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800955a:	2b00      	cmp	r3, #0
 800955c:	d101      	bne.n	8009562 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800955e:	2300      	movs	r3, #0
 8009560:	e000      	b.n	8009564 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8009562:	2301      	movs	r3, #1
}
 8009564:	4618      	mov	r0, r3
 8009566:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800956a:	46bd      	mov	sp, r7
 800956c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009570:	58024400 	.word	0x58024400

08009574 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b090      	sub	sp, #64	@ 0x40
 8009578:	af00      	add	r7, sp, #0
 800957a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800957e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009582:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8009586:	430b      	orrs	r3, r1
 8009588:	f040 8094 	bne.w	80096b4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800958c:	4b9e      	ldr	r3, [pc, #632]	@ (8009808 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800958e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009590:	f003 0307 	and.w	r3, r3, #7
 8009594:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009598:	2b04      	cmp	r3, #4
 800959a:	f200 8087 	bhi.w	80096ac <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800959e:	a201      	add	r2, pc, #4	@ (adr r2, 80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80095a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095a4:	080095b9 	.word	0x080095b9
 80095a8:	080095e1 	.word	0x080095e1
 80095ac:	08009609 	.word	0x08009609
 80095b0:	080096a5 	.word	0x080096a5
 80095b4:	08009631 	.word	0x08009631
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80095b8:	4b93      	ldr	r3, [pc, #588]	@ (8009808 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80095c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80095c4:	d108      	bne.n	80095d8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80095c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80095ca:	4618      	mov	r0, r3
 80095cc:	f001 f810 	bl	800a5f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80095d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095d4:	f000 bd45 	b.w	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80095d8:	2300      	movs	r3, #0
 80095da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095dc:	f000 bd41 	b.w	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80095e0:	4b89      	ldr	r3, [pc, #548]	@ (8009808 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80095e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80095ec:	d108      	bne.n	8009600 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095ee:	f107 0318 	add.w	r3, r7, #24
 80095f2:	4618      	mov	r0, r3
 80095f4:	f000 fd54 	bl	800a0a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80095f8:	69bb      	ldr	r3, [r7, #24]
 80095fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095fc:	f000 bd31 	b.w	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009600:	2300      	movs	r3, #0
 8009602:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009604:	f000 bd2d 	b.w	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009608:	4b7f      	ldr	r3, [pc, #508]	@ (8009808 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009610:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009614:	d108      	bne.n	8009628 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009616:	f107 030c 	add.w	r3, r7, #12
 800961a:	4618      	mov	r0, r3
 800961c:	f000 fe94 	bl	800a348 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009624:	f000 bd1d 	b.w	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009628:	2300      	movs	r3, #0
 800962a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800962c:	f000 bd19 	b.w	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009630:	4b75      	ldr	r3, [pc, #468]	@ (8009808 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009632:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009634:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009638:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800963a:	4b73      	ldr	r3, [pc, #460]	@ (8009808 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f003 0304 	and.w	r3, r3, #4
 8009642:	2b04      	cmp	r3, #4
 8009644:	d10c      	bne.n	8009660 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8009646:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009648:	2b00      	cmp	r3, #0
 800964a:	d109      	bne.n	8009660 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800964c:	4b6e      	ldr	r3, [pc, #440]	@ (8009808 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	08db      	lsrs	r3, r3, #3
 8009652:	f003 0303 	and.w	r3, r3, #3
 8009656:	4a6d      	ldr	r2, [pc, #436]	@ (800980c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009658:	fa22 f303 	lsr.w	r3, r2, r3
 800965c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800965e:	e01f      	b.n	80096a0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009660:	4b69      	ldr	r3, [pc, #420]	@ (8009808 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009668:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800966c:	d106      	bne.n	800967c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800966e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009670:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009674:	d102      	bne.n	800967c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009676:	4b66      	ldr	r3, [pc, #408]	@ (8009810 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009678:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800967a:	e011      	b.n	80096a0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800967c:	4b62      	ldr	r3, [pc, #392]	@ (8009808 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009684:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009688:	d106      	bne.n	8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800968a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800968c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009690:	d102      	bne.n	8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009692:	4b60      	ldr	r3, [pc, #384]	@ (8009814 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009694:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009696:	e003      	b.n	80096a0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009698:	2300      	movs	r3, #0
 800969a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800969c:	f000 bce1 	b.w	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80096a0:	f000 bcdf 	b.w	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80096a4:	4b5c      	ldr	r3, [pc, #368]	@ (8009818 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80096a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096a8:	f000 bcdb 	b.w	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80096ac:	2300      	movs	r3, #0
 80096ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096b0:	f000 bcd7 	b.w	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80096b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096b8:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80096bc:	430b      	orrs	r3, r1
 80096be:	f040 80ad 	bne.w	800981c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80096c2:	4b51      	ldr	r3, [pc, #324]	@ (8009808 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80096c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096c6:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80096ca:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80096cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096d2:	d056      	beq.n	8009782 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80096d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096da:	f200 8090 	bhi.w	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80096de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096e0:	2bc0      	cmp	r3, #192	@ 0xc0
 80096e2:	f000 8088 	beq.w	80097f6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80096e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096e8:	2bc0      	cmp	r3, #192	@ 0xc0
 80096ea:	f200 8088 	bhi.w	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80096ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096f0:	2b80      	cmp	r3, #128	@ 0x80
 80096f2:	d032      	beq.n	800975a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80096f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096f6:	2b80      	cmp	r3, #128	@ 0x80
 80096f8:	f200 8081 	bhi.w	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80096fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d003      	beq.n	800970a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8009702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009704:	2b40      	cmp	r3, #64	@ 0x40
 8009706:	d014      	beq.n	8009732 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8009708:	e079      	b.n	80097fe <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800970a:	4b3f      	ldr	r3, [pc, #252]	@ (8009808 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009712:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009716:	d108      	bne.n	800972a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009718:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800971c:	4618      	mov	r0, r3
 800971e:	f000 ff67 	bl	800a5f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009724:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009726:	f000 bc9c 	b.w	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800972a:	2300      	movs	r3, #0
 800972c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800972e:	f000 bc98 	b.w	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009732:	4b35      	ldr	r3, [pc, #212]	@ (8009808 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800973a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800973e:	d108      	bne.n	8009752 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009740:	f107 0318 	add.w	r3, r7, #24
 8009744:	4618      	mov	r0, r3
 8009746:	f000 fcab 	bl	800a0a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800974a:	69bb      	ldr	r3, [r7, #24]
 800974c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800974e:	f000 bc88 	b.w	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009752:	2300      	movs	r3, #0
 8009754:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009756:	f000 bc84 	b.w	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800975a:	4b2b      	ldr	r3, [pc, #172]	@ (8009808 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009762:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009766:	d108      	bne.n	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009768:	f107 030c 	add.w	r3, r7, #12
 800976c:	4618      	mov	r0, r3
 800976e:	f000 fdeb 	bl	800a348 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009776:	f000 bc74 	b.w	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800977a:	2300      	movs	r3, #0
 800977c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800977e:	f000 bc70 	b.w	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009782:	4b21      	ldr	r3, [pc, #132]	@ (8009808 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009784:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009786:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800978a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800978c:	4b1e      	ldr	r3, [pc, #120]	@ (8009808 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f003 0304 	and.w	r3, r3, #4
 8009794:	2b04      	cmp	r3, #4
 8009796:	d10c      	bne.n	80097b2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8009798:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800979a:	2b00      	cmp	r3, #0
 800979c:	d109      	bne.n	80097b2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800979e:	4b1a      	ldr	r3, [pc, #104]	@ (8009808 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	08db      	lsrs	r3, r3, #3
 80097a4:	f003 0303 	and.w	r3, r3, #3
 80097a8:	4a18      	ldr	r2, [pc, #96]	@ (800980c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80097aa:	fa22 f303 	lsr.w	r3, r2, r3
 80097ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80097b0:	e01f      	b.n	80097f2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80097b2:	4b15      	ldr	r3, [pc, #84]	@ (8009808 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80097be:	d106      	bne.n	80097ce <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80097c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80097c6:	d102      	bne.n	80097ce <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80097c8:	4b11      	ldr	r3, [pc, #68]	@ (8009810 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80097ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80097cc:	e011      	b.n	80097f2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80097ce:	4b0e      	ldr	r3, [pc, #56]	@ (8009808 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80097d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80097da:	d106      	bne.n	80097ea <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80097dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80097e2:	d102      	bne.n	80097ea <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80097e4:	4b0b      	ldr	r3, [pc, #44]	@ (8009814 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80097e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80097e8:	e003      	b.n	80097f2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80097ea:	2300      	movs	r3, #0
 80097ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80097ee:	f000 bc38 	b.w	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80097f2:	f000 bc36 	b.w	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80097f6:	4b08      	ldr	r3, [pc, #32]	@ (8009818 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80097f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097fa:	f000 bc32 	b.w	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80097fe:	2300      	movs	r3, #0
 8009800:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009802:	f000 bc2e 	b.w	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009806:	bf00      	nop
 8009808:	58024400 	.word	0x58024400
 800980c:	03d09000 	.word	0x03d09000
 8009810:	003d0900 	.word	0x003d0900
 8009814:	017d7840 	.word	0x017d7840
 8009818:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800981c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009820:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8009824:	430b      	orrs	r3, r1
 8009826:	f040 809c 	bne.w	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800982a:	4b9e      	ldr	r3, [pc, #632]	@ (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800982c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800982e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8009832:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009836:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800983a:	d054      	beq.n	80098e6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800983c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800983e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009842:	f200 808b 	bhi.w	800995c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009848:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800984c:	f000 8083 	beq.w	8009956 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8009850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009852:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009856:	f200 8081 	bhi.w	800995c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800985a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800985c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009860:	d02f      	beq.n	80098c2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8009862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009864:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009868:	d878      	bhi.n	800995c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800986a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800986c:	2b00      	cmp	r3, #0
 800986e:	d004      	beq.n	800987a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8009870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009872:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009876:	d012      	beq.n	800989e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8009878:	e070      	b.n	800995c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800987a:	4b8a      	ldr	r3, [pc, #552]	@ (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009882:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009886:	d107      	bne.n	8009898 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009888:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800988c:	4618      	mov	r0, r3
 800988e:	f000 feaf 	bl	800a5f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009894:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009896:	e3e4      	b.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009898:	2300      	movs	r3, #0
 800989a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800989c:	e3e1      	b.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800989e:	4b81      	ldr	r3, [pc, #516]	@ (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80098a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80098aa:	d107      	bne.n	80098bc <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098ac:	f107 0318 	add.w	r3, r7, #24
 80098b0:	4618      	mov	r0, r3
 80098b2:	f000 fbf5 	bl	800a0a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80098b6:	69bb      	ldr	r3, [r7, #24]
 80098b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098ba:	e3d2      	b.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80098bc:	2300      	movs	r3, #0
 80098be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098c0:	e3cf      	b.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80098c2:	4b78      	ldr	r3, [pc, #480]	@ (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80098ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80098ce:	d107      	bne.n	80098e0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80098d0:	f107 030c 	add.w	r3, r7, #12
 80098d4:	4618      	mov	r0, r3
 80098d6:	f000 fd37 	bl	800a348 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098de:	e3c0      	b.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80098e0:	2300      	movs	r3, #0
 80098e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098e4:	e3bd      	b.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80098e6:	4b6f      	ldr	r3, [pc, #444]	@ (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80098e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80098ea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80098ee:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80098f0:	4b6c      	ldr	r3, [pc, #432]	@ (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f003 0304 	and.w	r3, r3, #4
 80098f8:	2b04      	cmp	r3, #4
 80098fa:	d10c      	bne.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80098fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d109      	bne.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009902:	4b68      	ldr	r3, [pc, #416]	@ (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	08db      	lsrs	r3, r3, #3
 8009908:	f003 0303 	and.w	r3, r3, #3
 800990c:	4a66      	ldr	r2, [pc, #408]	@ (8009aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800990e:	fa22 f303 	lsr.w	r3, r2, r3
 8009912:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009914:	e01e      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009916:	4b63      	ldr	r3, [pc, #396]	@ (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800991e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009922:	d106      	bne.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8009924:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009926:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800992a:	d102      	bne.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800992c:	4b5f      	ldr	r3, [pc, #380]	@ (8009aac <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800992e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009930:	e010      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009932:	4b5c      	ldr	r3, [pc, #368]	@ (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800993a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800993e:	d106      	bne.n	800994e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8009940:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009942:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009946:	d102      	bne.n	800994e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009948:	4b59      	ldr	r3, [pc, #356]	@ (8009ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800994a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800994c:	e002      	b.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800994e:	2300      	movs	r3, #0
 8009950:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009952:	e386      	b.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009954:	e385      	b.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009956:	4b57      	ldr	r3, [pc, #348]	@ (8009ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009958:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800995a:	e382      	b.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800995c:	2300      	movs	r3, #0
 800995e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009960:	e37f      	b.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009962:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009966:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800996a:	430b      	orrs	r3, r1
 800996c:	f040 80a7 	bne.w	8009abe <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8009970:	4b4c      	ldr	r3, [pc, #304]	@ (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009972:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009974:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8009978:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800997a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800997c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009980:	d055      	beq.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8009982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009984:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009988:	f200 8096 	bhi.w	8009ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800998c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800998e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009992:	f000 8084 	beq.w	8009a9e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8009996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009998:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800999c:	f200 808c 	bhi.w	8009ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80099a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80099a6:	d030      	beq.n	8009a0a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80099a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099aa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80099ae:	f200 8083 	bhi.w	8009ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80099b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d004      	beq.n	80099c2 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80099b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80099be:	d012      	beq.n	80099e6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80099c0:	e07a      	b.n	8009ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80099c2:	4b38      	ldr	r3, [pc, #224]	@ (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80099ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80099ce:	d107      	bne.n	80099e0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80099d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80099d4:	4618      	mov	r0, r3
 80099d6:	f000 fe0b 	bl	800a5f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80099da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099de:	e340      	b.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80099e0:	2300      	movs	r3, #0
 80099e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099e4:	e33d      	b.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80099e6:	4b2f      	ldr	r3, [pc, #188]	@ (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80099ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80099f2:	d107      	bne.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80099f4:	f107 0318 	add.w	r3, r7, #24
 80099f8:	4618      	mov	r0, r3
 80099fa:	f000 fb51 	bl	800a0a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80099fe:	69bb      	ldr	r3, [r7, #24]
 8009a00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a02:	e32e      	b.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009a04:	2300      	movs	r3, #0
 8009a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a08:	e32b      	b.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009a0a:	4b26      	ldr	r3, [pc, #152]	@ (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009a12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a16:	d107      	bne.n	8009a28 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a18:	f107 030c 	add.w	r3, r7, #12
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f000 fc93 	bl	800a348 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a26:	e31c      	b.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009a28:	2300      	movs	r3, #0
 8009a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a2c:	e319      	b.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009a2e:	4b1d      	ldr	r3, [pc, #116]	@ (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009a32:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009a36:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009a38:	4b1a      	ldr	r3, [pc, #104]	@ (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f003 0304 	and.w	r3, r3, #4
 8009a40:	2b04      	cmp	r3, #4
 8009a42:	d10c      	bne.n	8009a5e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8009a44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d109      	bne.n	8009a5e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009a4a:	4b16      	ldr	r3, [pc, #88]	@ (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	08db      	lsrs	r3, r3, #3
 8009a50:	f003 0303 	and.w	r3, r3, #3
 8009a54:	4a14      	ldr	r2, [pc, #80]	@ (8009aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009a56:	fa22 f303 	lsr.w	r3, r2, r3
 8009a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a5c:	e01e      	b.n	8009a9c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009a5e:	4b11      	ldr	r3, [pc, #68]	@ (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a6a:	d106      	bne.n	8009a7a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8009a6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a72:	d102      	bne.n	8009a7a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009a74:	4b0d      	ldr	r3, [pc, #52]	@ (8009aac <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a78:	e010      	b.n	8009a9c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a82:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009a86:	d106      	bne.n	8009a96 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8009a88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a8e:	d102      	bne.n	8009a96 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009a90:	4b07      	ldr	r3, [pc, #28]	@ (8009ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a94:	e002      	b.n	8009a9c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009a96:	2300      	movs	r3, #0
 8009a98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009a9a:	e2e2      	b.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009a9c:	e2e1      	b.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009a9e:	4b05      	ldr	r3, [pc, #20]	@ (8009ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009aa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009aa2:	e2de      	b.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009aa4:	58024400 	.word	0x58024400
 8009aa8:	03d09000 	.word	0x03d09000
 8009aac:	003d0900 	.word	0x003d0900
 8009ab0:	017d7840 	.word	0x017d7840
 8009ab4:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8009ab8:	2300      	movs	r3, #0
 8009aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009abc:	e2d1      	b.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009abe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ac2:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8009ac6:	430b      	orrs	r3, r1
 8009ac8:	f040 809c 	bne.w	8009c04 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8009acc:	4b93      	ldr	r3, [pc, #588]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009ace:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ad0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8009ad4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ad8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009adc:	d054      	beq.n	8009b88 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8009ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ae0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009ae4:	f200 808b 	bhi.w	8009bfe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009aee:	f000 8083 	beq.w	8009bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8009af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009af4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009af8:	f200 8081 	bhi.w	8009bfe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009afe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009b02:	d02f      	beq.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8009b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009b0a:	d878      	bhi.n	8009bfe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d004      	beq.n	8009b1c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8009b12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b18:	d012      	beq.n	8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8009b1a:	e070      	b.n	8009bfe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009b1c:	4b7f      	ldr	r3, [pc, #508]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009b24:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009b28:	d107      	bne.n	8009b3a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009b2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f000 fd5e 	bl	800a5f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b38:	e293      	b.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b3e:	e290      	b.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009b40:	4b76      	ldr	r3, [pc, #472]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009b48:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009b4c:	d107      	bne.n	8009b5e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b4e:	f107 0318 	add.w	r3, r7, #24
 8009b52:	4618      	mov	r0, r3
 8009b54:	f000 faa4 	bl	800a0a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009b58:	69bb      	ldr	r3, [r7, #24]
 8009b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b5c:	e281      	b.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b62:	e27e      	b.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009b64:	4b6d      	ldr	r3, [pc, #436]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009b6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b70:	d107      	bne.n	8009b82 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b72:	f107 030c 	add.w	r3, r7, #12
 8009b76:	4618      	mov	r0, r3
 8009b78:	f000 fbe6 	bl	800a348 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b80:	e26f      	b.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b82:	2300      	movs	r3, #0
 8009b84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b86:	e26c      	b.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009b88:	4b64      	ldr	r3, [pc, #400]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009b8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b8c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009b90:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009b92:	4b62      	ldr	r3, [pc, #392]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f003 0304 	and.w	r3, r3, #4
 8009b9a:	2b04      	cmp	r3, #4
 8009b9c:	d10c      	bne.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8009b9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d109      	bne.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009ba4:	4b5d      	ldr	r3, [pc, #372]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	08db      	lsrs	r3, r3, #3
 8009baa:	f003 0303 	and.w	r3, r3, #3
 8009bae:	4a5c      	ldr	r2, [pc, #368]	@ (8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009bb0:	fa22 f303 	lsr.w	r3, r2, r3
 8009bb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009bb6:	e01e      	b.n	8009bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009bb8:	4b58      	ldr	r3, [pc, #352]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009bc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009bc4:	d106      	bne.n	8009bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8009bc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bc8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009bcc:	d102      	bne.n	8009bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009bce:	4b55      	ldr	r3, [pc, #340]	@ (8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009bd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009bd2:	e010      	b.n	8009bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009bd4:	4b51      	ldr	r3, [pc, #324]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009bdc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009be0:	d106      	bne.n	8009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8009be2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009be4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009be8:	d102      	bne.n	8009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009bea:	4b4f      	ldr	r3, [pc, #316]	@ (8009d28 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009bec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009bee:	e002      	b.n	8009bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009bf4:	e235      	b.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009bf6:	e234      	b.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009bf8:	4b4c      	ldr	r3, [pc, #304]	@ (8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8009bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bfc:	e231      	b.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c02:	e22e      	b.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8009c04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c08:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8009c0c:	430b      	orrs	r3, r1
 8009c0e:	f040 808f 	bne.w	8009d30 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8009c12:	4b42      	ldr	r3, [pc, #264]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009c14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c16:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8009c1a:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8009c1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c1e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009c22:	d06b      	beq.n	8009cfc <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8009c24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c26:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009c2a:	d874      	bhi.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c2e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009c32:	d056      	beq.n	8009ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8009c34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c36:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009c3a:	d86c      	bhi.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c3e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009c42:	d03b      	beq.n	8009cbc <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8009c44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c46:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009c4a:	d864      	bhi.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c4e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009c52:	d021      	beq.n	8009c98 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8009c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c56:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009c5a:	d85c      	bhi.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009c5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d004      	beq.n	8009c6c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8009c62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c68:	d004      	beq.n	8009c74 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8009c6a:	e054      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8009c6c:	f7fe fa4c 	bl	8008108 <HAL_RCC_GetPCLK1Freq>
 8009c70:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009c72:	e1f6      	b.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009c74:	4b29      	ldr	r3, [pc, #164]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009c7c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009c80:	d107      	bne.n	8009c92 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c82:	f107 0318 	add.w	r3, r7, #24
 8009c86:	4618      	mov	r0, r3
 8009c88:	f000 fa0a 	bl	800a0a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009c8c:	69fb      	ldr	r3, [r7, #28]
 8009c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c90:	e1e7      	b.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c92:	2300      	movs	r3, #0
 8009c94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c96:	e1e4      	b.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009c98:	4b20      	ldr	r3, [pc, #128]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009ca0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009ca4:	d107      	bne.n	8009cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ca6:	f107 030c 	add.w	r3, r7, #12
 8009caa:	4618      	mov	r0, r3
 8009cac:	f000 fb4c 	bl	800a348 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009cb0:	693b      	ldr	r3, [r7, #16]
 8009cb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009cb4:	e1d5      	b.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cba:	e1d2      	b.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009cbc:	4b17      	ldr	r3, [pc, #92]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f003 0304 	and.w	r3, r3, #4
 8009cc4:	2b04      	cmp	r3, #4
 8009cc6:	d109      	bne.n	8009cdc <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009cc8:	4b14      	ldr	r3, [pc, #80]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	08db      	lsrs	r3, r3, #3
 8009cce:	f003 0303 	and.w	r3, r3, #3
 8009cd2:	4a13      	ldr	r2, [pc, #76]	@ (8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009cd4:	fa22 f303 	lsr.w	r3, r2, r3
 8009cd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009cda:	e1c2      	b.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009cdc:	2300      	movs	r3, #0
 8009cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ce0:	e1bf      	b.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009ce2:	4b0e      	ldr	r3, [pc, #56]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009cea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009cee:	d102      	bne.n	8009cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8009cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009cf4:	e1b5      	b.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cfa:	e1b2      	b.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009cfc:	4b07      	ldr	r3, [pc, #28]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d04:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d08:	d102      	bne.n	8009d10 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8009d0a:	4b07      	ldr	r3, [pc, #28]	@ (8009d28 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009d0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d0e:	e1a8      	b.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009d10:	2300      	movs	r3, #0
 8009d12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d14:	e1a5      	b.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009d16:	2300      	movs	r3, #0
 8009d18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d1a:	e1a2      	b.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009d1c:	58024400 	.word	0x58024400
 8009d20:	03d09000 	.word	0x03d09000
 8009d24:	003d0900 	.word	0x003d0900
 8009d28:	017d7840 	.word	0x017d7840
 8009d2c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009d30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d34:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8009d38:	430b      	orrs	r3, r1
 8009d3a:	d173      	bne.n	8009e24 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8009d3c:	4b9c      	ldr	r3, [pc, #624]	@ (8009fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009d3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d40:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009d44:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009d46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d4c:	d02f      	beq.n	8009dae <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009d4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d54:	d863      	bhi.n	8009e1e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8009d56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d004      	beq.n	8009d66 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8009d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d62:	d012      	beq.n	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8009d64:	e05b      	b.n	8009e1e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009d66:	4b92      	ldr	r3, [pc, #584]	@ (8009fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009d6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009d72:	d107      	bne.n	8009d84 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d74:	f107 0318 	add.w	r3, r7, #24
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f000 f991 	bl	800a0a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009d7e:	69bb      	ldr	r3, [r7, #24]
 8009d80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d82:	e16e      	b.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009d84:	2300      	movs	r3, #0
 8009d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d88:	e16b      	b.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009d8a:	4b89      	ldr	r3, [pc, #548]	@ (8009fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009d92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009d96:	d107      	bne.n	8009da8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d98:	f107 030c 	add.w	r3, r7, #12
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	f000 fad3 	bl	800a348 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009da2:	697b      	ldr	r3, [r7, #20]
 8009da4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009da6:	e15c      	b.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009da8:	2300      	movs	r3, #0
 8009daa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009dac:	e159      	b.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009dae:	4b80      	ldr	r3, [pc, #512]	@ (8009fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009db0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009db2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009db6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009db8:	4b7d      	ldr	r3, [pc, #500]	@ (8009fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f003 0304 	and.w	r3, r3, #4
 8009dc0:	2b04      	cmp	r3, #4
 8009dc2:	d10c      	bne.n	8009dde <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8009dc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d109      	bne.n	8009dde <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009dca:	4b79      	ldr	r3, [pc, #484]	@ (8009fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	08db      	lsrs	r3, r3, #3
 8009dd0:	f003 0303 	and.w	r3, r3, #3
 8009dd4:	4a77      	ldr	r2, [pc, #476]	@ (8009fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8009dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009ddc:	e01e      	b.n	8009e1c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009dde:	4b74      	ldr	r3, [pc, #464]	@ (8009fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009de6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009dea:	d106      	bne.n	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8009dec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009dee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009df2:	d102      	bne.n	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009df4:	4b70      	ldr	r3, [pc, #448]	@ (8009fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8009df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009df8:	e010      	b.n	8009e1c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009dfa:	4b6d      	ldr	r3, [pc, #436]	@ (8009fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009e02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009e06:	d106      	bne.n	8009e16 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8009e08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009e0e:	d102      	bne.n	8009e16 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009e10:	4b6a      	ldr	r3, [pc, #424]	@ (8009fbc <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e14:	e002      	b.n	8009e1c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009e16:	2300      	movs	r3, #0
 8009e18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009e1a:	e122      	b.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009e1c:	e121      	b.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e22:	e11e      	b.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009e24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e28:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8009e2c:	430b      	orrs	r3, r1
 8009e2e:	d133      	bne.n	8009e98 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009e30:	4b5f      	ldr	r3, [pc, #380]	@ (8009fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009e32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009e38:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009e3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d004      	beq.n	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8009e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e46:	d012      	beq.n	8009e6e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8009e48:	e023      	b.n	8009e92 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009e4a:	4b59      	ldr	r3, [pc, #356]	@ (8009fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009e52:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009e56:	d107      	bne.n	8009e68 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009e58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	f000 fbc7 	bl	800a5f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e66:	e0fc      	b.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009e68:	2300      	movs	r3, #0
 8009e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e6c:	e0f9      	b.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009e6e:	4b50      	ldr	r3, [pc, #320]	@ (8009fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009e76:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009e7a:	d107      	bne.n	8009e8c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e7c:	f107 0318 	add.w	r3, r7, #24
 8009e80:	4618      	mov	r0, r3
 8009e82:	f000 f90d 	bl	800a0a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009e86:	6a3b      	ldr	r3, [r7, #32]
 8009e88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e8a:	e0ea      	b.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e90:	e0e7      	b.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009e92:	2300      	movs	r3, #0
 8009e94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e96:	e0e4      	b.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009e98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e9c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8009ea0:	430b      	orrs	r3, r1
 8009ea2:	f040 808d 	bne.w	8009fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009ea6:	4b42      	ldr	r3, [pc, #264]	@ (8009fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009ea8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009eaa:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8009eae:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009eb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009eb6:	d06b      	beq.n	8009f90 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8009eb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009ebe:	d874      	bhi.n	8009faa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009ec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ec6:	d056      	beq.n	8009f76 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8009ec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ece:	d86c      	bhi.n	8009faa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009ed0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ed2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009ed6:	d03b      	beq.n	8009f50 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8009ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eda:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009ede:	d864      	bhi.n	8009faa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009ee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ee2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009ee6:	d021      	beq.n	8009f2c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8009ee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009eee:	d85c      	bhi.n	8009faa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009ef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d004      	beq.n	8009f00 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8009ef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ef8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009efc:	d004      	beq.n	8009f08 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8009efe:	e054      	b.n	8009faa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009f00:	f000 f8b8 	bl	800a074 <HAL_RCCEx_GetD3PCLK1Freq>
 8009f04:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009f06:	e0ac      	b.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009f08:	4b29      	ldr	r3, [pc, #164]	@ (8009fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009f10:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009f14:	d107      	bne.n	8009f26 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f16:	f107 0318 	add.w	r3, r7, #24
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	f000 f8c0 	bl	800a0a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009f20:	69fb      	ldr	r3, [r7, #28]
 8009f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f24:	e09d      	b.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f26:	2300      	movs	r3, #0
 8009f28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f2a:	e09a      	b.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009f2c:	4b20      	ldr	r3, [pc, #128]	@ (8009fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009f34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009f38:	d107      	bne.n	8009f4a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f3a:	f107 030c 	add.w	r3, r7, #12
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f000 fa02 	bl	800a348 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009f44:	693b      	ldr	r3, [r7, #16]
 8009f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f48:	e08b      	b.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f4e:	e088      	b.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009f50:	4b17      	ldr	r3, [pc, #92]	@ (8009fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f003 0304 	and.w	r3, r3, #4
 8009f58:	2b04      	cmp	r3, #4
 8009f5a:	d109      	bne.n	8009f70 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009f5c:	4b14      	ldr	r3, [pc, #80]	@ (8009fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	08db      	lsrs	r3, r3, #3
 8009f62:	f003 0303 	and.w	r3, r3, #3
 8009f66:	4a13      	ldr	r2, [pc, #76]	@ (8009fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009f68:	fa22 f303 	lsr.w	r3, r2, r3
 8009f6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f6e:	e078      	b.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f70:	2300      	movs	r3, #0
 8009f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f74:	e075      	b.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009f76:	4b0e      	ldr	r3, [pc, #56]	@ (8009fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f82:	d102      	bne.n	8009f8a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8009f84:	4b0c      	ldr	r3, [pc, #48]	@ (8009fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8009f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f88:	e06b      	b.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f8e:	e068      	b.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009f90:	4b07      	ldr	r3, [pc, #28]	@ (8009fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009f98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009f9c:	d102      	bne.n	8009fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8009f9e:	4b07      	ldr	r3, [pc, #28]	@ (8009fbc <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009fa2:	e05e      	b.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009fa8:	e05b      	b.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8009faa:	2300      	movs	r3, #0
 8009fac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009fae:	e058      	b.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009fb0:	58024400 	.word	0x58024400
 8009fb4:	03d09000 	.word	0x03d09000
 8009fb8:	003d0900 	.word	0x003d0900
 8009fbc:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009fc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009fc4:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8009fc8:	430b      	orrs	r3, r1
 8009fca:	d148      	bne.n	800a05e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009fcc:	4b27      	ldr	r3, [pc, #156]	@ (800a06c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009fce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009fd0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009fd4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009fd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fd8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009fdc:	d02a      	beq.n	800a034 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8009fde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fe0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009fe4:	d838      	bhi.n	800a058 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8009fe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d004      	beq.n	8009ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8009fec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009ff2:	d00d      	beq.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8009ff4:	e030      	b.n	800a058 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009ff6:	4b1d      	ldr	r3, [pc, #116]	@ (800a06c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ffe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a002:	d102      	bne.n	800a00a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800a004:	4b1a      	ldr	r3, [pc, #104]	@ (800a070 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800a006:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a008:	e02b      	b.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a00a:	2300      	movs	r3, #0
 800a00c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a00e:	e028      	b.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a010:	4b16      	ldr	r3, [pc, #88]	@ (800a06c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a018:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a01c:	d107      	bne.n	800a02e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a01e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a022:	4618      	mov	r0, r3
 800a024:	f000 fae4 	bl	800a5f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a02a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a02c:	e019      	b.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a02e:	2300      	movs	r3, #0
 800a030:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a032:	e016      	b.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a034:	4b0d      	ldr	r3, [pc, #52]	@ (800a06c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a03c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a040:	d107      	bne.n	800a052 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a042:	f107 0318 	add.w	r3, r7, #24
 800a046:	4618      	mov	r0, r3
 800a048:	f000 f82a 	bl	800a0a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a04c:	69fb      	ldr	r3, [r7, #28]
 800a04e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a050:	e007      	b.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a052:	2300      	movs	r3, #0
 800a054:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a056:	e004      	b.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a058:	2300      	movs	r3, #0
 800a05a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a05c:	e001      	b.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800a05e:	2300      	movs	r3, #0
 800a060:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800a062:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a064:	4618      	mov	r0, r3
 800a066:	3740      	adds	r7, #64	@ 0x40
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}
 800a06c:	58024400 	.word	0x58024400
 800a070:	017d7840 	.word	0x017d7840

0800a074 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a078:	f7fe f816 	bl	80080a8 <HAL_RCC_GetHCLKFreq>
 800a07c:	4602      	mov	r2, r0
 800a07e:	4b06      	ldr	r3, [pc, #24]	@ (800a098 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a080:	6a1b      	ldr	r3, [r3, #32]
 800a082:	091b      	lsrs	r3, r3, #4
 800a084:	f003 0307 	and.w	r3, r3, #7
 800a088:	4904      	ldr	r1, [pc, #16]	@ (800a09c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a08a:	5ccb      	ldrb	r3, [r1, r3]
 800a08c:	f003 031f 	and.w	r3, r3, #31
 800a090:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a094:	4618      	mov	r0, r3
 800a096:	bd80      	pop	{r7, pc}
 800a098:	58024400 	.word	0x58024400
 800a09c:	0800dd4c 	.word	0x0800dd4c

0800a0a0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a0a0:	b480      	push	{r7}
 800a0a2:	b089      	sub	sp, #36	@ 0x24
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a0a8:	4ba1      	ldr	r3, [pc, #644]	@ (800a330 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0ac:	f003 0303 	and.w	r3, r3, #3
 800a0b0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a0b2:	4b9f      	ldr	r3, [pc, #636]	@ (800a330 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0b6:	0b1b      	lsrs	r3, r3, #12
 800a0b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a0bc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a0be:	4b9c      	ldr	r3, [pc, #624]	@ (800a330 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0c2:	091b      	lsrs	r3, r3, #4
 800a0c4:	f003 0301 	and.w	r3, r3, #1
 800a0c8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a0ca:	4b99      	ldr	r3, [pc, #612]	@ (800a330 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0ce:	08db      	lsrs	r3, r3, #3
 800a0d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a0d4:	693a      	ldr	r2, [r7, #16]
 800a0d6:	fb02 f303 	mul.w	r3, r2, r3
 800a0da:	ee07 3a90 	vmov	s15, r3
 800a0de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a0e6:	697b      	ldr	r3, [r7, #20]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	f000 8111 	beq.w	800a310 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a0ee:	69bb      	ldr	r3, [r7, #24]
 800a0f0:	2b02      	cmp	r3, #2
 800a0f2:	f000 8083 	beq.w	800a1fc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a0f6:	69bb      	ldr	r3, [r7, #24]
 800a0f8:	2b02      	cmp	r3, #2
 800a0fa:	f200 80a1 	bhi.w	800a240 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a0fe:	69bb      	ldr	r3, [r7, #24]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d003      	beq.n	800a10c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a104:	69bb      	ldr	r3, [r7, #24]
 800a106:	2b01      	cmp	r3, #1
 800a108:	d056      	beq.n	800a1b8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a10a:	e099      	b.n	800a240 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a10c:	4b88      	ldr	r3, [pc, #544]	@ (800a330 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f003 0320 	and.w	r3, r3, #32
 800a114:	2b00      	cmp	r3, #0
 800a116:	d02d      	beq.n	800a174 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a118:	4b85      	ldr	r3, [pc, #532]	@ (800a330 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	08db      	lsrs	r3, r3, #3
 800a11e:	f003 0303 	and.w	r3, r3, #3
 800a122:	4a84      	ldr	r2, [pc, #528]	@ (800a334 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a124:	fa22 f303 	lsr.w	r3, r2, r3
 800a128:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a12a:	68bb      	ldr	r3, [r7, #8]
 800a12c:	ee07 3a90 	vmov	s15, r3
 800a130:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	ee07 3a90 	vmov	s15, r3
 800a13a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a13e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a142:	4b7b      	ldr	r3, [pc, #492]	@ (800a330 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a144:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a14a:	ee07 3a90 	vmov	s15, r3
 800a14e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a152:	ed97 6a03 	vldr	s12, [r7, #12]
 800a156:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a338 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a15a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a15e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a162:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a166:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a16a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a16e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a172:	e087      	b.n	800a284 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a174:	697b      	ldr	r3, [r7, #20]
 800a176:	ee07 3a90 	vmov	s15, r3
 800a17a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a17e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a33c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a182:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a186:	4b6a      	ldr	r3, [pc, #424]	@ (800a330 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a188:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a18a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a18e:	ee07 3a90 	vmov	s15, r3
 800a192:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a196:	ed97 6a03 	vldr	s12, [r7, #12]
 800a19a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a338 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a19e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a1aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a1b6:	e065      	b.n	800a284 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a1b8:	697b      	ldr	r3, [r7, #20]
 800a1ba:	ee07 3a90 	vmov	s15, r3
 800a1be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1c2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a340 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a1c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1ca:	4b59      	ldr	r3, [pc, #356]	@ (800a330 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a1cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1d2:	ee07 3a90 	vmov	s15, r3
 800a1d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1da:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1de:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a338 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a1e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a1ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a1fa:	e043      	b.n	800a284 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a1fc:	697b      	ldr	r3, [r7, #20]
 800a1fe:	ee07 3a90 	vmov	s15, r3
 800a202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a206:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a344 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a20a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a20e:	4b48      	ldr	r3, [pc, #288]	@ (800a330 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a210:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a212:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a216:	ee07 3a90 	vmov	s15, r3
 800a21a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a21e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a222:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a338 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a226:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a22a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a22e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a232:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a236:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a23a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a23e:	e021      	b.n	800a284 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a240:	697b      	ldr	r3, [r7, #20]
 800a242:	ee07 3a90 	vmov	s15, r3
 800a246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a24a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a340 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a24e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a252:	4b37      	ldr	r3, [pc, #220]	@ (800a330 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a254:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a256:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a25a:	ee07 3a90 	vmov	s15, r3
 800a25e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a262:	ed97 6a03 	vldr	s12, [r7, #12]
 800a266:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a338 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a26a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a26e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a272:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a276:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a27a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a27e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a282:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800a284:	4b2a      	ldr	r3, [pc, #168]	@ (800a330 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a288:	0a5b      	lsrs	r3, r3, #9
 800a28a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a28e:	ee07 3a90 	vmov	s15, r3
 800a292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a296:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a29a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a29e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a2a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a2a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a2aa:	ee17 2a90 	vmov	r2, s15
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800a2b2:	4b1f      	ldr	r3, [pc, #124]	@ (800a330 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a2b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2b6:	0c1b      	lsrs	r3, r3, #16
 800a2b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a2bc:	ee07 3a90 	vmov	s15, r3
 800a2c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2c4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a2c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a2cc:	edd7 6a07 	vldr	s13, [r7, #28]
 800a2d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a2d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a2d8:	ee17 2a90 	vmov	r2, s15
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800a2e0:	4b13      	ldr	r3, [pc, #76]	@ (800a330 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a2e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2e4:	0e1b      	lsrs	r3, r3, #24
 800a2e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a2ea:	ee07 3a90 	vmov	s15, r3
 800a2ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a2f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a2fa:	edd7 6a07 	vldr	s13, [r7, #28]
 800a2fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a302:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a306:	ee17 2a90 	vmov	r2, s15
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a30e:	e008      	b.n	800a322 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2200      	movs	r2, #0
 800a314:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2200      	movs	r2, #0
 800a31a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2200      	movs	r2, #0
 800a320:	609a      	str	r2, [r3, #8]
}
 800a322:	bf00      	nop
 800a324:	3724      	adds	r7, #36	@ 0x24
 800a326:	46bd      	mov	sp, r7
 800a328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32c:	4770      	bx	lr
 800a32e:	bf00      	nop
 800a330:	58024400 	.word	0x58024400
 800a334:	03d09000 	.word	0x03d09000
 800a338:	46000000 	.word	0x46000000
 800a33c:	4c742400 	.word	0x4c742400
 800a340:	4a742400 	.word	0x4a742400
 800a344:	4bbebc20 	.word	0x4bbebc20

0800a348 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800a348:	b480      	push	{r7}
 800a34a:	b089      	sub	sp, #36	@ 0x24
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a350:	4ba1      	ldr	r3, [pc, #644]	@ (800a5d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a354:	f003 0303 	and.w	r3, r3, #3
 800a358:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800a35a:	4b9f      	ldr	r3, [pc, #636]	@ (800a5d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a35c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a35e:	0d1b      	lsrs	r3, r3, #20
 800a360:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a364:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a366:	4b9c      	ldr	r3, [pc, #624]	@ (800a5d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a36a:	0a1b      	lsrs	r3, r3, #8
 800a36c:	f003 0301 	and.w	r3, r3, #1
 800a370:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800a372:	4b99      	ldr	r3, [pc, #612]	@ (800a5d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a376:	08db      	lsrs	r3, r3, #3
 800a378:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a37c:	693a      	ldr	r2, [r7, #16]
 800a37e:	fb02 f303 	mul.w	r3, r2, r3
 800a382:	ee07 3a90 	vmov	s15, r3
 800a386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a38a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a38e:	697b      	ldr	r3, [r7, #20]
 800a390:	2b00      	cmp	r3, #0
 800a392:	f000 8111 	beq.w	800a5b8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a396:	69bb      	ldr	r3, [r7, #24]
 800a398:	2b02      	cmp	r3, #2
 800a39a:	f000 8083 	beq.w	800a4a4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a39e:	69bb      	ldr	r3, [r7, #24]
 800a3a0:	2b02      	cmp	r3, #2
 800a3a2:	f200 80a1 	bhi.w	800a4e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a3a6:	69bb      	ldr	r3, [r7, #24]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d003      	beq.n	800a3b4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a3ac:	69bb      	ldr	r3, [r7, #24]
 800a3ae:	2b01      	cmp	r3, #1
 800a3b0:	d056      	beq.n	800a460 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a3b2:	e099      	b.n	800a4e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a3b4:	4b88      	ldr	r3, [pc, #544]	@ (800a5d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f003 0320 	and.w	r3, r3, #32
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d02d      	beq.n	800a41c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a3c0:	4b85      	ldr	r3, [pc, #532]	@ (800a5d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	08db      	lsrs	r3, r3, #3
 800a3c6:	f003 0303 	and.w	r3, r3, #3
 800a3ca:	4a84      	ldr	r2, [pc, #528]	@ (800a5dc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a3cc:	fa22 f303 	lsr.w	r3, r2, r3
 800a3d0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	ee07 3a90 	vmov	s15, r3
 800a3d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3dc:	697b      	ldr	r3, [r7, #20]
 800a3de:	ee07 3a90 	vmov	s15, r3
 800a3e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3ea:	4b7b      	ldr	r3, [pc, #492]	@ (800a5d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a3ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3f2:	ee07 3a90 	vmov	s15, r3
 800a3f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800a3fe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a5e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a402:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a406:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a40a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a40e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a412:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a416:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a41a:	e087      	b.n	800a52c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a41c:	697b      	ldr	r3, [r7, #20]
 800a41e:	ee07 3a90 	vmov	s15, r3
 800a422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a426:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a5e4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a42a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a42e:	4b6a      	ldr	r3, [pc, #424]	@ (800a5d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a436:	ee07 3a90 	vmov	s15, r3
 800a43a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a43e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a442:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a5e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a446:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a44a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a44e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a452:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a45a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a45e:	e065      	b.n	800a52c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a460:	697b      	ldr	r3, [r7, #20]
 800a462:	ee07 3a90 	vmov	s15, r3
 800a466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a46a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a5e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a46e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a472:	4b59      	ldr	r3, [pc, #356]	@ (800a5d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a47a:	ee07 3a90 	vmov	s15, r3
 800a47e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a482:	ed97 6a03 	vldr	s12, [r7, #12]
 800a486:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a5e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a48a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a48e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a492:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a496:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a49a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a49e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a4a2:	e043      	b.n	800a52c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a4a4:	697b      	ldr	r3, [r7, #20]
 800a4a6:	ee07 3a90 	vmov	s15, r3
 800a4aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4ae:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a5ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a4b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4b6:	4b48      	ldr	r3, [pc, #288]	@ (800a5d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a4b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4be:	ee07 3a90 	vmov	s15, r3
 800a4c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a4ca:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a5e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a4ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a4da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a4e6:	e021      	b.n	800a52c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a4e8:	697b      	ldr	r3, [r7, #20]
 800a4ea:	ee07 3a90 	vmov	s15, r3
 800a4ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4f2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a5e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a4f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4fa:	4b37      	ldr	r3, [pc, #220]	@ (800a5d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a4fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a502:	ee07 3a90 	vmov	s15, r3
 800a506:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a50a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a50e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a5e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a512:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a516:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a51a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a51e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a522:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a526:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a52a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a52c:	4b2a      	ldr	r3, [pc, #168]	@ (800a5d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a52e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a530:	0a5b      	lsrs	r3, r3, #9
 800a532:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a536:	ee07 3a90 	vmov	s15, r3
 800a53a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a53e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a542:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a546:	edd7 6a07 	vldr	s13, [r7, #28]
 800a54a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a54e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a552:	ee17 2a90 	vmov	r2, s15
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a55a:	4b1f      	ldr	r3, [pc, #124]	@ (800a5d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a55c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a55e:	0c1b      	lsrs	r3, r3, #16
 800a560:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a564:	ee07 3a90 	vmov	s15, r3
 800a568:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a56c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a570:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a574:	edd7 6a07 	vldr	s13, [r7, #28]
 800a578:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a57c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a580:	ee17 2a90 	vmov	r2, s15
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a588:	4b13      	ldr	r3, [pc, #76]	@ (800a5d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a58a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a58c:	0e1b      	lsrs	r3, r3, #24
 800a58e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a592:	ee07 3a90 	vmov	s15, r3
 800a596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a59a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a59e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a5a2:	edd7 6a07 	vldr	s13, [r7, #28]
 800a5a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a5aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a5ae:	ee17 2a90 	vmov	r2, s15
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a5b6:	e008      	b.n	800a5ca <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	609a      	str	r2, [r3, #8]
}
 800a5ca:	bf00      	nop
 800a5cc:	3724      	adds	r7, #36	@ 0x24
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d4:	4770      	bx	lr
 800a5d6:	bf00      	nop
 800a5d8:	58024400 	.word	0x58024400
 800a5dc:	03d09000 	.word	0x03d09000
 800a5e0:	46000000 	.word	0x46000000
 800a5e4:	4c742400 	.word	0x4c742400
 800a5e8:	4a742400 	.word	0x4a742400
 800a5ec:	4bbebc20 	.word	0x4bbebc20

0800a5f0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800a5f0:	b480      	push	{r7}
 800a5f2:	b089      	sub	sp, #36	@ 0x24
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a5f8:	4ba0      	ldr	r3, [pc, #640]	@ (800a87c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a5fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5fc:	f003 0303 	and.w	r3, r3, #3
 800a600:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800a602:	4b9e      	ldr	r3, [pc, #632]	@ (800a87c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a606:	091b      	lsrs	r3, r3, #4
 800a608:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a60c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a60e:	4b9b      	ldr	r3, [pc, #620]	@ (800a87c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a612:	f003 0301 	and.w	r3, r3, #1
 800a616:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a618:	4b98      	ldr	r3, [pc, #608]	@ (800a87c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a61a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a61c:	08db      	lsrs	r3, r3, #3
 800a61e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a622:	693a      	ldr	r2, [r7, #16]
 800a624:	fb02 f303 	mul.w	r3, r2, r3
 800a628:	ee07 3a90 	vmov	s15, r3
 800a62c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a630:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a634:	697b      	ldr	r3, [r7, #20]
 800a636:	2b00      	cmp	r3, #0
 800a638:	f000 8111 	beq.w	800a85e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a63c:	69bb      	ldr	r3, [r7, #24]
 800a63e:	2b02      	cmp	r3, #2
 800a640:	f000 8083 	beq.w	800a74a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a644:	69bb      	ldr	r3, [r7, #24]
 800a646:	2b02      	cmp	r3, #2
 800a648:	f200 80a1 	bhi.w	800a78e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a64c:	69bb      	ldr	r3, [r7, #24]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d003      	beq.n	800a65a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a652:	69bb      	ldr	r3, [r7, #24]
 800a654:	2b01      	cmp	r3, #1
 800a656:	d056      	beq.n	800a706 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a658:	e099      	b.n	800a78e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a65a:	4b88      	ldr	r3, [pc, #544]	@ (800a87c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f003 0320 	and.w	r3, r3, #32
 800a662:	2b00      	cmp	r3, #0
 800a664:	d02d      	beq.n	800a6c2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a666:	4b85      	ldr	r3, [pc, #532]	@ (800a87c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	08db      	lsrs	r3, r3, #3
 800a66c:	f003 0303 	and.w	r3, r3, #3
 800a670:	4a83      	ldr	r2, [pc, #524]	@ (800a880 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a672:	fa22 f303 	lsr.w	r3, r2, r3
 800a676:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	ee07 3a90 	vmov	s15, r3
 800a67e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	ee07 3a90 	vmov	s15, r3
 800a688:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a68c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a690:	4b7a      	ldr	r3, [pc, #488]	@ (800a87c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a694:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a698:	ee07 3a90 	vmov	s15, r3
 800a69c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6a0:	ed97 6a03 	vldr	s12, [r7, #12]
 800a6a4:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800a884 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a6a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a6b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6bc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a6c0:	e087      	b.n	800a7d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a6c2:	697b      	ldr	r3, [r7, #20]
 800a6c4:	ee07 3a90 	vmov	s15, r3
 800a6c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6cc:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800a888 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a6d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6d4:	4b69      	ldr	r3, [pc, #420]	@ (800a87c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a6d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6dc:	ee07 3a90 	vmov	s15, r3
 800a6e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6e4:	ed97 6a03 	vldr	s12, [r7, #12]
 800a6e8:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800a884 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a6ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6f4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a6f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a700:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a704:	e065      	b.n	800a7d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a706:	697b      	ldr	r3, [r7, #20]
 800a708:	ee07 3a90 	vmov	s15, r3
 800a70c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a710:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800a88c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a714:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a718:	4b58      	ldr	r3, [pc, #352]	@ (800a87c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a71a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a71c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a720:	ee07 3a90 	vmov	s15, r3
 800a724:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a728:	ed97 6a03 	vldr	s12, [r7, #12]
 800a72c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800a884 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a730:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a734:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a738:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a73c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a740:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a744:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a748:	e043      	b.n	800a7d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a74a:	697b      	ldr	r3, [r7, #20]
 800a74c:	ee07 3a90 	vmov	s15, r3
 800a750:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a754:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800a890 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a758:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a75c:	4b47      	ldr	r3, [pc, #284]	@ (800a87c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a75e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a760:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a764:	ee07 3a90 	vmov	s15, r3
 800a768:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a76c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a770:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800a884 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a774:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a778:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a77c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a780:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a784:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a788:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a78c:	e021      	b.n	800a7d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	ee07 3a90 	vmov	s15, r3
 800a794:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a798:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800a888 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a79c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7a0:	4b36      	ldr	r3, [pc, #216]	@ (800a87c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a7a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7a8:	ee07 3a90 	vmov	s15, r3
 800a7ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7b0:	ed97 6a03 	vldr	s12, [r7, #12]
 800a7b4:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800a884 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a7b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a7c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a7d0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800a7d2:	4b2a      	ldr	r3, [pc, #168]	@ (800a87c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a7d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7d6:	0a5b      	lsrs	r3, r3, #9
 800a7d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a7dc:	ee07 3a90 	vmov	s15, r3
 800a7e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a7e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a7ec:	edd7 6a07 	vldr	s13, [r7, #28]
 800a7f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a7f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a7f8:	ee17 2a90 	vmov	r2, s15
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800a800:	4b1e      	ldr	r3, [pc, #120]	@ (800a87c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a804:	0c1b      	lsrs	r3, r3, #16
 800a806:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a80a:	ee07 3a90 	vmov	s15, r3
 800a80e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a812:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a816:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a81a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a81e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a822:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a826:	ee17 2a90 	vmov	r2, s15
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800a82e:	4b13      	ldr	r3, [pc, #76]	@ (800a87c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a832:	0e1b      	lsrs	r3, r3, #24
 800a834:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a838:	ee07 3a90 	vmov	s15, r3
 800a83c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a840:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a844:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a848:	edd7 6a07 	vldr	s13, [r7, #28]
 800a84c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a850:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a854:	ee17 2a90 	vmov	r2, s15
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a85c:	e008      	b.n	800a870 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2200      	movs	r2, #0
 800a862:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2200      	movs	r2, #0
 800a868:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2200      	movs	r2, #0
 800a86e:	609a      	str	r2, [r3, #8]
}
 800a870:	bf00      	nop
 800a872:	3724      	adds	r7, #36	@ 0x24
 800a874:	46bd      	mov	sp, r7
 800a876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87a:	4770      	bx	lr
 800a87c:	58024400 	.word	0x58024400
 800a880:	03d09000 	.word	0x03d09000
 800a884:	46000000 	.word	0x46000000
 800a888:	4c742400 	.word	0x4c742400
 800a88c:	4a742400 	.word	0x4a742400
 800a890:	4bbebc20 	.word	0x4bbebc20

0800a894 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b084      	sub	sp, #16
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
 800a89c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a8a2:	4b53      	ldr	r3, [pc, #332]	@ (800a9f0 <RCCEx_PLL2_Config+0x15c>)
 800a8a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8a6:	f003 0303 	and.w	r3, r3, #3
 800a8aa:	2b03      	cmp	r3, #3
 800a8ac:	d101      	bne.n	800a8b2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a8ae:	2301      	movs	r3, #1
 800a8b0:	e099      	b.n	800a9e6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a8b2:	4b4f      	ldr	r3, [pc, #316]	@ (800a9f0 <RCCEx_PLL2_Config+0x15c>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	4a4e      	ldr	r2, [pc, #312]	@ (800a9f0 <RCCEx_PLL2_Config+0x15c>)
 800a8b8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a8bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a8be:	f7f8 fa11 	bl	8002ce4 <HAL_GetTick>
 800a8c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a8c4:	e008      	b.n	800a8d8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a8c6:	f7f8 fa0d 	bl	8002ce4 <HAL_GetTick>
 800a8ca:	4602      	mov	r2, r0
 800a8cc:	68bb      	ldr	r3, [r7, #8]
 800a8ce:	1ad3      	subs	r3, r2, r3
 800a8d0:	2b02      	cmp	r3, #2
 800a8d2:	d901      	bls.n	800a8d8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a8d4:	2303      	movs	r3, #3
 800a8d6:	e086      	b.n	800a9e6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a8d8:	4b45      	ldr	r3, [pc, #276]	@ (800a9f0 <RCCEx_PLL2_Config+0x15c>)
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d1f0      	bne.n	800a8c6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a8e4:	4b42      	ldr	r3, [pc, #264]	@ (800a9f0 <RCCEx_PLL2_Config+0x15c>)
 800a8e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8e8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	031b      	lsls	r3, r3, #12
 800a8f2:	493f      	ldr	r1, [pc, #252]	@ (800a9f0 <RCCEx_PLL2_Config+0x15c>)
 800a8f4:	4313      	orrs	r3, r2
 800a8f6:	628b      	str	r3, [r1, #40]	@ 0x28
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	685b      	ldr	r3, [r3, #4]
 800a8fc:	3b01      	subs	r3, #1
 800a8fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	689b      	ldr	r3, [r3, #8]
 800a906:	3b01      	subs	r3, #1
 800a908:	025b      	lsls	r3, r3, #9
 800a90a:	b29b      	uxth	r3, r3
 800a90c:	431a      	orrs	r2, r3
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	68db      	ldr	r3, [r3, #12]
 800a912:	3b01      	subs	r3, #1
 800a914:	041b      	lsls	r3, r3, #16
 800a916:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a91a:	431a      	orrs	r2, r3
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	691b      	ldr	r3, [r3, #16]
 800a920:	3b01      	subs	r3, #1
 800a922:	061b      	lsls	r3, r3, #24
 800a924:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a928:	4931      	ldr	r1, [pc, #196]	@ (800a9f0 <RCCEx_PLL2_Config+0x15c>)
 800a92a:	4313      	orrs	r3, r2
 800a92c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a92e:	4b30      	ldr	r3, [pc, #192]	@ (800a9f0 <RCCEx_PLL2_Config+0x15c>)
 800a930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a932:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	695b      	ldr	r3, [r3, #20]
 800a93a:	492d      	ldr	r1, [pc, #180]	@ (800a9f0 <RCCEx_PLL2_Config+0x15c>)
 800a93c:	4313      	orrs	r3, r2
 800a93e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a940:	4b2b      	ldr	r3, [pc, #172]	@ (800a9f0 <RCCEx_PLL2_Config+0x15c>)
 800a942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a944:	f023 0220 	bic.w	r2, r3, #32
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	699b      	ldr	r3, [r3, #24]
 800a94c:	4928      	ldr	r1, [pc, #160]	@ (800a9f0 <RCCEx_PLL2_Config+0x15c>)
 800a94e:	4313      	orrs	r3, r2
 800a950:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a952:	4b27      	ldr	r3, [pc, #156]	@ (800a9f0 <RCCEx_PLL2_Config+0x15c>)
 800a954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a956:	4a26      	ldr	r2, [pc, #152]	@ (800a9f0 <RCCEx_PLL2_Config+0x15c>)
 800a958:	f023 0310 	bic.w	r3, r3, #16
 800a95c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a95e:	4b24      	ldr	r3, [pc, #144]	@ (800a9f0 <RCCEx_PLL2_Config+0x15c>)
 800a960:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a962:	4b24      	ldr	r3, [pc, #144]	@ (800a9f4 <RCCEx_PLL2_Config+0x160>)
 800a964:	4013      	ands	r3, r2
 800a966:	687a      	ldr	r2, [r7, #4]
 800a968:	69d2      	ldr	r2, [r2, #28]
 800a96a:	00d2      	lsls	r2, r2, #3
 800a96c:	4920      	ldr	r1, [pc, #128]	@ (800a9f0 <RCCEx_PLL2_Config+0x15c>)
 800a96e:	4313      	orrs	r3, r2
 800a970:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a972:	4b1f      	ldr	r3, [pc, #124]	@ (800a9f0 <RCCEx_PLL2_Config+0x15c>)
 800a974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a976:	4a1e      	ldr	r2, [pc, #120]	@ (800a9f0 <RCCEx_PLL2_Config+0x15c>)
 800a978:	f043 0310 	orr.w	r3, r3, #16
 800a97c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d106      	bne.n	800a992 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a984:	4b1a      	ldr	r3, [pc, #104]	@ (800a9f0 <RCCEx_PLL2_Config+0x15c>)
 800a986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a988:	4a19      	ldr	r2, [pc, #100]	@ (800a9f0 <RCCEx_PLL2_Config+0x15c>)
 800a98a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a98e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a990:	e00f      	b.n	800a9b2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	2b01      	cmp	r3, #1
 800a996:	d106      	bne.n	800a9a6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a998:	4b15      	ldr	r3, [pc, #84]	@ (800a9f0 <RCCEx_PLL2_Config+0x15c>)
 800a99a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a99c:	4a14      	ldr	r2, [pc, #80]	@ (800a9f0 <RCCEx_PLL2_Config+0x15c>)
 800a99e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a9a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a9a4:	e005      	b.n	800a9b2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a9a6:	4b12      	ldr	r3, [pc, #72]	@ (800a9f0 <RCCEx_PLL2_Config+0x15c>)
 800a9a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9aa:	4a11      	ldr	r2, [pc, #68]	@ (800a9f0 <RCCEx_PLL2_Config+0x15c>)
 800a9ac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a9b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a9b2:	4b0f      	ldr	r3, [pc, #60]	@ (800a9f0 <RCCEx_PLL2_Config+0x15c>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	4a0e      	ldr	r2, [pc, #56]	@ (800a9f0 <RCCEx_PLL2_Config+0x15c>)
 800a9b8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a9bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a9be:	f7f8 f991 	bl	8002ce4 <HAL_GetTick>
 800a9c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a9c4:	e008      	b.n	800a9d8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a9c6:	f7f8 f98d 	bl	8002ce4 <HAL_GetTick>
 800a9ca:	4602      	mov	r2, r0
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	1ad3      	subs	r3, r2, r3
 800a9d0:	2b02      	cmp	r3, #2
 800a9d2:	d901      	bls.n	800a9d8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a9d4:	2303      	movs	r3, #3
 800a9d6:	e006      	b.n	800a9e6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a9d8:	4b05      	ldr	r3, [pc, #20]	@ (800a9f0 <RCCEx_PLL2_Config+0x15c>)
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d0f0      	beq.n	800a9c6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a9e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	3710      	adds	r7, #16
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bd80      	pop	{r7, pc}
 800a9ee:	bf00      	nop
 800a9f0:	58024400 	.word	0x58024400
 800a9f4:	ffff0007 	.word	0xffff0007

0800a9f8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b084      	sub	sp, #16
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
 800aa00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800aa02:	2300      	movs	r3, #0
 800aa04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800aa06:	4b53      	ldr	r3, [pc, #332]	@ (800ab54 <RCCEx_PLL3_Config+0x15c>)
 800aa08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa0a:	f003 0303 	and.w	r3, r3, #3
 800aa0e:	2b03      	cmp	r3, #3
 800aa10:	d101      	bne.n	800aa16 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800aa12:	2301      	movs	r3, #1
 800aa14:	e099      	b.n	800ab4a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800aa16:	4b4f      	ldr	r3, [pc, #316]	@ (800ab54 <RCCEx_PLL3_Config+0x15c>)
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	4a4e      	ldr	r2, [pc, #312]	@ (800ab54 <RCCEx_PLL3_Config+0x15c>)
 800aa1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800aa20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aa22:	f7f8 f95f 	bl	8002ce4 <HAL_GetTick>
 800aa26:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800aa28:	e008      	b.n	800aa3c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800aa2a:	f7f8 f95b 	bl	8002ce4 <HAL_GetTick>
 800aa2e:	4602      	mov	r2, r0
 800aa30:	68bb      	ldr	r3, [r7, #8]
 800aa32:	1ad3      	subs	r3, r2, r3
 800aa34:	2b02      	cmp	r3, #2
 800aa36:	d901      	bls.n	800aa3c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800aa38:	2303      	movs	r3, #3
 800aa3a:	e086      	b.n	800ab4a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800aa3c:	4b45      	ldr	r3, [pc, #276]	@ (800ab54 <RCCEx_PLL3_Config+0x15c>)
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d1f0      	bne.n	800aa2a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800aa48:	4b42      	ldr	r3, [pc, #264]	@ (800ab54 <RCCEx_PLL3_Config+0x15c>)
 800aa4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa4c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	051b      	lsls	r3, r3, #20
 800aa56:	493f      	ldr	r1, [pc, #252]	@ (800ab54 <RCCEx_PLL3_Config+0x15c>)
 800aa58:	4313      	orrs	r3, r2
 800aa5a:	628b      	str	r3, [r1, #40]	@ 0x28
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	685b      	ldr	r3, [r3, #4]
 800aa60:	3b01      	subs	r3, #1
 800aa62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	689b      	ldr	r3, [r3, #8]
 800aa6a:	3b01      	subs	r3, #1
 800aa6c:	025b      	lsls	r3, r3, #9
 800aa6e:	b29b      	uxth	r3, r3
 800aa70:	431a      	orrs	r2, r3
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	68db      	ldr	r3, [r3, #12]
 800aa76:	3b01      	subs	r3, #1
 800aa78:	041b      	lsls	r3, r3, #16
 800aa7a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800aa7e:	431a      	orrs	r2, r3
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	691b      	ldr	r3, [r3, #16]
 800aa84:	3b01      	subs	r3, #1
 800aa86:	061b      	lsls	r3, r3, #24
 800aa88:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800aa8c:	4931      	ldr	r1, [pc, #196]	@ (800ab54 <RCCEx_PLL3_Config+0x15c>)
 800aa8e:	4313      	orrs	r3, r2
 800aa90:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800aa92:	4b30      	ldr	r3, [pc, #192]	@ (800ab54 <RCCEx_PLL3_Config+0x15c>)
 800aa94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa96:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	695b      	ldr	r3, [r3, #20]
 800aa9e:	492d      	ldr	r1, [pc, #180]	@ (800ab54 <RCCEx_PLL3_Config+0x15c>)
 800aaa0:	4313      	orrs	r3, r2
 800aaa2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800aaa4:	4b2b      	ldr	r3, [pc, #172]	@ (800ab54 <RCCEx_PLL3_Config+0x15c>)
 800aaa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aaa8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	699b      	ldr	r3, [r3, #24]
 800aab0:	4928      	ldr	r1, [pc, #160]	@ (800ab54 <RCCEx_PLL3_Config+0x15c>)
 800aab2:	4313      	orrs	r3, r2
 800aab4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800aab6:	4b27      	ldr	r3, [pc, #156]	@ (800ab54 <RCCEx_PLL3_Config+0x15c>)
 800aab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aaba:	4a26      	ldr	r2, [pc, #152]	@ (800ab54 <RCCEx_PLL3_Config+0x15c>)
 800aabc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aac0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800aac2:	4b24      	ldr	r3, [pc, #144]	@ (800ab54 <RCCEx_PLL3_Config+0x15c>)
 800aac4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800aac6:	4b24      	ldr	r3, [pc, #144]	@ (800ab58 <RCCEx_PLL3_Config+0x160>)
 800aac8:	4013      	ands	r3, r2
 800aaca:	687a      	ldr	r2, [r7, #4]
 800aacc:	69d2      	ldr	r2, [r2, #28]
 800aace:	00d2      	lsls	r2, r2, #3
 800aad0:	4920      	ldr	r1, [pc, #128]	@ (800ab54 <RCCEx_PLL3_Config+0x15c>)
 800aad2:	4313      	orrs	r3, r2
 800aad4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800aad6:	4b1f      	ldr	r3, [pc, #124]	@ (800ab54 <RCCEx_PLL3_Config+0x15c>)
 800aad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aada:	4a1e      	ldr	r2, [pc, #120]	@ (800ab54 <RCCEx_PLL3_Config+0x15c>)
 800aadc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aae0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d106      	bne.n	800aaf6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800aae8:	4b1a      	ldr	r3, [pc, #104]	@ (800ab54 <RCCEx_PLL3_Config+0x15c>)
 800aaea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aaec:	4a19      	ldr	r2, [pc, #100]	@ (800ab54 <RCCEx_PLL3_Config+0x15c>)
 800aaee:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800aaf2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800aaf4:	e00f      	b.n	800ab16 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	2b01      	cmp	r3, #1
 800aafa:	d106      	bne.n	800ab0a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800aafc:	4b15      	ldr	r3, [pc, #84]	@ (800ab54 <RCCEx_PLL3_Config+0x15c>)
 800aafe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab00:	4a14      	ldr	r2, [pc, #80]	@ (800ab54 <RCCEx_PLL3_Config+0x15c>)
 800ab02:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ab06:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ab08:	e005      	b.n	800ab16 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ab0a:	4b12      	ldr	r3, [pc, #72]	@ (800ab54 <RCCEx_PLL3_Config+0x15c>)
 800ab0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab0e:	4a11      	ldr	r2, [pc, #68]	@ (800ab54 <RCCEx_PLL3_Config+0x15c>)
 800ab10:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ab14:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800ab16:	4b0f      	ldr	r3, [pc, #60]	@ (800ab54 <RCCEx_PLL3_Config+0x15c>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	4a0e      	ldr	r2, [pc, #56]	@ (800ab54 <RCCEx_PLL3_Config+0x15c>)
 800ab1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ab20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ab22:	f7f8 f8df 	bl	8002ce4 <HAL_GetTick>
 800ab26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ab28:	e008      	b.n	800ab3c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ab2a:	f7f8 f8db 	bl	8002ce4 <HAL_GetTick>
 800ab2e:	4602      	mov	r2, r0
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	1ad3      	subs	r3, r2, r3
 800ab34:	2b02      	cmp	r3, #2
 800ab36:	d901      	bls.n	800ab3c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ab38:	2303      	movs	r3, #3
 800ab3a:	e006      	b.n	800ab4a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ab3c:	4b05      	ldr	r3, [pc, #20]	@ (800ab54 <RCCEx_PLL3_Config+0x15c>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d0f0      	beq.n	800ab2a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800ab48:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	3710      	adds	r7, #16
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}
 800ab52:	bf00      	nop
 800ab54:	58024400 	.word	0x58024400
 800ab58:	ffff0007 	.word	0xffff0007

0800ab5c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b084      	sub	sp, #16
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d101      	bne.n	800ab6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	e10f      	b.n	800ad8e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	2200      	movs	r2, #0
 800ab72:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	4a87      	ldr	r2, [pc, #540]	@ (800ad98 <HAL_SPI_Init+0x23c>)
 800ab7a:	4293      	cmp	r3, r2
 800ab7c:	d00f      	beq.n	800ab9e <HAL_SPI_Init+0x42>
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	4a86      	ldr	r2, [pc, #536]	@ (800ad9c <HAL_SPI_Init+0x240>)
 800ab84:	4293      	cmp	r3, r2
 800ab86:	d00a      	beq.n	800ab9e <HAL_SPI_Init+0x42>
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	4a84      	ldr	r2, [pc, #528]	@ (800ada0 <HAL_SPI_Init+0x244>)
 800ab8e:	4293      	cmp	r3, r2
 800ab90:	d005      	beq.n	800ab9e <HAL_SPI_Init+0x42>
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	68db      	ldr	r3, [r3, #12]
 800ab96:	2b0f      	cmp	r3, #15
 800ab98:	d901      	bls.n	800ab9e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	e0f7      	b.n	800ad8e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800ab9e:	6878      	ldr	r0, [r7, #4]
 800aba0:	f000 fc12 	bl	800b3c8 <SPI_GetPacketSize>
 800aba4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	4a7b      	ldr	r2, [pc, #492]	@ (800ad98 <HAL_SPI_Init+0x23c>)
 800abac:	4293      	cmp	r3, r2
 800abae:	d00c      	beq.n	800abca <HAL_SPI_Init+0x6e>
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	4a79      	ldr	r2, [pc, #484]	@ (800ad9c <HAL_SPI_Init+0x240>)
 800abb6:	4293      	cmp	r3, r2
 800abb8:	d007      	beq.n	800abca <HAL_SPI_Init+0x6e>
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	4a78      	ldr	r2, [pc, #480]	@ (800ada0 <HAL_SPI_Init+0x244>)
 800abc0:	4293      	cmp	r3, r2
 800abc2:	d002      	beq.n	800abca <HAL_SPI_Init+0x6e>
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	2b08      	cmp	r3, #8
 800abc8:	d811      	bhi.n	800abee <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800abce:	4a72      	ldr	r2, [pc, #456]	@ (800ad98 <HAL_SPI_Init+0x23c>)
 800abd0:	4293      	cmp	r3, r2
 800abd2:	d009      	beq.n	800abe8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	4a70      	ldr	r2, [pc, #448]	@ (800ad9c <HAL_SPI_Init+0x240>)
 800abda:	4293      	cmp	r3, r2
 800abdc:	d004      	beq.n	800abe8 <HAL_SPI_Init+0x8c>
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	4a6f      	ldr	r2, [pc, #444]	@ (800ada0 <HAL_SPI_Init+0x244>)
 800abe4:	4293      	cmp	r3, r2
 800abe6:	d104      	bne.n	800abf2 <HAL_SPI_Init+0x96>
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	2b10      	cmp	r3, #16
 800abec:	d901      	bls.n	800abf2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800abee:	2301      	movs	r3, #1
 800abf0:	e0cd      	b.n	800ad8e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800abf8:	b2db      	uxtb	r3, r3
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d106      	bne.n	800ac0c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2200      	movs	r2, #0
 800ac02:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	f7f6 fd1a 	bl	8001640 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2202      	movs	r2, #2
 800ac10:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	681a      	ldr	r2, [r3, #0]
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	f022 0201 	bic.w	r2, r2, #1
 800ac22:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	689b      	ldr	r3, [r3, #8]
 800ac2a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800ac2e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	699b      	ldr	r3, [r3, #24]
 800ac34:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ac38:	d119      	bne.n	800ac6e <HAL_SPI_Init+0x112>
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	685b      	ldr	r3, [r3, #4]
 800ac3e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ac42:	d103      	bne.n	800ac4c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d008      	beq.n	800ac5e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d10c      	bne.n	800ac6e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ac58:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ac5c:	d107      	bne.n	800ac6e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	681a      	ldr	r2, [r3, #0]
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800ac6c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	685b      	ldr	r3, [r3, #4]
 800ac72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d00f      	beq.n	800ac9a <HAL_SPI_Init+0x13e>
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	68db      	ldr	r3, [r3, #12]
 800ac7e:	2b06      	cmp	r3, #6
 800ac80:	d90b      	bls.n	800ac9a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	430a      	orrs	r2, r1
 800ac96:	601a      	str	r2, [r3, #0]
 800ac98:	e007      	b.n	800acaa <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	681a      	ldr	r2, [r3, #0]
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800aca8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	69da      	ldr	r2, [r3, #28]
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acb2:	431a      	orrs	r2, r3
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	431a      	orrs	r2, r3
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800acbc:	ea42 0103 	orr.w	r1, r2, r3
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	68da      	ldr	r2, [r3, #12]
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	430a      	orrs	r2, r1
 800acca:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acd4:	431a      	orrs	r2, r3
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acda:	431a      	orrs	r2, r3
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	699b      	ldr	r3, [r3, #24]
 800ace0:	431a      	orrs	r2, r3
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	691b      	ldr	r3, [r3, #16]
 800ace6:	431a      	orrs	r2, r3
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	695b      	ldr	r3, [r3, #20]
 800acec:	431a      	orrs	r2, r3
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6a1b      	ldr	r3, [r3, #32]
 800acf2:	431a      	orrs	r2, r3
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	685b      	ldr	r3, [r3, #4]
 800acf8:	431a      	orrs	r2, r3
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800acfe:	431a      	orrs	r2, r3
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	689b      	ldr	r3, [r3, #8]
 800ad04:	431a      	orrs	r2, r3
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ad0a:	ea42 0103 	orr.w	r1, r2, r3
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	430a      	orrs	r2, r1
 800ad18:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	685b      	ldr	r3, [r3, #4]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d113      	bne.n	800ad4a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	689b      	ldr	r3, [r3, #8]
 800ad28:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ad34:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	689b      	ldr	r3, [r3, #8]
 800ad3c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ad48:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	f022 0201 	bic.w	r2, r2, #1
 800ad58:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	685b      	ldr	r3, [r3, #4]
 800ad5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d00a      	beq.n	800ad7c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	68db      	ldr	r3, [r3, #12]
 800ad6c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	430a      	orrs	r2, r1
 800ad7a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2200      	movs	r2, #0
 800ad80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2201      	movs	r2, #1
 800ad88:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800ad8c:	2300      	movs	r3, #0
}
 800ad8e:	4618      	mov	r0, r3
 800ad90:	3710      	adds	r7, #16
 800ad92:	46bd      	mov	sp, r7
 800ad94:	bd80      	pop	{r7, pc}
 800ad96:	bf00      	nop
 800ad98:	40013000 	.word	0x40013000
 800ad9c:	40003800 	.word	0x40003800
 800ada0:	40003c00 	.word	0x40003c00

0800ada4 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b088      	sub	sp, #32
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	60f8      	str	r0, [r7, #12]
 800adac:	60b9      	str	r1, [r7, #8]
 800adae:	603b      	str	r3, [r7, #0]
 800adb0:	4613      	mov	r3, r2
 800adb2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800adb8:	095b      	lsrs	r3, r3, #5
 800adba:	b29b      	uxth	r3, r3
 800adbc:	3301      	adds	r3, #1
 800adbe:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	3330      	adds	r3, #48	@ 0x30
 800adc6:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800adc8:	f7f7 ff8c 	bl	8002ce4 <HAL_GetTick>
 800adcc:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800add4:	b2db      	uxtb	r3, r3
 800add6:	2b01      	cmp	r3, #1
 800add8:	d001      	beq.n	800adde <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800adda:	2302      	movs	r3, #2
 800addc:	e250      	b.n	800b280 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800adde:	68bb      	ldr	r3, [r7, #8]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d002      	beq.n	800adea <HAL_SPI_Receive+0x46>
 800ade4:	88fb      	ldrh	r3, [r7, #6]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d101      	bne.n	800adee <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800adea:	2301      	movs	r3, #1
 800adec:	e248      	b.n	800b280 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800adf4:	2b01      	cmp	r3, #1
 800adf6:	d101      	bne.n	800adfc <HAL_SPI_Receive+0x58>
 800adf8:	2302      	movs	r3, #2
 800adfa:	e241      	b.n	800b280 <HAL_SPI_Receive+0x4dc>
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	2201      	movs	r2, #1
 800ae00:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	2204      	movs	r2, #4
 800ae08:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	2200      	movs	r2, #0
 800ae10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	68ba      	ldr	r2, [r7, #8]
 800ae18:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	88fa      	ldrh	r2, [r7, #6]
 800ae1e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	88fa      	ldrh	r2, [r7, #6]
 800ae26:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	2200      	movs	r2, #0
 800ae34:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	2200      	movs	r2, #0
 800ae44:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	2200      	movs	r2, #0
 800ae4a:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	689b      	ldr	r3, [r3, #8]
 800ae50:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800ae54:	d108      	bne.n	800ae68 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	681a      	ldr	r2, [r3, #0]
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ae64:	601a      	str	r2, [r3, #0]
 800ae66:	e009      	b.n	800ae7c <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	68db      	ldr	r3, [r3, #12]
 800ae6e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800ae7a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	685a      	ldr	r2, [r3, #4]
 800ae82:	4b95      	ldr	r3, [pc, #596]	@ (800b0d8 <HAL_SPI_Receive+0x334>)
 800ae84:	4013      	ands	r3, r2
 800ae86:	88f9      	ldrh	r1, [r7, #6]
 800ae88:	68fa      	ldr	r2, [r7, #12]
 800ae8a:	6812      	ldr	r2, [r2, #0]
 800ae8c:	430b      	orrs	r3, r1
 800ae8e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	681a      	ldr	r2, [r3, #0]
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	f042 0201 	orr.w	r2, r2, #1
 800ae9e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	685b      	ldr	r3, [r3, #4]
 800aea4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800aea8:	d107      	bne.n	800aeba <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	681a      	ldr	r2, [r3, #0]
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aeb8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	68db      	ldr	r3, [r3, #12]
 800aebe:	2b0f      	cmp	r3, #15
 800aec0:	d96c      	bls.n	800af9c <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800aec2:	e064      	b.n	800af8e <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	695b      	ldr	r3, [r3, #20]
 800aeca:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	695b      	ldr	r3, [r3, #20]
 800aed2:	f003 0301 	and.w	r3, r3, #1
 800aed6:	2b01      	cmp	r3, #1
 800aed8:	d114      	bne.n	800af04 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	681a      	ldr	r2, [r3, #0]
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aee2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800aee4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aeea:	1d1a      	adds	r2, r3, #4
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800aef6:	b29b      	uxth	r3, r3
 800aef8:	3b01      	subs	r3, #1
 800aefa:	b29a      	uxth	r2, r3
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800af02:	e044      	b.n	800af8e <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800af0a:	b29b      	uxth	r3, r3
 800af0c:	8bfa      	ldrh	r2, [r7, #30]
 800af0e:	429a      	cmp	r2, r3
 800af10:	d919      	bls.n	800af46 <HAL_SPI_Receive+0x1a2>
 800af12:	693b      	ldr	r3, [r7, #16]
 800af14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d014      	beq.n	800af46 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	681a      	ldr	r2, [r3, #0]
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800af24:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800af26:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800af2c:	1d1a      	adds	r2, r3, #4
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800af38:	b29b      	uxth	r3, r3
 800af3a:	3b01      	subs	r3, #1
 800af3c:	b29a      	uxth	r2, r3
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800af44:	e023      	b.n	800af8e <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800af46:	f7f7 fecd 	bl	8002ce4 <HAL_GetTick>
 800af4a:	4602      	mov	r2, r0
 800af4c:	697b      	ldr	r3, [r7, #20]
 800af4e:	1ad3      	subs	r3, r2, r3
 800af50:	683a      	ldr	r2, [r7, #0]
 800af52:	429a      	cmp	r2, r3
 800af54:	d803      	bhi.n	800af5e <HAL_SPI_Receive+0x1ba>
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af5c:	d102      	bne.n	800af64 <HAL_SPI_Receive+0x1c0>
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d114      	bne.n	800af8e <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800af64:	68f8      	ldr	r0, [r7, #12]
 800af66:	f000 f98f 	bl	800b288 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800af70:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	2201      	movs	r2, #1
 800af7e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	2200      	movs	r2, #0
 800af86:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800af8a:	2303      	movs	r3, #3
 800af8c:	e178      	b.n	800b280 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800af94:	b29b      	uxth	r3, r3
 800af96:	2b00      	cmp	r3, #0
 800af98:	d194      	bne.n	800aec4 <HAL_SPI_Receive+0x120>
 800af9a:	e15e      	b.n	800b25a <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	68db      	ldr	r3, [r3, #12]
 800afa0:	2b07      	cmp	r3, #7
 800afa2:	f240 8153 	bls.w	800b24c <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800afa6:	e08f      	b.n	800b0c8 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	695b      	ldr	r3, [r3, #20]
 800afae:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	695b      	ldr	r3, [r3, #20]
 800afb6:	f003 0301 	and.w	r3, r3, #1
 800afba:	2b01      	cmp	r3, #1
 800afbc:	d114      	bne.n	800afe8 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800afc2:	69ba      	ldr	r2, [r7, #24]
 800afc4:	8812      	ldrh	r2, [r2, #0]
 800afc6:	b292      	uxth	r2, r2
 800afc8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800afce:	1c9a      	adds	r2, r3, #2
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800afda:	b29b      	uxth	r3, r3
 800afdc:	3b01      	subs	r3, #1
 800afde:	b29a      	uxth	r2, r3
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800afe6:	e06f      	b.n	800b0c8 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800afee:	b29b      	uxth	r3, r3
 800aff0:	8bfa      	ldrh	r2, [r7, #30]
 800aff2:	429a      	cmp	r2, r3
 800aff4:	d924      	bls.n	800b040 <HAL_SPI_Receive+0x29c>
 800aff6:	693b      	ldr	r3, [r7, #16]
 800aff8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800affc:	2b00      	cmp	r3, #0
 800affe:	d01f      	beq.n	800b040 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b004:	69ba      	ldr	r2, [r7, #24]
 800b006:	8812      	ldrh	r2, [r2, #0]
 800b008:	b292      	uxth	r2, r2
 800b00a:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b010:	1c9a      	adds	r2, r3, #2
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b01a:	69ba      	ldr	r2, [r7, #24]
 800b01c:	8812      	ldrh	r2, [r2, #0]
 800b01e:	b292      	uxth	r2, r2
 800b020:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b026:	1c9a      	adds	r2, r3, #2
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b032:	b29b      	uxth	r3, r3
 800b034:	3b02      	subs	r3, #2
 800b036:	b29a      	uxth	r2, r3
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b03e:	e043      	b.n	800b0c8 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b046:	b29b      	uxth	r3, r3
 800b048:	2b01      	cmp	r3, #1
 800b04a:	d119      	bne.n	800b080 <HAL_SPI_Receive+0x2dc>
 800b04c:	693b      	ldr	r3, [r7, #16]
 800b04e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b052:	2b00      	cmp	r3, #0
 800b054:	d014      	beq.n	800b080 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b05a:	69ba      	ldr	r2, [r7, #24]
 800b05c:	8812      	ldrh	r2, [r2, #0]
 800b05e:	b292      	uxth	r2, r2
 800b060:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b066:	1c9a      	adds	r2, r3, #2
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b072:	b29b      	uxth	r3, r3
 800b074:	3b01      	subs	r3, #1
 800b076:	b29a      	uxth	r2, r3
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b07e:	e023      	b.n	800b0c8 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b080:	f7f7 fe30 	bl	8002ce4 <HAL_GetTick>
 800b084:	4602      	mov	r2, r0
 800b086:	697b      	ldr	r3, [r7, #20]
 800b088:	1ad3      	subs	r3, r2, r3
 800b08a:	683a      	ldr	r2, [r7, #0]
 800b08c:	429a      	cmp	r2, r3
 800b08e:	d803      	bhi.n	800b098 <HAL_SPI_Receive+0x2f4>
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b096:	d102      	bne.n	800b09e <HAL_SPI_Receive+0x2fa>
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d114      	bne.n	800b0c8 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b09e:	68f8      	ldr	r0, [r7, #12]
 800b0a0:	f000 f8f2 	bl	800b288 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b0aa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	2201      	movs	r2, #1
 800b0b8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	2200      	movs	r2, #0
 800b0c0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b0c4:	2303      	movs	r3, #3
 800b0c6:	e0db      	b.n	800b280 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b0ce:	b29b      	uxth	r3, r3
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	f47f af69 	bne.w	800afa8 <HAL_SPI_Receive+0x204>
 800b0d6:	e0c0      	b.n	800b25a <HAL_SPI_Receive+0x4b6>
 800b0d8:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	695b      	ldr	r3, [r3, #20]
 800b0e2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	695b      	ldr	r3, [r3, #20]
 800b0ea:	f003 0301 	and.w	r3, r3, #1
 800b0ee:	2b01      	cmp	r3, #1
 800b0f0:	d117      	bne.n	800b122 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b0fe:	7812      	ldrb	r2, [r2, #0]
 800b100:	b2d2      	uxtb	r2, r2
 800b102:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b108:	1c5a      	adds	r2, r3, #1
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b114:	b29b      	uxth	r3, r3
 800b116:	3b01      	subs	r3, #1
 800b118:	b29a      	uxth	r2, r3
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b120:	e094      	b.n	800b24c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b128:	b29b      	uxth	r3, r3
 800b12a:	8bfa      	ldrh	r2, [r7, #30]
 800b12c:	429a      	cmp	r2, r3
 800b12e:	d946      	bls.n	800b1be <HAL_SPI_Receive+0x41a>
 800b130:	693b      	ldr	r3, [r7, #16]
 800b132:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b136:	2b00      	cmp	r3, #0
 800b138:	d041      	beq.n	800b1be <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b146:	7812      	ldrb	r2, [r2, #0]
 800b148:	b2d2      	uxtb	r2, r2
 800b14a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b150:	1c5a      	adds	r2, r3, #1
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b162:	7812      	ldrb	r2, [r2, #0]
 800b164:	b2d2      	uxtb	r2, r2
 800b166:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b16c:	1c5a      	adds	r2, r3, #1
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b17e:	7812      	ldrb	r2, [r2, #0]
 800b180:	b2d2      	uxtb	r2, r2
 800b182:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b188:	1c5a      	adds	r2, r3, #1
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b19a:	7812      	ldrb	r2, [r2, #0]
 800b19c:	b2d2      	uxtb	r2, r2
 800b19e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b1a4:	1c5a      	adds	r2, r3, #1
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b1b0:	b29b      	uxth	r3, r3
 800b1b2:	3b04      	subs	r3, #4
 800b1b4:	b29a      	uxth	r2, r3
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b1bc:	e046      	b.n	800b24c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b1c4:	b29b      	uxth	r3, r3
 800b1c6:	2b03      	cmp	r3, #3
 800b1c8:	d81c      	bhi.n	800b204 <HAL_SPI_Receive+0x460>
 800b1ca:	693b      	ldr	r3, [r7, #16]
 800b1cc:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d017      	beq.n	800b204 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b1e0:	7812      	ldrb	r2, [r2, #0]
 800b1e2:	b2d2      	uxtb	r2, r2
 800b1e4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b1ea:	1c5a      	adds	r2, r3, #1
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b1f6:	b29b      	uxth	r3, r3
 800b1f8:	3b01      	subs	r3, #1
 800b1fa:	b29a      	uxth	r2, r3
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b202:	e023      	b.n	800b24c <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b204:	f7f7 fd6e 	bl	8002ce4 <HAL_GetTick>
 800b208:	4602      	mov	r2, r0
 800b20a:	697b      	ldr	r3, [r7, #20]
 800b20c:	1ad3      	subs	r3, r2, r3
 800b20e:	683a      	ldr	r2, [r7, #0]
 800b210:	429a      	cmp	r2, r3
 800b212:	d803      	bhi.n	800b21c <HAL_SPI_Receive+0x478>
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b21a:	d102      	bne.n	800b222 <HAL_SPI_Receive+0x47e>
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d114      	bne.n	800b24c <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b222:	68f8      	ldr	r0, [r7, #12]
 800b224:	f000 f830 	bl	800b288 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b22e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	2201      	movs	r2, #1
 800b23c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	2200      	movs	r2, #0
 800b244:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b248:	2303      	movs	r3, #3
 800b24a:	e019      	b.n	800b280 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b252:	b29b      	uxth	r3, r3
 800b254:	2b00      	cmp	r3, #0
 800b256:	f47f af41 	bne.w	800b0dc <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800b25a:	68f8      	ldr	r0, [r7, #12]
 800b25c:	f000 f814 	bl	800b288 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	2201      	movs	r2, #1
 800b264:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	2200      	movs	r2, #0
 800b26c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b276:	2b00      	cmp	r3, #0
 800b278:	d001      	beq.n	800b27e <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800b27a:	2301      	movs	r3, #1
 800b27c:	e000      	b.n	800b280 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800b27e:	2300      	movs	r3, #0
  }
}
 800b280:	4618      	mov	r0, r3
 800b282:	3720      	adds	r7, #32
 800b284:	46bd      	mov	sp, r7
 800b286:	bd80      	pop	{r7, pc}

0800b288 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800b288:	b480      	push	{r7}
 800b28a:	b085      	sub	sp, #20
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	695b      	ldr	r3, [r3, #20]
 800b296:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	699a      	ldr	r2, [r3, #24]
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	f042 0208 	orr.w	r2, r2, #8
 800b2a6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	699a      	ldr	r2, [r3, #24]
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	f042 0210 	orr.w	r2, r2, #16
 800b2b6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	681a      	ldr	r2, [r3, #0]
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	f022 0201 	bic.w	r2, r2, #1
 800b2c6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	6919      	ldr	r1, [r3, #16]
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681a      	ldr	r2, [r3, #0]
 800b2d2:	4b3c      	ldr	r3, [pc, #240]	@ (800b3c4 <SPI_CloseTransfer+0x13c>)
 800b2d4:	400b      	ands	r3, r1
 800b2d6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	689a      	ldr	r2, [r3, #8]
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800b2e6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b2ee:	b2db      	uxtb	r3, r3
 800b2f0:	2b04      	cmp	r3, #4
 800b2f2:	d014      	beq.n	800b31e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	f003 0320 	and.w	r3, r3, #32
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d00f      	beq.n	800b31e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b304:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	699a      	ldr	r2, [r3, #24]
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	f042 0220 	orr.w	r2, r2, #32
 800b31c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b324:	b2db      	uxtb	r3, r3
 800b326:	2b03      	cmp	r3, #3
 800b328:	d014      	beq.n	800b354 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b330:	2b00      	cmp	r3, #0
 800b332:	d00f      	beq.n	800b354 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b33a:	f043 0204 	orr.w	r2, r3, #4
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	699a      	ldr	r2, [r3, #24]
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b352:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d00f      	beq.n	800b37e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b364:	f043 0201 	orr.w	r2, r3, #1
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	699a      	ldr	r2, [r3, #24]
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b37c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b384:	2b00      	cmp	r3, #0
 800b386:	d00f      	beq.n	800b3a8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b38e:	f043 0208 	orr.w	r2, r3, #8
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	699a      	ldr	r2, [r3, #24]
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b3a6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800b3b8:	bf00      	nop
 800b3ba:	3714      	adds	r7, #20
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c2:	4770      	bx	lr
 800b3c4:	fffffc90 	.word	0xfffffc90

0800b3c8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800b3c8:	b480      	push	{r7}
 800b3ca:	b085      	sub	sp, #20
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3d4:	095b      	lsrs	r3, r3, #5
 800b3d6:	3301      	adds	r3, #1
 800b3d8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	68db      	ldr	r3, [r3, #12]
 800b3de:	3301      	adds	r3, #1
 800b3e0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b3e2:	68bb      	ldr	r3, [r7, #8]
 800b3e4:	3307      	adds	r3, #7
 800b3e6:	08db      	lsrs	r3, r3, #3
 800b3e8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b3ea:	68bb      	ldr	r3, [r7, #8]
 800b3ec:	68fa      	ldr	r2, [r7, #12]
 800b3ee:	fb02 f303 	mul.w	r3, r2, r3
}
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	3714      	adds	r7, #20
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fc:	4770      	bx	lr

0800b3fe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b3fe:	b580      	push	{r7, lr}
 800b400:	b082      	sub	sp, #8
 800b402:	af00      	add	r7, sp, #0
 800b404:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d101      	bne.n	800b410 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b40c:	2301      	movs	r3, #1
 800b40e:	e049      	b.n	800b4a4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b416:	b2db      	uxtb	r3, r3
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d106      	bne.n	800b42a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	2200      	movs	r2, #0
 800b420:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b424:	6878      	ldr	r0, [r7, #4]
 800b426:	f7f6 f973 	bl	8001710 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	2202      	movs	r2, #2
 800b42e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681a      	ldr	r2, [r3, #0]
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	3304      	adds	r3, #4
 800b43a:	4619      	mov	r1, r3
 800b43c:	4610      	mov	r0, r2
 800b43e:	f000 fad5 	bl	800b9ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	2201      	movs	r2, #1
 800b446:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	2201      	movs	r2, #1
 800b44e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	2201      	movs	r2, #1
 800b456:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	2201      	movs	r2, #1
 800b45e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	2201      	movs	r2, #1
 800b466:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2201      	movs	r2, #1
 800b46e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2201      	movs	r2, #1
 800b476:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	2201      	movs	r2, #1
 800b47e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	2201      	movs	r2, #1
 800b486:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	2201      	movs	r2, #1
 800b48e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	2201      	movs	r2, #1
 800b496:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	2201      	movs	r2, #1
 800b49e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b4a2:	2300      	movs	r3, #0
}
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	3708      	adds	r7, #8
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bd80      	pop	{r7, pc}

0800b4ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b4ac:	b480      	push	{r7}
 800b4ae:	b085      	sub	sp, #20
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b4ba:	b2db      	uxtb	r3, r3
 800b4bc:	2b01      	cmp	r3, #1
 800b4be:	d001      	beq.n	800b4c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b4c0:	2301      	movs	r3, #1
 800b4c2:	e054      	b.n	800b56e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2202      	movs	r2, #2
 800b4c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	68da      	ldr	r2, [r3, #12]
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	f042 0201 	orr.w	r2, r2, #1
 800b4da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	4a26      	ldr	r2, [pc, #152]	@ (800b57c <HAL_TIM_Base_Start_IT+0xd0>)
 800b4e2:	4293      	cmp	r3, r2
 800b4e4:	d022      	beq.n	800b52c <HAL_TIM_Base_Start_IT+0x80>
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b4ee:	d01d      	beq.n	800b52c <HAL_TIM_Base_Start_IT+0x80>
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	4a22      	ldr	r2, [pc, #136]	@ (800b580 <HAL_TIM_Base_Start_IT+0xd4>)
 800b4f6:	4293      	cmp	r3, r2
 800b4f8:	d018      	beq.n	800b52c <HAL_TIM_Base_Start_IT+0x80>
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	4a21      	ldr	r2, [pc, #132]	@ (800b584 <HAL_TIM_Base_Start_IT+0xd8>)
 800b500:	4293      	cmp	r3, r2
 800b502:	d013      	beq.n	800b52c <HAL_TIM_Base_Start_IT+0x80>
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	4a1f      	ldr	r2, [pc, #124]	@ (800b588 <HAL_TIM_Base_Start_IT+0xdc>)
 800b50a:	4293      	cmp	r3, r2
 800b50c:	d00e      	beq.n	800b52c <HAL_TIM_Base_Start_IT+0x80>
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	4a1e      	ldr	r2, [pc, #120]	@ (800b58c <HAL_TIM_Base_Start_IT+0xe0>)
 800b514:	4293      	cmp	r3, r2
 800b516:	d009      	beq.n	800b52c <HAL_TIM_Base_Start_IT+0x80>
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	4a1c      	ldr	r2, [pc, #112]	@ (800b590 <HAL_TIM_Base_Start_IT+0xe4>)
 800b51e:	4293      	cmp	r3, r2
 800b520:	d004      	beq.n	800b52c <HAL_TIM_Base_Start_IT+0x80>
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	4a1b      	ldr	r2, [pc, #108]	@ (800b594 <HAL_TIM_Base_Start_IT+0xe8>)
 800b528:	4293      	cmp	r3, r2
 800b52a:	d115      	bne.n	800b558 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	689a      	ldr	r2, [r3, #8]
 800b532:	4b19      	ldr	r3, [pc, #100]	@ (800b598 <HAL_TIM_Base_Start_IT+0xec>)
 800b534:	4013      	ands	r3, r2
 800b536:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	2b06      	cmp	r3, #6
 800b53c:	d015      	beq.n	800b56a <HAL_TIM_Base_Start_IT+0xbe>
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b544:	d011      	beq.n	800b56a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	681a      	ldr	r2, [r3, #0]
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	f042 0201 	orr.w	r2, r2, #1
 800b554:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b556:	e008      	b.n	800b56a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	681a      	ldr	r2, [r3, #0]
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	f042 0201 	orr.w	r2, r2, #1
 800b566:	601a      	str	r2, [r3, #0]
 800b568:	e000      	b.n	800b56c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b56a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b56c:	2300      	movs	r3, #0
}
 800b56e:	4618      	mov	r0, r3
 800b570:	3714      	adds	r7, #20
 800b572:	46bd      	mov	sp, r7
 800b574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b578:	4770      	bx	lr
 800b57a:	bf00      	nop
 800b57c:	40010000 	.word	0x40010000
 800b580:	40000400 	.word	0x40000400
 800b584:	40000800 	.word	0x40000800
 800b588:	40000c00 	.word	0x40000c00
 800b58c:	40010400 	.word	0x40010400
 800b590:	40001800 	.word	0x40001800
 800b594:	40014000 	.word	0x40014000
 800b598:	00010007 	.word	0x00010007

0800b59c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b084      	sub	sp, #16
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	68db      	ldr	r3, [r3, #12]
 800b5aa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	691b      	ldr	r3, [r3, #16]
 800b5b2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	f003 0302 	and.w	r3, r3, #2
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d020      	beq.n	800b600 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	f003 0302 	and.w	r3, r3, #2
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d01b      	beq.n	800b600 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	f06f 0202 	mvn.w	r2, #2
 800b5d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	2201      	movs	r2, #1
 800b5d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	699b      	ldr	r3, [r3, #24]
 800b5de:	f003 0303 	and.w	r3, r3, #3
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d003      	beq.n	800b5ee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	f000 f9e2 	bl	800b9b0 <HAL_TIM_IC_CaptureCallback>
 800b5ec:	e005      	b.n	800b5fa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b5ee:	6878      	ldr	r0, [r7, #4]
 800b5f0:	f000 f9d4 	bl	800b99c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b5f4:	6878      	ldr	r0, [r7, #4]
 800b5f6:	f000 f9e5 	bl	800b9c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b600:	68bb      	ldr	r3, [r7, #8]
 800b602:	f003 0304 	and.w	r3, r3, #4
 800b606:	2b00      	cmp	r3, #0
 800b608:	d020      	beq.n	800b64c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	f003 0304 	and.w	r3, r3, #4
 800b610:	2b00      	cmp	r3, #0
 800b612:	d01b      	beq.n	800b64c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	f06f 0204 	mvn.w	r2, #4
 800b61c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	2202      	movs	r2, #2
 800b622:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	699b      	ldr	r3, [r3, #24]
 800b62a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d003      	beq.n	800b63a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b632:	6878      	ldr	r0, [r7, #4]
 800b634:	f000 f9bc 	bl	800b9b0 <HAL_TIM_IC_CaptureCallback>
 800b638:	e005      	b.n	800b646 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b63a:	6878      	ldr	r0, [r7, #4]
 800b63c:	f000 f9ae 	bl	800b99c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b640:	6878      	ldr	r0, [r7, #4]
 800b642:	f000 f9bf 	bl	800b9c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	2200      	movs	r2, #0
 800b64a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b64c:	68bb      	ldr	r3, [r7, #8]
 800b64e:	f003 0308 	and.w	r3, r3, #8
 800b652:	2b00      	cmp	r3, #0
 800b654:	d020      	beq.n	800b698 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	f003 0308 	and.w	r3, r3, #8
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d01b      	beq.n	800b698 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	f06f 0208 	mvn.w	r2, #8
 800b668:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	2204      	movs	r2, #4
 800b66e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	69db      	ldr	r3, [r3, #28]
 800b676:	f003 0303 	and.w	r3, r3, #3
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d003      	beq.n	800b686 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b67e:	6878      	ldr	r0, [r7, #4]
 800b680:	f000 f996 	bl	800b9b0 <HAL_TIM_IC_CaptureCallback>
 800b684:	e005      	b.n	800b692 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b686:	6878      	ldr	r0, [r7, #4]
 800b688:	f000 f988 	bl	800b99c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b68c:	6878      	ldr	r0, [r7, #4]
 800b68e:	f000 f999 	bl	800b9c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2200      	movs	r2, #0
 800b696:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b698:	68bb      	ldr	r3, [r7, #8]
 800b69a:	f003 0310 	and.w	r3, r3, #16
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d020      	beq.n	800b6e4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	f003 0310 	and.w	r3, r3, #16
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d01b      	beq.n	800b6e4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	f06f 0210 	mvn.w	r2, #16
 800b6b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	2208      	movs	r2, #8
 800b6ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	69db      	ldr	r3, [r3, #28]
 800b6c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d003      	beq.n	800b6d2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b6ca:	6878      	ldr	r0, [r7, #4]
 800b6cc:	f000 f970 	bl	800b9b0 <HAL_TIM_IC_CaptureCallback>
 800b6d0:	e005      	b.n	800b6de <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f000 f962 	bl	800b99c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b6d8:	6878      	ldr	r0, [r7, #4]
 800b6da:	f000 f973 	bl	800b9c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b6e4:	68bb      	ldr	r3, [r7, #8]
 800b6e6:	f003 0301 	and.w	r3, r3, #1
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d00c      	beq.n	800b708 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	f003 0301 	and.w	r3, r3, #1
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d007      	beq.n	800b708 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	f06f 0201 	mvn.w	r2, #1
 800b700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b702:	6878      	ldr	r0, [r7, #4]
 800b704:	f7f5 f898 	bl	8000838 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b708:	68bb      	ldr	r3, [r7, #8]
 800b70a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d104      	bne.n	800b71c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b712:	68bb      	ldr	r3, [r7, #8]
 800b714:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d00c      	beq.n	800b736 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b722:	2b00      	cmp	r3, #0
 800b724:	d007      	beq.n	800b736 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800b72e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	f000 fb31 	bl	800bd98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b736:	68bb      	ldr	r3, [r7, #8]
 800b738:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d00c      	beq.n	800b75a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b746:	2b00      	cmp	r3, #0
 800b748:	d007      	beq.n	800b75a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b752:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	f000 fb29 	bl	800bdac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b75a:	68bb      	ldr	r3, [r7, #8]
 800b75c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b760:	2b00      	cmp	r3, #0
 800b762:	d00c      	beq.n	800b77e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d007      	beq.n	800b77e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b776:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b778:	6878      	ldr	r0, [r7, #4]
 800b77a:	f000 f92d 	bl	800b9d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b77e:	68bb      	ldr	r3, [r7, #8]
 800b780:	f003 0320 	and.w	r3, r3, #32
 800b784:	2b00      	cmp	r3, #0
 800b786:	d00c      	beq.n	800b7a2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	f003 0320 	and.w	r3, r3, #32
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d007      	beq.n	800b7a2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	f06f 0220 	mvn.w	r2, #32
 800b79a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b79c:	6878      	ldr	r0, [r7, #4]
 800b79e:	f000 faf1 	bl	800bd84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b7a2:	bf00      	nop
 800b7a4:	3710      	adds	r7, #16
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}
	...

0800b7ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b084      	sub	sp, #16
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
 800b7b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b7c0:	2b01      	cmp	r3, #1
 800b7c2:	d101      	bne.n	800b7c8 <HAL_TIM_ConfigClockSource+0x1c>
 800b7c4:	2302      	movs	r3, #2
 800b7c6:	e0dc      	b.n	800b982 <HAL_TIM_ConfigClockSource+0x1d6>
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2201      	movs	r2, #1
 800b7cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2202      	movs	r2, #2
 800b7d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	689b      	ldr	r3, [r3, #8]
 800b7de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b7e0:	68ba      	ldr	r2, [r7, #8]
 800b7e2:	4b6a      	ldr	r3, [pc, #424]	@ (800b98c <HAL_TIM_ConfigClockSource+0x1e0>)
 800b7e4:	4013      	ands	r3, r2
 800b7e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b7ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	68ba      	ldr	r2, [r7, #8]
 800b7f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	4a64      	ldr	r2, [pc, #400]	@ (800b990 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b7fe:	4293      	cmp	r3, r2
 800b800:	f000 80a9 	beq.w	800b956 <HAL_TIM_ConfigClockSource+0x1aa>
 800b804:	4a62      	ldr	r2, [pc, #392]	@ (800b990 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b806:	4293      	cmp	r3, r2
 800b808:	f200 80ae 	bhi.w	800b968 <HAL_TIM_ConfigClockSource+0x1bc>
 800b80c:	4a61      	ldr	r2, [pc, #388]	@ (800b994 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b80e:	4293      	cmp	r3, r2
 800b810:	f000 80a1 	beq.w	800b956 <HAL_TIM_ConfigClockSource+0x1aa>
 800b814:	4a5f      	ldr	r2, [pc, #380]	@ (800b994 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b816:	4293      	cmp	r3, r2
 800b818:	f200 80a6 	bhi.w	800b968 <HAL_TIM_ConfigClockSource+0x1bc>
 800b81c:	4a5e      	ldr	r2, [pc, #376]	@ (800b998 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b81e:	4293      	cmp	r3, r2
 800b820:	f000 8099 	beq.w	800b956 <HAL_TIM_ConfigClockSource+0x1aa>
 800b824:	4a5c      	ldr	r2, [pc, #368]	@ (800b998 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b826:	4293      	cmp	r3, r2
 800b828:	f200 809e 	bhi.w	800b968 <HAL_TIM_ConfigClockSource+0x1bc>
 800b82c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b830:	f000 8091 	beq.w	800b956 <HAL_TIM_ConfigClockSource+0x1aa>
 800b834:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b838:	f200 8096 	bhi.w	800b968 <HAL_TIM_ConfigClockSource+0x1bc>
 800b83c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b840:	f000 8089 	beq.w	800b956 <HAL_TIM_ConfigClockSource+0x1aa>
 800b844:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b848:	f200 808e 	bhi.w	800b968 <HAL_TIM_ConfigClockSource+0x1bc>
 800b84c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b850:	d03e      	beq.n	800b8d0 <HAL_TIM_ConfigClockSource+0x124>
 800b852:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b856:	f200 8087 	bhi.w	800b968 <HAL_TIM_ConfigClockSource+0x1bc>
 800b85a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b85e:	f000 8086 	beq.w	800b96e <HAL_TIM_ConfigClockSource+0x1c2>
 800b862:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b866:	d87f      	bhi.n	800b968 <HAL_TIM_ConfigClockSource+0x1bc>
 800b868:	2b70      	cmp	r3, #112	@ 0x70
 800b86a:	d01a      	beq.n	800b8a2 <HAL_TIM_ConfigClockSource+0xf6>
 800b86c:	2b70      	cmp	r3, #112	@ 0x70
 800b86e:	d87b      	bhi.n	800b968 <HAL_TIM_ConfigClockSource+0x1bc>
 800b870:	2b60      	cmp	r3, #96	@ 0x60
 800b872:	d050      	beq.n	800b916 <HAL_TIM_ConfigClockSource+0x16a>
 800b874:	2b60      	cmp	r3, #96	@ 0x60
 800b876:	d877      	bhi.n	800b968 <HAL_TIM_ConfigClockSource+0x1bc>
 800b878:	2b50      	cmp	r3, #80	@ 0x50
 800b87a:	d03c      	beq.n	800b8f6 <HAL_TIM_ConfigClockSource+0x14a>
 800b87c:	2b50      	cmp	r3, #80	@ 0x50
 800b87e:	d873      	bhi.n	800b968 <HAL_TIM_ConfigClockSource+0x1bc>
 800b880:	2b40      	cmp	r3, #64	@ 0x40
 800b882:	d058      	beq.n	800b936 <HAL_TIM_ConfigClockSource+0x18a>
 800b884:	2b40      	cmp	r3, #64	@ 0x40
 800b886:	d86f      	bhi.n	800b968 <HAL_TIM_ConfigClockSource+0x1bc>
 800b888:	2b30      	cmp	r3, #48	@ 0x30
 800b88a:	d064      	beq.n	800b956 <HAL_TIM_ConfigClockSource+0x1aa>
 800b88c:	2b30      	cmp	r3, #48	@ 0x30
 800b88e:	d86b      	bhi.n	800b968 <HAL_TIM_ConfigClockSource+0x1bc>
 800b890:	2b20      	cmp	r3, #32
 800b892:	d060      	beq.n	800b956 <HAL_TIM_ConfigClockSource+0x1aa>
 800b894:	2b20      	cmp	r3, #32
 800b896:	d867      	bhi.n	800b968 <HAL_TIM_ConfigClockSource+0x1bc>
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d05c      	beq.n	800b956 <HAL_TIM_ConfigClockSource+0x1aa>
 800b89c:	2b10      	cmp	r3, #16
 800b89e:	d05a      	beq.n	800b956 <HAL_TIM_ConfigClockSource+0x1aa>
 800b8a0:	e062      	b.n	800b968 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b8aa:	683b      	ldr	r3, [r7, #0]
 800b8ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b8b2:	f000 f9b9 	bl	800bc28 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	689b      	ldr	r3, [r3, #8]
 800b8bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b8be:	68bb      	ldr	r3, [r7, #8]
 800b8c0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b8c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	68ba      	ldr	r2, [r7, #8]
 800b8cc:	609a      	str	r2, [r3, #8]
      break;
 800b8ce:	e04f      	b.n	800b970 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b8d8:	683b      	ldr	r3, [r7, #0]
 800b8da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b8e0:	f000 f9a2 	bl	800bc28 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	689a      	ldr	r2, [r3, #8]
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b8f2:	609a      	str	r2, [r3, #8]
      break;
 800b8f4:	e03c      	b.n	800b970 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b902:	461a      	mov	r2, r3
 800b904:	f000 f912 	bl	800bb2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	2150      	movs	r1, #80	@ 0x50
 800b90e:	4618      	mov	r0, r3
 800b910:	f000 f96c 	bl	800bbec <TIM_ITRx_SetConfig>
      break;
 800b914:	e02c      	b.n	800b970 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b91a:	683b      	ldr	r3, [r7, #0]
 800b91c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b922:	461a      	mov	r2, r3
 800b924:	f000 f931 	bl	800bb8a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	2160      	movs	r1, #96	@ 0x60
 800b92e:	4618      	mov	r0, r3
 800b930:	f000 f95c 	bl	800bbec <TIM_ITRx_SetConfig>
      break;
 800b934:	e01c      	b.n	800b970 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b942:	461a      	mov	r2, r3
 800b944:	f000 f8f2 	bl	800bb2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	2140      	movs	r1, #64	@ 0x40
 800b94e:	4618      	mov	r0, r3
 800b950:	f000 f94c 	bl	800bbec <TIM_ITRx_SetConfig>
      break;
 800b954:	e00c      	b.n	800b970 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681a      	ldr	r2, [r3, #0]
 800b95a:	683b      	ldr	r3, [r7, #0]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	4619      	mov	r1, r3
 800b960:	4610      	mov	r0, r2
 800b962:	f000 f943 	bl	800bbec <TIM_ITRx_SetConfig>
      break;
 800b966:	e003      	b.n	800b970 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b968:	2301      	movs	r3, #1
 800b96a:	73fb      	strb	r3, [r7, #15]
      break;
 800b96c:	e000      	b.n	800b970 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b96e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2201      	movs	r2, #1
 800b974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2200      	movs	r2, #0
 800b97c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b980:	7bfb      	ldrb	r3, [r7, #15]
}
 800b982:	4618      	mov	r0, r3
 800b984:	3710      	adds	r7, #16
 800b986:	46bd      	mov	sp, r7
 800b988:	bd80      	pop	{r7, pc}
 800b98a:	bf00      	nop
 800b98c:	ffceff88 	.word	0xffceff88
 800b990:	00100040 	.word	0x00100040
 800b994:	00100030 	.word	0x00100030
 800b998:	00100020 	.word	0x00100020

0800b99c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b99c:	b480      	push	{r7}
 800b99e:	b083      	sub	sp, #12
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b9a4:	bf00      	nop
 800b9a6:	370c      	adds	r7, #12
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ae:	4770      	bx	lr

0800b9b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b9b0:	b480      	push	{r7}
 800b9b2:	b083      	sub	sp, #12
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b9b8:	bf00      	nop
 800b9ba:	370c      	adds	r7, #12
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c2:	4770      	bx	lr

0800b9c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b9c4:	b480      	push	{r7}
 800b9c6:	b083      	sub	sp, #12
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b9cc:	bf00      	nop
 800b9ce:	370c      	adds	r7, #12
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d6:	4770      	bx	lr

0800b9d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b9d8:	b480      	push	{r7}
 800b9da:	b083      	sub	sp, #12
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b9e0:	bf00      	nop
 800b9e2:	370c      	adds	r7, #12
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ea:	4770      	bx	lr

0800b9ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b9ec:	b480      	push	{r7}
 800b9ee:	b085      	sub	sp, #20
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
 800b9f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	4a43      	ldr	r2, [pc, #268]	@ (800bb0c <TIM_Base_SetConfig+0x120>)
 800ba00:	4293      	cmp	r3, r2
 800ba02:	d013      	beq.n	800ba2c <TIM_Base_SetConfig+0x40>
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ba0a:	d00f      	beq.n	800ba2c <TIM_Base_SetConfig+0x40>
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	4a40      	ldr	r2, [pc, #256]	@ (800bb10 <TIM_Base_SetConfig+0x124>)
 800ba10:	4293      	cmp	r3, r2
 800ba12:	d00b      	beq.n	800ba2c <TIM_Base_SetConfig+0x40>
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	4a3f      	ldr	r2, [pc, #252]	@ (800bb14 <TIM_Base_SetConfig+0x128>)
 800ba18:	4293      	cmp	r3, r2
 800ba1a:	d007      	beq.n	800ba2c <TIM_Base_SetConfig+0x40>
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	4a3e      	ldr	r2, [pc, #248]	@ (800bb18 <TIM_Base_SetConfig+0x12c>)
 800ba20:	4293      	cmp	r3, r2
 800ba22:	d003      	beq.n	800ba2c <TIM_Base_SetConfig+0x40>
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	4a3d      	ldr	r2, [pc, #244]	@ (800bb1c <TIM_Base_SetConfig+0x130>)
 800ba28:	4293      	cmp	r3, r2
 800ba2a:	d108      	bne.n	800ba3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ba32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	685b      	ldr	r3, [r3, #4]
 800ba38:	68fa      	ldr	r2, [r7, #12]
 800ba3a:	4313      	orrs	r3, r2
 800ba3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	4a32      	ldr	r2, [pc, #200]	@ (800bb0c <TIM_Base_SetConfig+0x120>)
 800ba42:	4293      	cmp	r3, r2
 800ba44:	d01f      	beq.n	800ba86 <TIM_Base_SetConfig+0x9a>
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ba4c:	d01b      	beq.n	800ba86 <TIM_Base_SetConfig+0x9a>
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	4a2f      	ldr	r2, [pc, #188]	@ (800bb10 <TIM_Base_SetConfig+0x124>)
 800ba52:	4293      	cmp	r3, r2
 800ba54:	d017      	beq.n	800ba86 <TIM_Base_SetConfig+0x9a>
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	4a2e      	ldr	r2, [pc, #184]	@ (800bb14 <TIM_Base_SetConfig+0x128>)
 800ba5a:	4293      	cmp	r3, r2
 800ba5c:	d013      	beq.n	800ba86 <TIM_Base_SetConfig+0x9a>
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	4a2d      	ldr	r2, [pc, #180]	@ (800bb18 <TIM_Base_SetConfig+0x12c>)
 800ba62:	4293      	cmp	r3, r2
 800ba64:	d00f      	beq.n	800ba86 <TIM_Base_SetConfig+0x9a>
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	4a2c      	ldr	r2, [pc, #176]	@ (800bb1c <TIM_Base_SetConfig+0x130>)
 800ba6a:	4293      	cmp	r3, r2
 800ba6c:	d00b      	beq.n	800ba86 <TIM_Base_SetConfig+0x9a>
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	4a2b      	ldr	r2, [pc, #172]	@ (800bb20 <TIM_Base_SetConfig+0x134>)
 800ba72:	4293      	cmp	r3, r2
 800ba74:	d007      	beq.n	800ba86 <TIM_Base_SetConfig+0x9a>
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	4a2a      	ldr	r2, [pc, #168]	@ (800bb24 <TIM_Base_SetConfig+0x138>)
 800ba7a:	4293      	cmp	r3, r2
 800ba7c:	d003      	beq.n	800ba86 <TIM_Base_SetConfig+0x9a>
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	4a29      	ldr	r2, [pc, #164]	@ (800bb28 <TIM_Base_SetConfig+0x13c>)
 800ba82:	4293      	cmp	r3, r2
 800ba84:	d108      	bne.n	800ba98 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ba8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ba8e:	683b      	ldr	r3, [r7, #0]
 800ba90:	68db      	ldr	r3, [r3, #12]
 800ba92:	68fa      	ldr	r2, [r7, #12]
 800ba94:	4313      	orrs	r3, r2
 800ba96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ba9e:	683b      	ldr	r3, [r7, #0]
 800baa0:	695b      	ldr	r3, [r3, #20]
 800baa2:	4313      	orrs	r3, r2
 800baa4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800baa6:	683b      	ldr	r3, [r7, #0]
 800baa8:	689a      	ldr	r2, [r3, #8]
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800baae:	683b      	ldr	r3, [r7, #0]
 800bab0:	681a      	ldr	r2, [r3, #0]
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	4a14      	ldr	r2, [pc, #80]	@ (800bb0c <TIM_Base_SetConfig+0x120>)
 800baba:	4293      	cmp	r3, r2
 800babc:	d00f      	beq.n	800bade <TIM_Base_SetConfig+0xf2>
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	4a16      	ldr	r2, [pc, #88]	@ (800bb1c <TIM_Base_SetConfig+0x130>)
 800bac2:	4293      	cmp	r3, r2
 800bac4:	d00b      	beq.n	800bade <TIM_Base_SetConfig+0xf2>
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	4a15      	ldr	r2, [pc, #84]	@ (800bb20 <TIM_Base_SetConfig+0x134>)
 800baca:	4293      	cmp	r3, r2
 800bacc:	d007      	beq.n	800bade <TIM_Base_SetConfig+0xf2>
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	4a14      	ldr	r2, [pc, #80]	@ (800bb24 <TIM_Base_SetConfig+0x138>)
 800bad2:	4293      	cmp	r3, r2
 800bad4:	d003      	beq.n	800bade <TIM_Base_SetConfig+0xf2>
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	4a13      	ldr	r2, [pc, #76]	@ (800bb28 <TIM_Base_SetConfig+0x13c>)
 800bada:	4293      	cmp	r3, r2
 800badc:	d103      	bne.n	800bae6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bade:	683b      	ldr	r3, [r7, #0]
 800bae0:	691a      	ldr	r2, [r3, #16]
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	f043 0204 	orr.w	r2, r3, #4
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	2201      	movs	r2, #1
 800baf6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	68fa      	ldr	r2, [r7, #12]
 800bafc:	601a      	str	r2, [r3, #0]
}
 800bafe:	bf00      	nop
 800bb00:	3714      	adds	r7, #20
 800bb02:	46bd      	mov	sp, r7
 800bb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb08:	4770      	bx	lr
 800bb0a:	bf00      	nop
 800bb0c:	40010000 	.word	0x40010000
 800bb10:	40000400 	.word	0x40000400
 800bb14:	40000800 	.word	0x40000800
 800bb18:	40000c00 	.word	0x40000c00
 800bb1c:	40010400 	.word	0x40010400
 800bb20:	40014000 	.word	0x40014000
 800bb24:	40014400 	.word	0x40014400
 800bb28:	40014800 	.word	0x40014800

0800bb2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bb2c:	b480      	push	{r7}
 800bb2e:	b087      	sub	sp, #28
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	60f8      	str	r0, [r7, #12]
 800bb34:	60b9      	str	r1, [r7, #8]
 800bb36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	6a1b      	ldr	r3, [r3, #32]
 800bb3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	6a1b      	ldr	r3, [r3, #32]
 800bb42:	f023 0201 	bic.w	r2, r3, #1
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	699b      	ldr	r3, [r3, #24]
 800bb4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bb50:	693b      	ldr	r3, [r7, #16]
 800bb52:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800bb56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	011b      	lsls	r3, r3, #4
 800bb5c:	693a      	ldr	r2, [r7, #16]
 800bb5e:	4313      	orrs	r3, r2
 800bb60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bb62:	697b      	ldr	r3, [r7, #20]
 800bb64:	f023 030a 	bic.w	r3, r3, #10
 800bb68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bb6a:	697a      	ldr	r2, [r7, #20]
 800bb6c:	68bb      	ldr	r3, [r7, #8]
 800bb6e:	4313      	orrs	r3, r2
 800bb70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	693a      	ldr	r2, [r7, #16]
 800bb76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	697a      	ldr	r2, [r7, #20]
 800bb7c:	621a      	str	r2, [r3, #32]
}
 800bb7e:	bf00      	nop
 800bb80:	371c      	adds	r7, #28
 800bb82:	46bd      	mov	sp, r7
 800bb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb88:	4770      	bx	lr

0800bb8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bb8a:	b480      	push	{r7}
 800bb8c:	b087      	sub	sp, #28
 800bb8e:	af00      	add	r7, sp, #0
 800bb90:	60f8      	str	r0, [r7, #12]
 800bb92:	60b9      	str	r1, [r7, #8]
 800bb94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	6a1b      	ldr	r3, [r3, #32]
 800bb9a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	6a1b      	ldr	r3, [r3, #32]
 800bba0:	f023 0210 	bic.w	r2, r3, #16
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	699b      	ldr	r3, [r3, #24]
 800bbac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bbae:	693b      	ldr	r3, [r7, #16]
 800bbb0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800bbb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	031b      	lsls	r3, r3, #12
 800bbba:	693a      	ldr	r2, [r7, #16]
 800bbbc:	4313      	orrs	r3, r2
 800bbbe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bbc0:	697b      	ldr	r3, [r7, #20]
 800bbc2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800bbc6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bbc8:	68bb      	ldr	r3, [r7, #8]
 800bbca:	011b      	lsls	r3, r3, #4
 800bbcc:	697a      	ldr	r2, [r7, #20]
 800bbce:	4313      	orrs	r3, r2
 800bbd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	693a      	ldr	r2, [r7, #16]
 800bbd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	697a      	ldr	r2, [r7, #20]
 800bbdc:	621a      	str	r2, [r3, #32]
}
 800bbde:	bf00      	nop
 800bbe0:	371c      	adds	r7, #28
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe8:	4770      	bx	lr
	...

0800bbec <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bbec:	b480      	push	{r7}
 800bbee:	b085      	sub	sp, #20
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	6078      	str	r0, [r7, #4]
 800bbf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	689b      	ldr	r3, [r3, #8]
 800bbfa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bbfc:	68fa      	ldr	r2, [r7, #12]
 800bbfe:	4b09      	ldr	r3, [pc, #36]	@ (800bc24 <TIM_ITRx_SetConfig+0x38>)
 800bc00:	4013      	ands	r3, r2
 800bc02:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bc04:	683a      	ldr	r2, [r7, #0]
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	4313      	orrs	r3, r2
 800bc0a:	f043 0307 	orr.w	r3, r3, #7
 800bc0e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	68fa      	ldr	r2, [r7, #12]
 800bc14:	609a      	str	r2, [r3, #8]
}
 800bc16:	bf00      	nop
 800bc18:	3714      	adds	r7, #20
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc20:	4770      	bx	lr
 800bc22:	bf00      	nop
 800bc24:	ffcfff8f 	.word	0xffcfff8f

0800bc28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bc28:	b480      	push	{r7}
 800bc2a:	b087      	sub	sp, #28
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	60f8      	str	r0, [r7, #12]
 800bc30:	60b9      	str	r1, [r7, #8]
 800bc32:	607a      	str	r2, [r7, #4]
 800bc34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	689b      	ldr	r3, [r3, #8]
 800bc3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bc3c:	697b      	ldr	r3, [r7, #20]
 800bc3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bc42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bc44:	683b      	ldr	r3, [r7, #0]
 800bc46:	021a      	lsls	r2, r3, #8
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	431a      	orrs	r2, r3
 800bc4c:	68bb      	ldr	r3, [r7, #8]
 800bc4e:	4313      	orrs	r3, r2
 800bc50:	697a      	ldr	r2, [r7, #20]
 800bc52:	4313      	orrs	r3, r2
 800bc54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	697a      	ldr	r2, [r7, #20]
 800bc5a:	609a      	str	r2, [r3, #8]
}
 800bc5c:	bf00      	nop
 800bc5e:	371c      	adds	r7, #28
 800bc60:	46bd      	mov	sp, r7
 800bc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc66:	4770      	bx	lr

0800bc68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bc68:	b480      	push	{r7}
 800bc6a:	b085      	sub	sp, #20
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
 800bc70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bc78:	2b01      	cmp	r3, #1
 800bc7a:	d101      	bne.n	800bc80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bc7c:	2302      	movs	r3, #2
 800bc7e:	e06d      	b.n	800bd5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2201      	movs	r2, #1
 800bc84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	2202      	movs	r2, #2
 800bc8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	685b      	ldr	r3, [r3, #4]
 800bc96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	689b      	ldr	r3, [r3, #8]
 800bc9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	4a30      	ldr	r2, [pc, #192]	@ (800bd68 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bca6:	4293      	cmp	r3, r2
 800bca8:	d004      	beq.n	800bcb4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	4a2f      	ldr	r2, [pc, #188]	@ (800bd6c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bcb0:	4293      	cmp	r3, r2
 800bcb2:	d108      	bne.n	800bcc6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800bcba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bcbc:	683b      	ldr	r3, [r7, #0]
 800bcbe:	685b      	ldr	r3, [r3, #4]
 800bcc0:	68fa      	ldr	r2, [r7, #12]
 800bcc2:	4313      	orrs	r3, r2
 800bcc4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bccc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	68fa      	ldr	r2, [r7, #12]
 800bcd4:	4313      	orrs	r3, r2
 800bcd6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	68fa      	ldr	r2, [r7, #12]
 800bcde:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	4a20      	ldr	r2, [pc, #128]	@ (800bd68 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bce6:	4293      	cmp	r3, r2
 800bce8:	d022      	beq.n	800bd30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bcf2:	d01d      	beq.n	800bd30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	4a1d      	ldr	r2, [pc, #116]	@ (800bd70 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800bcfa:	4293      	cmp	r3, r2
 800bcfc:	d018      	beq.n	800bd30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	4a1c      	ldr	r2, [pc, #112]	@ (800bd74 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800bd04:	4293      	cmp	r3, r2
 800bd06:	d013      	beq.n	800bd30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	4a1a      	ldr	r2, [pc, #104]	@ (800bd78 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bd0e:	4293      	cmp	r3, r2
 800bd10:	d00e      	beq.n	800bd30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	4a15      	ldr	r2, [pc, #84]	@ (800bd6c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bd18:	4293      	cmp	r3, r2
 800bd1a:	d009      	beq.n	800bd30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	4a16      	ldr	r2, [pc, #88]	@ (800bd7c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bd22:	4293      	cmp	r3, r2
 800bd24:	d004      	beq.n	800bd30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	4a15      	ldr	r2, [pc, #84]	@ (800bd80 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bd2c:	4293      	cmp	r3, r2
 800bd2e:	d10c      	bne.n	800bd4a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bd30:	68bb      	ldr	r3, [r7, #8]
 800bd32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bd36:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	689b      	ldr	r3, [r3, #8]
 800bd3c:	68ba      	ldr	r2, [r7, #8]
 800bd3e:	4313      	orrs	r3, r2
 800bd40:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	68ba      	ldr	r2, [r7, #8]
 800bd48:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	2201      	movs	r2, #1
 800bd4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	2200      	movs	r2, #0
 800bd56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bd5a:	2300      	movs	r3, #0
}
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	3714      	adds	r7, #20
 800bd60:	46bd      	mov	sp, r7
 800bd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd66:	4770      	bx	lr
 800bd68:	40010000 	.word	0x40010000
 800bd6c:	40010400 	.word	0x40010400
 800bd70:	40000400 	.word	0x40000400
 800bd74:	40000800 	.word	0x40000800
 800bd78:	40000c00 	.word	0x40000c00
 800bd7c:	40001800 	.word	0x40001800
 800bd80:	40014000 	.word	0x40014000

0800bd84 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bd84:	b480      	push	{r7}
 800bd86:	b083      	sub	sp, #12
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bd8c:	bf00      	nop
 800bd8e:	370c      	adds	r7, #12
 800bd90:	46bd      	mov	sp, r7
 800bd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd96:	4770      	bx	lr

0800bd98 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bd98:	b480      	push	{r7}
 800bd9a:	b083      	sub	sp, #12
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bda0:	bf00      	nop
 800bda2:	370c      	adds	r7, #12
 800bda4:	46bd      	mov	sp, r7
 800bda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdaa:	4770      	bx	lr

0800bdac <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bdac:	b480      	push	{r7}
 800bdae:	b083      	sub	sp, #12
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bdb4:	bf00      	nop
 800bdb6:	370c      	adds	r7, #12
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdbe:	4770      	bx	lr

0800bdc0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b082      	sub	sp, #8
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d101      	bne.n	800bdd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bdce:	2301      	movs	r3, #1
 800bdd0:	e042      	b.n	800be58 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d106      	bne.n	800bdea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	2200      	movs	r2, #0
 800bde0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bde4:	6878      	ldr	r0, [r7, #4]
 800bde6:	f000 f83b 	bl	800be60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	2224      	movs	r2, #36	@ 0x24
 800bdee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	681a      	ldr	r2, [r3, #0]
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	f022 0201 	bic.w	r2, r2, #1
 800be00:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be06:	2b00      	cmp	r3, #0
 800be08:	d002      	beq.n	800be10 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800be0a:	6878      	ldr	r0, [r7, #4]
 800be0c:	f000 fe28 	bl	800ca60 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800be10:	6878      	ldr	r0, [r7, #4]
 800be12:	f000 f8bd 	bl	800bf90 <UART_SetConfig>
 800be16:	4603      	mov	r3, r0
 800be18:	2b01      	cmp	r3, #1
 800be1a:	d101      	bne.n	800be20 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800be1c:	2301      	movs	r3, #1
 800be1e:	e01b      	b.n	800be58 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	685a      	ldr	r2, [r3, #4]
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800be2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	689a      	ldr	r2, [r3, #8]
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800be3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	681a      	ldr	r2, [r3, #0]
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	f042 0201 	orr.w	r2, r2, #1
 800be4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	f000 fea7 	bl	800cba4 <UART_CheckIdleState>
 800be56:	4603      	mov	r3, r0
}
 800be58:	4618      	mov	r0, r3
 800be5a:	3708      	adds	r7, #8
 800be5c:	46bd      	mov	sp, r7
 800be5e:	bd80      	pop	{r7, pc}

0800be60 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800be60:	b480      	push	{r7}
 800be62:	b083      	sub	sp, #12
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800be68:	bf00      	nop
 800be6a:	370c      	adds	r7, #12
 800be6c:	46bd      	mov	sp, r7
 800be6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be72:	4770      	bx	lr

0800be74 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b08a      	sub	sp, #40	@ 0x28
 800be78:	af02      	add	r7, sp, #8
 800be7a:	60f8      	str	r0, [r7, #12]
 800be7c:	60b9      	str	r1, [r7, #8]
 800be7e:	603b      	str	r3, [r7, #0]
 800be80:	4613      	mov	r3, r2
 800be82:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800be8a:	2b20      	cmp	r3, #32
 800be8c:	d17b      	bne.n	800bf86 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800be8e:	68bb      	ldr	r3, [r7, #8]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d002      	beq.n	800be9a <HAL_UART_Transmit+0x26>
 800be94:	88fb      	ldrh	r3, [r7, #6]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d101      	bne.n	800be9e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800be9a:	2301      	movs	r3, #1
 800be9c:	e074      	b.n	800bf88 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	2200      	movs	r2, #0
 800bea2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	2221      	movs	r2, #33	@ 0x21
 800beaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800beae:	f7f6 ff19 	bl	8002ce4 <HAL_GetTick>
 800beb2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	88fa      	ldrh	r2, [r7, #6]
 800beb8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	88fa      	ldrh	r2, [r7, #6]
 800bec0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	689b      	ldr	r3, [r3, #8]
 800bec8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800becc:	d108      	bne.n	800bee0 <HAL_UART_Transmit+0x6c>
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	691b      	ldr	r3, [r3, #16]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d104      	bne.n	800bee0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800bed6:	2300      	movs	r3, #0
 800bed8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800beda:	68bb      	ldr	r3, [r7, #8]
 800bedc:	61bb      	str	r3, [r7, #24]
 800bede:	e003      	b.n	800bee8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800bee0:	68bb      	ldr	r3, [r7, #8]
 800bee2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bee4:	2300      	movs	r3, #0
 800bee6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800bee8:	e030      	b.n	800bf4c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800beea:	683b      	ldr	r3, [r7, #0]
 800beec:	9300      	str	r3, [sp, #0]
 800beee:	697b      	ldr	r3, [r7, #20]
 800bef0:	2200      	movs	r2, #0
 800bef2:	2180      	movs	r1, #128	@ 0x80
 800bef4:	68f8      	ldr	r0, [r7, #12]
 800bef6:	f000 feff 	bl	800ccf8 <UART_WaitOnFlagUntilTimeout>
 800befa:	4603      	mov	r3, r0
 800befc:	2b00      	cmp	r3, #0
 800befe:	d005      	beq.n	800bf0c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	2220      	movs	r2, #32
 800bf04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800bf08:	2303      	movs	r3, #3
 800bf0a:	e03d      	b.n	800bf88 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800bf0c:	69fb      	ldr	r3, [r7, #28]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d10b      	bne.n	800bf2a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bf12:	69bb      	ldr	r3, [r7, #24]
 800bf14:	881b      	ldrh	r3, [r3, #0]
 800bf16:	461a      	mov	r2, r3
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bf20:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800bf22:	69bb      	ldr	r3, [r7, #24]
 800bf24:	3302      	adds	r3, #2
 800bf26:	61bb      	str	r3, [r7, #24]
 800bf28:	e007      	b.n	800bf3a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800bf2a:	69fb      	ldr	r3, [r7, #28]
 800bf2c:	781a      	ldrb	r2, [r3, #0]
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800bf34:	69fb      	ldr	r3, [r7, #28]
 800bf36:	3301      	adds	r3, #1
 800bf38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800bf40:	b29b      	uxth	r3, r3
 800bf42:	3b01      	subs	r3, #1
 800bf44:	b29a      	uxth	r2, r3
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800bf52:	b29b      	uxth	r3, r3
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d1c8      	bne.n	800beea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	9300      	str	r3, [sp, #0]
 800bf5c:	697b      	ldr	r3, [r7, #20]
 800bf5e:	2200      	movs	r2, #0
 800bf60:	2140      	movs	r1, #64	@ 0x40
 800bf62:	68f8      	ldr	r0, [r7, #12]
 800bf64:	f000 fec8 	bl	800ccf8 <UART_WaitOnFlagUntilTimeout>
 800bf68:	4603      	mov	r3, r0
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d005      	beq.n	800bf7a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	2220      	movs	r2, #32
 800bf72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800bf76:	2303      	movs	r3, #3
 800bf78:	e006      	b.n	800bf88 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	2220      	movs	r2, #32
 800bf7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800bf82:	2300      	movs	r3, #0
 800bf84:	e000      	b.n	800bf88 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800bf86:	2302      	movs	r3, #2
  }
}
 800bf88:	4618      	mov	r0, r3
 800bf8a:	3720      	adds	r7, #32
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	bd80      	pop	{r7, pc}

0800bf90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bf90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bf94:	b092      	sub	sp, #72	@ 0x48
 800bf96:	af00      	add	r7, sp, #0
 800bf98:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bfa0:	697b      	ldr	r3, [r7, #20]
 800bfa2:	689a      	ldr	r2, [r3, #8]
 800bfa4:	697b      	ldr	r3, [r7, #20]
 800bfa6:	691b      	ldr	r3, [r3, #16]
 800bfa8:	431a      	orrs	r2, r3
 800bfaa:	697b      	ldr	r3, [r7, #20]
 800bfac:	695b      	ldr	r3, [r3, #20]
 800bfae:	431a      	orrs	r2, r3
 800bfb0:	697b      	ldr	r3, [r7, #20]
 800bfb2:	69db      	ldr	r3, [r3, #28]
 800bfb4:	4313      	orrs	r3, r2
 800bfb6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bfb8:	697b      	ldr	r3, [r7, #20]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	681a      	ldr	r2, [r3, #0]
 800bfbe:	4bbe      	ldr	r3, [pc, #760]	@ (800c2b8 <UART_SetConfig+0x328>)
 800bfc0:	4013      	ands	r3, r2
 800bfc2:	697a      	ldr	r2, [r7, #20]
 800bfc4:	6812      	ldr	r2, [r2, #0]
 800bfc6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800bfc8:	430b      	orrs	r3, r1
 800bfca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bfcc:	697b      	ldr	r3, [r7, #20]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	685b      	ldr	r3, [r3, #4]
 800bfd2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800bfd6:	697b      	ldr	r3, [r7, #20]
 800bfd8:	68da      	ldr	r2, [r3, #12]
 800bfda:	697b      	ldr	r3, [r7, #20]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	430a      	orrs	r2, r1
 800bfe0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bfe2:	697b      	ldr	r3, [r7, #20]
 800bfe4:	699b      	ldr	r3, [r3, #24]
 800bfe6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bfe8:	697b      	ldr	r3, [r7, #20]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	4ab3      	ldr	r2, [pc, #716]	@ (800c2bc <UART_SetConfig+0x32c>)
 800bfee:	4293      	cmp	r3, r2
 800bff0:	d004      	beq.n	800bffc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bff2:	697b      	ldr	r3, [r7, #20]
 800bff4:	6a1b      	ldr	r3, [r3, #32]
 800bff6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bff8:	4313      	orrs	r3, r2
 800bffa:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bffc:	697b      	ldr	r3, [r7, #20]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	689a      	ldr	r2, [r3, #8]
 800c002:	4baf      	ldr	r3, [pc, #700]	@ (800c2c0 <UART_SetConfig+0x330>)
 800c004:	4013      	ands	r3, r2
 800c006:	697a      	ldr	r2, [r7, #20]
 800c008:	6812      	ldr	r2, [r2, #0]
 800c00a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c00c:	430b      	orrs	r3, r1
 800c00e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c010:	697b      	ldr	r3, [r7, #20]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c016:	f023 010f 	bic.w	r1, r3, #15
 800c01a:	697b      	ldr	r3, [r7, #20]
 800c01c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c01e:	697b      	ldr	r3, [r7, #20]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	430a      	orrs	r2, r1
 800c024:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c026:	697b      	ldr	r3, [r7, #20]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	4aa6      	ldr	r2, [pc, #664]	@ (800c2c4 <UART_SetConfig+0x334>)
 800c02c:	4293      	cmp	r3, r2
 800c02e:	d177      	bne.n	800c120 <UART_SetConfig+0x190>
 800c030:	4ba5      	ldr	r3, [pc, #660]	@ (800c2c8 <UART_SetConfig+0x338>)
 800c032:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c034:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c038:	2b28      	cmp	r3, #40	@ 0x28
 800c03a:	d86d      	bhi.n	800c118 <UART_SetConfig+0x188>
 800c03c:	a201      	add	r2, pc, #4	@ (adr r2, 800c044 <UART_SetConfig+0xb4>)
 800c03e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c042:	bf00      	nop
 800c044:	0800c0e9 	.word	0x0800c0e9
 800c048:	0800c119 	.word	0x0800c119
 800c04c:	0800c119 	.word	0x0800c119
 800c050:	0800c119 	.word	0x0800c119
 800c054:	0800c119 	.word	0x0800c119
 800c058:	0800c119 	.word	0x0800c119
 800c05c:	0800c119 	.word	0x0800c119
 800c060:	0800c119 	.word	0x0800c119
 800c064:	0800c0f1 	.word	0x0800c0f1
 800c068:	0800c119 	.word	0x0800c119
 800c06c:	0800c119 	.word	0x0800c119
 800c070:	0800c119 	.word	0x0800c119
 800c074:	0800c119 	.word	0x0800c119
 800c078:	0800c119 	.word	0x0800c119
 800c07c:	0800c119 	.word	0x0800c119
 800c080:	0800c119 	.word	0x0800c119
 800c084:	0800c0f9 	.word	0x0800c0f9
 800c088:	0800c119 	.word	0x0800c119
 800c08c:	0800c119 	.word	0x0800c119
 800c090:	0800c119 	.word	0x0800c119
 800c094:	0800c119 	.word	0x0800c119
 800c098:	0800c119 	.word	0x0800c119
 800c09c:	0800c119 	.word	0x0800c119
 800c0a0:	0800c119 	.word	0x0800c119
 800c0a4:	0800c101 	.word	0x0800c101
 800c0a8:	0800c119 	.word	0x0800c119
 800c0ac:	0800c119 	.word	0x0800c119
 800c0b0:	0800c119 	.word	0x0800c119
 800c0b4:	0800c119 	.word	0x0800c119
 800c0b8:	0800c119 	.word	0x0800c119
 800c0bc:	0800c119 	.word	0x0800c119
 800c0c0:	0800c119 	.word	0x0800c119
 800c0c4:	0800c109 	.word	0x0800c109
 800c0c8:	0800c119 	.word	0x0800c119
 800c0cc:	0800c119 	.word	0x0800c119
 800c0d0:	0800c119 	.word	0x0800c119
 800c0d4:	0800c119 	.word	0x0800c119
 800c0d8:	0800c119 	.word	0x0800c119
 800c0dc:	0800c119 	.word	0x0800c119
 800c0e0:	0800c119 	.word	0x0800c119
 800c0e4:	0800c111 	.word	0x0800c111
 800c0e8:	2301      	movs	r3, #1
 800c0ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0ee:	e222      	b.n	800c536 <UART_SetConfig+0x5a6>
 800c0f0:	2304      	movs	r3, #4
 800c0f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0f6:	e21e      	b.n	800c536 <UART_SetConfig+0x5a6>
 800c0f8:	2308      	movs	r3, #8
 800c0fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0fe:	e21a      	b.n	800c536 <UART_SetConfig+0x5a6>
 800c100:	2310      	movs	r3, #16
 800c102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c106:	e216      	b.n	800c536 <UART_SetConfig+0x5a6>
 800c108:	2320      	movs	r3, #32
 800c10a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c10e:	e212      	b.n	800c536 <UART_SetConfig+0x5a6>
 800c110:	2340      	movs	r3, #64	@ 0x40
 800c112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c116:	e20e      	b.n	800c536 <UART_SetConfig+0x5a6>
 800c118:	2380      	movs	r3, #128	@ 0x80
 800c11a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c11e:	e20a      	b.n	800c536 <UART_SetConfig+0x5a6>
 800c120:	697b      	ldr	r3, [r7, #20]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	4a69      	ldr	r2, [pc, #420]	@ (800c2cc <UART_SetConfig+0x33c>)
 800c126:	4293      	cmp	r3, r2
 800c128:	d130      	bne.n	800c18c <UART_SetConfig+0x1fc>
 800c12a:	4b67      	ldr	r3, [pc, #412]	@ (800c2c8 <UART_SetConfig+0x338>)
 800c12c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c12e:	f003 0307 	and.w	r3, r3, #7
 800c132:	2b05      	cmp	r3, #5
 800c134:	d826      	bhi.n	800c184 <UART_SetConfig+0x1f4>
 800c136:	a201      	add	r2, pc, #4	@ (adr r2, 800c13c <UART_SetConfig+0x1ac>)
 800c138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c13c:	0800c155 	.word	0x0800c155
 800c140:	0800c15d 	.word	0x0800c15d
 800c144:	0800c165 	.word	0x0800c165
 800c148:	0800c16d 	.word	0x0800c16d
 800c14c:	0800c175 	.word	0x0800c175
 800c150:	0800c17d 	.word	0x0800c17d
 800c154:	2300      	movs	r3, #0
 800c156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c15a:	e1ec      	b.n	800c536 <UART_SetConfig+0x5a6>
 800c15c:	2304      	movs	r3, #4
 800c15e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c162:	e1e8      	b.n	800c536 <UART_SetConfig+0x5a6>
 800c164:	2308      	movs	r3, #8
 800c166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c16a:	e1e4      	b.n	800c536 <UART_SetConfig+0x5a6>
 800c16c:	2310      	movs	r3, #16
 800c16e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c172:	e1e0      	b.n	800c536 <UART_SetConfig+0x5a6>
 800c174:	2320      	movs	r3, #32
 800c176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c17a:	e1dc      	b.n	800c536 <UART_SetConfig+0x5a6>
 800c17c:	2340      	movs	r3, #64	@ 0x40
 800c17e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c182:	e1d8      	b.n	800c536 <UART_SetConfig+0x5a6>
 800c184:	2380      	movs	r3, #128	@ 0x80
 800c186:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c18a:	e1d4      	b.n	800c536 <UART_SetConfig+0x5a6>
 800c18c:	697b      	ldr	r3, [r7, #20]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	4a4f      	ldr	r2, [pc, #316]	@ (800c2d0 <UART_SetConfig+0x340>)
 800c192:	4293      	cmp	r3, r2
 800c194:	d130      	bne.n	800c1f8 <UART_SetConfig+0x268>
 800c196:	4b4c      	ldr	r3, [pc, #304]	@ (800c2c8 <UART_SetConfig+0x338>)
 800c198:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c19a:	f003 0307 	and.w	r3, r3, #7
 800c19e:	2b05      	cmp	r3, #5
 800c1a0:	d826      	bhi.n	800c1f0 <UART_SetConfig+0x260>
 800c1a2:	a201      	add	r2, pc, #4	@ (adr r2, 800c1a8 <UART_SetConfig+0x218>)
 800c1a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1a8:	0800c1c1 	.word	0x0800c1c1
 800c1ac:	0800c1c9 	.word	0x0800c1c9
 800c1b0:	0800c1d1 	.word	0x0800c1d1
 800c1b4:	0800c1d9 	.word	0x0800c1d9
 800c1b8:	0800c1e1 	.word	0x0800c1e1
 800c1bc:	0800c1e9 	.word	0x0800c1e9
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1c6:	e1b6      	b.n	800c536 <UART_SetConfig+0x5a6>
 800c1c8:	2304      	movs	r3, #4
 800c1ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1ce:	e1b2      	b.n	800c536 <UART_SetConfig+0x5a6>
 800c1d0:	2308      	movs	r3, #8
 800c1d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1d6:	e1ae      	b.n	800c536 <UART_SetConfig+0x5a6>
 800c1d8:	2310      	movs	r3, #16
 800c1da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1de:	e1aa      	b.n	800c536 <UART_SetConfig+0x5a6>
 800c1e0:	2320      	movs	r3, #32
 800c1e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1e6:	e1a6      	b.n	800c536 <UART_SetConfig+0x5a6>
 800c1e8:	2340      	movs	r3, #64	@ 0x40
 800c1ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1ee:	e1a2      	b.n	800c536 <UART_SetConfig+0x5a6>
 800c1f0:	2380      	movs	r3, #128	@ 0x80
 800c1f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1f6:	e19e      	b.n	800c536 <UART_SetConfig+0x5a6>
 800c1f8:	697b      	ldr	r3, [r7, #20]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	4a35      	ldr	r2, [pc, #212]	@ (800c2d4 <UART_SetConfig+0x344>)
 800c1fe:	4293      	cmp	r3, r2
 800c200:	d130      	bne.n	800c264 <UART_SetConfig+0x2d4>
 800c202:	4b31      	ldr	r3, [pc, #196]	@ (800c2c8 <UART_SetConfig+0x338>)
 800c204:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c206:	f003 0307 	and.w	r3, r3, #7
 800c20a:	2b05      	cmp	r3, #5
 800c20c:	d826      	bhi.n	800c25c <UART_SetConfig+0x2cc>
 800c20e:	a201      	add	r2, pc, #4	@ (adr r2, 800c214 <UART_SetConfig+0x284>)
 800c210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c214:	0800c22d 	.word	0x0800c22d
 800c218:	0800c235 	.word	0x0800c235
 800c21c:	0800c23d 	.word	0x0800c23d
 800c220:	0800c245 	.word	0x0800c245
 800c224:	0800c24d 	.word	0x0800c24d
 800c228:	0800c255 	.word	0x0800c255
 800c22c:	2300      	movs	r3, #0
 800c22e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c232:	e180      	b.n	800c536 <UART_SetConfig+0x5a6>
 800c234:	2304      	movs	r3, #4
 800c236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c23a:	e17c      	b.n	800c536 <UART_SetConfig+0x5a6>
 800c23c:	2308      	movs	r3, #8
 800c23e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c242:	e178      	b.n	800c536 <UART_SetConfig+0x5a6>
 800c244:	2310      	movs	r3, #16
 800c246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c24a:	e174      	b.n	800c536 <UART_SetConfig+0x5a6>
 800c24c:	2320      	movs	r3, #32
 800c24e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c252:	e170      	b.n	800c536 <UART_SetConfig+0x5a6>
 800c254:	2340      	movs	r3, #64	@ 0x40
 800c256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c25a:	e16c      	b.n	800c536 <UART_SetConfig+0x5a6>
 800c25c:	2380      	movs	r3, #128	@ 0x80
 800c25e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c262:	e168      	b.n	800c536 <UART_SetConfig+0x5a6>
 800c264:	697b      	ldr	r3, [r7, #20]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	4a1b      	ldr	r2, [pc, #108]	@ (800c2d8 <UART_SetConfig+0x348>)
 800c26a:	4293      	cmp	r3, r2
 800c26c:	d142      	bne.n	800c2f4 <UART_SetConfig+0x364>
 800c26e:	4b16      	ldr	r3, [pc, #88]	@ (800c2c8 <UART_SetConfig+0x338>)
 800c270:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c272:	f003 0307 	and.w	r3, r3, #7
 800c276:	2b05      	cmp	r3, #5
 800c278:	d838      	bhi.n	800c2ec <UART_SetConfig+0x35c>
 800c27a:	a201      	add	r2, pc, #4	@ (adr r2, 800c280 <UART_SetConfig+0x2f0>)
 800c27c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c280:	0800c299 	.word	0x0800c299
 800c284:	0800c2a1 	.word	0x0800c2a1
 800c288:	0800c2a9 	.word	0x0800c2a9
 800c28c:	0800c2b1 	.word	0x0800c2b1
 800c290:	0800c2dd 	.word	0x0800c2dd
 800c294:	0800c2e5 	.word	0x0800c2e5
 800c298:	2300      	movs	r3, #0
 800c29a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c29e:	e14a      	b.n	800c536 <UART_SetConfig+0x5a6>
 800c2a0:	2304      	movs	r3, #4
 800c2a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2a6:	e146      	b.n	800c536 <UART_SetConfig+0x5a6>
 800c2a8:	2308      	movs	r3, #8
 800c2aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2ae:	e142      	b.n	800c536 <UART_SetConfig+0x5a6>
 800c2b0:	2310      	movs	r3, #16
 800c2b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2b6:	e13e      	b.n	800c536 <UART_SetConfig+0x5a6>
 800c2b8:	cfff69f3 	.word	0xcfff69f3
 800c2bc:	58000c00 	.word	0x58000c00
 800c2c0:	11fff4ff 	.word	0x11fff4ff
 800c2c4:	40011000 	.word	0x40011000
 800c2c8:	58024400 	.word	0x58024400
 800c2cc:	40004400 	.word	0x40004400
 800c2d0:	40004800 	.word	0x40004800
 800c2d4:	40004c00 	.word	0x40004c00
 800c2d8:	40005000 	.word	0x40005000
 800c2dc:	2320      	movs	r3, #32
 800c2de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2e2:	e128      	b.n	800c536 <UART_SetConfig+0x5a6>
 800c2e4:	2340      	movs	r3, #64	@ 0x40
 800c2e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2ea:	e124      	b.n	800c536 <UART_SetConfig+0x5a6>
 800c2ec:	2380      	movs	r3, #128	@ 0x80
 800c2ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2f2:	e120      	b.n	800c536 <UART_SetConfig+0x5a6>
 800c2f4:	697b      	ldr	r3, [r7, #20]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	4acb      	ldr	r2, [pc, #812]	@ (800c628 <UART_SetConfig+0x698>)
 800c2fa:	4293      	cmp	r3, r2
 800c2fc:	d176      	bne.n	800c3ec <UART_SetConfig+0x45c>
 800c2fe:	4bcb      	ldr	r3, [pc, #812]	@ (800c62c <UART_SetConfig+0x69c>)
 800c300:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c302:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c306:	2b28      	cmp	r3, #40	@ 0x28
 800c308:	d86c      	bhi.n	800c3e4 <UART_SetConfig+0x454>
 800c30a:	a201      	add	r2, pc, #4	@ (adr r2, 800c310 <UART_SetConfig+0x380>)
 800c30c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c310:	0800c3b5 	.word	0x0800c3b5
 800c314:	0800c3e5 	.word	0x0800c3e5
 800c318:	0800c3e5 	.word	0x0800c3e5
 800c31c:	0800c3e5 	.word	0x0800c3e5
 800c320:	0800c3e5 	.word	0x0800c3e5
 800c324:	0800c3e5 	.word	0x0800c3e5
 800c328:	0800c3e5 	.word	0x0800c3e5
 800c32c:	0800c3e5 	.word	0x0800c3e5
 800c330:	0800c3bd 	.word	0x0800c3bd
 800c334:	0800c3e5 	.word	0x0800c3e5
 800c338:	0800c3e5 	.word	0x0800c3e5
 800c33c:	0800c3e5 	.word	0x0800c3e5
 800c340:	0800c3e5 	.word	0x0800c3e5
 800c344:	0800c3e5 	.word	0x0800c3e5
 800c348:	0800c3e5 	.word	0x0800c3e5
 800c34c:	0800c3e5 	.word	0x0800c3e5
 800c350:	0800c3c5 	.word	0x0800c3c5
 800c354:	0800c3e5 	.word	0x0800c3e5
 800c358:	0800c3e5 	.word	0x0800c3e5
 800c35c:	0800c3e5 	.word	0x0800c3e5
 800c360:	0800c3e5 	.word	0x0800c3e5
 800c364:	0800c3e5 	.word	0x0800c3e5
 800c368:	0800c3e5 	.word	0x0800c3e5
 800c36c:	0800c3e5 	.word	0x0800c3e5
 800c370:	0800c3cd 	.word	0x0800c3cd
 800c374:	0800c3e5 	.word	0x0800c3e5
 800c378:	0800c3e5 	.word	0x0800c3e5
 800c37c:	0800c3e5 	.word	0x0800c3e5
 800c380:	0800c3e5 	.word	0x0800c3e5
 800c384:	0800c3e5 	.word	0x0800c3e5
 800c388:	0800c3e5 	.word	0x0800c3e5
 800c38c:	0800c3e5 	.word	0x0800c3e5
 800c390:	0800c3d5 	.word	0x0800c3d5
 800c394:	0800c3e5 	.word	0x0800c3e5
 800c398:	0800c3e5 	.word	0x0800c3e5
 800c39c:	0800c3e5 	.word	0x0800c3e5
 800c3a0:	0800c3e5 	.word	0x0800c3e5
 800c3a4:	0800c3e5 	.word	0x0800c3e5
 800c3a8:	0800c3e5 	.word	0x0800c3e5
 800c3ac:	0800c3e5 	.word	0x0800c3e5
 800c3b0:	0800c3dd 	.word	0x0800c3dd
 800c3b4:	2301      	movs	r3, #1
 800c3b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3ba:	e0bc      	b.n	800c536 <UART_SetConfig+0x5a6>
 800c3bc:	2304      	movs	r3, #4
 800c3be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3c2:	e0b8      	b.n	800c536 <UART_SetConfig+0x5a6>
 800c3c4:	2308      	movs	r3, #8
 800c3c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3ca:	e0b4      	b.n	800c536 <UART_SetConfig+0x5a6>
 800c3cc:	2310      	movs	r3, #16
 800c3ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3d2:	e0b0      	b.n	800c536 <UART_SetConfig+0x5a6>
 800c3d4:	2320      	movs	r3, #32
 800c3d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3da:	e0ac      	b.n	800c536 <UART_SetConfig+0x5a6>
 800c3dc:	2340      	movs	r3, #64	@ 0x40
 800c3de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3e2:	e0a8      	b.n	800c536 <UART_SetConfig+0x5a6>
 800c3e4:	2380      	movs	r3, #128	@ 0x80
 800c3e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3ea:	e0a4      	b.n	800c536 <UART_SetConfig+0x5a6>
 800c3ec:	697b      	ldr	r3, [r7, #20]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	4a8f      	ldr	r2, [pc, #572]	@ (800c630 <UART_SetConfig+0x6a0>)
 800c3f2:	4293      	cmp	r3, r2
 800c3f4:	d130      	bne.n	800c458 <UART_SetConfig+0x4c8>
 800c3f6:	4b8d      	ldr	r3, [pc, #564]	@ (800c62c <UART_SetConfig+0x69c>)
 800c3f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c3fa:	f003 0307 	and.w	r3, r3, #7
 800c3fe:	2b05      	cmp	r3, #5
 800c400:	d826      	bhi.n	800c450 <UART_SetConfig+0x4c0>
 800c402:	a201      	add	r2, pc, #4	@ (adr r2, 800c408 <UART_SetConfig+0x478>)
 800c404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c408:	0800c421 	.word	0x0800c421
 800c40c:	0800c429 	.word	0x0800c429
 800c410:	0800c431 	.word	0x0800c431
 800c414:	0800c439 	.word	0x0800c439
 800c418:	0800c441 	.word	0x0800c441
 800c41c:	0800c449 	.word	0x0800c449
 800c420:	2300      	movs	r3, #0
 800c422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c426:	e086      	b.n	800c536 <UART_SetConfig+0x5a6>
 800c428:	2304      	movs	r3, #4
 800c42a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c42e:	e082      	b.n	800c536 <UART_SetConfig+0x5a6>
 800c430:	2308      	movs	r3, #8
 800c432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c436:	e07e      	b.n	800c536 <UART_SetConfig+0x5a6>
 800c438:	2310      	movs	r3, #16
 800c43a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c43e:	e07a      	b.n	800c536 <UART_SetConfig+0x5a6>
 800c440:	2320      	movs	r3, #32
 800c442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c446:	e076      	b.n	800c536 <UART_SetConfig+0x5a6>
 800c448:	2340      	movs	r3, #64	@ 0x40
 800c44a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c44e:	e072      	b.n	800c536 <UART_SetConfig+0x5a6>
 800c450:	2380      	movs	r3, #128	@ 0x80
 800c452:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c456:	e06e      	b.n	800c536 <UART_SetConfig+0x5a6>
 800c458:	697b      	ldr	r3, [r7, #20]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	4a75      	ldr	r2, [pc, #468]	@ (800c634 <UART_SetConfig+0x6a4>)
 800c45e:	4293      	cmp	r3, r2
 800c460:	d130      	bne.n	800c4c4 <UART_SetConfig+0x534>
 800c462:	4b72      	ldr	r3, [pc, #456]	@ (800c62c <UART_SetConfig+0x69c>)
 800c464:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c466:	f003 0307 	and.w	r3, r3, #7
 800c46a:	2b05      	cmp	r3, #5
 800c46c:	d826      	bhi.n	800c4bc <UART_SetConfig+0x52c>
 800c46e:	a201      	add	r2, pc, #4	@ (adr r2, 800c474 <UART_SetConfig+0x4e4>)
 800c470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c474:	0800c48d 	.word	0x0800c48d
 800c478:	0800c495 	.word	0x0800c495
 800c47c:	0800c49d 	.word	0x0800c49d
 800c480:	0800c4a5 	.word	0x0800c4a5
 800c484:	0800c4ad 	.word	0x0800c4ad
 800c488:	0800c4b5 	.word	0x0800c4b5
 800c48c:	2300      	movs	r3, #0
 800c48e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c492:	e050      	b.n	800c536 <UART_SetConfig+0x5a6>
 800c494:	2304      	movs	r3, #4
 800c496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c49a:	e04c      	b.n	800c536 <UART_SetConfig+0x5a6>
 800c49c:	2308      	movs	r3, #8
 800c49e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4a2:	e048      	b.n	800c536 <UART_SetConfig+0x5a6>
 800c4a4:	2310      	movs	r3, #16
 800c4a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4aa:	e044      	b.n	800c536 <UART_SetConfig+0x5a6>
 800c4ac:	2320      	movs	r3, #32
 800c4ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4b2:	e040      	b.n	800c536 <UART_SetConfig+0x5a6>
 800c4b4:	2340      	movs	r3, #64	@ 0x40
 800c4b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4ba:	e03c      	b.n	800c536 <UART_SetConfig+0x5a6>
 800c4bc:	2380      	movs	r3, #128	@ 0x80
 800c4be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4c2:	e038      	b.n	800c536 <UART_SetConfig+0x5a6>
 800c4c4:	697b      	ldr	r3, [r7, #20]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	4a5b      	ldr	r2, [pc, #364]	@ (800c638 <UART_SetConfig+0x6a8>)
 800c4ca:	4293      	cmp	r3, r2
 800c4cc:	d130      	bne.n	800c530 <UART_SetConfig+0x5a0>
 800c4ce:	4b57      	ldr	r3, [pc, #348]	@ (800c62c <UART_SetConfig+0x69c>)
 800c4d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c4d2:	f003 0307 	and.w	r3, r3, #7
 800c4d6:	2b05      	cmp	r3, #5
 800c4d8:	d826      	bhi.n	800c528 <UART_SetConfig+0x598>
 800c4da:	a201      	add	r2, pc, #4	@ (adr r2, 800c4e0 <UART_SetConfig+0x550>)
 800c4dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4e0:	0800c4f9 	.word	0x0800c4f9
 800c4e4:	0800c501 	.word	0x0800c501
 800c4e8:	0800c509 	.word	0x0800c509
 800c4ec:	0800c511 	.word	0x0800c511
 800c4f0:	0800c519 	.word	0x0800c519
 800c4f4:	0800c521 	.word	0x0800c521
 800c4f8:	2302      	movs	r3, #2
 800c4fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4fe:	e01a      	b.n	800c536 <UART_SetConfig+0x5a6>
 800c500:	2304      	movs	r3, #4
 800c502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c506:	e016      	b.n	800c536 <UART_SetConfig+0x5a6>
 800c508:	2308      	movs	r3, #8
 800c50a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c50e:	e012      	b.n	800c536 <UART_SetConfig+0x5a6>
 800c510:	2310      	movs	r3, #16
 800c512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c516:	e00e      	b.n	800c536 <UART_SetConfig+0x5a6>
 800c518:	2320      	movs	r3, #32
 800c51a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c51e:	e00a      	b.n	800c536 <UART_SetConfig+0x5a6>
 800c520:	2340      	movs	r3, #64	@ 0x40
 800c522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c526:	e006      	b.n	800c536 <UART_SetConfig+0x5a6>
 800c528:	2380      	movs	r3, #128	@ 0x80
 800c52a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c52e:	e002      	b.n	800c536 <UART_SetConfig+0x5a6>
 800c530:	2380      	movs	r3, #128	@ 0x80
 800c532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c536:	697b      	ldr	r3, [r7, #20]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	4a3f      	ldr	r2, [pc, #252]	@ (800c638 <UART_SetConfig+0x6a8>)
 800c53c:	4293      	cmp	r3, r2
 800c53e:	f040 80f8 	bne.w	800c732 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c542:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c546:	2b20      	cmp	r3, #32
 800c548:	dc46      	bgt.n	800c5d8 <UART_SetConfig+0x648>
 800c54a:	2b02      	cmp	r3, #2
 800c54c:	f2c0 8082 	blt.w	800c654 <UART_SetConfig+0x6c4>
 800c550:	3b02      	subs	r3, #2
 800c552:	2b1e      	cmp	r3, #30
 800c554:	d87e      	bhi.n	800c654 <UART_SetConfig+0x6c4>
 800c556:	a201      	add	r2, pc, #4	@ (adr r2, 800c55c <UART_SetConfig+0x5cc>)
 800c558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c55c:	0800c5df 	.word	0x0800c5df
 800c560:	0800c655 	.word	0x0800c655
 800c564:	0800c5e7 	.word	0x0800c5e7
 800c568:	0800c655 	.word	0x0800c655
 800c56c:	0800c655 	.word	0x0800c655
 800c570:	0800c655 	.word	0x0800c655
 800c574:	0800c5f7 	.word	0x0800c5f7
 800c578:	0800c655 	.word	0x0800c655
 800c57c:	0800c655 	.word	0x0800c655
 800c580:	0800c655 	.word	0x0800c655
 800c584:	0800c655 	.word	0x0800c655
 800c588:	0800c655 	.word	0x0800c655
 800c58c:	0800c655 	.word	0x0800c655
 800c590:	0800c655 	.word	0x0800c655
 800c594:	0800c607 	.word	0x0800c607
 800c598:	0800c655 	.word	0x0800c655
 800c59c:	0800c655 	.word	0x0800c655
 800c5a0:	0800c655 	.word	0x0800c655
 800c5a4:	0800c655 	.word	0x0800c655
 800c5a8:	0800c655 	.word	0x0800c655
 800c5ac:	0800c655 	.word	0x0800c655
 800c5b0:	0800c655 	.word	0x0800c655
 800c5b4:	0800c655 	.word	0x0800c655
 800c5b8:	0800c655 	.word	0x0800c655
 800c5bc:	0800c655 	.word	0x0800c655
 800c5c0:	0800c655 	.word	0x0800c655
 800c5c4:	0800c655 	.word	0x0800c655
 800c5c8:	0800c655 	.word	0x0800c655
 800c5cc:	0800c655 	.word	0x0800c655
 800c5d0:	0800c655 	.word	0x0800c655
 800c5d4:	0800c647 	.word	0x0800c647
 800c5d8:	2b40      	cmp	r3, #64	@ 0x40
 800c5da:	d037      	beq.n	800c64c <UART_SetConfig+0x6bc>
 800c5dc:	e03a      	b.n	800c654 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c5de:	f7fd fd49 	bl	800a074 <HAL_RCCEx_GetD3PCLK1Freq>
 800c5e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c5e4:	e03c      	b.n	800c660 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c5e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	f7fd fd58 	bl	800a0a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c5f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c5f4:	e034      	b.n	800c660 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c5f6:	f107 0318 	add.w	r3, r7, #24
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	f7fd fea4 	bl	800a348 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c600:	69fb      	ldr	r3, [r7, #28]
 800c602:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c604:	e02c      	b.n	800c660 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c606:	4b09      	ldr	r3, [pc, #36]	@ (800c62c <UART_SetConfig+0x69c>)
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	f003 0320 	and.w	r3, r3, #32
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d016      	beq.n	800c640 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c612:	4b06      	ldr	r3, [pc, #24]	@ (800c62c <UART_SetConfig+0x69c>)
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	08db      	lsrs	r3, r3, #3
 800c618:	f003 0303 	and.w	r3, r3, #3
 800c61c:	4a07      	ldr	r2, [pc, #28]	@ (800c63c <UART_SetConfig+0x6ac>)
 800c61e:	fa22 f303 	lsr.w	r3, r2, r3
 800c622:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c624:	e01c      	b.n	800c660 <UART_SetConfig+0x6d0>
 800c626:	bf00      	nop
 800c628:	40011400 	.word	0x40011400
 800c62c:	58024400 	.word	0x58024400
 800c630:	40007800 	.word	0x40007800
 800c634:	40007c00 	.word	0x40007c00
 800c638:	58000c00 	.word	0x58000c00
 800c63c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c640:	4b9d      	ldr	r3, [pc, #628]	@ (800c8b8 <UART_SetConfig+0x928>)
 800c642:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c644:	e00c      	b.n	800c660 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c646:	4b9d      	ldr	r3, [pc, #628]	@ (800c8bc <UART_SetConfig+0x92c>)
 800c648:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c64a:	e009      	b.n	800c660 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c64c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c650:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c652:	e005      	b.n	800c660 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c654:	2300      	movs	r3, #0
 800c656:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c658:	2301      	movs	r3, #1
 800c65a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c65e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c660:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c662:	2b00      	cmp	r3, #0
 800c664:	f000 81de 	beq.w	800ca24 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c668:	697b      	ldr	r3, [r7, #20]
 800c66a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c66c:	4a94      	ldr	r2, [pc, #592]	@ (800c8c0 <UART_SetConfig+0x930>)
 800c66e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c672:	461a      	mov	r2, r3
 800c674:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c676:	fbb3 f3f2 	udiv	r3, r3, r2
 800c67a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c67c:	697b      	ldr	r3, [r7, #20]
 800c67e:	685a      	ldr	r2, [r3, #4]
 800c680:	4613      	mov	r3, r2
 800c682:	005b      	lsls	r3, r3, #1
 800c684:	4413      	add	r3, r2
 800c686:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c688:	429a      	cmp	r2, r3
 800c68a:	d305      	bcc.n	800c698 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c68c:	697b      	ldr	r3, [r7, #20]
 800c68e:	685b      	ldr	r3, [r3, #4]
 800c690:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c692:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c694:	429a      	cmp	r2, r3
 800c696:	d903      	bls.n	800c6a0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c698:	2301      	movs	r3, #1
 800c69a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c69e:	e1c1      	b.n	800ca24 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c6a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	60bb      	str	r3, [r7, #8]
 800c6a6:	60fa      	str	r2, [r7, #12]
 800c6a8:	697b      	ldr	r3, [r7, #20]
 800c6aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6ac:	4a84      	ldr	r2, [pc, #528]	@ (800c8c0 <UART_SetConfig+0x930>)
 800c6ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c6b2:	b29b      	uxth	r3, r3
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	603b      	str	r3, [r7, #0]
 800c6b8:	607a      	str	r2, [r7, #4]
 800c6ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c6be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c6c2:	f7f3 fe5d 	bl	8000380 <__aeabi_uldivmod>
 800c6c6:	4602      	mov	r2, r0
 800c6c8:	460b      	mov	r3, r1
 800c6ca:	4610      	mov	r0, r2
 800c6cc:	4619      	mov	r1, r3
 800c6ce:	f04f 0200 	mov.w	r2, #0
 800c6d2:	f04f 0300 	mov.w	r3, #0
 800c6d6:	020b      	lsls	r3, r1, #8
 800c6d8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c6dc:	0202      	lsls	r2, r0, #8
 800c6de:	6979      	ldr	r1, [r7, #20]
 800c6e0:	6849      	ldr	r1, [r1, #4]
 800c6e2:	0849      	lsrs	r1, r1, #1
 800c6e4:	2000      	movs	r0, #0
 800c6e6:	460c      	mov	r4, r1
 800c6e8:	4605      	mov	r5, r0
 800c6ea:	eb12 0804 	adds.w	r8, r2, r4
 800c6ee:	eb43 0905 	adc.w	r9, r3, r5
 800c6f2:	697b      	ldr	r3, [r7, #20]
 800c6f4:	685b      	ldr	r3, [r3, #4]
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	469a      	mov	sl, r3
 800c6fa:	4693      	mov	fp, r2
 800c6fc:	4652      	mov	r2, sl
 800c6fe:	465b      	mov	r3, fp
 800c700:	4640      	mov	r0, r8
 800c702:	4649      	mov	r1, r9
 800c704:	f7f3 fe3c 	bl	8000380 <__aeabi_uldivmod>
 800c708:	4602      	mov	r2, r0
 800c70a:	460b      	mov	r3, r1
 800c70c:	4613      	mov	r3, r2
 800c70e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c712:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c716:	d308      	bcc.n	800c72a <UART_SetConfig+0x79a>
 800c718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c71a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c71e:	d204      	bcs.n	800c72a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c720:	697b      	ldr	r3, [r7, #20]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c726:	60da      	str	r2, [r3, #12]
 800c728:	e17c      	b.n	800ca24 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800c72a:	2301      	movs	r3, #1
 800c72c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c730:	e178      	b.n	800ca24 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c732:	697b      	ldr	r3, [r7, #20]
 800c734:	69db      	ldr	r3, [r3, #28]
 800c736:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c73a:	f040 80c5 	bne.w	800c8c8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800c73e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c742:	2b20      	cmp	r3, #32
 800c744:	dc48      	bgt.n	800c7d8 <UART_SetConfig+0x848>
 800c746:	2b00      	cmp	r3, #0
 800c748:	db7b      	blt.n	800c842 <UART_SetConfig+0x8b2>
 800c74a:	2b20      	cmp	r3, #32
 800c74c:	d879      	bhi.n	800c842 <UART_SetConfig+0x8b2>
 800c74e:	a201      	add	r2, pc, #4	@ (adr r2, 800c754 <UART_SetConfig+0x7c4>)
 800c750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c754:	0800c7df 	.word	0x0800c7df
 800c758:	0800c7e7 	.word	0x0800c7e7
 800c75c:	0800c843 	.word	0x0800c843
 800c760:	0800c843 	.word	0x0800c843
 800c764:	0800c7ef 	.word	0x0800c7ef
 800c768:	0800c843 	.word	0x0800c843
 800c76c:	0800c843 	.word	0x0800c843
 800c770:	0800c843 	.word	0x0800c843
 800c774:	0800c7ff 	.word	0x0800c7ff
 800c778:	0800c843 	.word	0x0800c843
 800c77c:	0800c843 	.word	0x0800c843
 800c780:	0800c843 	.word	0x0800c843
 800c784:	0800c843 	.word	0x0800c843
 800c788:	0800c843 	.word	0x0800c843
 800c78c:	0800c843 	.word	0x0800c843
 800c790:	0800c843 	.word	0x0800c843
 800c794:	0800c80f 	.word	0x0800c80f
 800c798:	0800c843 	.word	0x0800c843
 800c79c:	0800c843 	.word	0x0800c843
 800c7a0:	0800c843 	.word	0x0800c843
 800c7a4:	0800c843 	.word	0x0800c843
 800c7a8:	0800c843 	.word	0x0800c843
 800c7ac:	0800c843 	.word	0x0800c843
 800c7b0:	0800c843 	.word	0x0800c843
 800c7b4:	0800c843 	.word	0x0800c843
 800c7b8:	0800c843 	.word	0x0800c843
 800c7bc:	0800c843 	.word	0x0800c843
 800c7c0:	0800c843 	.word	0x0800c843
 800c7c4:	0800c843 	.word	0x0800c843
 800c7c8:	0800c843 	.word	0x0800c843
 800c7cc:	0800c843 	.word	0x0800c843
 800c7d0:	0800c843 	.word	0x0800c843
 800c7d4:	0800c835 	.word	0x0800c835
 800c7d8:	2b40      	cmp	r3, #64	@ 0x40
 800c7da:	d02e      	beq.n	800c83a <UART_SetConfig+0x8aa>
 800c7dc:	e031      	b.n	800c842 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c7de:	f7fb fc93 	bl	8008108 <HAL_RCC_GetPCLK1Freq>
 800c7e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c7e4:	e033      	b.n	800c84e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c7e6:	f7fb fca5 	bl	8008134 <HAL_RCC_GetPCLK2Freq>
 800c7ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c7ec:	e02f      	b.n	800c84e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c7ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	f7fd fc54 	bl	800a0a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c7f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c7fc:	e027      	b.n	800c84e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c7fe:	f107 0318 	add.w	r3, r7, #24
 800c802:	4618      	mov	r0, r3
 800c804:	f7fd fda0 	bl	800a348 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c808:	69fb      	ldr	r3, [r7, #28]
 800c80a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c80c:	e01f      	b.n	800c84e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c80e:	4b2d      	ldr	r3, [pc, #180]	@ (800c8c4 <UART_SetConfig+0x934>)
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	f003 0320 	and.w	r3, r3, #32
 800c816:	2b00      	cmp	r3, #0
 800c818:	d009      	beq.n	800c82e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c81a:	4b2a      	ldr	r3, [pc, #168]	@ (800c8c4 <UART_SetConfig+0x934>)
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	08db      	lsrs	r3, r3, #3
 800c820:	f003 0303 	and.w	r3, r3, #3
 800c824:	4a24      	ldr	r2, [pc, #144]	@ (800c8b8 <UART_SetConfig+0x928>)
 800c826:	fa22 f303 	lsr.w	r3, r2, r3
 800c82a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c82c:	e00f      	b.n	800c84e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c82e:	4b22      	ldr	r3, [pc, #136]	@ (800c8b8 <UART_SetConfig+0x928>)
 800c830:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c832:	e00c      	b.n	800c84e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c834:	4b21      	ldr	r3, [pc, #132]	@ (800c8bc <UART_SetConfig+0x92c>)
 800c836:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c838:	e009      	b.n	800c84e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c83a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c83e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c840:	e005      	b.n	800c84e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c842:	2300      	movs	r3, #0
 800c844:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c846:	2301      	movs	r3, #1
 800c848:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c84c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c84e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c850:	2b00      	cmp	r3, #0
 800c852:	f000 80e7 	beq.w	800ca24 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c856:	697b      	ldr	r3, [r7, #20]
 800c858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c85a:	4a19      	ldr	r2, [pc, #100]	@ (800c8c0 <UART_SetConfig+0x930>)
 800c85c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c860:	461a      	mov	r2, r3
 800c862:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c864:	fbb3 f3f2 	udiv	r3, r3, r2
 800c868:	005a      	lsls	r2, r3, #1
 800c86a:	697b      	ldr	r3, [r7, #20]
 800c86c:	685b      	ldr	r3, [r3, #4]
 800c86e:	085b      	lsrs	r3, r3, #1
 800c870:	441a      	add	r2, r3
 800c872:	697b      	ldr	r3, [r7, #20]
 800c874:	685b      	ldr	r3, [r3, #4]
 800c876:	fbb2 f3f3 	udiv	r3, r2, r3
 800c87a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c87c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c87e:	2b0f      	cmp	r3, #15
 800c880:	d916      	bls.n	800c8b0 <UART_SetConfig+0x920>
 800c882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c884:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c888:	d212      	bcs.n	800c8b0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c88a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c88c:	b29b      	uxth	r3, r3
 800c88e:	f023 030f 	bic.w	r3, r3, #15
 800c892:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c896:	085b      	lsrs	r3, r3, #1
 800c898:	b29b      	uxth	r3, r3
 800c89a:	f003 0307 	and.w	r3, r3, #7
 800c89e:	b29a      	uxth	r2, r3
 800c8a0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c8a2:	4313      	orrs	r3, r2
 800c8a4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800c8a6:	697b      	ldr	r3, [r7, #20]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800c8ac:	60da      	str	r2, [r3, #12]
 800c8ae:	e0b9      	b.n	800ca24 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c8b0:	2301      	movs	r3, #1
 800c8b2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c8b6:	e0b5      	b.n	800ca24 <UART_SetConfig+0xa94>
 800c8b8:	03d09000 	.word	0x03d09000
 800c8bc:	003d0900 	.word	0x003d0900
 800c8c0:	0800dd70 	.word	0x0800dd70
 800c8c4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c8c8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c8cc:	2b20      	cmp	r3, #32
 800c8ce:	dc49      	bgt.n	800c964 <UART_SetConfig+0x9d4>
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	db7c      	blt.n	800c9ce <UART_SetConfig+0xa3e>
 800c8d4:	2b20      	cmp	r3, #32
 800c8d6:	d87a      	bhi.n	800c9ce <UART_SetConfig+0xa3e>
 800c8d8:	a201      	add	r2, pc, #4	@ (adr r2, 800c8e0 <UART_SetConfig+0x950>)
 800c8da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8de:	bf00      	nop
 800c8e0:	0800c96b 	.word	0x0800c96b
 800c8e4:	0800c973 	.word	0x0800c973
 800c8e8:	0800c9cf 	.word	0x0800c9cf
 800c8ec:	0800c9cf 	.word	0x0800c9cf
 800c8f0:	0800c97b 	.word	0x0800c97b
 800c8f4:	0800c9cf 	.word	0x0800c9cf
 800c8f8:	0800c9cf 	.word	0x0800c9cf
 800c8fc:	0800c9cf 	.word	0x0800c9cf
 800c900:	0800c98b 	.word	0x0800c98b
 800c904:	0800c9cf 	.word	0x0800c9cf
 800c908:	0800c9cf 	.word	0x0800c9cf
 800c90c:	0800c9cf 	.word	0x0800c9cf
 800c910:	0800c9cf 	.word	0x0800c9cf
 800c914:	0800c9cf 	.word	0x0800c9cf
 800c918:	0800c9cf 	.word	0x0800c9cf
 800c91c:	0800c9cf 	.word	0x0800c9cf
 800c920:	0800c99b 	.word	0x0800c99b
 800c924:	0800c9cf 	.word	0x0800c9cf
 800c928:	0800c9cf 	.word	0x0800c9cf
 800c92c:	0800c9cf 	.word	0x0800c9cf
 800c930:	0800c9cf 	.word	0x0800c9cf
 800c934:	0800c9cf 	.word	0x0800c9cf
 800c938:	0800c9cf 	.word	0x0800c9cf
 800c93c:	0800c9cf 	.word	0x0800c9cf
 800c940:	0800c9cf 	.word	0x0800c9cf
 800c944:	0800c9cf 	.word	0x0800c9cf
 800c948:	0800c9cf 	.word	0x0800c9cf
 800c94c:	0800c9cf 	.word	0x0800c9cf
 800c950:	0800c9cf 	.word	0x0800c9cf
 800c954:	0800c9cf 	.word	0x0800c9cf
 800c958:	0800c9cf 	.word	0x0800c9cf
 800c95c:	0800c9cf 	.word	0x0800c9cf
 800c960:	0800c9c1 	.word	0x0800c9c1
 800c964:	2b40      	cmp	r3, #64	@ 0x40
 800c966:	d02e      	beq.n	800c9c6 <UART_SetConfig+0xa36>
 800c968:	e031      	b.n	800c9ce <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c96a:	f7fb fbcd 	bl	8008108 <HAL_RCC_GetPCLK1Freq>
 800c96e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c970:	e033      	b.n	800c9da <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c972:	f7fb fbdf 	bl	8008134 <HAL_RCC_GetPCLK2Freq>
 800c976:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c978:	e02f      	b.n	800c9da <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c97a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c97e:	4618      	mov	r0, r3
 800c980:	f7fd fb8e 	bl	800a0a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c986:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c988:	e027      	b.n	800c9da <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c98a:	f107 0318 	add.w	r3, r7, #24
 800c98e:	4618      	mov	r0, r3
 800c990:	f7fd fcda 	bl	800a348 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c994:	69fb      	ldr	r3, [r7, #28]
 800c996:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c998:	e01f      	b.n	800c9da <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c99a:	4b2d      	ldr	r3, [pc, #180]	@ (800ca50 <UART_SetConfig+0xac0>)
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	f003 0320 	and.w	r3, r3, #32
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d009      	beq.n	800c9ba <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c9a6:	4b2a      	ldr	r3, [pc, #168]	@ (800ca50 <UART_SetConfig+0xac0>)
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	08db      	lsrs	r3, r3, #3
 800c9ac:	f003 0303 	and.w	r3, r3, #3
 800c9b0:	4a28      	ldr	r2, [pc, #160]	@ (800ca54 <UART_SetConfig+0xac4>)
 800c9b2:	fa22 f303 	lsr.w	r3, r2, r3
 800c9b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c9b8:	e00f      	b.n	800c9da <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800c9ba:	4b26      	ldr	r3, [pc, #152]	@ (800ca54 <UART_SetConfig+0xac4>)
 800c9bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c9be:	e00c      	b.n	800c9da <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c9c0:	4b25      	ldr	r3, [pc, #148]	@ (800ca58 <UART_SetConfig+0xac8>)
 800c9c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c9c4:	e009      	b.n	800c9da <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c9c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c9ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c9cc:	e005      	b.n	800c9da <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c9d2:	2301      	movs	r3, #1
 800c9d4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c9d8:	bf00      	nop
    }

    if (pclk != 0U)
 800c9da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d021      	beq.n	800ca24 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c9e0:	697b      	ldr	r3, [r7, #20]
 800c9e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9e4:	4a1d      	ldr	r2, [pc, #116]	@ (800ca5c <UART_SetConfig+0xacc>)
 800c9e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c9ea:	461a      	mov	r2, r3
 800c9ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9ee:	fbb3 f2f2 	udiv	r2, r3, r2
 800c9f2:	697b      	ldr	r3, [r7, #20]
 800c9f4:	685b      	ldr	r3, [r3, #4]
 800c9f6:	085b      	lsrs	r3, r3, #1
 800c9f8:	441a      	add	r2, r3
 800c9fa:	697b      	ldr	r3, [r7, #20]
 800c9fc:	685b      	ldr	r3, [r3, #4]
 800c9fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca02:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ca04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca06:	2b0f      	cmp	r3, #15
 800ca08:	d909      	bls.n	800ca1e <UART_SetConfig+0xa8e>
 800ca0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ca10:	d205      	bcs.n	800ca1e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ca12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca14:	b29a      	uxth	r2, r3
 800ca16:	697b      	ldr	r3, [r7, #20]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	60da      	str	r2, [r3, #12]
 800ca1c:	e002      	b.n	800ca24 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ca1e:	2301      	movs	r3, #1
 800ca20:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ca24:	697b      	ldr	r3, [r7, #20]
 800ca26:	2201      	movs	r2, #1
 800ca28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800ca2c:	697b      	ldr	r3, [r7, #20]
 800ca2e:	2201      	movs	r2, #1
 800ca30:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ca34:	697b      	ldr	r3, [r7, #20]
 800ca36:	2200      	movs	r2, #0
 800ca38:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ca3a:	697b      	ldr	r3, [r7, #20]
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ca40:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800ca44:	4618      	mov	r0, r3
 800ca46:	3748      	adds	r7, #72	@ 0x48
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ca4e:	bf00      	nop
 800ca50:	58024400 	.word	0x58024400
 800ca54:	03d09000 	.word	0x03d09000
 800ca58:	003d0900 	.word	0x003d0900
 800ca5c:	0800dd70 	.word	0x0800dd70

0800ca60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ca60:	b480      	push	{r7}
 800ca62:	b083      	sub	sp, #12
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca6c:	f003 0308 	and.w	r3, r3, #8
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d00a      	beq.n	800ca8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	685b      	ldr	r3, [r3, #4]
 800ca7a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	430a      	orrs	r2, r1
 800ca88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca8e:	f003 0301 	and.w	r3, r3, #1
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d00a      	beq.n	800caac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	685b      	ldr	r3, [r3, #4]
 800ca9c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	430a      	orrs	r2, r1
 800caaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cab0:	f003 0302 	and.w	r3, r3, #2
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d00a      	beq.n	800cace <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	685b      	ldr	r3, [r3, #4]
 800cabe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	430a      	orrs	r2, r1
 800cacc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cad2:	f003 0304 	and.w	r3, r3, #4
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d00a      	beq.n	800caf0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	685b      	ldr	r3, [r3, #4]
 800cae0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	430a      	orrs	r2, r1
 800caee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800caf4:	f003 0310 	and.w	r3, r3, #16
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d00a      	beq.n	800cb12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	689b      	ldr	r3, [r3, #8]
 800cb02:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	430a      	orrs	r2, r1
 800cb10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb16:	f003 0320 	and.w	r3, r3, #32
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d00a      	beq.n	800cb34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	689b      	ldr	r3, [r3, #8]
 800cb24:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	430a      	orrs	r2, r1
 800cb32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d01a      	beq.n	800cb76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	685b      	ldr	r3, [r3, #4]
 800cb46:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	430a      	orrs	r2, r1
 800cb54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cb5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cb5e:	d10a      	bne.n	800cb76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	685b      	ldr	r3, [r3, #4]
 800cb66:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	430a      	orrs	r2, r1
 800cb74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d00a      	beq.n	800cb98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	685b      	ldr	r3, [r3, #4]
 800cb88:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	430a      	orrs	r2, r1
 800cb96:	605a      	str	r2, [r3, #4]
  }
}
 800cb98:	bf00      	nop
 800cb9a:	370c      	adds	r7, #12
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba2:	4770      	bx	lr

0800cba4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cba4:	b580      	push	{r7, lr}
 800cba6:	b098      	sub	sp, #96	@ 0x60
 800cba8:	af02      	add	r7, sp, #8
 800cbaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	2200      	movs	r2, #0
 800cbb0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cbb4:	f7f6 f896 	bl	8002ce4 <HAL_GetTick>
 800cbb8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	f003 0308 	and.w	r3, r3, #8
 800cbc4:	2b08      	cmp	r3, #8
 800cbc6:	d12f      	bne.n	800cc28 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cbc8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cbcc:	9300      	str	r3, [sp, #0]
 800cbce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800cbd6:	6878      	ldr	r0, [r7, #4]
 800cbd8:	f000 f88e 	bl	800ccf8 <UART_WaitOnFlagUntilTimeout>
 800cbdc:	4603      	mov	r3, r0
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d022      	beq.n	800cc28 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbea:	e853 3f00 	ldrex	r3, [r3]
 800cbee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cbf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbf2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cbf6:	653b      	str	r3, [r7, #80]	@ 0x50
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	461a      	mov	r2, r3
 800cbfe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc00:	647b      	str	r3, [r7, #68]	@ 0x44
 800cc02:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc04:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cc06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cc08:	e841 2300 	strex	r3, r2, [r1]
 800cc0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cc0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d1e6      	bne.n	800cbe2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2220      	movs	r2, #32
 800cc18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	2200      	movs	r2, #0
 800cc20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cc24:	2303      	movs	r3, #3
 800cc26:	e063      	b.n	800ccf0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	f003 0304 	and.w	r3, r3, #4
 800cc32:	2b04      	cmp	r3, #4
 800cc34:	d149      	bne.n	800ccca <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cc36:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cc3a:	9300      	str	r3, [sp, #0]
 800cc3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc3e:	2200      	movs	r2, #0
 800cc40:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800cc44:	6878      	ldr	r0, [r7, #4]
 800cc46:	f000 f857 	bl	800ccf8 <UART_WaitOnFlagUntilTimeout>
 800cc4a:	4603      	mov	r3, r0
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d03c      	beq.n	800ccca <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc58:	e853 3f00 	ldrex	r3, [r3]
 800cc5c:	623b      	str	r3, [r7, #32]
   return(result);
 800cc5e:	6a3b      	ldr	r3, [r7, #32]
 800cc60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cc64:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	461a      	mov	r2, r3
 800cc6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc6e:	633b      	str	r3, [r7, #48]	@ 0x30
 800cc70:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cc74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cc76:	e841 2300 	strex	r3, r2, [r1]
 800cc7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cc7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d1e6      	bne.n	800cc50 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	3308      	adds	r3, #8
 800cc88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc8a:	693b      	ldr	r3, [r7, #16]
 800cc8c:	e853 3f00 	ldrex	r3, [r3]
 800cc90:	60fb      	str	r3, [r7, #12]
   return(result);
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	f023 0301 	bic.w	r3, r3, #1
 800cc98:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	3308      	adds	r3, #8
 800cca0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cca2:	61fa      	str	r2, [r7, #28]
 800cca4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cca6:	69b9      	ldr	r1, [r7, #24]
 800cca8:	69fa      	ldr	r2, [r7, #28]
 800ccaa:	e841 2300 	strex	r3, r2, [r1]
 800ccae:	617b      	str	r3, [r7, #20]
   return(result);
 800ccb0:	697b      	ldr	r3, [r7, #20]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d1e5      	bne.n	800cc82 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	2220      	movs	r2, #32
 800ccba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ccc6:	2303      	movs	r3, #3
 800ccc8:	e012      	b.n	800ccf0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	2220      	movs	r2, #32
 800ccce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	2220      	movs	r2, #32
 800ccd6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	2200      	movs	r2, #0
 800ccde:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	2200      	movs	r2, #0
 800cce4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	2200      	movs	r2, #0
 800ccea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ccee:	2300      	movs	r3, #0
}
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	3758      	adds	r7, #88	@ 0x58
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	bd80      	pop	{r7, pc}

0800ccf8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b084      	sub	sp, #16
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	60f8      	str	r0, [r7, #12]
 800cd00:	60b9      	str	r1, [r7, #8]
 800cd02:	603b      	str	r3, [r7, #0]
 800cd04:	4613      	mov	r3, r2
 800cd06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cd08:	e04f      	b.n	800cdaa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cd0a:	69bb      	ldr	r3, [r7, #24]
 800cd0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd10:	d04b      	beq.n	800cdaa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cd12:	f7f5 ffe7 	bl	8002ce4 <HAL_GetTick>
 800cd16:	4602      	mov	r2, r0
 800cd18:	683b      	ldr	r3, [r7, #0]
 800cd1a:	1ad3      	subs	r3, r2, r3
 800cd1c:	69ba      	ldr	r2, [r7, #24]
 800cd1e:	429a      	cmp	r2, r3
 800cd20:	d302      	bcc.n	800cd28 <UART_WaitOnFlagUntilTimeout+0x30>
 800cd22:	69bb      	ldr	r3, [r7, #24]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d101      	bne.n	800cd2c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800cd28:	2303      	movs	r3, #3
 800cd2a:	e04e      	b.n	800cdca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	f003 0304 	and.w	r3, r3, #4
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d037      	beq.n	800cdaa <UART_WaitOnFlagUntilTimeout+0xb2>
 800cd3a:	68bb      	ldr	r3, [r7, #8]
 800cd3c:	2b80      	cmp	r3, #128	@ 0x80
 800cd3e:	d034      	beq.n	800cdaa <UART_WaitOnFlagUntilTimeout+0xb2>
 800cd40:	68bb      	ldr	r3, [r7, #8]
 800cd42:	2b40      	cmp	r3, #64	@ 0x40
 800cd44:	d031      	beq.n	800cdaa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	69db      	ldr	r3, [r3, #28]
 800cd4c:	f003 0308 	and.w	r3, r3, #8
 800cd50:	2b08      	cmp	r3, #8
 800cd52:	d110      	bne.n	800cd76 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	2208      	movs	r2, #8
 800cd5a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cd5c:	68f8      	ldr	r0, [r7, #12]
 800cd5e:	f000 f839 	bl	800cdd4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	2208      	movs	r2, #8
 800cd66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	2200      	movs	r2, #0
 800cd6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800cd72:	2301      	movs	r3, #1
 800cd74:	e029      	b.n	800cdca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	69db      	ldr	r3, [r3, #28]
 800cd7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cd80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cd84:	d111      	bne.n	800cdaa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cd8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cd90:	68f8      	ldr	r0, [r7, #12]
 800cd92:	f000 f81f 	bl	800cdd4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	2220      	movs	r2, #32
 800cd9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	2200      	movs	r2, #0
 800cda2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800cda6:	2303      	movs	r3, #3
 800cda8:	e00f      	b.n	800cdca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	69da      	ldr	r2, [r3, #28]
 800cdb0:	68bb      	ldr	r3, [r7, #8]
 800cdb2:	4013      	ands	r3, r2
 800cdb4:	68ba      	ldr	r2, [r7, #8]
 800cdb6:	429a      	cmp	r2, r3
 800cdb8:	bf0c      	ite	eq
 800cdba:	2301      	moveq	r3, #1
 800cdbc:	2300      	movne	r3, #0
 800cdbe:	b2db      	uxtb	r3, r3
 800cdc0:	461a      	mov	r2, r3
 800cdc2:	79fb      	ldrb	r3, [r7, #7]
 800cdc4:	429a      	cmp	r2, r3
 800cdc6:	d0a0      	beq.n	800cd0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cdc8:	2300      	movs	r3, #0
}
 800cdca:	4618      	mov	r0, r3
 800cdcc:	3710      	adds	r7, #16
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	bd80      	pop	{r7, pc}
	...

0800cdd4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cdd4:	b480      	push	{r7}
 800cdd6:	b095      	sub	sp, #84	@ 0x54
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cde2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cde4:	e853 3f00 	ldrex	r3, [r3]
 800cde8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cdea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cdf0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	461a      	mov	r2, r3
 800cdf8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cdfa:	643b      	str	r3, [r7, #64]	@ 0x40
 800cdfc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdfe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ce00:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ce02:	e841 2300 	strex	r3, r2, [r1]
 800ce06:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ce08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d1e6      	bne.n	800cddc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	3308      	adds	r3, #8
 800ce14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce16:	6a3b      	ldr	r3, [r7, #32]
 800ce18:	e853 3f00 	ldrex	r3, [r3]
 800ce1c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ce1e:	69fa      	ldr	r2, [r7, #28]
 800ce20:	4b1e      	ldr	r3, [pc, #120]	@ (800ce9c <UART_EndRxTransfer+0xc8>)
 800ce22:	4013      	ands	r3, r2
 800ce24:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	3308      	adds	r3, #8
 800ce2c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ce2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ce30:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ce34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ce36:	e841 2300 	strex	r3, r2, [r1]
 800ce3a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ce3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d1e5      	bne.n	800ce0e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ce46:	2b01      	cmp	r3, #1
 800ce48:	d118      	bne.n	800ce7c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	e853 3f00 	ldrex	r3, [r3]
 800ce56:	60bb      	str	r3, [r7, #8]
   return(result);
 800ce58:	68bb      	ldr	r3, [r7, #8]
 800ce5a:	f023 0310 	bic.w	r3, r3, #16
 800ce5e:	647b      	str	r3, [r7, #68]	@ 0x44
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	461a      	mov	r2, r3
 800ce66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ce68:	61bb      	str	r3, [r7, #24]
 800ce6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce6c:	6979      	ldr	r1, [r7, #20]
 800ce6e:	69ba      	ldr	r2, [r7, #24]
 800ce70:	e841 2300 	strex	r3, r2, [r1]
 800ce74:	613b      	str	r3, [r7, #16]
   return(result);
 800ce76:	693b      	ldr	r3, [r7, #16]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d1e6      	bne.n	800ce4a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	2220      	movs	r2, #32
 800ce80:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	2200      	movs	r2, #0
 800ce88:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	2200      	movs	r2, #0
 800ce8e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ce90:	bf00      	nop
 800ce92:	3754      	adds	r7, #84	@ 0x54
 800ce94:	46bd      	mov	sp, r7
 800ce96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9a:	4770      	bx	lr
 800ce9c:	effffffe 	.word	0xeffffffe

0800cea0 <std>:
 800cea0:	2300      	movs	r3, #0
 800cea2:	b510      	push	{r4, lr}
 800cea4:	4604      	mov	r4, r0
 800cea6:	e9c0 3300 	strd	r3, r3, [r0]
 800ceaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ceae:	6083      	str	r3, [r0, #8]
 800ceb0:	8181      	strh	r1, [r0, #12]
 800ceb2:	6643      	str	r3, [r0, #100]	@ 0x64
 800ceb4:	81c2      	strh	r2, [r0, #14]
 800ceb6:	6183      	str	r3, [r0, #24]
 800ceb8:	4619      	mov	r1, r3
 800ceba:	2208      	movs	r2, #8
 800cebc:	305c      	adds	r0, #92	@ 0x5c
 800cebe:	f000 f99b 	bl	800d1f8 <memset>
 800cec2:	4b0d      	ldr	r3, [pc, #52]	@ (800cef8 <std+0x58>)
 800cec4:	6263      	str	r3, [r4, #36]	@ 0x24
 800cec6:	4b0d      	ldr	r3, [pc, #52]	@ (800cefc <std+0x5c>)
 800cec8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ceca:	4b0d      	ldr	r3, [pc, #52]	@ (800cf00 <std+0x60>)
 800cecc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cece:	4b0d      	ldr	r3, [pc, #52]	@ (800cf04 <std+0x64>)
 800ced0:	6323      	str	r3, [r4, #48]	@ 0x30
 800ced2:	4b0d      	ldr	r3, [pc, #52]	@ (800cf08 <std+0x68>)
 800ced4:	6224      	str	r4, [r4, #32]
 800ced6:	429c      	cmp	r4, r3
 800ced8:	d006      	beq.n	800cee8 <std+0x48>
 800ceda:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cede:	4294      	cmp	r4, r2
 800cee0:	d002      	beq.n	800cee8 <std+0x48>
 800cee2:	33d0      	adds	r3, #208	@ 0xd0
 800cee4:	429c      	cmp	r4, r3
 800cee6:	d105      	bne.n	800cef4 <std+0x54>
 800cee8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ceec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cef0:	f000 b9fa 	b.w	800d2e8 <__retarget_lock_init_recursive>
 800cef4:	bd10      	pop	{r4, pc}
 800cef6:	bf00      	nop
 800cef8:	0800d049 	.word	0x0800d049
 800cefc:	0800d06b 	.word	0x0800d06b
 800cf00:	0800d0a3 	.word	0x0800d0a3
 800cf04:	0800d0c7 	.word	0x0800d0c7
 800cf08:	240003a0 	.word	0x240003a0

0800cf0c <stdio_exit_handler>:
 800cf0c:	4a02      	ldr	r2, [pc, #8]	@ (800cf18 <stdio_exit_handler+0xc>)
 800cf0e:	4903      	ldr	r1, [pc, #12]	@ (800cf1c <stdio_exit_handler+0x10>)
 800cf10:	4803      	ldr	r0, [pc, #12]	@ (800cf20 <stdio_exit_handler+0x14>)
 800cf12:	f000 b869 	b.w	800cfe8 <_fwalk_sglue>
 800cf16:	bf00      	nop
 800cf18:	2400002c 	.word	0x2400002c
 800cf1c:	0800dba1 	.word	0x0800dba1
 800cf20:	2400003c 	.word	0x2400003c

0800cf24 <cleanup_stdio>:
 800cf24:	6841      	ldr	r1, [r0, #4]
 800cf26:	4b0c      	ldr	r3, [pc, #48]	@ (800cf58 <cleanup_stdio+0x34>)
 800cf28:	4299      	cmp	r1, r3
 800cf2a:	b510      	push	{r4, lr}
 800cf2c:	4604      	mov	r4, r0
 800cf2e:	d001      	beq.n	800cf34 <cleanup_stdio+0x10>
 800cf30:	f000 fe36 	bl	800dba0 <_fflush_r>
 800cf34:	68a1      	ldr	r1, [r4, #8]
 800cf36:	4b09      	ldr	r3, [pc, #36]	@ (800cf5c <cleanup_stdio+0x38>)
 800cf38:	4299      	cmp	r1, r3
 800cf3a:	d002      	beq.n	800cf42 <cleanup_stdio+0x1e>
 800cf3c:	4620      	mov	r0, r4
 800cf3e:	f000 fe2f 	bl	800dba0 <_fflush_r>
 800cf42:	68e1      	ldr	r1, [r4, #12]
 800cf44:	4b06      	ldr	r3, [pc, #24]	@ (800cf60 <cleanup_stdio+0x3c>)
 800cf46:	4299      	cmp	r1, r3
 800cf48:	d004      	beq.n	800cf54 <cleanup_stdio+0x30>
 800cf4a:	4620      	mov	r0, r4
 800cf4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf50:	f000 be26 	b.w	800dba0 <_fflush_r>
 800cf54:	bd10      	pop	{r4, pc}
 800cf56:	bf00      	nop
 800cf58:	240003a0 	.word	0x240003a0
 800cf5c:	24000408 	.word	0x24000408
 800cf60:	24000470 	.word	0x24000470

0800cf64 <global_stdio_init.part.0>:
 800cf64:	b510      	push	{r4, lr}
 800cf66:	4b0b      	ldr	r3, [pc, #44]	@ (800cf94 <global_stdio_init.part.0+0x30>)
 800cf68:	4c0b      	ldr	r4, [pc, #44]	@ (800cf98 <global_stdio_init.part.0+0x34>)
 800cf6a:	4a0c      	ldr	r2, [pc, #48]	@ (800cf9c <global_stdio_init.part.0+0x38>)
 800cf6c:	601a      	str	r2, [r3, #0]
 800cf6e:	4620      	mov	r0, r4
 800cf70:	2200      	movs	r2, #0
 800cf72:	2104      	movs	r1, #4
 800cf74:	f7ff ff94 	bl	800cea0 <std>
 800cf78:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cf7c:	2201      	movs	r2, #1
 800cf7e:	2109      	movs	r1, #9
 800cf80:	f7ff ff8e 	bl	800cea0 <std>
 800cf84:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cf88:	2202      	movs	r2, #2
 800cf8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf8e:	2112      	movs	r1, #18
 800cf90:	f7ff bf86 	b.w	800cea0 <std>
 800cf94:	240004d8 	.word	0x240004d8
 800cf98:	240003a0 	.word	0x240003a0
 800cf9c:	0800cf0d 	.word	0x0800cf0d

0800cfa0 <__sfp_lock_acquire>:
 800cfa0:	4801      	ldr	r0, [pc, #4]	@ (800cfa8 <__sfp_lock_acquire+0x8>)
 800cfa2:	f000 b9a2 	b.w	800d2ea <__retarget_lock_acquire_recursive>
 800cfa6:	bf00      	nop
 800cfa8:	240004e1 	.word	0x240004e1

0800cfac <__sfp_lock_release>:
 800cfac:	4801      	ldr	r0, [pc, #4]	@ (800cfb4 <__sfp_lock_release+0x8>)
 800cfae:	f000 b99d 	b.w	800d2ec <__retarget_lock_release_recursive>
 800cfb2:	bf00      	nop
 800cfb4:	240004e1 	.word	0x240004e1

0800cfb8 <__sinit>:
 800cfb8:	b510      	push	{r4, lr}
 800cfba:	4604      	mov	r4, r0
 800cfbc:	f7ff fff0 	bl	800cfa0 <__sfp_lock_acquire>
 800cfc0:	6a23      	ldr	r3, [r4, #32]
 800cfc2:	b11b      	cbz	r3, 800cfcc <__sinit+0x14>
 800cfc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cfc8:	f7ff bff0 	b.w	800cfac <__sfp_lock_release>
 800cfcc:	4b04      	ldr	r3, [pc, #16]	@ (800cfe0 <__sinit+0x28>)
 800cfce:	6223      	str	r3, [r4, #32]
 800cfd0:	4b04      	ldr	r3, [pc, #16]	@ (800cfe4 <__sinit+0x2c>)
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d1f5      	bne.n	800cfc4 <__sinit+0xc>
 800cfd8:	f7ff ffc4 	bl	800cf64 <global_stdio_init.part.0>
 800cfdc:	e7f2      	b.n	800cfc4 <__sinit+0xc>
 800cfde:	bf00      	nop
 800cfe0:	0800cf25 	.word	0x0800cf25
 800cfe4:	240004d8 	.word	0x240004d8

0800cfe8 <_fwalk_sglue>:
 800cfe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cfec:	4607      	mov	r7, r0
 800cfee:	4688      	mov	r8, r1
 800cff0:	4614      	mov	r4, r2
 800cff2:	2600      	movs	r6, #0
 800cff4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cff8:	f1b9 0901 	subs.w	r9, r9, #1
 800cffc:	d505      	bpl.n	800d00a <_fwalk_sglue+0x22>
 800cffe:	6824      	ldr	r4, [r4, #0]
 800d000:	2c00      	cmp	r4, #0
 800d002:	d1f7      	bne.n	800cff4 <_fwalk_sglue+0xc>
 800d004:	4630      	mov	r0, r6
 800d006:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d00a:	89ab      	ldrh	r3, [r5, #12]
 800d00c:	2b01      	cmp	r3, #1
 800d00e:	d907      	bls.n	800d020 <_fwalk_sglue+0x38>
 800d010:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d014:	3301      	adds	r3, #1
 800d016:	d003      	beq.n	800d020 <_fwalk_sglue+0x38>
 800d018:	4629      	mov	r1, r5
 800d01a:	4638      	mov	r0, r7
 800d01c:	47c0      	blx	r8
 800d01e:	4306      	orrs	r6, r0
 800d020:	3568      	adds	r5, #104	@ 0x68
 800d022:	e7e9      	b.n	800cff8 <_fwalk_sglue+0x10>

0800d024 <iprintf>:
 800d024:	b40f      	push	{r0, r1, r2, r3}
 800d026:	b507      	push	{r0, r1, r2, lr}
 800d028:	4906      	ldr	r1, [pc, #24]	@ (800d044 <iprintf+0x20>)
 800d02a:	ab04      	add	r3, sp, #16
 800d02c:	6808      	ldr	r0, [r1, #0]
 800d02e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d032:	6881      	ldr	r1, [r0, #8]
 800d034:	9301      	str	r3, [sp, #4]
 800d036:	f000 fa8b 	bl	800d550 <_vfiprintf_r>
 800d03a:	b003      	add	sp, #12
 800d03c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d040:	b004      	add	sp, #16
 800d042:	4770      	bx	lr
 800d044:	24000038 	.word	0x24000038

0800d048 <__sread>:
 800d048:	b510      	push	{r4, lr}
 800d04a:	460c      	mov	r4, r1
 800d04c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d050:	f000 f8fc 	bl	800d24c <_read_r>
 800d054:	2800      	cmp	r0, #0
 800d056:	bfab      	itete	ge
 800d058:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d05a:	89a3      	ldrhlt	r3, [r4, #12]
 800d05c:	181b      	addge	r3, r3, r0
 800d05e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d062:	bfac      	ite	ge
 800d064:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d066:	81a3      	strhlt	r3, [r4, #12]
 800d068:	bd10      	pop	{r4, pc}

0800d06a <__swrite>:
 800d06a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d06e:	461f      	mov	r7, r3
 800d070:	898b      	ldrh	r3, [r1, #12]
 800d072:	05db      	lsls	r3, r3, #23
 800d074:	4605      	mov	r5, r0
 800d076:	460c      	mov	r4, r1
 800d078:	4616      	mov	r6, r2
 800d07a:	d505      	bpl.n	800d088 <__swrite+0x1e>
 800d07c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d080:	2302      	movs	r3, #2
 800d082:	2200      	movs	r2, #0
 800d084:	f000 f8d0 	bl	800d228 <_lseek_r>
 800d088:	89a3      	ldrh	r3, [r4, #12]
 800d08a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d08e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d092:	81a3      	strh	r3, [r4, #12]
 800d094:	4632      	mov	r2, r6
 800d096:	463b      	mov	r3, r7
 800d098:	4628      	mov	r0, r5
 800d09a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d09e:	f000 b8e7 	b.w	800d270 <_write_r>

0800d0a2 <__sseek>:
 800d0a2:	b510      	push	{r4, lr}
 800d0a4:	460c      	mov	r4, r1
 800d0a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0aa:	f000 f8bd 	bl	800d228 <_lseek_r>
 800d0ae:	1c43      	adds	r3, r0, #1
 800d0b0:	89a3      	ldrh	r3, [r4, #12]
 800d0b2:	bf15      	itete	ne
 800d0b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d0b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d0ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d0be:	81a3      	strheq	r3, [r4, #12]
 800d0c0:	bf18      	it	ne
 800d0c2:	81a3      	strhne	r3, [r4, #12]
 800d0c4:	bd10      	pop	{r4, pc}

0800d0c6 <__sclose>:
 800d0c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0ca:	f000 b89d 	b.w	800d208 <_close_r>

0800d0ce <__swbuf_r>:
 800d0ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0d0:	460e      	mov	r6, r1
 800d0d2:	4614      	mov	r4, r2
 800d0d4:	4605      	mov	r5, r0
 800d0d6:	b118      	cbz	r0, 800d0e0 <__swbuf_r+0x12>
 800d0d8:	6a03      	ldr	r3, [r0, #32]
 800d0da:	b90b      	cbnz	r3, 800d0e0 <__swbuf_r+0x12>
 800d0dc:	f7ff ff6c 	bl	800cfb8 <__sinit>
 800d0e0:	69a3      	ldr	r3, [r4, #24]
 800d0e2:	60a3      	str	r3, [r4, #8]
 800d0e4:	89a3      	ldrh	r3, [r4, #12]
 800d0e6:	071a      	lsls	r2, r3, #28
 800d0e8:	d501      	bpl.n	800d0ee <__swbuf_r+0x20>
 800d0ea:	6923      	ldr	r3, [r4, #16]
 800d0ec:	b943      	cbnz	r3, 800d100 <__swbuf_r+0x32>
 800d0ee:	4621      	mov	r1, r4
 800d0f0:	4628      	mov	r0, r5
 800d0f2:	f000 f82b 	bl	800d14c <__swsetup_r>
 800d0f6:	b118      	cbz	r0, 800d100 <__swbuf_r+0x32>
 800d0f8:	f04f 37ff 	mov.w	r7, #4294967295
 800d0fc:	4638      	mov	r0, r7
 800d0fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d100:	6823      	ldr	r3, [r4, #0]
 800d102:	6922      	ldr	r2, [r4, #16]
 800d104:	1a98      	subs	r0, r3, r2
 800d106:	6963      	ldr	r3, [r4, #20]
 800d108:	b2f6      	uxtb	r6, r6
 800d10a:	4283      	cmp	r3, r0
 800d10c:	4637      	mov	r7, r6
 800d10e:	dc05      	bgt.n	800d11c <__swbuf_r+0x4e>
 800d110:	4621      	mov	r1, r4
 800d112:	4628      	mov	r0, r5
 800d114:	f000 fd44 	bl	800dba0 <_fflush_r>
 800d118:	2800      	cmp	r0, #0
 800d11a:	d1ed      	bne.n	800d0f8 <__swbuf_r+0x2a>
 800d11c:	68a3      	ldr	r3, [r4, #8]
 800d11e:	3b01      	subs	r3, #1
 800d120:	60a3      	str	r3, [r4, #8]
 800d122:	6823      	ldr	r3, [r4, #0]
 800d124:	1c5a      	adds	r2, r3, #1
 800d126:	6022      	str	r2, [r4, #0]
 800d128:	701e      	strb	r6, [r3, #0]
 800d12a:	6962      	ldr	r2, [r4, #20]
 800d12c:	1c43      	adds	r3, r0, #1
 800d12e:	429a      	cmp	r2, r3
 800d130:	d004      	beq.n	800d13c <__swbuf_r+0x6e>
 800d132:	89a3      	ldrh	r3, [r4, #12]
 800d134:	07db      	lsls	r3, r3, #31
 800d136:	d5e1      	bpl.n	800d0fc <__swbuf_r+0x2e>
 800d138:	2e0a      	cmp	r6, #10
 800d13a:	d1df      	bne.n	800d0fc <__swbuf_r+0x2e>
 800d13c:	4621      	mov	r1, r4
 800d13e:	4628      	mov	r0, r5
 800d140:	f000 fd2e 	bl	800dba0 <_fflush_r>
 800d144:	2800      	cmp	r0, #0
 800d146:	d0d9      	beq.n	800d0fc <__swbuf_r+0x2e>
 800d148:	e7d6      	b.n	800d0f8 <__swbuf_r+0x2a>
	...

0800d14c <__swsetup_r>:
 800d14c:	b538      	push	{r3, r4, r5, lr}
 800d14e:	4b29      	ldr	r3, [pc, #164]	@ (800d1f4 <__swsetup_r+0xa8>)
 800d150:	4605      	mov	r5, r0
 800d152:	6818      	ldr	r0, [r3, #0]
 800d154:	460c      	mov	r4, r1
 800d156:	b118      	cbz	r0, 800d160 <__swsetup_r+0x14>
 800d158:	6a03      	ldr	r3, [r0, #32]
 800d15a:	b90b      	cbnz	r3, 800d160 <__swsetup_r+0x14>
 800d15c:	f7ff ff2c 	bl	800cfb8 <__sinit>
 800d160:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d164:	0719      	lsls	r1, r3, #28
 800d166:	d422      	bmi.n	800d1ae <__swsetup_r+0x62>
 800d168:	06da      	lsls	r2, r3, #27
 800d16a:	d407      	bmi.n	800d17c <__swsetup_r+0x30>
 800d16c:	2209      	movs	r2, #9
 800d16e:	602a      	str	r2, [r5, #0]
 800d170:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d174:	81a3      	strh	r3, [r4, #12]
 800d176:	f04f 30ff 	mov.w	r0, #4294967295
 800d17a:	e033      	b.n	800d1e4 <__swsetup_r+0x98>
 800d17c:	0758      	lsls	r0, r3, #29
 800d17e:	d512      	bpl.n	800d1a6 <__swsetup_r+0x5a>
 800d180:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d182:	b141      	cbz	r1, 800d196 <__swsetup_r+0x4a>
 800d184:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d188:	4299      	cmp	r1, r3
 800d18a:	d002      	beq.n	800d192 <__swsetup_r+0x46>
 800d18c:	4628      	mov	r0, r5
 800d18e:	f000 f8bd 	bl	800d30c <_free_r>
 800d192:	2300      	movs	r3, #0
 800d194:	6363      	str	r3, [r4, #52]	@ 0x34
 800d196:	89a3      	ldrh	r3, [r4, #12]
 800d198:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d19c:	81a3      	strh	r3, [r4, #12]
 800d19e:	2300      	movs	r3, #0
 800d1a0:	6063      	str	r3, [r4, #4]
 800d1a2:	6923      	ldr	r3, [r4, #16]
 800d1a4:	6023      	str	r3, [r4, #0]
 800d1a6:	89a3      	ldrh	r3, [r4, #12]
 800d1a8:	f043 0308 	orr.w	r3, r3, #8
 800d1ac:	81a3      	strh	r3, [r4, #12]
 800d1ae:	6923      	ldr	r3, [r4, #16]
 800d1b0:	b94b      	cbnz	r3, 800d1c6 <__swsetup_r+0x7a>
 800d1b2:	89a3      	ldrh	r3, [r4, #12]
 800d1b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d1b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d1bc:	d003      	beq.n	800d1c6 <__swsetup_r+0x7a>
 800d1be:	4621      	mov	r1, r4
 800d1c0:	4628      	mov	r0, r5
 800d1c2:	f000 fd3b 	bl	800dc3c <__smakebuf_r>
 800d1c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1ca:	f013 0201 	ands.w	r2, r3, #1
 800d1ce:	d00a      	beq.n	800d1e6 <__swsetup_r+0x9a>
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	60a2      	str	r2, [r4, #8]
 800d1d4:	6962      	ldr	r2, [r4, #20]
 800d1d6:	4252      	negs	r2, r2
 800d1d8:	61a2      	str	r2, [r4, #24]
 800d1da:	6922      	ldr	r2, [r4, #16]
 800d1dc:	b942      	cbnz	r2, 800d1f0 <__swsetup_r+0xa4>
 800d1de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d1e2:	d1c5      	bne.n	800d170 <__swsetup_r+0x24>
 800d1e4:	bd38      	pop	{r3, r4, r5, pc}
 800d1e6:	0799      	lsls	r1, r3, #30
 800d1e8:	bf58      	it	pl
 800d1ea:	6962      	ldrpl	r2, [r4, #20]
 800d1ec:	60a2      	str	r2, [r4, #8]
 800d1ee:	e7f4      	b.n	800d1da <__swsetup_r+0x8e>
 800d1f0:	2000      	movs	r0, #0
 800d1f2:	e7f7      	b.n	800d1e4 <__swsetup_r+0x98>
 800d1f4:	24000038 	.word	0x24000038

0800d1f8 <memset>:
 800d1f8:	4402      	add	r2, r0
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	4293      	cmp	r3, r2
 800d1fe:	d100      	bne.n	800d202 <memset+0xa>
 800d200:	4770      	bx	lr
 800d202:	f803 1b01 	strb.w	r1, [r3], #1
 800d206:	e7f9      	b.n	800d1fc <memset+0x4>

0800d208 <_close_r>:
 800d208:	b538      	push	{r3, r4, r5, lr}
 800d20a:	4d06      	ldr	r5, [pc, #24]	@ (800d224 <_close_r+0x1c>)
 800d20c:	2300      	movs	r3, #0
 800d20e:	4604      	mov	r4, r0
 800d210:	4608      	mov	r0, r1
 800d212:	602b      	str	r3, [r5, #0]
 800d214:	f7f4 fb30 	bl	8001878 <_close>
 800d218:	1c43      	adds	r3, r0, #1
 800d21a:	d102      	bne.n	800d222 <_close_r+0x1a>
 800d21c:	682b      	ldr	r3, [r5, #0]
 800d21e:	b103      	cbz	r3, 800d222 <_close_r+0x1a>
 800d220:	6023      	str	r3, [r4, #0]
 800d222:	bd38      	pop	{r3, r4, r5, pc}
 800d224:	240004dc 	.word	0x240004dc

0800d228 <_lseek_r>:
 800d228:	b538      	push	{r3, r4, r5, lr}
 800d22a:	4d07      	ldr	r5, [pc, #28]	@ (800d248 <_lseek_r+0x20>)
 800d22c:	4604      	mov	r4, r0
 800d22e:	4608      	mov	r0, r1
 800d230:	4611      	mov	r1, r2
 800d232:	2200      	movs	r2, #0
 800d234:	602a      	str	r2, [r5, #0]
 800d236:	461a      	mov	r2, r3
 800d238:	f7f4 fb45 	bl	80018c6 <_lseek>
 800d23c:	1c43      	adds	r3, r0, #1
 800d23e:	d102      	bne.n	800d246 <_lseek_r+0x1e>
 800d240:	682b      	ldr	r3, [r5, #0]
 800d242:	b103      	cbz	r3, 800d246 <_lseek_r+0x1e>
 800d244:	6023      	str	r3, [r4, #0]
 800d246:	bd38      	pop	{r3, r4, r5, pc}
 800d248:	240004dc 	.word	0x240004dc

0800d24c <_read_r>:
 800d24c:	b538      	push	{r3, r4, r5, lr}
 800d24e:	4d07      	ldr	r5, [pc, #28]	@ (800d26c <_read_r+0x20>)
 800d250:	4604      	mov	r4, r0
 800d252:	4608      	mov	r0, r1
 800d254:	4611      	mov	r1, r2
 800d256:	2200      	movs	r2, #0
 800d258:	602a      	str	r2, [r5, #0]
 800d25a:	461a      	mov	r2, r3
 800d25c:	f7f4 fad3 	bl	8001806 <_read>
 800d260:	1c43      	adds	r3, r0, #1
 800d262:	d102      	bne.n	800d26a <_read_r+0x1e>
 800d264:	682b      	ldr	r3, [r5, #0]
 800d266:	b103      	cbz	r3, 800d26a <_read_r+0x1e>
 800d268:	6023      	str	r3, [r4, #0]
 800d26a:	bd38      	pop	{r3, r4, r5, pc}
 800d26c:	240004dc 	.word	0x240004dc

0800d270 <_write_r>:
 800d270:	b538      	push	{r3, r4, r5, lr}
 800d272:	4d07      	ldr	r5, [pc, #28]	@ (800d290 <_write_r+0x20>)
 800d274:	4604      	mov	r4, r0
 800d276:	4608      	mov	r0, r1
 800d278:	4611      	mov	r1, r2
 800d27a:	2200      	movs	r2, #0
 800d27c:	602a      	str	r2, [r5, #0]
 800d27e:	461a      	mov	r2, r3
 800d280:	f7f4 fade 	bl	8001840 <_write>
 800d284:	1c43      	adds	r3, r0, #1
 800d286:	d102      	bne.n	800d28e <_write_r+0x1e>
 800d288:	682b      	ldr	r3, [r5, #0]
 800d28a:	b103      	cbz	r3, 800d28e <_write_r+0x1e>
 800d28c:	6023      	str	r3, [r4, #0]
 800d28e:	bd38      	pop	{r3, r4, r5, pc}
 800d290:	240004dc 	.word	0x240004dc

0800d294 <__errno>:
 800d294:	4b01      	ldr	r3, [pc, #4]	@ (800d29c <__errno+0x8>)
 800d296:	6818      	ldr	r0, [r3, #0]
 800d298:	4770      	bx	lr
 800d29a:	bf00      	nop
 800d29c:	24000038 	.word	0x24000038

0800d2a0 <__libc_init_array>:
 800d2a0:	b570      	push	{r4, r5, r6, lr}
 800d2a2:	4d0d      	ldr	r5, [pc, #52]	@ (800d2d8 <__libc_init_array+0x38>)
 800d2a4:	4c0d      	ldr	r4, [pc, #52]	@ (800d2dc <__libc_init_array+0x3c>)
 800d2a6:	1b64      	subs	r4, r4, r5
 800d2a8:	10a4      	asrs	r4, r4, #2
 800d2aa:	2600      	movs	r6, #0
 800d2ac:	42a6      	cmp	r6, r4
 800d2ae:	d109      	bne.n	800d2c4 <__libc_init_array+0x24>
 800d2b0:	4d0b      	ldr	r5, [pc, #44]	@ (800d2e0 <__libc_init_array+0x40>)
 800d2b2:	4c0c      	ldr	r4, [pc, #48]	@ (800d2e4 <__libc_init_array+0x44>)
 800d2b4:	f000 fd30 	bl	800dd18 <_init>
 800d2b8:	1b64      	subs	r4, r4, r5
 800d2ba:	10a4      	asrs	r4, r4, #2
 800d2bc:	2600      	movs	r6, #0
 800d2be:	42a6      	cmp	r6, r4
 800d2c0:	d105      	bne.n	800d2ce <__libc_init_array+0x2e>
 800d2c2:	bd70      	pop	{r4, r5, r6, pc}
 800d2c4:	f855 3b04 	ldr.w	r3, [r5], #4
 800d2c8:	4798      	blx	r3
 800d2ca:	3601      	adds	r6, #1
 800d2cc:	e7ee      	b.n	800d2ac <__libc_init_array+0xc>
 800d2ce:	f855 3b04 	ldr.w	r3, [r5], #4
 800d2d2:	4798      	blx	r3
 800d2d4:	3601      	adds	r6, #1
 800d2d6:	e7f2      	b.n	800d2be <__libc_init_array+0x1e>
 800d2d8:	0800ddc4 	.word	0x0800ddc4
 800d2dc:	0800ddc4 	.word	0x0800ddc4
 800d2e0:	0800ddc4 	.word	0x0800ddc4
 800d2e4:	0800ddc8 	.word	0x0800ddc8

0800d2e8 <__retarget_lock_init_recursive>:
 800d2e8:	4770      	bx	lr

0800d2ea <__retarget_lock_acquire_recursive>:
 800d2ea:	4770      	bx	lr

0800d2ec <__retarget_lock_release_recursive>:
 800d2ec:	4770      	bx	lr

0800d2ee <memcpy>:
 800d2ee:	440a      	add	r2, r1
 800d2f0:	4291      	cmp	r1, r2
 800d2f2:	f100 33ff 	add.w	r3, r0, #4294967295
 800d2f6:	d100      	bne.n	800d2fa <memcpy+0xc>
 800d2f8:	4770      	bx	lr
 800d2fa:	b510      	push	{r4, lr}
 800d2fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d300:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d304:	4291      	cmp	r1, r2
 800d306:	d1f9      	bne.n	800d2fc <memcpy+0xe>
 800d308:	bd10      	pop	{r4, pc}
	...

0800d30c <_free_r>:
 800d30c:	b538      	push	{r3, r4, r5, lr}
 800d30e:	4605      	mov	r5, r0
 800d310:	2900      	cmp	r1, #0
 800d312:	d041      	beq.n	800d398 <_free_r+0x8c>
 800d314:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d318:	1f0c      	subs	r4, r1, #4
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	bfb8      	it	lt
 800d31e:	18e4      	addlt	r4, r4, r3
 800d320:	f000 f8e0 	bl	800d4e4 <__malloc_lock>
 800d324:	4a1d      	ldr	r2, [pc, #116]	@ (800d39c <_free_r+0x90>)
 800d326:	6813      	ldr	r3, [r2, #0]
 800d328:	b933      	cbnz	r3, 800d338 <_free_r+0x2c>
 800d32a:	6063      	str	r3, [r4, #4]
 800d32c:	6014      	str	r4, [r2, #0]
 800d32e:	4628      	mov	r0, r5
 800d330:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d334:	f000 b8dc 	b.w	800d4f0 <__malloc_unlock>
 800d338:	42a3      	cmp	r3, r4
 800d33a:	d908      	bls.n	800d34e <_free_r+0x42>
 800d33c:	6820      	ldr	r0, [r4, #0]
 800d33e:	1821      	adds	r1, r4, r0
 800d340:	428b      	cmp	r3, r1
 800d342:	bf01      	itttt	eq
 800d344:	6819      	ldreq	r1, [r3, #0]
 800d346:	685b      	ldreq	r3, [r3, #4]
 800d348:	1809      	addeq	r1, r1, r0
 800d34a:	6021      	streq	r1, [r4, #0]
 800d34c:	e7ed      	b.n	800d32a <_free_r+0x1e>
 800d34e:	461a      	mov	r2, r3
 800d350:	685b      	ldr	r3, [r3, #4]
 800d352:	b10b      	cbz	r3, 800d358 <_free_r+0x4c>
 800d354:	42a3      	cmp	r3, r4
 800d356:	d9fa      	bls.n	800d34e <_free_r+0x42>
 800d358:	6811      	ldr	r1, [r2, #0]
 800d35a:	1850      	adds	r0, r2, r1
 800d35c:	42a0      	cmp	r0, r4
 800d35e:	d10b      	bne.n	800d378 <_free_r+0x6c>
 800d360:	6820      	ldr	r0, [r4, #0]
 800d362:	4401      	add	r1, r0
 800d364:	1850      	adds	r0, r2, r1
 800d366:	4283      	cmp	r3, r0
 800d368:	6011      	str	r1, [r2, #0]
 800d36a:	d1e0      	bne.n	800d32e <_free_r+0x22>
 800d36c:	6818      	ldr	r0, [r3, #0]
 800d36e:	685b      	ldr	r3, [r3, #4]
 800d370:	6053      	str	r3, [r2, #4]
 800d372:	4408      	add	r0, r1
 800d374:	6010      	str	r0, [r2, #0]
 800d376:	e7da      	b.n	800d32e <_free_r+0x22>
 800d378:	d902      	bls.n	800d380 <_free_r+0x74>
 800d37a:	230c      	movs	r3, #12
 800d37c:	602b      	str	r3, [r5, #0]
 800d37e:	e7d6      	b.n	800d32e <_free_r+0x22>
 800d380:	6820      	ldr	r0, [r4, #0]
 800d382:	1821      	adds	r1, r4, r0
 800d384:	428b      	cmp	r3, r1
 800d386:	bf04      	itt	eq
 800d388:	6819      	ldreq	r1, [r3, #0]
 800d38a:	685b      	ldreq	r3, [r3, #4]
 800d38c:	6063      	str	r3, [r4, #4]
 800d38e:	bf04      	itt	eq
 800d390:	1809      	addeq	r1, r1, r0
 800d392:	6021      	streq	r1, [r4, #0]
 800d394:	6054      	str	r4, [r2, #4]
 800d396:	e7ca      	b.n	800d32e <_free_r+0x22>
 800d398:	bd38      	pop	{r3, r4, r5, pc}
 800d39a:	bf00      	nop
 800d39c:	240004e8 	.word	0x240004e8

0800d3a0 <sbrk_aligned>:
 800d3a0:	b570      	push	{r4, r5, r6, lr}
 800d3a2:	4e0f      	ldr	r6, [pc, #60]	@ (800d3e0 <sbrk_aligned+0x40>)
 800d3a4:	460c      	mov	r4, r1
 800d3a6:	6831      	ldr	r1, [r6, #0]
 800d3a8:	4605      	mov	r5, r0
 800d3aa:	b911      	cbnz	r1, 800d3b2 <sbrk_aligned+0x12>
 800d3ac:	f000 fca4 	bl	800dcf8 <_sbrk_r>
 800d3b0:	6030      	str	r0, [r6, #0]
 800d3b2:	4621      	mov	r1, r4
 800d3b4:	4628      	mov	r0, r5
 800d3b6:	f000 fc9f 	bl	800dcf8 <_sbrk_r>
 800d3ba:	1c43      	adds	r3, r0, #1
 800d3bc:	d103      	bne.n	800d3c6 <sbrk_aligned+0x26>
 800d3be:	f04f 34ff 	mov.w	r4, #4294967295
 800d3c2:	4620      	mov	r0, r4
 800d3c4:	bd70      	pop	{r4, r5, r6, pc}
 800d3c6:	1cc4      	adds	r4, r0, #3
 800d3c8:	f024 0403 	bic.w	r4, r4, #3
 800d3cc:	42a0      	cmp	r0, r4
 800d3ce:	d0f8      	beq.n	800d3c2 <sbrk_aligned+0x22>
 800d3d0:	1a21      	subs	r1, r4, r0
 800d3d2:	4628      	mov	r0, r5
 800d3d4:	f000 fc90 	bl	800dcf8 <_sbrk_r>
 800d3d8:	3001      	adds	r0, #1
 800d3da:	d1f2      	bne.n	800d3c2 <sbrk_aligned+0x22>
 800d3dc:	e7ef      	b.n	800d3be <sbrk_aligned+0x1e>
 800d3de:	bf00      	nop
 800d3e0:	240004e4 	.word	0x240004e4

0800d3e4 <_malloc_r>:
 800d3e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d3e8:	1ccd      	adds	r5, r1, #3
 800d3ea:	f025 0503 	bic.w	r5, r5, #3
 800d3ee:	3508      	adds	r5, #8
 800d3f0:	2d0c      	cmp	r5, #12
 800d3f2:	bf38      	it	cc
 800d3f4:	250c      	movcc	r5, #12
 800d3f6:	2d00      	cmp	r5, #0
 800d3f8:	4606      	mov	r6, r0
 800d3fa:	db01      	blt.n	800d400 <_malloc_r+0x1c>
 800d3fc:	42a9      	cmp	r1, r5
 800d3fe:	d904      	bls.n	800d40a <_malloc_r+0x26>
 800d400:	230c      	movs	r3, #12
 800d402:	6033      	str	r3, [r6, #0]
 800d404:	2000      	movs	r0, #0
 800d406:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d40a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d4e0 <_malloc_r+0xfc>
 800d40e:	f000 f869 	bl	800d4e4 <__malloc_lock>
 800d412:	f8d8 3000 	ldr.w	r3, [r8]
 800d416:	461c      	mov	r4, r3
 800d418:	bb44      	cbnz	r4, 800d46c <_malloc_r+0x88>
 800d41a:	4629      	mov	r1, r5
 800d41c:	4630      	mov	r0, r6
 800d41e:	f7ff ffbf 	bl	800d3a0 <sbrk_aligned>
 800d422:	1c43      	adds	r3, r0, #1
 800d424:	4604      	mov	r4, r0
 800d426:	d158      	bne.n	800d4da <_malloc_r+0xf6>
 800d428:	f8d8 4000 	ldr.w	r4, [r8]
 800d42c:	4627      	mov	r7, r4
 800d42e:	2f00      	cmp	r7, #0
 800d430:	d143      	bne.n	800d4ba <_malloc_r+0xd6>
 800d432:	2c00      	cmp	r4, #0
 800d434:	d04b      	beq.n	800d4ce <_malloc_r+0xea>
 800d436:	6823      	ldr	r3, [r4, #0]
 800d438:	4639      	mov	r1, r7
 800d43a:	4630      	mov	r0, r6
 800d43c:	eb04 0903 	add.w	r9, r4, r3
 800d440:	f000 fc5a 	bl	800dcf8 <_sbrk_r>
 800d444:	4581      	cmp	r9, r0
 800d446:	d142      	bne.n	800d4ce <_malloc_r+0xea>
 800d448:	6821      	ldr	r1, [r4, #0]
 800d44a:	1a6d      	subs	r5, r5, r1
 800d44c:	4629      	mov	r1, r5
 800d44e:	4630      	mov	r0, r6
 800d450:	f7ff ffa6 	bl	800d3a0 <sbrk_aligned>
 800d454:	3001      	adds	r0, #1
 800d456:	d03a      	beq.n	800d4ce <_malloc_r+0xea>
 800d458:	6823      	ldr	r3, [r4, #0]
 800d45a:	442b      	add	r3, r5
 800d45c:	6023      	str	r3, [r4, #0]
 800d45e:	f8d8 3000 	ldr.w	r3, [r8]
 800d462:	685a      	ldr	r2, [r3, #4]
 800d464:	bb62      	cbnz	r2, 800d4c0 <_malloc_r+0xdc>
 800d466:	f8c8 7000 	str.w	r7, [r8]
 800d46a:	e00f      	b.n	800d48c <_malloc_r+0xa8>
 800d46c:	6822      	ldr	r2, [r4, #0]
 800d46e:	1b52      	subs	r2, r2, r5
 800d470:	d420      	bmi.n	800d4b4 <_malloc_r+0xd0>
 800d472:	2a0b      	cmp	r2, #11
 800d474:	d917      	bls.n	800d4a6 <_malloc_r+0xc2>
 800d476:	1961      	adds	r1, r4, r5
 800d478:	42a3      	cmp	r3, r4
 800d47a:	6025      	str	r5, [r4, #0]
 800d47c:	bf18      	it	ne
 800d47e:	6059      	strne	r1, [r3, #4]
 800d480:	6863      	ldr	r3, [r4, #4]
 800d482:	bf08      	it	eq
 800d484:	f8c8 1000 	streq.w	r1, [r8]
 800d488:	5162      	str	r2, [r4, r5]
 800d48a:	604b      	str	r3, [r1, #4]
 800d48c:	4630      	mov	r0, r6
 800d48e:	f000 f82f 	bl	800d4f0 <__malloc_unlock>
 800d492:	f104 000b 	add.w	r0, r4, #11
 800d496:	1d23      	adds	r3, r4, #4
 800d498:	f020 0007 	bic.w	r0, r0, #7
 800d49c:	1ac2      	subs	r2, r0, r3
 800d49e:	bf1c      	itt	ne
 800d4a0:	1a1b      	subne	r3, r3, r0
 800d4a2:	50a3      	strne	r3, [r4, r2]
 800d4a4:	e7af      	b.n	800d406 <_malloc_r+0x22>
 800d4a6:	6862      	ldr	r2, [r4, #4]
 800d4a8:	42a3      	cmp	r3, r4
 800d4aa:	bf0c      	ite	eq
 800d4ac:	f8c8 2000 	streq.w	r2, [r8]
 800d4b0:	605a      	strne	r2, [r3, #4]
 800d4b2:	e7eb      	b.n	800d48c <_malloc_r+0xa8>
 800d4b4:	4623      	mov	r3, r4
 800d4b6:	6864      	ldr	r4, [r4, #4]
 800d4b8:	e7ae      	b.n	800d418 <_malloc_r+0x34>
 800d4ba:	463c      	mov	r4, r7
 800d4bc:	687f      	ldr	r7, [r7, #4]
 800d4be:	e7b6      	b.n	800d42e <_malloc_r+0x4a>
 800d4c0:	461a      	mov	r2, r3
 800d4c2:	685b      	ldr	r3, [r3, #4]
 800d4c4:	42a3      	cmp	r3, r4
 800d4c6:	d1fb      	bne.n	800d4c0 <_malloc_r+0xdc>
 800d4c8:	2300      	movs	r3, #0
 800d4ca:	6053      	str	r3, [r2, #4]
 800d4cc:	e7de      	b.n	800d48c <_malloc_r+0xa8>
 800d4ce:	230c      	movs	r3, #12
 800d4d0:	6033      	str	r3, [r6, #0]
 800d4d2:	4630      	mov	r0, r6
 800d4d4:	f000 f80c 	bl	800d4f0 <__malloc_unlock>
 800d4d8:	e794      	b.n	800d404 <_malloc_r+0x20>
 800d4da:	6005      	str	r5, [r0, #0]
 800d4dc:	e7d6      	b.n	800d48c <_malloc_r+0xa8>
 800d4de:	bf00      	nop
 800d4e0:	240004e8 	.word	0x240004e8

0800d4e4 <__malloc_lock>:
 800d4e4:	4801      	ldr	r0, [pc, #4]	@ (800d4ec <__malloc_lock+0x8>)
 800d4e6:	f7ff bf00 	b.w	800d2ea <__retarget_lock_acquire_recursive>
 800d4ea:	bf00      	nop
 800d4ec:	240004e0 	.word	0x240004e0

0800d4f0 <__malloc_unlock>:
 800d4f0:	4801      	ldr	r0, [pc, #4]	@ (800d4f8 <__malloc_unlock+0x8>)
 800d4f2:	f7ff befb 	b.w	800d2ec <__retarget_lock_release_recursive>
 800d4f6:	bf00      	nop
 800d4f8:	240004e0 	.word	0x240004e0

0800d4fc <__sfputc_r>:
 800d4fc:	6893      	ldr	r3, [r2, #8]
 800d4fe:	3b01      	subs	r3, #1
 800d500:	2b00      	cmp	r3, #0
 800d502:	b410      	push	{r4}
 800d504:	6093      	str	r3, [r2, #8]
 800d506:	da08      	bge.n	800d51a <__sfputc_r+0x1e>
 800d508:	6994      	ldr	r4, [r2, #24]
 800d50a:	42a3      	cmp	r3, r4
 800d50c:	db01      	blt.n	800d512 <__sfputc_r+0x16>
 800d50e:	290a      	cmp	r1, #10
 800d510:	d103      	bne.n	800d51a <__sfputc_r+0x1e>
 800d512:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d516:	f7ff bdda 	b.w	800d0ce <__swbuf_r>
 800d51a:	6813      	ldr	r3, [r2, #0]
 800d51c:	1c58      	adds	r0, r3, #1
 800d51e:	6010      	str	r0, [r2, #0]
 800d520:	7019      	strb	r1, [r3, #0]
 800d522:	4608      	mov	r0, r1
 800d524:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d528:	4770      	bx	lr

0800d52a <__sfputs_r>:
 800d52a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d52c:	4606      	mov	r6, r0
 800d52e:	460f      	mov	r7, r1
 800d530:	4614      	mov	r4, r2
 800d532:	18d5      	adds	r5, r2, r3
 800d534:	42ac      	cmp	r4, r5
 800d536:	d101      	bne.n	800d53c <__sfputs_r+0x12>
 800d538:	2000      	movs	r0, #0
 800d53a:	e007      	b.n	800d54c <__sfputs_r+0x22>
 800d53c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d540:	463a      	mov	r2, r7
 800d542:	4630      	mov	r0, r6
 800d544:	f7ff ffda 	bl	800d4fc <__sfputc_r>
 800d548:	1c43      	adds	r3, r0, #1
 800d54a:	d1f3      	bne.n	800d534 <__sfputs_r+0xa>
 800d54c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d550 <_vfiprintf_r>:
 800d550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d554:	460d      	mov	r5, r1
 800d556:	b09d      	sub	sp, #116	@ 0x74
 800d558:	4614      	mov	r4, r2
 800d55a:	4698      	mov	r8, r3
 800d55c:	4606      	mov	r6, r0
 800d55e:	b118      	cbz	r0, 800d568 <_vfiprintf_r+0x18>
 800d560:	6a03      	ldr	r3, [r0, #32]
 800d562:	b90b      	cbnz	r3, 800d568 <_vfiprintf_r+0x18>
 800d564:	f7ff fd28 	bl	800cfb8 <__sinit>
 800d568:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d56a:	07d9      	lsls	r1, r3, #31
 800d56c:	d405      	bmi.n	800d57a <_vfiprintf_r+0x2a>
 800d56e:	89ab      	ldrh	r3, [r5, #12]
 800d570:	059a      	lsls	r2, r3, #22
 800d572:	d402      	bmi.n	800d57a <_vfiprintf_r+0x2a>
 800d574:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d576:	f7ff feb8 	bl	800d2ea <__retarget_lock_acquire_recursive>
 800d57a:	89ab      	ldrh	r3, [r5, #12]
 800d57c:	071b      	lsls	r3, r3, #28
 800d57e:	d501      	bpl.n	800d584 <_vfiprintf_r+0x34>
 800d580:	692b      	ldr	r3, [r5, #16]
 800d582:	b99b      	cbnz	r3, 800d5ac <_vfiprintf_r+0x5c>
 800d584:	4629      	mov	r1, r5
 800d586:	4630      	mov	r0, r6
 800d588:	f7ff fde0 	bl	800d14c <__swsetup_r>
 800d58c:	b170      	cbz	r0, 800d5ac <_vfiprintf_r+0x5c>
 800d58e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d590:	07dc      	lsls	r4, r3, #31
 800d592:	d504      	bpl.n	800d59e <_vfiprintf_r+0x4e>
 800d594:	f04f 30ff 	mov.w	r0, #4294967295
 800d598:	b01d      	add	sp, #116	@ 0x74
 800d59a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d59e:	89ab      	ldrh	r3, [r5, #12]
 800d5a0:	0598      	lsls	r0, r3, #22
 800d5a2:	d4f7      	bmi.n	800d594 <_vfiprintf_r+0x44>
 800d5a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d5a6:	f7ff fea1 	bl	800d2ec <__retarget_lock_release_recursive>
 800d5aa:	e7f3      	b.n	800d594 <_vfiprintf_r+0x44>
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	9309      	str	r3, [sp, #36]	@ 0x24
 800d5b0:	2320      	movs	r3, #32
 800d5b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d5b6:	f8cd 800c 	str.w	r8, [sp, #12]
 800d5ba:	2330      	movs	r3, #48	@ 0x30
 800d5bc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d76c <_vfiprintf_r+0x21c>
 800d5c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d5c4:	f04f 0901 	mov.w	r9, #1
 800d5c8:	4623      	mov	r3, r4
 800d5ca:	469a      	mov	sl, r3
 800d5cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d5d0:	b10a      	cbz	r2, 800d5d6 <_vfiprintf_r+0x86>
 800d5d2:	2a25      	cmp	r2, #37	@ 0x25
 800d5d4:	d1f9      	bne.n	800d5ca <_vfiprintf_r+0x7a>
 800d5d6:	ebba 0b04 	subs.w	fp, sl, r4
 800d5da:	d00b      	beq.n	800d5f4 <_vfiprintf_r+0xa4>
 800d5dc:	465b      	mov	r3, fp
 800d5de:	4622      	mov	r2, r4
 800d5e0:	4629      	mov	r1, r5
 800d5e2:	4630      	mov	r0, r6
 800d5e4:	f7ff ffa1 	bl	800d52a <__sfputs_r>
 800d5e8:	3001      	adds	r0, #1
 800d5ea:	f000 80a7 	beq.w	800d73c <_vfiprintf_r+0x1ec>
 800d5ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d5f0:	445a      	add	r2, fp
 800d5f2:	9209      	str	r2, [sp, #36]	@ 0x24
 800d5f4:	f89a 3000 	ldrb.w	r3, [sl]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	f000 809f 	beq.w	800d73c <_vfiprintf_r+0x1ec>
 800d5fe:	2300      	movs	r3, #0
 800d600:	f04f 32ff 	mov.w	r2, #4294967295
 800d604:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d608:	f10a 0a01 	add.w	sl, sl, #1
 800d60c:	9304      	str	r3, [sp, #16]
 800d60e:	9307      	str	r3, [sp, #28]
 800d610:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d614:	931a      	str	r3, [sp, #104]	@ 0x68
 800d616:	4654      	mov	r4, sl
 800d618:	2205      	movs	r2, #5
 800d61a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d61e:	4853      	ldr	r0, [pc, #332]	@ (800d76c <_vfiprintf_r+0x21c>)
 800d620:	f7f2 fe5e 	bl	80002e0 <memchr>
 800d624:	9a04      	ldr	r2, [sp, #16]
 800d626:	b9d8      	cbnz	r0, 800d660 <_vfiprintf_r+0x110>
 800d628:	06d1      	lsls	r1, r2, #27
 800d62a:	bf44      	itt	mi
 800d62c:	2320      	movmi	r3, #32
 800d62e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d632:	0713      	lsls	r3, r2, #28
 800d634:	bf44      	itt	mi
 800d636:	232b      	movmi	r3, #43	@ 0x2b
 800d638:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d63c:	f89a 3000 	ldrb.w	r3, [sl]
 800d640:	2b2a      	cmp	r3, #42	@ 0x2a
 800d642:	d015      	beq.n	800d670 <_vfiprintf_r+0x120>
 800d644:	9a07      	ldr	r2, [sp, #28]
 800d646:	4654      	mov	r4, sl
 800d648:	2000      	movs	r0, #0
 800d64a:	f04f 0c0a 	mov.w	ip, #10
 800d64e:	4621      	mov	r1, r4
 800d650:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d654:	3b30      	subs	r3, #48	@ 0x30
 800d656:	2b09      	cmp	r3, #9
 800d658:	d94b      	bls.n	800d6f2 <_vfiprintf_r+0x1a2>
 800d65a:	b1b0      	cbz	r0, 800d68a <_vfiprintf_r+0x13a>
 800d65c:	9207      	str	r2, [sp, #28]
 800d65e:	e014      	b.n	800d68a <_vfiprintf_r+0x13a>
 800d660:	eba0 0308 	sub.w	r3, r0, r8
 800d664:	fa09 f303 	lsl.w	r3, r9, r3
 800d668:	4313      	orrs	r3, r2
 800d66a:	9304      	str	r3, [sp, #16]
 800d66c:	46a2      	mov	sl, r4
 800d66e:	e7d2      	b.n	800d616 <_vfiprintf_r+0xc6>
 800d670:	9b03      	ldr	r3, [sp, #12]
 800d672:	1d19      	adds	r1, r3, #4
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	9103      	str	r1, [sp, #12]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	bfbb      	ittet	lt
 800d67c:	425b      	neglt	r3, r3
 800d67e:	f042 0202 	orrlt.w	r2, r2, #2
 800d682:	9307      	strge	r3, [sp, #28]
 800d684:	9307      	strlt	r3, [sp, #28]
 800d686:	bfb8      	it	lt
 800d688:	9204      	strlt	r2, [sp, #16]
 800d68a:	7823      	ldrb	r3, [r4, #0]
 800d68c:	2b2e      	cmp	r3, #46	@ 0x2e
 800d68e:	d10a      	bne.n	800d6a6 <_vfiprintf_r+0x156>
 800d690:	7863      	ldrb	r3, [r4, #1]
 800d692:	2b2a      	cmp	r3, #42	@ 0x2a
 800d694:	d132      	bne.n	800d6fc <_vfiprintf_r+0x1ac>
 800d696:	9b03      	ldr	r3, [sp, #12]
 800d698:	1d1a      	adds	r2, r3, #4
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	9203      	str	r2, [sp, #12]
 800d69e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d6a2:	3402      	adds	r4, #2
 800d6a4:	9305      	str	r3, [sp, #20]
 800d6a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d77c <_vfiprintf_r+0x22c>
 800d6aa:	7821      	ldrb	r1, [r4, #0]
 800d6ac:	2203      	movs	r2, #3
 800d6ae:	4650      	mov	r0, sl
 800d6b0:	f7f2 fe16 	bl	80002e0 <memchr>
 800d6b4:	b138      	cbz	r0, 800d6c6 <_vfiprintf_r+0x176>
 800d6b6:	9b04      	ldr	r3, [sp, #16]
 800d6b8:	eba0 000a 	sub.w	r0, r0, sl
 800d6bc:	2240      	movs	r2, #64	@ 0x40
 800d6be:	4082      	lsls	r2, r0
 800d6c0:	4313      	orrs	r3, r2
 800d6c2:	3401      	adds	r4, #1
 800d6c4:	9304      	str	r3, [sp, #16]
 800d6c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6ca:	4829      	ldr	r0, [pc, #164]	@ (800d770 <_vfiprintf_r+0x220>)
 800d6cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d6d0:	2206      	movs	r2, #6
 800d6d2:	f7f2 fe05 	bl	80002e0 <memchr>
 800d6d6:	2800      	cmp	r0, #0
 800d6d8:	d03f      	beq.n	800d75a <_vfiprintf_r+0x20a>
 800d6da:	4b26      	ldr	r3, [pc, #152]	@ (800d774 <_vfiprintf_r+0x224>)
 800d6dc:	bb1b      	cbnz	r3, 800d726 <_vfiprintf_r+0x1d6>
 800d6de:	9b03      	ldr	r3, [sp, #12]
 800d6e0:	3307      	adds	r3, #7
 800d6e2:	f023 0307 	bic.w	r3, r3, #7
 800d6e6:	3308      	adds	r3, #8
 800d6e8:	9303      	str	r3, [sp, #12]
 800d6ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6ec:	443b      	add	r3, r7
 800d6ee:	9309      	str	r3, [sp, #36]	@ 0x24
 800d6f0:	e76a      	b.n	800d5c8 <_vfiprintf_r+0x78>
 800d6f2:	fb0c 3202 	mla	r2, ip, r2, r3
 800d6f6:	460c      	mov	r4, r1
 800d6f8:	2001      	movs	r0, #1
 800d6fa:	e7a8      	b.n	800d64e <_vfiprintf_r+0xfe>
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	3401      	adds	r4, #1
 800d700:	9305      	str	r3, [sp, #20]
 800d702:	4619      	mov	r1, r3
 800d704:	f04f 0c0a 	mov.w	ip, #10
 800d708:	4620      	mov	r0, r4
 800d70a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d70e:	3a30      	subs	r2, #48	@ 0x30
 800d710:	2a09      	cmp	r2, #9
 800d712:	d903      	bls.n	800d71c <_vfiprintf_r+0x1cc>
 800d714:	2b00      	cmp	r3, #0
 800d716:	d0c6      	beq.n	800d6a6 <_vfiprintf_r+0x156>
 800d718:	9105      	str	r1, [sp, #20]
 800d71a:	e7c4      	b.n	800d6a6 <_vfiprintf_r+0x156>
 800d71c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d720:	4604      	mov	r4, r0
 800d722:	2301      	movs	r3, #1
 800d724:	e7f0      	b.n	800d708 <_vfiprintf_r+0x1b8>
 800d726:	ab03      	add	r3, sp, #12
 800d728:	9300      	str	r3, [sp, #0]
 800d72a:	462a      	mov	r2, r5
 800d72c:	4b12      	ldr	r3, [pc, #72]	@ (800d778 <_vfiprintf_r+0x228>)
 800d72e:	a904      	add	r1, sp, #16
 800d730:	4630      	mov	r0, r6
 800d732:	f3af 8000 	nop.w
 800d736:	4607      	mov	r7, r0
 800d738:	1c78      	adds	r0, r7, #1
 800d73a:	d1d6      	bne.n	800d6ea <_vfiprintf_r+0x19a>
 800d73c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d73e:	07d9      	lsls	r1, r3, #31
 800d740:	d405      	bmi.n	800d74e <_vfiprintf_r+0x1fe>
 800d742:	89ab      	ldrh	r3, [r5, #12]
 800d744:	059a      	lsls	r2, r3, #22
 800d746:	d402      	bmi.n	800d74e <_vfiprintf_r+0x1fe>
 800d748:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d74a:	f7ff fdcf 	bl	800d2ec <__retarget_lock_release_recursive>
 800d74e:	89ab      	ldrh	r3, [r5, #12]
 800d750:	065b      	lsls	r3, r3, #25
 800d752:	f53f af1f 	bmi.w	800d594 <_vfiprintf_r+0x44>
 800d756:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d758:	e71e      	b.n	800d598 <_vfiprintf_r+0x48>
 800d75a:	ab03      	add	r3, sp, #12
 800d75c:	9300      	str	r3, [sp, #0]
 800d75e:	462a      	mov	r2, r5
 800d760:	4b05      	ldr	r3, [pc, #20]	@ (800d778 <_vfiprintf_r+0x228>)
 800d762:	a904      	add	r1, sp, #16
 800d764:	4630      	mov	r0, r6
 800d766:	f000 f879 	bl	800d85c <_printf_i>
 800d76a:	e7e4      	b.n	800d736 <_vfiprintf_r+0x1e6>
 800d76c:	0800dd88 	.word	0x0800dd88
 800d770:	0800dd92 	.word	0x0800dd92
 800d774:	00000000 	.word	0x00000000
 800d778:	0800d52b 	.word	0x0800d52b
 800d77c:	0800dd8e 	.word	0x0800dd8e

0800d780 <_printf_common>:
 800d780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d784:	4616      	mov	r6, r2
 800d786:	4698      	mov	r8, r3
 800d788:	688a      	ldr	r2, [r1, #8]
 800d78a:	690b      	ldr	r3, [r1, #16]
 800d78c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d790:	4293      	cmp	r3, r2
 800d792:	bfb8      	it	lt
 800d794:	4613      	movlt	r3, r2
 800d796:	6033      	str	r3, [r6, #0]
 800d798:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d79c:	4607      	mov	r7, r0
 800d79e:	460c      	mov	r4, r1
 800d7a0:	b10a      	cbz	r2, 800d7a6 <_printf_common+0x26>
 800d7a2:	3301      	adds	r3, #1
 800d7a4:	6033      	str	r3, [r6, #0]
 800d7a6:	6823      	ldr	r3, [r4, #0]
 800d7a8:	0699      	lsls	r1, r3, #26
 800d7aa:	bf42      	ittt	mi
 800d7ac:	6833      	ldrmi	r3, [r6, #0]
 800d7ae:	3302      	addmi	r3, #2
 800d7b0:	6033      	strmi	r3, [r6, #0]
 800d7b2:	6825      	ldr	r5, [r4, #0]
 800d7b4:	f015 0506 	ands.w	r5, r5, #6
 800d7b8:	d106      	bne.n	800d7c8 <_printf_common+0x48>
 800d7ba:	f104 0a19 	add.w	sl, r4, #25
 800d7be:	68e3      	ldr	r3, [r4, #12]
 800d7c0:	6832      	ldr	r2, [r6, #0]
 800d7c2:	1a9b      	subs	r3, r3, r2
 800d7c4:	42ab      	cmp	r3, r5
 800d7c6:	dc26      	bgt.n	800d816 <_printf_common+0x96>
 800d7c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d7cc:	6822      	ldr	r2, [r4, #0]
 800d7ce:	3b00      	subs	r3, #0
 800d7d0:	bf18      	it	ne
 800d7d2:	2301      	movne	r3, #1
 800d7d4:	0692      	lsls	r2, r2, #26
 800d7d6:	d42b      	bmi.n	800d830 <_printf_common+0xb0>
 800d7d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d7dc:	4641      	mov	r1, r8
 800d7de:	4638      	mov	r0, r7
 800d7e0:	47c8      	blx	r9
 800d7e2:	3001      	adds	r0, #1
 800d7e4:	d01e      	beq.n	800d824 <_printf_common+0xa4>
 800d7e6:	6823      	ldr	r3, [r4, #0]
 800d7e8:	6922      	ldr	r2, [r4, #16]
 800d7ea:	f003 0306 	and.w	r3, r3, #6
 800d7ee:	2b04      	cmp	r3, #4
 800d7f0:	bf02      	ittt	eq
 800d7f2:	68e5      	ldreq	r5, [r4, #12]
 800d7f4:	6833      	ldreq	r3, [r6, #0]
 800d7f6:	1aed      	subeq	r5, r5, r3
 800d7f8:	68a3      	ldr	r3, [r4, #8]
 800d7fa:	bf0c      	ite	eq
 800d7fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d800:	2500      	movne	r5, #0
 800d802:	4293      	cmp	r3, r2
 800d804:	bfc4      	itt	gt
 800d806:	1a9b      	subgt	r3, r3, r2
 800d808:	18ed      	addgt	r5, r5, r3
 800d80a:	2600      	movs	r6, #0
 800d80c:	341a      	adds	r4, #26
 800d80e:	42b5      	cmp	r5, r6
 800d810:	d11a      	bne.n	800d848 <_printf_common+0xc8>
 800d812:	2000      	movs	r0, #0
 800d814:	e008      	b.n	800d828 <_printf_common+0xa8>
 800d816:	2301      	movs	r3, #1
 800d818:	4652      	mov	r2, sl
 800d81a:	4641      	mov	r1, r8
 800d81c:	4638      	mov	r0, r7
 800d81e:	47c8      	blx	r9
 800d820:	3001      	adds	r0, #1
 800d822:	d103      	bne.n	800d82c <_printf_common+0xac>
 800d824:	f04f 30ff 	mov.w	r0, #4294967295
 800d828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d82c:	3501      	adds	r5, #1
 800d82e:	e7c6      	b.n	800d7be <_printf_common+0x3e>
 800d830:	18e1      	adds	r1, r4, r3
 800d832:	1c5a      	adds	r2, r3, #1
 800d834:	2030      	movs	r0, #48	@ 0x30
 800d836:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d83a:	4422      	add	r2, r4
 800d83c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d840:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d844:	3302      	adds	r3, #2
 800d846:	e7c7      	b.n	800d7d8 <_printf_common+0x58>
 800d848:	2301      	movs	r3, #1
 800d84a:	4622      	mov	r2, r4
 800d84c:	4641      	mov	r1, r8
 800d84e:	4638      	mov	r0, r7
 800d850:	47c8      	blx	r9
 800d852:	3001      	adds	r0, #1
 800d854:	d0e6      	beq.n	800d824 <_printf_common+0xa4>
 800d856:	3601      	adds	r6, #1
 800d858:	e7d9      	b.n	800d80e <_printf_common+0x8e>
	...

0800d85c <_printf_i>:
 800d85c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d860:	7e0f      	ldrb	r7, [r1, #24]
 800d862:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d864:	2f78      	cmp	r7, #120	@ 0x78
 800d866:	4691      	mov	r9, r2
 800d868:	4680      	mov	r8, r0
 800d86a:	460c      	mov	r4, r1
 800d86c:	469a      	mov	sl, r3
 800d86e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d872:	d807      	bhi.n	800d884 <_printf_i+0x28>
 800d874:	2f62      	cmp	r7, #98	@ 0x62
 800d876:	d80a      	bhi.n	800d88e <_printf_i+0x32>
 800d878:	2f00      	cmp	r7, #0
 800d87a:	f000 80d1 	beq.w	800da20 <_printf_i+0x1c4>
 800d87e:	2f58      	cmp	r7, #88	@ 0x58
 800d880:	f000 80b8 	beq.w	800d9f4 <_printf_i+0x198>
 800d884:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d888:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d88c:	e03a      	b.n	800d904 <_printf_i+0xa8>
 800d88e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d892:	2b15      	cmp	r3, #21
 800d894:	d8f6      	bhi.n	800d884 <_printf_i+0x28>
 800d896:	a101      	add	r1, pc, #4	@ (adr r1, 800d89c <_printf_i+0x40>)
 800d898:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d89c:	0800d8f5 	.word	0x0800d8f5
 800d8a0:	0800d909 	.word	0x0800d909
 800d8a4:	0800d885 	.word	0x0800d885
 800d8a8:	0800d885 	.word	0x0800d885
 800d8ac:	0800d885 	.word	0x0800d885
 800d8b0:	0800d885 	.word	0x0800d885
 800d8b4:	0800d909 	.word	0x0800d909
 800d8b8:	0800d885 	.word	0x0800d885
 800d8bc:	0800d885 	.word	0x0800d885
 800d8c0:	0800d885 	.word	0x0800d885
 800d8c4:	0800d885 	.word	0x0800d885
 800d8c8:	0800da07 	.word	0x0800da07
 800d8cc:	0800d933 	.word	0x0800d933
 800d8d0:	0800d9c1 	.word	0x0800d9c1
 800d8d4:	0800d885 	.word	0x0800d885
 800d8d8:	0800d885 	.word	0x0800d885
 800d8dc:	0800da29 	.word	0x0800da29
 800d8e0:	0800d885 	.word	0x0800d885
 800d8e4:	0800d933 	.word	0x0800d933
 800d8e8:	0800d885 	.word	0x0800d885
 800d8ec:	0800d885 	.word	0x0800d885
 800d8f0:	0800d9c9 	.word	0x0800d9c9
 800d8f4:	6833      	ldr	r3, [r6, #0]
 800d8f6:	1d1a      	adds	r2, r3, #4
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	6032      	str	r2, [r6, #0]
 800d8fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d900:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d904:	2301      	movs	r3, #1
 800d906:	e09c      	b.n	800da42 <_printf_i+0x1e6>
 800d908:	6833      	ldr	r3, [r6, #0]
 800d90a:	6820      	ldr	r0, [r4, #0]
 800d90c:	1d19      	adds	r1, r3, #4
 800d90e:	6031      	str	r1, [r6, #0]
 800d910:	0606      	lsls	r6, r0, #24
 800d912:	d501      	bpl.n	800d918 <_printf_i+0xbc>
 800d914:	681d      	ldr	r5, [r3, #0]
 800d916:	e003      	b.n	800d920 <_printf_i+0xc4>
 800d918:	0645      	lsls	r5, r0, #25
 800d91a:	d5fb      	bpl.n	800d914 <_printf_i+0xb8>
 800d91c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d920:	2d00      	cmp	r5, #0
 800d922:	da03      	bge.n	800d92c <_printf_i+0xd0>
 800d924:	232d      	movs	r3, #45	@ 0x2d
 800d926:	426d      	negs	r5, r5
 800d928:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d92c:	4858      	ldr	r0, [pc, #352]	@ (800da90 <_printf_i+0x234>)
 800d92e:	230a      	movs	r3, #10
 800d930:	e011      	b.n	800d956 <_printf_i+0xfa>
 800d932:	6821      	ldr	r1, [r4, #0]
 800d934:	6833      	ldr	r3, [r6, #0]
 800d936:	0608      	lsls	r0, r1, #24
 800d938:	f853 5b04 	ldr.w	r5, [r3], #4
 800d93c:	d402      	bmi.n	800d944 <_printf_i+0xe8>
 800d93e:	0649      	lsls	r1, r1, #25
 800d940:	bf48      	it	mi
 800d942:	b2ad      	uxthmi	r5, r5
 800d944:	2f6f      	cmp	r7, #111	@ 0x6f
 800d946:	4852      	ldr	r0, [pc, #328]	@ (800da90 <_printf_i+0x234>)
 800d948:	6033      	str	r3, [r6, #0]
 800d94a:	bf14      	ite	ne
 800d94c:	230a      	movne	r3, #10
 800d94e:	2308      	moveq	r3, #8
 800d950:	2100      	movs	r1, #0
 800d952:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d956:	6866      	ldr	r6, [r4, #4]
 800d958:	60a6      	str	r6, [r4, #8]
 800d95a:	2e00      	cmp	r6, #0
 800d95c:	db05      	blt.n	800d96a <_printf_i+0x10e>
 800d95e:	6821      	ldr	r1, [r4, #0]
 800d960:	432e      	orrs	r6, r5
 800d962:	f021 0104 	bic.w	r1, r1, #4
 800d966:	6021      	str	r1, [r4, #0]
 800d968:	d04b      	beq.n	800da02 <_printf_i+0x1a6>
 800d96a:	4616      	mov	r6, r2
 800d96c:	fbb5 f1f3 	udiv	r1, r5, r3
 800d970:	fb03 5711 	mls	r7, r3, r1, r5
 800d974:	5dc7      	ldrb	r7, [r0, r7]
 800d976:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d97a:	462f      	mov	r7, r5
 800d97c:	42bb      	cmp	r3, r7
 800d97e:	460d      	mov	r5, r1
 800d980:	d9f4      	bls.n	800d96c <_printf_i+0x110>
 800d982:	2b08      	cmp	r3, #8
 800d984:	d10b      	bne.n	800d99e <_printf_i+0x142>
 800d986:	6823      	ldr	r3, [r4, #0]
 800d988:	07df      	lsls	r7, r3, #31
 800d98a:	d508      	bpl.n	800d99e <_printf_i+0x142>
 800d98c:	6923      	ldr	r3, [r4, #16]
 800d98e:	6861      	ldr	r1, [r4, #4]
 800d990:	4299      	cmp	r1, r3
 800d992:	bfde      	ittt	le
 800d994:	2330      	movle	r3, #48	@ 0x30
 800d996:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d99a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d99e:	1b92      	subs	r2, r2, r6
 800d9a0:	6122      	str	r2, [r4, #16]
 800d9a2:	f8cd a000 	str.w	sl, [sp]
 800d9a6:	464b      	mov	r3, r9
 800d9a8:	aa03      	add	r2, sp, #12
 800d9aa:	4621      	mov	r1, r4
 800d9ac:	4640      	mov	r0, r8
 800d9ae:	f7ff fee7 	bl	800d780 <_printf_common>
 800d9b2:	3001      	adds	r0, #1
 800d9b4:	d14a      	bne.n	800da4c <_printf_i+0x1f0>
 800d9b6:	f04f 30ff 	mov.w	r0, #4294967295
 800d9ba:	b004      	add	sp, #16
 800d9bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9c0:	6823      	ldr	r3, [r4, #0]
 800d9c2:	f043 0320 	orr.w	r3, r3, #32
 800d9c6:	6023      	str	r3, [r4, #0]
 800d9c8:	4832      	ldr	r0, [pc, #200]	@ (800da94 <_printf_i+0x238>)
 800d9ca:	2778      	movs	r7, #120	@ 0x78
 800d9cc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d9d0:	6823      	ldr	r3, [r4, #0]
 800d9d2:	6831      	ldr	r1, [r6, #0]
 800d9d4:	061f      	lsls	r7, r3, #24
 800d9d6:	f851 5b04 	ldr.w	r5, [r1], #4
 800d9da:	d402      	bmi.n	800d9e2 <_printf_i+0x186>
 800d9dc:	065f      	lsls	r7, r3, #25
 800d9de:	bf48      	it	mi
 800d9e0:	b2ad      	uxthmi	r5, r5
 800d9e2:	6031      	str	r1, [r6, #0]
 800d9e4:	07d9      	lsls	r1, r3, #31
 800d9e6:	bf44      	itt	mi
 800d9e8:	f043 0320 	orrmi.w	r3, r3, #32
 800d9ec:	6023      	strmi	r3, [r4, #0]
 800d9ee:	b11d      	cbz	r5, 800d9f8 <_printf_i+0x19c>
 800d9f0:	2310      	movs	r3, #16
 800d9f2:	e7ad      	b.n	800d950 <_printf_i+0xf4>
 800d9f4:	4826      	ldr	r0, [pc, #152]	@ (800da90 <_printf_i+0x234>)
 800d9f6:	e7e9      	b.n	800d9cc <_printf_i+0x170>
 800d9f8:	6823      	ldr	r3, [r4, #0]
 800d9fa:	f023 0320 	bic.w	r3, r3, #32
 800d9fe:	6023      	str	r3, [r4, #0]
 800da00:	e7f6      	b.n	800d9f0 <_printf_i+0x194>
 800da02:	4616      	mov	r6, r2
 800da04:	e7bd      	b.n	800d982 <_printf_i+0x126>
 800da06:	6833      	ldr	r3, [r6, #0]
 800da08:	6825      	ldr	r5, [r4, #0]
 800da0a:	6961      	ldr	r1, [r4, #20]
 800da0c:	1d18      	adds	r0, r3, #4
 800da0e:	6030      	str	r0, [r6, #0]
 800da10:	062e      	lsls	r6, r5, #24
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	d501      	bpl.n	800da1a <_printf_i+0x1be>
 800da16:	6019      	str	r1, [r3, #0]
 800da18:	e002      	b.n	800da20 <_printf_i+0x1c4>
 800da1a:	0668      	lsls	r0, r5, #25
 800da1c:	d5fb      	bpl.n	800da16 <_printf_i+0x1ba>
 800da1e:	8019      	strh	r1, [r3, #0]
 800da20:	2300      	movs	r3, #0
 800da22:	6123      	str	r3, [r4, #16]
 800da24:	4616      	mov	r6, r2
 800da26:	e7bc      	b.n	800d9a2 <_printf_i+0x146>
 800da28:	6833      	ldr	r3, [r6, #0]
 800da2a:	1d1a      	adds	r2, r3, #4
 800da2c:	6032      	str	r2, [r6, #0]
 800da2e:	681e      	ldr	r6, [r3, #0]
 800da30:	6862      	ldr	r2, [r4, #4]
 800da32:	2100      	movs	r1, #0
 800da34:	4630      	mov	r0, r6
 800da36:	f7f2 fc53 	bl	80002e0 <memchr>
 800da3a:	b108      	cbz	r0, 800da40 <_printf_i+0x1e4>
 800da3c:	1b80      	subs	r0, r0, r6
 800da3e:	6060      	str	r0, [r4, #4]
 800da40:	6863      	ldr	r3, [r4, #4]
 800da42:	6123      	str	r3, [r4, #16]
 800da44:	2300      	movs	r3, #0
 800da46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800da4a:	e7aa      	b.n	800d9a2 <_printf_i+0x146>
 800da4c:	6923      	ldr	r3, [r4, #16]
 800da4e:	4632      	mov	r2, r6
 800da50:	4649      	mov	r1, r9
 800da52:	4640      	mov	r0, r8
 800da54:	47d0      	blx	sl
 800da56:	3001      	adds	r0, #1
 800da58:	d0ad      	beq.n	800d9b6 <_printf_i+0x15a>
 800da5a:	6823      	ldr	r3, [r4, #0]
 800da5c:	079b      	lsls	r3, r3, #30
 800da5e:	d413      	bmi.n	800da88 <_printf_i+0x22c>
 800da60:	68e0      	ldr	r0, [r4, #12]
 800da62:	9b03      	ldr	r3, [sp, #12]
 800da64:	4298      	cmp	r0, r3
 800da66:	bfb8      	it	lt
 800da68:	4618      	movlt	r0, r3
 800da6a:	e7a6      	b.n	800d9ba <_printf_i+0x15e>
 800da6c:	2301      	movs	r3, #1
 800da6e:	4632      	mov	r2, r6
 800da70:	4649      	mov	r1, r9
 800da72:	4640      	mov	r0, r8
 800da74:	47d0      	blx	sl
 800da76:	3001      	adds	r0, #1
 800da78:	d09d      	beq.n	800d9b6 <_printf_i+0x15a>
 800da7a:	3501      	adds	r5, #1
 800da7c:	68e3      	ldr	r3, [r4, #12]
 800da7e:	9903      	ldr	r1, [sp, #12]
 800da80:	1a5b      	subs	r3, r3, r1
 800da82:	42ab      	cmp	r3, r5
 800da84:	dcf2      	bgt.n	800da6c <_printf_i+0x210>
 800da86:	e7eb      	b.n	800da60 <_printf_i+0x204>
 800da88:	2500      	movs	r5, #0
 800da8a:	f104 0619 	add.w	r6, r4, #25
 800da8e:	e7f5      	b.n	800da7c <_printf_i+0x220>
 800da90:	0800dd99 	.word	0x0800dd99
 800da94:	0800ddaa 	.word	0x0800ddaa

0800da98 <__sflush_r>:
 800da98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800da9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800daa0:	0716      	lsls	r6, r2, #28
 800daa2:	4605      	mov	r5, r0
 800daa4:	460c      	mov	r4, r1
 800daa6:	d454      	bmi.n	800db52 <__sflush_r+0xba>
 800daa8:	684b      	ldr	r3, [r1, #4]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	dc02      	bgt.n	800dab4 <__sflush_r+0x1c>
 800daae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	dd48      	ble.n	800db46 <__sflush_r+0xae>
 800dab4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dab6:	2e00      	cmp	r6, #0
 800dab8:	d045      	beq.n	800db46 <__sflush_r+0xae>
 800daba:	2300      	movs	r3, #0
 800dabc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800dac0:	682f      	ldr	r7, [r5, #0]
 800dac2:	6a21      	ldr	r1, [r4, #32]
 800dac4:	602b      	str	r3, [r5, #0]
 800dac6:	d030      	beq.n	800db2a <__sflush_r+0x92>
 800dac8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800daca:	89a3      	ldrh	r3, [r4, #12]
 800dacc:	0759      	lsls	r1, r3, #29
 800dace:	d505      	bpl.n	800dadc <__sflush_r+0x44>
 800dad0:	6863      	ldr	r3, [r4, #4]
 800dad2:	1ad2      	subs	r2, r2, r3
 800dad4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800dad6:	b10b      	cbz	r3, 800dadc <__sflush_r+0x44>
 800dad8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800dada:	1ad2      	subs	r2, r2, r3
 800dadc:	2300      	movs	r3, #0
 800dade:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dae0:	6a21      	ldr	r1, [r4, #32]
 800dae2:	4628      	mov	r0, r5
 800dae4:	47b0      	blx	r6
 800dae6:	1c43      	adds	r3, r0, #1
 800dae8:	89a3      	ldrh	r3, [r4, #12]
 800daea:	d106      	bne.n	800dafa <__sflush_r+0x62>
 800daec:	6829      	ldr	r1, [r5, #0]
 800daee:	291d      	cmp	r1, #29
 800daf0:	d82b      	bhi.n	800db4a <__sflush_r+0xb2>
 800daf2:	4a2a      	ldr	r2, [pc, #168]	@ (800db9c <__sflush_r+0x104>)
 800daf4:	40ca      	lsrs	r2, r1
 800daf6:	07d6      	lsls	r6, r2, #31
 800daf8:	d527      	bpl.n	800db4a <__sflush_r+0xb2>
 800dafa:	2200      	movs	r2, #0
 800dafc:	6062      	str	r2, [r4, #4]
 800dafe:	04d9      	lsls	r1, r3, #19
 800db00:	6922      	ldr	r2, [r4, #16]
 800db02:	6022      	str	r2, [r4, #0]
 800db04:	d504      	bpl.n	800db10 <__sflush_r+0x78>
 800db06:	1c42      	adds	r2, r0, #1
 800db08:	d101      	bne.n	800db0e <__sflush_r+0x76>
 800db0a:	682b      	ldr	r3, [r5, #0]
 800db0c:	b903      	cbnz	r3, 800db10 <__sflush_r+0x78>
 800db0e:	6560      	str	r0, [r4, #84]	@ 0x54
 800db10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800db12:	602f      	str	r7, [r5, #0]
 800db14:	b1b9      	cbz	r1, 800db46 <__sflush_r+0xae>
 800db16:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800db1a:	4299      	cmp	r1, r3
 800db1c:	d002      	beq.n	800db24 <__sflush_r+0x8c>
 800db1e:	4628      	mov	r0, r5
 800db20:	f7ff fbf4 	bl	800d30c <_free_r>
 800db24:	2300      	movs	r3, #0
 800db26:	6363      	str	r3, [r4, #52]	@ 0x34
 800db28:	e00d      	b.n	800db46 <__sflush_r+0xae>
 800db2a:	2301      	movs	r3, #1
 800db2c:	4628      	mov	r0, r5
 800db2e:	47b0      	blx	r6
 800db30:	4602      	mov	r2, r0
 800db32:	1c50      	adds	r0, r2, #1
 800db34:	d1c9      	bne.n	800daca <__sflush_r+0x32>
 800db36:	682b      	ldr	r3, [r5, #0]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d0c6      	beq.n	800daca <__sflush_r+0x32>
 800db3c:	2b1d      	cmp	r3, #29
 800db3e:	d001      	beq.n	800db44 <__sflush_r+0xac>
 800db40:	2b16      	cmp	r3, #22
 800db42:	d11e      	bne.n	800db82 <__sflush_r+0xea>
 800db44:	602f      	str	r7, [r5, #0]
 800db46:	2000      	movs	r0, #0
 800db48:	e022      	b.n	800db90 <__sflush_r+0xf8>
 800db4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800db4e:	b21b      	sxth	r3, r3
 800db50:	e01b      	b.n	800db8a <__sflush_r+0xf2>
 800db52:	690f      	ldr	r7, [r1, #16]
 800db54:	2f00      	cmp	r7, #0
 800db56:	d0f6      	beq.n	800db46 <__sflush_r+0xae>
 800db58:	0793      	lsls	r3, r2, #30
 800db5a:	680e      	ldr	r6, [r1, #0]
 800db5c:	bf08      	it	eq
 800db5e:	694b      	ldreq	r3, [r1, #20]
 800db60:	600f      	str	r7, [r1, #0]
 800db62:	bf18      	it	ne
 800db64:	2300      	movne	r3, #0
 800db66:	eba6 0807 	sub.w	r8, r6, r7
 800db6a:	608b      	str	r3, [r1, #8]
 800db6c:	f1b8 0f00 	cmp.w	r8, #0
 800db70:	dde9      	ble.n	800db46 <__sflush_r+0xae>
 800db72:	6a21      	ldr	r1, [r4, #32]
 800db74:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800db76:	4643      	mov	r3, r8
 800db78:	463a      	mov	r2, r7
 800db7a:	4628      	mov	r0, r5
 800db7c:	47b0      	blx	r6
 800db7e:	2800      	cmp	r0, #0
 800db80:	dc08      	bgt.n	800db94 <__sflush_r+0xfc>
 800db82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800db8a:	81a3      	strh	r3, [r4, #12]
 800db8c:	f04f 30ff 	mov.w	r0, #4294967295
 800db90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db94:	4407      	add	r7, r0
 800db96:	eba8 0800 	sub.w	r8, r8, r0
 800db9a:	e7e7      	b.n	800db6c <__sflush_r+0xd4>
 800db9c:	20400001 	.word	0x20400001

0800dba0 <_fflush_r>:
 800dba0:	b538      	push	{r3, r4, r5, lr}
 800dba2:	690b      	ldr	r3, [r1, #16]
 800dba4:	4605      	mov	r5, r0
 800dba6:	460c      	mov	r4, r1
 800dba8:	b913      	cbnz	r3, 800dbb0 <_fflush_r+0x10>
 800dbaa:	2500      	movs	r5, #0
 800dbac:	4628      	mov	r0, r5
 800dbae:	bd38      	pop	{r3, r4, r5, pc}
 800dbb0:	b118      	cbz	r0, 800dbba <_fflush_r+0x1a>
 800dbb2:	6a03      	ldr	r3, [r0, #32]
 800dbb4:	b90b      	cbnz	r3, 800dbba <_fflush_r+0x1a>
 800dbb6:	f7ff f9ff 	bl	800cfb8 <__sinit>
 800dbba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d0f3      	beq.n	800dbaa <_fflush_r+0xa>
 800dbc2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800dbc4:	07d0      	lsls	r0, r2, #31
 800dbc6:	d404      	bmi.n	800dbd2 <_fflush_r+0x32>
 800dbc8:	0599      	lsls	r1, r3, #22
 800dbca:	d402      	bmi.n	800dbd2 <_fflush_r+0x32>
 800dbcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dbce:	f7ff fb8c 	bl	800d2ea <__retarget_lock_acquire_recursive>
 800dbd2:	4628      	mov	r0, r5
 800dbd4:	4621      	mov	r1, r4
 800dbd6:	f7ff ff5f 	bl	800da98 <__sflush_r>
 800dbda:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dbdc:	07da      	lsls	r2, r3, #31
 800dbde:	4605      	mov	r5, r0
 800dbe0:	d4e4      	bmi.n	800dbac <_fflush_r+0xc>
 800dbe2:	89a3      	ldrh	r3, [r4, #12]
 800dbe4:	059b      	lsls	r3, r3, #22
 800dbe6:	d4e1      	bmi.n	800dbac <_fflush_r+0xc>
 800dbe8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dbea:	f7ff fb7f 	bl	800d2ec <__retarget_lock_release_recursive>
 800dbee:	e7dd      	b.n	800dbac <_fflush_r+0xc>

0800dbf0 <__swhatbuf_r>:
 800dbf0:	b570      	push	{r4, r5, r6, lr}
 800dbf2:	460c      	mov	r4, r1
 800dbf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbf8:	2900      	cmp	r1, #0
 800dbfa:	b096      	sub	sp, #88	@ 0x58
 800dbfc:	4615      	mov	r5, r2
 800dbfe:	461e      	mov	r6, r3
 800dc00:	da0d      	bge.n	800dc1e <__swhatbuf_r+0x2e>
 800dc02:	89a3      	ldrh	r3, [r4, #12]
 800dc04:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800dc08:	f04f 0100 	mov.w	r1, #0
 800dc0c:	bf14      	ite	ne
 800dc0e:	2340      	movne	r3, #64	@ 0x40
 800dc10:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800dc14:	2000      	movs	r0, #0
 800dc16:	6031      	str	r1, [r6, #0]
 800dc18:	602b      	str	r3, [r5, #0]
 800dc1a:	b016      	add	sp, #88	@ 0x58
 800dc1c:	bd70      	pop	{r4, r5, r6, pc}
 800dc1e:	466a      	mov	r2, sp
 800dc20:	f000 f848 	bl	800dcb4 <_fstat_r>
 800dc24:	2800      	cmp	r0, #0
 800dc26:	dbec      	blt.n	800dc02 <__swhatbuf_r+0x12>
 800dc28:	9901      	ldr	r1, [sp, #4]
 800dc2a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800dc2e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800dc32:	4259      	negs	r1, r3
 800dc34:	4159      	adcs	r1, r3
 800dc36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dc3a:	e7eb      	b.n	800dc14 <__swhatbuf_r+0x24>

0800dc3c <__smakebuf_r>:
 800dc3c:	898b      	ldrh	r3, [r1, #12]
 800dc3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dc40:	079d      	lsls	r5, r3, #30
 800dc42:	4606      	mov	r6, r0
 800dc44:	460c      	mov	r4, r1
 800dc46:	d507      	bpl.n	800dc58 <__smakebuf_r+0x1c>
 800dc48:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800dc4c:	6023      	str	r3, [r4, #0]
 800dc4e:	6123      	str	r3, [r4, #16]
 800dc50:	2301      	movs	r3, #1
 800dc52:	6163      	str	r3, [r4, #20]
 800dc54:	b003      	add	sp, #12
 800dc56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc58:	ab01      	add	r3, sp, #4
 800dc5a:	466a      	mov	r2, sp
 800dc5c:	f7ff ffc8 	bl	800dbf0 <__swhatbuf_r>
 800dc60:	9f00      	ldr	r7, [sp, #0]
 800dc62:	4605      	mov	r5, r0
 800dc64:	4639      	mov	r1, r7
 800dc66:	4630      	mov	r0, r6
 800dc68:	f7ff fbbc 	bl	800d3e4 <_malloc_r>
 800dc6c:	b948      	cbnz	r0, 800dc82 <__smakebuf_r+0x46>
 800dc6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc72:	059a      	lsls	r2, r3, #22
 800dc74:	d4ee      	bmi.n	800dc54 <__smakebuf_r+0x18>
 800dc76:	f023 0303 	bic.w	r3, r3, #3
 800dc7a:	f043 0302 	orr.w	r3, r3, #2
 800dc7e:	81a3      	strh	r3, [r4, #12]
 800dc80:	e7e2      	b.n	800dc48 <__smakebuf_r+0xc>
 800dc82:	89a3      	ldrh	r3, [r4, #12]
 800dc84:	6020      	str	r0, [r4, #0]
 800dc86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dc8a:	81a3      	strh	r3, [r4, #12]
 800dc8c:	9b01      	ldr	r3, [sp, #4]
 800dc8e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800dc92:	b15b      	cbz	r3, 800dcac <__smakebuf_r+0x70>
 800dc94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dc98:	4630      	mov	r0, r6
 800dc9a:	f000 f81d 	bl	800dcd8 <_isatty_r>
 800dc9e:	b128      	cbz	r0, 800dcac <__smakebuf_r+0x70>
 800dca0:	89a3      	ldrh	r3, [r4, #12]
 800dca2:	f023 0303 	bic.w	r3, r3, #3
 800dca6:	f043 0301 	orr.w	r3, r3, #1
 800dcaa:	81a3      	strh	r3, [r4, #12]
 800dcac:	89a3      	ldrh	r3, [r4, #12]
 800dcae:	431d      	orrs	r5, r3
 800dcb0:	81a5      	strh	r5, [r4, #12]
 800dcb2:	e7cf      	b.n	800dc54 <__smakebuf_r+0x18>

0800dcb4 <_fstat_r>:
 800dcb4:	b538      	push	{r3, r4, r5, lr}
 800dcb6:	4d07      	ldr	r5, [pc, #28]	@ (800dcd4 <_fstat_r+0x20>)
 800dcb8:	2300      	movs	r3, #0
 800dcba:	4604      	mov	r4, r0
 800dcbc:	4608      	mov	r0, r1
 800dcbe:	4611      	mov	r1, r2
 800dcc0:	602b      	str	r3, [r5, #0]
 800dcc2:	f7f3 fde5 	bl	8001890 <_fstat>
 800dcc6:	1c43      	adds	r3, r0, #1
 800dcc8:	d102      	bne.n	800dcd0 <_fstat_r+0x1c>
 800dcca:	682b      	ldr	r3, [r5, #0]
 800dccc:	b103      	cbz	r3, 800dcd0 <_fstat_r+0x1c>
 800dcce:	6023      	str	r3, [r4, #0]
 800dcd0:	bd38      	pop	{r3, r4, r5, pc}
 800dcd2:	bf00      	nop
 800dcd4:	240004dc 	.word	0x240004dc

0800dcd8 <_isatty_r>:
 800dcd8:	b538      	push	{r3, r4, r5, lr}
 800dcda:	4d06      	ldr	r5, [pc, #24]	@ (800dcf4 <_isatty_r+0x1c>)
 800dcdc:	2300      	movs	r3, #0
 800dcde:	4604      	mov	r4, r0
 800dce0:	4608      	mov	r0, r1
 800dce2:	602b      	str	r3, [r5, #0]
 800dce4:	f7f3 fde4 	bl	80018b0 <_isatty>
 800dce8:	1c43      	adds	r3, r0, #1
 800dcea:	d102      	bne.n	800dcf2 <_isatty_r+0x1a>
 800dcec:	682b      	ldr	r3, [r5, #0]
 800dcee:	b103      	cbz	r3, 800dcf2 <_isatty_r+0x1a>
 800dcf0:	6023      	str	r3, [r4, #0]
 800dcf2:	bd38      	pop	{r3, r4, r5, pc}
 800dcf4:	240004dc 	.word	0x240004dc

0800dcf8 <_sbrk_r>:
 800dcf8:	b538      	push	{r3, r4, r5, lr}
 800dcfa:	4d06      	ldr	r5, [pc, #24]	@ (800dd14 <_sbrk_r+0x1c>)
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	4604      	mov	r4, r0
 800dd00:	4608      	mov	r0, r1
 800dd02:	602b      	str	r3, [r5, #0]
 800dd04:	f7f3 fdec 	bl	80018e0 <_sbrk>
 800dd08:	1c43      	adds	r3, r0, #1
 800dd0a:	d102      	bne.n	800dd12 <_sbrk_r+0x1a>
 800dd0c:	682b      	ldr	r3, [r5, #0]
 800dd0e:	b103      	cbz	r3, 800dd12 <_sbrk_r+0x1a>
 800dd10:	6023      	str	r3, [r4, #0]
 800dd12:	bd38      	pop	{r3, r4, r5, pc}
 800dd14:	240004dc 	.word	0x240004dc

0800dd18 <_init>:
 800dd18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd1a:	bf00      	nop
 800dd1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd1e:	bc08      	pop	{r3}
 800dd20:	469e      	mov	lr, r3
 800dd22:	4770      	bx	lr

0800dd24 <_fini>:
 800dd24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd26:	bf00      	nop
 800dd28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd2a:	bc08      	pop	{r3}
 800dd2c:	469e      	mov	lr, r3
 800dd2e:	4770      	bx	lr

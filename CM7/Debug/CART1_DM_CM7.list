
CART1_DM_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000123fc  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000478  080126a0  080126a0  000136a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012b18  08012b18  000141f4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08012b18  08012b18  00013b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012b20  08012b20  000141f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012b20  08012b20  00013b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012b24  08012b24  00013b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  24000000  08012b28  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000068c  240001f8  08012d1c  000141f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  24000884  08012d1c  00014884  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000141f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022755  00000000  00000000  00014222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040b1  00000000  00000000  00036977  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a28  00000000  00000000  0003aa28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000145b  00000000  00000000  0003c450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00040369  00000000  00000000  0003d8ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002407a  00000000  00000000  0007dc14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a4463  00000000  00000000  000a1c8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  002460f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000080f8  00000000  00000000  00246134  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  0024e22c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001f8 	.word	0x240001f8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08012684 	.word	0x08012684

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001fc 	.word	0x240001fc
 80002dc:	08012684 	.word	0x08012684

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr
	...

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <strlen>:
 80003a0:	4603      	mov	r3, r0
 80003a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003a6:	2a00      	cmp	r2, #0
 80003a8:	d1fb      	bne.n	80003a2 <strlen+0x2>
 80003aa:	1a18      	subs	r0, r3, r0
 80003ac:	3801      	subs	r0, #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b988 	b.w	80006d8 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	468e      	mov	lr, r1
 80003e8:	4604      	mov	r4, r0
 80003ea:	4688      	mov	r8, r1
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d14a      	bne.n	8000486 <__udivmoddi4+0xa6>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4617      	mov	r7, r2
 80003f4:	d962      	bls.n	80004bc <__udivmoddi4+0xdc>
 80003f6:	fab2 f682 	clz	r6, r2
 80003fa:	b14e      	cbz	r6, 8000410 <__udivmoddi4+0x30>
 80003fc:	f1c6 0320 	rsb	r3, r6, #32
 8000400:	fa01 f806 	lsl.w	r8, r1, r6
 8000404:	fa20 f303 	lsr.w	r3, r0, r3
 8000408:	40b7      	lsls	r7, r6
 800040a:	ea43 0808 	orr.w	r8, r3, r8
 800040e:	40b4      	lsls	r4, r6
 8000410:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000414:	fa1f fc87 	uxth.w	ip, r7
 8000418:	fbb8 f1fe 	udiv	r1, r8, lr
 800041c:	0c23      	lsrs	r3, r4, #16
 800041e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fb01 f20c 	mul.w	r2, r1, ip
 800042a:	429a      	cmp	r2, r3
 800042c:	d909      	bls.n	8000442 <__udivmoddi4+0x62>
 800042e:	18fb      	adds	r3, r7, r3
 8000430:	f101 30ff 	add.w	r0, r1, #4294967295
 8000434:	f080 80ea 	bcs.w	800060c <__udivmoddi4+0x22c>
 8000438:	429a      	cmp	r2, r3
 800043a:	f240 80e7 	bls.w	800060c <__udivmoddi4+0x22c>
 800043e:	3902      	subs	r1, #2
 8000440:	443b      	add	r3, r7
 8000442:	1a9a      	subs	r2, r3, r2
 8000444:	b2a3      	uxth	r3, r4
 8000446:	fbb2 f0fe 	udiv	r0, r2, lr
 800044a:	fb0e 2210 	mls	r2, lr, r0, r2
 800044e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000452:	fb00 fc0c 	mul.w	ip, r0, ip
 8000456:	459c      	cmp	ip, r3
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0x8e>
 800045a:	18fb      	adds	r3, r7, r3
 800045c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000460:	f080 80d6 	bcs.w	8000610 <__udivmoddi4+0x230>
 8000464:	459c      	cmp	ip, r3
 8000466:	f240 80d3 	bls.w	8000610 <__udivmoddi4+0x230>
 800046a:	443b      	add	r3, r7
 800046c:	3802      	subs	r0, #2
 800046e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000472:	eba3 030c 	sub.w	r3, r3, ip
 8000476:	2100      	movs	r1, #0
 8000478:	b11d      	cbz	r5, 8000482 <__udivmoddi4+0xa2>
 800047a:	40f3      	lsrs	r3, r6
 800047c:	2200      	movs	r2, #0
 800047e:	e9c5 3200 	strd	r3, r2, [r5]
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	428b      	cmp	r3, r1
 8000488:	d905      	bls.n	8000496 <__udivmoddi4+0xb6>
 800048a:	b10d      	cbz	r5, 8000490 <__udivmoddi4+0xb0>
 800048c:	e9c5 0100 	strd	r0, r1, [r5]
 8000490:	2100      	movs	r1, #0
 8000492:	4608      	mov	r0, r1
 8000494:	e7f5      	b.n	8000482 <__udivmoddi4+0xa2>
 8000496:	fab3 f183 	clz	r1, r3
 800049a:	2900      	cmp	r1, #0
 800049c:	d146      	bne.n	800052c <__udivmoddi4+0x14c>
 800049e:	4573      	cmp	r3, lr
 80004a0:	d302      	bcc.n	80004a8 <__udivmoddi4+0xc8>
 80004a2:	4282      	cmp	r2, r0
 80004a4:	f200 8105 	bhi.w	80006b2 <__udivmoddi4+0x2d2>
 80004a8:	1a84      	subs	r4, r0, r2
 80004aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80004ae:	2001      	movs	r0, #1
 80004b0:	4690      	mov	r8, r2
 80004b2:	2d00      	cmp	r5, #0
 80004b4:	d0e5      	beq.n	8000482 <__udivmoddi4+0xa2>
 80004b6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ba:	e7e2      	b.n	8000482 <__udivmoddi4+0xa2>
 80004bc:	2a00      	cmp	r2, #0
 80004be:	f000 8090 	beq.w	80005e2 <__udivmoddi4+0x202>
 80004c2:	fab2 f682 	clz	r6, r2
 80004c6:	2e00      	cmp	r6, #0
 80004c8:	f040 80a4 	bne.w	8000614 <__udivmoddi4+0x234>
 80004cc:	1a8a      	subs	r2, r1, r2
 80004ce:	0c03      	lsrs	r3, r0, #16
 80004d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004d4:	b280      	uxth	r0, r0
 80004d6:	b2bc      	uxth	r4, r7
 80004d8:	2101      	movs	r1, #1
 80004da:	fbb2 fcfe 	udiv	ip, r2, lr
 80004de:	fb0e 221c 	mls	r2, lr, ip, r2
 80004e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004e6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ea:	429a      	cmp	r2, r3
 80004ec:	d907      	bls.n	80004fe <__udivmoddi4+0x11e>
 80004ee:	18fb      	adds	r3, r7, r3
 80004f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004f4:	d202      	bcs.n	80004fc <__udivmoddi4+0x11c>
 80004f6:	429a      	cmp	r2, r3
 80004f8:	f200 80e0 	bhi.w	80006bc <__udivmoddi4+0x2dc>
 80004fc:	46c4      	mov	ip, r8
 80004fe:	1a9b      	subs	r3, r3, r2
 8000500:	fbb3 f2fe 	udiv	r2, r3, lr
 8000504:	fb0e 3312 	mls	r3, lr, r2, r3
 8000508:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800050c:	fb02 f404 	mul.w	r4, r2, r4
 8000510:	429c      	cmp	r4, r3
 8000512:	d907      	bls.n	8000524 <__udivmoddi4+0x144>
 8000514:	18fb      	adds	r3, r7, r3
 8000516:	f102 30ff 	add.w	r0, r2, #4294967295
 800051a:	d202      	bcs.n	8000522 <__udivmoddi4+0x142>
 800051c:	429c      	cmp	r4, r3
 800051e:	f200 80ca 	bhi.w	80006b6 <__udivmoddi4+0x2d6>
 8000522:	4602      	mov	r2, r0
 8000524:	1b1b      	subs	r3, r3, r4
 8000526:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800052a:	e7a5      	b.n	8000478 <__udivmoddi4+0x98>
 800052c:	f1c1 0620 	rsb	r6, r1, #32
 8000530:	408b      	lsls	r3, r1
 8000532:	fa22 f706 	lsr.w	r7, r2, r6
 8000536:	431f      	orrs	r7, r3
 8000538:	fa0e f401 	lsl.w	r4, lr, r1
 800053c:	fa20 f306 	lsr.w	r3, r0, r6
 8000540:	fa2e fe06 	lsr.w	lr, lr, r6
 8000544:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000548:	4323      	orrs	r3, r4
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	fa1f fc87 	uxth.w	ip, r7
 8000552:	fbbe f0f9 	udiv	r0, lr, r9
 8000556:	0c1c      	lsrs	r4, r3, #16
 8000558:	fb09 ee10 	mls	lr, r9, r0, lr
 800055c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000560:	fb00 fe0c 	mul.w	lr, r0, ip
 8000564:	45a6      	cmp	lr, r4
 8000566:	fa02 f201 	lsl.w	r2, r2, r1
 800056a:	d909      	bls.n	8000580 <__udivmoddi4+0x1a0>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000572:	f080 809c 	bcs.w	80006ae <__udivmoddi4+0x2ce>
 8000576:	45a6      	cmp	lr, r4
 8000578:	f240 8099 	bls.w	80006ae <__udivmoddi4+0x2ce>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	eba4 040e 	sub.w	r4, r4, lr
 8000584:	fa1f fe83 	uxth.w	lr, r3
 8000588:	fbb4 f3f9 	udiv	r3, r4, r9
 800058c:	fb09 4413 	mls	r4, r9, r3, r4
 8000590:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000594:	fb03 fc0c 	mul.w	ip, r3, ip
 8000598:	45a4      	cmp	ip, r4
 800059a:	d908      	bls.n	80005ae <__udivmoddi4+0x1ce>
 800059c:	193c      	adds	r4, r7, r4
 800059e:	f103 3eff 	add.w	lr, r3, #4294967295
 80005a2:	f080 8082 	bcs.w	80006aa <__udivmoddi4+0x2ca>
 80005a6:	45a4      	cmp	ip, r4
 80005a8:	d97f      	bls.n	80006aa <__udivmoddi4+0x2ca>
 80005aa:	3b02      	subs	r3, #2
 80005ac:	443c      	add	r4, r7
 80005ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005b2:	eba4 040c 	sub.w	r4, r4, ip
 80005b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ba:	4564      	cmp	r4, ip
 80005bc:	4673      	mov	r3, lr
 80005be:	46e1      	mov	r9, ip
 80005c0:	d362      	bcc.n	8000688 <__udivmoddi4+0x2a8>
 80005c2:	d05f      	beq.n	8000684 <__udivmoddi4+0x2a4>
 80005c4:	b15d      	cbz	r5, 80005de <__udivmoddi4+0x1fe>
 80005c6:	ebb8 0203 	subs.w	r2, r8, r3
 80005ca:	eb64 0409 	sbc.w	r4, r4, r9
 80005ce:	fa04 f606 	lsl.w	r6, r4, r6
 80005d2:	fa22 f301 	lsr.w	r3, r2, r1
 80005d6:	431e      	orrs	r6, r3
 80005d8:	40cc      	lsrs	r4, r1
 80005da:	e9c5 6400 	strd	r6, r4, [r5]
 80005de:	2100      	movs	r1, #0
 80005e0:	e74f      	b.n	8000482 <__udivmoddi4+0xa2>
 80005e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005e6:	0c01      	lsrs	r1, r0, #16
 80005e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005ec:	b280      	uxth	r0, r0
 80005ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005f2:	463b      	mov	r3, r7
 80005f4:	4638      	mov	r0, r7
 80005f6:	463c      	mov	r4, r7
 80005f8:	46b8      	mov	r8, r7
 80005fa:	46be      	mov	lr, r7
 80005fc:	2620      	movs	r6, #32
 80005fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000602:	eba2 0208 	sub.w	r2, r2, r8
 8000606:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800060a:	e766      	b.n	80004da <__udivmoddi4+0xfa>
 800060c:	4601      	mov	r1, r0
 800060e:	e718      	b.n	8000442 <__udivmoddi4+0x62>
 8000610:	4610      	mov	r0, r2
 8000612:	e72c      	b.n	800046e <__udivmoddi4+0x8e>
 8000614:	f1c6 0220 	rsb	r2, r6, #32
 8000618:	fa2e f302 	lsr.w	r3, lr, r2
 800061c:	40b7      	lsls	r7, r6
 800061e:	40b1      	lsls	r1, r6
 8000620:	fa20 f202 	lsr.w	r2, r0, r2
 8000624:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000628:	430a      	orrs	r2, r1
 800062a:	fbb3 f8fe 	udiv	r8, r3, lr
 800062e:	b2bc      	uxth	r4, r7
 8000630:	fb0e 3318 	mls	r3, lr, r8, r3
 8000634:	0c11      	lsrs	r1, r2, #16
 8000636:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800063a:	fb08 f904 	mul.w	r9, r8, r4
 800063e:	40b0      	lsls	r0, r6
 8000640:	4589      	cmp	r9, r1
 8000642:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000646:	b280      	uxth	r0, r0
 8000648:	d93e      	bls.n	80006c8 <__udivmoddi4+0x2e8>
 800064a:	1879      	adds	r1, r7, r1
 800064c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000650:	d201      	bcs.n	8000656 <__udivmoddi4+0x276>
 8000652:	4589      	cmp	r9, r1
 8000654:	d81f      	bhi.n	8000696 <__udivmoddi4+0x2b6>
 8000656:	eba1 0109 	sub.w	r1, r1, r9
 800065a:	fbb1 f9fe 	udiv	r9, r1, lr
 800065e:	fb09 f804 	mul.w	r8, r9, r4
 8000662:	fb0e 1119 	mls	r1, lr, r9, r1
 8000666:	b292      	uxth	r2, r2
 8000668:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800066c:	4542      	cmp	r2, r8
 800066e:	d229      	bcs.n	80006c4 <__udivmoddi4+0x2e4>
 8000670:	18ba      	adds	r2, r7, r2
 8000672:	f109 31ff 	add.w	r1, r9, #4294967295
 8000676:	d2c4      	bcs.n	8000602 <__udivmoddi4+0x222>
 8000678:	4542      	cmp	r2, r8
 800067a:	d2c2      	bcs.n	8000602 <__udivmoddi4+0x222>
 800067c:	f1a9 0102 	sub.w	r1, r9, #2
 8000680:	443a      	add	r2, r7
 8000682:	e7be      	b.n	8000602 <__udivmoddi4+0x222>
 8000684:	45f0      	cmp	r8, lr
 8000686:	d29d      	bcs.n	80005c4 <__udivmoddi4+0x1e4>
 8000688:	ebbe 0302 	subs.w	r3, lr, r2
 800068c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000690:	3801      	subs	r0, #1
 8000692:	46e1      	mov	r9, ip
 8000694:	e796      	b.n	80005c4 <__udivmoddi4+0x1e4>
 8000696:	eba7 0909 	sub.w	r9, r7, r9
 800069a:	4449      	add	r1, r9
 800069c:	f1a8 0c02 	sub.w	ip, r8, #2
 80006a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a4:	fb09 f804 	mul.w	r8, r9, r4
 80006a8:	e7db      	b.n	8000662 <__udivmoddi4+0x282>
 80006aa:	4673      	mov	r3, lr
 80006ac:	e77f      	b.n	80005ae <__udivmoddi4+0x1ce>
 80006ae:	4650      	mov	r0, sl
 80006b0:	e766      	b.n	8000580 <__udivmoddi4+0x1a0>
 80006b2:	4608      	mov	r0, r1
 80006b4:	e6fd      	b.n	80004b2 <__udivmoddi4+0xd2>
 80006b6:	443b      	add	r3, r7
 80006b8:	3a02      	subs	r2, #2
 80006ba:	e733      	b.n	8000524 <__udivmoddi4+0x144>
 80006bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80006c0:	443b      	add	r3, r7
 80006c2:	e71c      	b.n	80004fe <__udivmoddi4+0x11e>
 80006c4:	4649      	mov	r1, r9
 80006c6:	e79c      	b.n	8000602 <__udivmoddi4+0x222>
 80006c8:	eba1 0109 	sub.w	r1, r1, r9
 80006cc:	46c4      	mov	ip, r8
 80006ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80006d2:	fb09 f804 	mul.w	r8, r9, r4
 80006d6:	e7c4      	b.n	8000662 <__udivmoddi4+0x282>

080006d8 <__aeabi_idiv0>:
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop

080006dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006e0:	4b49      	ldr	r3, [pc, #292]	@ (8000808 <SystemInit+0x12c>)
 80006e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006e6:	4a48      	ldr	r2, [pc, #288]	@ (8000808 <SystemInit+0x12c>)
 80006e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006f0:	4b45      	ldr	r3, [pc, #276]	@ (8000808 <SystemInit+0x12c>)
 80006f2:	691b      	ldr	r3, [r3, #16]
 80006f4:	4a44      	ldr	r2, [pc, #272]	@ (8000808 <SystemInit+0x12c>)
 80006f6:	f043 0310 	orr.w	r3, r3, #16
 80006fa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006fc:	4b43      	ldr	r3, [pc, #268]	@ (800080c <SystemInit+0x130>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f003 030f 	and.w	r3, r3, #15
 8000704:	2b06      	cmp	r3, #6
 8000706:	d807      	bhi.n	8000718 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000708:	4b40      	ldr	r3, [pc, #256]	@ (800080c <SystemInit+0x130>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f023 030f 	bic.w	r3, r3, #15
 8000710:	4a3e      	ldr	r2, [pc, #248]	@ (800080c <SystemInit+0x130>)
 8000712:	f043 0307 	orr.w	r3, r3, #7
 8000716:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000718:	4b3d      	ldr	r3, [pc, #244]	@ (8000810 <SystemInit+0x134>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a3c      	ldr	r2, [pc, #240]	@ (8000810 <SystemInit+0x134>)
 800071e:	f043 0301 	orr.w	r3, r3, #1
 8000722:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000724:	4b3a      	ldr	r3, [pc, #232]	@ (8000810 <SystemInit+0x134>)
 8000726:	2200      	movs	r2, #0
 8000728:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800072a:	4b39      	ldr	r3, [pc, #228]	@ (8000810 <SystemInit+0x134>)
 800072c:	681a      	ldr	r2, [r3, #0]
 800072e:	4938      	ldr	r1, [pc, #224]	@ (8000810 <SystemInit+0x134>)
 8000730:	4b38      	ldr	r3, [pc, #224]	@ (8000814 <SystemInit+0x138>)
 8000732:	4013      	ands	r3, r2
 8000734:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000736:	4b35      	ldr	r3, [pc, #212]	@ (800080c <SystemInit+0x130>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	f003 0308 	and.w	r3, r3, #8
 800073e:	2b00      	cmp	r3, #0
 8000740:	d007      	beq.n	8000752 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000742:	4b32      	ldr	r3, [pc, #200]	@ (800080c <SystemInit+0x130>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f023 030f 	bic.w	r3, r3, #15
 800074a:	4a30      	ldr	r2, [pc, #192]	@ (800080c <SystemInit+0x130>)
 800074c:	f043 0307 	orr.w	r3, r3, #7
 8000750:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000752:	4b2f      	ldr	r3, [pc, #188]	@ (8000810 <SystemInit+0x134>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000758:	4b2d      	ldr	r3, [pc, #180]	@ (8000810 <SystemInit+0x134>)
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800075e:	4b2c      	ldr	r3, [pc, #176]	@ (8000810 <SystemInit+0x134>)
 8000760:	2200      	movs	r2, #0
 8000762:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000764:	4b2a      	ldr	r3, [pc, #168]	@ (8000810 <SystemInit+0x134>)
 8000766:	4a2c      	ldr	r2, [pc, #176]	@ (8000818 <SystemInit+0x13c>)
 8000768:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800076a:	4b29      	ldr	r3, [pc, #164]	@ (8000810 <SystemInit+0x134>)
 800076c:	4a2b      	ldr	r2, [pc, #172]	@ (800081c <SystemInit+0x140>)
 800076e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000770:	4b27      	ldr	r3, [pc, #156]	@ (8000810 <SystemInit+0x134>)
 8000772:	4a2b      	ldr	r2, [pc, #172]	@ (8000820 <SystemInit+0x144>)
 8000774:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000776:	4b26      	ldr	r3, [pc, #152]	@ (8000810 <SystemInit+0x134>)
 8000778:	2200      	movs	r2, #0
 800077a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800077c:	4b24      	ldr	r3, [pc, #144]	@ (8000810 <SystemInit+0x134>)
 800077e:	4a28      	ldr	r2, [pc, #160]	@ (8000820 <SystemInit+0x144>)
 8000780:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000782:	4b23      	ldr	r3, [pc, #140]	@ (8000810 <SystemInit+0x134>)
 8000784:	2200      	movs	r2, #0
 8000786:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000788:	4b21      	ldr	r3, [pc, #132]	@ (8000810 <SystemInit+0x134>)
 800078a:	4a25      	ldr	r2, [pc, #148]	@ (8000820 <SystemInit+0x144>)
 800078c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800078e:	4b20      	ldr	r3, [pc, #128]	@ (8000810 <SystemInit+0x134>)
 8000790:	2200      	movs	r2, #0
 8000792:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000794:	4b1e      	ldr	r3, [pc, #120]	@ (8000810 <SystemInit+0x134>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a1d      	ldr	r2, [pc, #116]	@ (8000810 <SystemInit+0x134>)
 800079a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800079e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80007a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000810 <SystemInit+0x134>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80007a6:	4b1f      	ldr	r3, [pc, #124]	@ (8000824 <SystemInit+0x148>)
 80007a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007aa:	4a1e      	ldr	r2, [pc, #120]	@ (8000824 <SystemInit+0x148>)
 80007ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007b0:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80007b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000828 <SystemInit+0x14c>)
 80007b4:	681a      	ldr	r2, [r3, #0]
 80007b6:	4b1d      	ldr	r3, [pc, #116]	@ (800082c <SystemInit+0x150>)
 80007b8:	4013      	ands	r3, r2
 80007ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80007be:	d202      	bcs.n	80007c6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80007c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000830 <SystemInit+0x154>)
 80007c2:	2201      	movs	r2, #1
 80007c4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80007c6:	4b12      	ldr	r3, [pc, #72]	@ (8000810 <SystemInit+0x134>)
 80007c8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d113      	bne.n	80007fc <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80007d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000810 <SystemInit+0x134>)
 80007d6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007da:	4a0d      	ldr	r2, [pc, #52]	@ (8000810 <SystemInit+0x134>)
 80007dc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007e0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80007e4:	4b13      	ldr	r3, [pc, #76]	@ (8000834 <SystemInit+0x158>)
 80007e6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80007ea:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80007ec:	4b08      	ldr	r3, [pc, #32]	@ (8000810 <SystemInit+0x134>)
 80007ee:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007f2:	4a07      	ldr	r2, [pc, #28]	@ (8000810 <SystemInit+0x134>)
 80007f4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80007f8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80007fc:	bf00      	nop
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	e000ed00 	.word	0xe000ed00
 800080c:	52002000 	.word	0x52002000
 8000810:	58024400 	.word	0x58024400
 8000814:	eaf6ed7f 	.word	0xeaf6ed7f
 8000818:	02020200 	.word	0x02020200
 800081c:	01ff0000 	.word	0x01ff0000
 8000820:	01010280 	.word	0x01010280
 8000824:	580000c0 	.word	0x580000c0
 8000828:	5c001000 	.word	0x5c001000
 800082c:	ffff0000 	.word	0xffff0000
 8000830:	51008108 	.word	0x51008108
 8000834:	52004000 	.word	0x52004000

08000838 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 800083c:	4b09      	ldr	r3, [pc, #36]	@ (8000864 <ExitRun0Mode+0x2c>)
 800083e:	68db      	ldr	r3, [r3, #12]
 8000840:	4a08      	ldr	r2, [pc, #32]	@ (8000864 <ExitRun0Mode+0x2c>)
 8000842:	f023 0302 	bic.w	r3, r3, #2
 8000846:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000848:	bf00      	nop
 800084a:	4b06      	ldr	r3, [pc, #24]	@ (8000864 <ExitRun0Mode+0x2c>)
 800084c:	685b      	ldr	r3, [r3, #4]
 800084e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000852:	2b00      	cmp	r3, #0
 8000854:	d0f9      	beq.n	800084a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000856:	bf00      	nop
 8000858:	bf00      	nop
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	58024800 	.word	0x58024800

08000868 <HAL_TIM_PeriodElapsedCallback>:

double TC[MAX_TC_CH] = {0};
uint8_t sv[MAX_SV_NUM] = {0};

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000878:	d13b      	bne.n	80008f2 <HAL_TIM_PeriodElapsedCallback+0x8a>
	{
		// 1ms마다 실행되는 코드
		f1ms = true;
 800087a:	4b21      	ldr	r3, [pc, #132]	@ (8000900 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800087c:	2201      	movs	r2, #1
 800087e:	701a      	strb	r2, [r3, #0]
		cnt1ms++;
 8000880:	4b20      	ldr	r3, [pc, #128]	@ (8000904 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	3301      	adds	r3, #1
 8000886:	4a1f      	ldr	r2, [pc, #124]	@ (8000904 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000888:	6013      	str	r3, [r2, #0]
		systemtick++;
 800088a:	4b1f      	ldr	r3, [pc, #124]	@ (8000908 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	3301      	adds	r3, #1
 8000890:	4a1d      	ldr	r2, [pc, #116]	@ (8000908 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000892:	6013      	str	r3, [r2, #0]

		if (cnt1ms%10 == 0)
 8000894:	4b1b      	ldr	r3, [pc, #108]	@ (8000904 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000896:	6819      	ldr	r1, [r3, #0]
 8000898:	4b1c      	ldr	r3, [pc, #112]	@ (800090c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800089a:	fba3 2301 	umull	r2, r3, r3, r1
 800089e:	08da      	lsrs	r2, r3, #3
 80008a0:	4613      	mov	r3, r2
 80008a2:	009b      	lsls	r3, r3, #2
 80008a4:	4413      	add	r3, r2
 80008a6:	005b      	lsls	r3, r3, #1
 80008a8:	1aca      	subs	r2, r1, r3
 80008aa:	2a00      	cmp	r2, #0
 80008ac:	d102      	bne.n	80008b4 <HAL_TIM_PeriodElapsedCallback+0x4c>
		{
			f10ms = true;
 80008ae:	4b18      	ldr	r3, [pc, #96]	@ (8000910 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80008b0:	2201      	movs	r2, #1
 80008b2:	701a      	strb	r2, [r3, #0]
		}

		if (cnt1ms%100 == 0)
 80008b4:	4b13      	ldr	r3, [pc, #76]	@ (8000904 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80008b6:	681a      	ldr	r2, [r3, #0]
 80008b8:	4b16      	ldr	r3, [pc, #88]	@ (8000914 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80008ba:	fba3 1302 	umull	r1, r3, r3, r2
 80008be:	095b      	lsrs	r3, r3, #5
 80008c0:	2164      	movs	r1, #100	@ 0x64
 80008c2:	fb01 f303 	mul.w	r3, r1, r3
 80008c6:	1ad3      	subs	r3, r2, r3
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d102      	bne.n	80008d2 <HAL_TIM_PeriodElapsedCallback+0x6a>
		{
			f100ms = true;
 80008cc:	4b12      	ldr	r3, [pc, #72]	@ (8000918 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	701a      	strb	r2, [r3, #0]
		}

		if (cnt1ms%1000 == 0)
 80008d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000904 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80008d4:	681a      	ldr	r2, [r3, #0]
 80008d6:	4b11      	ldr	r3, [pc, #68]	@ (800091c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80008d8:	fba3 1302 	umull	r1, r3, r3, r2
 80008dc:	099b      	lsrs	r3, r3, #6
 80008de:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80008e2:	fb01 f303 	mul.w	r3, r1, r3
 80008e6:	1ad3      	subs	r3, r2, r3
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d102      	bne.n	80008f2 <HAL_TIM_PeriodElapsedCallback+0x8a>
		{
			f1000ms = true;
 80008ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000920 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80008ee:	2201      	movs	r2, #1
 80008f0:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80008f2:	bf00      	nop
 80008f4:	370c      	adds	r7, #12
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	24000470 	.word	0x24000470
 8000904:	24000474 	.word	0x24000474
 8000908:	2400046c 	.word	0x2400046c
 800090c:	cccccccd 	.word	0xcccccccd
 8000910:	24000471 	.word	0x24000471
 8000914:	51eb851f 	.word	0x51eb851f
 8000918:	24000472 	.word	0x24000472
 800091c:	10624dd3 	.word	0x10624dd3
 8000920:	24000473 	.word	0x24000473

08000924 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	f5ad 7d0c 	sub.w	sp, sp, #560	@ 0x230
 800092a:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800092c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000930:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000934:	bf00      	nop
 8000936:	4bbf      	ldr	r3, [pc, #764]	@ (8000c34 <main+0x310>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800093e:	2b00      	cmp	r3, #0
 8000940:	d006      	beq.n	8000950 <main+0x2c>
 8000942:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8000946:	1e5a      	subs	r2, r3, #1
 8000948:	f8c7 222c 	str.w	r2, [r7, #556]	@ 0x22c
 800094c:	2b00      	cmp	r3, #0
 800094e:	dcf2      	bgt.n	8000936 <main+0x12>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000950:	f002 fc64 	bl	800321c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000954:	f000 f992 	bl	8000c7c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000958:	4bb6      	ldr	r3, [pc, #728]	@ (8000c34 <main+0x310>)
 800095a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800095e:	4ab5      	ldr	r2, [pc, #724]	@ (8000c34 <main+0x310>)
 8000960:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000964:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000968:	4bb2      	ldr	r3, [pc, #712]	@ (8000c34 <main+0x310>)
 800096a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800096e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000972:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
 8000976:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800097a:	2000      	movs	r0, #0
 800097c:	f007 fc08 	bl	8008190 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000980:	2100      	movs	r1, #0
 8000982:	2000      	movs	r0, #0
 8000984:	f007 fc1e 	bl	80081c4 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000988:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800098c:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000990:	bf00      	nop
 8000992:	4ba8      	ldr	r3, [pc, #672]	@ (8000c34 <main+0x310>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800099a:	2b00      	cmp	r3, #0
 800099c:	d106      	bne.n	80009ac <main+0x88>
 800099e:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 80009a2:	1e5a      	subs	r2, r3, #1
 80009a4:	f8c7 222c 	str.w	r2, [r7, #556]	@ 0x22c
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	dcf2      	bgt.n	8000992 <main+0x6e>
if ( timeout < 0 )
 80009ac:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	da01      	bge.n	80009b8 <main+0x94>
{
Error_Handler();
 80009b4:	f000 fd36 	bl	8001424 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009b8:	f000 fc32 	bl	8001220 <MX_GPIO_Init>
  MX_DMA_Init();
 80009bc:	f000 fc10 	bl	80011e0 <MX_DMA_Init>
  MX_SPI1_Init();
 80009c0:	f000 fb1e 	bl	8001000 <MX_SPI1_Init>
  MX_TIM2_Init();
 80009c4:	f000 fb72 	bl	80010ac <MX_TIM2_Init>
  MX_ADC1_Init();
 80009c8:	f000 f9d4 	bl	8000d74 <MX_ADC1_Init>
  MX_UART4_Init();
 80009cc:	f000 fbbc 	bl	8001148 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */


  HAL_TIM_Base_Start_IT(&htim2);
 80009d0:	4899      	ldr	r0, [pc, #612]	@ (8000c38 <main+0x314>)
 80009d2:	f00b fec5 	bl	800c760 <HAL_TIM_Base_Start_IT>

  InitPT();
 80009d6:	f000 fd2b 	bl	8001430 <InitPT>
  InitTMTC();
 80009da:	f002 f909 	bl	8002bf0 <InitTMTC>


  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80009de:	2000      	movs	r0, #0
 80009e0:	f002 f9c6 	bl	8002d70 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 80009e4:	2001      	movs	r0, #1
 80009e6:	f002 f9c3 	bl	8002d70 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80009ea:	2002      	movs	r0, #2
 80009ec:	f002 f9c0 	bl	8002d70 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80009f0:	2101      	movs	r1, #1
 80009f2:	2000      	movs	r0, #0
 80009f4:	f002 fab0 	bl	8002f58 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80009f8:	4b90      	ldr	r3, [pc, #576]	@ (8000c3c <main+0x318>)
 80009fa:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009fe:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000a00:	4b8e      	ldr	r3, [pc, #568]	@ (8000c3c <main+0x318>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000a06:	4b8d      	ldr	r3, [pc, #564]	@ (8000c3c <main+0x318>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000a0c:	4b8b      	ldr	r3, [pc, #556]	@ (8000c3c <main+0x318>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000a12:	4b8a      	ldr	r3, [pc, #552]	@ (8000c3c <main+0x318>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000a18:	4988      	ldr	r1, [pc, #544]	@ (8000c3c <main+0x318>)
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	f002 fb20 	bl	8003060 <BSP_COM_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <main+0x106>
  {
    Error_Handler();
 8000a26:	f000 fcfd 	bl	8001424 <Error_Handler>
  }

  /* USER CODE BEGIN BSP */
  /* -- Sample board code to send message over COM1 port ---- */
  printf("Welcome to STM32 world !\n\r");
 8000a2a:	4885      	ldr	r0, [pc, #532]	@ (8000c40 <main+0x31c>)
 8000a2c:	f00f fcec 	bl	8010408 <iprintf>
  /* -- Sample board code to switch on leds ---- */
  BSP_LED_On(LED_GREEN);
 8000a30:	2000      	movs	r0, #0
 8000a32:	f002 fa13 	bl	8002e5c <BSP_LED_On>
  BSP_LED_On(LED_YELLOW);
 8000a36:	2001      	movs	r0, #1
 8000a38:	f002 fa10 	bl	8002e5c <BSP_LED_On>
  BSP_LED_Off(LED_RED);
 8000a3c:	2002      	movs	r0, #2
 8000a3e:	f002 fa37 	bl	8002eb0 <BSP_LED_Off>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (fTC == true)
 8000a42:	4b80      	ldr	r3, [pc, #512]	@ (8000c44 <main+0x320>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	2b01      	cmp	r3, #1
 8000a48:	d105      	bne.n	8000a56 <main+0x132>
	  {
		  fTC = false;
 8000a4a:	4b7e      	ldr	r3, [pc, #504]	@ (8000c44 <main+0x320>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	701a      	strb	r2, [r3, #0]

		  SVCmdDecoding(sv);
 8000a50:	487d      	ldr	r0, [pc, #500]	@ (8000c48 <main+0x324>)
 8000a52:	f002 f90b 	bl	8002c6c <SVCmdDecoding>

	  } // if (fTC == true)

	  if (fTemp == true)
 8000a56:	4b7d      	ldr	r3, [pc, #500]	@ (8000c4c <main+0x328>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d105      	bne.n	8000a6a <main+0x146>
	  {
		  fTemp = false;
 8000a5e:	4b7b      	ldr	r3, [pc, #492]	@ (8000c4c <main+0x328>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	701a      	strb	r2, [r3, #0]
		  GetTemp(TC);
 8000a64:	487a      	ldr	r0, [pc, #488]	@ (8000c50 <main+0x32c>)
 8000a66:	f002 f857 	bl	8002b18 <GetTemp>
	  }

	  if (f10ms == true)
 8000a6a:	4b7a      	ldr	r3, [pc, #488]	@ (8000c54 <main+0x330>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	2b01      	cmp	r3, #1
 8000a70:	f040 80d3 	bne.w	8000c1a <main+0x2f6>
	  {
		  f10ms = false;
 8000a74:	4b77      	ldr	r3, [pc, #476]	@ (8000c54 <main+0x330>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	701a      	strb	r2, [r3, #0]

		  uint8_t tx_buf[512]={0};
 8000a7a:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8000a7e:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000a82:	4618      	mov	r0, r3
 8000a84:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a88:	461a      	mov	r2, r3
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	f00f fdc8 	bl	8010620 <memset>
		  uint8_t temp_buf[32]={0};
 8000a90:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8000a94:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8000a98:	4618      	mov	r0, r3
 8000a9a:	2320      	movs	r3, #32
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	f00f fdbe 	bl	8010620 <memset>

		  SVUpdate(sv);
 8000aa4:	4868      	ldr	r0, [pc, #416]	@ (8000c48 <main+0x324>)
 8000aa6:	f000 fce5 	bl	8001474 <SVUpdate>
		  MAX3188_StartRead();
 8000aaa:	f001 ffc1 	bl	8002a30 <MAX3188_StartRead>

		  sprintf((char*)tx_buf,"IGRVT_SV,%lu",systemtick);
 8000aae:	4b6a      	ldr	r3, [pc, #424]	@ (8000c58 <main+0x334>)
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ab6:	4969      	ldr	r1, [pc, #420]	@ (8000c5c <main+0x338>)
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f00f fcb7 	bl	801042c <siprintf>
		  for (uint8_t i = 0; i < MAX_SV_NUM; i++)
 8000abe:	2300      	movs	r3, #0
 8000ac0:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
 8000ac4:	e015      	b.n	8000af2 <main+0x1ce>
		  {
			  sprintf((char*)temp_buf,",%u",sv[i]);
 8000ac6:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
 8000aca:	4a5f      	ldr	r2, [pc, #380]	@ (8000c48 <main+0x324>)
 8000acc:	5cd3      	ldrb	r3, [r2, r3]
 8000ace:	461a      	mov	r2, r3
 8000ad0:	1d3b      	adds	r3, r7, #4
 8000ad2:	4963      	ldr	r1, [pc, #396]	@ (8000c60 <main+0x33c>)
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f00f fca9 	bl	801042c <siprintf>
			  strcat((char*)tx_buf,(char*)temp_buf);
 8000ada:	1d3a      	adds	r2, r7, #4
 8000adc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ae0:	4611      	mov	r1, r2
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f00f fda4 	bl	8010630 <strcat>
		  for (uint8_t i = 0; i < MAX_SV_NUM; i++)
 8000ae8:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
 8000aec:	3301      	adds	r3, #1
 8000aee:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
 8000af2:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
 8000af6:	2b09      	cmp	r3, #9
 8000af8:	d9e5      	bls.n	8000ac6 <main+0x1a2>
		  }
		  sprintf((char*)temp_buf,"\r\n");
 8000afa:	1d3b      	adds	r3, r7, #4
 8000afc:	4959      	ldr	r1, [pc, #356]	@ (8000c64 <main+0x340>)
 8000afe:	4618      	mov	r0, r3
 8000b00:	f00f fc94 	bl	801042c <siprintf>
		  strcat((char*)tx_buf,(char*)temp_buf);
 8000b04:	1d3a      	adds	r2, r7, #4
 8000b06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b0a:	4611      	mov	r1, r2
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f00f fd8f 	bl	8010630 <strcat>

		  SendTM(tx_buf);
 8000b12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b16:	4618      	mov	r0, r3
 8000b18:	f002 f890 	bl	8002c3c <SendTM>

		  sprintf((char*)tx_buf,"IGRVT_TC,%lu",systemtick);
 8000b1c:	4b4e      	ldr	r3, [pc, #312]	@ (8000c58 <main+0x334>)
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b24:	4950      	ldr	r1, [pc, #320]	@ (8000c68 <main+0x344>)
 8000b26:	4618      	mov	r0, r3
 8000b28:	f00f fc80 	bl	801042c <siprintf>
		  for (uint8_t i = 0; i < MAX_TC_CH; i++)
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	f887 322a 	strb.w	r3, [r7, #554]	@ 0x22a
 8000b32:	e01f      	b.n	8000b74 <main+0x250>
		  {
			  sprintf((char*)temp_buf,",%d",(int)(TC[i]*10.0));
 8000b34:	f897 322a 	ldrb.w	r3, [r7, #554]	@ 0x22a
 8000b38:	4a45      	ldr	r2, [pc, #276]	@ (8000c50 <main+0x32c>)
 8000b3a:	00db      	lsls	r3, r3, #3
 8000b3c:	4413      	add	r3, r2
 8000b3e:	ed93 7b00 	vldr	d7, [r3]
 8000b42:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8000b46:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000b4a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000b4e:	1d3b      	adds	r3, r7, #4
 8000b50:	ee17 2a90 	vmov	r2, s15
 8000b54:	4945      	ldr	r1, [pc, #276]	@ (8000c6c <main+0x348>)
 8000b56:	4618      	mov	r0, r3
 8000b58:	f00f fc68 	bl	801042c <siprintf>
			  strcat((char*)tx_buf,(char*)temp_buf);
 8000b5c:	1d3a      	adds	r2, r7, #4
 8000b5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b62:	4611      	mov	r1, r2
 8000b64:	4618      	mov	r0, r3
 8000b66:	f00f fd63 	bl	8010630 <strcat>
		  for (uint8_t i = 0; i < MAX_TC_CH; i++)
 8000b6a:	f897 322a 	ldrb.w	r3, [r7, #554]	@ 0x22a
 8000b6e:	3301      	adds	r3, #1
 8000b70:	f887 322a 	strb.w	r3, [r7, #554]	@ 0x22a
 8000b74:	f897 322a 	ldrb.w	r3, [r7, #554]	@ 0x22a
 8000b78:	2b0b      	cmp	r3, #11
 8000b7a:	d9db      	bls.n	8000b34 <main+0x210>
		  }
		  sprintf((char*)temp_buf,"\r\n");
 8000b7c:	1d3b      	adds	r3, r7, #4
 8000b7e:	4939      	ldr	r1, [pc, #228]	@ (8000c64 <main+0x340>)
 8000b80:	4618      	mov	r0, r3
 8000b82:	f00f fc53 	bl	801042c <siprintf>
		  strcat((char*)tx_buf,(char*)temp_buf);
 8000b86:	1d3a      	adds	r2, r7, #4
 8000b88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b8c:	4611      	mov	r1, r2
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f00f fd4e 	bl	8010630 <strcat>

		  SendTM(tx_buf);
 8000b94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f002 f84f 	bl	8002c3c <SendTM>

		  GetADCRaw(ADC_results);
 8000b9e:	4834      	ldr	r0, [pc, #208]	@ (8000c70 <main+0x34c>)
 8000ba0:	f000 fc58 	bl	8001454 <GetADCRaw>

		  sprintf((char*)tx_buf,"IGRVT_PT,%lu",systemtick);
 8000ba4:	4b2c      	ldr	r3, [pc, #176]	@ (8000c58 <main+0x334>)
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bac:	4931      	ldr	r1, [pc, #196]	@ (8000c74 <main+0x350>)
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f00f fc3c 	bl	801042c <siprintf>
		  for (uint8_t i = 0; i < MAX_TC_CH; i++)
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	f887 3229 	strb.w	r3, [r7, #553]	@ 0x229
 8000bba:	e016      	b.n	8000bea <main+0x2c6>
		  {
			  sprintf((char*)temp_buf,",%u",ADC_results[i]);
 8000bbc:	f897 3229 	ldrb.w	r3, [r7, #553]	@ 0x229
 8000bc0:	4a2b      	ldr	r2, [pc, #172]	@ (8000c70 <main+0x34c>)
 8000bc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	1d3b      	adds	r3, r7, #4
 8000bca:	4925      	ldr	r1, [pc, #148]	@ (8000c60 <main+0x33c>)
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f00f fc2d 	bl	801042c <siprintf>
			  strcat((char*)tx_buf,(char*)temp_buf);
 8000bd2:	1d3a      	adds	r2, r7, #4
 8000bd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bd8:	4611      	mov	r1, r2
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f00f fd28 	bl	8010630 <strcat>
		  for (uint8_t i = 0; i < MAX_TC_CH; i++)
 8000be0:	f897 3229 	ldrb.w	r3, [r7, #553]	@ 0x229
 8000be4:	3301      	adds	r3, #1
 8000be6:	f887 3229 	strb.w	r3, [r7, #553]	@ 0x229
 8000bea:	f897 3229 	ldrb.w	r3, [r7, #553]	@ 0x229
 8000bee:	2b0b      	cmp	r3, #11
 8000bf0:	d9e4      	bls.n	8000bbc <main+0x298>
		  }
		  sprintf((char*)temp_buf,"\r\n");
 8000bf2:	1d3b      	adds	r3, r7, #4
 8000bf4:	491b      	ldr	r1, [pc, #108]	@ (8000c64 <main+0x340>)
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f00f fc18 	bl	801042c <siprintf>
		  strcat((char*)tx_buf,(char*)temp_buf);
 8000bfc:	1d3a      	adds	r2, r7, #4
 8000bfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c02:	4611      	mov	r1, r2
 8000c04:	4618      	mov	r0, r3
 8000c06:	f00f fd13 	bl	8010630 <strcat>

		  SendTM(tx_buf);
 8000c0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f002 f814 	bl	8002c3c <SendTM>

		  BSP_LED_Toggle(LED_YELLOW);
 8000c14:	2001      	movs	r0, #1
 8000c16:	f002 f975 	bl	8002f04 <BSP_LED_Toggle>
	  } //if (f10ms == true)

	  if (f1000ms == true)
 8000c1a:	4b17      	ldr	r3, [pc, #92]	@ (8000c78 <main+0x354>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	f47f af0f 	bne.w	8000a42 <main+0x11e>
	  {
		  f1000ms = false;//
 8000c24:	4b14      	ldr	r3, [pc, #80]	@ (8000c78 <main+0x354>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	701a      	strb	r2, [r3, #0]
		  BSP_LED_Toggle(LED_RED);
 8000c2a:	2002      	movs	r0, #2
 8000c2c:	f002 f96a 	bl	8002f04 <BSP_LED_Toggle>
	  if (fTC == true)
 8000c30:	e707      	b.n	8000a42 <main+0x11e>
 8000c32:	bf00      	nop
 8000c34:	58024400 	.word	0x58024400
 8000c38:	2400038c 	.word	0x2400038c
 8000c3c:	24000214 	.word	0x24000214
 8000c40:	080126a0 	.word	0x080126a0
 8000c44:	24000588 	.word	0x24000588
 8000c48:	240004d8 	.word	0x240004d8
 8000c4c:	24000520 	.word	0x24000520
 8000c50:	24000478 	.word	0x24000478
 8000c54:	24000471 	.word	0x24000471
 8000c58:	2400046c 	.word	0x2400046c
 8000c5c:	080126bc 	.word	0x080126bc
 8000c60:	080126cc 	.word	0x080126cc
 8000c64:	080126d0 	.word	0x080126d0
 8000c68:	080126d4 	.word	0x080126d4
 8000c6c:	080126e4 	.word	0x080126e4
 8000c70:	240004e4 	.word	0x240004e4
 8000c74:	080126e8 	.word	0x080126e8
 8000c78:	24000473 	.word	0x24000473

08000c7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b09c      	sub	sp, #112	@ 0x70
 8000c80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c86:	224c      	movs	r2, #76	@ 0x4c
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f00f fcc8 	bl	8010620 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c90:	1d3b      	adds	r3, r7, #4
 8000c92:	2220      	movs	r2, #32
 8000c94:	2100      	movs	r1, #0
 8000c96:	4618      	mov	r0, r3
 8000c98:	f00f fcc2 	bl	8010620 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000c9c:	2004      	movs	r0, #4
 8000c9e:	f007 faa5 	bl	80081ec <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	603b      	str	r3, [r7, #0]
 8000ca6:	4b31      	ldr	r3, [pc, #196]	@ (8000d6c <SystemClock_Config+0xf0>)
 8000ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000caa:	4a30      	ldr	r2, [pc, #192]	@ (8000d6c <SystemClock_Config+0xf0>)
 8000cac:	f023 0301 	bic.w	r3, r3, #1
 8000cb0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000cb2:	4b2e      	ldr	r3, [pc, #184]	@ (8000d6c <SystemClock_Config+0xf0>)
 8000cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	603b      	str	r3, [r7, #0]
 8000cbc:	4b2c      	ldr	r3, [pc, #176]	@ (8000d70 <SystemClock_Config+0xf4>)
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000cc4:	4a2a      	ldr	r2, [pc, #168]	@ (8000d70 <SystemClock_Config+0xf4>)
 8000cc6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cca:	6193      	str	r3, [r2, #24]
 8000ccc:	4b28      	ldr	r3, [pc, #160]	@ (8000d70 <SystemClock_Config+0xf4>)
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000cd4:	603b      	str	r3, [r7, #0]
 8000cd6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000cd8:	bf00      	nop
 8000cda:	4b25      	ldr	r3, [pc, #148]	@ (8000d70 <SystemClock_Config+0xf4>)
 8000cdc:	699b      	ldr	r3, [r3, #24]
 8000cde:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ce2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000ce6:	d1f8      	bne.n	8000cda <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000cec:	2301      	movs	r3, #1
 8000cee:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cf0:	2340      	movs	r3, #64	@ 0x40
 8000cf2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000cfc:	2304      	movs	r3, #4
 8000cfe:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000d00:	230a      	movs	r3, #10
 8000d02:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d04:	2302      	movs	r3, #2
 8000d06:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000d10:	230c      	movs	r3, #12
 8000d12:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000d14:	2302      	movs	r3, #2
 8000d16:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d20:	4618      	mov	r0, r3
 8000d22:	f007 fabd 	bl	80082a0 <HAL_RCC_OscConfig>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000d2c:	f000 fb7a 	bl	8001424 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d30:	233f      	movs	r3, #63	@ 0x3f
 8000d32:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d34:	2300      	movs	r3, #0
 8000d36:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d44:	2340      	movs	r3, #64	@ 0x40
 8000d46:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d50:	1d3b      	adds	r3, r7, #4
 8000d52:	2101      	movs	r1, #1
 8000d54:	4618      	mov	r0, r3
 8000d56:	f007 fefd 	bl	8008b54 <HAL_RCC_ClockConfig>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000d60:	f000 fb60 	bl	8001424 <Error_Handler>
  }
}
 8000d64:	bf00      	nop
 8000d66:	3770      	adds	r7, #112	@ 0x70
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	58000400 	.word	0x58000400
 8000d70:	58024800 	.word	0x58024800

08000d74 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08a      	sub	sp, #40	@ 0x28
 8000d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000d7a:	f107 031c 	add.w	r3, r7, #28
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	605a      	str	r2, [r3, #4]
 8000d84:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d86:	463b      	mov	r3, r7
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	611a      	str	r2, [r3, #16]
 8000d94:	615a      	str	r2, [r3, #20]
 8000d96:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d98:	4b8a      	ldr	r3, [pc, #552]	@ (8000fc4 <MX_ADC1_Init+0x250>)
 8000d9a:	4a8b      	ldr	r2, [pc, #556]	@ (8000fc8 <MX_ADC1_Init+0x254>)
 8000d9c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV64;
 8000d9e:	4b89      	ldr	r3, [pc, #548]	@ (8000fc4 <MX_ADC1_Init+0x250>)
 8000da0:	f44f 1210 	mov.w	r2, #2359296	@ 0x240000
 8000da4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000da6:	4b87      	ldr	r3, [pc, #540]	@ (8000fc4 <MX_ADC1_Init+0x250>)
 8000da8:	2208      	movs	r2, #8
 8000daa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000dac:	4b85      	ldr	r3, [pc, #532]	@ (8000fc4 <MX_ADC1_Init+0x250>)
 8000dae:	2201      	movs	r2, #1
 8000db0:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000db2:	4b84      	ldr	r3, [pc, #528]	@ (8000fc4 <MX_ADC1_Init+0x250>)
 8000db4:	2208      	movs	r2, #8
 8000db6:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000db8:	4b82      	ldr	r3, [pc, #520]	@ (8000fc4 <MX_ADC1_Init+0x250>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000dbe:	4b81      	ldr	r3, [pc, #516]	@ (8000fc4 <MX_ADC1_Init+0x250>)
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 13;
 8000dc4:	4b7f      	ldr	r3, [pc, #508]	@ (8000fc4 <MX_ADC1_Init+0x250>)
 8000dc6:	220d      	movs	r2, #13
 8000dc8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dca:	4b7e      	ldr	r3, [pc, #504]	@ (8000fc4 <MX_ADC1_Init+0x250>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dd0:	4b7c      	ldr	r3, [pc, #496]	@ (8000fc4 <MX_ADC1_Init+0x250>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dd6:	4b7b      	ldr	r3, [pc, #492]	@ (8000fc4 <MX_ADC1_Init+0x250>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000ddc:	4b79      	ldr	r3, [pc, #484]	@ (8000fc4 <MX_ADC1_Init+0x250>)
 8000dde:	2203      	movs	r2, #3
 8000de0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000de2:	4b78      	ldr	r3, [pc, #480]	@ (8000fc4 <MX_ADC1_Init+0x250>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000de8:	4b76      	ldr	r3, [pc, #472]	@ (8000fc4 <MX_ADC1_Init+0x250>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000dee:	4b75      	ldr	r3, [pc, #468]	@ (8000fc4 <MX_ADC1_Init+0x250>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8000df6:	4b73      	ldr	r3, [pc, #460]	@ (8000fc4 <MX_ADC1_Init+0x250>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dfc:	4871      	ldr	r0, [pc, #452]	@ (8000fc4 <MX_ADC1_Init+0x250>)
 8000dfe:	f002 fcfd 	bl	80037fc <HAL_ADC_Init>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000e08:	f000 fb0c 	bl	8001424 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e10:	f107 031c 	add.w	r3, r7, #28
 8000e14:	4619      	mov	r1, r3
 8000e16:	486b      	ldr	r0, [pc, #428]	@ (8000fc4 <MX_ADC1_Init+0x250>)
 8000e18:	f003 ff2a 	bl	8004c70 <HAL_ADCEx_MultiModeConfigChannel>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000e22:	f000 faff 	bl	8001424 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000e26:	4b69      	ldr	r3, [pc, #420]	@ (8000fcc <MX_ADC1_Init+0x258>)
 8000e28:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e2a:	2306      	movs	r3, #6
 8000e2c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e32:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000e36:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e38:	2304      	movs	r3, #4
 8000e3a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000e40:	2300      	movs	r3, #0
 8000e42:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e44:	463b      	mov	r3, r7
 8000e46:	4619      	mov	r1, r3
 8000e48:	485e      	ldr	r0, [pc, #376]	@ (8000fc4 <MX_ADC1_Init+0x250>)
 8000e4a:	f003 f99f 	bl	800418c <HAL_ADC_ConfigChannel>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000e54:	f000 fae6 	bl	8001424 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000e58:	4b5d      	ldr	r3, [pc, #372]	@ (8000fd0 <MX_ADC1_Init+0x25c>)
 8000e5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000e5c:	230c      	movs	r3, #12
 8000e5e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e60:	463b      	mov	r3, r7
 8000e62:	4619      	mov	r1, r3
 8000e64:	4857      	ldr	r0, [pc, #348]	@ (8000fc4 <MX_ADC1_Init+0x250>)
 8000e66:	f003 f991 	bl	800418c <HAL_ADC_ConfigChannel>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000e70:	f000 fad8 	bl	8001424 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000e74:	4b57      	ldr	r3, [pc, #348]	@ (8000fd4 <MX_ADC1_Init+0x260>)
 8000e76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000e78:	2312      	movs	r3, #18
 8000e7a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e7c:	463b      	mov	r3, r7
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4850      	ldr	r0, [pc, #320]	@ (8000fc4 <MX_ADC1_Init+0x250>)
 8000e82:	f003 f983 	bl	800418c <HAL_ADC_ConfigChannel>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000e8c:	f000 faca 	bl	8001424 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000e90:	4b51      	ldr	r3, [pc, #324]	@ (8000fd8 <MX_ADC1_Init+0x264>)
 8000e92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000e94:	2318      	movs	r3, #24
 8000e96:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e98:	463b      	mov	r3, r7
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4849      	ldr	r0, [pc, #292]	@ (8000fc4 <MX_ADC1_Init+0x250>)
 8000e9e:	f003 f975 	bl	800418c <HAL_ADC_ConfigChannel>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8000ea8:	f000 fabc 	bl	8001424 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000eac:	4b4b      	ldr	r3, [pc, #300]	@ (8000fdc <MX_ADC1_Init+0x268>)
 8000eae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000eb0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000eb4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eb6:	463b      	mov	r3, r7
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4842      	ldr	r0, [pc, #264]	@ (8000fc4 <MX_ADC1_Init+0x250>)
 8000ebc:	f003 f966 	bl	800418c <HAL_ADC_ConfigChannel>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_ADC1_Init+0x156>
  {
    Error_Handler();
 8000ec6:	f000 faad 	bl	8001424 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000eca:	4b45      	ldr	r3, [pc, #276]	@ (8000fe0 <MX_ADC1_Init+0x26c>)
 8000ecc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000ece:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8000ed2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ed4:	463b      	mov	r3, r7
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	483a      	ldr	r0, [pc, #232]	@ (8000fc4 <MX_ADC1_Init+0x250>)
 8000eda:	f003 f957 	bl	800418c <HAL_ADC_ConfigChannel>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_ADC1_Init+0x174>
  {
    Error_Handler();
 8000ee4:	f000 fa9e 	bl	8001424 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000ee8:	4b3e      	ldr	r3, [pc, #248]	@ (8000fe4 <MX_ADC1_Init+0x270>)
 8000eea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000eec:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 8000ef0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ef2:	463b      	mov	r3, r7
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4833      	ldr	r0, [pc, #204]	@ (8000fc4 <MX_ADC1_Init+0x250>)
 8000ef8:	f003 f948 	bl	800418c <HAL_ADC_ConfigChannel>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_ADC1_Init+0x192>
  {
    Error_Handler();
 8000f02:	f000 fa8f 	bl	8001424 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000f06:	4b38      	ldr	r3, [pc, #224]	@ (8000fe8 <MX_ADC1_Init+0x274>)
 8000f08:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000f0a:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8000f0e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f10:	463b      	mov	r3, r7
 8000f12:	4619      	mov	r1, r3
 8000f14:	482b      	ldr	r0, [pc, #172]	@ (8000fc4 <MX_ADC1_Init+0x250>)
 8000f16:	f003 f939 	bl	800418c <HAL_ADC_ConfigChannel>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_ADC1_Init+0x1b0>
  {
    Error_Handler();
 8000f20:	f000 fa80 	bl	8001424 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000f24:	4b31      	ldr	r3, [pc, #196]	@ (8000fec <MX_ADC1_Init+0x278>)
 8000f26:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000f28:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8000f2c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f2e:	463b      	mov	r3, r7
 8000f30:	4619      	mov	r1, r3
 8000f32:	4824      	ldr	r0, [pc, #144]	@ (8000fc4 <MX_ADC1_Init+0x250>)
 8000f34:	f003 f92a 	bl	800418c <HAL_ADC_ConfigChannel>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_ADC1_Init+0x1ce>
  {
    Error_Handler();
 8000f3e:	f000 fa71 	bl	8001424 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000f42:	4b2b      	ldr	r3, [pc, #172]	@ (8000ff0 <MX_ADC1_Init+0x27c>)
 8000f44:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000f46:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f4a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f4c:	463b      	mov	r3, r7
 8000f4e:	4619      	mov	r1, r3
 8000f50:	481c      	ldr	r0, [pc, #112]	@ (8000fc4 <MX_ADC1_Init+0x250>)
 8000f52:	f003 f91b 	bl	800418c <HAL_ADC_ConfigChannel>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_ADC1_Init+0x1ec>
  {
    Error_Handler();
 8000f5c:	f000 fa62 	bl	8001424 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8000f60:	4b24      	ldr	r3, [pc, #144]	@ (8000ff4 <MX_ADC1_Init+0x280>)
 8000f62:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8000f64:	f240 2306 	movw	r3, #518	@ 0x206
 8000f68:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f6a:	463b      	mov	r3, r7
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4815      	ldr	r0, [pc, #84]	@ (8000fc4 <MX_ADC1_Init+0x250>)
 8000f70:	f003 f90c 	bl	800418c <HAL_ADC_ConfigChannel>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_ADC1_Init+0x20a>
  {
    Error_Handler();
 8000f7a:	f000 fa53 	bl	8001424 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 8000f7e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ff8 <MX_ADC1_Init+0x284>)
 8000f80:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8000f82:	f44f 7303 	mov.w	r3, #524	@ 0x20c
 8000f86:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f88:	463b      	mov	r3, r7
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	480d      	ldr	r0, [pc, #52]	@ (8000fc4 <MX_ADC1_Init+0x250>)
 8000f8e:	f003 f8fd 	bl	800418c <HAL_ADC_ConfigChannel>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_ADC1_Init+0x228>
  {
    Error_Handler();
 8000f98:	f000 fa44 	bl	8001424 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 8000f9c:	4b17      	ldr	r3, [pc, #92]	@ (8000ffc <MX_ADC1_Init+0x288>)
 8000f9e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8000fa0:	f240 2312 	movw	r3, #530	@ 0x212
 8000fa4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fa6:	463b      	mov	r3, r7
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4806      	ldr	r0, [pc, #24]	@ (8000fc4 <MX_ADC1_Init+0x250>)
 8000fac:	f003 f8ee 	bl	800418c <HAL_ADC_ConfigChannel>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_ADC1_Init+0x246>
  {
    Error_Handler();
 8000fb6:	f000 fa35 	bl	8001424 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fba:	bf00      	nop
 8000fbc:	3728      	adds	r7, #40	@ 0x28
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	24000228 	.word	0x24000228
 8000fc8:	40022000 	.word	0x40022000
 8000fcc:	08600004 	.word	0x08600004
 8000fd0:	0c900008 	.word	0x0c900008
 8000fd4:	10c00010 	.word	0x10c00010
 8000fd8:	1d500080 	.word	0x1d500080
 8000fdc:	21800100 	.word	0x21800100
 8000fe0:	2a000400 	.word	0x2a000400
 8000fe4:	2e300800 	.word	0x2e300800
 8000fe8:	3ac04000 	.word	0x3ac04000
 8000fec:	3ef08000 	.word	0x3ef08000
 8000ff0:	43210000 	.word	0x43210000
 8000ff4:	47520000 	.word	0x47520000
 8000ff8:	4b840000 	.word	0x4b840000
 8000ffc:	4fb80000 	.word	0x4fb80000

08001000 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001004:	4b27      	ldr	r3, [pc, #156]	@ (80010a4 <MX_SPI1_Init+0xa4>)
 8001006:	4a28      	ldr	r2, [pc, #160]	@ (80010a8 <MX_SPI1_Init+0xa8>)
 8001008:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800100a:	4b26      	ldr	r3, [pc, #152]	@ (80010a4 <MX_SPI1_Init+0xa4>)
 800100c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001010:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001012:	4b24      	ldr	r3, [pc, #144]	@ (80010a4 <MX_SPI1_Init+0xa4>)
 8001014:	2200      	movs	r2, #0
 8001016:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001018:	4b22      	ldr	r3, [pc, #136]	@ (80010a4 <MX_SPI1_Init+0xa4>)
 800101a:	2207      	movs	r2, #7
 800101c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800101e:	4b21      	ldr	r3, [pc, #132]	@ (80010a4 <MX_SPI1_Init+0xa4>)
 8001020:	2200      	movs	r2, #0
 8001022:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001024:	4b1f      	ldr	r3, [pc, #124]	@ (80010a4 <MX_SPI1_Init+0xa4>)
 8001026:	2200      	movs	r2, #0
 8001028:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800102a:	4b1e      	ldr	r3, [pc, #120]	@ (80010a4 <MX_SPI1_Init+0xa4>)
 800102c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001030:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001032:	4b1c      	ldr	r3, [pc, #112]	@ (80010a4 <MX_SPI1_Init+0xa4>)
 8001034:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8001038:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800103a:	4b1a      	ldr	r3, [pc, #104]	@ (80010a4 <MX_SPI1_Init+0xa4>)
 800103c:	2200      	movs	r2, #0
 800103e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001040:	4b18      	ldr	r3, [pc, #96]	@ (80010a4 <MX_SPI1_Init+0xa4>)
 8001042:	2200      	movs	r2, #0
 8001044:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001046:	4b17      	ldr	r3, [pc, #92]	@ (80010a4 <MX_SPI1_Init+0xa4>)
 8001048:	2200      	movs	r2, #0
 800104a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800104c:	4b15      	ldr	r3, [pc, #84]	@ (80010a4 <MX_SPI1_Init+0xa4>)
 800104e:	2200      	movs	r2, #0
 8001050:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001052:	4b14      	ldr	r3, [pc, #80]	@ (80010a4 <MX_SPI1_Init+0xa4>)
 8001054:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001058:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800105a:	4b12      	ldr	r3, [pc, #72]	@ (80010a4 <MX_SPI1_Init+0xa4>)
 800105c:	2200      	movs	r2, #0
 800105e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001060:	4b10      	ldr	r3, [pc, #64]	@ (80010a4 <MX_SPI1_Init+0xa4>)
 8001062:	2200      	movs	r2, #0
 8001064:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001066:	4b0f      	ldr	r3, [pc, #60]	@ (80010a4 <MX_SPI1_Init+0xa4>)
 8001068:	2200      	movs	r2, #0
 800106a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800106c:	4b0d      	ldr	r3, [pc, #52]	@ (80010a4 <MX_SPI1_Init+0xa4>)
 800106e:	2200      	movs	r2, #0
 8001070:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001072:	4b0c      	ldr	r3, [pc, #48]	@ (80010a4 <MX_SPI1_Init+0xa4>)
 8001074:	2200      	movs	r2, #0
 8001076:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001078:	4b0a      	ldr	r3, [pc, #40]	@ (80010a4 <MX_SPI1_Init+0xa4>)
 800107a:	2200      	movs	r2, #0
 800107c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800107e:	4b09      	ldr	r3, [pc, #36]	@ (80010a4 <MX_SPI1_Init+0xa4>)
 8001080:	2200      	movs	r2, #0
 8001082:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001084:	4b07      	ldr	r3, [pc, #28]	@ (80010a4 <MX_SPI1_Init+0xa4>)
 8001086:	2200      	movs	r2, #0
 8001088:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800108a:	4b06      	ldr	r3, [pc, #24]	@ (80010a4 <MX_SPI1_Init+0xa4>)
 800108c:	2200      	movs	r2, #0
 800108e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001090:	4804      	ldr	r0, [pc, #16]	@ (80010a4 <MX_SPI1_Init+0xa4>)
 8001092:	f00a fde9 	bl	800bc68 <HAL_SPI_Init>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 800109c:	f000 f9c2 	bl	8001424 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010a0:	bf00      	nop
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	24000304 	.word	0x24000304
 80010a8:	40013000 	.word	0x40013000

080010ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b088      	sub	sp, #32
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010b2:	f107 0310 	add.w	r3, r7, #16
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c0:	1d3b      	adds	r3, r7, #4
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]
 80010c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001144 <MX_TIM2_Init+0x98>)
 80010cc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010d0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 80010d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001144 <MX_TIM2_Init+0x98>)
 80010d4:	223f      	movs	r2, #63	@ 0x3f
 80010d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001144 <MX_TIM2_Init+0x98>)
 80010da:	2200      	movs	r2, #0
 80010dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80010de:	4b19      	ldr	r3, [pc, #100]	@ (8001144 <MX_TIM2_Init+0x98>)
 80010e0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80010e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010e6:	4b17      	ldr	r3, [pc, #92]	@ (8001144 <MX_TIM2_Init+0x98>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ec:	4b15      	ldr	r3, [pc, #84]	@ (8001144 <MX_TIM2_Init+0x98>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010f2:	4814      	ldr	r0, [pc, #80]	@ (8001144 <MX_TIM2_Init+0x98>)
 80010f4:	f00b fadd 	bl	800c6b2 <HAL_TIM_Base_Init>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80010fe:	f000 f991 	bl	8001424 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001102:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001106:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001108:	f107 0310 	add.w	r3, r7, #16
 800110c:	4619      	mov	r1, r3
 800110e:	480d      	ldr	r0, [pc, #52]	@ (8001144 <MX_TIM2_Init+0x98>)
 8001110:	f00b fca6 	bl	800ca60 <HAL_TIM_ConfigClockSource>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800111a:	f000 f983 	bl	8001424 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800111e:	2300      	movs	r3, #0
 8001120:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001126:	1d3b      	adds	r3, r7, #4
 8001128:	4619      	mov	r1, r3
 800112a:	4806      	ldr	r0, [pc, #24]	@ (8001144 <MX_TIM2_Init+0x98>)
 800112c:	f00b fef6 	bl	800cf1c <HAL_TIMEx_MasterConfigSynchronization>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001136:	f000 f975 	bl	8001424 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800113a:	bf00      	nop
 800113c:	3720      	adds	r7, #32
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	2400038c 	.word	0x2400038c

08001148 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800114c:	4b22      	ldr	r3, [pc, #136]	@ (80011d8 <MX_UART4_Init+0x90>)
 800114e:	4a23      	ldr	r2, [pc, #140]	@ (80011dc <MX_UART4_Init+0x94>)
 8001150:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 921600;
 8001152:	4b21      	ldr	r3, [pc, #132]	@ (80011d8 <MX_UART4_Init+0x90>)
 8001154:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8001158:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800115a:	4b1f      	ldr	r3, [pc, #124]	@ (80011d8 <MX_UART4_Init+0x90>)
 800115c:	2200      	movs	r2, #0
 800115e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001160:	4b1d      	ldr	r3, [pc, #116]	@ (80011d8 <MX_UART4_Init+0x90>)
 8001162:	2200      	movs	r2, #0
 8001164:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001166:	4b1c      	ldr	r3, [pc, #112]	@ (80011d8 <MX_UART4_Init+0x90>)
 8001168:	2200      	movs	r2, #0
 800116a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800116c:	4b1a      	ldr	r3, [pc, #104]	@ (80011d8 <MX_UART4_Init+0x90>)
 800116e:	220c      	movs	r2, #12
 8001170:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001172:	4b19      	ldr	r3, [pc, #100]	@ (80011d8 <MX_UART4_Init+0x90>)
 8001174:	2200      	movs	r2, #0
 8001176:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001178:	4b17      	ldr	r3, [pc, #92]	@ (80011d8 <MX_UART4_Init+0x90>)
 800117a:	2200      	movs	r2, #0
 800117c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800117e:	4b16      	ldr	r3, [pc, #88]	@ (80011d8 <MX_UART4_Init+0x90>)
 8001180:	2200      	movs	r2, #0
 8001182:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001184:	4b14      	ldr	r3, [pc, #80]	@ (80011d8 <MX_UART4_Init+0x90>)
 8001186:	2200      	movs	r2, #0
 8001188:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800118a:	4b13      	ldr	r3, [pc, #76]	@ (80011d8 <MX_UART4_Init+0x90>)
 800118c:	2200      	movs	r2, #0
 800118e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001190:	4811      	ldr	r0, [pc, #68]	@ (80011d8 <MX_UART4_Init+0x90>)
 8001192:	f00b ff6f 	bl	800d074 <HAL_UART_Init>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 800119c:	f000 f942 	bl	8001424 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011a0:	2100      	movs	r1, #0
 80011a2:	480d      	ldr	r0, [pc, #52]	@ (80011d8 <MX_UART4_Init+0x90>)
 80011a4:	f00e fae7 	bl	800f776 <HAL_UARTEx_SetTxFifoThreshold>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80011ae:	f000 f939 	bl	8001424 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011b2:	2100      	movs	r1, #0
 80011b4:	4808      	ldr	r0, [pc, #32]	@ (80011d8 <MX_UART4_Init+0x90>)
 80011b6:	f00e fb1c 	bl	800f7f2 <HAL_UARTEx_SetRxFifoThreshold>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80011c0:	f000 f930 	bl	8001424 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart4) != HAL_OK)
 80011c4:	4804      	ldr	r0, [pc, #16]	@ (80011d8 <MX_UART4_Init+0x90>)
 80011c6:	f00e fa9b 	bl	800f700 <HAL_UARTEx_EnableFifoMode>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80011d0:	f000 f928 	bl	8001424 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80011d4:	bf00      	nop
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	240003d8 	.word	0x240003d8
 80011dc:	40004c00 	.word	0x40004c00

080011e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011e6:	4b0d      	ldr	r3, [pc, #52]	@ (800121c <MX_DMA_Init+0x3c>)
 80011e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80011ec:	4a0b      	ldr	r2, [pc, #44]	@ (800121c <MX_DMA_Init+0x3c>)
 80011ee:	f043 0301 	orr.w	r3, r3, #1
 80011f2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80011f6:	4b09      	ldr	r3, [pc, #36]	@ (800121c <MX_DMA_Init+0x3c>)
 80011f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80011fc:	f003 0301 	and.w	r3, r3, #1
 8001200:	607b      	str	r3, [r7, #4]
 8001202:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001204:	2200      	movs	r2, #0
 8001206:	2100      	movs	r1, #0
 8001208:	200b      	movs	r0, #11
 800120a:	f003 feea 	bl	8004fe2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800120e:	200b      	movs	r0, #11
 8001210:	f003 ff01 	bl	8005016 <HAL_NVIC_EnableIRQ>

}
 8001214:	bf00      	nop
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	58024400 	.word	0x58024400

08001220 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08c      	sub	sp, #48	@ 0x30
 8001224:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001226:	f107 031c 	add.w	r3, r7, #28
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	605a      	str	r2, [r3, #4]
 8001230:	609a      	str	r2, [r3, #8]
 8001232:	60da      	str	r2, [r3, #12]
 8001234:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001236:	4b6b      	ldr	r3, [pc, #428]	@ (80013e4 <MX_GPIO_Init+0x1c4>)
 8001238:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800123c:	4a69      	ldr	r2, [pc, #420]	@ (80013e4 <MX_GPIO_Init+0x1c4>)
 800123e:	f043 0310 	orr.w	r3, r3, #16
 8001242:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001246:	4b67      	ldr	r3, [pc, #412]	@ (80013e4 <MX_GPIO_Init+0x1c4>)
 8001248:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800124c:	f003 0310 	and.w	r3, r3, #16
 8001250:	61bb      	str	r3, [r7, #24]
 8001252:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001254:	4b63      	ldr	r3, [pc, #396]	@ (80013e4 <MX_GPIO_Init+0x1c4>)
 8001256:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800125a:	4a62      	ldr	r2, [pc, #392]	@ (80013e4 <MX_GPIO_Init+0x1c4>)
 800125c:	f043 0320 	orr.w	r3, r3, #32
 8001260:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001264:	4b5f      	ldr	r3, [pc, #380]	@ (80013e4 <MX_GPIO_Init+0x1c4>)
 8001266:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800126a:	f003 0320 	and.w	r3, r3, #32
 800126e:	617b      	str	r3, [r7, #20]
 8001270:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001272:	4b5c      	ldr	r3, [pc, #368]	@ (80013e4 <MX_GPIO_Init+0x1c4>)
 8001274:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001278:	4a5a      	ldr	r2, [pc, #360]	@ (80013e4 <MX_GPIO_Init+0x1c4>)
 800127a:	f043 0304 	orr.w	r3, r3, #4
 800127e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001282:	4b58      	ldr	r3, [pc, #352]	@ (80013e4 <MX_GPIO_Init+0x1c4>)
 8001284:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001288:	f003 0304 	and.w	r3, r3, #4
 800128c:	613b      	str	r3, [r7, #16]
 800128e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001290:	4b54      	ldr	r3, [pc, #336]	@ (80013e4 <MX_GPIO_Init+0x1c4>)
 8001292:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001296:	4a53      	ldr	r2, [pc, #332]	@ (80013e4 <MX_GPIO_Init+0x1c4>)
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012a0:	4b50      	ldr	r3, [pc, #320]	@ (80013e4 <MX_GPIO_Init+0x1c4>)
 80012a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ae:	4b4d      	ldr	r3, [pc, #308]	@ (80013e4 <MX_GPIO_Init+0x1c4>)
 80012b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012b4:	4a4b      	ldr	r2, [pc, #300]	@ (80013e4 <MX_GPIO_Init+0x1c4>)
 80012b6:	f043 0308 	orr.w	r3, r3, #8
 80012ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012be:	4b49      	ldr	r3, [pc, #292]	@ (80013e4 <MX_GPIO_Init+0x1c4>)
 80012c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012c4:	f003 0308 	and.w	r3, r3, #8
 80012c8:	60bb      	str	r3, [r7, #8]
 80012ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012cc:	4b45      	ldr	r3, [pc, #276]	@ (80013e4 <MX_GPIO_Init+0x1c4>)
 80012ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012d2:	4a44      	ldr	r2, [pc, #272]	@ (80013e4 <MX_GPIO_Init+0x1c4>)
 80012d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012dc:	4b41      	ldr	r3, [pc, #260]	@ (80013e4 <MX_GPIO_Init+0x1c4>)
 80012de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012e6:	607b      	str	r3, [r7, #4]
 80012e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ea:	4b3e      	ldr	r3, [pc, #248]	@ (80013e4 <MX_GPIO_Init+0x1c4>)
 80012ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012f0:	4a3c      	ldr	r2, [pc, #240]	@ (80013e4 <MX_GPIO_Init+0x1c4>)
 80012f2:	f043 0302 	orr.w	r3, r3, #2
 80012f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012fa:	4b3a      	ldr	r3, [pc, #232]	@ (80013e4 <MX_GPIO_Init+0x1c4>)
 80012fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001300:	f003 0302 	and.w	r3, r3, #2
 8001304:	603b      	str	r3, [r7, #0]
 8001306:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001308:	2200      	movs	r2, #0
 800130a:	f64f 71fd 	movw	r1, #65533	@ 0xfffd
 800130e:	4836      	ldr	r0, [pc, #216]	@ (80013e8 <MX_GPIO_Init+0x1c8>)
 8001310:	f006 ff0a 	bl	8008128 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001314:	2200      	movs	r2, #0
 8001316:	f647 41ff 	movw	r1, #31999	@ 0x7cff
 800131a:	4834      	ldr	r0, [pc, #208]	@ (80013ec <MX_GPIO_Init+0x1cc>)
 800131c:	f006 ff04 	bl	8008128 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001320:	2200      	movs	r2, #0
 8001322:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 8001326:	4832      	ldr	r0, [pc, #200]	@ (80013f0 <MX_GPIO_Init+0x1d0>)
 8001328:	f006 fefe 	bl	8008128 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800132c:	f64f 73fd 	movw	r3, #65533	@ 0xfffd
 8001330:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001332:	2301      	movs	r3, #1
 8001334:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133a:	2300      	movs	r3, #0
 800133c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800133e:	f107 031c 	add.w	r3, r7, #28
 8001342:	4619      	mov	r1, r3
 8001344:	4828      	ldr	r0, [pc, #160]	@ (80013e8 <MX_GPIO_Init+0x1c8>)
 8001346:	f006 fd3f 	bl	8007dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 800134a:	f44f 7320 	mov.w	r3, #640	@ 0x280
 800134e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001350:	2303      	movs	r3, #3
 8001352:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001358:	f107 031c 	add.w	r3, r7, #28
 800135c:	4619      	mov	r1, r3
 800135e:	4825      	ldr	r0, [pc, #148]	@ (80013f4 <MX_GPIO_Init+0x1d4>)
 8001360:	f006 fd32 	bl	8007dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin PD11 PD12 PD13
                           PD14 PD0 PD1 PD2
                           PD3 PD4 PD5 PD6
                           PD7 */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001364:	f647 43ff 	movw	r3, #31999	@ 0x7cff
 8001368:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136a:	2301      	movs	r3, #1
 800136c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001372:	2300      	movs	r3, #0
 8001374:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001376:	f107 031c 	add.w	r3, r7, #28
 800137a:	4619      	mov	r1, r3
 800137c:	481b      	ldr	r0, [pc, #108]	@ (80013ec <MX_GPIO_Init+0x1cc>)
 800137e:	f006 fd23 	bl	8007dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001382:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001386:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001388:	2301      	movs	r3, #1
 800138a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001390:	2300      	movs	r3, #0
 8001392:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001394:	f107 031c 	add.w	r3, r7, #28
 8001398:	4619      	mov	r1, r3
 800139a:	4815      	ldr	r0, [pc, #84]	@ (80013f0 <MX_GPIO_Init+0x1d0>)
 800139c:	f006 fd14 	bl	8007dc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80013a0:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 80013a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a6:	2302      	movs	r3, #2
 80013a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ae:	2300      	movs	r3, #0
 80013b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80013b2:	230a      	movs	r3, #10
 80013b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b6:	f107 031c 	add.w	r3, r7, #28
 80013ba:	4619      	mov	r1, r3
 80013bc:	480e      	ldr	r0, [pc, #56]	@ (80013f8 <MX_GPIO_Init+0x1d8>)
 80013be:	f006 fd03 	bl	8007dc8 <HAL_GPIO_Init>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 80013c2:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 80013c6:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 80013ca:	f001 ffc5 	bl	8003358 <HAL_SYSCFG_AnalogSwitchConfig>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80013ce:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 80013d2:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 80013d6:	f001 ffbf 	bl	8003358 <HAL_SYSCFG_AnalogSwitchConfig>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80013da:	bf00      	nop
 80013dc:	3730      	adds	r7, #48	@ 0x30
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	58024400 	.word	0x58024400
 80013e8:	58021000 	.word	0x58021000
 80013ec:	58020c00 	.word	0x58020c00
 80013f0:	58020800 	.word	0x58020800
 80013f4:	58021400 	.word	0x58021400
 80013f8:	58020000 	.word	0x58020000

080013fc <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d102      	bne.n	8001412 <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 800140c:	4b04      	ldr	r3, [pc, #16]	@ (8001420 <BSP_PB_Callback+0x24>)
 800140e:	2201      	movs	r2, #1
 8001410:	601a      	str	r2, [r3, #0]
  }
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	24000224 	.word	0x24000224

08001424 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001428:	b672      	cpsid	i
}
 800142a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800142c:	bf00      	nop
 800142e:	e7fd      	b.n	800142c <Error_Handler+0x8>

08001430 <InitPT>:

extern void Error_Handler(void);


void InitPT(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
    if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, N_ADC_CH) != HAL_OK)
 8001434:	220d      	movs	r2, #13
 8001436:	4905      	ldr	r1, [pc, #20]	@ (800144c <InitPT+0x1c>)
 8001438:	4805      	ldr	r0, [pc, #20]	@ (8001450 <InitPT+0x20>)
 800143a:	f002 fb81 	bl	8003b40 <HAL_ADC_Start_DMA>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <InitPT+0x18>
    {
        Error_Handler();
 8001444:	f7ff ffee 	bl	8001424 <Error_Handler>
    }
}
 8001448:	bf00      	nop
 800144a:	bd80      	pop	{r7, pc}
 800144c:	24000500 	.word	0x24000500
 8001450:	24000228 	.word	0x24000228

08001454 <GetADCRaw>:

void GetADCRaw(uint16_t* buf)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
	memcpy((void*)buf, (void*)adc_buffer, sizeof(uint16_t)*N_ADC_CH);
 800145c:	221a      	movs	r2, #26
 800145e:	4904      	ldr	r1, [pc, #16]	@ (8001470 <GetADCRaw+0x1c>)
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f00f f9c8 	bl	80107f6 <memcpy>
}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	24000500 	.word	0x24000500

08001474 <SVUpdate>:

#include "solenoidvalve.h"
#include <stdint.h>

void SVUpdate(uint8_t* ch)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i<MAX_SV_NUM; i++) {
 800147c:	2300      	movs	r3, #0
 800147e:	73fb      	strb	r3, [r7, #15]
 8001480:	e0d1      	b.n	8001626 <SVUpdate+0x1b2>
		switch(i) {
 8001482:	7bfb      	ldrb	r3, [r7, #15]
 8001484:	2b09      	cmp	r3, #9
 8001486:	f200 80ca 	bhi.w	800161e <SVUpdate+0x1aa>
 800148a:	a201      	add	r2, pc, #4	@ (adr r2, 8001490 <SVUpdate+0x1c>)
 800148c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001490:	080014b9 	.word	0x080014b9
 8001494:	080014d9 	.word	0x080014d9
 8001498:	080014fb 	.word	0x080014fb
 800149c:	0800151d 	.word	0x0800151d
 80014a0:	0800153f 	.word	0x0800153f
 80014a4:	08001565 	.word	0x08001565
 80014a8:	0800158b 	.word	0x0800158b
 80014ac:	080015b1 	.word	0x080015b1
 80014b0:	080015d7 	.word	0x080015d7
 80014b4:	080015f9 	.word	0x080015f9
		case 0: // SV CH1
			if (ch[0] == 0) {
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d105      	bne.n	80014cc <SVUpdate+0x58>
				HAL_GPIO_WritePin(SV_CH1_PORT, SV_CH1_GPIO, GPIO_PIN_RESET);
 80014c0:	2200      	movs	r2, #0
 80014c2:	2101      	movs	r1, #1
 80014c4:	485c      	ldr	r0, [pc, #368]	@ (8001638 <SVUpdate+0x1c4>)
 80014c6:	f006 fe2f 	bl	8008128 <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(SV_CH1_PORT, SV_CH1_GPIO, GPIO_PIN_SET);
			}
			break;
 80014ca:	e0a9      	b.n	8001620 <SVUpdate+0x1ac>
				HAL_GPIO_WritePin(SV_CH1_PORT, SV_CH1_GPIO, GPIO_PIN_SET);
 80014cc:	2201      	movs	r2, #1
 80014ce:	2101      	movs	r1, #1
 80014d0:	4859      	ldr	r0, [pc, #356]	@ (8001638 <SVUpdate+0x1c4>)
 80014d2:	f006 fe29 	bl	8008128 <HAL_GPIO_WritePin>
			break;
 80014d6:	e0a3      	b.n	8001620 <SVUpdate+0x1ac>
		case 1:
			if (ch[1] == 0) {
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	3301      	adds	r3, #1
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d105      	bne.n	80014ee <SVUpdate+0x7a>
				HAL_GPIO_WritePin(SV_CH2_PORT, SV_CH2_GPIO, GPIO_PIN_RESET);
 80014e2:	2200      	movs	r2, #0
 80014e4:	2108      	movs	r1, #8
 80014e6:	4854      	ldr	r0, [pc, #336]	@ (8001638 <SVUpdate+0x1c4>)
 80014e8:	f006 fe1e 	bl	8008128 <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(SV_CH2_PORT, SV_CH2_GPIO, GPIO_PIN_SET);
			}
			break;
 80014ec:	e098      	b.n	8001620 <SVUpdate+0x1ac>
				HAL_GPIO_WritePin(SV_CH2_PORT, SV_CH2_GPIO, GPIO_PIN_SET);
 80014ee:	2201      	movs	r2, #1
 80014f0:	2108      	movs	r1, #8
 80014f2:	4851      	ldr	r0, [pc, #324]	@ (8001638 <SVUpdate+0x1c4>)
 80014f4:	f006 fe18 	bl	8008128 <HAL_GPIO_WritePin>
			break;
 80014f8:	e092      	b.n	8001620 <SVUpdate+0x1ac>
		case 2:
			if (ch[2] == 0) {
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	3302      	adds	r3, #2
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d105      	bne.n	8001510 <SVUpdate+0x9c>
				HAL_GPIO_WritePin(SV_CH3_PORT, SV_CH3_GPIO, GPIO_PIN_RESET);
 8001504:	2200      	movs	r2, #0
 8001506:	2110      	movs	r1, #16
 8001508:	484b      	ldr	r0, [pc, #300]	@ (8001638 <SVUpdate+0x1c4>)
 800150a:	f006 fe0d 	bl	8008128 <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(SV_CH3_PORT, SV_CH3_GPIO, GPIO_PIN_SET);
			}
			break;
 800150e:	e087      	b.n	8001620 <SVUpdate+0x1ac>
				HAL_GPIO_WritePin(SV_CH3_PORT, SV_CH3_GPIO, GPIO_PIN_SET);
 8001510:	2201      	movs	r2, #1
 8001512:	2110      	movs	r1, #16
 8001514:	4848      	ldr	r0, [pc, #288]	@ (8001638 <SVUpdate+0x1c4>)
 8001516:	f006 fe07 	bl	8008128 <HAL_GPIO_WritePin>
			break;
 800151a:	e081      	b.n	8001620 <SVUpdate+0x1ac>
		case 3:
			if (ch[3] == 0) {
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3303      	adds	r3, #3
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d105      	bne.n	8001532 <SVUpdate+0xbe>
				HAL_GPIO_WritePin(SV_CH4_PORT, SV_CH4_GPIO, GPIO_PIN_RESET);
 8001526:	2200      	movs	r2, #0
 8001528:	2180      	movs	r1, #128	@ 0x80
 800152a:	4843      	ldr	r0, [pc, #268]	@ (8001638 <SVUpdate+0x1c4>)
 800152c:	f006 fdfc 	bl	8008128 <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(SV_CH4_PORT, SV_CH4_GPIO, GPIO_PIN_SET);
			}
			break;
 8001530:	e076      	b.n	8001620 <SVUpdate+0x1ac>
				HAL_GPIO_WritePin(SV_CH4_PORT, SV_CH4_GPIO, GPIO_PIN_SET);
 8001532:	2201      	movs	r2, #1
 8001534:	2180      	movs	r1, #128	@ 0x80
 8001536:	4840      	ldr	r0, [pc, #256]	@ (8001638 <SVUpdate+0x1c4>)
 8001538:	f006 fdf6 	bl	8008128 <HAL_GPIO_WritePin>
			break;
 800153c:	e070      	b.n	8001620 <SVUpdate+0x1ac>
		case 4:
			if (ch[4] == 0) {
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	3304      	adds	r3, #4
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d106      	bne.n	8001556 <SVUpdate+0xe2>
				HAL_GPIO_WritePin(SV_CH5_PORT, SV_CH5_GPIO, GPIO_PIN_RESET);
 8001548:	2200      	movs	r2, #0
 800154a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800154e:	483a      	ldr	r0, [pc, #232]	@ (8001638 <SVUpdate+0x1c4>)
 8001550:	f006 fdea 	bl	8008128 <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(SV_CH5_PORT, SV_CH5_GPIO, GPIO_PIN_SET);
			}
			break;
 8001554:	e064      	b.n	8001620 <SVUpdate+0x1ac>
				HAL_GPIO_WritePin(SV_CH5_PORT, SV_CH5_GPIO, GPIO_PIN_SET);
 8001556:	2201      	movs	r2, #1
 8001558:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800155c:	4836      	ldr	r0, [pc, #216]	@ (8001638 <SVUpdate+0x1c4>)
 800155e:	f006 fde3 	bl	8008128 <HAL_GPIO_WritePin>
			break;
 8001562:	e05d      	b.n	8001620 <SVUpdate+0x1ac>
		case 5:
			if (ch[5] == 0) {
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	3305      	adds	r3, #5
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d106      	bne.n	800157c <SVUpdate+0x108>
				HAL_GPIO_WritePin(SV_CH6_PORT, SV_CH6_GPIO, GPIO_PIN_RESET);
 800156e:	2200      	movs	r2, #0
 8001570:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001574:	4830      	ldr	r0, [pc, #192]	@ (8001638 <SVUpdate+0x1c4>)
 8001576:	f006 fdd7 	bl	8008128 <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(SV_CH6_PORT, SV_CH6_GPIO, GPIO_PIN_SET);
			}
			break;
 800157a:	e051      	b.n	8001620 <SVUpdate+0x1ac>
				HAL_GPIO_WritePin(SV_CH6_PORT, SV_CH6_GPIO, GPIO_PIN_SET);
 800157c:	2201      	movs	r2, #1
 800157e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001582:	482d      	ldr	r0, [pc, #180]	@ (8001638 <SVUpdate+0x1c4>)
 8001584:	f006 fdd0 	bl	8008128 <HAL_GPIO_WritePin>
			break;
 8001588:	e04a      	b.n	8001620 <SVUpdate+0x1ac>
		case 6:
			if (ch[6] == 0) {
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	3306      	adds	r3, #6
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d106      	bne.n	80015a2 <SVUpdate+0x12e>
				HAL_GPIO_WritePin(SV_CH7_PORT, SV_CH7_GPIO, GPIO_PIN_RESET);
 8001594:	2200      	movs	r2, #0
 8001596:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800159a:	4827      	ldr	r0, [pc, #156]	@ (8001638 <SVUpdate+0x1c4>)
 800159c:	f006 fdc4 	bl	8008128 <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(SV_CH7_PORT, SV_CH7_GPIO, GPIO_PIN_SET);
			}
			break;
 80015a0:	e03e      	b.n	8001620 <SVUpdate+0x1ac>
				HAL_GPIO_WritePin(SV_CH7_PORT, SV_CH7_GPIO, GPIO_PIN_SET);
 80015a2:	2201      	movs	r2, #1
 80015a4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80015a8:	4823      	ldr	r0, [pc, #140]	@ (8001638 <SVUpdate+0x1c4>)
 80015aa:	f006 fdbd 	bl	8008128 <HAL_GPIO_WritePin>
			break;
 80015ae:	e037      	b.n	8001620 <SVUpdate+0x1ac>
		case 7:
			if (ch[7] == 0) {
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	3307      	adds	r3, #7
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d106      	bne.n	80015c8 <SVUpdate+0x154>
				HAL_GPIO_WritePin(SV_CH8_PORT, SV_CH8_GPIO, GPIO_PIN_RESET);
 80015ba:	2200      	movs	r2, #0
 80015bc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80015c0:	481d      	ldr	r0, [pc, #116]	@ (8001638 <SVUpdate+0x1c4>)
 80015c2:	f006 fdb1 	bl	8008128 <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(SV_CH8_PORT, SV_CH8_GPIO, GPIO_PIN_SET);
			}
			break;
 80015c6:	e02b      	b.n	8001620 <SVUpdate+0x1ac>
				HAL_GPIO_WritePin(SV_CH8_PORT, SV_CH8_GPIO, GPIO_PIN_SET);
 80015c8:	2201      	movs	r2, #1
 80015ca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80015ce:	481a      	ldr	r0, [pc, #104]	@ (8001638 <SVUpdate+0x1c4>)
 80015d0:	f006 fdaa 	bl	8008128 <HAL_GPIO_WritePin>
			break;
 80015d4:	e024      	b.n	8001620 <SVUpdate+0x1ac>
		case 8:
			if (ch[8] == 0) {
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	3308      	adds	r3, #8
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d105      	bne.n	80015ec <SVUpdate+0x178>
				HAL_GPIO_WritePin(SV_CH9_PORT, SV_CH9_GPIO, GPIO_PIN_RESET);
 80015e0:	2200      	movs	r2, #0
 80015e2:	2140      	movs	r1, #64	@ 0x40
 80015e4:	4815      	ldr	r0, [pc, #84]	@ (800163c <SVUpdate+0x1c8>)
 80015e6:	f006 fd9f 	bl	8008128 <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(SV_CH9_PORT, SV_CH9_GPIO, GPIO_PIN_SET);
			}
			break;
 80015ea:	e019      	b.n	8001620 <SVUpdate+0x1ac>
				HAL_GPIO_WritePin(SV_CH9_PORT, SV_CH9_GPIO, GPIO_PIN_SET);
 80015ec:	2201      	movs	r2, #1
 80015ee:	2140      	movs	r1, #64	@ 0x40
 80015f0:	4812      	ldr	r0, [pc, #72]	@ (800163c <SVUpdate+0x1c8>)
 80015f2:	f006 fd99 	bl	8008128 <HAL_GPIO_WritePin>
			break;
 80015f6:	e013      	b.n	8001620 <SVUpdate+0x1ac>
		case 9:
			if (ch[9] == 0) {
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3309      	adds	r3, #9
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d106      	bne.n	8001610 <SVUpdate+0x19c>
				HAL_GPIO_WritePin(SV_CH10_PORT, SV_CH10_GPIO, GPIO_PIN_RESET);
 8001602:	2200      	movs	r2, #0
 8001604:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001608:	480c      	ldr	r0, [pc, #48]	@ (800163c <SVUpdate+0x1c8>)
 800160a:	f006 fd8d 	bl	8008128 <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(SV_CH10_PORT, SV_CH10_GPIO, GPIO_PIN_SET);
			}
			break;
 800160e:	e007      	b.n	8001620 <SVUpdate+0x1ac>
				HAL_GPIO_WritePin(SV_CH10_PORT, SV_CH10_GPIO, GPIO_PIN_SET);
 8001610:	2201      	movs	r2, #1
 8001612:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001616:	4809      	ldr	r0, [pc, #36]	@ (800163c <SVUpdate+0x1c8>)
 8001618:	f006 fd86 	bl	8008128 <HAL_GPIO_WritePin>
			break;
 800161c:	e000      	b.n	8001620 <SVUpdate+0x1ac>
		default:
			break;
 800161e:	bf00      	nop
	for (uint8_t i = 0; i<MAX_SV_NUM; i++) {
 8001620:	7bfb      	ldrb	r3, [r7, #15]
 8001622:	3301      	adds	r3, #1
 8001624:	73fb      	strb	r3, [r7, #15]
 8001626:	7bfb      	ldrb	r3, [r7, #15]
 8001628:	2b09      	cmp	r3, #9
 800162a:	f67f af2a 	bls.w	8001482 <SVUpdate+0xe>
		}
	}

}
 800162e:	bf00      	nop
 8001630:	bf00      	nop
 8001632:	3710      	adds	r7, #16
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	58021000 	.word	0x58021000
 800163c:	58020800 	.word	0x58020800

08001640 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001646:	4b0a      	ldr	r3, [pc, #40]	@ (8001670 <HAL_MspInit+0x30>)
 8001648:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800164c:	4a08      	ldr	r2, [pc, #32]	@ (8001670 <HAL_MspInit+0x30>)
 800164e:	f043 0302 	orr.w	r3, r3, #2
 8001652:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001656:	4b06      	ldr	r3, [pc, #24]	@ (8001670 <HAL_MspInit+0x30>)
 8001658:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800165c:	f003 0302 	and.w	r3, r3, #2
 8001660:	607b      	str	r3, [r7, #4]
 8001662:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001664:	bf00      	nop
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	58024400 	.word	0x58024400

08001674 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b0bc      	sub	sp, #240	@ 0xf0
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	60da      	str	r2, [r3, #12]
 800168a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800168c:	f107 0318 	add.w	r3, r7, #24
 8001690:	22c0      	movs	r2, #192	@ 0xc0
 8001692:	2100      	movs	r1, #0
 8001694:	4618      	mov	r0, r3
 8001696:	f00e ffc3 	bl	8010620 <memset>
  if(hadc->Instance==ADC1)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a67      	ldr	r2, [pc, #412]	@ (800183c <HAL_ADC_MspInit+0x1c8>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	f040 80c6 	bne.w	8001832 <HAL_ADC_MspInit+0x1be>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80016a6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80016aa:	f04f 0300 	mov.w	r3, #0
 80016ae:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 80016b2:	2304      	movs	r3, #4
 80016b4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 80016b6:	230a      	movs	r3, #10
 80016b8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80016ba:	2302      	movs	r3, #2
 80016bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80016be:	2302      	movs	r3, #2
 80016c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80016c2:	2302      	movs	r3, #2
 80016c4:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80016c6:	23c0      	movs	r3, #192	@ 0xc0
 80016c8:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80016ca:	2320      	movs	r3, #32
 80016cc:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80016ce:	2300      	movs	r3, #0
 80016d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80016d2:	2300      	movs	r3, #0
 80016d4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016d8:	f107 0318 	add.w	r3, r7, #24
 80016dc:	4618      	mov	r0, r3
 80016de:	f007 fdc5 	bl	800926c <HAL_RCCEx_PeriphCLKConfig>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 80016e8:	f7ff fe9c 	bl	8001424 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80016ec:	4b54      	ldr	r3, [pc, #336]	@ (8001840 <HAL_ADC_MspInit+0x1cc>)
 80016ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80016f2:	4a53      	ldr	r2, [pc, #332]	@ (8001840 <HAL_ADC_MspInit+0x1cc>)
 80016f4:	f043 0320 	orr.w	r3, r3, #32
 80016f8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80016fc:	4b50      	ldr	r3, [pc, #320]	@ (8001840 <HAL_ADC_MspInit+0x1cc>)
 80016fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001702:	f003 0320 	and.w	r3, r3, #32
 8001706:	617b      	str	r3, [r7, #20]
 8001708:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800170a:	4b4d      	ldr	r3, [pc, #308]	@ (8001840 <HAL_ADC_MspInit+0x1cc>)
 800170c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001710:	4a4b      	ldr	r2, [pc, #300]	@ (8001840 <HAL_ADC_MspInit+0x1cc>)
 8001712:	f043 0304 	orr.w	r3, r3, #4
 8001716:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800171a:	4b49      	ldr	r3, [pc, #292]	@ (8001840 <HAL_ADC_MspInit+0x1cc>)
 800171c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001720:	f003 0304 	and.w	r3, r3, #4
 8001724:	613b      	str	r3, [r7, #16]
 8001726:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001728:	4b45      	ldr	r3, [pc, #276]	@ (8001840 <HAL_ADC_MspInit+0x1cc>)
 800172a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800172e:	4a44      	ldr	r2, [pc, #272]	@ (8001840 <HAL_ADC_MspInit+0x1cc>)
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001738:	4b41      	ldr	r3, [pc, #260]	@ (8001840 <HAL_ADC_MspInit+0x1cc>)
 800173a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	60fb      	str	r3, [r7, #12]
 8001744:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001746:	4b3e      	ldr	r3, [pc, #248]	@ (8001840 <HAL_ADC_MspInit+0x1cc>)
 8001748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800174c:	4a3c      	ldr	r2, [pc, #240]	@ (8001840 <HAL_ADC_MspInit+0x1cc>)
 800174e:	f043 0320 	orr.w	r3, r3, #32
 8001752:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001756:	4b3a      	ldr	r3, [pc, #232]	@ (8001840 <HAL_ADC_MspInit+0x1cc>)
 8001758:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800175c:	f003 0320 	and.w	r3, r3, #32
 8001760:	60bb      	str	r3, [r7, #8]
 8001762:	68bb      	ldr	r3, [r7, #8]
    PA7     ------> ADC1_INP7
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001764:	2333      	movs	r3, #51	@ 0x33
 8001766:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800176a:	2303      	movs	r3, #3
 800176c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001776:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800177a:	4619      	mov	r1, r3
 800177c:	4831      	ldr	r0, [pc, #196]	@ (8001844 <HAL_ADC_MspInit+0x1d0>)
 800177e:	f006 fb23 	bl	8007dc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001782:	23ff      	movs	r3, #255	@ 0xff
 8001784:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001788:	2303      	movs	r3, #3
 800178a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178e:	2300      	movs	r3, #0
 8001790:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001794:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001798:	4619      	mov	r1, r3
 800179a:	482b      	ldr	r0, [pc, #172]	@ (8001848 <HAL_ADC_MspInit+0x1d4>)
 800179c:	f006 fb14 	bl	8007dc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80017a0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80017a4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017a8:	2303      	movs	r3, #3
 80017aa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ae:	2300      	movs	r3, #0
 80017b0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017b4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80017b8:	4619      	mov	r1, r3
 80017ba:	4824      	ldr	r0, [pc, #144]	@ (800184c <HAL_ADC_MspInit+0x1d8>)
 80017bc:	f006 fb04 	bl	8007dc8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 80017c0:	4b23      	ldr	r3, [pc, #140]	@ (8001850 <HAL_ADC_MspInit+0x1dc>)
 80017c2:	4a24      	ldr	r2, [pc, #144]	@ (8001854 <HAL_ADC_MspInit+0x1e0>)
 80017c4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80017c6:	4b22      	ldr	r3, [pc, #136]	@ (8001850 <HAL_ADC_MspInit+0x1dc>)
 80017c8:	2209      	movs	r2, #9
 80017ca:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017cc:	4b20      	ldr	r3, [pc, #128]	@ (8001850 <HAL_ADC_MspInit+0x1dc>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80017d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001850 <HAL_ADC_MspInit+0x1dc>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80017d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001850 <HAL_ADC_MspInit+0x1dc>)
 80017da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017de:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001850 <HAL_ADC_MspInit+0x1dc>)
 80017e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80017e6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80017e8:	4b19      	ldr	r3, [pc, #100]	@ (8001850 <HAL_ADC_MspInit+0x1dc>)
 80017ea:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017ee:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80017f0:	4b17      	ldr	r3, [pc, #92]	@ (8001850 <HAL_ADC_MspInit+0x1dc>)
 80017f2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017f6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80017f8:	4b15      	ldr	r3, [pc, #84]	@ (8001850 <HAL_ADC_MspInit+0x1dc>)
 80017fa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80017fe:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001800:	4b13      	ldr	r3, [pc, #76]	@ (8001850 <HAL_ADC_MspInit+0x1dc>)
 8001802:	2200      	movs	r2, #0
 8001804:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001806:	4812      	ldr	r0, [pc, #72]	@ (8001850 <HAL_ADC_MspInit+0x1dc>)
 8001808:	f003 fc32 	bl	8005070 <HAL_DMA_Init>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <HAL_ADC_MspInit+0x1a2>
    {
      Error_Handler();
 8001812:	f7ff fe07 	bl	8001424 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a0d      	ldr	r2, [pc, #52]	@ (8001850 <HAL_ADC_MspInit+0x1dc>)
 800181a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800181c:	4a0c      	ldr	r2, [pc, #48]	@ (8001850 <HAL_ADC_MspInit+0x1dc>)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001822:	2200      	movs	r2, #0
 8001824:	2100      	movs	r1, #0
 8001826:	2012      	movs	r0, #18
 8001828:	f003 fbdb 	bl	8004fe2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800182c:	2012      	movs	r0, #18
 800182e:	f003 fbf2 	bl	8005016 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001832:	bf00      	nop
 8001834:	37f0      	adds	r7, #240	@ 0xf0
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40022000 	.word	0x40022000
 8001840:	58024400 	.word	0x58024400
 8001844:	58020800 	.word	0x58020800
 8001848:	58020000 	.word	0x58020000
 800184c:	58021400 	.word	0x58021400
 8001850:	2400028c 	.word	0x2400028c
 8001854:	40020010 	.word	0x40020010

08001858 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b0bc      	sub	sp, #240	@ 0xf0
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001860:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	60da      	str	r2, [r3, #12]
 800186e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001870:	f107 0318 	add.w	r3, r7, #24
 8001874:	22c0      	movs	r2, #192	@ 0xc0
 8001876:	2100      	movs	r1, #0
 8001878:	4618      	mov	r0, r3
 800187a:	f00e fed1 	bl	8010620 <memset>
  if(hspi->Instance==SPI1)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a3c      	ldr	r2, [pc, #240]	@ (8001974 <HAL_SPI_MspInit+0x11c>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d171      	bne.n	800196c <HAL_SPI_MspInit+0x114>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001888:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800188c:	f04f 0300 	mov.w	r3, #0
 8001890:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001894:	2300      	movs	r3, #0
 8001896:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001898:	f107 0318 	add.w	r3, r7, #24
 800189c:	4618      	mov	r0, r3
 800189e:	f007 fce5 	bl	800926c <HAL_RCCEx_PeriphCLKConfig>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80018a8:	f7ff fdbc 	bl	8001424 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018ac:	4b32      	ldr	r3, [pc, #200]	@ (8001978 <HAL_SPI_MspInit+0x120>)
 80018ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80018b2:	4a31      	ldr	r2, [pc, #196]	@ (8001978 <HAL_SPI_MspInit+0x120>)
 80018b4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80018b8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80018bc:	4b2e      	ldr	r3, [pc, #184]	@ (8001978 <HAL_SPI_MspInit+0x120>)
 80018be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80018c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018c6:	617b      	str	r3, [r7, #20]
 80018c8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80018ca:	4b2b      	ldr	r3, [pc, #172]	@ (8001978 <HAL_SPI_MspInit+0x120>)
 80018cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018d0:	4a29      	ldr	r2, [pc, #164]	@ (8001978 <HAL_SPI_MspInit+0x120>)
 80018d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80018d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018da:	4b27      	ldr	r3, [pc, #156]	@ (8001978 <HAL_SPI_MspInit+0x120>)
 80018dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018e4:	613b      	str	r3, [r7, #16]
 80018e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e8:	4b23      	ldr	r3, [pc, #140]	@ (8001978 <HAL_SPI_MspInit+0x120>)
 80018ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018ee:	4a22      	ldr	r2, [pc, #136]	@ (8001978 <HAL_SPI_MspInit+0x120>)
 80018f0:	f043 0302 	orr.w	r3, r3, #2
 80018f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001978 <HAL_SPI_MspInit+0x120>)
 80018fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PG9     ------> SPI1_MISO
    PG11     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001906:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 800190a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190e:	2302      	movs	r3, #2
 8001910:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191a:	2300      	movs	r3, #0
 800191c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001920:	2305      	movs	r3, #5
 8001922:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001926:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800192a:	4619      	mov	r1, r3
 800192c:	4813      	ldr	r0, [pc, #76]	@ (800197c <HAL_SPI_MspInit+0x124>)
 800192e:	f006 fa4b 	bl	8007dc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001932:	2320      	movs	r3, #32
 8001934:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001938:	2302      	movs	r3, #2
 800193a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193e:	2300      	movs	r3, #0
 8001940:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001944:	2300      	movs	r3, #0
 8001946:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800194a:	2305      	movs	r3, #5
 800194c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001950:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001954:	4619      	mov	r1, r3
 8001956:	480a      	ldr	r0, [pc, #40]	@ (8001980 <HAL_SPI_MspInit+0x128>)
 8001958:	f006 fa36 	bl	8007dc8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800195c:	2200      	movs	r2, #0
 800195e:	2100      	movs	r1, #0
 8001960:	2023      	movs	r0, #35	@ 0x23
 8001962:	f003 fb3e 	bl	8004fe2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001966:	2023      	movs	r0, #35	@ 0x23
 8001968:	f003 fb55 	bl	8005016 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800196c:	bf00      	nop
 800196e:	37f0      	adds	r7, #240	@ 0xf0
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	40013000 	.word	0x40013000
 8001978:	58024400 	.word	0x58024400
 800197c:	58021800 	.word	0x58021800
 8001980:	58020400 	.word	0x58020400

08001984 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001994:	d116      	bne.n	80019c4 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001996:	4b0d      	ldr	r3, [pc, #52]	@ (80019cc <HAL_TIM_Base_MspInit+0x48>)
 8001998:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800199c:	4a0b      	ldr	r2, [pc, #44]	@ (80019cc <HAL_TIM_Base_MspInit+0x48>)
 800199e:	f043 0301 	orr.w	r3, r3, #1
 80019a2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80019a6:	4b09      	ldr	r3, [pc, #36]	@ (80019cc <HAL_TIM_Base_MspInit+0x48>)
 80019a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80019ac:	f003 0301 	and.w	r3, r3, #1
 80019b0:	60fb      	str	r3, [r7, #12]
 80019b2:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80019b4:	2200      	movs	r2, #0
 80019b6:	2100      	movs	r1, #0
 80019b8:	201c      	movs	r0, #28
 80019ba:	f003 fb12 	bl	8004fe2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019be:	201c      	movs	r0, #28
 80019c0:	f003 fb29 	bl	8005016 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80019c4:	bf00      	nop
 80019c6:	3710      	adds	r7, #16
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	58024400 	.word	0x58024400

080019d0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b0ba      	sub	sp, #232	@ 0xe8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	605a      	str	r2, [r3, #4]
 80019e2:	609a      	str	r2, [r3, #8]
 80019e4:	60da      	str	r2, [r3, #12]
 80019e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019e8:	f107 0310 	add.w	r3, r7, #16
 80019ec:	22c0      	movs	r2, #192	@ 0xc0
 80019ee:	2100      	movs	r1, #0
 80019f0:	4618      	mov	r0, r3
 80019f2:	f00e fe15 	bl	8010620 <memset>
  if(huart->Instance==UART4)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a2b      	ldr	r2, [pc, #172]	@ (8001aa8 <HAL_UART_MspInit+0xd8>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d14e      	bne.n	8001a9e <HAL_UART_MspInit+0xce>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001a00:	f04f 0202 	mov.w	r2, #2
 8001a04:	f04f 0300 	mov.w	r3, #0
 8001a08:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a12:	f107 0310 	add.w	r3, r7, #16
 8001a16:	4618      	mov	r0, r3
 8001a18:	f007 fc28 	bl	800926c <HAL_RCCEx_PeriphCLKConfig>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001a22:	f7ff fcff 	bl	8001424 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001a26:	4b21      	ldr	r3, [pc, #132]	@ (8001aac <HAL_UART_MspInit+0xdc>)
 8001a28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a2c:	4a1f      	ldr	r2, [pc, #124]	@ (8001aac <HAL_UART_MspInit+0xdc>)
 8001a2e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001a32:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001a36:	4b1d      	ldr	r3, [pc, #116]	@ (8001aac <HAL_UART_MspInit+0xdc>)
 8001a38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a3c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a40:	60fb      	str	r3, [r7, #12]
 8001a42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a44:	4b19      	ldr	r3, [pc, #100]	@ (8001aac <HAL_UART_MspInit+0xdc>)
 8001a46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a4a:	4a18      	ldr	r2, [pc, #96]	@ (8001aac <HAL_UART_MspInit+0xdc>)
 8001a4c:	f043 0304 	orr.w	r3, r3, #4
 8001a50:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a54:	4b15      	ldr	r3, [pc, #84]	@ (8001aac <HAL_UART_MspInit+0xdc>)
 8001a56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a5a:	f003 0304 	and.w	r3, r3, #4
 8001a5e:	60bb      	str	r3, [r7, #8]
 8001a60:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001a62:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001a66:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a70:	2300      	movs	r3, #0
 8001a72:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a76:	2300      	movs	r3, #0
 8001a78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001a7c:	2308      	movs	r3, #8
 8001a7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a82:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001a86:	4619      	mov	r1, r3
 8001a88:	4809      	ldr	r0, [pc, #36]	@ (8001ab0 <HAL_UART_MspInit+0xe0>)
 8001a8a:	f006 f99d 	bl	8007dc8 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001a8e:	2200      	movs	r2, #0
 8001a90:	2100      	movs	r1, #0
 8001a92:	2034      	movs	r0, #52	@ 0x34
 8001a94:	f003 faa5 	bl	8004fe2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001a98:	2034      	movs	r0, #52	@ 0x34
 8001a9a:	f003 fabc 	bl	8005016 <HAL_NVIC_EnableIRQ>

    /* USER CODE END UART4_MspInit 1 */

  }

}
 8001a9e:	bf00      	nop
 8001aa0:	37e8      	adds	r7, #232	@ 0xe8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40004c00 	.word	0x40004c00
 8001aac:	58024400 	.word	0x58024400
 8001ab0:	58020800 	.word	0x58020800

08001ab4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ab8:	bf00      	nop
 8001aba:	e7fd      	b.n	8001ab8 <NMI_Handler+0x4>

08001abc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ac0:	bf00      	nop
 8001ac2:	e7fd      	b.n	8001ac0 <HardFault_Handler+0x4>

08001ac4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ac8:	bf00      	nop
 8001aca:	e7fd      	b.n	8001ac8 <MemManage_Handler+0x4>

08001acc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ad0:	bf00      	nop
 8001ad2:	e7fd      	b.n	8001ad0 <BusFault_Handler+0x4>

08001ad4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ad8:	bf00      	nop
 8001ada:	e7fd      	b.n	8001ad8 <UsageFault_Handler+0x4>

08001adc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ae0:	bf00      	nop
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aea:	b480      	push	{r7}
 8001aec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aee:	bf00      	nop
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001afc:	bf00      	nop
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b0a:	f001 fbf9 	bl	8003300 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	bd80      	pop	{r7, pc}
	...

08001b14 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001b18:	4802      	ldr	r0, [pc, #8]	@ (8001b24 <DMA1_Stream0_IRQHandler+0x10>)
 8001b1a:	f004 fdd3 	bl	80066c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	2400028c 	.word	0x2400028c

08001b28 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001b2c:	4802      	ldr	r0, [pc, #8]	@ (8001b38 <ADC_IRQHandler+0x10>)
 8001b2e:	f002 f8cb 	bl	8003cc8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	24000228 	.word	0x24000228

08001b3c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b40:	4802      	ldr	r0, [pc, #8]	@ (8001b4c <TIM2_IRQHandler+0x10>)
 8001b42:	f00a fe85 	bl	800c850 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	2400038c 	.word	0x2400038c

08001b50 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001b54:	4802      	ldr	r0, [pc, #8]	@ (8001b60 <SPI1_IRQHandler+0x10>)
 8001b56:	f00a fa55 	bl	800c004 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	24000304 	.word	0x24000304

08001b64 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8001b68:	2000      	movs	r0, #0
 8001b6a:	f001 fa67 	bl	800303c <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}
	...

08001b74 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001b78:	4802      	ldr	r0, [pc, #8]	@ (8001b84 <UART4_IRQHandler+0x10>)
 8001b7a:	f00b fba5 	bl	800d2c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	240003d8 	.word	0x240003d8

08001b88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  return 1;
 8001b8c:	2301      	movs	r3, #1
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <_kill>:

int _kill(int pid, int sig)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ba2:	f00e fdfb 	bl	801079c <__errno>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2216      	movs	r2, #22
 8001baa:	601a      	str	r2, [r3, #0]
  return -1;
 8001bac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3708      	adds	r7, #8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <_exit>:

void _exit (int status)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f7ff ffe7 	bl	8001b98 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bca:	bf00      	nop
 8001bcc:	e7fd      	b.n	8001bca <_exit+0x12>

08001bce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b086      	sub	sp, #24
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	60f8      	str	r0, [r7, #12]
 8001bd6:	60b9      	str	r1, [r7, #8]
 8001bd8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bda:	2300      	movs	r3, #0
 8001bdc:	617b      	str	r3, [r7, #20]
 8001bde:	e00a      	b.n	8001bf6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001be0:	f3af 8000 	nop.w
 8001be4:	4601      	mov	r1, r0
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	1c5a      	adds	r2, r3, #1
 8001bea:	60ba      	str	r2, [r7, #8]
 8001bec:	b2ca      	uxtb	r2, r1
 8001bee:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	617b      	str	r3, [r7, #20]
 8001bf6:	697a      	ldr	r2, [r7, #20]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	dbf0      	blt.n	8001be0 <_read+0x12>
  }

  return len;
 8001bfe:	687b      	ldr	r3, [r7, #4]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3718      	adds	r7, #24
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c14:	2300      	movs	r3, #0
 8001c16:	617b      	str	r3, [r7, #20]
 8001c18:	e009      	b.n	8001c2e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	1c5a      	adds	r2, r3, #1
 8001c1e:	60ba      	str	r2, [r7, #8]
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f001 fa7e 	bl	8003124 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	617b      	str	r3, [r7, #20]
 8001c2e:	697a      	ldr	r2, [r7, #20]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	dbf1      	blt.n	8001c1a <_write+0x12>
  }
  return len;
 8001c36:	687b      	ldr	r3, [r7, #4]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3718      	adds	r7, #24
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <_close>:

int _close(int file)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c68:	605a      	str	r2, [r3, #4]
  return 0;
 8001c6a:	2300      	movs	r3, #0
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <_isatty>:

int _isatty(int file)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c80:	2301      	movs	r3, #1
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b085      	sub	sp, #20
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	60f8      	str	r0, [r7, #12]
 8001c96:	60b9      	str	r1, [r7, #8]
 8001c98:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c9a:	2300      	movs	r3, #0
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3714      	adds	r7, #20
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cb0:	4a14      	ldr	r2, [pc, #80]	@ (8001d04 <_sbrk+0x5c>)
 8001cb2:	4b15      	ldr	r3, [pc, #84]	@ (8001d08 <_sbrk+0x60>)
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cbc:	4b13      	ldr	r3, [pc, #76]	@ (8001d0c <_sbrk+0x64>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d102      	bne.n	8001cca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cc4:	4b11      	ldr	r3, [pc, #68]	@ (8001d0c <_sbrk+0x64>)
 8001cc6:	4a12      	ldr	r2, [pc, #72]	@ (8001d10 <_sbrk+0x68>)
 8001cc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cca:	4b10      	ldr	r3, [pc, #64]	@ (8001d0c <_sbrk+0x64>)
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d207      	bcs.n	8001ce8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cd8:	f00e fd60 	bl	801079c <__errno>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	220c      	movs	r2, #12
 8001ce0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ce6:	e009      	b.n	8001cfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ce8:	4b08      	ldr	r3, [pc, #32]	@ (8001d0c <_sbrk+0x64>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cee:	4b07      	ldr	r3, [pc, #28]	@ (8001d0c <_sbrk+0x64>)
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	4a05      	ldr	r2, [pc, #20]	@ (8001d0c <_sbrk+0x64>)
 8001cf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3718      	adds	r7, #24
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	24080000 	.word	0x24080000
 8001d08:	00000400 	.word	0x00000400
 8001d0c:	2400051c 	.word	0x2400051c
 8001d10:	24000888 	.word	0x24000888

08001d14 <MAX31855_CS_Enable>:

extern SPI_HandleTypeDef hspi1; // SPI1 핸들러 외부 선언

// CS 핀을 Low로 설정 (SPI 통신 시작)
void MAX31855_CS_Enable(uint8_t ch)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	71fb      	strb	r3, [r7, #7]
	switch(ch) {
 8001d1e:	79fb      	ldrb	r3, [r7, #7]
 8001d20:	2b0b      	cmp	r3, #11
 8001d22:	f200 8329 	bhi.w	8002378 <MAX31855_CS_Enable+0x664>
 8001d26:	a201      	add	r2, pc, #4	@ (adr r2, 8001d2c <MAX31855_CS_Enable+0x18>)
 8001d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d2c:	08001d5d 	.word	0x08001d5d
 8001d30:	08001ddf 	.word	0x08001ddf
 8001d34:	08001e61 	.word	0x08001e61
 8001d38:	08001ee3 	.word	0x08001ee3
 8001d3c:	08001f65 	.word	0x08001f65
 8001d40:	08001fe7 	.word	0x08001fe7
 8001d44:	0800206d 	.word	0x0800206d
 8001d48:	080020ef 	.word	0x080020ef
 8001d4c:	08002171 	.word	0x08002171
 8001d50:	080021f3 	.word	0x080021f3
 8001d54:	08002275 	.word	0x08002275
 8001d58:	080022f7 	.word	0x080022f7
	case TC_CH1:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_RESET);
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	2101      	movs	r1, #1
 8001d60:	48c1      	ldr	r0, [pc, #772]	@ (8002068 <MAX31855_CS_Enable+0x354>)
 8001d62:	f006 f9e1 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8001d66:	2201      	movs	r2, #1
 8001d68:	2102      	movs	r1, #2
 8001d6a:	48bf      	ldr	r0, [pc, #764]	@ (8002068 <MAX31855_CS_Enable+0x354>)
 8001d6c:	f006 f9dc 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8001d70:	2201      	movs	r2, #1
 8001d72:	2104      	movs	r1, #4
 8001d74:	48bc      	ldr	r0, [pc, #752]	@ (8002068 <MAX31855_CS_Enable+0x354>)
 8001d76:	f006 f9d7 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	2108      	movs	r1, #8
 8001d7e:	48ba      	ldr	r0, [pc, #744]	@ (8002068 <MAX31855_CS_Enable+0x354>)
 8001d80:	f006 f9d2 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8001d84:	2201      	movs	r2, #1
 8001d86:	2110      	movs	r1, #16
 8001d88:	48b7      	ldr	r0, [pc, #732]	@ (8002068 <MAX31855_CS_Enable+0x354>)
 8001d8a:	f006 f9cd 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8001d8e:	2201      	movs	r2, #1
 8001d90:	2120      	movs	r1, #32
 8001d92:	48b5      	ldr	r0, [pc, #724]	@ (8002068 <MAX31855_CS_Enable+0x354>)
 8001d94:	f006 f9c8 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8001d98:	2201      	movs	r2, #1
 8001d9a:	2140      	movs	r1, #64	@ 0x40
 8001d9c:	48b2      	ldr	r0, [pc, #712]	@ (8002068 <MAX31855_CS_Enable+0x354>)
 8001d9e:	f006 f9c3 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8001da2:	2201      	movs	r2, #1
 8001da4:	2180      	movs	r1, #128	@ 0x80
 8001da6:	48b0      	ldr	r0, [pc, #704]	@ (8002068 <MAX31855_CS_Enable+0x354>)
 8001da8:	f006 f9be 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8001dac:	2201      	movs	r2, #1
 8001dae:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001db2:	48ad      	ldr	r0, [pc, #692]	@ (8002068 <MAX31855_CS_Enable+0x354>)
 8001db4:	f006 f9b8 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8001db8:	2201      	movs	r2, #1
 8001dba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001dbe:	48aa      	ldr	r0, [pc, #680]	@ (8002068 <MAX31855_CS_Enable+0x354>)
 8001dc0:	f006 f9b2 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001dca:	48a7      	ldr	r0, [pc, #668]	@ (8002068 <MAX31855_CS_Enable+0x354>)
 8001dcc:	f006 f9ac 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001dd6:	48a4      	ldr	r0, [pc, #656]	@ (8002068 <MAX31855_CS_Enable+0x354>)
 8001dd8:	f006 f9a6 	bl	8008128 <HAL_GPIO_WritePin>
		break;
 8001ddc:	e2cd      	b.n	800237a <MAX31855_CS_Enable+0x666>
	case TC_CH2:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8001dde:	2201      	movs	r2, #1
 8001de0:	2101      	movs	r1, #1
 8001de2:	48a1      	ldr	r0, [pc, #644]	@ (8002068 <MAX31855_CS_Enable+0x354>)
 8001de4:	f006 f9a0 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_RESET);
 8001de8:	2200      	movs	r2, #0
 8001dea:	2102      	movs	r1, #2
 8001dec:	489e      	ldr	r0, [pc, #632]	@ (8002068 <MAX31855_CS_Enable+0x354>)
 8001dee:	f006 f99b 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8001df2:	2201      	movs	r2, #1
 8001df4:	2104      	movs	r1, #4
 8001df6:	489c      	ldr	r0, [pc, #624]	@ (8002068 <MAX31855_CS_Enable+0x354>)
 8001df8:	f006 f996 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	2108      	movs	r1, #8
 8001e00:	4899      	ldr	r0, [pc, #612]	@ (8002068 <MAX31855_CS_Enable+0x354>)
 8001e02:	f006 f991 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8001e06:	2201      	movs	r2, #1
 8001e08:	2110      	movs	r1, #16
 8001e0a:	4897      	ldr	r0, [pc, #604]	@ (8002068 <MAX31855_CS_Enable+0x354>)
 8001e0c:	f006 f98c 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8001e10:	2201      	movs	r2, #1
 8001e12:	2120      	movs	r1, #32
 8001e14:	4894      	ldr	r0, [pc, #592]	@ (8002068 <MAX31855_CS_Enable+0x354>)
 8001e16:	f006 f987 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	2140      	movs	r1, #64	@ 0x40
 8001e1e:	4892      	ldr	r0, [pc, #584]	@ (8002068 <MAX31855_CS_Enable+0x354>)
 8001e20:	f006 f982 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8001e24:	2201      	movs	r2, #1
 8001e26:	2180      	movs	r1, #128	@ 0x80
 8001e28:	488f      	ldr	r0, [pc, #572]	@ (8002068 <MAX31855_CS_Enable+0x354>)
 8001e2a:	f006 f97d 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001e34:	488c      	ldr	r0, [pc, #560]	@ (8002068 <MAX31855_CS_Enable+0x354>)
 8001e36:	f006 f977 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001e40:	4889      	ldr	r0, [pc, #548]	@ (8002068 <MAX31855_CS_Enable+0x354>)
 8001e42:	f006 f971 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8001e46:	2201      	movs	r2, #1
 8001e48:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e4c:	4886      	ldr	r0, [pc, #536]	@ (8002068 <MAX31855_CS_Enable+0x354>)
 8001e4e:	f006 f96b 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8001e52:	2201      	movs	r2, #1
 8001e54:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001e58:	4883      	ldr	r0, [pc, #524]	@ (8002068 <MAX31855_CS_Enable+0x354>)
 8001e5a:	f006 f965 	bl	8008128 <HAL_GPIO_WritePin>
		break;
 8001e5e:	e28c      	b.n	800237a <MAX31855_CS_Enable+0x666>
	case TC_CH3:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8001e60:	2201      	movs	r2, #1
 8001e62:	2101      	movs	r1, #1
 8001e64:	4880      	ldr	r0, [pc, #512]	@ (8002068 <MAX31855_CS_Enable+0x354>)
 8001e66:	f006 f95f 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	2102      	movs	r1, #2
 8001e6e:	487e      	ldr	r0, [pc, #504]	@ (8002068 <MAX31855_CS_Enable+0x354>)
 8001e70:	f006 f95a 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_RESET);
 8001e74:	2200      	movs	r2, #0
 8001e76:	2104      	movs	r1, #4
 8001e78:	487b      	ldr	r0, [pc, #492]	@ (8002068 <MAX31855_CS_Enable+0x354>)
 8001e7a:	f006 f955 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8001e7e:	2201      	movs	r2, #1
 8001e80:	2108      	movs	r1, #8
 8001e82:	4879      	ldr	r0, [pc, #484]	@ (8002068 <MAX31855_CS_Enable+0x354>)
 8001e84:	f006 f950 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8001e88:	2201      	movs	r2, #1
 8001e8a:	2110      	movs	r1, #16
 8001e8c:	4876      	ldr	r0, [pc, #472]	@ (8002068 <MAX31855_CS_Enable+0x354>)
 8001e8e:	f006 f94b 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8001e92:	2201      	movs	r2, #1
 8001e94:	2120      	movs	r1, #32
 8001e96:	4874      	ldr	r0, [pc, #464]	@ (8002068 <MAX31855_CS_Enable+0x354>)
 8001e98:	f006 f946 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	2140      	movs	r1, #64	@ 0x40
 8001ea0:	4871      	ldr	r0, [pc, #452]	@ (8002068 <MAX31855_CS_Enable+0x354>)
 8001ea2:	f006 f941 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	2180      	movs	r1, #128	@ 0x80
 8001eaa:	486f      	ldr	r0, [pc, #444]	@ (8002068 <MAX31855_CS_Enable+0x354>)
 8001eac:	f006 f93c 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001eb6:	486c      	ldr	r0, [pc, #432]	@ (8002068 <MAX31855_CS_Enable+0x354>)
 8001eb8:	f006 f936 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001ec2:	4869      	ldr	r0, [pc, #420]	@ (8002068 <MAX31855_CS_Enable+0x354>)
 8001ec4:	f006 f930 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8001ec8:	2201      	movs	r2, #1
 8001eca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001ece:	4866      	ldr	r0, [pc, #408]	@ (8002068 <MAX31855_CS_Enable+0x354>)
 8001ed0:	f006 f92a 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001eda:	4863      	ldr	r0, [pc, #396]	@ (8002068 <MAX31855_CS_Enable+0x354>)
 8001edc:	f006 f924 	bl	8008128 <HAL_GPIO_WritePin>
		break;
 8001ee0:	e24b      	b.n	800237a <MAX31855_CS_Enable+0x666>
	case TC_CH4:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	2101      	movs	r1, #1
 8001ee6:	4860      	ldr	r0, [pc, #384]	@ (8002068 <MAX31855_CS_Enable+0x354>)
 8001ee8:	f006 f91e 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8001eec:	2201      	movs	r2, #1
 8001eee:	2102      	movs	r1, #2
 8001ef0:	485d      	ldr	r0, [pc, #372]	@ (8002068 <MAX31855_CS_Enable+0x354>)
 8001ef2:	f006 f919 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	2104      	movs	r1, #4
 8001efa:	485b      	ldr	r0, [pc, #364]	@ (8002068 <MAX31855_CS_Enable+0x354>)
 8001efc:	f006 f914 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_RESET);
 8001f00:	2200      	movs	r2, #0
 8001f02:	2108      	movs	r1, #8
 8001f04:	4858      	ldr	r0, [pc, #352]	@ (8002068 <MAX31855_CS_Enable+0x354>)
 8001f06:	f006 f90f 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	2110      	movs	r1, #16
 8001f0e:	4856      	ldr	r0, [pc, #344]	@ (8002068 <MAX31855_CS_Enable+0x354>)
 8001f10:	f006 f90a 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8001f14:	2201      	movs	r2, #1
 8001f16:	2120      	movs	r1, #32
 8001f18:	4853      	ldr	r0, [pc, #332]	@ (8002068 <MAX31855_CS_Enable+0x354>)
 8001f1a:	f006 f905 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8001f1e:	2201      	movs	r2, #1
 8001f20:	2140      	movs	r1, #64	@ 0x40
 8001f22:	4851      	ldr	r0, [pc, #324]	@ (8002068 <MAX31855_CS_Enable+0x354>)
 8001f24:	f006 f900 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8001f28:	2201      	movs	r2, #1
 8001f2a:	2180      	movs	r1, #128	@ 0x80
 8001f2c:	484e      	ldr	r0, [pc, #312]	@ (8002068 <MAX31855_CS_Enable+0x354>)
 8001f2e:	f006 f8fb 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8001f32:	2201      	movs	r2, #1
 8001f34:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001f38:	484b      	ldr	r0, [pc, #300]	@ (8002068 <MAX31855_CS_Enable+0x354>)
 8001f3a:	f006 f8f5 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f44:	4848      	ldr	r0, [pc, #288]	@ (8002068 <MAX31855_CS_Enable+0x354>)
 8001f46:	f006 f8ef 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f50:	4845      	ldr	r0, [pc, #276]	@ (8002068 <MAX31855_CS_Enable+0x354>)
 8001f52:	f006 f8e9 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8001f56:	2201      	movs	r2, #1
 8001f58:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001f5c:	4842      	ldr	r0, [pc, #264]	@ (8002068 <MAX31855_CS_Enable+0x354>)
 8001f5e:	f006 f8e3 	bl	8008128 <HAL_GPIO_WritePin>
		break;
 8001f62:	e20a      	b.n	800237a <MAX31855_CS_Enable+0x666>
	case TC_CH5:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8001f64:	2201      	movs	r2, #1
 8001f66:	2101      	movs	r1, #1
 8001f68:	483f      	ldr	r0, [pc, #252]	@ (8002068 <MAX31855_CS_Enable+0x354>)
 8001f6a:	f006 f8dd 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8001f6e:	2201      	movs	r2, #1
 8001f70:	2102      	movs	r1, #2
 8001f72:	483d      	ldr	r0, [pc, #244]	@ (8002068 <MAX31855_CS_Enable+0x354>)
 8001f74:	f006 f8d8 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8001f78:	2201      	movs	r2, #1
 8001f7a:	2104      	movs	r1, #4
 8001f7c:	483a      	ldr	r0, [pc, #232]	@ (8002068 <MAX31855_CS_Enable+0x354>)
 8001f7e:	f006 f8d3 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8001f82:	2201      	movs	r2, #1
 8001f84:	2108      	movs	r1, #8
 8001f86:	4838      	ldr	r0, [pc, #224]	@ (8002068 <MAX31855_CS_Enable+0x354>)
 8001f88:	f006 f8ce 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_RESET);
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	2110      	movs	r1, #16
 8001f90:	4835      	ldr	r0, [pc, #212]	@ (8002068 <MAX31855_CS_Enable+0x354>)
 8001f92:	f006 f8c9 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8001f96:	2201      	movs	r2, #1
 8001f98:	2120      	movs	r1, #32
 8001f9a:	4833      	ldr	r0, [pc, #204]	@ (8002068 <MAX31855_CS_Enable+0x354>)
 8001f9c:	f006 f8c4 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	2140      	movs	r1, #64	@ 0x40
 8001fa4:	4830      	ldr	r0, [pc, #192]	@ (8002068 <MAX31855_CS_Enable+0x354>)
 8001fa6:	f006 f8bf 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8001faa:	2201      	movs	r2, #1
 8001fac:	2180      	movs	r1, #128	@ 0x80
 8001fae:	482e      	ldr	r0, [pc, #184]	@ (8002068 <MAX31855_CS_Enable+0x354>)
 8001fb0:	f006 f8ba 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001fba:	482b      	ldr	r0, [pc, #172]	@ (8002068 <MAX31855_CS_Enable+0x354>)
 8001fbc:	f006 f8b4 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001fc6:	4828      	ldr	r0, [pc, #160]	@ (8002068 <MAX31855_CS_Enable+0x354>)
 8001fc8:	f006 f8ae 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8001fcc:	2201      	movs	r2, #1
 8001fce:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001fd2:	4825      	ldr	r0, [pc, #148]	@ (8002068 <MAX31855_CS_Enable+0x354>)
 8001fd4:	f006 f8a8 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8001fd8:	2201      	movs	r2, #1
 8001fda:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001fde:	4822      	ldr	r0, [pc, #136]	@ (8002068 <MAX31855_CS_Enable+0x354>)
 8001fe0:	f006 f8a2 	bl	8008128 <HAL_GPIO_WritePin>
		break;
 8001fe4:	e1c9      	b.n	800237a <MAX31855_CS_Enable+0x666>
	case TC_CH6:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	2101      	movs	r1, #1
 8001fea:	481f      	ldr	r0, [pc, #124]	@ (8002068 <MAX31855_CS_Enable+0x354>)
 8001fec:	f006 f89c 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	2102      	movs	r1, #2
 8001ff4:	481c      	ldr	r0, [pc, #112]	@ (8002068 <MAX31855_CS_Enable+0x354>)
 8001ff6:	f006 f897 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	2104      	movs	r1, #4
 8001ffe:	481a      	ldr	r0, [pc, #104]	@ (8002068 <MAX31855_CS_Enable+0x354>)
 8002000:	f006 f892 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8002004:	2201      	movs	r2, #1
 8002006:	2108      	movs	r1, #8
 8002008:	4817      	ldr	r0, [pc, #92]	@ (8002068 <MAX31855_CS_Enable+0x354>)
 800200a:	f006 f88d 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 800200e:	2201      	movs	r2, #1
 8002010:	2110      	movs	r1, #16
 8002012:	4815      	ldr	r0, [pc, #84]	@ (8002068 <MAX31855_CS_Enable+0x354>)
 8002014:	f006 f888 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_RESET);
 8002018:	2200      	movs	r2, #0
 800201a:	2120      	movs	r1, #32
 800201c:	4812      	ldr	r0, [pc, #72]	@ (8002068 <MAX31855_CS_Enable+0x354>)
 800201e:	f006 f883 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8002022:	2201      	movs	r2, #1
 8002024:	2140      	movs	r1, #64	@ 0x40
 8002026:	4810      	ldr	r0, [pc, #64]	@ (8002068 <MAX31855_CS_Enable+0x354>)
 8002028:	f006 f87e 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 800202c:	2201      	movs	r2, #1
 800202e:	2180      	movs	r1, #128	@ 0x80
 8002030:	480d      	ldr	r0, [pc, #52]	@ (8002068 <MAX31855_CS_Enable+0x354>)
 8002032:	f006 f879 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8002036:	2201      	movs	r2, #1
 8002038:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800203c:	480a      	ldr	r0, [pc, #40]	@ (8002068 <MAX31855_CS_Enable+0x354>)
 800203e:	f006 f873 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8002042:	2201      	movs	r2, #1
 8002044:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002048:	4807      	ldr	r0, [pc, #28]	@ (8002068 <MAX31855_CS_Enable+0x354>)
 800204a:	f006 f86d 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 800204e:	2201      	movs	r2, #1
 8002050:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002054:	4804      	ldr	r0, [pc, #16]	@ (8002068 <MAX31855_CS_Enable+0x354>)
 8002056:	f006 f867 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 800205a:	2201      	movs	r2, #1
 800205c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002060:	4801      	ldr	r0, [pc, #4]	@ (8002068 <MAX31855_CS_Enable+0x354>)
 8002062:	f006 f861 	bl	8008128 <HAL_GPIO_WritePin>
		break;
 8002066:	e188      	b.n	800237a <MAX31855_CS_Enable+0x666>
 8002068:	58020c00 	.word	0x58020c00
	case TC_CH7:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 800206c:	2201      	movs	r2, #1
 800206e:	2101      	movs	r1, #1
 8002070:	48c4      	ldr	r0, [pc, #784]	@ (8002384 <MAX31855_CS_Enable+0x670>)
 8002072:	f006 f859 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8002076:	2201      	movs	r2, #1
 8002078:	2102      	movs	r1, #2
 800207a:	48c2      	ldr	r0, [pc, #776]	@ (8002384 <MAX31855_CS_Enable+0x670>)
 800207c:	f006 f854 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8002080:	2201      	movs	r2, #1
 8002082:	2104      	movs	r1, #4
 8002084:	48bf      	ldr	r0, [pc, #764]	@ (8002384 <MAX31855_CS_Enable+0x670>)
 8002086:	f006 f84f 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 800208a:	2201      	movs	r2, #1
 800208c:	2108      	movs	r1, #8
 800208e:	48bd      	ldr	r0, [pc, #756]	@ (8002384 <MAX31855_CS_Enable+0x670>)
 8002090:	f006 f84a 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8002094:	2201      	movs	r2, #1
 8002096:	2110      	movs	r1, #16
 8002098:	48ba      	ldr	r0, [pc, #744]	@ (8002384 <MAX31855_CS_Enable+0x670>)
 800209a:	f006 f845 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 800209e:	2201      	movs	r2, #1
 80020a0:	2120      	movs	r1, #32
 80020a2:	48b8      	ldr	r0, [pc, #736]	@ (8002384 <MAX31855_CS_Enable+0x670>)
 80020a4:	f006 f840 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_RESET);
 80020a8:	2200      	movs	r2, #0
 80020aa:	2140      	movs	r1, #64	@ 0x40
 80020ac:	48b5      	ldr	r0, [pc, #724]	@ (8002384 <MAX31855_CS_Enable+0x670>)
 80020ae:	f006 f83b 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 80020b2:	2201      	movs	r2, #1
 80020b4:	2180      	movs	r1, #128	@ 0x80
 80020b6:	48b3      	ldr	r0, [pc, #716]	@ (8002384 <MAX31855_CS_Enable+0x670>)
 80020b8:	f006 f836 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 80020bc:	2201      	movs	r2, #1
 80020be:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80020c2:	48b0      	ldr	r0, [pc, #704]	@ (8002384 <MAX31855_CS_Enable+0x670>)
 80020c4:	f006 f830 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 80020c8:	2201      	movs	r2, #1
 80020ca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80020ce:	48ad      	ldr	r0, [pc, #692]	@ (8002384 <MAX31855_CS_Enable+0x670>)
 80020d0:	f006 f82a 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 80020d4:	2201      	movs	r2, #1
 80020d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80020da:	48aa      	ldr	r0, [pc, #680]	@ (8002384 <MAX31855_CS_Enable+0x670>)
 80020dc:	f006 f824 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 80020e0:	2201      	movs	r2, #1
 80020e2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80020e6:	48a7      	ldr	r0, [pc, #668]	@ (8002384 <MAX31855_CS_Enable+0x670>)
 80020e8:	f006 f81e 	bl	8008128 <HAL_GPIO_WritePin>
		break;
 80020ec:	e145      	b.n	800237a <MAX31855_CS_Enable+0x666>
	case TC_CH8:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 80020ee:	2201      	movs	r2, #1
 80020f0:	2101      	movs	r1, #1
 80020f2:	48a4      	ldr	r0, [pc, #656]	@ (8002384 <MAX31855_CS_Enable+0x670>)
 80020f4:	f006 f818 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 80020f8:	2201      	movs	r2, #1
 80020fa:	2102      	movs	r1, #2
 80020fc:	48a1      	ldr	r0, [pc, #644]	@ (8002384 <MAX31855_CS_Enable+0x670>)
 80020fe:	f006 f813 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8002102:	2201      	movs	r2, #1
 8002104:	2104      	movs	r1, #4
 8002106:	489f      	ldr	r0, [pc, #636]	@ (8002384 <MAX31855_CS_Enable+0x670>)
 8002108:	f006 f80e 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 800210c:	2201      	movs	r2, #1
 800210e:	2108      	movs	r1, #8
 8002110:	489c      	ldr	r0, [pc, #624]	@ (8002384 <MAX31855_CS_Enable+0x670>)
 8002112:	f006 f809 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8002116:	2201      	movs	r2, #1
 8002118:	2110      	movs	r1, #16
 800211a:	489a      	ldr	r0, [pc, #616]	@ (8002384 <MAX31855_CS_Enable+0x670>)
 800211c:	f006 f804 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8002120:	2201      	movs	r2, #1
 8002122:	2120      	movs	r1, #32
 8002124:	4897      	ldr	r0, [pc, #604]	@ (8002384 <MAX31855_CS_Enable+0x670>)
 8002126:	f005 ffff 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 800212a:	2201      	movs	r2, #1
 800212c:	2140      	movs	r1, #64	@ 0x40
 800212e:	4895      	ldr	r0, [pc, #596]	@ (8002384 <MAX31855_CS_Enable+0x670>)
 8002130:	f005 fffa 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_RESET);
 8002134:	2200      	movs	r2, #0
 8002136:	2180      	movs	r1, #128	@ 0x80
 8002138:	4892      	ldr	r0, [pc, #584]	@ (8002384 <MAX31855_CS_Enable+0x670>)
 800213a:	f005 fff5 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 800213e:	2201      	movs	r2, #1
 8002140:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002144:	488f      	ldr	r0, [pc, #572]	@ (8002384 <MAX31855_CS_Enable+0x670>)
 8002146:	f005 ffef 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 800214a:	2201      	movs	r2, #1
 800214c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002150:	488c      	ldr	r0, [pc, #560]	@ (8002384 <MAX31855_CS_Enable+0x670>)
 8002152:	f005 ffe9 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8002156:	2201      	movs	r2, #1
 8002158:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800215c:	4889      	ldr	r0, [pc, #548]	@ (8002384 <MAX31855_CS_Enable+0x670>)
 800215e:	f005 ffe3 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8002162:	2201      	movs	r2, #1
 8002164:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002168:	4886      	ldr	r0, [pc, #536]	@ (8002384 <MAX31855_CS_Enable+0x670>)
 800216a:	f005 ffdd 	bl	8008128 <HAL_GPIO_WritePin>
		break;
 800216e:	e104      	b.n	800237a <MAX31855_CS_Enable+0x666>
	case TC_CH9:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8002170:	2201      	movs	r2, #1
 8002172:	2101      	movs	r1, #1
 8002174:	4883      	ldr	r0, [pc, #524]	@ (8002384 <MAX31855_CS_Enable+0x670>)
 8002176:	f005 ffd7 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 800217a:	2201      	movs	r2, #1
 800217c:	2102      	movs	r1, #2
 800217e:	4881      	ldr	r0, [pc, #516]	@ (8002384 <MAX31855_CS_Enable+0x670>)
 8002180:	f005 ffd2 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8002184:	2201      	movs	r2, #1
 8002186:	2104      	movs	r1, #4
 8002188:	487e      	ldr	r0, [pc, #504]	@ (8002384 <MAX31855_CS_Enable+0x670>)
 800218a:	f005 ffcd 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 800218e:	2201      	movs	r2, #1
 8002190:	2108      	movs	r1, #8
 8002192:	487c      	ldr	r0, [pc, #496]	@ (8002384 <MAX31855_CS_Enable+0x670>)
 8002194:	f005 ffc8 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8002198:	2201      	movs	r2, #1
 800219a:	2110      	movs	r1, #16
 800219c:	4879      	ldr	r0, [pc, #484]	@ (8002384 <MAX31855_CS_Enable+0x670>)
 800219e:	f005 ffc3 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 80021a2:	2201      	movs	r2, #1
 80021a4:	2120      	movs	r1, #32
 80021a6:	4877      	ldr	r0, [pc, #476]	@ (8002384 <MAX31855_CS_Enable+0x670>)
 80021a8:	f005 ffbe 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 80021ac:	2201      	movs	r2, #1
 80021ae:	2140      	movs	r1, #64	@ 0x40
 80021b0:	4874      	ldr	r0, [pc, #464]	@ (8002384 <MAX31855_CS_Enable+0x670>)
 80021b2:	f005 ffb9 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 80021b6:	2201      	movs	r2, #1
 80021b8:	2180      	movs	r1, #128	@ 0x80
 80021ba:	4872      	ldr	r0, [pc, #456]	@ (8002384 <MAX31855_CS_Enable+0x670>)
 80021bc:	f005 ffb4 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_RESET);
 80021c0:	2200      	movs	r2, #0
 80021c2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80021c6:	486f      	ldr	r0, [pc, #444]	@ (8002384 <MAX31855_CS_Enable+0x670>)
 80021c8:	f005 ffae 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 80021cc:	2201      	movs	r2, #1
 80021ce:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80021d2:	486c      	ldr	r0, [pc, #432]	@ (8002384 <MAX31855_CS_Enable+0x670>)
 80021d4:	f005 ffa8 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 80021d8:	2201      	movs	r2, #1
 80021da:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80021de:	4869      	ldr	r0, [pc, #420]	@ (8002384 <MAX31855_CS_Enable+0x670>)
 80021e0:	f005 ffa2 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 80021e4:	2201      	movs	r2, #1
 80021e6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80021ea:	4866      	ldr	r0, [pc, #408]	@ (8002384 <MAX31855_CS_Enable+0x670>)
 80021ec:	f005 ff9c 	bl	8008128 <HAL_GPIO_WritePin>
		break;
 80021f0:	e0c3      	b.n	800237a <MAX31855_CS_Enable+0x666>
	case TC_CH10:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 80021f2:	2201      	movs	r2, #1
 80021f4:	2101      	movs	r1, #1
 80021f6:	4863      	ldr	r0, [pc, #396]	@ (8002384 <MAX31855_CS_Enable+0x670>)
 80021f8:	f005 ff96 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 80021fc:	2201      	movs	r2, #1
 80021fe:	2102      	movs	r1, #2
 8002200:	4860      	ldr	r0, [pc, #384]	@ (8002384 <MAX31855_CS_Enable+0x670>)
 8002202:	f005 ff91 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8002206:	2201      	movs	r2, #1
 8002208:	2104      	movs	r1, #4
 800220a:	485e      	ldr	r0, [pc, #376]	@ (8002384 <MAX31855_CS_Enable+0x670>)
 800220c:	f005 ff8c 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8002210:	2201      	movs	r2, #1
 8002212:	2108      	movs	r1, #8
 8002214:	485b      	ldr	r0, [pc, #364]	@ (8002384 <MAX31855_CS_Enable+0x670>)
 8002216:	f005 ff87 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 800221a:	2201      	movs	r2, #1
 800221c:	2110      	movs	r1, #16
 800221e:	4859      	ldr	r0, [pc, #356]	@ (8002384 <MAX31855_CS_Enable+0x670>)
 8002220:	f005 ff82 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8002224:	2201      	movs	r2, #1
 8002226:	2120      	movs	r1, #32
 8002228:	4856      	ldr	r0, [pc, #344]	@ (8002384 <MAX31855_CS_Enable+0x670>)
 800222a:	f005 ff7d 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 800222e:	2201      	movs	r2, #1
 8002230:	2140      	movs	r1, #64	@ 0x40
 8002232:	4854      	ldr	r0, [pc, #336]	@ (8002384 <MAX31855_CS_Enable+0x670>)
 8002234:	f005 ff78 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8002238:	2201      	movs	r2, #1
 800223a:	2180      	movs	r1, #128	@ 0x80
 800223c:	4851      	ldr	r0, [pc, #324]	@ (8002384 <MAX31855_CS_Enable+0x670>)
 800223e:	f005 ff73 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8002242:	2201      	movs	r2, #1
 8002244:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002248:	484e      	ldr	r0, [pc, #312]	@ (8002384 <MAX31855_CS_Enable+0x670>)
 800224a:	f005 ff6d 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_RESET);
 800224e:	2200      	movs	r2, #0
 8002250:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002254:	484b      	ldr	r0, [pc, #300]	@ (8002384 <MAX31855_CS_Enable+0x670>)
 8002256:	f005 ff67 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 800225a:	2201      	movs	r2, #1
 800225c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002260:	4848      	ldr	r0, [pc, #288]	@ (8002384 <MAX31855_CS_Enable+0x670>)
 8002262:	f005 ff61 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8002266:	2201      	movs	r2, #1
 8002268:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800226c:	4845      	ldr	r0, [pc, #276]	@ (8002384 <MAX31855_CS_Enable+0x670>)
 800226e:	f005 ff5b 	bl	8008128 <HAL_GPIO_WritePin>
		break;
 8002272:	e082      	b.n	800237a <MAX31855_CS_Enable+0x666>
	case TC_CH11:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8002274:	2201      	movs	r2, #1
 8002276:	2101      	movs	r1, #1
 8002278:	4842      	ldr	r0, [pc, #264]	@ (8002384 <MAX31855_CS_Enable+0x670>)
 800227a:	f005 ff55 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 800227e:	2201      	movs	r2, #1
 8002280:	2102      	movs	r1, #2
 8002282:	4840      	ldr	r0, [pc, #256]	@ (8002384 <MAX31855_CS_Enable+0x670>)
 8002284:	f005 ff50 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8002288:	2201      	movs	r2, #1
 800228a:	2104      	movs	r1, #4
 800228c:	483d      	ldr	r0, [pc, #244]	@ (8002384 <MAX31855_CS_Enable+0x670>)
 800228e:	f005 ff4b 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8002292:	2201      	movs	r2, #1
 8002294:	2108      	movs	r1, #8
 8002296:	483b      	ldr	r0, [pc, #236]	@ (8002384 <MAX31855_CS_Enable+0x670>)
 8002298:	f005 ff46 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 800229c:	2201      	movs	r2, #1
 800229e:	2110      	movs	r1, #16
 80022a0:	4838      	ldr	r0, [pc, #224]	@ (8002384 <MAX31855_CS_Enable+0x670>)
 80022a2:	f005 ff41 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 80022a6:	2201      	movs	r2, #1
 80022a8:	2120      	movs	r1, #32
 80022aa:	4836      	ldr	r0, [pc, #216]	@ (8002384 <MAX31855_CS_Enable+0x670>)
 80022ac:	f005 ff3c 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 80022b0:	2201      	movs	r2, #1
 80022b2:	2140      	movs	r1, #64	@ 0x40
 80022b4:	4833      	ldr	r0, [pc, #204]	@ (8002384 <MAX31855_CS_Enable+0x670>)
 80022b6:	f005 ff37 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 80022ba:	2201      	movs	r2, #1
 80022bc:	2180      	movs	r1, #128	@ 0x80
 80022be:	4831      	ldr	r0, [pc, #196]	@ (8002384 <MAX31855_CS_Enable+0x670>)
 80022c0:	f005 ff32 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 80022c4:	2201      	movs	r2, #1
 80022c6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80022ca:	482e      	ldr	r0, [pc, #184]	@ (8002384 <MAX31855_CS_Enable+0x670>)
 80022cc:	f005 ff2c 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 80022d0:	2201      	movs	r2, #1
 80022d2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80022d6:	482b      	ldr	r0, [pc, #172]	@ (8002384 <MAX31855_CS_Enable+0x670>)
 80022d8:	f005 ff26 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_RESET);
 80022dc:	2200      	movs	r2, #0
 80022de:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80022e2:	4828      	ldr	r0, [pc, #160]	@ (8002384 <MAX31855_CS_Enable+0x670>)
 80022e4:	f005 ff20 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 80022e8:	2201      	movs	r2, #1
 80022ea:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80022ee:	4825      	ldr	r0, [pc, #148]	@ (8002384 <MAX31855_CS_Enable+0x670>)
 80022f0:	f005 ff1a 	bl	8008128 <HAL_GPIO_WritePin>
		break;
 80022f4:	e041      	b.n	800237a <MAX31855_CS_Enable+0x666>
	case TC_CH12:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 80022f6:	2201      	movs	r2, #1
 80022f8:	2101      	movs	r1, #1
 80022fa:	4822      	ldr	r0, [pc, #136]	@ (8002384 <MAX31855_CS_Enable+0x670>)
 80022fc:	f005 ff14 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8002300:	2201      	movs	r2, #1
 8002302:	2102      	movs	r1, #2
 8002304:	481f      	ldr	r0, [pc, #124]	@ (8002384 <MAX31855_CS_Enable+0x670>)
 8002306:	f005 ff0f 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 800230a:	2201      	movs	r2, #1
 800230c:	2104      	movs	r1, #4
 800230e:	481d      	ldr	r0, [pc, #116]	@ (8002384 <MAX31855_CS_Enable+0x670>)
 8002310:	f005 ff0a 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8002314:	2201      	movs	r2, #1
 8002316:	2108      	movs	r1, #8
 8002318:	481a      	ldr	r0, [pc, #104]	@ (8002384 <MAX31855_CS_Enable+0x670>)
 800231a:	f005 ff05 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 800231e:	2201      	movs	r2, #1
 8002320:	2110      	movs	r1, #16
 8002322:	4818      	ldr	r0, [pc, #96]	@ (8002384 <MAX31855_CS_Enable+0x670>)
 8002324:	f005 ff00 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8002328:	2201      	movs	r2, #1
 800232a:	2120      	movs	r1, #32
 800232c:	4815      	ldr	r0, [pc, #84]	@ (8002384 <MAX31855_CS_Enable+0x670>)
 800232e:	f005 fefb 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8002332:	2201      	movs	r2, #1
 8002334:	2140      	movs	r1, #64	@ 0x40
 8002336:	4813      	ldr	r0, [pc, #76]	@ (8002384 <MAX31855_CS_Enable+0x670>)
 8002338:	f005 fef6 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 800233c:	2201      	movs	r2, #1
 800233e:	2180      	movs	r1, #128	@ 0x80
 8002340:	4810      	ldr	r0, [pc, #64]	@ (8002384 <MAX31855_CS_Enable+0x670>)
 8002342:	f005 fef1 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8002346:	2201      	movs	r2, #1
 8002348:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800234c:	480d      	ldr	r0, [pc, #52]	@ (8002384 <MAX31855_CS_Enable+0x670>)
 800234e:	f005 feeb 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8002352:	2201      	movs	r2, #1
 8002354:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002358:	480a      	ldr	r0, [pc, #40]	@ (8002384 <MAX31855_CS_Enable+0x670>)
 800235a:	f005 fee5 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 800235e:	2201      	movs	r2, #1
 8002360:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002364:	4807      	ldr	r0, [pc, #28]	@ (8002384 <MAX31855_CS_Enable+0x670>)
 8002366:	f005 fedf 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_RESET);
 800236a:	2200      	movs	r2, #0
 800236c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002370:	4804      	ldr	r0, [pc, #16]	@ (8002384 <MAX31855_CS_Enable+0x670>)
 8002372:	f005 fed9 	bl	8008128 <HAL_GPIO_WritePin>
		break;
 8002376:	e000      	b.n	800237a <MAX31855_CS_Enable+0x666>
	default:
		break;
 8002378:	bf00      	nop
	}
}
 800237a:	bf00      	nop
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	58020c00 	.word	0x58020c00

08002388 <MAX31855_CS_Disable>:

// CS 핀을 High로 설정 (SPI 통신 종료)
void MAX31855_CS_Disable(uint8_t ch)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	4603      	mov	r3, r0
 8002390:	71fb      	strb	r3, [r7, #7]
	switch(ch) {
 8002392:	79fb      	ldrb	r3, [r7, #7]
 8002394:	2b0b      	cmp	r3, #11
 8002396:	f200 8329 	bhi.w	80029ec <MAX31855_CS_Disable+0x664>
 800239a:	a201      	add	r2, pc, #4	@ (adr r2, 80023a0 <MAX31855_CS_Disable+0x18>)
 800239c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023a0:	080023d1 	.word	0x080023d1
 80023a4:	08002453 	.word	0x08002453
 80023a8:	080024d5 	.word	0x080024d5
 80023ac:	08002557 	.word	0x08002557
 80023b0:	080025d9 	.word	0x080025d9
 80023b4:	0800265b 	.word	0x0800265b
 80023b8:	080026e1 	.word	0x080026e1
 80023bc:	08002763 	.word	0x08002763
 80023c0:	080027e5 	.word	0x080027e5
 80023c4:	08002867 	.word	0x08002867
 80023c8:	080028e9 	.word	0x080028e9
 80023cc:	0800296b 	.word	0x0800296b
	case TC_CH1:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 80023d0:	2201      	movs	r2, #1
 80023d2:	2101      	movs	r1, #1
 80023d4:	48c1      	ldr	r0, [pc, #772]	@ (80026dc <MAX31855_CS_Disable+0x354>)
 80023d6:	f005 fea7 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 80023da:	2201      	movs	r2, #1
 80023dc:	2102      	movs	r1, #2
 80023de:	48bf      	ldr	r0, [pc, #764]	@ (80026dc <MAX31855_CS_Disable+0x354>)
 80023e0:	f005 fea2 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 80023e4:	2201      	movs	r2, #1
 80023e6:	2104      	movs	r1, #4
 80023e8:	48bc      	ldr	r0, [pc, #752]	@ (80026dc <MAX31855_CS_Disable+0x354>)
 80023ea:	f005 fe9d 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 80023ee:	2201      	movs	r2, #1
 80023f0:	2108      	movs	r1, #8
 80023f2:	48ba      	ldr	r0, [pc, #744]	@ (80026dc <MAX31855_CS_Disable+0x354>)
 80023f4:	f005 fe98 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 80023f8:	2201      	movs	r2, #1
 80023fa:	2110      	movs	r1, #16
 80023fc:	48b7      	ldr	r0, [pc, #732]	@ (80026dc <MAX31855_CS_Disable+0x354>)
 80023fe:	f005 fe93 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8002402:	2201      	movs	r2, #1
 8002404:	2120      	movs	r1, #32
 8002406:	48b5      	ldr	r0, [pc, #724]	@ (80026dc <MAX31855_CS_Disable+0x354>)
 8002408:	f005 fe8e 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 800240c:	2201      	movs	r2, #1
 800240e:	2140      	movs	r1, #64	@ 0x40
 8002410:	48b2      	ldr	r0, [pc, #712]	@ (80026dc <MAX31855_CS_Disable+0x354>)
 8002412:	f005 fe89 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8002416:	2201      	movs	r2, #1
 8002418:	2180      	movs	r1, #128	@ 0x80
 800241a:	48b0      	ldr	r0, [pc, #704]	@ (80026dc <MAX31855_CS_Disable+0x354>)
 800241c:	f005 fe84 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8002420:	2201      	movs	r2, #1
 8002422:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002426:	48ad      	ldr	r0, [pc, #692]	@ (80026dc <MAX31855_CS_Disable+0x354>)
 8002428:	f005 fe7e 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 800242c:	2201      	movs	r2, #1
 800242e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002432:	48aa      	ldr	r0, [pc, #680]	@ (80026dc <MAX31855_CS_Disable+0x354>)
 8002434:	f005 fe78 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8002438:	2201      	movs	r2, #1
 800243a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800243e:	48a7      	ldr	r0, [pc, #668]	@ (80026dc <MAX31855_CS_Disable+0x354>)
 8002440:	f005 fe72 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8002444:	2201      	movs	r2, #1
 8002446:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800244a:	48a4      	ldr	r0, [pc, #656]	@ (80026dc <MAX31855_CS_Disable+0x354>)
 800244c:	f005 fe6c 	bl	8008128 <HAL_GPIO_WritePin>
		break;
 8002450:	e2cd      	b.n	80029ee <MAX31855_CS_Disable+0x666>
	case TC_CH2:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8002452:	2201      	movs	r2, #1
 8002454:	2101      	movs	r1, #1
 8002456:	48a1      	ldr	r0, [pc, #644]	@ (80026dc <MAX31855_CS_Disable+0x354>)
 8002458:	f005 fe66 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 800245c:	2201      	movs	r2, #1
 800245e:	2102      	movs	r1, #2
 8002460:	489e      	ldr	r0, [pc, #632]	@ (80026dc <MAX31855_CS_Disable+0x354>)
 8002462:	f005 fe61 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8002466:	2201      	movs	r2, #1
 8002468:	2104      	movs	r1, #4
 800246a:	489c      	ldr	r0, [pc, #624]	@ (80026dc <MAX31855_CS_Disable+0x354>)
 800246c:	f005 fe5c 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8002470:	2201      	movs	r2, #1
 8002472:	2108      	movs	r1, #8
 8002474:	4899      	ldr	r0, [pc, #612]	@ (80026dc <MAX31855_CS_Disable+0x354>)
 8002476:	f005 fe57 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 800247a:	2201      	movs	r2, #1
 800247c:	2110      	movs	r1, #16
 800247e:	4897      	ldr	r0, [pc, #604]	@ (80026dc <MAX31855_CS_Disable+0x354>)
 8002480:	f005 fe52 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8002484:	2201      	movs	r2, #1
 8002486:	2120      	movs	r1, #32
 8002488:	4894      	ldr	r0, [pc, #592]	@ (80026dc <MAX31855_CS_Disable+0x354>)
 800248a:	f005 fe4d 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 800248e:	2201      	movs	r2, #1
 8002490:	2140      	movs	r1, #64	@ 0x40
 8002492:	4892      	ldr	r0, [pc, #584]	@ (80026dc <MAX31855_CS_Disable+0x354>)
 8002494:	f005 fe48 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8002498:	2201      	movs	r2, #1
 800249a:	2180      	movs	r1, #128	@ 0x80
 800249c:	488f      	ldr	r0, [pc, #572]	@ (80026dc <MAX31855_CS_Disable+0x354>)
 800249e:	f005 fe43 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 80024a2:	2201      	movs	r2, #1
 80024a4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80024a8:	488c      	ldr	r0, [pc, #560]	@ (80026dc <MAX31855_CS_Disable+0x354>)
 80024aa:	f005 fe3d 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 80024ae:	2201      	movs	r2, #1
 80024b0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80024b4:	4889      	ldr	r0, [pc, #548]	@ (80026dc <MAX31855_CS_Disable+0x354>)
 80024b6:	f005 fe37 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 80024ba:	2201      	movs	r2, #1
 80024bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80024c0:	4886      	ldr	r0, [pc, #536]	@ (80026dc <MAX31855_CS_Disable+0x354>)
 80024c2:	f005 fe31 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 80024c6:	2201      	movs	r2, #1
 80024c8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80024cc:	4883      	ldr	r0, [pc, #524]	@ (80026dc <MAX31855_CS_Disable+0x354>)
 80024ce:	f005 fe2b 	bl	8008128 <HAL_GPIO_WritePin>
		break;
 80024d2:	e28c      	b.n	80029ee <MAX31855_CS_Disable+0x666>
	case TC_CH3:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 80024d4:	2201      	movs	r2, #1
 80024d6:	2101      	movs	r1, #1
 80024d8:	4880      	ldr	r0, [pc, #512]	@ (80026dc <MAX31855_CS_Disable+0x354>)
 80024da:	f005 fe25 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 80024de:	2201      	movs	r2, #1
 80024e0:	2102      	movs	r1, #2
 80024e2:	487e      	ldr	r0, [pc, #504]	@ (80026dc <MAX31855_CS_Disable+0x354>)
 80024e4:	f005 fe20 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 80024e8:	2201      	movs	r2, #1
 80024ea:	2104      	movs	r1, #4
 80024ec:	487b      	ldr	r0, [pc, #492]	@ (80026dc <MAX31855_CS_Disable+0x354>)
 80024ee:	f005 fe1b 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 80024f2:	2201      	movs	r2, #1
 80024f4:	2108      	movs	r1, #8
 80024f6:	4879      	ldr	r0, [pc, #484]	@ (80026dc <MAX31855_CS_Disable+0x354>)
 80024f8:	f005 fe16 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 80024fc:	2201      	movs	r2, #1
 80024fe:	2110      	movs	r1, #16
 8002500:	4876      	ldr	r0, [pc, #472]	@ (80026dc <MAX31855_CS_Disable+0x354>)
 8002502:	f005 fe11 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8002506:	2201      	movs	r2, #1
 8002508:	2120      	movs	r1, #32
 800250a:	4874      	ldr	r0, [pc, #464]	@ (80026dc <MAX31855_CS_Disable+0x354>)
 800250c:	f005 fe0c 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8002510:	2201      	movs	r2, #1
 8002512:	2140      	movs	r1, #64	@ 0x40
 8002514:	4871      	ldr	r0, [pc, #452]	@ (80026dc <MAX31855_CS_Disable+0x354>)
 8002516:	f005 fe07 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 800251a:	2201      	movs	r2, #1
 800251c:	2180      	movs	r1, #128	@ 0x80
 800251e:	486f      	ldr	r0, [pc, #444]	@ (80026dc <MAX31855_CS_Disable+0x354>)
 8002520:	f005 fe02 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8002524:	2201      	movs	r2, #1
 8002526:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800252a:	486c      	ldr	r0, [pc, #432]	@ (80026dc <MAX31855_CS_Disable+0x354>)
 800252c:	f005 fdfc 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8002530:	2201      	movs	r2, #1
 8002532:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002536:	4869      	ldr	r0, [pc, #420]	@ (80026dc <MAX31855_CS_Disable+0x354>)
 8002538:	f005 fdf6 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 800253c:	2201      	movs	r2, #1
 800253e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002542:	4866      	ldr	r0, [pc, #408]	@ (80026dc <MAX31855_CS_Disable+0x354>)
 8002544:	f005 fdf0 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8002548:	2201      	movs	r2, #1
 800254a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800254e:	4863      	ldr	r0, [pc, #396]	@ (80026dc <MAX31855_CS_Disable+0x354>)
 8002550:	f005 fdea 	bl	8008128 <HAL_GPIO_WritePin>
		break;
 8002554:	e24b      	b.n	80029ee <MAX31855_CS_Disable+0x666>
	case TC_CH4:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8002556:	2201      	movs	r2, #1
 8002558:	2101      	movs	r1, #1
 800255a:	4860      	ldr	r0, [pc, #384]	@ (80026dc <MAX31855_CS_Disable+0x354>)
 800255c:	f005 fde4 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8002560:	2201      	movs	r2, #1
 8002562:	2102      	movs	r1, #2
 8002564:	485d      	ldr	r0, [pc, #372]	@ (80026dc <MAX31855_CS_Disable+0x354>)
 8002566:	f005 fddf 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 800256a:	2201      	movs	r2, #1
 800256c:	2104      	movs	r1, #4
 800256e:	485b      	ldr	r0, [pc, #364]	@ (80026dc <MAX31855_CS_Disable+0x354>)
 8002570:	f005 fdda 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8002574:	2201      	movs	r2, #1
 8002576:	2108      	movs	r1, #8
 8002578:	4858      	ldr	r0, [pc, #352]	@ (80026dc <MAX31855_CS_Disable+0x354>)
 800257a:	f005 fdd5 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 800257e:	2201      	movs	r2, #1
 8002580:	2110      	movs	r1, #16
 8002582:	4856      	ldr	r0, [pc, #344]	@ (80026dc <MAX31855_CS_Disable+0x354>)
 8002584:	f005 fdd0 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8002588:	2201      	movs	r2, #1
 800258a:	2120      	movs	r1, #32
 800258c:	4853      	ldr	r0, [pc, #332]	@ (80026dc <MAX31855_CS_Disable+0x354>)
 800258e:	f005 fdcb 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8002592:	2201      	movs	r2, #1
 8002594:	2140      	movs	r1, #64	@ 0x40
 8002596:	4851      	ldr	r0, [pc, #324]	@ (80026dc <MAX31855_CS_Disable+0x354>)
 8002598:	f005 fdc6 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 800259c:	2201      	movs	r2, #1
 800259e:	2180      	movs	r1, #128	@ 0x80
 80025a0:	484e      	ldr	r0, [pc, #312]	@ (80026dc <MAX31855_CS_Disable+0x354>)
 80025a2:	f005 fdc1 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 80025a6:	2201      	movs	r2, #1
 80025a8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80025ac:	484b      	ldr	r0, [pc, #300]	@ (80026dc <MAX31855_CS_Disable+0x354>)
 80025ae:	f005 fdbb 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 80025b2:	2201      	movs	r2, #1
 80025b4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80025b8:	4848      	ldr	r0, [pc, #288]	@ (80026dc <MAX31855_CS_Disable+0x354>)
 80025ba:	f005 fdb5 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 80025be:	2201      	movs	r2, #1
 80025c0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80025c4:	4845      	ldr	r0, [pc, #276]	@ (80026dc <MAX31855_CS_Disable+0x354>)
 80025c6:	f005 fdaf 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 80025ca:	2201      	movs	r2, #1
 80025cc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80025d0:	4842      	ldr	r0, [pc, #264]	@ (80026dc <MAX31855_CS_Disable+0x354>)
 80025d2:	f005 fda9 	bl	8008128 <HAL_GPIO_WritePin>
		break;
 80025d6:	e20a      	b.n	80029ee <MAX31855_CS_Disable+0x666>
	case TC_CH5:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 80025d8:	2201      	movs	r2, #1
 80025da:	2101      	movs	r1, #1
 80025dc:	483f      	ldr	r0, [pc, #252]	@ (80026dc <MAX31855_CS_Disable+0x354>)
 80025de:	f005 fda3 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 80025e2:	2201      	movs	r2, #1
 80025e4:	2102      	movs	r1, #2
 80025e6:	483d      	ldr	r0, [pc, #244]	@ (80026dc <MAX31855_CS_Disable+0x354>)
 80025e8:	f005 fd9e 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 80025ec:	2201      	movs	r2, #1
 80025ee:	2104      	movs	r1, #4
 80025f0:	483a      	ldr	r0, [pc, #232]	@ (80026dc <MAX31855_CS_Disable+0x354>)
 80025f2:	f005 fd99 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 80025f6:	2201      	movs	r2, #1
 80025f8:	2108      	movs	r1, #8
 80025fa:	4838      	ldr	r0, [pc, #224]	@ (80026dc <MAX31855_CS_Disable+0x354>)
 80025fc:	f005 fd94 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8002600:	2201      	movs	r2, #1
 8002602:	2110      	movs	r1, #16
 8002604:	4835      	ldr	r0, [pc, #212]	@ (80026dc <MAX31855_CS_Disable+0x354>)
 8002606:	f005 fd8f 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 800260a:	2201      	movs	r2, #1
 800260c:	2120      	movs	r1, #32
 800260e:	4833      	ldr	r0, [pc, #204]	@ (80026dc <MAX31855_CS_Disable+0x354>)
 8002610:	f005 fd8a 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8002614:	2201      	movs	r2, #1
 8002616:	2140      	movs	r1, #64	@ 0x40
 8002618:	4830      	ldr	r0, [pc, #192]	@ (80026dc <MAX31855_CS_Disable+0x354>)
 800261a:	f005 fd85 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 800261e:	2201      	movs	r2, #1
 8002620:	2180      	movs	r1, #128	@ 0x80
 8002622:	482e      	ldr	r0, [pc, #184]	@ (80026dc <MAX31855_CS_Disable+0x354>)
 8002624:	f005 fd80 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8002628:	2201      	movs	r2, #1
 800262a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800262e:	482b      	ldr	r0, [pc, #172]	@ (80026dc <MAX31855_CS_Disable+0x354>)
 8002630:	f005 fd7a 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8002634:	2201      	movs	r2, #1
 8002636:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800263a:	4828      	ldr	r0, [pc, #160]	@ (80026dc <MAX31855_CS_Disable+0x354>)
 800263c:	f005 fd74 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8002640:	2201      	movs	r2, #1
 8002642:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002646:	4825      	ldr	r0, [pc, #148]	@ (80026dc <MAX31855_CS_Disable+0x354>)
 8002648:	f005 fd6e 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 800264c:	2201      	movs	r2, #1
 800264e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002652:	4822      	ldr	r0, [pc, #136]	@ (80026dc <MAX31855_CS_Disable+0x354>)
 8002654:	f005 fd68 	bl	8008128 <HAL_GPIO_WritePin>
		break;
 8002658:	e1c9      	b.n	80029ee <MAX31855_CS_Disable+0x666>
	case TC_CH6:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 800265a:	2201      	movs	r2, #1
 800265c:	2101      	movs	r1, #1
 800265e:	481f      	ldr	r0, [pc, #124]	@ (80026dc <MAX31855_CS_Disable+0x354>)
 8002660:	f005 fd62 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8002664:	2201      	movs	r2, #1
 8002666:	2102      	movs	r1, #2
 8002668:	481c      	ldr	r0, [pc, #112]	@ (80026dc <MAX31855_CS_Disable+0x354>)
 800266a:	f005 fd5d 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 800266e:	2201      	movs	r2, #1
 8002670:	2104      	movs	r1, #4
 8002672:	481a      	ldr	r0, [pc, #104]	@ (80026dc <MAX31855_CS_Disable+0x354>)
 8002674:	f005 fd58 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8002678:	2201      	movs	r2, #1
 800267a:	2108      	movs	r1, #8
 800267c:	4817      	ldr	r0, [pc, #92]	@ (80026dc <MAX31855_CS_Disable+0x354>)
 800267e:	f005 fd53 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8002682:	2201      	movs	r2, #1
 8002684:	2110      	movs	r1, #16
 8002686:	4815      	ldr	r0, [pc, #84]	@ (80026dc <MAX31855_CS_Disable+0x354>)
 8002688:	f005 fd4e 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 800268c:	2201      	movs	r2, #1
 800268e:	2120      	movs	r1, #32
 8002690:	4812      	ldr	r0, [pc, #72]	@ (80026dc <MAX31855_CS_Disable+0x354>)
 8002692:	f005 fd49 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8002696:	2201      	movs	r2, #1
 8002698:	2140      	movs	r1, #64	@ 0x40
 800269a:	4810      	ldr	r0, [pc, #64]	@ (80026dc <MAX31855_CS_Disable+0x354>)
 800269c:	f005 fd44 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 80026a0:	2201      	movs	r2, #1
 80026a2:	2180      	movs	r1, #128	@ 0x80
 80026a4:	480d      	ldr	r0, [pc, #52]	@ (80026dc <MAX31855_CS_Disable+0x354>)
 80026a6:	f005 fd3f 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 80026aa:	2201      	movs	r2, #1
 80026ac:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80026b0:	480a      	ldr	r0, [pc, #40]	@ (80026dc <MAX31855_CS_Disable+0x354>)
 80026b2:	f005 fd39 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 80026b6:	2201      	movs	r2, #1
 80026b8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80026bc:	4807      	ldr	r0, [pc, #28]	@ (80026dc <MAX31855_CS_Disable+0x354>)
 80026be:	f005 fd33 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 80026c2:	2201      	movs	r2, #1
 80026c4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80026c8:	4804      	ldr	r0, [pc, #16]	@ (80026dc <MAX31855_CS_Disable+0x354>)
 80026ca:	f005 fd2d 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 80026ce:	2201      	movs	r2, #1
 80026d0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80026d4:	4801      	ldr	r0, [pc, #4]	@ (80026dc <MAX31855_CS_Disable+0x354>)
 80026d6:	f005 fd27 	bl	8008128 <HAL_GPIO_WritePin>
		break;
 80026da:	e188      	b.n	80029ee <MAX31855_CS_Disable+0x666>
 80026dc:	58020c00 	.word	0x58020c00
	case TC_CH7:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 80026e0:	2201      	movs	r2, #1
 80026e2:	2101      	movs	r1, #1
 80026e4:	48c4      	ldr	r0, [pc, #784]	@ (80029f8 <MAX31855_CS_Disable+0x670>)
 80026e6:	f005 fd1f 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 80026ea:	2201      	movs	r2, #1
 80026ec:	2102      	movs	r1, #2
 80026ee:	48c2      	ldr	r0, [pc, #776]	@ (80029f8 <MAX31855_CS_Disable+0x670>)
 80026f0:	f005 fd1a 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 80026f4:	2201      	movs	r2, #1
 80026f6:	2104      	movs	r1, #4
 80026f8:	48bf      	ldr	r0, [pc, #764]	@ (80029f8 <MAX31855_CS_Disable+0x670>)
 80026fa:	f005 fd15 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 80026fe:	2201      	movs	r2, #1
 8002700:	2108      	movs	r1, #8
 8002702:	48bd      	ldr	r0, [pc, #756]	@ (80029f8 <MAX31855_CS_Disable+0x670>)
 8002704:	f005 fd10 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8002708:	2201      	movs	r2, #1
 800270a:	2110      	movs	r1, #16
 800270c:	48ba      	ldr	r0, [pc, #744]	@ (80029f8 <MAX31855_CS_Disable+0x670>)
 800270e:	f005 fd0b 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8002712:	2201      	movs	r2, #1
 8002714:	2120      	movs	r1, #32
 8002716:	48b8      	ldr	r0, [pc, #736]	@ (80029f8 <MAX31855_CS_Disable+0x670>)
 8002718:	f005 fd06 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 800271c:	2201      	movs	r2, #1
 800271e:	2140      	movs	r1, #64	@ 0x40
 8002720:	48b5      	ldr	r0, [pc, #724]	@ (80029f8 <MAX31855_CS_Disable+0x670>)
 8002722:	f005 fd01 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8002726:	2201      	movs	r2, #1
 8002728:	2180      	movs	r1, #128	@ 0x80
 800272a:	48b3      	ldr	r0, [pc, #716]	@ (80029f8 <MAX31855_CS_Disable+0x670>)
 800272c:	f005 fcfc 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8002730:	2201      	movs	r2, #1
 8002732:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002736:	48b0      	ldr	r0, [pc, #704]	@ (80029f8 <MAX31855_CS_Disable+0x670>)
 8002738:	f005 fcf6 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 800273c:	2201      	movs	r2, #1
 800273e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002742:	48ad      	ldr	r0, [pc, #692]	@ (80029f8 <MAX31855_CS_Disable+0x670>)
 8002744:	f005 fcf0 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8002748:	2201      	movs	r2, #1
 800274a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800274e:	48aa      	ldr	r0, [pc, #680]	@ (80029f8 <MAX31855_CS_Disable+0x670>)
 8002750:	f005 fcea 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8002754:	2201      	movs	r2, #1
 8002756:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800275a:	48a7      	ldr	r0, [pc, #668]	@ (80029f8 <MAX31855_CS_Disable+0x670>)
 800275c:	f005 fce4 	bl	8008128 <HAL_GPIO_WritePin>
		break;
 8002760:	e145      	b.n	80029ee <MAX31855_CS_Disable+0x666>
	case TC_CH8:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8002762:	2201      	movs	r2, #1
 8002764:	2101      	movs	r1, #1
 8002766:	48a4      	ldr	r0, [pc, #656]	@ (80029f8 <MAX31855_CS_Disable+0x670>)
 8002768:	f005 fcde 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 800276c:	2201      	movs	r2, #1
 800276e:	2102      	movs	r1, #2
 8002770:	48a1      	ldr	r0, [pc, #644]	@ (80029f8 <MAX31855_CS_Disable+0x670>)
 8002772:	f005 fcd9 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8002776:	2201      	movs	r2, #1
 8002778:	2104      	movs	r1, #4
 800277a:	489f      	ldr	r0, [pc, #636]	@ (80029f8 <MAX31855_CS_Disable+0x670>)
 800277c:	f005 fcd4 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8002780:	2201      	movs	r2, #1
 8002782:	2108      	movs	r1, #8
 8002784:	489c      	ldr	r0, [pc, #624]	@ (80029f8 <MAX31855_CS_Disable+0x670>)
 8002786:	f005 fccf 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 800278a:	2201      	movs	r2, #1
 800278c:	2110      	movs	r1, #16
 800278e:	489a      	ldr	r0, [pc, #616]	@ (80029f8 <MAX31855_CS_Disable+0x670>)
 8002790:	f005 fcca 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8002794:	2201      	movs	r2, #1
 8002796:	2120      	movs	r1, #32
 8002798:	4897      	ldr	r0, [pc, #604]	@ (80029f8 <MAX31855_CS_Disable+0x670>)
 800279a:	f005 fcc5 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 800279e:	2201      	movs	r2, #1
 80027a0:	2140      	movs	r1, #64	@ 0x40
 80027a2:	4895      	ldr	r0, [pc, #596]	@ (80029f8 <MAX31855_CS_Disable+0x670>)
 80027a4:	f005 fcc0 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 80027a8:	2201      	movs	r2, #1
 80027aa:	2180      	movs	r1, #128	@ 0x80
 80027ac:	4892      	ldr	r0, [pc, #584]	@ (80029f8 <MAX31855_CS_Disable+0x670>)
 80027ae:	f005 fcbb 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 80027b2:	2201      	movs	r2, #1
 80027b4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80027b8:	488f      	ldr	r0, [pc, #572]	@ (80029f8 <MAX31855_CS_Disable+0x670>)
 80027ba:	f005 fcb5 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 80027be:	2201      	movs	r2, #1
 80027c0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80027c4:	488c      	ldr	r0, [pc, #560]	@ (80029f8 <MAX31855_CS_Disable+0x670>)
 80027c6:	f005 fcaf 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 80027ca:	2201      	movs	r2, #1
 80027cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80027d0:	4889      	ldr	r0, [pc, #548]	@ (80029f8 <MAX31855_CS_Disable+0x670>)
 80027d2:	f005 fca9 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 80027d6:	2201      	movs	r2, #1
 80027d8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80027dc:	4886      	ldr	r0, [pc, #536]	@ (80029f8 <MAX31855_CS_Disable+0x670>)
 80027de:	f005 fca3 	bl	8008128 <HAL_GPIO_WritePin>
		break;
 80027e2:	e104      	b.n	80029ee <MAX31855_CS_Disable+0x666>
	case TC_CH9:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 80027e4:	2201      	movs	r2, #1
 80027e6:	2101      	movs	r1, #1
 80027e8:	4883      	ldr	r0, [pc, #524]	@ (80029f8 <MAX31855_CS_Disable+0x670>)
 80027ea:	f005 fc9d 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 80027ee:	2201      	movs	r2, #1
 80027f0:	2102      	movs	r1, #2
 80027f2:	4881      	ldr	r0, [pc, #516]	@ (80029f8 <MAX31855_CS_Disable+0x670>)
 80027f4:	f005 fc98 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 80027f8:	2201      	movs	r2, #1
 80027fa:	2104      	movs	r1, #4
 80027fc:	487e      	ldr	r0, [pc, #504]	@ (80029f8 <MAX31855_CS_Disable+0x670>)
 80027fe:	f005 fc93 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8002802:	2201      	movs	r2, #1
 8002804:	2108      	movs	r1, #8
 8002806:	487c      	ldr	r0, [pc, #496]	@ (80029f8 <MAX31855_CS_Disable+0x670>)
 8002808:	f005 fc8e 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 800280c:	2201      	movs	r2, #1
 800280e:	2110      	movs	r1, #16
 8002810:	4879      	ldr	r0, [pc, #484]	@ (80029f8 <MAX31855_CS_Disable+0x670>)
 8002812:	f005 fc89 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8002816:	2201      	movs	r2, #1
 8002818:	2120      	movs	r1, #32
 800281a:	4877      	ldr	r0, [pc, #476]	@ (80029f8 <MAX31855_CS_Disable+0x670>)
 800281c:	f005 fc84 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8002820:	2201      	movs	r2, #1
 8002822:	2140      	movs	r1, #64	@ 0x40
 8002824:	4874      	ldr	r0, [pc, #464]	@ (80029f8 <MAX31855_CS_Disable+0x670>)
 8002826:	f005 fc7f 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 800282a:	2201      	movs	r2, #1
 800282c:	2180      	movs	r1, #128	@ 0x80
 800282e:	4872      	ldr	r0, [pc, #456]	@ (80029f8 <MAX31855_CS_Disable+0x670>)
 8002830:	f005 fc7a 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8002834:	2201      	movs	r2, #1
 8002836:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800283a:	486f      	ldr	r0, [pc, #444]	@ (80029f8 <MAX31855_CS_Disable+0x670>)
 800283c:	f005 fc74 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8002840:	2201      	movs	r2, #1
 8002842:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002846:	486c      	ldr	r0, [pc, #432]	@ (80029f8 <MAX31855_CS_Disable+0x670>)
 8002848:	f005 fc6e 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 800284c:	2201      	movs	r2, #1
 800284e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002852:	4869      	ldr	r0, [pc, #420]	@ (80029f8 <MAX31855_CS_Disable+0x670>)
 8002854:	f005 fc68 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8002858:	2201      	movs	r2, #1
 800285a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800285e:	4866      	ldr	r0, [pc, #408]	@ (80029f8 <MAX31855_CS_Disable+0x670>)
 8002860:	f005 fc62 	bl	8008128 <HAL_GPIO_WritePin>
		break;
 8002864:	e0c3      	b.n	80029ee <MAX31855_CS_Disable+0x666>
	case TC_CH10:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8002866:	2201      	movs	r2, #1
 8002868:	2101      	movs	r1, #1
 800286a:	4863      	ldr	r0, [pc, #396]	@ (80029f8 <MAX31855_CS_Disable+0x670>)
 800286c:	f005 fc5c 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8002870:	2201      	movs	r2, #1
 8002872:	2102      	movs	r1, #2
 8002874:	4860      	ldr	r0, [pc, #384]	@ (80029f8 <MAX31855_CS_Disable+0x670>)
 8002876:	f005 fc57 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 800287a:	2201      	movs	r2, #1
 800287c:	2104      	movs	r1, #4
 800287e:	485e      	ldr	r0, [pc, #376]	@ (80029f8 <MAX31855_CS_Disable+0x670>)
 8002880:	f005 fc52 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8002884:	2201      	movs	r2, #1
 8002886:	2108      	movs	r1, #8
 8002888:	485b      	ldr	r0, [pc, #364]	@ (80029f8 <MAX31855_CS_Disable+0x670>)
 800288a:	f005 fc4d 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 800288e:	2201      	movs	r2, #1
 8002890:	2110      	movs	r1, #16
 8002892:	4859      	ldr	r0, [pc, #356]	@ (80029f8 <MAX31855_CS_Disable+0x670>)
 8002894:	f005 fc48 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8002898:	2201      	movs	r2, #1
 800289a:	2120      	movs	r1, #32
 800289c:	4856      	ldr	r0, [pc, #344]	@ (80029f8 <MAX31855_CS_Disable+0x670>)
 800289e:	f005 fc43 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 80028a2:	2201      	movs	r2, #1
 80028a4:	2140      	movs	r1, #64	@ 0x40
 80028a6:	4854      	ldr	r0, [pc, #336]	@ (80029f8 <MAX31855_CS_Disable+0x670>)
 80028a8:	f005 fc3e 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 80028ac:	2201      	movs	r2, #1
 80028ae:	2180      	movs	r1, #128	@ 0x80
 80028b0:	4851      	ldr	r0, [pc, #324]	@ (80029f8 <MAX31855_CS_Disable+0x670>)
 80028b2:	f005 fc39 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 80028b6:	2201      	movs	r2, #1
 80028b8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80028bc:	484e      	ldr	r0, [pc, #312]	@ (80029f8 <MAX31855_CS_Disable+0x670>)
 80028be:	f005 fc33 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 80028c2:	2201      	movs	r2, #1
 80028c4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80028c8:	484b      	ldr	r0, [pc, #300]	@ (80029f8 <MAX31855_CS_Disable+0x670>)
 80028ca:	f005 fc2d 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 80028ce:	2201      	movs	r2, #1
 80028d0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80028d4:	4848      	ldr	r0, [pc, #288]	@ (80029f8 <MAX31855_CS_Disable+0x670>)
 80028d6:	f005 fc27 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 80028da:	2201      	movs	r2, #1
 80028dc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80028e0:	4845      	ldr	r0, [pc, #276]	@ (80029f8 <MAX31855_CS_Disable+0x670>)
 80028e2:	f005 fc21 	bl	8008128 <HAL_GPIO_WritePin>
		break;
 80028e6:	e082      	b.n	80029ee <MAX31855_CS_Disable+0x666>
	case TC_CH11:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 80028e8:	2201      	movs	r2, #1
 80028ea:	2101      	movs	r1, #1
 80028ec:	4842      	ldr	r0, [pc, #264]	@ (80029f8 <MAX31855_CS_Disable+0x670>)
 80028ee:	f005 fc1b 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 80028f2:	2201      	movs	r2, #1
 80028f4:	2102      	movs	r1, #2
 80028f6:	4840      	ldr	r0, [pc, #256]	@ (80029f8 <MAX31855_CS_Disable+0x670>)
 80028f8:	f005 fc16 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 80028fc:	2201      	movs	r2, #1
 80028fe:	2104      	movs	r1, #4
 8002900:	483d      	ldr	r0, [pc, #244]	@ (80029f8 <MAX31855_CS_Disable+0x670>)
 8002902:	f005 fc11 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8002906:	2201      	movs	r2, #1
 8002908:	2108      	movs	r1, #8
 800290a:	483b      	ldr	r0, [pc, #236]	@ (80029f8 <MAX31855_CS_Disable+0x670>)
 800290c:	f005 fc0c 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8002910:	2201      	movs	r2, #1
 8002912:	2110      	movs	r1, #16
 8002914:	4838      	ldr	r0, [pc, #224]	@ (80029f8 <MAX31855_CS_Disable+0x670>)
 8002916:	f005 fc07 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 800291a:	2201      	movs	r2, #1
 800291c:	2120      	movs	r1, #32
 800291e:	4836      	ldr	r0, [pc, #216]	@ (80029f8 <MAX31855_CS_Disable+0x670>)
 8002920:	f005 fc02 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8002924:	2201      	movs	r2, #1
 8002926:	2140      	movs	r1, #64	@ 0x40
 8002928:	4833      	ldr	r0, [pc, #204]	@ (80029f8 <MAX31855_CS_Disable+0x670>)
 800292a:	f005 fbfd 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 800292e:	2201      	movs	r2, #1
 8002930:	2180      	movs	r1, #128	@ 0x80
 8002932:	4831      	ldr	r0, [pc, #196]	@ (80029f8 <MAX31855_CS_Disable+0x670>)
 8002934:	f005 fbf8 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8002938:	2201      	movs	r2, #1
 800293a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800293e:	482e      	ldr	r0, [pc, #184]	@ (80029f8 <MAX31855_CS_Disable+0x670>)
 8002940:	f005 fbf2 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8002944:	2201      	movs	r2, #1
 8002946:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800294a:	482b      	ldr	r0, [pc, #172]	@ (80029f8 <MAX31855_CS_Disable+0x670>)
 800294c:	f005 fbec 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8002950:	2201      	movs	r2, #1
 8002952:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002956:	4828      	ldr	r0, [pc, #160]	@ (80029f8 <MAX31855_CS_Disable+0x670>)
 8002958:	f005 fbe6 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 800295c:	2201      	movs	r2, #1
 800295e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002962:	4825      	ldr	r0, [pc, #148]	@ (80029f8 <MAX31855_CS_Disable+0x670>)
 8002964:	f005 fbe0 	bl	8008128 <HAL_GPIO_WritePin>
		break;
 8002968:	e041      	b.n	80029ee <MAX31855_CS_Disable+0x666>
	case TC_CH12:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 800296a:	2201      	movs	r2, #1
 800296c:	2101      	movs	r1, #1
 800296e:	4822      	ldr	r0, [pc, #136]	@ (80029f8 <MAX31855_CS_Disable+0x670>)
 8002970:	f005 fbda 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8002974:	2201      	movs	r2, #1
 8002976:	2102      	movs	r1, #2
 8002978:	481f      	ldr	r0, [pc, #124]	@ (80029f8 <MAX31855_CS_Disable+0x670>)
 800297a:	f005 fbd5 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 800297e:	2201      	movs	r2, #1
 8002980:	2104      	movs	r1, #4
 8002982:	481d      	ldr	r0, [pc, #116]	@ (80029f8 <MAX31855_CS_Disable+0x670>)
 8002984:	f005 fbd0 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8002988:	2201      	movs	r2, #1
 800298a:	2108      	movs	r1, #8
 800298c:	481a      	ldr	r0, [pc, #104]	@ (80029f8 <MAX31855_CS_Disable+0x670>)
 800298e:	f005 fbcb 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8002992:	2201      	movs	r2, #1
 8002994:	2110      	movs	r1, #16
 8002996:	4818      	ldr	r0, [pc, #96]	@ (80029f8 <MAX31855_CS_Disable+0x670>)
 8002998:	f005 fbc6 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 800299c:	2201      	movs	r2, #1
 800299e:	2120      	movs	r1, #32
 80029a0:	4815      	ldr	r0, [pc, #84]	@ (80029f8 <MAX31855_CS_Disable+0x670>)
 80029a2:	f005 fbc1 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 80029a6:	2201      	movs	r2, #1
 80029a8:	2140      	movs	r1, #64	@ 0x40
 80029aa:	4813      	ldr	r0, [pc, #76]	@ (80029f8 <MAX31855_CS_Disable+0x670>)
 80029ac:	f005 fbbc 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 80029b0:	2201      	movs	r2, #1
 80029b2:	2180      	movs	r1, #128	@ 0x80
 80029b4:	4810      	ldr	r0, [pc, #64]	@ (80029f8 <MAX31855_CS_Disable+0x670>)
 80029b6:	f005 fbb7 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 80029ba:	2201      	movs	r2, #1
 80029bc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80029c0:	480d      	ldr	r0, [pc, #52]	@ (80029f8 <MAX31855_CS_Disable+0x670>)
 80029c2:	f005 fbb1 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 80029c6:	2201      	movs	r2, #1
 80029c8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80029cc:	480a      	ldr	r0, [pc, #40]	@ (80029f8 <MAX31855_CS_Disable+0x670>)
 80029ce:	f005 fbab 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 80029d2:	2201      	movs	r2, #1
 80029d4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80029d8:	4807      	ldr	r0, [pc, #28]	@ (80029f8 <MAX31855_CS_Disable+0x670>)
 80029da:	f005 fba5 	bl	8008128 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 80029de:	2201      	movs	r2, #1
 80029e0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80029e4:	4804      	ldr	r0, [pc, #16]	@ (80029f8 <MAX31855_CS_Disable+0x670>)
 80029e6:	f005 fb9f 	bl	8008128 <HAL_GPIO_WritePin>
		break;
 80029ea:	e000      	b.n	80029ee <MAX31855_CS_Disable+0x666>
	default:
		break;
 80029ec:	bf00      	nop
	}
}
 80029ee:	bf00      	nop
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	58020c00 	.word	0x58020c00

080029fc <MAX31855_ReadTemp_IT>:
uint8_t dummy_tx[4] = {0xFF, 0xFF, 0xFF, 0xFF};
uint8_t spi_rx_buffer[4];
double tc[MAX_TC_CH] = {0};

void MAX31855_ReadTemp_IT(uint8_t ch)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	4603      	mov	r3, r0
 8002a04:	71fb      	strb	r3, [r7, #7]
	MAX31855_CS_Enable(idx_tc);
 8002a06:	4b07      	ldr	r3, [pc, #28]	@ (8002a24 <MAX31855_ReadTemp_IT+0x28>)
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7ff f982 	bl	8001d14 <MAX31855_CS_Enable>
    //HAL_SPI_TransmitReceive_IT(&hspi1, dummy_tx, spi_rx_buffer, 4);
    HAL_SPI_Receive_IT(&hspi1, spi_rx_buffer, 4);
 8002a10:	2204      	movs	r2, #4
 8002a12:	4905      	ldr	r1, [pc, #20]	@ (8002a28 <MAX31855_ReadTemp_IT+0x2c>)
 8002a14:	4805      	ldr	r0, [pc, #20]	@ (8002a2c <MAX31855_ReadTemp_IT+0x30>)
 8002a16:	f009 fa4b 	bl	800beb0 <HAL_SPI_Receive_IT>

}
 8002a1a:	bf00      	nop
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	24000521 	.word	0x24000521
 8002a28:	24000524 	.word	0x24000524
 8002a2c:	24000304 	.word	0x24000304

08002a30 <MAX3188_StartRead>:

void MAX3188_StartRead()
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
	idx_tc = 0;
 8002a34:	4b06      	ldr	r3, [pc, #24]	@ (8002a50 <MAX3188_StartRead+0x20>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	701a      	strb	r2, [r3, #0]
	fTemp = false;
 8002a3a:	4b06      	ldr	r3, [pc, #24]	@ (8002a54 <MAX3188_StartRead+0x24>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	701a      	strb	r2, [r3, #0]

	MAX31855_ReadTemp_IT(idx_tc);
 8002a40:	4b03      	ldr	r3, [pc, #12]	@ (8002a50 <MAX3188_StartRead+0x20>)
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7ff ffd9 	bl	80029fc <MAX31855_ReadTemp_IT>
}
 8002a4a:	bf00      	nop
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	24000521 	.word	0x24000521
 8002a54:	24000520 	.word	0x24000520

08002a58 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
    if (hspi->Instance == SPI1)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a27      	ldr	r2, [pc, #156]	@ (8002b04 <HAL_SPI_RxCpltCallback+0xac>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d147      	bne.n	8002afa <HAL_SPI_RxCpltCallback+0xa2>
    {
    	MAX31855_CS_Disable(idx_tc);
 8002a6a:	4b27      	ldr	r3, [pc, #156]	@ (8002b08 <HAL_SPI_RxCpltCallback+0xb0>)
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7ff fc8a 	bl	8002388 <MAX31855_CS_Disable>

    	uint8_t data[4];
    	memcpy((void*)data,(void*)spi_rx_buffer,sizeof(uint8_t)*4);
 8002a74:	4b25      	ldr	r3, [pc, #148]	@ (8002b0c <HAL_SPI_RxCpltCallback+0xb4>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	60fb      	str	r3, [r7, #12]

        int32_t value = ((int32_t)data[0] << 24) | ((int32_t)data[1] << 16) |
 8002a7a:	7b3b      	ldrb	r3, [r7, #12]
 8002a7c:	061a      	lsls	r2, r3, #24
 8002a7e:	7b7b      	ldrb	r3, [r7, #13]
 8002a80:	041b      	lsls	r3, r3, #16
 8002a82:	431a      	orrs	r2, r3
                        ((int32_t)data[2] << 8)  | ((int32_t)data[3]);
 8002a84:	7bbb      	ldrb	r3, [r7, #14]
 8002a86:	021b      	lsls	r3, r3, #8
        int32_t value = ((int32_t)data[0] << 24) | ((int32_t)data[1] << 16) |
 8002a88:	4313      	orrs	r3, r2
                        ((int32_t)data[2] << 8)  | ((int32_t)data[3]);
 8002a8a:	7bfa      	ldrb	r2, [r7, #15]
        int32_t value = ((int32_t)data[0] << 24) | ((int32_t)data[1] << 16) |
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	613b      	str	r3, [r7, #16]

        int16_t temp_data = (value >> 18) & 0x3FFF; // 14비트 Thermocouple data는 bit[31:18]에 위치
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	0c9b      	lsrs	r3, r3, #18
 8002a94:	82fb      	strh	r3, [r7, #22]

        if (temp_data & 0x2000)
 8002a96:	8afb      	ldrh	r3, [r7, #22]
 8002a98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d005      	beq.n	8002aac <HAL_SPI_RxCpltCallback+0x54>
        {
            temp_data |= 0xC000; // Sign 확장
 8002aa0:	8afb      	ldrh	r3, [r7, #22]
 8002aa2:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 8002aa6:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 8002aaa:	82fb      	strh	r3, [r7, #22]
        }

        tc[idx_tc] = (double)temp_data * 0.25f;
 8002aac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002ab0:	ee07 3a90 	vmov	s15, r3
 8002ab4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002ab8:	4b13      	ldr	r3, [pc, #76]	@ (8002b08 <HAL_SPI_RxCpltCallback+0xb0>)
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	eeb5 6b00 	vmov.f64	d6, #80	@ 0x3e800000  0.250
 8002ac0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002ac4:	4a12      	ldr	r2, [pc, #72]	@ (8002b10 <HAL_SPI_RxCpltCallback+0xb8>)
 8002ac6:	00db      	lsls	r3, r3, #3
 8002ac8:	4413      	add	r3, r2
 8002aca:	ed83 7b00 	vstr	d7, [r3]

        idx_tc++;
 8002ace:	4b0e      	ldr	r3, [pc, #56]	@ (8002b08 <HAL_SPI_RxCpltCallback+0xb0>)
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	b2da      	uxtb	r2, r3
 8002ad6:	4b0c      	ldr	r3, [pc, #48]	@ (8002b08 <HAL_SPI_RxCpltCallback+0xb0>)
 8002ad8:	701a      	strb	r2, [r3, #0]

		if (idx_tc == MAX_TC_CH)
 8002ada:	4b0b      	ldr	r3, [pc, #44]	@ (8002b08 <HAL_SPI_RxCpltCallback+0xb0>)
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	2b0c      	cmp	r3, #12
 8002ae0:	d106      	bne.n	8002af0 <HAL_SPI_RxCpltCallback+0x98>
		{
			idx_tc = 0;
 8002ae2:	4b09      	ldr	r3, [pc, #36]	@ (8002b08 <HAL_SPI_RxCpltCallback+0xb0>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	701a      	strb	r2, [r3, #0]
			fTemp = true;
 8002ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8002b14 <HAL_SPI_RxCpltCallback+0xbc>)
 8002aea:	2201      	movs	r2, #1
 8002aec:	701a      	strb	r2, [r3, #0]
		else
		{
			MAX31855_ReadTemp_IT(idx_tc);
		}
    }
}
 8002aee:	e004      	b.n	8002afa <HAL_SPI_RxCpltCallback+0xa2>
			MAX31855_ReadTemp_IT(idx_tc);
 8002af0:	4b05      	ldr	r3, [pc, #20]	@ (8002b08 <HAL_SPI_RxCpltCallback+0xb0>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7ff ff81 	bl	80029fc <MAX31855_ReadTemp_IT>
}
 8002afa:	bf00      	nop
 8002afc:	3718      	adds	r7, #24
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	40013000 	.word	0x40013000
 8002b08:	24000521 	.word	0x24000521
 8002b0c:	24000524 	.word	0x24000524
 8002b10:	24000528 	.word	0x24000528
 8002b14:	24000520 	.word	0x24000520

08002b18 <GetTemp>:



void GetTemp(double* Temp)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < MAX_TC_CH; i++)
 8002b20:	2300      	movs	r3, #0
 8002b22:	73fb      	strb	r3, [r7, #15]
 8002b24:	e00e      	b.n	8002b44 <GetTemp+0x2c>
	{
		Temp[i] = tc[i];
 8002b26:	7bfb      	ldrb	r3, [r7, #15]
 8002b28:	7bfa      	ldrb	r2, [r7, #15]
 8002b2a:	00d2      	lsls	r2, r2, #3
 8002b2c:	6879      	ldr	r1, [r7, #4]
 8002b2e:	4411      	add	r1, r2
 8002b30:	4a09      	ldr	r2, [pc, #36]	@ (8002b58 <GetTemp+0x40>)
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	4413      	add	r3, r2
 8002b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b3a:	e9c1 2300 	strd	r2, r3, [r1]
	for (uint8_t i = 0; i < MAX_TC_CH; i++)
 8002b3e:	7bfb      	ldrb	r3, [r7, #15]
 8002b40:	3301      	adds	r3, #1
 8002b42:	73fb      	strb	r3, [r7, #15]
 8002b44:	7bfb      	ldrb	r3, [r7, #15]
 8002b46:	2b0b      	cmp	r3, #11
 8002b48:	d9ed      	bls.n	8002b26 <GetTemp+0xe>
	}
}
 8002b4a:	bf00      	nop
 8002b4c:	bf00      	nop
 8002b4e:	3714      	adds	r7, #20
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr
 8002b58:	24000528 	.word	0x24000528

08002b5c <HAL_UART_RxCpltCallback>:
uint8_t NRecv = 0;

extern void Error_Handler(void);

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
	if (huart->Instance == UART4)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a19      	ldr	r2, [pc, #100]	@ (8002bd0 <HAL_UART_RxCpltCallback+0x74>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d12c      	bne.n	8002bc8 <HAL_UART_RxCpltCallback+0x6c>
	{
		rx_buffer[rx_index++] = rx_data;
 8002b6e:	4b19      	ldr	r3, [pc, #100]	@ (8002bd4 <HAL_UART_RxCpltCallback+0x78>)
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	1c5a      	adds	r2, r3, #1
 8002b74:	b2d1      	uxtb	r1, r2
 8002b76:	4a17      	ldr	r2, [pc, #92]	@ (8002bd4 <HAL_UART_RxCpltCallback+0x78>)
 8002b78:	7011      	strb	r1, [r2, #0]
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	4b16      	ldr	r3, [pc, #88]	@ (8002bd8 <HAL_UART_RxCpltCallback+0x7c>)
 8002b7e:	7819      	ldrb	r1, [r3, #0]
 8002b80:	4b16      	ldr	r3, [pc, #88]	@ (8002bdc <HAL_UART_RxCpltCallback+0x80>)
 8002b82:	5499      	strb	r1, [r3, r2]

		if (rx_data == 0x0A)
 8002b84:	4b14      	ldr	r3, [pc, #80]	@ (8002bd8 <HAL_UART_RxCpltCallback+0x7c>)
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	2b0a      	cmp	r3, #10
 8002b8a:	d110      	bne.n	8002bae <HAL_UART_RxCpltCallback+0x52>
		{
			fTC = true;
 8002b8c:	4b14      	ldr	r3, [pc, #80]	@ (8002be0 <HAL_UART_RxCpltCallback+0x84>)
 8002b8e:	2201      	movs	r2, #1
 8002b90:	701a      	strb	r2, [r3, #0]
			memcpy((void*)tc_buffer, (void*)rx_buffer, sizeof(uint8_t)*rx_index);
 8002b92:	4b10      	ldr	r3, [pc, #64]	@ (8002bd4 <HAL_UART_RxCpltCallback+0x78>)
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	461a      	mov	r2, r3
 8002b98:	4910      	ldr	r1, [pc, #64]	@ (8002bdc <HAL_UART_RxCpltCallback+0x80>)
 8002b9a:	4812      	ldr	r0, [pc, #72]	@ (8002be4 <HAL_UART_RxCpltCallback+0x88>)
 8002b9c:	f00d fe2b 	bl	80107f6 <memcpy>
			NRecv = rx_index;
 8002ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8002bd4 <HAL_UART_RxCpltCallback+0x78>)
 8002ba2:	781a      	ldrb	r2, [r3, #0]
 8002ba4:	4b10      	ldr	r3, [pc, #64]	@ (8002be8 <HAL_UART_RxCpltCallback+0x8c>)
 8002ba6:	701a      	strb	r2, [r3, #0]
			rx_index = 0;
 8002ba8:	4b0a      	ldr	r3, [pc, #40]	@ (8002bd4 <HAL_UART_RxCpltCallback+0x78>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	701a      	strb	r2, [r3, #0]
		}

		// 순환 버퍼 또는 수신 종료 문자 조건으로 처리 가능
		if (rx_index >= MAX_TC_SIZE)
 8002bae:	4b09      	ldr	r3, [pc, #36]	@ (8002bd4 <HAL_UART_RxCpltCallback+0x78>)
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	b25b      	sxtb	r3, r3
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	da02      	bge.n	8002bbe <HAL_UART_RxCpltCallback+0x62>
		{
			rx_index = 0; // 오버플로 방지
 8002bb8:	4b06      	ldr	r3, [pc, #24]	@ (8002bd4 <HAL_UART_RxCpltCallback+0x78>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	701a      	strb	r2, [r3, #0]
		}

		// 다음 수신 재시작
		HAL_UART_Receive_IT(&huart4, &rx_data, 1);
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	4905      	ldr	r1, [pc, #20]	@ (8002bd8 <HAL_UART_RxCpltCallback+0x7c>)
 8002bc2:	480a      	ldr	r0, [pc, #40]	@ (8002bec <HAL_UART_RxCpltCallback+0x90>)
 8002bc4:	f00a fb34 	bl	800d230 <HAL_UART_Receive_IT>
	}
}
 8002bc8:	bf00      	nop
 8002bca:	3708      	adds	r7, #8
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	40004c00 	.word	0x40004c00
 8002bd4:	2400060c 	.word	0x2400060c
 8002bd8:	24000589 	.word	0x24000589
 8002bdc:	2400058c 	.word	0x2400058c
 8002be0:	24000588 	.word	0x24000588
 8002be4:	24000610 	.word	0x24000610
 8002be8:	24000690 	.word	0x24000690
 8002bec:	240003d8 	.word	0x240003d8

08002bf0 <InitTMTC>:

void InitTMTC(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
	if (HAL_UART_Receive_IT(&huart4, &rx_data, 1) != HAL_OK)
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	4905      	ldr	r1, [pc, #20]	@ (8002c0c <InitTMTC+0x1c>)
 8002bf8:	4805      	ldr	r0, [pc, #20]	@ (8002c10 <InitTMTC+0x20>)
 8002bfa:	f00a fb19 	bl	800d230 <HAL_UART_Receive_IT>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <InitTMTC+0x18>
	{
		Error_Handler();
 8002c04:	f7fe fc0e 	bl	8001424 <Error_Handler>
	}
}
 8002c08:	bf00      	nop
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	24000589 	.word	0x24000589
 8002c10:	240003d8 	.word	0x240003d8

08002c14 <GetTC>:

void GetTC(uint8_t* TC)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
	memcpy((void*)TC,(void*)tc_buffer,sizeof(uint8_t)*NRecv);
 8002c1c:	4b05      	ldr	r3, [pc, #20]	@ (8002c34 <GetTC+0x20>)
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	461a      	mov	r2, r3
 8002c22:	4905      	ldr	r1, [pc, #20]	@ (8002c38 <GetTC+0x24>)
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f00d fde6 	bl	80107f6 <memcpy>
}
 8002c2a:	bf00      	nop
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	24000690 	.word	0x24000690
 8002c38:	24000610 	.word	0x24000610

08002c3c <SendTM>:

void SendTM(uint8_t* TM)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
	uint8_t n_send = strlen((char*)TM);
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f7fd fbab 	bl	80003a0 <strlen>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart4, (uint8_t*)TM, n_send, HAL_MAX_DELAY);
 8002c4e:	7bfb      	ldrb	r3, [r7, #15]
 8002c50:	b29a      	uxth	r2, r3
 8002c52:	f04f 33ff 	mov.w	r3, #4294967295
 8002c56:	6879      	ldr	r1, [r7, #4]
 8002c58:	4803      	ldr	r0, [pc, #12]	@ (8002c68 <SendTM+0x2c>)
 8002c5a:	f00a fa5b 	bl	800d114 <HAL_UART_Transmit>
}
 8002c5e:	bf00      	nop
 8002c60:	3710      	adds	r7, #16
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	240003d8 	.word	0x240003d8

08002c6c <SVCmdDecoding>:

void SVCmdDecoding(uint8_t* sv)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b0a6      	sub	sp, #152	@ 0x98
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
	uint8_t TC[MAX_TC_SIZE];
	GetTC(TC);
 8002c74:	f107 030c 	add.w	r3, r7, #12
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7ff ffcb 	bl	8002c14 <GetTC>

	uint8_t sv_cnt = 0;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
	char* tok;
	tok = strtok((char*)TC,",");
 8002c84:	f107 030c 	add.w	r3, r7, #12
 8002c88:	4921      	ldr	r1, [pc, #132]	@ (8002d10 <SVCmdDecoding+0xa4>)
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f00d fce0 	bl	8010650 <strtok>
 8002c90:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
	if (strcmp(tok,"IGRVT") == 0)
 8002c94:	491f      	ldr	r1, [pc, #124]	@ (8002d14 <SVCmdDecoding+0xa8>)
 8002c96:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8002c9a:	f7fd fb21 	bl	80002e0 <strcmp>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d131      	bne.n	8002d08 <SVCmdDecoding+0x9c>
	{
		tok = strtok(NULL,",");
 8002ca4:	491a      	ldr	r1, [pc, #104]	@ (8002d10 <SVCmdDecoding+0xa4>)
 8002ca6:	2000      	movs	r0, #0
 8002ca8:	f00d fcd2 	bl	8010650 <strtok>
 8002cac:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
		while( tok != NULL)
 8002cb0:	e024      	b.n	8002cfc <SVCmdDecoding+0x90>
		{
			uint8_t data = (uint8_t)atoi(tok);
 8002cb2:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8002cb6:	f00c fe29 	bl	800f90c <atoi>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				if (data == 999)
				{
					sv_cnt = 0;
					break;
				}
				else if (data <= 1)
 8002cc0:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d80a      	bhi.n	8002cde <SVCmdDecoding+0x72>
				{
					sv[sv_cnt] = atoi(tok);
 8002cc8:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8002ccc:	f00c fe1e 	bl	800f90c <atoi>
 8002cd0:	4601      	mov	r1, r0
 8002cd2:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	4413      	add	r3, r2
 8002cda:	b2ca      	uxtb	r2, r1
 8002cdc:	701a      	strb	r2, [r3, #0]
				}
			}
			sv_cnt++;
 8002cde:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
			if (sv_cnt > MAX_SV_NUM)
 8002ce8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8002cec:	2b0a      	cmp	r3, #10
 8002cee:	d80a      	bhi.n	8002d06 <SVCmdDecoding+0x9a>
			{
				break;
			}

			tok = strtok(NULL,",");
 8002cf0:	4907      	ldr	r1, [pc, #28]	@ (8002d10 <SVCmdDecoding+0xa4>)
 8002cf2:	2000      	movs	r0, #0
 8002cf4:	f00d fcac 	bl	8010650 <strtok>
 8002cf8:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
		while( tok != NULL)
 8002cfc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d1d6      	bne.n	8002cb2 <SVCmdDecoding+0x46>
		}
	}
}
 8002d04:	e000      	b.n	8002d08 <SVCmdDecoding+0x9c>
				break;
 8002d06:	bf00      	nop
}
 8002d08:	bf00      	nop
 8002d0a:	3798      	adds	r7, #152	@ 0x98
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	080126f8 	.word	0x080126f8
 8002d14:	080126fc 	.word	0x080126fc

08002d18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002d18:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8002d54 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8002d1c:	f7fd fd8c 	bl	8000838 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002d20:	f7fd fcdc 	bl	80006dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d24:	480c      	ldr	r0, [pc, #48]	@ (8002d58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d26:	490d      	ldr	r1, [pc, #52]	@ (8002d5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d28:	4a0d      	ldr	r2, [pc, #52]	@ (8002d60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d2c:	e002      	b.n	8002d34 <LoopCopyDataInit>

08002d2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d32:	3304      	adds	r3, #4

08002d34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d38:	d3f9      	bcc.n	8002d2e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d3a:	4a0a      	ldr	r2, [pc, #40]	@ (8002d64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002d3c:	4c0a      	ldr	r4, [pc, #40]	@ (8002d68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002d3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d40:	e001      	b.n	8002d46 <LoopFillZerobss>

08002d42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d44:	3204      	adds	r2, #4

08002d46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d48:	d3fb      	bcc.n	8002d42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d4a:	f00d fd2d 	bl	80107a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d4e:	f7fd fde9 	bl	8000924 <main>
  bx  lr
 8002d52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002d54:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002d58:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002d5c:	240001f4 	.word	0x240001f4
  ldr r2, =_sidata
 8002d60:	08012b28 	.word	0x08012b28
  ldr r2, =_sbss
 8002d64:	240001f8 	.word	0x240001f8
  ldr r4, =_ebss
 8002d68:	24000884 	.word	0x24000884

08002d6c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d6c:	e7fe      	b.n	8002d6c <ADC3_IRQHandler>
	...

08002d70 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b08c      	sub	sp, #48	@ 0x30
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	4603      	mov	r3, r0
 8002d78:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8002d7e:	79fb      	ldrb	r3, [r7, #7]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d009      	beq.n	8002d98 <BSP_LED_Init+0x28>
 8002d84:	79fb      	ldrb	r3, [r7, #7]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d006      	beq.n	8002d98 <BSP_LED_Init+0x28>
 8002d8a:	79fb      	ldrb	r3, [r7, #7]
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d003      	beq.n	8002d98 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002d90:	f06f 0301 	mvn.w	r3, #1
 8002d94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d96:	e055      	b.n	8002e44 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8002d98:	79fb      	ldrb	r3, [r7, #7]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10f      	bne.n	8002dbe <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8002d9e:	4b2c      	ldr	r3, [pc, #176]	@ (8002e50 <BSP_LED_Init+0xe0>)
 8002da0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002da4:	4a2a      	ldr	r2, [pc, #168]	@ (8002e50 <BSP_LED_Init+0xe0>)
 8002da6:	f043 0302 	orr.w	r3, r3, #2
 8002daa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002dae:	4b28      	ldr	r3, [pc, #160]	@ (8002e50 <BSP_LED_Init+0xe0>)
 8002db0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	617b      	str	r3, [r7, #20]
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	e021      	b.n	8002e02 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8002dbe:	79fb      	ldrb	r3, [r7, #7]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d10f      	bne.n	8002de4 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8002dc4:	4b22      	ldr	r3, [pc, #136]	@ (8002e50 <BSP_LED_Init+0xe0>)
 8002dc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002dca:	4a21      	ldr	r2, [pc, #132]	@ (8002e50 <BSP_LED_Init+0xe0>)
 8002dcc:	f043 0310 	orr.w	r3, r3, #16
 8002dd0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002dd4:	4b1e      	ldr	r3, [pc, #120]	@ (8002e50 <BSP_LED_Init+0xe0>)
 8002dd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002dda:	f003 0310 	and.w	r3, r3, #16
 8002dde:	613b      	str	r3, [r7, #16]
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	e00e      	b.n	8002e02 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8002de4:	4b1a      	ldr	r3, [pc, #104]	@ (8002e50 <BSP_LED_Init+0xe0>)
 8002de6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002dea:	4a19      	ldr	r2, [pc, #100]	@ (8002e50 <BSP_LED_Init+0xe0>)
 8002dec:	f043 0302 	orr.w	r3, r3, #2
 8002df0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002df4:	4b16      	ldr	r3, [pc, #88]	@ (8002e50 <BSP_LED_Init+0xe0>)
 8002df6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	60fb      	str	r3, [r7, #12]
 8002e00:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8002e02:	79fb      	ldrb	r3, [r7, #7]
 8002e04:	4a13      	ldr	r2, [pc, #76]	@ (8002e54 <BSP_LED_Init+0xe4>)
 8002e06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e0a:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8002e10:	2300      	movs	r3, #0
 8002e12:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e14:	2303      	movs	r3, #3
 8002e16:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8002e18:	79fb      	ldrb	r3, [r7, #7]
 8002e1a:	4a0f      	ldr	r2, [pc, #60]	@ (8002e58 <BSP_LED_Init+0xe8>)
 8002e1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e20:	f107 0218 	add.w	r2, r7, #24
 8002e24:	4611      	mov	r1, r2
 8002e26:	4618      	mov	r0, r3
 8002e28:	f004 ffce 	bl	8007dc8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002e2c:	79fb      	ldrb	r3, [r7, #7]
 8002e2e:	4a0a      	ldr	r2, [pc, #40]	@ (8002e58 <BSP_LED_Init+0xe8>)
 8002e30:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002e34:	79fb      	ldrb	r3, [r7, #7]
 8002e36:	4a07      	ldr	r2, [pc, #28]	@ (8002e54 <BSP_LED_Init+0xe4>)
 8002e38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	4619      	mov	r1, r3
 8002e40:	f005 f972 	bl	8008128 <HAL_GPIO_WritePin>
  }

  return ret;
 8002e44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3730      	adds	r7, #48	@ 0x30
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	58024400 	.word	0x58024400
 8002e54:	08012714 	.word	0x08012714
 8002e58:	2400000c 	.word	0x2400000c

08002e5c <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	4603      	mov	r3, r0
 8002e64:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002e66:	2300      	movs	r3, #0
 8002e68:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8002e6a:	79fb      	ldrb	r3, [r7, #7]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d009      	beq.n	8002e84 <BSP_LED_On+0x28>
 8002e70:	79fb      	ldrb	r3, [r7, #7]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d006      	beq.n	8002e84 <BSP_LED_On+0x28>
 8002e76:	79fb      	ldrb	r3, [r7, #7]
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d003      	beq.n	8002e84 <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002e7c:	f06f 0301 	mvn.w	r3, #1
 8002e80:	60fb      	str	r3, [r7, #12]
 8002e82:	e00b      	b.n	8002e9c <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8002e84:	79fb      	ldrb	r3, [r7, #7]
 8002e86:	4a08      	ldr	r2, [pc, #32]	@ (8002ea8 <BSP_LED_On+0x4c>)
 8002e88:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002e8c:	79fb      	ldrb	r3, [r7, #7]
 8002e8e:	4a07      	ldr	r2, [pc, #28]	@ (8002eac <BSP_LED_On+0x50>)
 8002e90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e94:	2201      	movs	r2, #1
 8002e96:	4619      	mov	r1, r3
 8002e98:	f005 f946 	bl	8008128 <HAL_GPIO_WritePin>
  }

  return ret;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	2400000c 	.word	0x2400000c
 8002eac:	08012714 	.word	0x08012714

08002eb0 <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8002ebe:	79fb      	ldrb	r3, [r7, #7]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d009      	beq.n	8002ed8 <BSP_LED_Off+0x28>
 8002ec4:	79fb      	ldrb	r3, [r7, #7]
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d006      	beq.n	8002ed8 <BSP_LED_Off+0x28>
 8002eca:	79fb      	ldrb	r3, [r7, #7]
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d003      	beq.n	8002ed8 <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002ed0:	f06f 0301 	mvn.w	r3, #1
 8002ed4:	60fb      	str	r3, [r7, #12]
 8002ed6:	e00b      	b.n	8002ef0 <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002ed8:	79fb      	ldrb	r3, [r7, #7]
 8002eda:	4a08      	ldr	r2, [pc, #32]	@ (8002efc <BSP_LED_Off+0x4c>)
 8002edc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002ee0:	79fb      	ldrb	r3, [r7, #7]
 8002ee2:	4a07      	ldr	r2, [pc, #28]	@ (8002f00 <BSP_LED_Off+0x50>)
 8002ee4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	4619      	mov	r1, r3
 8002eec:	f005 f91c 	bl	8008128 <HAL_GPIO_WritePin>
  }

  return ret;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3710      	adds	r7, #16
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	2400000c 	.word	0x2400000c
 8002f00:	08012714 	.word	0x08012714

08002f04 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8002f12:	79fb      	ldrb	r3, [r7, #7]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d009      	beq.n	8002f2c <BSP_LED_Toggle+0x28>
 8002f18:	79fb      	ldrb	r3, [r7, #7]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d006      	beq.n	8002f2c <BSP_LED_Toggle+0x28>
 8002f1e:	79fb      	ldrb	r3, [r7, #7]
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d003      	beq.n	8002f2c <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002f24:	f06f 0301 	mvn.w	r3, #1
 8002f28:	60fb      	str	r3, [r7, #12]
 8002f2a:	e00b      	b.n	8002f44 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8002f2c:	79fb      	ldrb	r3, [r7, #7]
 8002f2e:	4a08      	ldr	r2, [pc, #32]	@ (8002f50 <BSP_LED_Toggle+0x4c>)
 8002f30:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002f34:	79fb      	ldrb	r3, [r7, #7]
 8002f36:	4907      	ldr	r1, [pc, #28]	@ (8002f54 <BSP_LED_Toggle+0x50>)
 8002f38:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	4610      	mov	r0, r2
 8002f40:	f005 f90b 	bl	800815a <HAL_GPIO_TogglePin>
  }

  return ret;
 8002f44:	68fb      	ldr	r3, [r7, #12]
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3710      	adds	r7, #16
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	2400000c 	.word	0x2400000c
 8002f54:	08012714 	.word	0x08012714

08002f58 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b088      	sub	sp, #32
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	4603      	mov	r3, r0
 8002f60:	460a      	mov	r2, r1
 8002f62:	71fb      	strb	r3, [r7, #7]
 8002f64:	4613      	mov	r3, r2
 8002f66:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8002f68:	4b2e      	ldr	r3, [pc, #184]	@ (8003024 <BSP_PB_Init+0xcc>)
 8002f6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f6e:	4a2d      	ldr	r2, [pc, #180]	@ (8003024 <BSP_PB_Init+0xcc>)
 8002f70:	f043 0304 	orr.w	r3, r3, #4
 8002f74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002f78:	4b2a      	ldr	r3, [pc, #168]	@ (8003024 <BSP_PB_Init+0xcc>)
 8002f7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f7e:	f003 0304 	and.w	r3, r3, #4
 8002f82:	60bb      	str	r3, [r7, #8]
 8002f84:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8002f86:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002f8a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f90:	2302      	movs	r3, #2
 8002f92:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8002f94:	79bb      	ldrb	r3, [r7, #6]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10c      	bne.n	8002fb4 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8002f9e:	79fb      	ldrb	r3, [r7, #7]
 8002fa0:	4a21      	ldr	r2, [pc, #132]	@ (8003028 <BSP_PB_Init+0xd0>)
 8002fa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fa6:	f107 020c 	add.w	r2, r7, #12
 8002faa:	4611      	mov	r1, r2
 8002fac:	4618      	mov	r0, r3
 8002fae:	f004 ff0b 	bl	8007dc8 <HAL_GPIO_Init>
 8002fb2:	e031      	b.n	8003018 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8002fb4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002fb8:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002fba:	79fb      	ldrb	r3, [r7, #7]
 8002fbc:	4a1a      	ldr	r2, [pc, #104]	@ (8003028 <BSP_PB_Init+0xd0>)
 8002fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fc2:	f107 020c 	add.w	r2, r7, #12
 8002fc6:	4611      	mov	r1, r2
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f004 fefd 	bl	8007dc8 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8002fce:	79fb      	ldrb	r3, [r7, #7]
 8002fd0:	00db      	lsls	r3, r3, #3
 8002fd2:	4a16      	ldr	r2, [pc, #88]	@ (800302c <BSP_PB_Init+0xd4>)
 8002fd4:	441a      	add	r2, r3
 8002fd6:	79fb      	ldrb	r3, [r7, #7]
 8002fd8:	4915      	ldr	r1, [pc, #84]	@ (8003030 <BSP_PB_Init+0xd8>)
 8002fda:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002fde:	4619      	mov	r1, r3
 8002fe0:	4610      	mov	r0, r2
 8002fe2:	f004 fea0 	bl	8007d26 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8002fe6:	79fb      	ldrb	r3, [r7, #7]
 8002fe8:	00db      	lsls	r3, r3, #3
 8002fea:	4a10      	ldr	r2, [pc, #64]	@ (800302c <BSP_PB_Init+0xd4>)
 8002fec:	1898      	adds	r0, r3, r2
 8002fee:	79fb      	ldrb	r3, [r7, #7]
 8002ff0:	4a10      	ldr	r2, [pc, #64]	@ (8003034 <BSP_PB_Init+0xdc>)
 8002ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	2100      	movs	r1, #0
 8002ffa:	f004 fe75 	bl	8007ce8 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8002ffe:	2028      	movs	r0, #40	@ 0x28
 8003000:	79fb      	ldrb	r3, [r7, #7]
 8003002:	4a0d      	ldr	r2, [pc, #52]	@ (8003038 <BSP_PB_Init+0xe0>)
 8003004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003008:	2200      	movs	r2, #0
 800300a:	4619      	mov	r1, r3
 800300c:	f001 ffe9 	bl	8004fe2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8003010:	2328      	movs	r3, #40	@ 0x28
 8003012:	4618      	mov	r0, r3
 8003014:	f001 ffff 	bl	8005016 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3720      	adds	r7, #32
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	58024400 	.word	0x58024400
 8003028:	24000018 	.word	0x24000018
 800302c:	24000694 	.word	0x24000694
 8003030:	0801271c 	.word	0x0801271c
 8003034:	2400001c 	.word	0x2400001c
 8003038:	24000020 	.word	0x24000020

0800303c <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	4603      	mov	r3, r0
 8003044:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8003046:	79fb      	ldrb	r3, [r7, #7]
 8003048:	00db      	lsls	r3, r3, #3
 800304a:	4a04      	ldr	r2, [pc, #16]	@ (800305c <BSP_PB_IRQHandler+0x20>)
 800304c:	4413      	add	r3, r2
 800304e:	4618      	mov	r0, r3
 8003050:	f004 fe7e 	bl	8007d50 <HAL_EXTI_IRQHandler>
}
 8003054:	bf00      	nop
 8003056:	3708      	adds	r7, #8
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	24000694 	.word	0x24000694

08003060 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	4603      	mov	r3, r0
 8003068:	6039      	str	r1, [r7, #0]
 800306a:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800306c:	2300      	movs	r3, #0
 800306e:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8003070:	79fb      	ldrb	r3, [r7, #7]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d003      	beq.n	800307e <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003076:	f06f 0301 	mvn.w	r3, #1
 800307a:	60fb      	str	r3, [r7, #12]
 800307c:	e018      	b.n	80030b0 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 800307e:	79fb      	ldrb	r3, [r7, #7]
 8003080:	2294      	movs	r2, #148	@ 0x94
 8003082:	fb02 f303 	mul.w	r3, r2, r3
 8003086:	4a0d      	ldr	r2, [pc, #52]	@ (80030bc <BSP_COM_Init+0x5c>)
 8003088:	4413      	add	r3, r2
 800308a:	4618      	mov	r0, r3
 800308c:	f000 f86e 	bl	800316c <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8003090:	79fb      	ldrb	r3, [r7, #7]
 8003092:	2294      	movs	r2, #148	@ 0x94
 8003094:	fb02 f303 	mul.w	r3, r2, r3
 8003098:	4a08      	ldr	r2, [pc, #32]	@ (80030bc <BSP_COM_Init+0x5c>)
 800309a:	4413      	add	r3, r2
 800309c:	6839      	ldr	r1, [r7, #0]
 800309e:	4618      	mov	r0, r3
 80030a0:	f000 f80e 	bl	80030c0 <MX_USART3_Init>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d002      	beq.n	80030b0 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80030aa:	f06f 0303 	mvn.w	r3, #3
 80030ae:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80030b0:	68fb      	ldr	r3, [r7, #12]
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3710      	adds	r7, #16
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	2400069c 	.word	0x2400069c

080030c0 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 80030ca:	4b15      	ldr	r3, [pc, #84]	@ (8003120 <MX_USART3_Init+0x60>)
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	220c      	movs	r2, #12
 80030de:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	895b      	ldrh	r3, [r3, #10]
 80030e4:	461a      	mov	r2, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	685a      	ldr	r2, [r3, #4]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	891b      	ldrh	r3, [r3, #8]
 80030f6:	461a      	mov	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	899b      	ldrh	r3, [r3, #12]
 8003100:	461a      	mov	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800310c:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f009 ffb0 	bl	800d074 <HAL_UART_Init>
 8003114:	4603      	mov	r3, r0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3708      	adds	r7, #8
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	24000008 	.word	0x24000008

08003124 <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 800312c:	4b09      	ldr	r3, [pc, #36]	@ (8003154 <__io_putchar+0x30>)
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	461a      	mov	r2, r3
 8003132:	2394      	movs	r3, #148	@ 0x94
 8003134:	fb02 f303 	mul.w	r3, r2, r3
 8003138:	4a07      	ldr	r2, [pc, #28]	@ (8003158 <__io_putchar+0x34>)
 800313a:	1898      	adds	r0, r3, r2
 800313c:	1d39      	adds	r1, r7, #4
 800313e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003142:	2201      	movs	r2, #1
 8003144:	f009 ffe6 	bl	800d114 <HAL_UART_Transmit>
  return ch;
 8003148:	687b      	ldr	r3, [r7, #4]
}
 800314a:	4618      	mov	r0, r3
 800314c:	3708      	adds	r7, #8
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	24000730 	.word	0x24000730
 8003158:	2400069c 	.word	0x2400069c

0800315c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8003160:	2000      	movs	r0, #0
 8003162:	f7fe f94b 	bl	80013fc <BSP_PB_Callback>
}
 8003166:	bf00      	nop
 8003168:	bd80      	pop	{r7, pc}
	...

0800316c <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b08a      	sub	sp, #40	@ 0x28
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8003174:	4b27      	ldr	r3, [pc, #156]	@ (8003214 <COM1_MspInit+0xa8>)
 8003176:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800317a:	4a26      	ldr	r2, [pc, #152]	@ (8003214 <COM1_MspInit+0xa8>)
 800317c:	f043 0308 	orr.w	r3, r3, #8
 8003180:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003184:	4b23      	ldr	r3, [pc, #140]	@ (8003214 <COM1_MspInit+0xa8>)
 8003186:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800318a:	f003 0308 	and.w	r3, r3, #8
 800318e:	613b      	str	r3, [r7, #16]
 8003190:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8003192:	4b20      	ldr	r3, [pc, #128]	@ (8003214 <COM1_MspInit+0xa8>)
 8003194:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003198:	4a1e      	ldr	r2, [pc, #120]	@ (8003214 <COM1_MspInit+0xa8>)
 800319a:	f043 0308 	orr.w	r3, r3, #8
 800319e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80031a2:	4b1c      	ldr	r3, [pc, #112]	@ (8003214 <COM1_MspInit+0xa8>)
 80031a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031a8:	f003 0308 	and.w	r3, r3, #8
 80031ac:	60fb      	str	r3, [r7, #12]
 80031ae:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 80031b0:	4b18      	ldr	r3, [pc, #96]	@ (8003214 <COM1_MspInit+0xa8>)
 80031b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80031b6:	4a17      	ldr	r2, [pc, #92]	@ (8003214 <COM1_MspInit+0xa8>)
 80031b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031bc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80031c0:	4b14      	ldr	r3, [pc, #80]	@ (8003214 <COM1_MspInit+0xa8>)
 80031c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80031c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031ca:	60bb      	str	r3, [r7, #8]
 80031cc:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 80031ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80031d2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80031d4:	2302      	movs	r3, #2
 80031d6:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80031d8:	2302      	movs	r3, #2
 80031da:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80031dc:	2301      	movs	r3, #1
 80031de:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 80031e0:	2307      	movs	r3, #7
 80031e2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 80031e4:	f107 0314 	add.w	r3, r7, #20
 80031e8:	4619      	mov	r1, r3
 80031ea:	480b      	ldr	r0, [pc, #44]	@ (8003218 <COM1_MspInit+0xac>)
 80031ec:	f004 fdec 	bl	8007dc8 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 80031f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80031f4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80031f6:	2302      	movs	r3, #2
 80031f8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 80031fa:	2307      	movs	r3, #7
 80031fc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 80031fe:	f107 0314 	add.w	r3, r7, #20
 8003202:	4619      	mov	r1, r3
 8003204:	4804      	ldr	r0, [pc, #16]	@ (8003218 <COM1_MspInit+0xac>)
 8003206:	f004 fddf 	bl	8007dc8 <HAL_GPIO_Init>
}
 800320a:	bf00      	nop
 800320c:	3728      	adds	r7, #40	@ 0x28
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	58024400 	.word	0x58024400
 8003218:	58020c00 	.word	0x58020c00

0800321c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003222:	2003      	movs	r0, #3
 8003224:	f001 fed2 	bl	8004fcc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003228:	f005 fe4a 	bl	8008ec0 <HAL_RCC_GetSysClockFreq>
 800322c:	4602      	mov	r2, r0
 800322e:	4b15      	ldr	r3, [pc, #84]	@ (8003284 <HAL_Init+0x68>)
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	0a1b      	lsrs	r3, r3, #8
 8003234:	f003 030f 	and.w	r3, r3, #15
 8003238:	4913      	ldr	r1, [pc, #76]	@ (8003288 <HAL_Init+0x6c>)
 800323a:	5ccb      	ldrb	r3, [r1, r3]
 800323c:	f003 031f 	and.w	r3, r3, #31
 8003240:	fa22 f303 	lsr.w	r3, r2, r3
 8003244:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003246:	4b0f      	ldr	r3, [pc, #60]	@ (8003284 <HAL_Init+0x68>)
 8003248:	699b      	ldr	r3, [r3, #24]
 800324a:	f003 030f 	and.w	r3, r3, #15
 800324e:	4a0e      	ldr	r2, [pc, #56]	@ (8003288 <HAL_Init+0x6c>)
 8003250:	5cd3      	ldrb	r3, [r2, r3]
 8003252:	f003 031f 	and.w	r3, r3, #31
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	fa22 f303 	lsr.w	r3, r2, r3
 800325c:	4a0b      	ldr	r2, [pc, #44]	@ (800328c <HAL_Init+0x70>)
 800325e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003260:	4a0b      	ldr	r2, [pc, #44]	@ (8003290 <HAL_Init+0x74>)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003266:	2000      	movs	r0, #0
 8003268:	f000 f814 	bl	8003294 <HAL_InitTick>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d001      	beq.n	8003276 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e002      	b.n	800327c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003276:	f7fe f9e3 	bl	8001640 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800327a:	2300      	movs	r3, #0
}
 800327c:	4618      	mov	r0, r3
 800327e:	3708      	adds	r7, #8
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	58024400 	.word	0x58024400
 8003288:	08012704 	.word	0x08012704
 800328c:	24000004 	.word	0x24000004
 8003290:	24000000 	.word	0x24000000

08003294 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800329c:	4b15      	ldr	r3, [pc, #84]	@ (80032f4 <HAL_InitTick+0x60>)
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d101      	bne.n	80032a8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e021      	b.n	80032ec <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80032a8:	4b13      	ldr	r3, [pc, #76]	@ (80032f8 <HAL_InitTick+0x64>)
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	4b11      	ldr	r3, [pc, #68]	@ (80032f4 <HAL_InitTick+0x60>)
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	4619      	mov	r1, r3
 80032b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80032b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80032ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80032be:	4618      	mov	r0, r3
 80032c0:	f001 feb7 	bl	8005032 <HAL_SYSTICK_Config>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e00e      	b.n	80032ec <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2b0f      	cmp	r3, #15
 80032d2:	d80a      	bhi.n	80032ea <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032d4:	2200      	movs	r2, #0
 80032d6:	6879      	ldr	r1, [r7, #4]
 80032d8:	f04f 30ff 	mov.w	r0, #4294967295
 80032dc:	f001 fe81 	bl	8004fe2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032e0:	4a06      	ldr	r2, [pc, #24]	@ (80032fc <HAL_InitTick+0x68>)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
 80032e8:	e000      	b.n	80032ec <HAL_InitTick+0x58>
    return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3708      	adds	r7, #8
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	24000028 	.word	0x24000028
 80032f8:	24000000 	.word	0x24000000
 80032fc:	24000024 	.word	0x24000024

08003300 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003304:	4b06      	ldr	r3, [pc, #24]	@ (8003320 <HAL_IncTick+0x20>)
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	461a      	mov	r2, r3
 800330a:	4b06      	ldr	r3, [pc, #24]	@ (8003324 <HAL_IncTick+0x24>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4413      	add	r3, r2
 8003310:	4a04      	ldr	r2, [pc, #16]	@ (8003324 <HAL_IncTick+0x24>)
 8003312:	6013      	str	r3, [r2, #0]
}
 8003314:	bf00      	nop
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	24000028 	.word	0x24000028
 8003324:	24000734 	.word	0x24000734

08003328 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0
  return uwTick;
 800332c:	4b03      	ldr	r3, [pc, #12]	@ (800333c <HAL_GetTick+0x14>)
 800332e:	681b      	ldr	r3, [r3, #0]
}
 8003330:	4618      	mov	r0, r3
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	24000734 	.word	0x24000734

08003340 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003344:	4b03      	ldr	r3, [pc, #12]	@ (8003354 <HAL_GetREVID+0x14>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	0c1b      	lsrs	r3, r3, #16
}
 800334a:	4618      	mov	r0, r3
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr
 8003354:	5c001000 	.word	0x5c001000

08003358 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003362:	4b07      	ldr	r3, [pc, #28]	@ (8003380 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003364:	685a      	ldr	r2, [r3, #4]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	43db      	mvns	r3, r3
 800336a:	401a      	ands	r2, r3
 800336c:	4904      	ldr	r1, [pc, #16]	@ (8003380 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	4313      	orrs	r3, r2
 8003372:	604b      	str	r3, [r1, #4]
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr
 8003380:	58000400 	.word	0x58000400

08003384 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	431a      	orrs	r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	609a      	str	r2, [r3, #8]
}
 800339e:	bf00      	nop
 80033a0:	370c      	adds	r7, #12
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr

080033aa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80033aa:	b480      	push	{r7}
 80033ac:	b083      	sub	sp, #12
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
 80033b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	431a      	orrs	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	609a      	str	r2, [r3, #8]
}
 80033c4:	bf00      	nop
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b087      	sub	sp, #28
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d107      	bne.n	8003410 <LL_ADC_SetChannelPreselection+0x24>
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	0e9b      	lsrs	r3, r3, #26
 8003404:	f003 031f 	and.w	r3, r3, #31
 8003408:	2201      	movs	r2, #1
 800340a:	fa02 f303 	lsl.w	r3, r2, r3
 800340e:	e015      	b.n	800343c <LL_ADC_SetChannelPreselection+0x50>
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	fa93 f3a3 	rbit	r3, r3
 800341a:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d101      	bne.n	800342a <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 8003426:	2320      	movs	r3, #32
 8003428:	e003      	b.n	8003432 <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	fab3 f383 	clz	r3, r3
 8003430:	b2db      	uxtb	r3, r3
 8003432:	f003 031f 	and.w	r3, r3, #31
 8003436:	2201      	movs	r2, #1
 8003438:	fa02 f303 	lsl.w	r3, r2, r3
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	69d2      	ldr	r2, [r2, #28]
 8003440:	431a      	orrs	r2, r3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 8003446:	bf00      	nop
 8003448:	371c      	adds	r7, #28
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr

08003452 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003452:	b480      	push	{r7}
 8003454:	b087      	sub	sp, #28
 8003456:	af00      	add	r7, sp, #0
 8003458:	60f8      	str	r0, [r7, #12]
 800345a:	60b9      	str	r1, [r7, #8]
 800345c:	607a      	str	r2, [r7, #4]
 800345e:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	3360      	adds	r3, #96	@ 0x60
 8003464:	461a      	mov	r2, r3
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	4413      	add	r3, r2
 800346c:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	430b      	orrs	r3, r1
 8003480:	431a      	orrs	r2, r3
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003486:	bf00      	nop
 8003488:	371c      	adds	r7, #28
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr

08003492 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003492:	b480      	push	{r7}
 8003494:	b085      	sub	sp, #20
 8003496:	af00      	add	r7, sp, #0
 8003498:	60f8      	str	r0, [r7, #12]
 800349a:	60b9      	str	r1, [r7, #8]
 800349c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	f003 031f 	and.w	r3, r3, #31
 80034ac:	6879      	ldr	r1, [r7, #4]
 80034ae:	fa01 f303 	lsl.w	r3, r1, r3
 80034b2:	431a      	orrs	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	611a      	str	r2, [r3, #16]
}
 80034b8:	bf00      	nop
 80034ba:	3714      	adds	r7, #20
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b087      	sub	sp, #28
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	3360      	adds	r3, #96	@ 0x60
 80034d4:	461a      	mov	r2, r3
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	4413      	add	r3, r2
 80034dc:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	431a      	orrs	r2, r3
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	601a      	str	r2, [r3, #0]
  }
}
 80034ee:	bf00      	nop
 80034f0:	371c      	adds	r7, #28
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr

080034fa <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80034fa:	b480      	push	{r7}
 80034fc:	b083      	sub	sp, #12
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800350a:	2b00      	cmp	r3, #0
 800350c:	d101      	bne.n	8003512 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800350e:	2301      	movs	r3, #1
 8003510:	e000      	b.n	8003514 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003512:	2300      	movs	r3, #0
}
 8003514:	4618      	mov	r0, r3
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003520:	b480      	push	{r7}
 8003522:	b087      	sub	sp, #28
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	3330      	adds	r3, #48	@ 0x30
 8003530:	461a      	mov	r2, r3
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	0a1b      	lsrs	r3, r3, #8
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	f003 030c 	and.w	r3, r3, #12
 800353c:	4413      	add	r3, r2
 800353e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	f003 031f 	and.w	r3, r3, #31
 800354a:	211f      	movs	r1, #31
 800354c:	fa01 f303 	lsl.w	r3, r1, r3
 8003550:	43db      	mvns	r3, r3
 8003552:	401a      	ands	r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	0e9b      	lsrs	r3, r3, #26
 8003558:	f003 011f 	and.w	r1, r3, #31
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	f003 031f 	and.w	r3, r3, #31
 8003562:	fa01 f303 	lsl.w	r3, r1, r3
 8003566:	431a      	orrs	r2, r3
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800356c:	bf00      	nop
 800356e:	371c      	adds	r7, #28
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	f023 0203 	bic.w	r2, r3, #3
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	431a      	orrs	r2, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	60da      	str	r2, [r3, #12]
}
 8003592:	bf00      	nop
 8003594:	370c      	adds	r7, #12
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr

0800359e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800359e:	b480      	push	{r7}
 80035a0:	b083      	sub	sp, #12
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035aa:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d101      	bne.n	80035b6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80035b2:	2301      	movs	r3, #1
 80035b4:	e000      	b.n	80035b8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b087      	sub	sp, #28
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	3314      	adds	r3, #20
 80035d4:	461a      	mov	r2, r3
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	0e5b      	lsrs	r3, r3, #25
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	f003 0304 	and.w	r3, r3, #4
 80035e0:	4413      	add	r3, r2
 80035e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	0d1b      	lsrs	r3, r3, #20
 80035ec:	f003 031f 	and.w	r3, r3, #31
 80035f0:	2107      	movs	r1, #7
 80035f2:	fa01 f303 	lsl.w	r3, r1, r3
 80035f6:	43db      	mvns	r3, r3
 80035f8:	401a      	ands	r2, r3
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	0d1b      	lsrs	r3, r3, #20
 80035fe:	f003 031f 	and.w	r3, r3, #31
 8003602:	6879      	ldr	r1, [r7, #4]
 8003604:	fa01 f303 	lsl.w	r3, r1, r3
 8003608:	431a      	orrs	r2, r3
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800360e:	bf00      	nop
 8003610:	371c      	adds	r7, #28
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
	...

0800361c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003634:	43db      	mvns	r3, r3
 8003636:	401a      	ands	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f003 0318 	and.w	r3, r3, #24
 800363e:	4908      	ldr	r1, [pc, #32]	@ (8003660 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003640:	40d9      	lsrs	r1, r3
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	400b      	ands	r3, r1
 8003646:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800364a:	431a      	orrs	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003652:	bf00      	nop
 8003654:	3714      	adds	r7, #20
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	000fffff 	.word	0x000fffff

08003664 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	f003 031f 	and.w	r3, r3, #31
}
 8003674:	4618      	mov	r0, r3
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8003690:	4618      	mov	r0, r3
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	689a      	ldr	r2, [r3, #8]
 80036a8:	4b04      	ldr	r3, [pc, #16]	@ (80036bc <LL_ADC_DisableDeepPowerDown+0x20>)
 80036aa:	4013      	ands	r3, r2
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	6093      	str	r3, [r2, #8]
}
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr
 80036bc:	5fffffc0 	.word	0x5fffffc0

080036c0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80036d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80036d4:	d101      	bne.n	80036da <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80036d6:	2301      	movs	r3, #1
 80036d8:	e000      	b.n	80036dc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	689a      	ldr	r2, [r3, #8]
 80036f4:	4b05      	ldr	r3, [pc, #20]	@ (800370c <LL_ADC_EnableInternalRegulator+0x24>)
 80036f6:	4013      	ands	r3, r2
 80036f8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr
 800370c:	6fffffc0 	.word	0x6fffffc0

08003710 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003720:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003724:	d101      	bne.n	800372a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003726:	2301      	movs	r3, #1
 8003728:	e000      	b.n	800372c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800372a:	2300      	movs	r3, #0
}
 800372c:	4618      	mov	r0, r3
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	689a      	ldr	r2, [r3, #8]
 8003744:	4b05      	ldr	r3, [pc, #20]	@ (800375c <LL_ADC_Enable+0x24>)
 8003746:	4013      	ands	r3, r2
 8003748:	f043 0201 	orr.w	r2, r3, #1
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr
 800375c:	7fffffc0 	.word	0x7fffffc0

08003760 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	f003 0301 	and.w	r3, r3, #1
 8003770:	2b01      	cmp	r3, #1
 8003772:	d101      	bne.n	8003778 <LL_ADC_IsEnabled+0x18>
 8003774:	2301      	movs	r3, #1
 8003776:	e000      	b.n	800377a <LL_ADC_IsEnabled+0x1a>
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	370c      	adds	r7, #12
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
	...

08003788 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	689a      	ldr	r2, [r3, #8]
 8003794:	4b05      	ldr	r3, [pc, #20]	@ (80037ac <LL_ADC_REG_StartConversion+0x24>)
 8003796:	4013      	ands	r3, r2
 8003798:	f043 0204 	orr.w	r2, r3, #4
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80037a0:	bf00      	nop
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr
 80037ac:	7fffffc0 	.word	0x7fffffc0

080037b0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f003 0304 	and.w	r3, r3, #4
 80037c0:	2b04      	cmp	r3, #4
 80037c2:	d101      	bne.n	80037c8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80037c4:	2301      	movs	r3, #1
 80037c6:	e000      	b.n	80037ca <LL_ADC_REG_IsConversionOngoing+0x1a>
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	370c      	adds	r7, #12
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr

080037d6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80037d6:	b480      	push	{r7}
 80037d8:	b083      	sub	sp, #12
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f003 0308 	and.w	r3, r3, #8
 80037e6:	2b08      	cmp	r3, #8
 80037e8:	d101      	bne.n	80037ee <LL_ADC_INJ_IsConversionOngoing+0x18>
 80037ea:	2301      	movs	r3, #1
 80037ec:	e000      	b.n	80037f0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80037ee:	2300      	movs	r3, #0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80037fc:	b590      	push	{r4, r7, lr}
 80037fe:	b089      	sub	sp, #36	@ 0x24
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003804:	2300      	movs	r3, #0
 8003806:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003808:	2300      	movs	r3, #0
 800380a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e18f      	b.n	8003b36 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003820:	2b00      	cmp	r3, #0
 8003822:	d109      	bne.n	8003838 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f7fd ff25 	bl	8001674 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4618      	mov	r0, r3
 800383e:	f7ff ff3f 	bl	80036c0 <LL_ADC_IsDeepPowerDownEnabled>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d004      	beq.n	8003852 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4618      	mov	r0, r3
 800384e:	f7ff ff25 	bl	800369c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4618      	mov	r0, r3
 8003858:	f7ff ff5a 	bl	8003710 <LL_ADC_IsInternalRegulatorEnabled>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d114      	bne.n	800388c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4618      	mov	r0, r3
 8003868:	f7ff ff3e 	bl	80036e8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800386c:	4b87      	ldr	r3, [pc, #540]	@ (8003a8c <HAL_ADC_Init+0x290>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	099b      	lsrs	r3, r3, #6
 8003872:	4a87      	ldr	r2, [pc, #540]	@ (8003a90 <HAL_ADC_Init+0x294>)
 8003874:	fba2 2303 	umull	r2, r3, r2, r3
 8003878:	099b      	lsrs	r3, r3, #6
 800387a:	3301      	adds	r3, #1
 800387c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800387e:	e002      	b.n	8003886 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	3b01      	subs	r3, #1
 8003884:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d1f9      	bne.n	8003880 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4618      	mov	r0, r3
 8003892:	f7ff ff3d 	bl	8003710 <LL_ADC_IsInternalRegulatorEnabled>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d10d      	bne.n	80038b8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038a0:	f043 0210 	orr.w	r2, r3, #16
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ac:	f043 0201 	orr.w	r2, r3, #1
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4618      	mov	r0, r3
 80038be:	f7ff ff77 	bl	80037b0 <LL_ADC_REG_IsConversionOngoing>
 80038c2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038c8:	f003 0310 	and.w	r3, r3, #16
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	f040 8129 	bne.w	8003b24 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f040 8125 	bne.w	8003b24 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038de:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80038e2:	f043 0202 	orr.w	r2, r3, #2
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7ff ff36 	bl	8003760 <LL_ADC_IsEnabled>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d136      	bne.n	8003968 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a65      	ldr	r2, [pc, #404]	@ (8003a94 <HAL_ADC_Init+0x298>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d004      	beq.n	800390e <HAL_ADC_Init+0x112>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a63      	ldr	r2, [pc, #396]	@ (8003a98 <HAL_ADC_Init+0x29c>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d10e      	bne.n	800392c <HAL_ADC_Init+0x130>
 800390e:	4861      	ldr	r0, [pc, #388]	@ (8003a94 <HAL_ADC_Init+0x298>)
 8003910:	f7ff ff26 	bl	8003760 <LL_ADC_IsEnabled>
 8003914:	4604      	mov	r4, r0
 8003916:	4860      	ldr	r0, [pc, #384]	@ (8003a98 <HAL_ADC_Init+0x29c>)
 8003918:	f7ff ff22 	bl	8003760 <LL_ADC_IsEnabled>
 800391c:	4603      	mov	r3, r0
 800391e:	4323      	orrs	r3, r4
 8003920:	2b00      	cmp	r3, #0
 8003922:	bf0c      	ite	eq
 8003924:	2301      	moveq	r3, #1
 8003926:	2300      	movne	r3, #0
 8003928:	b2db      	uxtb	r3, r3
 800392a:	e008      	b.n	800393e <HAL_ADC_Init+0x142>
 800392c:	485b      	ldr	r0, [pc, #364]	@ (8003a9c <HAL_ADC_Init+0x2a0>)
 800392e:	f7ff ff17 	bl	8003760 <LL_ADC_IsEnabled>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	bf0c      	ite	eq
 8003938:	2301      	moveq	r3, #1
 800393a:	2300      	movne	r3, #0
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b00      	cmp	r3, #0
 8003940:	d012      	beq.n	8003968 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a53      	ldr	r2, [pc, #332]	@ (8003a94 <HAL_ADC_Init+0x298>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d004      	beq.n	8003956 <HAL_ADC_Init+0x15a>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a51      	ldr	r2, [pc, #324]	@ (8003a98 <HAL_ADC_Init+0x29c>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d101      	bne.n	800395a <HAL_ADC_Init+0x15e>
 8003956:	4a52      	ldr	r2, [pc, #328]	@ (8003aa0 <HAL_ADC_Init+0x2a4>)
 8003958:	e000      	b.n	800395c <HAL_ADC_Init+0x160>
 800395a:	4a52      	ldr	r2, [pc, #328]	@ (8003aa4 <HAL_ADC_Init+0x2a8>)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	4619      	mov	r1, r3
 8003962:	4610      	mov	r0, r2
 8003964:	f7ff fd0e 	bl	8003384 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003968:	f7ff fcea 	bl	8003340 <HAL_GetREVID>
 800396c:	4603      	mov	r3, r0
 800396e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003972:	4293      	cmp	r3, r2
 8003974:	d914      	bls.n	80039a0 <HAL_ADC_Init+0x1a4>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	2b10      	cmp	r3, #16
 800397c:	d110      	bne.n	80039a0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	7d5b      	ldrb	r3, [r3, #21]
 8003982:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003988:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800398e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	7f1b      	ldrb	r3, [r3, #28]
 8003994:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003996:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003998:	f043 030c 	orr.w	r3, r3, #12
 800399c:	61bb      	str	r3, [r7, #24]
 800399e:	e00d      	b.n	80039bc <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	7d5b      	ldrb	r3, [r3, #21]
 80039a4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80039aa:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80039b0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	7f1b      	ldrb	r3, [r3, #28]
 80039b6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80039b8:	4313      	orrs	r3, r2
 80039ba:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	7f1b      	ldrb	r3, [r3, #28]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d106      	bne.n	80039d2 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a1b      	ldr	r3, [r3, #32]
 80039c8:	3b01      	subs	r3, #1
 80039ca:	045b      	lsls	r3, r3, #17
 80039cc:	69ba      	ldr	r2, [r7, #24]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d009      	beq.n	80039ee <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039de:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039e6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68da      	ldr	r2, [r3, #12]
 80039f4:	4b2c      	ldr	r3, [pc, #176]	@ (8003aa8 <HAL_ADC_Init+0x2ac>)
 80039f6:	4013      	ands	r3, r2
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	6812      	ldr	r2, [r2, #0]
 80039fc:	69b9      	ldr	r1, [r7, #24]
 80039fe:	430b      	orrs	r3, r1
 8003a00:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7ff fed2 	bl	80037b0 <LL_ADC_REG_IsConversionOngoing>
 8003a0c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7ff fedf 	bl	80037d6 <LL_ADC_INJ_IsConversionOngoing>
 8003a18:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d15f      	bne.n	8003ae0 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d15c      	bne.n	8003ae0 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	7d1b      	ldrb	r3, [r3, #20]
 8003a2a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8003a30:	4313      	orrs	r3, r2
 8003a32:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68da      	ldr	r2, [r3, #12]
 8003a3a:	4b1c      	ldr	r3, [pc, #112]	@ (8003aac <HAL_ADC_Init+0x2b0>)
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	6812      	ldr	r2, [r2, #0]
 8003a42:	69b9      	ldr	r1, [r7, #24]
 8003a44:	430b      	orrs	r3, r1
 8003a46:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d130      	bne.n	8003ab4 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a56:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	691a      	ldr	r2, [r3, #16]
 8003a5e:	4b14      	ldr	r3, [pc, #80]	@ (8003ab0 <HAL_ADC_Init+0x2b4>)
 8003a60:	4013      	ands	r3, r2
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003a66:	3a01      	subs	r2, #1
 8003a68:	0411      	lsls	r1, r2, #16
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003a6e:	4311      	orrs	r1, r2
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003a74:	4311      	orrs	r1, r2
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003a7a:	430a      	orrs	r2, r1
 8003a7c:	431a      	orrs	r2, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f042 0201 	orr.w	r2, r2, #1
 8003a86:	611a      	str	r2, [r3, #16]
 8003a88:	e01c      	b.n	8003ac4 <HAL_ADC_Init+0x2c8>
 8003a8a:	bf00      	nop
 8003a8c:	24000000 	.word	0x24000000
 8003a90:	053e2d63 	.word	0x053e2d63
 8003a94:	40022000 	.word	0x40022000
 8003a98:	40022100 	.word	0x40022100
 8003a9c:	58026000 	.word	0x58026000
 8003aa0:	40022300 	.word	0x40022300
 8003aa4:	58026300 	.word	0x58026300
 8003aa8:	fff0c003 	.word	0xfff0c003
 8003aac:	ffffbffc 	.word	0xffffbffc
 8003ab0:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	691a      	ldr	r2, [r3, #16]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f022 0201 	bic.w	r2, r2, #1
 8003ac2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 ff64 	bl	80049a8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d10c      	bne.n	8003b02 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aee:	f023 010f 	bic.w	r1, r3, #15
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	1e5a      	subs	r2, r3, #1
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	430a      	orrs	r2, r1
 8003afe:	631a      	str	r2, [r3, #48]	@ 0x30
 8003b00:	e007      	b.n	8003b12 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f022 020f 	bic.w	r2, r2, #15
 8003b10:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b16:	f023 0303 	bic.w	r3, r3, #3
 8003b1a:	f043 0201 	orr.w	r2, r3, #1
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	655a      	str	r2, [r3, #84]	@ 0x54
 8003b22:	e007      	b.n	8003b34 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b28:	f043 0210 	orr.w	r2, r3, #16
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003b34:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3724      	adds	r7, #36	@ 0x24
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd90      	pop	{r4, r7, pc}
 8003b3e:	bf00      	nop

08003b40 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b086      	sub	sp, #24
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a55      	ldr	r2, [pc, #340]	@ (8003ca8 <HAL_ADC_Start_DMA+0x168>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d004      	beq.n	8003b60 <HAL_ADC_Start_DMA+0x20>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a54      	ldr	r2, [pc, #336]	@ (8003cac <HAL_ADC_Start_DMA+0x16c>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d101      	bne.n	8003b64 <HAL_ADC_Start_DMA+0x24>
 8003b60:	4b53      	ldr	r3, [pc, #332]	@ (8003cb0 <HAL_ADC_Start_DMA+0x170>)
 8003b62:	e000      	b.n	8003b66 <HAL_ADC_Start_DMA+0x26>
 8003b64:	4b53      	ldr	r3, [pc, #332]	@ (8003cb4 <HAL_ADC_Start_DMA+0x174>)
 8003b66:	4618      	mov	r0, r3
 8003b68:	f7ff fd7c 	bl	8003664 <LL_ADC_GetMultimode>
 8003b6c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7ff fe1c 	bl	80037b0 <LL_ADC_REG_IsConversionOngoing>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f040 808c 	bne.w	8003c98 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d101      	bne.n	8003b8e <HAL_ADC_Start_DMA+0x4e>
 8003b8a:	2302      	movs	r3, #2
 8003b8c:	e087      	b.n	8003c9e <HAL_ADC_Start_DMA+0x15e>
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2201      	movs	r2, #1
 8003b92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d005      	beq.n	8003ba8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	2b05      	cmp	r3, #5
 8003ba0:	d002      	beq.n	8003ba8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	2b09      	cmp	r3, #9
 8003ba6:	d170      	bne.n	8003c8a <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003ba8:	68f8      	ldr	r0, [r7, #12]
 8003baa:	f000 fddf 	bl	800476c <ADC_Enable>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003bb2:	7dfb      	ldrb	r3, [r7, #23]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d163      	bne.n	8003c80 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003bbc:	4b3e      	ldr	r3, [pc, #248]	@ (8003cb8 <HAL_ADC_Start_DMA+0x178>)
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a37      	ldr	r2, [pc, #220]	@ (8003cac <HAL_ADC_Start_DMA+0x16c>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d002      	beq.n	8003bd8 <HAL_ADC_Start_DMA+0x98>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	e000      	b.n	8003bda <HAL_ADC_Start_DMA+0x9a>
 8003bd8:	4b33      	ldr	r3, [pc, #204]	@ (8003ca8 <HAL_ADC_Start_DMA+0x168>)
 8003bda:	68fa      	ldr	r2, [r7, #12]
 8003bdc:	6812      	ldr	r2, [r2, #0]
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d002      	beq.n	8003be8 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d105      	bne.n	8003bf4 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bec:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bf8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d006      	beq.n	8003c0e <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c04:	f023 0206 	bic.w	r2, r3, #6
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	659a      	str	r2, [r3, #88]	@ 0x58
 8003c0c:	e002      	b.n	8003c14 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2200      	movs	r2, #0
 8003c12:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c18:	4a28      	ldr	r2, [pc, #160]	@ (8003cbc <HAL_ADC_Start_DMA+0x17c>)
 8003c1a:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c20:	4a27      	ldr	r2, [pc, #156]	@ (8003cc0 <HAL_ADC_Start_DMA+0x180>)
 8003c22:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c28:	4a26      	ldr	r2, [pc, #152]	@ (8003cc4 <HAL_ADC_Start_DMA+0x184>)
 8003c2a:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	221c      	movs	r2, #28
 8003c32:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	685a      	ldr	r2, [r3, #4]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f042 0210 	orr.w	r2, r2, #16
 8003c4a:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c54:	4619      	mov	r1, r3
 8003c56:	4610      	mov	r0, r2
 8003c58:	f7ff fc8e 	bl	8003578 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	3340      	adds	r3, #64	@ 0x40
 8003c66:	4619      	mov	r1, r3
 8003c68:	68ba      	ldr	r2, [r7, #8]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f001 fd5c 	bl	8005728 <HAL_DMA_Start_IT>
 8003c70:	4603      	mov	r3, r0
 8003c72:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7ff fd85 	bl	8003788 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003c7e:	e00d      	b.n	8003c9c <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8003c88:	e008      	b.n	8003c9c <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8003c96:	e001      	b.n	8003c9c <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003c98:	2302      	movs	r3, #2
 8003c9a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003c9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3718      	adds	r7, #24
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	40022000 	.word	0x40022000
 8003cac:	40022100 	.word	0x40022100
 8003cb0:	40022300 	.word	0x40022300
 8003cb4:	58026300 	.word	0x58026300
 8003cb8:	fffff0fe 	.word	0xfffff0fe
 8003cbc:	08004881 	.word	0x08004881
 8003cc0:	08004959 	.word	0x08004959
 8003cc4:	08004975 	.word	0x08004975

08003cc8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b08a      	sub	sp, #40	@ 0x28
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a87      	ldr	r2, [pc, #540]	@ (8003f08 <HAL_ADC_IRQHandler+0x240>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d004      	beq.n	8003cf8 <HAL_ADC_IRQHandler+0x30>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a86      	ldr	r2, [pc, #536]	@ (8003f0c <HAL_ADC_IRQHandler+0x244>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d101      	bne.n	8003cfc <HAL_ADC_IRQHandler+0x34>
 8003cf8:	4b85      	ldr	r3, [pc, #532]	@ (8003f10 <HAL_ADC_IRQHandler+0x248>)
 8003cfa:	e000      	b.n	8003cfe <HAL_ADC_IRQHandler+0x36>
 8003cfc:	4b85      	ldr	r3, [pc, #532]	@ (8003f14 <HAL_ADC_IRQHandler+0x24c>)
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f7ff fcb0 	bl	8003664 <LL_ADC_GetMultimode>
 8003d04:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	f003 0302 	and.w	r3, r3, #2
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d017      	beq.n	8003d40 <HAL_ADC_IRQHandler+0x78>
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d012      	beq.n	8003d40 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d1e:	f003 0310 	and.w	r3, r3, #16
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d105      	bne.n	8003d32 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d2a:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 ff92 	bl	8004c5c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2202      	movs	r2, #2
 8003d3e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	f003 0304 	and.w	r3, r3, #4
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d004      	beq.n	8003d54 <HAL_ADC_IRQHandler+0x8c>
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	f003 0304 	and.w	r3, r3, #4
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d10a      	bne.n	8003d6a <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f000 8083 	beq.w	8003e66 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	f003 0308 	and.w	r3, r3, #8
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d07d      	beq.n	8003e66 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d6e:	f003 0310 	and.w	r3, r3, #16
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d105      	bne.n	8003d82 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d7a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7ff fbb7 	bl	80034fa <LL_ADC_REG_IsTriggerSourceSWStart>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d062      	beq.n	8003e58 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a5d      	ldr	r2, [pc, #372]	@ (8003f0c <HAL_ADC_IRQHandler+0x244>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d002      	beq.n	8003da2 <HAL_ADC_IRQHandler+0xda>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	e000      	b.n	8003da4 <HAL_ADC_IRQHandler+0xdc>
 8003da2:	4b59      	ldr	r3, [pc, #356]	@ (8003f08 <HAL_ADC_IRQHandler+0x240>)
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	6812      	ldr	r2, [r2, #0]
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d008      	beq.n	8003dbe <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d005      	beq.n	8003dbe <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	2b05      	cmp	r3, #5
 8003db6:	d002      	beq.n	8003dbe <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	2b09      	cmp	r3, #9
 8003dbc:	d104      	bne.n	8003dc8 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	623b      	str	r3, [r7, #32]
 8003dc6:	e00c      	b.n	8003de2 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a4f      	ldr	r2, [pc, #316]	@ (8003f0c <HAL_ADC_IRQHandler+0x244>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d002      	beq.n	8003dd8 <HAL_ADC_IRQHandler+0x110>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	e000      	b.n	8003dda <HAL_ADC_IRQHandler+0x112>
 8003dd8:	4b4b      	ldr	r3, [pc, #300]	@ (8003f08 <HAL_ADC_IRQHandler+0x240>)
 8003dda:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003de2:	6a3b      	ldr	r3, [r7, #32]
 8003de4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d135      	bne.n	8003e58 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0308 	and.w	r3, r3, #8
 8003df6:	2b08      	cmp	r3, #8
 8003df8:	d12e      	bne.n	8003e58 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7ff fcd6 	bl	80037b0 <LL_ADC_REG_IsConversionOngoing>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d11a      	bne.n	8003e40 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	685a      	ldr	r2, [r3, #4]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f022 020c 	bic.w	r2, r2, #12
 8003e18:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e1e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d112      	bne.n	8003e58 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e36:	f043 0201 	orr.w	r2, r3, #1
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	655a      	str	r2, [r3, #84]	@ 0x54
 8003e3e:	e00b      	b.n	8003e58 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e44:	f043 0210 	orr.w	r2, r3, #16
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e50:	f043 0201 	orr.w	r2, r3, #1
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f000 f96f 	bl	800413c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	220c      	movs	r2, #12
 8003e64:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	f003 0320 	and.w	r3, r3, #32
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d004      	beq.n	8003e7a <HAL_ADC_IRQHandler+0x1b2>
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	f003 0320 	and.w	r3, r3, #32
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d10b      	bne.n	8003e92 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	f000 80a0 	beq.w	8003fc6 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	f000 809a 	beq.w	8003fc6 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e96:	f003 0310 	and.w	r3, r3, #16
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d105      	bne.n	8003eaa <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ea2:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f7ff fb75 	bl	800359e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003eb4:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7ff fb1d 	bl	80034fa <LL_ADC_REG_IsTriggerSourceSWStart>
 8003ec0:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a11      	ldr	r2, [pc, #68]	@ (8003f0c <HAL_ADC_IRQHandler+0x244>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d002      	beq.n	8003ed2 <HAL_ADC_IRQHandler+0x20a>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	e000      	b.n	8003ed4 <HAL_ADC_IRQHandler+0x20c>
 8003ed2:	4b0d      	ldr	r3, [pc, #52]	@ (8003f08 <HAL_ADC_IRQHandler+0x240>)
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	6812      	ldr	r2, [r2, #0]
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d008      	beq.n	8003eee <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d005      	beq.n	8003eee <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	2b06      	cmp	r3, #6
 8003ee6:	d002      	beq.n	8003eee <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	2b07      	cmp	r3, #7
 8003eec:	d104      	bne.n	8003ef8 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	623b      	str	r3, [r7, #32]
 8003ef6:	e014      	b.n	8003f22 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a03      	ldr	r2, [pc, #12]	@ (8003f0c <HAL_ADC_IRQHandler+0x244>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d00a      	beq.n	8003f18 <HAL_ADC_IRQHandler+0x250>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	e008      	b.n	8003f1a <HAL_ADC_IRQHandler+0x252>
 8003f08:	40022000 	.word	0x40022000
 8003f0c:	40022100 	.word	0x40022100
 8003f10:	40022300 	.word	0x40022300
 8003f14:	58026300 	.word	0x58026300
 8003f18:	4b84      	ldr	r3, [pc, #528]	@ (800412c <HAL_ADC_IRQHandler+0x464>)
 8003f1a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d047      	beq.n	8003fb8 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003f28:	6a3b      	ldr	r3, [r7, #32]
 8003f2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d007      	beq.n	8003f42 <HAL_ADC_IRQHandler+0x27a>
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d03f      	beq.n	8003fb8 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003f38:	6a3b      	ldr	r3, [r7, #32]
 8003f3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d13a      	bne.n	8003fb8 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f4c:	2b40      	cmp	r3, #64	@ 0x40
 8003f4e:	d133      	bne.n	8003fb8 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003f50:	6a3b      	ldr	r3, [r7, #32]
 8003f52:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d12e      	bne.n	8003fb8 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7ff fc39 	bl	80037d6 <LL_ADC_INJ_IsConversionOngoing>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d11a      	bne.n	8003fa0 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	685a      	ldr	r2, [r3, #4]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f78:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f7e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d112      	bne.n	8003fb8 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f96:	f043 0201 	orr.w	r2, r3, #1
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	655a      	str	r2, [r3, #84]	@ 0x54
 8003f9e:	e00b      	b.n	8003fb8 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fa4:	f043 0210 	orr.w	r2, r3, #16
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fb0:	f043 0201 	orr.w	r2, r3, #1
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f000 fe27 	bl	8004c0c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2260      	movs	r2, #96	@ 0x60
 8003fc4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d011      	beq.n	8003ff4 <HAL_ADC_IRQHandler+0x32c>
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d00c      	beq.n	8003ff4 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fde:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 f8bc 	bl	8004164 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2280      	movs	r2, #128	@ 0x80
 8003ff2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d012      	beq.n	8004024 <HAL_ADC_IRQHandler+0x35c>
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00d      	beq.n	8004024 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800400c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f000 fe0d 	bl	8004c34 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004022:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800402a:	2b00      	cmp	r3, #0
 800402c:	d012      	beq.n	8004054 <HAL_ADC_IRQHandler+0x38c>
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00d      	beq.n	8004054 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800403c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f000 fdff 	bl	8004c48 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004052:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	f003 0310 	and.w	r3, r3, #16
 800405a:	2b00      	cmp	r3, #0
 800405c:	d043      	beq.n	80040e6 <HAL_ADC_IRQHandler+0x41e>
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	f003 0310 	and.w	r3, r3, #16
 8004064:	2b00      	cmp	r3, #0
 8004066:	d03e      	beq.n	80040e6 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800406c:	2b00      	cmp	r3, #0
 800406e:	d102      	bne.n	8004076 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8004070:	2301      	movs	r3, #1
 8004072:	627b      	str	r3, [r7, #36]	@ 0x24
 8004074:	e021      	b.n	80040ba <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d015      	beq.n	80040a8 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a2a      	ldr	r2, [pc, #168]	@ (800412c <HAL_ADC_IRQHandler+0x464>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d004      	beq.n	8004090 <HAL_ADC_IRQHandler+0x3c8>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a29      	ldr	r2, [pc, #164]	@ (8004130 <HAL_ADC_IRQHandler+0x468>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d101      	bne.n	8004094 <HAL_ADC_IRQHandler+0x3cc>
 8004090:	4b28      	ldr	r3, [pc, #160]	@ (8004134 <HAL_ADC_IRQHandler+0x46c>)
 8004092:	e000      	b.n	8004096 <HAL_ADC_IRQHandler+0x3ce>
 8004094:	4b28      	ldr	r3, [pc, #160]	@ (8004138 <HAL_ADC_IRQHandler+0x470>)
 8004096:	4618      	mov	r0, r3
 8004098:	f7ff faf2 	bl	8003680 <LL_ADC_GetMultiDMATransfer>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00b      	beq.n	80040ba <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80040a2:	2301      	movs	r3, #1
 80040a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80040a6:	e008      	b.n	80040ba <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	f003 0303 	and.w	r3, r3, #3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d001      	beq.n	80040ba <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80040b6:	2301      	movs	r3, #1
 80040b8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80040ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d10e      	bne.n	80040de <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040c4:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040d0:	f043 0202 	orr.w	r2, r3, #2
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f000 f84d 	bl	8004178 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2210      	movs	r2, #16
 80040e4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d018      	beq.n	8004122 <HAL_ADC_IRQHandler+0x45a>
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d013      	beq.n	8004122 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040fe:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800410a:	f043 0208 	orr.w	r2, r3, #8
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800411a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f000 fd7f 	bl	8004c20 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8004122:	bf00      	nop
 8004124:	3728      	adds	r7, #40	@ 0x28
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	40022000 	.word	0x40022000
 8004130:	40022100 	.word	0x40022100
 8004134:	40022300 	.word	0x40022300
 8004138:	58026300 	.word	0x58026300

0800413c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004144:	bf00      	nop
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004158:	bf00      	nop
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800416c:	bf00      	nop
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004180:	bf00      	nop
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800418c:	b590      	push	{r4, r7, lr}
 800418e:	b08d      	sub	sp, #52	@ 0x34
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004196:	2300      	movs	r3, #0
 8004198:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800419c:	2300      	movs	r3, #0
 800419e:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	4a65      	ldr	r2, [pc, #404]	@ (800433c <HAL_ADC_ConfigChannel+0x1b0>)
 80041a6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d101      	bne.n	80041b6 <HAL_ADC_ConfigChannel+0x2a>
 80041b2:	2302      	movs	r3, #2
 80041b4:	e2c7      	b.n	8004746 <HAL_ADC_ConfigChannel+0x5ba>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2201      	movs	r2, #1
 80041ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7ff faf4 	bl	80037b0 <LL_ADC_REG_IsConversionOngoing>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	f040 82ac 	bne.w	8004728 <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	db2c      	blt.n	8004232 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d108      	bne.n	80041f6 <HAL_ADC_ConfigChannel+0x6a>
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	0e9b      	lsrs	r3, r3, #26
 80041ea:	f003 031f 	and.w	r3, r3, #31
 80041ee:	2201      	movs	r2, #1
 80041f0:	fa02 f303 	lsl.w	r3, r2, r3
 80041f4:	e016      	b.n	8004224 <HAL_ADC_ConfigChannel+0x98>
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	fa93 f3a3 	rbit	r3, r3
 8004202:	613b      	str	r3, [r7, #16]
  return result;
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d101      	bne.n	8004212 <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 800420e:	2320      	movs	r3, #32
 8004210:	e003      	b.n	800421a <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	fab3 f383 	clz	r3, r3
 8004218:	b2db      	uxtb	r3, r3
 800421a:	f003 031f 	and.w	r3, r3, #31
 800421e:	2201      	movs	r2, #1
 8004220:	fa02 f303 	lsl.w	r3, r2, r3
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	6812      	ldr	r2, [r2, #0]
 8004228:	69d1      	ldr	r1, [r2, #28]
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	6812      	ldr	r2, [r2, #0]
 800422e:	430b      	orrs	r3, r1
 8004230:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6818      	ldr	r0, [r3, #0]
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	6859      	ldr	r1, [r3, #4]
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	461a      	mov	r2, r3
 8004240:	f7ff f96e 	bl	8003520 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4618      	mov	r0, r3
 800424a:	f7ff fab1 	bl	80037b0 <LL_ADC_REG_IsConversionOngoing>
 800424e:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4618      	mov	r0, r3
 8004256:	f7ff fabe 	bl	80037d6 <LL_ADC_INJ_IsConversionOngoing>
 800425a:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800425c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800425e:	2b00      	cmp	r3, #0
 8004260:	f040 80b8 	bne.w	80043d4 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004266:	2b00      	cmp	r3, #0
 8004268:	f040 80b4 	bne.w	80043d4 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6818      	ldr	r0, [r3, #0]
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	6819      	ldr	r1, [r3, #0]
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	461a      	mov	r2, r3
 800427a:	f7ff f9a3 	bl	80035c4 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800427e:	4b30      	ldr	r3, [pc, #192]	@ (8004340 <HAL_ADC_ConfigChannel+0x1b4>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004286:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800428a:	d10b      	bne.n	80042a4 <HAL_ADC_ConfigChannel+0x118>
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	695a      	ldr	r2, [r3, #20]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	089b      	lsrs	r3, r3, #2
 8004298:	f003 0307 	and.w	r3, r3, #7
 800429c:	005b      	lsls	r3, r3, #1
 800429e:	fa02 f303 	lsl.w	r3, r2, r3
 80042a2:	e01d      	b.n	80042e0 <HAL_ADC_ConfigChannel+0x154>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	f003 0310 	and.w	r3, r3, #16
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d10b      	bne.n	80042ca <HAL_ADC_ConfigChannel+0x13e>
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	695a      	ldr	r2, [r3, #20]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	089b      	lsrs	r3, r3, #2
 80042be:	f003 0307 	and.w	r3, r3, #7
 80042c2:	005b      	lsls	r3, r3, #1
 80042c4:	fa02 f303 	lsl.w	r3, r2, r3
 80042c8:	e00a      	b.n	80042e0 <HAL_ADC_ConfigChannel+0x154>
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	695a      	ldr	r2, [r3, #20]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	089b      	lsrs	r3, r3, #2
 80042d6:	f003 0304 	and.w	r3, r3, #4
 80042da:	005b      	lsls	r3, r3, #1
 80042dc:	fa02 f303 	lsl.w	r3, r2, r3
 80042e0:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	2b04      	cmp	r3, #4
 80042e8:	d02c      	beq.n	8004344 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6818      	ldr	r0, [r3, #0]
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	6919      	ldr	r1, [r3, #16]
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	6a3b      	ldr	r3, [r7, #32]
 80042f8:	f7ff f8ab 	bl	8003452 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6818      	ldr	r0, [r3, #0]
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	6919      	ldr	r1, [r3, #16]
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	7e5b      	ldrb	r3, [r3, #25]
 8004308:	2b01      	cmp	r3, #1
 800430a:	d102      	bne.n	8004312 <HAL_ADC_ConfigChannel+0x186>
 800430c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004310:	e000      	b.n	8004314 <HAL_ADC_ConfigChannel+0x188>
 8004312:	2300      	movs	r3, #0
 8004314:	461a      	mov	r2, r3
 8004316:	f7ff f8d5 	bl	80034c4 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6818      	ldr	r0, [r3, #0]
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	6919      	ldr	r1, [r3, #16]
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	7e1b      	ldrb	r3, [r3, #24]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d102      	bne.n	8004330 <HAL_ADC_ConfigChannel+0x1a4>
 800432a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800432e:	e000      	b.n	8004332 <HAL_ADC_ConfigChannel+0x1a6>
 8004330:	2300      	movs	r3, #0
 8004332:	461a      	mov	r2, r3
 8004334:	f7ff f8ad 	bl	8003492 <LL_ADC_SetDataRightShift>
 8004338:	e04c      	b.n	80043d4 <HAL_ADC_ConfigChannel+0x248>
 800433a:	bf00      	nop
 800433c:	47ff0000 	.word	0x47ff0000
 8004340:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800434a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	069b      	lsls	r3, r3, #26
 8004354:	429a      	cmp	r2, r3
 8004356:	d107      	bne.n	8004368 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004366:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800436e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	069b      	lsls	r3, r3, #26
 8004378:	429a      	cmp	r2, r3
 800437a:	d107      	bne.n	800438c <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800438a:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004392:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	069b      	lsls	r3, r3, #26
 800439c:	429a      	cmp	r2, r3
 800439e:	d107      	bne.n	80043b0 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80043ae:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043b6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	069b      	lsls	r3, r3, #26
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d107      	bne.n	80043d4 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80043d2:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4618      	mov	r0, r3
 80043da:	f7ff f9c1 	bl	8003760 <LL_ADC_IsEnabled>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	f040 81aa 	bne.w	800473a <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6818      	ldr	r0, [r3, #0]
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	6819      	ldr	r1, [r3, #0]
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	461a      	mov	r2, r3
 80043f4:	f7ff f912 	bl	800361c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	4a87      	ldr	r2, [pc, #540]	@ (800461c <HAL_ADC_ConfigChannel+0x490>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	f040 809a 	bne.w	8004538 <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4984      	ldr	r1, [pc, #528]	@ (8004620 <HAL_ADC_ConfigChannel+0x494>)
 800440e:	428b      	cmp	r3, r1
 8004410:	d147      	bne.n	80044a2 <HAL_ADC_ConfigChannel+0x316>
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4983      	ldr	r1, [pc, #524]	@ (8004624 <HAL_ADC_ConfigChannel+0x498>)
 8004418:	428b      	cmp	r3, r1
 800441a:	d040      	beq.n	800449e <HAL_ADC_ConfigChannel+0x312>
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4981      	ldr	r1, [pc, #516]	@ (8004628 <HAL_ADC_ConfigChannel+0x49c>)
 8004422:	428b      	cmp	r3, r1
 8004424:	d039      	beq.n	800449a <HAL_ADC_ConfigChannel+0x30e>
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4980      	ldr	r1, [pc, #512]	@ (800462c <HAL_ADC_ConfigChannel+0x4a0>)
 800442c:	428b      	cmp	r3, r1
 800442e:	d032      	beq.n	8004496 <HAL_ADC_ConfigChannel+0x30a>
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	497e      	ldr	r1, [pc, #504]	@ (8004630 <HAL_ADC_ConfigChannel+0x4a4>)
 8004436:	428b      	cmp	r3, r1
 8004438:	d02b      	beq.n	8004492 <HAL_ADC_ConfigChannel+0x306>
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	497d      	ldr	r1, [pc, #500]	@ (8004634 <HAL_ADC_ConfigChannel+0x4a8>)
 8004440:	428b      	cmp	r3, r1
 8004442:	d024      	beq.n	800448e <HAL_ADC_ConfigChannel+0x302>
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	497b      	ldr	r1, [pc, #492]	@ (8004638 <HAL_ADC_ConfigChannel+0x4ac>)
 800444a:	428b      	cmp	r3, r1
 800444c:	d01d      	beq.n	800448a <HAL_ADC_ConfigChannel+0x2fe>
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	497a      	ldr	r1, [pc, #488]	@ (800463c <HAL_ADC_ConfigChannel+0x4b0>)
 8004454:	428b      	cmp	r3, r1
 8004456:	d016      	beq.n	8004486 <HAL_ADC_ConfigChannel+0x2fa>
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4978      	ldr	r1, [pc, #480]	@ (8004640 <HAL_ADC_ConfigChannel+0x4b4>)
 800445e:	428b      	cmp	r3, r1
 8004460:	d00f      	beq.n	8004482 <HAL_ADC_ConfigChannel+0x2f6>
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4977      	ldr	r1, [pc, #476]	@ (8004644 <HAL_ADC_ConfigChannel+0x4b8>)
 8004468:	428b      	cmp	r3, r1
 800446a:	d008      	beq.n	800447e <HAL_ADC_ConfigChannel+0x2f2>
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4975      	ldr	r1, [pc, #468]	@ (8004648 <HAL_ADC_ConfigChannel+0x4bc>)
 8004472:	428b      	cmp	r3, r1
 8004474:	d101      	bne.n	800447a <HAL_ADC_ConfigChannel+0x2ee>
 8004476:	4b75      	ldr	r3, [pc, #468]	@ (800464c <HAL_ADC_ConfigChannel+0x4c0>)
 8004478:	e05a      	b.n	8004530 <HAL_ADC_ConfigChannel+0x3a4>
 800447a:	2300      	movs	r3, #0
 800447c:	e058      	b.n	8004530 <HAL_ADC_ConfigChannel+0x3a4>
 800447e:	4b74      	ldr	r3, [pc, #464]	@ (8004650 <HAL_ADC_ConfigChannel+0x4c4>)
 8004480:	e056      	b.n	8004530 <HAL_ADC_ConfigChannel+0x3a4>
 8004482:	4b74      	ldr	r3, [pc, #464]	@ (8004654 <HAL_ADC_ConfigChannel+0x4c8>)
 8004484:	e054      	b.n	8004530 <HAL_ADC_ConfigChannel+0x3a4>
 8004486:	4b6e      	ldr	r3, [pc, #440]	@ (8004640 <HAL_ADC_ConfigChannel+0x4b4>)
 8004488:	e052      	b.n	8004530 <HAL_ADC_ConfigChannel+0x3a4>
 800448a:	4b6c      	ldr	r3, [pc, #432]	@ (800463c <HAL_ADC_ConfigChannel+0x4b0>)
 800448c:	e050      	b.n	8004530 <HAL_ADC_ConfigChannel+0x3a4>
 800448e:	4b72      	ldr	r3, [pc, #456]	@ (8004658 <HAL_ADC_ConfigChannel+0x4cc>)
 8004490:	e04e      	b.n	8004530 <HAL_ADC_ConfigChannel+0x3a4>
 8004492:	4b72      	ldr	r3, [pc, #456]	@ (800465c <HAL_ADC_ConfigChannel+0x4d0>)
 8004494:	e04c      	b.n	8004530 <HAL_ADC_ConfigChannel+0x3a4>
 8004496:	4b72      	ldr	r3, [pc, #456]	@ (8004660 <HAL_ADC_ConfigChannel+0x4d4>)
 8004498:	e04a      	b.n	8004530 <HAL_ADC_ConfigChannel+0x3a4>
 800449a:	4b72      	ldr	r3, [pc, #456]	@ (8004664 <HAL_ADC_ConfigChannel+0x4d8>)
 800449c:	e048      	b.n	8004530 <HAL_ADC_ConfigChannel+0x3a4>
 800449e:	2301      	movs	r3, #1
 80044a0:	e046      	b.n	8004530 <HAL_ADC_ConfigChannel+0x3a4>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4970      	ldr	r1, [pc, #448]	@ (8004668 <HAL_ADC_ConfigChannel+0x4dc>)
 80044a8:	428b      	cmp	r3, r1
 80044aa:	d140      	bne.n	800452e <HAL_ADC_ConfigChannel+0x3a2>
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	495c      	ldr	r1, [pc, #368]	@ (8004624 <HAL_ADC_ConfigChannel+0x498>)
 80044b2:	428b      	cmp	r3, r1
 80044b4:	d039      	beq.n	800452a <HAL_ADC_ConfigChannel+0x39e>
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	495b      	ldr	r1, [pc, #364]	@ (8004628 <HAL_ADC_ConfigChannel+0x49c>)
 80044bc:	428b      	cmp	r3, r1
 80044be:	d032      	beq.n	8004526 <HAL_ADC_ConfigChannel+0x39a>
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4959      	ldr	r1, [pc, #356]	@ (800462c <HAL_ADC_ConfigChannel+0x4a0>)
 80044c6:	428b      	cmp	r3, r1
 80044c8:	d02b      	beq.n	8004522 <HAL_ADC_ConfigChannel+0x396>
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4958      	ldr	r1, [pc, #352]	@ (8004630 <HAL_ADC_ConfigChannel+0x4a4>)
 80044d0:	428b      	cmp	r3, r1
 80044d2:	d024      	beq.n	800451e <HAL_ADC_ConfigChannel+0x392>
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4956      	ldr	r1, [pc, #344]	@ (8004634 <HAL_ADC_ConfigChannel+0x4a8>)
 80044da:	428b      	cmp	r3, r1
 80044dc:	d01d      	beq.n	800451a <HAL_ADC_ConfigChannel+0x38e>
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4955      	ldr	r1, [pc, #340]	@ (8004638 <HAL_ADC_ConfigChannel+0x4ac>)
 80044e4:	428b      	cmp	r3, r1
 80044e6:	d016      	beq.n	8004516 <HAL_ADC_ConfigChannel+0x38a>
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4953      	ldr	r1, [pc, #332]	@ (800463c <HAL_ADC_ConfigChannel+0x4b0>)
 80044ee:	428b      	cmp	r3, r1
 80044f0:	d00f      	beq.n	8004512 <HAL_ADC_ConfigChannel+0x386>
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4952      	ldr	r1, [pc, #328]	@ (8004640 <HAL_ADC_ConfigChannel+0x4b4>)
 80044f8:	428b      	cmp	r3, r1
 80044fa:	d008      	beq.n	800450e <HAL_ADC_ConfigChannel+0x382>
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4951      	ldr	r1, [pc, #324]	@ (8004648 <HAL_ADC_ConfigChannel+0x4bc>)
 8004502:	428b      	cmp	r3, r1
 8004504:	d101      	bne.n	800450a <HAL_ADC_ConfigChannel+0x37e>
 8004506:	4b51      	ldr	r3, [pc, #324]	@ (800464c <HAL_ADC_ConfigChannel+0x4c0>)
 8004508:	e012      	b.n	8004530 <HAL_ADC_ConfigChannel+0x3a4>
 800450a:	2300      	movs	r3, #0
 800450c:	e010      	b.n	8004530 <HAL_ADC_ConfigChannel+0x3a4>
 800450e:	4b51      	ldr	r3, [pc, #324]	@ (8004654 <HAL_ADC_ConfigChannel+0x4c8>)
 8004510:	e00e      	b.n	8004530 <HAL_ADC_ConfigChannel+0x3a4>
 8004512:	4b4b      	ldr	r3, [pc, #300]	@ (8004640 <HAL_ADC_ConfigChannel+0x4b4>)
 8004514:	e00c      	b.n	8004530 <HAL_ADC_ConfigChannel+0x3a4>
 8004516:	4b49      	ldr	r3, [pc, #292]	@ (800463c <HAL_ADC_ConfigChannel+0x4b0>)
 8004518:	e00a      	b.n	8004530 <HAL_ADC_ConfigChannel+0x3a4>
 800451a:	4b4f      	ldr	r3, [pc, #316]	@ (8004658 <HAL_ADC_ConfigChannel+0x4cc>)
 800451c:	e008      	b.n	8004530 <HAL_ADC_ConfigChannel+0x3a4>
 800451e:	4b4f      	ldr	r3, [pc, #316]	@ (800465c <HAL_ADC_ConfigChannel+0x4d0>)
 8004520:	e006      	b.n	8004530 <HAL_ADC_ConfigChannel+0x3a4>
 8004522:	4b4f      	ldr	r3, [pc, #316]	@ (8004660 <HAL_ADC_ConfigChannel+0x4d4>)
 8004524:	e004      	b.n	8004530 <HAL_ADC_ConfigChannel+0x3a4>
 8004526:	4b4f      	ldr	r3, [pc, #316]	@ (8004664 <HAL_ADC_ConfigChannel+0x4d8>)
 8004528:	e002      	b.n	8004530 <HAL_ADC_ConfigChannel+0x3a4>
 800452a:	2301      	movs	r3, #1
 800452c:	e000      	b.n	8004530 <HAL_ADC_ConfigChannel+0x3a4>
 800452e:	2300      	movs	r3, #0
 8004530:	4619      	mov	r1, r3
 8004532:	4610      	mov	r0, r2
 8004534:	f7fe ff5a 	bl	80033ec <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	f280 80fc 	bge.w	800473a <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a36      	ldr	r2, [pc, #216]	@ (8004620 <HAL_ADC_ConfigChannel+0x494>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d004      	beq.n	8004556 <HAL_ADC_ConfigChannel+0x3ca>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a45      	ldr	r2, [pc, #276]	@ (8004668 <HAL_ADC_ConfigChannel+0x4dc>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d101      	bne.n	800455a <HAL_ADC_ConfigChannel+0x3ce>
 8004556:	4b45      	ldr	r3, [pc, #276]	@ (800466c <HAL_ADC_ConfigChannel+0x4e0>)
 8004558:	e000      	b.n	800455c <HAL_ADC_ConfigChannel+0x3d0>
 800455a:	4b45      	ldr	r3, [pc, #276]	@ (8004670 <HAL_ADC_ConfigChannel+0x4e4>)
 800455c:	4618      	mov	r0, r3
 800455e:	f7fe ff37 	bl	80033d0 <LL_ADC_GetCommonPathInternalCh>
 8004562:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a2d      	ldr	r2, [pc, #180]	@ (8004620 <HAL_ADC_ConfigChannel+0x494>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d004      	beq.n	8004578 <HAL_ADC_ConfigChannel+0x3ec>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a3d      	ldr	r2, [pc, #244]	@ (8004668 <HAL_ADC_ConfigChannel+0x4dc>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d10e      	bne.n	8004596 <HAL_ADC_ConfigChannel+0x40a>
 8004578:	4829      	ldr	r0, [pc, #164]	@ (8004620 <HAL_ADC_ConfigChannel+0x494>)
 800457a:	f7ff f8f1 	bl	8003760 <LL_ADC_IsEnabled>
 800457e:	4604      	mov	r4, r0
 8004580:	4839      	ldr	r0, [pc, #228]	@ (8004668 <HAL_ADC_ConfigChannel+0x4dc>)
 8004582:	f7ff f8ed 	bl	8003760 <LL_ADC_IsEnabled>
 8004586:	4603      	mov	r3, r0
 8004588:	4323      	orrs	r3, r4
 800458a:	2b00      	cmp	r3, #0
 800458c:	bf0c      	ite	eq
 800458e:	2301      	moveq	r3, #1
 8004590:	2300      	movne	r3, #0
 8004592:	b2db      	uxtb	r3, r3
 8004594:	e008      	b.n	80045a8 <HAL_ADC_ConfigChannel+0x41c>
 8004596:	4837      	ldr	r0, [pc, #220]	@ (8004674 <HAL_ADC_ConfigChannel+0x4e8>)
 8004598:	f7ff f8e2 	bl	8003760 <LL_ADC_IsEnabled>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	bf0c      	ite	eq
 80045a2:	2301      	moveq	r3, #1
 80045a4:	2300      	movne	r3, #0
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	f000 80b3 	beq.w	8004714 <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a31      	ldr	r2, [pc, #196]	@ (8004678 <HAL_ADC_ConfigChannel+0x4ec>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d165      	bne.n	8004684 <HAL_ADC_ConfigChannel+0x4f8>
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d160      	bne.n	8004684 <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a2b      	ldr	r2, [pc, #172]	@ (8004674 <HAL_ADC_ConfigChannel+0x4e8>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	f040 80b6 	bne.w	800473a <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a13      	ldr	r2, [pc, #76]	@ (8004620 <HAL_ADC_ConfigChannel+0x494>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d004      	beq.n	80045e2 <HAL_ADC_ConfigChannel+0x456>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a22      	ldr	r2, [pc, #136]	@ (8004668 <HAL_ADC_ConfigChannel+0x4dc>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d101      	bne.n	80045e6 <HAL_ADC_ConfigChannel+0x45a>
 80045e2:	4a22      	ldr	r2, [pc, #136]	@ (800466c <HAL_ADC_ConfigChannel+0x4e0>)
 80045e4:	e000      	b.n	80045e8 <HAL_ADC_ConfigChannel+0x45c>
 80045e6:	4a22      	ldr	r2, [pc, #136]	@ (8004670 <HAL_ADC_ConfigChannel+0x4e4>)
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80045ee:	4619      	mov	r1, r3
 80045f0:	4610      	mov	r0, r2
 80045f2:	f7fe feda 	bl	80033aa <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80045f6:	4b21      	ldr	r3, [pc, #132]	@ (800467c <HAL_ADC_ConfigChannel+0x4f0>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	099b      	lsrs	r3, r3, #6
 80045fc:	4a20      	ldr	r2, [pc, #128]	@ (8004680 <HAL_ADC_ConfigChannel+0x4f4>)
 80045fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004602:	099b      	lsrs	r3, r3, #6
 8004604:	3301      	adds	r3, #1
 8004606:	005b      	lsls	r3, r3, #1
 8004608:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800460a:	e002      	b.n	8004612 <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	3b01      	subs	r3, #1
 8004610:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1f9      	bne.n	800460c <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004618:	e08f      	b.n	800473a <HAL_ADC_ConfigChannel+0x5ae>
 800461a:	bf00      	nop
 800461c:	47ff0000 	.word	0x47ff0000
 8004620:	40022000 	.word	0x40022000
 8004624:	04300002 	.word	0x04300002
 8004628:	08600004 	.word	0x08600004
 800462c:	0c900008 	.word	0x0c900008
 8004630:	10c00010 	.word	0x10c00010
 8004634:	14f00020 	.word	0x14f00020
 8004638:	2a000400 	.word	0x2a000400
 800463c:	2e300800 	.word	0x2e300800
 8004640:	32601000 	.word	0x32601000
 8004644:	43210000 	.word	0x43210000
 8004648:	4b840000 	.word	0x4b840000
 800464c:	4fb80000 	.word	0x4fb80000
 8004650:	47520000 	.word	0x47520000
 8004654:	36902000 	.word	0x36902000
 8004658:	25b00200 	.word	0x25b00200
 800465c:	21800100 	.word	0x21800100
 8004660:	1d500080 	.word	0x1d500080
 8004664:	19200040 	.word	0x19200040
 8004668:	40022100 	.word	0x40022100
 800466c:	40022300 	.word	0x40022300
 8004670:	58026300 	.word	0x58026300
 8004674:	58026000 	.word	0x58026000
 8004678:	cb840000 	.word	0xcb840000
 800467c:	24000000 	.word	0x24000000
 8004680:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a31      	ldr	r2, [pc, #196]	@ (8004750 <HAL_ADC_ConfigChannel+0x5c4>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d11e      	bne.n	80046cc <HAL_ADC_ConfigChannel+0x540>
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d119      	bne.n	80046cc <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a2d      	ldr	r2, [pc, #180]	@ (8004754 <HAL_ADC_ConfigChannel+0x5c8>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d14b      	bne.n	800473a <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a2c      	ldr	r2, [pc, #176]	@ (8004758 <HAL_ADC_ConfigChannel+0x5cc>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d004      	beq.n	80046b6 <HAL_ADC_ConfigChannel+0x52a>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a2a      	ldr	r2, [pc, #168]	@ (800475c <HAL_ADC_ConfigChannel+0x5d0>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d101      	bne.n	80046ba <HAL_ADC_ConfigChannel+0x52e>
 80046b6:	4a2a      	ldr	r2, [pc, #168]	@ (8004760 <HAL_ADC_ConfigChannel+0x5d4>)
 80046b8:	e000      	b.n	80046bc <HAL_ADC_ConfigChannel+0x530>
 80046ba:	4a2a      	ldr	r2, [pc, #168]	@ (8004764 <HAL_ADC_ConfigChannel+0x5d8>)
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80046c2:	4619      	mov	r1, r3
 80046c4:	4610      	mov	r0, r2
 80046c6:	f7fe fe70 	bl	80033aa <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80046ca:	e036      	b.n	800473a <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a25      	ldr	r2, [pc, #148]	@ (8004768 <HAL_ADC_ConfigChannel+0x5dc>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d131      	bne.n	800473a <HAL_ADC_ConfigChannel+0x5ae>
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d12c      	bne.n	800473a <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a1b      	ldr	r2, [pc, #108]	@ (8004754 <HAL_ADC_ConfigChannel+0x5c8>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d127      	bne.n	800473a <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a1a      	ldr	r2, [pc, #104]	@ (8004758 <HAL_ADC_ConfigChannel+0x5cc>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d004      	beq.n	80046fe <HAL_ADC_ConfigChannel+0x572>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a18      	ldr	r2, [pc, #96]	@ (800475c <HAL_ADC_ConfigChannel+0x5d0>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d101      	bne.n	8004702 <HAL_ADC_ConfigChannel+0x576>
 80046fe:	4a18      	ldr	r2, [pc, #96]	@ (8004760 <HAL_ADC_ConfigChannel+0x5d4>)
 8004700:	e000      	b.n	8004704 <HAL_ADC_ConfigChannel+0x578>
 8004702:	4a18      	ldr	r2, [pc, #96]	@ (8004764 <HAL_ADC_ConfigChannel+0x5d8>)
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800470a:	4619      	mov	r1, r3
 800470c:	4610      	mov	r0, r2
 800470e:	f7fe fe4c 	bl	80033aa <LL_ADC_SetCommonPathInternalCh>
 8004712:	e012      	b.n	800473a <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004718:	f043 0220 	orr.w	r2, r3, #32
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8004726:	e008      	b.n	800473a <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800472c:	f043 0220 	orr.w	r2, r3, #32
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004742:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8004746:	4618      	mov	r0, r3
 8004748:	3734      	adds	r7, #52	@ 0x34
 800474a:	46bd      	mov	sp, r7
 800474c:	bd90      	pop	{r4, r7, pc}
 800474e:	bf00      	nop
 8004750:	c7520000 	.word	0xc7520000
 8004754:	58026000 	.word	0x58026000
 8004758:	40022000 	.word	0x40022000
 800475c:	40022100 	.word	0x40022100
 8004760:	40022300 	.word	0x40022300
 8004764:	58026300 	.word	0x58026300
 8004768:	cfb80000 	.word	0xcfb80000

0800476c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4618      	mov	r0, r3
 800477a:	f7fe fff1 	bl	8003760 <LL_ADC_IsEnabled>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d16e      	bne.n	8004862 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	689a      	ldr	r2, [r3, #8]
 800478a:	4b38      	ldr	r3, [pc, #224]	@ (800486c <ADC_Enable+0x100>)
 800478c:	4013      	ands	r3, r2
 800478e:	2b00      	cmp	r3, #0
 8004790:	d00d      	beq.n	80047ae <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004796:	f043 0210 	orr.w	r2, r3, #16
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047a2:	f043 0201 	orr.w	r2, r3, #1
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e05a      	b.n	8004864 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7fe ffc0 	bl	8003738 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80047b8:	f7fe fdb6 	bl	8003328 <HAL_GetTick>
 80047bc:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a2b      	ldr	r2, [pc, #172]	@ (8004870 <ADC_Enable+0x104>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d004      	beq.n	80047d2 <ADC_Enable+0x66>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a29      	ldr	r2, [pc, #164]	@ (8004874 <ADC_Enable+0x108>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d101      	bne.n	80047d6 <ADC_Enable+0x6a>
 80047d2:	4b29      	ldr	r3, [pc, #164]	@ (8004878 <ADC_Enable+0x10c>)
 80047d4:	e000      	b.n	80047d8 <ADC_Enable+0x6c>
 80047d6:	4b29      	ldr	r3, [pc, #164]	@ (800487c <ADC_Enable+0x110>)
 80047d8:	4618      	mov	r0, r3
 80047da:	f7fe ff43 	bl	8003664 <LL_ADC_GetMultimode>
 80047de:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a23      	ldr	r2, [pc, #140]	@ (8004874 <ADC_Enable+0x108>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d002      	beq.n	80047f0 <ADC_Enable+0x84>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	e000      	b.n	80047f2 <ADC_Enable+0x86>
 80047f0:	4b1f      	ldr	r3, [pc, #124]	@ (8004870 <ADC_Enable+0x104>)
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	6812      	ldr	r2, [r2, #0]
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d02c      	beq.n	8004854 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d130      	bne.n	8004862 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004800:	e028      	b.n	8004854 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4618      	mov	r0, r3
 8004808:	f7fe ffaa 	bl	8003760 <LL_ADC_IsEnabled>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d104      	bne.n	800481c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4618      	mov	r0, r3
 8004818:	f7fe ff8e 	bl	8003738 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800481c:	f7fe fd84 	bl	8003328 <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	2b02      	cmp	r3, #2
 8004828:	d914      	bls.n	8004854 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0301 	and.w	r3, r3, #1
 8004834:	2b01      	cmp	r3, #1
 8004836:	d00d      	beq.n	8004854 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800483c:	f043 0210 	orr.w	r2, r3, #16
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004848:	f043 0201 	orr.w	r2, r3, #1
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e007      	b.n	8004864 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0301 	and.w	r3, r3, #1
 800485e:	2b01      	cmp	r3, #1
 8004860:	d1cf      	bne.n	8004802 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004862:	2300      	movs	r3, #0
}
 8004864:	4618      	mov	r0, r3
 8004866:	3710      	adds	r7, #16
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	8000003f 	.word	0x8000003f
 8004870:	40022000 	.word	0x40022000
 8004874:	40022100 	.word	0x40022100
 8004878:	40022300 	.word	0x40022300
 800487c:	58026300 	.word	0x58026300

08004880 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800488c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004892:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004896:	2b00      	cmp	r3, #0
 8004898:	d14b      	bne.n	8004932 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800489e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0308 	and.w	r3, r3, #8
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d021      	beq.n	80048f8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4618      	mov	r0, r3
 80048ba:	f7fe fe1e 	bl	80034fa <LL_ADC_REG_IsTriggerSourceSWStart>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d032      	beq.n	800492a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d12b      	bne.n	800492a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048d6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d11f      	bne.n	800492a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048ee:	f043 0201 	orr.w	r2, r3, #1
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	655a      	str	r2, [r3, #84]	@ 0x54
 80048f6:	e018      	b.n	800492a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	f003 0303 	and.w	r3, r3, #3
 8004902:	2b00      	cmp	r3, #0
 8004904:	d111      	bne.n	800492a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800490a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004916:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d105      	bne.n	800492a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004922:	f043 0201 	orr.w	r2, r3, #1
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800492a:	68f8      	ldr	r0, [r7, #12]
 800492c:	f7ff fc06 	bl	800413c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004930:	e00e      	b.n	8004950 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004936:	f003 0310 	and.w	r3, r3, #16
 800493a:	2b00      	cmp	r3, #0
 800493c:	d003      	beq.n	8004946 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800493e:	68f8      	ldr	r0, [r7, #12]
 8004940:	f7ff fc1a 	bl	8004178 <HAL_ADC_ErrorCallback>
}
 8004944:	e004      	b.n	8004950 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800494a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	4798      	blx	r3
}
 8004950:	bf00      	nop
 8004952:	3710      	adds	r7, #16
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}

08004958 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004964:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004966:	68f8      	ldr	r0, [r7, #12]
 8004968:	f7ff fbf2 	bl	8004150 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800496c:	bf00      	nop
 800496e:	3710      	adds	r7, #16
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004980:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004986:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004992:	f043 0204 	orr.w	r2, r3, #4
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800499a:	68f8      	ldr	r0, [r7, #12]
 800499c:	f7ff fbec 	bl	8004178 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80049a0:	bf00      	nop
 80049a2:	3710      	adds	r7, #16
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a7a      	ldr	r2, [pc, #488]	@ (8004ba0 <ADC_ConfigureBoostMode+0x1f8>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d004      	beq.n	80049c4 <ADC_ConfigureBoostMode+0x1c>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a79      	ldr	r2, [pc, #484]	@ (8004ba4 <ADC_ConfigureBoostMode+0x1fc>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d109      	bne.n	80049d8 <ADC_ConfigureBoostMode+0x30>
 80049c4:	4b78      	ldr	r3, [pc, #480]	@ (8004ba8 <ADC_ConfigureBoostMode+0x200>)
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	bf14      	ite	ne
 80049d0:	2301      	movne	r3, #1
 80049d2:	2300      	moveq	r3, #0
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	e008      	b.n	80049ea <ADC_ConfigureBoostMode+0x42>
 80049d8:	4b74      	ldr	r3, [pc, #464]	@ (8004bac <ADC_ConfigureBoostMode+0x204>)
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	bf14      	ite	ne
 80049e4:	2301      	movne	r3, #1
 80049e6:	2300      	moveq	r3, #0
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d01c      	beq.n	8004a28 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80049ee:	f004 fbe1 	bl	80091b4 <HAL_RCC_GetHCLKFreq>
 80049f2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80049fc:	d010      	beq.n	8004a20 <ADC_ConfigureBoostMode+0x78>
 80049fe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004a02:	d873      	bhi.n	8004aec <ADC_ConfigureBoostMode+0x144>
 8004a04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a08:	d002      	beq.n	8004a10 <ADC_ConfigureBoostMode+0x68>
 8004a0a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004a0e:	d16d      	bne.n	8004aec <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	0c1b      	lsrs	r3, r3, #16
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a1c:	60fb      	str	r3, [r7, #12]
        break;
 8004a1e:	e068      	b.n	8004af2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	089b      	lsrs	r3, r3, #2
 8004a24:	60fb      	str	r3, [r7, #12]
        break;
 8004a26:	e064      	b.n	8004af2 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004a28:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004a2c:	f04f 0100 	mov.w	r1, #0
 8004a30:	f005 fe26 	bl	800a680 <HAL_RCCEx_GetPeriphCLKFreq>
 8004a34:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004a3e:	d051      	beq.n	8004ae4 <ADC_ConfigureBoostMode+0x13c>
 8004a40:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004a44:	d854      	bhi.n	8004af0 <ADC_ConfigureBoostMode+0x148>
 8004a46:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004a4a:	d047      	beq.n	8004adc <ADC_ConfigureBoostMode+0x134>
 8004a4c:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004a50:	d84e      	bhi.n	8004af0 <ADC_ConfigureBoostMode+0x148>
 8004a52:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004a56:	d03d      	beq.n	8004ad4 <ADC_ConfigureBoostMode+0x12c>
 8004a58:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004a5c:	d848      	bhi.n	8004af0 <ADC_ConfigureBoostMode+0x148>
 8004a5e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a62:	d033      	beq.n	8004acc <ADC_ConfigureBoostMode+0x124>
 8004a64:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a68:	d842      	bhi.n	8004af0 <ADC_ConfigureBoostMode+0x148>
 8004a6a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004a6e:	d029      	beq.n	8004ac4 <ADC_ConfigureBoostMode+0x11c>
 8004a70:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004a74:	d83c      	bhi.n	8004af0 <ADC_ConfigureBoostMode+0x148>
 8004a76:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004a7a:	d01a      	beq.n	8004ab2 <ADC_ConfigureBoostMode+0x10a>
 8004a7c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004a80:	d836      	bhi.n	8004af0 <ADC_ConfigureBoostMode+0x148>
 8004a82:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004a86:	d014      	beq.n	8004ab2 <ADC_ConfigureBoostMode+0x10a>
 8004a88:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004a8c:	d830      	bhi.n	8004af0 <ADC_ConfigureBoostMode+0x148>
 8004a8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a92:	d00e      	beq.n	8004ab2 <ADC_ConfigureBoostMode+0x10a>
 8004a94:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a98:	d82a      	bhi.n	8004af0 <ADC_ConfigureBoostMode+0x148>
 8004a9a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004a9e:	d008      	beq.n	8004ab2 <ADC_ConfigureBoostMode+0x10a>
 8004aa0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004aa4:	d824      	bhi.n	8004af0 <ADC_ConfigureBoostMode+0x148>
 8004aa6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004aaa:	d002      	beq.n	8004ab2 <ADC_ConfigureBoostMode+0x10a>
 8004aac:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004ab0:	d11e      	bne.n	8004af0 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	0c9b      	lsrs	r3, r3, #18
 8004ab8:	005b      	lsls	r3, r3, #1
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac0:	60fb      	str	r3, [r7, #12]
        break;
 8004ac2:	e016      	b.n	8004af2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	091b      	lsrs	r3, r3, #4
 8004ac8:	60fb      	str	r3, [r7, #12]
        break;
 8004aca:	e012      	b.n	8004af2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	095b      	lsrs	r3, r3, #5
 8004ad0:	60fb      	str	r3, [r7, #12]
        break;
 8004ad2:	e00e      	b.n	8004af2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	099b      	lsrs	r3, r3, #6
 8004ad8:	60fb      	str	r3, [r7, #12]
        break;
 8004ada:	e00a      	b.n	8004af2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	09db      	lsrs	r3, r3, #7
 8004ae0:	60fb      	str	r3, [r7, #12]
        break;
 8004ae2:	e006      	b.n	8004af2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	0a1b      	lsrs	r3, r3, #8
 8004ae8:	60fb      	str	r3, [r7, #12]
        break;
 8004aea:	e002      	b.n	8004af2 <ADC_ConfigureBoostMode+0x14a>
        break;
 8004aec:	bf00      	nop
 8004aee:	e000      	b.n	8004af2 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004af0:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004af2:	f7fe fc25 	bl	8003340 <HAL_GetREVID>
 8004af6:	4603      	mov	r3, r0
 8004af8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d815      	bhi.n	8004b2c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	4a2b      	ldr	r2, [pc, #172]	@ (8004bb0 <ADC_ConfigureBoostMode+0x208>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d908      	bls.n	8004b1a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	689a      	ldr	r2, [r3, #8]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b16:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004b18:	e03e      	b.n	8004b98 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	689a      	ldr	r2, [r3, #8]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b28:	609a      	str	r2, [r3, #8]
}
 8004b2a:	e035      	b.n	8004b98 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	085b      	lsrs	r3, r3, #1
 8004b30:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	4a1f      	ldr	r2, [pc, #124]	@ (8004bb4 <ADC_ConfigureBoostMode+0x20c>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d808      	bhi.n	8004b4c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	689a      	ldr	r2, [r3, #8]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004b48:	609a      	str	r2, [r3, #8]
}
 8004b4a:	e025      	b.n	8004b98 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	4a1a      	ldr	r2, [pc, #104]	@ (8004bb8 <ADC_ConfigureBoostMode+0x210>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d80a      	bhi.n	8004b6a <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b66:	609a      	str	r2, [r3, #8]
}
 8004b68:	e016      	b.n	8004b98 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	4a13      	ldr	r2, [pc, #76]	@ (8004bbc <ADC_ConfigureBoostMode+0x214>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d80a      	bhi.n	8004b88 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b84:	609a      	str	r2, [r3, #8]
}
 8004b86:	e007      	b.n	8004b98 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	689a      	ldr	r2, [r3, #8]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004b96:	609a      	str	r2, [r3, #8]
}
 8004b98:	bf00      	nop
 8004b9a:	3710      	adds	r7, #16
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	40022000 	.word	0x40022000
 8004ba4:	40022100 	.word	0x40022100
 8004ba8:	40022300 	.word	0x40022300
 8004bac:	58026300 	.word	0x58026300
 8004bb0:	01312d00 	.word	0x01312d00
 8004bb4:	005f5e10 	.word	0x005f5e10
 8004bb8:	00bebc20 	.word	0x00bebc20
 8004bbc:	017d7840 	.word	0x017d7840

08004bc0 <LL_ADC_IsEnabled>:
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f003 0301 	and.w	r3, r3, #1
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d101      	bne.n	8004bd8 <LL_ADC_IsEnabled+0x18>
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e000      	b.n	8004bda <LL_ADC_IsEnabled+0x1a>
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	370c      	adds	r7, #12
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr

08004be6 <LL_ADC_REG_IsConversionOngoing>:
{
 8004be6:	b480      	push	{r7}
 8004be8:	b083      	sub	sp, #12
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f003 0304 	and.w	r3, r3, #4
 8004bf6:	2b04      	cmp	r3, #4
 8004bf8:	d101      	bne.n	8004bfe <LL_ADC_REG_IsConversionOngoing+0x18>
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e000      	b.n	8004c00 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004c14:	bf00      	nop
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr

08004c20 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004c28:	bf00      	nop
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004c3c:	bf00      	nop
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004c50:	bf00      	nop
 8004c52:	370c      	adds	r7, #12
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr

08004c5c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004c64:	bf00      	nop
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004c70:	b590      	push	{r4, r7, lr}
 8004c72:	b09f      	sub	sp, #124	@ 0x7c
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d101      	bne.n	8004c8e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004c8a:	2302      	movs	r3, #2
 8004c8c:	e0be      	b.n	8004e0c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2201      	movs	r2, #1
 8004c92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004c96:	2300      	movs	r3, #0
 8004c98:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a5c      	ldr	r2, [pc, #368]	@ (8004e14 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d102      	bne.n	8004cae <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004ca8:	4b5b      	ldr	r3, [pc, #364]	@ (8004e18 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004caa:	60bb      	str	r3, [r7, #8]
 8004cac:	e001      	b.n	8004cb2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004cae:	2300      	movs	r3, #0
 8004cb0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d10b      	bne.n	8004cd0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cbc:	f043 0220 	orr.w	r2, r3, #32
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e09d      	b.n	8004e0c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7ff ff87 	bl	8004be6 <LL_ADC_REG_IsConversionOngoing>
 8004cd8:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f7ff ff81 	bl	8004be6 <LL_ADC_REG_IsConversionOngoing>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d17f      	bne.n	8004dea <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004cea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d17c      	bne.n	8004dea <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a47      	ldr	r2, [pc, #284]	@ (8004e14 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d004      	beq.n	8004d04 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a46      	ldr	r2, [pc, #280]	@ (8004e18 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d101      	bne.n	8004d08 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004d04:	4b45      	ldr	r3, [pc, #276]	@ (8004e1c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004d06:	e000      	b.n	8004d0a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004d08:	4b45      	ldr	r3, [pc, #276]	@ (8004e20 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004d0a:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d039      	beq.n	8004d88 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004d14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	431a      	orrs	r2, r3
 8004d22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d24:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a3a      	ldr	r2, [pc, #232]	@ (8004e14 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d004      	beq.n	8004d3a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a38      	ldr	r2, [pc, #224]	@ (8004e18 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d10e      	bne.n	8004d58 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004d3a:	4836      	ldr	r0, [pc, #216]	@ (8004e14 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004d3c:	f7ff ff40 	bl	8004bc0 <LL_ADC_IsEnabled>
 8004d40:	4604      	mov	r4, r0
 8004d42:	4835      	ldr	r0, [pc, #212]	@ (8004e18 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004d44:	f7ff ff3c 	bl	8004bc0 <LL_ADC_IsEnabled>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	4323      	orrs	r3, r4
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	bf0c      	ite	eq
 8004d50:	2301      	moveq	r3, #1
 8004d52:	2300      	movne	r3, #0
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	e008      	b.n	8004d6a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004d58:	4832      	ldr	r0, [pc, #200]	@ (8004e24 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004d5a:	f7ff ff31 	bl	8004bc0 <LL_ADC_IsEnabled>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	bf0c      	ite	eq
 8004d64:	2301      	moveq	r3, #1
 8004d66:	2300      	movne	r3, #0
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d047      	beq.n	8004dfe <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004d6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d70:	689a      	ldr	r2, [r3, #8]
 8004d72:	4b2d      	ldr	r3, [pc, #180]	@ (8004e28 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004d74:	4013      	ands	r3, r2
 8004d76:	683a      	ldr	r2, [r7, #0]
 8004d78:	6811      	ldr	r1, [r2, #0]
 8004d7a:	683a      	ldr	r2, [r7, #0]
 8004d7c:	6892      	ldr	r2, [r2, #8]
 8004d7e:	430a      	orrs	r2, r1
 8004d80:	431a      	orrs	r2, r3
 8004d82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d84:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004d86:	e03a      	b.n	8004dfe <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004d88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004d90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d92:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a1e      	ldr	r2, [pc, #120]	@ (8004e14 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d004      	beq.n	8004da8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a1d      	ldr	r2, [pc, #116]	@ (8004e18 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d10e      	bne.n	8004dc6 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004da8:	481a      	ldr	r0, [pc, #104]	@ (8004e14 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004daa:	f7ff ff09 	bl	8004bc0 <LL_ADC_IsEnabled>
 8004dae:	4604      	mov	r4, r0
 8004db0:	4819      	ldr	r0, [pc, #100]	@ (8004e18 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004db2:	f7ff ff05 	bl	8004bc0 <LL_ADC_IsEnabled>
 8004db6:	4603      	mov	r3, r0
 8004db8:	4323      	orrs	r3, r4
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	bf0c      	ite	eq
 8004dbe:	2301      	moveq	r3, #1
 8004dc0:	2300      	movne	r3, #0
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	e008      	b.n	8004dd8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004dc6:	4817      	ldr	r0, [pc, #92]	@ (8004e24 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004dc8:	f7ff fefa 	bl	8004bc0 <LL_ADC_IsEnabled>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	bf0c      	ite	eq
 8004dd2:	2301      	moveq	r3, #1
 8004dd4:	2300      	movne	r3, #0
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d010      	beq.n	8004dfe <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004ddc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004dde:	689a      	ldr	r2, [r3, #8]
 8004de0:	4b11      	ldr	r3, [pc, #68]	@ (8004e28 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004de2:	4013      	ands	r3, r2
 8004de4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004de6:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004de8:	e009      	b.n	8004dfe <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dee:	f043 0220 	orr.w	r2, r3, #32
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8004dfc:	e000      	b.n	8004e00 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004dfe:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004e08:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	377c      	adds	r7, #124	@ 0x7c
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd90      	pop	{r4, r7, pc}
 8004e14:	40022000 	.word	0x40022000
 8004e18:	40022100 	.word	0x40022100
 8004e1c:	40022300 	.word	0x40022300
 8004e20:	58026300 	.word	0x58026300
 8004e24:	58026000 	.word	0x58026000
 8004e28:	fffff0e0 	.word	0xfffff0e0

08004e2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b085      	sub	sp, #20
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f003 0307 	and.w	r3, r3, #7
 8004e3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8004e6c <__NVIC_SetPriorityGrouping+0x40>)
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e42:	68ba      	ldr	r2, [r7, #8]
 8004e44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004e48:	4013      	ands	r3, r2
 8004e4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004e54:	4b06      	ldr	r3, [pc, #24]	@ (8004e70 <__NVIC_SetPriorityGrouping+0x44>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e5a:	4a04      	ldr	r2, [pc, #16]	@ (8004e6c <__NVIC_SetPriorityGrouping+0x40>)
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	60d3      	str	r3, [r2, #12]
}
 8004e60:	bf00      	nop
 8004e62:	3714      	adds	r7, #20
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr
 8004e6c:	e000ed00 	.word	0xe000ed00
 8004e70:	05fa0000 	.word	0x05fa0000

08004e74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e74:	b480      	push	{r7}
 8004e76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e78:	4b04      	ldr	r3, [pc, #16]	@ (8004e8c <__NVIC_GetPriorityGrouping+0x18>)
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	0a1b      	lsrs	r3, r3, #8
 8004e7e:	f003 0307 	and.w	r3, r3, #7
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr
 8004e8c:	e000ed00 	.word	0xe000ed00

08004e90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	4603      	mov	r3, r0
 8004e98:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004e9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	db0b      	blt.n	8004eba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ea2:	88fb      	ldrh	r3, [r7, #6]
 8004ea4:	f003 021f 	and.w	r2, r3, #31
 8004ea8:	4907      	ldr	r1, [pc, #28]	@ (8004ec8 <__NVIC_EnableIRQ+0x38>)
 8004eaa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004eae:	095b      	lsrs	r3, r3, #5
 8004eb0:	2001      	movs	r0, #1
 8004eb2:	fa00 f202 	lsl.w	r2, r0, r2
 8004eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004eba:	bf00      	nop
 8004ebc:	370c      	adds	r7, #12
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	e000e100 	.word	0xe000e100

08004ecc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	6039      	str	r1, [r7, #0]
 8004ed6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004ed8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	db0a      	blt.n	8004ef6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	b2da      	uxtb	r2, r3
 8004ee4:	490c      	ldr	r1, [pc, #48]	@ (8004f18 <__NVIC_SetPriority+0x4c>)
 8004ee6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004eea:	0112      	lsls	r2, r2, #4
 8004eec:	b2d2      	uxtb	r2, r2
 8004eee:	440b      	add	r3, r1
 8004ef0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ef4:	e00a      	b.n	8004f0c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	b2da      	uxtb	r2, r3
 8004efa:	4908      	ldr	r1, [pc, #32]	@ (8004f1c <__NVIC_SetPriority+0x50>)
 8004efc:	88fb      	ldrh	r3, [r7, #6]
 8004efe:	f003 030f 	and.w	r3, r3, #15
 8004f02:	3b04      	subs	r3, #4
 8004f04:	0112      	lsls	r2, r2, #4
 8004f06:	b2d2      	uxtb	r2, r2
 8004f08:	440b      	add	r3, r1
 8004f0a:	761a      	strb	r2, [r3, #24]
}
 8004f0c:	bf00      	nop
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr
 8004f18:	e000e100 	.word	0xe000e100
 8004f1c:	e000ed00 	.word	0xe000ed00

08004f20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b089      	sub	sp, #36	@ 0x24
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f003 0307 	and.w	r3, r3, #7
 8004f32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	f1c3 0307 	rsb	r3, r3, #7
 8004f3a:	2b04      	cmp	r3, #4
 8004f3c:	bf28      	it	cs
 8004f3e:	2304      	movcs	r3, #4
 8004f40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	3304      	adds	r3, #4
 8004f46:	2b06      	cmp	r3, #6
 8004f48:	d902      	bls.n	8004f50 <NVIC_EncodePriority+0x30>
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	3b03      	subs	r3, #3
 8004f4e:	e000      	b.n	8004f52 <NVIC_EncodePriority+0x32>
 8004f50:	2300      	movs	r3, #0
 8004f52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f54:	f04f 32ff 	mov.w	r2, #4294967295
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f5e:	43da      	mvns	r2, r3
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	401a      	ands	r2, r3
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f68:	f04f 31ff 	mov.w	r1, #4294967295
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f72:	43d9      	mvns	r1, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f78:	4313      	orrs	r3, r2
         );
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3724      	adds	r7, #36	@ 0x24
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
	...

08004f88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	3b01      	subs	r3, #1
 8004f94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004f98:	d301      	bcc.n	8004f9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e00f      	b.n	8004fbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f9e:	4a0a      	ldr	r2, [pc, #40]	@ (8004fc8 <SysTick_Config+0x40>)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	3b01      	subs	r3, #1
 8004fa4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004fa6:	210f      	movs	r1, #15
 8004fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8004fac:	f7ff ff8e 	bl	8004ecc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004fb0:	4b05      	ldr	r3, [pc, #20]	@ (8004fc8 <SysTick_Config+0x40>)
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004fb6:	4b04      	ldr	r3, [pc, #16]	@ (8004fc8 <SysTick_Config+0x40>)
 8004fb8:	2207      	movs	r2, #7
 8004fba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3708      	adds	r7, #8
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	e000e010 	.word	0xe000e010

08004fcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f7ff ff29 	bl	8004e2c <__NVIC_SetPriorityGrouping>
}
 8004fda:	bf00      	nop
 8004fdc:	3708      	adds	r7, #8
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}

08004fe2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fe2:	b580      	push	{r7, lr}
 8004fe4:	b086      	sub	sp, #24
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	4603      	mov	r3, r0
 8004fea:	60b9      	str	r1, [r7, #8]
 8004fec:	607a      	str	r2, [r7, #4]
 8004fee:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004ff0:	f7ff ff40 	bl	8004e74 <__NVIC_GetPriorityGrouping>
 8004ff4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	68b9      	ldr	r1, [r7, #8]
 8004ffa:	6978      	ldr	r0, [r7, #20]
 8004ffc:	f7ff ff90 	bl	8004f20 <NVIC_EncodePriority>
 8005000:	4602      	mov	r2, r0
 8005002:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005006:	4611      	mov	r1, r2
 8005008:	4618      	mov	r0, r3
 800500a:	f7ff ff5f 	bl	8004ecc <__NVIC_SetPriority>
}
 800500e:	bf00      	nop
 8005010:	3718      	adds	r7, #24
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}

08005016 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005016:	b580      	push	{r7, lr}
 8005018:	b082      	sub	sp, #8
 800501a:	af00      	add	r7, sp, #0
 800501c:	4603      	mov	r3, r0
 800501e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005020:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005024:	4618      	mov	r0, r3
 8005026:	f7ff ff33 	bl	8004e90 <__NVIC_EnableIRQ>
}
 800502a:	bf00      	nop
 800502c:	3708      	adds	r7, #8
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}

08005032 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005032:	b580      	push	{r7, lr}
 8005034:	b082      	sub	sp, #8
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f7ff ffa4 	bl	8004f88 <SysTick_Config>
 8005040:	4603      	mov	r3, r0
}
 8005042:	4618      	mov	r0, r3
 8005044:	3708      	adds	r7, #8
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
	...

0800504c <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 800504c:	b480      	push	{r7}
 800504e:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8005050:	4b06      	ldr	r3, [pc, #24]	@ (800506c <HAL_GetCurrentCPUID+0x20>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005058:	2b70      	cmp	r3, #112	@ 0x70
 800505a:	d101      	bne.n	8005060 <HAL_GetCurrentCPUID+0x14>
  {
    return  CM7_CPUID;
 800505c:	2303      	movs	r3, #3
 800505e:	e000      	b.n	8005062 <HAL_GetCurrentCPUID+0x16>
  }
  else
  {
    return CM4_CPUID;
 8005060:	2301      	movs	r3, #1
  }
}
 8005062:	4618      	mov	r0, r3
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr
 800506c:	e000ed00 	.word	0xe000ed00

08005070 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b086      	sub	sp, #24
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005078:	f7fe f956 	bl	8003328 <HAL_GetTick>
 800507c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d101      	bne.n	8005088 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e316      	b.n	80056b6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a66      	ldr	r2, [pc, #408]	@ (8005228 <HAL_DMA_Init+0x1b8>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d04a      	beq.n	8005128 <HAL_DMA_Init+0xb8>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a65      	ldr	r2, [pc, #404]	@ (800522c <HAL_DMA_Init+0x1bc>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d045      	beq.n	8005128 <HAL_DMA_Init+0xb8>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a63      	ldr	r2, [pc, #396]	@ (8005230 <HAL_DMA_Init+0x1c0>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d040      	beq.n	8005128 <HAL_DMA_Init+0xb8>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a62      	ldr	r2, [pc, #392]	@ (8005234 <HAL_DMA_Init+0x1c4>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d03b      	beq.n	8005128 <HAL_DMA_Init+0xb8>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a60      	ldr	r2, [pc, #384]	@ (8005238 <HAL_DMA_Init+0x1c8>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d036      	beq.n	8005128 <HAL_DMA_Init+0xb8>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a5f      	ldr	r2, [pc, #380]	@ (800523c <HAL_DMA_Init+0x1cc>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d031      	beq.n	8005128 <HAL_DMA_Init+0xb8>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a5d      	ldr	r2, [pc, #372]	@ (8005240 <HAL_DMA_Init+0x1d0>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d02c      	beq.n	8005128 <HAL_DMA_Init+0xb8>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a5c      	ldr	r2, [pc, #368]	@ (8005244 <HAL_DMA_Init+0x1d4>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d027      	beq.n	8005128 <HAL_DMA_Init+0xb8>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a5a      	ldr	r2, [pc, #360]	@ (8005248 <HAL_DMA_Init+0x1d8>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d022      	beq.n	8005128 <HAL_DMA_Init+0xb8>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a59      	ldr	r2, [pc, #356]	@ (800524c <HAL_DMA_Init+0x1dc>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d01d      	beq.n	8005128 <HAL_DMA_Init+0xb8>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a57      	ldr	r2, [pc, #348]	@ (8005250 <HAL_DMA_Init+0x1e0>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d018      	beq.n	8005128 <HAL_DMA_Init+0xb8>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a56      	ldr	r2, [pc, #344]	@ (8005254 <HAL_DMA_Init+0x1e4>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d013      	beq.n	8005128 <HAL_DMA_Init+0xb8>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a54      	ldr	r2, [pc, #336]	@ (8005258 <HAL_DMA_Init+0x1e8>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d00e      	beq.n	8005128 <HAL_DMA_Init+0xb8>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a53      	ldr	r2, [pc, #332]	@ (800525c <HAL_DMA_Init+0x1ec>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d009      	beq.n	8005128 <HAL_DMA_Init+0xb8>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a51      	ldr	r2, [pc, #324]	@ (8005260 <HAL_DMA_Init+0x1f0>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d004      	beq.n	8005128 <HAL_DMA_Init+0xb8>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a50      	ldr	r2, [pc, #320]	@ (8005264 <HAL_DMA_Init+0x1f4>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d101      	bne.n	800512c <HAL_DMA_Init+0xbc>
 8005128:	2301      	movs	r3, #1
 800512a:	e000      	b.n	800512e <HAL_DMA_Init+0xbe>
 800512c:	2300      	movs	r3, #0
 800512e:	2b00      	cmp	r3, #0
 8005130:	f000 813b 	beq.w	80053aa <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2202      	movs	r2, #2
 8005138:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a37      	ldr	r2, [pc, #220]	@ (8005228 <HAL_DMA_Init+0x1b8>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d04a      	beq.n	80051e4 <HAL_DMA_Init+0x174>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a36      	ldr	r2, [pc, #216]	@ (800522c <HAL_DMA_Init+0x1bc>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d045      	beq.n	80051e4 <HAL_DMA_Init+0x174>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a34      	ldr	r2, [pc, #208]	@ (8005230 <HAL_DMA_Init+0x1c0>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d040      	beq.n	80051e4 <HAL_DMA_Init+0x174>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a33      	ldr	r2, [pc, #204]	@ (8005234 <HAL_DMA_Init+0x1c4>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d03b      	beq.n	80051e4 <HAL_DMA_Init+0x174>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a31      	ldr	r2, [pc, #196]	@ (8005238 <HAL_DMA_Init+0x1c8>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d036      	beq.n	80051e4 <HAL_DMA_Init+0x174>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a30      	ldr	r2, [pc, #192]	@ (800523c <HAL_DMA_Init+0x1cc>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d031      	beq.n	80051e4 <HAL_DMA_Init+0x174>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a2e      	ldr	r2, [pc, #184]	@ (8005240 <HAL_DMA_Init+0x1d0>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d02c      	beq.n	80051e4 <HAL_DMA_Init+0x174>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a2d      	ldr	r2, [pc, #180]	@ (8005244 <HAL_DMA_Init+0x1d4>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d027      	beq.n	80051e4 <HAL_DMA_Init+0x174>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a2b      	ldr	r2, [pc, #172]	@ (8005248 <HAL_DMA_Init+0x1d8>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d022      	beq.n	80051e4 <HAL_DMA_Init+0x174>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a2a      	ldr	r2, [pc, #168]	@ (800524c <HAL_DMA_Init+0x1dc>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d01d      	beq.n	80051e4 <HAL_DMA_Init+0x174>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a28      	ldr	r2, [pc, #160]	@ (8005250 <HAL_DMA_Init+0x1e0>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d018      	beq.n	80051e4 <HAL_DMA_Init+0x174>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a27      	ldr	r2, [pc, #156]	@ (8005254 <HAL_DMA_Init+0x1e4>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d013      	beq.n	80051e4 <HAL_DMA_Init+0x174>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a25      	ldr	r2, [pc, #148]	@ (8005258 <HAL_DMA_Init+0x1e8>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d00e      	beq.n	80051e4 <HAL_DMA_Init+0x174>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a24      	ldr	r2, [pc, #144]	@ (800525c <HAL_DMA_Init+0x1ec>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d009      	beq.n	80051e4 <HAL_DMA_Init+0x174>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a22      	ldr	r2, [pc, #136]	@ (8005260 <HAL_DMA_Init+0x1f0>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d004      	beq.n	80051e4 <HAL_DMA_Init+0x174>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a21      	ldr	r2, [pc, #132]	@ (8005264 <HAL_DMA_Init+0x1f4>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d108      	bne.n	80051f6 <HAL_DMA_Init+0x186>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f022 0201 	bic.w	r2, r2, #1
 80051f2:	601a      	str	r2, [r3, #0]
 80051f4:	e007      	b.n	8005206 <HAL_DMA_Init+0x196>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f022 0201 	bic.w	r2, r2, #1
 8005204:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005206:	e02f      	b.n	8005268 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005208:	f7fe f88e 	bl	8003328 <HAL_GetTick>
 800520c:	4602      	mov	r2, r0
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	2b05      	cmp	r3, #5
 8005214:	d928      	bls.n	8005268 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2220      	movs	r2, #32
 800521a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2203      	movs	r2, #3
 8005220:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	e246      	b.n	80056b6 <HAL_DMA_Init+0x646>
 8005228:	40020010 	.word	0x40020010
 800522c:	40020028 	.word	0x40020028
 8005230:	40020040 	.word	0x40020040
 8005234:	40020058 	.word	0x40020058
 8005238:	40020070 	.word	0x40020070
 800523c:	40020088 	.word	0x40020088
 8005240:	400200a0 	.word	0x400200a0
 8005244:	400200b8 	.word	0x400200b8
 8005248:	40020410 	.word	0x40020410
 800524c:	40020428 	.word	0x40020428
 8005250:	40020440 	.word	0x40020440
 8005254:	40020458 	.word	0x40020458
 8005258:	40020470 	.word	0x40020470
 800525c:	40020488 	.word	0x40020488
 8005260:	400204a0 	.word	0x400204a0
 8005264:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0301 	and.w	r3, r3, #1
 8005272:	2b00      	cmp	r3, #0
 8005274:	d1c8      	bne.n	8005208 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800527e:	697a      	ldr	r2, [r7, #20]
 8005280:	4b83      	ldr	r3, [pc, #524]	@ (8005490 <HAL_DMA_Init+0x420>)
 8005282:	4013      	ands	r3, r2
 8005284:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800528e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800529a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	699b      	ldr	r3, [r3, #24]
 80052a0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052a6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6a1b      	ldr	r3, [r3, #32]
 80052ac:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80052ae:	697a      	ldr	r2, [r7, #20]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b8:	2b04      	cmp	r3, #4
 80052ba:	d107      	bne.n	80052cc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052c4:	4313      	orrs	r3, r2
 80052c6:	697a      	ldr	r2, [r7, #20]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80052cc:	4b71      	ldr	r3, [pc, #452]	@ (8005494 <HAL_DMA_Init+0x424>)
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	4b71      	ldr	r3, [pc, #452]	@ (8005498 <HAL_DMA_Init+0x428>)
 80052d2:	4013      	ands	r3, r2
 80052d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80052d8:	d328      	bcc.n	800532c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	2b28      	cmp	r3, #40	@ 0x28
 80052e0:	d903      	bls.n	80052ea <HAL_DMA_Init+0x27a>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	2b2e      	cmp	r3, #46	@ 0x2e
 80052e8:	d917      	bls.n	800531a <HAL_DMA_Init+0x2aa>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	2b3e      	cmp	r3, #62	@ 0x3e
 80052f0:	d903      	bls.n	80052fa <HAL_DMA_Init+0x28a>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	2b42      	cmp	r3, #66	@ 0x42
 80052f8:	d90f      	bls.n	800531a <HAL_DMA_Init+0x2aa>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	2b46      	cmp	r3, #70	@ 0x46
 8005300:	d903      	bls.n	800530a <HAL_DMA_Init+0x29a>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	2b48      	cmp	r3, #72	@ 0x48
 8005308:	d907      	bls.n	800531a <HAL_DMA_Init+0x2aa>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	2b4e      	cmp	r3, #78	@ 0x4e
 8005310:	d905      	bls.n	800531e <HAL_DMA_Init+0x2ae>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	2b52      	cmp	r3, #82	@ 0x52
 8005318:	d801      	bhi.n	800531e <HAL_DMA_Init+0x2ae>
 800531a:	2301      	movs	r3, #1
 800531c:	e000      	b.n	8005320 <HAL_DMA_Init+0x2b0>
 800531e:	2300      	movs	r3, #0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d003      	beq.n	800532c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800532a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	697a      	ldr	r2, [r7, #20]
 8005332:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	695b      	ldr	r3, [r3, #20]
 800533a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	f023 0307 	bic.w	r3, r3, #7
 8005342:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005348:	697a      	ldr	r2, [r7, #20]
 800534a:	4313      	orrs	r3, r2
 800534c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005352:	2b04      	cmp	r3, #4
 8005354:	d117      	bne.n	8005386 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800535a:	697a      	ldr	r2, [r7, #20]
 800535c:	4313      	orrs	r3, r2
 800535e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005364:	2b00      	cmp	r3, #0
 8005366:	d00e      	beq.n	8005386 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f002 fb33 	bl	80079d4 <DMA_CheckFifoParam>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d008      	beq.n	8005386 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2240      	movs	r2, #64	@ 0x40
 8005378:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2201      	movs	r2, #1
 800537e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e197      	b.n	80056b6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	697a      	ldr	r2, [r7, #20]
 800538c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f002 fa6e 	bl	8007870 <DMA_CalcBaseAndBitshift>
 8005394:	4603      	mov	r3, r0
 8005396:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800539c:	f003 031f 	and.w	r3, r3, #31
 80053a0:	223f      	movs	r2, #63	@ 0x3f
 80053a2:	409a      	lsls	r2, r3
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	609a      	str	r2, [r3, #8]
 80053a8:	e0cd      	b.n	8005546 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a3b      	ldr	r2, [pc, #236]	@ (800549c <HAL_DMA_Init+0x42c>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d022      	beq.n	80053fa <HAL_DMA_Init+0x38a>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a39      	ldr	r2, [pc, #228]	@ (80054a0 <HAL_DMA_Init+0x430>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d01d      	beq.n	80053fa <HAL_DMA_Init+0x38a>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a38      	ldr	r2, [pc, #224]	@ (80054a4 <HAL_DMA_Init+0x434>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d018      	beq.n	80053fa <HAL_DMA_Init+0x38a>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a36      	ldr	r2, [pc, #216]	@ (80054a8 <HAL_DMA_Init+0x438>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d013      	beq.n	80053fa <HAL_DMA_Init+0x38a>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a35      	ldr	r2, [pc, #212]	@ (80054ac <HAL_DMA_Init+0x43c>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d00e      	beq.n	80053fa <HAL_DMA_Init+0x38a>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a33      	ldr	r2, [pc, #204]	@ (80054b0 <HAL_DMA_Init+0x440>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d009      	beq.n	80053fa <HAL_DMA_Init+0x38a>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a32      	ldr	r2, [pc, #200]	@ (80054b4 <HAL_DMA_Init+0x444>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d004      	beq.n	80053fa <HAL_DMA_Init+0x38a>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a30      	ldr	r2, [pc, #192]	@ (80054b8 <HAL_DMA_Init+0x448>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d101      	bne.n	80053fe <HAL_DMA_Init+0x38e>
 80053fa:	2301      	movs	r3, #1
 80053fc:	e000      	b.n	8005400 <HAL_DMA_Init+0x390>
 80053fe:	2300      	movs	r3, #0
 8005400:	2b00      	cmp	r3, #0
 8005402:	f000 8097 	beq.w	8005534 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a24      	ldr	r2, [pc, #144]	@ (800549c <HAL_DMA_Init+0x42c>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d021      	beq.n	8005454 <HAL_DMA_Init+0x3e4>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a22      	ldr	r2, [pc, #136]	@ (80054a0 <HAL_DMA_Init+0x430>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d01c      	beq.n	8005454 <HAL_DMA_Init+0x3e4>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a21      	ldr	r2, [pc, #132]	@ (80054a4 <HAL_DMA_Init+0x434>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d017      	beq.n	8005454 <HAL_DMA_Init+0x3e4>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a1f      	ldr	r2, [pc, #124]	@ (80054a8 <HAL_DMA_Init+0x438>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d012      	beq.n	8005454 <HAL_DMA_Init+0x3e4>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a1e      	ldr	r2, [pc, #120]	@ (80054ac <HAL_DMA_Init+0x43c>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d00d      	beq.n	8005454 <HAL_DMA_Init+0x3e4>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a1c      	ldr	r2, [pc, #112]	@ (80054b0 <HAL_DMA_Init+0x440>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d008      	beq.n	8005454 <HAL_DMA_Init+0x3e4>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a1b      	ldr	r2, [pc, #108]	@ (80054b4 <HAL_DMA_Init+0x444>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d003      	beq.n	8005454 <HAL_DMA_Init+0x3e4>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a19      	ldr	r2, [pc, #100]	@ (80054b8 <HAL_DMA_Init+0x448>)
 8005452:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2202      	movs	r2, #2
 8005458:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800546c:	697a      	ldr	r2, [r7, #20]
 800546e:	4b13      	ldr	r3, [pc, #76]	@ (80054bc <HAL_DMA_Init+0x44c>)
 8005470:	4013      	ands	r3, r2
 8005472:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	2b40      	cmp	r3, #64	@ 0x40
 800547a:	d021      	beq.n	80054c0 <HAL_DMA_Init+0x450>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	2b80      	cmp	r3, #128	@ 0x80
 8005482:	d102      	bne.n	800548a <HAL_DMA_Init+0x41a>
 8005484:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005488:	e01b      	b.n	80054c2 <HAL_DMA_Init+0x452>
 800548a:	2300      	movs	r3, #0
 800548c:	e019      	b.n	80054c2 <HAL_DMA_Init+0x452>
 800548e:	bf00      	nop
 8005490:	fe10803f 	.word	0xfe10803f
 8005494:	5c001000 	.word	0x5c001000
 8005498:	ffff0000 	.word	0xffff0000
 800549c:	58025408 	.word	0x58025408
 80054a0:	5802541c 	.word	0x5802541c
 80054a4:	58025430 	.word	0x58025430
 80054a8:	58025444 	.word	0x58025444
 80054ac:	58025458 	.word	0x58025458
 80054b0:	5802546c 	.word	0x5802546c
 80054b4:	58025480 	.word	0x58025480
 80054b8:	58025494 	.word	0x58025494
 80054bc:	fffe000f 	.word	0xfffe000f
 80054c0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	68d2      	ldr	r2, [r2, #12]
 80054c6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80054c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80054d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	695b      	ldr	r3, [r3, #20]
 80054d6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80054d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	699b      	ldr	r3, [r3, #24]
 80054de:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80054e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	69db      	ldr	r3, [r3, #28]
 80054e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80054e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a1b      	ldr	r3, [r3, #32]
 80054ee:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80054f0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80054f2:	697a      	ldr	r2, [r7, #20]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	697a      	ldr	r2, [r7, #20]
 80054fe:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	461a      	mov	r2, r3
 8005506:	4b6e      	ldr	r3, [pc, #440]	@ (80056c0 <HAL_DMA_Init+0x650>)
 8005508:	4413      	add	r3, r2
 800550a:	4a6e      	ldr	r2, [pc, #440]	@ (80056c4 <HAL_DMA_Init+0x654>)
 800550c:	fba2 2303 	umull	r2, r3, r2, r3
 8005510:	091b      	lsrs	r3, r3, #4
 8005512:	009a      	lsls	r2, r3, #2
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f002 f9a9 	bl	8007870 <DMA_CalcBaseAndBitshift>
 800551e:	4603      	mov	r3, r0
 8005520:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005526:	f003 031f 	and.w	r3, r3, #31
 800552a:	2201      	movs	r2, #1
 800552c:	409a      	lsls	r2, r3
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	605a      	str	r2, [r3, #4]
 8005532:	e008      	b.n	8005546 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2240      	movs	r2, #64	@ 0x40
 8005538:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2203      	movs	r2, #3
 800553e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e0b7      	b.n	80056b6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a5f      	ldr	r2, [pc, #380]	@ (80056c8 <HAL_DMA_Init+0x658>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d072      	beq.n	8005636 <HAL_DMA_Init+0x5c6>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a5d      	ldr	r2, [pc, #372]	@ (80056cc <HAL_DMA_Init+0x65c>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d06d      	beq.n	8005636 <HAL_DMA_Init+0x5c6>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a5c      	ldr	r2, [pc, #368]	@ (80056d0 <HAL_DMA_Init+0x660>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d068      	beq.n	8005636 <HAL_DMA_Init+0x5c6>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a5a      	ldr	r2, [pc, #360]	@ (80056d4 <HAL_DMA_Init+0x664>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d063      	beq.n	8005636 <HAL_DMA_Init+0x5c6>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a59      	ldr	r2, [pc, #356]	@ (80056d8 <HAL_DMA_Init+0x668>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d05e      	beq.n	8005636 <HAL_DMA_Init+0x5c6>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a57      	ldr	r2, [pc, #348]	@ (80056dc <HAL_DMA_Init+0x66c>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d059      	beq.n	8005636 <HAL_DMA_Init+0x5c6>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a56      	ldr	r2, [pc, #344]	@ (80056e0 <HAL_DMA_Init+0x670>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d054      	beq.n	8005636 <HAL_DMA_Init+0x5c6>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a54      	ldr	r2, [pc, #336]	@ (80056e4 <HAL_DMA_Init+0x674>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d04f      	beq.n	8005636 <HAL_DMA_Init+0x5c6>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a53      	ldr	r2, [pc, #332]	@ (80056e8 <HAL_DMA_Init+0x678>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d04a      	beq.n	8005636 <HAL_DMA_Init+0x5c6>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a51      	ldr	r2, [pc, #324]	@ (80056ec <HAL_DMA_Init+0x67c>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d045      	beq.n	8005636 <HAL_DMA_Init+0x5c6>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a50      	ldr	r2, [pc, #320]	@ (80056f0 <HAL_DMA_Init+0x680>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d040      	beq.n	8005636 <HAL_DMA_Init+0x5c6>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a4e      	ldr	r2, [pc, #312]	@ (80056f4 <HAL_DMA_Init+0x684>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d03b      	beq.n	8005636 <HAL_DMA_Init+0x5c6>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a4d      	ldr	r2, [pc, #308]	@ (80056f8 <HAL_DMA_Init+0x688>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d036      	beq.n	8005636 <HAL_DMA_Init+0x5c6>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a4b      	ldr	r2, [pc, #300]	@ (80056fc <HAL_DMA_Init+0x68c>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d031      	beq.n	8005636 <HAL_DMA_Init+0x5c6>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a4a      	ldr	r2, [pc, #296]	@ (8005700 <HAL_DMA_Init+0x690>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d02c      	beq.n	8005636 <HAL_DMA_Init+0x5c6>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a48      	ldr	r2, [pc, #288]	@ (8005704 <HAL_DMA_Init+0x694>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d027      	beq.n	8005636 <HAL_DMA_Init+0x5c6>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a47      	ldr	r2, [pc, #284]	@ (8005708 <HAL_DMA_Init+0x698>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d022      	beq.n	8005636 <HAL_DMA_Init+0x5c6>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a45      	ldr	r2, [pc, #276]	@ (800570c <HAL_DMA_Init+0x69c>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d01d      	beq.n	8005636 <HAL_DMA_Init+0x5c6>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a44      	ldr	r2, [pc, #272]	@ (8005710 <HAL_DMA_Init+0x6a0>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d018      	beq.n	8005636 <HAL_DMA_Init+0x5c6>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a42      	ldr	r2, [pc, #264]	@ (8005714 <HAL_DMA_Init+0x6a4>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d013      	beq.n	8005636 <HAL_DMA_Init+0x5c6>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a41      	ldr	r2, [pc, #260]	@ (8005718 <HAL_DMA_Init+0x6a8>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d00e      	beq.n	8005636 <HAL_DMA_Init+0x5c6>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a3f      	ldr	r2, [pc, #252]	@ (800571c <HAL_DMA_Init+0x6ac>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d009      	beq.n	8005636 <HAL_DMA_Init+0x5c6>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a3e      	ldr	r2, [pc, #248]	@ (8005720 <HAL_DMA_Init+0x6b0>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d004      	beq.n	8005636 <HAL_DMA_Init+0x5c6>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a3c      	ldr	r2, [pc, #240]	@ (8005724 <HAL_DMA_Init+0x6b4>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d101      	bne.n	800563a <HAL_DMA_Init+0x5ca>
 8005636:	2301      	movs	r3, #1
 8005638:	e000      	b.n	800563c <HAL_DMA_Init+0x5cc>
 800563a:	2300      	movs	r3, #0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d032      	beq.n	80056a6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f002 fa43 	bl	8007acc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	2b80      	cmp	r3, #128	@ 0x80
 800564c:	d102      	bne.n	8005654 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	685a      	ldr	r2, [r3, #4]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800565c:	b2d2      	uxtb	r2, r2
 800565e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005668:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d010      	beq.n	8005694 <HAL_DMA_Init+0x624>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	2b08      	cmp	r3, #8
 8005678:	d80c      	bhi.n	8005694 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f002 fac0 	bl	8007c00 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005684:	2200      	movs	r2, #0
 8005686:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005690:	605a      	str	r2, [r3, #4]
 8005692:	e008      	b.n	80056a6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3718      	adds	r7, #24
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	a7fdabf8 	.word	0xa7fdabf8
 80056c4:	cccccccd 	.word	0xcccccccd
 80056c8:	40020010 	.word	0x40020010
 80056cc:	40020028 	.word	0x40020028
 80056d0:	40020040 	.word	0x40020040
 80056d4:	40020058 	.word	0x40020058
 80056d8:	40020070 	.word	0x40020070
 80056dc:	40020088 	.word	0x40020088
 80056e0:	400200a0 	.word	0x400200a0
 80056e4:	400200b8 	.word	0x400200b8
 80056e8:	40020410 	.word	0x40020410
 80056ec:	40020428 	.word	0x40020428
 80056f0:	40020440 	.word	0x40020440
 80056f4:	40020458 	.word	0x40020458
 80056f8:	40020470 	.word	0x40020470
 80056fc:	40020488 	.word	0x40020488
 8005700:	400204a0 	.word	0x400204a0
 8005704:	400204b8 	.word	0x400204b8
 8005708:	58025408 	.word	0x58025408
 800570c:	5802541c 	.word	0x5802541c
 8005710:	58025430 	.word	0x58025430
 8005714:	58025444 	.word	0x58025444
 8005718:	58025458 	.word	0x58025458
 800571c:	5802546c 	.word	0x5802546c
 8005720:	58025480 	.word	0x58025480
 8005724:	58025494 	.word	0x58025494

08005728 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b086      	sub	sp, #24
 800572c:	af00      	add	r7, sp, #0
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	60b9      	str	r1, [r7, #8]
 8005732:	607a      	str	r2, [r7, #4]
 8005734:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005736:	2300      	movs	r3, #0
 8005738:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d101      	bne.n	8005744 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e226      	b.n	8005b92 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800574a:	2b01      	cmp	r3, #1
 800574c:	d101      	bne.n	8005752 <HAL_DMA_Start_IT+0x2a>
 800574e:	2302      	movs	r3, #2
 8005750:	e21f      	b.n	8005b92 <HAL_DMA_Start_IT+0x46a>
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2201      	movs	r2, #1
 8005756:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005760:	b2db      	uxtb	r3, r3
 8005762:	2b01      	cmp	r3, #1
 8005764:	f040 820a 	bne.w	8005b7c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2202      	movs	r2, #2
 800576c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2200      	movs	r2, #0
 8005774:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a68      	ldr	r2, [pc, #416]	@ (800591c <HAL_DMA_Start_IT+0x1f4>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d04a      	beq.n	8005816 <HAL_DMA_Start_IT+0xee>
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a66      	ldr	r2, [pc, #408]	@ (8005920 <HAL_DMA_Start_IT+0x1f8>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d045      	beq.n	8005816 <HAL_DMA_Start_IT+0xee>
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a65      	ldr	r2, [pc, #404]	@ (8005924 <HAL_DMA_Start_IT+0x1fc>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d040      	beq.n	8005816 <HAL_DMA_Start_IT+0xee>
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a63      	ldr	r2, [pc, #396]	@ (8005928 <HAL_DMA_Start_IT+0x200>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d03b      	beq.n	8005816 <HAL_DMA_Start_IT+0xee>
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a62      	ldr	r2, [pc, #392]	@ (800592c <HAL_DMA_Start_IT+0x204>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d036      	beq.n	8005816 <HAL_DMA_Start_IT+0xee>
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a60      	ldr	r2, [pc, #384]	@ (8005930 <HAL_DMA_Start_IT+0x208>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d031      	beq.n	8005816 <HAL_DMA_Start_IT+0xee>
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a5f      	ldr	r2, [pc, #380]	@ (8005934 <HAL_DMA_Start_IT+0x20c>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d02c      	beq.n	8005816 <HAL_DMA_Start_IT+0xee>
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a5d      	ldr	r2, [pc, #372]	@ (8005938 <HAL_DMA_Start_IT+0x210>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d027      	beq.n	8005816 <HAL_DMA_Start_IT+0xee>
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a5c      	ldr	r2, [pc, #368]	@ (800593c <HAL_DMA_Start_IT+0x214>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d022      	beq.n	8005816 <HAL_DMA_Start_IT+0xee>
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a5a      	ldr	r2, [pc, #360]	@ (8005940 <HAL_DMA_Start_IT+0x218>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d01d      	beq.n	8005816 <HAL_DMA_Start_IT+0xee>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a59      	ldr	r2, [pc, #356]	@ (8005944 <HAL_DMA_Start_IT+0x21c>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d018      	beq.n	8005816 <HAL_DMA_Start_IT+0xee>
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a57      	ldr	r2, [pc, #348]	@ (8005948 <HAL_DMA_Start_IT+0x220>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d013      	beq.n	8005816 <HAL_DMA_Start_IT+0xee>
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a56      	ldr	r2, [pc, #344]	@ (800594c <HAL_DMA_Start_IT+0x224>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d00e      	beq.n	8005816 <HAL_DMA_Start_IT+0xee>
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a54      	ldr	r2, [pc, #336]	@ (8005950 <HAL_DMA_Start_IT+0x228>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d009      	beq.n	8005816 <HAL_DMA_Start_IT+0xee>
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a53      	ldr	r2, [pc, #332]	@ (8005954 <HAL_DMA_Start_IT+0x22c>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d004      	beq.n	8005816 <HAL_DMA_Start_IT+0xee>
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a51      	ldr	r2, [pc, #324]	@ (8005958 <HAL_DMA_Start_IT+0x230>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d108      	bne.n	8005828 <HAL_DMA_Start_IT+0x100>
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f022 0201 	bic.w	r2, r2, #1
 8005824:	601a      	str	r2, [r3, #0]
 8005826:	e007      	b.n	8005838 <HAL_DMA_Start_IT+0x110>
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f022 0201 	bic.w	r2, r2, #1
 8005836:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	68b9      	ldr	r1, [r7, #8]
 800583e:	68f8      	ldr	r0, [r7, #12]
 8005840:	f001 fe6a 	bl	8007518 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a34      	ldr	r2, [pc, #208]	@ (800591c <HAL_DMA_Start_IT+0x1f4>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d04a      	beq.n	80058e4 <HAL_DMA_Start_IT+0x1bc>
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a33      	ldr	r2, [pc, #204]	@ (8005920 <HAL_DMA_Start_IT+0x1f8>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d045      	beq.n	80058e4 <HAL_DMA_Start_IT+0x1bc>
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a31      	ldr	r2, [pc, #196]	@ (8005924 <HAL_DMA_Start_IT+0x1fc>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d040      	beq.n	80058e4 <HAL_DMA_Start_IT+0x1bc>
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a30      	ldr	r2, [pc, #192]	@ (8005928 <HAL_DMA_Start_IT+0x200>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d03b      	beq.n	80058e4 <HAL_DMA_Start_IT+0x1bc>
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a2e      	ldr	r2, [pc, #184]	@ (800592c <HAL_DMA_Start_IT+0x204>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d036      	beq.n	80058e4 <HAL_DMA_Start_IT+0x1bc>
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a2d      	ldr	r2, [pc, #180]	@ (8005930 <HAL_DMA_Start_IT+0x208>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d031      	beq.n	80058e4 <HAL_DMA_Start_IT+0x1bc>
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a2b      	ldr	r2, [pc, #172]	@ (8005934 <HAL_DMA_Start_IT+0x20c>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d02c      	beq.n	80058e4 <HAL_DMA_Start_IT+0x1bc>
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a2a      	ldr	r2, [pc, #168]	@ (8005938 <HAL_DMA_Start_IT+0x210>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d027      	beq.n	80058e4 <HAL_DMA_Start_IT+0x1bc>
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a28      	ldr	r2, [pc, #160]	@ (800593c <HAL_DMA_Start_IT+0x214>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d022      	beq.n	80058e4 <HAL_DMA_Start_IT+0x1bc>
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a27      	ldr	r2, [pc, #156]	@ (8005940 <HAL_DMA_Start_IT+0x218>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d01d      	beq.n	80058e4 <HAL_DMA_Start_IT+0x1bc>
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a25      	ldr	r2, [pc, #148]	@ (8005944 <HAL_DMA_Start_IT+0x21c>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d018      	beq.n	80058e4 <HAL_DMA_Start_IT+0x1bc>
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a24      	ldr	r2, [pc, #144]	@ (8005948 <HAL_DMA_Start_IT+0x220>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d013      	beq.n	80058e4 <HAL_DMA_Start_IT+0x1bc>
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a22      	ldr	r2, [pc, #136]	@ (800594c <HAL_DMA_Start_IT+0x224>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d00e      	beq.n	80058e4 <HAL_DMA_Start_IT+0x1bc>
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a21      	ldr	r2, [pc, #132]	@ (8005950 <HAL_DMA_Start_IT+0x228>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d009      	beq.n	80058e4 <HAL_DMA_Start_IT+0x1bc>
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a1f      	ldr	r2, [pc, #124]	@ (8005954 <HAL_DMA_Start_IT+0x22c>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d004      	beq.n	80058e4 <HAL_DMA_Start_IT+0x1bc>
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a1e      	ldr	r2, [pc, #120]	@ (8005958 <HAL_DMA_Start_IT+0x230>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d101      	bne.n	80058e8 <HAL_DMA_Start_IT+0x1c0>
 80058e4:	2301      	movs	r3, #1
 80058e6:	e000      	b.n	80058ea <HAL_DMA_Start_IT+0x1c2>
 80058e8:	2300      	movs	r3, #0
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d036      	beq.n	800595c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f023 021e 	bic.w	r2, r3, #30
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f042 0216 	orr.w	r2, r2, #22
 8005900:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005906:	2b00      	cmp	r3, #0
 8005908:	d03e      	beq.n	8005988 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f042 0208 	orr.w	r2, r2, #8
 8005918:	601a      	str	r2, [r3, #0]
 800591a:	e035      	b.n	8005988 <HAL_DMA_Start_IT+0x260>
 800591c:	40020010 	.word	0x40020010
 8005920:	40020028 	.word	0x40020028
 8005924:	40020040 	.word	0x40020040
 8005928:	40020058 	.word	0x40020058
 800592c:	40020070 	.word	0x40020070
 8005930:	40020088 	.word	0x40020088
 8005934:	400200a0 	.word	0x400200a0
 8005938:	400200b8 	.word	0x400200b8
 800593c:	40020410 	.word	0x40020410
 8005940:	40020428 	.word	0x40020428
 8005944:	40020440 	.word	0x40020440
 8005948:	40020458 	.word	0x40020458
 800594c:	40020470 	.word	0x40020470
 8005950:	40020488 	.word	0x40020488
 8005954:	400204a0 	.word	0x400204a0
 8005958:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f023 020e 	bic.w	r2, r3, #14
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f042 020a 	orr.w	r2, r2, #10
 800596e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005974:	2b00      	cmp	r3, #0
 8005976:	d007      	beq.n	8005988 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f042 0204 	orr.w	r2, r2, #4
 8005986:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a83      	ldr	r2, [pc, #524]	@ (8005b9c <HAL_DMA_Start_IT+0x474>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d072      	beq.n	8005a78 <HAL_DMA_Start_IT+0x350>
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a82      	ldr	r2, [pc, #520]	@ (8005ba0 <HAL_DMA_Start_IT+0x478>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d06d      	beq.n	8005a78 <HAL_DMA_Start_IT+0x350>
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a80      	ldr	r2, [pc, #512]	@ (8005ba4 <HAL_DMA_Start_IT+0x47c>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d068      	beq.n	8005a78 <HAL_DMA_Start_IT+0x350>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a7f      	ldr	r2, [pc, #508]	@ (8005ba8 <HAL_DMA_Start_IT+0x480>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d063      	beq.n	8005a78 <HAL_DMA_Start_IT+0x350>
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a7d      	ldr	r2, [pc, #500]	@ (8005bac <HAL_DMA_Start_IT+0x484>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d05e      	beq.n	8005a78 <HAL_DMA_Start_IT+0x350>
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a7c      	ldr	r2, [pc, #496]	@ (8005bb0 <HAL_DMA_Start_IT+0x488>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d059      	beq.n	8005a78 <HAL_DMA_Start_IT+0x350>
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a7a      	ldr	r2, [pc, #488]	@ (8005bb4 <HAL_DMA_Start_IT+0x48c>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d054      	beq.n	8005a78 <HAL_DMA_Start_IT+0x350>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a79      	ldr	r2, [pc, #484]	@ (8005bb8 <HAL_DMA_Start_IT+0x490>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d04f      	beq.n	8005a78 <HAL_DMA_Start_IT+0x350>
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a77      	ldr	r2, [pc, #476]	@ (8005bbc <HAL_DMA_Start_IT+0x494>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d04a      	beq.n	8005a78 <HAL_DMA_Start_IT+0x350>
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a76      	ldr	r2, [pc, #472]	@ (8005bc0 <HAL_DMA_Start_IT+0x498>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d045      	beq.n	8005a78 <HAL_DMA_Start_IT+0x350>
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a74      	ldr	r2, [pc, #464]	@ (8005bc4 <HAL_DMA_Start_IT+0x49c>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d040      	beq.n	8005a78 <HAL_DMA_Start_IT+0x350>
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a73      	ldr	r2, [pc, #460]	@ (8005bc8 <HAL_DMA_Start_IT+0x4a0>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d03b      	beq.n	8005a78 <HAL_DMA_Start_IT+0x350>
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a71      	ldr	r2, [pc, #452]	@ (8005bcc <HAL_DMA_Start_IT+0x4a4>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d036      	beq.n	8005a78 <HAL_DMA_Start_IT+0x350>
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a70      	ldr	r2, [pc, #448]	@ (8005bd0 <HAL_DMA_Start_IT+0x4a8>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d031      	beq.n	8005a78 <HAL_DMA_Start_IT+0x350>
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a6e      	ldr	r2, [pc, #440]	@ (8005bd4 <HAL_DMA_Start_IT+0x4ac>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d02c      	beq.n	8005a78 <HAL_DMA_Start_IT+0x350>
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a6d      	ldr	r2, [pc, #436]	@ (8005bd8 <HAL_DMA_Start_IT+0x4b0>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d027      	beq.n	8005a78 <HAL_DMA_Start_IT+0x350>
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a6b      	ldr	r2, [pc, #428]	@ (8005bdc <HAL_DMA_Start_IT+0x4b4>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d022      	beq.n	8005a78 <HAL_DMA_Start_IT+0x350>
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a6a      	ldr	r2, [pc, #424]	@ (8005be0 <HAL_DMA_Start_IT+0x4b8>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d01d      	beq.n	8005a78 <HAL_DMA_Start_IT+0x350>
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a68      	ldr	r2, [pc, #416]	@ (8005be4 <HAL_DMA_Start_IT+0x4bc>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d018      	beq.n	8005a78 <HAL_DMA_Start_IT+0x350>
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a67      	ldr	r2, [pc, #412]	@ (8005be8 <HAL_DMA_Start_IT+0x4c0>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d013      	beq.n	8005a78 <HAL_DMA_Start_IT+0x350>
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a65      	ldr	r2, [pc, #404]	@ (8005bec <HAL_DMA_Start_IT+0x4c4>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d00e      	beq.n	8005a78 <HAL_DMA_Start_IT+0x350>
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a64      	ldr	r2, [pc, #400]	@ (8005bf0 <HAL_DMA_Start_IT+0x4c8>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d009      	beq.n	8005a78 <HAL_DMA_Start_IT+0x350>
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a62      	ldr	r2, [pc, #392]	@ (8005bf4 <HAL_DMA_Start_IT+0x4cc>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d004      	beq.n	8005a78 <HAL_DMA_Start_IT+0x350>
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a61      	ldr	r2, [pc, #388]	@ (8005bf8 <HAL_DMA_Start_IT+0x4d0>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d101      	bne.n	8005a7c <HAL_DMA_Start_IT+0x354>
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e000      	b.n	8005a7e <HAL_DMA_Start_IT+0x356>
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d01a      	beq.n	8005ab8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d007      	beq.n	8005aa0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a9a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a9e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d007      	beq.n	8005ab8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ab2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005ab6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a37      	ldr	r2, [pc, #220]	@ (8005b9c <HAL_DMA_Start_IT+0x474>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d04a      	beq.n	8005b58 <HAL_DMA_Start_IT+0x430>
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a36      	ldr	r2, [pc, #216]	@ (8005ba0 <HAL_DMA_Start_IT+0x478>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d045      	beq.n	8005b58 <HAL_DMA_Start_IT+0x430>
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a34      	ldr	r2, [pc, #208]	@ (8005ba4 <HAL_DMA_Start_IT+0x47c>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d040      	beq.n	8005b58 <HAL_DMA_Start_IT+0x430>
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a33      	ldr	r2, [pc, #204]	@ (8005ba8 <HAL_DMA_Start_IT+0x480>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d03b      	beq.n	8005b58 <HAL_DMA_Start_IT+0x430>
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a31      	ldr	r2, [pc, #196]	@ (8005bac <HAL_DMA_Start_IT+0x484>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d036      	beq.n	8005b58 <HAL_DMA_Start_IT+0x430>
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a30      	ldr	r2, [pc, #192]	@ (8005bb0 <HAL_DMA_Start_IT+0x488>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d031      	beq.n	8005b58 <HAL_DMA_Start_IT+0x430>
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a2e      	ldr	r2, [pc, #184]	@ (8005bb4 <HAL_DMA_Start_IT+0x48c>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d02c      	beq.n	8005b58 <HAL_DMA_Start_IT+0x430>
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a2d      	ldr	r2, [pc, #180]	@ (8005bb8 <HAL_DMA_Start_IT+0x490>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d027      	beq.n	8005b58 <HAL_DMA_Start_IT+0x430>
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a2b      	ldr	r2, [pc, #172]	@ (8005bbc <HAL_DMA_Start_IT+0x494>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d022      	beq.n	8005b58 <HAL_DMA_Start_IT+0x430>
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a2a      	ldr	r2, [pc, #168]	@ (8005bc0 <HAL_DMA_Start_IT+0x498>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d01d      	beq.n	8005b58 <HAL_DMA_Start_IT+0x430>
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a28      	ldr	r2, [pc, #160]	@ (8005bc4 <HAL_DMA_Start_IT+0x49c>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d018      	beq.n	8005b58 <HAL_DMA_Start_IT+0x430>
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a27      	ldr	r2, [pc, #156]	@ (8005bc8 <HAL_DMA_Start_IT+0x4a0>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d013      	beq.n	8005b58 <HAL_DMA_Start_IT+0x430>
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a25      	ldr	r2, [pc, #148]	@ (8005bcc <HAL_DMA_Start_IT+0x4a4>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d00e      	beq.n	8005b58 <HAL_DMA_Start_IT+0x430>
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a24      	ldr	r2, [pc, #144]	@ (8005bd0 <HAL_DMA_Start_IT+0x4a8>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d009      	beq.n	8005b58 <HAL_DMA_Start_IT+0x430>
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a22      	ldr	r2, [pc, #136]	@ (8005bd4 <HAL_DMA_Start_IT+0x4ac>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d004      	beq.n	8005b58 <HAL_DMA_Start_IT+0x430>
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a21      	ldr	r2, [pc, #132]	@ (8005bd8 <HAL_DMA_Start_IT+0x4b0>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d108      	bne.n	8005b6a <HAL_DMA_Start_IT+0x442>
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f042 0201 	orr.w	r2, r2, #1
 8005b66:	601a      	str	r2, [r3, #0]
 8005b68:	e012      	b.n	8005b90 <HAL_DMA_Start_IT+0x468>
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f042 0201 	orr.w	r2, r2, #1
 8005b78:	601a      	str	r2, [r3, #0]
 8005b7a:	e009      	b.n	8005b90 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005b82:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005b90:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3718      	adds	r7, #24
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	40020010 	.word	0x40020010
 8005ba0:	40020028 	.word	0x40020028
 8005ba4:	40020040 	.word	0x40020040
 8005ba8:	40020058 	.word	0x40020058
 8005bac:	40020070 	.word	0x40020070
 8005bb0:	40020088 	.word	0x40020088
 8005bb4:	400200a0 	.word	0x400200a0
 8005bb8:	400200b8 	.word	0x400200b8
 8005bbc:	40020410 	.word	0x40020410
 8005bc0:	40020428 	.word	0x40020428
 8005bc4:	40020440 	.word	0x40020440
 8005bc8:	40020458 	.word	0x40020458
 8005bcc:	40020470 	.word	0x40020470
 8005bd0:	40020488 	.word	0x40020488
 8005bd4:	400204a0 	.word	0x400204a0
 8005bd8:	400204b8 	.word	0x400204b8
 8005bdc:	58025408 	.word	0x58025408
 8005be0:	5802541c 	.word	0x5802541c
 8005be4:	58025430 	.word	0x58025430
 8005be8:	58025444 	.word	0x58025444
 8005bec:	58025458 	.word	0x58025458
 8005bf0:	5802546c 	.word	0x5802546c
 8005bf4:	58025480 	.word	0x58025480
 8005bf8:	58025494 	.word	0x58025494

08005bfc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b086      	sub	sp, #24
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005c04:	f7fd fb90 	bl	8003328 <HAL_GetTick>
 8005c08:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d101      	bne.n	8005c14 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	e2dc      	b.n	80061ce <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	2b02      	cmp	r3, #2
 8005c1e:	d008      	beq.n	8005c32 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2280      	movs	r2, #128	@ 0x80
 8005c24:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e2cd      	b.n	80061ce <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a76      	ldr	r2, [pc, #472]	@ (8005e10 <HAL_DMA_Abort+0x214>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d04a      	beq.n	8005cd2 <HAL_DMA_Abort+0xd6>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a74      	ldr	r2, [pc, #464]	@ (8005e14 <HAL_DMA_Abort+0x218>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d045      	beq.n	8005cd2 <HAL_DMA_Abort+0xd6>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a73      	ldr	r2, [pc, #460]	@ (8005e18 <HAL_DMA_Abort+0x21c>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d040      	beq.n	8005cd2 <HAL_DMA_Abort+0xd6>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a71      	ldr	r2, [pc, #452]	@ (8005e1c <HAL_DMA_Abort+0x220>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d03b      	beq.n	8005cd2 <HAL_DMA_Abort+0xd6>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a70      	ldr	r2, [pc, #448]	@ (8005e20 <HAL_DMA_Abort+0x224>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d036      	beq.n	8005cd2 <HAL_DMA_Abort+0xd6>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a6e      	ldr	r2, [pc, #440]	@ (8005e24 <HAL_DMA_Abort+0x228>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d031      	beq.n	8005cd2 <HAL_DMA_Abort+0xd6>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a6d      	ldr	r2, [pc, #436]	@ (8005e28 <HAL_DMA_Abort+0x22c>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d02c      	beq.n	8005cd2 <HAL_DMA_Abort+0xd6>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a6b      	ldr	r2, [pc, #428]	@ (8005e2c <HAL_DMA_Abort+0x230>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d027      	beq.n	8005cd2 <HAL_DMA_Abort+0xd6>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a6a      	ldr	r2, [pc, #424]	@ (8005e30 <HAL_DMA_Abort+0x234>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d022      	beq.n	8005cd2 <HAL_DMA_Abort+0xd6>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a68      	ldr	r2, [pc, #416]	@ (8005e34 <HAL_DMA_Abort+0x238>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d01d      	beq.n	8005cd2 <HAL_DMA_Abort+0xd6>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a67      	ldr	r2, [pc, #412]	@ (8005e38 <HAL_DMA_Abort+0x23c>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d018      	beq.n	8005cd2 <HAL_DMA_Abort+0xd6>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a65      	ldr	r2, [pc, #404]	@ (8005e3c <HAL_DMA_Abort+0x240>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d013      	beq.n	8005cd2 <HAL_DMA_Abort+0xd6>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a64      	ldr	r2, [pc, #400]	@ (8005e40 <HAL_DMA_Abort+0x244>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d00e      	beq.n	8005cd2 <HAL_DMA_Abort+0xd6>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a62      	ldr	r2, [pc, #392]	@ (8005e44 <HAL_DMA_Abort+0x248>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d009      	beq.n	8005cd2 <HAL_DMA_Abort+0xd6>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a61      	ldr	r2, [pc, #388]	@ (8005e48 <HAL_DMA_Abort+0x24c>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d004      	beq.n	8005cd2 <HAL_DMA_Abort+0xd6>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a5f      	ldr	r2, [pc, #380]	@ (8005e4c <HAL_DMA_Abort+0x250>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d101      	bne.n	8005cd6 <HAL_DMA_Abort+0xda>
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e000      	b.n	8005cd8 <HAL_DMA_Abort+0xdc>
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d013      	beq.n	8005d04 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f022 021e 	bic.w	r2, r2, #30
 8005cea:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	695a      	ldr	r2, [r3, #20]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005cfa:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	617b      	str	r3, [r7, #20]
 8005d02:	e00a      	b.n	8005d1a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f022 020e 	bic.w	r2, r2, #14
 8005d12:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a3c      	ldr	r2, [pc, #240]	@ (8005e10 <HAL_DMA_Abort+0x214>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d072      	beq.n	8005e0a <HAL_DMA_Abort+0x20e>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a3a      	ldr	r2, [pc, #232]	@ (8005e14 <HAL_DMA_Abort+0x218>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d06d      	beq.n	8005e0a <HAL_DMA_Abort+0x20e>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a39      	ldr	r2, [pc, #228]	@ (8005e18 <HAL_DMA_Abort+0x21c>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d068      	beq.n	8005e0a <HAL_DMA_Abort+0x20e>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a37      	ldr	r2, [pc, #220]	@ (8005e1c <HAL_DMA_Abort+0x220>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d063      	beq.n	8005e0a <HAL_DMA_Abort+0x20e>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a36      	ldr	r2, [pc, #216]	@ (8005e20 <HAL_DMA_Abort+0x224>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d05e      	beq.n	8005e0a <HAL_DMA_Abort+0x20e>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a34      	ldr	r2, [pc, #208]	@ (8005e24 <HAL_DMA_Abort+0x228>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d059      	beq.n	8005e0a <HAL_DMA_Abort+0x20e>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a33      	ldr	r2, [pc, #204]	@ (8005e28 <HAL_DMA_Abort+0x22c>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d054      	beq.n	8005e0a <HAL_DMA_Abort+0x20e>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a31      	ldr	r2, [pc, #196]	@ (8005e2c <HAL_DMA_Abort+0x230>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d04f      	beq.n	8005e0a <HAL_DMA_Abort+0x20e>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a30      	ldr	r2, [pc, #192]	@ (8005e30 <HAL_DMA_Abort+0x234>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d04a      	beq.n	8005e0a <HAL_DMA_Abort+0x20e>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a2e      	ldr	r2, [pc, #184]	@ (8005e34 <HAL_DMA_Abort+0x238>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d045      	beq.n	8005e0a <HAL_DMA_Abort+0x20e>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a2d      	ldr	r2, [pc, #180]	@ (8005e38 <HAL_DMA_Abort+0x23c>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d040      	beq.n	8005e0a <HAL_DMA_Abort+0x20e>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a2b      	ldr	r2, [pc, #172]	@ (8005e3c <HAL_DMA_Abort+0x240>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d03b      	beq.n	8005e0a <HAL_DMA_Abort+0x20e>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a2a      	ldr	r2, [pc, #168]	@ (8005e40 <HAL_DMA_Abort+0x244>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d036      	beq.n	8005e0a <HAL_DMA_Abort+0x20e>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a28      	ldr	r2, [pc, #160]	@ (8005e44 <HAL_DMA_Abort+0x248>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d031      	beq.n	8005e0a <HAL_DMA_Abort+0x20e>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a27      	ldr	r2, [pc, #156]	@ (8005e48 <HAL_DMA_Abort+0x24c>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d02c      	beq.n	8005e0a <HAL_DMA_Abort+0x20e>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a25      	ldr	r2, [pc, #148]	@ (8005e4c <HAL_DMA_Abort+0x250>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d027      	beq.n	8005e0a <HAL_DMA_Abort+0x20e>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a24      	ldr	r2, [pc, #144]	@ (8005e50 <HAL_DMA_Abort+0x254>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d022      	beq.n	8005e0a <HAL_DMA_Abort+0x20e>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a22      	ldr	r2, [pc, #136]	@ (8005e54 <HAL_DMA_Abort+0x258>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d01d      	beq.n	8005e0a <HAL_DMA_Abort+0x20e>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a21      	ldr	r2, [pc, #132]	@ (8005e58 <HAL_DMA_Abort+0x25c>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d018      	beq.n	8005e0a <HAL_DMA_Abort+0x20e>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a1f      	ldr	r2, [pc, #124]	@ (8005e5c <HAL_DMA_Abort+0x260>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d013      	beq.n	8005e0a <HAL_DMA_Abort+0x20e>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a1e      	ldr	r2, [pc, #120]	@ (8005e60 <HAL_DMA_Abort+0x264>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d00e      	beq.n	8005e0a <HAL_DMA_Abort+0x20e>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a1c      	ldr	r2, [pc, #112]	@ (8005e64 <HAL_DMA_Abort+0x268>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d009      	beq.n	8005e0a <HAL_DMA_Abort+0x20e>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a1b      	ldr	r2, [pc, #108]	@ (8005e68 <HAL_DMA_Abort+0x26c>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d004      	beq.n	8005e0a <HAL_DMA_Abort+0x20e>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a19      	ldr	r2, [pc, #100]	@ (8005e6c <HAL_DMA_Abort+0x270>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d132      	bne.n	8005e70 <HAL_DMA_Abort+0x274>
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e031      	b.n	8005e72 <HAL_DMA_Abort+0x276>
 8005e0e:	bf00      	nop
 8005e10:	40020010 	.word	0x40020010
 8005e14:	40020028 	.word	0x40020028
 8005e18:	40020040 	.word	0x40020040
 8005e1c:	40020058 	.word	0x40020058
 8005e20:	40020070 	.word	0x40020070
 8005e24:	40020088 	.word	0x40020088
 8005e28:	400200a0 	.word	0x400200a0
 8005e2c:	400200b8 	.word	0x400200b8
 8005e30:	40020410 	.word	0x40020410
 8005e34:	40020428 	.word	0x40020428
 8005e38:	40020440 	.word	0x40020440
 8005e3c:	40020458 	.word	0x40020458
 8005e40:	40020470 	.word	0x40020470
 8005e44:	40020488 	.word	0x40020488
 8005e48:	400204a0 	.word	0x400204a0
 8005e4c:	400204b8 	.word	0x400204b8
 8005e50:	58025408 	.word	0x58025408
 8005e54:	5802541c 	.word	0x5802541c
 8005e58:	58025430 	.word	0x58025430
 8005e5c:	58025444 	.word	0x58025444
 8005e60:	58025458 	.word	0x58025458
 8005e64:	5802546c 	.word	0x5802546c
 8005e68:	58025480 	.word	0x58025480
 8005e6c:	58025494 	.word	0x58025494
 8005e70:	2300      	movs	r3, #0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d007      	beq.n	8005e86 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e80:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005e84:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a6d      	ldr	r2, [pc, #436]	@ (8006040 <HAL_DMA_Abort+0x444>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d04a      	beq.n	8005f26 <HAL_DMA_Abort+0x32a>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a6b      	ldr	r2, [pc, #428]	@ (8006044 <HAL_DMA_Abort+0x448>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d045      	beq.n	8005f26 <HAL_DMA_Abort+0x32a>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a6a      	ldr	r2, [pc, #424]	@ (8006048 <HAL_DMA_Abort+0x44c>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d040      	beq.n	8005f26 <HAL_DMA_Abort+0x32a>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a68      	ldr	r2, [pc, #416]	@ (800604c <HAL_DMA_Abort+0x450>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d03b      	beq.n	8005f26 <HAL_DMA_Abort+0x32a>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a67      	ldr	r2, [pc, #412]	@ (8006050 <HAL_DMA_Abort+0x454>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d036      	beq.n	8005f26 <HAL_DMA_Abort+0x32a>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a65      	ldr	r2, [pc, #404]	@ (8006054 <HAL_DMA_Abort+0x458>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d031      	beq.n	8005f26 <HAL_DMA_Abort+0x32a>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a64      	ldr	r2, [pc, #400]	@ (8006058 <HAL_DMA_Abort+0x45c>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d02c      	beq.n	8005f26 <HAL_DMA_Abort+0x32a>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a62      	ldr	r2, [pc, #392]	@ (800605c <HAL_DMA_Abort+0x460>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d027      	beq.n	8005f26 <HAL_DMA_Abort+0x32a>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a61      	ldr	r2, [pc, #388]	@ (8006060 <HAL_DMA_Abort+0x464>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d022      	beq.n	8005f26 <HAL_DMA_Abort+0x32a>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a5f      	ldr	r2, [pc, #380]	@ (8006064 <HAL_DMA_Abort+0x468>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d01d      	beq.n	8005f26 <HAL_DMA_Abort+0x32a>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a5e      	ldr	r2, [pc, #376]	@ (8006068 <HAL_DMA_Abort+0x46c>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d018      	beq.n	8005f26 <HAL_DMA_Abort+0x32a>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a5c      	ldr	r2, [pc, #368]	@ (800606c <HAL_DMA_Abort+0x470>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d013      	beq.n	8005f26 <HAL_DMA_Abort+0x32a>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a5b      	ldr	r2, [pc, #364]	@ (8006070 <HAL_DMA_Abort+0x474>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d00e      	beq.n	8005f26 <HAL_DMA_Abort+0x32a>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a59      	ldr	r2, [pc, #356]	@ (8006074 <HAL_DMA_Abort+0x478>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d009      	beq.n	8005f26 <HAL_DMA_Abort+0x32a>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a58      	ldr	r2, [pc, #352]	@ (8006078 <HAL_DMA_Abort+0x47c>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d004      	beq.n	8005f26 <HAL_DMA_Abort+0x32a>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a56      	ldr	r2, [pc, #344]	@ (800607c <HAL_DMA_Abort+0x480>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d108      	bne.n	8005f38 <HAL_DMA_Abort+0x33c>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f022 0201 	bic.w	r2, r2, #1
 8005f34:	601a      	str	r2, [r3, #0]
 8005f36:	e007      	b.n	8005f48 <HAL_DMA_Abort+0x34c>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f022 0201 	bic.w	r2, r2, #1
 8005f46:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005f48:	e013      	b.n	8005f72 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005f4a:	f7fd f9ed 	bl	8003328 <HAL_GetTick>
 8005f4e:	4602      	mov	r2, r0
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	1ad3      	subs	r3, r2, r3
 8005f54:	2b05      	cmp	r3, #5
 8005f56:	d90c      	bls.n	8005f72 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2220      	movs	r2, #32
 8005f5c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2203      	movs	r2, #3
 8005f62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e12d      	b.n	80061ce <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f003 0301 	and.w	r3, r3, #1
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d1e5      	bne.n	8005f4a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a2f      	ldr	r2, [pc, #188]	@ (8006040 <HAL_DMA_Abort+0x444>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d04a      	beq.n	800601e <HAL_DMA_Abort+0x422>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a2d      	ldr	r2, [pc, #180]	@ (8006044 <HAL_DMA_Abort+0x448>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d045      	beq.n	800601e <HAL_DMA_Abort+0x422>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a2c      	ldr	r2, [pc, #176]	@ (8006048 <HAL_DMA_Abort+0x44c>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d040      	beq.n	800601e <HAL_DMA_Abort+0x422>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a2a      	ldr	r2, [pc, #168]	@ (800604c <HAL_DMA_Abort+0x450>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d03b      	beq.n	800601e <HAL_DMA_Abort+0x422>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a29      	ldr	r2, [pc, #164]	@ (8006050 <HAL_DMA_Abort+0x454>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d036      	beq.n	800601e <HAL_DMA_Abort+0x422>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a27      	ldr	r2, [pc, #156]	@ (8006054 <HAL_DMA_Abort+0x458>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d031      	beq.n	800601e <HAL_DMA_Abort+0x422>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a26      	ldr	r2, [pc, #152]	@ (8006058 <HAL_DMA_Abort+0x45c>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d02c      	beq.n	800601e <HAL_DMA_Abort+0x422>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a24      	ldr	r2, [pc, #144]	@ (800605c <HAL_DMA_Abort+0x460>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d027      	beq.n	800601e <HAL_DMA_Abort+0x422>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a23      	ldr	r2, [pc, #140]	@ (8006060 <HAL_DMA_Abort+0x464>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d022      	beq.n	800601e <HAL_DMA_Abort+0x422>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a21      	ldr	r2, [pc, #132]	@ (8006064 <HAL_DMA_Abort+0x468>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d01d      	beq.n	800601e <HAL_DMA_Abort+0x422>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a20      	ldr	r2, [pc, #128]	@ (8006068 <HAL_DMA_Abort+0x46c>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d018      	beq.n	800601e <HAL_DMA_Abort+0x422>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a1e      	ldr	r2, [pc, #120]	@ (800606c <HAL_DMA_Abort+0x470>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d013      	beq.n	800601e <HAL_DMA_Abort+0x422>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a1d      	ldr	r2, [pc, #116]	@ (8006070 <HAL_DMA_Abort+0x474>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d00e      	beq.n	800601e <HAL_DMA_Abort+0x422>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a1b      	ldr	r2, [pc, #108]	@ (8006074 <HAL_DMA_Abort+0x478>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d009      	beq.n	800601e <HAL_DMA_Abort+0x422>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a1a      	ldr	r2, [pc, #104]	@ (8006078 <HAL_DMA_Abort+0x47c>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d004      	beq.n	800601e <HAL_DMA_Abort+0x422>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a18      	ldr	r2, [pc, #96]	@ (800607c <HAL_DMA_Abort+0x480>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d101      	bne.n	8006022 <HAL_DMA_Abort+0x426>
 800601e:	2301      	movs	r3, #1
 8006020:	e000      	b.n	8006024 <HAL_DMA_Abort+0x428>
 8006022:	2300      	movs	r3, #0
 8006024:	2b00      	cmp	r3, #0
 8006026:	d02b      	beq.n	8006080 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800602c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006032:	f003 031f 	and.w	r3, r3, #31
 8006036:	223f      	movs	r2, #63	@ 0x3f
 8006038:	409a      	lsls	r2, r3
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	609a      	str	r2, [r3, #8]
 800603e:	e02a      	b.n	8006096 <HAL_DMA_Abort+0x49a>
 8006040:	40020010 	.word	0x40020010
 8006044:	40020028 	.word	0x40020028
 8006048:	40020040 	.word	0x40020040
 800604c:	40020058 	.word	0x40020058
 8006050:	40020070 	.word	0x40020070
 8006054:	40020088 	.word	0x40020088
 8006058:	400200a0 	.word	0x400200a0
 800605c:	400200b8 	.word	0x400200b8
 8006060:	40020410 	.word	0x40020410
 8006064:	40020428 	.word	0x40020428
 8006068:	40020440 	.word	0x40020440
 800606c:	40020458 	.word	0x40020458
 8006070:	40020470 	.word	0x40020470
 8006074:	40020488 	.word	0x40020488
 8006078:	400204a0 	.word	0x400204a0
 800607c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006084:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800608a:	f003 031f 	and.w	r3, r3, #31
 800608e:	2201      	movs	r2, #1
 8006090:	409a      	lsls	r2, r3
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a4f      	ldr	r2, [pc, #316]	@ (80061d8 <HAL_DMA_Abort+0x5dc>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d072      	beq.n	8006186 <HAL_DMA_Abort+0x58a>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a4d      	ldr	r2, [pc, #308]	@ (80061dc <HAL_DMA_Abort+0x5e0>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d06d      	beq.n	8006186 <HAL_DMA_Abort+0x58a>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a4c      	ldr	r2, [pc, #304]	@ (80061e0 <HAL_DMA_Abort+0x5e4>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d068      	beq.n	8006186 <HAL_DMA_Abort+0x58a>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a4a      	ldr	r2, [pc, #296]	@ (80061e4 <HAL_DMA_Abort+0x5e8>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d063      	beq.n	8006186 <HAL_DMA_Abort+0x58a>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a49      	ldr	r2, [pc, #292]	@ (80061e8 <HAL_DMA_Abort+0x5ec>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d05e      	beq.n	8006186 <HAL_DMA_Abort+0x58a>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a47      	ldr	r2, [pc, #284]	@ (80061ec <HAL_DMA_Abort+0x5f0>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d059      	beq.n	8006186 <HAL_DMA_Abort+0x58a>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a46      	ldr	r2, [pc, #280]	@ (80061f0 <HAL_DMA_Abort+0x5f4>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d054      	beq.n	8006186 <HAL_DMA_Abort+0x58a>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a44      	ldr	r2, [pc, #272]	@ (80061f4 <HAL_DMA_Abort+0x5f8>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d04f      	beq.n	8006186 <HAL_DMA_Abort+0x58a>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a43      	ldr	r2, [pc, #268]	@ (80061f8 <HAL_DMA_Abort+0x5fc>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d04a      	beq.n	8006186 <HAL_DMA_Abort+0x58a>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a41      	ldr	r2, [pc, #260]	@ (80061fc <HAL_DMA_Abort+0x600>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d045      	beq.n	8006186 <HAL_DMA_Abort+0x58a>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a40      	ldr	r2, [pc, #256]	@ (8006200 <HAL_DMA_Abort+0x604>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d040      	beq.n	8006186 <HAL_DMA_Abort+0x58a>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a3e      	ldr	r2, [pc, #248]	@ (8006204 <HAL_DMA_Abort+0x608>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d03b      	beq.n	8006186 <HAL_DMA_Abort+0x58a>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a3d      	ldr	r2, [pc, #244]	@ (8006208 <HAL_DMA_Abort+0x60c>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d036      	beq.n	8006186 <HAL_DMA_Abort+0x58a>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a3b      	ldr	r2, [pc, #236]	@ (800620c <HAL_DMA_Abort+0x610>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d031      	beq.n	8006186 <HAL_DMA_Abort+0x58a>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a3a      	ldr	r2, [pc, #232]	@ (8006210 <HAL_DMA_Abort+0x614>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d02c      	beq.n	8006186 <HAL_DMA_Abort+0x58a>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a38      	ldr	r2, [pc, #224]	@ (8006214 <HAL_DMA_Abort+0x618>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d027      	beq.n	8006186 <HAL_DMA_Abort+0x58a>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a37      	ldr	r2, [pc, #220]	@ (8006218 <HAL_DMA_Abort+0x61c>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d022      	beq.n	8006186 <HAL_DMA_Abort+0x58a>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a35      	ldr	r2, [pc, #212]	@ (800621c <HAL_DMA_Abort+0x620>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d01d      	beq.n	8006186 <HAL_DMA_Abort+0x58a>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a34      	ldr	r2, [pc, #208]	@ (8006220 <HAL_DMA_Abort+0x624>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d018      	beq.n	8006186 <HAL_DMA_Abort+0x58a>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a32      	ldr	r2, [pc, #200]	@ (8006224 <HAL_DMA_Abort+0x628>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d013      	beq.n	8006186 <HAL_DMA_Abort+0x58a>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a31      	ldr	r2, [pc, #196]	@ (8006228 <HAL_DMA_Abort+0x62c>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d00e      	beq.n	8006186 <HAL_DMA_Abort+0x58a>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a2f      	ldr	r2, [pc, #188]	@ (800622c <HAL_DMA_Abort+0x630>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d009      	beq.n	8006186 <HAL_DMA_Abort+0x58a>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a2e      	ldr	r2, [pc, #184]	@ (8006230 <HAL_DMA_Abort+0x634>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d004      	beq.n	8006186 <HAL_DMA_Abort+0x58a>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a2c      	ldr	r2, [pc, #176]	@ (8006234 <HAL_DMA_Abort+0x638>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d101      	bne.n	800618a <HAL_DMA_Abort+0x58e>
 8006186:	2301      	movs	r3, #1
 8006188:	e000      	b.n	800618c <HAL_DMA_Abort+0x590>
 800618a:	2300      	movs	r3, #0
 800618c:	2b00      	cmp	r3, #0
 800618e:	d015      	beq.n	80061bc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006198:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d00c      	beq.n	80061bc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80061ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80061b0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80061ba:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80061cc:	2300      	movs	r3, #0
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3718      	adds	r7, #24
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}
 80061d6:	bf00      	nop
 80061d8:	40020010 	.word	0x40020010
 80061dc:	40020028 	.word	0x40020028
 80061e0:	40020040 	.word	0x40020040
 80061e4:	40020058 	.word	0x40020058
 80061e8:	40020070 	.word	0x40020070
 80061ec:	40020088 	.word	0x40020088
 80061f0:	400200a0 	.word	0x400200a0
 80061f4:	400200b8 	.word	0x400200b8
 80061f8:	40020410 	.word	0x40020410
 80061fc:	40020428 	.word	0x40020428
 8006200:	40020440 	.word	0x40020440
 8006204:	40020458 	.word	0x40020458
 8006208:	40020470 	.word	0x40020470
 800620c:	40020488 	.word	0x40020488
 8006210:	400204a0 	.word	0x400204a0
 8006214:	400204b8 	.word	0x400204b8
 8006218:	58025408 	.word	0x58025408
 800621c:	5802541c 	.word	0x5802541c
 8006220:	58025430 	.word	0x58025430
 8006224:	58025444 	.word	0x58025444
 8006228:	58025458 	.word	0x58025458
 800622c:	5802546c 	.word	0x5802546c
 8006230:	58025480 	.word	0x58025480
 8006234:	58025494 	.word	0x58025494

08006238 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b084      	sub	sp, #16
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d101      	bne.n	800624a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	e237      	b.n	80066ba <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006250:	b2db      	uxtb	r3, r3
 8006252:	2b02      	cmp	r3, #2
 8006254:	d004      	beq.n	8006260 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2280      	movs	r2, #128	@ 0x80
 800625a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	e22c      	b.n	80066ba <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a5c      	ldr	r2, [pc, #368]	@ (80063d8 <HAL_DMA_Abort_IT+0x1a0>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d04a      	beq.n	8006300 <HAL_DMA_Abort_IT+0xc8>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a5b      	ldr	r2, [pc, #364]	@ (80063dc <HAL_DMA_Abort_IT+0x1a4>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d045      	beq.n	8006300 <HAL_DMA_Abort_IT+0xc8>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a59      	ldr	r2, [pc, #356]	@ (80063e0 <HAL_DMA_Abort_IT+0x1a8>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d040      	beq.n	8006300 <HAL_DMA_Abort_IT+0xc8>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a58      	ldr	r2, [pc, #352]	@ (80063e4 <HAL_DMA_Abort_IT+0x1ac>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d03b      	beq.n	8006300 <HAL_DMA_Abort_IT+0xc8>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a56      	ldr	r2, [pc, #344]	@ (80063e8 <HAL_DMA_Abort_IT+0x1b0>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d036      	beq.n	8006300 <HAL_DMA_Abort_IT+0xc8>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a55      	ldr	r2, [pc, #340]	@ (80063ec <HAL_DMA_Abort_IT+0x1b4>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d031      	beq.n	8006300 <HAL_DMA_Abort_IT+0xc8>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a53      	ldr	r2, [pc, #332]	@ (80063f0 <HAL_DMA_Abort_IT+0x1b8>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d02c      	beq.n	8006300 <HAL_DMA_Abort_IT+0xc8>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a52      	ldr	r2, [pc, #328]	@ (80063f4 <HAL_DMA_Abort_IT+0x1bc>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d027      	beq.n	8006300 <HAL_DMA_Abort_IT+0xc8>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a50      	ldr	r2, [pc, #320]	@ (80063f8 <HAL_DMA_Abort_IT+0x1c0>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d022      	beq.n	8006300 <HAL_DMA_Abort_IT+0xc8>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a4f      	ldr	r2, [pc, #316]	@ (80063fc <HAL_DMA_Abort_IT+0x1c4>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d01d      	beq.n	8006300 <HAL_DMA_Abort_IT+0xc8>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a4d      	ldr	r2, [pc, #308]	@ (8006400 <HAL_DMA_Abort_IT+0x1c8>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d018      	beq.n	8006300 <HAL_DMA_Abort_IT+0xc8>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a4c      	ldr	r2, [pc, #304]	@ (8006404 <HAL_DMA_Abort_IT+0x1cc>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d013      	beq.n	8006300 <HAL_DMA_Abort_IT+0xc8>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a4a      	ldr	r2, [pc, #296]	@ (8006408 <HAL_DMA_Abort_IT+0x1d0>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d00e      	beq.n	8006300 <HAL_DMA_Abort_IT+0xc8>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a49      	ldr	r2, [pc, #292]	@ (800640c <HAL_DMA_Abort_IT+0x1d4>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d009      	beq.n	8006300 <HAL_DMA_Abort_IT+0xc8>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a47      	ldr	r2, [pc, #284]	@ (8006410 <HAL_DMA_Abort_IT+0x1d8>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d004      	beq.n	8006300 <HAL_DMA_Abort_IT+0xc8>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a46      	ldr	r2, [pc, #280]	@ (8006414 <HAL_DMA_Abort_IT+0x1dc>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d101      	bne.n	8006304 <HAL_DMA_Abort_IT+0xcc>
 8006300:	2301      	movs	r3, #1
 8006302:	e000      	b.n	8006306 <HAL_DMA_Abort_IT+0xce>
 8006304:	2300      	movs	r3, #0
 8006306:	2b00      	cmp	r3, #0
 8006308:	f000 8086 	beq.w	8006418 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2204      	movs	r2, #4
 8006310:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a2f      	ldr	r2, [pc, #188]	@ (80063d8 <HAL_DMA_Abort_IT+0x1a0>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d04a      	beq.n	80063b4 <HAL_DMA_Abort_IT+0x17c>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a2e      	ldr	r2, [pc, #184]	@ (80063dc <HAL_DMA_Abort_IT+0x1a4>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d045      	beq.n	80063b4 <HAL_DMA_Abort_IT+0x17c>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a2c      	ldr	r2, [pc, #176]	@ (80063e0 <HAL_DMA_Abort_IT+0x1a8>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d040      	beq.n	80063b4 <HAL_DMA_Abort_IT+0x17c>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a2b      	ldr	r2, [pc, #172]	@ (80063e4 <HAL_DMA_Abort_IT+0x1ac>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d03b      	beq.n	80063b4 <HAL_DMA_Abort_IT+0x17c>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a29      	ldr	r2, [pc, #164]	@ (80063e8 <HAL_DMA_Abort_IT+0x1b0>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d036      	beq.n	80063b4 <HAL_DMA_Abort_IT+0x17c>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a28      	ldr	r2, [pc, #160]	@ (80063ec <HAL_DMA_Abort_IT+0x1b4>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d031      	beq.n	80063b4 <HAL_DMA_Abort_IT+0x17c>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a26      	ldr	r2, [pc, #152]	@ (80063f0 <HAL_DMA_Abort_IT+0x1b8>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d02c      	beq.n	80063b4 <HAL_DMA_Abort_IT+0x17c>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a25      	ldr	r2, [pc, #148]	@ (80063f4 <HAL_DMA_Abort_IT+0x1bc>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d027      	beq.n	80063b4 <HAL_DMA_Abort_IT+0x17c>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a23      	ldr	r2, [pc, #140]	@ (80063f8 <HAL_DMA_Abort_IT+0x1c0>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d022      	beq.n	80063b4 <HAL_DMA_Abort_IT+0x17c>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a22      	ldr	r2, [pc, #136]	@ (80063fc <HAL_DMA_Abort_IT+0x1c4>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d01d      	beq.n	80063b4 <HAL_DMA_Abort_IT+0x17c>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a20      	ldr	r2, [pc, #128]	@ (8006400 <HAL_DMA_Abort_IT+0x1c8>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d018      	beq.n	80063b4 <HAL_DMA_Abort_IT+0x17c>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a1f      	ldr	r2, [pc, #124]	@ (8006404 <HAL_DMA_Abort_IT+0x1cc>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d013      	beq.n	80063b4 <HAL_DMA_Abort_IT+0x17c>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a1d      	ldr	r2, [pc, #116]	@ (8006408 <HAL_DMA_Abort_IT+0x1d0>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d00e      	beq.n	80063b4 <HAL_DMA_Abort_IT+0x17c>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a1c      	ldr	r2, [pc, #112]	@ (800640c <HAL_DMA_Abort_IT+0x1d4>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d009      	beq.n	80063b4 <HAL_DMA_Abort_IT+0x17c>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a1a      	ldr	r2, [pc, #104]	@ (8006410 <HAL_DMA_Abort_IT+0x1d8>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d004      	beq.n	80063b4 <HAL_DMA_Abort_IT+0x17c>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a19      	ldr	r2, [pc, #100]	@ (8006414 <HAL_DMA_Abort_IT+0x1dc>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d108      	bne.n	80063c6 <HAL_DMA_Abort_IT+0x18e>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f022 0201 	bic.w	r2, r2, #1
 80063c2:	601a      	str	r2, [r3, #0]
 80063c4:	e178      	b.n	80066b8 <HAL_DMA_Abort_IT+0x480>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f022 0201 	bic.w	r2, r2, #1
 80063d4:	601a      	str	r2, [r3, #0]
 80063d6:	e16f      	b.n	80066b8 <HAL_DMA_Abort_IT+0x480>
 80063d8:	40020010 	.word	0x40020010
 80063dc:	40020028 	.word	0x40020028
 80063e0:	40020040 	.word	0x40020040
 80063e4:	40020058 	.word	0x40020058
 80063e8:	40020070 	.word	0x40020070
 80063ec:	40020088 	.word	0x40020088
 80063f0:	400200a0 	.word	0x400200a0
 80063f4:	400200b8 	.word	0x400200b8
 80063f8:	40020410 	.word	0x40020410
 80063fc:	40020428 	.word	0x40020428
 8006400:	40020440 	.word	0x40020440
 8006404:	40020458 	.word	0x40020458
 8006408:	40020470 	.word	0x40020470
 800640c:	40020488 	.word	0x40020488
 8006410:	400204a0 	.word	0x400204a0
 8006414:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f022 020e 	bic.w	r2, r2, #14
 8006426:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a6c      	ldr	r2, [pc, #432]	@ (80065e0 <HAL_DMA_Abort_IT+0x3a8>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d04a      	beq.n	80064c8 <HAL_DMA_Abort_IT+0x290>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a6b      	ldr	r2, [pc, #428]	@ (80065e4 <HAL_DMA_Abort_IT+0x3ac>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d045      	beq.n	80064c8 <HAL_DMA_Abort_IT+0x290>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a69      	ldr	r2, [pc, #420]	@ (80065e8 <HAL_DMA_Abort_IT+0x3b0>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d040      	beq.n	80064c8 <HAL_DMA_Abort_IT+0x290>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a68      	ldr	r2, [pc, #416]	@ (80065ec <HAL_DMA_Abort_IT+0x3b4>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d03b      	beq.n	80064c8 <HAL_DMA_Abort_IT+0x290>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a66      	ldr	r2, [pc, #408]	@ (80065f0 <HAL_DMA_Abort_IT+0x3b8>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d036      	beq.n	80064c8 <HAL_DMA_Abort_IT+0x290>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a65      	ldr	r2, [pc, #404]	@ (80065f4 <HAL_DMA_Abort_IT+0x3bc>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d031      	beq.n	80064c8 <HAL_DMA_Abort_IT+0x290>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a63      	ldr	r2, [pc, #396]	@ (80065f8 <HAL_DMA_Abort_IT+0x3c0>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d02c      	beq.n	80064c8 <HAL_DMA_Abort_IT+0x290>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a62      	ldr	r2, [pc, #392]	@ (80065fc <HAL_DMA_Abort_IT+0x3c4>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d027      	beq.n	80064c8 <HAL_DMA_Abort_IT+0x290>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a60      	ldr	r2, [pc, #384]	@ (8006600 <HAL_DMA_Abort_IT+0x3c8>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d022      	beq.n	80064c8 <HAL_DMA_Abort_IT+0x290>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a5f      	ldr	r2, [pc, #380]	@ (8006604 <HAL_DMA_Abort_IT+0x3cc>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d01d      	beq.n	80064c8 <HAL_DMA_Abort_IT+0x290>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a5d      	ldr	r2, [pc, #372]	@ (8006608 <HAL_DMA_Abort_IT+0x3d0>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d018      	beq.n	80064c8 <HAL_DMA_Abort_IT+0x290>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a5c      	ldr	r2, [pc, #368]	@ (800660c <HAL_DMA_Abort_IT+0x3d4>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d013      	beq.n	80064c8 <HAL_DMA_Abort_IT+0x290>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a5a      	ldr	r2, [pc, #360]	@ (8006610 <HAL_DMA_Abort_IT+0x3d8>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d00e      	beq.n	80064c8 <HAL_DMA_Abort_IT+0x290>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a59      	ldr	r2, [pc, #356]	@ (8006614 <HAL_DMA_Abort_IT+0x3dc>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d009      	beq.n	80064c8 <HAL_DMA_Abort_IT+0x290>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a57      	ldr	r2, [pc, #348]	@ (8006618 <HAL_DMA_Abort_IT+0x3e0>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d004      	beq.n	80064c8 <HAL_DMA_Abort_IT+0x290>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a56      	ldr	r2, [pc, #344]	@ (800661c <HAL_DMA_Abort_IT+0x3e4>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d108      	bne.n	80064da <HAL_DMA_Abort_IT+0x2a2>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f022 0201 	bic.w	r2, r2, #1
 80064d6:	601a      	str	r2, [r3, #0]
 80064d8:	e007      	b.n	80064ea <HAL_DMA_Abort_IT+0x2b2>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f022 0201 	bic.w	r2, r2, #1
 80064e8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a3c      	ldr	r2, [pc, #240]	@ (80065e0 <HAL_DMA_Abort_IT+0x3a8>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d072      	beq.n	80065da <HAL_DMA_Abort_IT+0x3a2>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a3a      	ldr	r2, [pc, #232]	@ (80065e4 <HAL_DMA_Abort_IT+0x3ac>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d06d      	beq.n	80065da <HAL_DMA_Abort_IT+0x3a2>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a39      	ldr	r2, [pc, #228]	@ (80065e8 <HAL_DMA_Abort_IT+0x3b0>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d068      	beq.n	80065da <HAL_DMA_Abort_IT+0x3a2>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a37      	ldr	r2, [pc, #220]	@ (80065ec <HAL_DMA_Abort_IT+0x3b4>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d063      	beq.n	80065da <HAL_DMA_Abort_IT+0x3a2>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a36      	ldr	r2, [pc, #216]	@ (80065f0 <HAL_DMA_Abort_IT+0x3b8>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d05e      	beq.n	80065da <HAL_DMA_Abort_IT+0x3a2>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a34      	ldr	r2, [pc, #208]	@ (80065f4 <HAL_DMA_Abort_IT+0x3bc>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d059      	beq.n	80065da <HAL_DMA_Abort_IT+0x3a2>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a33      	ldr	r2, [pc, #204]	@ (80065f8 <HAL_DMA_Abort_IT+0x3c0>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d054      	beq.n	80065da <HAL_DMA_Abort_IT+0x3a2>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a31      	ldr	r2, [pc, #196]	@ (80065fc <HAL_DMA_Abort_IT+0x3c4>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d04f      	beq.n	80065da <HAL_DMA_Abort_IT+0x3a2>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a30      	ldr	r2, [pc, #192]	@ (8006600 <HAL_DMA_Abort_IT+0x3c8>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d04a      	beq.n	80065da <HAL_DMA_Abort_IT+0x3a2>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a2e      	ldr	r2, [pc, #184]	@ (8006604 <HAL_DMA_Abort_IT+0x3cc>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d045      	beq.n	80065da <HAL_DMA_Abort_IT+0x3a2>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a2d      	ldr	r2, [pc, #180]	@ (8006608 <HAL_DMA_Abort_IT+0x3d0>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d040      	beq.n	80065da <HAL_DMA_Abort_IT+0x3a2>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a2b      	ldr	r2, [pc, #172]	@ (800660c <HAL_DMA_Abort_IT+0x3d4>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d03b      	beq.n	80065da <HAL_DMA_Abort_IT+0x3a2>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a2a      	ldr	r2, [pc, #168]	@ (8006610 <HAL_DMA_Abort_IT+0x3d8>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d036      	beq.n	80065da <HAL_DMA_Abort_IT+0x3a2>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a28      	ldr	r2, [pc, #160]	@ (8006614 <HAL_DMA_Abort_IT+0x3dc>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d031      	beq.n	80065da <HAL_DMA_Abort_IT+0x3a2>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a27      	ldr	r2, [pc, #156]	@ (8006618 <HAL_DMA_Abort_IT+0x3e0>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d02c      	beq.n	80065da <HAL_DMA_Abort_IT+0x3a2>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a25      	ldr	r2, [pc, #148]	@ (800661c <HAL_DMA_Abort_IT+0x3e4>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d027      	beq.n	80065da <HAL_DMA_Abort_IT+0x3a2>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a24      	ldr	r2, [pc, #144]	@ (8006620 <HAL_DMA_Abort_IT+0x3e8>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d022      	beq.n	80065da <HAL_DMA_Abort_IT+0x3a2>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a22      	ldr	r2, [pc, #136]	@ (8006624 <HAL_DMA_Abort_IT+0x3ec>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d01d      	beq.n	80065da <HAL_DMA_Abort_IT+0x3a2>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a21      	ldr	r2, [pc, #132]	@ (8006628 <HAL_DMA_Abort_IT+0x3f0>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d018      	beq.n	80065da <HAL_DMA_Abort_IT+0x3a2>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a1f      	ldr	r2, [pc, #124]	@ (800662c <HAL_DMA_Abort_IT+0x3f4>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d013      	beq.n	80065da <HAL_DMA_Abort_IT+0x3a2>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a1e      	ldr	r2, [pc, #120]	@ (8006630 <HAL_DMA_Abort_IT+0x3f8>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d00e      	beq.n	80065da <HAL_DMA_Abort_IT+0x3a2>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a1c      	ldr	r2, [pc, #112]	@ (8006634 <HAL_DMA_Abort_IT+0x3fc>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d009      	beq.n	80065da <HAL_DMA_Abort_IT+0x3a2>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a1b      	ldr	r2, [pc, #108]	@ (8006638 <HAL_DMA_Abort_IT+0x400>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d004      	beq.n	80065da <HAL_DMA_Abort_IT+0x3a2>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a19      	ldr	r2, [pc, #100]	@ (800663c <HAL_DMA_Abort_IT+0x404>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d132      	bne.n	8006640 <HAL_DMA_Abort_IT+0x408>
 80065da:	2301      	movs	r3, #1
 80065dc:	e031      	b.n	8006642 <HAL_DMA_Abort_IT+0x40a>
 80065de:	bf00      	nop
 80065e0:	40020010 	.word	0x40020010
 80065e4:	40020028 	.word	0x40020028
 80065e8:	40020040 	.word	0x40020040
 80065ec:	40020058 	.word	0x40020058
 80065f0:	40020070 	.word	0x40020070
 80065f4:	40020088 	.word	0x40020088
 80065f8:	400200a0 	.word	0x400200a0
 80065fc:	400200b8 	.word	0x400200b8
 8006600:	40020410 	.word	0x40020410
 8006604:	40020428 	.word	0x40020428
 8006608:	40020440 	.word	0x40020440
 800660c:	40020458 	.word	0x40020458
 8006610:	40020470 	.word	0x40020470
 8006614:	40020488 	.word	0x40020488
 8006618:	400204a0 	.word	0x400204a0
 800661c:	400204b8 	.word	0x400204b8
 8006620:	58025408 	.word	0x58025408
 8006624:	5802541c 	.word	0x5802541c
 8006628:	58025430 	.word	0x58025430
 800662c:	58025444 	.word	0x58025444
 8006630:	58025458 	.word	0x58025458
 8006634:	5802546c 	.word	0x5802546c
 8006638:	58025480 	.word	0x58025480
 800663c:	58025494 	.word	0x58025494
 8006640:	2300      	movs	r3, #0
 8006642:	2b00      	cmp	r3, #0
 8006644:	d028      	beq.n	8006698 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006650:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006654:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800665a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006660:	f003 031f 	and.w	r3, r3, #31
 8006664:	2201      	movs	r2, #1
 8006666:	409a      	lsls	r2, r3
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006674:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800667a:	2b00      	cmp	r3, #0
 800667c:	d00c      	beq.n	8006698 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006688:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800668c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006696:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d003      	beq.n	80066b8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3710      	adds	r7, #16
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop

080066c4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b08a      	sub	sp, #40	@ 0x28
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80066cc:	2300      	movs	r3, #0
 80066ce:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80066d0:	4b67      	ldr	r3, [pc, #412]	@ (8006870 <HAL_DMA_IRQHandler+0x1ac>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a67      	ldr	r2, [pc, #412]	@ (8006874 <HAL_DMA_IRQHandler+0x1b0>)
 80066d6:	fba2 2303 	umull	r2, r3, r2, r3
 80066da:	0a9b      	lsrs	r3, r3, #10
 80066dc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066e2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066e8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80066ea:	6a3b      	ldr	r3, [r7, #32]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a5f      	ldr	r2, [pc, #380]	@ (8006878 <HAL_DMA_IRQHandler+0x1b4>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d04a      	beq.n	8006796 <HAL_DMA_IRQHandler+0xd2>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a5d      	ldr	r2, [pc, #372]	@ (800687c <HAL_DMA_IRQHandler+0x1b8>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d045      	beq.n	8006796 <HAL_DMA_IRQHandler+0xd2>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a5c      	ldr	r2, [pc, #368]	@ (8006880 <HAL_DMA_IRQHandler+0x1bc>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d040      	beq.n	8006796 <HAL_DMA_IRQHandler+0xd2>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a5a      	ldr	r2, [pc, #360]	@ (8006884 <HAL_DMA_IRQHandler+0x1c0>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d03b      	beq.n	8006796 <HAL_DMA_IRQHandler+0xd2>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a59      	ldr	r2, [pc, #356]	@ (8006888 <HAL_DMA_IRQHandler+0x1c4>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d036      	beq.n	8006796 <HAL_DMA_IRQHandler+0xd2>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a57      	ldr	r2, [pc, #348]	@ (800688c <HAL_DMA_IRQHandler+0x1c8>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d031      	beq.n	8006796 <HAL_DMA_IRQHandler+0xd2>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a56      	ldr	r2, [pc, #344]	@ (8006890 <HAL_DMA_IRQHandler+0x1cc>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d02c      	beq.n	8006796 <HAL_DMA_IRQHandler+0xd2>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a54      	ldr	r2, [pc, #336]	@ (8006894 <HAL_DMA_IRQHandler+0x1d0>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d027      	beq.n	8006796 <HAL_DMA_IRQHandler+0xd2>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a53      	ldr	r2, [pc, #332]	@ (8006898 <HAL_DMA_IRQHandler+0x1d4>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d022      	beq.n	8006796 <HAL_DMA_IRQHandler+0xd2>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a51      	ldr	r2, [pc, #324]	@ (800689c <HAL_DMA_IRQHandler+0x1d8>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d01d      	beq.n	8006796 <HAL_DMA_IRQHandler+0xd2>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a50      	ldr	r2, [pc, #320]	@ (80068a0 <HAL_DMA_IRQHandler+0x1dc>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d018      	beq.n	8006796 <HAL_DMA_IRQHandler+0xd2>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a4e      	ldr	r2, [pc, #312]	@ (80068a4 <HAL_DMA_IRQHandler+0x1e0>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d013      	beq.n	8006796 <HAL_DMA_IRQHandler+0xd2>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a4d      	ldr	r2, [pc, #308]	@ (80068a8 <HAL_DMA_IRQHandler+0x1e4>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d00e      	beq.n	8006796 <HAL_DMA_IRQHandler+0xd2>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a4b      	ldr	r2, [pc, #300]	@ (80068ac <HAL_DMA_IRQHandler+0x1e8>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d009      	beq.n	8006796 <HAL_DMA_IRQHandler+0xd2>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a4a      	ldr	r2, [pc, #296]	@ (80068b0 <HAL_DMA_IRQHandler+0x1ec>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d004      	beq.n	8006796 <HAL_DMA_IRQHandler+0xd2>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a48      	ldr	r2, [pc, #288]	@ (80068b4 <HAL_DMA_IRQHandler+0x1f0>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d101      	bne.n	800679a <HAL_DMA_IRQHandler+0xd6>
 8006796:	2301      	movs	r3, #1
 8006798:	e000      	b.n	800679c <HAL_DMA_IRQHandler+0xd8>
 800679a:	2300      	movs	r3, #0
 800679c:	2b00      	cmp	r3, #0
 800679e:	f000 842b 	beq.w	8006ff8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067a6:	f003 031f 	and.w	r3, r3, #31
 80067aa:	2208      	movs	r2, #8
 80067ac:	409a      	lsls	r2, r3
 80067ae:	69bb      	ldr	r3, [r7, #24]
 80067b0:	4013      	ands	r3, r2
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	f000 80a2 	beq.w	80068fc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a2e      	ldr	r2, [pc, #184]	@ (8006878 <HAL_DMA_IRQHandler+0x1b4>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d04a      	beq.n	8006858 <HAL_DMA_IRQHandler+0x194>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a2d      	ldr	r2, [pc, #180]	@ (800687c <HAL_DMA_IRQHandler+0x1b8>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d045      	beq.n	8006858 <HAL_DMA_IRQHandler+0x194>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a2b      	ldr	r2, [pc, #172]	@ (8006880 <HAL_DMA_IRQHandler+0x1bc>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d040      	beq.n	8006858 <HAL_DMA_IRQHandler+0x194>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a2a      	ldr	r2, [pc, #168]	@ (8006884 <HAL_DMA_IRQHandler+0x1c0>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d03b      	beq.n	8006858 <HAL_DMA_IRQHandler+0x194>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a28      	ldr	r2, [pc, #160]	@ (8006888 <HAL_DMA_IRQHandler+0x1c4>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d036      	beq.n	8006858 <HAL_DMA_IRQHandler+0x194>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a27      	ldr	r2, [pc, #156]	@ (800688c <HAL_DMA_IRQHandler+0x1c8>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d031      	beq.n	8006858 <HAL_DMA_IRQHandler+0x194>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a25      	ldr	r2, [pc, #148]	@ (8006890 <HAL_DMA_IRQHandler+0x1cc>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d02c      	beq.n	8006858 <HAL_DMA_IRQHandler+0x194>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a24      	ldr	r2, [pc, #144]	@ (8006894 <HAL_DMA_IRQHandler+0x1d0>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d027      	beq.n	8006858 <HAL_DMA_IRQHandler+0x194>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a22      	ldr	r2, [pc, #136]	@ (8006898 <HAL_DMA_IRQHandler+0x1d4>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d022      	beq.n	8006858 <HAL_DMA_IRQHandler+0x194>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a21      	ldr	r2, [pc, #132]	@ (800689c <HAL_DMA_IRQHandler+0x1d8>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d01d      	beq.n	8006858 <HAL_DMA_IRQHandler+0x194>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a1f      	ldr	r2, [pc, #124]	@ (80068a0 <HAL_DMA_IRQHandler+0x1dc>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d018      	beq.n	8006858 <HAL_DMA_IRQHandler+0x194>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a1e      	ldr	r2, [pc, #120]	@ (80068a4 <HAL_DMA_IRQHandler+0x1e0>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d013      	beq.n	8006858 <HAL_DMA_IRQHandler+0x194>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a1c      	ldr	r2, [pc, #112]	@ (80068a8 <HAL_DMA_IRQHandler+0x1e4>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d00e      	beq.n	8006858 <HAL_DMA_IRQHandler+0x194>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a1b      	ldr	r2, [pc, #108]	@ (80068ac <HAL_DMA_IRQHandler+0x1e8>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d009      	beq.n	8006858 <HAL_DMA_IRQHandler+0x194>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a19      	ldr	r2, [pc, #100]	@ (80068b0 <HAL_DMA_IRQHandler+0x1ec>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d004      	beq.n	8006858 <HAL_DMA_IRQHandler+0x194>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a18      	ldr	r2, [pc, #96]	@ (80068b4 <HAL_DMA_IRQHandler+0x1f0>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d12f      	bne.n	80068b8 <HAL_DMA_IRQHandler+0x1f4>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 0304 	and.w	r3, r3, #4
 8006862:	2b00      	cmp	r3, #0
 8006864:	bf14      	ite	ne
 8006866:	2301      	movne	r3, #1
 8006868:	2300      	moveq	r3, #0
 800686a:	b2db      	uxtb	r3, r3
 800686c:	e02e      	b.n	80068cc <HAL_DMA_IRQHandler+0x208>
 800686e:	bf00      	nop
 8006870:	24000000 	.word	0x24000000
 8006874:	1b4e81b5 	.word	0x1b4e81b5
 8006878:	40020010 	.word	0x40020010
 800687c:	40020028 	.word	0x40020028
 8006880:	40020040 	.word	0x40020040
 8006884:	40020058 	.word	0x40020058
 8006888:	40020070 	.word	0x40020070
 800688c:	40020088 	.word	0x40020088
 8006890:	400200a0 	.word	0x400200a0
 8006894:	400200b8 	.word	0x400200b8
 8006898:	40020410 	.word	0x40020410
 800689c:	40020428 	.word	0x40020428
 80068a0:	40020440 	.word	0x40020440
 80068a4:	40020458 	.word	0x40020458
 80068a8:	40020470 	.word	0x40020470
 80068ac:	40020488 	.word	0x40020488
 80068b0:	400204a0 	.word	0x400204a0
 80068b4:	400204b8 	.word	0x400204b8
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f003 0308 	and.w	r3, r3, #8
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	bf14      	ite	ne
 80068c6:	2301      	movne	r3, #1
 80068c8:	2300      	moveq	r3, #0
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d015      	beq.n	80068fc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f022 0204 	bic.w	r2, r2, #4
 80068de:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068e4:	f003 031f 	and.w	r3, r3, #31
 80068e8:	2208      	movs	r2, #8
 80068ea:	409a      	lsls	r2, r3
 80068ec:	6a3b      	ldr	r3, [r7, #32]
 80068ee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068f4:	f043 0201 	orr.w	r2, r3, #1
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006900:	f003 031f 	and.w	r3, r3, #31
 8006904:	69ba      	ldr	r2, [r7, #24]
 8006906:	fa22 f303 	lsr.w	r3, r2, r3
 800690a:	f003 0301 	and.w	r3, r3, #1
 800690e:	2b00      	cmp	r3, #0
 8006910:	d06e      	beq.n	80069f0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a69      	ldr	r2, [pc, #420]	@ (8006abc <HAL_DMA_IRQHandler+0x3f8>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d04a      	beq.n	80069b2 <HAL_DMA_IRQHandler+0x2ee>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a67      	ldr	r2, [pc, #412]	@ (8006ac0 <HAL_DMA_IRQHandler+0x3fc>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d045      	beq.n	80069b2 <HAL_DMA_IRQHandler+0x2ee>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a66      	ldr	r2, [pc, #408]	@ (8006ac4 <HAL_DMA_IRQHandler+0x400>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d040      	beq.n	80069b2 <HAL_DMA_IRQHandler+0x2ee>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a64      	ldr	r2, [pc, #400]	@ (8006ac8 <HAL_DMA_IRQHandler+0x404>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d03b      	beq.n	80069b2 <HAL_DMA_IRQHandler+0x2ee>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a63      	ldr	r2, [pc, #396]	@ (8006acc <HAL_DMA_IRQHandler+0x408>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d036      	beq.n	80069b2 <HAL_DMA_IRQHandler+0x2ee>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a61      	ldr	r2, [pc, #388]	@ (8006ad0 <HAL_DMA_IRQHandler+0x40c>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d031      	beq.n	80069b2 <HAL_DMA_IRQHandler+0x2ee>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a60      	ldr	r2, [pc, #384]	@ (8006ad4 <HAL_DMA_IRQHandler+0x410>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d02c      	beq.n	80069b2 <HAL_DMA_IRQHandler+0x2ee>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a5e      	ldr	r2, [pc, #376]	@ (8006ad8 <HAL_DMA_IRQHandler+0x414>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d027      	beq.n	80069b2 <HAL_DMA_IRQHandler+0x2ee>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a5d      	ldr	r2, [pc, #372]	@ (8006adc <HAL_DMA_IRQHandler+0x418>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d022      	beq.n	80069b2 <HAL_DMA_IRQHandler+0x2ee>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a5b      	ldr	r2, [pc, #364]	@ (8006ae0 <HAL_DMA_IRQHandler+0x41c>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d01d      	beq.n	80069b2 <HAL_DMA_IRQHandler+0x2ee>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a5a      	ldr	r2, [pc, #360]	@ (8006ae4 <HAL_DMA_IRQHandler+0x420>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d018      	beq.n	80069b2 <HAL_DMA_IRQHandler+0x2ee>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a58      	ldr	r2, [pc, #352]	@ (8006ae8 <HAL_DMA_IRQHandler+0x424>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d013      	beq.n	80069b2 <HAL_DMA_IRQHandler+0x2ee>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a57      	ldr	r2, [pc, #348]	@ (8006aec <HAL_DMA_IRQHandler+0x428>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d00e      	beq.n	80069b2 <HAL_DMA_IRQHandler+0x2ee>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a55      	ldr	r2, [pc, #340]	@ (8006af0 <HAL_DMA_IRQHandler+0x42c>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d009      	beq.n	80069b2 <HAL_DMA_IRQHandler+0x2ee>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a54      	ldr	r2, [pc, #336]	@ (8006af4 <HAL_DMA_IRQHandler+0x430>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d004      	beq.n	80069b2 <HAL_DMA_IRQHandler+0x2ee>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a52      	ldr	r2, [pc, #328]	@ (8006af8 <HAL_DMA_IRQHandler+0x434>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d10a      	bne.n	80069c8 <HAL_DMA_IRQHandler+0x304>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	695b      	ldr	r3, [r3, #20]
 80069b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069bc:	2b00      	cmp	r3, #0
 80069be:	bf14      	ite	ne
 80069c0:	2301      	movne	r3, #1
 80069c2:	2300      	moveq	r3, #0
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	e003      	b.n	80069d0 <HAL_DMA_IRQHandler+0x30c>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	2300      	movs	r3, #0
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d00d      	beq.n	80069f0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069d8:	f003 031f 	and.w	r3, r3, #31
 80069dc:	2201      	movs	r2, #1
 80069de:	409a      	lsls	r2, r3
 80069e0:	6a3b      	ldr	r3, [r7, #32]
 80069e2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069e8:	f043 0202 	orr.w	r2, r3, #2
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069f4:	f003 031f 	and.w	r3, r3, #31
 80069f8:	2204      	movs	r2, #4
 80069fa:	409a      	lsls	r2, r3
 80069fc:	69bb      	ldr	r3, [r7, #24]
 80069fe:	4013      	ands	r3, r2
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	f000 808f 	beq.w	8006b24 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a2c      	ldr	r2, [pc, #176]	@ (8006abc <HAL_DMA_IRQHandler+0x3f8>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d04a      	beq.n	8006aa6 <HAL_DMA_IRQHandler+0x3e2>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a2a      	ldr	r2, [pc, #168]	@ (8006ac0 <HAL_DMA_IRQHandler+0x3fc>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d045      	beq.n	8006aa6 <HAL_DMA_IRQHandler+0x3e2>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a29      	ldr	r2, [pc, #164]	@ (8006ac4 <HAL_DMA_IRQHandler+0x400>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d040      	beq.n	8006aa6 <HAL_DMA_IRQHandler+0x3e2>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a27      	ldr	r2, [pc, #156]	@ (8006ac8 <HAL_DMA_IRQHandler+0x404>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d03b      	beq.n	8006aa6 <HAL_DMA_IRQHandler+0x3e2>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a26      	ldr	r2, [pc, #152]	@ (8006acc <HAL_DMA_IRQHandler+0x408>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d036      	beq.n	8006aa6 <HAL_DMA_IRQHandler+0x3e2>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a24      	ldr	r2, [pc, #144]	@ (8006ad0 <HAL_DMA_IRQHandler+0x40c>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d031      	beq.n	8006aa6 <HAL_DMA_IRQHandler+0x3e2>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a23      	ldr	r2, [pc, #140]	@ (8006ad4 <HAL_DMA_IRQHandler+0x410>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d02c      	beq.n	8006aa6 <HAL_DMA_IRQHandler+0x3e2>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a21      	ldr	r2, [pc, #132]	@ (8006ad8 <HAL_DMA_IRQHandler+0x414>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d027      	beq.n	8006aa6 <HAL_DMA_IRQHandler+0x3e2>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a20      	ldr	r2, [pc, #128]	@ (8006adc <HAL_DMA_IRQHandler+0x418>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d022      	beq.n	8006aa6 <HAL_DMA_IRQHandler+0x3e2>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a1e      	ldr	r2, [pc, #120]	@ (8006ae0 <HAL_DMA_IRQHandler+0x41c>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d01d      	beq.n	8006aa6 <HAL_DMA_IRQHandler+0x3e2>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a1d      	ldr	r2, [pc, #116]	@ (8006ae4 <HAL_DMA_IRQHandler+0x420>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d018      	beq.n	8006aa6 <HAL_DMA_IRQHandler+0x3e2>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a1b      	ldr	r2, [pc, #108]	@ (8006ae8 <HAL_DMA_IRQHandler+0x424>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d013      	beq.n	8006aa6 <HAL_DMA_IRQHandler+0x3e2>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a1a      	ldr	r2, [pc, #104]	@ (8006aec <HAL_DMA_IRQHandler+0x428>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d00e      	beq.n	8006aa6 <HAL_DMA_IRQHandler+0x3e2>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a18      	ldr	r2, [pc, #96]	@ (8006af0 <HAL_DMA_IRQHandler+0x42c>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d009      	beq.n	8006aa6 <HAL_DMA_IRQHandler+0x3e2>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a17      	ldr	r2, [pc, #92]	@ (8006af4 <HAL_DMA_IRQHandler+0x430>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d004      	beq.n	8006aa6 <HAL_DMA_IRQHandler+0x3e2>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a15      	ldr	r2, [pc, #84]	@ (8006af8 <HAL_DMA_IRQHandler+0x434>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d12a      	bne.n	8006afc <HAL_DMA_IRQHandler+0x438>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f003 0302 	and.w	r3, r3, #2
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	bf14      	ite	ne
 8006ab4:	2301      	movne	r3, #1
 8006ab6:	2300      	moveq	r3, #0
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	e023      	b.n	8006b04 <HAL_DMA_IRQHandler+0x440>
 8006abc:	40020010 	.word	0x40020010
 8006ac0:	40020028 	.word	0x40020028
 8006ac4:	40020040 	.word	0x40020040
 8006ac8:	40020058 	.word	0x40020058
 8006acc:	40020070 	.word	0x40020070
 8006ad0:	40020088 	.word	0x40020088
 8006ad4:	400200a0 	.word	0x400200a0
 8006ad8:	400200b8 	.word	0x400200b8
 8006adc:	40020410 	.word	0x40020410
 8006ae0:	40020428 	.word	0x40020428
 8006ae4:	40020440 	.word	0x40020440
 8006ae8:	40020458 	.word	0x40020458
 8006aec:	40020470 	.word	0x40020470
 8006af0:	40020488 	.word	0x40020488
 8006af4:	400204a0 	.word	0x400204a0
 8006af8:	400204b8 	.word	0x400204b8
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	2300      	movs	r3, #0
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d00d      	beq.n	8006b24 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b0c:	f003 031f 	and.w	r3, r3, #31
 8006b10:	2204      	movs	r2, #4
 8006b12:	409a      	lsls	r2, r3
 8006b14:	6a3b      	ldr	r3, [r7, #32]
 8006b16:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b1c:	f043 0204 	orr.w	r2, r3, #4
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b28:	f003 031f 	and.w	r3, r3, #31
 8006b2c:	2210      	movs	r2, #16
 8006b2e:	409a      	lsls	r2, r3
 8006b30:	69bb      	ldr	r3, [r7, #24]
 8006b32:	4013      	ands	r3, r2
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	f000 80a6 	beq.w	8006c86 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a85      	ldr	r2, [pc, #532]	@ (8006d54 <HAL_DMA_IRQHandler+0x690>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d04a      	beq.n	8006bda <HAL_DMA_IRQHandler+0x516>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a83      	ldr	r2, [pc, #524]	@ (8006d58 <HAL_DMA_IRQHandler+0x694>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d045      	beq.n	8006bda <HAL_DMA_IRQHandler+0x516>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a82      	ldr	r2, [pc, #520]	@ (8006d5c <HAL_DMA_IRQHandler+0x698>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d040      	beq.n	8006bda <HAL_DMA_IRQHandler+0x516>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a80      	ldr	r2, [pc, #512]	@ (8006d60 <HAL_DMA_IRQHandler+0x69c>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d03b      	beq.n	8006bda <HAL_DMA_IRQHandler+0x516>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a7f      	ldr	r2, [pc, #508]	@ (8006d64 <HAL_DMA_IRQHandler+0x6a0>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d036      	beq.n	8006bda <HAL_DMA_IRQHandler+0x516>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a7d      	ldr	r2, [pc, #500]	@ (8006d68 <HAL_DMA_IRQHandler+0x6a4>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d031      	beq.n	8006bda <HAL_DMA_IRQHandler+0x516>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a7c      	ldr	r2, [pc, #496]	@ (8006d6c <HAL_DMA_IRQHandler+0x6a8>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d02c      	beq.n	8006bda <HAL_DMA_IRQHandler+0x516>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a7a      	ldr	r2, [pc, #488]	@ (8006d70 <HAL_DMA_IRQHandler+0x6ac>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d027      	beq.n	8006bda <HAL_DMA_IRQHandler+0x516>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a79      	ldr	r2, [pc, #484]	@ (8006d74 <HAL_DMA_IRQHandler+0x6b0>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d022      	beq.n	8006bda <HAL_DMA_IRQHandler+0x516>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a77      	ldr	r2, [pc, #476]	@ (8006d78 <HAL_DMA_IRQHandler+0x6b4>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d01d      	beq.n	8006bda <HAL_DMA_IRQHandler+0x516>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a76      	ldr	r2, [pc, #472]	@ (8006d7c <HAL_DMA_IRQHandler+0x6b8>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d018      	beq.n	8006bda <HAL_DMA_IRQHandler+0x516>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a74      	ldr	r2, [pc, #464]	@ (8006d80 <HAL_DMA_IRQHandler+0x6bc>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d013      	beq.n	8006bda <HAL_DMA_IRQHandler+0x516>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a73      	ldr	r2, [pc, #460]	@ (8006d84 <HAL_DMA_IRQHandler+0x6c0>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d00e      	beq.n	8006bda <HAL_DMA_IRQHandler+0x516>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a71      	ldr	r2, [pc, #452]	@ (8006d88 <HAL_DMA_IRQHandler+0x6c4>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d009      	beq.n	8006bda <HAL_DMA_IRQHandler+0x516>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a70      	ldr	r2, [pc, #448]	@ (8006d8c <HAL_DMA_IRQHandler+0x6c8>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d004      	beq.n	8006bda <HAL_DMA_IRQHandler+0x516>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a6e      	ldr	r2, [pc, #440]	@ (8006d90 <HAL_DMA_IRQHandler+0x6cc>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d10a      	bne.n	8006bf0 <HAL_DMA_IRQHandler+0x52c>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f003 0308 	and.w	r3, r3, #8
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	bf14      	ite	ne
 8006be8:	2301      	movne	r3, #1
 8006bea:	2300      	moveq	r3, #0
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	e009      	b.n	8006c04 <HAL_DMA_IRQHandler+0x540>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f003 0304 	and.w	r3, r3, #4
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	bf14      	ite	ne
 8006bfe:	2301      	movne	r3, #1
 8006c00:	2300      	moveq	r3, #0
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d03e      	beq.n	8006c86 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c0c:	f003 031f 	and.w	r3, r3, #31
 8006c10:	2210      	movs	r2, #16
 8006c12:	409a      	lsls	r2, r3
 8006c14:	6a3b      	ldr	r3, [r7, #32]
 8006c16:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d018      	beq.n	8006c58 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d108      	bne.n	8006c46 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d024      	beq.n	8006c86 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	4798      	blx	r3
 8006c44:	e01f      	b.n	8006c86 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d01b      	beq.n	8006c86 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	4798      	blx	r3
 8006c56:	e016      	b.n	8006c86 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d107      	bne.n	8006c76 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f022 0208 	bic.w	r2, r2, #8
 8006c74:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d003      	beq.n	8006c86 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c8a:	f003 031f 	and.w	r3, r3, #31
 8006c8e:	2220      	movs	r2, #32
 8006c90:	409a      	lsls	r2, r3
 8006c92:	69bb      	ldr	r3, [r7, #24]
 8006c94:	4013      	ands	r3, r2
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	f000 8110 	beq.w	8006ebc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a2c      	ldr	r2, [pc, #176]	@ (8006d54 <HAL_DMA_IRQHandler+0x690>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d04a      	beq.n	8006d3c <HAL_DMA_IRQHandler+0x678>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a2b      	ldr	r2, [pc, #172]	@ (8006d58 <HAL_DMA_IRQHandler+0x694>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d045      	beq.n	8006d3c <HAL_DMA_IRQHandler+0x678>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a29      	ldr	r2, [pc, #164]	@ (8006d5c <HAL_DMA_IRQHandler+0x698>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d040      	beq.n	8006d3c <HAL_DMA_IRQHandler+0x678>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a28      	ldr	r2, [pc, #160]	@ (8006d60 <HAL_DMA_IRQHandler+0x69c>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d03b      	beq.n	8006d3c <HAL_DMA_IRQHandler+0x678>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a26      	ldr	r2, [pc, #152]	@ (8006d64 <HAL_DMA_IRQHandler+0x6a0>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d036      	beq.n	8006d3c <HAL_DMA_IRQHandler+0x678>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a25      	ldr	r2, [pc, #148]	@ (8006d68 <HAL_DMA_IRQHandler+0x6a4>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d031      	beq.n	8006d3c <HAL_DMA_IRQHandler+0x678>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a23      	ldr	r2, [pc, #140]	@ (8006d6c <HAL_DMA_IRQHandler+0x6a8>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d02c      	beq.n	8006d3c <HAL_DMA_IRQHandler+0x678>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a22      	ldr	r2, [pc, #136]	@ (8006d70 <HAL_DMA_IRQHandler+0x6ac>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d027      	beq.n	8006d3c <HAL_DMA_IRQHandler+0x678>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a20      	ldr	r2, [pc, #128]	@ (8006d74 <HAL_DMA_IRQHandler+0x6b0>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d022      	beq.n	8006d3c <HAL_DMA_IRQHandler+0x678>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a1f      	ldr	r2, [pc, #124]	@ (8006d78 <HAL_DMA_IRQHandler+0x6b4>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d01d      	beq.n	8006d3c <HAL_DMA_IRQHandler+0x678>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a1d      	ldr	r2, [pc, #116]	@ (8006d7c <HAL_DMA_IRQHandler+0x6b8>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d018      	beq.n	8006d3c <HAL_DMA_IRQHandler+0x678>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a1c      	ldr	r2, [pc, #112]	@ (8006d80 <HAL_DMA_IRQHandler+0x6bc>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d013      	beq.n	8006d3c <HAL_DMA_IRQHandler+0x678>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a1a      	ldr	r2, [pc, #104]	@ (8006d84 <HAL_DMA_IRQHandler+0x6c0>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d00e      	beq.n	8006d3c <HAL_DMA_IRQHandler+0x678>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a19      	ldr	r2, [pc, #100]	@ (8006d88 <HAL_DMA_IRQHandler+0x6c4>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d009      	beq.n	8006d3c <HAL_DMA_IRQHandler+0x678>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a17      	ldr	r2, [pc, #92]	@ (8006d8c <HAL_DMA_IRQHandler+0x6c8>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d004      	beq.n	8006d3c <HAL_DMA_IRQHandler+0x678>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a16      	ldr	r2, [pc, #88]	@ (8006d90 <HAL_DMA_IRQHandler+0x6cc>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d12b      	bne.n	8006d94 <HAL_DMA_IRQHandler+0x6d0>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f003 0310 	and.w	r3, r3, #16
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	bf14      	ite	ne
 8006d4a:	2301      	movne	r3, #1
 8006d4c:	2300      	moveq	r3, #0
 8006d4e:	b2db      	uxtb	r3, r3
 8006d50:	e02a      	b.n	8006da8 <HAL_DMA_IRQHandler+0x6e4>
 8006d52:	bf00      	nop
 8006d54:	40020010 	.word	0x40020010
 8006d58:	40020028 	.word	0x40020028
 8006d5c:	40020040 	.word	0x40020040
 8006d60:	40020058 	.word	0x40020058
 8006d64:	40020070 	.word	0x40020070
 8006d68:	40020088 	.word	0x40020088
 8006d6c:	400200a0 	.word	0x400200a0
 8006d70:	400200b8 	.word	0x400200b8
 8006d74:	40020410 	.word	0x40020410
 8006d78:	40020428 	.word	0x40020428
 8006d7c:	40020440 	.word	0x40020440
 8006d80:	40020458 	.word	0x40020458
 8006d84:	40020470 	.word	0x40020470
 8006d88:	40020488 	.word	0x40020488
 8006d8c:	400204a0 	.word	0x400204a0
 8006d90:	400204b8 	.word	0x400204b8
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f003 0302 	and.w	r3, r3, #2
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	bf14      	ite	ne
 8006da2:	2301      	movne	r3, #1
 8006da4:	2300      	moveq	r3, #0
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	f000 8087 	beq.w	8006ebc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006db2:	f003 031f 	and.w	r3, r3, #31
 8006db6:	2220      	movs	r2, #32
 8006db8:	409a      	lsls	r2, r3
 8006dba:	6a3b      	ldr	r3, [r7, #32]
 8006dbc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006dc4:	b2db      	uxtb	r3, r3
 8006dc6:	2b04      	cmp	r3, #4
 8006dc8:	d139      	bne.n	8006e3e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f022 0216 	bic.w	r2, r2, #22
 8006dd8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	695a      	ldr	r2, [r3, #20]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006de8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d103      	bne.n	8006dfa <HAL_DMA_IRQHandler+0x736>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d007      	beq.n	8006e0a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f022 0208 	bic.w	r2, r2, #8
 8006e08:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e0e:	f003 031f 	and.w	r3, r3, #31
 8006e12:	223f      	movs	r2, #63	@ 0x3f
 8006e14:	409a      	lsls	r2, r3
 8006e16:	6a3b      	ldr	r3, [r7, #32]
 8006e18:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	f000 834a 	beq.w	80074c8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	4798      	blx	r3
          }
          return;
 8006e3c:	e344      	b.n	80074c8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d018      	beq.n	8006e7e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d108      	bne.n	8006e6c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d02c      	beq.n	8006ebc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	4798      	blx	r3
 8006e6a:	e027      	b.n	8006ebc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d023      	beq.n	8006ebc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	4798      	blx	r3
 8006e7c:	e01e      	b.n	8006ebc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d10f      	bne.n	8006eac <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f022 0210 	bic.w	r2, r2, #16
 8006e9a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d003      	beq.n	8006ebc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	f000 8306 	beq.w	80074d2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006eca:	f003 0301 	and.w	r3, r3, #1
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	f000 8088 	beq.w	8006fe4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2204      	movs	r2, #4
 8006ed8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a7a      	ldr	r2, [pc, #488]	@ (80070cc <HAL_DMA_IRQHandler+0xa08>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d04a      	beq.n	8006f7c <HAL_DMA_IRQHandler+0x8b8>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a79      	ldr	r2, [pc, #484]	@ (80070d0 <HAL_DMA_IRQHandler+0xa0c>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d045      	beq.n	8006f7c <HAL_DMA_IRQHandler+0x8b8>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a77      	ldr	r2, [pc, #476]	@ (80070d4 <HAL_DMA_IRQHandler+0xa10>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d040      	beq.n	8006f7c <HAL_DMA_IRQHandler+0x8b8>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a76      	ldr	r2, [pc, #472]	@ (80070d8 <HAL_DMA_IRQHandler+0xa14>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d03b      	beq.n	8006f7c <HAL_DMA_IRQHandler+0x8b8>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a74      	ldr	r2, [pc, #464]	@ (80070dc <HAL_DMA_IRQHandler+0xa18>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d036      	beq.n	8006f7c <HAL_DMA_IRQHandler+0x8b8>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a73      	ldr	r2, [pc, #460]	@ (80070e0 <HAL_DMA_IRQHandler+0xa1c>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d031      	beq.n	8006f7c <HAL_DMA_IRQHandler+0x8b8>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a71      	ldr	r2, [pc, #452]	@ (80070e4 <HAL_DMA_IRQHandler+0xa20>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d02c      	beq.n	8006f7c <HAL_DMA_IRQHandler+0x8b8>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a70      	ldr	r2, [pc, #448]	@ (80070e8 <HAL_DMA_IRQHandler+0xa24>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d027      	beq.n	8006f7c <HAL_DMA_IRQHandler+0x8b8>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a6e      	ldr	r2, [pc, #440]	@ (80070ec <HAL_DMA_IRQHandler+0xa28>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d022      	beq.n	8006f7c <HAL_DMA_IRQHandler+0x8b8>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a6d      	ldr	r2, [pc, #436]	@ (80070f0 <HAL_DMA_IRQHandler+0xa2c>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d01d      	beq.n	8006f7c <HAL_DMA_IRQHandler+0x8b8>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a6b      	ldr	r2, [pc, #428]	@ (80070f4 <HAL_DMA_IRQHandler+0xa30>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d018      	beq.n	8006f7c <HAL_DMA_IRQHandler+0x8b8>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a6a      	ldr	r2, [pc, #424]	@ (80070f8 <HAL_DMA_IRQHandler+0xa34>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d013      	beq.n	8006f7c <HAL_DMA_IRQHandler+0x8b8>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a68      	ldr	r2, [pc, #416]	@ (80070fc <HAL_DMA_IRQHandler+0xa38>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d00e      	beq.n	8006f7c <HAL_DMA_IRQHandler+0x8b8>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a67      	ldr	r2, [pc, #412]	@ (8007100 <HAL_DMA_IRQHandler+0xa3c>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d009      	beq.n	8006f7c <HAL_DMA_IRQHandler+0x8b8>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a65      	ldr	r2, [pc, #404]	@ (8007104 <HAL_DMA_IRQHandler+0xa40>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d004      	beq.n	8006f7c <HAL_DMA_IRQHandler+0x8b8>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a64      	ldr	r2, [pc, #400]	@ (8007108 <HAL_DMA_IRQHandler+0xa44>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d108      	bne.n	8006f8e <HAL_DMA_IRQHandler+0x8ca>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f022 0201 	bic.w	r2, r2, #1
 8006f8a:	601a      	str	r2, [r3, #0]
 8006f8c:	e007      	b.n	8006f9e <HAL_DMA_IRQHandler+0x8da>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f022 0201 	bic.w	r2, r2, #1
 8006f9c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	60fb      	str	r3, [r7, #12]
 8006fa4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	d307      	bcc.n	8006fba <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f003 0301 	and.w	r3, r3, #1
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d1f2      	bne.n	8006f9e <HAL_DMA_IRQHandler+0x8da>
 8006fb8:	e000      	b.n	8006fbc <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006fba:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f003 0301 	and.w	r3, r3, #1
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d004      	beq.n	8006fd4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2203      	movs	r2, #3
 8006fce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8006fd2:	e003      	b.n	8006fdc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	f000 8272 	beq.w	80074d2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	4798      	blx	r3
 8006ff6:	e26c      	b.n	80074d2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a43      	ldr	r2, [pc, #268]	@ (800710c <HAL_DMA_IRQHandler+0xa48>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d022      	beq.n	8007048 <HAL_DMA_IRQHandler+0x984>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a42      	ldr	r2, [pc, #264]	@ (8007110 <HAL_DMA_IRQHandler+0xa4c>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d01d      	beq.n	8007048 <HAL_DMA_IRQHandler+0x984>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a40      	ldr	r2, [pc, #256]	@ (8007114 <HAL_DMA_IRQHandler+0xa50>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d018      	beq.n	8007048 <HAL_DMA_IRQHandler+0x984>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a3f      	ldr	r2, [pc, #252]	@ (8007118 <HAL_DMA_IRQHandler+0xa54>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d013      	beq.n	8007048 <HAL_DMA_IRQHandler+0x984>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a3d      	ldr	r2, [pc, #244]	@ (800711c <HAL_DMA_IRQHandler+0xa58>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d00e      	beq.n	8007048 <HAL_DMA_IRQHandler+0x984>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a3c      	ldr	r2, [pc, #240]	@ (8007120 <HAL_DMA_IRQHandler+0xa5c>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d009      	beq.n	8007048 <HAL_DMA_IRQHandler+0x984>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a3a      	ldr	r2, [pc, #232]	@ (8007124 <HAL_DMA_IRQHandler+0xa60>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d004      	beq.n	8007048 <HAL_DMA_IRQHandler+0x984>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a39      	ldr	r2, [pc, #228]	@ (8007128 <HAL_DMA_IRQHandler+0xa64>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d101      	bne.n	800704c <HAL_DMA_IRQHandler+0x988>
 8007048:	2301      	movs	r3, #1
 800704a:	e000      	b.n	800704e <HAL_DMA_IRQHandler+0x98a>
 800704c:	2300      	movs	r3, #0
 800704e:	2b00      	cmp	r3, #0
 8007050:	f000 823f 	beq.w	80074d2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007060:	f003 031f 	and.w	r3, r3, #31
 8007064:	2204      	movs	r2, #4
 8007066:	409a      	lsls	r2, r3
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	4013      	ands	r3, r2
 800706c:	2b00      	cmp	r3, #0
 800706e:	f000 80cd 	beq.w	800720c <HAL_DMA_IRQHandler+0xb48>
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	f003 0304 	and.w	r3, r3, #4
 8007078:	2b00      	cmp	r3, #0
 800707a:	f000 80c7 	beq.w	800720c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007082:	f003 031f 	and.w	r3, r3, #31
 8007086:	2204      	movs	r2, #4
 8007088:	409a      	lsls	r2, r3
 800708a:	69fb      	ldr	r3, [r7, #28]
 800708c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007094:	2b00      	cmp	r3, #0
 8007096:	d049      	beq.n	800712c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d109      	bne.n	80070b6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	f000 8210 	beq.w	80074cc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80070b4:	e20a      	b.n	80074cc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	f000 8206 	beq.w	80074cc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80070c8:	e200      	b.n	80074cc <HAL_DMA_IRQHandler+0xe08>
 80070ca:	bf00      	nop
 80070cc:	40020010 	.word	0x40020010
 80070d0:	40020028 	.word	0x40020028
 80070d4:	40020040 	.word	0x40020040
 80070d8:	40020058 	.word	0x40020058
 80070dc:	40020070 	.word	0x40020070
 80070e0:	40020088 	.word	0x40020088
 80070e4:	400200a0 	.word	0x400200a0
 80070e8:	400200b8 	.word	0x400200b8
 80070ec:	40020410 	.word	0x40020410
 80070f0:	40020428 	.word	0x40020428
 80070f4:	40020440 	.word	0x40020440
 80070f8:	40020458 	.word	0x40020458
 80070fc:	40020470 	.word	0x40020470
 8007100:	40020488 	.word	0x40020488
 8007104:	400204a0 	.word	0x400204a0
 8007108:	400204b8 	.word	0x400204b8
 800710c:	58025408 	.word	0x58025408
 8007110:	5802541c 	.word	0x5802541c
 8007114:	58025430 	.word	0x58025430
 8007118:	58025444 	.word	0x58025444
 800711c:	58025458 	.word	0x58025458
 8007120:	5802546c 	.word	0x5802546c
 8007124:	58025480 	.word	0x58025480
 8007128:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	f003 0320 	and.w	r3, r3, #32
 8007132:	2b00      	cmp	r3, #0
 8007134:	d160      	bne.n	80071f8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a7f      	ldr	r2, [pc, #508]	@ (8007338 <HAL_DMA_IRQHandler+0xc74>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d04a      	beq.n	80071d6 <HAL_DMA_IRQHandler+0xb12>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a7d      	ldr	r2, [pc, #500]	@ (800733c <HAL_DMA_IRQHandler+0xc78>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d045      	beq.n	80071d6 <HAL_DMA_IRQHandler+0xb12>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a7c      	ldr	r2, [pc, #496]	@ (8007340 <HAL_DMA_IRQHandler+0xc7c>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d040      	beq.n	80071d6 <HAL_DMA_IRQHandler+0xb12>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a7a      	ldr	r2, [pc, #488]	@ (8007344 <HAL_DMA_IRQHandler+0xc80>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d03b      	beq.n	80071d6 <HAL_DMA_IRQHandler+0xb12>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a79      	ldr	r2, [pc, #484]	@ (8007348 <HAL_DMA_IRQHandler+0xc84>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d036      	beq.n	80071d6 <HAL_DMA_IRQHandler+0xb12>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a77      	ldr	r2, [pc, #476]	@ (800734c <HAL_DMA_IRQHandler+0xc88>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d031      	beq.n	80071d6 <HAL_DMA_IRQHandler+0xb12>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a76      	ldr	r2, [pc, #472]	@ (8007350 <HAL_DMA_IRQHandler+0xc8c>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d02c      	beq.n	80071d6 <HAL_DMA_IRQHandler+0xb12>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a74      	ldr	r2, [pc, #464]	@ (8007354 <HAL_DMA_IRQHandler+0xc90>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d027      	beq.n	80071d6 <HAL_DMA_IRQHandler+0xb12>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a73      	ldr	r2, [pc, #460]	@ (8007358 <HAL_DMA_IRQHandler+0xc94>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d022      	beq.n	80071d6 <HAL_DMA_IRQHandler+0xb12>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a71      	ldr	r2, [pc, #452]	@ (800735c <HAL_DMA_IRQHandler+0xc98>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d01d      	beq.n	80071d6 <HAL_DMA_IRQHandler+0xb12>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a70      	ldr	r2, [pc, #448]	@ (8007360 <HAL_DMA_IRQHandler+0xc9c>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d018      	beq.n	80071d6 <HAL_DMA_IRQHandler+0xb12>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a6e      	ldr	r2, [pc, #440]	@ (8007364 <HAL_DMA_IRQHandler+0xca0>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d013      	beq.n	80071d6 <HAL_DMA_IRQHandler+0xb12>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a6d      	ldr	r2, [pc, #436]	@ (8007368 <HAL_DMA_IRQHandler+0xca4>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d00e      	beq.n	80071d6 <HAL_DMA_IRQHandler+0xb12>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a6b      	ldr	r2, [pc, #428]	@ (800736c <HAL_DMA_IRQHandler+0xca8>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d009      	beq.n	80071d6 <HAL_DMA_IRQHandler+0xb12>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a6a      	ldr	r2, [pc, #424]	@ (8007370 <HAL_DMA_IRQHandler+0xcac>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d004      	beq.n	80071d6 <HAL_DMA_IRQHandler+0xb12>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a68      	ldr	r2, [pc, #416]	@ (8007374 <HAL_DMA_IRQHandler+0xcb0>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d108      	bne.n	80071e8 <HAL_DMA_IRQHandler+0xb24>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f022 0208 	bic.w	r2, r2, #8
 80071e4:	601a      	str	r2, [r3, #0]
 80071e6:	e007      	b.n	80071f8 <HAL_DMA_IRQHandler+0xb34>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f022 0204 	bic.w	r2, r2, #4
 80071f6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	f000 8165 	beq.w	80074cc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800720a:	e15f      	b.n	80074cc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007210:	f003 031f 	and.w	r3, r3, #31
 8007214:	2202      	movs	r2, #2
 8007216:	409a      	lsls	r2, r3
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	4013      	ands	r3, r2
 800721c:	2b00      	cmp	r3, #0
 800721e:	f000 80c5 	beq.w	80073ac <HAL_DMA_IRQHandler+0xce8>
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	f003 0302 	and.w	r3, r3, #2
 8007228:	2b00      	cmp	r3, #0
 800722a:	f000 80bf 	beq.w	80073ac <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007232:	f003 031f 	and.w	r3, r3, #31
 8007236:	2202      	movs	r2, #2
 8007238:	409a      	lsls	r2, r3
 800723a:	69fb      	ldr	r3, [r7, #28]
 800723c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007244:	2b00      	cmp	r3, #0
 8007246:	d018      	beq.n	800727a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800724e:	2b00      	cmp	r3, #0
 8007250:	d109      	bne.n	8007266 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007256:	2b00      	cmp	r3, #0
 8007258:	f000 813a 	beq.w	80074d0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007264:	e134      	b.n	80074d0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800726a:	2b00      	cmp	r3, #0
 800726c:	f000 8130 	beq.w	80074d0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007278:	e12a      	b.n	80074d0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	f003 0320 	and.w	r3, r3, #32
 8007280:	2b00      	cmp	r3, #0
 8007282:	f040 8089 	bne.w	8007398 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a2b      	ldr	r2, [pc, #172]	@ (8007338 <HAL_DMA_IRQHandler+0xc74>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d04a      	beq.n	8007326 <HAL_DMA_IRQHandler+0xc62>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a29      	ldr	r2, [pc, #164]	@ (800733c <HAL_DMA_IRQHandler+0xc78>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d045      	beq.n	8007326 <HAL_DMA_IRQHandler+0xc62>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a28      	ldr	r2, [pc, #160]	@ (8007340 <HAL_DMA_IRQHandler+0xc7c>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d040      	beq.n	8007326 <HAL_DMA_IRQHandler+0xc62>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a26      	ldr	r2, [pc, #152]	@ (8007344 <HAL_DMA_IRQHandler+0xc80>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d03b      	beq.n	8007326 <HAL_DMA_IRQHandler+0xc62>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a25      	ldr	r2, [pc, #148]	@ (8007348 <HAL_DMA_IRQHandler+0xc84>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d036      	beq.n	8007326 <HAL_DMA_IRQHandler+0xc62>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a23      	ldr	r2, [pc, #140]	@ (800734c <HAL_DMA_IRQHandler+0xc88>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d031      	beq.n	8007326 <HAL_DMA_IRQHandler+0xc62>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a22      	ldr	r2, [pc, #136]	@ (8007350 <HAL_DMA_IRQHandler+0xc8c>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d02c      	beq.n	8007326 <HAL_DMA_IRQHandler+0xc62>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a20      	ldr	r2, [pc, #128]	@ (8007354 <HAL_DMA_IRQHandler+0xc90>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d027      	beq.n	8007326 <HAL_DMA_IRQHandler+0xc62>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a1f      	ldr	r2, [pc, #124]	@ (8007358 <HAL_DMA_IRQHandler+0xc94>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d022      	beq.n	8007326 <HAL_DMA_IRQHandler+0xc62>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a1d      	ldr	r2, [pc, #116]	@ (800735c <HAL_DMA_IRQHandler+0xc98>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d01d      	beq.n	8007326 <HAL_DMA_IRQHandler+0xc62>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a1c      	ldr	r2, [pc, #112]	@ (8007360 <HAL_DMA_IRQHandler+0xc9c>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d018      	beq.n	8007326 <HAL_DMA_IRQHandler+0xc62>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a1a      	ldr	r2, [pc, #104]	@ (8007364 <HAL_DMA_IRQHandler+0xca0>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d013      	beq.n	8007326 <HAL_DMA_IRQHandler+0xc62>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a19      	ldr	r2, [pc, #100]	@ (8007368 <HAL_DMA_IRQHandler+0xca4>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d00e      	beq.n	8007326 <HAL_DMA_IRQHandler+0xc62>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a17      	ldr	r2, [pc, #92]	@ (800736c <HAL_DMA_IRQHandler+0xca8>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d009      	beq.n	8007326 <HAL_DMA_IRQHandler+0xc62>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a16      	ldr	r2, [pc, #88]	@ (8007370 <HAL_DMA_IRQHandler+0xcac>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d004      	beq.n	8007326 <HAL_DMA_IRQHandler+0xc62>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a14      	ldr	r2, [pc, #80]	@ (8007374 <HAL_DMA_IRQHandler+0xcb0>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d128      	bne.n	8007378 <HAL_DMA_IRQHandler+0xcb4>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f022 0214 	bic.w	r2, r2, #20
 8007334:	601a      	str	r2, [r3, #0]
 8007336:	e027      	b.n	8007388 <HAL_DMA_IRQHandler+0xcc4>
 8007338:	40020010 	.word	0x40020010
 800733c:	40020028 	.word	0x40020028
 8007340:	40020040 	.word	0x40020040
 8007344:	40020058 	.word	0x40020058
 8007348:	40020070 	.word	0x40020070
 800734c:	40020088 	.word	0x40020088
 8007350:	400200a0 	.word	0x400200a0
 8007354:	400200b8 	.word	0x400200b8
 8007358:	40020410 	.word	0x40020410
 800735c:	40020428 	.word	0x40020428
 8007360:	40020440 	.word	0x40020440
 8007364:	40020458 	.word	0x40020458
 8007368:	40020470 	.word	0x40020470
 800736c:	40020488 	.word	0x40020488
 8007370:	400204a0 	.word	0x400204a0
 8007374:	400204b8 	.word	0x400204b8
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f022 020a 	bic.w	r2, r2, #10
 8007386:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2201      	movs	r2, #1
 800738c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800739c:	2b00      	cmp	r3, #0
 800739e:	f000 8097 	beq.w	80074d0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80073aa:	e091      	b.n	80074d0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073b0:	f003 031f 	and.w	r3, r3, #31
 80073b4:	2208      	movs	r2, #8
 80073b6:	409a      	lsls	r2, r3
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	4013      	ands	r3, r2
 80073bc:	2b00      	cmp	r3, #0
 80073be:	f000 8088 	beq.w	80074d2 <HAL_DMA_IRQHandler+0xe0e>
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	f003 0308 	and.w	r3, r3, #8
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	f000 8082 	beq.w	80074d2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a41      	ldr	r2, [pc, #260]	@ (80074d8 <HAL_DMA_IRQHandler+0xe14>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d04a      	beq.n	800746e <HAL_DMA_IRQHandler+0xdaa>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a3f      	ldr	r2, [pc, #252]	@ (80074dc <HAL_DMA_IRQHandler+0xe18>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d045      	beq.n	800746e <HAL_DMA_IRQHandler+0xdaa>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a3e      	ldr	r2, [pc, #248]	@ (80074e0 <HAL_DMA_IRQHandler+0xe1c>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d040      	beq.n	800746e <HAL_DMA_IRQHandler+0xdaa>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a3c      	ldr	r2, [pc, #240]	@ (80074e4 <HAL_DMA_IRQHandler+0xe20>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d03b      	beq.n	800746e <HAL_DMA_IRQHandler+0xdaa>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a3b      	ldr	r2, [pc, #236]	@ (80074e8 <HAL_DMA_IRQHandler+0xe24>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d036      	beq.n	800746e <HAL_DMA_IRQHandler+0xdaa>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a39      	ldr	r2, [pc, #228]	@ (80074ec <HAL_DMA_IRQHandler+0xe28>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d031      	beq.n	800746e <HAL_DMA_IRQHandler+0xdaa>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a38      	ldr	r2, [pc, #224]	@ (80074f0 <HAL_DMA_IRQHandler+0xe2c>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d02c      	beq.n	800746e <HAL_DMA_IRQHandler+0xdaa>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a36      	ldr	r2, [pc, #216]	@ (80074f4 <HAL_DMA_IRQHandler+0xe30>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d027      	beq.n	800746e <HAL_DMA_IRQHandler+0xdaa>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a35      	ldr	r2, [pc, #212]	@ (80074f8 <HAL_DMA_IRQHandler+0xe34>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d022      	beq.n	800746e <HAL_DMA_IRQHandler+0xdaa>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a33      	ldr	r2, [pc, #204]	@ (80074fc <HAL_DMA_IRQHandler+0xe38>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d01d      	beq.n	800746e <HAL_DMA_IRQHandler+0xdaa>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a32      	ldr	r2, [pc, #200]	@ (8007500 <HAL_DMA_IRQHandler+0xe3c>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d018      	beq.n	800746e <HAL_DMA_IRQHandler+0xdaa>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a30      	ldr	r2, [pc, #192]	@ (8007504 <HAL_DMA_IRQHandler+0xe40>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d013      	beq.n	800746e <HAL_DMA_IRQHandler+0xdaa>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a2f      	ldr	r2, [pc, #188]	@ (8007508 <HAL_DMA_IRQHandler+0xe44>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d00e      	beq.n	800746e <HAL_DMA_IRQHandler+0xdaa>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a2d      	ldr	r2, [pc, #180]	@ (800750c <HAL_DMA_IRQHandler+0xe48>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d009      	beq.n	800746e <HAL_DMA_IRQHandler+0xdaa>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a2c      	ldr	r2, [pc, #176]	@ (8007510 <HAL_DMA_IRQHandler+0xe4c>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d004      	beq.n	800746e <HAL_DMA_IRQHandler+0xdaa>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a2a      	ldr	r2, [pc, #168]	@ (8007514 <HAL_DMA_IRQHandler+0xe50>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d108      	bne.n	8007480 <HAL_DMA_IRQHandler+0xdbc>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f022 021c 	bic.w	r2, r2, #28
 800747c:	601a      	str	r2, [r3, #0]
 800747e:	e007      	b.n	8007490 <HAL_DMA_IRQHandler+0xdcc>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	681a      	ldr	r2, [r3, #0]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f022 020e 	bic.w	r2, r2, #14
 800748e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007494:	f003 031f 	and.w	r3, r3, #31
 8007498:	2201      	movs	r2, #1
 800749a:	409a      	lsls	r2, r3
 800749c:	69fb      	ldr	r3, [r7, #28]
 800749e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2201      	movs	r2, #1
 80074a4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2201      	movs	r2, #1
 80074aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2200      	movs	r2, #0
 80074b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d009      	beq.n	80074d2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	4798      	blx	r3
 80074c6:	e004      	b.n	80074d2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80074c8:	bf00      	nop
 80074ca:	e002      	b.n	80074d2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80074cc:	bf00      	nop
 80074ce:	e000      	b.n	80074d2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80074d0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80074d2:	3728      	adds	r7, #40	@ 0x28
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}
 80074d8:	40020010 	.word	0x40020010
 80074dc:	40020028 	.word	0x40020028
 80074e0:	40020040 	.word	0x40020040
 80074e4:	40020058 	.word	0x40020058
 80074e8:	40020070 	.word	0x40020070
 80074ec:	40020088 	.word	0x40020088
 80074f0:	400200a0 	.word	0x400200a0
 80074f4:	400200b8 	.word	0x400200b8
 80074f8:	40020410 	.word	0x40020410
 80074fc:	40020428 	.word	0x40020428
 8007500:	40020440 	.word	0x40020440
 8007504:	40020458 	.word	0x40020458
 8007508:	40020470 	.word	0x40020470
 800750c:	40020488 	.word	0x40020488
 8007510:	400204a0 	.word	0x400204a0
 8007514:	400204b8 	.word	0x400204b8

08007518 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007518:	b480      	push	{r7}
 800751a:	b087      	sub	sp, #28
 800751c:	af00      	add	r7, sp, #0
 800751e:	60f8      	str	r0, [r7, #12]
 8007520:	60b9      	str	r1, [r7, #8]
 8007522:	607a      	str	r2, [r7, #4]
 8007524:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800752a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007530:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a7f      	ldr	r2, [pc, #508]	@ (8007734 <DMA_SetConfig+0x21c>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d072      	beq.n	8007622 <DMA_SetConfig+0x10a>
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a7d      	ldr	r2, [pc, #500]	@ (8007738 <DMA_SetConfig+0x220>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d06d      	beq.n	8007622 <DMA_SetConfig+0x10a>
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a7c      	ldr	r2, [pc, #496]	@ (800773c <DMA_SetConfig+0x224>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d068      	beq.n	8007622 <DMA_SetConfig+0x10a>
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a7a      	ldr	r2, [pc, #488]	@ (8007740 <DMA_SetConfig+0x228>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d063      	beq.n	8007622 <DMA_SetConfig+0x10a>
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a79      	ldr	r2, [pc, #484]	@ (8007744 <DMA_SetConfig+0x22c>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d05e      	beq.n	8007622 <DMA_SetConfig+0x10a>
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a77      	ldr	r2, [pc, #476]	@ (8007748 <DMA_SetConfig+0x230>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d059      	beq.n	8007622 <DMA_SetConfig+0x10a>
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a76      	ldr	r2, [pc, #472]	@ (800774c <DMA_SetConfig+0x234>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d054      	beq.n	8007622 <DMA_SetConfig+0x10a>
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a74      	ldr	r2, [pc, #464]	@ (8007750 <DMA_SetConfig+0x238>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d04f      	beq.n	8007622 <DMA_SetConfig+0x10a>
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a73      	ldr	r2, [pc, #460]	@ (8007754 <DMA_SetConfig+0x23c>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d04a      	beq.n	8007622 <DMA_SetConfig+0x10a>
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a71      	ldr	r2, [pc, #452]	@ (8007758 <DMA_SetConfig+0x240>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d045      	beq.n	8007622 <DMA_SetConfig+0x10a>
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a70      	ldr	r2, [pc, #448]	@ (800775c <DMA_SetConfig+0x244>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d040      	beq.n	8007622 <DMA_SetConfig+0x10a>
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a6e      	ldr	r2, [pc, #440]	@ (8007760 <DMA_SetConfig+0x248>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d03b      	beq.n	8007622 <DMA_SetConfig+0x10a>
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a6d      	ldr	r2, [pc, #436]	@ (8007764 <DMA_SetConfig+0x24c>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d036      	beq.n	8007622 <DMA_SetConfig+0x10a>
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a6b      	ldr	r2, [pc, #428]	@ (8007768 <DMA_SetConfig+0x250>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d031      	beq.n	8007622 <DMA_SetConfig+0x10a>
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a6a      	ldr	r2, [pc, #424]	@ (800776c <DMA_SetConfig+0x254>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d02c      	beq.n	8007622 <DMA_SetConfig+0x10a>
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a68      	ldr	r2, [pc, #416]	@ (8007770 <DMA_SetConfig+0x258>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d027      	beq.n	8007622 <DMA_SetConfig+0x10a>
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a67      	ldr	r2, [pc, #412]	@ (8007774 <DMA_SetConfig+0x25c>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d022      	beq.n	8007622 <DMA_SetConfig+0x10a>
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a65      	ldr	r2, [pc, #404]	@ (8007778 <DMA_SetConfig+0x260>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d01d      	beq.n	8007622 <DMA_SetConfig+0x10a>
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a64      	ldr	r2, [pc, #400]	@ (800777c <DMA_SetConfig+0x264>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d018      	beq.n	8007622 <DMA_SetConfig+0x10a>
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a62      	ldr	r2, [pc, #392]	@ (8007780 <DMA_SetConfig+0x268>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d013      	beq.n	8007622 <DMA_SetConfig+0x10a>
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a61      	ldr	r2, [pc, #388]	@ (8007784 <DMA_SetConfig+0x26c>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d00e      	beq.n	8007622 <DMA_SetConfig+0x10a>
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a5f      	ldr	r2, [pc, #380]	@ (8007788 <DMA_SetConfig+0x270>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d009      	beq.n	8007622 <DMA_SetConfig+0x10a>
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a5e      	ldr	r2, [pc, #376]	@ (800778c <DMA_SetConfig+0x274>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d004      	beq.n	8007622 <DMA_SetConfig+0x10a>
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a5c      	ldr	r2, [pc, #368]	@ (8007790 <DMA_SetConfig+0x278>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d101      	bne.n	8007626 <DMA_SetConfig+0x10e>
 8007622:	2301      	movs	r3, #1
 8007624:	e000      	b.n	8007628 <DMA_SetConfig+0x110>
 8007626:	2300      	movs	r3, #0
 8007628:	2b00      	cmp	r3, #0
 800762a:	d00d      	beq.n	8007648 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007630:	68fa      	ldr	r2, [r7, #12]
 8007632:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007634:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800763a:	2b00      	cmp	r3, #0
 800763c:	d004      	beq.n	8007648 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007642:	68fa      	ldr	r2, [r7, #12]
 8007644:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007646:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a39      	ldr	r2, [pc, #228]	@ (8007734 <DMA_SetConfig+0x21c>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d04a      	beq.n	80076e8 <DMA_SetConfig+0x1d0>
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a38      	ldr	r2, [pc, #224]	@ (8007738 <DMA_SetConfig+0x220>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d045      	beq.n	80076e8 <DMA_SetConfig+0x1d0>
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a36      	ldr	r2, [pc, #216]	@ (800773c <DMA_SetConfig+0x224>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d040      	beq.n	80076e8 <DMA_SetConfig+0x1d0>
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a35      	ldr	r2, [pc, #212]	@ (8007740 <DMA_SetConfig+0x228>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d03b      	beq.n	80076e8 <DMA_SetConfig+0x1d0>
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a33      	ldr	r2, [pc, #204]	@ (8007744 <DMA_SetConfig+0x22c>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d036      	beq.n	80076e8 <DMA_SetConfig+0x1d0>
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a32      	ldr	r2, [pc, #200]	@ (8007748 <DMA_SetConfig+0x230>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d031      	beq.n	80076e8 <DMA_SetConfig+0x1d0>
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a30      	ldr	r2, [pc, #192]	@ (800774c <DMA_SetConfig+0x234>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d02c      	beq.n	80076e8 <DMA_SetConfig+0x1d0>
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a2f      	ldr	r2, [pc, #188]	@ (8007750 <DMA_SetConfig+0x238>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d027      	beq.n	80076e8 <DMA_SetConfig+0x1d0>
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a2d      	ldr	r2, [pc, #180]	@ (8007754 <DMA_SetConfig+0x23c>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d022      	beq.n	80076e8 <DMA_SetConfig+0x1d0>
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a2c      	ldr	r2, [pc, #176]	@ (8007758 <DMA_SetConfig+0x240>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d01d      	beq.n	80076e8 <DMA_SetConfig+0x1d0>
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a2a      	ldr	r2, [pc, #168]	@ (800775c <DMA_SetConfig+0x244>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d018      	beq.n	80076e8 <DMA_SetConfig+0x1d0>
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a29      	ldr	r2, [pc, #164]	@ (8007760 <DMA_SetConfig+0x248>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d013      	beq.n	80076e8 <DMA_SetConfig+0x1d0>
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a27      	ldr	r2, [pc, #156]	@ (8007764 <DMA_SetConfig+0x24c>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d00e      	beq.n	80076e8 <DMA_SetConfig+0x1d0>
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a26      	ldr	r2, [pc, #152]	@ (8007768 <DMA_SetConfig+0x250>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d009      	beq.n	80076e8 <DMA_SetConfig+0x1d0>
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a24      	ldr	r2, [pc, #144]	@ (800776c <DMA_SetConfig+0x254>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d004      	beq.n	80076e8 <DMA_SetConfig+0x1d0>
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a23      	ldr	r2, [pc, #140]	@ (8007770 <DMA_SetConfig+0x258>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d101      	bne.n	80076ec <DMA_SetConfig+0x1d4>
 80076e8:	2301      	movs	r3, #1
 80076ea:	e000      	b.n	80076ee <DMA_SetConfig+0x1d6>
 80076ec:	2300      	movs	r3, #0
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d059      	beq.n	80077a6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076f6:	f003 031f 	and.w	r3, r3, #31
 80076fa:	223f      	movs	r2, #63	@ 0x3f
 80076fc:	409a      	lsls	r2, r3
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007710:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	683a      	ldr	r2, [r7, #0]
 8007718:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	689b      	ldr	r3, [r3, #8]
 800771e:	2b40      	cmp	r3, #64	@ 0x40
 8007720:	d138      	bne.n	8007794 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	687a      	ldr	r2, [r7, #4]
 8007728:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	68ba      	ldr	r2, [r7, #8]
 8007730:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007732:	e086      	b.n	8007842 <DMA_SetConfig+0x32a>
 8007734:	40020010 	.word	0x40020010
 8007738:	40020028 	.word	0x40020028
 800773c:	40020040 	.word	0x40020040
 8007740:	40020058 	.word	0x40020058
 8007744:	40020070 	.word	0x40020070
 8007748:	40020088 	.word	0x40020088
 800774c:	400200a0 	.word	0x400200a0
 8007750:	400200b8 	.word	0x400200b8
 8007754:	40020410 	.word	0x40020410
 8007758:	40020428 	.word	0x40020428
 800775c:	40020440 	.word	0x40020440
 8007760:	40020458 	.word	0x40020458
 8007764:	40020470 	.word	0x40020470
 8007768:	40020488 	.word	0x40020488
 800776c:	400204a0 	.word	0x400204a0
 8007770:	400204b8 	.word	0x400204b8
 8007774:	58025408 	.word	0x58025408
 8007778:	5802541c 	.word	0x5802541c
 800777c:	58025430 	.word	0x58025430
 8007780:	58025444 	.word	0x58025444
 8007784:	58025458 	.word	0x58025458
 8007788:	5802546c 	.word	0x5802546c
 800778c:	58025480 	.word	0x58025480
 8007790:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	68ba      	ldr	r2, [r7, #8]
 800779a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	687a      	ldr	r2, [r7, #4]
 80077a2:	60da      	str	r2, [r3, #12]
}
 80077a4:	e04d      	b.n	8007842 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a29      	ldr	r2, [pc, #164]	@ (8007850 <DMA_SetConfig+0x338>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d022      	beq.n	80077f6 <DMA_SetConfig+0x2de>
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a27      	ldr	r2, [pc, #156]	@ (8007854 <DMA_SetConfig+0x33c>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d01d      	beq.n	80077f6 <DMA_SetConfig+0x2de>
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a26      	ldr	r2, [pc, #152]	@ (8007858 <DMA_SetConfig+0x340>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d018      	beq.n	80077f6 <DMA_SetConfig+0x2de>
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a24      	ldr	r2, [pc, #144]	@ (800785c <DMA_SetConfig+0x344>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d013      	beq.n	80077f6 <DMA_SetConfig+0x2de>
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a23      	ldr	r2, [pc, #140]	@ (8007860 <DMA_SetConfig+0x348>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d00e      	beq.n	80077f6 <DMA_SetConfig+0x2de>
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a21      	ldr	r2, [pc, #132]	@ (8007864 <DMA_SetConfig+0x34c>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d009      	beq.n	80077f6 <DMA_SetConfig+0x2de>
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a20      	ldr	r2, [pc, #128]	@ (8007868 <DMA_SetConfig+0x350>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d004      	beq.n	80077f6 <DMA_SetConfig+0x2de>
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a1e      	ldr	r2, [pc, #120]	@ (800786c <DMA_SetConfig+0x354>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d101      	bne.n	80077fa <DMA_SetConfig+0x2e2>
 80077f6:	2301      	movs	r3, #1
 80077f8:	e000      	b.n	80077fc <DMA_SetConfig+0x2e4>
 80077fa:	2300      	movs	r3, #0
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d020      	beq.n	8007842 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007804:	f003 031f 	and.w	r3, r3, #31
 8007808:	2201      	movs	r2, #1
 800780a:	409a      	lsls	r2, r3
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	683a      	ldr	r2, [r7, #0]
 8007816:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	689b      	ldr	r3, [r3, #8]
 800781c:	2b40      	cmp	r3, #64	@ 0x40
 800781e:	d108      	bne.n	8007832 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	687a      	ldr	r2, [r7, #4]
 8007826:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	68ba      	ldr	r2, [r7, #8]
 800782e:	60da      	str	r2, [r3, #12]
}
 8007830:	e007      	b.n	8007842 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	68ba      	ldr	r2, [r7, #8]
 8007838:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	60da      	str	r2, [r3, #12]
}
 8007842:	bf00      	nop
 8007844:	371c      	adds	r7, #28
 8007846:	46bd      	mov	sp, r7
 8007848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784c:	4770      	bx	lr
 800784e:	bf00      	nop
 8007850:	58025408 	.word	0x58025408
 8007854:	5802541c 	.word	0x5802541c
 8007858:	58025430 	.word	0x58025430
 800785c:	58025444 	.word	0x58025444
 8007860:	58025458 	.word	0x58025458
 8007864:	5802546c 	.word	0x5802546c
 8007868:	58025480 	.word	0x58025480
 800786c:	58025494 	.word	0x58025494

08007870 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007870:	b480      	push	{r7}
 8007872:	b085      	sub	sp, #20
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a42      	ldr	r2, [pc, #264]	@ (8007988 <DMA_CalcBaseAndBitshift+0x118>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d04a      	beq.n	8007918 <DMA_CalcBaseAndBitshift+0xa8>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a41      	ldr	r2, [pc, #260]	@ (800798c <DMA_CalcBaseAndBitshift+0x11c>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d045      	beq.n	8007918 <DMA_CalcBaseAndBitshift+0xa8>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a3f      	ldr	r2, [pc, #252]	@ (8007990 <DMA_CalcBaseAndBitshift+0x120>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d040      	beq.n	8007918 <DMA_CalcBaseAndBitshift+0xa8>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a3e      	ldr	r2, [pc, #248]	@ (8007994 <DMA_CalcBaseAndBitshift+0x124>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d03b      	beq.n	8007918 <DMA_CalcBaseAndBitshift+0xa8>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a3c      	ldr	r2, [pc, #240]	@ (8007998 <DMA_CalcBaseAndBitshift+0x128>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d036      	beq.n	8007918 <DMA_CalcBaseAndBitshift+0xa8>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a3b      	ldr	r2, [pc, #236]	@ (800799c <DMA_CalcBaseAndBitshift+0x12c>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d031      	beq.n	8007918 <DMA_CalcBaseAndBitshift+0xa8>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a39      	ldr	r2, [pc, #228]	@ (80079a0 <DMA_CalcBaseAndBitshift+0x130>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d02c      	beq.n	8007918 <DMA_CalcBaseAndBitshift+0xa8>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a38      	ldr	r2, [pc, #224]	@ (80079a4 <DMA_CalcBaseAndBitshift+0x134>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d027      	beq.n	8007918 <DMA_CalcBaseAndBitshift+0xa8>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a36      	ldr	r2, [pc, #216]	@ (80079a8 <DMA_CalcBaseAndBitshift+0x138>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d022      	beq.n	8007918 <DMA_CalcBaseAndBitshift+0xa8>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a35      	ldr	r2, [pc, #212]	@ (80079ac <DMA_CalcBaseAndBitshift+0x13c>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d01d      	beq.n	8007918 <DMA_CalcBaseAndBitshift+0xa8>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a33      	ldr	r2, [pc, #204]	@ (80079b0 <DMA_CalcBaseAndBitshift+0x140>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d018      	beq.n	8007918 <DMA_CalcBaseAndBitshift+0xa8>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a32      	ldr	r2, [pc, #200]	@ (80079b4 <DMA_CalcBaseAndBitshift+0x144>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d013      	beq.n	8007918 <DMA_CalcBaseAndBitshift+0xa8>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a30      	ldr	r2, [pc, #192]	@ (80079b8 <DMA_CalcBaseAndBitshift+0x148>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d00e      	beq.n	8007918 <DMA_CalcBaseAndBitshift+0xa8>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a2f      	ldr	r2, [pc, #188]	@ (80079bc <DMA_CalcBaseAndBitshift+0x14c>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d009      	beq.n	8007918 <DMA_CalcBaseAndBitshift+0xa8>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a2d      	ldr	r2, [pc, #180]	@ (80079c0 <DMA_CalcBaseAndBitshift+0x150>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d004      	beq.n	8007918 <DMA_CalcBaseAndBitshift+0xa8>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a2c      	ldr	r2, [pc, #176]	@ (80079c4 <DMA_CalcBaseAndBitshift+0x154>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d101      	bne.n	800791c <DMA_CalcBaseAndBitshift+0xac>
 8007918:	2301      	movs	r3, #1
 800791a:	e000      	b.n	800791e <DMA_CalcBaseAndBitshift+0xae>
 800791c:	2300      	movs	r3, #0
 800791e:	2b00      	cmp	r3, #0
 8007920:	d024      	beq.n	800796c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	b2db      	uxtb	r3, r3
 8007928:	3b10      	subs	r3, #16
 800792a:	4a27      	ldr	r2, [pc, #156]	@ (80079c8 <DMA_CalcBaseAndBitshift+0x158>)
 800792c:	fba2 2303 	umull	r2, r3, r2, r3
 8007930:	091b      	lsrs	r3, r3, #4
 8007932:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f003 0307 	and.w	r3, r3, #7
 800793a:	4a24      	ldr	r2, [pc, #144]	@ (80079cc <DMA_CalcBaseAndBitshift+0x15c>)
 800793c:	5cd3      	ldrb	r3, [r2, r3]
 800793e:	461a      	mov	r2, r3
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2b03      	cmp	r3, #3
 8007948:	d908      	bls.n	800795c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	461a      	mov	r2, r3
 8007950:	4b1f      	ldr	r3, [pc, #124]	@ (80079d0 <DMA_CalcBaseAndBitshift+0x160>)
 8007952:	4013      	ands	r3, r2
 8007954:	1d1a      	adds	r2, r3, #4
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	659a      	str	r2, [r3, #88]	@ 0x58
 800795a:	e00d      	b.n	8007978 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	461a      	mov	r2, r3
 8007962:	4b1b      	ldr	r3, [pc, #108]	@ (80079d0 <DMA_CalcBaseAndBitshift+0x160>)
 8007964:	4013      	ands	r3, r2
 8007966:	687a      	ldr	r2, [r7, #4]
 8007968:	6593      	str	r3, [r2, #88]	@ 0x58
 800796a:	e005      	b.n	8007978 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800797c:	4618      	mov	r0, r3
 800797e:	3714      	adds	r7, #20
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr
 8007988:	40020010 	.word	0x40020010
 800798c:	40020028 	.word	0x40020028
 8007990:	40020040 	.word	0x40020040
 8007994:	40020058 	.word	0x40020058
 8007998:	40020070 	.word	0x40020070
 800799c:	40020088 	.word	0x40020088
 80079a0:	400200a0 	.word	0x400200a0
 80079a4:	400200b8 	.word	0x400200b8
 80079a8:	40020410 	.word	0x40020410
 80079ac:	40020428 	.word	0x40020428
 80079b0:	40020440 	.word	0x40020440
 80079b4:	40020458 	.word	0x40020458
 80079b8:	40020470 	.word	0x40020470
 80079bc:	40020488 	.word	0x40020488
 80079c0:	400204a0 	.word	0x400204a0
 80079c4:	400204b8 	.word	0x400204b8
 80079c8:	aaaaaaab 	.word	0xaaaaaaab
 80079cc:	08012720 	.word	0x08012720
 80079d0:	fffffc00 	.word	0xfffffc00

080079d4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b085      	sub	sp, #20
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80079dc:	2300      	movs	r3, #0
 80079de:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	699b      	ldr	r3, [r3, #24]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d120      	bne.n	8007a2a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079ec:	2b03      	cmp	r3, #3
 80079ee:	d858      	bhi.n	8007aa2 <DMA_CheckFifoParam+0xce>
 80079f0:	a201      	add	r2, pc, #4	@ (adr r2, 80079f8 <DMA_CheckFifoParam+0x24>)
 80079f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079f6:	bf00      	nop
 80079f8:	08007a09 	.word	0x08007a09
 80079fc:	08007a1b 	.word	0x08007a1b
 8007a00:	08007a09 	.word	0x08007a09
 8007a04:	08007aa3 	.word	0x08007aa3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a0c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d048      	beq.n	8007aa6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007a14:	2301      	movs	r3, #1
 8007a16:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007a18:	e045      	b.n	8007aa6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a1e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007a22:	d142      	bne.n	8007aaa <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007a24:	2301      	movs	r3, #1
 8007a26:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007a28:	e03f      	b.n	8007aaa <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	699b      	ldr	r3, [r3, #24]
 8007a2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a32:	d123      	bne.n	8007a7c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a38:	2b03      	cmp	r3, #3
 8007a3a:	d838      	bhi.n	8007aae <DMA_CheckFifoParam+0xda>
 8007a3c:	a201      	add	r2, pc, #4	@ (adr r2, 8007a44 <DMA_CheckFifoParam+0x70>)
 8007a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a42:	bf00      	nop
 8007a44:	08007a55 	.word	0x08007a55
 8007a48:	08007a5b 	.word	0x08007a5b
 8007a4c:	08007a55 	.word	0x08007a55
 8007a50:	08007a6d 	.word	0x08007a6d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007a54:	2301      	movs	r3, #1
 8007a56:	73fb      	strb	r3, [r7, #15]
        break;
 8007a58:	e030      	b.n	8007abc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a5e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d025      	beq.n	8007ab2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007a66:	2301      	movs	r3, #1
 8007a68:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007a6a:	e022      	b.n	8007ab2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a70:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007a74:	d11f      	bne.n	8007ab6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007a76:	2301      	movs	r3, #1
 8007a78:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007a7a:	e01c      	b.n	8007ab6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a80:	2b02      	cmp	r3, #2
 8007a82:	d902      	bls.n	8007a8a <DMA_CheckFifoParam+0xb6>
 8007a84:	2b03      	cmp	r3, #3
 8007a86:	d003      	beq.n	8007a90 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007a88:	e018      	b.n	8007abc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	73fb      	strb	r3, [r7, #15]
        break;
 8007a8e:	e015      	b.n	8007abc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a94:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d00e      	beq.n	8007aba <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	73fb      	strb	r3, [r7, #15]
    break;
 8007aa0:	e00b      	b.n	8007aba <DMA_CheckFifoParam+0xe6>
        break;
 8007aa2:	bf00      	nop
 8007aa4:	e00a      	b.n	8007abc <DMA_CheckFifoParam+0xe8>
        break;
 8007aa6:	bf00      	nop
 8007aa8:	e008      	b.n	8007abc <DMA_CheckFifoParam+0xe8>
        break;
 8007aaa:	bf00      	nop
 8007aac:	e006      	b.n	8007abc <DMA_CheckFifoParam+0xe8>
        break;
 8007aae:	bf00      	nop
 8007ab0:	e004      	b.n	8007abc <DMA_CheckFifoParam+0xe8>
        break;
 8007ab2:	bf00      	nop
 8007ab4:	e002      	b.n	8007abc <DMA_CheckFifoParam+0xe8>
        break;
 8007ab6:	bf00      	nop
 8007ab8:	e000      	b.n	8007abc <DMA_CheckFifoParam+0xe8>
    break;
 8007aba:	bf00      	nop
    }
  }

  return status;
 8007abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3714      	adds	r7, #20
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac8:	4770      	bx	lr
 8007aca:	bf00      	nop

08007acc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b085      	sub	sp, #20
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a38      	ldr	r2, [pc, #224]	@ (8007bc0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d022      	beq.n	8007b2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a36      	ldr	r2, [pc, #216]	@ (8007bc4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d01d      	beq.n	8007b2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a35      	ldr	r2, [pc, #212]	@ (8007bc8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d018      	beq.n	8007b2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a33      	ldr	r2, [pc, #204]	@ (8007bcc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d013      	beq.n	8007b2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a32      	ldr	r2, [pc, #200]	@ (8007bd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d00e      	beq.n	8007b2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a30      	ldr	r2, [pc, #192]	@ (8007bd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d009      	beq.n	8007b2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a2f      	ldr	r2, [pc, #188]	@ (8007bd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d004      	beq.n	8007b2a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a2d      	ldr	r2, [pc, #180]	@ (8007bdc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d101      	bne.n	8007b2e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	e000      	b.n	8007b30 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007b2e:	2300      	movs	r3, #0
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d01a      	beq.n	8007b6a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	3b08      	subs	r3, #8
 8007b3c:	4a28      	ldr	r2, [pc, #160]	@ (8007be0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8007b42:	091b      	lsrs	r3, r3, #4
 8007b44:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007b46:	68fa      	ldr	r2, [r7, #12]
 8007b48:	4b26      	ldr	r3, [pc, #152]	@ (8007be4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007b4a:	4413      	add	r3, r2
 8007b4c:	009b      	lsls	r3, r3, #2
 8007b4e:	461a      	mov	r2, r3
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	4a24      	ldr	r2, [pc, #144]	@ (8007be8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007b58:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	f003 031f 	and.w	r3, r3, #31
 8007b60:	2201      	movs	r2, #1
 8007b62:	409a      	lsls	r2, r3
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007b68:	e024      	b.n	8007bb4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	b2db      	uxtb	r3, r3
 8007b70:	3b10      	subs	r3, #16
 8007b72:	4a1e      	ldr	r2, [pc, #120]	@ (8007bec <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007b74:	fba2 2303 	umull	r2, r3, r2, r3
 8007b78:	091b      	lsrs	r3, r3, #4
 8007b7a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	4a1c      	ldr	r2, [pc, #112]	@ (8007bf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d806      	bhi.n	8007b92 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	4a1b      	ldr	r2, [pc, #108]	@ (8007bf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d902      	bls.n	8007b92 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	3308      	adds	r3, #8
 8007b90:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007b92:	68fa      	ldr	r2, [r7, #12]
 8007b94:	4b18      	ldr	r3, [pc, #96]	@ (8007bf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007b96:	4413      	add	r3, r2
 8007b98:	009b      	lsls	r3, r3, #2
 8007b9a:	461a      	mov	r2, r3
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	4a16      	ldr	r2, [pc, #88]	@ (8007bfc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007ba4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	f003 031f 	and.w	r3, r3, #31
 8007bac:	2201      	movs	r2, #1
 8007bae:	409a      	lsls	r2, r3
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007bb4:	bf00      	nop
 8007bb6:	3714      	adds	r7, #20
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr
 8007bc0:	58025408 	.word	0x58025408
 8007bc4:	5802541c 	.word	0x5802541c
 8007bc8:	58025430 	.word	0x58025430
 8007bcc:	58025444 	.word	0x58025444
 8007bd0:	58025458 	.word	0x58025458
 8007bd4:	5802546c 	.word	0x5802546c
 8007bd8:	58025480 	.word	0x58025480
 8007bdc:	58025494 	.word	0x58025494
 8007be0:	cccccccd 	.word	0xcccccccd
 8007be4:	16009600 	.word	0x16009600
 8007be8:	58025880 	.word	0x58025880
 8007bec:	aaaaaaab 	.word	0xaaaaaaab
 8007bf0:	400204b8 	.word	0x400204b8
 8007bf4:	4002040f 	.word	0x4002040f
 8007bf8:	10008200 	.word	0x10008200
 8007bfc:	40020880 	.word	0x40020880

08007c00 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b085      	sub	sp, #20
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	b2db      	uxtb	r3, r3
 8007c0e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d04a      	beq.n	8007cac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2b08      	cmp	r3, #8
 8007c1a:	d847      	bhi.n	8007cac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a25      	ldr	r2, [pc, #148]	@ (8007cb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d022      	beq.n	8007c6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a24      	ldr	r2, [pc, #144]	@ (8007cbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d01d      	beq.n	8007c6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a22      	ldr	r2, [pc, #136]	@ (8007cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d018      	beq.n	8007c6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a21      	ldr	r2, [pc, #132]	@ (8007cc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d013      	beq.n	8007c6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4a1f      	ldr	r2, [pc, #124]	@ (8007cc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d00e      	beq.n	8007c6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4a1e      	ldr	r2, [pc, #120]	@ (8007ccc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d009      	beq.n	8007c6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4a1c      	ldr	r2, [pc, #112]	@ (8007cd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d004      	beq.n	8007c6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4a1b      	ldr	r2, [pc, #108]	@ (8007cd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d101      	bne.n	8007c70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	e000      	b.n	8007c72 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007c70:	2300      	movs	r3, #0
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d00a      	beq.n	8007c8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007c76:	68fa      	ldr	r2, [r7, #12]
 8007c78:	4b17      	ldr	r3, [pc, #92]	@ (8007cd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007c7a:	4413      	add	r3, r2
 8007c7c:	009b      	lsls	r3, r3, #2
 8007c7e:	461a      	mov	r2, r3
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	4a15      	ldr	r2, [pc, #84]	@ (8007cdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007c88:	671a      	str	r2, [r3, #112]	@ 0x70
 8007c8a:	e009      	b.n	8007ca0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007c8c:	68fa      	ldr	r2, [r7, #12]
 8007c8e:	4b14      	ldr	r3, [pc, #80]	@ (8007ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007c90:	4413      	add	r3, r2
 8007c92:	009b      	lsls	r3, r3, #2
 8007c94:	461a      	mov	r2, r3
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	4a11      	ldr	r2, [pc, #68]	@ (8007ce4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007c9e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	3b01      	subs	r3, #1
 8007ca4:	2201      	movs	r2, #1
 8007ca6:	409a      	lsls	r2, r3
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8007cac:	bf00      	nop
 8007cae:	3714      	adds	r7, #20
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr
 8007cb8:	58025408 	.word	0x58025408
 8007cbc:	5802541c 	.word	0x5802541c
 8007cc0:	58025430 	.word	0x58025430
 8007cc4:	58025444 	.word	0x58025444
 8007cc8:	58025458 	.word	0x58025458
 8007ccc:	5802546c 	.word	0x5802546c
 8007cd0:	58025480 	.word	0x58025480
 8007cd4:	58025494 	.word	0x58025494
 8007cd8:	1600963f 	.word	0x1600963f
 8007cdc:	58025940 	.word	0x58025940
 8007ce0:	1000823f 	.word	0x1000823f
 8007ce4:	40020940 	.word	0x40020940

08007ce8 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b087      	sub	sp, #28
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	60f8      	str	r0, [r7, #12]
 8007cf0:	460b      	mov	r3, r1
 8007cf2:	607a      	str	r2, [r7, #4]
 8007cf4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d101      	bne.n	8007d04 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8007d00:	2301      	movs	r3, #1
 8007d02:	e00a      	b.n	8007d1a <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8007d04:	7afb      	ldrb	r3, [r7, #11]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d103      	bne.n	8007d12 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	687a      	ldr	r2, [r7, #4]
 8007d0e:	605a      	str	r2, [r3, #4]
      break;
 8007d10:	e002      	b.n	8007d18 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8007d12:	2301      	movs	r3, #1
 8007d14:	75fb      	strb	r3, [r7, #23]
      break;
 8007d16:	bf00      	nop
  }

  return status;
 8007d18:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	371c      	adds	r7, #28
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr

08007d26 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8007d26:	b480      	push	{r7}
 8007d28:	b083      	sub	sp, #12
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
 8007d2e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d101      	bne.n	8007d3a <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8007d36:	2301      	movs	r3, #1
 8007d38:	e003      	b.n	8007d42 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	683a      	ldr	r2, [r7, #0]
 8007d3e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8007d40:	2300      	movs	r3, #0
  }
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	370c      	adds	r7, #12
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr
	...

08007d50 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b086      	sub	sp, #24
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	0c1b      	lsrs	r3, r3, #16
 8007d5e:	f003 0303 	and.w	r3, r3, #3
 8007d62:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f003 031f 	and.w	r3, r3, #31
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d72:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8007d74:	f7fd f96a 	bl	800504c <HAL_GetCurrentCPUID>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	2b03      	cmp	r3, #3
 8007d7c:	d105      	bne.n	8007d8a <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	011a      	lsls	r2, r3, #4
 8007d82:	4b0f      	ldr	r3, [pc, #60]	@ (8007dc0 <HAL_EXTI_IRQHandler+0x70>)
 8007d84:	4413      	add	r3, r2
 8007d86:	617b      	str	r3, [r7, #20]
 8007d88:	e004      	b.n	8007d94 <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	011a      	lsls	r2, r3, #4
 8007d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8007dc4 <HAL_EXTI_IRQHandler+0x74>)
 8007d90:	4413      	add	r3, r2
 8007d92:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	68fa      	ldr	r2, [r7, #12]
 8007d9a:	4013      	ands	r3, r2
 8007d9c:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d009      	beq.n	8007db8 <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	68fa      	ldr	r2, [r7, #12]
 8007da8:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d002      	beq.n	8007db8 <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	4798      	blx	r3
    }
  }
}
 8007db8:	bf00      	nop
 8007dba:	3718      	adds	r7, #24
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}
 8007dc0:	58000088 	.word	0x58000088
 8007dc4:	580000c8 	.word	0x580000c8

08007dc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b089      	sub	sp, #36	@ 0x24
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007dd6:	4b89      	ldr	r3, [pc, #548]	@ (8007ffc <HAL_GPIO_Init+0x234>)
 8007dd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007dda:	e194      	b.n	8008106 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	681a      	ldr	r2, [r3, #0]
 8007de0:	2101      	movs	r1, #1
 8007de2:	69fb      	ldr	r3, [r7, #28]
 8007de4:	fa01 f303 	lsl.w	r3, r1, r3
 8007de8:	4013      	ands	r3, r2
 8007dea:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	f000 8186 	beq.w	8008100 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	685b      	ldr	r3, [r3, #4]
 8007df8:	f003 0303 	and.w	r3, r3, #3
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d005      	beq.n	8007e0c <HAL_GPIO_Init+0x44>
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	f003 0303 	and.w	r3, r3, #3
 8007e08:	2b02      	cmp	r3, #2
 8007e0a:	d130      	bne.n	8007e6e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007e12:	69fb      	ldr	r3, [r7, #28]
 8007e14:	005b      	lsls	r3, r3, #1
 8007e16:	2203      	movs	r2, #3
 8007e18:	fa02 f303 	lsl.w	r3, r2, r3
 8007e1c:	43db      	mvns	r3, r3
 8007e1e:	69ba      	ldr	r2, [r7, #24]
 8007e20:	4013      	ands	r3, r2
 8007e22:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	68da      	ldr	r2, [r3, #12]
 8007e28:	69fb      	ldr	r3, [r7, #28]
 8007e2a:	005b      	lsls	r3, r3, #1
 8007e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e30:	69ba      	ldr	r2, [r7, #24]
 8007e32:	4313      	orrs	r3, r2
 8007e34:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	69ba      	ldr	r2, [r7, #24]
 8007e3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	685b      	ldr	r3, [r3, #4]
 8007e40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007e42:	2201      	movs	r2, #1
 8007e44:	69fb      	ldr	r3, [r7, #28]
 8007e46:	fa02 f303 	lsl.w	r3, r2, r3
 8007e4a:	43db      	mvns	r3, r3
 8007e4c:	69ba      	ldr	r2, [r7, #24]
 8007e4e:	4013      	ands	r3, r2
 8007e50:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	091b      	lsrs	r3, r3, #4
 8007e58:	f003 0201 	and.w	r2, r3, #1
 8007e5c:	69fb      	ldr	r3, [r7, #28]
 8007e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e62:	69ba      	ldr	r2, [r7, #24]
 8007e64:	4313      	orrs	r3, r2
 8007e66:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	69ba      	ldr	r2, [r7, #24]
 8007e6c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	f003 0303 	and.w	r3, r3, #3
 8007e76:	2b03      	cmp	r3, #3
 8007e78:	d017      	beq.n	8007eaa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	68db      	ldr	r3, [r3, #12]
 8007e7e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007e80:	69fb      	ldr	r3, [r7, #28]
 8007e82:	005b      	lsls	r3, r3, #1
 8007e84:	2203      	movs	r2, #3
 8007e86:	fa02 f303 	lsl.w	r3, r2, r3
 8007e8a:	43db      	mvns	r3, r3
 8007e8c:	69ba      	ldr	r2, [r7, #24]
 8007e8e:	4013      	ands	r3, r2
 8007e90:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	689a      	ldr	r2, [r3, #8]
 8007e96:	69fb      	ldr	r3, [r7, #28]
 8007e98:	005b      	lsls	r3, r3, #1
 8007e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e9e:	69ba      	ldr	r2, [r7, #24]
 8007ea0:	4313      	orrs	r3, r2
 8007ea2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	69ba      	ldr	r2, [r7, #24]
 8007ea8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	685b      	ldr	r3, [r3, #4]
 8007eae:	f003 0303 	and.w	r3, r3, #3
 8007eb2:	2b02      	cmp	r3, #2
 8007eb4:	d123      	bne.n	8007efe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007eb6:	69fb      	ldr	r3, [r7, #28]
 8007eb8:	08da      	lsrs	r2, r3, #3
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	3208      	adds	r2, #8
 8007ebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007ec4:	69fb      	ldr	r3, [r7, #28]
 8007ec6:	f003 0307 	and.w	r3, r3, #7
 8007eca:	009b      	lsls	r3, r3, #2
 8007ecc:	220f      	movs	r2, #15
 8007ece:	fa02 f303 	lsl.w	r3, r2, r3
 8007ed2:	43db      	mvns	r3, r3
 8007ed4:	69ba      	ldr	r2, [r7, #24]
 8007ed6:	4013      	ands	r3, r2
 8007ed8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	691a      	ldr	r2, [r3, #16]
 8007ede:	69fb      	ldr	r3, [r7, #28]
 8007ee0:	f003 0307 	and.w	r3, r3, #7
 8007ee4:	009b      	lsls	r3, r3, #2
 8007ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8007eea:	69ba      	ldr	r2, [r7, #24]
 8007eec:	4313      	orrs	r3, r2
 8007eee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007ef0:	69fb      	ldr	r3, [r7, #28]
 8007ef2:	08da      	lsrs	r2, r3, #3
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	3208      	adds	r2, #8
 8007ef8:	69b9      	ldr	r1, [r7, #24]
 8007efa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007f04:	69fb      	ldr	r3, [r7, #28]
 8007f06:	005b      	lsls	r3, r3, #1
 8007f08:	2203      	movs	r2, #3
 8007f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f0e:	43db      	mvns	r3, r3
 8007f10:	69ba      	ldr	r2, [r7, #24]
 8007f12:	4013      	ands	r3, r2
 8007f14:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	f003 0203 	and.w	r2, r3, #3
 8007f1e:	69fb      	ldr	r3, [r7, #28]
 8007f20:	005b      	lsls	r3, r3, #1
 8007f22:	fa02 f303 	lsl.w	r3, r2, r3
 8007f26:	69ba      	ldr	r2, [r7, #24]
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	69ba      	ldr	r2, [r7, #24]
 8007f30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	685b      	ldr	r3, [r3, #4]
 8007f36:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	f000 80e0 	beq.w	8008100 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007f40:	4b2f      	ldr	r3, [pc, #188]	@ (8008000 <HAL_GPIO_Init+0x238>)
 8007f42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007f46:	4a2e      	ldr	r2, [pc, #184]	@ (8008000 <HAL_GPIO_Init+0x238>)
 8007f48:	f043 0302 	orr.w	r3, r3, #2
 8007f4c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8007f50:	4b2b      	ldr	r3, [pc, #172]	@ (8008000 <HAL_GPIO_Init+0x238>)
 8007f52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007f56:	f003 0302 	and.w	r3, r3, #2
 8007f5a:	60fb      	str	r3, [r7, #12]
 8007f5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007f5e:	4a29      	ldr	r2, [pc, #164]	@ (8008004 <HAL_GPIO_Init+0x23c>)
 8007f60:	69fb      	ldr	r3, [r7, #28]
 8007f62:	089b      	lsrs	r3, r3, #2
 8007f64:	3302      	adds	r3, #2
 8007f66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007f6c:	69fb      	ldr	r3, [r7, #28]
 8007f6e:	f003 0303 	and.w	r3, r3, #3
 8007f72:	009b      	lsls	r3, r3, #2
 8007f74:	220f      	movs	r2, #15
 8007f76:	fa02 f303 	lsl.w	r3, r2, r3
 8007f7a:	43db      	mvns	r3, r3
 8007f7c:	69ba      	ldr	r2, [r7, #24]
 8007f7e:	4013      	ands	r3, r2
 8007f80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	4a20      	ldr	r2, [pc, #128]	@ (8008008 <HAL_GPIO_Init+0x240>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d052      	beq.n	8008030 <HAL_GPIO_Init+0x268>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	4a1f      	ldr	r2, [pc, #124]	@ (800800c <HAL_GPIO_Init+0x244>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d031      	beq.n	8007ff6 <HAL_GPIO_Init+0x22e>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	4a1e      	ldr	r2, [pc, #120]	@ (8008010 <HAL_GPIO_Init+0x248>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d02b      	beq.n	8007ff2 <HAL_GPIO_Init+0x22a>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	4a1d      	ldr	r2, [pc, #116]	@ (8008014 <HAL_GPIO_Init+0x24c>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d025      	beq.n	8007fee <HAL_GPIO_Init+0x226>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	4a1c      	ldr	r2, [pc, #112]	@ (8008018 <HAL_GPIO_Init+0x250>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d01f      	beq.n	8007fea <HAL_GPIO_Init+0x222>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	4a1b      	ldr	r2, [pc, #108]	@ (800801c <HAL_GPIO_Init+0x254>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d019      	beq.n	8007fe6 <HAL_GPIO_Init+0x21e>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	4a1a      	ldr	r2, [pc, #104]	@ (8008020 <HAL_GPIO_Init+0x258>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d013      	beq.n	8007fe2 <HAL_GPIO_Init+0x21a>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	4a19      	ldr	r2, [pc, #100]	@ (8008024 <HAL_GPIO_Init+0x25c>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d00d      	beq.n	8007fde <HAL_GPIO_Init+0x216>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	4a18      	ldr	r2, [pc, #96]	@ (8008028 <HAL_GPIO_Init+0x260>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d007      	beq.n	8007fda <HAL_GPIO_Init+0x212>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	4a17      	ldr	r2, [pc, #92]	@ (800802c <HAL_GPIO_Init+0x264>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d101      	bne.n	8007fd6 <HAL_GPIO_Init+0x20e>
 8007fd2:	2309      	movs	r3, #9
 8007fd4:	e02d      	b.n	8008032 <HAL_GPIO_Init+0x26a>
 8007fd6:	230a      	movs	r3, #10
 8007fd8:	e02b      	b.n	8008032 <HAL_GPIO_Init+0x26a>
 8007fda:	2308      	movs	r3, #8
 8007fdc:	e029      	b.n	8008032 <HAL_GPIO_Init+0x26a>
 8007fde:	2307      	movs	r3, #7
 8007fe0:	e027      	b.n	8008032 <HAL_GPIO_Init+0x26a>
 8007fe2:	2306      	movs	r3, #6
 8007fe4:	e025      	b.n	8008032 <HAL_GPIO_Init+0x26a>
 8007fe6:	2305      	movs	r3, #5
 8007fe8:	e023      	b.n	8008032 <HAL_GPIO_Init+0x26a>
 8007fea:	2304      	movs	r3, #4
 8007fec:	e021      	b.n	8008032 <HAL_GPIO_Init+0x26a>
 8007fee:	2303      	movs	r3, #3
 8007ff0:	e01f      	b.n	8008032 <HAL_GPIO_Init+0x26a>
 8007ff2:	2302      	movs	r3, #2
 8007ff4:	e01d      	b.n	8008032 <HAL_GPIO_Init+0x26a>
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	e01b      	b.n	8008032 <HAL_GPIO_Init+0x26a>
 8007ffa:	bf00      	nop
 8007ffc:	58000080 	.word	0x58000080
 8008000:	58024400 	.word	0x58024400
 8008004:	58000400 	.word	0x58000400
 8008008:	58020000 	.word	0x58020000
 800800c:	58020400 	.word	0x58020400
 8008010:	58020800 	.word	0x58020800
 8008014:	58020c00 	.word	0x58020c00
 8008018:	58021000 	.word	0x58021000
 800801c:	58021400 	.word	0x58021400
 8008020:	58021800 	.word	0x58021800
 8008024:	58021c00 	.word	0x58021c00
 8008028:	58022000 	.word	0x58022000
 800802c:	58022400 	.word	0x58022400
 8008030:	2300      	movs	r3, #0
 8008032:	69fa      	ldr	r2, [r7, #28]
 8008034:	f002 0203 	and.w	r2, r2, #3
 8008038:	0092      	lsls	r2, r2, #2
 800803a:	4093      	lsls	r3, r2
 800803c:	69ba      	ldr	r2, [r7, #24]
 800803e:	4313      	orrs	r3, r2
 8008040:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008042:	4938      	ldr	r1, [pc, #224]	@ (8008124 <HAL_GPIO_Init+0x35c>)
 8008044:	69fb      	ldr	r3, [r7, #28]
 8008046:	089b      	lsrs	r3, r3, #2
 8008048:	3302      	adds	r3, #2
 800804a:	69ba      	ldr	r2, [r7, #24]
 800804c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008050:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	43db      	mvns	r3, r3
 800805c:	69ba      	ldr	r2, [r7, #24]
 800805e:	4013      	ands	r3, r2
 8008060:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	685b      	ldr	r3, [r3, #4]
 8008066:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800806a:	2b00      	cmp	r3, #0
 800806c:	d003      	beq.n	8008076 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800806e:	69ba      	ldr	r2, [r7, #24]
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	4313      	orrs	r3, r2
 8008074:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008076:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800807a:	69bb      	ldr	r3, [r7, #24]
 800807c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800807e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008082:	685b      	ldr	r3, [r3, #4]
 8008084:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	43db      	mvns	r3, r3
 800808a:	69ba      	ldr	r2, [r7, #24]
 800808c:	4013      	ands	r3, r2
 800808e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008098:	2b00      	cmp	r3, #0
 800809a:	d003      	beq.n	80080a4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800809c:	69ba      	ldr	r2, [r7, #24]
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	4313      	orrs	r3, r2
 80080a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80080a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80080a8:	69bb      	ldr	r3, [r7, #24]
 80080aa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	43db      	mvns	r3, r3
 80080b6:	69ba      	ldr	r2, [r7, #24]
 80080b8:	4013      	ands	r3, r2
 80080ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d003      	beq.n	80080d0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80080c8:	69ba      	ldr	r2, [r7, #24]
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	4313      	orrs	r3, r2
 80080ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	69ba      	ldr	r2, [r7, #24]
 80080d4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	43db      	mvns	r3, r3
 80080e0:	69ba      	ldr	r2, [r7, #24]
 80080e2:	4013      	ands	r3, r2
 80080e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	685b      	ldr	r3, [r3, #4]
 80080ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d003      	beq.n	80080fa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80080f2:	69ba      	ldr	r2, [r7, #24]
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	4313      	orrs	r3, r2
 80080f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	69ba      	ldr	r2, [r7, #24]
 80080fe:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008100:	69fb      	ldr	r3, [r7, #28]
 8008102:	3301      	adds	r3, #1
 8008104:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	69fb      	ldr	r3, [r7, #28]
 800810c:	fa22 f303 	lsr.w	r3, r2, r3
 8008110:	2b00      	cmp	r3, #0
 8008112:	f47f ae63 	bne.w	8007ddc <HAL_GPIO_Init+0x14>
  }
}
 8008116:	bf00      	nop
 8008118:	bf00      	nop
 800811a:	3724      	adds	r7, #36	@ 0x24
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr
 8008124:	58000400 	.word	0x58000400

08008128 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008128:	b480      	push	{r7}
 800812a:	b083      	sub	sp, #12
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	460b      	mov	r3, r1
 8008132:	807b      	strh	r3, [r7, #2]
 8008134:	4613      	mov	r3, r2
 8008136:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008138:	787b      	ldrb	r3, [r7, #1]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d003      	beq.n	8008146 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800813e:	887a      	ldrh	r2, [r7, #2]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008144:	e003      	b.n	800814e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008146:	887b      	ldrh	r3, [r7, #2]
 8008148:	041a      	lsls	r2, r3, #16
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	619a      	str	r2, [r3, #24]
}
 800814e:	bf00      	nop
 8008150:	370c      	adds	r7, #12
 8008152:	46bd      	mov	sp, r7
 8008154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008158:	4770      	bx	lr

0800815a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800815a:	b480      	push	{r7}
 800815c:	b085      	sub	sp, #20
 800815e:	af00      	add	r7, sp, #0
 8008160:	6078      	str	r0, [r7, #4]
 8008162:	460b      	mov	r3, r1
 8008164:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	695b      	ldr	r3, [r3, #20]
 800816a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800816c:	887a      	ldrh	r2, [r7, #2]
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	4013      	ands	r3, r2
 8008172:	041a      	lsls	r2, r3, #16
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	43d9      	mvns	r1, r3
 8008178:	887b      	ldrh	r3, [r7, #2]
 800817a:	400b      	ands	r3, r1
 800817c:	431a      	orrs	r2, r3
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	619a      	str	r2, [r3, #24]
}
 8008182:	bf00      	nop
 8008184:	3714      	adds	r7, #20
 8008186:	46bd      	mov	sp, r7
 8008188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818c:	4770      	bx	lr
	...

08008190 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8008190:	b480      	push	{r7}
 8008192:	b083      	sub	sp, #12
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8008198:	4a08      	ldr	r2, [pc, #32]	@ (80081bc <HAL_HSEM_FastTake+0x2c>)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	3320      	adds	r3, #32
 800819e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081a2:	4a07      	ldr	r2, [pc, #28]	@ (80081c0 <HAL_HSEM_FastTake+0x30>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d101      	bne.n	80081ac <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80081a8:	2300      	movs	r3, #0
 80081aa:	e000      	b.n	80081ae <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80081ac:	2301      	movs	r3, #1
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	370c      	adds	r7, #12
 80081b2:	46bd      	mov	sp, r7
 80081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b8:	4770      	bx	lr
 80081ba:	bf00      	nop
 80081bc:	58026400 	.word	0x58026400
 80081c0:	80000300 	.word	0x80000300

080081c4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80081c4:	b480      	push	{r7}
 80081c6:	b083      	sub	sp, #12
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80081ce:	4906      	ldr	r1, [pc, #24]	@ (80081e8 <HAL_HSEM_Release+0x24>)
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80081dc:	bf00      	nop
 80081de:	370c      	adds	r7, #12
 80081e0:	46bd      	mov	sp, r7
 80081e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e6:	4770      	bx	lr
 80081e8:	58026400 	.word	0x58026400

080081ec <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b084      	sub	sp, #16
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80081f4:	4b29      	ldr	r3, [pc, #164]	@ (800829c <HAL_PWREx_ConfigSupply+0xb0>)
 80081f6:	68db      	ldr	r3, [r3, #12]
 80081f8:	f003 0307 	and.w	r3, r3, #7
 80081fc:	2b06      	cmp	r3, #6
 80081fe:	d00a      	beq.n	8008216 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008200:	4b26      	ldr	r3, [pc, #152]	@ (800829c <HAL_PWREx_ConfigSupply+0xb0>)
 8008202:	68db      	ldr	r3, [r3, #12]
 8008204:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008208:	687a      	ldr	r2, [r7, #4]
 800820a:	429a      	cmp	r2, r3
 800820c:	d001      	beq.n	8008212 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800820e:	2301      	movs	r3, #1
 8008210:	e040      	b.n	8008294 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008212:	2300      	movs	r3, #0
 8008214:	e03e      	b.n	8008294 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008216:	4b21      	ldr	r3, [pc, #132]	@ (800829c <HAL_PWREx_ConfigSupply+0xb0>)
 8008218:	68db      	ldr	r3, [r3, #12]
 800821a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800821e:	491f      	ldr	r1, [pc, #124]	@ (800829c <HAL_PWREx_ConfigSupply+0xb0>)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	4313      	orrs	r3, r2
 8008224:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008226:	f7fb f87f 	bl	8003328 <HAL_GetTick>
 800822a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800822c:	e009      	b.n	8008242 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800822e:	f7fb f87b 	bl	8003328 <HAL_GetTick>
 8008232:	4602      	mov	r2, r0
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	1ad3      	subs	r3, r2, r3
 8008238:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800823c:	d901      	bls.n	8008242 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800823e:	2301      	movs	r3, #1
 8008240:	e028      	b.n	8008294 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008242:	4b16      	ldr	r3, [pc, #88]	@ (800829c <HAL_PWREx_ConfigSupply+0xb0>)
 8008244:	685b      	ldr	r3, [r3, #4]
 8008246:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800824a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800824e:	d1ee      	bne.n	800822e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2b1e      	cmp	r3, #30
 8008254:	d008      	beq.n	8008268 <HAL_PWREx_ConfigSupply+0x7c>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2b2e      	cmp	r3, #46	@ 0x2e
 800825a:	d005      	beq.n	8008268 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2b1d      	cmp	r3, #29
 8008260:	d002      	beq.n	8008268 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2b2d      	cmp	r3, #45	@ 0x2d
 8008266:	d114      	bne.n	8008292 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8008268:	f7fb f85e 	bl	8003328 <HAL_GetTick>
 800826c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800826e:	e009      	b.n	8008284 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008270:	f7fb f85a 	bl	8003328 <HAL_GetTick>
 8008274:	4602      	mov	r2, r0
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	1ad3      	subs	r3, r2, r3
 800827a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800827e:	d901      	bls.n	8008284 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8008280:	2301      	movs	r3, #1
 8008282:	e007      	b.n	8008294 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8008284:	4b05      	ldr	r3, [pc, #20]	@ (800829c <HAL_PWREx_ConfigSupply+0xb0>)
 8008286:	68db      	ldr	r3, [r3, #12]
 8008288:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800828c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008290:	d1ee      	bne.n	8008270 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008292:	2300      	movs	r3, #0
}
 8008294:	4618      	mov	r0, r3
 8008296:	3710      	adds	r7, #16
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}
 800829c:	58024800 	.word	0x58024800

080082a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b08c      	sub	sp, #48	@ 0x30
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d102      	bne.n	80082b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80082ae:	2301      	movs	r3, #1
 80082b0:	f000 bc48 	b.w	8008b44 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f003 0301 	and.w	r3, r3, #1
 80082bc:	2b00      	cmp	r3, #0
 80082be:	f000 8088 	beq.w	80083d2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80082c2:	4b99      	ldr	r3, [pc, #612]	@ (8008528 <HAL_RCC_OscConfig+0x288>)
 80082c4:	691b      	ldr	r3, [r3, #16]
 80082c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80082ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80082cc:	4b96      	ldr	r3, [pc, #600]	@ (8008528 <HAL_RCC_OscConfig+0x288>)
 80082ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80082d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082d4:	2b10      	cmp	r3, #16
 80082d6:	d007      	beq.n	80082e8 <HAL_RCC_OscConfig+0x48>
 80082d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082da:	2b18      	cmp	r3, #24
 80082dc:	d111      	bne.n	8008302 <HAL_RCC_OscConfig+0x62>
 80082de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082e0:	f003 0303 	and.w	r3, r3, #3
 80082e4:	2b02      	cmp	r3, #2
 80082e6:	d10c      	bne.n	8008302 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80082e8:	4b8f      	ldr	r3, [pc, #572]	@ (8008528 <HAL_RCC_OscConfig+0x288>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d06d      	beq.n	80083d0 <HAL_RCC_OscConfig+0x130>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d169      	bne.n	80083d0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80082fc:	2301      	movs	r3, #1
 80082fe:	f000 bc21 	b.w	8008b44 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800830a:	d106      	bne.n	800831a <HAL_RCC_OscConfig+0x7a>
 800830c:	4b86      	ldr	r3, [pc, #536]	@ (8008528 <HAL_RCC_OscConfig+0x288>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a85      	ldr	r2, [pc, #532]	@ (8008528 <HAL_RCC_OscConfig+0x288>)
 8008312:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008316:	6013      	str	r3, [r2, #0]
 8008318:	e02e      	b.n	8008378 <HAL_RCC_OscConfig+0xd8>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d10c      	bne.n	800833c <HAL_RCC_OscConfig+0x9c>
 8008322:	4b81      	ldr	r3, [pc, #516]	@ (8008528 <HAL_RCC_OscConfig+0x288>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4a80      	ldr	r2, [pc, #512]	@ (8008528 <HAL_RCC_OscConfig+0x288>)
 8008328:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800832c:	6013      	str	r3, [r2, #0]
 800832e:	4b7e      	ldr	r3, [pc, #504]	@ (8008528 <HAL_RCC_OscConfig+0x288>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4a7d      	ldr	r2, [pc, #500]	@ (8008528 <HAL_RCC_OscConfig+0x288>)
 8008334:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008338:	6013      	str	r3, [r2, #0]
 800833a:	e01d      	b.n	8008378 <HAL_RCC_OscConfig+0xd8>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008344:	d10c      	bne.n	8008360 <HAL_RCC_OscConfig+0xc0>
 8008346:	4b78      	ldr	r3, [pc, #480]	@ (8008528 <HAL_RCC_OscConfig+0x288>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a77      	ldr	r2, [pc, #476]	@ (8008528 <HAL_RCC_OscConfig+0x288>)
 800834c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008350:	6013      	str	r3, [r2, #0]
 8008352:	4b75      	ldr	r3, [pc, #468]	@ (8008528 <HAL_RCC_OscConfig+0x288>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a74      	ldr	r2, [pc, #464]	@ (8008528 <HAL_RCC_OscConfig+0x288>)
 8008358:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800835c:	6013      	str	r3, [r2, #0]
 800835e:	e00b      	b.n	8008378 <HAL_RCC_OscConfig+0xd8>
 8008360:	4b71      	ldr	r3, [pc, #452]	@ (8008528 <HAL_RCC_OscConfig+0x288>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4a70      	ldr	r2, [pc, #448]	@ (8008528 <HAL_RCC_OscConfig+0x288>)
 8008366:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800836a:	6013      	str	r3, [r2, #0]
 800836c:	4b6e      	ldr	r3, [pc, #440]	@ (8008528 <HAL_RCC_OscConfig+0x288>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a6d      	ldr	r2, [pc, #436]	@ (8008528 <HAL_RCC_OscConfig+0x288>)
 8008372:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008376:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	685b      	ldr	r3, [r3, #4]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d013      	beq.n	80083a8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008380:	f7fa ffd2 	bl	8003328 <HAL_GetTick>
 8008384:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008386:	e008      	b.n	800839a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008388:	f7fa ffce 	bl	8003328 <HAL_GetTick>
 800838c:	4602      	mov	r2, r0
 800838e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008390:	1ad3      	subs	r3, r2, r3
 8008392:	2b64      	cmp	r3, #100	@ 0x64
 8008394:	d901      	bls.n	800839a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008396:	2303      	movs	r3, #3
 8008398:	e3d4      	b.n	8008b44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800839a:	4b63      	ldr	r3, [pc, #396]	@ (8008528 <HAL_RCC_OscConfig+0x288>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d0f0      	beq.n	8008388 <HAL_RCC_OscConfig+0xe8>
 80083a6:	e014      	b.n	80083d2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083a8:	f7fa ffbe 	bl	8003328 <HAL_GetTick>
 80083ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80083ae:	e008      	b.n	80083c2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80083b0:	f7fa ffba 	bl	8003328 <HAL_GetTick>
 80083b4:	4602      	mov	r2, r0
 80083b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083b8:	1ad3      	subs	r3, r2, r3
 80083ba:	2b64      	cmp	r3, #100	@ 0x64
 80083bc:	d901      	bls.n	80083c2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80083be:	2303      	movs	r3, #3
 80083c0:	e3c0      	b.n	8008b44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80083c2:	4b59      	ldr	r3, [pc, #356]	@ (8008528 <HAL_RCC_OscConfig+0x288>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d1f0      	bne.n	80083b0 <HAL_RCC_OscConfig+0x110>
 80083ce:	e000      	b.n	80083d2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f003 0302 	and.w	r3, r3, #2
 80083da:	2b00      	cmp	r3, #0
 80083dc:	f000 80ca 	beq.w	8008574 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80083e0:	4b51      	ldr	r3, [pc, #324]	@ (8008528 <HAL_RCC_OscConfig+0x288>)
 80083e2:	691b      	ldr	r3, [r3, #16]
 80083e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80083e8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80083ea:	4b4f      	ldr	r3, [pc, #316]	@ (8008528 <HAL_RCC_OscConfig+0x288>)
 80083ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083ee:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80083f0:	6a3b      	ldr	r3, [r7, #32]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d007      	beq.n	8008406 <HAL_RCC_OscConfig+0x166>
 80083f6:	6a3b      	ldr	r3, [r7, #32]
 80083f8:	2b18      	cmp	r3, #24
 80083fa:	d156      	bne.n	80084aa <HAL_RCC_OscConfig+0x20a>
 80083fc:	69fb      	ldr	r3, [r7, #28]
 80083fe:	f003 0303 	and.w	r3, r3, #3
 8008402:	2b00      	cmp	r3, #0
 8008404:	d151      	bne.n	80084aa <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008406:	4b48      	ldr	r3, [pc, #288]	@ (8008528 <HAL_RCC_OscConfig+0x288>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f003 0304 	and.w	r3, r3, #4
 800840e:	2b00      	cmp	r3, #0
 8008410:	d005      	beq.n	800841e <HAL_RCC_OscConfig+0x17e>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	68db      	ldr	r3, [r3, #12]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d101      	bne.n	800841e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800841a:	2301      	movs	r3, #1
 800841c:	e392      	b.n	8008b44 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800841e:	4b42      	ldr	r3, [pc, #264]	@ (8008528 <HAL_RCC_OscConfig+0x288>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f023 0219 	bic.w	r2, r3, #25
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	68db      	ldr	r3, [r3, #12]
 800842a:	493f      	ldr	r1, [pc, #252]	@ (8008528 <HAL_RCC_OscConfig+0x288>)
 800842c:	4313      	orrs	r3, r2
 800842e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008430:	f7fa ff7a 	bl	8003328 <HAL_GetTick>
 8008434:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008436:	e008      	b.n	800844a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008438:	f7fa ff76 	bl	8003328 <HAL_GetTick>
 800843c:	4602      	mov	r2, r0
 800843e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008440:	1ad3      	subs	r3, r2, r3
 8008442:	2b02      	cmp	r3, #2
 8008444:	d901      	bls.n	800844a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008446:	2303      	movs	r3, #3
 8008448:	e37c      	b.n	8008b44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800844a:	4b37      	ldr	r3, [pc, #220]	@ (8008528 <HAL_RCC_OscConfig+0x288>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f003 0304 	and.w	r3, r3, #4
 8008452:	2b00      	cmp	r3, #0
 8008454:	d0f0      	beq.n	8008438 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008456:	f7fa ff73 	bl	8003340 <HAL_GetREVID>
 800845a:	4603      	mov	r3, r0
 800845c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008460:	4293      	cmp	r3, r2
 8008462:	d817      	bhi.n	8008494 <HAL_RCC_OscConfig+0x1f4>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	691b      	ldr	r3, [r3, #16]
 8008468:	2b40      	cmp	r3, #64	@ 0x40
 800846a:	d108      	bne.n	800847e <HAL_RCC_OscConfig+0x1de>
 800846c:	4b2e      	ldr	r3, [pc, #184]	@ (8008528 <HAL_RCC_OscConfig+0x288>)
 800846e:	685b      	ldr	r3, [r3, #4]
 8008470:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8008474:	4a2c      	ldr	r2, [pc, #176]	@ (8008528 <HAL_RCC_OscConfig+0x288>)
 8008476:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800847a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800847c:	e07a      	b.n	8008574 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800847e:	4b2a      	ldr	r3, [pc, #168]	@ (8008528 <HAL_RCC_OscConfig+0x288>)
 8008480:	685b      	ldr	r3, [r3, #4]
 8008482:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	691b      	ldr	r3, [r3, #16]
 800848a:	031b      	lsls	r3, r3, #12
 800848c:	4926      	ldr	r1, [pc, #152]	@ (8008528 <HAL_RCC_OscConfig+0x288>)
 800848e:	4313      	orrs	r3, r2
 8008490:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008492:	e06f      	b.n	8008574 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008494:	4b24      	ldr	r3, [pc, #144]	@ (8008528 <HAL_RCC_OscConfig+0x288>)
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	691b      	ldr	r3, [r3, #16]
 80084a0:	061b      	lsls	r3, r3, #24
 80084a2:	4921      	ldr	r1, [pc, #132]	@ (8008528 <HAL_RCC_OscConfig+0x288>)
 80084a4:	4313      	orrs	r3, r2
 80084a6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80084a8:	e064      	b.n	8008574 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	68db      	ldr	r3, [r3, #12]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d047      	beq.n	8008542 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80084b2:	4b1d      	ldr	r3, [pc, #116]	@ (8008528 <HAL_RCC_OscConfig+0x288>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f023 0219 	bic.w	r2, r3, #25
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	68db      	ldr	r3, [r3, #12]
 80084be:	491a      	ldr	r1, [pc, #104]	@ (8008528 <HAL_RCC_OscConfig+0x288>)
 80084c0:	4313      	orrs	r3, r2
 80084c2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084c4:	f7fa ff30 	bl	8003328 <HAL_GetTick>
 80084c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80084ca:	e008      	b.n	80084de <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80084cc:	f7fa ff2c 	bl	8003328 <HAL_GetTick>
 80084d0:	4602      	mov	r2, r0
 80084d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084d4:	1ad3      	subs	r3, r2, r3
 80084d6:	2b02      	cmp	r3, #2
 80084d8:	d901      	bls.n	80084de <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80084da:	2303      	movs	r3, #3
 80084dc:	e332      	b.n	8008b44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80084de:	4b12      	ldr	r3, [pc, #72]	@ (8008528 <HAL_RCC_OscConfig+0x288>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f003 0304 	and.w	r3, r3, #4
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d0f0      	beq.n	80084cc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084ea:	f7fa ff29 	bl	8003340 <HAL_GetREVID>
 80084ee:	4603      	mov	r3, r0
 80084f0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d819      	bhi.n	800852c <HAL_RCC_OscConfig+0x28c>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	691b      	ldr	r3, [r3, #16]
 80084fc:	2b40      	cmp	r3, #64	@ 0x40
 80084fe:	d108      	bne.n	8008512 <HAL_RCC_OscConfig+0x272>
 8008500:	4b09      	ldr	r3, [pc, #36]	@ (8008528 <HAL_RCC_OscConfig+0x288>)
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8008508:	4a07      	ldr	r2, [pc, #28]	@ (8008528 <HAL_RCC_OscConfig+0x288>)
 800850a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800850e:	6053      	str	r3, [r2, #4]
 8008510:	e030      	b.n	8008574 <HAL_RCC_OscConfig+0x2d4>
 8008512:	4b05      	ldr	r3, [pc, #20]	@ (8008528 <HAL_RCC_OscConfig+0x288>)
 8008514:	685b      	ldr	r3, [r3, #4]
 8008516:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	691b      	ldr	r3, [r3, #16]
 800851e:	031b      	lsls	r3, r3, #12
 8008520:	4901      	ldr	r1, [pc, #4]	@ (8008528 <HAL_RCC_OscConfig+0x288>)
 8008522:	4313      	orrs	r3, r2
 8008524:	604b      	str	r3, [r1, #4]
 8008526:	e025      	b.n	8008574 <HAL_RCC_OscConfig+0x2d4>
 8008528:	58024400 	.word	0x58024400
 800852c:	4b9a      	ldr	r3, [pc, #616]	@ (8008798 <HAL_RCC_OscConfig+0x4f8>)
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	691b      	ldr	r3, [r3, #16]
 8008538:	061b      	lsls	r3, r3, #24
 800853a:	4997      	ldr	r1, [pc, #604]	@ (8008798 <HAL_RCC_OscConfig+0x4f8>)
 800853c:	4313      	orrs	r3, r2
 800853e:	604b      	str	r3, [r1, #4]
 8008540:	e018      	b.n	8008574 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008542:	4b95      	ldr	r3, [pc, #596]	@ (8008798 <HAL_RCC_OscConfig+0x4f8>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4a94      	ldr	r2, [pc, #592]	@ (8008798 <HAL_RCC_OscConfig+0x4f8>)
 8008548:	f023 0301 	bic.w	r3, r3, #1
 800854c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800854e:	f7fa feeb 	bl	8003328 <HAL_GetTick>
 8008552:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008554:	e008      	b.n	8008568 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008556:	f7fa fee7 	bl	8003328 <HAL_GetTick>
 800855a:	4602      	mov	r2, r0
 800855c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800855e:	1ad3      	subs	r3, r2, r3
 8008560:	2b02      	cmp	r3, #2
 8008562:	d901      	bls.n	8008568 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8008564:	2303      	movs	r3, #3
 8008566:	e2ed      	b.n	8008b44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008568:	4b8b      	ldr	r3, [pc, #556]	@ (8008798 <HAL_RCC_OscConfig+0x4f8>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f003 0304 	and.w	r3, r3, #4
 8008570:	2b00      	cmp	r3, #0
 8008572:	d1f0      	bne.n	8008556 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f003 0310 	and.w	r3, r3, #16
 800857c:	2b00      	cmp	r3, #0
 800857e:	f000 80a9 	beq.w	80086d4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008582:	4b85      	ldr	r3, [pc, #532]	@ (8008798 <HAL_RCC_OscConfig+0x4f8>)
 8008584:	691b      	ldr	r3, [r3, #16]
 8008586:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800858a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800858c:	4b82      	ldr	r3, [pc, #520]	@ (8008798 <HAL_RCC_OscConfig+0x4f8>)
 800858e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008590:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008592:	69bb      	ldr	r3, [r7, #24]
 8008594:	2b08      	cmp	r3, #8
 8008596:	d007      	beq.n	80085a8 <HAL_RCC_OscConfig+0x308>
 8008598:	69bb      	ldr	r3, [r7, #24]
 800859a:	2b18      	cmp	r3, #24
 800859c:	d13a      	bne.n	8008614 <HAL_RCC_OscConfig+0x374>
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	f003 0303 	and.w	r3, r3, #3
 80085a4:	2b01      	cmp	r3, #1
 80085a6:	d135      	bne.n	8008614 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80085a8:	4b7b      	ldr	r3, [pc, #492]	@ (8008798 <HAL_RCC_OscConfig+0x4f8>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d005      	beq.n	80085c0 <HAL_RCC_OscConfig+0x320>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	69db      	ldr	r3, [r3, #28]
 80085b8:	2b80      	cmp	r3, #128	@ 0x80
 80085ba:	d001      	beq.n	80085c0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80085bc:	2301      	movs	r3, #1
 80085be:	e2c1      	b.n	8008b44 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80085c0:	f7fa febe 	bl	8003340 <HAL_GetREVID>
 80085c4:	4603      	mov	r3, r0
 80085c6:	f241 0203 	movw	r2, #4099	@ 0x1003
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d817      	bhi.n	80085fe <HAL_RCC_OscConfig+0x35e>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6a1b      	ldr	r3, [r3, #32]
 80085d2:	2b20      	cmp	r3, #32
 80085d4:	d108      	bne.n	80085e8 <HAL_RCC_OscConfig+0x348>
 80085d6:	4b70      	ldr	r3, [pc, #448]	@ (8008798 <HAL_RCC_OscConfig+0x4f8>)
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80085de:	4a6e      	ldr	r2, [pc, #440]	@ (8008798 <HAL_RCC_OscConfig+0x4f8>)
 80085e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80085e4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80085e6:	e075      	b.n	80086d4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80085e8:	4b6b      	ldr	r3, [pc, #428]	@ (8008798 <HAL_RCC_OscConfig+0x4f8>)
 80085ea:	685b      	ldr	r3, [r3, #4]
 80085ec:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6a1b      	ldr	r3, [r3, #32]
 80085f4:	069b      	lsls	r3, r3, #26
 80085f6:	4968      	ldr	r1, [pc, #416]	@ (8008798 <HAL_RCC_OscConfig+0x4f8>)
 80085f8:	4313      	orrs	r3, r2
 80085fa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80085fc:	e06a      	b.n	80086d4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80085fe:	4b66      	ldr	r3, [pc, #408]	@ (8008798 <HAL_RCC_OscConfig+0x4f8>)
 8008600:	68db      	ldr	r3, [r3, #12]
 8008602:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6a1b      	ldr	r3, [r3, #32]
 800860a:	061b      	lsls	r3, r3, #24
 800860c:	4962      	ldr	r1, [pc, #392]	@ (8008798 <HAL_RCC_OscConfig+0x4f8>)
 800860e:	4313      	orrs	r3, r2
 8008610:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008612:	e05f      	b.n	80086d4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	69db      	ldr	r3, [r3, #28]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d042      	beq.n	80086a2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800861c:	4b5e      	ldr	r3, [pc, #376]	@ (8008798 <HAL_RCC_OscConfig+0x4f8>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a5d      	ldr	r2, [pc, #372]	@ (8008798 <HAL_RCC_OscConfig+0x4f8>)
 8008622:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008626:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008628:	f7fa fe7e 	bl	8003328 <HAL_GetTick>
 800862c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800862e:	e008      	b.n	8008642 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008630:	f7fa fe7a 	bl	8003328 <HAL_GetTick>
 8008634:	4602      	mov	r2, r0
 8008636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008638:	1ad3      	subs	r3, r2, r3
 800863a:	2b02      	cmp	r3, #2
 800863c:	d901      	bls.n	8008642 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800863e:	2303      	movs	r3, #3
 8008640:	e280      	b.n	8008b44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008642:	4b55      	ldr	r3, [pc, #340]	@ (8008798 <HAL_RCC_OscConfig+0x4f8>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800864a:	2b00      	cmp	r3, #0
 800864c:	d0f0      	beq.n	8008630 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800864e:	f7fa fe77 	bl	8003340 <HAL_GetREVID>
 8008652:	4603      	mov	r3, r0
 8008654:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008658:	4293      	cmp	r3, r2
 800865a:	d817      	bhi.n	800868c <HAL_RCC_OscConfig+0x3ec>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6a1b      	ldr	r3, [r3, #32]
 8008660:	2b20      	cmp	r3, #32
 8008662:	d108      	bne.n	8008676 <HAL_RCC_OscConfig+0x3d6>
 8008664:	4b4c      	ldr	r3, [pc, #304]	@ (8008798 <HAL_RCC_OscConfig+0x4f8>)
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800866c:	4a4a      	ldr	r2, [pc, #296]	@ (8008798 <HAL_RCC_OscConfig+0x4f8>)
 800866e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008672:	6053      	str	r3, [r2, #4]
 8008674:	e02e      	b.n	80086d4 <HAL_RCC_OscConfig+0x434>
 8008676:	4b48      	ldr	r3, [pc, #288]	@ (8008798 <HAL_RCC_OscConfig+0x4f8>)
 8008678:	685b      	ldr	r3, [r3, #4]
 800867a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6a1b      	ldr	r3, [r3, #32]
 8008682:	069b      	lsls	r3, r3, #26
 8008684:	4944      	ldr	r1, [pc, #272]	@ (8008798 <HAL_RCC_OscConfig+0x4f8>)
 8008686:	4313      	orrs	r3, r2
 8008688:	604b      	str	r3, [r1, #4]
 800868a:	e023      	b.n	80086d4 <HAL_RCC_OscConfig+0x434>
 800868c:	4b42      	ldr	r3, [pc, #264]	@ (8008798 <HAL_RCC_OscConfig+0x4f8>)
 800868e:	68db      	ldr	r3, [r3, #12]
 8008690:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6a1b      	ldr	r3, [r3, #32]
 8008698:	061b      	lsls	r3, r3, #24
 800869a:	493f      	ldr	r1, [pc, #252]	@ (8008798 <HAL_RCC_OscConfig+0x4f8>)
 800869c:	4313      	orrs	r3, r2
 800869e:	60cb      	str	r3, [r1, #12]
 80086a0:	e018      	b.n	80086d4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80086a2:	4b3d      	ldr	r3, [pc, #244]	@ (8008798 <HAL_RCC_OscConfig+0x4f8>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4a3c      	ldr	r2, [pc, #240]	@ (8008798 <HAL_RCC_OscConfig+0x4f8>)
 80086a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80086ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086ae:	f7fa fe3b 	bl	8003328 <HAL_GetTick>
 80086b2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80086b4:	e008      	b.n	80086c8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80086b6:	f7fa fe37 	bl	8003328 <HAL_GetTick>
 80086ba:	4602      	mov	r2, r0
 80086bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086be:	1ad3      	subs	r3, r2, r3
 80086c0:	2b02      	cmp	r3, #2
 80086c2:	d901      	bls.n	80086c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80086c4:	2303      	movs	r3, #3
 80086c6:	e23d      	b.n	8008b44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80086c8:	4b33      	ldr	r3, [pc, #204]	@ (8008798 <HAL_RCC_OscConfig+0x4f8>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d1f0      	bne.n	80086b6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f003 0308 	and.w	r3, r3, #8
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d036      	beq.n	800874e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	695b      	ldr	r3, [r3, #20]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d019      	beq.n	800871c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80086e8:	4b2b      	ldr	r3, [pc, #172]	@ (8008798 <HAL_RCC_OscConfig+0x4f8>)
 80086ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80086ec:	4a2a      	ldr	r2, [pc, #168]	@ (8008798 <HAL_RCC_OscConfig+0x4f8>)
 80086ee:	f043 0301 	orr.w	r3, r3, #1
 80086f2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086f4:	f7fa fe18 	bl	8003328 <HAL_GetTick>
 80086f8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80086fa:	e008      	b.n	800870e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80086fc:	f7fa fe14 	bl	8003328 <HAL_GetTick>
 8008700:	4602      	mov	r2, r0
 8008702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008704:	1ad3      	subs	r3, r2, r3
 8008706:	2b02      	cmp	r3, #2
 8008708:	d901      	bls.n	800870e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800870a:	2303      	movs	r3, #3
 800870c:	e21a      	b.n	8008b44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800870e:	4b22      	ldr	r3, [pc, #136]	@ (8008798 <HAL_RCC_OscConfig+0x4f8>)
 8008710:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008712:	f003 0302 	and.w	r3, r3, #2
 8008716:	2b00      	cmp	r3, #0
 8008718:	d0f0      	beq.n	80086fc <HAL_RCC_OscConfig+0x45c>
 800871a:	e018      	b.n	800874e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800871c:	4b1e      	ldr	r3, [pc, #120]	@ (8008798 <HAL_RCC_OscConfig+0x4f8>)
 800871e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008720:	4a1d      	ldr	r2, [pc, #116]	@ (8008798 <HAL_RCC_OscConfig+0x4f8>)
 8008722:	f023 0301 	bic.w	r3, r3, #1
 8008726:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008728:	f7fa fdfe 	bl	8003328 <HAL_GetTick>
 800872c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800872e:	e008      	b.n	8008742 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008730:	f7fa fdfa 	bl	8003328 <HAL_GetTick>
 8008734:	4602      	mov	r2, r0
 8008736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008738:	1ad3      	subs	r3, r2, r3
 800873a:	2b02      	cmp	r3, #2
 800873c:	d901      	bls.n	8008742 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800873e:	2303      	movs	r3, #3
 8008740:	e200      	b.n	8008b44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008742:	4b15      	ldr	r3, [pc, #84]	@ (8008798 <HAL_RCC_OscConfig+0x4f8>)
 8008744:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008746:	f003 0302 	and.w	r3, r3, #2
 800874a:	2b00      	cmp	r3, #0
 800874c:	d1f0      	bne.n	8008730 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f003 0320 	and.w	r3, r3, #32
 8008756:	2b00      	cmp	r3, #0
 8008758:	d039      	beq.n	80087ce <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	699b      	ldr	r3, [r3, #24]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d01c      	beq.n	800879c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008762:	4b0d      	ldr	r3, [pc, #52]	@ (8008798 <HAL_RCC_OscConfig+0x4f8>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4a0c      	ldr	r2, [pc, #48]	@ (8008798 <HAL_RCC_OscConfig+0x4f8>)
 8008768:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800876c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800876e:	f7fa fddb 	bl	8003328 <HAL_GetTick>
 8008772:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008774:	e008      	b.n	8008788 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008776:	f7fa fdd7 	bl	8003328 <HAL_GetTick>
 800877a:	4602      	mov	r2, r0
 800877c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800877e:	1ad3      	subs	r3, r2, r3
 8008780:	2b02      	cmp	r3, #2
 8008782:	d901      	bls.n	8008788 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008784:	2303      	movs	r3, #3
 8008786:	e1dd      	b.n	8008b44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008788:	4b03      	ldr	r3, [pc, #12]	@ (8008798 <HAL_RCC_OscConfig+0x4f8>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008790:	2b00      	cmp	r3, #0
 8008792:	d0f0      	beq.n	8008776 <HAL_RCC_OscConfig+0x4d6>
 8008794:	e01b      	b.n	80087ce <HAL_RCC_OscConfig+0x52e>
 8008796:	bf00      	nop
 8008798:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800879c:	4b9b      	ldr	r3, [pc, #620]	@ (8008a0c <HAL_RCC_OscConfig+0x76c>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4a9a      	ldr	r2, [pc, #616]	@ (8008a0c <HAL_RCC_OscConfig+0x76c>)
 80087a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80087a6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80087a8:	f7fa fdbe 	bl	8003328 <HAL_GetTick>
 80087ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80087ae:	e008      	b.n	80087c2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80087b0:	f7fa fdba 	bl	8003328 <HAL_GetTick>
 80087b4:	4602      	mov	r2, r0
 80087b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087b8:	1ad3      	subs	r3, r2, r3
 80087ba:	2b02      	cmp	r3, #2
 80087bc:	d901      	bls.n	80087c2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80087be:	2303      	movs	r3, #3
 80087c0:	e1c0      	b.n	8008b44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80087c2:	4b92      	ldr	r3, [pc, #584]	@ (8008a0c <HAL_RCC_OscConfig+0x76c>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d1f0      	bne.n	80087b0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f003 0304 	and.w	r3, r3, #4
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	f000 8081 	beq.w	80088de <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80087dc:	4b8c      	ldr	r3, [pc, #560]	@ (8008a10 <HAL_RCC_OscConfig+0x770>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a8b      	ldr	r2, [pc, #556]	@ (8008a10 <HAL_RCC_OscConfig+0x770>)
 80087e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80087e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80087e8:	f7fa fd9e 	bl	8003328 <HAL_GetTick>
 80087ec:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80087ee:	e008      	b.n	8008802 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80087f0:	f7fa fd9a 	bl	8003328 <HAL_GetTick>
 80087f4:	4602      	mov	r2, r0
 80087f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087f8:	1ad3      	subs	r3, r2, r3
 80087fa:	2b64      	cmp	r3, #100	@ 0x64
 80087fc:	d901      	bls.n	8008802 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80087fe:	2303      	movs	r3, #3
 8008800:	e1a0      	b.n	8008b44 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008802:	4b83      	ldr	r3, [pc, #524]	@ (8008a10 <HAL_RCC_OscConfig+0x770>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800880a:	2b00      	cmp	r3, #0
 800880c:	d0f0      	beq.n	80087f0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	689b      	ldr	r3, [r3, #8]
 8008812:	2b01      	cmp	r3, #1
 8008814:	d106      	bne.n	8008824 <HAL_RCC_OscConfig+0x584>
 8008816:	4b7d      	ldr	r3, [pc, #500]	@ (8008a0c <HAL_RCC_OscConfig+0x76c>)
 8008818:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800881a:	4a7c      	ldr	r2, [pc, #496]	@ (8008a0c <HAL_RCC_OscConfig+0x76c>)
 800881c:	f043 0301 	orr.w	r3, r3, #1
 8008820:	6713      	str	r3, [r2, #112]	@ 0x70
 8008822:	e02d      	b.n	8008880 <HAL_RCC_OscConfig+0x5e0>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	689b      	ldr	r3, [r3, #8]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d10c      	bne.n	8008846 <HAL_RCC_OscConfig+0x5a6>
 800882c:	4b77      	ldr	r3, [pc, #476]	@ (8008a0c <HAL_RCC_OscConfig+0x76c>)
 800882e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008830:	4a76      	ldr	r2, [pc, #472]	@ (8008a0c <HAL_RCC_OscConfig+0x76c>)
 8008832:	f023 0301 	bic.w	r3, r3, #1
 8008836:	6713      	str	r3, [r2, #112]	@ 0x70
 8008838:	4b74      	ldr	r3, [pc, #464]	@ (8008a0c <HAL_RCC_OscConfig+0x76c>)
 800883a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800883c:	4a73      	ldr	r2, [pc, #460]	@ (8008a0c <HAL_RCC_OscConfig+0x76c>)
 800883e:	f023 0304 	bic.w	r3, r3, #4
 8008842:	6713      	str	r3, [r2, #112]	@ 0x70
 8008844:	e01c      	b.n	8008880 <HAL_RCC_OscConfig+0x5e0>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	689b      	ldr	r3, [r3, #8]
 800884a:	2b05      	cmp	r3, #5
 800884c:	d10c      	bne.n	8008868 <HAL_RCC_OscConfig+0x5c8>
 800884e:	4b6f      	ldr	r3, [pc, #444]	@ (8008a0c <HAL_RCC_OscConfig+0x76c>)
 8008850:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008852:	4a6e      	ldr	r2, [pc, #440]	@ (8008a0c <HAL_RCC_OscConfig+0x76c>)
 8008854:	f043 0304 	orr.w	r3, r3, #4
 8008858:	6713      	str	r3, [r2, #112]	@ 0x70
 800885a:	4b6c      	ldr	r3, [pc, #432]	@ (8008a0c <HAL_RCC_OscConfig+0x76c>)
 800885c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800885e:	4a6b      	ldr	r2, [pc, #428]	@ (8008a0c <HAL_RCC_OscConfig+0x76c>)
 8008860:	f043 0301 	orr.w	r3, r3, #1
 8008864:	6713      	str	r3, [r2, #112]	@ 0x70
 8008866:	e00b      	b.n	8008880 <HAL_RCC_OscConfig+0x5e0>
 8008868:	4b68      	ldr	r3, [pc, #416]	@ (8008a0c <HAL_RCC_OscConfig+0x76c>)
 800886a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800886c:	4a67      	ldr	r2, [pc, #412]	@ (8008a0c <HAL_RCC_OscConfig+0x76c>)
 800886e:	f023 0301 	bic.w	r3, r3, #1
 8008872:	6713      	str	r3, [r2, #112]	@ 0x70
 8008874:	4b65      	ldr	r3, [pc, #404]	@ (8008a0c <HAL_RCC_OscConfig+0x76c>)
 8008876:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008878:	4a64      	ldr	r2, [pc, #400]	@ (8008a0c <HAL_RCC_OscConfig+0x76c>)
 800887a:	f023 0304 	bic.w	r3, r3, #4
 800887e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	689b      	ldr	r3, [r3, #8]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d015      	beq.n	80088b4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008888:	f7fa fd4e 	bl	8003328 <HAL_GetTick>
 800888c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800888e:	e00a      	b.n	80088a6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008890:	f7fa fd4a 	bl	8003328 <HAL_GetTick>
 8008894:	4602      	mov	r2, r0
 8008896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008898:	1ad3      	subs	r3, r2, r3
 800889a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800889e:	4293      	cmp	r3, r2
 80088a0:	d901      	bls.n	80088a6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80088a2:	2303      	movs	r3, #3
 80088a4:	e14e      	b.n	8008b44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80088a6:	4b59      	ldr	r3, [pc, #356]	@ (8008a0c <HAL_RCC_OscConfig+0x76c>)
 80088a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088aa:	f003 0302 	and.w	r3, r3, #2
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d0ee      	beq.n	8008890 <HAL_RCC_OscConfig+0x5f0>
 80088b2:	e014      	b.n	80088de <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088b4:	f7fa fd38 	bl	8003328 <HAL_GetTick>
 80088b8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80088ba:	e00a      	b.n	80088d2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80088bc:	f7fa fd34 	bl	8003328 <HAL_GetTick>
 80088c0:	4602      	mov	r2, r0
 80088c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088c4:	1ad3      	subs	r3, r2, r3
 80088c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d901      	bls.n	80088d2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80088ce:	2303      	movs	r3, #3
 80088d0:	e138      	b.n	8008b44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80088d2:	4b4e      	ldr	r3, [pc, #312]	@ (8008a0c <HAL_RCC_OscConfig+0x76c>)
 80088d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088d6:	f003 0302 	and.w	r3, r3, #2
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d1ee      	bne.n	80088bc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	f000 812d 	beq.w	8008b42 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80088e8:	4b48      	ldr	r3, [pc, #288]	@ (8008a0c <HAL_RCC_OscConfig+0x76c>)
 80088ea:	691b      	ldr	r3, [r3, #16]
 80088ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80088f0:	2b18      	cmp	r3, #24
 80088f2:	f000 80bd 	beq.w	8008a70 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088fa:	2b02      	cmp	r3, #2
 80088fc:	f040 809e 	bne.w	8008a3c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008900:	4b42      	ldr	r3, [pc, #264]	@ (8008a0c <HAL_RCC_OscConfig+0x76c>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4a41      	ldr	r2, [pc, #260]	@ (8008a0c <HAL_RCC_OscConfig+0x76c>)
 8008906:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800890a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800890c:	f7fa fd0c 	bl	8003328 <HAL_GetTick>
 8008910:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008912:	e008      	b.n	8008926 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008914:	f7fa fd08 	bl	8003328 <HAL_GetTick>
 8008918:	4602      	mov	r2, r0
 800891a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800891c:	1ad3      	subs	r3, r2, r3
 800891e:	2b02      	cmp	r3, #2
 8008920:	d901      	bls.n	8008926 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8008922:	2303      	movs	r3, #3
 8008924:	e10e      	b.n	8008b44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008926:	4b39      	ldr	r3, [pc, #228]	@ (8008a0c <HAL_RCC_OscConfig+0x76c>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800892e:	2b00      	cmp	r3, #0
 8008930:	d1f0      	bne.n	8008914 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008932:	4b36      	ldr	r3, [pc, #216]	@ (8008a0c <HAL_RCC_OscConfig+0x76c>)
 8008934:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008936:	4b37      	ldr	r3, [pc, #220]	@ (8008a14 <HAL_RCC_OscConfig+0x774>)
 8008938:	4013      	ands	r3, r2
 800893a:	687a      	ldr	r2, [r7, #4]
 800893c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800893e:	687a      	ldr	r2, [r7, #4]
 8008940:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008942:	0112      	lsls	r2, r2, #4
 8008944:	430a      	orrs	r2, r1
 8008946:	4931      	ldr	r1, [pc, #196]	@ (8008a0c <HAL_RCC_OscConfig+0x76c>)
 8008948:	4313      	orrs	r3, r2
 800894a:	628b      	str	r3, [r1, #40]	@ 0x28
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008950:	3b01      	subs	r3, #1
 8008952:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800895a:	3b01      	subs	r3, #1
 800895c:	025b      	lsls	r3, r3, #9
 800895e:	b29b      	uxth	r3, r3
 8008960:	431a      	orrs	r2, r3
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008966:	3b01      	subs	r3, #1
 8008968:	041b      	lsls	r3, r3, #16
 800896a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800896e:	431a      	orrs	r2, r3
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008974:	3b01      	subs	r3, #1
 8008976:	061b      	lsls	r3, r3, #24
 8008978:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800897c:	4923      	ldr	r1, [pc, #140]	@ (8008a0c <HAL_RCC_OscConfig+0x76c>)
 800897e:	4313      	orrs	r3, r2
 8008980:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008982:	4b22      	ldr	r3, [pc, #136]	@ (8008a0c <HAL_RCC_OscConfig+0x76c>)
 8008984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008986:	4a21      	ldr	r2, [pc, #132]	@ (8008a0c <HAL_RCC_OscConfig+0x76c>)
 8008988:	f023 0301 	bic.w	r3, r3, #1
 800898c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800898e:	4b1f      	ldr	r3, [pc, #124]	@ (8008a0c <HAL_RCC_OscConfig+0x76c>)
 8008990:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008992:	4b21      	ldr	r3, [pc, #132]	@ (8008a18 <HAL_RCC_OscConfig+0x778>)
 8008994:	4013      	ands	r3, r2
 8008996:	687a      	ldr	r2, [r7, #4]
 8008998:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800899a:	00d2      	lsls	r2, r2, #3
 800899c:	491b      	ldr	r1, [pc, #108]	@ (8008a0c <HAL_RCC_OscConfig+0x76c>)
 800899e:	4313      	orrs	r3, r2
 80089a0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80089a2:	4b1a      	ldr	r3, [pc, #104]	@ (8008a0c <HAL_RCC_OscConfig+0x76c>)
 80089a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089a6:	f023 020c 	bic.w	r2, r3, #12
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089ae:	4917      	ldr	r1, [pc, #92]	@ (8008a0c <HAL_RCC_OscConfig+0x76c>)
 80089b0:	4313      	orrs	r3, r2
 80089b2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80089b4:	4b15      	ldr	r3, [pc, #84]	@ (8008a0c <HAL_RCC_OscConfig+0x76c>)
 80089b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089b8:	f023 0202 	bic.w	r2, r3, #2
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089c0:	4912      	ldr	r1, [pc, #72]	@ (8008a0c <HAL_RCC_OscConfig+0x76c>)
 80089c2:	4313      	orrs	r3, r2
 80089c4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80089c6:	4b11      	ldr	r3, [pc, #68]	@ (8008a0c <HAL_RCC_OscConfig+0x76c>)
 80089c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089ca:	4a10      	ldr	r2, [pc, #64]	@ (8008a0c <HAL_RCC_OscConfig+0x76c>)
 80089cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80089d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089d2:	4b0e      	ldr	r3, [pc, #56]	@ (8008a0c <HAL_RCC_OscConfig+0x76c>)
 80089d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089d6:	4a0d      	ldr	r2, [pc, #52]	@ (8008a0c <HAL_RCC_OscConfig+0x76c>)
 80089d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80089dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80089de:	4b0b      	ldr	r3, [pc, #44]	@ (8008a0c <HAL_RCC_OscConfig+0x76c>)
 80089e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089e2:	4a0a      	ldr	r2, [pc, #40]	@ (8008a0c <HAL_RCC_OscConfig+0x76c>)
 80089e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80089e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80089ea:	4b08      	ldr	r3, [pc, #32]	@ (8008a0c <HAL_RCC_OscConfig+0x76c>)
 80089ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089ee:	4a07      	ldr	r2, [pc, #28]	@ (8008a0c <HAL_RCC_OscConfig+0x76c>)
 80089f0:	f043 0301 	orr.w	r3, r3, #1
 80089f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80089f6:	4b05      	ldr	r3, [pc, #20]	@ (8008a0c <HAL_RCC_OscConfig+0x76c>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	4a04      	ldr	r2, [pc, #16]	@ (8008a0c <HAL_RCC_OscConfig+0x76c>)
 80089fc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008a00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a02:	f7fa fc91 	bl	8003328 <HAL_GetTick>
 8008a06:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008a08:	e011      	b.n	8008a2e <HAL_RCC_OscConfig+0x78e>
 8008a0a:	bf00      	nop
 8008a0c:	58024400 	.word	0x58024400
 8008a10:	58024800 	.word	0x58024800
 8008a14:	fffffc0c 	.word	0xfffffc0c
 8008a18:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a1c:	f7fa fc84 	bl	8003328 <HAL_GetTick>
 8008a20:	4602      	mov	r2, r0
 8008a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a24:	1ad3      	subs	r3, r2, r3
 8008a26:	2b02      	cmp	r3, #2
 8008a28:	d901      	bls.n	8008a2e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008a2a:	2303      	movs	r3, #3
 8008a2c:	e08a      	b.n	8008b44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008a2e:	4b47      	ldr	r3, [pc, #284]	@ (8008b4c <HAL_RCC_OscConfig+0x8ac>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d0f0      	beq.n	8008a1c <HAL_RCC_OscConfig+0x77c>
 8008a3a:	e082      	b.n	8008b42 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a3c:	4b43      	ldr	r3, [pc, #268]	@ (8008b4c <HAL_RCC_OscConfig+0x8ac>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4a42      	ldr	r2, [pc, #264]	@ (8008b4c <HAL_RCC_OscConfig+0x8ac>)
 8008a42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008a46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a48:	f7fa fc6e 	bl	8003328 <HAL_GetTick>
 8008a4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008a4e:	e008      	b.n	8008a62 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a50:	f7fa fc6a 	bl	8003328 <HAL_GetTick>
 8008a54:	4602      	mov	r2, r0
 8008a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a58:	1ad3      	subs	r3, r2, r3
 8008a5a:	2b02      	cmp	r3, #2
 8008a5c:	d901      	bls.n	8008a62 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008a5e:	2303      	movs	r3, #3
 8008a60:	e070      	b.n	8008b44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008a62:	4b3a      	ldr	r3, [pc, #232]	@ (8008b4c <HAL_RCC_OscConfig+0x8ac>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d1f0      	bne.n	8008a50 <HAL_RCC_OscConfig+0x7b0>
 8008a6e:	e068      	b.n	8008b42 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008a70:	4b36      	ldr	r3, [pc, #216]	@ (8008b4c <HAL_RCC_OscConfig+0x8ac>)
 8008a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a74:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008a76:	4b35      	ldr	r3, [pc, #212]	@ (8008b4c <HAL_RCC_OscConfig+0x8ac>)
 8008a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a7a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a80:	2b01      	cmp	r3, #1
 8008a82:	d031      	beq.n	8008ae8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	f003 0203 	and.w	r2, r3, #3
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	d12a      	bne.n	8008ae8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	091b      	lsrs	r3, r3, #4
 8008a96:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a9e:	429a      	cmp	r2, r3
 8008aa0:	d122      	bne.n	8008ae8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008aac:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	d11a      	bne.n	8008ae8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	0a5b      	lsrs	r3, r3, #9
 8008ab6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008abe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d111      	bne.n	8008ae8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	0c1b      	lsrs	r3, r3, #16
 8008ac8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ad0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008ad2:	429a      	cmp	r2, r3
 8008ad4:	d108      	bne.n	8008ae8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	0e1b      	lsrs	r3, r3, #24
 8008ada:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ae2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	d001      	beq.n	8008aec <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008ae8:	2301      	movs	r3, #1
 8008aea:	e02b      	b.n	8008b44 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008aec:	4b17      	ldr	r3, [pc, #92]	@ (8008b4c <HAL_RCC_OscConfig+0x8ac>)
 8008aee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008af0:	08db      	lsrs	r3, r3, #3
 8008af2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008af6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008afc:	693a      	ldr	r2, [r7, #16]
 8008afe:	429a      	cmp	r2, r3
 8008b00:	d01f      	beq.n	8008b42 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008b02:	4b12      	ldr	r3, [pc, #72]	@ (8008b4c <HAL_RCC_OscConfig+0x8ac>)
 8008b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b06:	4a11      	ldr	r2, [pc, #68]	@ (8008b4c <HAL_RCC_OscConfig+0x8ac>)
 8008b08:	f023 0301 	bic.w	r3, r3, #1
 8008b0c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008b0e:	f7fa fc0b 	bl	8003328 <HAL_GetTick>
 8008b12:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008b14:	bf00      	nop
 8008b16:	f7fa fc07 	bl	8003328 <HAL_GetTick>
 8008b1a:	4602      	mov	r2, r0
 8008b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d0f9      	beq.n	8008b16 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008b22:	4b0a      	ldr	r3, [pc, #40]	@ (8008b4c <HAL_RCC_OscConfig+0x8ac>)
 8008b24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008b26:	4b0a      	ldr	r3, [pc, #40]	@ (8008b50 <HAL_RCC_OscConfig+0x8b0>)
 8008b28:	4013      	ands	r3, r2
 8008b2a:	687a      	ldr	r2, [r7, #4]
 8008b2c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008b2e:	00d2      	lsls	r2, r2, #3
 8008b30:	4906      	ldr	r1, [pc, #24]	@ (8008b4c <HAL_RCC_OscConfig+0x8ac>)
 8008b32:	4313      	orrs	r3, r2
 8008b34:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008b36:	4b05      	ldr	r3, [pc, #20]	@ (8008b4c <HAL_RCC_OscConfig+0x8ac>)
 8008b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b3a:	4a04      	ldr	r2, [pc, #16]	@ (8008b4c <HAL_RCC_OscConfig+0x8ac>)
 8008b3c:	f043 0301 	orr.w	r3, r3, #1
 8008b40:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008b42:	2300      	movs	r3, #0
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3730      	adds	r7, #48	@ 0x30
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}
 8008b4c:	58024400 	.word	0x58024400
 8008b50:	ffff0007 	.word	0xffff0007

08008b54 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b086      	sub	sp, #24
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d101      	bne.n	8008b68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008b64:	2301      	movs	r3, #1
 8008b66:	e19c      	b.n	8008ea2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008b68:	4b8a      	ldr	r3, [pc, #552]	@ (8008d94 <HAL_RCC_ClockConfig+0x240>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f003 030f 	and.w	r3, r3, #15
 8008b70:	683a      	ldr	r2, [r7, #0]
 8008b72:	429a      	cmp	r2, r3
 8008b74:	d910      	bls.n	8008b98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b76:	4b87      	ldr	r3, [pc, #540]	@ (8008d94 <HAL_RCC_ClockConfig+0x240>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f023 020f 	bic.w	r2, r3, #15
 8008b7e:	4985      	ldr	r1, [pc, #532]	@ (8008d94 <HAL_RCC_ClockConfig+0x240>)
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	4313      	orrs	r3, r2
 8008b84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b86:	4b83      	ldr	r3, [pc, #524]	@ (8008d94 <HAL_RCC_ClockConfig+0x240>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f003 030f 	and.w	r3, r3, #15
 8008b8e:	683a      	ldr	r2, [r7, #0]
 8008b90:	429a      	cmp	r2, r3
 8008b92:	d001      	beq.n	8008b98 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008b94:	2301      	movs	r3, #1
 8008b96:	e184      	b.n	8008ea2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f003 0304 	and.w	r3, r3, #4
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d010      	beq.n	8008bc6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	691a      	ldr	r2, [r3, #16]
 8008ba8:	4b7b      	ldr	r3, [pc, #492]	@ (8008d98 <HAL_RCC_ClockConfig+0x244>)
 8008baa:	699b      	ldr	r3, [r3, #24]
 8008bac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008bb0:	429a      	cmp	r2, r3
 8008bb2:	d908      	bls.n	8008bc6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008bb4:	4b78      	ldr	r3, [pc, #480]	@ (8008d98 <HAL_RCC_ClockConfig+0x244>)
 8008bb6:	699b      	ldr	r3, [r3, #24]
 8008bb8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	691b      	ldr	r3, [r3, #16]
 8008bc0:	4975      	ldr	r1, [pc, #468]	@ (8008d98 <HAL_RCC_ClockConfig+0x244>)
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f003 0308 	and.w	r3, r3, #8
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d010      	beq.n	8008bf4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	695a      	ldr	r2, [r3, #20]
 8008bd6:	4b70      	ldr	r3, [pc, #448]	@ (8008d98 <HAL_RCC_ClockConfig+0x244>)
 8008bd8:	69db      	ldr	r3, [r3, #28]
 8008bda:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008bde:	429a      	cmp	r2, r3
 8008be0:	d908      	bls.n	8008bf4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008be2:	4b6d      	ldr	r3, [pc, #436]	@ (8008d98 <HAL_RCC_ClockConfig+0x244>)
 8008be4:	69db      	ldr	r3, [r3, #28]
 8008be6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	695b      	ldr	r3, [r3, #20]
 8008bee:	496a      	ldr	r1, [pc, #424]	@ (8008d98 <HAL_RCC_ClockConfig+0x244>)
 8008bf0:	4313      	orrs	r3, r2
 8008bf2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f003 0310 	and.w	r3, r3, #16
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d010      	beq.n	8008c22 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	699a      	ldr	r2, [r3, #24]
 8008c04:	4b64      	ldr	r3, [pc, #400]	@ (8008d98 <HAL_RCC_ClockConfig+0x244>)
 8008c06:	69db      	ldr	r3, [r3, #28]
 8008c08:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d908      	bls.n	8008c22 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008c10:	4b61      	ldr	r3, [pc, #388]	@ (8008d98 <HAL_RCC_ClockConfig+0x244>)
 8008c12:	69db      	ldr	r3, [r3, #28]
 8008c14:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	699b      	ldr	r3, [r3, #24]
 8008c1c:	495e      	ldr	r1, [pc, #376]	@ (8008d98 <HAL_RCC_ClockConfig+0x244>)
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f003 0320 	and.w	r3, r3, #32
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d010      	beq.n	8008c50 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	69da      	ldr	r2, [r3, #28]
 8008c32:	4b59      	ldr	r3, [pc, #356]	@ (8008d98 <HAL_RCC_ClockConfig+0x244>)
 8008c34:	6a1b      	ldr	r3, [r3, #32]
 8008c36:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008c3a:	429a      	cmp	r2, r3
 8008c3c:	d908      	bls.n	8008c50 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008c3e:	4b56      	ldr	r3, [pc, #344]	@ (8008d98 <HAL_RCC_ClockConfig+0x244>)
 8008c40:	6a1b      	ldr	r3, [r3, #32]
 8008c42:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	69db      	ldr	r3, [r3, #28]
 8008c4a:	4953      	ldr	r1, [pc, #332]	@ (8008d98 <HAL_RCC_ClockConfig+0x244>)
 8008c4c:	4313      	orrs	r3, r2
 8008c4e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f003 0302 	and.w	r3, r3, #2
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d010      	beq.n	8008c7e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	68da      	ldr	r2, [r3, #12]
 8008c60:	4b4d      	ldr	r3, [pc, #308]	@ (8008d98 <HAL_RCC_ClockConfig+0x244>)
 8008c62:	699b      	ldr	r3, [r3, #24]
 8008c64:	f003 030f 	and.w	r3, r3, #15
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	d908      	bls.n	8008c7e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008c6c:	4b4a      	ldr	r3, [pc, #296]	@ (8008d98 <HAL_RCC_ClockConfig+0x244>)
 8008c6e:	699b      	ldr	r3, [r3, #24]
 8008c70:	f023 020f 	bic.w	r2, r3, #15
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	68db      	ldr	r3, [r3, #12]
 8008c78:	4947      	ldr	r1, [pc, #284]	@ (8008d98 <HAL_RCC_ClockConfig+0x244>)
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f003 0301 	and.w	r3, r3, #1
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d055      	beq.n	8008d36 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008c8a:	4b43      	ldr	r3, [pc, #268]	@ (8008d98 <HAL_RCC_ClockConfig+0x244>)
 8008c8c:	699b      	ldr	r3, [r3, #24]
 8008c8e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	689b      	ldr	r3, [r3, #8]
 8008c96:	4940      	ldr	r1, [pc, #256]	@ (8008d98 <HAL_RCC_ClockConfig+0x244>)
 8008c98:	4313      	orrs	r3, r2
 8008c9a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	2b02      	cmp	r3, #2
 8008ca2:	d107      	bne.n	8008cb4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008ca4:	4b3c      	ldr	r3, [pc, #240]	@ (8008d98 <HAL_RCC_ClockConfig+0x244>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d121      	bne.n	8008cf4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	e0f6      	b.n	8008ea2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	2b03      	cmp	r3, #3
 8008cba:	d107      	bne.n	8008ccc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008cbc:	4b36      	ldr	r3, [pc, #216]	@ (8008d98 <HAL_RCC_ClockConfig+0x244>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d115      	bne.n	8008cf4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008cc8:	2301      	movs	r3, #1
 8008cca:	e0ea      	b.n	8008ea2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	685b      	ldr	r3, [r3, #4]
 8008cd0:	2b01      	cmp	r3, #1
 8008cd2:	d107      	bne.n	8008ce4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008cd4:	4b30      	ldr	r3, [pc, #192]	@ (8008d98 <HAL_RCC_ClockConfig+0x244>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d109      	bne.n	8008cf4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	e0de      	b.n	8008ea2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008ce4:	4b2c      	ldr	r3, [pc, #176]	@ (8008d98 <HAL_RCC_ClockConfig+0x244>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f003 0304 	and.w	r3, r3, #4
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d101      	bne.n	8008cf4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	e0d6      	b.n	8008ea2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008cf4:	4b28      	ldr	r3, [pc, #160]	@ (8008d98 <HAL_RCC_ClockConfig+0x244>)
 8008cf6:	691b      	ldr	r3, [r3, #16]
 8008cf8:	f023 0207 	bic.w	r2, r3, #7
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	685b      	ldr	r3, [r3, #4]
 8008d00:	4925      	ldr	r1, [pc, #148]	@ (8008d98 <HAL_RCC_ClockConfig+0x244>)
 8008d02:	4313      	orrs	r3, r2
 8008d04:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d06:	f7fa fb0f 	bl	8003328 <HAL_GetTick>
 8008d0a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d0c:	e00a      	b.n	8008d24 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d0e:	f7fa fb0b 	bl	8003328 <HAL_GetTick>
 8008d12:	4602      	mov	r2, r0
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	1ad3      	subs	r3, r2, r3
 8008d18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d901      	bls.n	8008d24 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008d20:	2303      	movs	r3, #3
 8008d22:	e0be      	b.n	8008ea2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d24:	4b1c      	ldr	r3, [pc, #112]	@ (8008d98 <HAL_RCC_ClockConfig+0x244>)
 8008d26:	691b      	ldr	r3, [r3, #16]
 8008d28:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	00db      	lsls	r3, r3, #3
 8008d32:	429a      	cmp	r2, r3
 8008d34:	d1eb      	bne.n	8008d0e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f003 0302 	and.w	r3, r3, #2
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d010      	beq.n	8008d64 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	68da      	ldr	r2, [r3, #12]
 8008d46:	4b14      	ldr	r3, [pc, #80]	@ (8008d98 <HAL_RCC_ClockConfig+0x244>)
 8008d48:	699b      	ldr	r3, [r3, #24]
 8008d4a:	f003 030f 	and.w	r3, r3, #15
 8008d4e:	429a      	cmp	r2, r3
 8008d50:	d208      	bcs.n	8008d64 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d52:	4b11      	ldr	r3, [pc, #68]	@ (8008d98 <HAL_RCC_ClockConfig+0x244>)
 8008d54:	699b      	ldr	r3, [r3, #24]
 8008d56:	f023 020f 	bic.w	r2, r3, #15
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	68db      	ldr	r3, [r3, #12]
 8008d5e:	490e      	ldr	r1, [pc, #56]	@ (8008d98 <HAL_RCC_ClockConfig+0x244>)
 8008d60:	4313      	orrs	r3, r2
 8008d62:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008d64:	4b0b      	ldr	r3, [pc, #44]	@ (8008d94 <HAL_RCC_ClockConfig+0x240>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f003 030f 	and.w	r3, r3, #15
 8008d6c:	683a      	ldr	r2, [r7, #0]
 8008d6e:	429a      	cmp	r2, r3
 8008d70:	d214      	bcs.n	8008d9c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d72:	4b08      	ldr	r3, [pc, #32]	@ (8008d94 <HAL_RCC_ClockConfig+0x240>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f023 020f 	bic.w	r2, r3, #15
 8008d7a:	4906      	ldr	r1, [pc, #24]	@ (8008d94 <HAL_RCC_ClockConfig+0x240>)
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d82:	4b04      	ldr	r3, [pc, #16]	@ (8008d94 <HAL_RCC_ClockConfig+0x240>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f003 030f 	and.w	r3, r3, #15
 8008d8a:	683a      	ldr	r2, [r7, #0]
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	d005      	beq.n	8008d9c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008d90:	2301      	movs	r3, #1
 8008d92:	e086      	b.n	8008ea2 <HAL_RCC_ClockConfig+0x34e>
 8008d94:	52002000 	.word	0x52002000
 8008d98:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f003 0304 	and.w	r3, r3, #4
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d010      	beq.n	8008dca <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	691a      	ldr	r2, [r3, #16]
 8008dac:	4b3f      	ldr	r3, [pc, #252]	@ (8008eac <HAL_RCC_ClockConfig+0x358>)
 8008dae:	699b      	ldr	r3, [r3, #24]
 8008db0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d208      	bcs.n	8008dca <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008db8:	4b3c      	ldr	r3, [pc, #240]	@ (8008eac <HAL_RCC_ClockConfig+0x358>)
 8008dba:	699b      	ldr	r3, [r3, #24]
 8008dbc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	691b      	ldr	r3, [r3, #16]
 8008dc4:	4939      	ldr	r1, [pc, #228]	@ (8008eac <HAL_RCC_ClockConfig+0x358>)
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f003 0308 	and.w	r3, r3, #8
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d010      	beq.n	8008df8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	695a      	ldr	r2, [r3, #20]
 8008dda:	4b34      	ldr	r3, [pc, #208]	@ (8008eac <HAL_RCC_ClockConfig+0x358>)
 8008ddc:	69db      	ldr	r3, [r3, #28]
 8008dde:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008de2:	429a      	cmp	r2, r3
 8008de4:	d208      	bcs.n	8008df8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008de6:	4b31      	ldr	r3, [pc, #196]	@ (8008eac <HAL_RCC_ClockConfig+0x358>)
 8008de8:	69db      	ldr	r3, [r3, #28]
 8008dea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	695b      	ldr	r3, [r3, #20]
 8008df2:	492e      	ldr	r1, [pc, #184]	@ (8008eac <HAL_RCC_ClockConfig+0x358>)
 8008df4:	4313      	orrs	r3, r2
 8008df6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f003 0310 	and.w	r3, r3, #16
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d010      	beq.n	8008e26 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	699a      	ldr	r2, [r3, #24]
 8008e08:	4b28      	ldr	r3, [pc, #160]	@ (8008eac <HAL_RCC_ClockConfig+0x358>)
 8008e0a:	69db      	ldr	r3, [r3, #28]
 8008e0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008e10:	429a      	cmp	r2, r3
 8008e12:	d208      	bcs.n	8008e26 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008e14:	4b25      	ldr	r3, [pc, #148]	@ (8008eac <HAL_RCC_ClockConfig+0x358>)
 8008e16:	69db      	ldr	r3, [r3, #28]
 8008e18:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	699b      	ldr	r3, [r3, #24]
 8008e20:	4922      	ldr	r1, [pc, #136]	@ (8008eac <HAL_RCC_ClockConfig+0x358>)
 8008e22:	4313      	orrs	r3, r2
 8008e24:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f003 0320 	and.w	r3, r3, #32
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d010      	beq.n	8008e54 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	69da      	ldr	r2, [r3, #28]
 8008e36:	4b1d      	ldr	r3, [pc, #116]	@ (8008eac <HAL_RCC_ClockConfig+0x358>)
 8008e38:	6a1b      	ldr	r3, [r3, #32]
 8008e3a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008e3e:	429a      	cmp	r2, r3
 8008e40:	d208      	bcs.n	8008e54 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008e42:	4b1a      	ldr	r3, [pc, #104]	@ (8008eac <HAL_RCC_ClockConfig+0x358>)
 8008e44:	6a1b      	ldr	r3, [r3, #32]
 8008e46:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	69db      	ldr	r3, [r3, #28]
 8008e4e:	4917      	ldr	r1, [pc, #92]	@ (8008eac <HAL_RCC_ClockConfig+0x358>)
 8008e50:	4313      	orrs	r3, r2
 8008e52:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008e54:	f000 f834 	bl	8008ec0 <HAL_RCC_GetSysClockFreq>
 8008e58:	4602      	mov	r2, r0
 8008e5a:	4b14      	ldr	r3, [pc, #80]	@ (8008eac <HAL_RCC_ClockConfig+0x358>)
 8008e5c:	699b      	ldr	r3, [r3, #24]
 8008e5e:	0a1b      	lsrs	r3, r3, #8
 8008e60:	f003 030f 	and.w	r3, r3, #15
 8008e64:	4912      	ldr	r1, [pc, #72]	@ (8008eb0 <HAL_RCC_ClockConfig+0x35c>)
 8008e66:	5ccb      	ldrb	r3, [r1, r3]
 8008e68:	f003 031f 	and.w	r3, r3, #31
 8008e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8008e70:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008e72:	4b0e      	ldr	r3, [pc, #56]	@ (8008eac <HAL_RCC_ClockConfig+0x358>)
 8008e74:	699b      	ldr	r3, [r3, #24]
 8008e76:	f003 030f 	and.w	r3, r3, #15
 8008e7a:	4a0d      	ldr	r2, [pc, #52]	@ (8008eb0 <HAL_RCC_ClockConfig+0x35c>)
 8008e7c:	5cd3      	ldrb	r3, [r2, r3]
 8008e7e:	f003 031f 	and.w	r3, r3, #31
 8008e82:	693a      	ldr	r2, [r7, #16]
 8008e84:	fa22 f303 	lsr.w	r3, r2, r3
 8008e88:	4a0a      	ldr	r2, [pc, #40]	@ (8008eb4 <HAL_RCC_ClockConfig+0x360>)
 8008e8a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008e8c:	4a0a      	ldr	r2, [pc, #40]	@ (8008eb8 <HAL_RCC_ClockConfig+0x364>)
 8008e8e:	693b      	ldr	r3, [r7, #16]
 8008e90:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008e92:	4b0a      	ldr	r3, [pc, #40]	@ (8008ebc <HAL_RCC_ClockConfig+0x368>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4618      	mov	r0, r3
 8008e98:	f7fa f9fc 	bl	8003294 <HAL_InitTick>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3718      	adds	r7, #24
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}
 8008eaa:	bf00      	nop
 8008eac:	58024400 	.word	0x58024400
 8008eb0:	08012704 	.word	0x08012704
 8008eb4:	24000004 	.word	0x24000004
 8008eb8:	24000000 	.word	0x24000000
 8008ebc:	24000024 	.word	0x24000024

08008ec0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b089      	sub	sp, #36	@ 0x24
 8008ec4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008ec6:	4bb3      	ldr	r3, [pc, #716]	@ (8009194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ec8:	691b      	ldr	r3, [r3, #16]
 8008eca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008ece:	2b18      	cmp	r3, #24
 8008ed0:	f200 8155 	bhi.w	800917e <HAL_RCC_GetSysClockFreq+0x2be>
 8008ed4:	a201      	add	r2, pc, #4	@ (adr r2, 8008edc <HAL_RCC_GetSysClockFreq+0x1c>)
 8008ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eda:	bf00      	nop
 8008edc:	08008f41 	.word	0x08008f41
 8008ee0:	0800917f 	.word	0x0800917f
 8008ee4:	0800917f 	.word	0x0800917f
 8008ee8:	0800917f 	.word	0x0800917f
 8008eec:	0800917f 	.word	0x0800917f
 8008ef0:	0800917f 	.word	0x0800917f
 8008ef4:	0800917f 	.word	0x0800917f
 8008ef8:	0800917f 	.word	0x0800917f
 8008efc:	08008f67 	.word	0x08008f67
 8008f00:	0800917f 	.word	0x0800917f
 8008f04:	0800917f 	.word	0x0800917f
 8008f08:	0800917f 	.word	0x0800917f
 8008f0c:	0800917f 	.word	0x0800917f
 8008f10:	0800917f 	.word	0x0800917f
 8008f14:	0800917f 	.word	0x0800917f
 8008f18:	0800917f 	.word	0x0800917f
 8008f1c:	08008f6d 	.word	0x08008f6d
 8008f20:	0800917f 	.word	0x0800917f
 8008f24:	0800917f 	.word	0x0800917f
 8008f28:	0800917f 	.word	0x0800917f
 8008f2c:	0800917f 	.word	0x0800917f
 8008f30:	0800917f 	.word	0x0800917f
 8008f34:	0800917f 	.word	0x0800917f
 8008f38:	0800917f 	.word	0x0800917f
 8008f3c:	08008f73 	.word	0x08008f73
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f40:	4b94      	ldr	r3, [pc, #592]	@ (8009194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f003 0320 	and.w	r3, r3, #32
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d009      	beq.n	8008f60 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008f4c:	4b91      	ldr	r3, [pc, #580]	@ (8009194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	08db      	lsrs	r3, r3, #3
 8008f52:	f003 0303 	and.w	r3, r3, #3
 8008f56:	4a90      	ldr	r2, [pc, #576]	@ (8009198 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008f58:	fa22 f303 	lsr.w	r3, r2, r3
 8008f5c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008f5e:	e111      	b.n	8009184 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008f60:	4b8d      	ldr	r3, [pc, #564]	@ (8009198 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008f62:	61bb      	str	r3, [r7, #24]
      break;
 8008f64:	e10e      	b.n	8009184 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008f66:	4b8d      	ldr	r3, [pc, #564]	@ (800919c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008f68:	61bb      	str	r3, [r7, #24]
      break;
 8008f6a:	e10b      	b.n	8009184 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008f6c:	4b8c      	ldr	r3, [pc, #560]	@ (80091a0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008f6e:	61bb      	str	r3, [r7, #24]
      break;
 8008f70:	e108      	b.n	8009184 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008f72:	4b88      	ldr	r3, [pc, #544]	@ (8009194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f76:	f003 0303 	and.w	r3, r3, #3
 8008f7a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008f7c:	4b85      	ldr	r3, [pc, #532]	@ (8009194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f80:	091b      	lsrs	r3, r3, #4
 8008f82:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008f86:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008f88:	4b82      	ldr	r3, [pc, #520]	@ (8009194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f8c:	f003 0301 	and.w	r3, r3, #1
 8008f90:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008f92:	4b80      	ldr	r3, [pc, #512]	@ (8009194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f96:	08db      	lsrs	r3, r3, #3
 8008f98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008f9c:	68fa      	ldr	r2, [r7, #12]
 8008f9e:	fb02 f303 	mul.w	r3, r2, r3
 8008fa2:	ee07 3a90 	vmov	s15, r3
 8008fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008faa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	f000 80e1 	beq.w	8009178 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	2b02      	cmp	r3, #2
 8008fba:	f000 8083 	beq.w	80090c4 <HAL_RCC_GetSysClockFreq+0x204>
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	2b02      	cmp	r3, #2
 8008fc2:	f200 80a1 	bhi.w	8009108 <HAL_RCC_GetSysClockFreq+0x248>
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d003      	beq.n	8008fd4 <HAL_RCC_GetSysClockFreq+0x114>
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	2b01      	cmp	r3, #1
 8008fd0:	d056      	beq.n	8009080 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008fd2:	e099      	b.n	8009108 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008fd4:	4b6f      	ldr	r3, [pc, #444]	@ (8009194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f003 0320 	and.w	r3, r3, #32
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d02d      	beq.n	800903c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008fe0:	4b6c      	ldr	r3, [pc, #432]	@ (8009194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	08db      	lsrs	r3, r3, #3
 8008fe6:	f003 0303 	and.w	r3, r3, #3
 8008fea:	4a6b      	ldr	r2, [pc, #428]	@ (8009198 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008fec:	fa22 f303 	lsr.w	r3, r2, r3
 8008ff0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	ee07 3a90 	vmov	s15, r3
 8008ff8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	ee07 3a90 	vmov	s15, r3
 8009002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009006:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800900a:	4b62      	ldr	r3, [pc, #392]	@ (8009194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800900c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800900e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009012:	ee07 3a90 	vmov	s15, r3
 8009016:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800901a:	ed97 6a02 	vldr	s12, [r7, #8]
 800901e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80091a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009022:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009026:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800902a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800902e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009032:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009036:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800903a:	e087      	b.n	800914c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	ee07 3a90 	vmov	s15, r3
 8009042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009046:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80091a8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800904a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800904e:	4b51      	ldr	r3, [pc, #324]	@ (8009194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009056:	ee07 3a90 	vmov	s15, r3
 800905a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800905e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009062:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80091a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009066:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800906a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800906e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009072:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800907a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800907e:	e065      	b.n	800914c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009080:	693b      	ldr	r3, [r7, #16]
 8009082:	ee07 3a90 	vmov	s15, r3
 8009086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800908a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80091ac <HAL_RCC_GetSysClockFreq+0x2ec>
 800908e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009092:	4b40      	ldr	r3, [pc, #256]	@ (8009194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009096:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800909a:	ee07 3a90 	vmov	s15, r3
 800909e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80090a6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80091a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80090aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80090b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80090c2:	e043      	b.n	800914c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	ee07 3a90 	vmov	s15, r3
 80090ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090ce:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80091b0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80090d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090d6:	4b2f      	ldr	r3, [pc, #188]	@ (8009194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090de:	ee07 3a90 	vmov	s15, r3
 80090e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80090ea:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80091a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80090ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80090fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009102:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009106:	e021      	b.n	800914c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	ee07 3a90 	vmov	s15, r3
 800910e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009112:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80091ac <HAL_RCC_GetSysClockFreq+0x2ec>
 8009116:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800911a:	4b1e      	ldr	r3, [pc, #120]	@ (8009194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800911c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800911e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009122:	ee07 3a90 	vmov	s15, r3
 8009126:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800912a:	ed97 6a02 	vldr	s12, [r7, #8]
 800912e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80091a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009132:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009136:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800913a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800913e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009146:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800914a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800914c:	4b11      	ldr	r3, [pc, #68]	@ (8009194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800914e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009150:	0a5b      	lsrs	r3, r3, #9
 8009152:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009156:	3301      	adds	r3, #1
 8009158:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	ee07 3a90 	vmov	s15, r3
 8009160:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009164:	edd7 6a07 	vldr	s13, [r7, #28]
 8009168:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800916c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009170:	ee17 3a90 	vmov	r3, s15
 8009174:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009176:	e005      	b.n	8009184 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009178:	2300      	movs	r3, #0
 800917a:	61bb      	str	r3, [r7, #24]
      break;
 800917c:	e002      	b.n	8009184 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800917e:	4b07      	ldr	r3, [pc, #28]	@ (800919c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009180:	61bb      	str	r3, [r7, #24]
      break;
 8009182:	bf00      	nop
  }

  return sysclockfreq;
 8009184:	69bb      	ldr	r3, [r7, #24]
}
 8009186:	4618      	mov	r0, r3
 8009188:	3724      	adds	r7, #36	@ 0x24
 800918a:	46bd      	mov	sp, r7
 800918c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009190:	4770      	bx	lr
 8009192:	bf00      	nop
 8009194:	58024400 	.word	0x58024400
 8009198:	03d09000 	.word	0x03d09000
 800919c:	003d0900 	.word	0x003d0900
 80091a0:	017d7840 	.word	0x017d7840
 80091a4:	46000000 	.word	0x46000000
 80091a8:	4c742400 	.word	0x4c742400
 80091ac:	4a742400 	.word	0x4a742400
 80091b0:	4bbebc20 	.word	0x4bbebc20

080091b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b082      	sub	sp, #8
 80091b8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80091ba:	f7ff fe81 	bl	8008ec0 <HAL_RCC_GetSysClockFreq>
 80091be:	4602      	mov	r2, r0
 80091c0:	4b10      	ldr	r3, [pc, #64]	@ (8009204 <HAL_RCC_GetHCLKFreq+0x50>)
 80091c2:	699b      	ldr	r3, [r3, #24]
 80091c4:	0a1b      	lsrs	r3, r3, #8
 80091c6:	f003 030f 	and.w	r3, r3, #15
 80091ca:	490f      	ldr	r1, [pc, #60]	@ (8009208 <HAL_RCC_GetHCLKFreq+0x54>)
 80091cc:	5ccb      	ldrb	r3, [r1, r3]
 80091ce:	f003 031f 	and.w	r3, r3, #31
 80091d2:	fa22 f303 	lsr.w	r3, r2, r3
 80091d6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80091d8:	4b0a      	ldr	r3, [pc, #40]	@ (8009204 <HAL_RCC_GetHCLKFreq+0x50>)
 80091da:	699b      	ldr	r3, [r3, #24]
 80091dc:	f003 030f 	and.w	r3, r3, #15
 80091e0:	4a09      	ldr	r2, [pc, #36]	@ (8009208 <HAL_RCC_GetHCLKFreq+0x54>)
 80091e2:	5cd3      	ldrb	r3, [r2, r3]
 80091e4:	f003 031f 	and.w	r3, r3, #31
 80091e8:	687a      	ldr	r2, [r7, #4]
 80091ea:	fa22 f303 	lsr.w	r3, r2, r3
 80091ee:	4a07      	ldr	r2, [pc, #28]	@ (800920c <HAL_RCC_GetHCLKFreq+0x58>)
 80091f0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80091f2:	4a07      	ldr	r2, [pc, #28]	@ (8009210 <HAL_RCC_GetHCLKFreq+0x5c>)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80091f8:	4b04      	ldr	r3, [pc, #16]	@ (800920c <HAL_RCC_GetHCLKFreq+0x58>)
 80091fa:	681b      	ldr	r3, [r3, #0]
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	3708      	adds	r7, #8
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}
 8009204:	58024400 	.word	0x58024400
 8009208:	08012704 	.word	0x08012704
 800920c:	24000004 	.word	0x24000004
 8009210:	24000000 	.word	0x24000000

08009214 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009218:	f7ff ffcc 	bl	80091b4 <HAL_RCC_GetHCLKFreq>
 800921c:	4602      	mov	r2, r0
 800921e:	4b06      	ldr	r3, [pc, #24]	@ (8009238 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009220:	69db      	ldr	r3, [r3, #28]
 8009222:	091b      	lsrs	r3, r3, #4
 8009224:	f003 0307 	and.w	r3, r3, #7
 8009228:	4904      	ldr	r1, [pc, #16]	@ (800923c <HAL_RCC_GetPCLK1Freq+0x28>)
 800922a:	5ccb      	ldrb	r3, [r1, r3]
 800922c:	f003 031f 	and.w	r3, r3, #31
 8009230:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009234:	4618      	mov	r0, r3
 8009236:	bd80      	pop	{r7, pc}
 8009238:	58024400 	.word	0x58024400
 800923c:	08012704 	.word	0x08012704

08009240 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009244:	f7ff ffb6 	bl	80091b4 <HAL_RCC_GetHCLKFreq>
 8009248:	4602      	mov	r2, r0
 800924a:	4b06      	ldr	r3, [pc, #24]	@ (8009264 <HAL_RCC_GetPCLK2Freq+0x24>)
 800924c:	69db      	ldr	r3, [r3, #28]
 800924e:	0a1b      	lsrs	r3, r3, #8
 8009250:	f003 0307 	and.w	r3, r3, #7
 8009254:	4904      	ldr	r1, [pc, #16]	@ (8009268 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009256:	5ccb      	ldrb	r3, [r1, r3]
 8009258:	f003 031f 	and.w	r3, r3, #31
 800925c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009260:	4618      	mov	r0, r3
 8009262:	bd80      	pop	{r7, pc}
 8009264:	58024400 	.word	0x58024400
 8009268:	08012704 	.word	0x08012704

0800926c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800926c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009270:	b0ca      	sub	sp, #296	@ 0x128
 8009272:	af00      	add	r7, sp, #0
 8009274:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009278:	2300      	movs	r3, #0
 800927a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800927e:	2300      	movs	r3, #0
 8009280:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009284:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800928c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8009290:	2500      	movs	r5, #0
 8009292:	ea54 0305 	orrs.w	r3, r4, r5
 8009296:	d049      	beq.n	800932c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009298:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800929c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800929e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80092a2:	d02f      	beq.n	8009304 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80092a4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80092a8:	d828      	bhi.n	80092fc <HAL_RCCEx_PeriphCLKConfig+0x90>
 80092aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80092ae:	d01a      	beq.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80092b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80092b4:	d822      	bhi.n	80092fc <HAL_RCCEx_PeriphCLKConfig+0x90>
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d003      	beq.n	80092c2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80092ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80092be:	d007      	beq.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80092c0:	e01c      	b.n	80092fc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092c2:	4bb8      	ldr	r3, [pc, #736]	@ (80095a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80092c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092c6:	4ab7      	ldr	r2, [pc, #732]	@ (80095a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80092c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80092cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80092ce:	e01a      	b.n	8009306 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80092d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092d4:	3308      	adds	r3, #8
 80092d6:	2102      	movs	r1, #2
 80092d8:	4618      	mov	r0, r3
 80092da:	f002 fb61 	bl	800b9a0 <RCCEx_PLL2_Config>
 80092de:	4603      	mov	r3, r0
 80092e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80092e4:	e00f      	b.n	8009306 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80092e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092ea:	3328      	adds	r3, #40	@ 0x28
 80092ec:	2102      	movs	r1, #2
 80092ee:	4618      	mov	r0, r3
 80092f0:	f002 fc08 	bl	800bb04 <RCCEx_PLL3_Config>
 80092f4:	4603      	mov	r3, r0
 80092f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80092fa:	e004      	b.n	8009306 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80092fc:	2301      	movs	r3, #1
 80092fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009302:	e000      	b.n	8009306 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009304:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009306:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800930a:	2b00      	cmp	r3, #0
 800930c:	d10a      	bne.n	8009324 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800930e:	4ba5      	ldr	r3, [pc, #660]	@ (80095a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009310:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009312:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800931a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800931c:	4aa1      	ldr	r2, [pc, #644]	@ (80095a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800931e:	430b      	orrs	r3, r1
 8009320:	6513      	str	r3, [r2, #80]	@ 0x50
 8009322:	e003      	b.n	800932c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009324:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009328:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800932c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009334:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8009338:	f04f 0900 	mov.w	r9, #0
 800933c:	ea58 0309 	orrs.w	r3, r8, r9
 8009340:	d047      	beq.n	80093d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009342:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009346:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009348:	2b04      	cmp	r3, #4
 800934a:	d82a      	bhi.n	80093a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800934c:	a201      	add	r2, pc, #4	@ (adr r2, 8009354 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800934e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009352:	bf00      	nop
 8009354:	08009369 	.word	0x08009369
 8009358:	08009377 	.word	0x08009377
 800935c:	0800938d 	.word	0x0800938d
 8009360:	080093ab 	.word	0x080093ab
 8009364:	080093ab 	.word	0x080093ab
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009368:	4b8e      	ldr	r3, [pc, #568]	@ (80095a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800936a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800936c:	4a8d      	ldr	r2, [pc, #564]	@ (80095a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800936e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009372:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009374:	e01a      	b.n	80093ac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009376:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800937a:	3308      	adds	r3, #8
 800937c:	2100      	movs	r1, #0
 800937e:	4618      	mov	r0, r3
 8009380:	f002 fb0e 	bl	800b9a0 <RCCEx_PLL2_Config>
 8009384:	4603      	mov	r3, r0
 8009386:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800938a:	e00f      	b.n	80093ac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800938c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009390:	3328      	adds	r3, #40	@ 0x28
 8009392:	2100      	movs	r1, #0
 8009394:	4618      	mov	r0, r3
 8009396:	f002 fbb5 	bl	800bb04 <RCCEx_PLL3_Config>
 800939a:	4603      	mov	r3, r0
 800939c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80093a0:	e004      	b.n	80093ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80093a2:	2301      	movs	r3, #1
 80093a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80093a8:	e000      	b.n	80093ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80093aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d10a      	bne.n	80093ca <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80093b4:	4b7b      	ldr	r3, [pc, #492]	@ (80095a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80093b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093b8:	f023 0107 	bic.w	r1, r3, #7
 80093bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093c2:	4a78      	ldr	r2, [pc, #480]	@ (80095a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80093c4:	430b      	orrs	r3, r1
 80093c6:	6513      	str	r3, [r2, #80]	@ 0x50
 80093c8:	e003      	b.n	80093d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80093d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093da:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80093de:	f04f 0b00 	mov.w	fp, #0
 80093e2:	ea5a 030b 	orrs.w	r3, sl, fp
 80093e6:	d04c      	beq.n	8009482 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80093e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80093ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80093f2:	d030      	beq.n	8009456 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80093f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80093f8:	d829      	bhi.n	800944e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80093fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80093fc:	d02d      	beq.n	800945a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80093fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8009400:	d825      	bhi.n	800944e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009402:	2b80      	cmp	r3, #128	@ 0x80
 8009404:	d018      	beq.n	8009438 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8009406:	2b80      	cmp	r3, #128	@ 0x80
 8009408:	d821      	bhi.n	800944e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800940a:	2b00      	cmp	r3, #0
 800940c:	d002      	beq.n	8009414 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800940e:	2b40      	cmp	r3, #64	@ 0x40
 8009410:	d007      	beq.n	8009422 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8009412:	e01c      	b.n	800944e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009414:	4b63      	ldr	r3, [pc, #396]	@ (80095a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009418:	4a62      	ldr	r2, [pc, #392]	@ (80095a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800941a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800941e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009420:	e01c      	b.n	800945c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009422:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009426:	3308      	adds	r3, #8
 8009428:	2100      	movs	r1, #0
 800942a:	4618      	mov	r0, r3
 800942c:	f002 fab8 	bl	800b9a0 <RCCEx_PLL2_Config>
 8009430:	4603      	mov	r3, r0
 8009432:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009436:	e011      	b.n	800945c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009438:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800943c:	3328      	adds	r3, #40	@ 0x28
 800943e:	2100      	movs	r1, #0
 8009440:	4618      	mov	r0, r3
 8009442:	f002 fb5f 	bl	800bb04 <RCCEx_PLL3_Config>
 8009446:	4603      	mov	r3, r0
 8009448:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800944c:	e006      	b.n	800945c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800944e:	2301      	movs	r3, #1
 8009450:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009454:	e002      	b.n	800945c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009456:	bf00      	nop
 8009458:	e000      	b.n	800945c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800945a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800945c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009460:	2b00      	cmp	r3, #0
 8009462:	d10a      	bne.n	800947a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009464:	4b4f      	ldr	r3, [pc, #316]	@ (80095a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009466:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009468:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800946c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009470:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009472:	4a4c      	ldr	r2, [pc, #304]	@ (80095a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009474:	430b      	orrs	r3, r1
 8009476:	6513      	str	r3, [r2, #80]	@ 0x50
 8009478:	e003      	b.n	8009482 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800947a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800947e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009482:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800948a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800948e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8009492:	2300      	movs	r3, #0
 8009494:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8009498:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800949c:	460b      	mov	r3, r1
 800949e:	4313      	orrs	r3, r2
 80094a0:	d053      	beq.n	800954a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80094a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80094aa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80094ae:	d035      	beq.n	800951c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80094b0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80094b4:	d82e      	bhi.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80094b6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80094ba:	d031      	beq.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80094bc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80094c0:	d828      	bhi.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80094c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80094c6:	d01a      	beq.n	80094fe <HAL_RCCEx_PeriphCLKConfig+0x292>
 80094c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80094cc:	d822      	bhi.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d003      	beq.n	80094da <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80094d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80094d6:	d007      	beq.n	80094e8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80094d8:	e01c      	b.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094da:	4b32      	ldr	r3, [pc, #200]	@ (80095a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80094dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094de:	4a31      	ldr	r2, [pc, #196]	@ (80095a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80094e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80094e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80094e6:	e01c      	b.n	8009522 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80094e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094ec:	3308      	adds	r3, #8
 80094ee:	2100      	movs	r1, #0
 80094f0:	4618      	mov	r0, r3
 80094f2:	f002 fa55 	bl	800b9a0 <RCCEx_PLL2_Config>
 80094f6:	4603      	mov	r3, r0
 80094f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80094fc:	e011      	b.n	8009522 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80094fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009502:	3328      	adds	r3, #40	@ 0x28
 8009504:	2100      	movs	r1, #0
 8009506:	4618      	mov	r0, r3
 8009508:	f002 fafc 	bl	800bb04 <RCCEx_PLL3_Config>
 800950c:	4603      	mov	r3, r0
 800950e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009512:	e006      	b.n	8009522 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009514:	2301      	movs	r3, #1
 8009516:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800951a:	e002      	b.n	8009522 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800951c:	bf00      	nop
 800951e:	e000      	b.n	8009522 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009520:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009522:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009526:	2b00      	cmp	r3, #0
 8009528:	d10b      	bne.n	8009542 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800952a:	4b1e      	ldr	r3, [pc, #120]	@ (80095a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800952c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800952e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8009532:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009536:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800953a:	4a1a      	ldr	r2, [pc, #104]	@ (80095a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800953c:	430b      	orrs	r3, r1
 800953e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009540:	e003      	b.n	800954a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009542:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009546:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800954a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800954e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009552:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8009556:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800955a:	2300      	movs	r3, #0
 800955c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009560:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8009564:	460b      	mov	r3, r1
 8009566:	4313      	orrs	r3, r2
 8009568:	d056      	beq.n	8009618 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800956a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800956e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009572:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009576:	d038      	beq.n	80095ea <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009578:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800957c:	d831      	bhi.n	80095e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800957e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009582:	d034      	beq.n	80095ee <HAL_RCCEx_PeriphCLKConfig+0x382>
 8009584:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009588:	d82b      	bhi.n	80095e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800958a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800958e:	d01d      	beq.n	80095cc <HAL_RCCEx_PeriphCLKConfig+0x360>
 8009590:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009594:	d825      	bhi.n	80095e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009596:	2b00      	cmp	r3, #0
 8009598:	d006      	beq.n	80095a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800959a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800959e:	d00a      	beq.n	80095b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80095a0:	e01f      	b.n	80095e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80095a2:	bf00      	nop
 80095a4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095a8:	4ba2      	ldr	r3, [pc, #648]	@ (8009834 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80095aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095ac:	4aa1      	ldr	r2, [pc, #644]	@ (8009834 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80095ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80095b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80095b4:	e01c      	b.n	80095f0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80095b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095ba:	3308      	adds	r3, #8
 80095bc:	2100      	movs	r1, #0
 80095be:	4618      	mov	r0, r3
 80095c0:	f002 f9ee 	bl	800b9a0 <RCCEx_PLL2_Config>
 80095c4:	4603      	mov	r3, r0
 80095c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80095ca:	e011      	b.n	80095f0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80095cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095d0:	3328      	adds	r3, #40	@ 0x28
 80095d2:	2100      	movs	r1, #0
 80095d4:	4618      	mov	r0, r3
 80095d6:	f002 fa95 	bl	800bb04 <RCCEx_PLL3_Config>
 80095da:	4603      	mov	r3, r0
 80095dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80095e0:	e006      	b.n	80095f0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80095e2:	2301      	movs	r3, #1
 80095e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80095e8:	e002      	b.n	80095f0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80095ea:	bf00      	nop
 80095ec:	e000      	b.n	80095f0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80095ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d10b      	bne.n	8009610 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80095f8:	4b8e      	ldr	r3, [pc, #568]	@ (8009834 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80095fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095fc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8009600:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009604:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009608:	4a8a      	ldr	r2, [pc, #552]	@ (8009834 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800960a:	430b      	orrs	r3, r1
 800960c:	6593      	str	r3, [r2, #88]	@ 0x58
 800960e:	e003      	b.n	8009618 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009610:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009614:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009618:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800961c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009620:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8009624:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009628:	2300      	movs	r3, #0
 800962a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800962e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8009632:	460b      	mov	r3, r1
 8009634:	4313      	orrs	r3, r2
 8009636:	d03a      	beq.n	80096ae <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8009638:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800963c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800963e:	2b30      	cmp	r3, #48	@ 0x30
 8009640:	d01f      	beq.n	8009682 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8009642:	2b30      	cmp	r3, #48	@ 0x30
 8009644:	d819      	bhi.n	800967a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009646:	2b20      	cmp	r3, #32
 8009648:	d00c      	beq.n	8009664 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800964a:	2b20      	cmp	r3, #32
 800964c:	d815      	bhi.n	800967a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800964e:	2b00      	cmp	r3, #0
 8009650:	d019      	beq.n	8009686 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8009652:	2b10      	cmp	r3, #16
 8009654:	d111      	bne.n	800967a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009656:	4b77      	ldr	r3, [pc, #476]	@ (8009834 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800965a:	4a76      	ldr	r2, [pc, #472]	@ (8009834 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800965c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009660:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009662:	e011      	b.n	8009688 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009664:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009668:	3308      	adds	r3, #8
 800966a:	2102      	movs	r1, #2
 800966c:	4618      	mov	r0, r3
 800966e:	f002 f997 	bl	800b9a0 <RCCEx_PLL2_Config>
 8009672:	4603      	mov	r3, r0
 8009674:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009678:	e006      	b.n	8009688 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800967a:	2301      	movs	r3, #1
 800967c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009680:	e002      	b.n	8009688 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009682:	bf00      	nop
 8009684:	e000      	b.n	8009688 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009686:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009688:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800968c:	2b00      	cmp	r3, #0
 800968e:	d10a      	bne.n	80096a6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009690:	4b68      	ldr	r3, [pc, #416]	@ (8009834 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009692:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009694:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8009698:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800969c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800969e:	4a65      	ldr	r2, [pc, #404]	@ (8009834 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80096a0:	430b      	orrs	r3, r1
 80096a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80096a4:	e003      	b.n	80096ae <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80096aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80096ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80096ba:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80096be:	2300      	movs	r3, #0
 80096c0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80096c4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80096c8:	460b      	mov	r3, r1
 80096ca:	4313      	orrs	r3, r2
 80096cc:	d051      	beq.n	8009772 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80096ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80096d8:	d035      	beq.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80096da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80096de:	d82e      	bhi.n	800973e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80096e0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80096e4:	d031      	beq.n	800974a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80096e6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80096ea:	d828      	bhi.n	800973e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80096ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80096f0:	d01a      	beq.n	8009728 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80096f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80096f6:	d822      	bhi.n	800973e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d003      	beq.n	8009704 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80096fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009700:	d007      	beq.n	8009712 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8009702:	e01c      	b.n	800973e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009704:	4b4b      	ldr	r3, [pc, #300]	@ (8009834 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009708:	4a4a      	ldr	r2, [pc, #296]	@ (8009834 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800970a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800970e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009710:	e01c      	b.n	800974c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009716:	3308      	adds	r3, #8
 8009718:	2100      	movs	r1, #0
 800971a:	4618      	mov	r0, r3
 800971c:	f002 f940 	bl	800b9a0 <RCCEx_PLL2_Config>
 8009720:	4603      	mov	r3, r0
 8009722:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009726:	e011      	b.n	800974c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009728:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800972c:	3328      	adds	r3, #40	@ 0x28
 800972e:	2100      	movs	r1, #0
 8009730:	4618      	mov	r0, r3
 8009732:	f002 f9e7 	bl	800bb04 <RCCEx_PLL3_Config>
 8009736:	4603      	mov	r3, r0
 8009738:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800973c:	e006      	b.n	800974c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800973e:	2301      	movs	r3, #1
 8009740:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009744:	e002      	b.n	800974c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009746:	bf00      	nop
 8009748:	e000      	b.n	800974c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800974a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800974c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009750:	2b00      	cmp	r3, #0
 8009752:	d10a      	bne.n	800976a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009754:	4b37      	ldr	r3, [pc, #220]	@ (8009834 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009756:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009758:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800975c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009760:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009762:	4a34      	ldr	r2, [pc, #208]	@ (8009834 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009764:	430b      	orrs	r3, r1
 8009766:	6513      	str	r3, [r2, #80]	@ 0x50
 8009768:	e003      	b.n	8009772 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800976a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800976e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800977a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800977e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009782:	2300      	movs	r3, #0
 8009784:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009788:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800978c:	460b      	mov	r3, r1
 800978e:	4313      	orrs	r3, r2
 8009790:	d056      	beq.n	8009840 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009792:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009796:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009798:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800979c:	d033      	beq.n	8009806 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800979e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80097a2:	d82c      	bhi.n	80097fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 80097a4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80097a8:	d02f      	beq.n	800980a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80097aa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80097ae:	d826      	bhi.n	80097fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 80097b0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80097b4:	d02b      	beq.n	800980e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80097b6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80097ba:	d820      	bhi.n	80097fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 80097bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80097c0:	d012      	beq.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80097c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80097c6:	d81a      	bhi.n	80097fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d022      	beq.n	8009812 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80097cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80097d0:	d115      	bne.n	80097fe <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80097d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097d6:	3308      	adds	r3, #8
 80097d8:	2101      	movs	r1, #1
 80097da:	4618      	mov	r0, r3
 80097dc:	f002 f8e0 	bl	800b9a0 <RCCEx_PLL2_Config>
 80097e0:	4603      	mov	r3, r0
 80097e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80097e6:	e015      	b.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80097e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097ec:	3328      	adds	r3, #40	@ 0x28
 80097ee:	2101      	movs	r1, #1
 80097f0:	4618      	mov	r0, r3
 80097f2:	f002 f987 	bl	800bb04 <RCCEx_PLL3_Config>
 80097f6:	4603      	mov	r3, r0
 80097f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80097fc:	e00a      	b.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80097fe:	2301      	movs	r3, #1
 8009800:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009804:	e006      	b.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009806:	bf00      	nop
 8009808:	e004      	b.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800980a:	bf00      	nop
 800980c:	e002      	b.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800980e:	bf00      	nop
 8009810:	e000      	b.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009812:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009814:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009818:	2b00      	cmp	r3, #0
 800981a:	d10d      	bne.n	8009838 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800981c:	4b05      	ldr	r3, [pc, #20]	@ (8009834 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800981e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009820:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8009824:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009828:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800982a:	4a02      	ldr	r2, [pc, #8]	@ (8009834 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800982c:	430b      	orrs	r3, r1
 800982e:	6513      	str	r3, [r2, #80]	@ 0x50
 8009830:	e006      	b.n	8009840 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009832:	bf00      	nop
 8009834:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009838:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800983c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009840:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009848:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800984c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009850:	2300      	movs	r3, #0
 8009852:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009856:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800985a:	460b      	mov	r3, r1
 800985c:	4313      	orrs	r3, r2
 800985e:	d055      	beq.n	800990c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009860:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009864:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009868:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800986c:	d033      	beq.n	80098d6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800986e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009872:	d82c      	bhi.n	80098ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009874:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009878:	d02f      	beq.n	80098da <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800987a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800987e:	d826      	bhi.n	80098ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009880:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009884:	d02b      	beq.n	80098de <HAL_RCCEx_PeriphCLKConfig+0x672>
 8009886:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800988a:	d820      	bhi.n	80098ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 800988c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009890:	d012      	beq.n	80098b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8009892:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009896:	d81a      	bhi.n	80098ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009898:	2b00      	cmp	r3, #0
 800989a:	d022      	beq.n	80098e2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800989c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80098a0:	d115      	bne.n	80098ce <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80098a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098a6:	3308      	adds	r3, #8
 80098a8:	2101      	movs	r1, #1
 80098aa:	4618      	mov	r0, r3
 80098ac:	f002 f878 	bl	800b9a0 <RCCEx_PLL2_Config>
 80098b0:	4603      	mov	r3, r0
 80098b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80098b6:	e015      	b.n	80098e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80098b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098bc:	3328      	adds	r3, #40	@ 0x28
 80098be:	2101      	movs	r1, #1
 80098c0:	4618      	mov	r0, r3
 80098c2:	f002 f91f 	bl	800bb04 <RCCEx_PLL3_Config>
 80098c6:	4603      	mov	r3, r0
 80098c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80098cc:	e00a      	b.n	80098e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80098ce:	2301      	movs	r3, #1
 80098d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80098d4:	e006      	b.n	80098e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80098d6:	bf00      	nop
 80098d8:	e004      	b.n	80098e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80098da:	bf00      	nop
 80098dc:	e002      	b.n	80098e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80098de:	bf00      	nop
 80098e0:	e000      	b.n	80098e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80098e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d10b      	bne.n	8009904 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80098ec:	4ba3      	ldr	r3, [pc, #652]	@ (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80098ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80098f0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80098f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80098fc:	4a9f      	ldr	r2, [pc, #636]	@ (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80098fe:	430b      	orrs	r3, r1
 8009900:	6593      	str	r3, [r2, #88]	@ 0x58
 8009902:	e003      	b.n	800990c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009904:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009908:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800990c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009914:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8009918:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800991c:	2300      	movs	r3, #0
 800991e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009922:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009926:	460b      	mov	r3, r1
 8009928:	4313      	orrs	r3, r2
 800992a:	d037      	beq.n	800999c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800992c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009930:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009932:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009936:	d00e      	beq.n	8009956 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8009938:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800993c:	d816      	bhi.n	800996c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800993e:	2b00      	cmp	r3, #0
 8009940:	d018      	beq.n	8009974 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8009942:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009946:	d111      	bne.n	800996c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009948:	4b8c      	ldr	r3, [pc, #560]	@ (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800994a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800994c:	4a8b      	ldr	r2, [pc, #556]	@ (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800994e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009952:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009954:	e00f      	b.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009956:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800995a:	3308      	adds	r3, #8
 800995c:	2101      	movs	r1, #1
 800995e:	4618      	mov	r0, r3
 8009960:	f002 f81e 	bl	800b9a0 <RCCEx_PLL2_Config>
 8009964:	4603      	mov	r3, r0
 8009966:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800996a:	e004      	b.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800996c:	2301      	movs	r3, #1
 800996e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009972:	e000      	b.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8009974:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009976:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800997a:	2b00      	cmp	r3, #0
 800997c:	d10a      	bne.n	8009994 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800997e:	4b7f      	ldr	r3, [pc, #508]	@ (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009980:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009982:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009986:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800998a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800998c:	4a7b      	ldr	r2, [pc, #492]	@ (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800998e:	430b      	orrs	r3, r1
 8009990:	6513      	str	r3, [r2, #80]	@ 0x50
 8009992:	e003      	b.n	800999c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009994:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009998:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800999c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099a4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80099a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80099ac:	2300      	movs	r3, #0
 80099ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80099b2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80099b6:	460b      	mov	r3, r1
 80099b8:	4313      	orrs	r3, r2
 80099ba:	d039      	beq.n	8009a30 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80099bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80099c2:	2b03      	cmp	r3, #3
 80099c4:	d81c      	bhi.n	8009a00 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80099c6:	a201      	add	r2, pc, #4	@ (adr r2, 80099cc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80099c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099cc:	08009a09 	.word	0x08009a09
 80099d0:	080099dd 	.word	0x080099dd
 80099d4:	080099eb 	.word	0x080099eb
 80099d8:	08009a09 	.word	0x08009a09
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099dc:	4b67      	ldr	r3, [pc, #412]	@ (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80099de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099e0:	4a66      	ldr	r2, [pc, #408]	@ (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80099e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80099e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80099e8:	e00f      	b.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80099ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099ee:	3308      	adds	r3, #8
 80099f0:	2102      	movs	r1, #2
 80099f2:	4618      	mov	r0, r3
 80099f4:	f001 ffd4 	bl	800b9a0 <RCCEx_PLL2_Config>
 80099f8:	4603      	mov	r3, r0
 80099fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80099fe:	e004      	b.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009a00:	2301      	movs	r3, #1
 8009a02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009a06:	e000      	b.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8009a08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d10a      	bne.n	8009a28 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009a12:	4b5a      	ldr	r3, [pc, #360]	@ (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009a16:	f023 0103 	bic.w	r1, r3, #3
 8009a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009a20:	4a56      	ldr	r2, [pc, #344]	@ (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a22:	430b      	orrs	r3, r1
 8009a24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009a26:	e003      	b.n	8009a30 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a38:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8009a3c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009a40:	2300      	movs	r3, #0
 8009a42:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009a46:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8009a4a:	460b      	mov	r3, r1
 8009a4c:	4313      	orrs	r3, r2
 8009a4e:	f000 809f 	beq.w	8009b90 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009a52:	4b4b      	ldr	r3, [pc, #300]	@ (8009b80 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	4a4a      	ldr	r2, [pc, #296]	@ (8009b80 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009a58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009a5c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009a5e:	f7f9 fc63 	bl	8003328 <HAL_GetTick>
 8009a62:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009a66:	e00b      	b.n	8009a80 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009a68:	f7f9 fc5e 	bl	8003328 <HAL_GetTick>
 8009a6c:	4602      	mov	r2, r0
 8009a6e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009a72:	1ad3      	subs	r3, r2, r3
 8009a74:	2b64      	cmp	r3, #100	@ 0x64
 8009a76:	d903      	bls.n	8009a80 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8009a78:	2303      	movs	r3, #3
 8009a7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009a7e:	e005      	b.n	8009a8c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009a80:	4b3f      	ldr	r3, [pc, #252]	@ (8009b80 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d0ed      	beq.n	8009a68 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8009a8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d179      	bne.n	8009b88 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009a94:	4b39      	ldr	r3, [pc, #228]	@ (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a96:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a9c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009aa0:	4053      	eors	r3, r2
 8009aa2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d015      	beq.n	8009ad6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009aaa:	4b34      	ldr	r3, [pc, #208]	@ (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009aac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009aae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009ab2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009ab6:	4b31      	ldr	r3, [pc, #196]	@ (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ab8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009aba:	4a30      	ldr	r2, [pc, #192]	@ (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009abc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009ac0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009ac2:	4b2e      	ldr	r3, [pc, #184]	@ (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ac4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ac6:	4a2d      	ldr	r2, [pc, #180]	@ (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ac8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009acc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009ace:	4a2b      	ldr	r2, [pc, #172]	@ (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ad0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009ad4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ada:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009ade:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ae2:	d118      	bne.n	8009b16 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ae4:	f7f9 fc20 	bl	8003328 <HAL_GetTick>
 8009ae8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009aec:	e00d      	b.n	8009b0a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009aee:	f7f9 fc1b 	bl	8003328 <HAL_GetTick>
 8009af2:	4602      	mov	r2, r0
 8009af4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009af8:	1ad2      	subs	r2, r2, r3
 8009afa:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009afe:	429a      	cmp	r2, r3
 8009b00:	d903      	bls.n	8009b0a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8009b02:	2303      	movs	r3, #3
 8009b04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8009b08:	e005      	b.n	8009b16 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009b0a:	4b1c      	ldr	r3, [pc, #112]	@ (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b0e:	f003 0302 	and.w	r3, r3, #2
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d0eb      	beq.n	8009aee <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8009b16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d129      	bne.n	8009b72 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b22:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009b26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009b2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009b2e:	d10e      	bne.n	8009b4e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8009b30:	4b12      	ldr	r3, [pc, #72]	@ (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b32:	691b      	ldr	r3, [r3, #16]
 8009b34:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8009b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b3c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009b40:	091a      	lsrs	r2, r3, #4
 8009b42:	4b10      	ldr	r3, [pc, #64]	@ (8009b84 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8009b44:	4013      	ands	r3, r2
 8009b46:	4a0d      	ldr	r2, [pc, #52]	@ (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b48:	430b      	orrs	r3, r1
 8009b4a:	6113      	str	r3, [r2, #16]
 8009b4c:	e005      	b.n	8009b5a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8009b4e:	4b0b      	ldr	r3, [pc, #44]	@ (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b50:	691b      	ldr	r3, [r3, #16]
 8009b52:	4a0a      	ldr	r2, [pc, #40]	@ (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b54:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009b58:	6113      	str	r3, [r2, #16]
 8009b5a:	4b08      	ldr	r3, [pc, #32]	@ (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b5c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8009b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b62:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009b66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009b6a:	4a04      	ldr	r2, [pc, #16]	@ (8009b7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b6c:	430b      	orrs	r3, r1
 8009b6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009b70:	e00e      	b.n	8009b90 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009b72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8009b7a:	e009      	b.n	8009b90 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8009b7c:	58024400 	.word	0x58024400
 8009b80:	58024800 	.word	0x58024800
 8009b84:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b8c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b98:	f002 0301 	and.w	r3, r2, #1
 8009b9c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009ba6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009baa:	460b      	mov	r3, r1
 8009bac:	4313      	orrs	r3, r2
 8009bae:	f000 8089 	beq.w	8009cc4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bb6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009bb8:	2b28      	cmp	r3, #40	@ 0x28
 8009bba:	d86b      	bhi.n	8009c94 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8009bbc:	a201      	add	r2, pc, #4	@ (adr r2, 8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bc2:	bf00      	nop
 8009bc4:	08009c9d 	.word	0x08009c9d
 8009bc8:	08009c95 	.word	0x08009c95
 8009bcc:	08009c95 	.word	0x08009c95
 8009bd0:	08009c95 	.word	0x08009c95
 8009bd4:	08009c95 	.word	0x08009c95
 8009bd8:	08009c95 	.word	0x08009c95
 8009bdc:	08009c95 	.word	0x08009c95
 8009be0:	08009c95 	.word	0x08009c95
 8009be4:	08009c69 	.word	0x08009c69
 8009be8:	08009c95 	.word	0x08009c95
 8009bec:	08009c95 	.word	0x08009c95
 8009bf0:	08009c95 	.word	0x08009c95
 8009bf4:	08009c95 	.word	0x08009c95
 8009bf8:	08009c95 	.word	0x08009c95
 8009bfc:	08009c95 	.word	0x08009c95
 8009c00:	08009c95 	.word	0x08009c95
 8009c04:	08009c7f 	.word	0x08009c7f
 8009c08:	08009c95 	.word	0x08009c95
 8009c0c:	08009c95 	.word	0x08009c95
 8009c10:	08009c95 	.word	0x08009c95
 8009c14:	08009c95 	.word	0x08009c95
 8009c18:	08009c95 	.word	0x08009c95
 8009c1c:	08009c95 	.word	0x08009c95
 8009c20:	08009c95 	.word	0x08009c95
 8009c24:	08009c9d 	.word	0x08009c9d
 8009c28:	08009c95 	.word	0x08009c95
 8009c2c:	08009c95 	.word	0x08009c95
 8009c30:	08009c95 	.word	0x08009c95
 8009c34:	08009c95 	.word	0x08009c95
 8009c38:	08009c95 	.word	0x08009c95
 8009c3c:	08009c95 	.word	0x08009c95
 8009c40:	08009c95 	.word	0x08009c95
 8009c44:	08009c9d 	.word	0x08009c9d
 8009c48:	08009c95 	.word	0x08009c95
 8009c4c:	08009c95 	.word	0x08009c95
 8009c50:	08009c95 	.word	0x08009c95
 8009c54:	08009c95 	.word	0x08009c95
 8009c58:	08009c95 	.word	0x08009c95
 8009c5c:	08009c95 	.word	0x08009c95
 8009c60:	08009c95 	.word	0x08009c95
 8009c64:	08009c9d 	.word	0x08009c9d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c6c:	3308      	adds	r3, #8
 8009c6e:	2101      	movs	r1, #1
 8009c70:	4618      	mov	r0, r3
 8009c72:	f001 fe95 	bl	800b9a0 <RCCEx_PLL2_Config>
 8009c76:	4603      	mov	r3, r0
 8009c78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009c7c:	e00f      	b.n	8009c9e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c82:	3328      	adds	r3, #40	@ 0x28
 8009c84:	2101      	movs	r1, #1
 8009c86:	4618      	mov	r0, r3
 8009c88:	f001 ff3c 	bl	800bb04 <RCCEx_PLL3_Config>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009c92:	e004      	b.n	8009c9e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c94:	2301      	movs	r3, #1
 8009c96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009c9a:	e000      	b.n	8009c9e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8009c9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d10a      	bne.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009ca6:	4bbf      	ldr	r3, [pc, #764]	@ (8009fa4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009ca8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009caa:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8009cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cb2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009cb4:	4abb      	ldr	r2, [pc, #748]	@ (8009fa4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009cb6:	430b      	orrs	r3, r1
 8009cb8:	6553      	str	r3, [r2, #84]	@ 0x54
 8009cba:	e003      	b.n	8009cc4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009cc0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ccc:	f002 0302 	and.w	r3, r2, #2
 8009cd0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009cda:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8009cde:	460b      	mov	r3, r1
 8009ce0:	4313      	orrs	r3, r2
 8009ce2:	d041      	beq.n	8009d68 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ce8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009cea:	2b05      	cmp	r3, #5
 8009cec:	d824      	bhi.n	8009d38 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8009cee:	a201      	add	r2, pc, #4	@ (adr r2, 8009cf4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8009cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cf4:	08009d41 	.word	0x08009d41
 8009cf8:	08009d0d 	.word	0x08009d0d
 8009cfc:	08009d23 	.word	0x08009d23
 8009d00:	08009d41 	.word	0x08009d41
 8009d04:	08009d41 	.word	0x08009d41
 8009d08:	08009d41 	.word	0x08009d41
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d10:	3308      	adds	r3, #8
 8009d12:	2101      	movs	r1, #1
 8009d14:	4618      	mov	r0, r3
 8009d16:	f001 fe43 	bl	800b9a0 <RCCEx_PLL2_Config>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009d20:	e00f      	b.n	8009d42 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d26:	3328      	adds	r3, #40	@ 0x28
 8009d28:	2101      	movs	r1, #1
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f001 feea 	bl	800bb04 <RCCEx_PLL3_Config>
 8009d30:	4603      	mov	r3, r0
 8009d32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009d36:	e004      	b.n	8009d42 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d38:	2301      	movs	r3, #1
 8009d3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009d3e:	e000      	b.n	8009d42 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8009d40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d10a      	bne.n	8009d60 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009d4a:	4b96      	ldr	r3, [pc, #600]	@ (8009fa4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009d4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d4e:	f023 0107 	bic.w	r1, r3, #7
 8009d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d56:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009d58:	4a92      	ldr	r2, [pc, #584]	@ (8009fa4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009d5a:	430b      	orrs	r3, r1
 8009d5c:	6553      	str	r3, [r2, #84]	@ 0x54
 8009d5e:	e003      	b.n	8009d68 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d70:	f002 0304 	and.w	r3, r2, #4
 8009d74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009d78:	2300      	movs	r3, #0
 8009d7a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009d7e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009d82:	460b      	mov	r3, r1
 8009d84:	4313      	orrs	r3, r2
 8009d86:	d044      	beq.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009d90:	2b05      	cmp	r3, #5
 8009d92:	d825      	bhi.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8009d94:	a201      	add	r2, pc, #4	@ (adr r2, 8009d9c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8009d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d9a:	bf00      	nop
 8009d9c:	08009de9 	.word	0x08009de9
 8009da0:	08009db5 	.word	0x08009db5
 8009da4:	08009dcb 	.word	0x08009dcb
 8009da8:	08009de9 	.word	0x08009de9
 8009dac:	08009de9 	.word	0x08009de9
 8009db0:	08009de9 	.word	0x08009de9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009db8:	3308      	adds	r3, #8
 8009dba:	2101      	movs	r1, #1
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f001 fdef 	bl	800b9a0 <RCCEx_PLL2_Config>
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009dc8:	e00f      	b.n	8009dea <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dce:	3328      	adds	r3, #40	@ 0x28
 8009dd0:	2101      	movs	r1, #1
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f001 fe96 	bl	800bb04 <RCCEx_PLL3_Config>
 8009dd8:	4603      	mov	r3, r0
 8009dda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009dde:	e004      	b.n	8009dea <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009de0:	2301      	movs	r3, #1
 8009de2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009de6:	e000      	b.n	8009dea <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8009de8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009dea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d10b      	bne.n	8009e0a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009df2:	4b6c      	ldr	r3, [pc, #432]	@ (8009fa4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009df4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009df6:	f023 0107 	bic.w	r1, r3, #7
 8009dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009e02:	4a68      	ldr	r2, [pc, #416]	@ (8009fa4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009e04:	430b      	orrs	r3, r1
 8009e06:	6593      	str	r3, [r2, #88]	@ 0x58
 8009e08:	e003      	b.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e1a:	f002 0320 	and.w	r3, r2, #32
 8009e1e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009e22:	2300      	movs	r3, #0
 8009e24:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009e28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009e2c:	460b      	mov	r3, r1
 8009e2e:	4313      	orrs	r3, r2
 8009e30:	d055      	beq.n	8009ede <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009e3e:	d033      	beq.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8009e40:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009e44:	d82c      	bhi.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009e46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e4a:	d02f      	beq.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8009e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e50:	d826      	bhi.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009e52:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009e56:	d02b      	beq.n	8009eb0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8009e58:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009e5c:	d820      	bhi.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009e5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009e62:	d012      	beq.n	8009e8a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009e64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009e68:	d81a      	bhi.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d022      	beq.n	8009eb4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8009e6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009e72:	d115      	bne.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e78:	3308      	adds	r3, #8
 8009e7a:	2100      	movs	r1, #0
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	f001 fd8f 	bl	800b9a0 <RCCEx_PLL2_Config>
 8009e82:	4603      	mov	r3, r0
 8009e84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009e88:	e015      	b.n	8009eb6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e8e:	3328      	adds	r3, #40	@ 0x28
 8009e90:	2102      	movs	r1, #2
 8009e92:	4618      	mov	r0, r3
 8009e94:	f001 fe36 	bl	800bb04 <RCCEx_PLL3_Config>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009e9e:	e00a      	b.n	8009eb6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009ea6:	e006      	b.n	8009eb6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009ea8:	bf00      	nop
 8009eaa:	e004      	b.n	8009eb6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009eac:	bf00      	nop
 8009eae:	e002      	b.n	8009eb6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009eb0:	bf00      	nop
 8009eb2:	e000      	b.n	8009eb6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009eb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009eb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d10b      	bne.n	8009ed6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009ebe:	4b39      	ldr	r3, [pc, #228]	@ (8009fa4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009ec0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ec2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ece:	4a35      	ldr	r2, [pc, #212]	@ (8009fa4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009ed0:	430b      	orrs	r3, r1
 8009ed2:	6553      	str	r3, [r2, #84]	@ 0x54
 8009ed4:	e003      	b.n	8009ede <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ed6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009eda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8009eea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009eee:	2300      	movs	r3, #0
 8009ef0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009ef4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8009ef8:	460b      	mov	r3, r1
 8009efa:	4313      	orrs	r3, r2
 8009efc:	d058      	beq.n	8009fb0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f02:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009f06:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009f0a:	d033      	beq.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009f0c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009f10:	d82c      	bhi.n	8009f6c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009f12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f16:	d02f      	beq.n	8009f78 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8009f18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f1c:	d826      	bhi.n	8009f6c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009f1e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009f22:	d02b      	beq.n	8009f7c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8009f24:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009f28:	d820      	bhi.n	8009f6c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009f2a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009f2e:	d012      	beq.n	8009f56 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009f30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009f34:	d81a      	bhi.n	8009f6c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d022      	beq.n	8009f80 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8009f3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009f3e:	d115      	bne.n	8009f6c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009f40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f44:	3308      	adds	r3, #8
 8009f46:	2100      	movs	r1, #0
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f001 fd29 	bl	800b9a0 <RCCEx_PLL2_Config>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009f54:	e015      	b.n	8009f82 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f5a:	3328      	adds	r3, #40	@ 0x28
 8009f5c:	2102      	movs	r1, #2
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f001 fdd0 	bl	800bb04 <RCCEx_PLL3_Config>
 8009f64:	4603      	mov	r3, r0
 8009f66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009f6a:	e00a      	b.n	8009f82 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009f72:	e006      	b.n	8009f82 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009f74:	bf00      	nop
 8009f76:	e004      	b.n	8009f82 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009f78:	bf00      	nop
 8009f7a:	e002      	b.n	8009f82 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009f7c:	bf00      	nop
 8009f7e:	e000      	b.n	8009f82 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009f80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d10e      	bne.n	8009fa8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009f8a:	4b06      	ldr	r3, [pc, #24]	@ (8009fa4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009f8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f8e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8009f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f96:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009f9a:	4a02      	ldr	r2, [pc, #8]	@ (8009fa4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009f9c:	430b      	orrs	r3, r1
 8009f9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009fa0:	e006      	b.n	8009fb0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8009fa2:	bf00      	nop
 8009fa4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fa8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009fac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009fbc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009fc6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8009fca:	460b      	mov	r3, r1
 8009fcc:	4313      	orrs	r3, r2
 8009fce:	d055      	beq.n	800a07c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fd4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009fd8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009fdc:	d033      	beq.n	800a046 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8009fde:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009fe2:	d82c      	bhi.n	800a03e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009fe4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009fe8:	d02f      	beq.n	800a04a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8009fea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009fee:	d826      	bhi.n	800a03e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009ff0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009ff4:	d02b      	beq.n	800a04e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8009ff6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009ffa:	d820      	bhi.n	800a03e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009ffc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a000:	d012      	beq.n	800a028 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800a002:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a006:	d81a      	bhi.n	800a03e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d022      	beq.n	800a052 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800a00c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a010:	d115      	bne.n	800a03e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a012:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a016:	3308      	adds	r3, #8
 800a018:	2100      	movs	r1, #0
 800a01a:	4618      	mov	r0, r3
 800a01c:	f001 fcc0 	bl	800b9a0 <RCCEx_PLL2_Config>
 800a020:	4603      	mov	r3, r0
 800a022:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a026:	e015      	b.n	800a054 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a028:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a02c:	3328      	adds	r3, #40	@ 0x28
 800a02e:	2102      	movs	r1, #2
 800a030:	4618      	mov	r0, r3
 800a032:	f001 fd67 	bl	800bb04 <RCCEx_PLL3_Config>
 800a036:	4603      	mov	r3, r0
 800a038:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a03c:	e00a      	b.n	800a054 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a03e:	2301      	movs	r3, #1
 800a040:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a044:	e006      	b.n	800a054 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a046:	bf00      	nop
 800a048:	e004      	b.n	800a054 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a04a:	bf00      	nop
 800a04c:	e002      	b.n	800a054 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a04e:	bf00      	nop
 800a050:	e000      	b.n	800a054 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a052:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a054:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d10b      	bne.n	800a074 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a05c:	4ba1      	ldr	r3, [pc, #644]	@ (800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a05e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a060:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800a064:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a068:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a06c:	4a9d      	ldr	r2, [pc, #628]	@ (800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a06e:	430b      	orrs	r3, r1
 800a070:	6593      	str	r3, [r2, #88]	@ 0x58
 800a072:	e003      	b.n	800a07c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a074:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a078:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a07c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a080:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a084:	f002 0308 	and.w	r3, r2, #8
 800a088:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a08c:	2300      	movs	r3, #0
 800a08e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a092:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800a096:	460b      	mov	r3, r1
 800a098:	4313      	orrs	r3, r2
 800a09a:	d01e      	beq.n	800a0da <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a09c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a0a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a0a8:	d10c      	bne.n	800a0c4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a0aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0ae:	3328      	adds	r3, #40	@ 0x28
 800a0b0:	2102      	movs	r1, #2
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	f001 fd26 	bl	800bb04 <RCCEx_PLL3_Config>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d002      	beq.n	800a0c4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800a0be:	2301      	movs	r3, #1
 800a0c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a0c4:	4b87      	ldr	r3, [pc, #540]	@ (800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a0c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0c8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a0cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a0d4:	4a83      	ldr	r2, [pc, #524]	@ (800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a0d6:	430b      	orrs	r3, r1
 800a0d8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a0da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e2:	f002 0310 	and.w	r3, r2, #16
 800a0e6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a0f0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800a0f4:	460b      	mov	r3, r1
 800a0f6:	4313      	orrs	r3, r2
 800a0f8:	d01e      	beq.n	800a138 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a0fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a102:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a106:	d10c      	bne.n	800a122 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a108:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a10c:	3328      	adds	r3, #40	@ 0x28
 800a10e:	2102      	movs	r1, #2
 800a110:	4618      	mov	r0, r3
 800a112:	f001 fcf7 	bl	800bb04 <RCCEx_PLL3_Config>
 800a116:	4603      	mov	r3, r0
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d002      	beq.n	800a122 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800a11c:	2301      	movs	r3, #1
 800a11e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a122:	4b70      	ldr	r3, [pc, #448]	@ (800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a126:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a12a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a12e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a132:	4a6c      	ldr	r2, [pc, #432]	@ (800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a134:	430b      	orrs	r3, r1
 800a136:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a138:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a13c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a140:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800a144:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a148:	2300      	movs	r3, #0
 800a14a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a14e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800a152:	460b      	mov	r3, r1
 800a154:	4313      	orrs	r3, r2
 800a156:	d03e      	beq.n	800a1d6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a158:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a15c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a160:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a164:	d022      	beq.n	800a1ac <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800a166:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a16a:	d81b      	bhi.n	800a1a4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d003      	beq.n	800a178 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800a170:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a174:	d00b      	beq.n	800a18e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800a176:	e015      	b.n	800a1a4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a178:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a17c:	3308      	adds	r3, #8
 800a17e:	2100      	movs	r1, #0
 800a180:	4618      	mov	r0, r3
 800a182:	f001 fc0d 	bl	800b9a0 <RCCEx_PLL2_Config>
 800a186:	4603      	mov	r3, r0
 800a188:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a18c:	e00f      	b.n	800a1ae <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a18e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a192:	3328      	adds	r3, #40	@ 0x28
 800a194:	2102      	movs	r1, #2
 800a196:	4618      	mov	r0, r3
 800a198:	f001 fcb4 	bl	800bb04 <RCCEx_PLL3_Config>
 800a19c:	4603      	mov	r3, r0
 800a19e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a1a2:	e004      	b.n	800a1ae <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a1aa:	e000      	b.n	800a1ae <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800a1ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a1ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d10b      	bne.n	800a1ce <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a1b6:	4b4b      	ldr	r3, [pc, #300]	@ (800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a1b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a1ba:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800a1be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a1c6:	4a47      	ldr	r2, [pc, #284]	@ (800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a1c8:	430b      	orrs	r3, r1
 800a1ca:	6593      	str	r3, [r2, #88]	@ 0x58
 800a1cc:	e003      	b.n	800a1d6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a1d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a1d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1de:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800a1e2:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a1e8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800a1ec:	460b      	mov	r3, r1
 800a1ee:	4313      	orrs	r3, r2
 800a1f0:	d03b      	beq.n	800a26a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a1f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a1fa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a1fe:	d01f      	beq.n	800a240 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800a200:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a204:	d818      	bhi.n	800a238 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800a206:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a20a:	d003      	beq.n	800a214 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800a20c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a210:	d007      	beq.n	800a222 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800a212:	e011      	b.n	800a238 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a214:	4b33      	ldr	r3, [pc, #204]	@ (800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a218:	4a32      	ldr	r2, [pc, #200]	@ (800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a21a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a21e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a220:	e00f      	b.n	800a242 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a222:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a226:	3328      	adds	r3, #40	@ 0x28
 800a228:	2101      	movs	r1, #1
 800a22a:	4618      	mov	r0, r3
 800a22c:	f001 fc6a 	bl	800bb04 <RCCEx_PLL3_Config>
 800a230:	4603      	mov	r3, r0
 800a232:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800a236:	e004      	b.n	800a242 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a238:	2301      	movs	r3, #1
 800a23a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a23e:	e000      	b.n	800a242 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800a240:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a242:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a246:	2b00      	cmp	r3, #0
 800a248:	d10b      	bne.n	800a262 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a24a:	4b26      	ldr	r3, [pc, #152]	@ (800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a24c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a24e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a252:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a256:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a25a:	4a22      	ldr	r2, [pc, #136]	@ (800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a25c:	430b      	orrs	r3, r1
 800a25e:	6553      	str	r3, [r2, #84]	@ 0x54
 800a260:	e003      	b.n	800a26a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a262:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a266:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a26a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a26e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a272:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800a276:	673b      	str	r3, [r7, #112]	@ 0x70
 800a278:	2300      	movs	r3, #0
 800a27a:	677b      	str	r3, [r7, #116]	@ 0x74
 800a27c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800a280:	460b      	mov	r3, r1
 800a282:	4313      	orrs	r3, r2
 800a284:	d034      	beq.n	800a2f0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a286:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a28a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d003      	beq.n	800a298 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800a290:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a294:	d007      	beq.n	800a2a6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800a296:	e011      	b.n	800a2bc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a298:	4b12      	ldr	r3, [pc, #72]	@ (800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a29a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a29c:	4a11      	ldr	r2, [pc, #68]	@ (800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a29e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a2a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a2a4:	e00e      	b.n	800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a2a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2aa:	3308      	adds	r3, #8
 800a2ac:	2102      	movs	r1, #2
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f001 fb76 	bl	800b9a0 <RCCEx_PLL2_Config>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a2ba:	e003      	b.n	800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800a2bc:	2301      	movs	r3, #1
 800a2be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a2c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d10d      	bne.n	800a2e8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a2cc:	4b05      	ldr	r3, [pc, #20]	@ (800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a2ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a2d0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a2d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a2da:	4a02      	ldr	r2, [pc, #8]	@ (800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a2dc:	430b      	orrs	r3, r1
 800a2de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a2e0:	e006      	b.n	800a2f0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800a2e2:	bf00      	nop
 800a2e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a2ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a2f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2f8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800a2fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a2fe:	2300      	movs	r3, #0
 800a300:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a302:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800a306:	460b      	mov	r3, r1
 800a308:	4313      	orrs	r3, r2
 800a30a:	d00c      	beq.n	800a326 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a30c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a310:	3328      	adds	r3, #40	@ 0x28
 800a312:	2102      	movs	r1, #2
 800a314:	4618      	mov	r0, r3
 800a316:	f001 fbf5 	bl	800bb04 <RCCEx_PLL3_Config>
 800a31a:	4603      	mov	r3, r0
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d002      	beq.n	800a326 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800a320:	2301      	movs	r3, #1
 800a322:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a326:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a32e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800a332:	663b      	str	r3, [r7, #96]	@ 0x60
 800a334:	2300      	movs	r3, #0
 800a336:	667b      	str	r3, [r7, #100]	@ 0x64
 800a338:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800a33c:	460b      	mov	r3, r1
 800a33e:	4313      	orrs	r3, r2
 800a340:	d038      	beq.n	800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a342:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a346:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a34a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a34e:	d018      	beq.n	800a382 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800a350:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a354:	d811      	bhi.n	800a37a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a356:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a35a:	d014      	beq.n	800a386 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800a35c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a360:	d80b      	bhi.n	800a37a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a362:	2b00      	cmp	r3, #0
 800a364:	d011      	beq.n	800a38a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800a366:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a36a:	d106      	bne.n	800a37a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a36c:	4bc3      	ldr	r3, [pc, #780]	@ (800a67c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a36e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a370:	4ac2      	ldr	r2, [pc, #776]	@ (800a67c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a372:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a376:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a378:	e008      	b.n	800a38c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a37a:	2301      	movs	r3, #1
 800a37c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a380:	e004      	b.n	800a38c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a382:	bf00      	nop
 800a384:	e002      	b.n	800a38c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a386:	bf00      	nop
 800a388:	e000      	b.n	800a38c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a38a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a38c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a390:	2b00      	cmp	r3, #0
 800a392:	d10b      	bne.n	800a3ac <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a394:	4bb9      	ldr	r3, [pc, #740]	@ (800a67c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a396:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a398:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a39c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3a4:	4ab5      	ldr	r2, [pc, #724]	@ (800a67c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a3a6:	430b      	orrs	r3, r1
 800a3a8:	6553      	str	r3, [r2, #84]	@ 0x54
 800a3aa:	e003      	b.n	800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a3b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a3b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3bc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800a3c0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a3c6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800a3ca:	460b      	mov	r3, r1
 800a3cc:	4313      	orrs	r3, r2
 800a3ce:	d009      	beq.n	800a3e4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a3d0:	4baa      	ldr	r3, [pc, #680]	@ (800a67c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a3d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3d4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a3d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a3de:	4aa7      	ldr	r2, [pc, #668]	@ (800a67c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a3e0:	430b      	orrs	r3, r1
 800a3e2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a3e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ec:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800a3f0:	653b      	str	r3, [r7, #80]	@ 0x50
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	657b      	str	r3, [r7, #84]	@ 0x54
 800a3f6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800a3fa:	460b      	mov	r3, r1
 800a3fc:	4313      	orrs	r3, r2
 800a3fe:	d00a      	beq.n	800a416 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a400:	4b9e      	ldr	r3, [pc, #632]	@ (800a67c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a402:	691b      	ldr	r3, [r3, #16]
 800a404:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800a408:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a40c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a410:	4a9a      	ldr	r2, [pc, #616]	@ (800a67c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a412:	430b      	orrs	r3, r1
 800a414:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a416:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a41a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a41e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800a422:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a424:	2300      	movs	r3, #0
 800a426:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a428:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800a42c:	460b      	mov	r3, r1
 800a42e:	4313      	orrs	r3, r2
 800a430:	d009      	beq.n	800a446 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a432:	4b92      	ldr	r3, [pc, #584]	@ (800a67c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a434:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a436:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800a43a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a43e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a440:	4a8e      	ldr	r2, [pc, #568]	@ (800a67c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a442:	430b      	orrs	r3, r1
 800a444:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a446:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a44a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a44e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800a452:	643b      	str	r3, [r7, #64]	@ 0x40
 800a454:	2300      	movs	r3, #0
 800a456:	647b      	str	r3, [r7, #68]	@ 0x44
 800a458:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800a45c:	460b      	mov	r3, r1
 800a45e:	4313      	orrs	r3, r2
 800a460:	d00e      	beq.n	800a480 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a462:	4b86      	ldr	r3, [pc, #536]	@ (800a67c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a464:	691b      	ldr	r3, [r3, #16]
 800a466:	4a85      	ldr	r2, [pc, #532]	@ (800a67c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a468:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a46c:	6113      	str	r3, [r2, #16]
 800a46e:	4b83      	ldr	r3, [pc, #524]	@ (800a67c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a470:	6919      	ldr	r1, [r3, #16]
 800a472:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a476:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a47a:	4a80      	ldr	r2, [pc, #512]	@ (800a67c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a47c:	430b      	orrs	r3, r1
 800a47e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a480:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a484:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a488:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800a48c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a48e:	2300      	movs	r3, #0
 800a490:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a492:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800a496:	460b      	mov	r3, r1
 800a498:	4313      	orrs	r3, r2
 800a49a:	d009      	beq.n	800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a49c:	4b77      	ldr	r3, [pc, #476]	@ (800a67c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a49e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a4a0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a4a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4aa:	4a74      	ldr	r2, [pc, #464]	@ (800a67c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a4ac:	430b      	orrs	r3, r1
 800a4ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a4b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4b8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800a4bc:	633b      	str	r3, [r7, #48]	@ 0x30
 800a4be:	2300      	movs	r3, #0
 800a4c0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4c2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800a4c6:	460b      	mov	r3, r1
 800a4c8:	4313      	orrs	r3, r2
 800a4ca:	d00a      	beq.n	800a4e2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a4cc:	4b6b      	ldr	r3, [pc, #428]	@ (800a67c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a4ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4d0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800a4d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a4dc:	4a67      	ldr	r2, [pc, #412]	@ (800a67c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a4de:	430b      	orrs	r3, r1
 800a4e0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a4e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ea:	2100      	movs	r1, #0
 800a4ec:	62b9      	str	r1, [r7, #40]	@ 0x28
 800a4ee:	f003 0301 	and.w	r3, r3, #1
 800a4f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a4f4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800a4f8:	460b      	mov	r3, r1
 800a4fa:	4313      	orrs	r3, r2
 800a4fc:	d011      	beq.n	800a522 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a4fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a502:	3308      	adds	r3, #8
 800a504:	2100      	movs	r1, #0
 800a506:	4618      	mov	r0, r3
 800a508:	f001 fa4a 	bl	800b9a0 <RCCEx_PLL2_Config>
 800a50c:	4603      	mov	r3, r0
 800a50e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a512:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a516:	2b00      	cmp	r3, #0
 800a518:	d003      	beq.n	800a522 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a51a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a51e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a522:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a52a:	2100      	movs	r1, #0
 800a52c:	6239      	str	r1, [r7, #32]
 800a52e:	f003 0302 	and.w	r3, r3, #2
 800a532:	627b      	str	r3, [r7, #36]	@ 0x24
 800a534:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a538:	460b      	mov	r3, r1
 800a53a:	4313      	orrs	r3, r2
 800a53c:	d011      	beq.n	800a562 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a53e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a542:	3308      	adds	r3, #8
 800a544:	2101      	movs	r1, #1
 800a546:	4618      	mov	r0, r3
 800a548:	f001 fa2a 	bl	800b9a0 <RCCEx_PLL2_Config>
 800a54c:	4603      	mov	r3, r0
 800a54e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a552:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a556:	2b00      	cmp	r3, #0
 800a558:	d003      	beq.n	800a562 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a55a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a55e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a562:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a56a:	2100      	movs	r1, #0
 800a56c:	61b9      	str	r1, [r7, #24]
 800a56e:	f003 0304 	and.w	r3, r3, #4
 800a572:	61fb      	str	r3, [r7, #28]
 800a574:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a578:	460b      	mov	r3, r1
 800a57a:	4313      	orrs	r3, r2
 800a57c:	d011      	beq.n	800a5a2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a57e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a582:	3308      	adds	r3, #8
 800a584:	2102      	movs	r1, #2
 800a586:	4618      	mov	r0, r3
 800a588:	f001 fa0a 	bl	800b9a0 <RCCEx_PLL2_Config>
 800a58c:	4603      	mov	r3, r0
 800a58e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a592:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a596:	2b00      	cmp	r3, #0
 800a598:	d003      	beq.n	800a5a2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a59a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a59e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a5a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5aa:	2100      	movs	r1, #0
 800a5ac:	6139      	str	r1, [r7, #16]
 800a5ae:	f003 0308 	and.w	r3, r3, #8
 800a5b2:	617b      	str	r3, [r7, #20]
 800a5b4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a5b8:	460b      	mov	r3, r1
 800a5ba:	4313      	orrs	r3, r2
 800a5bc:	d011      	beq.n	800a5e2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a5be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5c2:	3328      	adds	r3, #40	@ 0x28
 800a5c4:	2100      	movs	r1, #0
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	f001 fa9c 	bl	800bb04 <RCCEx_PLL3_Config>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800a5d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d003      	beq.n	800a5e2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a5de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a5e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ea:	2100      	movs	r1, #0
 800a5ec:	60b9      	str	r1, [r7, #8]
 800a5ee:	f003 0310 	and.w	r3, r3, #16
 800a5f2:	60fb      	str	r3, [r7, #12]
 800a5f4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a5f8:	460b      	mov	r3, r1
 800a5fa:	4313      	orrs	r3, r2
 800a5fc:	d011      	beq.n	800a622 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a5fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a602:	3328      	adds	r3, #40	@ 0x28
 800a604:	2101      	movs	r1, #1
 800a606:	4618      	mov	r0, r3
 800a608:	f001 fa7c 	bl	800bb04 <RCCEx_PLL3_Config>
 800a60c:	4603      	mov	r3, r0
 800a60e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a612:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a616:	2b00      	cmp	r3, #0
 800a618:	d003      	beq.n	800a622 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a61a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a61e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a622:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a62a:	2100      	movs	r1, #0
 800a62c:	6039      	str	r1, [r7, #0]
 800a62e:	f003 0320 	and.w	r3, r3, #32
 800a632:	607b      	str	r3, [r7, #4]
 800a634:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a638:	460b      	mov	r3, r1
 800a63a:	4313      	orrs	r3, r2
 800a63c:	d011      	beq.n	800a662 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a63e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a642:	3328      	adds	r3, #40	@ 0x28
 800a644:	2102      	movs	r1, #2
 800a646:	4618      	mov	r0, r3
 800a648:	f001 fa5c 	bl	800bb04 <RCCEx_PLL3_Config>
 800a64c:	4603      	mov	r3, r0
 800a64e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a652:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a656:	2b00      	cmp	r3, #0
 800a658:	d003      	beq.n	800a662 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a65a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a65e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800a662:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800a666:	2b00      	cmp	r3, #0
 800a668:	d101      	bne.n	800a66e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800a66a:	2300      	movs	r3, #0
 800a66c:	e000      	b.n	800a670 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800a66e:	2301      	movs	r3, #1
}
 800a670:	4618      	mov	r0, r3
 800a672:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800a676:	46bd      	mov	sp, r7
 800a678:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a67c:	58024400 	.word	0x58024400

0800a680 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b090      	sub	sp, #64	@ 0x40
 800a684:	af00      	add	r7, sp, #0
 800a686:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a68a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a68e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800a692:	430b      	orrs	r3, r1
 800a694:	f040 8094 	bne.w	800a7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a698:	4b9e      	ldr	r3, [pc, #632]	@ (800a914 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a69a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a69c:	f003 0307 	and.w	r3, r3, #7
 800a6a0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a6a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6a4:	2b04      	cmp	r3, #4
 800a6a6:	f200 8087 	bhi.w	800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a6aa:	a201      	add	r2, pc, #4	@ (adr r2, 800a6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a6ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6b0:	0800a6c5 	.word	0x0800a6c5
 800a6b4:	0800a6ed 	.word	0x0800a6ed
 800a6b8:	0800a715 	.word	0x0800a715
 800a6bc:	0800a7b1 	.word	0x0800a7b1
 800a6c0:	0800a73d 	.word	0x0800a73d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a6c4:	4b93      	ldr	r3, [pc, #588]	@ (800a914 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a6cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a6d0:	d108      	bne.n	800a6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a6d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	f001 f810 	bl	800b6fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a6dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6e0:	f000 bd45 	b.w	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6e8:	f000 bd41 	b.w	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a6ec:	4b89      	ldr	r3, [pc, #548]	@ (800a914 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a6f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a6f8:	d108      	bne.n	800a70c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6fa:	f107 0318 	add.w	r3, r7, #24
 800a6fe:	4618      	mov	r0, r3
 800a700:	f000 fd54 	bl	800b1ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a704:	69bb      	ldr	r3, [r7, #24]
 800a706:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a708:	f000 bd31 	b.w	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a70c:	2300      	movs	r3, #0
 800a70e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a710:	f000 bd2d 	b.w	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a714:	4b7f      	ldr	r3, [pc, #508]	@ (800a914 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a71c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a720:	d108      	bne.n	800a734 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a722:	f107 030c 	add.w	r3, r7, #12
 800a726:	4618      	mov	r0, r3
 800a728:	f000 fe94 	bl	800b454 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a730:	f000 bd1d 	b.w	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a734:	2300      	movs	r3, #0
 800a736:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a738:	f000 bd19 	b.w	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a73c:	4b75      	ldr	r3, [pc, #468]	@ (800a914 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a73e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a740:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a744:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a746:	4b73      	ldr	r3, [pc, #460]	@ (800a914 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	f003 0304 	and.w	r3, r3, #4
 800a74e:	2b04      	cmp	r3, #4
 800a750:	d10c      	bne.n	800a76c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a752:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a754:	2b00      	cmp	r3, #0
 800a756:	d109      	bne.n	800a76c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a758:	4b6e      	ldr	r3, [pc, #440]	@ (800a914 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	08db      	lsrs	r3, r3, #3
 800a75e:	f003 0303 	and.w	r3, r3, #3
 800a762:	4a6d      	ldr	r2, [pc, #436]	@ (800a918 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a764:	fa22 f303 	lsr.w	r3, r2, r3
 800a768:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a76a:	e01f      	b.n	800a7ac <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a76c:	4b69      	ldr	r3, [pc, #420]	@ (800a914 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a774:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a778:	d106      	bne.n	800a788 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a77a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a77c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a780:	d102      	bne.n	800a788 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a782:	4b66      	ldr	r3, [pc, #408]	@ (800a91c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a784:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a786:	e011      	b.n	800a7ac <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a788:	4b62      	ldr	r3, [pc, #392]	@ (800a914 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a790:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a794:	d106      	bne.n	800a7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a796:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a798:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a79c:	d102      	bne.n	800a7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a79e:	4b60      	ldr	r3, [pc, #384]	@ (800a920 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a7a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a7a2:	e003      	b.n	800a7ac <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a7a8:	f000 bce1 	b.w	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a7ac:	f000 bcdf 	b.w	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a7b0:	4b5c      	ldr	r3, [pc, #368]	@ (800a924 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a7b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7b4:	f000 bcdb 	b.w	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7bc:	f000 bcd7 	b.w	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a7c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7c4:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800a7c8:	430b      	orrs	r3, r1
 800a7ca:	f040 80ad 	bne.w	800a928 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800a7ce:	4b51      	ldr	r3, [pc, #324]	@ (800a914 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a7d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a7d2:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800a7d6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a7d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a7de:	d056      	beq.n	800a88e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800a7e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a7e6:	f200 8090 	bhi.w	800a90a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a7ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7ec:	2bc0      	cmp	r3, #192	@ 0xc0
 800a7ee:	f000 8088 	beq.w	800a902 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800a7f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7f4:	2bc0      	cmp	r3, #192	@ 0xc0
 800a7f6:	f200 8088 	bhi.w	800a90a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a7fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7fc:	2b80      	cmp	r3, #128	@ 0x80
 800a7fe:	d032      	beq.n	800a866 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a802:	2b80      	cmp	r3, #128	@ 0x80
 800a804:	f200 8081 	bhi.w	800a90a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d003      	beq.n	800a816 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800a80e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a810:	2b40      	cmp	r3, #64	@ 0x40
 800a812:	d014      	beq.n	800a83e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800a814:	e079      	b.n	800a90a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a816:	4b3f      	ldr	r3, [pc, #252]	@ (800a914 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a81e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a822:	d108      	bne.n	800a836 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a824:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a828:	4618      	mov	r0, r3
 800a82a:	f000 ff67 	bl	800b6fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a82e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a830:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a832:	f000 bc9c 	b.w	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a836:	2300      	movs	r3, #0
 800a838:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a83a:	f000 bc98 	b.w	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a83e:	4b35      	ldr	r3, [pc, #212]	@ (800a914 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a846:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a84a:	d108      	bne.n	800a85e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a84c:	f107 0318 	add.w	r3, r7, #24
 800a850:	4618      	mov	r0, r3
 800a852:	f000 fcab 	bl	800b1ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a856:	69bb      	ldr	r3, [r7, #24]
 800a858:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a85a:	f000 bc88 	b.w	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a85e:	2300      	movs	r3, #0
 800a860:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a862:	f000 bc84 	b.w	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a866:	4b2b      	ldr	r3, [pc, #172]	@ (800a914 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a86e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a872:	d108      	bne.n	800a886 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a874:	f107 030c 	add.w	r3, r7, #12
 800a878:	4618      	mov	r0, r3
 800a87a:	f000 fdeb 	bl	800b454 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a882:	f000 bc74 	b.w	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a886:	2300      	movs	r3, #0
 800a888:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a88a:	f000 bc70 	b.w	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a88e:	4b21      	ldr	r3, [pc, #132]	@ (800a914 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a892:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a896:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a898:	4b1e      	ldr	r3, [pc, #120]	@ (800a914 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	f003 0304 	and.w	r3, r3, #4
 800a8a0:	2b04      	cmp	r3, #4
 800a8a2:	d10c      	bne.n	800a8be <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800a8a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d109      	bne.n	800a8be <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a8aa:	4b1a      	ldr	r3, [pc, #104]	@ (800a914 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	08db      	lsrs	r3, r3, #3
 800a8b0:	f003 0303 	and.w	r3, r3, #3
 800a8b4:	4a18      	ldr	r2, [pc, #96]	@ (800a918 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a8b6:	fa22 f303 	lsr.w	r3, r2, r3
 800a8ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a8bc:	e01f      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a8be:	4b15      	ldr	r3, [pc, #84]	@ (800a914 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a8c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a8ca:	d106      	bne.n	800a8da <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800a8cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a8d2:	d102      	bne.n	800a8da <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a8d4:	4b11      	ldr	r3, [pc, #68]	@ (800a91c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a8d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a8d8:	e011      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a8da:	4b0e      	ldr	r3, [pc, #56]	@ (800a914 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a8e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a8e6:	d106      	bne.n	800a8f6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800a8e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a8ee:	d102      	bne.n	800a8f6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a8f0:	4b0b      	ldr	r3, [pc, #44]	@ (800a920 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a8f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a8f4:	e003      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a8fa:	f000 bc38 	b.w	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a8fe:	f000 bc36 	b.w	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a902:	4b08      	ldr	r3, [pc, #32]	@ (800a924 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a904:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a906:	f000 bc32 	b.w	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a90a:	2300      	movs	r3, #0
 800a90c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a90e:	f000 bc2e 	b.w	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a912:	bf00      	nop
 800a914:	58024400 	.word	0x58024400
 800a918:	03d09000 	.word	0x03d09000
 800a91c:	003d0900 	.word	0x003d0900
 800a920:	017d7840 	.word	0x017d7840
 800a924:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a928:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a92c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800a930:	430b      	orrs	r3, r1
 800a932:	f040 809c 	bne.w	800aa6e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a936:	4b9e      	ldr	r3, [pc, #632]	@ (800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a938:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a93a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a93e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a942:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a946:	d054      	beq.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800a948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a94a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a94e:	f200 808b 	bhi.w	800aa68 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a954:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a958:	f000 8083 	beq.w	800aa62 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800a95c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a95e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a962:	f200 8081 	bhi.w	800aa68 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a968:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a96c:	d02f      	beq.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800a96e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a970:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a974:	d878      	bhi.n	800aa68 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d004      	beq.n	800a986 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800a97c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a97e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a982:	d012      	beq.n	800a9aa <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800a984:	e070      	b.n	800aa68 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a986:	4b8a      	ldr	r3, [pc, #552]	@ (800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a98e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a992:	d107      	bne.n	800a9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a994:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a998:	4618      	mov	r0, r3
 800a99a:	f000 feaf 	bl	800b6fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a99e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9a2:	e3e4      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9a8:	e3e1      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a9aa:	4b81      	ldr	r3, [pc, #516]	@ (800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a9b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a9b6:	d107      	bne.n	800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9b8:	f107 0318 	add.w	r3, r7, #24
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f000 fbf5 	bl	800b1ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a9c2:	69bb      	ldr	r3, [r7, #24]
 800a9c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9c6:	e3d2      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9cc:	e3cf      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a9ce:	4b78      	ldr	r3, [pc, #480]	@ (800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a9d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a9da:	d107      	bne.n	800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a9dc:	f107 030c 	add.w	r3, r7, #12
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	f000 fd37 	bl	800b454 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9ea:	e3c0      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9f0:	e3bd      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a9f2:	4b6f      	ldr	r3, [pc, #444]	@ (800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a9f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a9f6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a9fa:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a9fc:	4b6c      	ldr	r3, [pc, #432]	@ (800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	f003 0304 	and.w	r3, r3, #4
 800aa04:	2b04      	cmp	r3, #4
 800aa06:	d10c      	bne.n	800aa22 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800aa08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d109      	bne.n	800aa22 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa0e:	4b68      	ldr	r3, [pc, #416]	@ (800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	08db      	lsrs	r3, r3, #3
 800aa14:	f003 0303 	and.w	r3, r3, #3
 800aa18:	4a66      	ldr	r2, [pc, #408]	@ (800abb4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800aa1a:	fa22 f303 	lsr.w	r3, r2, r3
 800aa1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aa20:	e01e      	b.n	800aa60 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aa22:	4b63      	ldr	r3, [pc, #396]	@ (800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aa2e:	d106      	bne.n	800aa3e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800aa30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aa36:	d102      	bne.n	800aa3e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800aa38:	4b5f      	ldr	r3, [pc, #380]	@ (800abb8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800aa3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aa3c:	e010      	b.n	800aa60 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aa3e:	4b5c      	ldr	r3, [pc, #368]	@ (800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aa46:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa4a:	d106      	bne.n	800aa5a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800aa4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa52:	d102      	bne.n	800aa5a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800aa54:	4b59      	ldr	r3, [pc, #356]	@ (800abbc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800aa56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aa58:	e002      	b.n	800aa60 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800aa5e:	e386      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aa60:	e385      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800aa62:	4b57      	ldr	r3, [pc, #348]	@ (800abc0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800aa64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa66:	e382      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800aa68:	2300      	movs	r3, #0
 800aa6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa6c:	e37f      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800aa6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa72:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800aa76:	430b      	orrs	r3, r1
 800aa78:	f040 80a7 	bne.w	800abca <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800aa7c:	4b4c      	ldr	r3, [pc, #304]	@ (800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aa7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa80:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800aa84:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800aa86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa88:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800aa8c:	d055      	beq.n	800ab3a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800aa8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa90:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800aa94:	f200 8096 	bhi.w	800abc4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800aa98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa9a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800aa9e:	f000 8084 	beq.w	800abaa <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800aaa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaa4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800aaa8:	f200 808c 	bhi.w	800abc4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800aaac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aab2:	d030      	beq.n	800ab16 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800aab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aab6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aaba:	f200 8083 	bhi.w	800abc4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800aabe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d004      	beq.n	800aace <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800aac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aac6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800aaca:	d012      	beq.n	800aaf2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800aacc:	e07a      	b.n	800abc4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aace:	4b38      	ldr	r3, [pc, #224]	@ (800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aad6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aada:	d107      	bne.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aadc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aae0:	4618      	mov	r0, r3
 800aae2:	f000 fe0b 	bl	800b6fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aae8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aaea:	e340      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aaec:	2300      	movs	r3, #0
 800aaee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aaf0:	e33d      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aaf2:	4b2f      	ldr	r3, [pc, #188]	@ (800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aafa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aafe:	d107      	bne.n	800ab10 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab00:	f107 0318 	add.w	r3, r7, #24
 800ab04:	4618      	mov	r0, r3
 800ab06:	f000 fb51 	bl	800b1ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ab0a:	69bb      	ldr	r3, [r7, #24]
 800ab0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab0e:	e32e      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab10:	2300      	movs	r3, #0
 800ab12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab14:	e32b      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ab16:	4b26      	ldr	r3, [pc, #152]	@ (800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ab1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ab22:	d107      	bne.n	800ab34 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab24:	f107 030c 	add.w	r3, r7, #12
 800ab28:	4618      	mov	r0, r3
 800ab2a:	f000 fc93 	bl	800b454 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab32:	e31c      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab34:	2300      	movs	r3, #0
 800ab36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab38:	e319      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ab3a:	4b1d      	ldr	r3, [pc, #116]	@ (800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ab3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab3e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ab42:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ab44:	4b1a      	ldr	r3, [pc, #104]	@ (800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	f003 0304 	and.w	r3, r3, #4
 800ab4c:	2b04      	cmp	r3, #4
 800ab4e:	d10c      	bne.n	800ab6a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800ab50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d109      	bne.n	800ab6a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ab56:	4b16      	ldr	r3, [pc, #88]	@ (800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	08db      	lsrs	r3, r3, #3
 800ab5c:	f003 0303 	and.w	r3, r3, #3
 800ab60:	4a14      	ldr	r2, [pc, #80]	@ (800abb4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800ab62:	fa22 f303 	lsr.w	r3, r2, r3
 800ab66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ab68:	e01e      	b.n	800aba8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ab6a:	4b11      	ldr	r3, [pc, #68]	@ (800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ab76:	d106      	bne.n	800ab86 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800ab78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab7a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ab7e:	d102      	bne.n	800ab86 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ab80:	4b0d      	ldr	r3, [pc, #52]	@ (800abb8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800ab82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ab84:	e010      	b.n	800aba8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ab86:	4b0a      	ldr	r3, [pc, #40]	@ (800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ab8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ab92:	d106      	bne.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800ab94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ab9a:	d102      	bne.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ab9c:	4b07      	ldr	r3, [pc, #28]	@ (800abbc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800ab9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aba0:	e002      	b.n	800aba8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800aba2:	2300      	movs	r3, #0
 800aba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800aba6:	e2e2      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aba8:	e2e1      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800abaa:	4b05      	ldr	r3, [pc, #20]	@ (800abc0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800abac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abae:	e2de      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800abb0:	58024400 	.word	0x58024400
 800abb4:	03d09000 	.word	0x03d09000
 800abb8:	003d0900 	.word	0x003d0900
 800abbc:	017d7840 	.word	0x017d7840
 800abc0:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800abc4:	2300      	movs	r3, #0
 800abc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abc8:	e2d1      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800abca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800abce:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800abd2:	430b      	orrs	r3, r1
 800abd4:	f040 809c 	bne.w	800ad10 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800abd8:	4b93      	ldr	r3, [pc, #588]	@ (800ae28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800abda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800abdc:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800abe0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800abe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abe4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800abe8:	d054      	beq.n	800ac94 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800abea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800abf0:	f200 808b 	bhi.w	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800abf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abf6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800abfa:	f000 8083 	beq.w	800ad04 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800abfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac00:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ac04:	f200 8081 	bhi.w	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800ac08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ac0e:	d02f      	beq.n	800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800ac10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ac16:	d878      	bhi.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800ac18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d004      	beq.n	800ac28 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800ac1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ac24:	d012      	beq.n	800ac4c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800ac26:	e070      	b.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ac28:	4b7f      	ldr	r3, [pc, #508]	@ (800ae28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ac30:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ac34:	d107      	bne.n	800ac46 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ac36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f000 fd5e 	bl	800b6fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ac40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac44:	e293      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac46:	2300      	movs	r3, #0
 800ac48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac4a:	e290      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ac4c:	4b76      	ldr	r3, [pc, #472]	@ (800ae28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ac54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ac58:	d107      	bne.n	800ac6a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac5a:	f107 0318 	add.w	r3, r7, #24
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f000 faa4 	bl	800b1ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ac64:	69bb      	ldr	r3, [r7, #24]
 800ac66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac68:	e281      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac6e:	e27e      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ac70:	4b6d      	ldr	r3, [pc, #436]	@ (800ae28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ac78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac7c:	d107      	bne.n	800ac8e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac7e:	f107 030c 	add.w	r3, r7, #12
 800ac82:	4618      	mov	r0, r3
 800ac84:	f000 fbe6 	bl	800b454 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac8c:	e26f      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac8e:	2300      	movs	r3, #0
 800ac90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac92:	e26c      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ac94:	4b64      	ldr	r3, [pc, #400]	@ (800ae28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ac96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ac98:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ac9c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ac9e:	4b62      	ldr	r3, [pc, #392]	@ (800ae28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f003 0304 	and.w	r3, r3, #4
 800aca6:	2b04      	cmp	r3, #4
 800aca8:	d10c      	bne.n	800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800acaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acac:	2b00      	cmp	r3, #0
 800acae:	d109      	bne.n	800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800acb0:	4b5d      	ldr	r3, [pc, #372]	@ (800ae28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	08db      	lsrs	r3, r3, #3
 800acb6:	f003 0303 	and.w	r3, r3, #3
 800acba:	4a5c      	ldr	r2, [pc, #368]	@ (800ae2c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800acbc:	fa22 f303 	lsr.w	r3, r2, r3
 800acc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800acc2:	e01e      	b.n	800ad02 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800acc4:	4b58      	ldr	r3, [pc, #352]	@ (800ae28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800accc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800acd0:	d106      	bne.n	800ace0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800acd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acd4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800acd8:	d102      	bne.n	800ace0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800acda:	4b55      	ldr	r3, [pc, #340]	@ (800ae30 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800acdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800acde:	e010      	b.n	800ad02 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ace0:	4b51      	ldr	r3, [pc, #324]	@ (800ae28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ace8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800acec:	d106      	bne.n	800acfc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800acee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acf0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800acf4:	d102      	bne.n	800acfc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800acf6:	4b4f      	ldr	r3, [pc, #316]	@ (800ae34 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800acf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800acfa:	e002      	b.n	800ad02 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800acfc:	2300      	movs	r3, #0
 800acfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ad00:	e235      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ad02:	e234      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ad04:	4b4c      	ldr	r3, [pc, #304]	@ (800ae38 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800ad06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad08:	e231      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad0e:	e22e      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800ad10:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad14:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800ad18:	430b      	orrs	r3, r1
 800ad1a:	f040 808f 	bne.w	800ae3c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800ad1e:	4b42      	ldr	r3, [pc, #264]	@ (800ae28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ad20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad22:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800ad26:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800ad28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad2a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ad2e:	d06b      	beq.n	800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800ad30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad32:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ad36:	d874      	bhi.n	800ae22 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ad38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad3a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ad3e:	d056      	beq.n	800adee <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800ad40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad42:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ad46:	d86c      	bhi.n	800ae22 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ad48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad4a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ad4e:	d03b      	beq.n	800adc8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800ad50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad52:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ad56:	d864      	bhi.n	800ae22 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ad58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad5a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad5e:	d021      	beq.n	800ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800ad60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad62:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad66:	d85c      	bhi.n	800ae22 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ad68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d004      	beq.n	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800ad6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad74:	d004      	beq.n	800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800ad76:	e054      	b.n	800ae22 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800ad78:	f7fe fa4c 	bl	8009214 <HAL_RCC_GetPCLK1Freq>
 800ad7c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ad7e:	e1f6      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ad80:	4b29      	ldr	r3, [pc, #164]	@ (800ae28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ad88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ad8c:	d107      	bne.n	800ad9e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad8e:	f107 0318 	add.w	r3, r7, #24
 800ad92:	4618      	mov	r0, r3
 800ad94:	f000 fa0a 	bl	800b1ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ad98:	69fb      	ldr	r3, [r7, #28]
 800ad9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad9c:	e1e7      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad9e:	2300      	movs	r3, #0
 800ada0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ada2:	e1e4      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ada4:	4b20      	ldr	r3, [pc, #128]	@ (800ae28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800adac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800adb0:	d107      	bne.n	800adc2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800adb2:	f107 030c 	add.w	r3, r7, #12
 800adb6:	4618      	mov	r0, r3
 800adb8:	f000 fb4c 	bl	800b454 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800adbc:	693b      	ldr	r3, [r7, #16]
 800adbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800adc0:	e1d5      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800adc2:	2300      	movs	r3, #0
 800adc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800adc6:	e1d2      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800adc8:	4b17      	ldr	r3, [pc, #92]	@ (800ae28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	f003 0304 	and.w	r3, r3, #4
 800add0:	2b04      	cmp	r3, #4
 800add2:	d109      	bne.n	800ade8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800add4:	4b14      	ldr	r3, [pc, #80]	@ (800ae28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	08db      	lsrs	r3, r3, #3
 800adda:	f003 0303 	and.w	r3, r3, #3
 800adde:	4a13      	ldr	r2, [pc, #76]	@ (800ae2c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800ade0:	fa22 f303 	lsr.w	r3, r2, r3
 800ade4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ade6:	e1c2      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ade8:	2300      	movs	r3, #0
 800adea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800adec:	e1bf      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800adee:	4b0e      	ldr	r3, [pc, #56]	@ (800ae28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800adf6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800adfa:	d102      	bne.n	800ae02 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800adfc:	4b0c      	ldr	r3, [pc, #48]	@ (800ae30 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800adfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae00:	e1b5      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae02:	2300      	movs	r3, #0
 800ae04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae06:	e1b2      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ae08:	4b07      	ldr	r3, [pc, #28]	@ (800ae28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ae10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ae14:	d102      	bne.n	800ae1c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800ae16:	4b07      	ldr	r3, [pc, #28]	@ (800ae34 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800ae18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae1a:	e1a8      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae20:	e1a5      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ae22:	2300      	movs	r3, #0
 800ae24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae26:	e1a2      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ae28:	58024400 	.word	0x58024400
 800ae2c:	03d09000 	.word	0x03d09000
 800ae30:	003d0900 	.word	0x003d0900
 800ae34:	017d7840 	.word	0x017d7840
 800ae38:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800ae3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae40:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800ae44:	430b      	orrs	r3, r1
 800ae46:	d173      	bne.n	800af30 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800ae48:	4b9c      	ldr	r3, [pc, #624]	@ (800b0bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ae4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae4c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800ae50:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ae52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae54:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ae58:	d02f      	beq.n	800aeba <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800ae5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ae60:	d863      	bhi.n	800af2a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800ae62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d004      	beq.n	800ae72 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800ae68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae6e:	d012      	beq.n	800ae96 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800ae70:	e05b      	b.n	800af2a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ae72:	4b92      	ldr	r3, [pc, #584]	@ (800b0bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ae7a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ae7e:	d107      	bne.n	800ae90 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae80:	f107 0318 	add.w	r3, r7, #24
 800ae84:	4618      	mov	r0, r3
 800ae86:	f000 f991 	bl	800b1ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ae8a:	69bb      	ldr	r3, [r7, #24]
 800ae8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae8e:	e16e      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae90:	2300      	movs	r3, #0
 800ae92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae94:	e16b      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ae96:	4b89      	ldr	r3, [pc, #548]	@ (800b0bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ae9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aea2:	d107      	bne.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aea4:	f107 030c 	add.w	r3, r7, #12
 800aea8:	4618      	mov	r0, r3
 800aeaa:	f000 fad3 	bl	800b454 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aeb2:	e15c      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aeb8:	e159      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aeba:	4b80      	ldr	r3, [pc, #512]	@ (800b0bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aebc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aebe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800aec2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aec4:	4b7d      	ldr	r3, [pc, #500]	@ (800b0bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	f003 0304 	and.w	r3, r3, #4
 800aecc:	2b04      	cmp	r3, #4
 800aece:	d10c      	bne.n	800aeea <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800aed0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d109      	bne.n	800aeea <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aed6:	4b79      	ldr	r3, [pc, #484]	@ (800b0bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	08db      	lsrs	r3, r3, #3
 800aedc:	f003 0303 	and.w	r3, r3, #3
 800aee0:	4a77      	ldr	r2, [pc, #476]	@ (800b0c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800aee2:	fa22 f303 	lsr.w	r3, r2, r3
 800aee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aee8:	e01e      	b.n	800af28 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aeea:	4b74      	ldr	r3, [pc, #464]	@ (800b0bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aef2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aef6:	d106      	bne.n	800af06 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800aef8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aefa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aefe:	d102      	bne.n	800af06 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800af00:	4b70      	ldr	r3, [pc, #448]	@ (800b0c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800af02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800af04:	e010      	b.n	800af28 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800af06:	4b6d      	ldr	r3, [pc, #436]	@ (800b0bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800af0e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800af12:	d106      	bne.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800af14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800af1a:	d102      	bne.n	800af22 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800af1c:	4b6a      	ldr	r3, [pc, #424]	@ (800b0c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800af1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800af20:	e002      	b.n	800af28 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800af22:	2300      	movs	r3, #0
 800af24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800af26:	e122      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800af28:	e121      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800af2a:	2300      	movs	r3, #0
 800af2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af2e:	e11e      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800af30:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af34:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800af38:	430b      	orrs	r3, r1
 800af3a:	d133      	bne.n	800afa4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800af3c:	4b5f      	ldr	r3, [pc, #380]	@ (800b0bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800af3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800af40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800af44:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800af46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d004      	beq.n	800af56 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800af4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800af52:	d012      	beq.n	800af7a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800af54:	e023      	b.n	800af9e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800af56:	4b59      	ldr	r3, [pc, #356]	@ (800b0bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800af5e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800af62:	d107      	bne.n	800af74 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800af64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800af68:	4618      	mov	r0, r3
 800af6a:	f000 fbc7 	bl	800b6fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800af6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af72:	e0fc      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af74:	2300      	movs	r3, #0
 800af76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af78:	e0f9      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800af7a:	4b50      	ldr	r3, [pc, #320]	@ (800b0bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800af82:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800af86:	d107      	bne.n	800af98 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af88:	f107 0318 	add.w	r3, r7, #24
 800af8c:	4618      	mov	r0, r3
 800af8e:	f000 f90d 	bl	800b1ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800af92:	6a3b      	ldr	r3, [r7, #32]
 800af94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af96:	e0ea      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af98:	2300      	movs	r3, #0
 800af9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af9c:	e0e7      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800af9e:	2300      	movs	r3, #0
 800afa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800afa2:	e0e4      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800afa4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800afa8:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800afac:	430b      	orrs	r3, r1
 800afae:	f040 808d 	bne.w	800b0cc <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800afb2:	4b42      	ldr	r3, [pc, #264]	@ (800b0bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800afb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800afb6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800afba:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800afbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800afc2:	d06b      	beq.n	800b09c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800afc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800afca:	d874      	bhi.n	800b0b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800afcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800afd2:	d056      	beq.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800afd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800afda:	d86c      	bhi.n	800b0b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800afdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afde:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800afe2:	d03b      	beq.n	800b05c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800afe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afe6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800afea:	d864      	bhi.n	800b0b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800afec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aff2:	d021      	beq.n	800b038 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800aff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aff6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800affa:	d85c      	bhi.n	800b0b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800affc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800affe:	2b00      	cmp	r3, #0
 800b000:	d004      	beq.n	800b00c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800b002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b004:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b008:	d004      	beq.n	800b014 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800b00a:	e054      	b.n	800b0b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b00c:	f000 f8b8 	bl	800b180 <HAL_RCCEx_GetD3PCLK1Freq>
 800b010:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b012:	e0ac      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b014:	4b29      	ldr	r3, [pc, #164]	@ (800b0bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b01c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b020:	d107      	bne.n	800b032 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b022:	f107 0318 	add.w	r3, r7, #24
 800b026:	4618      	mov	r0, r3
 800b028:	f000 f8c0 	bl	800b1ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b02c:	69fb      	ldr	r3, [r7, #28]
 800b02e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b030:	e09d      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b032:	2300      	movs	r3, #0
 800b034:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b036:	e09a      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b038:	4b20      	ldr	r3, [pc, #128]	@ (800b0bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b040:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b044:	d107      	bne.n	800b056 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b046:	f107 030c 	add.w	r3, r7, #12
 800b04a:	4618      	mov	r0, r3
 800b04c:	f000 fa02 	bl	800b454 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b050:	693b      	ldr	r3, [r7, #16]
 800b052:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b054:	e08b      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b056:	2300      	movs	r3, #0
 800b058:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b05a:	e088      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b05c:	4b17      	ldr	r3, [pc, #92]	@ (800b0bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	f003 0304 	and.w	r3, r3, #4
 800b064:	2b04      	cmp	r3, #4
 800b066:	d109      	bne.n	800b07c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b068:	4b14      	ldr	r3, [pc, #80]	@ (800b0bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	08db      	lsrs	r3, r3, #3
 800b06e:	f003 0303 	and.w	r3, r3, #3
 800b072:	4a13      	ldr	r2, [pc, #76]	@ (800b0c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b074:	fa22 f303 	lsr.w	r3, r2, r3
 800b078:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b07a:	e078      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b07c:	2300      	movs	r3, #0
 800b07e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b080:	e075      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b082:	4b0e      	ldr	r3, [pc, #56]	@ (800b0bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b08a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b08e:	d102      	bne.n	800b096 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800b090:	4b0c      	ldr	r3, [pc, #48]	@ (800b0c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b092:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b094:	e06b      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b096:	2300      	movs	r3, #0
 800b098:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b09a:	e068      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b09c:	4b07      	ldr	r3, [pc, #28]	@ (800b0bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b0a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b0a8:	d102      	bne.n	800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800b0aa:	4b07      	ldr	r3, [pc, #28]	@ (800b0c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b0ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0ae:	e05e      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0b4:	e05b      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0ba:	e058      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b0bc:	58024400 	.word	0x58024400
 800b0c0:	03d09000 	.word	0x03d09000
 800b0c4:	003d0900 	.word	0x003d0900
 800b0c8:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b0cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0d0:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800b0d4:	430b      	orrs	r3, r1
 800b0d6:	d148      	bne.n	800b16a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b0d8:	4b27      	ldr	r3, [pc, #156]	@ (800b178 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b0da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b0dc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b0e0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b0e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b0e8:	d02a      	beq.n	800b140 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800b0ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b0f0:	d838      	bhi.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800b0f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d004      	beq.n	800b102 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800b0f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b0fe:	d00d      	beq.n	800b11c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800b100:	e030      	b.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b102:	4b1d      	ldr	r3, [pc, #116]	@ (800b178 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b10a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b10e:	d102      	bne.n	800b116 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800b110:	4b1a      	ldr	r3, [pc, #104]	@ (800b17c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800b112:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b114:	e02b      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b116:	2300      	movs	r3, #0
 800b118:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b11a:	e028      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b11c:	4b16      	ldr	r3, [pc, #88]	@ (800b178 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b124:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b128:	d107      	bne.n	800b13a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b12a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b12e:	4618      	mov	r0, r3
 800b130:	f000 fae4 	bl	800b6fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b136:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b138:	e019      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b13a:	2300      	movs	r3, #0
 800b13c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b13e:	e016      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b140:	4b0d      	ldr	r3, [pc, #52]	@ (800b178 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b148:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b14c:	d107      	bne.n	800b15e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b14e:	f107 0318 	add.w	r3, r7, #24
 800b152:	4618      	mov	r0, r3
 800b154:	f000 f82a 	bl	800b1ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b158:	69fb      	ldr	r3, [r7, #28]
 800b15a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b15c:	e007      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b15e:	2300      	movs	r3, #0
 800b160:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b162:	e004      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b164:	2300      	movs	r3, #0
 800b166:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b168:	e001      	b.n	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800b16a:	2300      	movs	r3, #0
 800b16c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800b16e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b170:	4618      	mov	r0, r3
 800b172:	3740      	adds	r7, #64	@ 0x40
 800b174:	46bd      	mov	sp, r7
 800b176:	bd80      	pop	{r7, pc}
 800b178:	58024400 	.word	0x58024400
 800b17c:	017d7840 	.word	0x017d7840

0800b180 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b184:	f7fe f816 	bl	80091b4 <HAL_RCC_GetHCLKFreq>
 800b188:	4602      	mov	r2, r0
 800b18a:	4b06      	ldr	r3, [pc, #24]	@ (800b1a4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b18c:	6a1b      	ldr	r3, [r3, #32]
 800b18e:	091b      	lsrs	r3, r3, #4
 800b190:	f003 0307 	and.w	r3, r3, #7
 800b194:	4904      	ldr	r1, [pc, #16]	@ (800b1a8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b196:	5ccb      	ldrb	r3, [r1, r3]
 800b198:	f003 031f 	and.w	r3, r3, #31
 800b19c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	bd80      	pop	{r7, pc}
 800b1a4:	58024400 	.word	0x58024400
 800b1a8:	08012704 	.word	0x08012704

0800b1ac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b1ac:	b480      	push	{r7}
 800b1ae:	b089      	sub	sp, #36	@ 0x24
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b1b4:	4ba1      	ldr	r3, [pc, #644]	@ (800b43c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1b8:	f003 0303 	and.w	r3, r3, #3
 800b1bc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b1be:	4b9f      	ldr	r3, [pc, #636]	@ (800b43c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1c2:	0b1b      	lsrs	r3, r3, #12
 800b1c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b1c8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b1ca:	4b9c      	ldr	r3, [pc, #624]	@ (800b43c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1ce:	091b      	lsrs	r3, r3, #4
 800b1d0:	f003 0301 	and.w	r3, r3, #1
 800b1d4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b1d6:	4b99      	ldr	r3, [pc, #612]	@ (800b43c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b1da:	08db      	lsrs	r3, r3, #3
 800b1dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b1e0:	693a      	ldr	r2, [r7, #16]
 800b1e2:	fb02 f303 	mul.w	r3, r2, r3
 800b1e6:	ee07 3a90 	vmov	s15, r3
 800b1ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1ee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b1f2:	697b      	ldr	r3, [r7, #20]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	f000 8111 	beq.w	800b41c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b1fa:	69bb      	ldr	r3, [r7, #24]
 800b1fc:	2b02      	cmp	r3, #2
 800b1fe:	f000 8083 	beq.w	800b308 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b202:	69bb      	ldr	r3, [r7, #24]
 800b204:	2b02      	cmp	r3, #2
 800b206:	f200 80a1 	bhi.w	800b34c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b20a:	69bb      	ldr	r3, [r7, #24]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d003      	beq.n	800b218 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b210:	69bb      	ldr	r3, [r7, #24]
 800b212:	2b01      	cmp	r3, #1
 800b214:	d056      	beq.n	800b2c4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b216:	e099      	b.n	800b34c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b218:	4b88      	ldr	r3, [pc, #544]	@ (800b43c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	f003 0320 	and.w	r3, r3, #32
 800b220:	2b00      	cmp	r3, #0
 800b222:	d02d      	beq.n	800b280 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b224:	4b85      	ldr	r3, [pc, #532]	@ (800b43c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	08db      	lsrs	r3, r3, #3
 800b22a:	f003 0303 	and.w	r3, r3, #3
 800b22e:	4a84      	ldr	r2, [pc, #528]	@ (800b440 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b230:	fa22 f303 	lsr.w	r3, r2, r3
 800b234:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b236:	68bb      	ldr	r3, [r7, #8]
 800b238:	ee07 3a90 	vmov	s15, r3
 800b23c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b240:	697b      	ldr	r3, [r7, #20]
 800b242:	ee07 3a90 	vmov	s15, r3
 800b246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b24a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b24e:	4b7b      	ldr	r3, [pc, #492]	@ (800b43c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b250:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b256:	ee07 3a90 	vmov	s15, r3
 800b25a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b25e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b262:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b444 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b266:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b26a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b26e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b272:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b27a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b27e:	e087      	b.n	800b390 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b280:	697b      	ldr	r3, [r7, #20]
 800b282:	ee07 3a90 	vmov	s15, r3
 800b286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b28a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b448 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b28e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b292:	4b6a      	ldr	r3, [pc, #424]	@ (800b43c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b29a:	ee07 3a90 	vmov	s15, r3
 800b29e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2a6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b444 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b2aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b2b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b2c2:	e065      	b.n	800b390 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b2c4:	697b      	ldr	r3, [r7, #20]
 800b2c6:	ee07 3a90 	vmov	s15, r3
 800b2ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2ce:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b44c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b2d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2d6:	4b59      	ldr	r3, [pc, #356]	@ (800b43c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b2d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2de:	ee07 3a90 	vmov	s15, r3
 800b2e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2ea:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b444 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b2ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b2fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b302:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b306:	e043      	b.n	800b390 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b308:	697b      	ldr	r3, [r7, #20]
 800b30a:	ee07 3a90 	vmov	s15, r3
 800b30e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b312:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b450 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b316:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b31a:	4b48      	ldr	r3, [pc, #288]	@ (800b43c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b31c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b31e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b322:	ee07 3a90 	vmov	s15, r3
 800b326:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b32a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b32e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b444 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b332:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b336:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b33a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b33e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b342:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b346:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b34a:	e021      	b.n	800b390 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b34c:	697b      	ldr	r3, [r7, #20]
 800b34e:	ee07 3a90 	vmov	s15, r3
 800b352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b356:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b44c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b35a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b35e:	4b37      	ldr	r3, [pc, #220]	@ (800b43c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b366:	ee07 3a90 	vmov	s15, r3
 800b36a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b36e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b372:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b444 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b376:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b37a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b37e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b382:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b38a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b38e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b390:	4b2a      	ldr	r3, [pc, #168]	@ (800b43c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b394:	0a5b      	lsrs	r3, r3, #9
 800b396:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b39a:	ee07 3a90 	vmov	s15, r3
 800b39e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b3a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b3aa:	edd7 6a07 	vldr	s13, [r7, #28]
 800b3ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b3b6:	ee17 2a90 	vmov	r2, s15
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b3be:	4b1f      	ldr	r3, [pc, #124]	@ (800b43c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b3c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3c2:	0c1b      	lsrs	r3, r3, #16
 800b3c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b3c8:	ee07 3a90 	vmov	s15, r3
 800b3cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3d0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b3d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b3d8:	edd7 6a07 	vldr	s13, [r7, #28]
 800b3dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b3e4:	ee17 2a90 	vmov	r2, s15
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b3ec:	4b13      	ldr	r3, [pc, #76]	@ (800b43c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b3ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3f0:	0e1b      	lsrs	r3, r3, #24
 800b3f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b3f6:	ee07 3a90 	vmov	s15, r3
 800b3fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b402:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b406:	edd7 6a07 	vldr	s13, [r7, #28]
 800b40a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b40e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b412:	ee17 2a90 	vmov	r2, s15
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b41a:	e008      	b.n	800b42e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	2200      	movs	r2, #0
 800b420:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	2200      	movs	r2, #0
 800b426:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2200      	movs	r2, #0
 800b42c:	609a      	str	r2, [r3, #8]
}
 800b42e:	bf00      	nop
 800b430:	3724      	adds	r7, #36	@ 0x24
 800b432:	46bd      	mov	sp, r7
 800b434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b438:	4770      	bx	lr
 800b43a:	bf00      	nop
 800b43c:	58024400 	.word	0x58024400
 800b440:	03d09000 	.word	0x03d09000
 800b444:	46000000 	.word	0x46000000
 800b448:	4c742400 	.word	0x4c742400
 800b44c:	4a742400 	.word	0x4a742400
 800b450:	4bbebc20 	.word	0x4bbebc20

0800b454 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b454:	b480      	push	{r7}
 800b456:	b089      	sub	sp, #36	@ 0x24
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b45c:	4ba1      	ldr	r3, [pc, #644]	@ (800b6e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b45e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b460:	f003 0303 	and.w	r3, r3, #3
 800b464:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b466:	4b9f      	ldr	r3, [pc, #636]	@ (800b6e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b46a:	0d1b      	lsrs	r3, r3, #20
 800b46c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b470:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b472:	4b9c      	ldr	r3, [pc, #624]	@ (800b6e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b476:	0a1b      	lsrs	r3, r3, #8
 800b478:	f003 0301 	and.w	r3, r3, #1
 800b47c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b47e:	4b99      	ldr	r3, [pc, #612]	@ (800b6e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b482:	08db      	lsrs	r3, r3, #3
 800b484:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b488:	693a      	ldr	r2, [r7, #16]
 800b48a:	fb02 f303 	mul.w	r3, r2, r3
 800b48e:	ee07 3a90 	vmov	s15, r3
 800b492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b496:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b49a:	697b      	ldr	r3, [r7, #20]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	f000 8111 	beq.w	800b6c4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b4a2:	69bb      	ldr	r3, [r7, #24]
 800b4a4:	2b02      	cmp	r3, #2
 800b4a6:	f000 8083 	beq.w	800b5b0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b4aa:	69bb      	ldr	r3, [r7, #24]
 800b4ac:	2b02      	cmp	r3, #2
 800b4ae:	f200 80a1 	bhi.w	800b5f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b4b2:	69bb      	ldr	r3, [r7, #24]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d003      	beq.n	800b4c0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b4b8:	69bb      	ldr	r3, [r7, #24]
 800b4ba:	2b01      	cmp	r3, #1
 800b4bc:	d056      	beq.n	800b56c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b4be:	e099      	b.n	800b5f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b4c0:	4b88      	ldr	r3, [pc, #544]	@ (800b6e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	f003 0320 	and.w	r3, r3, #32
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d02d      	beq.n	800b528 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b4cc:	4b85      	ldr	r3, [pc, #532]	@ (800b6e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	08db      	lsrs	r3, r3, #3
 800b4d2:	f003 0303 	and.w	r3, r3, #3
 800b4d6:	4a84      	ldr	r2, [pc, #528]	@ (800b6e8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b4d8:	fa22 f303 	lsr.w	r3, r2, r3
 800b4dc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b4de:	68bb      	ldr	r3, [r7, #8]
 800b4e0:	ee07 3a90 	vmov	s15, r3
 800b4e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4e8:	697b      	ldr	r3, [r7, #20]
 800b4ea:	ee07 3a90 	vmov	s15, r3
 800b4ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4f6:	4b7b      	ldr	r3, [pc, #492]	@ (800b6e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b4f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4fe:	ee07 3a90 	vmov	s15, r3
 800b502:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b506:	ed97 6a03 	vldr	s12, [r7, #12]
 800b50a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b6ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b50e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b512:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b516:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b51a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b51e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b522:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b526:	e087      	b.n	800b638 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b528:	697b      	ldr	r3, [r7, #20]
 800b52a:	ee07 3a90 	vmov	s15, r3
 800b52e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b532:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b6f0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b536:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b53a:	4b6a      	ldr	r3, [pc, #424]	@ (800b6e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b53c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b53e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b542:	ee07 3a90 	vmov	s15, r3
 800b546:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b54a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b54e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b6ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b552:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b556:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b55a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b55e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b562:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b566:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b56a:	e065      	b.n	800b638 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b56c:	697b      	ldr	r3, [r7, #20]
 800b56e:	ee07 3a90 	vmov	s15, r3
 800b572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b576:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b6f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b57a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b57e:	4b59      	ldr	r3, [pc, #356]	@ (800b6e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b586:	ee07 3a90 	vmov	s15, r3
 800b58a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b58e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b592:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b6ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b596:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b59a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b59e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b5a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b5ae:	e043      	b.n	800b638 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b5b0:	697b      	ldr	r3, [r7, #20]
 800b5b2:	ee07 3a90 	vmov	s15, r3
 800b5b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5ba:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b6f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b5be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5c2:	4b48      	ldr	r3, [pc, #288]	@ (800b6e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b5c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5ca:	ee07 3a90 	vmov	s15, r3
 800b5ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5d2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5d6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b6ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b5da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b5e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b5f2:	e021      	b.n	800b638 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b5f4:	697b      	ldr	r3, [r7, #20]
 800b5f6:	ee07 3a90 	vmov	s15, r3
 800b5fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5fe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b6f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b602:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b606:	4b37      	ldr	r3, [pc, #220]	@ (800b6e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b60a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b60e:	ee07 3a90 	vmov	s15, r3
 800b612:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b616:	ed97 6a03 	vldr	s12, [r7, #12]
 800b61a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b6ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b61e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b622:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b626:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b62a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b62e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b632:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b636:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b638:	4b2a      	ldr	r3, [pc, #168]	@ (800b6e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b63a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b63c:	0a5b      	lsrs	r3, r3, #9
 800b63e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b642:	ee07 3a90 	vmov	s15, r3
 800b646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b64a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b64e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b652:	edd7 6a07 	vldr	s13, [r7, #28]
 800b656:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b65a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b65e:	ee17 2a90 	vmov	r2, s15
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b666:	4b1f      	ldr	r3, [pc, #124]	@ (800b6e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b66a:	0c1b      	lsrs	r3, r3, #16
 800b66c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b670:	ee07 3a90 	vmov	s15, r3
 800b674:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b678:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b67c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b680:	edd7 6a07 	vldr	s13, [r7, #28]
 800b684:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b688:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b68c:	ee17 2a90 	vmov	r2, s15
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b694:	4b13      	ldr	r3, [pc, #76]	@ (800b6e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b698:	0e1b      	lsrs	r3, r3, #24
 800b69a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b69e:	ee07 3a90 	vmov	s15, r3
 800b6a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b6aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b6ae:	edd7 6a07 	vldr	s13, [r7, #28]
 800b6b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b6b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6ba:	ee17 2a90 	vmov	r2, s15
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b6c2:	e008      	b.n	800b6d6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	609a      	str	r2, [r3, #8]
}
 800b6d6:	bf00      	nop
 800b6d8:	3724      	adds	r7, #36	@ 0x24
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e0:	4770      	bx	lr
 800b6e2:	bf00      	nop
 800b6e4:	58024400 	.word	0x58024400
 800b6e8:	03d09000 	.word	0x03d09000
 800b6ec:	46000000 	.word	0x46000000
 800b6f0:	4c742400 	.word	0x4c742400
 800b6f4:	4a742400 	.word	0x4a742400
 800b6f8:	4bbebc20 	.word	0x4bbebc20

0800b6fc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b6fc:	b480      	push	{r7}
 800b6fe:	b089      	sub	sp, #36	@ 0x24
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b704:	4ba0      	ldr	r3, [pc, #640]	@ (800b988 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b708:	f003 0303 	and.w	r3, r3, #3
 800b70c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b70e:	4b9e      	ldr	r3, [pc, #632]	@ (800b988 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b712:	091b      	lsrs	r3, r3, #4
 800b714:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b718:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b71a:	4b9b      	ldr	r3, [pc, #620]	@ (800b988 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b71c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b71e:	f003 0301 	and.w	r3, r3, #1
 800b722:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b724:	4b98      	ldr	r3, [pc, #608]	@ (800b988 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b726:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b728:	08db      	lsrs	r3, r3, #3
 800b72a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b72e:	693a      	ldr	r2, [r7, #16]
 800b730:	fb02 f303 	mul.w	r3, r2, r3
 800b734:	ee07 3a90 	vmov	s15, r3
 800b738:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b73c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b740:	697b      	ldr	r3, [r7, #20]
 800b742:	2b00      	cmp	r3, #0
 800b744:	f000 8111 	beq.w	800b96a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b748:	69bb      	ldr	r3, [r7, #24]
 800b74a:	2b02      	cmp	r3, #2
 800b74c:	f000 8083 	beq.w	800b856 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b750:	69bb      	ldr	r3, [r7, #24]
 800b752:	2b02      	cmp	r3, #2
 800b754:	f200 80a1 	bhi.w	800b89a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b758:	69bb      	ldr	r3, [r7, #24]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d003      	beq.n	800b766 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b75e:	69bb      	ldr	r3, [r7, #24]
 800b760:	2b01      	cmp	r3, #1
 800b762:	d056      	beq.n	800b812 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b764:	e099      	b.n	800b89a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b766:	4b88      	ldr	r3, [pc, #544]	@ (800b988 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	f003 0320 	and.w	r3, r3, #32
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d02d      	beq.n	800b7ce <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b772:	4b85      	ldr	r3, [pc, #532]	@ (800b988 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	08db      	lsrs	r3, r3, #3
 800b778:	f003 0303 	and.w	r3, r3, #3
 800b77c:	4a83      	ldr	r2, [pc, #524]	@ (800b98c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b77e:	fa22 f303 	lsr.w	r3, r2, r3
 800b782:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b784:	68bb      	ldr	r3, [r7, #8]
 800b786:	ee07 3a90 	vmov	s15, r3
 800b78a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b78e:	697b      	ldr	r3, [r7, #20]
 800b790:	ee07 3a90 	vmov	s15, r3
 800b794:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b798:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b79c:	4b7a      	ldr	r3, [pc, #488]	@ (800b988 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b79e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7a4:	ee07 3a90 	vmov	s15, r3
 800b7a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7ac:	ed97 6a03 	vldr	s12, [r7, #12]
 800b7b0:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800b990 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b7b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7bc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b7c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7c8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b7cc:	e087      	b.n	800b8de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b7ce:	697b      	ldr	r3, [r7, #20]
 800b7d0:	ee07 3a90 	vmov	s15, r3
 800b7d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7d8:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800b994 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b7dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7e0:	4b69      	ldr	r3, [pc, #420]	@ (800b988 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b7e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7e8:	ee07 3a90 	vmov	s15, r3
 800b7ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7f0:	ed97 6a03 	vldr	s12, [r7, #12]
 800b7f4:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800b990 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b7f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b800:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b804:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b808:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b80c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b810:	e065      	b.n	800b8de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b812:	697b      	ldr	r3, [r7, #20]
 800b814:	ee07 3a90 	vmov	s15, r3
 800b818:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b81c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800b998 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b820:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b824:	4b58      	ldr	r3, [pc, #352]	@ (800b988 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b828:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b82c:	ee07 3a90 	vmov	s15, r3
 800b830:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b834:	ed97 6a03 	vldr	s12, [r7, #12]
 800b838:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800b990 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b83c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b840:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b844:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b848:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b84c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b850:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b854:	e043      	b.n	800b8de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b856:	697b      	ldr	r3, [r7, #20]
 800b858:	ee07 3a90 	vmov	s15, r3
 800b85c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b860:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800b99c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b864:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b868:	4b47      	ldr	r3, [pc, #284]	@ (800b988 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b86a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b86c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b870:	ee07 3a90 	vmov	s15, r3
 800b874:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b878:	ed97 6a03 	vldr	s12, [r7, #12]
 800b87c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800b990 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b880:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b884:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b888:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b88c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b890:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b894:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b898:	e021      	b.n	800b8de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b89a:	697b      	ldr	r3, [r7, #20]
 800b89c:	ee07 3a90 	vmov	s15, r3
 800b8a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8a4:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b994 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b8a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b8ac:	4b36      	ldr	r3, [pc, #216]	@ (800b988 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b8ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b8b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8b4:	ee07 3a90 	vmov	s15, r3
 800b8b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8bc:	ed97 6a03 	vldr	s12, [r7, #12]
 800b8c0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800b990 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b8c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b8c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b8d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8d8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b8dc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b8de:	4b2a      	ldr	r3, [pc, #168]	@ (800b988 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b8e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b8e2:	0a5b      	lsrs	r3, r3, #9
 800b8e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b8e8:	ee07 3a90 	vmov	s15, r3
 800b8ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b8f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b8f8:	edd7 6a07 	vldr	s13, [r7, #28]
 800b8fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b900:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b904:	ee17 2a90 	vmov	r2, s15
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b90c:	4b1e      	ldr	r3, [pc, #120]	@ (800b988 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b90e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b910:	0c1b      	lsrs	r3, r3, #16
 800b912:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b916:	ee07 3a90 	vmov	s15, r3
 800b91a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b91e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b922:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b926:	edd7 6a07 	vldr	s13, [r7, #28]
 800b92a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b92e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b932:	ee17 2a90 	vmov	r2, s15
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b93a:	4b13      	ldr	r3, [pc, #76]	@ (800b988 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b93c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b93e:	0e1b      	lsrs	r3, r3, #24
 800b940:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b944:	ee07 3a90 	vmov	s15, r3
 800b948:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b94c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b950:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b954:	edd7 6a07 	vldr	s13, [r7, #28]
 800b958:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b95c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b960:	ee17 2a90 	vmov	r2, s15
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b968:	e008      	b.n	800b97c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	2200      	movs	r2, #0
 800b96e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2200      	movs	r2, #0
 800b974:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	2200      	movs	r2, #0
 800b97a:	609a      	str	r2, [r3, #8]
}
 800b97c:	bf00      	nop
 800b97e:	3724      	adds	r7, #36	@ 0x24
 800b980:	46bd      	mov	sp, r7
 800b982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b986:	4770      	bx	lr
 800b988:	58024400 	.word	0x58024400
 800b98c:	03d09000 	.word	0x03d09000
 800b990:	46000000 	.word	0x46000000
 800b994:	4c742400 	.word	0x4c742400
 800b998:	4a742400 	.word	0x4a742400
 800b99c:	4bbebc20 	.word	0x4bbebc20

0800b9a0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b084      	sub	sp, #16
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
 800b9a8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b9ae:	4b53      	ldr	r3, [pc, #332]	@ (800bafc <RCCEx_PLL2_Config+0x15c>)
 800b9b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9b2:	f003 0303 	and.w	r3, r3, #3
 800b9b6:	2b03      	cmp	r3, #3
 800b9b8:	d101      	bne.n	800b9be <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b9ba:	2301      	movs	r3, #1
 800b9bc:	e099      	b.n	800baf2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b9be:	4b4f      	ldr	r3, [pc, #316]	@ (800bafc <RCCEx_PLL2_Config+0x15c>)
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	4a4e      	ldr	r2, [pc, #312]	@ (800bafc <RCCEx_PLL2_Config+0x15c>)
 800b9c4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b9c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b9ca:	f7f7 fcad 	bl	8003328 <HAL_GetTick>
 800b9ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b9d0:	e008      	b.n	800b9e4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b9d2:	f7f7 fca9 	bl	8003328 <HAL_GetTick>
 800b9d6:	4602      	mov	r2, r0
 800b9d8:	68bb      	ldr	r3, [r7, #8]
 800b9da:	1ad3      	subs	r3, r2, r3
 800b9dc:	2b02      	cmp	r3, #2
 800b9de:	d901      	bls.n	800b9e4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b9e0:	2303      	movs	r3, #3
 800b9e2:	e086      	b.n	800baf2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b9e4:	4b45      	ldr	r3, [pc, #276]	@ (800bafc <RCCEx_PLL2_Config+0x15c>)
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d1f0      	bne.n	800b9d2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b9f0:	4b42      	ldr	r3, [pc, #264]	@ (800bafc <RCCEx_PLL2_Config+0x15c>)
 800b9f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9f4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	031b      	lsls	r3, r3, #12
 800b9fe:	493f      	ldr	r1, [pc, #252]	@ (800bafc <RCCEx_PLL2_Config+0x15c>)
 800ba00:	4313      	orrs	r3, r2
 800ba02:	628b      	str	r3, [r1, #40]	@ 0x28
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	685b      	ldr	r3, [r3, #4]
 800ba08:	3b01      	subs	r3, #1
 800ba0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	689b      	ldr	r3, [r3, #8]
 800ba12:	3b01      	subs	r3, #1
 800ba14:	025b      	lsls	r3, r3, #9
 800ba16:	b29b      	uxth	r3, r3
 800ba18:	431a      	orrs	r2, r3
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	68db      	ldr	r3, [r3, #12]
 800ba1e:	3b01      	subs	r3, #1
 800ba20:	041b      	lsls	r3, r3, #16
 800ba22:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800ba26:	431a      	orrs	r2, r3
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	691b      	ldr	r3, [r3, #16]
 800ba2c:	3b01      	subs	r3, #1
 800ba2e:	061b      	lsls	r3, r3, #24
 800ba30:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ba34:	4931      	ldr	r1, [pc, #196]	@ (800bafc <RCCEx_PLL2_Config+0x15c>)
 800ba36:	4313      	orrs	r3, r2
 800ba38:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ba3a:	4b30      	ldr	r3, [pc, #192]	@ (800bafc <RCCEx_PLL2_Config+0x15c>)
 800ba3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba3e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	695b      	ldr	r3, [r3, #20]
 800ba46:	492d      	ldr	r1, [pc, #180]	@ (800bafc <RCCEx_PLL2_Config+0x15c>)
 800ba48:	4313      	orrs	r3, r2
 800ba4a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ba4c:	4b2b      	ldr	r3, [pc, #172]	@ (800bafc <RCCEx_PLL2_Config+0x15c>)
 800ba4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba50:	f023 0220 	bic.w	r2, r3, #32
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	699b      	ldr	r3, [r3, #24]
 800ba58:	4928      	ldr	r1, [pc, #160]	@ (800bafc <RCCEx_PLL2_Config+0x15c>)
 800ba5a:	4313      	orrs	r3, r2
 800ba5c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ba5e:	4b27      	ldr	r3, [pc, #156]	@ (800bafc <RCCEx_PLL2_Config+0x15c>)
 800ba60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba62:	4a26      	ldr	r2, [pc, #152]	@ (800bafc <RCCEx_PLL2_Config+0x15c>)
 800ba64:	f023 0310 	bic.w	r3, r3, #16
 800ba68:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ba6a:	4b24      	ldr	r3, [pc, #144]	@ (800bafc <RCCEx_PLL2_Config+0x15c>)
 800ba6c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ba6e:	4b24      	ldr	r3, [pc, #144]	@ (800bb00 <RCCEx_PLL2_Config+0x160>)
 800ba70:	4013      	ands	r3, r2
 800ba72:	687a      	ldr	r2, [r7, #4]
 800ba74:	69d2      	ldr	r2, [r2, #28]
 800ba76:	00d2      	lsls	r2, r2, #3
 800ba78:	4920      	ldr	r1, [pc, #128]	@ (800bafc <RCCEx_PLL2_Config+0x15c>)
 800ba7a:	4313      	orrs	r3, r2
 800ba7c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ba7e:	4b1f      	ldr	r3, [pc, #124]	@ (800bafc <RCCEx_PLL2_Config+0x15c>)
 800ba80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba82:	4a1e      	ldr	r2, [pc, #120]	@ (800bafc <RCCEx_PLL2_Config+0x15c>)
 800ba84:	f043 0310 	orr.w	r3, r3, #16
 800ba88:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ba8a:	683b      	ldr	r3, [r7, #0]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d106      	bne.n	800ba9e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ba90:	4b1a      	ldr	r3, [pc, #104]	@ (800bafc <RCCEx_PLL2_Config+0x15c>)
 800ba92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba94:	4a19      	ldr	r2, [pc, #100]	@ (800bafc <RCCEx_PLL2_Config+0x15c>)
 800ba96:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ba9a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ba9c:	e00f      	b.n	800babe <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ba9e:	683b      	ldr	r3, [r7, #0]
 800baa0:	2b01      	cmp	r3, #1
 800baa2:	d106      	bne.n	800bab2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800baa4:	4b15      	ldr	r3, [pc, #84]	@ (800bafc <RCCEx_PLL2_Config+0x15c>)
 800baa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800baa8:	4a14      	ldr	r2, [pc, #80]	@ (800bafc <RCCEx_PLL2_Config+0x15c>)
 800baaa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800baae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bab0:	e005      	b.n	800babe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800bab2:	4b12      	ldr	r3, [pc, #72]	@ (800bafc <RCCEx_PLL2_Config+0x15c>)
 800bab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bab6:	4a11      	ldr	r2, [pc, #68]	@ (800bafc <RCCEx_PLL2_Config+0x15c>)
 800bab8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800babc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800babe:	4b0f      	ldr	r3, [pc, #60]	@ (800bafc <RCCEx_PLL2_Config+0x15c>)
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	4a0e      	ldr	r2, [pc, #56]	@ (800bafc <RCCEx_PLL2_Config+0x15c>)
 800bac4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800bac8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800baca:	f7f7 fc2d 	bl	8003328 <HAL_GetTick>
 800bace:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bad0:	e008      	b.n	800bae4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bad2:	f7f7 fc29 	bl	8003328 <HAL_GetTick>
 800bad6:	4602      	mov	r2, r0
 800bad8:	68bb      	ldr	r3, [r7, #8]
 800bada:	1ad3      	subs	r3, r2, r3
 800badc:	2b02      	cmp	r3, #2
 800bade:	d901      	bls.n	800bae4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bae0:	2303      	movs	r3, #3
 800bae2:	e006      	b.n	800baf2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bae4:	4b05      	ldr	r3, [pc, #20]	@ (800bafc <RCCEx_PLL2_Config+0x15c>)
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800baec:	2b00      	cmp	r3, #0
 800baee:	d0f0      	beq.n	800bad2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800baf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800baf2:	4618      	mov	r0, r3
 800baf4:	3710      	adds	r7, #16
 800baf6:	46bd      	mov	sp, r7
 800baf8:	bd80      	pop	{r7, pc}
 800bafa:	bf00      	nop
 800bafc:	58024400 	.word	0x58024400
 800bb00:	ffff0007 	.word	0xffff0007

0800bb04 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b084      	sub	sp, #16
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
 800bb0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bb0e:	2300      	movs	r3, #0
 800bb10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bb12:	4b53      	ldr	r3, [pc, #332]	@ (800bc60 <RCCEx_PLL3_Config+0x15c>)
 800bb14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb16:	f003 0303 	and.w	r3, r3, #3
 800bb1a:	2b03      	cmp	r3, #3
 800bb1c:	d101      	bne.n	800bb22 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800bb1e:	2301      	movs	r3, #1
 800bb20:	e099      	b.n	800bc56 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800bb22:	4b4f      	ldr	r3, [pc, #316]	@ (800bc60 <RCCEx_PLL3_Config+0x15c>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	4a4e      	ldr	r2, [pc, #312]	@ (800bc60 <RCCEx_PLL3_Config+0x15c>)
 800bb28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bb2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bb2e:	f7f7 fbfb 	bl	8003328 <HAL_GetTick>
 800bb32:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bb34:	e008      	b.n	800bb48 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bb36:	f7f7 fbf7 	bl	8003328 <HAL_GetTick>
 800bb3a:	4602      	mov	r2, r0
 800bb3c:	68bb      	ldr	r3, [r7, #8]
 800bb3e:	1ad3      	subs	r3, r2, r3
 800bb40:	2b02      	cmp	r3, #2
 800bb42:	d901      	bls.n	800bb48 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bb44:	2303      	movs	r3, #3
 800bb46:	e086      	b.n	800bc56 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bb48:	4b45      	ldr	r3, [pc, #276]	@ (800bc60 <RCCEx_PLL3_Config+0x15c>)
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d1f0      	bne.n	800bb36 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800bb54:	4b42      	ldr	r3, [pc, #264]	@ (800bc60 <RCCEx_PLL3_Config+0x15c>)
 800bb56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb58:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	051b      	lsls	r3, r3, #20
 800bb62:	493f      	ldr	r1, [pc, #252]	@ (800bc60 <RCCEx_PLL3_Config+0x15c>)
 800bb64:	4313      	orrs	r3, r2
 800bb66:	628b      	str	r3, [r1, #40]	@ 0x28
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	685b      	ldr	r3, [r3, #4]
 800bb6c:	3b01      	subs	r3, #1
 800bb6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	689b      	ldr	r3, [r3, #8]
 800bb76:	3b01      	subs	r3, #1
 800bb78:	025b      	lsls	r3, r3, #9
 800bb7a:	b29b      	uxth	r3, r3
 800bb7c:	431a      	orrs	r2, r3
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	68db      	ldr	r3, [r3, #12]
 800bb82:	3b01      	subs	r3, #1
 800bb84:	041b      	lsls	r3, r3, #16
 800bb86:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800bb8a:	431a      	orrs	r2, r3
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	691b      	ldr	r3, [r3, #16]
 800bb90:	3b01      	subs	r3, #1
 800bb92:	061b      	lsls	r3, r3, #24
 800bb94:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800bb98:	4931      	ldr	r1, [pc, #196]	@ (800bc60 <RCCEx_PLL3_Config+0x15c>)
 800bb9a:	4313      	orrs	r3, r2
 800bb9c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800bb9e:	4b30      	ldr	r3, [pc, #192]	@ (800bc60 <RCCEx_PLL3_Config+0x15c>)
 800bba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bba2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	695b      	ldr	r3, [r3, #20]
 800bbaa:	492d      	ldr	r1, [pc, #180]	@ (800bc60 <RCCEx_PLL3_Config+0x15c>)
 800bbac:	4313      	orrs	r3, r2
 800bbae:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800bbb0:	4b2b      	ldr	r3, [pc, #172]	@ (800bc60 <RCCEx_PLL3_Config+0x15c>)
 800bbb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbb4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	699b      	ldr	r3, [r3, #24]
 800bbbc:	4928      	ldr	r1, [pc, #160]	@ (800bc60 <RCCEx_PLL3_Config+0x15c>)
 800bbbe:	4313      	orrs	r3, r2
 800bbc0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800bbc2:	4b27      	ldr	r3, [pc, #156]	@ (800bc60 <RCCEx_PLL3_Config+0x15c>)
 800bbc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbc6:	4a26      	ldr	r2, [pc, #152]	@ (800bc60 <RCCEx_PLL3_Config+0x15c>)
 800bbc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bbcc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800bbce:	4b24      	ldr	r3, [pc, #144]	@ (800bc60 <RCCEx_PLL3_Config+0x15c>)
 800bbd0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bbd2:	4b24      	ldr	r3, [pc, #144]	@ (800bc64 <RCCEx_PLL3_Config+0x160>)
 800bbd4:	4013      	ands	r3, r2
 800bbd6:	687a      	ldr	r2, [r7, #4]
 800bbd8:	69d2      	ldr	r2, [r2, #28]
 800bbda:	00d2      	lsls	r2, r2, #3
 800bbdc:	4920      	ldr	r1, [pc, #128]	@ (800bc60 <RCCEx_PLL3_Config+0x15c>)
 800bbde:	4313      	orrs	r3, r2
 800bbe0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800bbe2:	4b1f      	ldr	r3, [pc, #124]	@ (800bc60 <RCCEx_PLL3_Config+0x15c>)
 800bbe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbe6:	4a1e      	ldr	r2, [pc, #120]	@ (800bc60 <RCCEx_PLL3_Config+0x15c>)
 800bbe8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bbec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d106      	bne.n	800bc02 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800bbf4:	4b1a      	ldr	r3, [pc, #104]	@ (800bc60 <RCCEx_PLL3_Config+0x15c>)
 800bbf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbf8:	4a19      	ldr	r2, [pc, #100]	@ (800bc60 <RCCEx_PLL3_Config+0x15c>)
 800bbfa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800bbfe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bc00:	e00f      	b.n	800bc22 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bc02:	683b      	ldr	r3, [r7, #0]
 800bc04:	2b01      	cmp	r3, #1
 800bc06:	d106      	bne.n	800bc16 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800bc08:	4b15      	ldr	r3, [pc, #84]	@ (800bc60 <RCCEx_PLL3_Config+0x15c>)
 800bc0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc0c:	4a14      	ldr	r2, [pc, #80]	@ (800bc60 <RCCEx_PLL3_Config+0x15c>)
 800bc0e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800bc12:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bc14:	e005      	b.n	800bc22 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800bc16:	4b12      	ldr	r3, [pc, #72]	@ (800bc60 <RCCEx_PLL3_Config+0x15c>)
 800bc18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc1a:	4a11      	ldr	r2, [pc, #68]	@ (800bc60 <RCCEx_PLL3_Config+0x15c>)
 800bc1c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bc20:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800bc22:	4b0f      	ldr	r3, [pc, #60]	@ (800bc60 <RCCEx_PLL3_Config+0x15c>)
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	4a0e      	ldr	r2, [pc, #56]	@ (800bc60 <RCCEx_PLL3_Config+0x15c>)
 800bc28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bc2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bc2e:	f7f7 fb7b 	bl	8003328 <HAL_GetTick>
 800bc32:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bc34:	e008      	b.n	800bc48 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bc36:	f7f7 fb77 	bl	8003328 <HAL_GetTick>
 800bc3a:	4602      	mov	r2, r0
 800bc3c:	68bb      	ldr	r3, [r7, #8]
 800bc3e:	1ad3      	subs	r3, r2, r3
 800bc40:	2b02      	cmp	r3, #2
 800bc42:	d901      	bls.n	800bc48 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bc44:	2303      	movs	r3, #3
 800bc46:	e006      	b.n	800bc56 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bc48:	4b05      	ldr	r3, [pc, #20]	@ (800bc60 <RCCEx_PLL3_Config+0x15c>)
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d0f0      	beq.n	800bc36 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800bc54:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc56:	4618      	mov	r0, r3
 800bc58:	3710      	adds	r7, #16
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	bd80      	pop	{r7, pc}
 800bc5e:	bf00      	nop
 800bc60:	58024400 	.word	0x58024400
 800bc64:	ffff0007 	.word	0xffff0007

0800bc68 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b084      	sub	sp, #16
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d101      	bne.n	800bc7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bc76:	2301      	movs	r3, #1
 800bc78:	e10f      	b.n	800be9a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	4a87      	ldr	r2, [pc, #540]	@ (800bea4 <HAL_SPI_Init+0x23c>)
 800bc86:	4293      	cmp	r3, r2
 800bc88:	d00f      	beq.n	800bcaa <HAL_SPI_Init+0x42>
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	4a86      	ldr	r2, [pc, #536]	@ (800bea8 <HAL_SPI_Init+0x240>)
 800bc90:	4293      	cmp	r3, r2
 800bc92:	d00a      	beq.n	800bcaa <HAL_SPI_Init+0x42>
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	4a84      	ldr	r2, [pc, #528]	@ (800beac <HAL_SPI_Init+0x244>)
 800bc9a:	4293      	cmp	r3, r2
 800bc9c:	d005      	beq.n	800bcaa <HAL_SPI_Init+0x42>
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	68db      	ldr	r3, [r3, #12]
 800bca2:	2b0f      	cmp	r3, #15
 800bca4:	d901      	bls.n	800bcaa <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800bca6:	2301      	movs	r3, #1
 800bca8:	e0f7      	b.n	800be9a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800bcaa:	6878      	ldr	r0, [r7, #4]
 800bcac:	f000 fce6 	bl	800c67c <SPI_GetPacketSize>
 800bcb0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	4a7b      	ldr	r2, [pc, #492]	@ (800bea4 <HAL_SPI_Init+0x23c>)
 800bcb8:	4293      	cmp	r3, r2
 800bcba:	d00c      	beq.n	800bcd6 <HAL_SPI_Init+0x6e>
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	4a79      	ldr	r2, [pc, #484]	@ (800bea8 <HAL_SPI_Init+0x240>)
 800bcc2:	4293      	cmp	r3, r2
 800bcc4:	d007      	beq.n	800bcd6 <HAL_SPI_Init+0x6e>
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	4a78      	ldr	r2, [pc, #480]	@ (800beac <HAL_SPI_Init+0x244>)
 800bccc:	4293      	cmp	r3, r2
 800bcce:	d002      	beq.n	800bcd6 <HAL_SPI_Init+0x6e>
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	2b08      	cmp	r3, #8
 800bcd4:	d811      	bhi.n	800bcfa <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800bcda:	4a72      	ldr	r2, [pc, #456]	@ (800bea4 <HAL_SPI_Init+0x23c>)
 800bcdc:	4293      	cmp	r3, r2
 800bcde:	d009      	beq.n	800bcf4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	4a70      	ldr	r2, [pc, #448]	@ (800bea8 <HAL_SPI_Init+0x240>)
 800bce6:	4293      	cmp	r3, r2
 800bce8:	d004      	beq.n	800bcf4 <HAL_SPI_Init+0x8c>
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	4a6f      	ldr	r2, [pc, #444]	@ (800beac <HAL_SPI_Init+0x244>)
 800bcf0:	4293      	cmp	r3, r2
 800bcf2:	d104      	bne.n	800bcfe <HAL_SPI_Init+0x96>
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	2b10      	cmp	r3, #16
 800bcf8:	d901      	bls.n	800bcfe <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800bcfa:	2301      	movs	r3, #1
 800bcfc:	e0cd      	b.n	800be9a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bd04:	b2db      	uxtb	r3, r3
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d106      	bne.n	800bd18 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bd12:	6878      	ldr	r0, [r7, #4]
 800bd14:	f7f5 fda0 	bl	8001858 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2202      	movs	r2, #2
 800bd1c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	681a      	ldr	r2, [r3, #0]
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	f022 0201 	bic.w	r2, r2, #1
 800bd2e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	689b      	ldr	r3, [r3, #8]
 800bd36:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800bd3a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	699b      	ldr	r3, [r3, #24]
 800bd40:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bd44:	d119      	bne.n	800bd7a <HAL_SPI_Init+0x112>
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	685b      	ldr	r3, [r3, #4]
 800bd4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bd4e:	d103      	bne.n	800bd58 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d008      	beq.n	800bd6a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d10c      	bne.n	800bd7a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bd64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bd68:	d107      	bne.n	800bd7a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	681a      	ldr	r2, [r3, #0]
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800bd78:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	685b      	ldr	r3, [r3, #4]
 800bd7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d00f      	beq.n	800bda6 <HAL_SPI_Init+0x13e>
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	68db      	ldr	r3, [r3, #12]
 800bd8a:	2b06      	cmp	r3, #6
 800bd8c:	d90b      	bls.n	800bda6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	430a      	orrs	r2, r1
 800bda2:	601a      	str	r2, [r3, #0]
 800bda4:	e007      	b.n	800bdb6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	681a      	ldr	r2, [r3, #0]
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800bdb4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	69da      	ldr	r2, [r3, #28]
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdbe:	431a      	orrs	r2, r3
 800bdc0:	68bb      	ldr	r3, [r7, #8]
 800bdc2:	431a      	orrs	r2, r3
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bdc8:	ea42 0103 	orr.w	r1, r2, r3
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	68da      	ldr	r2, [r3, #12]
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	430a      	orrs	r2, r1
 800bdd6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bde0:	431a      	orrs	r2, r3
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bde6:	431a      	orrs	r2, r3
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	699b      	ldr	r3, [r3, #24]
 800bdec:	431a      	orrs	r2, r3
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	691b      	ldr	r3, [r3, #16]
 800bdf2:	431a      	orrs	r2, r3
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	695b      	ldr	r3, [r3, #20]
 800bdf8:	431a      	orrs	r2, r3
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	6a1b      	ldr	r3, [r3, #32]
 800bdfe:	431a      	orrs	r2, r3
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	685b      	ldr	r3, [r3, #4]
 800be04:	431a      	orrs	r2, r3
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800be0a:	431a      	orrs	r2, r3
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	689b      	ldr	r3, [r3, #8]
 800be10:	431a      	orrs	r2, r3
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800be16:	ea42 0103 	orr.w	r1, r2, r3
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	430a      	orrs	r2, r1
 800be24:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	685b      	ldr	r3, [r3, #4]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d113      	bne.n	800be56 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	689b      	ldr	r3, [r3, #8]
 800be34:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800be40:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	689b      	ldr	r3, [r3, #8]
 800be48:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800be54:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	f022 0201 	bic.w	r2, r2, #1
 800be64:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	685b      	ldr	r3, [r3, #4]
 800be6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d00a      	beq.n	800be88 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	68db      	ldr	r3, [r3, #12]
 800be78:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	430a      	orrs	r2, r1
 800be86:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2200      	movs	r2, #0
 800be8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	2201      	movs	r2, #1
 800be94:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800be98:	2300      	movs	r3, #0
}
 800be9a:	4618      	mov	r0, r3
 800be9c:	3710      	adds	r7, #16
 800be9e:	46bd      	mov	sp, r7
 800bea0:	bd80      	pop	{r7, pc}
 800bea2:	bf00      	nop
 800bea4:	40013000 	.word	0x40013000
 800bea8:	40003800 	.word	0x40003800
 800beac:	40003c00 	.word	0x40003c00

0800beb0 <HAL_SPI_Receive_IT>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800beb0:	b480      	push	{r7}
 800beb2:	b085      	sub	sp, #20
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	60f8      	str	r0, [r7, #12]
 800beb8:	60b9      	str	r1, [r7, #8]
 800beba:	4613      	mov	r3, r2
 800bebc:	80fb      	strh	r3, [r7, #6]
  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bec4:	b2db      	uxtb	r3, r3
 800bec6:	2b01      	cmp	r3, #1
 800bec8:	d001      	beq.n	800bece <HAL_SPI_Receive_IT+0x1e>
  {
    return HAL_BUSY;
 800beca:	2302      	movs	r3, #2
 800becc:	e08b      	b.n	800bfe6 <HAL_SPI_Receive_IT+0x136>
  }

  if ((pData == NULL) || (Size == 0UL))
 800bece:	68bb      	ldr	r3, [r7, #8]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d002      	beq.n	800beda <HAL_SPI_Receive_IT+0x2a>
 800bed4:	88fb      	ldrh	r3, [r7, #6]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d101      	bne.n	800bede <HAL_SPI_Receive_IT+0x2e>
  {
    return HAL_ERROR;
 800beda:	2301      	movs	r3, #1
 800bedc:	e083      	b.n	800bfe6 <HAL_SPI_Receive_IT+0x136>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800bee4:	2b01      	cmp	r3, #1
 800bee6:	d101      	bne.n	800beec <HAL_SPI_Receive_IT+0x3c>
 800bee8:	2302      	movs	r3, #2
 800beea:	e07c      	b.n	800bfe6 <HAL_SPI_Receive_IT+0x136>
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	2201      	movs	r2, #1
 800bef0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	2204      	movs	r2, #4
 800bef8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	2200      	movs	r2, #0
 800bf00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	68ba      	ldr	r2, [r7, #8]
 800bf08:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	88fa      	ldrh	r2, [r7, #6]
 800bf0e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	88fa      	ldrh	r2, [r7, #6]
 800bf16:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	2200      	movs	r2, #0
 800bf24:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxISR       = NULL;
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	2200      	movs	r2, #0
 800bf34:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->Reload.pRxBuffPtr  = NULL;
  hspi->Reload.RxXferSize  = NULL;
#endif /* USE_SPI_RELOAD_TRANSFER */

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	68db      	ldr	r3, [r3, #12]
 800bf3a:	2b0f      	cmp	r3, #15
 800bf3c:	d903      	bls.n	800bf46 <HAL_SPI_Receive_IT+0x96>
  {
    hspi->RxISR = SPI_RxISR_32BIT;
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	4a2c      	ldr	r2, [pc, #176]	@ (800bff4 <HAL_SPI_Receive_IT+0x144>)
 800bf42:	671a      	str	r2, [r3, #112]	@ 0x70
 800bf44:	e00a      	b.n	800bf5c <HAL_SPI_Receive_IT+0xac>
  }
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	68db      	ldr	r3, [r3, #12]
 800bf4a:	2b07      	cmp	r3, #7
 800bf4c:	d903      	bls.n	800bf56 <HAL_SPI_Receive_IT+0xa6>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	4a29      	ldr	r2, [pc, #164]	@ (800bff8 <HAL_SPI_Receive_IT+0x148>)
 800bf52:	671a      	str	r2, [r3, #112]	@ 0x70
 800bf54:	e002      	b.n	800bf5c <HAL_SPI_Receive_IT+0xac>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	4a28      	ldr	r2, [pc, #160]	@ (800bffc <HAL_SPI_Receive_IT+0x14c>)
 800bf5a:	671a      	str	r2, [r3, #112]	@ 0x70
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	689b      	ldr	r3, [r3, #8]
 800bf60:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800bf64:	d108      	bne.n	800bf78 <HAL_SPI_Receive_IT+0xc8>
  {
    SPI_1LINE_RX(hspi);
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	681a      	ldr	r2, [r3, #0]
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800bf74:	601a      	str	r2, [r3, #0]
 800bf76:	e009      	b.n	800bf8c <HAL_SPI_Receive_IT+0xdc>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	68db      	ldr	r3, [r3, #12]
 800bf7e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800bf8a:	60da      	str	r2, [r3, #12]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	685a      	ldr	r2, [r3, #4]
 800bf92:	4b1b      	ldr	r3, [pc, #108]	@ (800c000 <HAL_SPI_Receive_IT+0x150>)
 800bf94:	4013      	ands	r3, r2
 800bf96:	88f9      	ldrh	r1, [r7, #6]
 800bf98:	68fa      	ldr	r2, [r7, #12]
 800bf9a:	6812      	ldr	r2, [r2, #0]
 800bf9c:	430b      	orrs	r3, r1
 800bf9e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	681a      	ldr	r2, [r3, #0]
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	f042 0201 	orr.w	r2, r2, #1
 800bfae:	601a      	str	r2, [r3, #0]

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Enable EOT, RXP, OVR, FRE, MODF and TSERF interrupts */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF | SPI_IT_TSERF));
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	6919      	ldr	r1, [r3, #16]
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	681a      	ldr	r2, [r3, #0]
 800bfc2:	f240 7349 	movw	r3, #1865	@ 0x749
 800bfc6:	430b      	orrs	r3, r1
 800bfc8:	6113      	str	r3, [r2, #16]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	685b      	ldr	r3, [r3, #4]
 800bfce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bfd2:	d107      	bne.n	800bfe4 <HAL_SPI_Receive_IT+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	681a      	ldr	r2, [r3, #0]
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bfe2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800bfe4:	2300      	movs	r3, #0
}
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	3714      	adds	r7, #20
 800bfea:	46bd      	mov	sp, r7
 800bfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff0:	4770      	bx	lr
 800bff2:	bf00      	nop
 800bff4:	0800c4e3 	.word	0x0800c4e3
 800bff8:	0800c483 	.word	0x0800c483
 800bffc:	0800c425 	.word	0x0800c425
 800c000:	ffff0000 	.word	0xffff0000

0800c004 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b08a      	sub	sp, #40	@ 0x28
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	691b      	ldr	r3, [r3, #16]
 800c012:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	695b      	ldr	r3, [r3, #20]
 800c01a:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800c01c:	6a3a      	ldr	r2, [r7, #32]
 800c01e:	69fb      	ldr	r3, [r7, #28]
 800c020:	4013      	ands	r3, r2
 800c022:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	689b      	ldr	r3, [r3, #8]
 800c02a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800c02c:	2300      	movs	r3, #0
 800c02e:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c036:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	3330      	adds	r3, #48	@ 0x30
 800c03e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800c040:	69fb      	ldr	r3, [r7, #28]
 800c042:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c046:	2b00      	cmp	r3, #0
 800c048:	d010      	beq.n	800c06c <HAL_SPI_IRQHandler+0x68>
 800c04a:	6a3b      	ldr	r3, [r7, #32]
 800c04c:	f003 0308 	and.w	r3, r3, #8
 800c050:	2b00      	cmp	r3, #0
 800c052:	d00b      	beq.n	800c06c <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	699a      	ldr	r2, [r3, #24]
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c062:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800c064:	6878      	ldr	r0, [r7, #4]
 800c066:	f000 f9b9 	bl	800c3dc <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800c06a:	e192      	b.n	800c392 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800c06c:	69bb      	ldr	r3, [r7, #24]
 800c06e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c072:	2b00      	cmp	r3, #0
 800c074:	d113      	bne.n	800c09e <HAL_SPI_IRQHandler+0x9a>
 800c076:	69bb      	ldr	r3, [r7, #24]
 800c078:	f003 0320 	and.w	r3, r3, #32
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d10e      	bne.n	800c09e <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800c080:	69bb      	ldr	r3, [r7, #24]
 800c082:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800c086:	2b00      	cmp	r3, #0
 800c088:	d009      	beq.n	800c09e <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c08e:	6878      	ldr	r0, [r7, #4]
 800c090:	4798      	blx	r3
    hspi->RxISR(hspi);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c096:	6878      	ldr	r0, [r7, #4]
 800c098:	4798      	blx	r3
    handled = 1UL;
 800c09a:	2301      	movs	r3, #1
 800c09c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800c09e:	69bb      	ldr	r3, [r7, #24]
 800c0a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d10f      	bne.n	800c0c8 <HAL_SPI_IRQHandler+0xc4>
 800c0a8:	69bb      	ldr	r3, [r7, #24]
 800c0aa:	f003 0301 	and.w	r3, r3, #1
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d00a      	beq.n	800c0c8 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800c0b2:	69bb      	ldr	r3, [r7, #24]
 800c0b4:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d105      	bne.n	800c0c8 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c0c0:	6878      	ldr	r0, [r7, #4]
 800c0c2:	4798      	blx	r3
    handled = 1UL;
 800c0c4:	2301      	movs	r3, #1
 800c0c6:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800c0c8:	69bb      	ldr	r3, [r7, #24]
 800c0ca:	f003 0320 	and.w	r3, r3, #32
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d10f      	bne.n	800c0f2 <HAL_SPI_IRQHandler+0xee>
 800c0d2:	69bb      	ldr	r3, [r7, #24]
 800c0d4:	f003 0302 	and.w	r3, r3, #2
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d00a      	beq.n	800c0f2 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800c0dc:	69bb      	ldr	r3, [r7, #24]
 800c0de:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d105      	bne.n	800c0f2 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c0ea:	6878      	ldr	r0, [r7, #4]
 800c0ec:	4798      	blx	r3
    handled = 1UL;
 800c0ee:	2301      	movs	r3, #1
 800c0f0:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800c0f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	f040 8147 	bne.w	800c388 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800c0fa:	69bb      	ldr	r3, [r7, #24]
 800c0fc:	f003 0308 	and.w	r3, r3, #8
 800c100:	2b00      	cmp	r3, #0
 800c102:	f000 808b 	beq.w	800c21c <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	699a      	ldr	r2, [r3, #24]
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	f042 0208 	orr.w	r2, r2, #8
 800c114:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	699a      	ldr	r2, [r3, #24]
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	f042 0210 	orr.w	r2, r2, #16
 800c124:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	699a      	ldr	r2, [r3, #24]
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c134:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	691a      	ldr	r2, [r3, #16]
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	f022 0208 	bic.w	r2, r2, #8
 800c144:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	689b      	ldr	r3, [r3, #8]
 800c14c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800c150:	2b00      	cmp	r3, #0
 800c152:	d13d      	bne.n	800c1d0 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800c154:	e036      	b.n	800c1c4 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	68db      	ldr	r3, [r3, #12]
 800c15a:	2b0f      	cmp	r3, #15
 800c15c:	d90b      	bls.n	800c176 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681a      	ldr	r2, [r3, #0]
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c166:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800c168:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c16e:	1d1a      	adds	r2, r3, #4
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	665a      	str	r2, [r3, #100]	@ 0x64
 800c174:	e01d      	b.n	800c1b2 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	68db      	ldr	r3, [r3, #12]
 800c17a:	2b07      	cmp	r3, #7
 800c17c:	d90b      	bls.n	800c196 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c182:	68fa      	ldr	r2, [r7, #12]
 800c184:	8812      	ldrh	r2, [r2, #0]
 800c186:	b292      	uxth	r2, r2
 800c188:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c18e:	1c9a      	adds	r2, r3, #2
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	665a      	str	r2, [r3, #100]	@ 0x64
 800c194:	e00d      	b.n	800c1b2 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c1a2:	7812      	ldrb	r2, [r2, #0]
 800c1a4:	b2d2      	uxtb	r2, r2
 800c1a6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c1ac:	1c5a      	adds	r2, r3, #1
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c1b8:	b29b      	uxth	r3, r3
 800c1ba:	3b01      	subs	r3, #1
 800c1bc:	b29a      	uxth	r2, r3
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c1ca:	b29b      	uxth	r3, r3
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d1c2      	bne.n	800c156 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800c1d0:	6878      	ldr	r0, [r7, #4]
 800c1d2:	f000 f9b3 	bl	800c53c <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	2201      	movs	r2, #1
 800c1da:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d003      	beq.n	800c1f0 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800c1e8:	6878      	ldr	r0, [r7, #4]
 800c1ea:	f000 f8ed 	bl	800c3c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800c1ee:	e0d0      	b.n	800c392 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800c1f0:	7cfb      	ldrb	r3, [r7, #19]
 800c1f2:	2b05      	cmp	r3, #5
 800c1f4:	d103      	bne.n	800c1fe <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800c1f6:	6878      	ldr	r0, [r7, #4]
 800c1f8:	f000 f8dc 	bl	800c3b4 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800c1fc:	e0c6      	b.n	800c38c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800c1fe:	7cfb      	ldrb	r3, [r7, #19]
 800c200:	2b04      	cmp	r3, #4
 800c202:	d103      	bne.n	800c20c <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800c204:	6878      	ldr	r0, [r7, #4]
 800c206:	f7f6 fc27 	bl	8002a58 <HAL_SPI_RxCpltCallback>
    return;
 800c20a:	e0bf      	b.n	800c38c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800c20c:	7cfb      	ldrb	r3, [r7, #19]
 800c20e:	2b03      	cmp	r3, #3
 800c210:	f040 80bc 	bne.w	800c38c <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800c214:	6878      	ldr	r0, [r7, #4]
 800c216:	f000 f8c3 	bl	800c3a0 <HAL_SPI_TxCpltCallback>
    return;
 800c21a:	e0b7      	b.n	800c38c <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800c21c:	69bb      	ldr	r3, [r7, #24]
 800c21e:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800c222:	2b00      	cmp	r3, #0
 800c224:	f000 80b5 	beq.w	800c392 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800c228:	69bb      	ldr	r3, [r7, #24]
 800c22a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d00f      	beq.n	800c252 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c238:	f043 0204 	orr.w	r2, r3, #4
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	699a      	ldr	r2, [r3, #24]
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c250:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800c252:	69bb      	ldr	r3, [r7, #24]
 800c254:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d00f      	beq.n	800c27c <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c262:	f043 0201 	orr.w	r2, r3, #1
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	699a      	ldr	r2, [r3, #24]
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c27a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800c27c:	69bb      	ldr	r3, [r7, #24]
 800c27e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c282:	2b00      	cmp	r3, #0
 800c284:	d00f      	beq.n	800c2a6 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c28c:	f043 0208 	orr.w	r2, r3, #8
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	699a      	ldr	r2, [r3, #24]
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c2a4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800c2a6:	69bb      	ldr	r3, [r7, #24]
 800c2a8:	f003 0320 	and.w	r3, r3, #32
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d00f      	beq.n	800c2d0 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c2b6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	699a      	ldr	r2, [r3, #24]
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	f042 0220 	orr.w	r2, r2, #32
 800c2ce:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d05a      	beq.n	800c390 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	681a      	ldr	r2, [r3, #0]
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	f022 0201 	bic.w	r2, r2, #1
 800c2e8:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	6919      	ldr	r1, [r3, #16]
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681a      	ldr	r2, [r3, #0]
 800c2f4:	4b28      	ldr	r3, [pc, #160]	@ (800c398 <HAL_SPI_IRQHandler+0x394>)
 800c2f6:	400b      	ands	r3, r1
 800c2f8:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800c2fa:	697b      	ldr	r3, [r7, #20]
 800c2fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800c300:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800c304:	d138      	bne.n	800c378 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	689a      	ldr	r2, [r3, #8]
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800c314:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d013      	beq.n	800c346 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c322:	4a1e      	ldr	r2, [pc, #120]	@ (800c39c <HAL_SPI_IRQHandler+0x398>)
 800c324:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c32a:	4618      	mov	r0, r3
 800c32c:	f7f9 ff84 	bl	8006238 <HAL_DMA_Abort_IT>
 800c330:	4603      	mov	r3, r0
 800c332:	2b00      	cmp	r3, #0
 800c334:	d007      	beq.n	800c346 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c33c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d020      	beq.n	800c390 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c352:	4a12      	ldr	r2, [pc, #72]	@ (800c39c <HAL_SPI_IRQHandler+0x398>)
 800c354:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c35a:	4618      	mov	r0, r3
 800c35c:	f7f9 ff6c 	bl	8006238 <HAL_DMA_Abort_IT>
 800c360:	4603      	mov	r3, r0
 800c362:	2b00      	cmp	r3, #0
 800c364:	d014      	beq.n	800c390 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c36c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800c376:	e00b      	b.n	800c390 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	2201      	movs	r2, #1
 800c37c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 800c380:	6878      	ldr	r0, [r7, #4]
 800c382:	f000 f821 	bl	800c3c8 <HAL_SPI_ErrorCallback>
    return;
 800c386:	e003      	b.n	800c390 <HAL_SPI_IRQHandler+0x38c>
    return;
 800c388:	bf00      	nop
 800c38a:	e002      	b.n	800c392 <HAL_SPI_IRQHandler+0x38e>
    return;
 800c38c:	bf00      	nop
 800c38e:	e000      	b.n	800c392 <HAL_SPI_IRQHandler+0x38e>
    return;
 800c390:	bf00      	nop
  }
}
 800c392:	3728      	adds	r7, #40	@ 0x28
 800c394:	46bd      	mov	sp, r7
 800c396:	bd80      	pop	{r7, pc}
 800c398:	fffffc94 	.word	0xfffffc94
 800c39c:	0800c3f1 	.word	0x0800c3f1

0800c3a0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800c3a0:	b480      	push	{r7}
 800c3a2:	b083      	sub	sp, #12
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800c3a8:	bf00      	nop
 800c3aa:	370c      	adds	r7, #12
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b2:	4770      	bx	lr

0800c3b4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800c3b4:	b480      	push	{r7}
 800c3b6:	b083      	sub	sp, #12
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800c3bc:	bf00      	nop
 800c3be:	370c      	adds	r7, #12
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c6:	4770      	bx	lr

0800c3c8 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800c3c8:	b480      	push	{r7}
 800c3ca:	b083      	sub	sp, #12
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800c3d0:	bf00      	nop
 800c3d2:	370c      	adds	r7, #12
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3da:	4770      	bx	lr

0800c3dc <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800c3dc:	b480      	push	{r7}
 800c3de:	b083      	sub	sp, #12
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800c3e4:	bf00      	nop
 800c3e6:	370c      	adds	r7, #12
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ee:	4770      	bx	lr

0800c3f0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b084      	sub	sp, #16
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c3fc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	2200      	movs	r2, #0
 800c402:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	2200      	movs	r2, #0
 800c40a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	2201      	movs	r2, #1
 800c412:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800c416:	68f8      	ldr	r0, [r7, #12]
 800c418:	f7ff ffd6 	bl	800c3c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c41c:	bf00      	nop
 800c41e:	3710      	adds	r7, #16
 800c420:	46bd      	mov	sp, r7
 800c422:	bd80      	pop	{r7, pc}

0800c424 <SPI_RxISR_8BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(SPI_HandleTypeDef *hspi)
{
 800c424:	b480      	push	{r7}
 800c426:	b083      	sub	sp, #12
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
  /* Receive data in 8 Bit mode */
  *((uint8_t *)hspi->pRxBuffPtr) = (*(__IO uint8_t *)&hspi->Instance->RXDR);
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c438:	7812      	ldrb	r2, [r2, #0]
 800c43a:	b2d2      	uxtb	r2, r2
 800c43c:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint8_t);
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c442:	1c5a      	adds	r2, r3, #1
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount--;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c44e:	b29b      	uxth	r3, r3
 800c450:	3b01      	subs	r3, #1
 800c452:	b29a      	uxth	r2, r3
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c460:	b29b      	uxth	r3, r3
 800c462:	2b00      	cmp	r3, #0
 800c464:	d107      	bne.n	800c476 <SPI_RxISR_8BIT+0x52>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	691a      	ldr	r2, [r3, #16]
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	f022 0201 	bic.w	r2, r2, #1
 800c474:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800c476:	bf00      	nop
 800c478:	370c      	adds	r7, #12
 800c47a:	46bd      	mov	sp, r7
 800c47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c480:	4770      	bx	lr

0800c482 <SPI_RxISR_16BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(SPI_HandleTypeDef *hspi)
{
 800c482:	b480      	push	{r7}
 800c484:	b085      	sub	sp, #20
 800c486:	af00      	add	r7, sp, #0
 800c488:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	3330      	adds	r3, #48	@ 0x30
 800c490:	60fb      	str	r3, [r7, #12]

  *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c496:	68fa      	ldr	r2, [r7, #12]
 800c498:	8812      	ldrh	r2, [r2, #0]
 800c49a:	b292      	uxth	r2, r2
 800c49c:	801a      	strh	r2, [r3, #0]
#else
  *((uint16_t *)hspi->pRxBuffPtr) = (*(__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c4a2:	1c9a      	adds	r2, r3, #2
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount--;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c4ae:	b29b      	uxth	r3, r3
 800c4b0:	3b01      	subs	r3, #1
 800c4b2:	b29a      	uxth	r2, r3
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c4c0:	b29b      	uxth	r3, r3
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d107      	bne.n	800c4d6 <SPI_RxISR_16BIT+0x54>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	691a      	ldr	r2, [r3, #16]
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	f022 0201 	bic.w	r2, r2, #1
 800c4d4:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800c4d6:	bf00      	nop
 800c4d8:	3714      	adds	r7, #20
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e0:	4770      	bx	lr

0800c4e2 <SPI_RxISR_32BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_32BIT(SPI_HandleTypeDef *hspi)
{
 800c4e2:	b480      	push	{r7}
 800c4e4:	b083      	sub	sp, #12
 800c4e6:	af00      	add	r7, sp, #0
 800c4e8:	6078      	str	r0, [r7, #4]
  /* Receive data in 32 Bit mode */
  *((uint32_t *)hspi->pRxBuffPtr) = (*(__IO uint32_t *)&hspi->Instance->RXDR);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681a      	ldr	r2, [r3, #0]
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c4f2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800c4f4:	601a      	str	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint32_t);
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c4fa:	1d1a      	adds	r2, r3, #4
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount--;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c506:	b29b      	uxth	r3, r3
 800c508:	3b01      	subs	r3, #1
 800c50a:	b29a      	uxth	r2, r3
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c518:	b29b      	uxth	r3, r3
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d107      	bne.n	800c52e <SPI_RxISR_32BIT+0x4c>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	691a      	ldr	r2, [r3, #16]
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	f022 0201 	bic.w	r2, r2, #1
 800c52c:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800c52e:	bf00      	nop
 800c530:	370c      	adds	r7, #12
 800c532:	46bd      	mov	sp, r7
 800c534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c538:	4770      	bx	lr
	...

0800c53c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800c53c:	b480      	push	{r7}
 800c53e:	b085      	sub	sp, #20
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	695b      	ldr	r3, [r3, #20]
 800c54a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	699a      	ldr	r2, [r3, #24]
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	f042 0208 	orr.w	r2, r2, #8
 800c55a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	699a      	ldr	r2, [r3, #24]
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	f042 0210 	orr.w	r2, r2, #16
 800c56a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	681a      	ldr	r2, [r3, #0]
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	f022 0201 	bic.w	r2, r2, #1
 800c57a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	6919      	ldr	r1, [r3, #16]
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681a      	ldr	r2, [r3, #0]
 800c586:	4b3c      	ldr	r3, [pc, #240]	@ (800c678 <SPI_CloseTransfer+0x13c>)
 800c588:	400b      	ands	r3, r1
 800c58a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	689a      	ldr	r2, [r3, #8]
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800c59a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c5a2:	b2db      	uxtb	r3, r3
 800c5a4:	2b04      	cmp	r3, #4
 800c5a6:	d014      	beq.n	800c5d2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	f003 0320 	and.w	r3, r3, #32
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d00f      	beq.n	800c5d2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c5b8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	699a      	ldr	r2, [r3, #24]
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	f042 0220 	orr.w	r2, r2, #32
 800c5d0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c5d8:	b2db      	uxtb	r3, r3
 800c5da:	2b03      	cmp	r3, #3
 800c5dc:	d014      	beq.n	800c608 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d00f      	beq.n	800c608 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c5ee:	f043 0204 	orr.w	r2, r3, #4
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	699a      	ldr	r2, [r3, #24]
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c606:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d00f      	beq.n	800c632 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c618:	f043 0201 	orr.w	r2, r3, #1
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	699a      	ldr	r2, [r3, #24]
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c630:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d00f      	beq.n	800c65c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c642:	f043 0208 	orr.w	r2, r3, #8
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	699a      	ldr	r2, [r3, #24]
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c65a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2200      	movs	r2, #0
 800c660:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	2200      	movs	r2, #0
 800c668:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800c66c:	bf00      	nop
 800c66e:	3714      	adds	r7, #20
 800c670:	46bd      	mov	sp, r7
 800c672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c676:	4770      	bx	lr
 800c678:	fffffc90 	.word	0xfffffc90

0800c67c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800c67c:	b480      	push	{r7}
 800c67e:	b085      	sub	sp, #20
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c688:	095b      	lsrs	r3, r3, #5
 800c68a:	3301      	adds	r3, #1
 800c68c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	68db      	ldr	r3, [r3, #12]
 800c692:	3301      	adds	r3, #1
 800c694:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c696:	68bb      	ldr	r3, [r7, #8]
 800c698:	3307      	adds	r3, #7
 800c69a:	08db      	lsrs	r3, r3, #3
 800c69c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c69e:	68bb      	ldr	r3, [r7, #8]
 800c6a0:	68fa      	ldr	r2, [r7, #12]
 800c6a2:	fb02 f303 	mul.w	r3, r2, r3
}
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	3714      	adds	r7, #20
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b0:	4770      	bx	lr

0800c6b2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c6b2:	b580      	push	{r7, lr}
 800c6b4:	b082      	sub	sp, #8
 800c6b6:	af00      	add	r7, sp, #0
 800c6b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d101      	bne.n	800c6c4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c6c0:	2301      	movs	r3, #1
 800c6c2:	e049      	b.n	800c758 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c6ca:	b2db      	uxtb	r3, r3
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d106      	bne.n	800c6de <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c6d8:	6878      	ldr	r0, [r7, #4]
 800c6da:	f7f5 f953 	bl	8001984 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	2202      	movs	r2, #2
 800c6e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681a      	ldr	r2, [r3, #0]
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	3304      	adds	r3, #4
 800c6ee:	4619      	mov	r1, r3
 800c6f0:	4610      	mov	r0, r2
 800c6f2:	f000 fad5 	bl	800cca0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	2201      	movs	r2, #1
 800c6fa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	2201      	movs	r2, #1
 800c702:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	2201      	movs	r2, #1
 800c70a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	2201      	movs	r2, #1
 800c712:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	2201      	movs	r2, #1
 800c71a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	2201      	movs	r2, #1
 800c722:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	2201      	movs	r2, #1
 800c72a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	2201      	movs	r2, #1
 800c732:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	2201      	movs	r2, #1
 800c73a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	2201      	movs	r2, #1
 800c742:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	2201      	movs	r2, #1
 800c74a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	2201      	movs	r2, #1
 800c752:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c756:	2300      	movs	r3, #0
}
 800c758:	4618      	mov	r0, r3
 800c75a:	3708      	adds	r7, #8
 800c75c:	46bd      	mov	sp, r7
 800c75e:	bd80      	pop	{r7, pc}

0800c760 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c760:	b480      	push	{r7}
 800c762:	b085      	sub	sp, #20
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c76e:	b2db      	uxtb	r3, r3
 800c770:	2b01      	cmp	r3, #1
 800c772:	d001      	beq.n	800c778 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c774:	2301      	movs	r3, #1
 800c776:	e054      	b.n	800c822 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2202      	movs	r2, #2
 800c77c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	68da      	ldr	r2, [r3, #12]
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	f042 0201 	orr.w	r2, r2, #1
 800c78e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	4a26      	ldr	r2, [pc, #152]	@ (800c830 <HAL_TIM_Base_Start_IT+0xd0>)
 800c796:	4293      	cmp	r3, r2
 800c798:	d022      	beq.n	800c7e0 <HAL_TIM_Base_Start_IT+0x80>
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c7a2:	d01d      	beq.n	800c7e0 <HAL_TIM_Base_Start_IT+0x80>
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	4a22      	ldr	r2, [pc, #136]	@ (800c834 <HAL_TIM_Base_Start_IT+0xd4>)
 800c7aa:	4293      	cmp	r3, r2
 800c7ac:	d018      	beq.n	800c7e0 <HAL_TIM_Base_Start_IT+0x80>
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	4a21      	ldr	r2, [pc, #132]	@ (800c838 <HAL_TIM_Base_Start_IT+0xd8>)
 800c7b4:	4293      	cmp	r3, r2
 800c7b6:	d013      	beq.n	800c7e0 <HAL_TIM_Base_Start_IT+0x80>
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	4a1f      	ldr	r2, [pc, #124]	@ (800c83c <HAL_TIM_Base_Start_IT+0xdc>)
 800c7be:	4293      	cmp	r3, r2
 800c7c0:	d00e      	beq.n	800c7e0 <HAL_TIM_Base_Start_IT+0x80>
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	4a1e      	ldr	r2, [pc, #120]	@ (800c840 <HAL_TIM_Base_Start_IT+0xe0>)
 800c7c8:	4293      	cmp	r3, r2
 800c7ca:	d009      	beq.n	800c7e0 <HAL_TIM_Base_Start_IT+0x80>
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	4a1c      	ldr	r2, [pc, #112]	@ (800c844 <HAL_TIM_Base_Start_IT+0xe4>)
 800c7d2:	4293      	cmp	r3, r2
 800c7d4:	d004      	beq.n	800c7e0 <HAL_TIM_Base_Start_IT+0x80>
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	4a1b      	ldr	r2, [pc, #108]	@ (800c848 <HAL_TIM_Base_Start_IT+0xe8>)
 800c7dc:	4293      	cmp	r3, r2
 800c7de:	d115      	bne.n	800c80c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	689a      	ldr	r2, [r3, #8]
 800c7e6:	4b19      	ldr	r3, [pc, #100]	@ (800c84c <HAL_TIM_Base_Start_IT+0xec>)
 800c7e8:	4013      	ands	r3, r2
 800c7ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	2b06      	cmp	r3, #6
 800c7f0:	d015      	beq.n	800c81e <HAL_TIM_Base_Start_IT+0xbe>
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c7f8:	d011      	beq.n	800c81e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	681a      	ldr	r2, [r3, #0]
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	f042 0201 	orr.w	r2, r2, #1
 800c808:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c80a:	e008      	b.n	800c81e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	681a      	ldr	r2, [r3, #0]
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	f042 0201 	orr.w	r2, r2, #1
 800c81a:	601a      	str	r2, [r3, #0]
 800c81c:	e000      	b.n	800c820 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c81e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c820:	2300      	movs	r3, #0
}
 800c822:	4618      	mov	r0, r3
 800c824:	3714      	adds	r7, #20
 800c826:	46bd      	mov	sp, r7
 800c828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82c:	4770      	bx	lr
 800c82e:	bf00      	nop
 800c830:	40010000 	.word	0x40010000
 800c834:	40000400 	.word	0x40000400
 800c838:	40000800 	.word	0x40000800
 800c83c:	40000c00 	.word	0x40000c00
 800c840:	40010400 	.word	0x40010400
 800c844:	40001800 	.word	0x40001800
 800c848:	40014000 	.word	0x40014000
 800c84c:	00010007 	.word	0x00010007

0800c850 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c850:	b580      	push	{r7, lr}
 800c852:	b084      	sub	sp, #16
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	68db      	ldr	r3, [r3, #12]
 800c85e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	691b      	ldr	r3, [r3, #16]
 800c866:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c868:	68bb      	ldr	r3, [r7, #8]
 800c86a:	f003 0302 	and.w	r3, r3, #2
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d020      	beq.n	800c8b4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	f003 0302 	and.w	r3, r3, #2
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d01b      	beq.n	800c8b4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	f06f 0202 	mvn.w	r2, #2
 800c884:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	2201      	movs	r2, #1
 800c88a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	699b      	ldr	r3, [r3, #24]
 800c892:	f003 0303 	and.w	r3, r3, #3
 800c896:	2b00      	cmp	r3, #0
 800c898:	d003      	beq.n	800c8a2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c89a:	6878      	ldr	r0, [r7, #4]
 800c89c:	f000 f9e2 	bl	800cc64 <HAL_TIM_IC_CaptureCallback>
 800c8a0:	e005      	b.n	800c8ae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c8a2:	6878      	ldr	r0, [r7, #4]
 800c8a4:	f000 f9d4 	bl	800cc50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c8a8:	6878      	ldr	r0, [r7, #4]
 800c8aa:	f000 f9e5 	bl	800cc78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	2200      	movs	r2, #0
 800c8b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c8b4:	68bb      	ldr	r3, [r7, #8]
 800c8b6:	f003 0304 	and.w	r3, r3, #4
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d020      	beq.n	800c900 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	f003 0304 	and.w	r3, r3, #4
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d01b      	beq.n	800c900 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	f06f 0204 	mvn.w	r2, #4
 800c8d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	2202      	movs	r2, #2
 800c8d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	699b      	ldr	r3, [r3, #24]
 800c8de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d003      	beq.n	800c8ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c8e6:	6878      	ldr	r0, [r7, #4]
 800c8e8:	f000 f9bc 	bl	800cc64 <HAL_TIM_IC_CaptureCallback>
 800c8ec:	e005      	b.n	800c8fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c8ee:	6878      	ldr	r0, [r7, #4]
 800c8f0:	f000 f9ae 	bl	800cc50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c8f4:	6878      	ldr	r0, [r7, #4]
 800c8f6:	f000 f9bf 	bl	800cc78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c900:	68bb      	ldr	r3, [r7, #8]
 800c902:	f003 0308 	and.w	r3, r3, #8
 800c906:	2b00      	cmp	r3, #0
 800c908:	d020      	beq.n	800c94c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	f003 0308 	and.w	r3, r3, #8
 800c910:	2b00      	cmp	r3, #0
 800c912:	d01b      	beq.n	800c94c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	f06f 0208 	mvn.w	r2, #8
 800c91c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	2204      	movs	r2, #4
 800c922:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	69db      	ldr	r3, [r3, #28]
 800c92a:	f003 0303 	and.w	r3, r3, #3
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d003      	beq.n	800c93a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c932:	6878      	ldr	r0, [r7, #4]
 800c934:	f000 f996 	bl	800cc64 <HAL_TIM_IC_CaptureCallback>
 800c938:	e005      	b.n	800c946 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c93a:	6878      	ldr	r0, [r7, #4]
 800c93c:	f000 f988 	bl	800cc50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c940:	6878      	ldr	r0, [r7, #4]
 800c942:	f000 f999 	bl	800cc78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	2200      	movs	r2, #0
 800c94a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c94c:	68bb      	ldr	r3, [r7, #8]
 800c94e:	f003 0310 	and.w	r3, r3, #16
 800c952:	2b00      	cmp	r3, #0
 800c954:	d020      	beq.n	800c998 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	f003 0310 	and.w	r3, r3, #16
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d01b      	beq.n	800c998 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	f06f 0210 	mvn.w	r2, #16
 800c968:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	2208      	movs	r2, #8
 800c96e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	69db      	ldr	r3, [r3, #28]
 800c976:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d003      	beq.n	800c986 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c97e:	6878      	ldr	r0, [r7, #4]
 800c980:	f000 f970 	bl	800cc64 <HAL_TIM_IC_CaptureCallback>
 800c984:	e005      	b.n	800c992 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c986:	6878      	ldr	r0, [r7, #4]
 800c988:	f000 f962 	bl	800cc50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c98c:	6878      	ldr	r0, [r7, #4]
 800c98e:	f000 f973 	bl	800cc78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	2200      	movs	r2, #0
 800c996:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c998:	68bb      	ldr	r3, [r7, #8]
 800c99a:	f003 0301 	and.w	r3, r3, #1
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d00c      	beq.n	800c9bc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	f003 0301 	and.w	r3, r3, #1
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d007      	beq.n	800c9bc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	f06f 0201 	mvn.w	r2, #1
 800c9b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c9b6:	6878      	ldr	r0, [r7, #4]
 800c9b8:	f7f3 ff56 	bl	8000868 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c9bc:	68bb      	ldr	r3, [r7, #8]
 800c9be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d104      	bne.n	800c9d0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800c9c6:	68bb      	ldr	r3, [r7, #8]
 800c9c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d00c      	beq.n	800c9ea <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d007      	beq.n	800c9ea <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800c9e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c9e4:	6878      	ldr	r0, [r7, #4]
 800c9e6:	f000 fb31 	bl	800d04c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c9ea:	68bb      	ldr	r3, [r7, #8]
 800c9ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d00c      	beq.n	800ca0e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d007      	beq.n	800ca0e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800ca06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ca08:	6878      	ldr	r0, [r7, #4]
 800ca0a:	f000 fb29 	bl	800d060 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ca0e:	68bb      	ldr	r3, [r7, #8]
 800ca10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d00c      	beq.n	800ca32 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d007      	beq.n	800ca32 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800ca2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ca2c:	6878      	ldr	r0, [r7, #4]
 800ca2e:	f000 f92d 	bl	800cc8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ca32:	68bb      	ldr	r3, [r7, #8]
 800ca34:	f003 0320 	and.w	r3, r3, #32
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d00c      	beq.n	800ca56 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	f003 0320 	and.w	r3, r3, #32
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d007      	beq.n	800ca56 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	f06f 0220 	mvn.w	r2, #32
 800ca4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ca50:	6878      	ldr	r0, [r7, #4]
 800ca52:	f000 faf1 	bl	800d038 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ca56:	bf00      	nop
 800ca58:	3710      	adds	r7, #16
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	bd80      	pop	{r7, pc}
	...

0800ca60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ca60:	b580      	push	{r7, lr}
 800ca62:	b084      	sub	sp, #16
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	6078      	str	r0, [r7, #4]
 800ca68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ca74:	2b01      	cmp	r3, #1
 800ca76:	d101      	bne.n	800ca7c <HAL_TIM_ConfigClockSource+0x1c>
 800ca78:	2302      	movs	r3, #2
 800ca7a:	e0dc      	b.n	800cc36 <HAL_TIM_ConfigClockSource+0x1d6>
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	2201      	movs	r2, #1
 800ca80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	2202      	movs	r2, #2
 800ca88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	689b      	ldr	r3, [r3, #8]
 800ca92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ca94:	68ba      	ldr	r2, [r7, #8]
 800ca96:	4b6a      	ldr	r3, [pc, #424]	@ (800cc40 <HAL_TIM_ConfigClockSource+0x1e0>)
 800ca98:	4013      	ands	r3, r2
 800ca9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ca9c:	68bb      	ldr	r3, [r7, #8]
 800ca9e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800caa2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	68ba      	ldr	r2, [r7, #8]
 800caaa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800caac:	683b      	ldr	r3, [r7, #0]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	4a64      	ldr	r2, [pc, #400]	@ (800cc44 <HAL_TIM_ConfigClockSource+0x1e4>)
 800cab2:	4293      	cmp	r3, r2
 800cab4:	f000 80a9 	beq.w	800cc0a <HAL_TIM_ConfigClockSource+0x1aa>
 800cab8:	4a62      	ldr	r2, [pc, #392]	@ (800cc44 <HAL_TIM_ConfigClockSource+0x1e4>)
 800caba:	4293      	cmp	r3, r2
 800cabc:	f200 80ae 	bhi.w	800cc1c <HAL_TIM_ConfigClockSource+0x1bc>
 800cac0:	4a61      	ldr	r2, [pc, #388]	@ (800cc48 <HAL_TIM_ConfigClockSource+0x1e8>)
 800cac2:	4293      	cmp	r3, r2
 800cac4:	f000 80a1 	beq.w	800cc0a <HAL_TIM_ConfigClockSource+0x1aa>
 800cac8:	4a5f      	ldr	r2, [pc, #380]	@ (800cc48 <HAL_TIM_ConfigClockSource+0x1e8>)
 800caca:	4293      	cmp	r3, r2
 800cacc:	f200 80a6 	bhi.w	800cc1c <HAL_TIM_ConfigClockSource+0x1bc>
 800cad0:	4a5e      	ldr	r2, [pc, #376]	@ (800cc4c <HAL_TIM_ConfigClockSource+0x1ec>)
 800cad2:	4293      	cmp	r3, r2
 800cad4:	f000 8099 	beq.w	800cc0a <HAL_TIM_ConfigClockSource+0x1aa>
 800cad8:	4a5c      	ldr	r2, [pc, #368]	@ (800cc4c <HAL_TIM_ConfigClockSource+0x1ec>)
 800cada:	4293      	cmp	r3, r2
 800cadc:	f200 809e 	bhi.w	800cc1c <HAL_TIM_ConfigClockSource+0x1bc>
 800cae0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800cae4:	f000 8091 	beq.w	800cc0a <HAL_TIM_ConfigClockSource+0x1aa>
 800cae8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800caec:	f200 8096 	bhi.w	800cc1c <HAL_TIM_ConfigClockSource+0x1bc>
 800caf0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800caf4:	f000 8089 	beq.w	800cc0a <HAL_TIM_ConfigClockSource+0x1aa>
 800caf8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cafc:	f200 808e 	bhi.w	800cc1c <HAL_TIM_ConfigClockSource+0x1bc>
 800cb00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cb04:	d03e      	beq.n	800cb84 <HAL_TIM_ConfigClockSource+0x124>
 800cb06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cb0a:	f200 8087 	bhi.w	800cc1c <HAL_TIM_ConfigClockSource+0x1bc>
 800cb0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cb12:	f000 8086 	beq.w	800cc22 <HAL_TIM_ConfigClockSource+0x1c2>
 800cb16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cb1a:	d87f      	bhi.n	800cc1c <HAL_TIM_ConfigClockSource+0x1bc>
 800cb1c:	2b70      	cmp	r3, #112	@ 0x70
 800cb1e:	d01a      	beq.n	800cb56 <HAL_TIM_ConfigClockSource+0xf6>
 800cb20:	2b70      	cmp	r3, #112	@ 0x70
 800cb22:	d87b      	bhi.n	800cc1c <HAL_TIM_ConfigClockSource+0x1bc>
 800cb24:	2b60      	cmp	r3, #96	@ 0x60
 800cb26:	d050      	beq.n	800cbca <HAL_TIM_ConfigClockSource+0x16a>
 800cb28:	2b60      	cmp	r3, #96	@ 0x60
 800cb2a:	d877      	bhi.n	800cc1c <HAL_TIM_ConfigClockSource+0x1bc>
 800cb2c:	2b50      	cmp	r3, #80	@ 0x50
 800cb2e:	d03c      	beq.n	800cbaa <HAL_TIM_ConfigClockSource+0x14a>
 800cb30:	2b50      	cmp	r3, #80	@ 0x50
 800cb32:	d873      	bhi.n	800cc1c <HAL_TIM_ConfigClockSource+0x1bc>
 800cb34:	2b40      	cmp	r3, #64	@ 0x40
 800cb36:	d058      	beq.n	800cbea <HAL_TIM_ConfigClockSource+0x18a>
 800cb38:	2b40      	cmp	r3, #64	@ 0x40
 800cb3a:	d86f      	bhi.n	800cc1c <HAL_TIM_ConfigClockSource+0x1bc>
 800cb3c:	2b30      	cmp	r3, #48	@ 0x30
 800cb3e:	d064      	beq.n	800cc0a <HAL_TIM_ConfigClockSource+0x1aa>
 800cb40:	2b30      	cmp	r3, #48	@ 0x30
 800cb42:	d86b      	bhi.n	800cc1c <HAL_TIM_ConfigClockSource+0x1bc>
 800cb44:	2b20      	cmp	r3, #32
 800cb46:	d060      	beq.n	800cc0a <HAL_TIM_ConfigClockSource+0x1aa>
 800cb48:	2b20      	cmp	r3, #32
 800cb4a:	d867      	bhi.n	800cc1c <HAL_TIM_ConfigClockSource+0x1bc>
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d05c      	beq.n	800cc0a <HAL_TIM_ConfigClockSource+0x1aa>
 800cb50:	2b10      	cmp	r3, #16
 800cb52:	d05a      	beq.n	800cc0a <HAL_TIM_ConfigClockSource+0x1aa>
 800cb54:	e062      	b.n	800cc1c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cb5e:	683b      	ldr	r3, [r7, #0]
 800cb60:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800cb66:	f000 f9b9 	bl	800cedc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	689b      	ldr	r3, [r3, #8]
 800cb70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cb72:	68bb      	ldr	r3, [r7, #8]
 800cb74:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800cb78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	68ba      	ldr	r2, [r7, #8]
 800cb80:	609a      	str	r2, [r3, #8]
      break;
 800cb82:	e04f      	b.n	800cc24 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cb8c:	683b      	ldr	r3, [r7, #0]
 800cb8e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cb90:	683b      	ldr	r3, [r7, #0]
 800cb92:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800cb94:	f000 f9a2 	bl	800cedc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	689a      	ldr	r2, [r3, #8]
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800cba6:	609a      	str	r2, [r3, #8]
      break;
 800cba8:	e03c      	b.n	800cc24 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cbae:	683b      	ldr	r3, [r7, #0]
 800cbb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cbb2:	683b      	ldr	r3, [r7, #0]
 800cbb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cbb6:	461a      	mov	r2, r3
 800cbb8:	f000 f912 	bl	800cde0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	2150      	movs	r1, #80	@ 0x50
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	f000 f96c 	bl	800cea0 <TIM_ITRx_SetConfig>
      break;
 800cbc8:	e02c      	b.n	800cc24 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cbce:	683b      	ldr	r3, [r7, #0]
 800cbd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cbd2:	683b      	ldr	r3, [r7, #0]
 800cbd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800cbd6:	461a      	mov	r2, r3
 800cbd8:	f000 f931 	bl	800ce3e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	2160      	movs	r1, #96	@ 0x60
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	f000 f95c 	bl	800cea0 <TIM_ITRx_SetConfig>
      break;
 800cbe8:	e01c      	b.n	800cc24 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cbee:	683b      	ldr	r3, [r7, #0]
 800cbf0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cbf6:	461a      	mov	r2, r3
 800cbf8:	f000 f8f2 	bl	800cde0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	2140      	movs	r1, #64	@ 0x40
 800cc02:	4618      	mov	r0, r3
 800cc04:	f000 f94c 	bl	800cea0 <TIM_ITRx_SetConfig>
      break;
 800cc08:	e00c      	b.n	800cc24 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	681a      	ldr	r2, [r3, #0]
 800cc0e:	683b      	ldr	r3, [r7, #0]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	4619      	mov	r1, r3
 800cc14:	4610      	mov	r0, r2
 800cc16:	f000 f943 	bl	800cea0 <TIM_ITRx_SetConfig>
      break;
 800cc1a:	e003      	b.n	800cc24 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800cc1c:	2301      	movs	r3, #1
 800cc1e:	73fb      	strb	r3, [r7, #15]
      break;
 800cc20:	e000      	b.n	800cc24 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800cc22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	2201      	movs	r2, #1
 800cc28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	2200      	movs	r2, #0
 800cc30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800cc34:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc36:	4618      	mov	r0, r3
 800cc38:	3710      	adds	r7, #16
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	bd80      	pop	{r7, pc}
 800cc3e:	bf00      	nop
 800cc40:	ffceff88 	.word	0xffceff88
 800cc44:	00100040 	.word	0x00100040
 800cc48:	00100030 	.word	0x00100030
 800cc4c:	00100020 	.word	0x00100020

0800cc50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cc50:	b480      	push	{r7}
 800cc52:	b083      	sub	sp, #12
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cc58:	bf00      	nop
 800cc5a:	370c      	adds	r7, #12
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc62:	4770      	bx	lr

0800cc64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cc64:	b480      	push	{r7}
 800cc66:	b083      	sub	sp, #12
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cc6c:	bf00      	nop
 800cc6e:	370c      	adds	r7, #12
 800cc70:	46bd      	mov	sp, r7
 800cc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc76:	4770      	bx	lr

0800cc78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cc78:	b480      	push	{r7}
 800cc7a:	b083      	sub	sp, #12
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cc80:	bf00      	nop
 800cc82:	370c      	adds	r7, #12
 800cc84:	46bd      	mov	sp, r7
 800cc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8a:	4770      	bx	lr

0800cc8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cc8c:	b480      	push	{r7}
 800cc8e:	b083      	sub	sp, #12
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cc94:	bf00      	nop
 800cc96:	370c      	adds	r7, #12
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9e:	4770      	bx	lr

0800cca0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800cca0:	b480      	push	{r7}
 800cca2:	b085      	sub	sp, #20
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]
 800cca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	4a43      	ldr	r2, [pc, #268]	@ (800cdc0 <TIM_Base_SetConfig+0x120>)
 800ccb4:	4293      	cmp	r3, r2
 800ccb6:	d013      	beq.n	800cce0 <TIM_Base_SetConfig+0x40>
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ccbe:	d00f      	beq.n	800cce0 <TIM_Base_SetConfig+0x40>
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	4a40      	ldr	r2, [pc, #256]	@ (800cdc4 <TIM_Base_SetConfig+0x124>)
 800ccc4:	4293      	cmp	r3, r2
 800ccc6:	d00b      	beq.n	800cce0 <TIM_Base_SetConfig+0x40>
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	4a3f      	ldr	r2, [pc, #252]	@ (800cdc8 <TIM_Base_SetConfig+0x128>)
 800cccc:	4293      	cmp	r3, r2
 800ccce:	d007      	beq.n	800cce0 <TIM_Base_SetConfig+0x40>
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	4a3e      	ldr	r2, [pc, #248]	@ (800cdcc <TIM_Base_SetConfig+0x12c>)
 800ccd4:	4293      	cmp	r3, r2
 800ccd6:	d003      	beq.n	800cce0 <TIM_Base_SetConfig+0x40>
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	4a3d      	ldr	r2, [pc, #244]	@ (800cdd0 <TIM_Base_SetConfig+0x130>)
 800ccdc:	4293      	cmp	r3, r2
 800ccde:	d108      	bne.n	800ccf2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cce6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cce8:	683b      	ldr	r3, [r7, #0]
 800ccea:	685b      	ldr	r3, [r3, #4]
 800ccec:	68fa      	ldr	r2, [r7, #12]
 800ccee:	4313      	orrs	r3, r2
 800ccf0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	4a32      	ldr	r2, [pc, #200]	@ (800cdc0 <TIM_Base_SetConfig+0x120>)
 800ccf6:	4293      	cmp	r3, r2
 800ccf8:	d01f      	beq.n	800cd3a <TIM_Base_SetConfig+0x9a>
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cd00:	d01b      	beq.n	800cd3a <TIM_Base_SetConfig+0x9a>
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	4a2f      	ldr	r2, [pc, #188]	@ (800cdc4 <TIM_Base_SetConfig+0x124>)
 800cd06:	4293      	cmp	r3, r2
 800cd08:	d017      	beq.n	800cd3a <TIM_Base_SetConfig+0x9a>
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	4a2e      	ldr	r2, [pc, #184]	@ (800cdc8 <TIM_Base_SetConfig+0x128>)
 800cd0e:	4293      	cmp	r3, r2
 800cd10:	d013      	beq.n	800cd3a <TIM_Base_SetConfig+0x9a>
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	4a2d      	ldr	r2, [pc, #180]	@ (800cdcc <TIM_Base_SetConfig+0x12c>)
 800cd16:	4293      	cmp	r3, r2
 800cd18:	d00f      	beq.n	800cd3a <TIM_Base_SetConfig+0x9a>
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	4a2c      	ldr	r2, [pc, #176]	@ (800cdd0 <TIM_Base_SetConfig+0x130>)
 800cd1e:	4293      	cmp	r3, r2
 800cd20:	d00b      	beq.n	800cd3a <TIM_Base_SetConfig+0x9a>
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	4a2b      	ldr	r2, [pc, #172]	@ (800cdd4 <TIM_Base_SetConfig+0x134>)
 800cd26:	4293      	cmp	r3, r2
 800cd28:	d007      	beq.n	800cd3a <TIM_Base_SetConfig+0x9a>
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	4a2a      	ldr	r2, [pc, #168]	@ (800cdd8 <TIM_Base_SetConfig+0x138>)
 800cd2e:	4293      	cmp	r3, r2
 800cd30:	d003      	beq.n	800cd3a <TIM_Base_SetConfig+0x9a>
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	4a29      	ldr	r2, [pc, #164]	@ (800cddc <TIM_Base_SetConfig+0x13c>)
 800cd36:	4293      	cmp	r3, r2
 800cd38:	d108      	bne.n	800cd4c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cd40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cd42:	683b      	ldr	r3, [r7, #0]
 800cd44:	68db      	ldr	r3, [r3, #12]
 800cd46:	68fa      	ldr	r2, [r7, #12]
 800cd48:	4313      	orrs	r3, r2
 800cd4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800cd52:	683b      	ldr	r3, [r7, #0]
 800cd54:	695b      	ldr	r3, [r3, #20]
 800cd56:	4313      	orrs	r3, r2
 800cd58:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cd5a:	683b      	ldr	r3, [r7, #0]
 800cd5c:	689a      	ldr	r2, [r3, #8]
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cd62:	683b      	ldr	r3, [r7, #0]
 800cd64:	681a      	ldr	r2, [r3, #0]
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	4a14      	ldr	r2, [pc, #80]	@ (800cdc0 <TIM_Base_SetConfig+0x120>)
 800cd6e:	4293      	cmp	r3, r2
 800cd70:	d00f      	beq.n	800cd92 <TIM_Base_SetConfig+0xf2>
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	4a16      	ldr	r2, [pc, #88]	@ (800cdd0 <TIM_Base_SetConfig+0x130>)
 800cd76:	4293      	cmp	r3, r2
 800cd78:	d00b      	beq.n	800cd92 <TIM_Base_SetConfig+0xf2>
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	4a15      	ldr	r2, [pc, #84]	@ (800cdd4 <TIM_Base_SetConfig+0x134>)
 800cd7e:	4293      	cmp	r3, r2
 800cd80:	d007      	beq.n	800cd92 <TIM_Base_SetConfig+0xf2>
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	4a14      	ldr	r2, [pc, #80]	@ (800cdd8 <TIM_Base_SetConfig+0x138>)
 800cd86:	4293      	cmp	r3, r2
 800cd88:	d003      	beq.n	800cd92 <TIM_Base_SetConfig+0xf2>
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	4a13      	ldr	r2, [pc, #76]	@ (800cddc <TIM_Base_SetConfig+0x13c>)
 800cd8e:	4293      	cmp	r3, r2
 800cd90:	d103      	bne.n	800cd9a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cd92:	683b      	ldr	r3, [r7, #0]
 800cd94:	691a      	ldr	r2, [r3, #16]
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	f043 0204 	orr.w	r2, r3, #4
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	2201      	movs	r2, #1
 800cdaa:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	68fa      	ldr	r2, [r7, #12]
 800cdb0:	601a      	str	r2, [r3, #0]
}
 800cdb2:	bf00      	nop
 800cdb4:	3714      	adds	r7, #20
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdbc:	4770      	bx	lr
 800cdbe:	bf00      	nop
 800cdc0:	40010000 	.word	0x40010000
 800cdc4:	40000400 	.word	0x40000400
 800cdc8:	40000800 	.word	0x40000800
 800cdcc:	40000c00 	.word	0x40000c00
 800cdd0:	40010400 	.word	0x40010400
 800cdd4:	40014000 	.word	0x40014000
 800cdd8:	40014400 	.word	0x40014400
 800cddc:	40014800 	.word	0x40014800

0800cde0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cde0:	b480      	push	{r7}
 800cde2:	b087      	sub	sp, #28
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	60f8      	str	r0, [r7, #12]
 800cde8:	60b9      	str	r1, [r7, #8]
 800cdea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	6a1b      	ldr	r3, [r3, #32]
 800cdf0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	6a1b      	ldr	r3, [r3, #32]
 800cdf6:	f023 0201 	bic.w	r2, r3, #1
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	699b      	ldr	r3, [r3, #24]
 800ce02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ce04:	693b      	ldr	r3, [r7, #16]
 800ce06:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ce0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	011b      	lsls	r3, r3, #4
 800ce10:	693a      	ldr	r2, [r7, #16]
 800ce12:	4313      	orrs	r3, r2
 800ce14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ce16:	697b      	ldr	r3, [r7, #20]
 800ce18:	f023 030a 	bic.w	r3, r3, #10
 800ce1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ce1e:	697a      	ldr	r2, [r7, #20]
 800ce20:	68bb      	ldr	r3, [r7, #8]
 800ce22:	4313      	orrs	r3, r2
 800ce24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	693a      	ldr	r2, [r7, #16]
 800ce2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	697a      	ldr	r2, [r7, #20]
 800ce30:	621a      	str	r2, [r3, #32]
}
 800ce32:	bf00      	nop
 800ce34:	371c      	adds	r7, #28
 800ce36:	46bd      	mov	sp, r7
 800ce38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce3c:	4770      	bx	lr

0800ce3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ce3e:	b480      	push	{r7}
 800ce40:	b087      	sub	sp, #28
 800ce42:	af00      	add	r7, sp, #0
 800ce44:	60f8      	str	r0, [r7, #12]
 800ce46:	60b9      	str	r1, [r7, #8]
 800ce48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	6a1b      	ldr	r3, [r3, #32]
 800ce4e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	6a1b      	ldr	r3, [r3, #32]
 800ce54:	f023 0210 	bic.w	r2, r3, #16
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	699b      	ldr	r3, [r3, #24]
 800ce60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ce62:	693b      	ldr	r3, [r7, #16]
 800ce64:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ce68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	031b      	lsls	r3, r3, #12
 800ce6e:	693a      	ldr	r2, [r7, #16]
 800ce70:	4313      	orrs	r3, r2
 800ce72:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ce74:	697b      	ldr	r3, [r7, #20]
 800ce76:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ce7a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ce7c:	68bb      	ldr	r3, [r7, #8]
 800ce7e:	011b      	lsls	r3, r3, #4
 800ce80:	697a      	ldr	r2, [r7, #20]
 800ce82:	4313      	orrs	r3, r2
 800ce84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	693a      	ldr	r2, [r7, #16]
 800ce8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	697a      	ldr	r2, [r7, #20]
 800ce90:	621a      	str	r2, [r3, #32]
}
 800ce92:	bf00      	nop
 800ce94:	371c      	adds	r7, #28
 800ce96:	46bd      	mov	sp, r7
 800ce98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9c:	4770      	bx	lr
	...

0800cea0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cea0:	b480      	push	{r7}
 800cea2:	b085      	sub	sp, #20
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	6078      	str	r0, [r7, #4]
 800cea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	689b      	ldr	r3, [r3, #8]
 800ceae:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ceb0:	68fa      	ldr	r2, [r7, #12]
 800ceb2:	4b09      	ldr	r3, [pc, #36]	@ (800ced8 <TIM_ITRx_SetConfig+0x38>)
 800ceb4:	4013      	ands	r3, r2
 800ceb6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ceb8:	683a      	ldr	r2, [r7, #0]
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	4313      	orrs	r3, r2
 800cebe:	f043 0307 	orr.w	r3, r3, #7
 800cec2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	68fa      	ldr	r2, [r7, #12]
 800cec8:	609a      	str	r2, [r3, #8]
}
 800ceca:	bf00      	nop
 800cecc:	3714      	adds	r7, #20
 800cece:	46bd      	mov	sp, r7
 800ced0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced4:	4770      	bx	lr
 800ced6:	bf00      	nop
 800ced8:	ffcfff8f 	.word	0xffcfff8f

0800cedc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cedc:	b480      	push	{r7}
 800cede:	b087      	sub	sp, #28
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	60f8      	str	r0, [r7, #12]
 800cee4:	60b9      	str	r1, [r7, #8]
 800cee6:	607a      	str	r2, [r7, #4]
 800cee8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	689b      	ldr	r3, [r3, #8]
 800ceee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cef0:	697b      	ldr	r3, [r7, #20]
 800cef2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800cef6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cef8:	683b      	ldr	r3, [r7, #0]
 800cefa:	021a      	lsls	r2, r3, #8
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	431a      	orrs	r2, r3
 800cf00:	68bb      	ldr	r3, [r7, #8]
 800cf02:	4313      	orrs	r3, r2
 800cf04:	697a      	ldr	r2, [r7, #20]
 800cf06:	4313      	orrs	r3, r2
 800cf08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	697a      	ldr	r2, [r7, #20]
 800cf0e:	609a      	str	r2, [r3, #8]
}
 800cf10:	bf00      	nop
 800cf12:	371c      	adds	r7, #28
 800cf14:	46bd      	mov	sp, r7
 800cf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1a:	4770      	bx	lr

0800cf1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cf1c:	b480      	push	{r7}
 800cf1e:	b085      	sub	sp, #20
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
 800cf24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cf2c:	2b01      	cmp	r3, #1
 800cf2e:	d101      	bne.n	800cf34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cf30:	2302      	movs	r3, #2
 800cf32:	e06d      	b.n	800d010 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	2201      	movs	r2, #1
 800cf38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	2202      	movs	r2, #2
 800cf40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	685b      	ldr	r3, [r3, #4]
 800cf4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	689b      	ldr	r3, [r3, #8]
 800cf52:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	4a30      	ldr	r2, [pc, #192]	@ (800d01c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cf5a:	4293      	cmp	r3, r2
 800cf5c:	d004      	beq.n	800cf68 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	4a2f      	ldr	r2, [pc, #188]	@ (800d020 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cf64:	4293      	cmp	r3, r2
 800cf66:	d108      	bne.n	800cf7a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800cf6e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cf70:	683b      	ldr	r3, [r7, #0]
 800cf72:	685b      	ldr	r3, [r3, #4]
 800cf74:	68fa      	ldr	r2, [r7, #12]
 800cf76:	4313      	orrs	r3, r2
 800cf78:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cf80:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cf82:	683b      	ldr	r3, [r7, #0]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	68fa      	ldr	r2, [r7, #12]
 800cf88:	4313      	orrs	r3, r2
 800cf8a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	68fa      	ldr	r2, [r7, #12]
 800cf92:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	4a20      	ldr	r2, [pc, #128]	@ (800d01c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cf9a:	4293      	cmp	r3, r2
 800cf9c:	d022      	beq.n	800cfe4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cfa6:	d01d      	beq.n	800cfe4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	4a1d      	ldr	r2, [pc, #116]	@ (800d024 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800cfae:	4293      	cmp	r3, r2
 800cfb0:	d018      	beq.n	800cfe4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	4a1c      	ldr	r2, [pc, #112]	@ (800d028 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800cfb8:	4293      	cmp	r3, r2
 800cfba:	d013      	beq.n	800cfe4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	4a1a      	ldr	r2, [pc, #104]	@ (800d02c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800cfc2:	4293      	cmp	r3, r2
 800cfc4:	d00e      	beq.n	800cfe4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	4a15      	ldr	r2, [pc, #84]	@ (800d020 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cfcc:	4293      	cmp	r3, r2
 800cfce:	d009      	beq.n	800cfe4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	4a16      	ldr	r2, [pc, #88]	@ (800d030 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cfd6:	4293      	cmp	r3, r2
 800cfd8:	d004      	beq.n	800cfe4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	4a15      	ldr	r2, [pc, #84]	@ (800d034 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cfe0:	4293      	cmp	r3, r2
 800cfe2:	d10c      	bne.n	800cffe <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cfe4:	68bb      	ldr	r3, [r7, #8]
 800cfe6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cfea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cfec:	683b      	ldr	r3, [r7, #0]
 800cfee:	689b      	ldr	r3, [r3, #8]
 800cff0:	68ba      	ldr	r2, [r7, #8]
 800cff2:	4313      	orrs	r3, r2
 800cff4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	68ba      	ldr	r2, [r7, #8]
 800cffc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	2201      	movs	r2, #1
 800d002:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	2200      	movs	r2, #0
 800d00a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d00e:	2300      	movs	r3, #0
}
 800d010:	4618      	mov	r0, r3
 800d012:	3714      	adds	r7, #20
 800d014:	46bd      	mov	sp, r7
 800d016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01a:	4770      	bx	lr
 800d01c:	40010000 	.word	0x40010000
 800d020:	40010400 	.word	0x40010400
 800d024:	40000400 	.word	0x40000400
 800d028:	40000800 	.word	0x40000800
 800d02c:	40000c00 	.word	0x40000c00
 800d030:	40001800 	.word	0x40001800
 800d034:	40014000 	.word	0x40014000

0800d038 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d038:	b480      	push	{r7}
 800d03a:	b083      	sub	sp, #12
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d040:	bf00      	nop
 800d042:	370c      	adds	r7, #12
 800d044:	46bd      	mov	sp, r7
 800d046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04a:	4770      	bx	lr

0800d04c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d04c:	b480      	push	{r7}
 800d04e:	b083      	sub	sp, #12
 800d050:	af00      	add	r7, sp, #0
 800d052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d054:	bf00      	nop
 800d056:	370c      	adds	r7, #12
 800d058:	46bd      	mov	sp, r7
 800d05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05e:	4770      	bx	lr

0800d060 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d060:	b480      	push	{r7}
 800d062:	b083      	sub	sp, #12
 800d064:	af00      	add	r7, sp, #0
 800d066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d068:	bf00      	nop
 800d06a:	370c      	adds	r7, #12
 800d06c:	46bd      	mov	sp, r7
 800d06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d072:	4770      	bx	lr

0800d074 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d074:	b580      	push	{r7, lr}
 800d076:	b082      	sub	sp, #8
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d101      	bne.n	800d086 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d082:	2301      	movs	r3, #1
 800d084:	e042      	b.n	800d10c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d106      	bne.n	800d09e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	2200      	movs	r2, #0
 800d094:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d098:	6878      	ldr	r0, [r7, #4]
 800d09a:	f7f4 fc99 	bl	80019d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	2224      	movs	r2, #36	@ 0x24
 800d0a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	681a      	ldr	r2, [r3, #0]
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	f022 0201 	bic.w	r2, r2, #1
 800d0b4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d002      	beq.n	800d0c4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800d0be:	6878      	ldr	r0, [r7, #4]
 800d0c0:	f001 fa60 	bl	800e584 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d0c4:	6878      	ldr	r0, [r7, #4]
 800d0c6:	f000 fcf5 	bl	800dab4 <UART_SetConfig>
 800d0ca:	4603      	mov	r3, r0
 800d0cc:	2b01      	cmp	r3, #1
 800d0ce:	d101      	bne.n	800d0d4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800d0d0:	2301      	movs	r3, #1
 800d0d2:	e01b      	b.n	800d10c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	685a      	ldr	r2, [r3, #4]
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d0e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	689a      	ldr	r2, [r3, #8]
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d0f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	681a      	ldr	r2, [r3, #0]
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	f042 0201 	orr.w	r2, r2, #1
 800d102:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d104:	6878      	ldr	r0, [r7, #4]
 800d106:	f001 fadf 	bl	800e6c8 <UART_CheckIdleState>
 800d10a:	4603      	mov	r3, r0
}
 800d10c:	4618      	mov	r0, r3
 800d10e:	3708      	adds	r7, #8
 800d110:	46bd      	mov	sp, r7
 800d112:	bd80      	pop	{r7, pc}

0800d114 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d114:	b580      	push	{r7, lr}
 800d116:	b08a      	sub	sp, #40	@ 0x28
 800d118:	af02      	add	r7, sp, #8
 800d11a:	60f8      	str	r0, [r7, #12]
 800d11c:	60b9      	str	r1, [r7, #8]
 800d11e:	603b      	str	r3, [r7, #0]
 800d120:	4613      	mov	r3, r2
 800d122:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d12a:	2b20      	cmp	r3, #32
 800d12c:	d17b      	bne.n	800d226 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800d12e:	68bb      	ldr	r3, [r7, #8]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d002      	beq.n	800d13a <HAL_UART_Transmit+0x26>
 800d134:	88fb      	ldrh	r3, [r7, #6]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d101      	bne.n	800d13e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800d13a:	2301      	movs	r3, #1
 800d13c:	e074      	b.n	800d228 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	2200      	movs	r2, #0
 800d142:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	2221      	movs	r2, #33	@ 0x21
 800d14a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d14e:	f7f6 f8eb 	bl	8003328 <HAL_GetTick>
 800d152:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	88fa      	ldrh	r2, [r7, #6]
 800d158:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	88fa      	ldrh	r2, [r7, #6]
 800d160:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	689b      	ldr	r3, [r3, #8]
 800d168:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d16c:	d108      	bne.n	800d180 <HAL_UART_Transmit+0x6c>
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	691b      	ldr	r3, [r3, #16]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d104      	bne.n	800d180 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800d176:	2300      	movs	r3, #0
 800d178:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d17a:	68bb      	ldr	r3, [r7, #8]
 800d17c:	61bb      	str	r3, [r7, #24]
 800d17e:	e003      	b.n	800d188 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800d180:	68bb      	ldr	r3, [r7, #8]
 800d182:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d184:	2300      	movs	r3, #0
 800d186:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d188:	e030      	b.n	800d1ec <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d18a:	683b      	ldr	r3, [r7, #0]
 800d18c:	9300      	str	r3, [sp, #0]
 800d18e:	697b      	ldr	r3, [r7, #20]
 800d190:	2200      	movs	r2, #0
 800d192:	2180      	movs	r1, #128	@ 0x80
 800d194:	68f8      	ldr	r0, [r7, #12]
 800d196:	f001 fb41 	bl	800e81c <UART_WaitOnFlagUntilTimeout>
 800d19a:	4603      	mov	r3, r0
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d005      	beq.n	800d1ac <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	2220      	movs	r2, #32
 800d1a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800d1a8:	2303      	movs	r3, #3
 800d1aa:	e03d      	b.n	800d228 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800d1ac:	69fb      	ldr	r3, [r7, #28]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d10b      	bne.n	800d1ca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d1b2:	69bb      	ldr	r3, [r7, #24]
 800d1b4:	881b      	ldrh	r3, [r3, #0]
 800d1b6:	461a      	mov	r2, r3
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d1c0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800d1c2:	69bb      	ldr	r3, [r7, #24]
 800d1c4:	3302      	adds	r3, #2
 800d1c6:	61bb      	str	r3, [r7, #24]
 800d1c8:	e007      	b.n	800d1da <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d1ca:	69fb      	ldr	r3, [r7, #28]
 800d1cc:	781a      	ldrb	r2, [r3, #0]
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800d1d4:	69fb      	ldr	r3, [r7, #28]
 800d1d6:	3301      	adds	r3, #1
 800d1d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d1e0:	b29b      	uxth	r3, r3
 800d1e2:	3b01      	subs	r3, #1
 800d1e4:	b29a      	uxth	r2, r3
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d1f2:	b29b      	uxth	r3, r3
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d1c8      	bne.n	800d18a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d1f8:	683b      	ldr	r3, [r7, #0]
 800d1fa:	9300      	str	r3, [sp, #0]
 800d1fc:	697b      	ldr	r3, [r7, #20]
 800d1fe:	2200      	movs	r2, #0
 800d200:	2140      	movs	r1, #64	@ 0x40
 800d202:	68f8      	ldr	r0, [r7, #12]
 800d204:	f001 fb0a 	bl	800e81c <UART_WaitOnFlagUntilTimeout>
 800d208:	4603      	mov	r3, r0
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d005      	beq.n	800d21a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	2220      	movs	r2, #32
 800d212:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800d216:	2303      	movs	r3, #3
 800d218:	e006      	b.n	800d228 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	2220      	movs	r2, #32
 800d21e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800d222:	2300      	movs	r3, #0
 800d224:	e000      	b.n	800d228 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800d226:	2302      	movs	r3, #2
  }
}
 800d228:	4618      	mov	r0, r3
 800d22a:	3720      	adds	r7, #32
 800d22c:	46bd      	mov	sp, r7
 800d22e:	bd80      	pop	{r7, pc}

0800d230 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b08a      	sub	sp, #40	@ 0x28
 800d234:	af00      	add	r7, sp, #0
 800d236:	60f8      	str	r0, [r7, #12]
 800d238:	60b9      	str	r1, [r7, #8]
 800d23a:	4613      	mov	r3, r2
 800d23c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d244:	2b20      	cmp	r3, #32
 800d246:	d137      	bne.n	800d2b8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800d248:	68bb      	ldr	r3, [r7, #8]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d002      	beq.n	800d254 <HAL_UART_Receive_IT+0x24>
 800d24e:	88fb      	ldrh	r3, [r7, #6]
 800d250:	2b00      	cmp	r3, #0
 800d252:	d101      	bne.n	800d258 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800d254:	2301      	movs	r3, #1
 800d256:	e030      	b.n	800d2ba <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	2200      	movs	r2, #0
 800d25c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	4a18      	ldr	r2, [pc, #96]	@ (800d2c4 <HAL_UART_Receive_IT+0x94>)
 800d264:	4293      	cmp	r3, r2
 800d266:	d01f      	beq.n	800d2a8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	685b      	ldr	r3, [r3, #4]
 800d26e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d272:	2b00      	cmp	r3, #0
 800d274:	d018      	beq.n	800d2a8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d27c:	697b      	ldr	r3, [r7, #20]
 800d27e:	e853 3f00 	ldrex	r3, [r3]
 800d282:	613b      	str	r3, [r7, #16]
   return(result);
 800d284:	693b      	ldr	r3, [r7, #16]
 800d286:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800d28a:	627b      	str	r3, [r7, #36]	@ 0x24
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	461a      	mov	r2, r3
 800d292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d294:	623b      	str	r3, [r7, #32]
 800d296:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d298:	69f9      	ldr	r1, [r7, #28]
 800d29a:	6a3a      	ldr	r2, [r7, #32]
 800d29c:	e841 2300 	strex	r3, r2, [r1]
 800d2a0:	61bb      	str	r3, [r7, #24]
   return(result);
 800d2a2:	69bb      	ldr	r3, [r7, #24]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d1e6      	bne.n	800d276 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800d2a8:	88fb      	ldrh	r3, [r7, #6]
 800d2aa:	461a      	mov	r2, r3
 800d2ac:	68b9      	ldr	r1, [r7, #8]
 800d2ae:	68f8      	ldr	r0, [r7, #12]
 800d2b0:	f001 fb22 	bl	800e8f8 <UART_Start_Receive_IT>
 800d2b4:	4603      	mov	r3, r0
 800d2b6:	e000      	b.n	800d2ba <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d2b8:	2302      	movs	r3, #2
  }
}
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	3728      	adds	r7, #40	@ 0x28
 800d2be:	46bd      	mov	sp, r7
 800d2c0:	bd80      	pop	{r7, pc}
 800d2c2:	bf00      	nop
 800d2c4:	58000c00 	.word	0x58000c00

0800d2c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	b0ba      	sub	sp, #232	@ 0xe8
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	69db      	ldr	r3, [r3, #28]
 800d2d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	689b      	ldr	r3, [r3, #8]
 800d2ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d2ee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800d2f2:	f640 030f 	movw	r3, #2063	@ 0x80f
 800d2f6:	4013      	ands	r3, r2
 800d2f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800d2fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d300:	2b00      	cmp	r3, #0
 800d302:	d11b      	bne.n	800d33c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d304:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d308:	f003 0320 	and.w	r3, r3, #32
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d015      	beq.n	800d33c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d310:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d314:	f003 0320 	and.w	r3, r3, #32
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d105      	bne.n	800d328 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d31c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d320:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d324:	2b00      	cmp	r3, #0
 800d326:	d009      	beq.n	800d33c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	f000 8393 	beq.w	800da58 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d336:	6878      	ldr	r0, [r7, #4]
 800d338:	4798      	blx	r3
      }
      return;
 800d33a:	e38d      	b.n	800da58 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d33c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d340:	2b00      	cmp	r3, #0
 800d342:	f000 8123 	beq.w	800d58c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d346:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800d34a:	4b8d      	ldr	r3, [pc, #564]	@ (800d580 <HAL_UART_IRQHandler+0x2b8>)
 800d34c:	4013      	ands	r3, r2
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d106      	bne.n	800d360 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d352:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800d356:	4b8b      	ldr	r3, [pc, #556]	@ (800d584 <HAL_UART_IRQHandler+0x2bc>)
 800d358:	4013      	ands	r3, r2
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	f000 8116 	beq.w	800d58c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d360:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d364:	f003 0301 	and.w	r3, r3, #1
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d011      	beq.n	800d390 <HAL_UART_IRQHandler+0xc8>
 800d36c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d370:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d374:	2b00      	cmp	r3, #0
 800d376:	d00b      	beq.n	800d390 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	2201      	movs	r2, #1
 800d37e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d386:	f043 0201 	orr.w	r2, r3, #1
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d390:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d394:	f003 0302 	and.w	r3, r3, #2
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d011      	beq.n	800d3c0 <HAL_UART_IRQHandler+0xf8>
 800d39c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d3a0:	f003 0301 	and.w	r3, r3, #1
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d00b      	beq.n	800d3c0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	2202      	movs	r2, #2
 800d3ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d3b6:	f043 0204 	orr.w	r2, r3, #4
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d3c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d3c4:	f003 0304 	and.w	r3, r3, #4
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d011      	beq.n	800d3f0 <HAL_UART_IRQHandler+0x128>
 800d3cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d3d0:	f003 0301 	and.w	r3, r3, #1
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d00b      	beq.n	800d3f0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	2204      	movs	r2, #4
 800d3de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d3e6:	f043 0202 	orr.w	r2, r3, #2
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d3f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d3f4:	f003 0308 	and.w	r3, r3, #8
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d017      	beq.n	800d42c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d3fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d400:	f003 0320 	and.w	r3, r3, #32
 800d404:	2b00      	cmp	r3, #0
 800d406:	d105      	bne.n	800d414 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d408:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800d40c:	4b5c      	ldr	r3, [pc, #368]	@ (800d580 <HAL_UART_IRQHandler+0x2b8>)
 800d40e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d410:	2b00      	cmp	r3, #0
 800d412:	d00b      	beq.n	800d42c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	2208      	movs	r2, #8
 800d41a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d422:	f043 0208 	orr.w	r2, r3, #8
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d42c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d430:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d434:	2b00      	cmp	r3, #0
 800d436:	d012      	beq.n	800d45e <HAL_UART_IRQHandler+0x196>
 800d438:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d43c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d440:	2b00      	cmp	r3, #0
 800d442:	d00c      	beq.n	800d45e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d44c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d454:	f043 0220 	orr.w	r2, r3, #32
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d464:	2b00      	cmp	r3, #0
 800d466:	f000 82f9 	beq.w	800da5c <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d46a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d46e:	f003 0320 	and.w	r3, r3, #32
 800d472:	2b00      	cmp	r3, #0
 800d474:	d013      	beq.n	800d49e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d476:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d47a:	f003 0320 	and.w	r3, r3, #32
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d105      	bne.n	800d48e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d482:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d486:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d007      	beq.n	800d49e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d492:	2b00      	cmp	r3, #0
 800d494:	d003      	beq.n	800d49e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d49a:	6878      	ldr	r0, [r7, #4]
 800d49c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d4a4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	689b      	ldr	r3, [r3, #8]
 800d4ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d4b2:	2b40      	cmp	r3, #64	@ 0x40
 800d4b4:	d005      	beq.n	800d4c2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d4b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d4ba:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d054      	beq.n	800d56c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d4c2:	6878      	ldr	r0, [r7, #4]
 800d4c4:	f001 fb3a 	bl	800eb3c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	689b      	ldr	r3, [r3, #8]
 800d4ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d4d2:	2b40      	cmp	r3, #64	@ 0x40
 800d4d4:	d146      	bne.n	800d564 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	3308      	adds	r3, #8
 800d4dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d4e4:	e853 3f00 	ldrex	r3, [r3]
 800d4e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800d4ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d4f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d4f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	3308      	adds	r3, #8
 800d4fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800d502:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800d506:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d50a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800d50e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800d512:	e841 2300 	strex	r3, r2, [r1]
 800d516:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800d51a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d1d9      	bne.n	800d4d6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d017      	beq.n	800d55c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d532:	4a15      	ldr	r2, [pc, #84]	@ (800d588 <HAL_UART_IRQHandler+0x2c0>)
 800d534:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d53c:	4618      	mov	r0, r3
 800d53e:	f7f8 fe7b 	bl	8006238 <HAL_DMA_Abort_IT>
 800d542:	4603      	mov	r3, r0
 800d544:	2b00      	cmp	r3, #0
 800d546:	d019      	beq.n	800d57c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d54e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d550:	687a      	ldr	r2, [r7, #4]
 800d552:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800d556:	4610      	mov	r0, r2
 800d558:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d55a:	e00f      	b.n	800d57c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d55c:	6878      	ldr	r0, [r7, #4]
 800d55e:	f000 fa93 	bl	800da88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d562:	e00b      	b.n	800d57c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d564:	6878      	ldr	r0, [r7, #4]
 800d566:	f000 fa8f 	bl	800da88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d56a:	e007      	b.n	800d57c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d56c:	6878      	ldr	r0, [r7, #4]
 800d56e:	f000 fa8b 	bl	800da88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	2200      	movs	r2, #0
 800d576:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800d57a:	e26f      	b.n	800da5c <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d57c:	bf00      	nop
    return;
 800d57e:	e26d      	b.n	800da5c <HAL_UART_IRQHandler+0x794>
 800d580:	10000001 	.word	0x10000001
 800d584:	04000120 	.word	0x04000120
 800d588:	0800ec09 	.word	0x0800ec09

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d590:	2b01      	cmp	r3, #1
 800d592:	f040 8203 	bne.w	800d99c <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d596:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d59a:	f003 0310 	and.w	r3, r3, #16
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	f000 81fc 	beq.w	800d99c <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d5a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d5a8:	f003 0310 	and.w	r3, r3, #16
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	f000 81f5 	beq.w	800d99c <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	2210      	movs	r2, #16
 800d5b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	689b      	ldr	r3, [r3, #8]
 800d5c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d5c4:	2b40      	cmp	r3, #64	@ 0x40
 800d5c6:	f040 816d 	bne.w	800d8a4 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	4aa4      	ldr	r2, [pc, #656]	@ (800d864 <HAL_UART_IRQHandler+0x59c>)
 800d5d4:	4293      	cmp	r3, r2
 800d5d6:	d068      	beq.n	800d6aa <HAL_UART_IRQHandler+0x3e2>
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	4aa1      	ldr	r2, [pc, #644]	@ (800d868 <HAL_UART_IRQHandler+0x5a0>)
 800d5e2:	4293      	cmp	r3, r2
 800d5e4:	d061      	beq.n	800d6aa <HAL_UART_IRQHandler+0x3e2>
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	4a9f      	ldr	r2, [pc, #636]	@ (800d86c <HAL_UART_IRQHandler+0x5a4>)
 800d5f0:	4293      	cmp	r3, r2
 800d5f2:	d05a      	beq.n	800d6aa <HAL_UART_IRQHandler+0x3e2>
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	4a9c      	ldr	r2, [pc, #624]	@ (800d870 <HAL_UART_IRQHandler+0x5a8>)
 800d5fe:	4293      	cmp	r3, r2
 800d600:	d053      	beq.n	800d6aa <HAL_UART_IRQHandler+0x3e2>
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	4a9a      	ldr	r2, [pc, #616]	@ (800d874 <HAL_UART_IRQHandler+0x5ac>)
 800d60c:	4293      	cmp	r3, r2
 800d60e:	d04c      	beq.n	800d6aa <HAL_UART_IRQHandler+0x3e2>
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	4a97      	ldr	r2, [pc, #604]	@ (800d878 <HAL_UART_IRQHandler+0x5b0>)
 800d61a:	4293      	cmp	r3, r2
 800d61c:	d045      	beq.n	800d6aa <HAL_UART_IRQHandler+0x3e2>
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	4a95      	ldr	r2, [pc, #596]	@ (800d87c <HAL_UART_IRQHandler+0x5b4>)
 800d628:	4293      	cmp	r3, r2
 800d62a:	d03e      	beq.n	800d6aa <HAL_UART_IRQHandler+0x3e2>
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	4a92      	ldr	r2, [pc, #584]	@ (800d880 <HAL_UART_IRQHandler+0x5b8>)
 800d636:	4293      	cmp	r3, r2
 800d638:	d037      	beq.n	800d6aa <HAL_UART_IRQHandler+0x3e2>
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	4a90      	ldr	r2, [pc, #576]	@ (800d884 <HAL_UART_IRQHandler+0x5bc>)
 800d644:	4293      	cmp	r3, r2
 800d646:	d030      	beq.n	800d6aa <HAL_UART_IRQHandler+0x3e2>
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	4a8d      	ldr	r2, [pc, #564]	@ (800d888 <HAL_UART_IRQHandler+0x5c0>)
 800d652:	4293      	cmp	r3, r2
 800d654:	d029      	beq.n	800d6aa <HAL_UART_IRQHandler+0x3e2>
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	4a8b      	ldr	r2, [pc, #556]	@ (800d88c <HAL_UART_IRQHandler+0x5c4>)
 800d660:	4293      	cmp	r3, r2
 800d662:	d022      	beq.n	800d6aa <HAL_UART_IRQHandler+0x3e2>
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	4a88      	ldr	r2, [pc, #544]	@ (800d890 <HAL_UART_IRQHandler+0x5c8>)
 800d66e:	4293      	cmp	r3, r2
 800d670:	d01b      	beq.n	800d6aa <HAL_UART_IRQHandler+0x3e2>
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	4a86      	ldr	r2, [pc, #536]	@ (800d894 <HAL_UART_IRQHandler+0x5cc>)
 800d67c:	4293      	cmp	r3, r2
 800d67e:	d014      	beq.n	800d6aa <HAL_UART_IRQHandler+0x3e2>
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	4a83      	ldr	r2, [pc, #524]	@ (800d898 <HAL_UART_IRQHandler+0x5d0>)
 800d68a:	4293      	cmp	r3, r2
 800d68c:	d00d      	beq.n	800d6aa <HAL_UART_IRQHandler+0x3e2>
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	4a81      	ldr	r2, [pc, #516]	@ (800d89c <HAL_UART_IRQHandler+0x5d4>)
 800d698:	4293      	cmp	r3, r2
 800d69a:	d006      	beq.n	800d6aa <HAL_UART_IRQHandler+0x3e2>
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	4a7e      	ldr	r2, [pc, #504]	@ (800d8a0 <HAL_UART_IRQHandler+0x5d8>)
 800d6a6:	4293      	cmp	r3, r2
 800d6a8:	d106      	bne.n	800d6b8 <HAL_UART_IRQHandler+0x3f0>
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	685b      	ldr	r3, [r3, #4]
 800d6b4:	b29b      	uxth	r3, r3
 800d6b6:	e005      	b.n	800d6c4 <HAL_UART_IRQHandler+0x3fc>
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	685b      	ldr	r3, [r3, #4]
 800d6c2:	b29b      	uxth	r3, r3
 800d6c4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d6c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	f000 80ad 	beq.w	800d82c <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d6d8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d6dc:	429a      	cmp	r2, r3
 800d6de:	f080 80a5 	bcs.w	800d82c <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d6e8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d6f2:	69db      	ldr	r3, [r3, #28]
 800d6f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d6f8:	f000 8087 	beq.w	800d80a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d704:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d708:	e853 3f00 	ldrex	r3, [r3]
 800d70c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800d710:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d714:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d718:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	461a      	mov	r2, r3
 800d722:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d726:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d72a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d72e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d732:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d736:	e841 2300 	strex	r3, r2, [r1]
 800d73a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800d73e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d742:	2b00      	cmp	r3, #0
 800d744:	d1da      	bne.n	800d6fc <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	3308      	adds	r3, #8
 800d74c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d74e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d750:	e853 3f00 	ldrex	r3, [r3]
 800d754:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d756:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d758:	f023 0301 	bic.w	r3, r3, #1
 800d75c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	3308      	adds	r3, #8
 800d766:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d76a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800d76e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d770:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d772:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d776:	e841 2300 	strex	r3, r2, [r1]
 800d77a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d77c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d1e1      	bne.n	800d746 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	3308      	adds	r3, #8
 800d788:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d78a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d78c:	e853 3f00 	ldrex	r3, [r3]
 800d790:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d792:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d794:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d798:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	3308      	adds	r3, #8
 800d7a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d7a6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d7a8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7aa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d7ac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d7ae:	e841 2300 	strex	r3, r2, [r1]
 800d7b2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d7b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d1e3      	bne.n	800d782 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	2220      	movs	r2, #32
 800d7be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	2200      	movs	r2, #0
 800d7c6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d7d0:	e853 3f00 	ldrex	r3, [r3]
 800d7d4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d7d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d7d8:	f023 0310 	bic.w	r3, r3, #16
 800d7dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	461a      	mov	r2, r3
 800d7e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d7ea:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d7ec:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7ee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d7f0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d7f2:	e841 2300 	strex	r3, r2, [r1]
 800d7f6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d7f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d1e4      	bne.n	800d7c8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d804:	4618      	mov	r0, r3
 800d806:	f7f8 f9f9 	bl	8005bfc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	2202      	movs	r2, #2
 800d80e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d81c:	b29b      	uxth	r3, r3
 800d81e:	1ad3      	subs	r3, r2, r3
 800d820:	b29b      	uxth	r3, r3
 800d822:	4619      	mov	r1, r3
 800d824:	6878      	ldr	r0, [r7, #4]
 800d826:	f000 f939 	bl	800da9c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800d82a:	e119      	b.n	800da60 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d832:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d836:	429a      	cmp	r2, r3
 800d838:	f040 8112 	bne.w	800da60 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d842:	69db      	ldr	r3, [r3, #28]
 800d844:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d848:	f040 810a 	bne.w	800da60 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	2202      	movs	r2, #2
 800d850:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d858:	4619      	mov	r1, r3
 800d85a:	6878      	ldr	r0, [r7, #4]
 800d85c:	f000 f91e 	bl	800da9c <HAL_UARTEx_RxEventCallback>
      return;
 800d860:	e0fe      	b.n	800da60 <HAL_UART_IRQHandler+0x798>
 800d862:	bf00      	nop
 800d864:	40020010 	.word	0x40020010
 800d868:	40020028 	.word	0x40020028
 800d86c:	40020040 	.word	0x40020040
 800d870:	40020058 	.word	0x40020058
 800d874:	40020070 	.word	0x40020070
 800d878:	40020088 	.word	0x40020088
 800d87c:	400200a0 	.word	0x400200a0
 800d880:	400200b8 	.word	0x400200b8
 800d884:	40020410 	.word	0x40020410
 800d888:	40020428 	.word	0x40020428
 800d88c:	40020440 	.word	0x40020440
 800d890:	40020458 	.word	0x40020458
 800d894:	40020470 	.word	0x40020470
 800d898:	40020488 	.word	0x40020488
 800d89c:	400204a0 	.word	0x400204a0
 800d8a0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d8b0:	b29b      	uxth	r3, r3
 800d8b2:	1ad3      	subs	r3, r2, r3
 800d8b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d8be:	b29b      	uxth	r3, r3
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	f000 80cf 	beq.w	800da64 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 800d8c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	f000 80ca 	beq.w	800da64 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8d8:	e853 3f00 	ldrex	r3, [r3]
 800d8dc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d8de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d8e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d8e4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	461a      	mov	r2, r3
 800d8ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d8f2:	647b      	str	r3, [r7, #68]	@ 0x44
 800d8f4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d8f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d8fa:	e841 2300 	strex	r3, r2, [r1]
 800d8fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d900:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d902:	2b00      	cmp	r3, #0
 800d904:	d1e4      	bne.n	800d8d0 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	3308      	adds	r3, #8
 800d90c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d90e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d910:	e853 3f00 	ldrex	r3, [r3]
 800d914:	623b      	str	r3, [r7, #32]
   return(result);
 800d916:	6a3a      	ldr	r2, [r7, #32]
 800d918:	4b55      	ldr	r3, [pc, #340]	@ (800da70 <HAL_UART_IRQHandler+0x7a8>)
 800d91a:	4013      	ands	r3, r2
 800d91c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	3308      	adds	r3, #8
 800d926:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d92a:	633a      	str	r2, [r7, #48]	@ 0x30
 800d92c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d92e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d930:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d932:	e841 2300 	strex	r3, r2, [r1]
 800d936:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d1e3      	bne.n	800d906 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	2220      	movs	r2, #32
 800d942:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	2200      	movs	r2, #0
 800d94a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	2200      	movs	r2, #0
 800d950:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d958:	693b      	ldr	r3, [r7, #16]
 800d95a:	e853 3f00 	ldrex	r3, [r3]
 800d95e:	60fb      	str	r3, [r7, #12]
   return(result);
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	f023 0310 	bic.w	r3, r3, #16
 800d966:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	461a      	mov	r2, r3
 800d970:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800d974:	61fb      	str	r3, [r7, #28]
 800d976:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d978:	69b9      	ldr	r1, [r7, #24]
 800d97a:	69fa      	ldr	r2, [r7, #28]
 800d97c:	e841 2300 	strex	r3, r2, [r1]
 800d980:	617b      	str	r3, [r7, #20]
   return(result);
 800d982:	697b      	ldr	r3, [r7, #20]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d1e4      	bne.n	800d952 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	2202      	movs	r2, #2
 800d98c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d98e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d992:	4619      	mov	r1, r3
 800d994:	6878      	ldr	r0, [r7, #4]
 800d996:	f000 f881 	bl	800da9c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d99a:	e063      	b.n	800da64 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d99c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d9a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d00e      	beq.n	800d9c6 <HAL_UART_IRQHandler+0x6fe>
 800d9a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d9ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d008      	beq.n	800d9c6 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800d9bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d9be:	6878      	ldr	r0, [r7, #4]
 800d9c0:	f001 fe80 	bl	800f6c4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d9c4:	e051      	b.n	800da6a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d9c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d9ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d014      	beq.n	800d9fc <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d9d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d9d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d105      	bne.n	800d9ea <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d9de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d9e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d008      	beq.n	800d9fc <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d03a      	beq.n	800da68 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d9f6:	6878      	ldr	r0, [r7, #4]
 800d9f8:	4798      	blx	r3
    }
    return;
 800d9fa:	e035      	b.n	800da68 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d9fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800da00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800da04:	2b00      	cmp	r3, #0
 800da06:	d009      	beq.n	800da1c <HAL_UART_IRQHandler+0x754>
 800da08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800da0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800da10:	2b00      	cmp	r3, #0
 800da12:	d003      	beq.n	800da1c <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 800da14:	6878      	ldr	r0, [r7, #4]
 800da16:	f001 f909 	bl	800ec2c <UART_EndTransmit_IT>
    return;
 800da1a:	e026      	b.n	800da6a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800da1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800da20:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800da24:	2b00      	cmp	r3, #0
 800da26:	d009      	beq.n	800da3c <HAL_UART_IRQHandler+0x774>
 800da28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800da2c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800da30:	2b00      	cmp	r3, #0
 800da32:	d003      	beq.n	800da3c <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800da34:	6878      	ldr	r0, [r7, #4]
 800da36:	f001 fe59 	bl	800f6ec <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800da3a:	e016      	b.n	800da6a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800da3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800da40:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800da44:	2b00      	cmp	r3, #0
 800da46:	d010      	beq.n	800da6a <HAL_UART_IRQHandler+0x7a2>
 800da48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	da0c      	bge.n	800da6a <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800da50:	6878      	ldr	r0, [r7, #4]
 800da52:	f001 fe41 	bl	800f6d8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800da56:	e008      	b.n	800da6a <HAL_UART_IRQHandler+0x7a2>
      return;
 800da58:	bf00      	nop
 800da5a:	e006      	b.n	800da6a <HAL_UART_IRQHandler+0x7a2>
    return;
 800da5c:	bf00      	nop
 800da5e:	e004      	b.n	800da6a <HAL_UART_IRQHandler+0x7a2>
      return;
 800da60:	bf00      	nop
 800da62:	e002      	b.n	800da6a <HAL_UART_IRQHandler+0x7a2>
      return;
 800da64:	bf00      	nop
 800da66:	e000      	b.n	800da6a <HAL_UART_IRQHandler+0x7a2>
    return;
 800da68:	bf00      	nop
  }
}
 800da6a:	37e8      	adds	r7, #232	@ 0xe8
 800da6c:	46bd      	mov	sp, r7
 800da6e:	bd80      	pop	{r7, pc}
 800da70:	effffffe 	.word	0xeffffffe

0800da74 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800da74:	b480      	push	{r7}
 800da76:	b083      	sub	sp, #12
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800da7c:	bf00      	nop
 800da7e:	370c      	adds	r7, #12
 800da80:	46bd      	mov	sp, r7
 800da82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da86:	4770      	bx	lr

0800da88 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800da88:	b480      	push	{r7}
 800da8a:	b083      	sub	sp, #12
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800da90:	bf00      	nop
 800da92:	370c      	adds	r7, #12
 800da94:	46bd      	mov	sp, r7
 800da96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da9a:	4770      	bx	lr

0800da9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800da9c:	b480      	push	{r7}
 800da9e:	b083      	sub	sp, #12
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	6078      	str	r0, [r7, #4]
 800daa4:	460b      	mov	r3, r1
 800daa6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800daa8:	bf00      	nop
 800daaa:	370c      	adds	r7, #12
 800daac:	46bd      	mov	sp, r7
 800daae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab2:	4770      	bx	lr

0800dab4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dab4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dab8:	b092      	sub	sp, #72	@ 0x48
 800daba:	af00      	add	r7, sp, #0
 800dabc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800dabe:	2300      	movs	r3, #0
 800dac0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800dac4:	697b      	ldr	r3, [r7, #20]
 800dac6:	689a      	ldr	r2, [r3, #8]
 800dac8:	697b      	ldr	r3, [r7, #20]
 800daca:	691b      	ldr	r3, [r3, #16]
 800dacc:	431a      	orrs	r2, r3
 800dace:	697b      	ldr	r3, [r7, #20]
 800dad0:	695b      	ldr	r3, [r3, #20]
 800dad2:	431a      	orrs	r2, r3
 800dad4:	697b      	ldr	r3, [r7, #20]
 800dad6:	69db      	ldr	r3, [r3, #28]
 800dad8:	4313      	orrs	r3, r2
 800dada:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800dadc:	697b      	ldr	r3, [r7, #20]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	681a      	ldr	r2, [r3, #0]
 800dae2:	4bbe      	ldr	r3, [pc, #760]	@ (800dddc <UART_SetConfig+0x328>)
 800dae4:	4013      	ands	r3, r2
 800dae6:	697a      	ldr	r2, [r7, #20]
 800dae8:	6812      	ldr	r2, [r2, #0]
 800daea:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800daec:	430b      	orrs	r3, r1
 800daee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800daf0:	697b      	ldr	r3, [r7, #20]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	685b      	ldr	r3, [r3, #4]
 800daf6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800dafa:	697b      	ldr	r3, [r7, #20]
 800dafc:	68da      	ldr	r2, [r3, #12]
 800dafe:	697b      	ldr	r3, [r7, #20]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	430a      	orrs	r2, r1
 800db04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800db06:	697b      	ldr	r3, [r7, #20]
 800db08:	699b      	ldr	r3, [r3, #24]
 800db0a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800db0c:	697b      	ldr	r3, [r7, #20]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	4ab3      	ldr	r2, [pc, #716]	@ (800dde0 <UART_SetConfig+0x32c>)
 800db12:	4293      	cmp	r3, r2
 800db14:	d004      	beq.n	800db20 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800db16:	697b      	ldr	r3, [r7, #20]
 800db18:	6a1b      	ldr	r3, [r3, #32]
 800db1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800db1c:	4313      	orrs	r3, r2
 800db1e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800db20:	697b      	ldr	r3, [r7, #20]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	689a      	ldr	r2, [r3, #8]
 800db26:	4baf      	ldr	r3, [pc, #700]	@ (800dde4 <UART_SetConfig+0x330>)
 800db28:	4013      	ands	r3, r2
 800db2a:	697a      	ldr	r2, [r7, #20]
 800db2c:	6812      	ldr	r2, [r2, #0]
 800db2e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800db30:	430b      	orrs	r3, r1
 800db32:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800db34:	697b      	ldr	r3, [r7, #20]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db3a:	f023 010f 	bic.w	r1, r3, #15
 800db3e:	697b      	ldr	r3, [r7, #20]
 800db40:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800db42:	697b      	ldr	r3, [r7, #20]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	430a      	orrs	r2, r1
 800db48:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800db4a:	697b      	ldr	r3, [r7, #20]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	4aa6      	ldr	r2, [pc, #664]	@ (800dde8 <UART_SetConfig+0x334>)
 800db50:	4293      	cmp	r3, r2
 800db52:	d177      	bne.n	800dc44 <UART_SetConfig+0x190>
 800db54:	4ba5      	ldr	r3, [pc, #660]	@ (800ddec <UART_SetConfig+0x338>)
 800db56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800db58:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800db5c:	2b28      	cmp	r3, #40	@ 0x28
 800db5e:	d86d      	bhi.n	800dc3c <UART_SetConfig+0x188>
 800db60:	a201      	add	r2, pc, #4	@ (adr r2, 800db68 <UART_SetConfig+0xb4>)
 800db62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db66:	bf00      	nop
 800db68:	0800dc0d 	.word	0x0800dc0d
 800db6c:	0800dc3d 	.word	0x0800dc3d
 800db70:	0800dc3d 	.word	0x0800dc3d
 800db74:	0800dc3d 	.word	0x0800dc3d
 800db78:	0800dc3d 	.word	0x0800dc3d
 800db7c:	0800dc3d 	.word	0x0800dc3d
 800db80:	0800dc3d 	.word	0x0800dc3d
 800db84:	0800dc3d 	.word	0x0800dc3d
 800db88:	0800dc15 	.word	0x0800dc15
 800db8c:	0800dc3d 	.word	0x0800dc3d
 800db90:	0800dc3d 	.word	0x0800dc3d
 800db94:	0800dc3d 	.word	0x0800dc3d
 800db98:	0800dc3d 	.word	0x0800dc3d
 800db9c:	0800dc3d 	.word	0x0800dc3d
 800dba0:	0800dc3d 	.word	0x0800dc3d
 800dba4:	0800dc3d 	.word	0x0800dc3d
 800dba8:	0800dc1d 	.word	0x0800dc1d
 800dbac:	0800dc3d 	.word	0x0800dc3d
 800dbb0:	0800dc3d 	.word	0x0800dc3d
 800dbb4:	0800dc3d 	.word	0x0800dc3d
 800dbb8:	0800dc3d 	.word	0x0800dc3d
 800dbbc:	0800dc3d 	.word	0x0800dc3d
 800dbc0:	0800dc3d 	.word	0x0800dc3d
 800dbc4:	0800dc3d 	.word	0x0800dc3d
 800dbc8:	0800dc25 	.word	0x0800dc25
 800dbcc:	0800dc3d 	.word	0x0800dc3d
 800dbd0:	0800dc3d 	.word	0x0800dc3d
 800dbd4:	0800dc3d 	.word	0x0800dc3d
 800dbd8:	0800dc3d 	.word	0x0800dc3d
 800dbdc:	0800dc3d 	.word	0x0800dc3d
 800dbe0:	0800dc3d 	.word	0x0800dc3d
 800dbe4:	0800dc3d 	.word	0x0800dc3d
 800dbe8:	0800dc2d 	.word	0x0800dc2d
 800dbec:	0800dc3d 	.word	0x0800dc3d
 800dbf0:	0800dc3d 	.word	0x0800dc3d
 800dbf4:	0800dc3d 	.word	0x0800dc3d
 800dbf8:	0800dc3d 	.word	0x0800dc3d
 800dbfc:	0800dc3d 	.word	0x0800dc3d
 800dc00:	0800dc3d 	.word	0x0800dc3d
 800dc04:	0800dc3d 	.word	0x0800dc3d
 800dc08:	0800dc35 	.word	0x0800dc35
 800dc0c:	2301      	movs	r3, #1
 800dc0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc12:	e222      	b.n	800e05a <UART_SetConfig+0x5a6>
 800dc14:	2304      	movs	r3, #4
 800dc16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc1a:	e21e      	b.n	800e05a <UART_SetConfig+0x5a6>
 800dc1c:	2308      	movs	r3, #8
 800dc1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc22:	e21a      	b.n	800e05a <UART_SetConfig+0x5a6>
 800dc24:	2310      	movs	r3, #16
 800dc26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc2a:	e216      	b.n	800e05a <UART_SetConfig+0x5a6>
 800dc2c:	2320      	movs	r3, #32
 800dc2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc32:	e212      	b.n	800e05a <UART_SetConfig+0x5a6>
 800dc34:	2340      	movs	r3, #64	@ 0x40
 800dc36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc3a:	e20e      	b.n	800e05a <UART_SetConfig+0x5a6>
 800dc3c:	2380      	movs	r3, #128	@ 0x80
 800dc3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc42:	e20a      	b.n	800e05a <UART_SetConfig+0x5a6>
 800dc44:	697b      	ldr	r3, [r7, #20]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	4a69      	ldr	r2, [pc, #420]	@ (800ddf0 <UART_SetConfig+0x33c>)
 800dc4a:	4293      	cmp	r3, r2
 800dc4c:	d130      	bne.n	800dcb0 <UART_SetConfig+0x1fc>
 800dc4e:	4b67      	ldr	r3, [pc, #412]	@ (800ddec <UART_SetConfig+0x338>)
 800dc50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc52:	f003 0307 	and.w	r3, r3, #7
 800dc56:	2b05      	cmp	r3, #5
 800dc58:	d826      	bhi.n	800dca8 <UART_SetConfig+0x1f4>
 800dc5a:	a201      	add	r2, pc, #4	@ (adr r2, 800dc60 <UART_SetConfig+0x1ac>)
 800dc5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc60:	0800dc79 	.word	0x0800dc79
 800dc64:	0800dc81 	.word	0x0800dc81
 800dc68:	0800dc89 	.word	0x0800dc89
 800dc6c:	0800dc91 	.word	0x0800dc91
 800dc70:	0800dc99 	.word	0x0800dc99
 800dc74:	0800dca1 	.word	0x0800dca1
 800dc78:	2300      	movs	r3, #0
 800dc7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc7e:	e1ec      	b.n	800e05a <UART_SetConfig+0x5a6>
 800dc80:	2304      	movs	r3, #4
 800dc82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc86:	e1e8      	b.n	800e05a <UART_SetConfig+0x5a6>
 800dc88:	2308      	movs	r3, #8
 800dc8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc8e:	e1e4      	b.n	800e05a <UART_SetConfig+0x5a6>
 800dc90:	2310      	movs	r3, #16
 800dc92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc96:	e1e0      	b.n	800e05a <UART_SetConfig+0x5a6>
 800dc98:	2320      	movs	r3, #32
 800dc9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dc9e:	e1dc      	b.n	800e05a <UART_SetConfig+0x5a6>
 800dca0:	2340      	movs	r3, #64	@ 0x40
 800dca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dca6:	e1d8      	b.n	800e05a <UART_SetConfig+0x5a6>
 800dca8:	2380      	movs	r3, #128	@ 0x80
 800dcaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcae:	e1d4      	b.n	800e05a <UART_SetConfig+0x5a6>
 800dcb0:	697b      	ldr	r3, [r7, #20]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	4a4f      	ldr	r2, [pc, #316]	@ (800ddf4 <UART_SetConfig+0x340>)
 800dcb6:	4293      	cmp	r3, r2
 800dcb8:	d130      	bne.n	800dd1c <UART_SetConfig+0x268>
 800dcba:	4b4c      	ldr	r3, [pc, #304]	@ (800ddec <UART_SetConfig+0x338>)
 800dcbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dcbe:	f003 0307 	and.w	r3, r3, #7
 800dcc2:	2b05      	cmp	r3, #5
 800dcc4:	d826      	bhi.n	800dd14 <UART_SetConfig+0x260>
 800dcc6:	a201      	add	r2, pc, #4	@ (adr r2, 800dccc <UART_SetConfig+0x218>)
 800dcc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dccc:	0800dce5 	.word	0x0800dce5
 800dcd0:	0800dced 	.word	0x0800dced
 800dcd4:	0800dcf5 	.word	0x0800dcf5
 800dcd8:	0800dcfd 	.word	0x0800dcfd
 800dcdc:	0800dd05 	.word	0x0800dd05
 800dce0:	0800dd0d 	.word	0x0800dd0d
 800dce4:	2300      	movs	r3, #0
 800dce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcea:	e1b6      	b.n	800e05a <UART_SetConfig+0x5a6>
 800dcec:	2304      	movs	r3, #4
 800dcee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcf2:	e1b2      	b.n	800e05a <UART_SetConfig+0x5a6>
 800dcf4:	2308      	movs	r3, #8
 800dcf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcfa:	e1ae      	b.n	800e05a <UART_SetConfig+0x5a6>
 800dcfc:	2310      	movs	r3, #16
 800dcfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd02:	e1aa      	b.n	800e05a <UART_SetConfig+0x5a6>
 800dd04:	2320      	movs	r3, #32
 800dd06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd0a:	e1a6      	b.n	800e05a <UART_SetConfig+0x5a6>
 800dd0c:	2340      	movs	r3, #64	@ 0x40
 800dd0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd12:	e1a2      	b.n	800e05a <UART_SetConfig+0x5a6>
 800dd14:	2380      	movs	r3, #128	@ 0x80
 800dd16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd1a:	e19e      	b.n	800e05a <UART_SetConfig+0x5a6>
 800dd1c:	697b      	ldr	r3, [r7, #20]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	4a35      	ldr	r2, [pc, #212]	@ (800ddf8 <UART_SetConfig+0x344>)
 800dd22:	4293      	cmp	r3, r2
 800dd24:	d130      	bne.n	800dd88 <UART_SetConfig+0x2d4>
 800dd26:	4b31      	ldr	r3, [pc, #196]	@ (800ddec <UART_SetConfig+0x338>)
 800dd28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dd2a:	f003 0307 	and.w	r3, r3, #7
 800dd2e:	2b05      	cmp	r3, #5
 800dd30:	d826      	bhi.n	800dd80 <UART_SetConfig+0x2cc>
 800dd32:	a201      	add	r2, pc, #4	@ (adr r2, 800dd38 <UART_SetConfig+0x284>)
 800dd34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd38:	0800dd51 	.word	0x0800dd51
 800dd3c:	0800dd59 	.word	0x0800dd59
 800dd40:	0800dd61 	.word	0x0800dd61
 800dd44:	0800dd69 	.word	0x0800dd69
 800dd48:	0800dd71 	.word	0x0800dd71
 800dd4c:	0800dd79 	.word	0x0800dd79
 800dd50:	2300      	movs	r3, #0
 800dd52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd56:	e180      	b.n	800e05a <UART_SetConfig+0x5a6>
 800dd58:	2304      	movs	r3, #4
 800dd5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd5e:	e17c      	b.n	800e05a <UART_SetConfig+0x5a6>
 800dd60:	2308      	movs	r3, #8
 800dd62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd66:	e178      	b.n	800e05a <UART_SetConfig+0x5a6>
 800dd68:	2310      	movs	r3, #16
 800dd6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd6e:	e174      	b.n	800e05a <UART_SetConfig+0x5a6>
 800dd70:	2320      	movs	r3, #32
 800dd72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd76:	e170      	b.n	800e05a <UART_SetConfig+0x5a6>
 800dd78:	2340      	movs	r3, #64	@ 0x40
 800dd7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd7e:	e16c      	b.n	800e05a <UART_SetConfig+0x5a6>
 800dd80:	2380      	movs	r3, #128	@ 0x80
 800dd82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd86:	e168      	b.n	800e05a <UART_SetConfig+0x5a6>
 800dd88:	697b      	ldr	r3, [r7, #20]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	4a1b      	ldr	r2, [pc, #108]	@ (800ddfc <UART_SetConfig+0x348>)
 800dd8e:	4293      	cmp	r3, r2
 800dd90:	d142      	bne.n	800de18 <UART_SetConfig+0x364>
 800dd92:	4b16      	ldr	r3, [pc, #88]	@ (800ddec <UART_SetConfig+0x338>)
 800dd94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dd96:	f003 0307 	and.w	r3, r3, #7
 800dd9a:	2b05      	cmp	r3, #5
 800dd9c:	d838      	bhi.n	800de10 <UART_SetConfig+0x35c>
 800dd9e:	a201      	add	r2, pc, #4	@ (adr r2, 800dda4 <UART_SetConfig+0x2f0>)
 800dda0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dda4:	0800ddbd 	.word	0x0800ddbd
 800dda8:	0800ddc5 	.word	0x0800ddc5
 800ddac:	0800ddcd 	.word	0x0800ddcd
 800ddb0:	0800ddd5 	.word	0x0800ddd5
 800ddb4:	0800de01 	.word	0x0800de01
 800ddb8:	0800de09 	.word	0x0800de09
 800ddbc:	2300      	movs	r3, #0
 800ddbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ddc2:	e14a      	b.n	800e05a <UART_SetConfig+0x5a6>
 800ddc4:	2304      	movs	r3, #4
 800ddc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ddca:	e146      	b.n	800e05a <UART_SetConfig+0x5a6>
 800ddcc:	2308      	movs	r3, #8
 800ddce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ddd2:	e142      	b.n	800e05a <UART_SetConfig+0x5a6>
 800ddd4:	2310      	movs	r3, #16
 800ddd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ddda:	e13e      	b.n	800e05a <UART_SetConfig+0x5a6>
 800dddc:	cfff69f3 	.word	0xcfff69f3
 800dde0:	58000c00 	.word	0x58000c00
 800dde4:	11fff4ff 	.word	0x11fff4ff
 800dde8:	40011000 	.word	0x40011000
 800ddec:	58024400 	.word	0x58024400
 800ddf0:	40004400 	.word	0x40004400
 800ddf4:	40004800 	.word	0x40004800
 800ddf8:	40004c00 	.word	0x40004c00
 800ddfc:	40005000 	.word	0x40005000
 800de00:	2320      	movs	r3, #32
 800de02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de06:	e128      	b.n	800e05a <UART_SetConfig+0x5a6>
 800de08:	2340      	movs	r3, #64	@ 0x40
 800de0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de0e:	e124      	b.n	800e05a <UART_SetConfig+0x5a6>
 800de10:	2380      	movs	r3, #128	@ 0x80
 800de12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de16:	e120      	b.n	800e05a <UART_SetConfig+0x5a6>
 800de18:	697b      	ldr	r3, [r7, #20]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	4acb      	ldr	r2, [pc, #812]	@ (800e14c <UART_SetConfig+0x698>)
 800de1e:	4293      	cmp	r3, r2
 800de20:	d176      	bne.n	800df10 <UART_SetConfig+0x45c>
 800de22:	4bcb      	ldr	r3, [pc, #812]	@ (800e150 <UART_SetConfig+0x69c>)
 800de24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800de26:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800de2a:	2b28      	cmp	r3, #40	@ 0x28
 800de2c:	d86c      	bhi.n	800df08 <UART_SetConfig+0x454>
 800de2e:	a201      	add	r2, pc, #4	@ (adr r2, 800de34 <UART_SetConfig+0x380>)
 800de30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de34:	0800ded9 	.word	0x0800ded9
 800de38:	0800df09 	.word	0x0800df09
 800de3c:	0800df09 	.word	0x0800df09
 800de40:	0800df09 	.word	0x0800df09
 800de44:	0800df09 	.word	0x0800df09
 800de48:	0800df09 	.word	0x0800df09
 800de4c:	0800df09 	.word	0x0800df09
 800de50:	0800df09 	.word	0x0800df09
 800de54:	0800dee1 	.word	0x0800dee1
 800de58:	0800df09 	.word	0x0800df09
 800de5c:	0800df09 	.word	0x0800df09
 800de60:	0800df09 	.word	0x0800df09
 800de64:	0800df09 	.word	0x0800df09
 800de68:	0800df09 	.word	0x0800df09
 800de6c:	0800df09 	.word	0x0800df09
 800de70:	0800df09 	.word	0x0800df09
 800de74:	0800dee9 	.word	0x0800dee9
 800de78:	0800df09 	.word	0x0800df09
 800de7c:	0800df09 	.word	0x0800df09
 800de80:	0800df09 	.word	0x0800df09
 800de84:	0800df09 	.word	0x0800df09
 800de88:	0800df09 	.word	0x0800df09
 800de8c:	0800df09 	.word	0x0800df09
 800de90:	0800df09 	.word	0x0800df09
 800de94:	0800def1 	.word	0x0800def1
 800de98:	0800df09 	.word	0x0800df09
 800de9c:	0800df09 	.word	0x0800df09
 800dea0:	0800df09 	.word	0x0800df09
 800dea4:	0800df09 	.word	0x0800df09
 800dea8:	0800df09 	.word	0x0800df09
 800deac:	0800df09 	.word	0x0800df09
 800deb0:	0800df09 	.word	0x0800df09
 800deb4:	0800def9 	.word	0x0800def9
 800deb8:	0800df09 	.word	0x0800df09
 800debc:	0800df09 	.word	0x0800df09
 800dec0:	0800df09 	.word	0x0800df09
 800dec4:	0800df09 	.word	0x0800df09
 800dec8:	0800df09 	.word	0x0800df09
 800decc:	0800df09 	.word	0x0800df09
 800ded0:	0800df09 	.word	0x0800df09
 800ded4:	0800df01 	.word	0x0800df01
 800ded8:	2301      	movs	r3, #1
 800deda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dede:	e0bc      	b.n	800e05a <UART_SetConfig+0x5a6>
 800dee0:	2304      	movs	r3, #4
 800dee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dee6:	e0b8      	b.n	800e05a <UART_SetConfig+0x5a6>
 800dee8:	2308      	movs	r3, #8
 800deea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800deee:	e0b4      	b.n	800e05a <UART_SetConfig+0x5a6>
 800def0:	2310      	movs	r3, #16
 800def2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800def6:	e0b0      	b.n	800e05a <UART_SetConfig+0x5a6>
 800def8:	2320      	movs	r3, #32
 800defa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800defe:	e0ac      	b.n	800e05a <UART_SetConfig+0x5a6>
 800df00:	2340      	movs	r3, #64	@ 0x40
 800df02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df06:	e0a8      	b.n	800e05a <UART_SetConfig+0x5a6>
 800df08:	2380      	movs	r3, #128	@ 0x80
 800df0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df0e:	e0a4      	b.n	800e05a <UART_SetConfig+0x5a6>
 800df10:	697b      	ldr	r3, [r7, #20]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	4a8f      	ldr	r2, [pc, #572]	@ (800e154 <UART_SetConfig+0x6a0>)
 800df16:	4293      	cmp	r3, r2
 800df18:	d130      	bne.n	800df7c <UART_SetConfig+0x4c8>
 800df1a:	4b8d      	ldr	r3, [pc, #564]	@ (800e150 <UART_SetConfig+0x69c>)
 800df1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800df1e:	f003 0307 	and.w	r3, r3, #7
 800df22:	2b05      	cmp	r3, #5
 800df24:	d826      	bhi.n	800df74 <UART_SetConfig+0x4c0>
 800df26:	a201      	add	r2, pc, #4	@ (adr r2, 800df2c <UART_SetConfig+0x478>)
 800df28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df2c:	0800df45 	.word	0x0800df45
 800df30:	0800df4d 	.word	0x0800df4d
 800df34:	0800df55 	.word	0x0800df55
 800df38:	0800df5d 	.word	0x0800df5d
 800df3c:	0800df65 	.word	0x0800df65
 800df40:	0800df6d 	.word	0x0800df6d
 800df44:	2300      	movs	r3, #0
 800df46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df4a:	e086      	b.n	800e05a <UART_SetConfig+0x5a6>
 800df4c:	2304      	movs	r3, #4
 800df4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df52:	e082      	b.n	800e05a <UART_SetConfig+0x5a6>
 800df54:	2308      	movs	r3, #8
 800df56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df5a:	e07e      	b.n	800e05a <UART_SetConfig+0x5a6>
 800df5c:	2310      	movs	r3, #16
 800df5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df62:	e07a      	b.n	800e05a <UART_SetConfig+0x5a6>
 800df64:	2320      	movs	r3, #32
 800df66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df6a:	e076      	b.n	800e05a <UART_SetConfig+0x5a6>
 800df6c:	2340      	movs	r3, #64	@ 0x40
 800df6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df72:	e072      	b.n	800e05a <UART_SetConfig+0x5a6>
 800df74:	2380      	movs	r3, #128	@ 0x80
 800df76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df7a:	e06e      	b.n	800e05a <UART_SetConfig+0x5a6>
 800df7c:	697b      	ldr	r3, [r7, #20]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	4a75      	ldr	r2, [pc, #468]	@ (800e158 <UART_SetConfig+0x6a4>)
 800df82:	4293      	cmp	r3, r2
 800df84:	d130      	bne.n	800dfe8 <UART_SetConfig+0x534>
 800df86:	4b72      	ldr	r3, [pc, #456]	@ (800e150 <UART_SetConfig+0x69c>)
 800df88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800df8a:	f003 0307 	and.w	r3, r3, #7
 800df8e:	2b05      	cmp	r3, #5
 800df90:	d826      	bhi.n	800dfe0 <UART_SetConfig+0x52c>
 800df92:	a201      	add	r2, pc, #4	@ (adr r2, 800df98 <UART_SetConfig+0x4e4>)
 800df94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df98:	0800dfb1 	.word	0x0800dfb1
 800df9c:	0800dfb9 	.word	0x0800dfb9
 800dfa0:	0800dfc1 	.word	0x0800dfc1
 800dfa4:	0800dfc9 	.word	0x0800dfc9
 800dfa8:	0800dfd1 	.word	0x0800dfd1
 800dfac:	0800dfd9 	.word	0x0800dfd9
 800dfb0:	2300      	movs	r3, #0
 800dfb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dfb6:	e050      	b.n	800e05a <UART_SetConfig+0x5a6>
 800dfb8:	2304      	movs	r3, #4
 800dfba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dfbe:	e04c      	b.n	800e05a <UART_SetConfig+0x5a6>
 800dfc0:	2308      	movs	r3, #8
 800dfc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dfc6:	e048      	b.n	800e05a <UART_SetConfig+0x5a6>
 800dfc8:	2310      	movs	r3, #16
 800dfca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dfce:	e044      	b.n	800e05a <UART_SetConfig+0x5a6>
 800dfd0:	2320      	movs	r3, #32
 800dfd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dfd6:	e040      	b.n	800e05a <UART_SetConfig+0x5a6>
 800dfd8:	2340      	movs	r3, #64	@ 0x40
 800dfda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dfde:	e03c      	b.n	800e05a <UART_SetConfig+0x5a6>
 800dfe0:	2380      	movs	r3, #128	@ 0x80
 800dfe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dfe6:	e038      	b.n	800e05a <UART_SetConfig+0x5a6>
 800dfe8:	697b      	ldr	r3, [r7, #20]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	4a5b      	ldr	r2, [pc, #364]	@ (800e15c <UART_SetConfig+0x6a8>)
 800dfee:	4293      	cmp	r3, r2
 800dff0:	d130      	bne.n	800e054 <UART_SetConfig+0x5a0>
 800dff2:	4b57      	ldr	r3, [pc, #348]	@ (800e150 <UART_SetConfig+0x69c>)
 800dff4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dff6:	f003 0307 	and.w	r3, r3, #7
 800dffa:	2b05      	cmp	r3, #5
 800dffc:	d826      	bhi.n	800e04c <UART_SetConfig+0x598>
 800dffe:	a201      	add	r2, pc, #4	@ (adr r2, 800e004 <UART_SetConfig+0x550>)
 800e000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e004:	0800e01d 	.word	0x0800e01d
 800e008:	0800e025 	.word	0x0800e025
 800e00c:	0800e02d 	.word	0x0800e02d
 800e010:	0800e035 	.word	0x0800e035
 800e014:	0800e03d 	.word	0x0800e03d
 800e018:	0800e045 	.word	0x0800e045
 800e01c:	2302      	movs	r3, #2
 800e01e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e022:	e01a      	b.n	800e05a <UART_SetConfig+0x5a6>
 800e024:	2304      	movs	r3, #4
 800e026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e02a:	e016      	b.n	800e05a <UART_SetConfig+0x5a6>
 800e02c:	2308      	movs	r3, #8
 800e02e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e032:	e012      	b.n	800e05a <UART_SetConfig+0x5a6>
 800e034:	2310      	movs	r3, #16
 800e036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e03a:	e00e      	b.n	800e05a <UART_SetConfig+0x5a6>
 800e03c:	2320      	movs	r3, #32
 800e03e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e042:	e00a      	b.n	800e05a <UART_SetConfig+0x5a6>
 800e044:	2340      	movs	r3, #64	@ 0x40
 800e046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e04a:	e006      	b.n	800e05a <UART_SetConfig+0x5a6>
 800e04c:	2380      	movs	r3, #128	@ 0x80
 800e04e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e052:	e002      	b.n	800e05a <UART_SetConfig+0x5a6>
 800e054:	2380      	movs	r3, #128	@ 0x80
 800e056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e05a:	697b      	ldr	r3, [r7, #20]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	4a3f      	ldr	r2, [pc, #252]	@ (800e15c <UART_SetConfig+0x6a8>)
 800e060:	4293      	cmp	r3, r2
 800e062:	f040 80f8 	bne.w	800e256 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e066:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e06a:	2b20      	cmp	r3, #32
 800e06c:	dc46      	bgt.n	800e0fc <UART_SetConfig+0x648>
 800e06e:	2b02      	cmp	r3, #2
 800e070:	f2c0 8082 	blt.w	800e178 <UART_SetConfig+0x6c4>
 800e074:	3b02      	subs	r3, #2
 800e076:	2b1e      	cmp	r3, #30
 800e078:	d87e      	bhi.n	800e178 <UART_SetConfig+0x6c4>
 800e07a:	a201      	add	r2, pc, #4	@ (adr r2, 800e080 <UART_SetConfig+0x5cc>)
 800e07c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e080:	0800e103 	.word	0x0800e103
 800e084:	0800e179 	.word	0x0800e179
 800e088:	0800e10b 	.word	0x0800e10b
 800e08c:	0800e179 	.word	0x0800e179
 800e090:	0800e179 	.word	0x0800e179
 800e094:	0800e179 	.word	0x0800e179
 800e098:	0800e11b 	.word	0x0800e11b
 800e09c:	0800e179 	.word	0x0800e179
 800e0a0:	0800e179 	.word	0x0800e179
 800e0a4:	0800e179 	.word	0x0800e179
 800e0a8:	0800e179 	.word	0x0800e179
 800e0ac:	0800e179 	.word	0x0800e179
 800e0b0:	0800e179 	.word	0x0800e179
 800e0b4:	0800e179 	.word	0x0800e179
 800e0b8:	0800e12b 	.word	0x0800e12b
 800e0bc:	0800e179 	.word	0x0800e179
 800e0c0:	0800e179 	.word	0x0800e179
 800e0c4:	0800e179 	.word	0x0800e179
 800e0c8:	0800e179 	.word	0x0800e179
 800e0cc:	0800e179 	.word	0x0800e179
 800e0d0:	0800e179 	.word	0x0800e179
 800e0d4:	0800e179 	.word	0x0800e179
 800e0d8:	0800e179 	.word	0x0800e179
 800e0dc:	0800e179 	.word	0x0800e179
 800e0e0:	0800e179 	.word	0x0800e179
 800e0e4:	0800e179 	.word	0x0800e179
 800e0e8:	0800e179 	.word	0x0800e179
 800e0ec:	0800e179 	.word	0x0800e179
 800e0f0:	0800e179 	.word	0x0800e179
 800e0f4:	0800e179 	.word	0x0800e179
 800e0f8:	0800e16b 	.word	0x0800e16b
 800e0fc:	2b40      	cmp	r3, #64	@ 0x40
 800e0fe:	d037      	beq.n	800e170 <UART_SetConfig+0x6bc>
 800e100:	e03a      	b.n	800e178 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e102:	f7fd f83d 	bl	800b180 <HAL_RCCEx_GetD3PCLK1Freq>
 800e106:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e108:	e03c      	b.n	800e184 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e10a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e10e:	4618      	mov	r0, r3
 800e110:	f7fd f84c 	bl	800b1ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e116:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e118:	e034      	b.n	800e184 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e11a:	f107 0318 	add.w	r3, r7, #24
 800e11e:	4618      	mov	r0, r3
 800e120:	f7fd f998 	bl	800b454 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e124:	69fb      	ldr	r3, [r7, #28]
 800e126:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e128:	e02c      	b.n	800e184 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e12a:	4b09      	ldr	r3, [pc, #36]	@ (800e150 <UART_SetConfig+0x69c>)
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	f003 0320 	and.w	r3, r3, #32
 800e132:	2b00      	cmp	r3, #0
 800e134:	d016      	beq.n	800e164 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e136:	4b06      	ldr	r3, [pc, #24]	@ (800e150 <UART_SetConfig+0x69c>)
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	08db      	lsrs	r3, r3, #3
 800e13c:	f003 0303 	and.w	r3, r3, #3
 800e140:	4a07      	ldr	r2, [pc, #28]	@ (800e160 <UART_SetConfig+0x6ac>)
 800e142:	fa22 f303 	lsr.w	r3, r2, r3
 800e146:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e148:	e01c      	b.n	800e184 <UART_SetConfig+0x6d0>
 800e14a:	bf00      	nop
 800e14c:	40011400 	.word	0x40011400
 800e150:	58024400 	.word	0x58024400
 800e154:	40007800 	.word	0x40007800
 800e158:	40007c00 	.word	0x40007c00
 800e15c:	58000c00 	.word	0x58000c00
 800e160:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800e164:	4b9d      	ldr	r3, [pc, #628]	@ (800e3dc <UART_SetConfig+0x928>)
 800e166:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e168:	e00c      	b.n	800e184 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e16a:	4b9d      	ldr	r3, [pc, #628]	@ (800e3e0 <UART_SetConfig+0x92c>)
 800e16c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e16e:	e009      	b.n	800e184 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e170:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e174:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e176:	e005      	b.n	800e184 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800e178:	2300      	movs	r3, #0
 800e17a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800e17c:	2301      	movs	r3, #1
 800e17e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800e182:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e184:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e186:	2b00      	cmp	r3, #0
 800e188:	f000 81de 	beq.w	800e548 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e18c:	697b      	ldr	r3, [r7, #20]
 800e18e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e190:	4a94      	ldr	r2, [pc, #592]	@ (800e3e4 <UART_SetConfig+0x930>)
 800e192:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e196:	461a      	mov	r2, r3
 800e198:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e19a:	fbb3 f3f2 	udiv	r3, r3, r2
 800e19e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e1a0:	697b      	ldr	r3, [r7, #20]
 800e1a2:	685a      	ldr	r2, [r3, #4]
 800e1a4:	4613      	mov	r3, r2
 800e1a6:	005b      	lsls	r3, r3, #1
 800e1a8:	4413      	add	r3, r2
 800e1aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e1ac:	429a      	cmp	r2, r3
 800e1ae:	d305      	bcc.n	800e1bc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e1b0:	697b      	ldr	r3, [r7, #20]
 800e1b2:	685b      	ldr	r3, [r3, #4]
 800e1b4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e1b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e1b8:	429a      	cmp	r2, r3
 800e1ba:	d903      	bls.n	800e1c4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800e1bc:	2301      	movs	r3, #1
 800e1be:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e1c2:	e1c1      	b.n	800e548 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e1c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e1c6:	2200      	movs	r2, #0
 800e1c8:	60bb      	str	r3, [r7, #8]
 800e1ca:	60fa      	str	r2, [r7, #12]
 800e1cc:	697b      	ldr	r3, [r7, #20]
 800e1ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e1d0:	4a84      	ldr	r2, [pc, #528]	@ (800e3e4 <UART_SetConfig+0x930>)
 800e1d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e1d6:	b29b      	uxth	r3, r3
 800e1d8:	2200      	movs	r2, #0
 800e1da:	603b      	str	r3, [r7, #0]
 800e1dc:	607a      	str	r2, [r7, #4]
 800e1de:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e1e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e1e6:	f7f2 f8e3 	bl	80003b0 <__aeabi_uldivmod>
 800e1ea:	4602      	mov	r2, r0
 800e1ec:	460b      	mov	r3, r1
 800e1ee:	4610      	mov	r0, r2
 800e1f0:	4619      	mov	r1, r3
 800e1f2:	f04f 0200 	mov.w	r2, #0
 800e1f6:	f04f 0300 	mov.w	r3, #0
 800e1fa:	020b      	lsls	r3, r1, #8
 800e1fc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e200:	0202      	lsls	r2, r0, #8
 800e202:	6979      	ldr	r1, [r7, #20]
 800e204:	6849      	ldr	r1, [r1, #4]
 800e206:	0849      	lsrs	r1, r1, #1
 800e208:	2000      	movs	r0, #0
 800e20a:	460c      	mov	r4, r1
 800e20c:	4605      	mov	r5, r0
 800e20e:	eb12 0804 	adds.w	r8, r2, r4
 800e212:	eb43 0905 	adc.w	r9, r3, r5
 800e216:	697b      	ldr	r3, [r7, #20]
 800e218:	685b      	ldr	r3, [r3, #4]
 800e21a:	2200      	movs	r2, #0
 800e21c:	469a      	mov	sl, r3
 800e21e:	4693      	mov	fp, r2
 800e220:	4652      	mov	r2, sl
 800e222:	465b      	mov	r3, fp
 800e224:	4640      	mov	r0, r8
 800e226:	4649      	mov	r1, r9
 800e228:	f7f2 f8c2 	bl	80003b0 <__aeabi_uldivmod>
 800e22c:	4602      	mov	r2, r0
 800e22e:	460b      	mov	r3, r1
 800e230:	4613      	mov	r3, r2
 800e232:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e236:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e23a:	d308      	bcc.n	800e24e <UART_SetConfig+0x79a>
 800e23c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e23e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e242:	d204      	bcs.n	800e24e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800e244:	697b      	ldr	r3, [r7, #20]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e24a:	60da      	str	r2, [r3, #12]
 800e24c:	e17c      	b.n	800e548 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800e24e:	2301      	movs	r3, #1
 800e250:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e254:	e178      	b.n	800e548 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e256:	697b      	ldr	r3, [r7, #20]
 800e258:	69db      	ldr	r3, [r3, #28]
 800e25a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e25e:	f040 80c5 	bne.w	800e3ec <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800e262:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e266:	2b20      	cmp	r3, #32
 800e268:	dc48      	bgt.n	800e2fc <UART_SetConfig+0x848>
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	db7b      	blt.n	800e366 <UART_SetConfig+0x8b2>
 800e26e:	2b20      	cmp	r3, #32
 800e270:	d879      	bhi.n	800e366 <UART_SetConfig+0x8b2>
 800e272:	a201      	add	r2, pc, #4	@ (adr r2, 800e278 <UART_SetConfig+0x7c4>)
 800e274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e278:	0800e303 	.word	0x0800e303
 800e27c:	0800e30b 	.word	0x0800e30b
 800e280:	0800e367 	.word	0x0800e367
 800e284:	0800e367 	.word	0x0800e367
 800e288:	0800e313 	.word	0x0800e313
 800e28c:	0800e367 	.word	0x0800e367
 800e290:	0800e367 	.word	0x0800e367
 800e294:	0800e367 	.word	0x0800e367
 800e298:	0800e323 	.word	0x0800e323
 800e29c:	0800e367 	.word	0x0800e367
 800e2a0:	0800e367 	.word	0x0800e367
 800e2a4:	0800e367 	.word	0x0800e367
 800e2a8:	0800e367 	.word	0x0800e367
 800e2ac:	0800e367 	.word	0x0800e367
 800e2b0:	0800e367 	.word	0x0800e367
 800e2b4:	0800e367 	.word	0x0800e367
 800e2b8:	0800e333 	.word	0x0800e333
 800e2bc:	0800e367 	.word	0x0800e367
 800e2c0:	0800e367 	.word	0x0800e367
 800e2c4:	0800e367 	.word	0x0800e367
 800e2c8:	0800e367 	.word	0x0800e367
 800e2cc:	0800e367 	.word	0x0800e367
 800e2d0:	0800e367 	.word	0x0800e367
 800e2d4:	0800e367 	.word	0x0800e367
 800e2d8:	0800e367 	.word	0x0800e367
 800e2dc:	0800e367 	.word	0x0800e367
 800e2e0:	0800e367 	.word	0x0800e367
 800e2e4:	0800e367 	.word	0x0800e367
 800e2e8:	0800e367 	.word	0x0800e367
 800e2ec:	0800e367 	.word	0x0800e367
 800e2f0:	0800e367 	.word	0x0800e367
 800e2f4:	0800e367 	.word	0x0800e367
 800e2f8:	0800e359 	.word	0x0800e359
 800e2fc:	2b40      	cmp	r3, #64	@ 0x40
 800e2fe:	d02e      	beq.n	800e35e <UART_SetConfig+0x8aa>
 800e300:	e031      	b.n	800e366 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e302:	f7fa ff87 	bl	8009214 <HAL_RCC_GetPCLK1Freq>
 800e306:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e308:	e033      	b.n	800e372 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e30a:	f7fa ff99 	bl	8009240 <HAL_RCC_GetPCLK2Freq>
 800e30e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e310:	e02f      	b.n	800e372 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e312:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e316:	4618      	mov	r0, r3
 800e318:	f7fc ff48 	bl	800b1ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e31c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e31e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e320:	e027      	b.n	800e372 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e322:	f107 0318 	add.w	r3, r7, #24
 800e326:	4618      	mov	r0, r3
 800e328:	f7fd f894 	bl	800b454 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e32c:	69fb      	ldr	r3, [r7, #28]
 800e32e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e330:	e01f      	b.n	800e372 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e332:	4b2d      	ldr	r3, [pc, #180]	@ (800e3e8 <UART_SetConfig+0x934>)
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	f003 0320 	and.w	r3, r3, #32
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d009      	beq.n	800e352 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e33e:	4b2a      	ldr	r3, [pc, #168]	@ (800e3e8 <UART_SetConfig+0x934>)
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	08db      	lsrs	r3, r3, #3
 800e344:	f003 0303 	and.w	r3, r3, #3
 800e348:	4a24      	ldr	r2, [pc, #144]	@ (800e3dc <UART_SetConfig+0x928>)
 800e34a:	fa22 f303 	lsr.w	r3, r2, r3
 800e34e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e350:	e00f      	b.n	800e372 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e352:	4b22      	ldr	r3, [pc, #136]	@ (800e3dc <UART_SetConfig+0x928>)
 800e354:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e356:	e00c      	b.n	800e372 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e358:	4b21      	ldr	r3, [pc, #132]	@ (800e3e0 <UART_SetConfig+0x92c>)
 800e35a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e35c:	e009      	b.n	800e372 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e35e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e362:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e364:	e005      	b.n	800e372 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e366:	2300      	movs	r3, #0
 800e368:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800e36a:	2301      	movs	r3, #1
 800e36c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800e370:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e372:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e374:	2b00      	cmp	r3, #0
 800e376:	f000 80e7 	beq.w	800e548 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e37a:	697b      	ldr	r3, [r7, #20]
 800e37c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e37e:	4a19      	ldr	r2, [pc, #100]	@ (800e3e4 <UART_SetConfig+0x930>)
 800e380:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e384:	461a      	mov	r2, r3
 800e386:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e388:	fbb3 f3f2 	udiv	r3, r3, r2
 800e38c:	005a      	lsls	r2, r3, #1
 800e38e:	697b      	ldr	r3, [r7, #20]
 800e390:	685b      	ldr	r3, [r3, #4]
 800e392:	085b      	lsrs	r3, r3, #1
 800e394:	441a      	add	r2, r3
 800e396:	697b      	ldr	r3, [r7, #20]
 800e398:	685b      	ldr	r3, [r3, #4]
 800e39a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e39e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e3a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3a2:	2b0f      	cmp	r3, #15
 800e3a4:	d916      	bls.n	800e3d4 <UART_SetConfig+0x920>
 800e3a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e3ac:	d212      	bcs.n	800e3d4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e3ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3b0:	b29b      	uxth	r3, r3
 800e3b2:	f023 030f 	bic.w	r3, r3, #15
 800e3b6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e3b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3ba:	085b      	lsrs	r3, r3, #1
 800e3bc:	b29b      	uxth	r3, r3
 800e3be:	f003 0307 	and.w	r3, r3, #7
 800e3c2:	b29a      	uxth	r2, r3
 800e3c4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e3c6:	4313      	orrs	r3, r2
 800e3c8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800e3ca:	697b      	ldr	r3, [r7, #20]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800e3d0:	60da      	str	r2, [r3, #12]
 800e3d2:	e0b9      	b.n	800e548 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e3d4:	2301      	movs	r3, #1
 800e3d6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e3da:	e0b5      	b.n	800e548 <UART_SetConfig+0xa94>
 800e3dc:	03d09000 	.word	0x03d09000
 800e3e0:	003d0900 	.word	0x003d0900
 800e3e4:	08012728 	.word	0x08012728
 800e3e8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800e3ec:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e3f0:	2b20      	cmp	r3, #32
 800e3f2:	dc49      	bgt.n	800e488 <UART_SetConfig+0x9d4>
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	db7c      	blt.n	800e4f2 <UART_SetConfig+0xa3e>
 800e3f8:	2b20      	cmp	r3, #32
 800e3fa:	d87a      	bhi.n	800e4f2 <UART_SetConfig+0xa3e>
 800e3fc:	a201      	add	r2, pc, #4	@ (adr r2, 800e404 <UART_SetConfig+0x950>)
 800e3fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e402:	bf00      	nop
 800e404:	0800e48f 	.word	0x0800e48f
 800e408:	0800e497 	.word	0x0800e497
 800e40c:	0800e4f3 	.word	0x0800e4f3
 800e410:	0800e4f3 	.word	0x0800e4f3
 800e414:	0800e49f 	.word	0x0800e49f
 800e418:	0800e4f3 	.word	0x0800e4f3
 800e41c:	0800e4f3 	.word	0x0800e4f3
 800e420:	0800e4f3 	.word	0x0800e4f3
 800e424:	0800e4af 	.word	0x0800e4af
 800e428:	0800e4f3 	.word	0x0800e4f3
 800e42c:	0800e4f3 	.word	0x0800e4f3
 800e430:	0800e4f3 	.word	0x0800e4f3
 800e434:	0800e4f3 	.word	0x0800e4f3
 800e438:	0800e4f3 	.word	0x0800e4f3
 800e43c:	0800e4f3 	.word	0x0800e4f3
 800e440:	0800e4f3 	.word	0x0800e4f3
 800e444:	0800e4bf 	.word	0x0800e4bf
 800e448:	0800e4f3 	.word	0x0800e4f3
 800e44c:	0800e4f3 	.word	0x0800e4f3
 800e450:	0800e4f3 	.word	0x0800e4f3
 800e454:	0800e4f3 	.word	0x0800e4f3
 800e458:	0800e4f3 	.word	0x0800e4f3
 800e45c:	0800e4f3 	.word	0x0800e4f3
 800e460:	0800e4f3 	.word	0x0800e4f3
 800e464:	0800e4f3 	.word	0x0800e4f3
 800e468:	0800e4f3 	.word	0x0800e4f3
 800e46c:	0800e4f3 	.word	0x0800e4f3
 800e470:	0800e4f3 	.word	0x0800e4f3
 800e474:	0800e4f3 	.word	0x0800e4f3
 800e478:	0800e4f3 	.word	0x0800e4f3
 800e47c:	0800e4f3 	.word	0x0800e4f3
 800e480:	0800e4f3 	.word	0x0800e4f3
 800e484:	0800e4e5 	.word	0x0800e4e5
 800e488:	2b40      	cmp	r3, #64	@ 0x40
 800e48a:	d02e      	beq.n	800e4ea <UART_SetConfig+0xa36>
 800e48c:	e031      	b.n	800e4f2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e48e:	f7fa fec1 	bl	8009214 <HAL_RCC_GetPCLK1Freq>
 800e492:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e494:	e033      	b.n	800e4fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e496:	f7fa fed3 	bl	8009240 <HAL_RCC_GetPCLK2Freq>
 800e49a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e49c:	e02f      	b.n	800e4fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e49e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	f7fc fe82 	bl	800b1ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e4a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e4ac:	e027      	b.n	800e4fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e4ae:	f107 0318 	add.w	r3, r7, #24
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	f7fc ffce 	bl	800b454 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e4b8:	69fb      	ldr	r3, [r7, #28]
 800e4ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e4bc:	e01f      	b.n	800e4fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e4be:	4b2d      	ldr	r3, [pc, #180]	@ (800e574 <UART_SetConfig+0xac0>)
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	f003 0320 	and.w	r3, r3, #32
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d009      	beq.n	800e4de <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e4ca:	4b2a      	ldr	r3, [pc, #168]	@ (800e574 <UART_SetConfig+0xac0>)
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	08db      	lsrs	r3, r3, #3
 800e4d0:	f003 0303 	and.w	r3, r3, #3
 800e4d4:	4a28      	ldr	r2, [pc, #160]	@ (800e578 <UART_SetConfig+0xac4>)
 800e4d6:	fa22 f303 	lsr.w	r3, r2, r3
 800e4da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e4dc:	e00f      	b.n	800e4fe <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800e4de:	4b26      	ldr	r3, [pc, #152]	@ (800e578 <UART_SetConfig+0xac4>)
 800e4e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e4e2:	e00c      	b.n	800e4fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e4e4:	4b25      	ldr	r3, [pc, #148]	@ (800e57c <UART_SetConfig+0xac8>)
 800e4e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e4e8:	e009      	b.n	800e4fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e4ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e4ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e4f0:	e005      	b.n	800e4fe <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800e4f6:	2301      	movs	r3, #1
 800e4f8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800e4fc:	bf00      	nop
    }

    if (pclk != 0U)
 800e4fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e500:	2b00      	cmp	r3, #0
 800e502:	d021      	beq.n	800e548 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e504:	697b      	ldr	r3, [r7, #20]
 800e506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e508:	4a1d      	ldr	r2, [pc, #116]	@ (800e580 <UART_SetConfig+0xacc>)
 800e50a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e50e:	461a      	mov	r2, r3
 800e510:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e512:	fbb3 f2f2 	udiv	r2, r3, r2
 800e516:	697b      	ldr	r3, [r7, #20]
 800e518:	685b      	ldr	r3, [r3, #4]
 800e51a:	085b      	lsrs	r3, r3, #1
 800e51c:	441a      	add	r2, r3
 800e51e:	697b      	ldr	r3, [r7, #20]
 800e520:	685b      	ldr	r3, [r3, #4]
 800e522:	fbb2 f3f3 	udiv	r3, r2, r3
 800e526:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e52a:	2b0f      	cmp	r3, #15
 800e52c:	d909      	bls.n	800e542 <UART_SetConfig+0xa8e>
 800e52e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e530:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e534:	d205      	bcs.n	800e542 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e538:	b29a      	uxth	r2, r3
 800e53a:	697b      	ldr	r3, [r7, #20]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	60da      	str	r2, [r3, #12]
 800e540:	e002      	b.n	800e548 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e542:	2301      	movs	r3, #1
 800e544:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e548:	697b      	ldr	r3, [r7, #20]
 800e54a:	2201      	movs	r2, #1
 800e54c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800e550:	697b      	ldr	r3, [r7, #20]
 800e552:	2201      	movs	r2, #1
 800e554:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e558:	697b      	ldr	r3, [r7, #20]
 800e55a:	2200      	movs	r2, #0
 800e55c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800e55e:	697b      	ldr	r3, [r7, #20]
 800e560:	2200      	movs	r2, #0
 800e562:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800e564:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800e568:	4618      	mov	r0, r3
 800e56a:	3748      	adds	r7, #72	@ 0x48
 800e56c:	46bd      	mov	sp, r7
 800e56e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e572:	bf00      	nop
 800e574:	58024400 	.word	0x58024400
 800e578:	03d09000 	.word	0x03d09000
 800e57c:	003d0900 	.word	0x003d0900
 800e580:	08012728 	.word	0x08012728

0800e584 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e584:	b480      	push	{r7}
 800e586:	b083      	sub	sp, #12
 800e588:	af00      	add	r7, sp, #0
 800e58a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e590:	f003 0308 	and.w	r3, r3, #8
 800e594:	2b00      	cmp	r3, #0
 800e596:	d00a      	beq.n	800e5ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	685b      	ldr	r3, [r3, #4]
 800e59e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	430a      	orrs	r2, r1
 800e5ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e5b2:	f003 0301 	and.w	r3, r3, #1
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d00a      	beq.n	800e5d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	685b      	ldr	r3, [r3, #4]
 800e5c0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	430a      	orrs	r2, r1
 800e5ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e5d4:	f003 0302 	and.w	r3, r3, #2
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d00a      	beq.n	800e5f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	685b      	ldr	r3, [r3, #4]
 800e5e2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	430a      	orrs	r2, r1
 800e5f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e5f6:	f003 0304 	and.w	r3, r3, #4
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d00a      	beq.n	800e614 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	685b      	ldr	r3, [r3, #4]
 800e604:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	430a      	orrs	r2, r1
 800e612:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e618:	f003 0310 	and.w	r3, r3, #16
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d00a      	beq.n	800e636 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	689b      	ldr	r3, [r3, #8]
 800e626:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	430a      	orrs	r2, r1
 800e634:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e63a:	f003 0320 	and.w	r3, r3, #32
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d00a      	beq.n	800e658 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	689b      	ldr	r3, [r3, #8]
 800e648:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	430a      	orrs	r2, r1
 800e656:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e65c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e660:	2b00      	cmp	r3, #0
 800e662:	d01a      	beq.n	800e69a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	685b      	ldr	r3, [r3, #4]
 800e66a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	430a      	orrs	r2, r1
 800e678:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e67e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e682:	d10a      	bne.n	800e69a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	685b      	ldr	r3, [r3, #4]
 800e68a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	430a      	orrs	r2, r1
 800e698:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e69e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d00a      	beq.n	800e6bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	685b      	ldr	r3, [r3, #4]
 800e6ac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	430a      	orrs	r2, r1
 800e6ba:	605a      	str	r2, [r3, #4]
  }
}
 800e6bc:	bf00      	nop
 800e6be:	370c      	adds	r7, #12
 800e6c0:	46bd      	mov	sp, r7
 800e6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c6:	4770      	bx	lr

0800e6c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b098      	sub	sp, #96	@ 0x60
 800e6cc:	af02      	add	r7, sp, #8
 800e6ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	2200      	movs	r2, #0
 800e6d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e6d8:	f7f4 fe26 	bl	8003328 <HAL_GetTick>
 800e6dc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	f003 0308 	and.w	r3, r3, #8
 800e6e8:	2b08      	cmp	r3, #8
 800e6ea:	d12f      	bne.n	800e74c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e6ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e6f0:	9300      	str	r3, [sp, #0]
 800e6f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e6f4:	2200      	movs	r2, #0
 800e6f6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800e6fa:	6878      	ldr	r0, [r7, #4]
 800e6fc:	f000 f88e 	bl	800e81c <UART_WaitOnFlagUntilTimeout>
 800e700:	4603      	mov	r3, r0
 800e702:	2b00      	cmp	r3, #0
 800e704:	d022      	beq.n	800e74c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e70c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e70e:	e853 3f00 	ldrex	r3, [r3]
 800e712:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e714:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e716:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e71a:	653b      	str	r3, [r7, #80]	@ 0x50
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	461a      	mov	r2, r3
 800e722:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e724:	647b      	str	r3, [r7, #68]	@ 0x44
 800e726:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e728:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e72a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e72c:	e841 2300 	strex	r3, r2, [r1]
 800e730:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e732:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e734:	2b00      	cmp	r3, #0
 800e736:	d1e6      	bne.n	800e706 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	2220      	movs	r2, #32
 800e73c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	2200      	movs	r2, #0
 800e744:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e748:	2303      	movs	r3, #3
 800e74a:	e063      	b.n	800e814 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	f003 0304 	and.w	r3, r3, #4
 800e756:	2b04      	cmp	r3, #4
 800e758:	d149      	bne.n	800e7ee <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e75a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e75e:	9300      	str	r3, [sp, #0]
 800e760:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e762:	2200      	movs	r2, #0
 800e764:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800e768:	6878      	ldr	r0, [r7, #4]
 800e76a:	f000 f857 	bl	800e81c <UART_WaitOnFlagUntilTimeout>
 800e76e:	4603      	mov	r3, r0
 800e770:	2b00      	cmp	r3, #0
 800e772:	d03c      	beq.n	800e7ee <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e77a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e77c:	e853 3f00 	ldrex	r3, [r3]
 800e780:	623b      	str	r3, [r7, #32]
   return(result);
 800e782:	6a3b      	ldr	r3, [r7, #32]
 800e784:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e788:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	461a      	mov	r2, r3
 800e790:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e792:	633b      	str	r3, [r7, #48]	@ 0x30
 800e794:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e796:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e798:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e79a:	e841 2300 	strex	r3, r2, [r1]
 800e79e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e7a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d1e6      	bne.n	800e774 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	3308      	adds	r3, #8
 800e7ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7ae:	693b      	ldr	r3, [r7, #16]
 800e7b0:	e853 3f00 	ldrex	r3, [r3]
 800e7b4:	60fb      	str	r3, [r7, #12]
   return(result);
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	f023 0301 	bic.w	r3, r3, #1
 800e7bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	3308      	adds	r3, #8
 800e7c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e7c6:	61fa      	str	r2, [r7, #28]
 800e7c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7ca:	69b9      	ldr	r1, [r7, #24]
 800e7cc:	69fa      	ldr	r2, [r7, #28]
 800e7ce:	e841 2300 	strex	r3, r2, [r1]
 800e7d2:	617b      	str	r3, [r7, #20]
   return(result);
 800e7d4:	697b      	ldr	r3, [r7, #20]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d1e5      	bne.n	800e7a6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	2220      	movs	r2, #32
 800e7de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	2200      	movs	r2, #0
 800e7e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e7ea:	2303      	movs	r3, #3
 800e7ec:	e012      	b.n	800e814 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	2220      	movs	r2, #32
 800e7f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	2220      	movs	r2, #32
 800e7fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	2200      	movs	r2, #0
 800e802:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	2200      	movs	r2, #0
 800e808:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	2200      	movs	r2, #0
 800e80e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e812:	2300      	movs	r3, #0
}
 800e814:	4618      	mov	r0, r3
 800e816:	3758      	adds	r7, #88	@ 0x58
 800e818:	46bd      	mov	sp, r7
 800e81a:	bd80      	pop	{r7, pc}

0800e81c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e81c:	b580      	push	{r7, lr}
 800e81e:	b084      	sub	sp, #16
 800e820:	af00      	add	r7, sp, #0
 800e822:	60f8      	str	r0, [r7, #12]
 800e824:	60b9      	str	r1, [r7, #8]
 800e826:	603b      	str	r3, [r7, #0]
 800e828:	4613      	mov	r3, r2
 800e82a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e82c:	e04f      	b.n	800e8ce <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e82e:	69bb      	ldr	r3, [r7, #24]
 800e830:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e834:	d04b      	beq.n	800e8ce <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e836:	f7f4 fd77 	bl	8003328 <HAL_GetTick>
 800e83a:	4602      	mov	r2, r0
 800e83c:	683b      	ldr	r3, [r7, #0]
 800e83e:	1ad3      	subs	r3, r2, r3
 800e840:	69ba      	ldr	r2, [r7, #24]
 800e842:	429a      	cmp	r2, r3
 800e844:	d302      	bcc.n	800e84c <UART_WaitOnFlagUntilTimeout+0x30>
 800e846:	69bb      	ldr	r3, [r7, #24]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d101      	bne.n	800e850 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e84c:	2303      	movs	r3, #3
 800e84e:	e04e      	b.n	800e8ee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	f003 0304 	and.w	r3, r3, #4
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d037      	beq.n	800e8ce <UART_WaitOnFlagUntilTimeout+0xb2>
 800e85e:	68bb      	ldr	r3, [r7, #8]
 800e860:	2b80      	cmp	r3, #128	@ 0x80
 800e862:	d034      	beq.n	800e8ce <UART_WaitOnFlagUntilTimeout+0xb2>
 800e864:	68bb      	ldr	r3, [r7, #8]
 800e866:	2b40      	cmp	r3, #64	@ 0x40
 800e868:	d031      	beq.n	800e8ce <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	69db      	ldr	r3, [r3, #28]
 800e870:	f003 0308 	and.w	r3, r3, #8
 800e874:	2b08      	cmp	r3, #8
 800e876:	d110      	bne.n	800e89a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	2208      	movs	r2, #8
 800e87e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e880:	68f8      	ldr	r0, [r7, #12]
 800e882:	f000 f95b 	bl	800eb3c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	2208      	movs	r2, #8
 800e88a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	2200      	movs	r2, #0
 800e892:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800e896:	2301      	movs	r3, #1
 800e898:	e029      	b.n	800e8ee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	69db      	ldr	r3, [r3, #28]
 800e8a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e8a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e8a8:	d111      	bne.n	800e8ce <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e8b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e8b4:	68f8      	ldr	r0, [r7, #12]
 800e8b6:	f000 f941 	bl	800eb3c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	2220      	movs	r2, #32
 800e8be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	2200      	movs	r2, #0
 800e8c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800e8ca:	2303      	movs	r3, #3
 800e8cc:	e00f      	b.n	800e8ee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	69da      	ldr	r2, [r3, #28]
 800e8d4:	68bb      	ldr	r3, [r7, #8]
 800e8d6:	4013      	ands	r3, r2
 800e8d8:	68ba      	ldr	r2, [r7, #8]
 800e8da:	429a      	cmp	r2, r3
 800e8dc:	bf0c      	ite	eq
 800e8de:	2301      	moveq	r3, #1
 800e8e0:	2300      	movne	r3, #0
 800e8e2:	b2db      	uxtb	r3, r3
 800e8e4:	461a      	mov	r2, r3
 800e8e6:	79fb      	ldrb	r3, [r7, #7]
 800e8e8:	429a      	cmp	r2, r3
 800e8ea:	d0a0      	beq.n	800e82e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e8ec:	2300      	movs	r3, #0
}
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	3710      	adds	r7, #16
 800e8f2:	46bd      	mov	sp, r7
 800e8f4:	bd80      	pop	{r7, pc}
	...

0800e8f8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e8f8:	b480      	push	{r7}
 800e8fa:	b0a3      	sub	sp, #140	@ 0x8c
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	60f8      	str	r0, [r7, #12]
 800e900:	60b9      	str	r1, [r7, #8]
 800e902:	4613      	mov	r3, r2
 800e904:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	68ba      	ldr	r2, [r7, #8]
 800e90a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	88fa      	ldrh	r2, [r7, #6]
 800e910:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	88fa      	ldrh	r2, [r7, #6]
 800e918:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	2200      	movs	r2, #0
 800e920:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	689b      	ldr	r3, [r3, #8]
 800e926:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e92a:	d10e      	bne.n	800e94a <UART_Start_Receive_IT+0x52>
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	691b      	ldr	r3, [r3, #16]
 800e930:	2b00      	cmp	r3, #0
 800e932:	d105      	bne.n	800e940 <UART_Start_Receive_IT+0x48>
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800e93a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e93e:	e02d      	b.n	800e99c <UART_Start_Receive_IT+0xa4>
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	22ff      	movs	r2, #255	@ 0xff
 800e944:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e948:	e028      	b.n	800e99c <UART_Start_Receive_IT+0xa4>
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	689b      	ldr	r3, [r3, #8]
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d10d      	bne.n	800e96e <UART_Start_Receive_IT+0x76>
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	691b      	ldr	r3, [r3, #16]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d104      	bne.n	800e964 <UART_Start_Receive_IT+0x6c>
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	22ff      	movs	r2, #255	@ 0xff
 800e95e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e962:	e01b      	b.n	800e99c <UART_Start_Receive_IT+0xa4>
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	227f      	movs	r2, #127	@ 0x7f
 800e968:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e96c:	e016      	b.n	800e99c <UART_Start_Receive_IT+0xa4>
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	689b      	ldr	r3, [r3, #8]
 800e972:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e976:	d10d      	bne.n	800e994 <UART_Start_Receive_IT+0x9c>
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	691b      	ldr	r3, [r3, #16]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d104      	bne.n	800e98a <UART_Start_Receive_IT+0x92>
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	227f      	movs	r2, #127	@ 0x7f
 800e984:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e988:	e008      	b.n	800e99c <UART_Start_Receive_IT+0xa4>
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	223f      	movs	r2, #63	@ 0x3f
 800e98e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e992:	e003      	b.n	800e99c <UART_Start_Receive_IT+0xa4>
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	2200      	movs	r2, #0
 800e998:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	2200      	movs	r2, #0
 800e9a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	2222      	movs	r2, #34	@ 0x22
 800e9a8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	3308      	adds	r3, #8
 800e9b2:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e9b6:	e853 3f00 	ldrex	r3, [r3]
 800e9ba:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800e9bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e9be:	f043 0301 	orr.w	r3, r3, #1
 800e9c2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	3308      	adds	r3, #8
 800e9cc:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800e9d0:	673a      	str	r2, [r7, #112]	@ 0x70
 800e9d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9d4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800e9d6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800e9d8:	e841 2300 	strex	r3, r2, [r1]
 800e9dc:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800e9de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d1e3      	bne.n	800e9ac <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e9e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e9ec:	d14f      	bne.n	800ea8e <UART_Start_Receive_IT+0x196>
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e9f4:	88fa      	ldrh	r2, [r7, #6]
 800e9f6:	429a      	cmp	r2, r3
 800e9f8:	d349      	bcc.n	800ea8e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	689b      	ldr	r3, [r3, #8]
 800e9fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ea02:	d107      	bne.n	800ea14 <UART_Start_Receive_IT+0x11c>
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	691b      	ldr	r3, [r3, #16]
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d103      	bne.n	800ea14 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	4a47      	ldr	r2, [pc, #284]	@ (800eb2c <UART_Start_Receive_IT+0x234>)
 800ea10:	675a      	str	r2, [r3, #116]	@ 0x74
 800ea12:	e002      	b.n	800ea1a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	4a46      	ldr	r2, [pc, #280]	@ (800eb30 <UART_Start_Receive_IT+0x238>)
 800ea18:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	691b      	ldr	r3, [r3, #16]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d01a      	beq.n	800ea58 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ea2a:	e853 3f00 	ldrex	r3, [r3]
 800ea2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ea30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ea32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ea36:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	461a      	mov	r2, r3
 800ea40:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ea44:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ea46:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea48:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800ea4a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ea4c:	e841 2300 	strex	r3, r2, [r1]
 800ea50:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800ea52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d1e4      	bne.n	800ea22 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	3308      	adds	r3, #8
 800ea5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ea62:	e853 3f00 	ldrex	r3, [r3]
 800ea66:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ea68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ea6e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	3308      	adds	r3, #8
 800ea76:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800ea78:	64ba      	str	r2, [r7, #72]	@ 0x48
 800ea7a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea7c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ea7e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ea80:	e841 2300 	strex	r3, r2, [r1]
 800ea84:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800ea86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d1e5      	bne.n	800ea58 <UART_Start_Receive_IT+0x160>
 800ea8c:	e046      	b.n	800eb1c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	689b      	ldr	r3, [r3, #8]
 800ea92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ea96:	d107      	bne.n	800eaa8 <UART_Start_Receive_IT+0x1b0>
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	691b      	ldr	r3, [r3, #16]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d103      	bne.n	800eaa8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	4a24      	ldr	r2, [pc, #144]	@ (800eb34 <UART_Start_Receive_IT+0x23c>)
 800eaa4:	675a      	str	r2, [r3, #116]	@ 0x74
 800eaa6:	e002      	b.n	800eaae <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	4a23      	ldr	r2, [pc, #140]	@ (800eb38 <UART_Start_Receive_IT+0x240>)
 800eaac:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	691b      	ldr	r3, [r3, #16]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d019      	beq.n	800eaea <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eabc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eabe:	e853 3f00 	ldrex	r3, [r3]
 800eac2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800eac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eac6:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800eaca:	677b      	str	r3, [r7, #116]	@ 0x74
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	461a      	mov	r2, r3
 800ead2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ead4:	637b      	str	r3, [r7, #52]	@ 0x34
 800ead6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ead8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800eada:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800eadc:	e841 2300 	strex	r3, r2, [r1]
 800eae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800eae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d1e6      	bne.n	800eab6 <UART_Start_Receive_IT+0x1be>
 800eae8:	e018      	b.n	800eb1c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eaf0:	697b      	ldr	r3, [r7, #20]
 800eaf2:	e853 3f00 	ldrex	r3, [r3]
 800eaf6:	613b      	str	r3, [r7, #16]
   return(result);
 800eaf8:	693b      	ldr	r3, [r7, #16]
 800eafa:	f043 0320 	orr.w	r3, r3, #32
 800eafe:	67bb      	str	r3, [r7, #120]	@ 0x78
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	461a      	mov	r2, r3
 800eb06:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800eb08:	623b      	str	r3, [r7, #32]
 800eb0a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb0c:	69f9      	ldr	r1, [r7, #28]
 800eb0e:	6a3a      	ldr	r2, [r7, #32]
 800eb10:	e841 2300 	strex	r3, r2, [r1]
 800eb14:	61bb      	str	r3, [r7, #24]
   return(result);
 800eb16:	69bb      	ldr	r3, [r7, #24]
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d1e6      	bne.n	800eaea <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800eb1c:	2300      	movs	r3, #0
}
 800eb1e:	4618      	mov	r0, r3
 800eb20:	378c      	adds	r7, #140	@ 0x8c
 800eb22:	46bd      	mov	sp, r7
 800eb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb28:	4770      	bx	lr
 800eb2a:	bf00      	nop
 800eb2c:	0800f359 	.word	0x0800f359
 800eb30:	0800eff5 	.word	0x0800eff5
 800eb34:	0800ee3d 	.word	0x0800ee3d
 800eb38:	0800ec85 	.word	0x0800ec85

0800eb3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800eb3c:	b480      	push	{r7}
 800eb3e:	b095      	sub	sp, #84	@ 0x54
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb4c:	e853 3f00 	ldrex	r3, [r3]
 800eb50:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800eb52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800eb58:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	461a      	mov	r2, r3
 800eb60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eb62:	643b      	str	r3, [r7, #64]	@ 0x40
 800eb64:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb66:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800eb68:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800eb6a:	e841 2300 	strex	r3, r2, [r1]
 800eb6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800eb70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d1e6      	bne.n	800eb44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	3308      	adds	r3, #8
 800eb7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb7e:	6a3b      	ldr	r3, [r7, #32]
 800eb80:	e853 3f00 	ldrex	r3, [r3]
 800eb84:	61fb      	str	r3, [r7, #28]
   return(result);
 800eb86:	69fa      	ldr	r2, [r7, #28]
 800eb88:	4b1e      	ldr	r3, [pc, #120]	@ (800ec04 <UART_EndRxTransfer+0xc8>)
 800eb8a:	4013      	ands	r3, r2
 800eb8c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	3308      	adds	r3, #8
 800eb94:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800eb96:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800eb98:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb9a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800eb9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eb9e:	e841 2300 	strex	r3, r2, [r1]
 800eba2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800eba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d1e5      	bne.n	800eb76 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ebae:	2b01      	cmp	r3, #1
 800ebb0:	d118      	bne.n	800ebe4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	e853 3f00 	ldrex	r3, [r3]
 800ebbe:	60bb      	str	r3, [r7, #8]
   return(result);
 800ebc0:	68bb      	ldr	r3, [r7, #8]
 800ebc2:	f023 0310 	bic.w	r3, r3, #16
 800ebc6:	647b      	str	r3, [r7, #68]	@ 0x44
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	461a      	mov	r2, r3
 800ebce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ebd0:	61bb      	str	r3, [r7, #24]
 800ebd2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebd4:	6979      	ldr	r1, [r7, #20]
 800ebd6:	69ba      	ldr	r2, [r7, #24]
 800ebd8:	e841 2300 	strex	r3, r2, [r1]
 800ebdc:	613b      	str	r3, [r7, #16]
   return(result);
 800ebde:	693b      	ldr	r3, [r7, #16]
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d1e6      	bne.n	800ebb2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	2220      	movs	r2, #32
 800ebe8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	2200      	movs	r2, #0
 800ebf0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	2200      	movs	r2, #0
 800ebf6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ebf8:	bf00      	nop
 800ebfa:	3754      	adds	r7, #84	@ 0x54
 800ebfc:	46bd      	mov	sp, r7
 800ebfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec02:	4770      	bx	lr
 800ec04:	effffffe 	.word	0xeffffffe

0800ec08 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ec08:	b580      	push	{r7, lr}
 800ec0a:	b084      	sub	sp, #16
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ec14:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	2200      	movs	r2, #0
 800ec1a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ec1e:	68f8      	ldr	r0, [r7, #12]
 800ec20:	f7fe ff32 	bl	800da88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ec24:	bf00      	nop
 800ec26:	3710      	adds	r7, #16
 800ec28:	46bd      	mov	sp, r7
 800ec2a:	bd80      	pop	{r7, pc}

0800ec2c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ec2c:	b580      	push	{r7, lr}
 800ec2e:	b088      	sub	sp, #32
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	e853 3f00 	ldrex	r3, [r3]
 800ec40:	60bb      	str	r3, [r7, #8]
   return(result);
 800ec42:	68bb      	ldr	r3, [r7, #8]
 800ec44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ec48:	61fb      	str	r3, [r7, #28]
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	461a      	mov	r2, r3
 800ec50:	69fb      	ldr	r3, [r7, #28]
 800ec52:	61bb      	str	r3, [r7, #24]
 800ec54:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec56:	6979      	ldr	r1, [r7, #20]
 800ec58:	69ba      	ldr	r2, [r7, #24]
 800ec5a:	e841 2300 	strex	r3, r2, [r1]
 800ec5e:	613b      	str	r3, [r7, #16]
   return(result);
 800ec60:	693b      	ldr	r3, [r7, #16]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d1e6      	bne.n	800ec34 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	2220      	movs	r2, #32
 800ec6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	2200      	movs	r2, #0
 800ec72:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ec74:	6878      	ldr	r0, [r7, #4]
 800ec76:	f7fe fefd 	bl	800da74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ec7a:	bf00      	nop
 800ec7c:	3720      	adds	r7, #32
 800ec7e:	46bd      	mov	sp, r7
 800ec80:	bd80      	pop	{r7, pc}
	...

0800ec84 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ec84:	b580      	push	{r7, lr}
 800ec86:	b09c      	sub	sp, #112	@ 0x70
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ec92:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ec9c:	2b22      	cmp	r3, #34	@ 0x22
 800ec9e:	f040 80be 	bne.w	800ee1e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eca8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ecac:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800ecb0:	b2d9      	uxtb	r1, r3
 800ecb2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800ecb6:	b2da      	uxtb	r2, r3
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ecbc:	400a      	ands	r2, r1
 800ecbe:	b2d2      	uxtb	r2, r2
 800ecc0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ecc6:	1c5a      	adds	r2, r3, #1
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ecd2:	b29b      	uxth	r3, r3
 800ecd4:	3b01      	subs	r3, #1
 800ecd6:	b29a      	uxth	r2, r3
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ece4:	b29b      	uxth	r3, r3
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	f040 80a1 	bne.w	800ee2e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecf2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ecf4:	e853 3f00 	ldrex	r3, [r3]
 800ecf8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ecfa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ecfc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ed00:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	461a      	mov	r2, r3
 800ed08:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ed0a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ed0c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed0e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ed10:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ed12:	e841 2300 	strex	r3, r2, [r1]
 800ed16:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ed18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d1e6      	bne.n	800ecec <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	3308      	adds	r3, #8
 800ed24:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed28:	e853 3f00 	ldrex	r3, [r3]
 800ed2c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ed2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed30:	f023 0301 	bic.w	r3, r3, #1
 800ed34:	667b      	str	r3, [r7, #100]	@ 0x64
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	3308      	adds	r3, #8
 800ed3c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ed3e:	647a      	str	r2, [r7, #68]	@ 0x44
 800ed40:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed42:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ed44:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ed46:	e841 2300 	strex	r3, r2, [r1]
 800ed4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ed4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d1e5      	bne.n	800ed1e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	2220      	movs	r2, #32
 800ed56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	2200      	movs	r2, #0
 800ed5e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	2200      	movs	r2, #0
 800ed64:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	4a33      	ldr	r2, [pc, #204]	@ (800ee38 <UART_RxISR_8BIT+0x1b4>)
 800ed6c:	4293      	cmp	r3, r2
 800ed6e:	d01f      	beq.n	800edb0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	685b      	ldr	r3, [r3, #4]
 800ed76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d018      	beq.n	800edb0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed86:	e853 3f00 	ldrex	r3, [r3]
 800ed8a:	623b      	str	r3, [r7, #32]
   return(result);
 800ed8c:	6a3b      	ldr	r3, [r7, #32]
 800ed8e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ed92:	663b      	str	r3, [r7, #96]	@ 0x60
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	461a      	mov	r2, r3
 800ed9a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ed9c:	633b      	str	r3, [r7, #48]	@ 0x30
 800ed9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eda0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800eda2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eda4:	e841 2300 	strex	r3, r2, [r1]
 800eda8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800edaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edac:	2b00      	cmp	r3, #0
 800edae:	d1e6      	bne.n	800ed7e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800edb4:	2b01      	cmp	r3, #1
 800edb6:	d12e      	bne.n	800ee16 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	2200      	movs	r2, #0
 800edbc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edc4:	693b      	ldr	r3, [r7, #16]
 800edc6:	e853 3f00 	ldrex	r3, [r3]
 800edca:	60fb      	str	r3, [r7, #12]
   return(result);
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	f023 0310 	bic.w	r3, r3, #16
 800edd2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	461a      	mov	r2, r3
 800edda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800eddc:	61fb      	str	r3, [r7, #28]
 800edde:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ede0:	69b9      	ldr	r1, [r7, #24]
 800ede2:	69fa      	ldr	r2, [r7, #28]
 800ede4:	e841 2300 	strex	r3, r2, [r1]
 800ede8:	617b      	str	r3, [r7, #20]
   return(result);
 800edea:	697b      	ldr	r3, [r7, #20]
 800edec:	2b00      	cmp	r3, #0
 800edee:	d1e6      	bne.n	800edbe <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	69db      	ldr	r3, [r3, #28]
 800edf6:	f003 0310 	and.w	r3, r3, #16
 800edfa:	2b10      	cmp	r3, #16
 800edfc:	d103      	bne.n	800ee06 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	2210      	movs	r2, #16
 800ee04:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ee0c:	4619      	mov	r1, r3
 800ee0e:	6878      	ldr	r0, [r7, #4]
 800ee10:	f7fe fe44 	bl	800da9c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ee14:	e00b      	b.n	800ee2e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800ee16:	6878      	ldr	r0, [r7, #4]
 800ee18:	f7f3 fea0 	bl	8002b5c <HAL_UART_RxCpltCallback>
}
 800ee1c:	e007      	b.n	800ee2e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	699a      	ldr	r2, [r3, #24]
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	f042 0208 	orr.w	r2, r2, #8
 800ee2c:	619a      	str	r2, [r3, #24]
}
 800ee2e:	bf00      	nop
 800ee30:	3770      	adds	r7, #112	@ 0x70
 800ee32:	46bd      	mov	sp, r7
 800ee34:	bd80      	pop	{r7, pc}
 800ee36:	bf00      	nop
 800ee38:	58000c00 	.word	0x58000c00

0800ee3c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ee3c:	b580      	push	{r7, lr}
 800ee3e:	b09c      	sub	sp, #112	@ 0x70
 800ee40:	af00      	add	r7, sp, #0
 800ee42:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ee4a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ee54:	2b22      	cmp	r3, #34	@ 0x22
 800ee56:	f040 80be 	bne.w	800efd6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee60:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ee68:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800ee6a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800ee6e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800ee72:	4013      	ands	r3, r2
 800ee74:	b29a      	uxth	r2, r3
 800ee76:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ee78:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ee7e:	1c9a      	adds	r2, r3, #2
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ee8a:	b29b      	uxth	r3, r3
 800ee8c:	3b01      	subs	r3, #1
 800ee8e:	b29a      	uxth	r2, r3
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ee9c:	b29b      	uxth	r3, r3
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	f040 80a1 	bne.w	800efe6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eeaa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800eeac:	e853 3f00 	ldrex	r3, [r3]
 800eeb0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800eeb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eeb4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800eeb8:	667b      	str	r3, [r7, #100]	@ 0x64
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	461a      	mov	r2, r3
 800eec0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800eec2:	657b      	str	r3, [r7, #84]	@ 0x54
 800eec4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eec6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800eec8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800eeca:	e841 2300 	strex	r3, r2, [r1]
 800eece:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800eed0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d1e6      	bne.n	800eea4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	3308      	adds	r3, #8
 800eedc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eede:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eee0:	e853 3f00 	ldrex	r3, [r3]
 800eee4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800eee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eee8:	f023 0301 	bic.w	r3, r3, #1
 800eeec:	663b      	str	r3, [r7, #96]	@ 0x60
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	3308      	adds	r3, #8
 800eef4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800eef6:	643a      	str	r2, [r7, #64]	@ 0x40
 800eef8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eefa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800eefc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800eefe:	e841 2300 	strex	r3, r2, [r1]
 800ef02:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ef04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d1e5      	bne.n	800eed6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	2220      	movs	r2, #32
 800ef0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	2200      	movs	r2, #0
 800ef16:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	2200      	movs	r2, #0
 800ef1c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	4a33      	ldr	r2, [pc, #204]	@ (800eff0 <UART_RxISR_16BIT+0x1b4>)
 800ef24:	4293      	cmp	r3, r2
 800ef26:	d01f      	beq.n	800ef68 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	685b      	ldr	r3, [r3, #4]
 800ef2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d018      	beq.n	800ef68 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef3c:	6a3b      	ldr	r3, [r7, #32]
 800ef3e:	e853 3f00 	ldrex	r3, [r3]
 800ef42:	61fb      	str	r3, [r7, #28]
   return(result);
 800ef44:	69fb      	ldr	r3, [r7, #28]
 800ef46:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ef4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	461a      	mov	r2, r3
 800ef52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ef54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ef56:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ef5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ef5c:	e841 2300 	strex	r3, r2, [r1]
 800ef60:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ef62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d1e6      	bne.n	800ef36 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ef6c:	2b01      	cmp	r3, #1
 800ef6e:	d12e      	bne.n	800efce <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	2200      	movs	r2, #0
 800ef74:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	e853 3f00 	ldrex	r3, [r3]
 800ef82:	60bb      	str	r3, [r7, #8]
   return(result);
 800ef84:	68bb      	ldr	r3, [r7, #8]
 800ef86:	f023 0310 	bic.w	r3, r3, #16
 800ef8a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	461a      	mov	r2, r3
 800ef92:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ef94:	61bb      	str	r3, [r7, #24]
 800ef96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef98:	6979      	ldr	r1, [r7, #20]
 800ef9a:	69ba      	ldr	r2, [r7, #24]
 800ef9c:	e841 2300 	strex	r3, r2, [r1]
 800efa0:	613b      	str	r3, [r7, #16]
   return(result);
 800efa2:	693b      	ldr	r3, [r7, #16]
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d1e6      	bne.n	800ef76 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	69db      	ldr	r3, [r3, #28]
 800efae:	f003 0310 	and.w	r3, r3, #16
 800efb2:	2b10      	cmp	r3, #16
 800efb4:	d103      	bne.n	800efbe <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	2210      	movs	r2, #16
 800efbc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800efc4:	4619      	mov	r1, r3
 800efc6:	6878      	ldr	r0, [r7, #4]
 800efc8:	f7fe fd68 	bl	800da9c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800efcc:	e00b      	b.n	800efe6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800efce:	6878      	ldr	r0, [r7, #4]
 800efd0:	f7f3 fdc4 	bl	8002b5c <HAL_UART_RxCpltCallback>
}
 800efd4:	e007      	b.n	800efe6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	699a      	ldr	r2, [r3, #24]
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	f042 0208 	orr.w	r2, r2, #8
 800efe4:	619a      	str	r2, [r3, #24]
}
 800efe6:	bf00      	nop
 800efe8:	3770      	adds	r7, #112	@ 0x70
 800efea:	46bd      	mov	sp, r7
 800efec:	bd80      	pop	{r7, pc}
 800efee:	bf00      	nop
 800eff0:	58000c00 	.word	0x58000c00

0800eff4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800eff4:	b580      	push	{r7, lr}
 800eff6:	b0ac      	sub	sp, #176	@ 0xb0
 800eff8:	af00      	add	r7, sp, #0
 800effa:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f002:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	69db      	ldr	r3, [r3, #28]
 800f00c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	689b      	ldr	r3, [r3, #8]
 800f020:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f02a:	2b22      	cmp	r3, #34	@ 0x22
 800f02c:	f040 8181 	bne.w	800f332 <UART_RxISR_8BIT_FIFOEN+0x33e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800f036:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f03a:	e124      	b.n	800f286 <UART_RxISR_8BIT_FIFOEN+0x292>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f042:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f046:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800f04a:	b2d9      	uxtb	r1, r3
 800f04c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800f050:	b2da      	uxtb	r2, r3
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f056:	400a      	ands	r2, r1
 800f058:	b2d2      	uxtb	r2, r2
 800f05a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f060:	1c5a      	adds	r2, r3, #1
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f06c:	b29b      	uxth	r3, r3
 800f06e:	3b01      	subs	r3, #1
 800f070:	b29a      	uxth	r2, r3
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	69db      	ldr	r3, [r3, #28]
 800f07e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f082:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f086:	f003 0307 	and.w	r3, r3, #7
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d053      	beq.n	800f136 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f08e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f092:	f003 0301 	and.w	r3, r3, #1
 800f096:	2b00      	cmp	r3, #0
 800f098:	d011      	beq.n	800f0be <UART_RxISR_8BIT_FIFOEN+0xca>
 800f09a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800f09e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d00b      	beq.n	800f0be <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	2201      	movs	r2, #1
 800f0ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f0b4:	f043 0201 	orr.w	r2, r3, #1
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f0be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f0c2:	f003 0302 	and.w	r3, r3, #2
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d011      	beq.n	800f0ee <UART_RxISR_8BIT_FIFOEN+0xfa>
 800f0ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f0ce:	f003 0301 	and.w	r3, r3, #1
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d00b      	beq.n	800f0ee <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	2202      	movs	r2, #2
 800f0dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f0e4:	f043 0204 	orr.w	r2, r3, #4
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f0ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f0f2:	f003 0304 	and.w	r3, r3, #4
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d011      	beq.n	800f11e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800f0fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f0fe:	f003 0301 	and.w	r3, r3, #1
 800f102:	2b00      	cmp	r3, #0
 800f104:	d00b      	beq.n	800f11e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	2204      	movs	r2, #4
 800f10c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f114:	f043 0202 	orr.w	r2, r3, #2
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f124:	2b00      	cmp	r3, #0
 800f126:	d006      	beq.n	800f136 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f128:	6878      	ldr	r0, [r7, #4]
 800f12a:	f7fe fcad 	bl	800da88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	2200      	movs	r2, #0
 800f132:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f13c:	b29b      	uxth	r3, r3
 800f13e:	2b00      	cmp	r3, #0
 800f140:	f040 80a1 	bne.w	800f286 <UART_RxISR_8BIT_FIFOEN+0x292>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f14a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f14c:	e853 3f00 	ldrex	r3, [r3]
 800f150:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800f152:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f154:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f158:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	461a      	mov	r2, r3
 800f162:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f166:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f168:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f16a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800f16c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800f16e:	e841 2300 	strex	r3, r2, [r1]
 800f172:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800f174:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f176:	2b00      	cmp	r3, #0
 800f178:	d1e4      	bne.n	800f144 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	3308      	adds	r3, #8
 800f180:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f182:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f184:	e853 3f00 	ldrex	r3, [r3]
 800f188:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800f18a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f18c:	4b6f      	ldr	r3, [pc, #444]	@ (800f34c <UART_RxISR_8BIT_FIFOEN+0x358>)
 800f18e:	4013      	ands	r3, r2
 800f190:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	3308      	adds	r3, #8
 800f19a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800f19e:	66ba      	str	r2, [r7, #104]	@ 0x68
 800f1a0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1a2:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800f1a4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800f1a6:	e841 2300 	strex	r3, r2, [r1]
 800f1aa:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800f1ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d1e3      	bne.n	800f17a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	2220      	movs	r2, #32
 800f1b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	2200      	movs	r2, #0
 800f1be:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	2200      	movs	r2, #0
 800f1c4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	4a61      	ldr	r2, [pc, #388]	@ (800f350 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800f1cc:	4293      	cmp	r3, r2
 800f1ce:	d021      	beq.n	800f214 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	685b      	ldr	r3, [r3, #4]
 800f1d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d01a      	beq.n	800f214 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f1e6:	e853 3f00 	ldrex	r3, [r3]
 800f1ea:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800f1ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f1ee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800f1f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	461a      	mov	r2, r3
 800f1fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800f200:	657b      	str	r3, [r7, #84]	@ 0x54
 800f202:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f204:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f206:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800f208:	e841 2300 	strex	r3, r2, [r1]
 800f20c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800f20e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f210:	2b00      	cmp	r3, #0
 800f212:	d1e4      	bne.n	800f1de <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f218:	2b01      	cmp	r3, #1
 800f21a:	d130      	bne.n	800f27e <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	2200      	movs	r2, #0
 800f220:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f228:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f22a:	e853 3f00 	ldrex	r3, [r3]
 800f22e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f232:	f023 0310 	bic.w	r3, r3, #16
 800f236:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	461a      	mov	r2, r3
 800f240:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f244:	643b      	str	r3, [r7, #64]	@ 0x40
 800f246:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f248:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f24a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f24c:	e841 2300 	strex	r3, r2, [r1]
 800f250:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f254:	2b00      	cmp	r3, #0
 800f256:	d1e4      	bne.n	800f222 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	69db      	ldr	r3, [r3, #28]
 800f25e:	f003 0310 	and.w	r3, r3, #16
 800f262:	2b10      	cmp	r3, #16
 800f264:	d103      	bne.n	800f26e <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	2210      	movs	r2, #16
 800f26c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f274:	4619      	mov	r1, r3
 800f276:	6878      	ldr	r0, [r7, #4]
 800f278:	f7fe fc10 	bl	800da9c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800f27c:	e00e      	b.n	800f29c <UART_RxISR_8BIT_FIFOEN+0x2a8>
          HAL_UART_RxCpltCallback(huart);
 800f27e:	6878      	ldr	r0, [r7, #4]
 800f280:	f7f3 fc6c 	bl	8002b5c <HAL_UART_RxCpltCallback>
        break;
 800f284:	e00a      	b.n	800f29c <UART_RxISR_8BIT_FIFOEN+0x2a8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f286:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d006      	beq.n	800f29c <UART_RxISR_8BIT_FIFOEN+0x2a8>
 800f28e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f292:	f003 0320 	and.w	r3, r3, #32
 800f296:	2b00      	cmp	r3, #0
 800f298:	f47f aed0 	bne.w	800f03c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f2a2:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f2a6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d049      	beq.n	800f342 <UART_RxISR_8BIT_FIFOEN+0x34e>
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800f2b4:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800f2b8:	429a      	cmp	r2, r3
 800f2ba:	d242      	bcs.n	800f342 <UART_RxISR_8BIT_FIFOEN+0x34e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	3308      	adds	r3, #8
 800f2c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2c4:	6a3b      	ldr	r3, [r7, #32]
 800f2c6:	e853 3f00 	ldrex	r3, [r3]
 800f2ca:	61fb      	str	r3, [r7, #28]
   return(result);
 800f2cc:	69fb      	ldr	r3, [r7, #28]
 800f2ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f2d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	3308      	adds	r3, #8
 800f2dc:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800f2e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f2e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f2e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f2e8:	e841 2300 	strex	r3, r2, [r1]
 800f2ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f2ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d1e3      	bne.n	800f2bc <UART_RxISR_8BIT_FIFOEN+0x2c8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	4a17      	ldr	r2, [pc, #92]	@ (800f354 <UART_RxISR_8BIT_FIFOEN+0x360>)
 800f2f8:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	e853 3f00 	ldrex	r3, [r3]
 800f306:	60bb      	str	r3, [r7, #8]
   return(result);
 800f308:	68bb      	ldr	r3, [r7, #8]
 800f30a:	f043 0320 	orr.w	r3, r3, #32
 800f30e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	461a      	mov	r2, r3
 800f318:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800f31c:	61bb      	str	r3, [r7, #24]
 800f31e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f320:	6979      	ldr	r1, [r7, #20]
 800f322:	69ba      	ldr	r2, [r7, #24]
 800f324:	e841 2300 	strex	r3, r2, [r1]
 800f328:	613b      	str	r3, [r7, #16]
   return(result);
 800f32a:	693b      	ldr	r3, [r7, #16]
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d1e4      	bne.n	800f2fa <UART_RxISR_8BIT_FIFOEN+0x306>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f330:	e007      	b.n	800f342 <UART_RxISR_8BIT_FIFOEN+0x34e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	699a      	ldr	r2, [r3, #24]
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	f042 0208 	orr.w	r2, r2, #8
 800f340:	619a      	str	r2, [r3, #24]
}
 800f342:	bf00      	nop
 800f344:	37b0      	adds	r7, #176	@ 0xb0
 800f346:	46bd      	mov	sp, r7
 800f348:	bd80      	pop	{r7, pc}
 800f34a:	bf00      	nop
 800f34c:	effffffe 	.word	0xeffffffe
 800f350:	58000c00 	.word	0x58000c00
 800f354:	0800ec85 	.word	0x0800ec85

0800f358 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f358:	b580      	push	{r7, lr}
 800f35a:	b0ae      	sub	sp, #184	@ 0xb8
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f366:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	69db      	ldr	r3, [r3, #28]
 800f370:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	689b      	ldr	r3, [r3, #8]
 800f384:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f38e:	2b22      	cmp	r3, #34	@ 0x22
 800f390:	f040 8185 	bne.w	800f69e <UART_RxISR_16BIT_FIFOEN+0x346>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800f39a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f39e:	e128      	b.n	800f5f2 <UART_RxISR_16BIT_FIFOEN+0x29a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f3a6:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f3ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800f3b2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800f3b6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800f3ba:	4013      	ands	r3, r2
 800f3bc:	b29a      	uxth	r2, r3
 800f3be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f3c2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f3c8:	1c9a      	adds	r2, r3, #2
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f3d4:	b29b      	uxth	r3, r3
 800f3d6:	3b01      	subs	r3, #1
 800f3d8:	b29a      	uxth	r2, r3
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	69db      	ldr	r3, [r3, #28]
 800f3e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f3ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f3ee:	f003 0307 	and.w	r3, r3, #7
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d053      	beq.n	800f49e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f3f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f3fa:	f003 0301 	and.w	r3, r3, #1
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d011      	beq.n	800f426 <UART_RxISR_16BIT_FIFOEN+0xce>
 800f402:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f406:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d00b      	beq.n	800f426 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	2201      	movs	r2, #1
 800f414:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f41c:	f043 0201 	orr.w	r2, r3, #1
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f426:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f42a:	f003 0302 	and.w	r3, r3, #2
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d011      	beq.n	800f456 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800f432:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f436:	f003 0301 	and.w	r3, r3, #1
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d00b      	beq.n	800f456 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	2202      	movs	r2, #2
 800f444:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f44c:	f043 0204 	orr.w	r2, r3, #4
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f456:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f45a:	f003 0304 	and.w	r3, r3, #4
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d011      	beq.n	800f486 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800f462:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f466:	f003 0301 	and.w	r3, r3, #1
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d00b      	beq.n	800f486 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	2204      	movs	r2, #4
 800f474:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f47c:	f043 0202 	orr.w	r2, r3, #2
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d006      	beq.n	800f49e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f490:	6878      	ldr	r0, [r7, #4]
 800f492:	f7fe faf9 	bl	800da88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	2200      	movs	r2, #0
 800f49a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f4a4:	b29b      	uxth	r3, r3
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	f040 80a3 	bne.w	800f5f2 <UART_RxISR_16BIT_FIFOEN+0x29a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f4b4:	e853 3f00 	ldrex	r3, [r3]
 800f4b8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800f4ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f4bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f4c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	461a      	mov	r2, r3
 800f4ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f4ce:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f4d2:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4d4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800f4d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f4da:	e841 2300 	strex	r3, r2, [r1]
 800f4de:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800f4e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d1e2      	bne.n	800f4ac <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	3308      	adds	r3, #8
 800f4ec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f4f0:	e853 3f00 	ldrex	r3, [r3]
 800f4f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800f4f6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800f4f8:	4b6f      	ldr	r3, [pc, #444]	@ (800f6b8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800f4fa:	4013      	ands	r3, r2
 800f4fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	3308      	adds	r3, #8
 800f506:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800f50a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800f50c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f50e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800f510:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800f512:	e841 2300 	strex	r3, r2, [r1]
 800f516:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800f518:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d1e3      	bne.n	800f4e6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	2220      	movs	r2, #32
 800f522:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	2200      	movs	r2, #0
 800f52a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	2200      	movs	r2, #0
 800f530:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	4a61      	ldr	r2, [pc, #388]	@ (800f6bc <UART_RxISR_16BIT_FIFOEN+0x364>)
 800f538:	4293      	cmp	r3, r2
 800f53a:	d021      	beq.n	800f580 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	685b      	ldr	r3, [r3, #4]
 800f542:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f546:	2b00      	cmp	r3, #0
 800f548:	d01a      	beq.n	800f580 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f550:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f552:	e853 3f00 	ldrex	r3, [r3]
 800f556:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f558:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f55a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800f55e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	461a      	mov	r2, r3
 800f568:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800f56c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f56e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f570:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f572:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f574:	e841 2300 	strex	r3, r2, [r1]
 800f578:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f57a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d1e4      	bne.n	800f54a <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f584:	2b01      	cmp	r3, #1
 800f586:	d130      	bne.n	800f5ea <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	2200      	movs	r2, #0
 800f58c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f596:	e853 3f00 	ldrex	r3, [r3]
 800f59a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f59c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f59e:	f023 0310 	bic.w	r3, r3, #16
 800f5a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	461a      	mov	r2, r3
 800f5ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800f5b0:	647b      	str	r3, [r7, #68]	@ 0x44
 800f5b2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f5b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f5b8:	e841 2300 	strex	r3, r2, [r1]
 800f5bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f5be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d1e4      	bne.n	800f58e <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	69db      	ldr	r3, [r3, #28]
 800f5ca:	f003 0310 	and.w	r3, r3, #16
 800f5ce:	2b10      	cmp	r3, #16
 800f5d0:	d103      	bne.n	800f5da <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	2210      	movs	r2, #16
 800f5d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f5e0:	4619      	mov	r1, r3
 800f5e2:	6878      	ldr	r0, [r7, #4]
 800f5e4:	f7fe fa5a 	bl	800da9c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800f5e8:	e00e      	b.n	800f608 <UART_RxISR_16BIT_FIFOEN+0x2b0>
          HAL_UART_RxCpltCallback(huart);
 800f5ea:	6878      	ldr	r0, [r7, #4]
 800f5ec:	f7f3 fab6 	bl	8002b5c <HAL_UART_RxCpltCallback>
        break;
 800f5f0:	e00a      	b.n	800f608 <UART_RxISR_16BIT_FIFOEN+0x2b0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f5f2:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d006      	beq.n	800f608 <UART_RxISR_16BIT_FIFOEN+0x2b0>
 800f5fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f5fe:	f003 0320 	and.w	r3, r3, #32
 800f602:	2b00      	cmp	r3, #0
 800f604:	f47f aecc 	bne.w	800f3a0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f60e:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f612:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800f616:	2b00      	cmp	r3, #0
 800f618:	d049      	beq.n	800f6ae <UART_RxISR_16BIT_FIFOEN+0x356>
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800f620:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800f624:	429a      	cmp	r2, r3
 800f626:	d242      	bcs.n	800f6ae <UART_RxISR_16BIT_FIFOEN+0x356>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	3308      	adds	r3, #8
 800f62e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f632:	e853 3f00 	ldrex	r3, [r3]
 800f636:	623b      	str	r3, [r7, #32]
   return(result);
 800f638:	6a3b      	ldr	r3, [r7, #32]
 800f63a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f63e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	3308      	adds	r3, #8
 800f648:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800f64c:	633a      	str	r2, [r7, #48]	@ 0x30
 800f64e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f650:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f652:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f654:	e841 2300 	strex	r3, r2, [r1]
 800f658:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f65a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d1e3      	bne.n	800f628 <UART_RxISR_16BIT_FIFOEN+0x2d0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	4a17      	ldr	r2, [pc, #92]	@ (800f6c0 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800f664:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f66c:	693b      	ldr	r3, [r7, #16]
 800f66e:	e853 3f00 	ldrex	r3, [r3]
 800f672:	60fb      	str	r3, [r7, #12]
   return(result);
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	f043 0320 	orr.w	r3, r3, #32
 800f67a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	461a      	mov	r2, r3
 800f684:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f688:	61fb      	str	r3, [r7, #28]
 800f68a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f68c:	69b9      	ldr	r1, [r7, #24]
 800f68e:	69fa      	ldr	r2, [r7, #28]
 800f690:	e841 2300 	strex	r3, r2, [r1]
 800f694:	617b      	str	r3, [r7, #20]
   return(result);
 800f696:	697b      	ldr	r3, [r7, #20]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d1e4      	bne.n	800f666 <UART_RxISR_16BIT_FIFOEN+0x30e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f69c:	e007      	b.n	800f6ae <UART_RxISR_16BIT_FIFOEN+0x356>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	699a      	ldr	r2, [r3, #24]
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	f042 0208 	orr.w	r2, r2, #8
 800f6ac:	619a      	str	r2, [r3, #24]
}
 800f6ae:	bf00      	nop
 800f6b0:	37b8      	adds	r7, #184	@ 0xb8
 800f6b2:	46bd      	mov	sp, r7
 800f6b4:	bd80      	pop	{r7, pc}
 800f6b6:	bf00      	nop
 800f6b8:	effffffe 	.word	0xeffffffe
 800f6bc:	58000c00 	.word	0x58000c00
 800f6c0:	0800ee3d 	.word	0x0800ee3d

0800f6c4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f6c4:	b480      	push	{r7}
 800f6c6:	b083      	sub	sp, #12
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f6cc:	bf00      	nop
 800f6ce:	370c      	adds	r7, #12
 800f6d0:	46bd      	mov	sp, r7
 800f6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d6:	4770      	bx	lr

0800f6d8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f6d8:	b480      	push	{r7}
 800f6da:	b083      	sub	sp, #12
 800f6dc:	af00      	add	r7, sp, #0
 800f6de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f6e0:	bf00      	nop
 800f6e2:	370c      	adds	r7, #12
 800f6e4:	46bd      	mov	sp, r7
 800f6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ea:	4770      	bx	lr

0800f6ec <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f6ec:	b480      	push	{r7}
 800f6ee:	b083      	sub	sp, #12
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f6f4:	bf00      	nop
 800f6f6:	370c      	adds	r7, #12
 800f6f8:	46bd      	mov	sp, r7
 800f6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6fe:	4770      	bx	lr

0800f700 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800f700:	b580      	push	{r7, lr}
 800f702:	b084      	sub	sp, #16
 800f704:	af00      	add	r7, sp, #0
 800f706:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f70e:	2b01      	cmp	r3, #1
 800f710:	d101      	bne.n	800f716 <HAL_UARTEx_EnableFifoMode+0x16>
 800f712:	2302      	movs	r3, #2
 800f714:	e02b      	b.n	800f76e <HAL_UARTEx_EnableFifoMode+0x6e>
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	2201      	movs	r2, #1
 800f71a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	2224      	movs	r2, #36	@ 0x24
 800f722:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	681a      	ldr	r2, [r3, #0]
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	f022 0201 	bic.w	r2, r2, #1
 800f73c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800f744:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800f74c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	68fa      	ldr	r2, [r7, #12]
 800f754:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f756:	6878      	ldr	r0, [r7, #4]
 800f758:	f000 f88a 	bl	800f870 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	2220      	movs	r2, #32
 800f760:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	2200      	movs	r2, #0
 800f768:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f76c:	2300      	movs	r3, #0
}
 800f76e:	4618      	mov	r0, r3
 800f770:	3710      	adds	r7, #16
 800f772:	46bd      	mov	sp, r7
 800f774:	bd80      	pop	{r7, pc}

0800f776 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f776:	b580      	push	{r7, lr}
 800f778:	b084      	sub	sp, #16
 800f77a:	af00      	add	r7, sp, #0
 800f77c:	6078      	str	r0, [r7, #4]
 800f77e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f786:	2b01      	cmp	r3, #1
 800f788:	d101      	bne.n	800f78e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f78a:	2302      	movs	r3, #2
 800f78c:	e02d      	b.n	800f7ea <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	2201      	movs	r2, #1
 800f792:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	2224      	movs	r2, #36	@ 0x24
 800f79a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	681a      	ldr	r2, [r3, #0]
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	f022 0201 	bic.w	r2, r2, #1
 800f7b4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	689b      	ldr	r3, [r3, #8]
 800f7bc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	683a      	ldr	r2, [r7, #0]
 800f7c6:	430a      	orrs	r2, r1
 800f7c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f7ca:	6878      	ldr	r0, [r7, #4]
 800f7cc:	f000 f850 	bl	800f870 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	68fa      	ldr	r2, [r7, #12]
 800f7d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	2220      	movs	r2, #32
 800f7dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	2200      	movs	r2, #0
 800f7e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f7e8:	2300      	movs	r3, #0
}
 800f7ea:	4618      	mov	r0, r3
 800f7ec:	3710      	adds	r7, #16
 800f7ee:	46bd      	mov	sp, r7
 800f7f0:	bd80      	pop	{r7, pc}

0800f7f2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f7f2:	b580      	push	{r7, lr}
 800f7f4:	b084      	sub	sp, #16
 800f7f6:	af00      	add	r7, sp, #0
 800f7f8:	6078      	str	r0, [r7, #4]
 800f7fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f802:	2b01      	cmp	r3, #1
 800f804:	d101      	bne.n	800f80a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f806:	2302      	movs	r3, #2
 800f808:	e02d      	b.n	800f866 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	2201      	movs	r2, #1
 800f80e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	2224      	movs	r2, #36	@ 0x24
 800f816:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	681a      	ldr	r2, [r3, #0]
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	f022 0201 	bic.w	r2, r2, #1
 800f830:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	689b      	ldr	r3, [r3, #8]
 800f838:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	683a      	ldr	r2, [r7, #0]
 800f842:	430a      	orrs	r2, r1
 800f844:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f846:	6878      	ldr	r0, [r7, #4]
 800f848:	f000 f812 	bl	800f870 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	68fa      	ldr	r2, [r7, #12]
 800f852:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	2220      	movs	r2, #32
 800f858:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	2200      	movs	r2, #0
 800f860:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f864:	2300      	movs	r3, #0
}
 800f866:	4618      	mov	r0, r3
 800f868:	3710      	adds	r7, #16
 800f86a:	46bd      	mov	sp, r7
 800f86c:	bd80      	pop	{r7, pc}
	...

0800f870 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f870:	b480      	push	{r7}
 800f872:	b085      	sub	sp, #20
 800f874:	af00      	add	r7, sp, #0
 800f876:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d108      	bne.n	800f892 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	2201      	movs	r2, #1
 800f884:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	2201      	movs	r2, #1
 800f88c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f890:	e031      	b.n	800f8f6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f892:	2310      	movs	r3, #16
 800f894:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f896:	2310      	movs	r3, #16
 800f898:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	689b      	ldr	r3, [r3, #8]
 800f8a0:	0e5b      	lsrs	r3, r3, #25
 800f8a2:	b2db      	uxtb	r3, r3
 800f8a4:	f003 0307 	and.w	r3, r3, #7
 800f8a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	689b      	ldr	r3, [r3, #8]
 800f8b0:	0f5b      	lsrs	r3, r3, #29
 800f8b2:	b2db      	uxtb	r3, r3
 800f8b4:	f003 0307 	and.w	r3, r3, #7
 800f8b8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f8ba:	7bbb      	ldrb	r3, [r7, #14]
 800f8bc:	7b3a      	ldrb	r2, [r7, #12]
 800f8be:	4911      	ldr	r1, [pc, #68]	@ (800f904 <UARTEx_SetNbDataToProcess+0x94>)
 800f8c0:	5c8a      	ldrb	r2, [r1, r2]
 800f8c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f8c6:	7b3a      	ldrb	r2, [r7, #12]
 800f8c8:	490f      	ldr	r1, [pc, #60]	@ (800f908 <UARTEx_SetNbDataToProcess+0x98>)
 800f8ca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f8cc:	fb93 f3f2 	sdiv	r3, r3, r2
 800f8d0:	b29a      	uxth	r2, r3
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f8d8:	7bfb      	ldrb	r3, [r7, #15]
 800f8da:	7b7a      	ldrb	r2, [r7, #13]
 800f8dc:	4909      	ldr	r1, [pc, #36]	@ (800f904 <UARTEx_SetNbDataToProcess+0x94>)
 800f8de:	5c8a      	ldrb	r2, [r1, r2]
 800f8e0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f8e4:	7b7a      	ldrb	r2, [r7, #13]
 800f8e6:	4908      	ldr	r1, [pc, #32]	@ (800f908 <UARTEx_SetNbDataToProcess+0x98>)
 800f8e8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f8ea:	fb93 f3f2 	sdiv	r3, r3, r2
 800f8ee:	b29a      	uxth	r2, r3
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800f8f6:	bf00      	nop
 800f8f8:	3714      	adds	r7, #20
 800f8fa:	46bd      	mov	sp, r7
 800f8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f900:	4770      	bx	lr
 800f902:	bf00      	nop
 800f904:	08012740 	.word	0x08012740
 800f908:	08012748 	.word	0x08012748

0800f90c <atoi>:
 800f90c:	220a      	movs	r2, #10
 800f90e:	2100      	movs	r1, #0
 800f910:	f000 b87a 	b.w	800fa08 <strtol>

0800f914 <_strtol_l.isra.0>:
 800f914:	2b24      	cmp	r3, #36	@ 0x24
 800f916:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f91a:	4686      	mov	lr, r0
 800f91c:	4690      	mov	r8, r2
 800f91e:	d801      	bhi.n	800f924 <_strtol_l.isra.0+0x10>
 800f920:	2b01      	cmp	r3, #1
 800f922:	d106      	bne.n	800f932 <_strtol_l.isra.0+0x1e>
 800f924:	f000 ff3a 	bl	801079c <__errno>
 800f928:	2316      	movs	r3, #22
 800f92a:	6003      	str	r3, [r0, #0]
 800f92c:	2000      	movs	r0, #0
 800f92e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f932:	4834      	ldr	r0, [pc, #208]	@ (800fa04 <_strtol_l.isra.0+0xf0>)
 800f934:	460d      	mov	r5, r1
 800f936:	462a      	mov	r2, r5
 800f938:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f93c:	5d06      	ldrb	r6, [r0, r4]
 800f93e:	f016 0608 	ands.w	r6, r6, #8
 800f942:	d1f8      	bne.n	800f936 <_strtol_l.isra.0+0x22>
 800f944:	2c2d      	cmp	r4, #45	@ 0x2d
 800f946:	d110      	bne.n	800f96a <_strtol_l.isra.0+0x56>
 800f948:	782c      	ldrb	r4, [r5, #0]
 800f94a:	2601      	movs	r6, #1
 800f94c:	1c95      	adds	r5, r2, #2
 800f94e:	f033 0210 	bics.w	r2, r3, #16
 800f952:	d115      	bne.n	800f980 <_strtol_l.isra.0+0x6c>
 800f954:	2c30      	cmp	r4, #48	@ 0x30
 800f956:	d10d      	bne.n	800f974 <_strtol_l.isra.0+0x60>
 800f958:	782a      	ldrb	r2, [r5, #0]
 800f95a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f95e:	2a58      	cmp	r2, #88	@ 0x58
 800f960:	d108      	bne.n	800f974 <_strtol_l.isra.0+0x60>
 800f962:	786c      	ldrb	r4, [r5, #1]
 800f964:	3502      	adds	r5, #2
 800f966:	2310      	movs	r3, #16
 800f968:	e00a      	b.n	800f980 <_strtol_l.isra.0+0x6c>
 800f96a:	2c2b      	cmp	r4, #43	@ 0x2b
 800f96c:	bf04      	itt	eq
 800f96e:	782c      	ldrbeq	r4, [r5, #0]
 800f970:	1c95      	addeq	r5, r2, #2
 800f972:	e7ec      	b.n	800f94e <_strtol_l.isra.0+0x3a>
 800f974:	2b00      	cmp	r3, #0
 800f976:	d1f6      	bne.n	800f966 <_strtol_l.isra.0+0x52>
 800f978:	2c30      	cmp	r4, #48	@ 0x30
 800f97a:	bf14      	ite	ne
 800f97c:	230a      	movne	r3, #10
 800f97e:	2308      	moveq	r3, #8
 800f980:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800f984:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f988:	2200      	movs	r2, #0
 800f98a:	fbbc f9f3 	udiv	r9, ip, r3
 800f98e:	4610      	mov	r0, r2
 800f990:	fb03 ca19 	mls	sl, r3, r9, ip
 800f994:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800f998:	2f09      	cmp	r7, #9
 800f99a:	d80f      	bhi.n	800f9bc <_strtol_l.isra.0+0xa8>
 800f99c:	463c      	mov	r4, r7
 800f99e:	42a3      	cmp	r3, r4
 800f9a0:	dd1b      	ble.n	800f9da <_strtol_l.isra.0+0xc6>
 800f9a2:	1c57      	adds	r7, r2, #1
 800f9a4:	d007      	beq.n	800f9b6 <_strtol_l.isra.0+0xa2>
 800f9a6:	4581      	cmp	r9, r0
 800f9a8:	d314      	bcc.n	800f9d4 <_strtol_l.isra.0+0xc0>
 800f9aa:	d101      	bne.n	800f9b0 <_strtol_l.isra.0+0x9c>
 800f9ac:	45a2      	cmp	sl, r4
 800f9ae:	db11      	blt.n	800f9d4 <_strtol_l.isra.0+0xc0>
 800f9b0:	fb00 4003 	mla	r0, r0, r3, r4
 800f9b4:	2201      	movs	r2, #1
 800f9b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f9ba:	e7eb      	b.n	800f994 <_strtol_l.isra.0+0x80>
 800f9bc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800f9c0:	2f19      	cmp	r7, #25
 800f9c2:	d801      	bhi.n	800f9c8 <_strtol_l.isra.0+0xb4>
 800f9c4:	3c37      	subs	r4, #55	@ 0x37
 800f9c6:	e7ea      	b.n	800f99e <_strtol_l.isra.0+0x8a>
 800f9c8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800f9cc:	2f19      	cmp	r7, #25
 800f9ce:	d804      	bhi.n	800f9da <_strtol_l.isra.0+0xc6>
 800f9d0:	3c57      	subs	r4, #87	@ 0x57
 800f9d2:	e7e4      	b.n	800f99e <_strtol_l.isra.0+0x8a>
 800f9d4:	f04f 32ff 	mov.w	r2, #4294967295
 800f9d8:	e7ed      	b.n	800f9b6 <_strtol_l.isra.0+0xa2>
 800f9da:	1c53      	adds	r3, r2, #1
 800f9dc:	d108      	bne.n	800f9f0 <_strtol_l.isra.0+0xdc>
 800f9de:	2322      	movs	r3, #34	@ 0x22
 800f9e0:	f8ce 3000 	str.w	r3, [lr]
 800f9e4:	4660      	mov	r0, ip
 800f9e6:	f1b8 0f00 	cmp.w	r8, #0
 800f9ea:	d0a0      	beq.n	800f92e <_strtol_l.isra.0+0x1a>
 800f9ec:	1e69      	subs	r1, r5, #1
 800f9ee:	e006      	b.n	800f9fe <_strtol_l.isra.0+0xea>
 800f9f0:	b106      	cbz	r6, 800f9f4 <_strtol_l.isra.0+0xe0>
 800f9f2:	4240      	negs	r0, r0
 800f9f4:	f1b8 0f00 	cmp.w	r8, #0
 800f9f8:	d099      	beq.n	800f92e <_strtol_l.isra.0+0x1a>
 800f9fa:	2a00      	cmp	r2, #0
 800f9fc:	d1f6      	bne.n	800f9ec <_strtol_l.isra.0+0xd8>
 800f9fe:	f8c8 1000 	str.w	r1, [r8]
 800fa02:	e794      	b.n	800f92e <_strtol_l.isra.0+0x1a>
 800fa04:	08012751 	.word	0x08012751

0800fa08 <strtol>:
 800fa08:	4613      	mov	r3, r2
 800fa0a:	460a      	mov	r2, r1
 800fa0c:	4601      	mov	r1, r0
 800fa0e:	4802      	ldr	r0, [pc, #8]	@ (800fa18 <strtol+0x10>)
 800fa10:	6800      	ldr	r0, [r0, #0]
 800fa12:	f7ff bf7f 	b.w	800f914 <_strtol_l.isra.0>
 800fa16:	bf00      	nop
 800fa18:	24000038 	.word	0x24000038

0800fa1c <__cvt>:
 800fa1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa1e:	ed2d 8b02 	vpush	{d8}
 800fa22:	eeb0 8b40 	vmov.f64	d8, d0
 800fa26:	b085      	sub	sp, #20
 800fa28:	4617      	mov	r7, r2
 800fa2a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800fa2c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800fa2e:	ee18 2a90 	vmov	r2, s17
 800fa32:	f025 0520 	bic.w	r5, r5, #32
 800fa36:	2a00      	cmp	r2, #0
 800fa38:	bfb6      	itet	lt
 800fa3a:	222d      	movlt	r2, #45	@ 0x2d
 800fa3c:	2200      	movge	r2, #0
 800fa3e:	eeb1 8b40 	vneglt.f64	d8, d0
 800fa42:	2d46      	cmp	r5, #70	@ 0x46
 800fa44:	460c      	mov	r4, r1
 800fa46:	701a      	strb	r2, [r3, #0]
 800fa48:	d004      	beq.n	800fa54 <__cvt+0x38>
 800fa4a:	2d45      	cmp	r5, #69	@ 0x45
 800fa4c:	d100      	bne.n	800fa50 <__cvt+0x34>
 800fa4e:	3401      	adds	r4, #1
 800fa50:	2102      	movs	r1, #2
 800fa52:	e000      	b.n	800fa56 <__cvt+0x3a>
 800fa54:	2103      	movs	r1, #3
 800fa56:	ab03      	add	r3, sp, #12
 800fa58:	9301      	str	r3, [sp, #4]
 800fa5a:	ab02      	add	r3, sp, #8
 800fa5c:	9300      	str	r3, [sp, #0]
 800fa5e:	4622      	mov	r2, r4
 800fa60:	4633      	mov	r3, r6
 800fa62:	eeb0 0b48 	vmov.f64	d0, d8
 800fa66:	f000 ff7b 	bl	8010960 <_dtoa_r>
 800fa6a:	2d47      	cmp	r5, #71	@ 0x47
 800fa6c:	d114      	bne.n	800fa98 <__cvt+0x7c>
 800fa6e:	07fb      	lsls	r3, r7, #31
 800fa70:	d50a      	bpl.n	800fa88 <__cvt+0x6c>
 800fa72:	1902      	adds	r2, r0, r4
 800fa74:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800fa78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa7c:	bf08      	it	eq
 800fa7e:	9203      	streq	r2, [sp, #12]
 800fa80:	2130      	movs	r1, #48	@ 0x30
 800fa82:	9b03      	ldr	r3, [sp, #12]
 800fa84:	4293      	cmp	r3, r2
 800fa86:	d319      	bcc.n	800fabc <__cvt+0xa0>
 800fa88:	9b03      	ldr	r3, [sp, #12]
 800fa8a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fa8c:	1a1b      	subs	r3, r3, r0
 800fa8e:	6013      	str	r3, [r2, #0]
 800fa90:	b005      	add	sp, #20
 800fa92:	ecbd 8b02 	vpop	{d8}
 800fa96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa98:	2d46      	cmp	r5, #70	@ 0x46
 800fa9a:	eb00 0204 	add.w	r2, r0, r4
 800fa9e:	d1e9      	bne.n	800fa74 <__cvt+0x58>
 800faa0:	7803      	ldrb	r3, [r0, #0]
 800faa2:	2b30      	cmp	r3, #48	@ 0x30
 800faa4:	d107      	bne.n	800fab6 <__cvt+0x9a>
 800faa6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800faaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800faae:	bf1c      	itt	ne
 800fab0:	f1c4 0401 	rsbne	r4, r4, #1
 800fab4:	6034      	strne	r4, [r6, #0]
 800fab6:	6833      	ldr	r3, [r6, #0]
 800fab8:	441a      	add	r2, r3
 800faba:	e7db      	b.n	800fa74 <__cvt+0x58>
 800fabc:	1c5c      	adds	r4, r3, #1
 800fabe:	9403      	str	r4, [sp, #12]
 800fac0:	7019      	strb	r1, [r3, #0]
 800fac2:	e7de      	b.n	800fa82 <__cvt+0x66>

0800fac4 <__exponent>:
 800fac4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fac6:	2900      	cmp	r1, #0
 800fac8:	bfba      	itte	lt
 800faca:	4249      	neglt	r1, r1
 800facc:	232d      	movlt	r3, #45	@ 0x2d
 800face:	232b      	movge	r3, #43	@ 0x2b
 800fad0:	2909      	cmp	r1, #9
 800fad2:	7002      	strb	r2, [r0, #0]
 800fad4:	7043      	strb	r3, [r0, #1]
 800fad6:	dd29      	ble.n	800fb2c <__exponent+0x68>
 800fad8:	f10d 0307 	add.w	r3, sp, #7
 800fadc:	461d      	mov	r5, r3
 800fade:	270a      	movs	r7, #10
 800fae0:	461a      	mov	r2, r3
 800fae2:	fbb1 f6f7 	udiv	r6, r1, r7
 800fae6:	fb07 1416 	mls	r4, r7, r6, r1
 800faea:	3430      	adds	r4, #48	@ 0x30
 800faec:	f802 4c01 	strb.w	r4, [r2, #-1]
 800faf0:	460c      	mov	r4, r1
 800faf2:	2c63      	cmp	r4, #99	@ 0x63
 800faf4:	f103 33ff 	add.w	r3, r3, #4294967295
 800faf8:	4631      	mov	r1, r6
 800fafa:	dcf1      	bgt.n	800fae0 <__exponent+0x1c>
 800fafc:	3130      	adds	r1, #48	@ 0x30
 800fafe:	1e94      	subs	r4, r2, #2
 800fb00:	f803 1c01 	strb.w	r1, [r3, #-1]
 800fb04:	1c41      	adds	r1, r0, #1
 800fb06:	4623      	mov	r3, r4
 800fb08:	42ab      	cmp	r3, r5
 800fb0a:	d30a      	bcc.n	800fb22 <__exponent+0x5e>
 800fb0c:	f10d 0309 	add.w	r3, sp, #9
 800fb10:	1a9b      	subs	r3, r3, r2
 800fb12:	42ac      	cmp	r4, r5
 800fb14:	bf88      	it	hi
 800fb16:	2300      	movhi	r3, #0
 800fb18:	3302      	adds	r3, #2
 800fb1a:	4403      	add	r3, r0
 800fb1c:	1a18      	subs	r0, r3, r0
 800fb1e:	b003      	add	sp, #12
 800fb20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb22:	f813 6b01 	ldrb.w	r6, [r3], #1
 800fb26:	f801 6f01 	strb.w	r6, [r1, #1]!
 800fb2a:	e7ed      	b.n	800fb08 <__exponent+0x44>
 800fb2c:	2330      	movs	r3, #48	@ 0x30
 800fb2e:	3130      	adds	r1, #48	@ 0x30
 800fb30:	7083      	strb	r3, [r0, #2]
 800fb32:	70c1      	strb	r1, [r0, #3]
 800fb34:	1d03      	adds	r3, r0, #4
 800fb36:	e7f1      	b.n	800fb1c <__exponent+0x58>

0800fb38 <_printf_float>:
 800fb38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb3c:	b08d      	sub	sp, #52	@ 0x34
 800fb3e:	460c      	mov	r4, r1
 800fb40:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800fb44:	4616      	mov	r6, r2
 800fb46:	461f      	mov	r7, r3
 800fb48:	4605      	mov	r5, r0
 800fb4a:	f000 fddd 	bl	8010708 <_localeconv_r>
 800fb4e:	f8d0 b000 	ldr.w	fp, [r0]
 800fb52:	4658      	mov	r0, fp
 800fb54:	f7f0 fc24 	bl	80003a0 <strlen>
 800fb58:	2300      	movs	r3, #0
 800fb5a:	930a      	str	r3, [sp, #40]	@ 0x28
 800fb5c:	f8d8 3000 	ldr.w	r3, [r8]
 800fb60:	f894 9018 	ldrb.w	r9, [r4, #24]
 800fb64:	6822      	ldr	r2, [r4, #0]
 800fb66:	9005      	str	r0, [sp, #20]
 800fb68:	3307      	adds	r3, #7
 800fb6a:	f023 0307 	bic.w	r3, r3, #7
 800fb6e:	f103 0108 	add.w	r1, r3, #8
 800fb72:	f8c8 1000 	str.w	r1, [r8]
 800fb76:	ed93 0b00 	vldr	d0, [r3]
 800fb7a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800fdd8 <_printf_float+0x2a0>
 800fb7e:	eeb0 7bc0 	vabs.f64	d7, d0
 800fb82:	eeb4 7b46 	vcmp.f64	d7, d6
 800fb86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb8a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800fb8e:	dd24      	ble.n	800fbda <_printf_float+0xa2>
 800fb90:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800fb94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb98:	d502      	bpl.n	800fba0 <_printf_float+0x68>
 800fb9a:	232d      	movs	r3, #45	@ 0x2d
 800fb9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fba0:	498f      	ldr	r1, [pc, #572]	@ (800fde0 <_printf_float+0x2a8>)
 800fba2:	4b90      	ldr	r3, [pc, #576]	@ (800fde4 <_printf_float+0x2ac>)
 800fba4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800fba8:	bf8c      	ite	hi
 800fbaa:	4688      	movhi	r8, r1
 800fbac:	4698      	movls	r8, r3
 800fbae:	f022 0204 	bic.w	r2, r2, #4
 800fbb2:	2303      	movs	r3, #3
 800fbb4:	6123      	str	r3, [r4, #16]
 800fbb6:	6022      	str	r2, [r4, #0]
 800fbb8:	f04f 0a00 	mov.w	sl, #0
 800fbbc:	9700      	str	r7, [sp, #0]
 800fbbe:	4633      	mov	r3, r6
 800fbc0:	aa0b      	add	r2, sp, #44	@ 0x2c
 800fbc2:	4621      	mov	r1, r4
 800fbc4:	4628      	mov	r0, r5
 800fbc6:	f000 f9d1 	bl	800ff6c <_printf_common>
 800fbca:	3001      	adds	r0, #1
 800fbcc:	f040 8089 	bne.w	800fce2 <_printf_float+0x1aa>
 800fbd0:	f04f 30ff 	mov.w	r0, #4294967295
 800fbd4:	b00d      	add	sp, #52	@ 0x34
 800fbd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbda:	eeb4 0b40 	vcmp.f64	d0, d0
 800fbde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbe2:	d709      	bvc.n	800fbf8 <_printf_float+0xc0>
 800fbe4:	ee10 3a90 	vmov	r3, s1
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	bfbc      	itt	lt
 800fbec:	232d      	movlt	r3, #45	@ 0x2d
 800fbee:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800fbf2:	497d      	ldr	r1, [pc, #500]	@ (800fde8 <_printf_float+0x2b0>)
 800fbf4:	4b7d      	ldr	r3, [pc, #500]	@ (800fdec <_printf_float+0x2b4>)
 800fbf6:	e7d5      	b.n	800fba4 <_printf_float+0x6c>
 800fbf8:	6863      	ldr	r3, [r4, #4]
 800fbfa:	1c59      	adds	r1, r3, #1
 800fbfc:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800fc00:	d139      	bne.n	800fc76 <_printf_float+0x13e>
 800fc02:	2306      	movs	r3, #6
 800fc04:	6063      	str	r3, [r4, #4]
 800fc06:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800fc0a:	2300      	movs	r3, #0
 800fc0c:	6022      	str	r2, [r4, #0]
 800fc0e:	9303      	str	r3, [sp, #12]
 800fc10:	ab0a      	add	r3, sp, #40	@ 0x28
 800fc12:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800fc16:	ab09      	add	r3, sp, #36	@ 0x24
 800fc18:	9300      	str	r3, [sp, #0]
 800fc1a:	6861      	ldr	r1, [r4, #4]
 800fc1c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800fc20:	4628      	mov	r0, r5
 800fc22:	f7ff fefb 	bl	800fa1c <__cvt>
 800fc26:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800fc2a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fc2c:	4680      	mov	r8, r0
 800fc2e:	d129      	bne.n	800fc84 <_printf_float+0x14c>
 800fc30:	1cc8      	adds	r0, r1, #3
 800fc32:	db02      	blt.n	800fc3a <_printf_float+0x102>
 800fc34:	6863      	ldr	r3, [r4, #4]
 800fc36:	4299      	cmp	r1, r3
 800fc38:	dd41      	ble.n	800fcbe <_printf_float+0x186>
 800fc3a:	f1a9 0902 	sub.w	r9, r9, #2
 800fc3e:	fa5f f989 	uxtb.w	r9, r9
 800fc42:	3901      	subs	r1, #1
 800fc44:	464a      	mov	r2, r9
 800fc46:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800fc4a:	9109      	str	r1, [sp, #36]	@ 0x24
 800fc4c:	f7ff ff3a 	bl	800fac4 <__exponent>
 800fc50:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fc52:	1813      	adds	r3, r2, r0
 800fc54:	2a01      	cmp	r2, #1
 800fc56:	4682      	mov	sl, r0
 800fc58:	6123      	str	r3, [r4, #16]
 800fc5a:	dc02      	bgt.n	800fc62 <_printf_float+0x12a>
 800fc5c:	6822      	ldr	r2, [r4, #0]
 800fc5e:	07d2      	lsls	r2, r2, #31
 800fc60:	d501      	bpl.n	800fc66 <_printf_float+0x12e>
 800fc62:	3301      	adds	r3, #1
 800fc64:	6123      	str	r3, [r4, #16]
 800fc66:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d0a6      	beq.n	800fbbc <_printf_float+0x84>
 800fc6e:	232d      	movs	r3, #45	@ 0x2d
 800fc70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fc74:	e7a2      	b.n	800fbbc <_printf_float+0x84>
 800fc76:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800fc7a:	d1c4      	bne.n	800fc06 <_printf_float+0xce>
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d1c2      	bne.n	800fc06 <_printf_float+0xce>
 800fc80:	2301      	movs	r3, #1
 800fc82:	e7bf      	b.n	800fc04 <_printf_float+0xcc>
 800fc84:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800fc88:	d9db      	bls.n	800fc42 <_printf_float+0x10a>
 800fc8a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800fc8e:	d118      	bne.n	800fcc2 <_printf_float+0x18a>
 800fc90:	2900      	cmp	r1, #0
 800fc92:	6863      	ldr	r3, [r4, #4]
 800fc94:	dd0b      	ble.n	800fcae <_printf_float+0x176>
 800fc96:	6121      	str	r1, [r4, #16]
 800fc98:	b913      	cbnz	r3, 800fca0 <_printf_float+0x168>
 800fc9a:	6822      	ldr	r2, [r4, #0]
 800fc9c:	07d0      	lsls	r0, r2, #31
 800fc9e:	d502      	bpl.n	800fca6 <_printf_float+0x16e>
 800fca0:	3301      	adds	r3, #1
 800fca2:	440b      	add	r3, r1
 800fca4:	6123      	str	r3, [r4, #16]
 800fca6:	65a1      	str	r1, [r4, #88]	@ 0x58
 800fca8:	f04f 0a00 	mov.w	sl, #0
 800fcac:	e7db      	b.n	800fc66 <_printf_float+0x12e>
 800fcae:	b913      	cbnz	r3, 800fcb6 <_printf_float+0x17e>
 800fcb0:	6822      	ldr	r2, [r4, #0]
 800fcb2:	07d2      	lsls	r2, r2, #31
 800fcb4:	d501      	bpl.n	800fcba <_printf_float+0x182>
 800fcb6:	3302      	adds	r3, #2
 800fcb8:	e7f4      	b.n	800fca4 <_printf_float+0x16c>
 800fcba:	2301      	movs	r3, #1
 800fcbc:	e7f2      	b.n	800fca4 <_printf_float+0x16c>
 800fcbe:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800fcc2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fcc4:	4299      	cmp	r1, r3
 800fcc6:	db05      	blt.n	800fcd4 <_printf_float+0x19c>
 800fcc8:	6823      	ldr	r3, [r4, #0]
 800fcca:	6121      	str	r1, [r4, #16]
 800fccc:	07d8      	lsls	r0, r3, #31
 800fcce:	d5ea      	bpl.n	800fca6 <_printf_float+0x16e>
 800fcd0:	1c4b      	adds	r3, r1, #1
 800fcd2:	e7e7      	b.n	800fca4 <_printf_float+0x16c>
 800fcd4:	2900      	cmp	r1, #0
 800fcd6:	bfd4      	ite	le
 800fcd8:	f1c1 0202 	rsble	r2, r1, #2
 800fcdc:	2201      	movgt	r2, #1
 800fcde:	4413      	add	r3, r2
 800fce0:	e7e0      	b.n	800fca4 <_printf_float+0x16c>
 800fce2:	6823      	ldr	r3, [r4, #0]
 800fce4:	055a      	lsls	r2, r3, #21
 800fce6:	d407      	bmi.n	800fcf8 <_printf_float+0x1c0>
 800fce8:	6923      	ldr	r3, [r4, #16]
 800fcea:	4642      	mov	r2, r8
 800fcec:	4631      	mov	r1, r6
 800fcee:	4628      	mov	r0, r5
 800fcf0:	47b8      	blx	r7
 800fcf2:	3001      	adds	r0, #1
 800fcf4:	d12a      	bne.n	800fd4c <_printf_float+0x214>
 800fcf6:	e76b      	b.n	800fbd0 <_printf_float+0x98>
 800fcf8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800fcfc:	f240 80e0 	bls.w	800fec0 <_printf_float+0x388>
 800fd00:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800fd04:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fd08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd0c:	d133      	bne.n	800fd76 <_printf_float+0x23e>
 800fd0e:	4a38      	ldr	r2, [pc, #224]	@ (800fdf0 <_printf_float+0x2b8>)
 800fd10:	2301      	movs	r3, #1
 800fd12:	4631      	mov	r1, r6
 800fd14:	4628      	mov	r0, r5
 800fd16:	47b8      	blx	r7
 800fd18:	3001      	adds	r0, #1
 800fd1a:	f43f af59 	beq.w	800fbd0 <_printf_float+0x98>
 800fd1e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800fd22:	4543      	cmp	r3, r8
 800fd24:	db02      	blt.n	800fd2c <_printf_float+0x1f4>
 800fd26:	6823      	ldr	r3, [r4, #0]
 800fd28:	07d8      	lsls	r0, r3, #31
 800fd2a:	d50f      	bpl.n	800fd4c <_printf_float+0x214>
 800fd2c:	9b05      	ldr	r3, [sp, #20]
 800fd2e:	465a      	mov	r2, fp
 800fd30:	4631      	mov	r1, r6
 800fd32:	4628      	mov	r0, r5
 800fd34:	47b8      	blx	r7
 800fd36:	3001      	adds	r0, #1
 800fd38:	f43f af4a 	beq.w	800fbd0 <_printf_float+0x98>
 800fd3c:	f04f 0900 	mov.w	r9, #0
 800fd40:	f108 38ff 	add.w	r8, r8, #4294967295
 800fd44:	f104 0a1a 	add.w	sl, r4, #26
 800fd48:	45c8      	cmp	r8, r9
 800fd4a:	dc09      	bgt.n	800fd60 <_printf_float+0x228>
 800fd4c:	6823      	ldr	r3, [r4, #0]
 800fd4e:	079b      	lsls	r3, r3, #30
 800fd50:	f100 8107 	bmi.w	800ff62 <_printf_float+0x42a>
 800fd54:	68e0      	ldr	r0, [r4, #12]
 800fd56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fd58:	4298      	cmp	r0, r3
 800fd5a:	bfb8      	it	lt
 800fd5c:	4618      	movlt	r0, r3
 800fd5e:	e739      	b.n	800fbd4 <_printf_float+0x9c>
 800fd60:	2301      	movs	r3, #1
 800fd62:	4652      	mov	r2, sl
 800fd64:	4631      	mov	r1, r6
 800fd66:	4628      	mov	r0, r5
 800fd68:	47b8      	blx	r7
 800fd6a:	3001      	adds	r0, #1
 800fd6c:	f43f af30 	beq.w	800fbd0 <_printf_float+0x98>
 800fd70:	f109 0901 	add.w	r9, r9, #1
 800fd74:	e7e8      	b.n	800fd48 <_printf_float+0x210>
 800fd76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	dc3b      	bgt.n	800fdf4 <_printf_float+0x2bc>
 800fd7c:	4a1c      	ldr	r2, [pc, #112]	@ (800fdf0 <_printf_float+0x2b8>)
 800fd7e:	2301      	movs	r3, #1
 800fd80:	4631      	mov	r1, r6
 800fd82:	4628      	mov	r0, r5
 800fd84:	47b8      	blx	r7
 800fd86:	3001      	adds	r0, #1
 800fd88:	f43f af22 	beq.w	800fbd0 <_printf_float+0x98>
 800fd8c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800fd90:	ea59 0303 	orrs.w	r3, r9, r3
 800fd94:	d102      	bne.n	800fd9c <_printf_float+0x264>
 800fd96:	6823      	ldr	r3, [r4, #0]
 800fd98:	07d9      	lsls	r1, r3, #31
 800fd9a:	d5d7      	bpl.n	800fd4c <_printf_float+0x214>
 800fd9c:	9b05      	ldr	r3, [sp, #20]
 800fd9e:	465a      	mov	r2, fp
 800fda0:	4631      	mov	r1, r6
 800fda2:	4628      	mov	r0, r5
 800fda4:	47b8      	blx	r7
 800fda6:	3001      	adds	r0, #1
 800fda8:	f43f af12 	beq.w	800fbd0 <_printf_float+0x98>
 800fdac:	f04f 0a00 	mov.w	sl, #0
 800fdb0:	f104 0b1a 	add.w	fp, r4, #26
 800fdb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fdb6:	425b      	negs	r3, r3
 800fdb8:	4553      	cmp	r3, sl
 800fdba:	dc01      	bgt.n	800fdc0 <_printf_float+0x288>
 800fdbc:	464b      	mov	r3, r9
 800fdbe:	e794      	b.n	800fcea <_printf_float+0x1b2>
 800fdc0:	2301      	movs	r3, #1
 800fdc2:	465a      	mov	r2, fp
 800fdc4:	4631      	mov	r1, r6
 800fdc6:	4628      	mov	r0, r5
 800fdc8:	47b8      	blx	r7
 800fdca:	3001      	adds	r0, #1
 800fdcc:	f43f af00 	beq.w	800fbd0 <_printf_float+0x98>
 800fdd0:	f10a 0a01 	add.w	sl, sl, #1
 800fdd4:	e7ee      	b.n	800fdb4 <_printf_float+0x27c>
 800fdd6:	bf00      	nop
 800fdd8:	ffffffff 	.word	0xffffffff
 800fddc:	7fefffff 	.word	0x7fefffff
 800fde0:	08012855 	.word	0x08012855
 800fde4:	08012851 	.word	0x08012851
 800fde8:	0801285d 	.word	0x0801285d
 800fdec:	08012859 	.word	0x08012859
 800fdf0:	08012861 	.word	0x08012861
 800fdf4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800fdf6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800fdfa:	4553      	cmp	r3, sl
 800fdfc:	bfa8      	it	ge
 800fdfe:	4653      	movge	r3, sl
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	4699      	mov	r9, r3
 800fe04:	dc37      	bgt.n	800fe76 <_printf_float+0x33e>
 800fe06:	2300      	movs	r3, #0
 800fe08:	9307      	str	r3, [sp, #28]
 800fe0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fe0e:	f104 021a 	add.w	r2, r4, #26
 800fe12:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800fe14:	9907      	ldr	r1, [sp, #28]
 800fe16:	9306      	str	r3, [sp, #24]
 800fe18:	eba3 0309 	sub.w	r3, r3, r9
 800fe1c:	428b      	cmp	r3, r1
 800fe1e:	dc31      	bgt.n	800fe84 <_printf_float+0x34c>
 800fe20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe22:	459a      	cmp	sl, r3
 800fe24:	dc3b      	bgt.n	800fe9e <_printf_float+0x366>
 800fe26:	6823      	ldr	r3, [r4, #0]
 800fe28:	07da      	lsls	r2, r3, #31
 800fe2a:	d438      	bmi.n	800fe9e <_printf_float+0x366>
 800fe2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe2e:	ebaa 0903 	sub.w	r9, sl, r3
 800fe32:	9b06      	ldr	r3, [sp, #24]
 800fe34:	ebaa 0303 	sub.w	r3, sl, r3
 800fe38:	4599      	cmp	r9, r3
 800fe3a:	bfa8      	it	ge
 800fe3c:	4699      	movge	r9, r3
 800fe3e:	f1b9 0f00 	cmp.w	r9, #0
 800fe42:	dc34      	bgt.n	800feae <_printf_float+0x376>
 800fe44:	f04f 0800 	mov.w	r8, #0
 800fe48:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fe4c:	f104 0b1a 	add.w	fp, r4, #26
 800fe50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe52:	ebaa 0303 	sub.w	r3, sl, r3
 800fe56:	eba3 0309 	sub.w	r3, r3, r9
 800fe5a:	4543      	cmp	r3, r8
 800fe5c:	f77f af76 	ble.w	800fd4c <_printf_float+0x214>
 800fe60:	2301      	movs	r3, #1
 800fe62:	465a      	mov	r2, fp
 800fe64:	4631      	mov	r1, r6
 800fe66:	4628      	mov	r0, r5
 800fe68:	47b8      	blx	r7
 800fe6a:	3001      	adds	r0, #1
 800fe6c:	f43f aeb0 	beq.w	800fbd0 <_printf_float+0x98>
 800fe70:	f108 0801 	add.w	r8, r8, #1
 800fe74:	e7ec      	b.n	800fe50 <_printf_float+0x318>
 800fe76:	4642      	mov	r2, r8
 800fe78:	4631      	mov	r1, r6
 800fe7a:	4628      	mov	r0, r5
 800fe7c:	47b8      	blx	r7
 800fe7e:	3001      	adds	r0, #1
 800fe80:	d1c1      	bne.n	800fe06 <_printf_float+0x2ce>
 800fe82:	e6a5      	b.n	800fbd0 <_printf_float+0x98>
 800fe84:	2301      	movs	r3, #1
 800fe86:	4631      	mov	r1, r6
 800fe88:	4628      	mov	r0, r5
 800fe8a:	9206      	str	r2, [sp, #24]
 800fe8c:	47b8      	blx	r7
 800fe8e:	3001      	adds	r0, #1
 800fe90:	f43f ae9e 	beq.w	800fbd0 <_printf_float+0x98>
 800fe94:	9b07      	ldr	r3, [sp, #28]
 800fe96:	9a06      	ldr	r2, [sp, #24]
 800fe98:	3301      	adds	r3, #1
 800fe9a:	9307      	str	r3, [sp, #28]
 800fe9c:	e7b9      	b.n	800fe12 <_printf_float+0x2da>
 800fe9e:	9b05      	ldr	r3, [sp, #20]
 800fea0:	465a      	mov	r2, fp
 800fea2:	4631      	mov	r1, r6
 800fea4:	4628      	mov	r0, r5
 800fea6:	47b8      	blx	r7
 800fea8:	3001      	adds	r0, #1
 800feaa:	d1bf      	bne.n	800fe2c <_printf_float+0x2f4>
 800feac:	e690      	b.n	800fbd0 <_printf_float+0x98>
 800feae:	9a06      	ldr	r2, [sp, #24]
 800feb0:	464b      	mov	r3, r9
 800feb2:	4442      	add	r2, r8
 800feb4:	4631      	mov	r1, r6
 800feb6:	4628      	mov	r0, r5
 800feb8:	47b8      	blx	r7
 800feba:	3001      	adds	r0, #1
 800febc:	d1c2      	bne.n	800fe44 <_printf_float+0x30c>
 800febe:	e687      	b.n	800fbd0 <_printf_float+0x98>
 800fec0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800fec4:	f1b9 0f01 	cmp.w	r9, #1
 800fec8:	dc01      	bgt.n	800fece <_printf_float+0x396>
 800feca:	07db      	lsls	r3, r3, #31
 800fecc:	d536      	bpl.n	800ff3c <_printf_float+0x404>
 800fece:	2301      	movs	r3, #1
 800fed0:	4642      	mov	r2, r8
 800fed2:	4631      	mov	r1, r6
 800fed4:	4628      	mov	r0, r5
 800fed6:	47b8      	blx	r7
 800fed8:	3001      	adds	r0, #1
 800feda:	f43f ae79 	beq.w	800fbd0 <_printf_float+0x98>
 800fede:	9b05      	ldr	r3, [sp, #20]
 800fee0:	465a      	mov	r2, fp
 800fee2:	4631      	mov	r1, r6
 800fee4:	4628      	mov	r0, r5
 800fee6:	47b8      	blx	r7
 800fee8:	3001      	adds	r0, #1
 800feea:	f43f ae71 	beq.w	800fbd0 <_printf_float+0x98>
 800feee:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800fef2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fefa:	f109 39ff 	add.w	r9, r9, #4294967295
 800fefe:	d018      	beq.n	800ff32 <_printf_float+0x3fa>
 800ff00:	464b      	mov	r3, r9
 800ff02:	f108 0201 	add.w	r2, r8, #1
 800ff06:	4631      	mov	r1, r6
 800ff08:	4628      	mov	r0, r5
 800ff0a:	47b8      	blx	r7
 800ff0c:	3001      	adds	r0, #1
 800ff0e:	d10c      	bne.n	800ff2a <_printf_float+0x3f2>
 800ff10:	e65e      	b.n	800fbd0 <_printf_float+0x98>
 800ff12:	2301      	movs	r3, #1
 800ff14:	465a      	mov	r2, fp
 800ff16:	4631      	mov	r1, r6
 800ff18:	4628      	mov	r0, r5
 800ff1a:	47b8      	blx	r7
 800ff1c:	3001      	adds	r0, #1
 800ff1e:	f43f ae57 	beq.w	800fbd0 <_printf_float+0x98>
 800ff22:	f108 0801 	add.w	r8, r8, #1
 800ff26:	45c8      	cmp	r8, r9
 800ff28:	dbf3      	blt.n	800ff12 <_printf_float+0x3da>
 800ff2a:	4653      	mov	r3, sl
 800ff2c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ff30:	e6dc      	b.n	800fcec <_printf_float+0x1b4>
 800ff32:	f04f 0800 	mov.w	r8, #0
 800ff36:	f104 0b1a 	add.w	fp, r4, #26
 800ff3a:	e7f4      	b.n	800ff26 <_printf_float+0x3ee>
 800ff3c:	2301      	movs	r3, #1
 800ff3e:	4642      	mov	r2, r8
 800ff40:	e7e1      	b.n	800ff06 <_printf_float+0x3ce>
 800ff42:	2301      	movs	r3, #1
 800ff44:	464a      	mov	r2, r9
 800ff46:	4631      	mov	r1, r6
 800ff48:	4628      	mov	r0, r5
 800ff4a:	47b8      	blx	r7
 800ff4c:	3001      	adds	r0, #1
 800ff4e:	f43f ae3f 	beq.w	800fbd0 <_printf_float+0x98>
 800ff52:	f108 0801 	add.w	r8, r8, #1
 800ff56:	68e3      	ldr	r3, [r4, #12]
 800ff58:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ff5a:	1a5b      	subs	r3, r3, r1
 800ff5c:	4543      	cmp	r3, r8
 800ff5e:	dcf0      	bgt.n	800ff42 <_printf_float+0x40a>
 800ff60:	e6f8      	b.n	800fd54 <_printf_float+0x21c>
 800ff62:	f04f 0800 	mov.w	r8, #0
 800ff66:	f104 0919 	add.w	r9, r4, #25
 800ff6a:	e7f4      	b.n	800ff56 <_printf_float+0x41e>

0800ff6c <_printf_common>:
 800ff6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff70:	4616      	mov	r6, r2
 800ff72:	4698      	mov	r8, r3
 800ff74:	688a      	ldr	r2, [r1, #8]
 800ff76:	690b      	ldr	r3, [r1, #16]
 800ff78:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ff7c:	4293      	cmp	r3, r2
 800ff7e:	bfb8      	it	lt
 800ff80:	4613      	movlt	r3, r2
 800ff82:	6033      	str	r3, [r6, #0]
 800ff84:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ff88:	4607      	mov	r7, r0
 800ff8a:	460c      	mov	r4, r1
 800ff8c:	b10a      	cbz	r2, 800ff92 <_printf_common+0x26>
 800ff8e:	3301      	adds	r3, #1
 800ff90:	6033      	str	r3, [r6, #0]
 800ff92:	6823      	ldr	r3, [r4, #0]
 800ff94:	0699      	lsls	r1, r3, #26
 800ff96:	bf42      	ittt	mi
 800ff98:	6833      	ldrmi	r3, [r6, #0]
 800ff9a:	3302      	addmi	r3, #2
 800ff9c:	6033      	strmi	r3, [r6, #0]
 800ff9e:	6825      	ldr	r5, [r4, #0]
 800ffa0:	f015 0506 	ands.w	r5, r5, #6
 800ffa4:	d106      	bne.n	800ffb4 <_printf_common+0x48>
 800ffa6:	f104 0a19 	add.w	sl, r4, #25
 800ffaa:	68e3      	ldr	r3, [r4, #12]
 800ffac:	6832      	ldr	r2, [r6, #0]
 800ffae:	1a9b      	subs	r3, r3, r2
 800ffb0:	42ab      	cmp	r3, r5
 800ffb2:	dc26      	bgt.n	8010002 <_printf_common+0x96>
 800ffb4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ffb8:	6822      	ldr	r2, [r4, #0]
 800ffba:	3b00      	subs	r3, #0
 800ffbc:	bf18      	it	ne
 800ffbe:	2301      	movne	r3, #1
 800ffc0:	0692      	lsls	r2, r2, #26
 800ffc2:	d42b      	bmi.n	801001c <_printf_common+0xb0>
 800ffc4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ffc8:	4641      	mov	r1, r8
 800ffca:	4638      	mov	r0, r7
 800ffcc:	47c8      	blx	r9
 800ffce:	3001      	adds	r0, #1
 800ffd0:	d01e      	beq.n	8010010 <_printf_common+0xa4>
 800ffd2:	6823      	ldr	r3, [r4, #0]
 800ffd4:	6922      	ldr	r2, [r4, #16]
 800ffd6:	f003 0306 	and.w	r3, r3, #6
 800ffda:	2b04      	cmp	r3, #4
 800ffdc:	bf02      	ittt	eq
 800ffde:	68e5      	ldreq	r5, [r4, #12]
 800ffe0:	6833      	ldreq	r3, [r6, #0]
 800ffe2:	1aed      	subeq	r5, r5, r3
 800ffe4:	68a3      	ldr	r3, [r4, #8]
 800ffe6:	bf0c      	ite	eq
 800ffe8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ffec:	2500      	movne	r5, #0
 800ffee:	4293      	cmp	r3, r2
 800fff0:	bfc4      	itt	gt
 800fff2:	1a9b      	subgt	r3, r3, r2
 800fff4:	18ed      	addgt	r5, r5, r3
 800fff6:	2600      	movs	r6, #0
 800fff8:	341a      	adds	r4, #26
 800fffa:	42b5      	cmp	r5, r6
 800fffc:	d11a      	bne.n	8010034 <_printf_common+0xc8>
 800fffe:	2000      	movs	r0, #0
 8010000:	e008      	b.n	8010014 <_printf_common+0xa8>
 8010002:	2301      	movs	r3, #1
 8010004:	4652      	mov	r2, sl
 8010006:	4641      	mov	r1, r8
 8010008:	4638      	mov	r0, r7
 801000a:	47c8      	blx	r9
 801000c:	3001      	adds	r0, #1
 801000e:	d103      	bne.n	8010018 <_printf_common+0xac>
 8010010:	f04f 30ff 	mov.w	r0, #4294967295
 8010014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010018:	3501      	adds	r5, #1
 801001a:	e7c6      	b.n	800ffaa <_printf_common+0x3e>
 801001c:	18e1      	adds	r1, r4, r3
 801001e:	1c5a      	adds	r2, r3, #1
 8010020:	2030      	movs	r0, #48	@ 0x30
 8010022:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010026:	4422      	add	r2, r4
 8010028:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801002c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010030:	3302      	adds	r3, #2
 8010032:	e7c7      	b.n	800ffc4 <_printf_common+0x58>
 8010034:	2301      	movs	r3, #1
 8010036:	4622      	mov	r2, r4
 8010038:	4641      	mov	r1, r8
 801003a:	4638      	mov	r0, r7
 801003c:	47c8      	blx	r9
 801003e:	3001      	adds	r0, #1
 8010040:	d0e6      	beq.n	8010010 <_printf_common+0xa4>
 8010042:	3601      	adds	r6, #1
 8010044:	e7d9      	b.n	800fffa <_printf_common+0x8e>
	...

08010048 <_printf_i>:
 8010048:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801004c:	7e0f      	ldrb	r7, [r1, #24]
 801004e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010050:	2f78      	cmp	r7, #120	@ 0x78
 8010052:	4691      	mov	r9, r2
 8010054:	4680      	mov	r8, r0
 8010056:	460c      	mov	r4, r1
 8010058:	469a      	mov	sl, r3
 801005a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801005e:	d807      	bhi.n	8010070 <_printf_i+0x28>
 8010060:	2f62      	cmp	r7, #98	@ 0x62
 8010062:	d80a      	bhi.n	801007a <_printf_i+0x32>
 8010064:	2f00      	cmp	r7, #0
 8010066:	f000 80d1 	beq.w	801020c <_printf_i+0x1c4>
 801006a:	2f58      	cmp	r7, #88	@ 0x58
 801006c:	f000 80b8 	beq.w	80101e0 <_printf_i+0x198>
 8010070:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010074:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010078:	e03a      	b.n	80100f0 <_printf_i+0xa8>
 801007a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801007e:	2b15      	cmp	r3, #21
 8010080:	d8f6      	bhi.n	8010070 <_printf_i+0x28>
 8010082:	a101      	add	r1, pc, #4	@ (adr r1, 8010088 <_printf_i+0x40>)
 8010084:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010088:	080100e1 	.word	0x080100e1
 801008c:	080100f5 	.word	0x080100f5
 8010090:	08010071 	.word	0x08010071
 8010094:	08010071 	.word	0x08010071
 8010098:	08010071 	.word	0x08010071
 801009c:	08010071 	.word	0x08010071
 80100a0:	080100f5 	.word	0x080100f5
 80100a4:	08010071 	.word	0x08010071
 80100a8:	08010071 	.word	0x08010071
 80100ac:	08010071 	.word	0x08010071
 80100b0:	08010071 	.word	0x08010071
 80100b4:	080101f3 	.word	0x080101f3
 80100b8:	0801011f 	.word	0x0801011f
 80100bc:	080101ad 	.word	0x080101ad
 80100c0:	08010071 	.word	0x08010071
 80100c4:	08010071 	.word	0x08010071
 80100c8:	08010215 	.word	0x08010215
 80100cc:	08010071 	.word	0x08010071
 80100d0:	0801011f 	.word	0x0801011f
 80100d4:	08010071 	.word	0x08010071
 80100d8:	08010071 	.word	0x08010071
 80100dc:	080101b5 	.word	0x080101b5
 80100e0:	6833      	ldr	r3, [r6, #0]
 80100e2:	1d1a      	adds	r2, r3, #4
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	6032      	str	r2, [r6, #0]
 80100e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80100ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80100f0:	2301      	movs	r3, #1
 80100f2:	e09c      	b.n	801022e <_printf_i+0x1e6>
 80100f4:	6833      	ldr	r3, [r6, #0]
 80100f6:	6820      	ldr	r0, [r4, #0]
 80100f8:	1d19      	adds	r1, r3, #4
 80100fa:	6031      	str	r1, [r6, #0]
 80100fc:	0606      	lsls	r6, r0, #24
 80100fe:	d501      	bpl.n	8010104 <_printf_i+0xbc>
 8010100:	681d      	ldr	r5, [r3, #0]
 8010102:	e003      	b.n	801010c <_printf_i+0xc4>
 8010104:	0645      	lsls	r5, r0, #25
 8010106:	d5fb      	bpl.n	8010100 <_printf_i+0xb8>
 8010108:	f9b3 5000 	ldrsh.w	r5, [r3]
 801010c:	2d00      	cmp	r5, #0
 801010e:	da03      	bge.n	8010118 <_printf_i+0xd0>
 8010110:	232d      	movs	r3, #45	@ 0x2d
 8010112:	426d      	negs	r5, r5
 8010114:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010118:	4858      	ldr	r0, [pc, #352]	@ (801027c <_printf_i+0x234>)
 801011a:	230a      	movs	r3, #10
 801011c:	e011      	b.n	8010142 <_printf_i+0xfa>
 801011e:	6821      	ldr	r1, [r4, #0]
 8010120:	6833      	ldr	r3, [r6, #0]
 8010122:	0608      	lsls	r0, r1, #24
 8010124:	f853 5b04 	ldr.w	r5, [r3], #4
 8010128:	d402      	bmi.n	8010130 <_printf_i+0xe8>
 801012a:	0649      	lsls	r1, r1, #25
 801012c:	bf48      	it	mi
 801012e:	b2ad      	uxthmi	r5, r5
 8010130:	2f6f      	cmp	r7, #111	@ 0x6f
 8010132:	4852      	ldr	r0, [pc, #328]	@ (801027c <_printf_i+0x234>)
 8010134:	6033      	str	r3, [r6, #0]
 8010136:	bf14      	ite	ne
 8010138:	230a      	movne	r3, #10
 801013a:	2308      	moveq	r3, #8
 801013c:	2100      	movs	r1, #0
 801013e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010142:	6866      	ldr	r6, [r4, #4]
 8010144:	60a6      	str	r6, [r4, #8]
 8010146:	2e00      	cmp	r6, #0
 8010148:	db05      	blt.n	8010156 <_printf_i+0x10e>
 801014a:	6821      	ldr	r1, [r4, #0]
 801014c:	432e      	orrs	r6, r5
 801014e:	f021 0104 	bic.w	r1, r1, #4
 8010152:	6021      	str	r1, [r4, #0]
 8010154:	d04b      	beq.n	80101ee <_printf_i+0x1a6>
 8010156:	4616      	mov	r6, r2
 8010158:	fbb5 f1f3 	udiv	r1, r5, r3
 801015c:	fb03 5711 	mls	r7, r3, r1, r5
 8010160:	5dc7      	ldrb	r7, [r0, r7]
 8010162:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010166:	462f      	mov	r7, r5
 8010168:	42bb      	cmp	r3, r7
 801016a:	460d      	mov	r5, r1
 801016c:	d9f4      	bls.n	8010158 <_printf_i+0x110>
 801016e:	2b08      	cmp	r3, #8
 8010170:	d10b      	bne.n	801018a <_printf_i+0x142>
 8010172:	6823      	ldr	r3, [r4, #0]
 8010174:	07df      	lsls	r7, r3, #31
 8010176:	d508      	bpl.n	801018a <_printf_i+0x142>
 8010178:	6923      	ldr	r3, [r4, #16]
 801017a:	6861      	ldr	r1, [r4, #4]
 801017c:	4299      	cmp	r1, r3
 801017e:	bfde      	ittt	le
 8010180:	2330      	movle	r3, #48	@ 0x30
 8010182:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010186:	f106 36ff 	addle.w	r6, r6, #4294967295
 801018a:	1b92      	subs	r2, r2, r6
 801018c:	6122      	str	r2, [r4, #16]
 801018e:	f8cd a000 	str.w	sl, [sp]
 8010192:	464b      	mov	r3, r9
 8010194:	aa03      	add	r2, sp, #12
 8010196:	4621      	mov	r1, r4
 8010198:	4640      	mov	r0, r8
 801019a:	f7ff fee7 	bl	800ff6c <_printf_common>
 801019e:	3001      	adds	r0, #1
 80101a0:	d14a      	bne.n	8010238 <_printf_i+0x1f0>
 80101a2:	f04f 30ff 	mov.w	r0, #4294967295
 80101a6:	b004      	add	sp, #16
 80101a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101ac:	6823      	ldr	r3, [r4, #0]
 80101ae:	f043 0320 	orr.w	r3, r3, #32
 80101b2:	6023      	str	r3, [r4, #0]
 80101b4:	4832      	ldr	r0, [pc, #200]	@ (8010280 <_printf_i+0x238>)
 80101b6:	2778      	movs	r7, #120	@ 0x78
 80101b8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80101bc:	6823      	ldr	r3, [r4, #0]
 80101be:	6831      	ldr	r1, [r6, #0]
 80101c0:	061f      	lsls	r7, r3, #24
 80101c2:	f851 5b04 	ldr.w	r5, [r1], #4
 80101c6:	d402      	bmi.n	80101ce <_printf_i+0x186>
 80101c8:	065f      	lsls	r7, r3, #25
 80101ca:	bf48      	it	mi
 80101cc:	b2ad      	uxthmi	r5, r5
 80101ce:	6031      	str	r1, [r6, #0]
 80101d0:	07d9      	lsls	r1, r3, #31
 80101d2:	bf44      	itt	mi
 80101d4:	f043 0320 	orrmi.w	r3, r3, #32
 80101d8:	6023      	strmi	r3, [r4, #0]
 80101da:	b11d      	cbz	r5, 80101e4 <_printf_i+0x19c>
 80101dc:	2310      	movs	r3, #16
 80101de:	e7ad      	b.n	801013c <_printf_i+0xf4>
 80101e0:	4826      	ldr	r0, [pc, #152]	@ (801027c <_printf_i+0x234>)
 80101e2:	e7e9      	b.n	80101b8 <_printf_i+0x170>
 80101e4:	6823      	ldr	r3, [r4, #0]
 80101e6:	f023 0320 	bic.w	r3, r3, #32
 80101ea:	6023      	str	r3, [r4, #0]
 80101ec:	e7f6      	b.n	80101dc <_printf_i+0x194>
 80101ee:	4616      	mov	r6, r2
 80101f0:	e7bd      	b.n	801016e <_printf_i+0x126>
 80101f2:	6833      	ldr	r3, [r6, #0]
 80101f4:	6825      	ldr	r5, [r4, #0]
 80101f6:	6961      	ldr	r1, [r4, #20]
 80101f8:	1d18      	adds	r0, r3, #4
 80101fa:	6030      	str	r0, [r6, #0]
 80101fc:	062e      	lsls	r6, r5, #24
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	d501      	bpl.n	8010206 <_printf_i+0x1be>
 8010202:	6019      	str	r1, [r3, #0]
 8010204:	e002      	b.n	801020c <_printf_i+0x1c4>
 8010206:	0668      	lsls	r0, r5, #25
 8010208:	d5fb      	bpl.n	8010202 <_printf_i+0x1ba>
 801020a:	8019      	strh	r1, [r3, #0]
 801020c:	2300      	movs	r3, #0
 801020e:	6123      	str	r3, [r4, #16]
 8010210:	4616      	mov	r6, r2
 8010212:	e7bc      	b.n	801018e <_printf_i+0x146>
 8010214:	6833      	ldr	r3, [r6, #0]
 8010216:	1d1a      	adds	r2, r3, #4
 8010218:	6032      	str	r2, [r6, #0]
 801021a:	681e      	ldr	r6, [r3, #0]
 801021c:	6862      	ldr	r2, [r4, #4]
 801021e:	2100      	movs	r1, #0
 8010220:	4630      	mov	r0, r6
 8010222:	f7f0 f86d 	bl	8000300 <memchr>
 8010226:	b108      	cbz	r0, 801022c <_printf_i+0x1e4>
 8010228:	1b80      	subs	r0, r0, r6
 801022a:	6060      	str	r0, [r4, #4]
 801022c:	6863      	ldr	r3, [r4, #4]
 801022e:	6123      	str	r3, [r4, #16]
 8010230:	2300      	movs	r3, #0
 8010232:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010236:	e7aa      	b.n	801018e <_printf_i+0x146>
 8010238:	6923      	ldr	r3, [r4, #16]
 801023a:	4632      	mov	r2, r6
 801023c:	4649      	mov	r1, r9
 801023e:	4640      	mov	r0, r8
 8010240:	47d0      	blx	sl
 8010242:	3001      	adds	r0, #1
 8010244:	d0ad      	beq.n	80101a2 <_printf_i+0x15a>
 8010246:	6823      	ldr	r3, [r4, #0]
 8010248:	079b      	lsls	r3, r3, #30
 801024a:	d413      	bmi.n	8010274 <_printf_i+0x22c>
 801024c:	68e0      	ldr	r0, [r4, #12]
 801024e:	9b03      	ldr	r3, [sp, #12]
 8010250:	4298      	cmp	r0, r3
 8010252:	bfb8      	it	lt
 8010254:	4618      	movlt	r0, r3
 8010256:	e7a6      	b.n	80101a6 <_printf_i+0x15e>
 8010258:	2301      	movs	r3, #1
 801025a:	4632      	mov	r2, r6
 801025c:	4649      	mov	r1, r9
 801025e:	4640      	mov	r0, r8
 8010260:	47d0      	blx	sl
 8010262:	3001      	adds	r0, #1
 8010264:	d09d      	beq.n	80101a2 <_printf_i+0x15a>
 8010266:	3501      	adds	r5, #1
 8010268:	68e3      	ldr	r3, [r4, #12]
 801026a:	9903      	ldr	r1, [sp, #12]
 801026c:	1a5b      	subs	r3, r3, r1
 801026e:	42ab      	cmp	r3, r5
 8010270:	dcf2      	bgt.n	8010258 <_printf_i+0x210>
 8010272:	e7eb      	b.n	801024c <_printf_i+0x204>
 8010274:	2500      	movs	r5, #0
 8010276:	f104 0619 	add.w	r6, r4, #25
 801027a:	e7f5      	b.n	8010268 <_printf_i+0x220>
 801027c:	08012863 	.word	0x08012863
 8010280:	08012874 	.word	0x08012874

08010284 <std>:
 8010284:	2300      	movs	r3, #0
 8010286:	b510      	push	{r4, lr}
 8010288:	4604      	mov	r4, r0
 801028a:	e9c0 3300 	strd	r3, r3, [r0]
 801028e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010292:	6083      	str	r3, [r0, #8]
 8010294:	8181      	strh	r1, [r0, #12]
 8010296:	6643      	str	r3, [r0, #100]	@ 0x64
 8010298:	81c2      	strh	r2, [r0, #14]
 801029a:	6183      	str	r3, [r0, #24]
 801029c:	4619      	mov	r1, r3
 801029e:	2208      	movs	r2, #8
 80102a0:	305c      	adds	r0, #92	@ 0x5c
 80102a2:	f000 f9bd 	bl	8010620 <memset>
 80102a6:	4b0d      	ldr	r3, [pc, #52]	@ (80102dc <std+0x58>)
 80102a8:	6263      	str	r3, [r4, #36]	@ 0x24
 80102aa:	4b0d      	ldr	r3, [pc, #52]	@ (80102e0 <std+0x5c>)
 80102ac:	62a3      	str	r3, [r4, #40]	@ 0x28
 80102ae:	4b0d      	ldr	r3, [pc, #52]	@ (80102e4 <std+0x60>)
 80102b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80102b2:	4b0d      	ldr	r3, [pc, #52]	@ (80102e8 <std+0x64>)
 80102b4:	6323      	str	r3, [r4, #48]	@ 0x30
 80102b6:	4b0d      	ldr	r3, [pc, #52]	@ (80102ec <std+0x68>)
 80102b8:	6224      	str	r4, [r4, #32]
 80102ba:	429c      	cmp	r4, r3
 80102bc:	d006      	beq.n	80102cc <std+0x48>
 80102be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80102c2:	4294      	cmp	r4, r2
 80102c4:	d002      	beq.n	80102cc <std+0x48>
 80102c6:	33d0      	adds	r3, #208	@ 0xd0
 80102c8:	429c      	cmp	r4, r3
 80102ca:	d105      	bne.n	80102d8 <std+0x54>
 80102cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80102d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80102d4:	f000 ba8c 	b.w	80107f0 <__retarget_lock_init_recursive>
 80102d8:	bd10      	pop	{r4, pc}
 80102da:	bf00      	nop
 80102dc:	08010471 	.word	0x08010471
 80102e0:	08010493 	.word	0x08010493
 80102e4:	080104cb 	.word	0x080104cb
 80102e8:	080104ef 	.word	0x080104ef
 80102ec:	24000738 	.word	0x24000738

080102f0 <stdio_exit_handler>:
 80102f0:	4a02      	ldr	r2, [pc, #8]	@ (80102fc <stdio_exit_handler+0xc>)
 80102f2:	4903      	ldr	r1, [pc, #12]	@ (8010300 <stdio_exit_handler+0x10>)
 80102f4:	4803      	ldr	r0, [pc, #12]	@ (8010304 <stdio_exit_handler+0x14>)
 80102f6:	f000 b869 	b.w	80103cc <_fwalk_sglue>
 80102fa:	bf00      	nop
 80102fc:	2400002c 	.word	0x2400002c
 8010300:	0801234d 	.word	0x0801234d
 8010304:	2400003c 	.word	0x2400003c

08010308 <cleanup_stdio>:
 8010308:	6841      	ldr	r1, [r0, #4]
 801030a:	4b0c      	ldr	r3, [pc, #48]	@ (801033c <cleanup_stdio+0x34>)
 801030c:	4299      	cmp	r1, r3
 801030e:	b510      	push	{r4, lr}
 8010310:	4604      	mov	r4, r0
 8010312:	d001      	beq.n	8010318 <cleanup_stdio+0x10>
 8010314:	f002 f81a 	bl	801234c <_fflush_r>
 8010318:	68a1      	ldr	r1, [r4, #8]
 801031a:	4b09      	ldr	r3, [pc, #36]	@ (8010340 <cleanup_stdio+0x38>)
 801031c:	4299      	cmp	r1, r3
 801031e:	d002      	beq.n	8010326 <cleanup_stdio+0x1e>
 8010320:	4620      	mov	r0, r4
 8010322:	f002 f813 	bl	801234c <_fflush_r>
 8010326:	68e1      	ldr	r1, [r4, #12]
 8010328:	4b06      	ldr	r3, [pc, #24]	@ (8010344 <cleanup_stdio+0x3c>)
 801032a:	4299      	cmp	r1, r3
 801032c:	d004      	beq.n	8010338 <cleanup_stdio+0x30>
 801032e:	4620      	mov	r0, r4
 8010330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010334:	f002 b80a 	b.w	801234c <_fflush_r>
 8010338:	bd10      	pop	{r4, pc}
 801033a:	bf00      	nop
 801033c:	24000738 	.word	0x24000738
 8010340:	240007a0 	.word	0x240007a0
 8010344:	24000808 	.word	0x24000808

08010348 <global_stdio_init.part.0>:
 8010348:	b510      	push	{r4, lr}
 801034a:	4b0b      	ldr	r3, [pc, #44]	@ (8010378 <global_stdio_init.part.0+0x30>)
 801034c:	4c0b      	ldr	r4, [pc, #44]	@ (801037c <global_stdio_init.part.0+0x34>)
 801034e:	4a0c      	ldr	r2, [pc, #48]	@ (8010380 <global_stdio_init.part.0+0x38>)
 8010350:	601a      	str	r2, [r3, #0]
 8010352:	4620      	mov	r0, r4
 8010354:	2200      	movs	r2, #0
 8010356:	2104      	movs	r1, #4
 8010358:	f7ff ff94 	bl	8010284 <std>
 801035c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010360:	2201      	movs	r2, #1
 8010362:	2109      	movs	r1, #9
 8010364:	f7ff ff8e 	bl	8010284 <std>
 8010368:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801036c:	2202      	movs	r2, #2
 801036e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010372:	2112      	movs	r1, #18
 8010374:	f7ff bf86 	b.w	8010284 <std>
 8010378:	24000870 	.word	0x24000870
 801037c:	24000738 	.word	0x24000738
 8010380:	080102f1 	.word	0x080102f1

08010384 <__sfp_lock_acquire>:
 8010384:	4801      	ldr	r0, [pc, #4]	@ (801038c <__sfp_lock_acquire+0x8>)
 8010386:	f000 ba34 	b.w	80107f2 <__retarget_lock_acquire_recursive>
 801038a:	bf00      	nop
 801038c:	24000879 	.word	0x24000879

08010390 <__sfp_lock_release>:
 8010390:	4801      	ldr	r0, [pc, #4]	@ (8010398 <__sfp_lock_release+0x8>)
 8010392:	f000 ba2f 	b.w	80107f4 <__retarget_lock_release_recursive>
 8010396:	bf00      	nop
 8010398:	24000879 	.word	0x24000879

0801039c <__sinit>:
 801039c:	b510      	push	{r4, lr}
 801039e:	4604      	mov	r4, r0
 80103a0:	f7ff fff0 	bl	8010384 <__sfp_lock_acquire>
 80103a4:	6a23      	ldr	r3, [r4, #32]
 80103a6:	b11b      	cbz	r3, 80103b0 <__sinit+0x14>
 80103a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80103ac:	f7ff bff0 	b.w	8010390 <__sfp_lock_release>
 80103b0:	4b04      	ldr	r3, [pc, #16]	@ (80103c4 <__sinit+0x28>)
 80103b2:	6223      	str	r3, [r4, #32]
 80103b4:	4b04      	ldr	r3, [pc, #16]	@ (80103c8 <__sinit+0x2c>)
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d1f5      	bne.n	80103a8 <__sinit+0xc>
 80103bc:	f7ff ffc4 	bl	8010348 <global_stdio_init.part.0>
 80103c0:	e7f2      	b.n	80103a8 <__sinit+0xc>
 80103c2:	bf00      	nop
 80103c4:	08010309 	.word	0x08010309
 80103c8:	24000870 	.word	0x24000870

080103cc <_fwalk_sglue>:
 80103cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80103d0:	4607      	mov	r7, r0
 80103d2:	4688      	mov	r8, r1
 80103d4:	4614      	mov	r4, r2
 80103d6:	2600      	movs	r6, #0
 80103d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80103dc:	f1b9 0901 	subs.w	r9, r9, #1
 80103e0:	d505      	bpl.n	80103ee <_fwalk_sglue+0x22>
 80103e2:	6824      	ldr	r4, [r4, #0]
 80103e4:	2c00      	cmp	r4, #0
 80103e6:	d1f7      	bne.n	80103d8 <_fwalk_sglue+0xc>
 80103e8:	4630      	mov	r0, r6
 80103ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80103ee:	89ab      	ldrh	r3, [r5, #12]
 80103f0:	2b01      	cmp	r3, #1
 80103f2:	d907      	bls.n	8010404 <_fwalk_sglue+0x38>
 80103f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80103f8:	3301      	adds	r3, #1
 80103fa:	d003      	beq.n	8010404 <_fwalk_sglue+0x38>
 80103fc:	4629      	mov	r1, r5
 80103fe:	4638      	mov	r0, r7
 8010400:	47c0      	blx	r8
 8010402:	4306      	orrs	r6, r0
 8010404:	3568      	adds	r5, #104	@ 0x68
 8010406:	e7e9      	b.n	80103dc <_fwalk_sglue+0x10>

08010408 <iprintf>:
 8010408:	b40f      	push	{r0, r1, r2, r3}
 801040a:	b507      	push	{r0, r1, r2, lr}
 801040c:	4906      	ldr	r1, [pc, #24]	@ (8010428 <iprintf+0x20>)
 801040e:	ab04      	add	r3, sp, #16
 8010410:	6808      	ldr	r0, [r1, #0]
 8010412:	f853 2b04 	ldr.w	r2, [r3], #4
 8010416:	6881      	ldr	r1, [r0, #8]
 8010418:	9301      	str	r3, [sp, #4]
 801041a:	f001 fdfb 	bl	8012014 <_vfiprintf_r>
 801041e:	b003      	add	sp, #12
 8010420:	f85d eb04 	ldr.w	lr, [sp], #4
 8010424:	b004      	add	sp, #16
 8010426:	4770      	bx	lr
 8010428:	24000038 	.word	0x24000038

0801042c <siprintf>:
 801042c:	b40e      	push	{r1, r2, r3}
 801042e:	b510      	push	{r4, lr}
 8010430:	b09d      	sub	sp, #116	@ 0x74
 8010432:	ab1f      	add	r3, sp, #124	@ 0x7c
 8010434:	9002      	str	r0, [sp, #8]
 8010436:	9006      	str	r0, [sp, #24]
 8010438:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801043c:	480a      	ldr	r0, [pc, #40]	@ (8010468 <siprintf+0x3c>)
 801043e:	9107      	str	r1, [sp, #28]
 8010440:	9104      	str	r1, [sp, #16]
 8010442:	490a      	ldr	r1, [pc, #40]	@ (801046c <siprintf+0x40>)
 8010444:	f853 2b04 	ldr.w	r2, [r3], #4
 8010448:	9105      	str	r1, [sp, #20]
 801044a:	2400      	movs	r4, #0
 801044c:	a902      	add	r1, sp, #8
 801044e:	6800      	ldr	r0, [r0, #0]
 8010450:	9301      	str	r3, [sp, #4]
 8010452:	941b      	str	r4, [sp, #108]	@ 0x6c
 8010454:	f001 fcb8 	bl	8011dc8 <_svfiprintf_r>
 8010458:	9b02      	ldr	r3, [sp, #8]
 801045a:	701c      	strb	r4, [r3, #0]
 801045c:	b01d      	add	sp, #116	@ 0x74
 801045e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010462:	b003      	add	sp, #12
 8010464:	4770      	bx	lr
 8010466:	bf00      	nop
 8010468:	24000038 	.word	0x24000038
 801046c:	ffff0208 	.word	0xffff0208

08010470 <__sread>:
 8010470:	b510      	push	{r4, lr}
 8010472:	460c      	mov	r4, r1
 8010474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010478:	f000 f96c 	bl	8010754 <_read_r>
 801047c:	2800      	cmp	r0, #0
 801047e:	bfab      	itete	ge
 8010480:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010482:	89a3      	ldrhlt	r3, [r4, #12]
 8010484:	181b      	addge	r3, r3, r0
 8010486:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801048a:	bfac      	ite	ge
 801048c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801048e:	81a3      	strhlt	r3, [r4, #12]
 8010490:	bd10      	pop	{r4, pc}

08010492 <__swrite>:
 8010492:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010496:	461f      	mov	r7, r3
 8010498:	898b      	ldrh	r3, [r1, #12]
 801049a:	05db      	lsls	r3, r3, #23
 801049c:	4605      	mov	r5, r0
 801049e:	460c      	mov	r4, r1
 80104a0:	4616      	mov	r6, r2
 80104a2:	d505      	bpl.n	80104b0 <__swrite+0x1e>
 80104a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80104a8:	2302      	movs	r3, #2
 80104aa:	2200      	movs	r2, #0
 80104ac:	f000 f940 	bl	8010730 <_lseek_r>
 80104b0:	89a3      	ldrh	r3, [r4, #12]
 80104b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80104b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80104ba:	81a3      	strh	r3, [r4, #12]
 80104bc:	4632      	mov	r2, r6
 80104be:	463b      	mov	r3, r7
 80104c0:	4628      	mov	r0, r5
 80104c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80104c6:	f000 b957 	b.w	8010778 <_write_r>

080104ca <__sseek>:
 80104ca:	b510      	push	{r4, lr}
 80104cc:	460c      	mov	r4, r1
 80104ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80104d2:	f000 f92d 	bl	8010730 <_lseek_r>
 80104d6:	1c43      	adds	r3, r0, #1
 80104d8:	89a3      	ldrh	r3, [r4, #12]
 80104da:	bf15      	itete	ne
 80104dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80104de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80104e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80104e6:	81a3      	strheq	r3, [r4, #12]
 80104e8:	bf18      	it	ne
 80104ea:	81a3      	strhne	r3, [r4, #12]
 80104ec:	bd10      	pop	{r4, pc}

080104ee <__sclose>:
 80104ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80104f2:	f000 b90d 	b.w	8010710 <_close_r>

080104f6 <__swbuf_r>:
 80104f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104f8:	460e      	mov	r6, r1
 80104fa:	4614      	mov	r4, r2
 80104fc:	4605      	mov	r5, r0
 80104fe:	b118      	cbz	r0, 8010508 <__swbuf_r+0x12>
 8010500:	6a03      	ldr	r3, [r0, #32]
 8010502:	b90b      	cbnz	r3, 8010508 <__swbuf_r+0x12>
 8010504:	f7ff ff4a 	bl	801039c <__sinit>
 8010508:	69a3      	ldr	r3, [r4, #24]
 801050a:	60a3      	str	r3, [r4, #8]
 801050c:	89a3      	ldrh	r3, [r4, #12]
 801050e:	071a      	lsls	r2, r3, #28
 8010510:	d501      	bpl.n	8010516 <__swbuf_r+0x20>
 8010512:	6923      	ldr	r3, [r4, #16]
 8010514:	b943      	cbnz	r3, 8010528 <__swbuf_r+0x32>
 8010516:	4621      	mov	r1, r4
 8010518:	4628      	mov	r0, r5
 801051a:	f000 f82b 	bl	8010574 <__swsetup_r>
 801051e:	b118      	cbz	r0, 8010528 <__swbuf_r+0x32>
 8010520:	f04f 37ff 	mov.w	r7, #4294967295
 8010524:	4638      	mov	r0, r7
 8010526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010528:	6823      	ldr	r3, [r4, #0]
 801052a:	6922      	ldr	r2, [r4, #16]
 801052c:	1a98      	subs	r0, r3, r2
 801052e:	6963      	ldr	r3, [r4, #20]
 8010530:	b2f6      	uxtb	r6, r6
 8010532:	4283      	cmp	r3, r0
 8010534:	4637      	mov	r7, r6
 8010536:	dc05      	bgt.n	8010544 <__swbuf_r+0x4e>
 8010538:	4621      	mov	r1, r4
 801053a:	4628      	mov	r0, r5
 801053c:	f001 ff06 	bl	801234c <_fflush_r>
 8010540:	2800      	cmp	r0, #0
 8010542:	d1ed      	bne.n	8010520 <__swbuf_r+0x2a>
 8010544:	68a3      	ldr	r3, [r4, #8]
 8010546:	3b01      	subs	r3, #1
 8010548:	60a3      	str	r3, [r4, #8]
 801054a:	6823      	ldr	r3, [r4, #0]
 801054c:	1c5a      	adds	r2, r3, #1
 801054e:	6022      	str	r2, [r4, #0]
 8010550:	701e      	strb	r6, [r3, #0]
 8010552:	6962      	ldr	r2, [r4, #20]
 8010554:	1c43      	adds	r3, r0, #1
 8010556:	429a      	cmp	r2, r3
 8010558:	d004      	beq.n	8010564 <__swbuf_r+0x6e>
 801055a:	89a3      	ldrh	r3, [r4, #12]
 801055c:	07db      	lsls	r3, r3, #31
 801055e:	d5e1      	bpl.n	8010524 <__swbuf_r+0x2e>
 8010560:	2e0a      	cmp	r6, #10
 8010562:	d1df      	bne.n	8010524 <__swbuf_r+0x2e>
 8010564:	4621      	mov	r1, r4
 8010566:	4628      	mov	r0, r5
 8010568:	f001 fef0 	bl	801234c <_fflush_r>
 801056c:	2800      	cmp	r0, #0
 801056e:	d0d9      	beq.n	8010524 <__swbuf_r+0x2e>
 8010570:	e7d6      	b.n	8010520 <__swbuf_r+0x2a>
	...

08010574 <__swsetup_r>:
 8010574:	b538      	push	{r3, r4, r5, lr}
 8010576:	4b29      	ldr	r3, [pc, #164]	@ (801061c <__swsetup_r+0xa8>)
 8010578:	4605      	mov	r5, r0
 801057a:	6818      	ldr	r0, [r3, #0]
 801057c:	460c      	mov	r4, r1
 801057e:	b118      	cbz	r0, 8010588 <__swsetup_r+0x14>
 8010580:	6a03      	ldr	r3, [r0, #32]
 8010582:	b90b      	cbnz	r3, 8010588 <__swsetup_r+0x14>
 8010584:	f7ff ff0a 	bl	801039c <__sinit>
 8010588:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801058c:	0719      	lsls	r1, r3, #28
 801058e:	d422      	bmi.n	80105d6 <__swsetup_r+0x62>
 8010590:	06da      	lsls	r2, r3, #27
 8010592:	d407      	bmi.n	80105a4 <__swsetup_r+0x30>
 8010594:	2209      	movs	r2, #9
 8010596:	602a      	str	r2, [r5, #0]
 8010598:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801059c:	81a3      	strh	r3, [r4, #12]
 801059e:	f04f 30ff 	mov.w	r0, #4294967295
 80105a2:	e033      	b.n	801060c <__swsetup_r+0x98>
 80105a4:	0758      	lsls	r0, r3, #29
 80105a6:	d512      	bpl.n	80105ce <__swsetup_r+0x5a>
 80105a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80105aa:	b141      	cbz	r1, 80105be <__swsetup_r+0x4a>
 80105ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80105b0:	4299      	cmp	r1, r3
 80105b2:	d002      	beq.n	80105ba <__swsetup_r+0x46>
 80105b4:	4628      	mov	r0, r5
 80105b6:	f000 ff31 	bl	801141c <_free_r>
 80105ba:	2300      	movs	r3, #0
 80105bc:	6363      	str	r3, [r4, #52]	@ 0x34
 80105be:	89a3      	ldrh	r3, [r4, #12]
 80105c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80105c4:	81a3      	strh	r3, [r4, #12]
 80105c6:	2300      	movs	r3, #0
 80105c8:	6063      	str	r3, [r4, #4]
 80105ca:	6923      	ldr	r3, [r4, #16]
 80105cc:	6023      	str	r3, [r4, #0]
 80105ce:	89a3      	ldrh	r3, [r4, #12]
 80105d0:	f043 0308 	orr.w	r3, r3, #8
 80105d4:	81a3      	strh	r3, [r4, #12]
 80105d6:	6923      	ldr	r3, [r4, #16]
 80105d8:	b94b      	cbnz	r3, 80105ee <__swsetup_r+0x7a>
 80105da:	89a3      	ldrh	r3, [r4, #12]
 80105dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80105e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80105e4:	d003      	beq.n	80105ee <__swsetup_r+0x7a>
 80105e6:	4621      	mov	r1, r4
 80105e8:	4628      	mov	r0, r5
 80105ea:	f001 ff0f 	bl	801240c <__smakebuf_r>
 80105ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80105f2:	f013 0201 	ands.w	r2, r3, #1
 80105f6:	d00a      	beq.n	801060e <__swsetup_r+0x9a>
 80105f8:	2200      	movs	r2, #0
 80105fa:	60a2      	str	r2, [r4, #8]
 80105fc:	6962      	ldr	r2, [r4, #20]
 80105fe:	4252      	negs	r2, r2
 8010600:	61a2      	str	r2, [r4, #24]
 8010602:	6922      	ldr	r2, [r4, #16]
 8010604:	b942      	cbnz	r2, 8010618 <__swsetup_r+0xa4>
 8010606:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801060a:	d1c5      	bne.n	8010598 <__swsetup_r+0x24>
 801060c:	bd38      	pop	{r3, r4, r5, pc}
 801060e:	0799      	lsls	r1, r3, #30
 8010610:	bf58      	it	pl
 8010612:	6962      	ldrpl	r2, [r4, #20]
 8010614:	60a2      	str	r2, [r4, #8]
 8010616:	e7f4      	b.n	8010602 <__swsetup_r+0x8e>
 8010618:	2000      	movs	r0, #0
 801061a:	e7f7      	b.n	801060c <__swsetup_r+0x98>
 801061c:	24000038 	.word	0x24000038

08010620 <memset>:
 8010620:	4402      	add	r2, r0
 8010622:	4603      	mov	r3, r0
 8010624:	4293      	cmp	r3, r2
 8010626:	d100      	bne.n	801062a <memset+0xa>
 8010628:	4770      	bx	lr
 801062a:	f803 1b01 	strb.w	r1, [r3], #1
 801062e:	e7f9      	b.n	8010624 <memset+0x4>

08010630 <strcat>:
 8010630:	b510      	push	{r4, lr}
 8010632:	4602      	mov	r2, r0
 8010634:	7814      	ldrb	r4, [r2, #0]
 8010636:	4613      	mov	r3, r2
 8010638:	3201      	adds	r2, #1
 801063a:	2c00      	cmp	r4, #0
 801063c:	d1fa      	bne.n	8010634 <strcat+0x4>
 801063e:	3b01      	subs	r3, #1
 8010640:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010644:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010648:	2a00      	cmp	r2, #0
 801064a:	d1f9      	bne.n	8010640 <strcat+0x10>
 801064c:	bd10      	pop	{r4, pc}
	...

08010650 <strtok>:
 8010650:	4b16      	ldr	r3, [pc, #88]	@ (80106ac <strtok+0x5c>)
 8010652:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010656:	681f      	ldr	r7, [r3, #0]
 8010658:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 801065a:	4605      	mov	r5, r0
 801065c:	460e      	mov	r6, r1
 801065e:	b9ec      	cbnz	r4, 801069c <strtok+0x4c>
 8010660:	2050      	movs	r0, #80	@ 0x50
 8010662:	f000 ff25 	bl	80114b0 <malloc>
 8010666:	4602      	mov	r2, r0
 8010668:	6478      	str	r0, [r7, #68]	@ 0x44
 801066a:	b920      	cbnz	r0, 8010676 <strtok+0x26>
 801066c:	4b10      	ldr	r3, [pc, #64]	@ (80106b0 <strtok+0x60>)
 801066e:	4811      	ldr	r0, [pc, #68]	@ (80106b4 <strtok+0x64>)
 8010670:	215b      	movs	r1, #91	@ 0x5b
 8010672:	f000 f8cf 	bl	8010814 <__assert_func>
 8010676:	e9c0 4400 	strd	r4, r4, [r0]
 801067a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801067e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8010682:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8010686:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 801068a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 801068e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8010692:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8010696:	6184      	str	r4, [r0, #24]
 8010698:	7704      	strb	r4, [r0, #28]
 801069a:	6244      	str	r4, [r0, #36]	@ 0x24
 801069c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801069e:	4631      	mov	r1, r6
 80106a0:	4628      	mov	r0, r5
 80106a2:	2301      	movs	r3, #1
 80106a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80106a8:	f000 b806 	b.w	80106b8 <__strtok_r>
 80106ac:	24000038 	.word	0x24000038
 80106b0:	08012885 	.word	0x08012885
 80106b4:	0801289c 	.word	0x0801289c

080106b8 <__strtok_r>:
 80106b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80106ba:	4604      	mov	r4, r0
 80106bc:	b908      	cbnz	r0, 80106c2 <__strtok_r+0xa>
 80106be:	6814      	ldr	r4, [r2, #0]
 80106c0:	b144      	cbz	r4, 80106d4 <__strtok_r+0x1c>
 80106c2:	4620      	mov	r0, r4
 80106c4:	f814 5b01 	ldrb.w	r5, [r4], #1
 80106c8:	460f      	mov	r7, r1
 80106ca:	f817 6b01 	ldrb.w	r6, [r7], #1
 80106ce:	b91e      	cbnz	r6, 80106d8 <__strtok_r+0x20>
 80106d0:	b965      	cbnz	r5, 80106ec <__strtok_r+0x34>
 80106d2:	6015      	str	r5, [r2, #0]
 80106d4:	2000      	movs	r0, #0
 80106d6:	e005      	b.n	80106e4 <__strtok_r+0x2c>
 80106d8:	42b5      	cmp	r5, r6
 80106da:	d1f6      	bne.n	80106ca <__strtok_r+0x12>
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d1f0      	bne.n	80106c2 <__strtok_r+0xa>
 80106e0:	6014      	str	r4, [r2, #0]
 80106e2:	7003      	strb	r3, [r0, #0]
 80106e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80106e6:	461c      	mov	r4, r3
 80106e8:	e00c      	b.n	8010704 <__strtok_r+0x4c>
 80106ea:	b91d      	cbnz	r5, 80106f4 <__strtok_r+0x3c>
 80106ec:	4627      	mov	r7, r4
 80106ee:	f814 3b01 	ldrb.w	r3, [r4], #1
 80106f2:	460e      	mov	r6, r1
 80106f4:	f816 5b01 	ldrb.w	r5, [r6], #1
 80106f8:	42ab      	cmp	r3, r5
 80106fa:	d1f6      	bne.n	80106ea <__strtok_r+0x32>
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d0f2      	beq.n	80106e6 <__strtok_r+0x2e>
 8010700:	2300      	movs	r3, #0
 8010702:	703b      	strb	r3, [r7, #0]
 8010704:	6014      	str	r4, [r2, #0]
 8010706:	e7ed      	b.n	80106e4 <__strtok_r+0x2c>

08010708 <_localeconv_r>:
 8010708:	4800      	ldr	r0, [pc, #0]	@ (801070c <_localeconv_r+0x4>)
 801070a:	4770      	bx	lr
 801070c:	24000178 	.word	0x24000178

08010710 <_close_r>:
 8010710:	b538      	push	{r3, r4, r5, lr}
 8010712:	4d06      	ldr	r5, [pc, #24]	@ (801072c <_close_r+0x1c>)
 8010714:	2300      	movs	r3, #0
 8010716:	4604      	mov	r4, r0
 8010718:	4608      	mov	r0, r1
 801071a:	602b      	str	r3, [r5, #0]
 801071c:	f7f1 fa90 	bl	8001c40 <_close>
 8010720:	1c43      	adds	r3, r0, #1
 8010722:	d102      	bne.n	801072a <_close_r+0x1a>
 8010724:	682b      	ldr	r3, [r5, #0]
 8010726:	b103      	cbz	r3, 801072a <_close_r+0x1a>
 8010728:	6023      	str	r3, [r4, #0]
 801072a:	bd38      	pop	{r3, r4, r5, pc}
 801072c:	24000874 	.word	0x24000874

08010730 <_lseek_r>:
 8010730:	b538      	push	{r3, r4, r5, lr}
 8010732:	4d07      	ldr	r5, [pc, #28]	@ (8010750 <_lseek_r+0x20>)
 8010734:	4604      	mov	r4, r0
 8010736:	4608      	mov	r0, r1
 8010738:	4611      	mov	r1, r2
 801073a:	2200      	movs	r2, #0
 801073c:	602a      	str	r2, [r5, #0]
 801073e:	461a      	mov	r2, r3
 8010740:	f7f1 faa5 	bl	8001c8e <_lseek>
 8010744:	1c43      	adds	r3, r0, #1
 8010746:	d102      	bne.n	801074e <_lseek_r+0x1e>
 8010748:	682b      	ldr	r3, [r5, #0]
 801074a:	b103      	cbz	r3, 801074e <_lseek_r+0x1e>
 801074c:	6023      	str	r3, [r4, #0]
 801074e:	bd38      	pop	{r3, r4, r5, pc}
 8010750:	24000874 	.word	0x24000874

08010754 <_read_r>:
 8010754:	b538      	push	{r3, r4, r5, lr}
 8010756:	4d07      	ldr	r5, [pc, #28]	@ (8010774 <_read_r+0x20>)
 8010758:	4604      	mov	r4, r0
 801075a:	4608      	mov	r0, r1
 801075c:	4611      	mov	r1, r2
 801075e:	2200      	movs	r2, #0
 8010760:	602a      	str	r2, [r5, #0]
 8010762:	461a      	mov	r2, r3
 8010764:	f7f1 fa33 	bl	8001bce <_read>
 8010768:	1c43      	adds	r3, r0, #1
 801076a:	d102      	bne.n	8010772 <_read_r+0x1e>
 801076c:	682b      	ldr	r3, [r5, #0]
 801076e:	b103      	cbz	r3, 8010772 <_read_r+0x1e>
 8010770:	6023      	str	r3, [r4, #0]
 8010772:	bd38      	pop	{r3, r4, r5, pc}
 8010774:	24000874 	.word	0x24000874

08010778 <_write_r>:
 8010778:	b538      	push	{r3, r4, r5, lr}
 801077a:	4d07      	ldr	r5, [pc, #28]	@ (8010798 <_write_r+0x20>)
 801077c:	4604      	mov	r4, r0
 801077e:	4608      	mov	r0, r1
 8010780:	4611      	mov	r1, r2
 8010782:	2200      	movs	r2, #0
 8010784:	602a      	str	r2, [r5, #0]
 8010786:	461a      	mov	r2, r3
 8010788:	f7f1 fa3e 	bl	8001c08 <_write>
 801078c:	1c43      	adds	r3, r0, #1
 801078e:	d102      	bne.n	8010796 <_write_r+0x1e>
 8010790:	682b      	ldr	r3, [r5, #0]
 8010792:	b103      	cbz	r3, 8010796 <_write_r+0x1e>
 8010794:	6023      	str	r3, [r4, #0]
 8010796:	bd38      	pop	{r3, r4, r5, pc}
 8010798:	24000874 	.word	0x24000874

0801079c <__errno>:
 801079c:	4b01      	ldr	r3, [pc, #4]	@ (80107a4 <__errno+0x8>)
 801079e:	6818      	ldr	r0, [r3, #0]
 80107a0:	4770      	bx	lr
 80107a2:	bf00      	nop
 80107a4:	24000038 	.word	0x24000038

080107a8 <__libc_init_array>:
 80107a8:	b570      	push	{r4, r5, r6, lr}
 80107aa:	4d0d      	ldr	r5, [pc, #52]	@ (80107e0 <__libc_init_array+0x38>)
 80107ac:	4c0d      	ldr	r4, [pc, #52]	@ (80107e4 <__libc_init_array+0x3c>)
 80107ae:	1b64      	subs	r4, r4, r5
 80107b0:	10a4      	asrs	r4, r4, #2
 80107b2:	2600      	movs	r6, #0
 80107b4:	42a6      	cmp	r6, r4
 80107b6:	d109      	bne.n	80107cc <__libc_init_array+0x24>
 80107b8:	4d0b      	ldr	r5, [pc, #44]	@ (80107e8 <__libc_init_array+0x40>)
 80107ba:	4c0c      	ldr	r4, [pc, #48]	@ (80107ec <__libc_init_array+0x44>)
 80107bc:	f001 ff62 	bl	8012684 <_init>
 80107c0:	1b64      	subs	r4, r4, r5
 80107c2:	10a4      	asrs	r4, r4, #2
 80107c4:	2600      	movs	r6, #0
 80107c6:	42a6      	cmp	r6, r4
 80107c8:	d105      	bne.n	80107d6 <__libc_init_array+0x2e>
 80107ca:	bd70      	pop	{r4, r5, r6, pc}
 80107cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80107d0:	4798      	blx	r3
 80107d2:	3601      	adds	r6, #1
 80107d4:	e7ee      	b.n	80107b4 <__libc_init_array+0xc>
 80107d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80107da:	4798      	blx	r3
 80107dc:	3601      	adds	r6, #1
 80107de:	e7f2      	b.n	80107c6 <__libc_init_array+0x1e>
 80107e0:	08012b20 	.word	0x08012b20
 80107e4:	08012b20 	.word	0x08012b20
 80107e8:	08012b20 	.word	0x08012b20
 80107ec:	08012b24 	.word	0x08012b24

080107f0 <__retarget_lock_init_recursive>:
 80107f0:	4770      	bx	lr

080107f2 <__retarget_lock_acquire_recursive>:
 80107f2:	4770      	bx	lr

080107f4 <__retarget_lock_release_recursive>:
 80107f4:	4770      	bx	lr

080107f6 <memcpy>:
 80107f6:	440a      	add	r2, r1
 80107f8:	4291      	cmp	r1, r2
 80107fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80107fe:	d100      	bne.n	8010802 <memcpy+0xc>
 8010800:	4770      	bx	lr
 8010802:	b510      	push	{r4, lr}
 8010804:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010808:	f803 4f01 	strb.w	r4, [r3, #1]!
 801080c:	4291      	cmp	r1, r2
 801080e:	d1f9      	bne.n	8010804 <memcpy+0xe>
 8010810:	bd10      	pop	{r4, pc}
	...

08010814 <__assert_func>:
 8010814:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010816:	4614      	mov	r4, r2
 8010818:	461a      	mov	r2, r3
 801081a:	4b09      	ldr	r3, [pc, #36]	@ (8010840 <__assert_func+0x2c>)
 801081c:	681b      	ldr	r3, [r3, #0]
 801081e:	4605      	mov	r5, r0
 8010820:	68d8      	ldr	r0, [r3, #12]
 8010822:	b14c      	cbz	r4, 8010838 <__assert_func+0x24>
 8010824:	4b07      	ldr	r3, [pc, #28]	@ (8010844 <__assert_func+0x30>)
 8010826:	9100      	str	r1, [sp, #0]
 8010828:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801082c:	4906      	ldr	r1, [pc, #24]	@ (8010848 <__assert_func+0x34>)
 801082e:	462b      	mov	r3, r5
 8010830:	f001 fdb4 	bl	801239c <fiprintf>
 8010834:	f001 fe72 	bl	801251c <abort>
 8010838:	4b04      	ldr	r3, [pc, #16]	@ (801084c <__assert_func+0x38>)
 801083a:	461c      	mov	r4, r3
 801083c:	e7f3      	b.n	8010826 <__assert_func+0x12>
 801083e:	bf00      	nop
 8010840:	24000038 	.word	0x24000038
 8010844:	080128f6 	.word	0x080128f6
 8010848:	08012903 	.word	0x08012903
 801084c:	08012931 	.word	0x08012931

08010850 <quorem>:
 8010850:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010854:	6903      	ldr	r3, [r0, #16]
 8010856:	690c      	ldr	r4, [r1, #16]
 8010858:	42a3      	cmp	r3, r4
 801085a:	4607      	mov	r7, r0
 801085c:	db7e      	blt.n	801095c <quorem+0x10c>
 801085e:	3c01      	subs	r4, #1
 8010860:	f101 0814 	add.w	r8, r1, #20
 8010864:	00a3      	lsls	r3, r4, #2
 8010866:	f100 0514 	add.w	r5, r0, #20
 801086a:	9300      	str	r3, [sp, #0]
 801086c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010870:	9301      	str	r3, [sp, #4]
 8010872:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010876:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801087a:	3301      	adds	r3, #1
 801087c:	429a      	cmp	r2, r3
 801087e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010882:	fbb2 f6f3 	udiv	r6, r2, r3
 8010886:	d32e      	bcc.n	80108e6 <quorem+0x96>
 8010888:	f04f 0a00 	mov.w	sl, #0
 801088c:	46c4      	mov	ip, r8
 801088e:	46ae      	mov	lr, r5
 8010890:	46d3      	mov	fp, sl
 8010892:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010896:	b298      	uxth	r0, r3
 8010898:	fb06 a000 	mla	r0, r6, r0, sl
 801089c:	0c02      	lsrs	r2, r0, #16
 801089e:	0c1b      	lsrs	r3, r3, #16
 80108a0:	fb06 2303 	mla	r3, r6, r3, r2
 80108a4:	f8de 2000 	ldr.w	r2, [lr]
 80108a8:	b280      	uxth	r0, r0
 80108aa:	b292      	uxth	r2, r2
 80108ac:	1a12      	subs	r2, r2, r0
 80108ae:	445a      	add	r2, fp
 80108b0:	f8de 0000 	ldr.w	r0, [lr]
 80108b4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80108b8:	b29b      	uxth	r3, r3
 80108ba:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80108be:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80108c2:	b292      	uxth	r2, r2
 80108c4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80108c8:	45e1      	cmp	r9, ip
 80108ca:	f84e 2b04 	str.w	r2, [lr], #4
 80108ce:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80108d2:	d2de      	bcs.n	8010892 <quorem+0x42>
 80108d4:	9b00      	ldr	r3, [sp, #0]
 80108d6:	58eb      	ldr	r3, [r5, r3]
 80108d8:	b92b      	cbnz	r3, 80108e6 <quorem+0x96>
 80108da:	9b01      	ldr	r3, [sp, #4]
 80108dc:	3b04      	subs	r3, #4
 80108de:	429d      	cmp	r5, r3
 80108e0:	461a      	mov	r2, r3
 80108e2:	d32f      	bcc.n	8010944 <quorem+0xf4>
 80108e4:	613c      	str	r4, [r7, #16]
 80108e6:	4638      	mov	r0, r7
 80108e8:	f001 f90a 	bl	8011b00 <__mcmp>
 80108ec:	2800      	cmp	r0, #0
 80108ee:	db25      	blt.n	801093c <quorem+0xec>
 80108f0:	4629      	mov	r1, r5
 80108f2:	2000      	movs	r0, #0
 80108f4:	f858 2b04 	ldr.w	r2, [r8], #4
 80108f8:	f8d1 c000 	ldr.w	ip, [r1]
 80108fc:	fa1f fe82 	uxth.w	lr, r2
 8010900:	fa1f f38c 	uxth.w	r3, ip
 8010904:	eba3 030e 	sub.w	r3, r3, lr
 8010908:	4403      	add	r3, r0
 801090a:	0c12      	lsrs	r2, r2, #16
 801090c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8010910:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8010914:	b29b      	uxth	r3, r3
 8010916:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801091a:	45c1      	cmp	r9, r8
 801091c:	f841 3b04 	str.w	r3, [r1], #4
 8010920:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010924:	d2e6      	bcs.n	80108f4 <quorem+0xa4>
 8010926:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801092a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801092e:	b922      	cbnz	r2, 801093a <quorem+0xea>
 8010930:	3b04      	subs	r3, #4
 8010932:	429d      	cmp	r5, r3
 8010934:	461a      	mov	r2, r3
 8010936:	d30b      	bcc.n	8010950 <quorem+0x100>
 8010938:	613c      	str	r4, [r7, #16]
 801093a:	3601      	adds	r6, #1
 801093c:	4630      	mov	r0, r6
 801093e:	b003      	add	sp, #12
 8010940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010944:	6812      	ldr	r2, [r2, #0]
 8010946:	3b04      	subs	r3, #4
 8010948:	2a00      	cmp	r2, #0
 801094a:	d1cb      	bne.n	80108e4 <quorem+0x94>
 801094c:	3c01      	subs	r4, #1
 801094e:	e7c6      	b.n	80108de <quorem+0x8e>
 8010950:	6812      	ldr	r2, [r2, #0]
 8010952:	3b04      	subs	r3, #4
 8010954:	2a00      	cmp	r2, #0
 8010956:	d1ef      	bne.n	8010938 <quorem+0xe8>
 8010958:	3c01      	subs	r4, #1
 801095a:	e7ea      	b.n	8010932 <quorem+0xe2>
 801095c:	2000      	movs	r0, #0
 801095e:	e7ee      	b.n	801093e <quorem+0xee>

08010960 <_dtoa_r>:
 8010960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010964:	ed2d 8b02 	vpush	{d8}
 8010968:	69c7      	ldr	r7, [r0, #28]
 801096a:	b091      	sub	sp, #68	@ 0x44
 801096c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010970:	ec55 4b10 	vmov	r4, r5, d0
 8010974:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8010976:	9107      	str	r1, [sp, #28]
 8010978:	4681      	mov	r9, r0
 801097a:	9209      	str	r2, [sp, #36]	@ 0x24
 801097c:	930d      	str	r3, [sp, #52]	@ 0x34
 801097e:	b97f      	cbnz	r7, 80109a0 <_dtoa_r+0x40>
 8010980:	2010      	movs	r0, #16
 8010982:	f000 fd95 	bl	80114b0 <malloc>
 8010986:	4602      	mov	r2, r0
 8010988:	f8c9 001c 	str.w	r0, [r9, #28]
 801098c:	b920      	cbnz	r0, 8010998 <_dtoa_r+0x38>
 801098e:	4ba0      	ldr	r3, [pc, #640]	@ (8010c10 <_dtoa_r+0x2b0>)
 8010990:	21ef      	movs	r1, #239	@ 0xef
 8010992:	48a0      	ldr	r0, [pc, #640]	@ (8010c14 <_dtoa_r+0x2b4>)
 8010994:	f7ff ff3e 	bl	8010814 <__assert_func>
 8010998:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801099c:	6007      	str	r7, [r0, #0]
 801099e:	60c7      	str	r7, [r0, #12]
 80109a0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80109a4:	6819      	ldr	r1, [r3, #0]
 80109a6:	b159      	cbz	r1, 80109c0 <_dtoa_r+0x60>
 80109a8:	685a      	ldr	r2, [r3, #4]
 80109aa:	604a      	str	r2, [r1, #4]
 80109ac:	2301      	movs	r3, #1
 80109ae:	4093      	lsls	r3, r2
 80109b0:	608b      	str	r3, [r1, #8]
 80109b2:	4648      	mov	r0, r9
 80109b4:	f000 fe72 	bl	801169c <_Bfree>
 80109b8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80109bc:	2200      	movs	r2, #0
 80109be:	601a      	str	r2, [r3, #0]
 80109c0:	1e2b      	subs	r3, r5, #0
 80109c2:	bfbb      	ittet	lt
 80109c4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80109c8:	9303      	strlt	r3, [sp, #12]
 80109ca:	2300      	movge	r3, #0
 80109cc:	2201      	movlt	r2, #1
 80109ce:	bfac      	ite	ge
 80109d0:	6033      	strge	r3, [r6, #0]
 80109d2:	6032      	strlt	r2, [r6, #0]
 80109d4:	4b90      	ldr	r3, [pc, #576]	@ (8010c18 <_dtoa_r+0x2b8>)
 80109d6:	9e03      	ldr	r6, [sp, #12]
 80109d8:	43b3      	bics	r3, r6
 80109da:	d110      	bne.n	80109fe <_dtoa_r+0x9e>
 80109dc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80109de:	f242 730f 	movw	r3, #9999	@ 0x270f
 80109e2:	6013      	str	r3, [r2, #0]
 80109e4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 80109e8:	4323      	orrs	r3, r4
 80109ea:	f000 84e6 	beq.w	80113ba <_dtoa_r+0xa5a>
 80109ee:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80109f0:	4f8a      	ldr	r7, [pc, #552]	@ (8010c1c <_dtoa_r+0x2bc>)
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	f000 84e8 	beq.w	80113c8 <_dtoa_r+0xa68>
 80109f8:	1cfb      	adds	r3, r7, #3
 80109fa:	f000 bce3 	b.w	80113c4 <_dtoa_r+0xa64>
 80109fe:	ed9d 8b02 	vldr	d8, [sp, #8]
 8010a02:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a0a:	d10a      	bne.n	8010a22 <_dtoa_r+0xc2>
 8010a0c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010a0e:	2301      	movs	r3, #1
 8010a10:	6013      	str	r3, [r2, #0]
 8010a12:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010a14:	b113      	cbz	r3, 8010a1c <_dtoa_r+0xbc>
 8010a16:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8010a18:	4b81      	ldr	r3, [pc, #516]	@ (8010c20 <_dtoa_r+0x2c0>)
 8010a1a:	6013      	str	r3, [r2, #0]
 8010a1c:	4f81      	ldr	r7, [pc, #516]	@ (8010c24 <_dtoa_r+0x2c4>)
 8010a1e:	f000 bcd3 	b.w	80113c8 <_dtoa_r+0xa68>
 8010a22:	aa0e      	add	r2, sp, #56	@ 0x38
 8010a24:	a90f      	add	r1, sp, #60	@ 0x3c
 8010a26:	4648      	mov	r0, r9
 8010a28:	eeb0 0b48 	vmov.f64	d0, d8
 8010a2c:	f001 f918 	bl	8011c60 <__d2b>
 8010a30:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8010a34:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010a36:	9001      	str	r0, [sp, #4]
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d045      	beq.n	8010ac8 <_dtoa_r+0x168>
 8010a3c:	eeb0 7b48 	vmov.f64	d7, d8
 8010a40:	ee18 1a90 	vmov	r1, s17
 8010a44:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8010a48:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8010a4c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8010a50:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8010a54:	2500      	movs	r5, #0
 8010a56:	ee07 1a90 	vmov	s15, r1
 8010a5a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8010a5e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8010bf8 <_dtoa_r+0x298>
 8010a62:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010a66:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8010c00 <_dtoa_r+0x2a0>
 8010a6a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8010a6e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8010c08 <_dtoa_r+0x2a8>
 8010a72:	ee07 3a90 	vmov	s15, r3
 8010a76:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8010a7a:	eeb0 7b46 	vmov.f64	d7, d6
 8010a7e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8010a82:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8010a86:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8010a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a8e:	ee16 8a90 	vmov	r8, s13
 8010a92:	d508      	bpl.n	8010aa6 <_dtoa_r+0x146>
 8010a94:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8010a98:	eeb4 6b47 	vcmp.f64	d6, d7
 8010a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010aa0:	bf18      	it	ne
 8010aa2:	f108 38ff 	addne.w	r8, r8, #4294967295
 8010aa6:	f1b8 0f16 	cmp.w	r8, #22
 8010aaa:	d82b      	bhi.n	8010b04 <_dtoa_r+0x1a4>
 8010aac:	495e      	ldr	r1, [pc, #376]	@ (8010c28 <_dtoa_r+0x2c8>)
 8010aae:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8010ab2:	ed91 7b00 	vldr	d7, [r1]
 8010ab6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8010aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010abe:	d501      	bpl.n	8010ac4 <_dtoa_r+0x164>
 8010ac0:	f108 38ff 	add.w	r8, r8, #4294967295
 8010ac4:	2100      	movs	r1, #0
 8010ac6:	e01e      	b.n	8010b06 <_dtoa_r+0x1a6>
 8010ac8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010aca:	4413      	add	r3, r2
 8010acc:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8010ad0:	2920      	cmp	r1, #32
 8010ad2:	bfc1      	itttt	gt
 8010ad4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8010ad8:	408e      	lslgt	r6, r1
 8010ada:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8010ade:	fa24 f101 	lsrgt.w	r1, r4, r1
 8010ae2:	bfd6      	itet	le
 8010ae4:	f1c1 0120 	rsble	r1, r1, #32
 8010ae8:	4331      	orrgt	r1, r6
 8010aea:	fa04 f101 	lslle.w	r1, r4, r1
 8010aee:	ee07 1a90 	vmov	s15, r1
 8010af2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8010af6:	3b01      	subs	r3, #1
 8010af8:	ee17 1a90 	vmov	r1, s15
 8010afc:	2501      	movs	r5, #1
 8010afe:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8010b02:	e7a8      	b.n	8010a56 <_dtoa_r+0xf6>
 8010b04:	2101      	movs	r1, #1
 8010b06:	1ad2      	subs	r2, r2, r3
 8010b08:	1e53      	subs	r3, r2, #1
 8010b0a:	9306      	str	r3, [sp, #24]
 8010b0c:	bf45      	ittet	mi
 8010b0e:	f1c2 0301 	rsbmi	r3, r2, #1
 8010b12:	9304      	strmi	r3, [sp, #16]
 8010b14:	2300      	movpl	r3, #0
 8010b16:	2300      	movmi	r3, #0
 8010b18:	bf4c      	ite	mi
 8010b1a:	9306      	strmi	r3, [sp, #24]
 8010b1c:	9304      	strpl	r3, [sp, #16]
 8010b1e:	f1b8 0f00 	cmp.w	r8, #0
 8010b22:	910c      	str	r1, [sp, #48]	@ 0x30
 8010b24:	db18      	blt.n	8010b58 <_dtoa_r+0x1f8>
 8010b26:	9b06      	ldr	r3, [sp, #24]
 8010b28:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8010b2c:	4443      	add	r3, r8
 8010b2e:	9306      	str	r3, [sp, #24]
 8010b30:	2300      	movs	r3, #0
 8010b32:	9a07      	ldr	r2, [sp, #28]
 8010b34:	2a09      	cmp	r2, #9
 8010b36:	d845      	bhi.n	8010bc4 <_dtoa_r+0x264>
 8010b38:	2a05      	cmp	r2, #5
 8010b3a:	bfc4      	itt	gt
 8010b3c:	3a04      	subgt	r2, #4
 8010b3e:	9207      	strgt	r2, [sp, #28]
 8010b40:	9a07      	ldr	r2, [sp, #28]
 8010b42:	f1a2 0202 	sub.w	r2, r2, #2
 8010b46:	bfcc      	ite	gt
 8010b48:	2400      	movgt	r4, #0
 8010b4a:	2401      	movle	r4, #1
 8010b4c:	2a03      	cmp	r2, #3
 8010b4e:	d844      	bhi.n	8010bda <_dtoa_r+0x27a>
 8010b50:	e8df f002 	tbb	[pc, r2]
 8010b54:	0b173634 	.word	0x0b173634
 8010b58:	9b04      	ldr	r3, [sp, #16]
 8010b5a:	2200      	movs	r2, #0
 8010b5c:	eba3 0308 	sub.w	r3, r3, r8
 8010b60:	9304      	str	r3, [sp, #16]
 8010b62:	920a      	str	r2, [sp, #40]	@ 0x28
 8010b64:	f1c8 0300 	rsb	r3, r8, #0
 8010b68:	e7e3      	b.n	8010b32 <_dtoa_r+0x1d2>
 8010b6a:	2201      	movs	r2, #1
 8010b6c:	9208      	str	r2, [sp, #32]
 8010b6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010b70:	eb08 0b02 	add.w	fp, r8, r2
 8010b74:	f10b 0a01 	add.w	sl, fp, #1
 8010b78:	4652      	mov	r2, sl
 8010b7a:	2a01      	cmp	r2, #1
 8010b7c:	bfb8      	it	lt
 8010b7e:	2201      	movlt	r2, #1
 8010b80:	e006      	b.n	8010b90 <_dtoa_r+0x230>
 8010b82:	2201      	movs	r2, #1
 8010b84:	9208      	str	r2, [sp, #32]
 8010b86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010b88:	2a00      	cmp	r2, #0
 8010b8a:	dd29      	ble.n	8010be0 <_dtoa_r+0x280>
 8010b8c:	4693      	mov	fp, r2
 8010b8e:	4692      	mov	sl, r2
 8010b90:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8010b94:	2100      	movs	r1, #0
 8010b96:	2004      	movs	r0, #4
 8010b98:	f100 0614 	add.w	r6, r0, #20
 8010b9c:	4296      	cmp	r6, r2
 8010b9e:	d926      	bls.n	8010bee <_dtoa_r+0x28e>
 8010ba0:	6079      	str	r1, [r7, #4]
 8010ba2:	4648      	mov	r0, r9
 8010ba4:	9305      	str	r3, [sp, #20]
 8010ba6:	f000 fd39 	bl	801161c <_Balloc>
 8010baa:	9b05      	ldr	r3, [sp, #20]
 8010bac:	4607      	mov	r7, r0
 8010bae:	2800      	cmp	r0, #0
 8010bb0:	d13e      	bne.n	8010c30 <_dtoa_r+0x2d0>
 8010bb2:	4b1e      	ldr	r3, [pc, #120]	@ (8010c2c <_dtoa_r+0x2cc>)
 8010bb4:	4602      	mov	r2, r0
 8010bb6:	f240 11af 	movw	r1, #431	@ 0x1af
 8010bba:	e6ea      	b.n	8010992 <_dtoa_r+0x32>
 8010bbc:	2200      	movs	r2, #0
 8010bbe:	e7e1      	b.n	8010b84 <_dtoa_r+0x224>
 8010bc0:	2200      	movs	r2, #0
 8010bc2:	e7d3      	b.n	8010b6c <_dtoa_r+0x20c>
 8010bc4:	2401      	movs	r4, #1
 8010bc6:	2200      	movs	r2, #0
 8010bc8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8010bcc:	f04f 3bff 	mov.w	fp, #4294967295
 8010bd0:	2100      	movs	r1, #0
 8010bd2:	46da      	mov	sl, fp
 8010bd4:	2212      	movs	r2, #18
 8010bd6:	9109      	str	r1, [sp, #36]	@ 0x24
 8010bd8:	e7da      	b.n	8010b90 <_dtoa_r+0x230>
 8010bda:	2201      	movs	r2, #1
 8010bdc:	9208      	str	r2, [sp, #32]
 8010bde:	e7f5      	b.n	8010bcc <_dtoa_r+0x26c>
 8010be0:	f04f 0b01 	mov.w	fp, #1
 8010be4:	46da      	mov	sl, fp
 8010be6:	465a      	mov	r2, fp
 8010be8:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8010bec:	e7d0      	b.n	8010b90 <_dtoa_r+0x230>
 8010bee:	3101      	adds	r1, #1
 8010bf0:	0040      	lsls	r0, r0, #1
 8010bf2:	e7d1      	b.n	8010b98 <_dtoa_r+0x238>
 8010bf4:	f3af 8000 	nop.w
 8010bf8:	636f4361 	.word	0x636f4361
 8010bfc:	3fd287a7 	.word	0x3fd287a7
 8010c00:	8b60c8b3 	.word	0x8b60c8b3
 8010c04:	3fc68a28 	.word	0x3fc68a28
 8010c08:	509f79fb 	.word	0x509f79fb
 8010c0c:	3fd34413 	.word	0x3fd34413
 8010c10:	08012885 	.word	0x08012885
 8010c14:	0801293f 	.word	0x0801293f
 8010c18:	7ff00000 	.word	0x7ff00000
 8010c1c:	0801293b 	.word	0x0801293b
 8010c20:	08012862 	.word	0x08012862
 8010c24:	08012861 	.word	0x08012861
 8010c28:	08012a50 	.word	0x08012a50
 8010c2c:	08012997 	.word	0x08012997
 8010c30:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8010c34:	f1ba 0f0e 	cmp.w	sl, #14
 8010c38:	6010      	str	r0, [r2, #0]
 8010c3a:	d86e      	bhi.n	8010d1a <_dtoa_r+0x3ba>
 8010c3c:	2c00      	cmp	r4, #0
 8010c3e:	d06c      	beq.n	8010d1a <_dtoa_r+0x3ba>
 8010c40:	f1b8 0f00 	cmp.w	r8, #0
 8010c44:	f340 80b4 	ble.w	8010db0 <_dtoa_r+0x450>
 8010c48:	4ac8      	ldr	r2, [pc, #800]	@ (8010f6c <_dtoa_r+0x60c>)
 8010c4a:	f008 010f 	and.w	r1, r8, #15
 8010c4e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8010c52:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8010c56:	ed92 7b00 	vldr	d7, [r2]
 8010c5a:	ea4f 1128 	mov.w	r1, r8, asr #4
 8010c5e:	f000 809b 	beq.w	8010d98 <_dtoa_r+0x438>
 8010c62:	4ac3      	ldr	r2, [pc, #780]	@ (8010f70 <_dtoa_r+0x610>)
 8010c64:	ed92 6b08 	vldr	d6, [r2, #32]
 8010c68:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8010c6c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8010c70:	f001 010f 	and.w	r1, r1, #15
 8010c74:	2203      	movs	r2, #3
 8010c76:	48be      	ldr	r0, [pc, #760]	@ (8010f70 <_dtoa_r+0x610>)
 8010c78:	2900      	cmp	r1, #0
 8010c7a:	f040 808f 	bne.w	8010d9c <_dtoa_r+0x43c>
 8010c7e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010c82:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8010c86:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010c8a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8010c8c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010c90:	2900      	cmp	r1, #0
 8010c92:	f000 80b3 	beq.w	8010dfc <_dtoa_r+0x49c>
 8010c96:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8010c9a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ca2:	f140 80ab 	bpl.w	8010dfc <_dtoa_r+0x49c>
 8010ca6:	f1ba 0f00 	cmp.w	sl, #0
 8010caa:	f000 80a7 	beq.w	8010dfc <_dtoa_r+0x49c>
 8010cae:	f1bb 0f00 	cmp.w	fp, #0
 8010cb2:	dd30      	ble.n	8010d16 <_dtoa_r+0x3b6>
 8010cb4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8010cb8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010cbc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010cc0:	f108 31ff 	add.w	r1, r8, #4294967295
 8010cc4:	9105      	str	r1, [sp, #20]
 8010cc6:	3201      	adds	r2, #1
 8010cc8:	465c      	mov	r4, fp
 8010cca:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010cce:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8010cd2:	ee07 2a90 	vmov	s15, r2
 8010cd6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010cda:	eea7 5b06 	vfma.f64	d5, d7, d6
 8010cde:	ee15 2a90 	vmov	r2, s11
 8010ce2:	ec51 0b15 	vmov	r0, r1, d5
 8010ce6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8010cea:	2c00      	cmp	r4, #0
 8010cec:	f040 808a 	bne.w	8010e04 <_dtoa_r+0x4a4>
 8010cf0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8010cf4:	ee36 6b47 	vsub.f64	d6, d6, d7
 8010cf8:	ec41 0b17 	vmov	d7, r0, r1
 8010cfc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d04:	f300 826a 	bgt.w	80111dc <_dtoa_r+0x87c>
 8010d08:	eeb1 7b47 	vneg.f64	d7, d7
 8010d0c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d14:	d423      	bmi.n	8010d5e <_dtoa_r+0x3fe>
 8010d16:	ed8d 8b02 	vstr	d8, [sp, #8]
 8010d1a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010d1c:	2a00      	cmp	r2, #0
 8010d1e:	f2c0 8129 	blt.w	8010f74 <_dtoa_r+0x614>
 8010d22:	f1b8 0f0e 	cmp.w	r8, #14
 8010d26:	f300 8125 	bgt.w	8010f74 <_dtoa_r+0x614>
 8010d2a:	4b90      	ldr	r3, [pc, #576]	@ (8010f6c <_dtoa_r+0x60c>)
 8010d2c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8010d30:	ed93 6b00 	vldr	d6, [r3]
 8010d34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	f280 80c8 	bge.w	8010ecc <_dtoa_r+0x56c>
 8010d3c:	f1ba 0f00 	cmp.w	sl, #0
 8010d40:	f300 80c4 	bgt.w	8010ecc <_dtoa_r+0x56c>
 8010d44:	d10b      	bne.n	8010d5e <_dtoa_r+0x3fe>
 8010d46:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8010d4a:	ee26 6b07 	vmul.f64	d6, d6, d7
 8010d4e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010d52:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d5a:	f2c0 823c 	blt.w	80111d6 <_dtoa_r+0x876>
 8010d5e:	2400      	movs	r4, #0
 8010d60:	4625      	mov	r5, r4
 8010d62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d64:	43db      	mvns	r3, r3
 8010d66:	9305      	str	r3, [sp, #20]
 8010d68:	463e      	mov	r6, r7
 8010d6a:	f04f 0800 	mov.w	r8, #0
 8010d6e:	4621      	mov	r1, r4
 8010d70:	4648      	mov	r0, r9
 8010d72:	f000 fc93 	bl	801169c <_Bfree>
 8010d76:	2d00      	cmp	r5, #0
 8010d78:	f000 80a2 	beq.w	8010ec0 <_dtoa_r+0x560>
 8010d7c:	f1b8 0f00 	cmp.w	r8, #0
 8010d80:	d005      	beq.n	8010d8e <_dtoa_r+0x42e>
 8010d82:	45a8      	cmp	r8, r5
 8010d84:	d003      	beq.n	8010d8e <_dtoa_r+0x42e>
 8010d86:	4641      	mov	r1, r8
 8010d88:	4648      	mov	r0, r9
 8010d8a:	f000 fc87 	bl	801169c <_Bfree>
 8010d8e:	4629      	mov	r1, r5
 8010d90:	4648      	mov	r0, r9
 8010d92:	f000 fc83 	bl	801169c <_Bfree>
 8010d96:	e093      	b.n	8010ec0 <_dtoa_r+0x560>
 8010d98:	2202      	movs	r2, #2
 8010d9a:	e76c      	b.n	8010c76 <_dtoa_r+0x316>
 8010d9c:	07cc      	lsls	r4, r1, #31
 8010d9e:	d504      	bpl.n	8010daa <_dtoa_r+0x44a>
 8010da0:	ed90 6b00 	vldr	d6, [r0]
 8010da4:	3201      	adds	r2, #1
 8010da6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010daa:	1049      	asrs	r1, r1, #1
 8010dac:	3008      	adds	r0, #8
 8010dae:	e763      	b.n	8010c78 <_dtoa_r+0x318>
 8010db0:	d022      	beq.n	8010df8 <_dtoa_r+0x498>
 8010db2:	f1c8 0100 	rsb	r1, r8, #0
 8010db6:	4a6d      	ldr	r2, [pc, #436]	@ (8010f6c <_dtoa_r+0x60c>)
 8010db8:	f001 000f 	and.w	r0, r1, #15
 8010dbc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8010dc0:	ed92 7b00 	vldr	d7, [r2]
 8010dc4:	ee28 7b07 	vmul.f64	d7, d8, d7
 8010dc8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010dcc:	4868      	ldr	r0, [pc, #416]	@ (8010f70 <_dtoa_r+0x610>)
 8010dce:	1109      	asrs	r1, r1, #4
 8010dd0:	2400      	movs	r4, #0
 8010dd2:	2202      	movs	r2, #2
 8010dd4:	b929      	cbnz	r1, 8010de2 <_dtoa_r+0x482>
 8010dd6:	2c00      	cmp	r4, #0
 8010dd8:	f43f af57 	beq.w	8010c8a <_dtoa_r+0x32a>
 8010ddc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010de0:	e753      	b.n	8010c8a <_dtoa_r+0x32a>
 8010de2:	07ce      	lsls	r6, r1, #31
 8010de4:	d505      	bpl.n	8010df2 <_dtoa_r+0x492>
 8010de6:	ed90 6b00 	vldr	d6, [r0]
 8010dea:	3201      	adds	r2, #1
 8010dec:	2401      	movs	r4, #1
 8010dee:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010df2:	1049      	asrs	r1, r1, #1
 8010df4:	3008      	adds	r0, #8
 8010df6:	e7ed      	b.n	8010dd4 <_dtoa_r+0x474>
 8010df8:	2202      	movs	r2, #2
 8010dfa:	e746      	b.n	8010c8a <_dtoa_r+0x32a>
 8010dfc:	f8cd 8014 	str.w	r8, [sp, #20]
 8010e00:	4654      	mov	r4, sl
 8010e02:	e762      	b.n	8010cca <_dtoa_r+0x36a>
 8010e04:	4a59      	ldr	r2, [pc, #356]	@ (8010f6c <_dtoa_r+0x60c>)
 8010e06:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8010e0a:	ed12 4b02 	vldr	d4, [r2, #-8]
 8010e0e:	9a08      	ldr	r2, [sp, #32]
 8010e10:	ec41 0b17 	vmov	d7, r0, r1
 8010e14:	443c      	add	r4, r7
 8010e16:	b34a      	cbz	r2, 8010e6c <_dtoa_r+0x50c>
 8010e18:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8010e1c:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8010e20:	463e      	mov	r6, r7
 8010e22:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8010e26:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8010e2a:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010e2e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010e32:	ee14 2a90 	vmov	r2, s9
 8010e36:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010e3a:	3230      	adds	r2, #48	@ 0x30
 8010e3c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010e40:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e48:	f806 2b01 	strb.w	r2, [r6], #1
 8010e4c:	d438      	bmi.n	8010ec0 <_dtoa_r+0x560>
 8010e4e:	ee32 5b46 	vsub.f64	d5, d2, d6
 8010e52:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8010e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e5a:	d46e      	bmi.n	8010f3a <_dtoa_r+0x5da>
 8010e5c:	42a6      	cmp	r6, r4
 8010e5e:	f43f af5a 	beq.w	8010d16 <_dtoa_r+0x3b6>
 8010e62:	ee27 7b03 	vmul.f64	d7, d7, d3
 8010e66:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010e6a:	e7e0      	b.n	8010e2e <_dtoa_r+0x4ce>
 8010e6c:	4621      	mov	r1, r4
 8010e6e:	463e      	mov	r6, r7
 8010e70:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010e74:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8010e78:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010e7c:	ee14 2a90 	vmov	r2, s9
 8010e80:	3230      	adds	r2, #48	@ 0x30
 8010e82:	f806 2b01 	strb.w	r2, [r6], #1
 8010e86:	42a6      	cmp	r6, r4
 8010e88:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010e8c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010e90:	d119      	bne.n	8010ec6 <_dtoa_r+0x566>
 8010e92:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8010e96:	ee37 4b05 	vadd.f64	d4, d7, d5
 8010e9a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8010e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ea2:	dc4a      	bgt.n	8010f3a <_dtoa_r+0x5da>
 8010ea4:	ee35 5b47 	vsub.f64	d5, d5, d7
 8010ea8:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8010eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010eb0:	f57f af31 	bpl.w	8010d16 <_dtoa_r+0x3b6>
 8010eb4:	460e      	mov	r6, r1
 8010eb6:	3901      	subs	r1, #1
 8010eb8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010ebc:	2b30      	cmp	r3, #48	@ 0x30
 8010ebe:	d0f9      	beq.n	8010eb4 <_dtoa_r+0x554>
 8010ec0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8010ec4:	e027      	b.n	8010f16 <_dtoa_r+0x5b6>
 8010ec6:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010eca:	e7d5      	b.n	8010e78 <_dtoa_r+0x518>
 8010ecc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010ed0:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8010ed4:	463e      	mov	r6, r7
 8010ed6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8010eda:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8010ede:	ee15 3a10 	vmov	r3, s10
 8010ee2:	3330      	adds	r3, #48	@ 0x30
 8010ee4:	f806 3b01 	strb.w	r3, [r6], #1
 8010ee8:	1bf3      	subs	r3, r6, r7
 8010eea:	459a      	cmp	sl, r3
 8010eec:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8010ef0:	eea3 7b46 	vfms.f64	d7, d3, d6
 8010ef4:	d132      	bne.n	8010f5c <_dtoa_r+0x5fc>
 8010ef6:	ee37 7b07 	vadd.f64	d7, d7, d7
 8010efa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f02:	dc18      	bgt.n	8010f36 <_dtoa_r+0x5d6>
 8010f04:	eeb4 7b46 	vcmp.f64	d7, d6
 8010f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f0c:	d103      	bne.n	8010f16 <_dtoa_r+0x5b6>
 8010f0e:	ee15 3a10 	vmov	r3, s10
 8010f12:	07db      	lsls	r3, r3, #31
 8010f14:	d40f      	bmi.n	8010f36 <_dtoa_r+0x5d6>
 8010f16:	9901      	ldr	r1, [sp, #4]
 8010f18:	4648      	mov	r0, r9
 8010f1a:	f000 fbbf 	bl	801169c <_Bfree>
 8010f1e:	2300      	movs	r3, #0
 8010f20:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010f22:	7033      	strb	r3, [r6, #0]
 8010f24:	f108 0301 	add.w	r3, r8, #1
 8010f28:	6013      	str	r3, [r2, #0]
 8010f2a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	f000 824b 	beq.w	80113c8 <_dtoa_r+0xa68>
 8010f32:	601e      	str	r6, [r3, #0]
 8010f34:	e248      	b.n	80113c8 <_dtoa_r+0xa68>
 8010f36:	f8cd 8014 	str.w	r8, [sp, #20]
 8010f3a:	4633      	mov	r3, r6
 8010f3c:	461e      	mov	r6, r3
 8010f3e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010f42:	2a39      	cmp	r2, #57	@ 0x39
 8010f44:	d106      	bne.n	8010f54 <_dtoa_r+0x5f4>
 8010f46:	429f      	cmp	r7, r3
 8010f48:	d1f8      	bne.n	8010f3c <_dtoa_r+0x5dc>
 8010f4a:	9a05      	ldr	r2, [sp, #20]
 8010f4c:	3201      	adds	r2, #1
 8010f4e:	9205      	str	r2, [sp, #20]
 8010f50:	2230      	movs	r2, #48	@ 0x30
 8010f52:	703a      	strb	r2, [r7, #0]
 8010f54:	781a      	ldrb	r2, [r3, #0]
 8010f56:	3201      	adds	r2, #1
 8010f58:	701a      	strb	r2, [r3, #0]
 8010f5a:	e7b1      	b.n	8010ec0 <_dtoa_r+0x560>
 8010f5c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010f60:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f68:	d1b5      	bne.n	8010ed6 <_dtoa_r+0x576>
 8010f6a:	e7d4      	b.n	8010f16 <_dtoa_r+0x5b6>
 8010f6c:	08012a50 	.word	0x08012a50
 8010f70:	08012a28 	.word	0x08012a28
 8010f74:	9908      	ldr	r1, [sp, #32]
 8010f76:	2900      	cmp	r1, #0
 8010f78:	f000 80e9 	beq.w	801114e <_dtoa_r+0x7ee>
 8010f7c:	9907      	ldr	r1, [sp, #28]
 8010f7e:	2901      	cmp	r1, #1
 8010f80:	f300 80cb 	bgt.w	801111a <_dtoa_r+0x7ba>
 8010f84:	2d00      	cmp	r5, #0
 8010f86:	f000 80c4 	beq.w	8011112 <_dtoa_r+0x7b2>
 8010f8a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8010f8e:	9e04      	ldr	r6, [sp, #16]
 8010f90:	461c      	mov	r4, r3
 8010f92:	9305      	str	r3, [sp, #20]
 8010f94:	9b04      	ldr	r3, [sp, #16]
 8010f96:	4413      	add	r3, r2
 8010f98:	9304      	str	r3, [sp, #16]
 8010f9a:	9b06      	ldr	r3, [sp, #24]
 8010f9c:	2101      	movs	r1, #1
 8010f9e:	4413      	add	r3, r2
 8010fa0:	4648      	mov	r0, r9
 8010fa2:	9306      	str	r3, [sp, #24]
 8010fa4:	f000 fc2e 	bl	8011804 <__i2b>
 8010fa8:	9b05      	ldr	r3, [sp, #20]
 8010faa:	4605      	mov	r5, r0
 8010fac:	b166      	cbz	r6, 8010fc8 <_dtoa_r+0x668>
 8010fae:	9a06      	ldr	r2, [sp, #24]
 8010fb0:	2a00      	cmp	r2, #0
 8010fb2:	dd09      	ble.n	8010fc8 <_dtoa_r+0x668>
 8010fb4:	42b2      	cmp	r2, r6
 8010fb6:	9904      	ldr	r1, [sp, #16]
 8010fb8:	bfa8      	it	ge
 8010fba:	4632      	movge	r2, r6
 8010fbc:	1a89      	subs	r1, r1, r2
 8010fbe:	9104      	str	r1, [sp, #16]
 8010fc0:	9906      	ldr	r1, [sp, #24]
 8010fc2:	1ab6      	subs	r6, r6, r2
 8010fc4:	1a8a      	subs	r2, r1, r2
 8010fc6:	9206      	str	r2, [sp, #24]
 8010fc8:	b30b      	cbz	r3, 801100e <_dtoa_r+0x6ae>
 8010fca:	9a08      	ldr	r2, [sp, #32]
 8010fcc:	2a00      	cmp	r2, #0
 8010fce:	f000 80c5 	beq.w	801115c <_dtoa_r+0x7fc>
 8010fd2:	2c00      	cmp	r4, #0
 8010fd4:	f000 80bf 	beq.w	8011156 <_dtoa_r+0x7f6>
 8010fd8:	4629      	mov	r1, r5
 8010fda:	4622      	mov	r2, r4
 8010fdc:	4648      	mov	r0, r9
 8010fde:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010fe0:	f000 fcc8 	bl	8011974 <__pow5mult>
 8010fe4:	9a01      	ldr	r2, [sp, #4]
 8010fe6:	4601      	mov	r1, r0
 8010fe8:	4605      	mov	r5, r0
 8010fea:	4648      	mov	r0, r9
 8010fec:	f000 fc20 	bl	8011830 <__multiply>
 8010ff0:	9901      	ldr	r1, [sp, #4]
 8010ff2:	9005      	str	r0, [sp, #20]
 8010ff4:	4648      	mov	r0, r9
 8010ff6:	f000 fb51 	bl	801169c <_Bfree>
 8010ffa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010ffc:	1b1b      	subs	r3, r3, r4
 8010ffe:	f000 80b0 	beq.w	8011162 <_dtoa_r+0x802>
 8011002:	9905      	ldr	r1, [sp, #20]
 8011004:	461a      	mov	r2, r3
 8011006:	4648      	mov	r0, r9
 8011008:	f000 fcb4 	bl	8011974 <__pow5mult>
 801100c:	9001      	str	r0, [sp, #4]
 801100e:	2101      	movs	r1, #1
 8011010:	4648      	mov	r0, r9
 8011012:	f000 fbf7 	bl	8011804 <__i2b>
 8011016:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011018:	4604      	mov	r4, r0
 801101a:	2b00      	cmp	r3, #0
 801101c:	f000 81da 	beq.w	80113d4 <_dtoa_r+0xa74>
 8011020:	461a      	mov	r2, r3
 8011022:	4601      	mov	r1, r0
 8011024:	4648      	mov	r0, r9
 8011026:	f000 fca5 	bl	8011974 <__pow5mult>
 801102a:	9b07      	ldr	r3, [sp, #28]
 801102c:	2b01      	cmp	r3, #1
 801102e:	4604      	mov	r4, r0
 8011030:	f300 80a0 	bgt.w	8011174 <_dtoa_r+0x814>
 8011034:	9b02      	ldr	r3, [sp, #8]
 8011036:	2b00      	cmp	r3, #0
 8011038:	f040 8096 	bne.w	8011168 <_dtoa_r+0x808>
 801103c:	9b03      	ldr	r3, [sp, #12]
 801103e:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8011042:	2a00      	cmp	r2, #0
 8011044:	f040 8092 	bne.w	801116c <_dtoa_r+0x80c>
 8011048:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801104c:	0d12      	lsrs	r2, r2, #20
 801104e:	0512      	lsls	r2, r2, #20
 8011050:	2a00      	cmp	r2, #0
 8011052:	f000 808d 	beq.w	8011170 <_dtoa_r+0x810>
 8011056:	9b04      	ldr	r3, [sp, #16]
 8011058:	3301      	adds	r3, #1
 801105a:	9304      	str	r3, [sp, #16]
 801105c:	9b06      	ldr	r3, [sp, #24]
 801105e:	3301      	adds	r3, #1
 8011060:	9306      	str	r3, [sp, #24]
 8011062:	2301      	movs	r3, #1
 8011064:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011066:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011068:	2b00      	cmp	r3, #0
 801106a:	f000 81b9 	beq.w	80113e0 <_dtoa_r+0xa80>
 801106e:	6922      	ldr	r2, [r4, #16]
 8011070:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8011074:	6910      	ldr	r0, [r2, #16]
 8011076:	f000 fb79 	bl	801176c <__hi0bits>
 801107a:	f1c0 0020 	rsb	r0, r0, #32
 801107e:	9b06      	ldr	r3, [sp, #24]
 8011080:	4418      	add	r0, r3
 8011082:	f010 001f 	ands.w	r0, r0, #31
 8011086:	f000 8081 	beq.w	801118c <_dtoa_r+0x82c>
 801108a:	f1c0 0220 	rsb	r2, r0, #32
 801108e:	2a04      	cmp	r2, #4
 8011090:	dd73      	ble.n	801117a <_dtoa_r+0x81a>
 8011092:	9b04      	ldr	r3, [sp, #16]
 8011094:	f1c0 001c 	rsb	r0, r0, #28
 8011098:	4403      	add	r3, r0
 801109a:	9304      	str	r3, [sp, #16]
 801109c:	9b06      	ldr	r3, [sp, #24]
 801109e:	4406      	add	r6, r0
 80110a0:	4403      	add	r3, r0
 80110a2:	9306      	str	r3, [sp, #24]
 80110a4:	9b04      	ldr	r3, [sp, #16]
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	dd05      	ble.n	80110b6 <_dtoa_r+0x756>
 80110aa:	9901      	ldr	r1, [sp, #4]
 80110ac:	461a      	mov	r2, r3
 80110ae:	4648      	mov	r0, r9
 80110b0:	f000 fcba 	bl	8011a28 <__lshift>
 80110b4:	9001      	str	r0, [sp, #4]
 80110b6:	9b06      	ldr	r3, [sp, #24]
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	dd05      	ble.n	80110c8 <_dtoa_r+0x768>
 80110bc:	4621      	mov	r1, r4
 80110be:	461a      	mov	r2, r3
 80110c0:	4648      	mov	r0, r9
 80110c2:	f000 fcb1 	bl	8011a28 <__lshift>
 80110c6:	4604      	mov	r4, r0
 80110c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d060      	beq.n	8011190 <_dtoa_r+0x830>
 80110ce:	9801      	ldr	r0, [sp, #4]
 80110d0:	4621      	mov	r1, r4
 80110d2:	f000 fd15 	bl	8011b00 <__mcmp>
 80110d6:	2800      	cmp	r0, #0
 80110d8:	da5a      	bge.n	8011190 <_dtoa_r+0x830>
 80110da:	f108 33ff 	add.w	r3, r8, #4294967295
 80110de:	9305      	str	r3, [sp, #20]
 80110e0:	9901      	ldr	r1, [sp, #4]
 80110e2:	2300      	movs	r3, #0
 80110e4:	220a      	movs	r2, #10
 80110e6:	4648      	mov	r0, r9
 80110e8:	f000 fafa 	bl	80116e0 <__multadd>
 80110ec:	9b08      	ldr	r3, [sp, #32]
 80110ee:	9001      	str	r0, [sp, #4]
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	f000 8177 	beq.w	80113e4 <_dtoa_r+0xa84>
 80110f6:	4629      	mov	r1, r5
 80110f8:	2300      	movs	r3, #0
 80110fa:	220a      	movs	r2, #10
 80110fc:	4648      	mov	r0, r9
 80110fe:	f000 faef 	bl	80116e0 <__multadd>
 8011102:	f1bb 0f00 	cmp.w	fp, #0
 8011106:	4605      	mov	r5, r0
 8011108:	dc6e      	bgt.n	80111e8 <_dtoa_r+0x888>
 801110a:	9b07      	ldr	r3, [sp, #28]
 801110c:	2b02      	cmp	r3, #2
 801110e:	dc48      	bgt.n	80111a2 <_dtoa_r+0x842>
 8011110:	e06a      	b.n	80111e8 <_dtoa_r+0x888>
 8011112:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011114:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8011118:	e739      	b.n	8010f8e <_dtoa_r+0x62e>
 801111a:	f10a 34ff 	add.w	r4, sl, #4294967295
 801111e:	42a3      	cmp	r3, r4
 8011120:	db07      	blt.n	8011132 <_dtoa_r+0x7d2>
 8011122:	f1ba 0f00 	cmp.w	sl, #0
 8011126:	eba3 0404 	sub.w	r4, r3, r4
 801112a:	db0b      	blt.n	8011144 <_dtoa_r+0x7e4>
 801112c:	9e04      	ldr	r6, [sp, #16]
 801112e:	4652      	mov	r2, sl
 8011130:	e72f      	b.n	8010f92 <_dtoa_r+0x632>
 8011132:	1ae2      	subs	r2, r4, r3
 8011134:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011136:	9e04      	ldr	r6, [sp, #16]
 8011138:	4413      	add	r3, r2
 801113a:	930a      	str	r3, [sp, #40]	@ 0x28
 801113c:	4652      	mov	r2, sl
 801113e:	4623      	mov	r3, r4
 8011140:	2400      	movs	r4, #0
 8011142:	e726      	b.n	8010f92 <_dtoa_r+0x632>
 8011144:	9a04      	ldr	r2, [sp, #16]
 8011146:	eba2 060a 	sub.w	r6, r2, sl
 801114a:	2200      	movs	r2, #0
 801114c:	e721      	b.n	8010f92 <_dtoa_r+0x632>
 801114e:	9e04      	ldr	r6, [sp, #16]
 8011150:	9d08      	ldr	r5, [sp, #32]
 8011152:	461c      	mov	r4, r3
 8011154:	e72a      	b.n	8010fac <_dtoa_r+0x64c>
 8011156:	9a01      	ldr	r2, [sp, #4]
 8011158:	9205      	str	r2, [sp, #20]
 801115a:	e752      	b.n	8011002 <_dtoa_r+0x6a2>
 801115c:	9901      	ldr	r1, [sp, #4]
 801115e:	461a      	mov	r2, r3
 8011160:	e751      	b.n	8011006 <_dtoa_r+0x6a6>
 8011162:	9b05      	ldr	r3, [sp, #20]
 8011164:	9301      	str	r3, [sp, #4]
 8011166:	e752      	b.n	801100e <_dtoa_r+0x6ae>
 8011168:	2300      	movs	r3, #0
 801116a:	e77b      	b.n	8011064 <_dtoa_r+0x704>
 801116c:	9b02      	ldr	r3, [sp, #8]
 801116e:	e779      	b.n	8011064 <_dtoa_r+0x704>
 8011170:	920b      	str	r2, [sp, #44]	@ 0x2c
 8011172:	e778      	b.n	8011066 <_dtoa_r+0x706>
 8011174:	2300      	movs	r3, #0
 8011176:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011178:	e779      	b.n	801106e <_dtoa_r+0x70e>
 801117a:	d093      	beq.n	80110a4 <_dtoa_r+0x744>
 801117c:	9b04      	ldr	r3, [sp, #16]
 801117e:	321c      	adds	r2, #28
 8011180:	4413      	add	r3, r2
 8011182:	9304      	str	r3, [sp, #16]
 8011184:	9b06      	ldr	r3, [sp, #24]
 8011186:	4416      	add	r6, r2
 8011188:	4413      	add	r3, r2
 801118a:	e78a      	b.n	80110a2 <_dtoa_r+0x742>
 801118c:	4602      	mov	r2, r0
 801118e:	e7f5      	b.n	801117c <_dtoa_r+0x81c>
 8011190:	f1ba 0f00 	cmp.w	sl, #0
 8011194:	f8cd 8014 	str.w	r8, [sp, #20]
 8011198:	46d3      	mov	fp, sl
 801119a:	dc21      	bgt.n	80111e0 <_dtoa_r+0x880>
 801119c:	9b07      	ldr	r3, [sp, #28]
 801119e:	2b02      	cmp	r3, #2
 80111a0:	dd1e      	ble.n	80111e0 <_dtoa_r+0x880>
 80111a2:	f1bb 0f00 	cmp.w	fp, #0
 80111a6:	f47f addc 	bne.w	8010d62 <_dtoa_r+0x402>
 80111aa:	4621      	mov	r1, r4
 80111ac:	465b      	mov	r3, fp
 80111ae:	2205      	movs	r2, #5
 80111b0:	4648      	mov	r0, r9
 80111b2:	f000 fa95 	bl	80116e0 <__multadd>
 80111b6:	4601      	mov	r1, r0
 80111b8:	4604      	mov	r4, r0
 80111ba:	9801      	ldr	r0, [sp, #4]
 80111bc:	f000 fca0 	bl	8011b00 <__mcmp>
 80111c0:	2800      	cmp	r0, #0
 80111c2:	f77f adce 	ble.w	8010d62 <_dtoa_r+0x402>
 80111c6:	463e      	mov	r6, r7
 80111c8:	2331      	movs	r3, #49	@ 0x31
 80111ca:	f806 3b01 	strb.w	r3, [r6], #1
 80111ce:	9b05      	ldr	r3, [sp, #20]
 80111d0:	3301      	adds	r3, #1
 80111d2:	9305      	str	r3, [sp, #20]
 80111d4:	e5c9      	b.n	8010d6a <_dtoa_r+0x40a>
 80111d6:	f8cd 8014 	str.w	r8, [sp, #20]
 80111da:	4654      	mov	r4, sl
 80111dc:	4625      	mov	r5, r4
 80111de:	e7f2      	b.n	80111c6 <_dtoa_r+0x866>
 80111e0:	9b08      	ldr	r3, [sp, #32]
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	f000 8102 	beq.w	80113ec <_dtoa_r+0xa8c>
 80111e8:	2e00      	cmp	r6, #0
 80111ea:	dd05      	ble.n	80111f8 <_dtoa_r+0x898>
 80111ec:	4629      	mov	r1, r5
 80111ee:	4632      	mov	r2, r6
 80111f0:	4648      	mov	r0, r9
 80111f2:	f000 fc19 	bl	8011a28 <__lshift>
 80111f6:	4605      	mov	r5, r0
 80111f8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d058      	beq.n	80112b0 <_dtoa_r+0x950>
 80111fe:	6869      	ldr	r1, [r5, #4]
 8011200:	4648      	mov	r0, r9
 8011202:	f000 fa0b 	bl	801161c <_Balloc>
 8011206:	4606      	mov	r6, r0
 8011208:	b928      	cbnz	r0, 8011216 <_dtoa_r+0x8b6>
 801120a:	4b82      	ldr	r3, [pc, #520]	@ (8011414 <_dtoa_r+0xab4>)
 801120c:	4602      	mov	r2, r0
 801120e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8011212:	f7ff bbbe 	b.w	8010992 <_dtoa_r+0x32>
 8011216:	692a      	ldr	r2, [r5, #16]
 8011218:	3202      	adds	r2, #2
 801121a:	0092      	lsls	r2, r2, #2
 801121c:	f105 010c 	add.w	r1, r5, #12
 8011220:	300c      	adds	r0, #12
 8011222:	f7ff fae8 	bl	80107f6 <memcpy>
 8011226:	2201      	movs	r2, #1
 8011228:	4631      	mov	r1, r6
 801122a:	4648      	mov	r0, r9
 801122c:	f000 fbfc 	bl	8011a28 <__lshift>
 8011230:	1c7b      	adds	r3, r7, #1
 8011232:	9304      	str	r3, [sp, #16]
 8011234:	eb07 030b 	add.w	r3, r7, fp
 8011238:	9309      	str	r3, [sp, #36]	@ 0x24
 801123a:	9b02      	ldr	r3, [sp, #8]
 801123c:	f003 0301 	and.w	r3, r3, #1
 8011240:	46a8      	mov	r8, r5
 8011242:	9308      	str	r3, [sp, #32]
 8011244:	4605      	mov	r5, r0
 8011246:	9b04      	ldr	r3, [sp, #16]
 8011248:	9801      	ldr	r0, [sp, #4]
 801124a:	4621      	mov	r1, r4
 801124c:	f103 3bff 	add.w	fp, r3, #4294967295
 8011250:	f7ff fafe 	bl	8010850 <quorem>
 8011254:	4641      	mov	r1, r8
 8011256:	9002      	str	r0, [sp, #8]
 8011258:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801125c:	9801      	ldr	r0, [sp, #4]
 801125e:	f000 fc4f 	bl	8011b00 <__mcmp>
 8011262:	462a      	mov	r2, r5
 8011264:	9006      	str	r0, [sp, #24]
 8011266:	4621      	mov	r1, r4
 8011268:	4648      	mov	r0, r9
 801126a:	f000 fc65 	bl	8011b38 <__mdiff>
 801126e:	68c2      	ldr	r2, [r0, #12]
 8011270:	4606      	mov	r6, r0
 8011272:	b9fa      	cbnz	r2, 80112b4 <_dtoa_r+0x954>
 8011274:	4601      	mov	r1, r0
 8011276:	9801      	ldr	r0, [sp, #4]
 8011278:	f000 fc42 	bl	8011b00 <__mcmp>
 801127c:	4602      	mov	r2, r0
 801127e:	4631      	mov	r1, r6
 8011280:	4648      	mov	r0, r9
 8011282:	920a      	str	r2, [sp, #40]	@ 0x28
 8011284:	f000 fa0a 	bl	801169c <_Bfree>
 8011288:	9b07      	ldr	r3, [sp, #28]
 801128a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801128c:	9e04      	ldr	r6, [sp, #16]
 801128e:	ea42 0103 	orr.w	r1, r2, r3
 8011292:	9b08      	ldr	r3, [sp, #32]
 8011294:	4319      	orrs	r1, r3
 8011296:	d10f      	bne.n	80112b8 <_dtoa_r+0x958>
 8011298:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801129c:	d028      	beq.n	80112f0 <_dtoa_r+0x990>
 801129e:	9b06      	ldr	r3, [sp, #24]
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	dd02      	ble.n	80112aa <_dtoa_r+0x94a>
 80112a4:	9b02      	ldr	r3, [sp, #8]
 80112a6:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 80112aa:	f88b a000 	strb.w	sl, [fp]
 80112ae:	e55e      	b.n	8010d6e <_dtoa_r+0x40e>
 80112b0:	4628      	mov	r0, r5
 80112b2:	e7bd      	b.n	8011230 <_dtoa_r+0x8d0>
 80112b4:	2201      	movs	r2, #1
 80112b6:	e7e2      	b.n	801127e <_dtoa_r+0x91e>
 80112b8:	9b06      	ldr	r3, [sp, #24]
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	db04      	blt.n	80112c8 <_dtoa_r+0x968>
 80112be:	9907      	ldr	r1, [sp, #28]
 80112c0:	430b      	orrs	r3, r1
 80112c2:	9908      	ldr	r1, [sp, #32]
 80112c4:	430b      	orrs	r3, r1
 80112c6:	d120      	bne.n	801130a <_dtoa_r+0x9aa>
 80112c8:	2a00      	cmp	r2, #0
 80112ca:	ddee      	ble.n	80112aa <_dtoa_r+0x94a>
 80112cc:	9901      	ldr	r1, [sp, #4]
 80112ce:	2201      	movs	r2, #1
 80112d0:	4648      	mov	r0, r9
 80112d2:	f000 fba9 	bl	8011a28 <__lshift>
 80112d6:	4621      	mov	r1, r4
 80112d8:	9001      	str	r0, [sp, #4]
 80112da:	f000 fc11 	bl	8011b00 <__mcmp>
 80112de:	2800      	cmp	r0, #0
 80112e0:	dc03      	bgt.n	80112ea <_dtoa_r+0x98a>
 80112e2:	d1e2      	bne.n	80112aa <_dtoa_r+0x94a>
 80112e4:	f01a 0f01 	tst.w	sl, #1
 80112e8:	d0df      	beq.n	80112aa <_dtoa_r+0x94a>
 80112ea:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80112ee:	d1d9      	bne.n	80112a4 <_dtoa_r+0x944>
 80112f0:	2339      	movs	r3, #57	@ 0x39
 80112f2:	f88b 3000 	strb.w	r3, [fp]
 80112f6:	4633      	mov	r3, r6
 80112f8:	461e      	mov	r6, r3
 80112fa:	3b01      	subs	r3, #1
 80112fc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8011300:	2a39      	cmp	r2, #57	@ 0x39
 8011302:	d052      	beq.n	80113aa <_dtoa_r+0xa4a>
 8011304:	3201      	adds	r2, #1
 8011306:	701a      	strb	r2, [r3, #0]
 8011308:	e531      	b.n	8010d6e <_dtoa_r+0x40e>
 801130a:	2a00      	cmp	r2, #0
 801130c:	dd07      	ble.n	801131e <_dtoa_r+0x9be>
 801130e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8011312:	d0ed      	beq.n	80112f0 <_dtoa_r+0x990>
 8011314:	f10a 0301 	add.w	r3, sl, #1
 8011318:	f88b 3000 	strb.w	r3, [fp]
 801131c:	e527      	b.n	8010d6e <_dtoa_r+0x40e>
 801131e:	9b04      	ldr	r3, [sp, #16]
 8011320:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011322:	f803 ac01 	strb.w	sl, [r3, #-1]
 8011326:	4293      	cmp	r3, r2
 8011328:	d029      	beq.n	801137e <_dtoa_r+0xa1e>
 801132a:	9901      	ldr	r1, [sp, #4]
 801132c:	2300      	movs	r3, #0
 801132e:	220a      	movs	r2, #10
 8011330:	4648      	mov	r0, r9
 8011332:	f000 f9d5 	bl	80116e0 <__multadd>
 8011336:	45a8      	cmp	r8, r5
 8011338:	9001      	str	r0, [sp, #4]
 801133a:	f04f 0300 	mov.w	r3, #0
 801133e:	f04f 020a 	mov.w	r2, #10
 8011342:	4641      	mov	r1, r8
 8011344:	4648      	mov	r0, r9
 8011346:	d107      	bne.n	8011358 <_dtoa_r+0x9f8>
 8011348:	f000 f9ca 	bl	80116e0 <__multadd>
 801134c:	4680      	mov	r8, r0
 801134e:	4605      	mov	r5, r0
 8011350:	9b04      	ldr	r3, [sp, #16]
 8011352:	3301      	adds	r3, #1
 8011354:	9304      	str	r3, [sp, #16]
 8011356:	e776      	b.n	8011246 <_dtoa_r+0x8e6>
 8011358:	f000 f9c2 	bl	80116e0 <__multadd>
 801135c:	4629      	mov	r1, r5
 801135e:	4680      	mov	r8, r0
 8011360:	2300      	movs	r3, #0
 8011362:	220a      	movs	r2, #10
 8011364:	4648      	mov	r0, r9
 8011366:	f000 f9bb 	bl	80116e0 <__multadd>
 801136a:	4605      	mov	r5, r0
 801136c:	e7f0      	b.n	8011350 <_dtoa_r+0x9f0>
 801136e:	f1bb 0f00 	cmp.w	fp, #0
 8011372:	bfcc      	ite	gt
 8011374:	465e      	movgt	r6, fp
 8011376:	2601      	movle	r6, #1
 8011378:	443e      	add	r6, r7
 801137a:	f04f 0800 	mov.w	r8, #0
 801137e:	9901      	ldr	r1, [sp, #4]
 8011380:	2201      	movs	r2, #1
 8011382:	4648      	mov	r0, r9
 8011384:	f000 fb50 	bl	8011a28 <__lshift>
 8011388:	4621      	mov	r1, r4
 801138a:	9001      	str	r0, [sp, #4]
 801138c:	f000 fbb8 	bl	8011b00 <__mcmp>
 8011390:	2800      	cmp	r0, #0
 8011392:	dcb0      	bgt.n	80112f6 <_dtoa_r+0x996>
 8011394:	d102      	bne.n	801139c <_dtoa_r+0xa3c>
 8011396:	f01a 0f01 	tst.w	sl, #1
 801139a:	d1ac      	bne.n	80112f6 <_dtoa_r+0x996>
 801139c:	4633      	mov	r3, r6
 801139e:	461e      	mov	r6, r3
 80113a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80113a4:	2a30      	cmp	r2, #48	@ 0x30
 80113a6:	d0fa      	beq.n	801139e <_dtoa_r+0xa3e>
 80113a8:	e4e1      	b.n	8010d6e <_dtoa_r+0x40e>
 80113aa:	429f      	cmp	r7, r3
 80113ac:	d1a4      	bne.n	80112f8 <_dtoa_r+0x998>
 80113ae:	9b05      	ldr	r3, [sp, #20]
 80113b0:	3301      	adds	r3, #1
 80113b2:	9305      	str	r3, [sp, #20]
 80113b4:	2331      	movs	r3, #49	@ 0x31
 80113b6:	703b      	strb	r3, [r7, #0]
 80113b8:	e4d9      	b.n	8010d6e <_dtoa_r+0x40e>
 80113ba:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80113bc:	4f16      	ldr	r7, [pc, #88]	@ (8011418 <_dtoa_r+0xab8>)
 80113be:	b11b      	cbz	r3, 80113c8 <_dtoa_r+0xa68>
 80113c0:	f107 0308 	add.w	r3, r7, #8
 80113c4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80113c6:	6013      	str	r3, [r2, #0]
 80113c8:	4638      	mov	r0, r7
 80113ca:	b011      	add	sp, #68	@ 0x44
 80113cc:	ecbd 8b02 	vpop	{d8}
 80113d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113d4:	9b07      	ldr	r3, [sp, #28]
 80113d6:	2b01      	cmp	r3, #1
 80113d8:	f77f ae2c 	ble.w	8011034 <_dtoa_r+0x6d4>
 80113dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80113de:	930b      	str	r3, [sp, #44]	@ 0x2c
 80113e0:	2001      	movs	r0, #1
 80113e2:	e64c      	b.n	801107e <_dtoa_r+0x71e>
 80113e4:	f1bb 0f00 	cmp.w	fp, #0
 80113e8:	f77f aed8 	ble.w	801119c <_dtoa_r+0x83c>
 80113ec:	463e      	mov	r6, r7
 80113ee:	9801      	ldr	r0, [sp, #4]
 80113f0:	4621      	mov	r1, r4
 80113f2:	f7ff fa2d 	bl	8010850 <quorem>
 80113f6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80113fa:	f806 ab01 	strb.w	sl, [r6], #1
 80113fe:	1bf2      	subs	r2, r6, r7
 8011400:	4593      	cmp	fp, r2
 8011402:	ddb4      	ble.n	801136e <_dtoa_r+0xa0e>
 8011404:	9901      	ldr	r1, [sp, #4]
 8011406:	2300      	movs	r3, #0
 8011408:	220a      	movs	r2, #10
 801140a:	4648      	mov	r0, r9
 801140c:	f000 f968 	bl	80116e0 <__multadd>
 8011410:	9001      	str	r0, [sp, #4]
 8011412:	e7ec      	b.n	80113ee <_dtoa_r+0xa8e>
 8011414:	08012997 	.word	0x08012997
 8011418:	08012932 	.word	0x08012932

0801141c <_free_r>:
 801141c:	b538      	push	{r3, r4, r5, lr}
 801141e:	4605      	mov	r5, r0
 8011420:	2900      	cmp	r1, #0
 8011422:	d041      	beq.n	80114a8 <_free_r+0x8c>
 8011424:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011428:	1f0c      	subs	r4, r1, #4
 801142a:	2b00      	cmp	r3, #0
 801142c:	bfb8      	it	lt
 801142e:	18e4      	addlt	r4, r4, r3
 8011430:	f000 f8e8 	bl	8011604 <__malloc_lock>
 8011434:	4a1d      	ldr	r2, [pc, #116]	@ (80114ac <_free_r+0x90>)
 8011436:	6813      	ldr	r3, [r2, #0]
 8011438:	b933      	cbnz	r3, 8011448 <_free_r+0x2c>
 801143a:	6063      	str	r3, [r4, #4]
 801143c:	6014      	str	r4, [r2, #0]
 801143e:	4628      	mov	r0, r5
 8011440:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011444:	f000 b8e4 	b.w	8011610 <__malloc_unlock>
 8011448:	42a3      	cmp	r3, r4
 801144a:	d908      	bls.n	801145e <_free_r+0x42>
 801144c:	6820      	ldr	r0, [r4, #0]
 801144e:	1821      	adds	r1, r4, r0
 8011450:	428b      	cmp	r3, r1
 8011452:	bf01      	itttt	eq
 8011454:	6819      	ldreq	r1, [r3, #0]
 8011456:	685b      	ldreq	r3, [r3, #4]
 8011458:	1809      	addeq	r1, r1, r0
 801145a:	6021      	streq	r1, [r4, #0]
 801145c:	e7ed      	b.n	801143a <_free_r+0x1e>
 801145e:	461a      	mov	r2, r3
 8011460:	685b      	ldr	r3, [r3, #4]
 8011462:	b10b      	cbz	r3, 8011468 <_free_r+0x4c>
 8011464:	42a3      	cmp	r3, r4
 8011466:	d9fa      	bls.n	801145e <_free_r+0x42>
 8011468:	6811      	ldr	r1, [r2, #0]
 801146a:	1850      	adds	r0, r2, r1
 801146c:	42a0      	cmp	r0, r4
 801146e:	d10b      	bne.n	8011488 <_free_r+0x6c>
 8011470:	6820      	ldr	r0, [r4, #0]
 8011472:	4401      	add	r1, r0
 8011474:	1850      	adds	r0, r2, r1
 8011476:	4283      	cmp	r3, r0
 8011478:	6011      	str	r1, [r2, #0]
 801147a:	d1e0      	bne.n	801143e <_free_r+0x22>
 801147c:	6818      	ldr	r0, [r3, #0]
 801147e:	685b      	ldr	r3, [r3, #4]
 8011480:	6053      	str	r3, [r2, #4]
 8011482:	4408      	add	r0, r1
 8011484:	6010      	str	r0, [r2, #0]
 8011486:	e7da      	b.n	801143e <_free_r+0x22>
 8011488:	d902      	bls.n	8011490 <_free_r+0x74>
 801148a:	230c      	movs	r3, #12
 801148c:	602b      	str	r3, [r5, #0]
 801148e:	e7d6      	b.n	801143e <_free_r+0x22>
 8011490:	6820      	ldr	r0, [r4, #0]
 8011492:	1821      	adds	r1, r4, r0
 8011494:	428b      	cmp	r3, r1
 8011496:	bf04      	itt	eq
 8011498:	6819      	ldreq	r1, [r3, #0]
 801149a:	685b      	ldreq	r3, [r3, #4]
 801149c:	6063      	str	r3, [r4, #4]
 801149e:	bf04      	itt	eq
 80114a0:	1809      	addeq	r1, r1, r0
 80114a2:	6021      	streq	r1, [r4, #0]
 80114a4:	6054      	str	r4, [r2, #4]
 80114a6:	e7ca      	b.n	801143e <_free_r+0x22>
 80114a8:	bd38      	pop	{r3, r4, r5, pc}
 80114aa:	bf00      	nop
 80114ac:	24000880 	.word	0x24000880

080114b0 <malloc>:
 80114b0:	4b02      	ldr	r3, [pc, #8]	@ (80114bc <malloc+0xc>)
 80114b2:	4601      	mov	r1, r0
 80114b4:	6818      	ldr	r0, [r3, #0]
 80114b6:	f000 b825 	b.w	8011504 <_malloc_r>
 80114ba:	bf00      	nop
 80114bc:	24000038 	.word	0x24000038

080114c0 <sbrk_aligned>:
 80114c0:	b570      	push	{r4, r5, r6, lr}
 80114c2:	4e0f      	ldr	r6, [pc, #60]	@ (8011500 <sbrk_aligned+0x40>)
 80114c4:	460c      	mov	r4, r1
 80114c6:	6831      	ldr	r1, [r6, #0]
 80114c8:	4605      	mov	r5, r0
 80114ca:	b911      	cbnz	r1, 80114d2 <sbrk_aligned+0x12>
 80114cc:	f001 f816 	bl	80124fc <_sbrk_r>
 80114d0:	6030      	str	r0, [r6, #0]
 80114d2:	4621      	mov	r1, r4
 80114d4:	4628      	mov	r0, r5
 80114d6:	f001 f811 	bl	80124fc <_sbrk_r>
 80114da:	1c43      	adds	r3, r0, #1
 80114dc:	d103      	bne.n	80114e6 <sbrk_aligned+0x26>
 80114de:	f04f 34ff 	mov.w	r4, #4294967295
 80114e2:	4620      	mov	r0, r4
 80114e4:	bd70      	pop	{r4, r5, r6, pc}
 80114e6:	1cc4      	adds	r4, r0, #3
 80114e8:	f024 0403 	bic.w	r4, r4, #3
 80114ec:	42a0      	cmp	r0, r4
 80114ee:	d0f8      	beq.n	80114e2 <sbrk_aligned+0x22>
 80114f0:	1a21      	subs	r1, r4, r0
 80114f2:	4628      	mov	r0, r5
 80114f4:	f001 f802 	bl	80124fc <_sbrk_r>
 80114f8:	3001      	adds	r0, #1
 80114fa:	d1f2      	bne.n	80114e2 <sbrk_aligned+0x22>
 80114fc:	e7ef      	b.n	80114de <sbrk_aligned+0x1e>
 80114fe:	bf00      	nop
 8011500:	2400087c 	.word	0x2400087c

08011504 <_malloc_r>:
 8011504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011508:	1ccd      	adds	r5, r1, #3
 801150a:	f025 0503 	bic.w	r5, r5, #3
 801150e:	3508      	adds	r5, #8
 8011510:	2d0c      	cmp	r5, #12
 8011512:	bf38      	it	cc
 8011514:	250c      	movcc	r5, #12
 8011516:	2d00      	cmp	r5, #0
 8011518:	4606      	mov	r6, r0
 801151a:	db01      	blt.n	8011520 <_malloc_r+0x1c>
 801151c:	42a9      	cmp	r1, r5
 801151e:	d904      	bls.n	801152a <_malloc_r+0x26>
 8011520:	230c      	movs	r3, #12
 8011522:	6033      	str	r3, [r6, #0]
 8011524:	2000      	movs	r0, #0
 8011526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801152a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011600 <_malloc_r+0xfc>
 801152e:	f000 f869 	bl	8011604 <__malloc_lock>
 8011532:	f8d8 3000 	ldr.w	r3, [r8]
 8011536:	461c      	mov	r4, r3
 8011538:	bb44      	cbnz	r4, 801158c <_malloc_r+0x88>
 801153a:	4629      	mov	r1, r5
 801153c:	4630      	mov	r0, r6
 801153e:	f7ff ffbf 	bl	80114c0 <sbrk_aligned>
 8011542:	1c43      	adds	r3, r0, #1
 8011544:	4604      	mov	r4, r0
 8011546:	d158      	bne.n	80115fa <_malloc_r+0xf6>
 8011548:	f8d8 4000 	ldr.w	r4, [r8]
 801154c:	4627      	mov	r7, r4
 801154e:	2f00      	cmp	r7, #0
 8011550:	d143      	bne.n	80115da <_malloc_r+0xd6>
 8011552:	2c00      	cmp	r4, #0
 8011554:	d04b      	beq.n	80115ee <_malloc_r+0xea>
 8011556:	6823      	ldr	r3, [r4, #0]
 8011558:	4639      	mov	r1, r7
 801155a:	4630      	mov	r0, r6
 801155c:	eb04 0903 	add.w	r9, r4, r3
 8011560:	f000 ffcc 	bl	80124fc <_sbrk_r>
 8011564:	4581      	cmp	r9, r0
 8011566:	d142      	bne.n	80115ee <_malloc_r+0xea>
 8011568:	6821      	ldr	r1, [r4, #0]
 801156a:	1a6d      	subs	r5, r5, r1
 801156c:	4629      	mov	r1, r5
 801156e:	4630      	mov	r0, r6
 8011570:	f7ff ffa6 	bl	80114c0 <sbrk_aligned>
 8011574:	3001      	adds	r0, #1
 8011576:	d03a      	beq.n	80115ee <_malloc_r+0xea>
 8011578:	6823      	ldr	r3, [r4, #0]
 801157a:	442b      	add	r3, r5
 801157c:	6023      	str	r3, [r4, #0]
 801157e:	f8d8 3000 	ldr.w	r3, [r8]
 8011582:	685a      	ldr	r2, [r3, #4]
 8011584:	bb62      	cbnz	r2, 80115e0 <_malloc_r+0xdc>
 8011586:	f8c8 7000 	str.w	r7, [r8]
 801158a:	e00f      	b.n	80115ac <_malloc_r+0xa8>
 801158c:	6822      	ldr	r2, [r4, #0]
 801158e:	1b52      	subs	r2, r2, r5
 8011590:	d420      	bmi.n	80115d4 <_malloc_r+0xd0>
 8011592:	2a0b      	cmp	r2, #11
 8011594:	d917      	bls.n	80115c6 <_malloc_r+0xc2>
 8011596:	1961      	adds	r1, r4, r5
 8011598:	42a3      	cmp	r3, r4
 801159a:	6025      	str	r5, [r4, #0]
 801159c:	bf18      	it	ne
 801159e:	6059      	strne	r1, [r3, #4]
 80115a0:	6863      	ldr	r3, [r4, #4]
 80115a2:	bf08      	it	eq
 80115a4:	f8c8 1000 	streq.w	r1, [r8]
 80115a8:	5162      	str	r2, [r4, r5]
 80115aa:	604b      	str	r3, [r1, #4]
 80115ac:	4630      	mov	r0, r6
 80115ae:	f000 f82f 	bl	8011610 <__malloc_unlock>
 80115b2:	f104 000b 	add.w	r0, r4, #11
 80115b6:	1d23      	adds	r3, r4, #4
 80115b8:	f020 0007 	bic.w	r0, r0, #7
 80115bc:	1ac2      	subs	r2, r0, r3
 80115be:	bf1c      	itt	ne
 80115c0:	1a1b      	subne	r3, r3, r0
 80115c2:	50a3      	strne	r3, [r4, r2]
 80115c4:	e7af      	b.n	8011526 <_malloc_r+0x22>
 80115c6:	6862      	ldr	r2, [r4, #4]
 80115c8:	42a3      	cmp	r3, r4
 80115ca:	bf0c      	ite	eq
 80115cc:	f8c8 2000 	streq.w	r2, [r8]
 80115d0:	605a      	strne	r2, [r3, #4]
 80115d2:	e7eb      	b.n	80115ac <_malloc_r+0xa8>
 80115d4:	4623      	mov	r3, r4
 80115d6:	6864      	ldr	r4, [r4, #4]
 80115d8:	e7ae      	b.n	8011538 <_malloc_r+0x34>
 80115da:	463c      	mov	r4, r7
 80115dc:	687f      	ldr	r7, [r7, #4]
 80115de:	e7b6      	b.n	801154e <_malloc_r+0x4a>
 80115e0:	461a      	mov	r2, r3
 80115e2:	685b      	ldr	r3, [r3, #4]
 80115e4:	42a3      	cmp	r3, r4
 80115e6:	d1fb      	bne.n	80115e0 <_malloc_r+0xdc>
 80115e8:	2300      	movs	r3, #0
 80115ea:	6053      	str	r3, [r2, #4]
 80115ec:	e7de      	b.n	80115ac <_malloc_r+0xa8>
 80115ee:	230c      	movs	r3, #12
 80115f0:	6033      	str	r3, [r6, #0]
 80115f2:	4630      	mov	r0, r6
 80115f4:	f000 f80c 	bl	8011610 <__malloc_unlock>
 80115f8:	e794      	b.n	8011524 <_malloc_r+0x20>
 80115fa:	6005      	str	r5, [r0, #0]
 80115fc:	e7d6      	b.n	80115ac <_malloc_r+0xa8>
 80115fe:	bf00      	nop
 8011600:	24000880 	.word	0x24000880

08011604 <__malloc_lock>:
 8011604:	4801      	ldr	r0, [pc, #4]	@ (801160c <__malloc_lock+0x8>)
 8011606:	f7ff b8f4 	b.w	80107f2 <__retarget_lock_acquire_recursive>
 801160a:	bf00      	nop
 801160c:	24000878 	.word	0x24000878

08011610 <__malloc_unlock>:
 8011610:	4801      	ldr	r0, [pc, #4]	@ (8011618 <__malloc_unlock+0x8>)
 8011612:	f7ff b8ef 	b.w	80107f4 <__retarget_lock_release_recursive>
 8011616:	bf00      	nop
 8011618:	24000878 	.word	0x24000878

0801161c <_Balloc>:
 801161c:	b570      	push	{r4, r5, r6, lr}
 801161e:	69c6      	ldr	r6, [r0, #28]
 8011620:	4604      	mov	r4, r0
 8011622:	460d      	mov	r5, r1
 8011624:	b976      	cbnz	r6, 8011644 <_Balloc+0x28>
 8011626:	2010      	movs	r0, #16
 8011628:	f7ff ff42 	bl	80114b0 <malloc>
 801162c:	4602      	mov	r2, r0
 801162e:	61e0      	str	r0, [r4, #28]
 8011630:	b920      	cbnz	r0, 801163c <_Balloc+0x20>
 8011632:	4b18      	ldr	r3, [pc, #96]	@ (8011694 <_Balloc+0x78>)
 8011634:	4818      	ldr	r0, [pc, #96]	@ (8011698 <_Balloc+0x7c>)
 8011636:	216b      	movs	r1, #107	@ 0x6b
 8011638:	f7ff f8ec 	bl	8010814 <__assert_func>
 801163c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011640:	6006      	str	r6, [r0, #0]
 8011642:	60c6      	str	r6, [r0, #12]
 8011644:	69e6      	ldr	r6, [r4, #28]
 8011646:	68f3      	ldr	r3, [r6, #12]
 8011648:	b183      	cbz	r3, 801166c <_Balloc+0x50>
 801164a:	69e3      	ldr	r3, [r4, #28]
 801164c:	68db      	ldr	r3, [r3, #12]
 801164e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011652:	b9b8      	cbnz	r0, 8011684 <_Balloc+0x68>
 8011654:	2101      	movs	r1, #1
 8011656:	fa01 f605 	lsl.w	r6, r1, r5
 801165a:	1d72      	adds	r2, r6, #5
 801165c:	0092      	lsls	r2, r2, #2
 801165e:	4620      	mov	r0, r4
 8011660:	f000 ff63 	bl	801252a <_calloc_r>
 8011664:	b160      	cbz	r0, 8011680 <_Balloc+0x64>
 8011666:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801166a:	e00e      	b.n	801168a <_Balloc+0x6e>
 801166c:	2221      	movs	r2, #33	@ 0x21
 801166e:	2104      	movs	r1, #4
 8011670:	4620      	mov	r0, r4
 8011672:	f000 ff5a 	bl	801252a <_calloc_r>
 8011676:	69e3      	ldr	r3, [r4, #28]
 8011678:	60f0      	str	r0, [r6, #12]
 801167a:	68db      	ldr	r3, [r3, #12]
 801167c:	2b00      	cmp	r3, #0
 801167e:	d1e4      	bne.n	801164a <_Balloc+0x2e>
 8011680:	2000      	movs	r0, #0
 8011682:	bd70      	pop	{r4, r5, r6, pc}
 8011684:	6802      	ldr	r2, [r0, #0]
 8011686:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801168a:	2300      	movs	r3, #0
 801168c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011690:	e7f7      	b.n	8011682 <_Balloc+0x66>
 8011692:	bf00      	nop
 8011694:	08012885 	.word	0x08012885
 8011698:	080129a8 	.word	0x080129a8

0801169c <_Bfree>:
 801169c:	b570      	push	{r4, r5, r6, lr}
 801169e:	69c6      	ldr	r6, [r0, #28]
 80116a0:	4605      	mov	r5, r0
 80116a2:	460c      	mov	r4, r1
 80116a4:	b976      	cbnz	r6, 80116c4 <_Bfree+0x28>
 80116a6:	2010      	movs	r0, #16
 80116a8:	f7ff ff02 	bl	80114b0 <malloc>
 80116ac:	4602      	mov	r2, r0
 80116ae:	61e8      	str	r0, [r5, #28]
 80116b0:	b920      	cbnz	r0, 80116bc <_Bfree+0x20>
 80116b2:	4b09      	ldr	r3, [pc, #36]	@ (80116d8 <_Bfree+0x3c>)
 80116b4:	4809      	ldr	r0, [pc, #36]	@ (80116dc <_Bfree+0x40>)
 80116b6:	218f      	movs	r1, #143	@ 0x8f
 80116b8:	f7ff f8ac 	bl	8010814 <__assert_func>
 80116bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80116c0:	6006      	str	r6, [r0, #0]
 80116c2:	60c6      	str	r6, [r0, #12]
 80116c4:	b13c      	cbz	r4, 80116d6 <_Bfree+0x3a>
 80116c6:	69eb      	ldr	r3, [r5, #28]
 80116c8:	6862      	ldr	r2, [r4, #4]
 80116ca:	68db      	ldr	r3, [r3, #12]
 80116cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80116d0:	6021      	str	r1, [r4, #0]
 80116d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80116d6:	bd70      	pop	{r4, r5, r6, pc}
 80116d8:	08012885 	.word	0x08012885
 80116dc:	080129a8 	.word	0x080129a8

080116e0 <__multadd>:
 80116e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116e4:	690d      	ldr	r5, [r1, #16]
 80116e6:	4607      	mov	r7, r0
 80116e8:	460c      	mov	r4, r1
 80116ea:	461e      	mov	r6, r3
 80116ec:	f101 0c14 	add.w	ip, r1, #20
 80116f0:	2000      	movs	r0, #0
 80116f2:	f8dc 3000 	ldr.w	r3, [ip]
 80116f6:	b299      	uxth	r1, r3
 80116f8:	fb02 6101 	mla	r1, r2, r1, r6
 80116fc:	0c1e      	lsrs	r6, r3, #16
 80116fe:	0c0b      	lsrs	r3, r1, #16
 8011700:	fb02 3306 	mla	r3, r2, r6, r3
 8011704:	b289      	uxth	r1, r1
 8011706:	3001      	adds	r0, #1
 8011708:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801170c:	4285      	cmp	r5, r0
 801170e:	f84c 1b04 	str.w	r1, [ip], #4
 8011712:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011716:	dcec      	bgt.n	80116f2 <__multadd+0x12>
 8011718:	b30e      	cbz	r6, 801175e <__multadd+0x7e>
 801171a:	68a3      	ldr	r3, [r4, #8]
 801171c:	42ab      	cmp	r3, r5
 801171e:	dc19      	bgt.n	8011754 <__multadd+0x74>
 8011720:	6861      	ldr	r1, [r4, #4]
 8011722:	4638      	mov	r0, r7
 8011724:	3101      	adds	r1, #1
 8011726:	f7ff ff79 	bl	801161c <_Balloc>
 801172a:	4680      	mov	r8, r0
 801172c:	b928      	cbnz	r0, 801173a <__multadd+0x5a>
 801172e:	4602      	mov	r2, r0
 8011730:	4b0c      	ldr	r3, [pc, #48]	@ (8011764 <__multadd+0x84>)
 8011732:	480d      	ldr	r0, [pc, #52]	@ (8011768 <__multadd+0x88>)
 8011734:	21ba      	movs	r1, #186	@ 0xba
 8011736:	f7ff f86d 	bl	8010814 <__assert_func>
 801173a:	6922      	ldr	r2, [r4, #16]
 801173c:	3202      	adds	r2, #2
 801173e:	f104 010c 	add.w	r1, r4, #12
 8011742:	0092      	lsls	r2, r2, #2
 8011744:	300c      	adds	r0, #12
 8011746:	f7ff f856 	bl	80107f6 <memcpy>
 801174a:	4621      	mov	r1, r4
 801174c:	4638      	mov	r0, r7
 801174e:	f7ff ffa5 	bl	801169c <_Bfree>
 8011752:	4644      	mov	r4, r8
 8011754:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011758:	3501      	adds	r5, #1
 801175a:	615e      	str	r6, [r3, #20]
 801175c:	6125      	str	r5, [r4, #16]
 801175e:	4620      	mov	r0, r4
 8011760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011764:	08012997 	.word	0x08012997
 8011768:	080129a8 	.word	0x080129a8

0801176c <__hi0bits>:
 801176c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011770:	4603      	mov	r3, r0
 8011772:	bf36      	itet	cc
 8011774:	0403      	lslcc	r3, r0, #16
 8011776:	2000      	movcs	r0, #0
 8011778:	2010      	movcc	r0, #16
 801177a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801177e:	bf3c      	itt	cc
 8011780:	021b      	lslcc	r3, r3, #8
 8011782:	3008      	addcc	r0, #8
 8011784:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011788:	bf3c      	itt	cc
 801178a:	011b      	lslcc	r3, r3, #4
 801178c:	3004      	addcc	r0, #4
 801178e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011792:	bf3c      	itt	cc
 8011794:	009b      	lslcc	r3, r3, #2
 8011796:	3002      	addcc	r0, #2
 8011798:	2b00      	cmp	r3, #0
 801179a:	db05      	blt.n	80117a8 <__hi0bits+0x3c>
 801179c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80117a0:	f100 0001 	add.w	r0, r0, #1
 80117a4:	bf08      	it	eq
 80117a6:	2020      	moveq	r0, #32
 80117a8:	4770      	bx	lr

080117aa <__lo0bits>:
 80117aa:	6803      	ldr	r3, [r0, #0]
 80117ac:	4602      	mov	r2, r0
 80117ae:	f013 0007 	ands.w	r0, r3, #7
 80117b2:	d00b      	beq.n	80117cc <__lo0bits+0x22>
 80117b4:	07d9      	lsls	r1, r3, #31
 80117b6:	d421      	bmi.n	80117fc <__lo0bits+0x52>
 80117b8:	0798      	lsls	r0, r3, #30
 80117ba:	bf49      	itett	mi
 80117bc:	085b      	lsrmi	r3, r3, #1
 80117be:	089b      	lsrpl	r3, r3, #2
 80117c0:	2001      	movmi	r0, #1
 80117c2:	6013      	strmi	r3, [r2, #0]
 80117c4:	bf5c      	itt	pl
 80117c6:	6013      	strpl	r3, [r2, #0]
 80117c8:	2002      	movpl	r0, #2
 80117ca:	4770      	bx	lr
 80117cc:	b299      	uxth	r1, r3
 80117ce:	b909      	cbnz	r1, 80117d4 <__lo0bits+0x2a>
 80117d0:	0c1b      	lsrs	r3, r3, #16
 80117d2:	2010      	movs	r0, #16
 80117d4:	b2d9      	uxtb	r1, r3
 80117d6:	b909      	cbnz	r1, 80117dc <__lo0bits+0x32>
 80117d8:	3008      	adds	r0, #8
 80117da:	0a1b      	lsrs	r3, r3, #8
 80117dc:	0719      	lsls	r1, r3, #28
 80117de:	bf04      	itt	eq
 80117e0:	091b      	lsreq	r3, r3, #4
 80117e2:	3004      	addeq	r0, #4
 80117e4:	0799      	lsls	r1, r3, #30
 80117e6:	bf04      	itt	eq
 80117e8:	089b      	lsreq	r3, r3, #2
 80117ea:	3002      	addeq	r0, #2
 80117ec:	07d9      	lsls	r1, r3, #31
 80117ee:	d403      	bmi.n	80117f8 <__lo0bits+0x4e>
 80117f0:	085b      	lsrs	r3, r3, #1
 80117f2:	f100 0001 	add.w	r0, r0, #1
 80117f6:	d003      	beq.n	8011800 <__lo0bits+0x56>
 80117f8:	6013      	str	r3, [r2, #0]
 80117fa:	4770      	bx	lr
 80117fc:	2000      	movs	r0, #0
 80117fe:	4770      	bx	lr
 8011800:	2020      	movs	r0, #32
 8011802:	4770      	bx	lr

08011804 <__i2b>:
 8011804:	b510      	push	{r4, lr}
 8011806:	460c      	mov	r4, r1
 8011808:	2101      	movs	r1, #1
 801180a:	f7ff ff07 	bl	801161c <_Balloc>
 801180e:	4602      	mov	r2, r0
 8011810:	b928      	cbnz	r0, 801181e <__i2b+0x1a>
 8011812:	4b05      	ldr	r3, [pc, #20]	@ (8011828 <__i2b+0x24>)
 8011814:	4805      	ldr	r0, [pc, #20]	@ (801182c <__i2b+0x28>)
 8011816:	f240 1145 	movw	r1, #325	@ 0x145
 801181a:	f7fe fffb 	bl	8010814 <__assert_func>
 801181e:	2301      	movs	r3, #1
 8011820:	6144      	str	r4, [r0, #20]
 8011822:	6103      	str	r3, [r0, #16]
 8011824:	bd10      	pop	{r4, pc}
 8011826:	bf00      	nop
 8011828:	08012997 	.word	0x08012997
 801182c:	080129a8 	.word	0x080129a8

08011830 <__multiply>:
 8011830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011834:	4617      	mov	r7, r2
 8011836:	690a      	ldr	r2, [r1, #16]
 8011838:	693b      	ldr	r3, [r7, #16]
 801183a:	429a      	cmp	r2, r3
 801183c:	bfa8      	it	ge
 801183e:	463b      	movge	r3, r7
 8011840:	4689      	mov	r9, r1
 8011842:	bfa4      	itt	ge
 8011844:	460f      	movge	r7, r1
 8011846:	4699      	movge	r9, r3
 8011848:	693d      	ldr	r5, [r7, #16]
 801184a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801184e:	68bb      	ldr	r3, [r7, #8]
 8011850:	6879      	ldr	r1, [r7, #4]
 8011852:	eb05 060a 	add.w	r6, r5, sl
 8011856:	42b3      	cmp	r3, r6
 8011858:	b085      	sub	sp, #20
 801185a:	bfb8      	it	lt
 801185c:	3101      	addlt	r1, #1
 801185e:	f7ff fedd 	bl	801161c <_Balloc>
 8011862:	b930      	cbnz	r0, 8011872 <__multiply+0x42>
 8011864:	4602      	mov	r2, r0
 8011866:	4b41      	ldr	r3, [pc, #260]	@ (801196c <__multiply+0x13c>)
 8011868:	4841      	ldr	r0, [pc, #260]	@ (8011970 <__multiply+0x140>)
 801186a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801186e:	f7fe ffd1 	bl	8010814 <__assert_func>
 8011872:	f100 0414 	add.w	r4, r0, #20
 8011876:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 801187a:	4623      	mov	r3, r4
 801187c:	2200      	movs	r2, #0
 801187e:	4573      	cmp	r3, lr
 8011880:	d320      	bcc.n	80118c4 <__multiply+0x94>
 8011882:	f107 0814 	add.w	r8, r7, #20
 8011886:	f109 0114 	add.w	r1, r9, #20
 801188a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801188e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8011892:	9302      	str	r3, [sp, #8]
 8011894:	1beb      	subs	r3, r5, r7
 8011896:	3b15      	subs	r3, #21
 8011898:	f023 0303 	bic.w	r3, r3, #3
 801189c:	3304      	adds	r3, #4
 801189e:	3715      	adds	r7, #21
 80118a0:	42bd      	cmp	r5, r7
 80118a2:	bf38      	it	cc
 80118a4:	2304      	movcc	r3, #4
 80118a6:	9301      	str	r3, [sp, #4]
 80118a8:	9b02      	ldr	r3, [sp, #8]
 80118aa:	9103      	str	r1, [sp, #12]
 80118ac:	428b      	cmp	r3, r1
 80118ae:	d80c      	bhi.n	80118ca <__multiply+0x9a>
 80118b0:	2e00      	cmp	r6, #0
 80118b2:	dd03      	ble.n	80118bc <__multiply+0x8c>
 80118b4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d055      	beq.n	8011968 <__multiply+0x138>
 80118bc:	6106      	str	r6, [r0, #16]
 80118be:	b005      	add	sp, #20
 80118c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118c4:	f843 2b04 	str.w	r2, [r3], #4
 80118c8:	e7d9      	b.n	801187e <__multiply+0x4e>
 80118ca:	f8b1 a000 	ldrh.w	sl, [r1]
 80118ce:	f1ba 0f00 	cmp.w	sl, #0
 80118d2:	d01f      	beq.n	8011914 <__multiply+0xe4>
 80118d4:	46c4      	mov	ip, r8
 80118d6:	46a1      	mov	r9, r4
 80118d8:	2700      	movs	r7, #0
 80118da:	f85c 2b04 	ldr.w	r2, [ip], #4
 80118de:	f8d9 3000 	ldr.w	r3, [r9]
 80118e2:	fa1f fb82 	uxth.w	fp, r2
 80118e6:	b29b      	uxth	r3, r3
 80118e8:	fb0a 330b 	mla	r3, sl, fp, r3
 80118ec:	443b      	add	r3, r7
 80118ee:	f8d9 7000 	ldr.w	r7, [r9]
 80118f2:	0c12      	lsrs	r2, r2, #16
 80118f4:	0c3f      	lsrs	r7, r7, #16
 80118f6:	fb0a 7202 	mla	r2, sl, r2, r7
 80118fa:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80118fe:	b29b      	uxth	r3, r3
 8011900:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011904:	4565      	cmp	r5, ip
 8011906:	f849 3b04 	str.w	r3, [r9], #4
 801190a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801190e:	d8e4      	bhi.n	80118da <__multiply+0xaa>
 8011910:	9b01      	ldr	r3, [sp, #4]
 8011912:	50e7      	str	r7, [r4, r3]
 8011914:	9b03      	ldr	r3, [sp, #12]
 8011916:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801191a:	3104      	adds	r1, #4
 801191c:	f1b9 0f00 	cmp.w	r9, #0
 8011920:	d020      	beq.n	8011964 <__multiply+0x134>
 8011922:	6823      	ldr	r3, [r4, #0]
 8011924:	4647      	mov	r7, r8
 8011926:	46a4      	mov	ip, r4
 8011928:	f04f 0a00 	mov.w	sl, #0
 801192c:	f8b7 b000 	ldrh.w	fp, [r7]
 8011930:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8011934:	fb09 220b 	mla	r2, r9, fp, r2
 8011938:	4452      	add	r2, sl
 801193a:	b29b      	uxth	r3, r3
 801193c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011940:	f84c 3b04 	str.w	r3, [ip], #4
 8011944:	f857 3b04 	ldr.w	r3, [r7], #4
 8011948:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801194c:	f8bc 3000 	ldrh.w	r3, [ip]
 8011950:	fb09 330a 	mla	r3, r9, sl, r3
 8011954:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8011958:	42bd      	cmp	r5, r7
 801195a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801195e:	d8e5      	bhi.n	801192c <__multiply+0xfc>
 8011960:	9a01      	ldr	r2, [sp, #4]
 8011962:	50a3      	str	r3, [r4, r2]
 8011964:	3404      	adds	r4, #4
 8011966:	e79f      	b.n	80118a8 <__multiply+0x78>
 8011968:	3e01      	subs	r6, #1
 801196a:	e7a1      	b.n	80118b0 <__multiply+0x80>
 801196c:	08012997 	.word	0x08012997
 8011970:	080129a8 	.word	0x080129a8

08011974 <__pow5mult>:
 8011974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011978:	4615      	mov	r5, r2
 801197a:	f012 0203 	ands.w	r2, r2, #3
 801197e:	4607      	mov	r7, r0
 8011980:	460e      	mov	r6, r1
 8011982:	d007      	beq.n	8011994 <__pow5mult+0x20>
 8011984:	4c25      	ldr	r4, [pc, #148]	@ (8011a1c <__pow5mult+0xa8>)
 8011986:	3a01      	subs	r2, #1
 8011988:	2300      	movs	r3, #0
 801198a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801198e:	f7ff fea7 	bl	80116e0 <__multadd>
 8011992:	4606      	mov	r6, r0
 8011994:	10ad      	asrs	r5, r5, #2
 8011996:	d03d      	beq.n	8011a14 <__pow5mult+0xa0>
 8011998:	69fc      	ldr	r4, [r7, #28]
 801199a:	b97c      	cbnz	r4, 80119bc <__pow5mult+0x48>
 801199c:	2010      	movs	r0, #16
 801199e:	f7ff fd87 	bl	80114b0 <malloc>
 80119a2:	4602      	mov	r2, r0
 80119a4:	61f8      	str	r0, [r7, #28]
 80119a6:	b928      	cbnz	r0, 80119b4 <__pow5mult+0x40>
 80119a8:	4b1d      	ldr	r3, [pc, #116]	@ (8011a20 <__pow5mult+0xac>)
 80119aa:	481e      	ldr	r0, [pc, #120]	@ (8011a24 <__pow5mult+0xb0>)
 80119ac:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80119b0:	f7fe ff30 	bl	8010814 <__assert_func>
 80119b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80119b8:	6004      	str	r4, [r0, #0]
 80119ba:	60c4      	str	r4, [r0, #12]
 80119bc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80119c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80119c4:	b94c      	cbnz	r4, 80119da <__pow5mult+0x66>
 80119c6:	f240 2171 	movw	r1, #625	@ 0x271
 80119ca:	4638      	mov	r0, r7
 80119cc:	f7ff ff1a 	bl	8011804 <__i2b>
 80119d0:	2300      	movs	r3, #0
 80119d2:	f8c8 0008 	str.w	r0, [r8, #8]
 80119d6:	4604      	mov	r4, r0
 80119d8:	6003      	str	r3, [r0, #0]
 80119da:	f04f 0900 	mov.w	r9, #0
 80119de:	07eb      	lsls	r3, r5, #31
 80119e0:	d50a      	bpl.n	80119f8 <__pow5mult+0x84>
 80119e2:	4631      	mov	r1, r6
 80119e4:	4622      	mov	r2, r4
 80119e6:	4638      	mov	r0, r7
 80119e8:	f7ff ff22 	bl	8011830 <__multiply>
 80119ec:	4631      	mov	r1, r6
 80119ee:	4680      	mov	r8, r0
 80119f0:	4638      	mov	r0, r7
 80119f2:	f7ff fe53 	bl	801169c <_Bfree>
 80119f6:	4646      	mov	r6, r8
 80119f8:	106d      	asrs	r5, r5, #1
 80119fa:	d00b      	beq.n	8011a14 <__pow5mult+0xa0>
 80119fc:	6820      	ldr	r0, [r4, #0]
 80119fe:	b938      	cbnz	r0, 8011a10 <__pow5mult+0x9c>
 8011a00:	4622      	mov	r2, r4
 8011a02:	4621      	mov	r1, r4
 8011a04:	4638      	mov	r0, r7
 8011a06:	f7ff ff13 	bl	8011830 <__multiply>
 8011a0a:	6020      	str	r0, [r4, #0]
 8011a0c:	f8c0 9000 	str.w	r9, [r0]
 8011a10:	4604      	mov	r4, r0
 8011a12:	e7e4      	b.n	80119de <__pow5mult+0x6a>
 8011a14:	4630      	mov	r0, r6
 8011a16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a1a:	bf00      	nop
 8011a1c:	08012a1c 	.word	0x08012a1c
 8011a20:	08012885 	.word	0x08012885
 8011a24:	080129a8 	.word	0x080129a8

08011a28 <__lshift>:
 8011a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a2c:	460c      	mov	r4, r1
 8011a2e:	6849      	ldr	r1, [r1, #4]
 8011a30:	6923      	ldr	r3, [r4, #16]
 8011a32:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011a36:	68a3      	ldr	r3, [r4, #8]
 8011a38:	4607      	mov	r7, r0
 8011a3a:	4691      	mov	r9, r2
 8011a3c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011a40:	f108 0601 	add.w	r6, r8, #1
 8011a44:	42b3      	cmp	r3, r6
 8011a46:	db0b      	blt.n	8011a60 <__lshift+0x38>
 8011a48:	4638      	mov	r0, r7
 8011a4a:	f7ff fde7 	bl	801161c <_Balloc>
 8011a4e:	4605      	mov	r5, r0
 8011a50:	b948      	cbnz	r0, 8011a66 <__lshift+0x3e>
 8011a52:	4602      	mov	r2, r0
 8011a54:	4b28      	ldr	r3, [pc, #160]	@ (8011af8 <__lshift+0xd0>)
 8011a56:	4829      	ldr	r0, [pc, #164]	@ (8011afc <__lshift+0xd4>)
 8011a58:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011a5c:	f7fe feda 	bl	8010814 <__assert_func>
 8011a60:	3101      	adds	r1, #1
 8011a62:	005b      	lsls	r3, r3, #1
 8011a64:	e7ee      	b.n	8011a44 <__lshift+0x1c>
 8011a66:	2300      	movs	r3, #0
 8011a68:	f100 0114 	add.w	r1, r0, #20
 8011a6c:	f100 0210 	add.w	r2, r0, #16
 8011a70:	4618      	mov	r0, r3
 8011a72:	4553      	cmp	r3, sl
 8011a74:	db33      	blt.n	8011ade <__lshift+0xb6>
 8011a76:	6920      	ldr	r0, [r4, #16]
 8011a78:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011a7c:	f104 0314 	add.w	r3, r4, #20
 8011a80:	f019 091f 	ands.w	r9, r9, #31
 8011a84:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011a88:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011a8c:	d02b      	beq.n	8011ae6 <__lshift+0xbe>
 8011a8e:	f1c9 0e20 	rsb	lr, r9, #32
 8011a92:	468a      	mov	sl, r1
 8011a94:	2200      	movs	r2, #0
 8011a96:	6818      	ldr	r0, [r3, #0]
 8011a98:	fa00 f009 	lsl.w	r0, r0, r9
 8011a9c:	4310      	orrs	r0, r2
 8011a9e:	f84a 0b04 	str.w	r0, [sl], #4
 8011aa2:	f853 2b04 	ldr.w	r2, [r3], #4
 8011aa6:	459c      	cmp	ip, r3
 8011aa8:	fa22 f20e 	lsr.w	r2, r2, lr
 8011aac:	d8f3      	bhi.n	8011a96 <__lshift+0x6e>
 8011aae:	ebac 0304 	sub.w	r3, ip, r4
 8011ab2:	3b15      	subs	r3, #21
 8011ab4:	f023 0303 	bic.w	r3, r3, #3
 8011ab8:	3304      	adds	r3, #4
 8011aba:	f104 0015 	add.w	r0, r4, #21
 8011abe:	4560      	cmp	r0, ip
 8011ac0:	bf88      	it	hi
 8011ac2:	2304      	movhi	r3, #4
 8011ac4:	50ca      	str	r2, [r1, r3]
 8011ac6:	b10a      	cbz	r2, 8011acc <__lshift+0xa4>
 8011ac8:	f108 0602 	add.w	r6, r8, #2
 8011acc:	3e01      	subs	r6, #1
 8011ace:	4638      	mov	r0, r7
 8011ad0:	612e      	str	r6, [r5, #16]
 8011ad2:	4621      	mov	r1, r4
 8011ad4:	f7ff fde2 	bl	801169c <_Bfree>
 8011ad8:	4628      	mov	r0, r5
 8011ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ade:	f842 0f04 	str.w	r0, [r2, #4]!
 8011ae2:	3301      	adds	r3, #1
 8011ae4:	e7c5      	b.n	8011a72 <__lshift+0x4a>
 8011ae6:	3904      	subs	r1, #4
 8011ae8:	f853 2b04 	ldr.w	r2, [r3], #4
 8011aec:	f841 2f04 	str.w	r2, [r1, #4]!
 8011af0:	459c      	cmp	ip, r3
 8011af2:	d8f9      	bhi.n	8011ae8 <__lshift+0xc0>
 8011af4:	e7ea      	b.n	8011acc <__lshift+0xa4>
 8011af6:	bf00      	nop
 8011af8:	08012997 	.word	0x08012997
 8011afc:	080129a8 	.word	0x080129a8

08011b00 <__mcmp>:
 8011b00:	690a      	ldr	r2, [r1, #16]
 8011b02:	4603      	mov	r3, r0
 8011b04:	6900      	ldr	r0, [r0, #16]
 8011b06:	1a80      	subs	r0, r0, r2
 8011b08:	b530      	push	{r4, r5, lr}
 8011b0a:	d10e      	bne.n	8011b2a <__mcmp+0x2a>
 8011b0c:	3314      	adds	r3, #20
 8011b0e:	3114      	adds	r1, #20
 8011b10:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011b14:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011b18:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011b1c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011b20:	4295      	cmp	r5, r2
 8011b22:	d003      	beq.n	8011b2c <__mcmp+0x2c>
 8011b24:	d205      	bcs.n	8011b32 <__mcmp+0x32>
 8011b26:	f04f 30ff 	mov.w	r0, #4294967295
 8011b2a:	bd30      	pop	{r4, r5, pc}
 8011b2c:	42a3      	cmp	r3, r4
 8011b2e:	d3f3      	bcc.n	8011b18 <__mcmp+0x18>
 8011b30:	e7fb      	b.n	8011b2a <__mcmp+0x2a>
 8011b32:	2001      	movs	r0, #1
 8011b34:	e7f9      	b.n	8011b2a <__mcmp+0x2a>
	...

08011b38 <__mdiff>:
 8011b38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b3c:	4689      	mov	r9, r1
 8011b3e:	4606      	mov	r6, r0
 8011b40:	4611      	mov	r1, r2
 8011b42:	4648      	mov	r0, r9
 8011b44:	4614      	mov	r4, r2
 8011b46:	f7ff ffdb 	bl	8011b00 <__mcmp>
 8011b4a:	1e05      	subs	r5, r0, #0
 8011b4c:	d112      	bne.n	8011b74 <__mdiff+0x3c>
 8011b4e:	4629      	mov	r1, r5
 8011b50:	4630      	mov	r0, r6
 8011b52:	f7ff fd63 	bl	801161c <_Balloc>
 8011b56:	4602      	mov	r2, r0
 8011b58:	b928      	cbnz	r0, 8011b66 <__mdiff+0x2e>
 8011b5a:	4b3f      	ldr	r3, [pc, #252]	@ (8011c58 <__mdiff+0x120>)
 8011b5c:	f240 2137 	movw	r1, #567	@ 0x237
 8011b60:	483e      	ldr	r0, [pc, #248]	@ (8011c5c <__mdiff+0x124>)
 8011b62:	f7fe fe57 	bl	8010814 <__assert_func>
 8011b66:	2301      	movs	r3, #1
 8011b68:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011b6c:	4610      	mov	r0, r2
 8011b6e:	b003      	add	sp, #12
 8011b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b74:	bfbc      	itt	lt
 8011b76:	464b      	movlt	r3, r9
 8011b78:	46a1      	movlt	r9, r4
 8011b7a:	4630      	mov	r0, r6
 8011b7c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011b80:	bfba      	itte	lt
 8011b82:	461c      	movlt	r4, r3
 8011b84:	2501      	movlt	r5, #1
 8011b86:	2500      	movge	r5, #0
 8011b88:	f7ff fd48 	bl	801161c <_Balloc>
 8011b8c:	4602      	mov	r2, r0
 8011b8e:	b918      	cbnz	r0, 8011b98 <__mdiff+0x60>
 8011b90:	4b31      	ldr	r3, [pc, #196]	@ (8011c58 <__mdiff+0x120>)
 8011b92:	f240 2145 	movw	r1, #581	@ 0x245
 8011b96:	e7e3      	b.n	8011b60 <__mdiff+0x28>
 8011b98:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011b9c:	6926      	ldr	r6, [r4, #16]
 8011b9e:	60c5      	str	r5, [r0, #12]
 8011ba0:	f109 0310 	add.w	r3, r9, #16
 8011ba4:	f109 0514 	add.w	r5, r9, #20
 8011ba8:	f104 0e14 	add.w	lr, r4, #20
 8011bac:	f100 0b14 	add.w	fp, r0, #20
 8011bb0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011bb4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011bb8:	9301      	str	r3, [sp, #4]
 8011bba:	46d9      	mov	r9, fp
 8011bbc:	f04f 0c00 	mov.w	ip, #0
 8011bc0:	9b01      	ldr	r3, [sp, #4]
 8011bc2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8011bc6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011bca:	9301      	str	r3, [sp, #4]
 8011bcc:	fa1f f38a 	uxth.w	r3, sl
 8011bd0:	4619      	mov	r1, r3
 8011bd2:	b283      	uxth	r3, r0
 8011bd4:	1acb      	subs	r3, r1, r3
 8011bd6:	0c00      	lsrs	r0, r0, #16
 8011bd8:	4463      	add	r3, ip
 8011bda:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8011bde:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8011be2:	b29b      	uxth	r3, r3
 8011be4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011be8:	4576      	cmp	r6, lr
 8011bea:	f849 3b04 	str.w	r3, [r9], #4
 8011bee:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011bf2:	d8e5      	bhi.n	8011bc0 <__mdiff+0x88>
 8011bf4:	1b33      	subs	r3, r6, r4
 8011bf6:	3b15      	subs	r3, #21
 8011bf8:	f023 0303 	bic.w	r3, r3, #3
 8011bfc:	3415      	adds	r4, #21
 8011bfe:	3304      	adds	r3, #4
 8011c00:	42a6      	cmp	r6, r4
 8011c02:	bf38      	it	cc
 8011c04:	2304      	movcc	r3, #4
 8011c06:	441d      	add	r5, r3
 8011c08:	445b      	add	r3, fp
 8011c0a:	461e      	mov	r6, r3
 8011c0c:	462c      	mov	r4, r5
 8011c0e:	4544      	cmp	r4, r8
 8011c10:	d30e      	bcc.n	8011c30 <__mdiff+0xf8>
 8011c12:	f108 0103 	add.w	r1, r8, #3
 8011c16:	1b49      	subs	r1, r1, r5
 8011c18:	f021 0103 	bic.w	r1, r1, #3
 8011c1c:	3d03      	subs	r5, #3
 8011c1e:	45a8      	cmp	r8, r5
 8011c20:	bf38      	it	cc
 8011c22:	2100      	movcc	r1, #0
 8011c24:	440b      	add	r3, r1
 8011c26:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011c2a:	b191      	cbz	r1, 8011c52 <__mdiff+0x11a>
 8011c2c:	6117      	str	r7, [r2, #16]
 8011c2e:	e79d      	b.n	8011b6c <__mdiff+0x34>
 8011c30:	f854 1b04 	ldr.w	r1, [r4], #4
 8011c34:	46e6      	mov	lr, ip
 8011c36:	0c08      	lsrs	r0, r1, #16
 8011c38:	fa1c fc81 	uxtah	ip, ip, r1
 8011c3c:	4471      	add	r1, lr
 8011c3e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8011c42:	b289      	uxth	r1, r1
 8011c44:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011c48:	f846 1b04 	str.w	r1, [r6], #4
 8011c4c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011c50:	e7dd      	b.n	8011c0e <__mdiff+0xd6>
 8011c52:	3f01      	subs	r7, #1
 8011c54:	e7e7      	b.n	8011c26 <__mdiff+0xee>
 8011c56:	bf00      	nop
 8011c58:	08012997 	.word	0x08012997
 8011c5c:	080129a8 	.word	0x080129a8

08011c60 <__d2b>:
 8011c60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011c64:	460f      	mov	r7, r1
 8011c66:	2101      	movs	r1, #1
 8011c68:	ec59 8b10 	vmov	r8, r9, d0
 8011c6c:	4616      	mov	r6, r2
 8011c6e:	f7ff fcd5 	bl	801161c <_Balloc>
 8011c72:	4604      	mov	r4, r0
 8011c74:	b930      	cbnz	r0, 8011c84 <__d2b+0x24>
 8011c76:	4602      	mov	r2, r0
 8011c78:	4b23      	ldr	r3, [pc, #140]	@ (8011d08 <__d2b+0xa8>)
 8011c7a:	4824      	ldr	r0, [pc, #144]	@ (8011d0c <__d2b+0xac>)
 8011c7c:	f240 310f 	movw	r1, #783	@ 0x30f
 8011c80:	f7fe fdc8 	bl	8010814 <__assert_func>
 8011c84:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011c88:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011c8c:	b10d      	cbz	r5, 8011c92 <__d2b+0x32>
 8011c8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011c92:	9301      	str	r3, [sp, #4]
 8011c94:	f1b8 0300 	subs.w	r3, r8, #0
 8011c98:	d023      	beq.n	8011ce2 <__d2b+0x82>
 8011c9a:	4668      	mov	r0, sp
 8011c9c:	9300      	str	r3, [sp, #0]
 8011c9e:	f7ff fd84 	bl	80117aa <__lo0bits>
 8011ca2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011ca6:	b1d0      	cbz	r0, 8011cde <__d2b+0x7e>
 8011ca8:	f1c0 0320 	rsb	r3, r0, #32
 8011cac:	fa02 f303 	lsl.w	r3, r2, r3
 8011cb0:	430b      	orrs	r3, r1
 8011cb2:	40c2      	lsrs	r2, r0
 8011cb4:	6163      	str	r3, [r4, #20]
 8011cb6:	9201      	str	r2, [sp, #4]
 8011cb8:	9b01      	ldr	r3, [sp, #4]
 8011cba:	61a3      	str	r3, [r4, #24]
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	bf0c      	ite	eq
 8011cc0:	2201      	moveq	r2, #1
 8011cc2:	2202      	movne	r2, #2
 8011cc4:	6122      	str	r2, [r4, #16]
 8011cc6:	b1a5      	cbz	r5, 8011cf2 <__d2b+0x92>
 8011cc8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011ccc:	4405      	add	r5, r0
 8011cce:	603d      	str	r5, [r7, #0]
 8011cd0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011cd4:	6030      	str	r0, [r6, #0]
 8011cd6:	4620      	mov	r0, r4
 8011cd8:	b003      	add	sp, #12
 8011cda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011cde:	6161      	str	r1, [r4, #20]
 8011ce0:	e7ea      	b.n	8011cb8 <__d2b+0x58>
 8011ce2:	a801      	add	r0, sp, #4
 8011ce4:	f7ff fd61 	bl	80117aa <__lo0bits>
 8011ce8:	9b01      	ldr	r3, [sp, #4]
 8011cea:	6163      	str	r3, [r4, #20]
 8011cec:	3020      	adds	r0, #32
 8011cee:	2201      	movs	r2, #1
 8011cf0:	e7e8      	b.n	8011cc4 <__d2b+0x64>
 8011cf2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011cf6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011cfa:	6038      	str	r0, [r7, #0]
 8011cfc:	6918      	ldr	r0, [r3, #16]
 8011cfe:	f7ff fd35 	bl	801176c <__hi0bits>
 8011d02:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011d06:	e7e5      	b.n	8011cd4 <__d2b+0x74>
 8011d08:	08012997 	.word	0x08012997
 8011d0c:	080129a8 	.word	0x080129a8

08011d10 <__ssputs_r>:
 8011d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d14:	688e      	ldr	r6, [r1, #8]
 8011d16:	461f      	mov	r7, r3
 8011d18:	42be      	cmp	r6, r7
 8011d1a:	680b      	ldr	r3, [r1, #0]
 8011d1c:	4682      	mov	sl, r0
 8011d1e:	460c      	mov	r4, r1
 8011d20:	4690      	mov	r8, r2
 8011d22:	d82d      	bhi.n	8011d80 <__ssputs_r+0x70>
 8011d24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011d28:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011d2c:	d026      	beq.n	8011d7c <__ssputs_r+0x6c>
 8011d2e:	6965      	ldr	r5, [r4, #20]
 8011d30:	6909      	ldr	r1, [r1, #16]
 8011d32:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011d36:	eba3 0901 	sub.w	r9, r3, r1
 8011d3a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011d3e:	1c7b      	adds	r3, r7, #1
 8011d40:	444b      	add	r3, r9
 8011d42:	106d      	asrs	r5, r5, #1
 8011d44:	429d      	cmp	r5, r3
 8011d46:	bf38      	it	cc
 8011d48:	461d      	movcc	r5, r3
 8011d4a:	0553      	lsls	r3, r2, #21
 8011d4c:	d527      	bpl.n	8011d9e <__ssputs_r+0x8e>
 8011d4e:	4629      	mov	r1, r5
 8011d50:	f7ff fbd8 	bl	8011504 <_malloc_r>
 8011d54:	4606      	mov	r6, r0
 8011d56:	b360      	cbz	r0, 8011db2 <__ssputs_r+0xa2>
 8011d58:	6921      	ldr	r1, [r4, #16]
 8011d5a:	464a      	mov	r2, r9
 8011d5c:	f7fe fd4b 	bl	80107f6 <memcpy>
 8011d60:	89a3      	ldrh	r3, [r4, #12]
 8011d62:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011d66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011d6a:	81a3      	strh	r3, [r4, #12]
 8011d6c:	6126      	str	r6, [r4, #16]
 8011d6e:	6165      	str	r5, [r4, #20]
 8011d70:	444e      	add	r6, r9
 8011d72:	eba5 0509 	sub.w	r5, r5, r9
 8011d76:	6026      	str	r6, [r4, #0]
 8011d78:	60a5      	str	r5, [r4, #8]
 8011d7a:	463e      	mov	r6, r7
 8011d7c:	42be      	cmp	r6, r7
 8011d7e:	d900      	bls.n	8011d82 <__ssputs_r+0x72>
 8011d80:	463e      	mov	r6, r7
 8011d82:	6820      	ldr	r0, [r4, #0]
 8011d84:	4632      	mov	r2, r6
 8011d86:	4641      	mov	r1, r8
 8011d88:	f000 fb7c 	bl	8012484 <memmove>
 8011d8c:	68a3      	ldr	r3, [r4, #8]
 8011d8e:	1b9b      	subs	r3, r3, r6
 8011d90:	60a3      	str	r3, [r4, #8]
 8011d92:	6823      	ldr	r3, [r4, #0]
 8011d94:	4433      	add	r3, r6
 8011d96:	6023      	str	r3, [r4, #0]
 8011d98:	2000      	movs	r0, #0
 8011d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d9e:	462a      	mov	r2, r5
 8011da0:	f000 fbe9 	bl	8012576 <_realloc_r>
 8011da4:	4606      	mov	r6, r0
 8011da6:	2800      	cmp	r0, #0
 8011da8:	d1e0      	bne.n	8011d6c <__ssputs_r+0x5c>
 8011daa:	6921      	ldr	r1, [r4, #16]
 8011dac:	4650      	mov	r0, sl
 8011dae:	f7ff fb35 	bl	801141c <_free_r>
 8011db2:	230c      	movs	r3, #12
 8011db4:	f8ca 3000 	str.w	r3, [sl]
 8011db8:	89a3      	ldrh	r3, [r4, #12]
 8011dba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011dbe:	81a3      	strh	r3, [r4, #12]
 8011dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8011dc4:	e7e9      	b.n	8011d9a <__ssputs_r+0x8a>
	...

08011dc8 <_svfiprintf_r>:
 8011dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011dcc:	4698      	mov	r8, r3
 8011dce:	898b      	ldrh	r3, [r1, #12]
 8011dd0:	061b      	lsls	r3, r3, #24
 8011dd2:	b09d      	sub	sp, #116	@ 0x74
 8011dd4:	4607      	mov	r7, r0
 8011dd6:	460d      	mov	r5, r1
 8011dd8:	4614      	mov	r4, r2
 8011dda:	d510      	bpl.n	8011dfe <_svfiprintf_r+0x36>
 8011ddc:	690b      	ldr	r3, [r1, #16]
 8011dde:	b973      	cbnz	r3, 8011dfe <_svfiprintf_r+0x36>
 8011de0:	2140      	movs	r1, #64	@ 0x40
 8011de2:	f7ff fb8f 	bl	8011504 <_malloc_r>
 8011de6:	6028      	str	r0, [r5, #0]
 8011de8:	6128      	str	r0, [r5, #16]
 8011dea:	b930      	cbnz	r0, 8011dfa <_svfiprintf_r+0x32>
 8011dec:	230c      	movs	r3, #12
 8011dee:	603b      	str	r3, [r7, #0]
 8011df0:	f04f 30ff 	mov.w	r0, #4294967295
 8011df4:	b01d      	add	sp, #116	@ 0x74
 8011df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011dfa:	2340      	movs	r3, #64	@ 0x40
 8011dfc:	616b      	str	r3, [r5, #20]
 8011dfe:	2300      	movs	r3, #0
 8011e00:	9309      	str	r3, [sp, #36]	@ 0x24
 8011e02:	2320      	movs	r3, #32
 8011e04:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011e08:	f8cd 800c 	str.w	r8, [sp, #12]
 8011e0c:	2330      	movs	r3, #48	@ 0x30
 8011e0e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011fac <_svfiprintf_r+0x1e4>
 8011e12:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011e16:	f04f 0901 	mov.w	r9, #1
 8011e1a:	4623      	mov	r3, r4
 8011e1c:	469a      	mov	sl, r3
 8011e1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011e22:	b10a      	cbz	r2, 8011e28 <_svfiprintf_r+0x60>
 8011e24:	2a25      	cmp	r2, #37	@ 0x25
 8011e26:	d1f9      	bne.n	8011e1c <_svfiprintf_r+0x54>
 8011e28:	ebba 0b04 	subs.w	fp, sl, r4
 8011e2c:	d00b      	beq.n	8011e46 <_svfiprintf_r+0x7e>
 8011e2e:	465b      	mov	r3, fp
 8011e30:	4622      	mov	r2, r4
 8011e32:	4629      	mov	r1, r5
 8011e34:	4638      	mov	r0, r7
 8011e36:	f7ff ff6b 	bl	8011d10 <__ssputs_r>
 8011e3a:	3001      	adds	r0, #1
 8011e3c:	f000 80a7 	beq.w	8011f8e <_svfiprintf_r+0x1c6>
 8011e40:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011e42:	445a      	add	r2, fp
 8011e44:	9209      	str	r2, [sp, #36]	@ 0x24
 8011e46:	f89a 3000 	ldrb.w	r3, [sl]
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	f000 809f 	beq.w	8011f8e <_svfiprintf_r+0x1c6>
 8011e50:	2300      	movs	r3, #0
 8011e52:	f04f 32ff 	mov.w	r2, #4294967295
 8011e56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011e5a:	f10a 0a01 	add.w	sl, sl, #1
 8011e5e:	9304      	str	r3, [sp, #16]
 8011e60:	9307      	str	r3, [sp, #28]
 8011e62:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011e66:	931a      	str	r3, [sp, #104]	@ 0x68
 8011e68:	4654      	mov	r4, sl
 8011e6a:	2205      	movs	r2, #5
 8011e6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e70:	484e      	ldr	r0, [pc, #312]	@ (8011fac <_svfiprintf_r+0x1e4>)
 8011e72:	f7ee fa45 	bl	8000300 <memchr>
 8011e76:	9a04      	ldr	r2, [sp, #16]
 8011e78:	b9d8      	cbnz	r0, 8011eb2 <_svfiprintf_r+0xea>
 8011e7a:	06d0      	lsls	r0, r2, #27
 8011e7c:	bf44      	itt	mi
 8011e7e:	2320      	movmi	r3, #32
 8011e80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011e84:	0711      	lsls	r1, r2, #28
 8011e86:	bf44      	itt	mi
 8011e88:	232b      	movmi	r3, #43	@ 0x2b
 8011e8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011e8e:	f89a 3000 	ldrb.w	r3, [sl]
 8011e92:	2b2a      	cmp	r3, #42	@ 0x2a
 8011e94:	d015      	beq.n	8011ec2 <_svfiprintf_r+0xfa>
 8011e96:	9a07      	ldr	r2, [sp, #28]
 8011e98:	4654      	mov	r4, sl
 8011e9a:	2000      	movs	r0, #0
 8011e9c:	f04f 0c0a 	mov.w	ip, #10
 8011ea0:	4621      	mov	r1, r4
 8011ea2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011ea6:	3b30      	subs	r3, #48	@ 0x30
 8011ea8:	2b09      	cmp	r3, #9
 8011eaa:	d94b      	bls.n	8011f44 <_svfiprintf_r+0x17c>
 8011eac:	b1b0      	cbz	r0, 8011edc <_svfiprintf_r+0x114>
 8011eae:	9207      	str	r2, [sp, #28]
 8011eb0:	e014      	b.n	8011edc <_svfiprintf_r+0x114>
 8011eb2:	eba0 0308 	sub.w	r3, r0, r8
 8011eb6:	fa09 f303 	lsl.w	r3, r9, r3
 8011eba:	4313      	orrs	r3, r2
 8011ebc:	9304      	str	r3, [sp, #16]
 8011ebe:	46a2      	mov	sl, r4
 8011ec0:	e7d2      	b.n	8011e68 <_svfiprintf_r+0xa0>
 8011ec2:	9b03      	ldr	r3, [sp, #12]
 8011ec4:	1d19      	adds	r1, r3, #4
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	9103      	str	r1, [sp, #12]
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	bfbb      	ittet	lt
 8011ece:	425b      	neglt	r3, r3
 8011ed0:	f042 0202 	orrlt.w	r2, r2, #2
 8011ed4:	9307      	strge	r3, [sp, #28]
 8011ed6:	9307      	strlt	r3, [sp, #28]
 8011ed8:	bfb8      	it	lt
 8011eda:	9204      	strlt	r2, [sp, #16]
 8011edc:	7823      	ldrb	r3, [r4, #0]
 8011ede:	2b2e      	cmp	r3, #46	@ 0x2e
 8011ee0:	d10a      	bne.n	8011ef8 <_svfiprintf_r+0x130>
 8011ee2:	7863      	ldrb	r3, [r4, #1]
 8011ee4:	2b2a      	cmp	r3, #42	@ 0x2a
 8011ee6:	d132      	bne.n	8011f4e <_svfiprintf_r+0x186>
 8011ee8:	9b03      	ldr	r3, [sp, #12]
 8011eea:	1d1a      	adds	r2, r3, #4
 8011eec:	681b      	ldr	r3, [r3, #0]
 8011eee:	9203      	str	r2, [sp, #12]
 8011ef0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011ef4:	3402      	adds	r4, #2
 8011ef6:	9305      	str	r3, [sp, #20]
 8011ef8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011fbc <_svfiprintf_r+0x1f4>
 8011efc:	7821      	ldrb	r1, [r4, #0]
 8011efe:	2203      	movs	r2, #3
 8011f00:	4650      	mov	r0, sl
 8011f02:	f7ee f9fd 	bl	8000300 <memchr>
 8011f06:	b138      	cbz	r0, 8011f18 <_svfiprintf_r+0x150>
 8011f08:	9b04      	ldr	r3, [sp, #16]
 8011f0a:	eba0 000a 	sub.w	r0, r0, sl
 8011f0e:	2240      	movs	r2, #64	@ 0x40
 8011f10:	4082      	lsls	r2, r0
 8011f12:	4313      	orrs	r3, r2
 8011f14:	3401      	adds	r4, #1
 8011f16:	9304      	str	r3, [sp, #16]
 8011f18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f1c:	4824      	ldr	r0, [pc, #144]	@ (8011fb0 <_svfiprintf_r+0x1e8>)
 8011f1e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011f22:	2206      	movs	r2, #6
 8011f24:	f7ee f9ec 	bl	8000300 <memchr>
 8011f28:	2800      	cmp	r0, #0
 8011f2a:	d036      	beq.n	8011f9a <_svfiprintf_r+0x1d2>
 8011f2c:	4b21      	ldr	r3, [pc, #132]	@ (8011fb4 <_svfiprintf_r+0x1ec>)
 8011f2e:	bb1b      	cbnz	r3, 8011f78 <_svfiprintf_r+0x1b0>
 8011f30:	9b03      	ldr	r3, [sp, #12]
 8011f32:	3307      	adds	r3, #7
 8011f34:	f023 0307 	bic.w	r3, r3, #7
 8011f38:	3308      	adds	r3, #8
 8011f3a:	9303      	str	r3, [sp, #12]
 8011f3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011f3e:	4433      	add	r3, r6
 8011f40:	9309      	str	r3, [sp, #36]	@ 0x24
 8011f42:	e76a      	b.n	8011e1a <_svfiprintf_r+0x52>
 8011f44:	fb0c 3202 	mla	r2, ip, r2, r3
 8011f48:	460c      	mov	r4, r1
 8011f4a:	2001      	movs	r0, #1
 8011f4c:	e7a8      	b.n	8011ea0 <_svfiprintf_r+0xd8>
 8011f4e:	2300      	movs	r3, #0
 8011f50:	3401      	adds	r4, #1
 8011f52:	9305      	str	r3, [sp, #20]
 8011f54:	4619      	mov	r1, r3
 8011f56:	f04f 0c0a 	mov.w	ip, #10
 8011f5a:	4620      	mov	r0, r4
 8011f5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011f60:	3a30      	subs	r2, #48	@ 0x30
 8011f62:	2a09      	cmp	r2, #9
 8011f64:	d903      	bls.n	8011f6e <_svfiprintf_r+0x1a6>
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d0c6      	beq.n	8011ef8 <_svfiprintf_r+0x130>
 8011f6a:	9105      	str	r1, [sp, #20]
 8011f6c:	e7c4      	b.n	8011ef8 <_svfiprintf_r+0x130>
 8011f6e:	fb0c 2101 	mla	r1, ip, r1, r2
 8011f72:	4604      	mov	r4, r0
 8011f74:	2301      	movs	r3, #1
 8011f76:	e7f0      	b.n	8011f5a <_svfiprintf_r+0x192>
 8011f78:	ab03      	add	r3, sp, #12
 8011f7a:	9300      	str	r3, [sp, #0]
 8011f7c:	462a      	mov	r2, r5
 8011f7e:	4b0e      	ldr	r3, [pc, #56]	@ (8011fb8 <_svfiprintf_r+0x1f0>)
 8011f80:	a904      	add	r1, sp, #16
 8011f82:	4638      	mov	r0, r7
 8011f84:	f7fd fdd8 	bl	800fb38 <_printf_float>
 8011f88:	1c42      	adds	r2, r0, #1
 8011f8a:	4606      	mov	r6, r0
 8011f8c:	d1d6      	bne.n	8011f3c <_svfiprintf_r+0x174>
 8011f8e:	89ab      	ldrh	r3, [r5, #12]
 8011f90:	065b      	lsls	r3, r3, #25
 8011f92:	f53f af2d 	bmi.w	8011df0 <_svfiprintf_r+0x28>
 8011f96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011f98:	e72c      	b.n	8011df4 <_svfiprintf_r+0x2c>
 8011f9a:	ab03      	add	r3, sp, #12
 8011f9c:	9300      	str	r3, [sp, #0]
 8011f9e:	462a      	mov	r2, r5
 8011fa0:	4b05      	ldr	r3, [pc, #20]	@ (8011fb8 <_svfiprintf_r+0x1f0>)
 8011fa2:	a904      	add	r1, sp, #16
 8011fa4:	4638      	mov	r0, r7
 8011fa6:	f7fe f84f 	bl	8010048 <_printf_i>
 8011faa:	e7ed      	b.n	8011f88 <_svfiprintf_r+0x1c0>
 8011fac:	08012a01 	.word	0x08012a01
 8011fb0:	08012a0b 	.word	0x08012a0b
 8011fb4:	0800fb39 	.word	0x0800fb39
 8011fb8:	08011d11 	.word	0x08011d11
 8011fbc:	08012a07 	.word	0x08012a07

08011fc0 <__sfputc_r>:
 8011fc0:	6893      	ldr	r3, [r2, #8]
 8011fc2:	3b01      	subs	r3, #1
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	b410      	push	{r4}
 8011fc8:	6093      	str	r3, [r2, #8]
 8011fca:	da08      	bge.n	8011fde <__sfputc_r+0x1e>
 8011fcc:	6994      	ldr	r4, [r2, #24]
 8011fce:	42a3      	cmp	r3, r4
 8011fd0:	db01      	blt.n	8011fd6 <__sfputc_r+0x16>
 8011fd2:	290a      	cmp	r1, #10
 8011fd4:	d103      	bne.n	8011fde <__sfputc_r+0x1e>
 8011fd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011fda:	f7fe ba8c 	b.w	80104f6 <__swbuf_r>
 8011fde:	6813      	ldr	r3, [r2, #0]
 8011fe0:	1c58      	adds	r0, r3, #1
 8011fe2:	6010      	str	r0, [r2, #0]
 8011fe4:	7019      	strb	r1, [r3, #0]
 8011fe6:	4608      	mov	r0, r1
 8011fe8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011fec:	4770      	bx	lr

08011fee <__sfputs_r>:
 8011fee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ff0:	4606      	mov	r6, r0
 8011ff2:	460f      	mov	r7, r1
 8011ff4:	4614      	mov	r4, r2
 8011ff6:	18d5      	adds	r5, r2, r3
 8011ff8:	42ac      	cmp	r4, r5
 8011ffa:	d101      	bne.n	8012000 <__sfputs_r+0x12>
 8011ffc:	2000      	movs	r0, #0
 8011ffe:	e007      	b.n	8012010 <__sfputs_r+0x22>
 8012000:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012004:	463a      	mov	r2, r7
 8012006:	4630      	mov	r0, r6
 8012008:	f7ff ffda 	bl	8011fc0 <__sfputc_r>
 801200c:	1c43      	adds	r3, r0, #1
 801200e:	d1f3      	bne.n	8011ff8 <__sfputs_r+0xa>
 8012010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012014 <_vfiprintf_r>:
 8012014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012018:	460d      	mov	r5, r1
 801201a:	b09d      	sub	sp, #116	@ 0x74
 801201c:	4614      	mov	r4, r2
 801201e:	4698      	mov	r8, r3
 8012020:	4606      	mov	r6, r0
 8012022:	b118      	cbz	r0, 801202c <_vfiprintf_r+0x18>
 8012024:	6a03      	ldr	r3, [r0, #32]
 8012026:	b90b      	cbnz	r3, 801202c <_vfiprintf_r+0x18>
 8012028:	f7fe f9b8 	bl	801039c <__sinit>
 801202c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801202e:	07d9      	lsls	r1, r3, #31
 8012030:	d405      	bmi.n	801203e <_vfiprintf_r+0x2a>
 8012032:	89ab      	ldrh	r3, [r5, #12]
 8012034:	059a      	lsls	r2, r3, #22
 8012036:	d402      	bmi.n	801203e <_vfiprintf_r+0x2a>
 8012038:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801203a:	f7fe fbda 	bl	80107f2 <__retarget_lock_acquire_recursive>
 801203e:	89ab      	ldrh	r3, [r5, #12]
 8012040:	071b      	lsls	r3, r3, #28
 8012042:	d501      	bpl.n	8012048 <_vfiprintf_r+0x34>
 8012044:	692b      	ldr	r3, [r5, #16]
 8012046:	b99b      	cbnz	r3, 8012070 <_vfiprintf_r+0x5c>
 8012048:	4629      	mov	r1, r5
 801204a:	4630      	mov	r0, r6
 801204c:	f7fe fa92 	bl	8010574 <__swsetup_r>
 8012050:	b170      	cbz	r0, 8012070 <_vfiprintf_r+0x5c>
 8012052:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012054:	07dc      	lsls	r4, r3, #31
 8012056:	d504      	bpl.n	8012062 <_vfiprintf_r+0x4e>
 8012058:	f04f 30ff 	mov.w	r0, #4294967295
 801205c:	b01d      	add	sp, #116	@ 0x74
 801205e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012062:	89ab      	ldrh	r3, [r5, #12]
 8012064:	0598      	lsls	r0, r3, #22
 8012066:	d4f7      	bmi.n	8012058 <_vfiprintf_r+0x44>
 8012068:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801206a:	f7fe fbc3 	bl	80107f4 <__retarget_lock_release_recursive>
 801206e:	e7f3      	b.n	8012058 <_vfiprintf_r+0x44>
 8012070:	2300      	movs	r3, #0
 8012072:	9309      	str	r3, [sp, #36]	@ 0x24
 8012074:	2320      	movs	r3, #32
 8012076:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801207a:	f8cd 800c 	str.w	r8, [sp, #12]
 801207e:	2330      	movs	r3, #48	@ 0x30
 8012080:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012230 <_vfiprintf_r+0x21c>
 8012084:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012088:	f04f 0901 	mov.w	r9, #1
 801208c:	4623      	mov	r3, r4
 801208e:	469a      	mov	sl, r3
 8012090:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012094:	b10a      	cbz	r2, 801209a <_vfiprintf_r+0x86>
 8012096:	2a25      	cmp	r2, #37	@ 0x25
 8012098:	d1f9      	bne.n	801208e <_vfiprintf_r+0x7a>
 801209a:	ebba 0b04 	subs.w	fp, sl, r4
 801209e:	d00b      	beq.n	80120b8 <_vfiprintf_r+0xa4>
 80120a0:	465b      	mov	r3, fp
 80120a2:	4622      	mov	r2, r4
 80120a4:	4629      	mov	r1, r5
 80120a6:	4630      	mov	r0, r6
 80120a8:	f7ff ffa1 	bl	8011fee <__sfputs_r>
 80120ac:	3001      	adds	r0, #1
 80120ae:	f000 80a7 	beq.w	8012200 <_vfiprintf_r+0x1ec>
 80120b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80120b4:	445a      	add	r2, fp
 80120b6:	9209      	str	r2, [sp, #36]	@ 0x24
 80120b8:	f89a 3000 	ldrb.w	r3, [sl]
 80120bc:	2b00      	cmp	r3, #0
 80120be:	f000 809f 	beq.w	8012200 <_vfiprintf_r+0x1ec>
 80120c2:	2300      	movs	r3, #0
 80120c4:	f04f 32ff 	mov.w	r2, #4294967295
 80120c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80120cc:	f10a 0a01 	add.w	sl, sl, #1
 80120d0:	9304      	str	r3, [sp, #16]
 80120d2:	9307      	str	r3, [sp, #28]
 80120d4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80120d8:	931a      	str	r3, [sp, #104]	@ 0x68
 80120da:	4654      	mov	r4, sl
 80120dc:	2205      	movs	r2, #5
 80120de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80120e2:	4853      	ldr	r0, [pc, #332]	@ (8012230 <_vfiprintf_r+0x21c>)
 80120e4:	f7ee f90c 	bl	8000300 <memchr>
 80120e8:	9a04      	ldr	r2, [sp, #16]
 80120ea:	b9d8      	cbnz	r0, 8012124 <_vfiprintf_r+0x110>
 80120ec:	06d1      	lsls	r1, r2, #27
 80120ee:	bf44      	itt	mi
 80120f0:	2320      	movmi	r3, #32
 80120f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80120f6:	0713      	lsls	r3, r2, #28
 80120f8:	bf44      	itt	mi
 80120fa:	232b      	movmi	r3, #43	@ 0x2b
 80120fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012100:	f89a 3000 	ldrb.w	r3, [sl]
 8012104:	2b2a      	cmp	r3, #42	@ 0x2a
 8012106:	d015      	beq.n	8012134 <_vfiprintf_r+0x120>
 8012108:	9a07      	ldr	r2, [sp, #28]
 801210a:	4654      	mov	r4, sl
 801210c:	2000      	movs	r0, #0
 801210e:	f04f 0c0a 	mov.w	ip, #10
 8012112:	4621      	mov	r1, r4
 8012114:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012118:	3b30      	subs	r3, #48	@ 0x30
 801211a:	2b09      	cmp	r3, #9
 801211c:	d94b      	bls.n	80121b6 <_vfiprintf_r+0x1a2>
 801211e:	b1b0      	cbz	r0, 801214e <_vfiprintf_r+0x13a>
 8012120:	9207      	str	r2, [sp, #28]
 8012122:	e014      	b.n	801214e <_vfiprintf_r+0x13a>
 8012124:	eba0 0308 	sub.w	r3, r0, r8
 8012128:	fa09 f303 	lsl.w	r3, r9, r3
 801212c:	4313      	orrs	r3, r2
 801212e:	9304      	str	r3, [sp, #16]
 8012130:	46a2      	mov	sl, r4
 8012132:	e7d2      	b.n	80120da <_vfiprintf_r+0xc6>
 8012134:	9b03      	ldr	r3, [sp, #12]
 8012136:	1d19      	adds	r1, r3, #4
 8012138:	681b      	ldr	r3, [r3, #0]
 801213a:	9103      	str	r1, [sp, #12]
 801213c:	2b00      	cmp	r3, #0
 801213e:	bfbb      	ittet	lt
 8012140:	425b      	neglt	r3, r3
 8012142:	f042 0202 	orrlt.w	r2, r2, #2
 8012146:	9307      	strge	r3, [sp, #28]
 8012148:	9307      	strlt	r3, [sp, #28]
 801214a:	bfb8      	it	lt
 801214c:	9204      	strlt	r2, [sp, #16]
 801214e:	7823      	ldrb	r3, [r4, #0]
 8012150:	2b2e      	cmp	r3, #46	@ 0x2e
 8012152:	d10a      	bne.n	801216a <_vfiprintf_r+0x156>
 8012154:	7863      	ldrb	r3, [r4, #1]
 8012156:	2b2a      	cmp	r3, #42	@ 0x2a
 8012158:	d132      	bne.n	80121c0 <_vfiprintf_r+0x1ac>
 801215a:	9b03      	ldr	r3, [sp, #12]
 801215c:	1d1a      	adds	r2, r3, #4
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	9203      	str	r2, [sp, #12]
 8012162:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012166:	3402      	adds	r4, #2
 8012168:	9305      	str	r3, [sp, #20]
 801216a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012240 <_vfiprintf_r+0x22c>
 801216e:	7821      	ldrb	r1, [r4, #0]
 8012170:	2203      	movs	r2, #3
 8012172:	4650      	mov	r0, sl
 8012174:	f7ee f8c4 	bl	8000300 <memchr>
 8012178:	b138      	cbz	r0, 801218a <_vfiprintf_r+0x176>
 801217a:	9b04      	ldr	r3, [sp, #16]
 801217c:	eba0 000a 	sub.w	r0, r0, sl
 8012180:	2240      	movs	r2, #64	@ 0x40
 8012182:	4082      	lsls	r2, r0
 8012184:	4313      	orrs	r3, r2
 8012186:	3401      	adds	r4, #1
 8012188:	9304      	str	r3, [sp, #16]
 801218a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801218e:	4829      	ldr	r0, [pc, #164]	@ (8012234 <_vfiprintf_r+0x220>)
 8012190:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012194:	2206      	movs	r2, #6
 8012196:	f7ee f8b3 	bl	8000300 <memchr>
 801219a:	2800      	cmp	r0, #0
 801219c:	d03f      	beq.n	801221e <_vfiprintf_r+0x20a>
 801219e:	4b26      	ldr	r3, [pc, #152]	@ (8012238 <_vfiprintf_r+0x224>)
 80121a0:	bb1b      	cbnz	r3, 80121ea <_vfiprintf_r+0x1d6>
 80121a2:	9b03      	ldr	r3, [sp, #12]
 80121a4:	3307      	adds	r3, #7
 80121a6:	f023 0307 	bic.w	r3, r3, #7
 80121aa:	3308      	adds	r3, #8
 80121ac:	9303      	str	r3, [sp, #12]
 80121ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80121b0:	443b      	add	r3, r7
 80121b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80121b4:	e76a      	b.n	801208c <_vfiprintf_r+0x78>
 80121b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80121ba:	460c      	mov	r4, r1
 80121bc:	2001      	movs	r0, #1
 80121be:	e7a8      	b.n	8012112 <_vfiprintf_r+0xfe>
 80121c0:	2300      	movs	r3, #0
 80121c2:	3401      	adds	r4, #1
 80121c4:	9305      	str	r3, [sp, #20]
 80121c6:	4619      	mov	r1, r3
 80121c8:	f04f 0c0a 	mov.w	ip, #10
 80121cc:	4620      	mov	r0, r4
 80121ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80121d2:	3a30      	subs	r2, #48	@ 0x30
 80121d4:	2a09      	cmp	r2, #9
 80121d6:	d903      	bls.n	80121e0 <_vfiprintf_r+0x1cc>
 80121d8:	2b00      	cmp	r3, #0
 80121da:	d0c6      	beq.n	801216a <_vfiprintf_r+0x156>
 80121dc:	9105      	str	r1, [sp, #20]
 80121de:	e7c4      	b.n	801216a <_vfiprintf_r+0x156>
 80121e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80121e4:	4604      	mov	r4, r0
 80121e6:	2301      	movs	r3, #1
 80121e8:	e7f0      	b.n	80121cc <_vfiprintf_r+0x1b8>
 80121ea:	ab03      	add	r3, sp, #12
 80121ec:	9300      	str	r3, [sp, #0]
 80121ee:	462a      	mov	r2, r5
 80121f0:	4b12      	ldr	r3, [pc, #72]	@ (801223c <_vfiprintf_r+0x228>)
 80121f2:	a904      	add	r1, sp, #16
 80121f4:	4630      	mov	r0, r6
 80121f6:	f7fd fc9f 	bl	800fb38 <_printf_float>
 80121fa:	4607      	mov	r7, r0
 80121fc:	1c78      	adds	r0, r7, #1
 80121fe:	d1d6      	bne.n	80121ae <_vfiprintf_r+0x19a>
 8012200:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012202:	07d9      	lsls	r1, r3, #31
 8012204:	d405      	bmi.n	8012212 <_vfiprintf_r+0x1fe>
 8012206:	89ab      	ldrh	r3, [r5, #12]
 8012208:	059a      	lsls	r2, r3, #22
 801220a:	d402      	bmi.n	8012212 <_vfiprintf_r+0x1fe>
 801220c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801220e:	f7fe faf1 	bl	80107f4 <__retarget_lock_release_recursive>
 8012212:	89ab      	ldrh	r3, [r5, #12]
 8012214:	065b      	lsls	r3, r3, #25
 8012216:	f53f af1f 	bmi.w	8012058 <_vfiprintf_r+0x44>
 801221a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801221c:	e71e      	b.n	801205c <_vfiprintf_r+0x48>
 801221e:	ab03      	add	r3, sp, #12
 8012220:	9300      	str	r3, [sp, #0]
 8012222:	462a      	mov	r2, r5
 8012224:	4b05      	ldr	r3, [pc, #20]	@ (801223c <_vfiprintf_r+0x228>)
 8012226:	a904      	add	r1, sp, #16
 8012228:	4630      	mov	r0, r6
 801222a:	f7fd ff0d 	bl	8010048 <_printf_i>
 801222e:	e7e4      	b.n	80121fa <_vfiprintf_r+0x1e6>
 8012230:	08012a01 	.word	0x08012a01
 8012234:	08012a0b 	.word	0x08012a0b
 8012238:	0800fb39 	.word	0x0800fb39
 801223c:	08011fef 	.word	0x08011fef
 8012240:	08012a07 	.word	0x08012a07

08012244 <__sflush_r>:
 8012244:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801224c:	0716      	lsls	r6, r2, #28
 801224e:	4605      	mov	r5, r0
 8012250:	460c      	mov	r4, r1
 8012252:	d454      	bmi.n	80122fe <__sflush_r+0xba>
 8012254:	684b      	ldr	r3, [r1, #4]
 8012256:	2b00      	cmp	r3, #0
 8012258:	dc02      	bgt.n	8012260 <__sflush_r+0x1c>
 801225a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801225c:	2b00      	cmp	r3, #0
 801225e:	dd48      	ble.n	80122f2 <__sflush_r+0xae>
 8012260:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012262:	2e00      	cmp	r6, #0
 8012264:	d045      	beq.n	80122f2 <__sflush_r+0xae>
 8012266:	2300      	movs	r3, #0
 8012268:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801226c:	682f      	ldr	r7, [r5, #0]
 801226e:	6a21      	ldr	r1, [r4, #32]
 8012270:	602b      	str	r3, [r5, #0]
 8012272:	d030      	beq.n	80122d6 <__sflush_r+0x92>
 8012274:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012276:	89a3      	ldrh	r3, [r4, #12]
 8012278:	0759      	lsls	r1, r3, #29
 801227a:	d505      	bpl.n	8012288 <__sflush_r+0x44>
 801227c:	6863      	ldr	r3, [r4, #4]
 801227e:	1ad2      	subs	r2, r2, r3
 8012280:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012282:	b10b      	cbz	r3, 8012288 <__sflush_r+0x44>
 8012284:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012286:	1ad2      	subs	r2, r2, r3
 8012288:	2300      	movs	r3, #0
 801228a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801228c:	6a21      	ldr	r1, [r4, #32]
 801228e:	4628      	mov	r0, r5
 8012290:	47b0      	blx	r6
 8012292:	1c43      	adds	r3, r0, #1
 8012294:	89a3      	ldrh	r3, [r4, #12]
 8012296:	d106      	bne.n	80122a6 <__sflush_r+0x62>
 8012298:	6829      	ldr	r1, [r5, #0]
 801229a:	291d      	cmp	r1, #29
 801229c:	d82b      	bhi.n	80122f6 <__sflush_r+0xb2>
 801229e:	4a2a      	ldr	r2, [pc, #168]	@ (8012348 <__sflush_r+0x104>)
 80122a0:	40ca      	lsrs	r2, r1
 80122a2:	07d6      	lsls	r6, r2, #31
 80122a4:	d527      	bpl.n	80122f6 <__sflush_r+0xb2>
 80122a6:	2200      	movs	r2, #0
 80122a8:	6062      	str	r2, [r4, #4]
 80122aa:	04d9      	lsls	r1, r3, #19
 80122ac:	6922      	ldr	r2, [r4, #16]
 80122ae:	6022      	str	r2, [r4, #0]
 80122b0:	d504      	bpl.n	80122bc <__sflush_r+0x78>
 80122b2:	1c42      	adds	r2, r0, #1
 80122b4:	d101      	bne.n	80122ba <__sflush_r+0x76>
 80122b6:	682b      	ldr	r3, [r5, #0]
 80122b8:	b903      	cbnz	r3, 80122bc <__sflush_r+0x78>
 80122ba:	6560      	str	r0, [r4, #84]	@ 0x54
 80122bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80122be:	602f      	str	r7, [r5, #0]
 80122c0:	b1b9      	cbz	r1, 80122f2 <__sflush_r+0xae>
 80122c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80122c6:	4299      	cmp	r1, r3
 80122c8:	d002      	beq.n	80122d0 <__sflush_r+0x8c>
 80122ca:	4628      	mov	r0, r5
 80122cc:	f7ff f8a6 	bl	801141c <_free_r>
 80122d0:	2300      	movs	r3, #0
 80122d2:	6363      	str	r3, [r4, #52]	@ 0x34
 80122d4:	e00d      	b.n	80122f2 <__sflush_r+0xae>
 80122d6:	2301      	movs	r3, #1
 80122d8:	4628      	mov	r0, r5
 80122da:	47b0      	blx	r6
 80122dc:	4602      	mov	r2, r0
 80122de:	1c50      	adds	r0, r2, #1
 80122e0:	d1c9      	bne.n	8012276 <__sflush_r+0x32>
 80122e2:	682b      	ldr	r3, [r5, #0]
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d0c6      	beq.n	8012276 <__sflush_r+0x32>
 80122e8:	2b1d      	cmp	r3, #29
 80122ea:	d001      	beq.n	80122f0 <__sflush_r+0xac>
 80122ec:	2b16      	cmp	r3, #22
 80122ee:	d11e      	bne.n	801232e <__sflush_r+0xea>
 80122f0:	602f      	str	r7, [r5, #0]
 80122f2:	2000      	movs	r0, #0
 80122f4:	e022      	b.n	801233c <__sflush_r+0xf8>
 80122f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80122fa:	b21b      	sxth	r3, r3
 80122fc:	e01b      	b.n	8012336 <__sflush_r+0xf2>
 80122fe:	690f      	ldr	r7, [r1, #16]
 8012300:	2f00      	cmp	r7, #0
 8012302:	d0f6      	beq.n	80122f2 <__sflush_r+0xae>
 8012304:	0793      	lsls	r3, r2, #30
 8012306:	680e      	ldr	r6, [r1, #0]
 8012308:	bf08      	it	eq
 801230a:	694b      	ldreq	r3, [r1, #20]
 801230c:	600f      	str	r7, [r1, #0]
 801230e:	bf18      	it	ne
 8012310:	2300      	movne	r3, #0
 8012312:	eba6 0807 	sub.w	r8, r6, r7
 8012316:	608b      	str	r3, [r1, #8]
 8012318:	f1b8 0f00 	cmp.w	r8, #0
 801231c:	dde9      	ble.n	80122f2 <__sflush_r+0xae>
 801231e:	6a21      	ldr	r1, [r4, #32]
 8012320:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8012322:	4643      	mov	r3, r8
 8012324:	463a      	mov	r2, r7
 8012326:	4628      	mov	r0, r5
 8012328:	47b0      	blx	r6
 801232a:	2800      	cmp	r0, #0
 801232c:	dc08      	bgt.n	8012340 <__sflush_r+0xfc>
 801232e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012332:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012336:	81a3      	strh	r3, [r4, #12]
 8012338:	f04f 30ff 	mov.w	r0, #4294967295
 801233c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012340:	4407      	add	r7, r0
 8012342:	eba8 0800 	sub.w	r8, r8, r0
 8012346:	e7e7      	b.n	8012318 <__sflush_r+0xd4>
 8012348:	20400001 	.word	0x20400001

0801234c <_fflush_r>:
 801234c:	b538      	push	{r3, r4, r5, lr}
 801234e:	690b      	ldr	r3, [r1, #16]
 8012350:	4605      	mov	r5, r0
 8012352:	460c      	mov	r4, r1
 8012354:	b913      	cbnz	r3, 801235c <_fflush_r+0x10>
 8012356:	2500      	movs	r5, #0
 8012358:	4628      	mov	r0, r5
 801235a:	bd38      	pop	{r3, r4, r5, pc}
 801235c:	b118      	cbz	r0, 8012366 <_fflush_r+0x1a>
 801235e:	6a03      	ldr	r3, [r0, #32]
 8012360:	b90b      	cbnz	r3, 8012366 <_fflush_r+0x1a>
 8012362:	f7fe f81b 	bl	801039c <__sinit>
 8012366:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801236a:	2b00      	cmp	r3, #0
 801236c:	d0f3      	beq.n	8012356 <_fflush_r+0xa>
 801236e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012370:	07d0      	lsls	r0, r2, #31
 8012372:	d404      	bmi.n	801237e <_fflush_r+0x32>
 8012374:	0599      	lsls	r1, r3, #22
 8012376:	d402      	bmi.n	801237e <_fflush_r+0x32>
 8012378:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801237a:	f7fe fa3a 	bl	80107f2 <__retarget_lock_acquire_recursive>
 801237e:	4628      	mov	r0, r5
 8012380:	4621      	mov	r1, r4
 8012382:	f7ff ff5f 	bl	8012244 <__sflush_r>
 8012386:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012388:	07da      	lsls	r2, r3, #31
 801238a:	4605      	mov	r5, r0
 801238c:	d4e4      	bmi.n	8012358 <_fflush_r+0xc>
 801238e:	89a3      	ldrh	r3, [r4, #12]
 8012390:	059b      	lsls	r3, r3, #22
 8012392:	d4e1      	bmi.n	8012358 <_fflush_r+0xc>
 8012394:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012396:	f7fe fa2d 	bl	80107f4 <__retarget_lock_release_recursive>
 801239a:	e7dd      	b.n	8012358 <_fflush_r+0xc>

0801239c <fiprintf>:
 801239c:	b40e      	push	{r1, r2, r3}
 801239e:	b503      	push	{r0, r1, lr}
 80123a0:	4601      	mov	r1, r0
 80123a2:	ab03      	add	r3, sp, #12
 80123a4:	4805      	ldr	r0, [pc, #20]	@ (80123bc <fiprintf+0x20>)
 80123a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80123aa:	6800      	ldr	r0, [r0, #0]
 80123ac:	9301      	str	r3, [sp, #4]
 80123ae:	f7ff fe31 	bl	8012014 <_vfiprintf_r>
 80123b2:	b002      	add	sp, #8
 80123b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80123b8:	b003      	add	sp, #12
 80123ba:	4770      	bx	lr
 80123bc:	24000038 	.word	0x24000038

080123c0 <__swhatbuf_r>:
 80123c0:	b570      	push	{r4, r5, r6, lr}
 80123c2:	460c      	mov	r4, r1
 80123c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80123c8:	2900      	cmp	r1, #0
 80123ca:	b096      	sub	sp, #88	@ 0x58
 80123cc:	4615      	mov	r5, r2
 80123ce:	461e      	mov	r6, r3
 80123d0:	da0d      	bge.n	80123ee <__swhatbuf_r+0x2e>
 80123d2:	89a3      	ldrh	r3, [r4, #12]
 80123d4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80123d8:	f04f 0100 	mov.w	r1, #0
 80123dc:	bf14      	ite	ne
 80123de:	2340      	movne	r3, #64	@ 0x40
 80123e0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80123e4:	2000      	movs	r0, #0
 80123e6:	6031      	str	r1, [r6, #0]
 80123e8:	602b      	str	r3, [r5, #0]
 80123ea:	b016      	add	sp, #88	@ 0x58
 80123ec:	bd70      	pop	{r4, r5, r6, pc}
 80123ee:	466a      	mov	r2, sp
 80123f0:	f000 f862 	bl	80124b8 <_fstat_r>
 80123f4:	2800      	cmp	r0, #0
 80123f6:	dbec      	blt.n	80123d2 <__swhatbuf_r+0x12>
 80123f8:	9901      	ldr	r1, [sp, #4]
 80123fa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80123fe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012402:	4259      	negs	r1, r3
 8012404:	4159      	adcs	r1, r3
 8012406:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801240a:	e7eb      	b.n	80123e4 <__swhatbuf_r+0x24>

0801240c <__smakebuf_r>:
 801240c:	898b      	ldrh	r3, [r1, #12]
 801240e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012410:	079d      	lsls	r5, r3, #30
 8012412:	4606      	mov	r6, r0
 8012414:	460c      	mov	r4, r1
 8012416:	d507      	bpl.n	8012428 <__smakebuf_r+0x1c>
 8012418:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801241c:	6023      	str	r3, [r4, #0]
 801241e:	6123      	str	r3, [r4, #16]
 8012420:	2301      	movs	r3, #1
 8012422:	6163      	str	r3, [r4, #20]
 8012424:	b003      	add	sp, #12
 8012426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012428:	ab01      	add	r3, sp, #4
 801242a:	466a      	mov	r2, sp
 801242c:	f7ff ffc8 	bl	80123c0 <__swhatbuf_r>
 8012430:	9f00      	ldr	r7, [sp, #0]
 8012432:	4605      	mov	r5, r0
 8012434:	4639      	mov	r1, r7
 8012436:	4630      	mov	r0, r6
 8012438:	f7ff f864 	bl	8011504 <_malloc_r>
 801243c:	b948      	cbnz	r0, 8012452 <__smakebuf_r+0x46>
 801243e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012442:	059a      	lsls	r2, r3, #22
 8012444:	d4ee      	bmi.n	8012424 <__smakebuf_r+0x18>
 8012446:	f023 0303 	bic.w	r3, r3, #3
 801244a:	f043 0302 	orr.w	r3, r3, #2
 801244e:	81a3      	strh	r3, [r4, #12]
 8012450:	e7e2      	b.n	8012418 <__smakebuf_r+0xc>
 8012452:	89a3      	ldrh	r3, [r4, #12]
 8012454:	6020      	str	r0, [r4, #0]
 8012456:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801245a:	81a3      	strh	r3, [r4, #12]
 801245c:	9b01      	ldr	r3, [sp, #4]
 801245e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012462:	b15b      	cbz	r3, 801247c <__smakebuf_r+0x70>
 8012464:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012468:	4630      	mov	r0, r6
 801246a:	f000 f837 	bl	80124dc <_isatty_r>
 801246e:	b128      	cbz	r0, 801247c <__smakebuf_r+0x70>
 8012470:	89a3      	ldrh	r3, [r4, #12]
 8012472:	f023 0303 	bic.w	r3, r3, #3
 8012476:	f043 0301 	orr.w	r3, r3, #1
 801247a:	81a3      	strh	r3, [r4, #12]
 801247c:	89a3      	ldrh	r3, [r4, #12]
 801247e:	431d      	orrs	r5, r3
 8012480:	81a5      	strh	r5, [r4, #12]
 8012482:	e7cf      	b.n	8012424 <__smakebuf_r+0x18>

08012484 <memmove>:
 8012484:	4288      	cmp	r0, r1
 8012486:	b510      	push	{r4, lr}
 8012488:	eb01 0402 	add.w	r4, r1, r2
 801248c:	d902      	bls.n	8012494 <memmove+0x10>
 801248e:	4284      	cmp	r4, r0
 8012490:	4623      	mov	r3, r4
 8012492:	d807      	bhi.n	80124a4 <memmove+0x20>
 8012494:	1e43      	subs	r3, r0, #1
 8012496:	42a1      	cmp	r1, r4
 8012498:	d008      	beq.n	80124ac <memmove+0x28>
 801249a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801249e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80124a2:	e7f8      	b.n	8012496 <memmove+0x12>
 80124a4:	4402      	add	r2, r0
 80124a6:	4601      	mov	r1, r0
 80124a8:	428a      	cmp	r2, r1
 80124aa:	d100      	bne.n	80124ae <memmove+0x2a>
 80124ac:	bd10      	pop	{r4, pc}
 80124ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80124b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80124b6:	e7f7      	b.n	80124a8 <memmove+0x24>

080124b8 <_fstat_r>:
 80124b8:	b538      	push	{r3, r4, r5, lr}
 80124ba:	4d07      	ldr	r5, [pc, #28]	@ (80124d8 <_fstat_r+0x20>)
 80124bc:	2300      	movs	r3, #0
 80124be:	4604      	mov	r4, r0
 80124c0:	4608      	mov	r0, r1
 80124c2:	4611      	mov	r1, r2
 80124c4:	602b      	str	r3, [r5, #0]
 80124c6:	f7ef fbc7 	bl	8001c58 <_fstat>
 80124ca:	1c43      	adds	r3, r0, #1
 80124cc:	d102      	bne.n	80124d4 <_fstat_r+0x1c>
 80124ce:	682b      	ldr	r3, [r5, #0]
 80124d0:	b103      	cbz	r3, 80124d4 <_fstat_r+0x1c>
 80124d2:	6023      	str	r3, [r4, #0]
 80124d4:	bd38      	pop	{r3, r4, r5, pc}
 80124d6:	bf00      	nop
 80124d8:	24000874 	.word	0x24000874

080124dc <_isatty_r>:
 80124dc:	b538      	push	{r3, r4, r5, lr}
 80124de:	4d06      	ldr	r5, [pc, #24]	@ (80124f8 <_isatty_r+0x1c>)
 80124e0:	2300      	movs	r3, #0
 80124e2:	4604      	mov	r4, r0
 80124e4:	4608      	mov	r0, r1
 80124e6:	602b      	str	r3, [r5, #0]
 80124e8:	f7ef fbc6 	bl	8001c78 <_isatty>
 80124ec:	1c43      	adds	r3, r0, #1
 80124ee:	d102      	bne.n	80124f6 <_isatty_r+0x1a>
 80124f0:	682b      	ldr	r3, [r5, #0]
 80124f2:	b103      	cbz	r3, 80124f6 <_isatty_r+0x1a>
 80124f4:	6023      	str	r3, [r4, #0]
 80124f6:	bd38      	pop	{r3, r4, r5, pc}
 80124f8:	24000874 	.word	0x24000874

080124fc <_sbrk_r>:
 80124fc:	b538      	push	{r3, r4, r5, lr}
 80124fe:	4d06      	ldr	r5, [pc, #24]	@ (8012518 <_sbrk_r+0x1c>)
 8012500:	2300      	movs	r3, #0
 8012502:	4604      	mov	r4, r0
 8012504:	4608      	mov	r0, r1
 8012506:	602b      	str	r3, [r5, #0]
 8012508:	f7ef fbce 	bl	8001ca8 <_sbrk>
 801250c:	1c43      	adds	r3, r0, #1
 801250e:	d102      	bne.n	8012516 <_sbrk_r+0x1a>
 8012510:	682b      	ldr	r3, [r5, #0]
 8012512:	b103      	cbz	r3, 8012516 <_sbrk_r+0x1a>
 8012514:	6023      	str	r3, [r4, #0]
 8012516:	bd38      	pop	{r3, r4, r5, pc}
 8012518:	24000874 	.word	0x24000874

0801251c <abort>:
 801251c:	b508      	push	{r3, lr}
 801251e:	2006      	movs	r0, #6
 8012520:	f000 f88c 	bl	801263c <raise>
 8012524:	2001      	movs	r0, #1
 8012526:	f7ef fb47 	bl	8001bb8 <_exit>

0801252a <_calloc_r>:
 801252a:	b570      	push	{r4, r5, r6, lr}
 801252c:	fba1 5402 	umull	r5, r4, r1, r2
 8012530:	b934      	cbnz	r4, 8012540 <_calloc_r+0x16>
 8012532:	4629      	mov	r1, r5
 8012534:	f7fe ffe6 	bl	8011504 <_malloc_r>
 8012538:	4606      	mov	r6, r0
 801253a:	b928      	cbnz	r0, 8012548 <_calloc_r+0x1e>
 801253c:	4630      	mov	r0, r6
 801253e:	bd70      	pop	{r4, r5, r6, pc}
 8012540:	220c      	movs	r2, #12
 8012542:	6002      	str	r2, [r0, #0]
 8012544:	2600      	movs	r6, #0
 8012546:	e7f9      	b.n	801253c <_calloc_r+0x12>
 8012548:	462a      	mov	r2, r5
 801254a:	4621      	mov	r1, r4
 801254c:	f7fe f868 	bl	8010620 <memset>
 8012550:	e7f4      	b.n	801253c <_calloc_r+0x12>

08012552 <__ascii_mbtowc>:
 8012552:	b082      	sub	sp, #8
 8012554:	b901      	cbnz	r1, 8012558 <__ascii_mbtowc+0x6>
 8012556:	a901      	add	r1, sp, #4
 8012558:	b142      	cbz	r2, 801256c <__ascii_mbtowc+0x1a>
 801255a:	b14b      	cbz	r3, 8012570 <__ascii_mbtowc+0x1e>
 801255c:	7813      	ldrb	r3, [r2, #0]
 801255e:	600b      	str	r3, [r1, #0]
 8012560:	7812      	ldrb	r2, [r2, #0]
 8012562:	1e10      	subs	r0, r2, #0
 8012564:	bf18      	it	ne
 8012566:	2001      	movne	r0, #1
 8012568:	b002      	add	sp, #8
 801256a:	4770      	bx	lr
 801256c:	4610      	mov	r0, r2
 801256e:	e7fb      	b.n	8012568 <__ascii_mbtowc+0x16>
 8012570:	f06f 0001 	mvn.w	r0, #1
 8012574:	e7f8      	b.n	8012568 <__ascii_mbtowc+0x16>

08012576 <_realloc_r>:
 8012576:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801257a:	4607      	mov	r7, r0
 801257c:	4614      	mov	r4, r2
 801257e:	460d      	mov	r5, r1
 8012580:	b921      	cbnz	r1, 801258c <_realloc_r+0x16>
 8012582:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012586:	4611      	mov	r1, r2
 8012588:	f7fe bfbc 	b.w	8011504 <_malloc_r>
 801258c:	b92a      	cbnz	r2, 801259a <_realloc_r+0x24>
 801258e:	f7fe ff45 	bl	801141c <_free_r>
 8012592:	4625      	mov	r5, r4
 8012594:	4628      	mov	r0, r5
 8012596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801259a:	f000 f86b 	bl	8012674 <_malloc_usable_size_r>
 801259e:	4284      	cmp	r4, r0
 80125a0:	4606      	mov	r6, r0
 80125a2:	d802      	bhi.n	80125aa <_realloc_r+0x34>
 80125a4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80125a8:	d8f4      	bhi.n	8012594 <_realloc_r+0x1e>
 80125aa:	4621      	mov	r1, r4
 80125ac:	4638      	mov	r0, r7
 80125ae:	f7fe ffa9 	bl	8011504 <_malloc_r>
 80125b2:	4680      	mov	r8, r0
 80125b4:	b908      	cbnz	r0, 80125ba <_realloc_r+0x44>
 80125b6:	4645      	mov	r5, r8
 80125b8:	e7ec      	b.n	8012594 <_realloc_r+0x1e>
 80125ba:	42b4      	cmp	r4, r6
 80125bc:	4622      	mov	r2, r4
 80125be:	4629      	mov	r1, r5
 80125c0:	bf28      	it	cs
 80125c2:	4632      	movcs	r2, r6
 80125c4:	f7fe f917 	bl	80107f6 <memcpy>
 80125c8:	4629      	mov	r1, r5
 80125ca:	4638      	mov	r0, r7
 80125cc:	f7fe ff26 	bl	801141c <_free_r>
 80125d0:	e7f1      	b.n	80125b6 <_realloc_r+0x40>

080125d2 <__ascii_wctomb>:
 80125d2:	4603      	mov	r3, r0
 80125d4:	4608      	mov	r0, r1
 80125d6:	b141      	cbz	r1, 80125ea <__ascii_wctomb+0x18>
 80125d8:	2aff      	cmp	r2, #255	@ 0xff
 80125da:	d904      	bls.n	80125e6 <__ascii_wctomb+0x14>
 80125dc:	228a      	movs	r2, #138	@ 0x8a
 80125de:	601a      	str	r2, [r3, #0]
 80125e0:	f04f 30ff 	mov.w	r0, #4294967295
 80125e4:	4770      	bx	lr
 80125e6:	700a      	strb	r2, [r1, #0]
 80125e8:	2001      	movs	r0, #1
 80125ea:	4770      	bx	lr

080125ec <_raise_r>:
 80125ec:	291f      	cmp	r1, #31
 80125ee:	b538      	push	{r3, r4, r5, lr}
 80125f0:	4605      	mov	r5, r0
 80125f2:	460c      	mov	r4, r1
 80125f4:	d904      	bls.n	8012600 <_raise_r+0x14>
 80125f6:	2316      	movs	r3, #22
 80125f8:	6003      	str	r3, [r0, #0]
 80125fa:	f04f 30ff 	mov.w	r0, #4294967295
 80125fe:	bd38      	pop	{r3, r4, r5, pc}
 8012600:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012602:	b112      	cbz	r2, 801260a <_raise_r+0x1e>
 8012604:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012608:	b94b      	cbnz	r3, 801261e <_raise_r+0x32>
 801260a:	4628      	mov	r0, r5
 801260c:	f000 f830 	bl	8012670 <_getpid_r>
 8012610:	4622      	mov	r2, r4
 8012612:	4601      	mov	r1, r0
 8012614:	4628      	mov	r0, r5
 8012616:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801261a:	f000 b817 	b.w	801264c <_kill_r>
 801261e:	2b01      	cmp	r3, #1
 8012620:	d00a      	beq.n	8012638 <_raise_r+0x4c>
 8012622:	1c59      	adds	r1, r3, #1
 8012624:	d103      	bne.n	801262e <_raise_r+0x42>
 8012626:	2316      	movs	r3, #22
 8012628:	6003      	str	r3, [r0, #0]
 801262a:	2001      	movs	r0, #1
 801262c:	e7e7      	b.n	80125fe <_raise_r+0x12>
 801262e:	2100      	movs	r1, #0
 8012630:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012634:	4620      	mov	r0, r4
 8012636:	4798      	blx	r3
 8012638:	2000      	movs	r0, #0
 801263a:	e7e0      	b.n	80125fe <_raise_r+0x12>

0801263c <raise>:
 801263c:	4b02      	ldr	r3, [pc, #8]	@ (8012648 <raise+0xc>)
 801263e:	4601      	mov	r1, r0
 8012640:	6818      	ldr	r0, [r3, #0]
 8012642:	f7ff bfd3 	b.w	80125ec <_raise_r>
 8012646:	bf00      	nop
 8012648:	24000038 	.word	0x24000038

0801264c <_kill_r>:
 801264c:	b538      	push	{r3, r4, r5, lr}
 801264e:	4d07      	ldr	r5, [pc, #28]	@ (801266c <_kill_r+0x20>)
 8012650:	2300      	movs	r3, #0
 8012652:	4604      	mov	r4, r0
 8012654:	4608      	mov	r0, r1
 8012656:	4611      	mov	r1, r2
 8012658:	602b      	str	r3, [r5, #0]
 801265a:	f7ef fa9d 	bl	8001b98 <_kill>
 801265e:	1c43      	adds	r3, r0, #1
 8012660:	d102      	bne.n	8012668 <_kill_r+0x1c>
 8012662:	682b      	ldr	r3, [r5, #0]
 8012664:	b103      	cbz	r3, 8012668 <_kill_r+0x1c>
 8012666:	6023      	str	r3, [r4, #0]
 8012668:	bd38      	pop	{r3, r4, r5, pc}
 801266a:	bf00      	nop
 801266c:	24000874 	.word	0x24000874

08012670 <_getpid_r>:
 8012670:	f7ef ba8a 	b.w	8001b88 <_getpid>

08012674 <_malloc_usable_size_r>:
 8012674:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012678:	1f18      	subs	r0, r3, #4
 801267a:	2b00      	cmp	r3, #0
 801267c:	bfbc      	itt	lt
 801267e:	580b      	ldrlt	r3, [r1, r0]
 8012680:	18c0      	addlt	r0, r0, r3
 8012682:	4770      	bx	lr

08012684 <_init>:
 8012684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012686:	bf00      	nop
 8012688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801268a:	bc08      	pop	{r3}
 801268c:	469e      	mov	lr, r3
 801268e:	4770      	bx	lr

08012690 <_fini>:
 8012690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012692:	bf00      	nop
 8012694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012696:	bc08      	pop	{r3}
 8012698:	469e      	mov	lr, r3
 801269a:	4770      	bx	lr

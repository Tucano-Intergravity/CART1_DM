
CART1_DM_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010d0c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  08010fb0  08010fb0  00011fb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011418  08011418  000131f4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08011418  08011418  00012418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011420  08011420  000131f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011420  08011420  00012420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011424  08011424  00012424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  24000000  08011428  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000608  240001f8  0801161c  000131f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  24000800  0801161c  00013800  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000131f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000217d0  00000000  00000000  00013222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003de3  00000000  00000000  000349f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019c0  00000000  00000000  000387d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013ff  00000000  00000000  0003a198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003fe22  00000000  00000000  0003b597  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002336f  00000000  00000000  0007b3b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a4356  00000000  00000000  0009e728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00242a7e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007f84  00000000  00000000  00242ac4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  0024aa48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001f8 	.word	0x240001f8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08010f94 	.word	0x08010f94

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001fc 	.word	0x240001fc
 80002dc:	08010f94 	.word	0x08010f94

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr
	...

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <strlen>:
 80003a0:	4603      	mov	r3, r0
 80003a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003a6:	2a00      	cmp	r2, #0
 80003a8:	d1fb      	bne.n	80003a2 <strlen+0x2>
 80003aa:	1a18      	subs	r0, r3, r0
 80003ac:	3801      	subs	r0, #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b988 	b.w	80006d8 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	468e      	mov	lr, r1
 80003e8:	4604      	mov	r4, r0
 80003ea:	4688      	mov	r8, r1
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d14a      	bne.n	8000486 <__udivmoddi4+0xa6>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4617      	mov	r7, r2
 80003f4:	d962      	bls.n	80004bc <__udivmoddi4+0xdc>
 80003f6:	fab2 f682 	clz	r6, r2
 80003fa:	b14e      	cbz	r6, 8000410 <__udivmoddi4+0x30>
 80003fc:	f1c6 0320 	rsb	r3, r6, #32
 8000400:	fa01 f806 	lsl.w	r8, r1, r6
 8000404:	fa20 f303 	lsr.w	r3, r0, r3
 8000408:	40b7      	lsls	r7, r6
 800040a:	ea43 0808 	orr.w	r8, r3, r8
 800040e:	40b4      	lsls	r4, r6
 8000410:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000414:	fa1f fc87 	uxth.w	ip, r7
 8000418:	fbb8 f1fe 	udiv	r1, r8, lr
 800041c:	0c23      	lsrs	r3, r4, #16
 800041e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fb01 f20c 	mul.w	r2, r1, ip
 800042a:	429a      	cmp	r2, r3
 800042c:	d909      	bls.n	8000442 <__udivmoddi4+0x62>
 800042e:	18fb      	adds	r3, r7, r3
 8000430:	f101 30ff 	add.w	r0, r1, #4294967295
 8000434:	f080 80ea 	bcs.w	800060c <__udivmoddi4+0x22c>
 8000438:	429a      	cmp	r2, r3
 800043a:	f240 80e7 	bls.w	800060c <__udivmoddi4+0x22c>
 800043e:	3902      	subs	r1, #2
 8000440:	443b      	add	r3, r7
 8000442:	1a9a      	subs	r2, r3, r2
 8000444:	b2a3      	uxth	r3, r4
 8000446:	fbb2 f0fe 	udiv	r0, r2, lr
 800044a:	fb0e 2210 	mls	r2, lr, r0, r2
 800044e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000452:	fb00 fc0c 	mul.w	ip, r0, ip
 8000456:	459c      	cmp	ip, r3
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0x8e>
 800045a:	18fb      	adds	r3, r7, r3
 800045c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000460:	f080 80d6 	bcs.w	8000610 <__udivmoddi4+0x230>
 8000464:	459c      	cmp	ip, r3
 8000466:	f240 80d3 	bls.w	8000610 <__udivmoddi4+0x230>
 800046a:	443b      	add	r3, r7
 800046c:	3802      	subs	r0, #2
 800046e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000472:	eba3 030c 	sub.w	r3, r3, ip
 8000476:	2100      	movs	r1, #0
 8000478:	b11d      	cbz	r5, 8000482 <__udivmoddi4+0xa2>
 800047a:	40f3      	lsrs	r3, r6
 800047c:	2200      	movs	r2, #0
 800047e:	e9c5 3200 	strd	r3, r2, [r5]
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	428b      	cmp	r3, r1
 8000488:	d905      	bls.n	8000496 <__udivmoddi4+0xb6>
 800048a:	b10d      	cbz	r5, 8000490 <__udivmoddi4+0xb0>
 800048c:	e9c5 0100 	strd	r0, r1, [r5]
 8000490:	2100      	movs	r1, #0
 8000492:	4608      	mov	r0, r1
 8000494:	e7f5      	b.n	8000482 <__udivmoddi4+0xa2>
 8000496:	fab3 f183 	clz	r1, r3
 800049a:	2900      	cmp	r1, #0
 800049c:	d146      	bne.n	800052c <__udivmoddi4+0x14c>
 800049e:	4573      	cmp	r3, lr
 80004a0:	d302      	bcc.n	80004a8 <__udivmoddi4+0xc8>
 80004a2:	4282      	cmp	r2, r0
 80004a4:	f200 8105 	bhi.w	80006b2 <__udivmoddi4+0x2d2>
 80004a8:	1a84      	subs	r4, r0, r2
 80004aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80004ae:	2001      	movs	r0, #1
 80004b0:	4690      	mov	r8, r2
 80004b2:	2d00      	cmp	r5, #0
 80004b4:	d0e5      	beq.n	8000482 <__udivmoddi4+0xa2>
 80004b6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ba:	e7e2      	b.n	8000482 <__udivmoddi4+0xa2>
 80004bc:	2a00      	cmp	r2, #0
 80004be:	f000 8090 	beq.w	80005e2 <__udivmoddi4+0x202>
 80004c2:	fab2 f682 	clz	r6, r2
 80004c6:	2e00      	cmp	r6, #0
 80004c8:	f040 80a4 	bne.w	8000614 <__udivmoddi4+0x234>
 80004cc:	1a8a      	subs	r2, r1, r2
 80004ce:	0c03      	lsrs	r3, r0, #16
 80004d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004d4:	b280      	uxth	r0, r0
 80004d6:	b2bc      	uxth	r4, r7
 80004d8:	2101      	movs	r1, #1
 80004da:	fbb2 fcfe 	udiv	ip, r2, lr
 80004de:	fb0e 221c 	mls	r2, lr, ip, r2
 80004e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004e6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ea:	429a      	cmp	r2, r3
 80004ec:	d907      	bls.n	80004fe <__udivmoddi4+0x11e>
 80004ee:	18fb      	adds	r3, r7, r3
 80004f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004f4:	d202      	bcs.n	80004fc <__udivmoddi4+0x11c>
 80004f6:	429a      	cmp	r2, r3
 80004f8:	f200 80e0 	bhi.w	80006bc <__udivmoddi4+0x2dc>
 80004fc:	46c4      	mov	ip, r8
 80004fe:	1a9b      	subs	r3, r3, r2
 8000500:	fbb3 f2fe 	udiv	r2, r3, lr
 8000504:	fb0e 3312 	mls	r3, lr, r2, r3
 8000508:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800050c:	fb02 f404 	mul.w	r4, r2, r4
 8000510:	429c      	cmp	r4, r3
 8000512:	d907      	bls.n	8000524 <__udivmoddi4+0x144>
 8000514:	18fb      	adds	r3, r7, r3
 8000516:	f102 30ff 	add.w	r0, r2, #4294967295
 800051a:	d202      	bcs.n	8000522 <__udivmoddi4+0x142>
 800051c:	429c      	cmp	r4, r3
 800051e:	f200 80ca 	bhi.w	80006b6 <__udivmoddi4+0x2d6>
 8000522:	4602      	mov	r2, r0
 8000524:	1b1b      	subs	r3, r3, r4
 8000526:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800052a:	e7a5      	b.n	8000478 <__udivmoddi4+0x98>
 800052c:	f1c1 0620 	rsb	r6, r1, #32
 8000530:	408b      	lsls	r3, r1
 8000532:	fa22 f706 	lsr.w	r7, r2, r6
 8000536:	431f      	orrs	r7, r3
 8000538:	fa0e f401 	lsl.w	r4, lr, r1
 800053c:	fa20 f306 	lsr.w	r3, r0, r6
 8000540:	fa2e fe06 	lsr.w	lr, lr, r6
 8000544:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000548:	4323      	orrs	r3, r4
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	fa1f fc87 	uxth.w	ip, r7
 8000552:	fbbe f0f9 	udiv	r0, lr, r9
 8000556:	0c1c      	lsrs	r4, r3, #16
 8000558:	fb09 ee10 	mls	lr, r9, r0, lr
 800055c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000560:	fb00 fe0c 	mul.w	lr, r0, ip
 8000564:	45a6      	cmp	lr, r4
 8000566:	fa02 f201 	lsl.w	r2, r2, r1
 800056a:	d909      	bls.n	8000580 <__udivmoddi4+0x1a0>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000572:	f080 809c 	bcs.w	80006ae <__udivmoddi4+0x2ce>
 8000576:	45a6      	cmp	lr, r4
 8000578:	f240 8099 	bls.w	80006ae <__udivmoddi4+0x2ce>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	eba4 040e 	sub.w	r4, r4, lr
 8000584:	fa1f fe83 	uxth.w	lr, r3
 8000588:	fbb4 f3f9 	udiv	r3, r4, r9
 800058c:	fb09 4413 	mls	r4, r9, r3, r4
 8000590:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000594:	fb03 fc0c 	mul.w	ip, r3, ip
 8000598:	45a4      	cmp	ip, r4
 800059a:	d908      	bls.n	80005ae <__udivmoddi4+0x1ce>
 800059c:	193c      	adds	r4, r7, r4
 800059e:	f103 3eff 	add.w	lr, r3, #4294967295
 80005a2:	f080 8082 	bcs.w	80006aa <__udivmoddi4+0x2ca>
 80005a6:	45a4      	cmp	ip, r4
 80005a8:	d97f      	bls.n	80006aa <__udivmoddi4+0x2ca>
 80005aa:	3b02      	subs	r3, #2
 80005ac:	443c      	add	r4, r7
 80005ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005b2:	eba4 040c 	sub.w	r4, r4, ip
 80005b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ba:	4564      	cmp	r4, ip
 80005bc:	4673      	mov	r3, lr
 80005be:	46e1      	mov	r9, ip
 80005c0:	d362      	bcc.n	8000688 <__udivmoddi4+0x2a8>
 80005c2:	d05f      	beq.n	8000684 <__udivmoddi4+0x2a4>
 80005c4:	b15d      	cbz	r5, 80005de <__udivmoddi4+0x1fe>
 80005c6:	ebb8 0203 	subs.w	r2, r8, r3
 80005ca:	eb64 0409 	sbc.w	r4, r4, r9
 80005ce:	fa04 f606 	lsl.w	r6, r4, r6
 80005d2:	fa22 f301 	lsr.w	r3, r2, r1
 80005d6:	431e      	orrs	r6, r3
 80005d8:	40cc      	lsrs	r4, r1
 80005da:	e9c5 6400 	strd	r6, r4, [r5]
 80005de:	2100      	movs	r1, #0
 80005e0:	e74f      	b.n	8000482 <__udivmoddi4+0xa2>
 80005e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005e6:	0c01      	lsrs	r1, r0, #16
 80005e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005ec:	b280      	uxth	r0, r0
 80005ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005f2:	463b      	mov	r3, r7
 80005f4:	4638      	mov	r0, r7
 80005f6:	463c      	mov	r4, r7
 80005f8:	46b8      	mov	r8, r7
 80005fa:	46be      	mov	lr, r7
 80005fc:	2620      	movs	r6, #32
 80005fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000602:	eba2 0208 	sub.w	r2, r2, r8
 8000606:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800060a:	e766      	b.n	80004da <__udivmoddi4+0xfa>
 800060c:	4601      	mov	r1, r0
 800060e:	e718      	b.n	8000442 <__udivmoddi4+0x62>
 8000610:	4610      	mov	r0, r2
 8000612:	e72c      	b.n	800046e <__udivmoddi4+0x8e>
 8000614:	f1c6 0220 	rsb	r2, r6, #32
 8000618:	fa2e f302 	lsr.w	r3, lr, r2
 800061c:	40b7      	lsls	r7, r6
 800061e:	40b1      	lsls	r1, r6
 8000620:	fa20 f202 	lsr.w	r2, r0, r2
 8000624:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000628:	430a      	orrs	r2, r1
 800062a:	fbb3 f8fe 	udiv	r8, r3, lr
 800062e:	b2bc      	uxth	r4, r7
 8000630:	fb0e 3318 	mls	r3, lr, r8, r3
 8000634:	0c11      	lsrs	r1, r2, #16
 8000636:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800063a:	fb08 f904 	mul.w	r9, r8, r4
 800063e:	40b0      	lsls	r0, r6
 8000640:	4589      	cmp	r9, r1
 8000642:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000646:	b280      	uxth	r0, r0
 8000648:	d93e      	bls.n	80006c8 <__udivmoddi4+0x2e8>
 800064a:	1879      	adds	r1, r7, r1
 800064c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000650:	d201      	bcs.n	8000656 <__udivmoddi4+0x276>
 8000652:	4589      	cmp	r9, r1
 8000654:	d81f      	bhi.n	8000696 <__udivmoddi4+0x2b6>
 8000656:	eba1 0109 	sub.w	r1, r1, r9
 800065a:	fbb1 f9fe 	udiv	r9, r1, lr
 800065e:	fb09 f804 	mul.w	r8, r9, r4
 8000662:	fb0e 1119 	mls	r1, lr, r9, r1
 8000666:	b292      	uxth	r2, r2
 8000668:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800066c:	4542      	cmp	r2, r8
 800066e:	d229      	bcs.n	80006c4 <__udivmoddi4+0x2e4>
 8000670:	18ba      	adds	r2, r7, r2
 8000672:	f109 31ff 	add.w	r1, r9, #4294967295
 8000676:	d2c4      	bcs.n	8000602 <__udivmoddi4+0x222>
 8000678:	4542      	cmp	r2, r8
 800067a:	d2c2      	bcs.n	8000602 <__udivmoddi4+0x222>
 800067c:	f1a9 0102 	sub.w	r1, r9, #2
 8000680:	443a      	add	r2, r7
 8000682:	e7be      	b.n	8000602 <__udivmoddi4+0x222>
 8000684:	45f0      	cmp	r8, lr
 8000686:	d29d      	bcs.n	80005c4 <__udivmoddi4+0x1e4>
 8000688:	ebbe 0302 	subs.w	r3, lr, r2
 800068c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000690:	3801      	subs	r0, #1
 8000692:	46e1      	mov	r9, ip
 8000694:	e796      	b.n	80005c4 <__udivmoddi4+0x1e4>
 8000696:	eba7 0909 	sub.w	r9, r7, r9
 800069a:	4449      	add	r1, r9
 800069c:	f1a8 0c02 	sub.w	ip, r8, #2
 80006a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a4:	fb09 f804 	mul.w	r8, r9, r4
 80006a8:	e7db      	b.n	8000662 <__udivmoddi4+0x282>
 80006aa:	4673      	mov	r3, lr
 80006ac:	e77f      	b.n	80005ae <__udivmoddi4+0x1ce>
 80006ae:	4650      	mov	r0, sl
 80006b0:	e766      	b.n	8000580 <__udivmoddi4+0x1a0>
 80006b2:	4608      	mov	r0, r1
 80006b4:	e6fd      	b.n	80004b2 <__udivmoddi4+0xd2>
 80006b6:	443b      	add	r3, r7
 80006b8:	3a02      	subs	r2, #2
 80006ba:	e733      	b.n	8000524 <__udivmoddi4+0x144>
 80006bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80006c0:	443b      	add	r3, r7
 80006c2:	e71c      	b.n	80004fe <__udivmoddi4+0x11e>
 80006c4:	4649      	mov	r1, r9
 80006c6:	e79c      	b.n	8000602 <__udivmoddi4+0x222>
 80006c8:	eba1 0109 	sub.w	r1, r1, r9
 80006cc:	46c4      	mov	ip, r8
 80006ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80006d2:	fb09 f804 	mul.w	r8, r9, r4
 80006d6:	e7c4      	b.n	8000662 <__udivmoddi4+0x282>

080006d8 <__aeabi_idiv0>:
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop

080006dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006e0:	4b49      	ldr	r3, [pc, #292]	@ (8000808 <SystemInit+0x12c>)
 80006e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006e6:	4a48      	ldr	r2, [pc, #288]	@ (8000808 <SystemInit+0x12c>)
 80006e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006f0:	4b45      	ldr	r3, [pc, #276]	@ (8000808 <SystemInit+0x12c>)
 80006f2:	691b      	ldr	r3, [r3, #16]
 80006f4:	4a44      	ldr	r2, [pc, #272]	@ (8000808 <SystemInit+0x12c>)
 80006f6:	f043 0310 	orr.w	r3, r3, #16
 80006fa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006fc:	4b43      	ldr	r3, [pc, #268]	@ (800080c <SystemInit+0x130>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f003 030f 	and.w	r3, r3, #15
 8000704:	2b06      	cmp	r3, #6
 8000706:	d807      	bhi.n	8000718 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000708:	4b40      	ldr	r3, [pc, #256]	@ (800080c <SystemInit+0x130>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f023 030f 	bic.w	r3, r3, #15
 8000710:	4a3e      	ldr	r2, [pc, #248]	@ (800080c <SystemInit+0x130>)
 8000712:	f043 0307 	orr.w	r3, r3, #7
 8000716:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000718:	4b3d      	ldr	r3, [pc, #244]	@ (8000810 <SystemInit+0x134>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a3c      	ldr	r2, [pc, #240]	@ (8000810 <SystemInit+0x134>)
 800071e:	f043 0301 	orr.w	r3, r3, #1
 8000722:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000724:	4b3a      	ldr	r3, [pc, #232]	@ (8000810 <SystemInit+0x134>)
 8000726:	2200      	movs	r2, #0
 8000728:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800072a:	4b39      	ldr	r3, [pc, #228]	@ (8000810 <SystemInit+0x134>)
 800072c:	681a      	ldr	r2, [r3, #0]
 800072e:	4938      	ldr	r1, [pc, #224]	@ (8000810 <SystemInit+0x134>)
 8000730:	4b38      	ldr	r3, [pc, #224]	@ (8000814 <SystemInit+0x138>)
 8000732:	4013      	ands	r3, r2
 8000734:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000736:	4b35      	ldr	r3, [pc, #212]	@ (800080c <SystemInit+0x130>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	f003 0308 	and.w	r3, r3, #8
 800073e:	2b00      	cmp	r3, #0
 8000740:	d007      	beq.n	8000752 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000742:	4b32      	ldr	r3, [pc, #200]	@ (800080c <SystemInit+0x130>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f023 030f 	bic.w	r3, r3, #15
 800074a:	4a30      	ldr	r2, [pc, #192]	@ (800080c <SystemInit+0x130>)
 800074c:	f043 0307 	orr.w	r3, r3, #7
 8000750:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000752:	4b2f      	ldr	r3, [pc, #188]	@ (8000810 <SystemInit+0x134>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000758:	4b2d      	ldr	r3, [pc, #180]	@ (8000810 <SystemInit+0x134>)
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800075e:	4b2c      	ldr	r3, [pc, #176]	@ (8000810 <SystemInit+0x134>)
 8000760:	2200      	movs	r2, #0
 8000762:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000764:	4b2a      	ldr	r3, [pc, #168]	@ (8000810 <SystemInit+0x134>)
 8000766:	4a2c      	ldr	r2, [pc, #176]	@ (8000818 <SystemInit+0x13c>)
 8000768:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800076a:	4b29      	ldr	r3, [pc, #164]	@ (8000810 <SystemInit+0x134>)
 800076c:	4a2b      	ldr	r2, [pc, #172]	@ (800081c <SystemInit+0x140>)
 800076e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000770:	4b27      	ldr	r3, [pc, #156]	@ (8000810 <SystemInit+0x134>)
 8000772:	4a2b      	ldr	r2, [pc, #172]	@ (8000820 <SystemInit+0x144>)
 8000774:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000776:	4b26      	ldr	r3, [pc, #152]	@ (8000810 <SystemInit+0x134>)
 8000778:	2200      	movs	r2, #0
 800077a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800077c:	4b24      	ldr	r3, [pc, #144]	@ (8000810 <SystemInit+0x134>)
 800077e:	4a28      	ldr	r2, [pc, #160]	@ (8000820 <SystemInit+0x144>)
 8000780:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000782:	4b23      	ldr	r3, [pc, #140]	@ (8000810 <SystemInit+0x134>)
 8000784:	2200      	movs	r2, #0
 8000786:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000788:	4b21      	ldr	r3, [pc, #132]	@ (8000810 <SystemInit+0x134>)
 800078a:	4a25      	ldr	r2, [pc, #148]	@ (8000820 <SystemInit+0x144>)
 800078c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800078e:	4b20      	ldr	r3, [pc, #128]	@ (8000810 <SystemInit+0x134>)
 8000790:	2200      	movs	r2, #0
 8000792:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000794:	4b1e      	ldr	r3, [pc, #120]	@ (8000810 <SystemInit+0x134>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a1d      	ldr	r2, [pc, #116]	@ (8000810 <SystemInit+0x134>)
 800079a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800079e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80007a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000810 <SystemInit+0x134>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80007a6:	4b1f      	ldr	r3, [pc, #124]	@ (8000824 <SystemInit+0x148>)
 80007a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007aa:	4a1e      	ldr	r2, [pc, #120]	@ (8000824 <SystemInit+0x148>)
 80007ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007b0:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80007b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000828 <SystemInit+0x14c>)
 80007b4:	681a      	ldr	r2, [r3, #0]
 80007b6:	4b1d      	ldr	r3, [pc, #116]	@ (800082c <SystemInit+0x150>)
 80007b8:	4013      	ands	r3, r2
 80007ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80007be:	d202      	bcs.n	80007c6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80007c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000830 <SystemInit+0x154>)
 80007c2:	2201      	movs	r2, #1
 80007c4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80007c6:	4b12      	ldr	r3, [pc, #72]	@ (8000810 <SystemInit+0x134>)
 80007c8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d113      	bne.n	80007fc <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80007d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000810 <SystemInit+0x134>)
 80007d6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007da:	4a0d      	ldr	r2, [pc, #52]	@ (8000810 <SystemInit+0x134>)
 80007dc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007e0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80007e4:	4b13      	ldr	r3, [pc, #76]	@ (8000834 <SystemInit+0x158>)
 80007e6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80007ea:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80007ec:	4b08      	ldr	r3, [pc, #32]	@ (8000810 <SystemInit+0x134>)
 80007ee:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007f2:	4a07      	ldr	r2, [pc, #28]	@ (8000810 <SystemInit+0x134>)
 80007f4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80007f8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80007fc:	bf00      	nop
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	e000ed00 	.word	0xe000ed00
 800080c:	52002000 	.word	0x52002000
 8000810:	58024400 	.word	0x58024400
 8000814:	eaf6ed7f 	.word	0xeaf6ed7f
 8000818:	02020200 	.word	0x02020200
 800081c:	01ff0000 	.word	0x01ff0000
 8000820:	01010280 	.word	0x01010280
 8000824:	580000c0 	.word	0x580000c0
 8000828:	5c001000 	.word	0x5c001000
 800082c:	ffff0000 	.word	0xffff0000
 8000830:	51008108 	.word	0x51008108
 8000834:	52004000 	.word	0x52004000

08000838 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 800083c:	4b09      	ldr	r3, [pc, #36]	@ (8000864 <ExitRun0Mode+0x2c>)
 800083e:	68db      	ldr	r3, [r3, #12]
 8000840:	4a08      	ldr	r2, [pc, #32]	@ (8000864 <ExitRun0Mode+0x2c>)
 8000842:	f023 0302 	bic.w	r3, r3, #2
 8000846:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000848:	bf00      	nop
 800084a:	4b06      	ldr	r3, [pc, #24]	@ (8000864 <ExitRun0Mode+0x2c>)
 800084c:	685b      	ldr	r3, [r3, #4]
 800084e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000852:	2b00      	cmp	r3, #0
 8000854:	d0f9      	beq.n	800084a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000856:	bf00      	nop
 8000858:	bf00      	nop
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	58024800 	.word	0x58024800

08000868 <HAL_TIM_PeriodElapsedCallback>:

double TC[MAX_TC_CH] = {0};
uint8_t sv[MAX_SV_NUM] = {0};

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000878:	d13b      	bne.n	80008f2 <HAL_TIM_PeriodElapsedCallback+0x8a>
	{
		// 1ms마다 실행되는 코드
		f1ms = true;
 800087a:	4b21      	ldr	r3, [pc, #132]	@ (8000900 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800087c:	2201      	movs	r2, #1
 800087e:	701a      	strb	r2, [r3, #0]
		cnt1ms++;
 8000880:	4b20      	ldr	r3, [pc, #128]	@ (8000904 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	3301      	adds	r3, #1
 8000886:	4a1f      	ldr	r2, [pc, #124]	@ (8000904 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000888:	6013      	str	r3, [r2, #0]
		systemtick++;
 800088a:	4b1f      	ldr	r3, [pc, #124]	@ (8000908 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	3301      	adds	r3, #1
 8000890:	4a1d      	ldr	r2, [pc, #116]	@ (8000908 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000892:	6013      	str	r3, [r2, #0]

		if (cnt1ms%10 == 0)
 8000894:	4b1b      	ldr	r3, [pc, #108]	@ (8000904 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000896:	6819      	ldr	r1, [r3, #0]
 8000898:	4b1c      	ldr	r3, [pc, #112]	@ (800090c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800089a:	fba3 2301 	umull	r2, r3, r3, r1
 800089e:	08da      	lsrs	r2, r3, #3
 80008a0:	4613      	mov	r3, r2
 80008a2:	009b      	lsls	r3, r3, #2
 80008a4:	4413      	add	r3, r2
 80008a6:	005b      	lsls	r3, r3, #1
 80008a8:	1aca      	subs	r2, r1, r3
 80008aa:	2a00      	cmp	r2, #0
 80008ac:	d102      	bne.n	80008b4 <HAL_TIM_PeriodElapsedCallback+0x4c>
		{
			f10ms = true;
 80008ae:	4b18      	ldr	r3, [pc, #96]	@ (8000910 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80008b0:	2201      	movs	r2, #1
 80008b2:	701a      	strb	r2, [r3, #0]
		}

		if (cnt1ms%100 == 0)
 80008b4:	4b13      	ldr	r3, [pc, #76]	@ (8000904 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80008b6:	681a      	ldr	r2, [r3, #0]
 80008b8:	4b16      	ldr	r3, [pc, #88]	@ (8000914 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80008ba:	fba3 1302 	umull	r1, r3, r3, r2
 80008be:	095b      	lsrs	r3, r3, #5
 80008c0:	2164      	movs	r1, #100	@ 0x64
 80008c2:	fb01 f303 	mul.w	r3, r1, r3
 80008c6:	1ad3      	subs	r3, r2, r3
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d102      	bne.n	80008d2 <HAL_TIM_PeriodElapsedCallback+0x6a>
		{
			f100ms = true;
 80008cc:	4b12      	ldr	r3, [pc, #72]	@ (8000918 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	701a      	strb	r2, [r3, #0]
		}

		if (cnt1ms%1000 == 0)
 80008d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000904 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80008d4:	681a      	ldr	r2, [r3, #0]
 80008d6:	4b11      	ldr	r3, [pc, #68]	@ (800091c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80008d8:	fba3 1302 	umull	r1, r3, r3, r2
 80008dc:	099b      	lsrs	r3, r3, #6
 80008de:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80008e2:	fb01 f303 	mul.w	r3, r1, r3
 80008e6:	1ad3      	subs	r3, r2, r3
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d102      	bne.n	80008f2 <HAL_TIM_PeriodElapsedCallback+0x8a>
		{
			f1000ms = true;
 80008ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000920 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80008ee:	2201      	movs	r2, #1
 80008f0:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80008f2:	bf00      	nop
 80008f4:	370c      	adds	r7, #12
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	24000470 	.word	0x24000470
 8000904:	24000474 	.word	0x24000474
 8000908:	2400046c 	.word	0x2400046c
 800090c:	cccccccd 	.word	0xcccccccd
 8000910:	24000471 	.word	0x24000471
 8000914:	51eb851f 	.word	0x51eb851f
 8000918:	24000472 	.word	0x24000472
 800091c:	10624dd3 	.word	0x10624dd3
 8000920:	24000473 	.word	0x24000473

08000924 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	f5ad 7d0c 	sub.w	sp, sp, #560	@ 0x230
 800092a:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800092c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000930:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000934:	bf00      	nop
 8000936:	4b9b      	ldr	r3, [pc, #620]	@ (8000ba4 <main+0x280>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800093e:	2b00      	cmp	r3, #0
 8000940:	d006      	beq.n	8000950 <main+0x2c>
 8000942:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8000946:	1e5a      	subs	r2, r3, #1
 8000948:	f8c7 222c 	str.w	r2, [r7, #556]	@ 0x22c
 800094c:	2b00      	cmp	r3, #0
 800094e:	dcf2      	bgt.n	8000936 <main+0x12>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000950:	f001 fcd0 	bl	80022f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000954:	f000 f944 	bl	8000be0 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000958:	4b92      	ldr	r3, [pc, #584]	@ (8000ba4 <main+0x280>)
 800095a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800095e:	4a91      	ldr	r2, [pc, #580]	@ (8000ba4 <main+0x280>)
 8000960:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000964:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000968:	4b8e      	ldr	r3, [pc, #568]	@ (8000ba4 <main+0x280>)
 800096a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800096e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000972:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
 8000976:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800097a:	2000      	movs	r0, #0
 800097c:	f006 fc74 	bl	8007268 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000980:	2100      	movs	r1, #0
 8000982:	2000      	movs	r0, #0
 8000984:	f006 fc8a 	bl	800729c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000988:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800098c:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000990:	bf00      	nop
 8000992:	4b84      	ldr	r3, [pc, #528]	@ (8000ba4 <main+0x280>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800099a:	2b00      	cmp	r3, #0
 800099c:	d106      	bne.n	80009ac <main+0x88>
 800099e:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 80009a2:	1e5a      	subs	r2, r3, #1
 80009a4:	f8c7 222c 	str.w	r2, [r7, #556]	@ 0x22c
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	dcf2      	bgt.n	8000992 <main+0x6e>
if ( timeout < 0 )
 80009ac:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	da01      	bge.n	80009b8 <main+0x94>
{
Error_Handler();
 80009b4:	f000 fce8 	bl	8001388 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009b8:	f000 fbe4 	bl	8001184 <MX_GPIO_Init>
  MX_DMA_Init();
 80009bc:	f000 fbc2 	bl	8001144 <MX_DMA_Init>
  MX_SPI1_Init();
 80009c0:	f000 fad0 	bl	8000f64 <MX_SPI1_Init>
  MX_TIM2_Init();
 80009c4:	f000 fb24 	bl	8001010 <MX_TIM2_Init>
  MX_ADC1_Init();
 80009c8:	f000 f986 	bl	8000cd8 <MX_ADC1_Init>
  MX_UART4_Init();
 80009cc:	f000 fb6e 	bl	80010ac <MX_UART4_Init>
  /* USER CODE BEGIN 2 */


  HAL_TIM_Base_Start_IT(&htim2);
 80009d0:	4875      	ldr	r0, [pc, #468]	@ (8000ba8 <main+0x284>)
 80009d2:	f00a fb4b 	bl	800b06c <HAL_TIM_Base_Start_IT>

  InitPT();
 80009d6:	f000 fcdd 	bl	8001394 <InitPT>
  InitTMTC();
 80009da:	f001 f975 	bl	8001cc8 <InitTMTC>


  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80009de:	2000      	movs	r0, #0
 80009e0:	f001 fa32 	bl	8001e48 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 80009e4:	2001      	movs	r0, #1
 80009e6:	f001 fa2f 	bl	8001e48 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80009ea:	2002      	movs	r0, #2
 80009ec:	f001 fa2c 	bl	8001e48 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80009f0:	2101      	movs	r1, #1
 80009f2:	2000      	movs	r0, #0
 80009f4:	f001 fb1c 	bl	8002030 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80009f8:	4b6c      	ldr	r3, [pc, #432]	@ (8000bac <main+0x288>)
 80009fa:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009fe:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000a00:	4b6a      	ldr	r3, [pc, #424]	@ (8000bac <main+0x288>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000a06:	4b69      	ldr	r3, [pc, #420]	@ (8000bac <main+0x288>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000a0c:	4b67      	ldr	r3, [pc, #412]	@ (8000bac <main+0x288>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000a12:	4b66      	ldr	r3, [pc, #408]	@ (8000bac <main+0x288>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000a18:	4964      	ldr	r1, [pc, #400]	@ (8000bac <main+0x288>)
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	f001 fb8c 	bl	8002138 <BSP_COM_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <main+0x106>
  {
    Error_Handler();
 8000a26:	f000 fcaf 	bl	8001388 <Error_Handler>
  }

  /* USER CODE BEGIN BSP */
  /* -- Sample board code to send message over COM1 port ---- */
  printf("Welcome to STM32 world !\n\r");
 8000a2a:	4861      	ldr	r0, [pc, #388]	@ (8000bb0 <main+0x28c>)
 8000a2c:	f00e f974 	bl	800ed18 <iprintf>
  /* -- Sample board code to switch on leds ---- */
  BSP_LED_On(LED_GREEN);
 8000a30:	2000      	movs	r0, #0
 8000a32:	f001 fa7f 	bl	8001f34 <BSP_LED_On>
  BSP_LED_On(LED_YELLOW);
 8000a36:	2001      	movs	r0, #1
 8000a38:	f001 fa7c 	bl	8001f34 <BSP_LED_On>
  BSP_LED_Off(LED_RED);
 8000a3c:	2002      	movs	r0, #2
 8000a3e:	f001 faa3 	bl	8001f88 <BSP_LED_Off>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (fTC == true)
 8000a42:	4b5c      	ldr	r3, [pc, #368]	@ (8000bb4 <main+0x290>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	2b01      	cmp	r3, #1
 8000a48:	d105      	bne.n	8000a56 <main+0x132>
	  {
		  fTC = false;
 8000a4a:	4b5a      	ldr	r3, [pc, #360]	@ (8000bb4 <main+0x290>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	701a      	strb	r2, [r3, #0]

		  SVCmdDecoding(sv);
 8000a50:	4859      	ldr	r0, [pc, #356]	@ (8000bb8 <main+0x294>)
 8000a52:	f001 f977 	bl	8001d44 <SVCmdDecoding>

	  } // if (fTC == true)

	  if (f10ms == true)
 8000a56:	4b59      	ldr	r3, [pc, #356]	@ (8000bbc <main+0x298>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	f040 8096 	bne.w	8000b8c <main+0x268>
	  {
		  f10ms = false;
 8000a60:	4b56      	ldr	r3, [pc, #344]	@ (8000bbc <main+0x298>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	701a      	strb	r2, [r3, #0]

		  uint8_t tx_buf[512]={0};
 8000a66:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8000a6a:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a74:	461a      	mov	r2, r3
 8000a76:	2100      	movs	r1, #0
 8000a78:	f00e fa5a 	bl	800ef30 <memset>
		  uint8_t temp_buf[32]={0};
 8000a7c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8000a80:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8000a84:	4618      	mov	r0, r3
 8000a86:	2320      	movs	r3, #32
 8000a88:	461a      	mov	r2, r3
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	f00e fa50 	bl	800ef30 <memset>

		  SVUpdate(sv);
 8000a90:	4849      	ldr	r0, [pc, #292]	@ (8000bb8 <main+0x294>)
 8000a92:	f000 fc91 	bl	80013b8 <SVUpdate>

		  sprintf((char*)tx_buf,"IGRVT_SV,%lu",systemtick);
 8000a96:	4b4a      	ldr	r3, [pc, #296]	@ (8000bc0 <main+0x29c>)
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a9e:	4949      	ldr	r1, [pc, #292]	@ (8000bc4 <main+0x2a0>)
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f00e f94b 	bl	800ed3c <siprintf>
		  for (uint8_t i = 0; i < MAX_SV_NUM; i++)
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
 8000aac:	e015      	b.n	8000ada <main+0x1b6>
		  {
			  sprintf((char*)temp_buf,",%u",sv[i]);
 8000aae:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
 8000ab2:	4a41      	ldr	r2, [pc, #260]	@ (8000bb8 <main+0x294>)
 8000ab4:	5cd3      	ldrb	r3, [r2, r3]
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	1d3b      	adds	r3, r7, #4
 8000aba:	4943      	ldr	r1, [pc, #268]	@ (8000bc8 <main+0x2a4>)
 8000abc:	4618      	mov	r0, r3
 8000abe:	f00e f93d 	bl	800ed3c <siprintf>
			  strcat((char*)tx_buf,(char*)temp_buf);
 8000ac2:	1d3a      	adds	r2, r7, #4
 8000ac4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ac8:	4611      	mov	r1, r2
 8000aca:	4618      	mov	r0, r3
 8000acc:	f00e fa38 	bl	800ef40 <strcat>
		  for (uint8_t i = 0; i < MAX_SV_NUM; i++)
 8000ad0:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
 8000ada:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
 8000ade:	2b09      	cmp	r3, #9
 8000ae0:	d9e5      	bls.n	8000aae <main+0x18a>
		  }
		  sprintf((char*)temp_buf,"\n\r");
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	4939      	ldr	r1, [pc, #228]	@ (8000bcc <main+0x2a8>)
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f00e f928 	bl	800ed3c <siprintf>
		  strcat((char*)tx_buf,(char*)temp_buf);
 8000aec:	1d3a      	adds	r2, r7, #4
 8000aee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000af2:	4611      	mov	r1, r2
 8000af4:	4618      	mov	r0, r3
 8000af6:	f00e fa23 	bl	800ef40 <strcat>

		  SendTM(tx_buf);
 8000afa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000afe:	4618      	mov	r0, r3
 8000b00:	f001 f908 	bl	8001d14 <SendTM>

		  //GetTemp(TC);

		  sprintf((char*)tx_buf,"IGRVT_TC,%lu",systemtick);
 8000b04:	4b2e      	ldr	r3, [pc, #184]	@ (8000bc0 <main+0x29c>)
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b0c:	4930      	ldr	r1, [pc, #192]	@ (8000bd0 <main+0x2ac>)
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f00e f914 	bl	800ed3c <siprintf>
		  for (uint8_t i = 0; i < MAX_TC_CH; i++)
 8000b14:	2300      	movs	r3, #0
 8000b16:	f887 322a 	strb.w	r3, [r7, #554]	@ 0x22a
 8000b1a:	e01f      	b.n	8000b5c <main+0x238>
		  {
			  sprintf((char*)temp_buf,",%d",(int)(TC[i]*10.0));
 8000b1c:	f897 322a 	ldrb.w	r3, [r7, #554]	@ 0x22a
 8000b20:	4a2c      	ldr	r2, [pc, #176]	@ (8000bd4 <main+0x2b0>)
 8000b22:	00db      	lsls	r3, r3, #3
 8000b24:	4413      	add	r3, r2
 8000b26:	ed93 7b00 	vldr	d7, [r3]
 8000b2a:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8000b2e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000b32:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000b36:	1d3b      	adds	r3, r7, #4
 8000b38:	ee17 2a90 	vmov	r2, s15
 8000b3c:	4926      	ldr	r1, [pc, #152]	@ (8000bd8 <main+0x2b4>)
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f00e f8fc 	bl	800ed3c <siprintf>
			  strcat((char*)tx_buf,(char*)temp_buf);
 8000b44:	1d3a      	adds	r2, r7, #4
 8000b46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b4a:	4611      	mov	r1, r2
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f00e f9f7 	bl	800ef40 <strcat>
		  for (uint8_t i = 0; i < MAX_TC_CH; i++)
 8000b52:	f897 322a 	ldrb.w	r3, [r7, #554]	@ 0x22a
 8000b56:	3301      	adds	r3, #1
 8000b58:	f887 322a 	strb.w	r3, [r7, #554]	@ 0x22a
 8000b5c:	f897 322a 	ldrb.w	r3, [r7, #554]	@ 0x22a
 8000b60:	2b0b      	cmp	r3, #11
 8000b62:	d9db      	bls.n	8000b1c <main+0x1f8>
		  }
		  sprintf((char*)temp_buf,"\n\r");
 8000b64:	1d3b      	adds	r3, r7, #4
 8000b66:	4919      	ldr	r1, [pc, #100]	@ (8000bcc <main+0x2a8>)
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f00e f8e7 	bl	800ed3c <siprintf>
		  strcat((char*)tx_buf,(char*)temp_buf);
 8000b6e:	1d3a      	adds	r2, r7, #4
 8000b70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b74:	4611      	mov	r1, r2
 8000b76:	4618      	mov	r0, r3
 8000b78:	f00e f9e2 	bl	800ef40 <strcat>

		  SendTM(tx_buf);
 8000b7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b80:	4618      	mov	r0, r3
 8000b82:	f001 f8c7 	bl	8001d14 <SendTM>
//		  sprintf((char*)temp_buf,"\n\r");
//		  strcat((char*)tx_buf,(char*)temp_buf);
//
//		  SendTM(tx_buf);

		  BSP_LED_Toggle(LED_YELLOW);
 8000b86:	2001      	movs	r0, #1
 8000b88:	f001 fa28 	bl	8001fdc <BSP_LED_Toggle>
	  } //if (f10ms == true)

	  if (f1000ms == true)
 8000b8c:	4b13      	ldr	r3, [pc, #76]	@ (8000bdc <main+0x2b8>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	f47f af56 	bne.w	8000a42 <main+0x11e>
	  {
		  f1000ms = false;//
 8000b96:	4b11      	ldr	r3, [pc, #68]	@ (8000bdc <main+0x2b8>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	701a      	strb	r2, [r3, #0]
		  BSP_LED_Toggle(LED_RED);
 8000b9c:	2002      	movs	r0, #2
 8000b9e:	f001 fa1d 	bl	8001fdc <BSP_LED_Toggle>
	  if (fTC == true)
 8000ba2:	e74e      	b.n	8000a42 <main+0x11e>
 8000ba4:	58024400 	.word	0x58024400
 8000ba8:	2400038c 	.word	0x2400038c
 8000bac:	24000214 	.word	0x24000214
 8000bb0:	08010fb0 	.word	0x08010fb0
 8000bb4:	24000504 	.word	0x24000504
 8000bb8:	240004d8 	.word	0x240004d8
 8000bbc:	24000471 	.word	0x24000471
 8000bc0:	2400046c 	.word	0x2400046c
 8000bc4:	08010fcc 	.word	0x08010fcc
 8000bc8:	08010fdc 	.word	0x08010fdc
 8000bcc:	08010fe0 	.word	0x08010fe0
 8000bd0:	08010fe4 	.word	0x08010fe4
 8000bd4:	24000478 	.word	0x24000478
 8000bd8:	08010ff4 	.word	0x08010ff4
 8000bdc:	24000473 	.word	0x24000473

08000be0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b09c      	sub	sp, #112	@ 0x70
 8000be4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000be6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bea:	224c      	movs	r2, #76	@ 0x4c
 8000bec:	2100      	movs	r1, #0
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f00e f99e 	bl	800ef30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bf4:	1d3b      	adds	r3, r7, #4
 8000bf6:	2220      	movs	r2, #32
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f00e f998 	bl	800ef30 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000c00:	2004      	movs	r0, #4
 8000c02:	f006 fb5f 	bl	80072c4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c06:	2300      	movs	r3, #0
 8000c08:	603b      	str	r3, [r7, #0]
 8000c0a:	4b31      	ldr	r3, [pc, #196]	@ (8000cd0 <SystemClock_Config+0xf0>)
 8000c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c0e:	4a30      	ldr	r2, [pc, #192]	@ (8000cd0 <SystemClock_Config+0xf0>)
 8000c10:	f023 0301 	bic.w	r3, r3, #1
 8000c14:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000c16:	4b2e      	ldr	r3, [pc, #184]	@ (8000cd0 <SystemClock_Config+0xf0>)
 8000c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	603b      	str	r3, [r7, #0]
 8000c20:	4b2c      	ldr	r3, [pc, #176]	@ (8000cd4 <SystemClock_Config+0xf4>)
 8000c22:	699b      	ldr	r3, [r3, #24]
 8000c24:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000c28:	4a2a      	ldr	r2, [pc, #168]	@ (8000cd4 <SystemClock_Config+0xf4>)
 8000c2a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c2e:	6193      	str	r3, [r2, #24]
 8000c30:	4b28      	ldr	r3, [pc, #160]	@ (8000cd4 <SystemClock_Config+0xf4>)
 8000c32:	699b      	ldr	r3, [r3, #24]
 8000c34:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c38:	603b      	str	r3, [r7, #0]
 8000c3a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c3c:	bf00      	nop
 8000c3e:	4b25      	ldr	r3, [pc, #148]	@ (8000cd4 <SystemClock_Config+0xf4>)
 8000c40:	699b      	ldr	r3, [r3, #24]
 8000c42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c4a:	d1f8      	bne.n	8000c3e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000c50:	2301      	movs	r3, #1
 8000c52:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c54:	2340      	movs	r3, #64	@ 0x40
 8000c56:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c60:	2304      	movs	r3, #4
 8000c62:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000c64:	230a      	movs	r3, #10
 8000c66:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c70:	2302      	movs	r3, #2
 8000c72:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c74:	230c      	movs	r3, #12
 8000c76:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c84:	4618      	mov	r0, r3
 8000c86:	f006 fb77 	bl	8007378 <HAL_RCC_OscConfig>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000c90:	f000 fb7a 	bl	8001388 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c94:	233f      	movs	r3, #63	@ 0x3f
 8000c96:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ca8:	2340      	movs	r3, #64	@ 0x40
 8000caa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000cac:	2300      	movs	r3, #0
 8000cae:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000cb4:	1d3b      	adds	r3, r7, #4
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f006 ffb7 	bl	8007c2c <HAL_RCC_ClockConfig>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000cc4:	f000 fb60 	bl	8001388 <Error_Handler>
  }
}
 8000cc8:	bf00      	nop
 8000cca:	3770      	adds	r7, #112	@ 0x70
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	58000400 	.word	0x58000400
 8000cd4:	58024800 	.word	0x58024800

08000cd8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b08a      	sub	sp, #40	@ 0x28
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000cde:	f107 031c 	add.w	r3, r7, #28
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000cea:	463b      	mov	r3, r7
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]
 8000cf8:	615a      	str	r2, [r3, #20]
 8000cfa:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000cfc:	4b8a      	ldr	r3, [pc, #552]	@ (8000f28 <MX_ADC1_Init+0x250>)
 8000cfe:	4a8b      	ldr	r2, [pc, #556]	@ (8000f2c <MX_ADC1_Init+0x254>)
 8000d00:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV64;
 8000d02:	4b89      	ldr	r3, [pc, #548]	@ (8000f28 <MX_ADC1_Init+0x250>)
 8000d04:	f44f 1210 	mov.w	r2, #2359296	@ 0x240000
 8000d08:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d0a:	4b87      	ldr	r3, [pc, #540]	@ (8000f28 <MX_ADC1_Init+0x250>)
 8000d0c:	2208      	movs	r2, #8
 8000d0e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000d10:	4b85      	ldr	r3, [pc, #532]	@ (8000f28 <MX_ADC1_Init+0x250>)
 8000d12:	2201      	movs	r2, #1
 8000d14:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000d16:	4b84      	ldr	r3, [pc, #528]	@ (8000f28 <MX_ADC1_Init+0x250>)
 8000d18:	2208      	movs	r2, #8
 8000d1a:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d1c:	4b82      	ldr	r3, [pc, #520]	@ (8000f28 <MX_ADC1_Init+0x250>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d22:	4b81      	ldr	r3, [pc, #516]	@ (8000f28 <MX_ADC1_Init+0x250>)
 8000d24:	2201      	movs	r2, #1
 8000d26:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 13;
 8000d28:	4b7f      	ldr	r3, [pc, #508]	@ (8000f28 <MX_ADC1_Init+0x250>)
 8000d2a:	220d      	movs	r2, #13
 8000d2c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d2e:	4b7e      	ldr	r3, [pc, #504]	@ (8000f28 <MX_ADC1_Init+0x250>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d34:	4b7c      	ldr	r3, [pc, #496]	@ (8000f28 <MX_ADC1_Init+0x250>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d3a:	4b7b      	ldr	r3, [pc, #492]	@ (8000f28 <MX_ADC1_Init+0x250>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000d40:	4b79      	ldr	r3, [pc, #484]	@ (8000f28 <MX_ADC1_Init+0x250>)
 8000d42:	2203      	movs	r2, #3
 8000d44:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d46:	4b78      	ldr	r3, [pc, #480]	@ (8000f28 <MX_ADC1_Init+0x250>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000d4c:	4b76      	ldr	r3, [pc, #472]	@ (8000f28 <MX_ADC1_Init+0x250>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000d52:	4b75      	ldr	r3, [pc, #468]	@ (8000f28 <MX_ADC1_Init+0x250>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8000d5a:	4b73      	ldr	r3, [pc, #460]	@ (8000f28 <MX_ADC1_Init+0x250>)
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d60:	4871      	ldr	r0, [pc, #452]	@ (8000f28 <MX_ADC1_Init+0x250>)
 8000d62:	f001 fdb7 	bl	80028d4 <HAL_ADC_Init>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000d6c:	f000 fb0c 	bl	8001388 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d70:	2300      	movs	r3, #0
 8000d72:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d74:	f107 031c 	add.w	r3, r7, #28
 8000d78:	4619      	mov	r1, r3
 8000d7a:	486b      	ldr	r0, [pc, #428]	@ (8000f28 <MX_ADC1_Init+0x250>)
 8000d7c:	f002 ffe4 	bl	8003d48 <HAL_ADCEx_MultiModeConfigChannel>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000d86:	f000 faff 	bl	8001388 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000d8a:	4b69      	ldr	r3, [pc, #420]	@ (8000f30 <MX_ADC1_Init+0x258>)
 8000d8c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d8e:	2306      	movs	r3, #6
 8000d90:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8000d92:	2303      	movs	r3, #3
 8000d94:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d96:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000d9a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d9c:	2304      	movs	r3, #4
 8000d9e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000da0:	2300      	movs	r3, #0
 8000da2:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000da4:	2300      	movs	r3, #0
 8000da6:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000da8:	463b      	mov	r3, r7
 8000daa:	4619      	mov	r1, r3
 8000dac:	485e      	ldr	r0, [pc, #376]	@ (8000f28 <MX_ADC1_Init+0x250>)
 8000dae:	f002 fa59 	bl	8003264 <HAL_ADC_ConfigChannel>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000db8:	f000 fae6 	bl	8001388 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000dbc:	4b5d      	ldr	r3, [pc, #372]	@ (8000f34 <MX_ADC1_Init+0x25c>)
 8000dbe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000dc0:	230c      	movs	r3, #12
 8000dc2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dc4:	463b      	mov	r3, r7
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4857      	ldr	r0, [pc, #348]	@ (8000f28 <MX_ADC1_Init+0x250>)
 8000dca:	f002 fa4b 	bl	8003264 <HAL_ADC_ConfigChannel>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000dd4:	f000 fad8 	bl	8001388 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000dd8:	4b57      	ldr	r3, [pc, #348]	@ (8000f38 <MX_ADC1_Init+0x260>)
 8000dda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000ddc:	2312      	movs	r3, #18
 8000dde:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000de0:	463b      	mov	r3, r7
 8000de2:	4619      	mov	r1, r3
 8000de4:	4850      	ldr	r0, [pc, #320]	@ (8000f28 <MX_ADC1_Init+0x250>)
 8000de6:	f002 fa3d 	bl	8003264 <HAL_ADC_ConfigChannel>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000df0:	f000 faca 	bl	8001388 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000df4:	4b51      	ldr	r3, [pc, #324]	@ (8000f3c <MX_ADC1_Init+0x264>)
 8000df6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000df8:	2318      	movs	r3, #24
 8000dfa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dfc:	463b      	mov	r3, r7
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4849      	ldr	r0, [pc, #292]	@ (8000f28 <MX_ADC1_Init+0x250>)
 8000e02:	f002 fa2f 	bl	8003264 <HAL_ADC_ConfigChannel>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8000e0c:	f000 fabc 	bl	8001388 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000e10:	4b4b      	ldr	r3, [pc, #300]	@ (8000f40 <MX_ADC1_Init+0x268>)
 8000e12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000e14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e18:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e1a:	463b      	mov	r3, r7
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4842      	ldr	r0, [pc, #264]	@ (8000f28 <MX_ADC1_Init+0x250>)
 8000e20:	f002 fa20 	bl	8003264 <HAL_ADC_ConfigChannel>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_ADC1_Init+0x156>
  {
    Error_Handler();
 8000e2a:	f000 faad 	bl	8001388 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000e2e:	4b45      	ldr	r3, [pc, #276]	@ (8000f44 <MX_ADC1_Init+0x26c>)
 8000e30:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000e32:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8000e36:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e38:	463b      	mov	r3, r7
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	483a      	ldr	r0, [pc, #232]	@ (8000f28 <MX_ADC1_Init+0x250>)
 8000e3e:	f002 fa11 	bl	8003264 <HAL_ADC_ConfigChannel>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_ADC1_Init+0x174>
  {
    Error_Handler();
 8000e48:	f000 fa9e 	bl	8001388 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000e4c:	4b3e      	ldr	r3, [pc, #248]	@ (8000f48 <MX_ADC1_Init+0x270>)
 8000e4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000e50:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 8000e54:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e56:	463b      	mov	r3, r7
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4833      	ldr	r0, [pc, #204]	@ (8000f28 <MX_ADC1_Init+0x250>)
 8000e5c:	f002 fa02 	bl	8003264 <HAL_ADC_ConfigChannel>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_ADC1_Init+0x192>
  {
    Error_Handler();
 8000e66:	f000 fa8f 	bl	8001388 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000e6a:	4b38      	ldr	r3, [pc, #224]	@ (8000f4c <MX_ADC1_Init+0x274>)
 8000e6c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000e6e:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8000e72:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e74:	463b      	mov	r3, r7
 8000e76:	4619      	mov	r1, r3
 8000e78:	482b      	ldr	r0, [pc, #172]	@ (8000f28 <MX_ADC1_Init+0x250>)
 8000e7a:	f002 f9f3 	bl	8003264 <HAL_ADC_ConfigChannel>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_ADC1_Init+0x1b0>
  {
    Error_Handler();
 8000e84:	f000 fa80 	bl	8001388 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000e88:	4b31      	ldr	r3, [pc, #196]	@ (8000f50 <MX_ADC1_Init+0x278>)
 8000e8a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000e8c:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8000e90:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e92:	463b      	mov	r3, r7
 8000e94:	4619      	mov	r1, r3
 8000e96:	4824      	ldr	r0, [pc, #144]	@ (8000f28 <MX_ADC1_Init+0x250>)
 8000e98:	f002 f9e4 	bl	8003264 <HAL_ADC_ConfigChannel>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_ADC1_Init+0x1ce>
  {
    Error_Handler();
 8000ea2:	f000 fa71 	bl	8001388 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000ea6:	4b2b      	ldr	r3, [pc, #172]	@ (8000f54 <MX_ADC1_Init+0x27c>)
 8000ea8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000eaa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000eae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eb0:	463b      	mov	r3, r7
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	481c      	ldr	r0, [pc, #112]	@ (8000f28 <MX_ADC1_Init+0x250>)
 8000eb6:	f002 f9d5 	bl	8003264 <HAL_ADC_ConfigChannel>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_ADC1_Init+0x1ec>
  {
    Error_Handler();
 8000ec0:	f000 fa62 	bl	8001388 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8000ec4:	4b24      	ldr	r3, [pc, #144]	@ (8000f58 <MX_ADC1_Init+0x280>)
 8000ec6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8000ec8:	f240 2306 	movw	r3, #518	@ 0x206
 8000ecc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ece:	463b      	mov	r3, r7
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4815      	ldr	r0, [pc, #84]	@ (8000f28 <MX_ADC1_Init+0x250>)
 8000ed4:	f002 f9c6 	bl	8003264 <HAL_ADC_ConfigChannel>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_ADC1_Init+0x20a>
  {
    Error_Handler();
 8000ede:	f000 fa53 	bl	8001388 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 8000ee2:	4b1e      	ldr	r3, [pc, #120]	@ (8000f5c <MX_ADC1_Init+0x284>)
 8000ee4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8000ee6:	f44f 7303 	mov.w	r3, #524	@ 0x20c
 8000eea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eec:	463b      	mov	r3, r7
 8000eee:	4619      	mov	r1, r3
 8000ef0:	480d      	ldr	r0, [pc, #52]	@ (8000f28 <MX_ADC1_Init+0x250>)
 8000ef2:	f002 f9b7 	bl	8003264 <HAL_ADC_ConfigChannel>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_ADC1_Init+0x228>
  {
    Error_Handler();
 8000efc:	f000 fa44 	bl	8001388 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 8000f00:	4b17      	ldr	r3, [pc, #92]	@ (8000f60 <MX_ADC1_Init+0x288>)
 8000f02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8000f04:	f240 2312 	movw	r3, #530	@ 0x212
 8000f08:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f0a:	463b      	mov	r3, r7
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4806      	ldr	r0, [pc, #24]	@ (8000f28 <MX_ADC1_Init+0x250>)
 8000f10:	f002 f9a8 	bl	8003264 <HAL_ADC_ConfigChannel>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_ADC1_Init+0x246>
  {
    Error_Handler();
 8000f1a:	f000 fa35 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f1e:	bf00      	nop
 8000f20:	3728      	adds	r7, #40	@ 0x28
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	24000228 	.word	0x24000228
 8000f2c:	40022000 	.word	0x40022000
 8000f30:	08600004 	.word	0x08600004
 8000f34:	0c900008 	.word	0x0c900008
 8000f38:	10c00010 	.word	0x10c00010
 8000f3c:	1d500080 	.word	0x1d500080
 8000f40:	21800100 	.word	0x21800100
 8000f44:	2a000400 	.word	0x2a000400
 8000f48:	2e300800 	.word	0x2e300800
 8000f4c:	3ac04000 	.word	0x3ac04000
 8000f50:	3ef08000 	.word	0x3ef08000
 8000f54:	43210000 	.word	0x43210000
 8000f58:	47520000 	.word	0x47520000
 8000f5c:	4b840000 	.word	0x4b840000
 8000f60:	4fb80000 	.word	0x4fb80000

08000f64 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f68:	4b27      	ldr	r3, [pc, #156]	@ (8001008 <MX_SPI1_Init+0xa4>)
 8000f6a:	4a28      	ldr	r2, [pc, #160]	@ (800100c <MX_SPI1_Init+0xa8>)
 8000f6c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f6e:	4b26      	ldr	r3, [pc, #152]	@ (8001008 <MX_SPI1_Init+0xa4>)
 8000f70:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000f74:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f76:	4b24      	ldr	r3, [pc, #144]	@ (8001008 <MX_SPI1_Init+0xa4>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f7c:	4b22      	ldr	r3, [pc, #136]	@ (8001008 <MX_SPI1_Init+0xa4>)
 8000f7e:	2207      	movs	r2, #7
 8000f80:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f82:	4b21      	ldr	r3, [pc, #132]	@ (8001008 <MX_SPI1_Init+0xa4>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f88:	4b1f      	ldr	r3, [pc, #124]	@ (8001008 <MX_SPI1_Init+0xa4>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f8e:	4b1e      	ldr	r3, [pc, #120]	@ (8001008 <MX_SPI1_Init+0xa4>)
 8000f90:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000f94:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000f96:	4b1c      	ldr	r3, [pc, #112]	@ (8001008 <MX_SPI1_Init+0xa4>)
 8000f98:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f9c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f9e:	4b1a      	ldr	r3, [pc, #104]	@ (8001008 <MX_SPI1_Init+0xa4>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fa4:	4b18      	ldr	r3, [pc, #96]	@ (8001008 <MX_SPI1_Init+0xa4>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000faa:	4b17      	ldr	r3, [pc, #92]	@ (8001008 <MX_SPI1_Init+0xa4>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000fb0:	4b15      	ldr	r3, [pc, #84]	@ (8001008 <MX_SPI1_Init+0xa4>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fb6:	4b14      	ldr	r3, [pc, #80]	@ (8001008 <MX_SPI1_Init+0xa4>)
 8000fb8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fbc:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000fbe:	4b12      	ldr	r3, [pc, #72]	@ (8001008 <MX_SPI1_Init+0xa4>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000fc4:	4b10      	ldr	r3, [pc, #64]	@ (8001008 <MX_SPI1_Init+0xa4>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000fca:	4b0f      	ldr	r3, [pc, #60]	@ (8001008 <MX_SPI1_Init+0xa4>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000fd0:	4b0d      	ldr	r3, [pc, #52]	@ (8001008 <MX_SPI1_Init+0xa4>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000fd6:	4b0c      	ldr	r3, [pc, #48]	@ (8001008 <MX_SPI1_Init+0xa4>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000fdc:	4b0a      	ldr	r3, [pc, #40]	@ (8001008 <MX_SPI1_Init+0xa4>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000fe2:	4b09      	ldr	r3, [pc, #36]	@ (8001008 <MX_SPI1_Init+0xa4>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000fe8:	4b07      	ldr	r3, [pc, #28]	@ (8001008 <MX_SPI1_Init+0xa4>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000fee:	4b06      	ldr	r3, [pc, #24]	@ (8001008 <MX_SPI1_Init+0xa4>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ff4:	4804      	ldr	r0, [pc, #16]	@ (8001008 <MX_SPI1_Init+0xa4>)
 8000ff6:	f009 fea3 	bl	800ad40 <HAL_SPI_Init>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001000:	f000 f9c2 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}
 8001008:	24000304 	.word	0x24000304
 800100c:	40013000 	.word	0x40013000

08001010 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b088      	sub	sp, #32
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001016:	f107 0310 	add.w	r3, r7, #16
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	605a      	str	r2, [r3, #4]
 8001020:	609a      	str	r2, [r3, #8]
 8001022:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001024:	1d3b      	adds	r3, r7, #4
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800102e:	4b1e      	ldr	r3, [pc, #120]	@ (80010a8 <MX_TIM2_Init+0x98>)
 8001030:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001034:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 8001036:	4b1c      	ldr	r3, [pc, #112]	@ (80010a8 <MX_TIM2_Init+0x98>)
 8001038:	223f      	movs	r2, #63	@ 0x3f
 800103a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800103c:	4b1a      	ldr	r3, [pc, #104]	@ (80010a8 <MX_TIM2_Init+0x98>)
 800103e:	2200      	movs	r2, #0
 8001040:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001042:	4b19      	ldr	r3, [pc, #100]	@ (80010a8 <MX_TIM2_Init+0x98>)
 8001044:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001048:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800104a:	4b17      	ldr	r3, [pc, #92]	@ (80010a8 <MX_TIM2_Init+0x98>)
 800104c:	2200      	movs	r2, #0
 800104e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001050:	4b15      	ldr	r3, [pc, #84]	@ (80010a8 <MX_TIM2_Init+0x98>)
 8001052:	2200      	movs	r2, #0
 8001054:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001056:	4814      	ldr	r0, [pc, #80]	@ (80010a8 <MX_TIM2_Init+0x98>)
 8001058:	f009 ffb1 	bl	800afbe <HAL_TIM_Base_Init>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001062:	f000 f991 	bl	8001388 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001066:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800106a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800106c:	f107 0310 	add.w	r3, r7, #16
 8001070:	4619      	mov	r1, r3
 8001072:	480d      	ldr	r0, [pc, #52]	@ (80010a8 <MX_TIM2_Init+0x98>)
 8001074:	f00a f97a 	bl	800b36c <HAL_TIM_ConfigClockSource>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800107e:	f000 f983 	bl	8001388 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001082:	2300      	movs	r3, #0
 8001084:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001086:	2300      	movs	r3, #0
 8001088:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800108a:	1d3b      	adds	r3, r7, #4
 800108c:	4619      	mov	r1, r3
 800108e:	4806      	ldr	r0, [pc, #24]	@ (80010a8 <MX_TIM2_Init+0x98>)
 8001090:	f00a fbca 	bl	800b828 <HAL_TIMEx_MasterConfigSynchronization>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800109a:	f000 f975 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800109e:	bf00      	nop
 80010a0:	3720      	adds	r7, #32
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	2400038c 	.word	0x2400038c

080010ac <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80010b0:	4b22      	ldr	r3, [pc, #136]	@ (800113c <MX_UART4_Init+0x90>)
 80010b2:	4a23      	ldr	r2, [pc, #140]	@ (8001140 <MX_UART4_Init+0x94>)
 80010b4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 921600;
 80010b6:	4b21      	ldr	r3, [pc, #132]	@ (800113c <MX_UART4_Init+0x90>)
 80010b8:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 80010bc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80010be:	4b1f      	ldr	r3, [pc, #124]	@ (800113c <MX_UART4_Init+0x90>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80010c4:	4b1d      	ldr	r3, [pc, #116]	@ (800113c <MX_UART4_Init+0x90>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80010ca:	4b1c      	ldr	r3, [pc, #112]	@ (800113c <MX_UART4_Init+0x90>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80010d0:	4b1a      	ldr	r3, [pc, #104]	@ (800113c <MX_UART4_Init+0x90>)
 80010d2:	220c      	movs	r2, #12
 80010d4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010d6:	4b19      	ldr	r3, [pc, #100]	@ (800113c <MX_UART4_Init+0x90>)
 80010d8:	2200      	movs	r2, #0
 80010da:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80010dc:	4b17      	ldr	r3, [pc, #92]	@ (800113c <MX_UART4_Init+0x90>)
 80010de:	2200      	movs	r2, #0
 80010e0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010e2:	4b16      	ldr	r3, [pc, #88]	@ (800113c <MX_UART4_Init+0x90>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010e8:	4b14      	ldr	r3, [pc, #80]	@ (800113c <MX_UART4_Init+0x90>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010ee:	4b13      	ldr	r3, [pc, #76]	@ (800113c <MX_UART4_Init+0x90>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80010f4:	4811      	ldr	r0, [pc, #68]	@ (800113c <MX_UART4_Init+0x90>)
 80010f6:	f00a fc43 	bl	800b980 <HAL_UART_Init>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001100:	f000 f942 	bl	8001388 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001104:	2100      	movs	r1, #0
 8001106:	480d      	ldr	r0, [pc, #52]	@ (800113c <MX_UART4_Init+0x90>)
 8001108:	f00c ffbb 	bl	800e082 <HAL_UARTEx_SetTxFifoThreshold>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001112:	f000 f939 	bl	8001388 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001116:	2100      	movs	r1, #0
 8001118:	4808      	ldr	r0, [pc, #32]	@ (800113c <MX_UART4_Init+0x90>)
 800111a:	f00c fff0 	bl	800e0fe <HAL_UARTEx_SetRxFifoThreshold>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001124:	f000 f930 	bl	8001388 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart4) != HAL_OK)
 8001128:	4804      	ldr	r0, [pc, #16]	@ (800113c <MX_UART4_Init+0x90>)
 800112a:	f00c ff6f 	bl	800e00c <HAL_UARTEx_EnableFifoMode>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001134:	f000 f928 	bl	8001388 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}
 800113c:	240003d8 	.word	0x240003d8
 8001140:	40004c00 	.word	0x40004c00

08001144 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800114a:	4b0d      	ldr	r3, [pc, #52]	@ (8001180 <MX_DMA_Init+0x3c>)
 800114c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001150:	4a0b      	ldr	r2, [pc, #44]	@ (8001180 <MX_DMA_Init+0x3c>)
 8001152:	f043 0301 	orr.w	r3, r3, #1
 8001156:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800115a:	4b09      	ldr	r3, [pc, #36]	@ (8001180 <MX_DMA_Init+0x3c>)
 800115c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001160:	f003 0301 	and.w	r3, r3, #1
 8001164:	607b      	str	r3, [r7, #4]
 8001166:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001168:	2200      	movs	r2, #0
 800116a:	2100      	movs	r1, #0
 800116c:	200b      	movs	r0, #11
 800116e:	f002 ffa4 	bl	80040ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001172:	200b      	movs	r0, #11
 8001174:	f002 ffbb 	bl	80040ee <HAL_NVIC_EnableIRQ>

}
 8001178:	bf00      	nop
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	58024400 	.word	0x58024400

08001184 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b08c      	sub	sp, #48	@ 0x30
 8001188:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118a:	f107 031c 	add.w	r3, r7, #28
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	605a      	str	r2, [r3, #4]
 8001194:	609a      	str	r2, [r3, #8]
 8001196:	60da      	str	r2, [r3, #12]
 8001198:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800119a:	4b6b      	ldr	r3, [pc, #428]	@ (8001348 <MX_GPIO_Init+0x1c4>)
 800119c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011a0:	4a69      	ldr	r2, [pc, #420]	@ (8001348 <MX_GPIO_Init+0x1c4>)
 80011a2:	f043 0310 	orr.w	r3, r3, #16
 80011a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011aa:	4b67      	ldr	r3, [pc, #412]	@ (8001348 <MX_GPIO_Init+0x1c4>)
 80011ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011b0:	f003 0310 	and.w	r3, r3, #16
 80011b4:	61bb      	str	r3, [r7, #24]
 80011b6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011b8:	4b63      	ldr	r3, [pc, #396]	@ (8001348 <MX_GPIO_Init+0x1c4>)
 80011ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011be:	4a62      	ldr	r2, [pc, #392]	@ (8001348 <MX_GPIO_Init+0x1c4>)
 80011c0:	f043 0320 	orr.w	r3, r3, #32
 80011c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011c8:	4b5f      	ldr	r3, [pc, #380]	@ (8001348 <MX_GPIO_Init+0x1c4>)
 80011ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011ce:	f003 0320 	and.w	r3, r3, #32
 80011d2:	617b      	str	r3, [r7, #20]
 80011d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d6:	4b5c      	ldr	r3, [pc, #368]	@ (8001348 <MX_GPIO_Init+0x1c4>)
 80011d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011dc:	4a5a      	ldr	r2, [pc, #360]	@ (8001348 <MX_GPIO_Init+0x1c4>)
 80011de:	f043 0304 	orr.w	r3, r3, #4
 80011e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011e6:	4b58      	ldr	r3, [pc, #352]	@ (8001348 <MX_GPIO_Init+0x1c4>)
 80011e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011ec:	f003 0304 	and.w	r3, r3, #4
 80011f0:	613b      	str	r3, [r7, #16]
 80011f2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f4:	4b54      	ldr	r3, [pc, #336]	@ (8001348 <MX_GPIO_Init+0x1c4>)
 80011f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011fa:	4a53      	ldr	r2, [pc, #332]	@ (8001348 <MX_GPIO_Init+0x1c4>)
 80011fc:	f043 0301 	orr.w	r3, r3, #1
 8001200:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001204:	4b50      	ldr	r3, [pc, #320]	@ (8001348 <MX_GPIO_Init+0x1c4>)
 8001206:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001212:	4b4d      	ldr	r3, [pc, #308]	@ (8001348 <MX_GPIO_Init+0x1c4>)
 8001214:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001218:	4a4b      	ldr	r2, [pc, #300]	@ (8001348 <MX_GPIO_Init+0x1c4>)
 800121a:	f043 0308 	orr.w	r3, r3, #8
 800121e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001222:	4b49      	ldr	r3, [pc, #292]	@ (8001348 <MX_GPIO_Init+0x1c4>)
 8001224:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001228:	f003 0308 	and.w	r3, r3, #8
 800122c:	60bb      	str	r3, [r7, #8]
 800122e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001230:	4b45      	ldr	r3, [pc, #276]	@ (8001348 <MX_GPIO_Init+0x1c4>)
 8001232:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001236:	4a44      	ldr	r2, [pc, #272]	@ (8001348 <MX_GPIO_Init+0x1c4>)
 8001238:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800123c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001240:	4b41      	ldr	r3, [pc, #260]	@ (8001348 <MX_GPIO_Init+0x1c4>)
 8001242:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001246:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800124a:	607b      	str	r3, [r7, #4]
 800124c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800124e:	4b3e      	ldr	r3, [pc, #248]	@ (8001348 <MX_GPIO_Init+0x1c4>)
 8001250:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001254:	4a3c      	ldr	r2, [pc, #240]	@ (8001348 <MX_GPIO_Init+0x1c4>)
 8001256:	f043 0302 	orr.w	r3, r3, #2
 800125a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800125e:	4b3a      	ldr	r3, [pc, #232]	@ (8001348 <MX_GPIO_Init+0x1c4>)
 8001260:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001264:	f003 0302 	and.w	r3, r3, #2
 8001268:	603b      	str	r3, [r7, #0]
 800126a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800126c:	2200      	movs	r2, #0
 800126e:	f64f 71fd 	movw	r1, #65533	@ 0xfffd
 8001272:	4836      	ldr	r0, [pc, #216]	@ (800134c <MX_GPIO_Init+0x1c8>)
 8001274:	f005 ffc4 	bl	8007200 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001278:	2200      	movs	r2, #0
 800127a:	f647 41ff 	movw	r1, #31999	@ 0x7cff
 800127e:	4834      	ldr	r0, [pc, #208]	@ (8001350 <MX_GPIO_Init+0x1cc>)
 8001280:	f005 ffbe 	bl	8007200 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001284:	2200      	movs	r2, #0
 8001286:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 800128a:	4832      	ldr	r0, [pc, #200]	@ (8001354 <MX_GPIO_Init+0x1d0>)
 800128c:	f005 ffb8 	bl	8007200 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001290:	f64f 73fd 	movw	r3, #65533	@ 0xfffd
 8001294:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001296:	2301      	movs	r3, #1
 8001298:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129e:	2300      	movs	r3, #0
 80012a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012a2:	f107 031c 	add.w	r3, r7, #28
 80012a6:	4619      	mov	r1, r3
 80012a8:	4828      	ldr	r0, [pc, #160]	@ (800134c <MX_GPIO_Init+0x1c8>)
 80012aa:	f005 fdf9 	bl	8006ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 80012ae:	f44f 7320 	mov.w	r3, #640	@ 0x280
 80012b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012b4:	2303      	movs	r3, #3
 80012b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012bc:	f107 031c 	add.w	r3, r7, #28
 80012c0:	4619      	mov	r1, r3
 80012c2:	4825      	ldr	r0, [pc, #148]	@ (8001358 <MX_GPIO_Init+0x1d4>)
 80012c4:	f005 fdec 	bl	8006ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin PD11 PD12 PD13
                           PD14 PD0 PD1 PD2
                           PD3 PD4 PD5 PD6
                           PD7 */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80012c8:	f647 43ff 	movw	r3, #31999	@ 0x7cff
 80012cc:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ce:	2301      	movs	r3, #1
 80012d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d6:	2300      	movs	r3, #0
 80012d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012da:	f107 031c 	add.w	r3, r7, #28
 80012de:	4619      	mov	r1, r3
 80012e0:	481b      	ldr	r0, [pc, #108]	@ (8001350 <MX_GPIO_Init+0x1cc>)
 80012e2:	f005 fddd 	bl	8006ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80012e6:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80012ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ec:	2301      	movs	r3, #1
 80012ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f4:	2300      	movs	r3, #0
 80012f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f8:	f107 031c 	add.w	r3, r7, #28
 80012fc:	4619      	mov	r1, r3
 80012fe:	4815      	ldr	r0, [pc, #84]	@ (8001354 <MX_GPIO_Init+0x1d0>)
 8001300:	f005 fdce 	bl	8006ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001304:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8001308:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130a:	2302      	movs	r3, #2
 800130c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	2300      	movs	r3, #0
 8001310:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001312:	2300      	movs	r3, #0
 8001314:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001316:	230a      	movs	r3, #10
 8001318:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131a:	f107 031c 	add.w	r3, r7, #28
 800131e:	4619      	mov	r1, r3
 8001320:	480e      	ldr	r0, [pc, #56]	@ (800135c <MX_GPIO_Init+0x1d8>)
 8001322:	f005 fdbd 	bl	8006ea0 <HAL_GPIO_Init>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001326:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 800132a:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800132e:	f001 f87f 	bl	8002430 <HAL_SYSCFG_AnalogSwitchConfig>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001332:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 8001336:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 800133a:	f001 f879 	bl	8002430 <HAL_SYSCFG_AnalogSwitchConfig>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800133e:	bf00      	nop
 8001340:	3730      	adds	r7, #48	@ 0x30
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	58024400 	.word	0x58024400
 800134c:	58021000 	.word	0x58021000
 8001350:	58020c00 	.word	0x58020c00
 8001354:	58020800 	.word	0x58020800
 8001358:	58021400 	.word	0x58021400
 800135c:	58020000 	.word	0x58020000

08001360 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d102      	bne.n	8001376 <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 8001370:	4b04      	ldr	r3, [pc, #16]	@ (8001384 <BSP_PB_Callback+0x24>)
 8001372:	2201      	movs	r2, #1
 8001374:	601a      	str	r2, [r3, #0]
  }
}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	24000224 	.word	0x24000224

08001388 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800138c:	b672      	cpsid	i
}
 800138e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001390:	bf00      	nop
 8001392:	e7fd      	b.n	8001390 <Error_Handler+0x8>

08001394 <InitPT>:

extern void Error_Handler(void);


void InitPT(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
    if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, N_ADC_CH) != HAL_OK)
 8001398:	220d      	movs	r2, #13
 800139a:	4905      	ldr	r1, [pc, #20]	@ (80013b0 <InitPT+0x1c>)
 800139c:	4805      	ldr	r0, [pc, #20]	@ (80013b4 <InitPT+0x20>)
 800139e:	f001 fc3b 	bl	8002c18 <HAL_ADC_Start_DMA>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <InitPT+0x18>
    {
        Error_Handler();
 80013a8:	f7ff ffee 	bl	8001388 <Error_Handler>
    }
}
 80013ac:	bf00      	nop
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	240004e4 	.word	0x240004e4
 80013b4:	24000228 	.word	0x24000228

080013b8 <SVUpdate>:

#include "solenoidvalve.h"
#include <stdint.h>

void SVUpdate(uint8_t* ch)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i<MAX_SV_NUM; i++) {
 80013c0:	2300      	movs	r3, #0
 80013c2:	73fb      	strb	r3, [r7, #15]
 80013c4:	e0d1      	b.n	800156a <SVUpdate+0x1b2>
		switch(i) {
 80013c6:	7bfb      	ldrb	r3, [r7, #15]
 80013c8:	2b09      	cmp	r3, #9
 80013ca:	f200 80ca 	bhi.w	8001562 <SVUpdate+0x1aa>
 80013ce:	a201      	add	r2, pc, #4	@ (adr r2, 80013d4 <SVUpdate+0x1c>)
 80013d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013d4:	080013fd 	.word	0x080013fd
 80013d8:	0800141d 	.word	0x0800141d
 80013dc:	0800143f 	.word	0x0800143f
 80013e0:	08001461 	.word	0x08001461
 80013e4:	08001483 	.word	0x08001483
 80013e8:	080014a9 	.word	0x080014a9
 80013ec:	080014cf 	.word	0x080014cf
 80013f0:	080014f5 	.word	0x080014f5
 80013f4:	0800151b 	.word	0x0800151b
 80013f8:	0800153d 	.word	0x0800153d
		case 0: // SV CH1
			if (ch[0] == 0) {
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d105      	bne.n	8001410 <SVUpdate+0x58>
				HAL_GPIO_WritePin(SV_CH1_PORT, SV_CH1_GPIO, GPIO_PIN_RESET);
 8001404:	2200      	movs	r2, #0
 8001406:	2101      	movs	r1, #1
 8001408:	485c      	ldr	r0, [pc, #368]	@ (800157c <SVUpdate+0x1c4>)
 800140a:	f005 fef9 	bl	8007200 <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(SV_CH1_PORT, SV_CH1_GPIO, GPIO_PIN_SET);
			}
			break;
 800140e:	e0a9      	b.n	8001564 <SVUpdate+0x1ac>
				HAL_GPIO_WritePin(SV_CH1_PORT, SV_CH1_GPIO, GPIO_PIN_SET);
 8001410:	2201      	movs	r2, #1
 8001412:	2101      	movs	r1, #1
 8001414:	4859      	ldr	r0, [pc, #356]	@ (800157c <SVUpdate+0x1c4>)
 8001416:	f005 fef3 	bl	8007200 <HAL_GPIO_WritePin>
			break;
 800141a:	e0a3      	b.n	8001564 <SVUpdate+0x1ac>
		case 1:
			if (ch[1] == 0) {
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	3301      	adds	r3, #1
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d105      	bne.n	8001432 <SVUpdate+0x7a>
				HAL_GPIO_WritePin(SV_CH2_PORT, SV_CH2_GPIO, GPIO_PIN_RESET);
 8001426:	2200      	movs	r2, #0
 8001428:	2108      	movs	r1, #8
 800142a:	4854      	ldr	r0, [pc, #336]	@ (800157c <SVUpdate+0x1c4>)
 800142c:	f005 fee8 	bl	8007200 <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(SV_CH2_PORT, SV_CH2_GPIO, GPIO_PIN_SET);
			}
			break;
 8001430:	e098      	b.n	8001564 <SVUpdate+0x1ac>
				HAL_GPIO_WritePin(SV_CH2_PORT, SV_CH2_GPIO, GPIO_PIN_SET);
 8001432:	2201      	movs	r2, #1
 8001434:	2108      	movs	r1, #8
 8001436:	4851      	ldr	r0, [pc, #324]	@ (800157c <SVUpdate+0x1c4>)
 8001438:	f005 fee2 	bl	8007200 <HAL_GPIO_WritePin>
			break;
 800143c:	e092      	b.n	8001564 <SVUpdate+0x1ac>
		case 2:
			if (ch[2] == 0) {
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	3302      	adds	r3, #2
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d105      	bne.n	8001454 <SVUpdate+0x9c>
				HAL_GPIO_WritePin(SV_CH3_PORT, SV_CH3_GPIO, GPIO_PIN_RESET);
 8001448:	2200      	movs	r2, #0
 800144a:	2110      	movs	r1, #16
 800144c:	484b      	ldr	r0, [pc, #300]	@ (800157c <SVUpdate+0x1c4>)
 800144e:	f005 fed7 	bl	8007200 <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(SV_CH3_PORT, SV_CH3_GPIO, GPIO_PIN_SET);
			}
			break;
 8001452:	e087      	b.n	8001564 <SVUpdate+0x1ac>
				HAL_GPIO_WritePin(SV_CH3_PORT, SV_CH3_GPIO, GPIO_PIN_SET);
 8001454:	2201      	movs	r2, #1
 8001456:	2110      	movs	r1, #16
 8001458:	4848      	ldr	r0, [pc, #288]	@ (800157c <SVUpdate+0x1c4>)
 800145a:	f005 fed1 	bl	8007200 <HAL_GPIO_WritePin>
			break;
 800145e:	e081      	b.n	8001564 <SVUpdate+0x1ac>
		case 3:
			if (ch[3] == 0) {
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3303      	adds	r3, #3
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d105      	bne.n	8001476 <SVUpdate+0xbe>
				HAL_GPIO_WritePin(SV_CH4_PORT, SV_CH4_GPIO, GPIO_PIN_RESET);
 800146a:	2200      	movs	r2, #0
 800146c:	2180      	movs	r1, #128	@ 0x80
 800146e:	4843      	ldr	r0, [pc, #268]	@ (800157c <SVUpdate+0x1c4>)
 8001470:	f005 fec6 	bl	8007200 <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(SV_CH4_PORT, SV_CH4_GPIO, GPIO_PIN_SET);
			}
			break;
 8001474:	e076      	b.n	8001564 <SVUpdate+0x1ac>
				HAL_GPIO_WritePin(SV_CH4_PORT, SV_CH4_GPIO, GPIO_PIN_SET);
 8001476:	2201      	movs	r2, #1
 8001478:	2180      	movs	r1, #128	@ 0x80
 800147a:	4840      	ldr	r0, [pc, #256]	@ (800157c <SVUpdate+0x1c4>)
 800147c:	f005 fec0 	bl	8007200 <HAL_GPIO_WritePin>
			break;
 8001480:	e070      	b.n	8001564 <SVUpdate+0x1ac>
		case 4:
			if (ch[4] == 0) {
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	3304      	adds	r3, #4
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d106      	bne.n	800149a <SVUpdate+0xe2>
				HAL_GPIO_WritePin(SV_CH5_PORT, SV_CH5_GPIO, GPIO_PIN_RESET);
 800148c:	2200      	movs	r2, #0
 800148e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001492:	483a      	ldr	r0, [pc, #232]	@ (800157c <SVUpdate+0x1c4>)
 8001494:	f005 feb4 	bl	8007200 <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(SV_CH5_PORT, SV_CH5_GPIO, GPIO_PIN_SET);
			}
			break;
 8001498:	e064      	b.n	8001564 <SVUpdate+0x1ac>
				HAL_GPIO_WritePin(SV_CH5_PORT, SV_CH5_GPIO, GPIO_PIN_SET);
 800149a:	2201      	movs	r2, #1
 800149c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80014a0:	4836      	ldr	r0, [pc, #216]	@ (800157c <SVUpdate+0x1c4>)
 80014a2:	f005 fead 	bl	8007200 <HAL_GPIO_WritePin>
			break;
 80014a6:	e05d      	b.n	8001564 <SVUpdate+0x1ac>
		case 5:
			if (ch[5] == 0) {
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3305      	adds	r3, #5
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d106      	bne.n	80014c0 <SVUpdate+0x108>
				HAL_GPIO_WritePin(SV_CH6_PORT, SV_CH6_GPIO, GPIO_PIN_RESET);
 80014b2:	2200      	movs	r2, #0
 80014b4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80014b8:	4830      	ldr	r0, [pc, #192]	@ (800157c <SVUpdate+0x1c4>)
 80014ba:	f005 fea1 	bl	8007200 <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(SV_CH6_PORT, SV_CH6_GPIO, GPIO_PIN_SET);
			}
			break;
 80014be:	e051      	b.n	8001564 <SVUpdate+0x1ac>
				HAL_GPIO_WritePin(SV_CH6_PORT, SV_CH6_GPIO, GPIO_PIN_SET);
 80014c0:	2201      	movs	r2, #1
 80014c2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80014c6:	482d      	ldr	r0, [pc, #180]	@ (800157c <SVUpdate+0x1c4>)
 80014c8:	f005 fe9a 	bl	8007200 <HAL_GPIO_WritePin>
			break;
 80014cc:	e04a      	b.n	8001564 <SVUpdate+0x1ac>
		case 6:
			if (ch[6] == 0) {
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	3306      	adds	r3, #6
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d106      	bne.n	80014e6 <SVUpdate+0x12e>
				HAL_GPIO_WritePin(SV_CH7_PORT, SV_CH7_GPIO, GPIO_PIN_RESET);
 80014d8:	2200      	movs	r2, #0
 80014da:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014de:	4827      	ldr	r0, [pc, #156]	@ (800157c <SVUpdate+0x1c4>)
 80014e0:	f005 fe8e 	bl	8007200 <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(SV_CH7_PORT, SV_CH7_GPIO, GPIO_PIN_SET);
			}
			break;
 80014e4:	e03e      	b.n	8001564 <SVUpdate+0x1ac>
				HAL_GPIO_WritePin(SV_CH7_PORT, SV_CH7_GPIO, GPIO_PIN_SET);
 80014e6:	2201      	movs	r2, #1
 80014e8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014ec:	4823      	ldr	r0, [pc, #140]	@ (800157c <SVUpdate+0x1c4>)
 80014ee:	f005 fe87 	bl	8007200 <HAL_GPIO_WritePin>
			break;
 80014f2:	e037      	b.n	8001564 <SVUpdate+0x1ac>
		case 7:
			if (ch[7] == 0) {
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3307      	adds	r3, #7
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d106      	bne.n	800150c <SVUpdate+0x154>
				HAL_GPIO_WritePin(SV_CH8_PORT, SV_CH8_GPIO, GPIO_PIN_RESET);
 80014fe:	2200      	movs	r2, #0
 8001500:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001504:	481d      	ldr	r0, [pc, #116]	@ (800157c <SVUpdate+0x1c4>)
 8001506:	f005 fe7b 	bl	8007200 <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(SV_CH8_PORT, SV_CH8_GPIO, GPIO_PIN_SET);
			}
			break;
 800150a:	e02b      	b.n	8001564 <SVUpdate+0x1ac>
				HAL_GPIO_WritePin(SV_CH8_PORT, SV_CH8_GPIO, GPIO_PIN_SET);
 800150c:	2201      	movs	r2, #1
 800150e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001512:	481a      	ldr	r0, [pc, #104]	@ (800157c <SVUpdate+0x1c4>)
 8001514:	f005 fe74 	bl	8007200 <HAL_GPIO_WritePin>
			break;
 8001518:	e024      	b.n	8001564 <SVUpdate+0x1ac>
		case 8:
			if (ch[8] == 0) {
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	3308      	adds	r3, #8
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d105      	bne.n	8001530 <SVUpdate+0x178>
				HAL_GPIO_WritePin(SV_CH9_PORT, SV_CH9_GPIO, GPIO_PIN_RESET);
 8001524:	2200      	movs	r2, #0
 8001526:	2140      	movs	r1, #64	@ 0x40
 8001528:	4815      	ldr	r0, [pc, #84]	@ (8001580 <SVUpdate+0x1c8>)
 800152a:	f005 fe69 	bl	8007200 <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(SV_CH9_PORT, SV_CH9_GPIO, GPIO_PIN_SET);
			}
			break;
 800152e:	e019      	b.n	8001564 <SVUpdate+0x1ac>
				HAL_GPIO_WritePin(SV_CH9_PORT, SV_CH9_GPIO, GPIO_PIN_SET);
 8001530:	2201      	movs	r2, #1
 8001532:	2140      	movs	r1, #64	@ 0x40
 8001534:	4812      	ldr	r0, [pc, #72]	@ (8001580 <SVUpdate+0x1c8>)
 8001536:	f005 fe63 	bl	8007200 <HAL_GPIO_WritePin>
			break;
 800153a:	e013      	b.n	8001564 <SVUpdate+0x1ac>
		case 9:
			if (ch[9] == 0) {
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	3309      	adds	r3, #9
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d106      	bne.n	8001554 <SVUpdate+0x19c>
				HAL_GPIO_WritePin(SV_CH10_PORT, SV_CH10_GPIO, GPIO_PIN_RESET);
 8001546:	2200      	movs	r2, #0
 8001548:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800154c:	480c      	ldr	r0, [pc, #48]	@ (8001580 <SVUpdate+0x1c8>)
 800154e:	f005 fe57 	bl	8007200 <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(SV_CH10_PORT, SV_CH10_GPIO, GPIO_PIN_SET);
			}
			break;
 8001552:	e007      	b.n	8001564 <SVUpdate+0x1ac>
				HAL_GPIO_WritePin(SV_CH10_PORT, SV_CH10_GPIO, GPIO_PIN_SET);
 8001554:	2201      	movs	r2, #1
 8001556:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800155a:	4809      	ldr	r0, [pc, #36]	@ (8001580 <SVUpdate+0x1c8>)
 800155c:	f005 fe50 	bl	8007200 <HAL_GPIO_WritePin>
			break;
 8001560:	e000      	b.n	8001564 <SVUpdate+0x1ac>
		default:
			break;
 8001562:	bf00      	nop
	for (uint8_t i = 0; i<MAX_SV_NUM; i++) {
 8001564:	7bfb      	ldrb	r3, [r7, #15]
 8001566:	3301      	adds	r3, #1
 8001568:	73fb      	strb	r3, [r7, #15]
 800156a:	7bfb      	ldrb	r3, [r7, #15]
 800156c:	2b09      	cmp	r3, #9
 800156e:	f67f af2a 	bls.w	80013c6 <SVUpdate+0xe>
		}
	}

}
 8001572:	bf00      	nop
 8001574:	bf00      	nop
 8001576:	3710      	adds	r7, #16
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	58021000 	.word	0x58021000
 8001580:	58020800 	.word	0x58020800

08001584 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800158a:	4b0a      	ldr	r3, [pc, #40]	@ (80015b4 <HAL_MspInit+0x30>)
 800158c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001590:	4a08      	ldr	r2, [pc, #32]	@ (80015b4 <HAL_MspInit+0x30>)
 8001592:	f043 0302 	orr.w	r3, r3, #2
 8001596:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800159a:	4b06      	ldr	r3, [pc, #24]	@ (80015b4 <HAL_MspInit+0x30>)
 800159c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	607b      	str	r3, [r7, #4]
 80015a6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015a8:	bf00      	nop
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	58024400 	.word	0x58024400

080015b8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b0bc      	sub	sp, #240	@ 0xf0
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	60da      	str	r2, [r3, #12]
 80015ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015d0:	f107 0318 	add.w	r3, r7, #24
 80015d4:	22c0      	movs	r2, #192	@ 0xc0
 80015d6:	2100      	movs	r1, #0
 80015d8:	4618      	mov	r0, r3
 80015da:	f00d fca9 	bl	800ef30 <memset>
  if(hadc->Instance==ADC1)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a67      	ldr	r2, [pc, #412]	@ (8001780 <HAL_ADC_MspInit+0x1c8>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	f040 80c6 	bne.w	8001776 <HAL_ADC_MspInit+0x1be>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80015ea:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80015ee:	f04f 0300 	mov.w	r3, #0
 80015f2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 80015f6:	2304      	movs	r3, #4
 80015f8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 80015fa:	230a      	movs	r3, #10
 80015fc:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80015fe:	2302      	movs	r3, #2
 8001600:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001602:	2302      	movs	r3, #2
 8001604:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001606:	2302      	movs	r3, #2
 8001608:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800160a:	23c0      	movs	r3, #192	@ 0xc0
 800160c:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800160e:	2320      	movs	r3, #32
 8001610:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0.0;
 8001612:	2300      	movs	r3, #0
 8001614:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001616:	2300      	movs	r3, #0
 8001618:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800161c:	f107 0318 	add.w	r3, r7, #24
 8001620:	4618      	mov	r0, r3
 8001622:	f006 fe8f 	bl	8008344 <HAL_RCCEx_PeriphCLKConfig>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 800162c:	f7ff feac 	bl	8001388 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001630:	4b54      	ldr	r3, [pc, #336]	@ (8001784 <HAL_ADC_MspInit+0x1cc>)
 8001632:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001636:	4a53      	ldr	r2, [pc, #332]	@ (8001784 <HAL_ADC_MspInit+0x1cc>)
 8001638:	f043 0320 	orr.w	r3, r3, #32
 800163c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001640:	4b50      	ldr	r3, [pc, #320]	@ (8001784 <HAL_ADC_MspInit+0x1cc>)
 8001642:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001646:	f003 0320 	and.w	r3, r3, #32
 800164a:	617b      	str	r3, [r7, #20]
 800164c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800164e:	4b4d      	ldr	r3, [pc, #308]	@ (8001784 <HAL_ADC_MspInit+0x1cc>)
 8001650:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001654:	4a4b      	ldr	r2, [pc, #300]	@ (8001784 <HAL_ADC_MspInit+0x1cc>)
 8001656:	f043 0304 	orr.w	r3, r3, #4
 800165a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800165e:	4b49      	ldr	r3, [pc, #292]	@ (8001784 <HAL_ADC_MspInit+0x1cc>)
 8001660:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001664:	f003 0304 	and.w	r3, r3, #4
 8001668:	613b      	str	r3, [r7, #16]
 800166a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800166c:	4b45      	ldr	r3, [pc, #276]	@ (8001784 <HAL_ADC_MspInit+0x1cc>)
 800166e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001672:	4a44      	ldr	r2, [pc, #272]	@ (8001784 <HAL_ADC_MspInit+0x1cc>)
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800167c:	4b41      	ldr	r3, [pc, #260]	@ (8001784 <HAL_ADC_MspInit+0x1cc>)
 800167e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800168a:	4b3e      	ldr	r3, [pc, #248]	@ (8001784 <HAL_ADC_MspInit+0x1cc>)
 800168c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001690:	4a3c      	ldr	r2, [pc, #240]	@ (8001784 <HAL_ADC_MspInit+0x1cc>)
 8001692:	f043 0320 	orr.w	r3, r3, #32
 8001696:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800169a:	4b3a      	ldr	r3, [pc, #232]	@ (8001784 <HAL_ADC_MspInit+0x1cc>)
 800169c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016a0:	f003 0320 	and.w	r3, r3, #32
 80016a4:	60bb      	str	r3, [r7, #8]
 80016a6:	68bb      	ldr	r3, [r7, #8]
    PA7     ------> ADC1_INP7
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80016a8:	2333      	movs	r3, #51	@ 0x33
 80016aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016ae:	2303      	movs	r3, #3
 80016b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b4:	2300      	movs	r3, #0
 80016b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ba:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80016be:	4619      	mov	r1, r3
 80016c0:	4831      	ldr	r0, [pc, #196]	@ (8001788 <HAL_ADC_MspInit+0x1d0>)
 80016c2:	f005 fbed 	bl	8006ea0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80016c6:	23ff      	movs	r3, #255	@ 0xff
 80016c8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016cc:	2303      	movs	r3, #3
 80016ce:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80016dc:	4619      	mov	r1, r3
 80016de:	482b      	ldr	r0, [pc, #172]	@ (800178c <HAL_ADC_MspInit+0x1d4>)
 80016e0:	f005 fbde 	bl	8006ea0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80016e4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80016e8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016ec:	2303      	movs	r3, #3
 80016ee:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f2:	2300      	movs	r3, #0
 80016f4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016f8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80016fc:	4619      	mov	r1, r3
 80016fe:	4824      	ldr	r0, [pc, #144]	@ (8001790 <HAL_ADC_MspInit+0x1d8>)
 8001700:	f005 fbce 	bl	8006ea0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001704:	4b23      	ldr	r3, [pc, #140]	@ (8001794 <HAL_ADC_MspInit+0x1dc>)
 8001706:	4a24      	ldr	r2, [pc, #144]	@ (8001798 <HAL_ADC_MspInit+0x1e0>)
 8001708:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800170a:	4b22      	ldr	r3, [pc, #136]	@ (8001794 <HAL_ADC_MspInit+0x1dc>)
 800170c:	2209      	movs	r2, #9
 800170e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001710:	4b20      	ldr	r3, [pc, #128]	@ (8001794 <HAL_ADC_MspInit+0x1dc>)
 8001712:	2200      	movs	r2, #0
 8001714:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001716:	4b1f      	ldr	r3, [pc, #124]	@ (8001794 <HAL_ADC_MspInit+0x1dc>)
 8001718:	2200      	movs	r2, #0
 800171a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800171c:	4b1d      	ldr	r3, [pc, #116]	@ (8001794 <HAL_ADC_MspInit+0x1dc>)
 800171e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001722:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001724:	4b1b      	ldr	r3, [pc, #108]	@ (8001794 <HAL_ADC_MspInit+0x1dc>)
 8001726:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800172a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800172c:	4b19      	ldr	r3, [pc, #100]	@ (8001794 <HAL_ADC_MspInit+0x1dc>)
 800172e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001732:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001734:	4b17      	ldr	r3, [pc, #92]	@ (8001794 <HAL_ADC_MspInit+0x1dc>)
 8001736:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800173a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800173c:	4b15      	ldr	r3, [pc, #84]	@ (8001794 <HAL_ADC_MspInit+0x1dc>)
 800173e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001742:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001744:	4b13      	ldr	r3, [pc, #76]	@ (8001794 <HAL_ADC_MspInit+0x1dc>)
 8001746:	2200      	movs	r2, #0
 8001748:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800174a:	4812      	ldr	r0, [pc, #72]	@ (8001794 <HAL_ADC_MspInit+0x1dc>)
 800174c:	f002 fcfc 	bl	8004148 <HAL_DMA_Init>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <HAL_ADC_MspInit+0x1a2>
    {
      Error_Handler();
 8001756:	f7ff fe17 	bl	8001388 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a0d      	ldr	r2, [pc, #52]	@ (8001794 <HAL_ADC_MspInit+0x1dc>)
 800175e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001760:	4a0c      	ldr	r2, [pc, #48]	@ (8001794 <HAL_ADC_MspInit+0x1dc>)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001766:	2200      	movs	r2, #0
 8001768:	2100      	movs	r1, #0
 800176a:	2012      	movs	r0, #18
 800176c:	f002 fca5 	bl	80040ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001770:	2012      	movs	r0, #18
 8001772:	f002 fcbc 	bl	80040ee <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001776:	bf00      	nop
 8001778:	37f0      	adds	r7, #240	@ 0xf0
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40022000 	.word	0x40022000
 8001784:	58024400 	.word	0x58024400
 8001788:	58020800 	.word	0x58020800
 800178c:	58020000 	.word	0x58020000
 8001790:	58021400 	.word	0x58021400
 8001794:	2400028c 	.word	0x2400028c
 8001798:	40020010 	.word	0x40020010

0800179c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b0bc      	sub	sp, #240	@ 0xf0
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	60da      	str	r2, [r3, #12]
 80017b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017b4:	f107 0318 	add.w	r3, r7, #24
 80017b8:	22c0      	movs	r2, #192	@ 0xc0
 80017ba:	2100      	movs	r1, #0
 80017bc:	4618      	mov	r0, r3
 80017be:	f00d fbb7 	bl	800ef30 <memset>
  if(hspi->Instance==SPI1)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a38      	ldr	r2, [pc, #224]	@ (80018a8 <HAL_SPI_MspInit+0x10c>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d169      	bne.n	80018a0 <HAL_SPI_MspInit+0x104>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80017cc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80017d0:	f04f 0300 	mov.w	r3, #0
 80017d4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80017d8:	2300      	movs	r3, #0
 80017da:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017dc:	f107 0318 	add.w	r3, r7, #24
 80017e0:	4618      	mov	r0, r3
 80017e2:	f006 fdaf 	bl	8008344 <HAL_RCCEx_PeriphCLKConfig>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80017ec:	f7ff fdcc 	bl	8001388 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017f0:	4b2e      	ldr	r3, [pc, #184]	@ (80018ac <HAL_SPI_MspInit+0x110>)
 80017f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80017f6:	4a2d      	ldr	r2, [pc, #180]	@ (80018ac <HAL_SPI_MspInit+0x110>)
 80017f8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80017fc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001800:	4b2a      	ldr	r3, [pc, #168]	@ (80018ac <HAL_SPI_MspInit+0x110>)
 8001802:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001806:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800180a:	617b      	str	r3, [r7, #20]
 800180c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800180e:	4b27      	ldr	r3, [pc, #156]	@ (80018ac <HAL_SPI_MspInit+0x110>)
 8001810:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001814:	4a25      	ldr	r2, [pc, #148]	@ (80018ac <HAL_SPI_MspInit+0x110>)
 8001816:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800181a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800181e:	4b23      	ldr	r3, [pc, #140]	@ (80018ac <HAL_SPI_MspInit+0x110>)
 8001820:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001824:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001828:	613b      	str	r3, [r7, #16]
 800182a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800182c:	4b1f      	ldr	r3, [pc, #124]	@ (80018ac <HAL_SPI_MspInit+0x110>)
 800182e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001832:	4a1e      	ldr	r2, [pc, #120]	@ (80018ac <HAL_SPI_MspInit+0x110>)
 8001834:	f043 0302 	orr.w	r3, r3, #2
 8001838:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800183c:	4b1b      	ldr	r3, [pc, #108]	@ (80018ac <HAL_SPI_MspInit+0x110>)
 800183e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PG9     ------> SPI1_MISO
    PG11     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800184a:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 800184e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001852:	2302      	movs	r3, #2
 8001854:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001858:	2300      	movs	r3, #0
 800185a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185e:	2300      	movs	r3, #0
 8001860:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001864:	2305      	movs	r3, #5
 8001866:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800186a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800186e:	4619      	mov	r1, r3
 8001870:	480f      	ldr	r0, [pc, #60]	@ (80018b0 <HAL_SPI_MspInit+0x114>)
 8001872:	f005 fb15 	bl	8006ea0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001876:	2320      	movs	r3, #32
 8001878:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187c:	2302      	movs	r3, #2
 800187e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001888:	2300      	movs	r3, #0
 800188a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800188e:	2305      	movs	r3, #5
 8001890:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001894:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001898:	4619      	mov	r1, r3
 800189a:	4806      	ldr	r0, [pc, #24]	@ (80018b4 <HAL_SPI_MspInit+0x118>)
 800189c:	f005 fb00 	bl	8006ea0 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80018a0:	bf00      	nop
 80018a2:	37f0      	adds	r7, #240	@ 0xf0
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	40013000 	.word	0x40013000
 80018ac:	58024400 	.word	0x58024400
 80018b0:	58021800 	.word	0x58021800
 80018b4:	58020400 	.word	0x58020400

080018b8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018c8:	d116      	bne.n	80018f8 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001900 <HAL_TIM_Base_MspInit+0x48>)
 80018cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80018d0:	4a0b      	ldr	r2, [pc, #44]	@ (8001900 <HAL_TIM_Base_MspInit+0x48>)
 80018d2:	f043 0301 	orr.w	r3, r3, #1
 80018d6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80018da:	4b09      	ldr	r3, [pc, #36]	@ (8001900 <HAL_TIM_Base_MspInit+0x48>)
 80018dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80018e0:	f003 0301 	and.w	r3, r3, #1
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018e8:	2200      	movs	r2, #0
 80018ea:	2100      	movs	r1, #0
 80018ec:	201c      	movs	r0, #28
 80018ee:	f002 fbe4 	bl	80040ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018f2:	201c      	movs	r0, #28
 80018f4:	f002 fbfb 	bl	80040ee <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80018f8:	bf00      	nop
 80018fa:	3710      	adds	r7, #16
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	58024400 	.word	0x58024400

08001904 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b0ba      	sub	sp, #232	@ 0xe8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800190c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	605a      	str	r2, [r3, #4]
 8001916:	609a      	str	r2, [r3, #8]
 8001918:	60da      	str	r2, [r3, #12]
 800191a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800191c:	f107 0310 	add.w	r3, r7, #16
 8001920:	22c0      	movs	r2, #192	@ 0xc0
 8001922:	2100      	movs	r1, #0
 8001924:	4618      	mov	r0, r3
 8001926:	f00d fb03 	bl	800ef30 <memset>
  if(huart->Instance==UART4)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a2b      	ldr	r2, [pc, #172]	@ (80019dc <HAL_UART_MspInit+0xd8>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d14e      	bne.n	80019d2 <HAL_UART_MspInit+0xce>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001934:	f04f 0202 	mov.w	r2, #2
 8001938:	f04f 0300 	mov.w	r3, #0
 800193c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001940:	2300      	movs	r3, #0
 8001942:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001946:	f107 0310 	add.w	r3, r7, #16
 800194a:	4618      	mov	r0, r3
 800194c:	f006 fcfa 	bl	8008344 <HAL_RCCEx_PeriphCLKConfig>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001956:	f7ff fd17 	bl	8001388 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800195a:	4b21      	ldr	r3, [pc, #132]	@ (80019e0 <HAL_UART_MspInit+0xdc>)
 800195c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001960:	4a1f      	ldr	r2, [pc, #124]	@ (80019e0 <HAL_UART_MspInit+0xdc>)
 8001962:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001966:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800196a:	4b1d      	ldr	r3, [pc, #116]	@ (80019e0 <HAL_UART_MspInit+0xdc>)
 800196c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001970:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001978:	4b19      	ldr	r3, [pc, #100]	@ (80019e0 <HAL_UART_MspInit+0xdc>)
 800197a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800197e:	4a18      	ldr	r2, [pc, #96]	@ (80019e0 <HAL_UART_MspInit+0xdc>)
 8001980:	f043 0304 	orr.w	r3, r3, #4
 8001984:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001988:	4b15      	ldr	r3, [pc, #84]	@ (80019e0 <HAL_UART_MspInit+0xdc>)
 800198a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800198e:	f003 0304 	and.w	r3, r3, #4
 8001992:	60bb      	str	r3, [r7, #8]
 8001994:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001996:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800199a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199e:	2302      	movs	r3, #2
 80019a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a4:	2300      	movs	r3, #0
 80019a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019aa:	2300      	movs	r3, #0
 80019ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80019b0:	2308      	movs	r3, #8
 80019b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019b6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80019ba:	4619      	mov	r1, r3
 80019bc:	4809      	ldr	r0, [pc, #36]	@ (80019e4 <HAL_UART_MspInit+0xe0>)
 80019be:	f005 fa6f 	bl	8006ea0 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80019c2:	2200      	movs	r2, #0
 80019c4:	2100      	movs	r1, #0
 80019c6:	2034      	movs	r0, #52	@ 0x34
 80019c8:	f002 fb77 	bl	80040ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80019cc:	2034      	movs	r0, #52	@ 0x34
 80019ce:	f002 fb8e 	bl	80040ee <HAL_NVIC_EnableIRQ>

    /* USER CODE END UART4_MspInit 1 */

  }

}
 80019d2:	bf00      	nop
 80019d4:	37e8      	adds	r7, #232	@ 0xe8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40004c00 	.word	0x40004c00
 80019e0:	58024400 	.word	0x58024400
 80019e4:	58020800 	.word	0x58020800

080019e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019ec:	bf00      	nop
 80019ee:	e7fd      	b.n	80019ec <NMI_Handler+0x4>

080019f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019f4:	bf00      	nop
 80019f6:	e7fd      	b.n	80019f4 <HardFault_Handler+0x4>

080019f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019fc:	bf00      	nop
 80019fe:	e7fd      	b.n	80019fc <MemManage_Handler+0x4>

08001a00 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a04:	bf00      	nop
 8001a06:	e7fd      	b.n	8001a04 <BusFault_Handler+0x4>

08001a08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a0c:	bf00      	nop
 8001a0e:	e7fd      	b.n	8001a0c <UsageFault_Handler+0x4>

08001a10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a3e:	f000 fccb 	bl	80023d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
	...

08001a48 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001a4c:	4802      	ldr	r0, [pc, #8]	@ (8001a58 <DMA1_Stream0_IRQHandler+0x10>)
 8001a4e:	f003 fea5 	bl	800579c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001a52:	bf00      	nop
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	2400028c 	.word	0x2400028c

08001a5c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001a60:	4802      	ldr	r0, [pc, #8]	@ (8001a6c <ADC_IRQHandler+0x10>)
 8001a62:	f001 f99d 	bl	8002da0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	24000228 	.word	0x24000228

08001a70 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a74:	4802      	ldr	r0, [pc, #8]	@ (8001a80 <TIM2_IRQHandler+0x10>)
 8001a76:	f009 fb71 	bl	800b15c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	2400038c 	.word	0x2400038c

08001a84 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8001a88:	2000      	movs	r0, #0
 8001a8a:	f000 fb43 	bl	8002114 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
	...

08001a94 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001a98:	4802      	ldr	r0, [pc, #8]	@ (8001aa4 <UART4_IRQHandler+0x10>)
 8001a9a:	f00a f89b 	bl	800bbd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	240003d8 	.word	0x240003d8

08001aa8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  return 1;
 8001aac:	2301      	movs	r3, #1
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <_kill>:

int _kill(int pid, int sig)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ac2:	f00d faf3 	bl	800f0ac <__errno>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2216      	movs	r2, #22
 8001aca:	601a      	str	r2, [r3, #0]
  return -1;
 8001acc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <_exit>:

void _exit (int status)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ae0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f7ff ffe7 	bl	8001ab8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001aea:	bf00      	nop
 8001aec:	e7fd      	b.n	8001aea <_exit+0x12>

08001aee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b086      	sub	sp, #24
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	60f8      	str	r0, [r7, #12]
 8001af6:	60b9      	str	r1, [r7, #8]
 8001af8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001afa:	2300      	movs	r3, #0
 8001afc:	617b      	str	r3, [r7, #20]
 8001afe:	e00a      	b.n	8001b16 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b00:	f3af 8000 	nop.w
 8001b04:	4601      	mov	r1, r0
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	1c5a      	adds	r2, r3, #1
 8001b0a:	60ba      	str	r2, [r7, #8]
 8001b0c:	b2ca      	uxtb	r2, r1
 8001b0e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	3301      	adds	r3, #1
 8001b14:	617b      	str	r3, [r7, #20]
 8001b16:	697a      	ldr	r2, [r7, #20]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	dbf0      	blt.n	8001b00 <_read+0x12>
  }

  return len;
 8001b1e:	687b      	ldr	r3, [r7, #4]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3718      	adds	r7, #24
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b34:	2300      	movs	r3, #0
 8001b36:	617b      	str	r3, [r7, #20]
 8001b38:	e009      	b.n	8001b4e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	1c5a      	adds	r2, r3, #1
 8001b3e:	60ba      	str	r2, [r7, #8]
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f000 fb5a 	bl	80021fc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	617b      	str	r3, [r7, #20]
 8001b4e:	697a      	ldr	r2, [r7, #20]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	dbf1      	blt.n	8001b3a <_write+0x12>
  }
  return len;
 8001b56:	687b      	ldr	r3, [r7, #4]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3718      	adds	r7, #24
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <_close>:

int _close(int file)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b88:	605a      	str	r2, [r3, #4]
  return 0;
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <_isatty>:

int _isatty(int file)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ba0:	2301      	movs	r3, #1
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr

08001bae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b085      	sub	sp, #20
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	60f8      	str	r0, [r7, #12]
 8001bb6:	60b9      	str	r1, [r7, #8]
 8001bb8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3714      	adds	r7, #20
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bd0:	4a14      	ldr	r2, [pc, #80]	@ (8001c24 <_sbrk+0x5c>)
 8001bd2:	4b15      	ldr	r3, [pc, #84]	@ (8001c28 <_sbrk+0x60>)
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bdc:	4b13      	ldr	r3, [pc, #76]	@ (8001c2c <_sbrk+0x64>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d102      	bne.n	8001bea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001be4:	4b11      	ldr	r3, [pc, #68]	@ (8001c2c <_sbrk+0x64>)
 8001be6:	4a12      	ldr	r2, [pc, #72]	@ (8001c30 <_sbrk+0x68>)
 8001be8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bea:	4b10      	ldr	r3, [pc, #64]	@ (8001c2c <_sbrk+0x64>)
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d207      	bcs.n	8001c08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bf8:	f00d fa58 	bl	800f0ac <__errno>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	220c      	movs	r2, #12
 8001c00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c02:	f04f 33ff 	mov.w	r3, #4294967295
 8001c06:	e009      	b.n	8001c1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c08:	4b08      	ldr	r3, [pc, #32]	@ (8001c2c <_sbrk+0x64>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c0e:	4b07      	ldr	r3, [pc, #28]	@ (8001c2c <_sbrk+0x64>)
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4413      	add	r3, r2
 8001c16:	4a05      	ldr	r2, [pc, #20]	@ (8001c2c <_sbrk+0x64>)
 8001c18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3718      	adds	r7, #24
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	24080000 	.word	0x24080000
 8001c28:	00000400 	.word	0x00000400
 8001c2c:	24000500 	.word	0x24000500
 8001c30:	24000800 	.word	0x24000800

08001c34 <HAL_UART_RxCpltCallback>:
uint8_t NRecv = 0;

extern void Error_Handler(void);

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == UART4)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a19      	ldr	r2, [pc, #100]	@ (8001ca8 <HAL_UART_RxCpltCallback+0x74>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d12c      	bne.n	8001ca0 <HAL_UART_RxCpltCallback+0x6c>
	{
		rx_buffer[rx_index++] = rx_data;
 8001c46:	4b19      	ldr	r3, [pc, #100]	@ (8001cac <HAL_UART_RxCpltCallback+0x78>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	1c5a      	adds	r2, r3, #1
 8001c4c:	b2d1      	uxtb	r1, r2
 8001c4e:	4a17      	ldr	r2, [pc, #92]	@ (8001cac <HAL_UART_RxCpltCallback+0x78>)
 8001c50:	7011      	strb	r1, [r2, #0]
 8001c52:	461a      	mov	r2, r3
 8001c54:	4b16      	ldr	r3, [pc, #88]	@ (8001cb0 <HAL_UART_RxCpltCallback+0x7c>)
 8001c56:	7819      	ldrb	r1, [r3, #0]
 8001c58:	4b16      	ldr	r3, [pc, #88]	@ (8001cb4 <HAL_UART_RxCpltCallback+0x80>)
 8001c5a:	5499      	strb	r1, [r3, r2]

		if (rx_data == 0x0A)
 8001c5c:	4b14      	ldr	r3, [pc, #80]	@ (8001cb0 <HAL_UART_RxCpltCallback+0x7c>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2b0a      	cmp	r3, #10
 8001c62:	d110      	bne.n	8001c86 <HAL_UART_RxCpltCallback+0x52>
		{
			fTC = true;
 8001c64:	4b14      	ldr	r3, [pc, #80]	@ (8001cb8 <HAL_UART_RxCpltCallback+0x84>)
 8001c66:	2201      	movs	r2, #1
 8001c68:	701a      	strb	r2, [r3, #0]
			memcpy((void*)tc_buffer, (void*)rx_buffer, sizeof(uint8_t)*rx_index);
 8001c6a:	4b10      	ldr	r3, [pc, #64]	@ (8001cac <HAL_UART_RxCpltCallback+0x78>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	461a      	mov	r2, r3
 8001c70:	4910      	ldr	r1, [pc, #64]	@ (8001cb4 <HAL_UART_RxCpltCallback+0x80>)
 8001c72:	4812      	ldr	r0, [pc, #72]	@ (8001cbc <HAL_UART_RxCpltCallback+0x88>)
 8001c74:	f00d fa47 	bl	800f106 <memcpy>
			NRecv = rx_index;
 8001c78:	4b0c      	ldr	r3, [pc, #48]	@ (8001cac <HAL_UART_RxCpltCallback+0x78>)
 8001c7a:	781a      	ldrb	r2, [r3, #0]
 8001c7c:	4b10      	ldr	r3, [pc, #64]	@ (8001cc0 <HAL_UART_RxCpltCallback+0x8c>)
 8001c7e:	701a      	strb	r2, [r3, #0]
			rx_index = 0;
 8001c80:	4b0a      	ldr	r3, [pc, #40]	@ (8001cac <HAL_UART_RxCpltCallback+0x78>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	701a      	strb	r2, [r3, #0]
		}

		// 순환 버퍼 또는 수신 종료 문자 조건으로 처리 가능
		if (rx_index >= MAX_TC_SIZE)
 8001c86:	4b09      	ldr	r3, [pc, #36]	@ (8001cac <HAL_UART_RxCpltCallback+0x78>)
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	b25b      	sxtb	r3, r3
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	da02      	bge.n	8001c96 <HAL_UART_RxCpltCallback+0x62>
		{
			rx_index = 0; // 오버플로 방지
 8001c90:	4b06      	ldr	r3, [pc, #24]	@ (8001cac <HAL_UART_RxCpltCallback+0x78>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	701a      	strb	r2, [r3, #0]
		}

		// 다음 수신 재시작
		HAL_UART_Receive_IT(&huart4, &rx_data, 1);
 8001c96:	2201      	movs	r2, #1
 8001c98:	4905      	ldr	r1, [pc, #20]	@ (8001cb0 <HAL_UART_RxCpltCallback+0x7c>)
 8001c9a:	480a      	ldr	r0, [pc, #40]	@ (8001cc4 <HAL_UART_RxCpltCallback+0x90>)
 8001c9c:	f009 ff4e 	bl	800bb3c <HAL_UART_Receive_IT>
	}
}
 8001ca0:	bf00      	nop
 8001ca2:	3708      	adds	r7, #8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	40004c00 	.word	0x40004c00
 8001cac:	24000588 	.word	0x24000588
 8001cb0:	24000505 	.word	0x24000505
 8001cb4:	24000508 	.word	0x24000508
 8001cb8:	24000504 	.word	0x24000504
 8001cbc:	2400058c 	.word	0x2400058c
 8001cc0:	2400060c 	.word	0x2400060c
 8001cc4:	240003d8 	.word	0x240003d8

08001cc8 <InitTMTC>:

void InitTMTC(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
	if (HAL_UART_Receive_IT(&huart4, &rx_data, 1) != HAL_OK)
 8001ccc:	2201      	movs	r2, #1
 8001cce:	4905      	ldr	r1, [pc, #20]	@ (8001ce4 <InitTMTC+0x1c>)
 8001cd0:	4805      	ldr	r0, [pc, #20]	@ (8001ce8 <InitTMTC+0x20>)
 8001cd2:	f009 ff33 	bl	800bb3c <HAL_UART_Receive_IT>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <InitTMTC+0x18>
	{
		Error_Handler();
 8001cdc:	f7ff fb54 	bl	8001388 <Error_Handler>
	}
}
 8001ce0:	bf00      	nop
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	24000505 	.word	0x24000505
 8001ce8:	240003d8 	.word	0x240003d8

08001cec <GetTC>:

void GetTC(uint8_t* TC)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
	memcpy((void*)TC,(void*)tc_buffer,sizeof(uint8_t)*NRecv);
 8001cf4:	4b05      	ldr	r3, [pc, #20]	@ (8001d0c <GetTC+0x20>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	4905      	ldr	r1, [pc, #20]	@ (8001d10 <GetTC+0x24>)
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f00d fa02 	bl	800f106 <memcpy>
}
 8001d02:	bf00      	nop
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	2400060c 	.word	0x2400060c
 8001d10:	2400058c 	.word	0x2400058c

08001d14 <SendTM>:

void SendTM(uint8_t* TM)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
	uint8_t n_send = strlen((char*)TM);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f7fe fb3f 	bl	80003a0 <strlen>
 8001d22:	4603      	mov	r3, r0
 8001d24:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart4, (uint8_t*)TM, n_send, HAL_MAX_DELAY);
 8001d26:	7bfb      	ldrb	r3, [r7, #15]
 8001d28:	b29a      	uxth	r2, r3
 8001d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d2e:	6879      	ldr	r1, [r7, #4]
 8001d30:	4803      	ldr	r0, [pc, #12]	@ (8001d40 <SendTM+0x2c>)
 8001d32:	f009 fe75 	bl	800ba20 <HAL_UART_Transmit>
}
 8001d36:	bf00      	nop
 8001d38:	3710      	adds	r7, #16
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	240003d8 	.word	0x240003d8

08001d44 <SVCmdDecoding>:

void SVCmdDecoding(uint8_t* sv)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b0a6      	sub	sp, #152	@ 0x98
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
	uint8_t TC[MAX_TC_SIZE];
	GetTC(TC);
 8001d4c:	f107 030c 	add.w	r3, r7, #12
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff ffcb 	bl	8001cec <GetTC>

	uint8_t sv_cnt = 0;
 8001d56:	2300      	movs	r3, #0
 8001d58:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
	char* tok;
	tok = strtok((char*)TC,",");
 8001d5c:	f107 030c 	add.w	r3, r7, #12
 8001d60:	4921      	ldr	r1, [pc, #132]	@ (8001de8 <SVCmdDecoding+0xa4>)
 8001d62:	4618      	mov	r0, r3
 8001d64:	f00d f8fc 	bl	800ef60 <strtok>
 8001d68:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
	if (strcmp(tok,"IGRVT") == 0)
 8001d6c:	491f      	ldr	r1, [pc, #124]	@ (8001dec <SVCmdDecoding+0xa8>)
 8001d6e:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8001d72:	f7fe fab5 	bl	80002e0 <strcmp>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d131      	bne.n	8001de0 <SVCmdDecoding+0x9c>
	{
		tok = strtok(NULL,",");
 8001d7c:	491a      	ldr	r1, [pc, #104]	@ (8001de8 <SVCmdDecoding+0xa4>)
 8001d7e:	2000      	movs	r0, #0
 8001d80:	f00d f8ee 	bl	800ef60 <strtok>
 8001d84:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
		while( tok != NULL)
 8001d88:	e024      	b.n	8001dd4 <SVCmdDecoding+0x90>
		{
			uint8_t data = (uint8_t)atoi(tok);
 8001d8a:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8001d8e:	f00c fa43 	bl	800e218 <atoi>
 8001d92:	4603      	mov	r3, r0
 8001d94:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				if (data == 999)
				{
					sv_cnt = 0;
					break;
				}
				else if (data <= 1)
 8001d98:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d80a      	bhi.n	8001db6 <SVCmdDecoding+0x72>
				{
					sv[sv_cnt] = atoi(tok);
 8001da0:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8001da4:	f00c fa38 	bl	800e218 <atoi>
 8001da8:	4601      	mov	r1, r0
 8001daa:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	4413      	add	r3, r2
 8001db2:	b2ca      	uxtb	r2, r1
 8001db4:	701a      	strb	r2, [r3, #0]
				}
			}
			sv_cnt++;
 8001db6:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8001dba:	3301      	adds	r3, #1
 8001dbc:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
			if (sv_cnt > MAX_SV_NUM)
 8001dc0:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8001dc4:	2b0a      	cmp	r3, #10
 8001dc6:	d80a      	bhi.n	8001dde <SVCmdDecoding+0x9a>
			{
				break;
			}

			tok = strtok(NULL,",");
 8001dc8:	4907      	ldr	r1, [pc, #28]	@ (8001de8 <SVCmdDecoding+0xa4>)
 8001dca:	2000      	movs	r0, #0
 8001dcc:	f00d f8c8 	bl	800ef60 <strtok>
 8001dd0:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
		while( tok != NULL)
 8001dd4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d1d6      	bne.n	8001d8a <SVCmdDecoding+0x46>
		}
	}
}
 8001ddc:	e000      	b.n	8001de0 <SVCmdDecoding+0x9c>
				break;
 8001dde:	bf00      	nop
}
 8001de0:	bf00      	nop
 8001de2:	3798      	adds	r7, #152	@ 0x98
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	08010ff8 	.word	0x08010ff8
 8001dec:	08010ffc 	.word	0x08010ffc

08001df0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001df0:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001e2c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001df4:	f7fe fd20 	bl	8000838 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001df8:	f7fe fc70 	bl	80006dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001dfc:	480c      	ldr	r0, [pc, #48]	@ (8001e30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001dfe:	490d      	ldr	r1, [pc, #52]	@ (8001e34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e00:	4a0d      	ldr	r2, [pc, #52]	@ (8001e38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e04:	e002      	b.n	8001e0c <LoopCopyDataInit>

08001e06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e0a:	3304      	adds	r3, #4

08001e0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e10:	d3f9      	bcc.n	8001e06 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e12:	4a0a      	ldr	r2, [pc, #40]	@ (8001e3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e14:	4c0a      	ldr	r4, [pc, #40]	@ (8001e40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e18:	e001      	b.n	8001e1e <LoopFillZerobss>

08001e1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e1c:	3204      	adds	r2, #4

08001e1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e20:	d3fb      	bcc.n	8001e1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e22:	f00d f949 	bl	800f0b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e26:	f7fe fd7d 	bl	8000924 <main>
  bx  lr
 8001e2a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e2c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001e30:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001e34:	240001f4 	.word	0x240001f4
  ldr r2, =_sidata
 8001e38:	08011428 	.word	0x08011428
  ldr r2, =_sbss
 8001e3c:	240001f8 	.word	0x240001f8
  ldr r4, =_ebss
 8001e40:	24000800 	.word	0x24000800

08001e44 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e44:	e7fe      	b.n	8001e44 <ADC3_IRQHandler>
	...

08001e48 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b08c      	sub	sp, #48	@ 0x30
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	4603      	mov	r3, r0
 8001e50:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001e52:	2300      	movs	r3, #0
 8001e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001e56:	79fb      	ldrb	r3, [r7, #7]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d009      	beq.n	8001e70 <BSP_LED_Init+0x28>
 8001e5c:	79fb      	ldrb	r3, [r7, #7]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d006      	beq.n	8001e70 <BSP_LED_Init+0x28>
 8001e62:	79fb      	ldrb	r3, [r7, #7]
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d003      	beq.n	8001e70 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001e68:	f06f 0301 	mvn.w	r3, #1
 8001e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e6e:	e055      	b.n	8001f1c <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8001e70:	79fb      	ldrb	r3, [r7, #7]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d10f      	bne.n	8001e96 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8001e76:	4b2c      	ldr	r3, [pc, #176]	@ (8001f28 <BSP_LED_Init+0xe0>)
 8001e78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e7c:	4a2a      	ldr	r2, [pc, #168]	@ (8001f28 <BSP_LED_Init+0xe0>)
 8001e7e:	f043 0302 	orr.w	r3, r3, #2
 8001e82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e86:	4b28      	ldr	r3, [pc, #160]	@ (8001f28 <BSP_LED_Init+0xe0>)
 8001e88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	617b      	str	r3, [r7, #20]
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	e021      	b.n	8001eda <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8001e96:	79fb      	ldrb	r3, [r7, #7]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d10f      	bne.n	8001ebc <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8001e9c:	4b22      	ldr	r3, [pc, #136]	@ (8001f28 <BSP_LED_Init+0xe0>)
 8001e9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ea2:	4a21      	ldr	r2, [pc, #132]	@ (8001f28 <BSP_LED_Init+0xe0>)
 8001ea4:	f043 0310 	orr.w	r3, r3, #16
 8001ea8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001eac:	4b1e      	ldr	r3, [pc, #120]	@ (8001f28 <BSP_LED_Init+0xe0>)
 8001eae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eb2:	f003 0310 	and.w	r3, r3, #16
 8001eb6:	613b      	str	r3, [r7, #16]
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	e00e      	b.n	8001eda <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8001ebc:	4b1a      	ldr	r3, [pc, #104]	@ (8001f28 <BSP_LED_Init+0xe0>)
 8001ebe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ec2:	4a19      	ldr	r2, [pc, #100]	@ (8001f28 <BSP_LED_Init+0xe0>)
 8001ec4:	f043 0302 	orr.w	r3, r3, #2
 8001ec8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ecc:	4b16      	ldr	r3, [pc, #88]	@ (8001f28 <BSP_LED_Init+0xe0>)
 8001ece:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	60fb      	str	r3, [r7, #12]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001eda:	79fb      	ldrb	r3, [r7, #7]
 8001edc:	4a13      	ldr	r2, [pc, #76]	@ (8001f2c <BSP_LED_Init+0xe4>)
 8001ede:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ee2:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eec:	2303      	movs	r3, #3
 8001eee:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001ef0:	79fb      	ldrb	r3, [r7, #7]
 8001ef2:	4a0f      	ldr	r2, [pc, #60]	@ (8001f30 <BSP_LED_Init+0xe8>)
 8001ef4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ef8:	f107 0218 	add.w	r2, r7, #24
 8001efc:	4611      	mov	r1, r2
 8001efe:	4618      	mov	r0, r3
 8001f00:	f004 ffce 	bl	8006ea0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001f04:	79fb      	ldrb	r3, [r7, #7]
 8001f06:	4a0a      	ldr	r2, [pc, #40]	@ (8001f30 <BSP_LED_Init+0xe8>)
 8001f08:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001f0c:	79fb      	ldrb	r3, [r7, #7]
 8001f0e:	4a07      	ldr	r2, [pc, #28]	@ (8001f2c <BSP_LED_Init+0xe4>)
 8001f10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f14:	2200      	movs	r2, #0
 8001f16:	4619      	mov	r1, r3
 8001f18:	f005 f972 	bl	8007200 <HAL_GPIO_WritePin>
  }

  return ret;
 8001f1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3730      	adds	r7, #48	@ 0x30
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	58024400 	.word	0x58024400
 8001f2c:	08011014 	.word	0x08011014
 8001f30:	2400000c 	.word	0x2400000c

08001f34 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001f42:	79fb      	ldrb	r3, [r7, #7]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d009      	beq.n	8001f5c <BSP_LED_On+0x28>
 8001f48:	79fb      	ldrb	r3, [r7, #7]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d006      	beq.n	8001f5c <BSP_LED_On+0x28>
 8001f4e:	79fb      	ldrb	r3, [r7, #7]
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d003      	beq.n	8001f5c <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001f54:	f06f 0301 	mvn.w	r3, #1
 8001f58:	60fb      	str	r3, [r7, #12]
 8001f5a:	e00b      	b.n	8001f74 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8001f5c:	79fb      	ldrb	r3, [r7, #7]
 8001f5e:	4a08      	ldr	r2, [pc, #32]	@ (8001f80 <BSP_LED_On+0x4c>)
 8001f60:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001f64:	79fb      	ldrb	r3, [r7, #7]
 8001f66:	4a07      	ldr	r2, [pc, #28]	@ (8001f84 <BSP_LED_On+0x50>)
 8001f68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	4619      	mov	r1, r3
 8001f70:	f005 f946 	bl	8007200 <HAL_GPIO_WritePin>
  }

  return ret;
 8001f74:	68fb      	ldr	r3, [r7, #12]
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	2400000c 	.word	0x2400000c
 8001f84:	08011014 	.word	0x08011014

08001f88 <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	4603      	mov	r3, r0
 8001f90:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001f92:	2300      	movs	r3, #0
 8001f94:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001f96:	79fb      	ldrb	r3, [r7, #7]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d009      	beq.n	8001fb0 <BSP_LED_Off+0x28>
 8001f9c:	79fb      	ldrb	r3, [r7, #7]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d006      	beq.n	8001fb0 <BSP_LED_Off+0x28>
 8001fa2:	79fb      	ldrb	r3, [r7, #7]
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d003      	beq.n	8001fb0 <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001fa8:	f06f 0301 	mvn.w	r3, #1
 8001fac:	60fb      	str	r3, [r7, #12]
 8001fae:	e00b      	b.n	8001fc8 <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001fb0:	79fb      	ldrb	r3, [r7, #7]
 8001fb2:	4a08      	ldr	r2, [pc, #32]	@ (8001fd4 <BSP_LED_Off+0x4c>)
 8001fb4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001fb8:	79fb      	ldrb	r3, [r7, #7]
 8001fba:	4a07      	ldr	r2, [pc, #28]	@ (8001fd8 <BSP_LED_Off+0x50>)
 8001fbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	f005 f91c 	bl	8007200 <HAL_GPIO_WritePin>
  }

  return ret;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	2400000c 	.word	0x2400000c
 8001fd8:	08011014 	.word	0x08011014

08001fdc <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001fea:	79fb      	ldrb	r3, [r7, #7]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d009      	beq.n	8002004 <BSP_LED_Toggle+0x28>
 8001ff0:	79fb      	ldrb	r3, [r7, #7]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d006      	beq.n	8002004 <BSP_LED_Toggle+0x28>
 8001ff6:	79fb      	ldrb	r3, [r7, #7]
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d003      	beq.n	8002004 <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001ffc:	f06f 0301 	mvn.w	r3, #1
 8002000:	60fb      	str	r3, [r7, #12]
 8002002:	e00b      	b.n	800201c <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8002004:	79fb      	ldrb	r3, [r7, #7]
 8002006:	4a08      	ldr	r2, [pc, #32]	@ (8002028 <BSP_LED_Toggle+0x4c>)
 8002008:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800200c:	79fb      	ldrb	r3, [r7, #7]
 800200e:	4907      	ldr	r1, [pc, #28]	@ (800202c <BSP_LED_Toggle+0x50>)
 8002010:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002014:	4619      	mov	r1, r3
 8002016:	4610      	mov	r0, r2
 8002018:	f005 f90b 	bl	8007232 <HAL_GPIO_TogglePin>
  }

  return ret;
 800201c:	68fb      	ldr	r3, [r7, #12]
}
 800201e:	4618      	mov	r0, r3
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	2400000c 	.word	0x2400000c
 800202c:	08011014 	.word	0x08011014

08002030 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b088      	sub	sp, #32
 8002034:	af00      	add	r7, sp, #0
 8002036:	4603      	mov	r3, r0
 8002038:	460a      	mov	r2, r1
 800203a:	71fb      	strb	r3, [r7, #7]
 800203c:	4613      	mov	r3, r2
 800203e:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8002040:	4b2e      	ldr	r3, [pc, #184]	@ (80020fc <BSP_PB_Init+0xcc>)
 8002042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002046:	4a2d      	ldr	r2, [pc, #180]	@ (80020fc <BSP_PB_Init+0xcc>)
 8002048:	f043 0304 	orr.w	r3, r3, #4
 800204c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002050:	4b2a      	ldr	r3, [pc, #168]	@ (80020fc <BSP_PB_Init+0xcc>)
 8002052:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002056:	f003 0304 	and.w	r3, r3, #4
 800205a:	60bb      	str	r3, [r7, #8]
 800205c:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 800205e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002062:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8002064:	2302      	movs	r3, #2
 8002066:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002068:	2302      	movs	r3, #2
 800206a:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 800206c:	79bb      	ldrb	r3, [r7, #6]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d10c      	bne.n	800208c <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002072:	2300      	movs	r3, #0
 8002074:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8002076:	79fb      	ldrb	r3, [r7, #7]
 8002078:	4a21      	ldr	r2, [pc, #132]	@ (8002100 <BSP_PB_Init+0xd0>)
 800207a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800207e:	f107 020c 	add.w	r2, r7, #12
 8002082:	4611      	mov	r1, r2
 8002084:	4618      	mov	r0, r3
 8002086:	f004 ff0b 	bl	8006ea0 <HAL_GPIO_Init>
 800208a:	e031      	b.n	80020f0 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 800208c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002090:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002092:	79fb      	ldrb	r3, [r7, #7]
 8002094:	4a1a      	ldr	r2, [pc, #104]	@ (8002100 <BSP_PB_Init+0xd0>)
 8002096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800209a:	f107 020c 	add.w	r2, r7, #12
 800209e:	4611      	mov	r1, r2
 80020a0:	4618      	mov	r0, r3
 80020a2:	f004 fefd 	bl	8006ea0 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80020a6:	79fb      	ldrb	r3, [r7, #7]
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	4a16      	ldr	r2, [pc, #88]	@ (8002104 <BSP_PB_Init+0xd4>)
 80020ac:	441a      	add	r2, r3
 80020ae:	79fb      	ldrb	r3, [r7, #7]
 80020b0:	4915      	ldr	r1, [pc, #84]	@ (8002108 <BSP_PB_Init+0xd8>)
 80020b2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80020b6:	4619      	mov	r1, r3
 80020b8:	4610      	mov	r0, r2
 80020ba:	f004 fea0 	bl	8006dfe <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80020be:	79fb      	ldrb	r3, [r7, #7]
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	4a10      	ldr	r2, [pc, #64]	@ (8002104 <BSP_PB_Init+0xd4>)
 80020c4:	1898      	adds	r0, r3, r2
 80020c6:	79fb      	ldrb	r3, [r7, #7]
 80020c8:	4a10      	ldr	r2, [pc, #64]	@ (800210c <BSP_PB_Init+0xdc>)
 80020ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ce:	461a      	mov	r2, r3
 80020d0:	2100      	movs	r1, #0
 80020d2:	f004 fe75 	bl	8006dc0 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80020d6:	2028      	movs	r0, #40	@ 0x28
 80020d8:	79fb      	ldrb	r3, [r7, #7]
 80020da:	4a0d      	ldr	r2, [pc, #52]	@ (8002110 <BSP_PB_Init+0xe0>)
 80020dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020e0:	2200      	movs	r2, #0
 80020e2:	4619      	mov	r1, r3
 80020e4:	f001 ffe9 	bl	80040ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80020e8:	2328      	movs	r3, #40	@ 0x28
 80020ea:	4618      	mov	r0, r3
 80020ec:	f001 ffff 	bl	80040ee <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3720      	adds	r7, #32
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	58024400 	.word	0x58024400
 8002100:	24000018 	.word	0x24000018
 8002104:	24000610 	.word	0x24000610
 8002108:	0801101c 	.word	0x0801101c
 800210c:	2400001c 	.word	0x2400001c
 8002110:	24000020 	.word	0x24000020

08002114 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	4603      	mov	r3, r0
 800211c:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800211e:	79fb      	ldrb	r3, [r7, #7]
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	4a04      	ldr	r2, [pc, #16]	@ (8002134 <BSP_PB_IRQHandler+0x20>)
 8002124:	4413      	add	r3, r2
 8002126:	4618      	mov	r0, r3
 8002128:	f004 fe7e 	bl	8006e28 <HAL_EXTI_IRQHandler>
}
 800212c:	bf00      	nop
 800212e:	3708      	adds	r7, #8
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	24000610 	.word	0x24000610

08002138 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	4603      	mov	r3, r0
 8002140:	6039      	str	r1, [r7, #0]
 8002142:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002144:	2300      	movs	r3, #0
 8002146:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8002148:	79fb      	ldrb	r3, [r7, #7]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d003      	beq.n	8002156 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800214e:	f06f 0301 	mvn.w	r3, #1
 8002152:	60fb      	str	r3, [r7, #12]
 8002154:	e018      	b.n	8002188 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8002156:	79fb      	ldrb	r3, [r7, #7]
 8002158:	2294      	movs	r2, #148	@ 0x94
 800215a:	fb02 f303 	mul.w	r3, r2, r3
 800215e:	4a0d      	ldr	r2, [pc, #52]	@ (8002194 <BSP_COM_Init+0x5c>)
 8002160:	4413      	add	r3, r2
 8002162:	4618      	mov	r0, r3
 8002164:	f000 f86e 	bl	8002244 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8002168:	79fb      	ldrb	r3, [r7, #7]
 800216a:	2294      	movs	r2, #148	@ 0x94
 800216c:	fb02 f303 	mul.w	r3, r2, r3
 8002170:	4a08      	ldr	r2, [pc, #32]	@ (8002194 <BSP_COM_Init+0x5c>)
 8002172:	4413      	add	r3, r2
 8002174:	6839      	ldr	r1, [r7, #0]
 8002176:	4618      	mov	r0, r3
 8002178:	f000 f80e 	bl	8002198 <MX_USART3_Init>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d002      	beq.n	8002188 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002182:	f06f 0303 	mvn.w	r3, #3
 8002186:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002188:	68fb      	ldr	r3, [r7, #12]
}
 800218a:	4618      	mov	r0, r3
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	24000618 	.word	0x24000618

08002198 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 80021a2:	4b15      	ldr	r3, [pc, #84]	@ (80021f8 <MX_USART3_Init+0x60>)
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	220c      	movs	r2, #12
 80021b6:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	895b      	ldrh	r3, [r3, #10]
 80021bc:	461a      	mov	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685a      	ldr	r2, [r3, #4]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	891b      	ldrh	r3, [r3, #8]
 80021ce:	461a      	mov	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	899b      	ldrh	r3, [r3, #12]
 80021d8:	461a      	mov	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80021e4:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f009 fbca 	bl	800b980 <HAL_UART_Init>
 80021ec:	4603      	mov	r3, r0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	24000008 	.word	0x24000008

080021fc <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8002204:	4b09      	ldr	r3, [pc, #36]	@ (800222c <__io_putchar+0x30>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	461a      	mov	r2, r3
 800220a:	2394      	movs	r3, #148	@ 0x94
 800220c:	fb02 f303 	mul.w	r3, r2, r3
 8002210:	4a07      	ldr	r2, [pc, #28]	@ (8002230 <__io_putchar+0x34>)
 8002212:	1898      	adds	r0, r3, r2
 8002214:	1d39      	adds	r1, r7, #4
 8002216:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800221a:	2201      	movs	r2, #1
 800221c:	f009 fc00 	bl	800ba20 <HAL_UART_Transmit>
  return ch;
 8002220:	687b      	ldr	r3, [r7, #4]
}
 8002222:	4618      	mov	r0, r3
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	240006ac 	.word	0x240006ac
 8002230:	24000618 	.word	0x24000618

08002234 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8002238:	2000      	movs	r0, #0
 800223a:	f7ff f891 	bl	8001360 <BSP_PB_Callback>
}
 800223e:	bf00      	nop
 8002240:	bd80      	pop	{r7, pc}
	...

08002244 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b08a      	sub	sp, #40	@ 0x28
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 800224c:	4b27      	ldr	r3, [pc, #156]	@ (80022ec <COM1_MspInit+0xa8>)
 800224e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002252:	4a26      	ldr	r2, [pc, #152]	@ (80022ec <COM1_MspInit+0xa8>)
 8002254:	f043 0308 	orr.w	r3, r3, #8
 8002258:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800225c:	4b23      	ldr	r3, [pc, #140]	@ (80022ec <COM1_MspInit+0xa8>)
 800225e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002262:	f003 0308 	and.w	r3, r3, #8
 8002266:	613b      	str	r3, [r7, #16]
 8002268:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 800226a:	4b20      	ldr	r3, [pc, #128]	@ (80022ec <COM1_MspInit+0xa8>)
 800226c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002270:	4a1e      	ldr	r2, [pc, #120]	@ (80022ec <COM1_MspInit+0xa8>)
 8002272:	f043 0308 	orr.w	r3, r3, #8
 8002276:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800227a:	4b1c      	ldr	r3, [pc, #112]	@ (80022ec <COM1_MspInit+0xa8>)
 800227c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002280:	f003 0308 	and.w	r3, r3, #8
 8002284:	60fb      	str	r3, [r7, #12]
 8002286:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8002288:	4b18      	ldr	r3, [pc, #96]	@ (80022ec <COM1_MspInit+0xa8>)
 800228a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800228e:	4a17      	ldr	r2, [pc, #92]	@ (80022ec <COM1_MspInit+0xa8>)
 8002290:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002294:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002298:	4b14      	ldr	r3, [pc, #80]	@ (80022ec <COM1_MspInit+0xa8>)
 800229a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800229e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022a2:	60bb      	str	r3, [r7, #8]
 80022a4:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 80022a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022aa:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80022ac:	2302      	movs	r3, #2
 80022ae:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80022b0:	2302      	movs	r3, #2
 80022b2:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80022b4:	2301      	movs	r3, #1
 80022b6:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 80022b8:	2307      	movs	r3, #7
 80022ba:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 80022bc:	f107 0314 	add.w	r3, r7, #20
 80022c0:	4619      	mov	r1, r3
 80022c2:	480b      	ldr	r0, [pc, #44]	@ (80022f0 <COM1_MspInit+0xac>)
 80022c4:	f004 fdec 	bl	8006ea0 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 80022c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80022cc:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80022ce:	2302      	movs	r3, #2
 80022d0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 80022d2:	2307      	movs	r3, #7
 80022d4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 80022d6:	f107 0314 	add.w	r3, r7, #20
 80022da:	4619      	mov	r1, r3
 80022dc:	4804      	ldr	r0, [pc, #16]	@ (80022f0 <COM1_MspInit+0xac>)
 80022de:	f004 fddf 	bl	8006ea0 <HAL_GPIO_Init>
}
 80022e2:	bf00      	nop
 80022e4:	3728      	adds	r7, #40	@ 0x28
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	58024400 	.word	0x58024400
 80022f0:	58020c00 	.word	0x58020c00

080022f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022fa:	2003      	movs	r0, #3
 80022fc:	f001 fed2 	bl	80040a4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002300:	f005 fe4a 	bl	8007f98 <HAL_RCC_GetSysClockFreq>
 8002304:	4602      	mov	r2, r0
 8002306:	4b15      	ldr	r3, [pc, #84]	@ (800235c <HAL_Init+0x68>)
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	0a1b      	lsrs	r3, r3, #8
 800230c:	f003 030f 	and.w	r3, r3, #15
 8002310:	4913      	ldr	r1, [pc, #76]	@ (8002360 <HAL_Init+0x6c>)
 8002312:	5ccb      	ldrb	r3, [r1, r3]
 8002314:	f003 031f 	and.w	r3, r3, #31
 8002318:	fa22 f303 	lsr.w	r3, r2, r3
 800231c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800231e:	4b0f      	ldr	r3, [pc, #60]	@ (800235c <HAL_Init+0x68>)
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	f003 030f 	and.w	r3, r3, #15
 8002326:	4a0e      	ldr	r2, [pc, #56]	@ (8002360 <HAL_Init+0x6c>)
 8002328:	5cd3      	ldrb	r3, [r2, r3]
 800232a:	f003 031f 	and.w	r3, r3, #31
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	fa22 f303 	lsr.w	r3, r2, r3
 8002334:	4a0b      	ldr	r2, [pc, #44]	@ (8002364 <HAL_Init+0x70>)
 8002336:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002338:	4a0b      	ldr	r2, [pc, #44]	@ (8002368 <HAL_Init+0x74>)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800233e:	2000      	movs	r0, #0
 8002340:	f000 f814 	bl	800236c <HAL_InitTick>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e002      	b.n	8002354 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800234e:	f7ff f919 	bl	8001584 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	4618      	mov	r0, r3
 8002356:	3708      	adds	r7, #8
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	58024400 	.word	0x58024400
 8002360:	08011004 	.word	0x08011004
 8002364:	24000004 	.word	0x24000004
 8002368:	24000000 	.word	0x24000000

0800236c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002374:	4b15      	ldr	r3, [pc, #84]	@ (80023cc <HAL_InitTick+0x60>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d101      	bne.n	8002380 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e021      	b.n	80023c4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002380:	4b13      	ldr	r3, [pc, #76]	@ (80023d0 <HAL_InitTick+0x64>)
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	4b11      	ldr	r3, [pc, #68]	@ (80023cc <HAL_InitTick+0x60>)
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	4619      	mov	r1, r3
 800238a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800238e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002392:	fbb2 f3f3 	udiv	r3, r2, r3
 8002396:	4618      	mov	r0, r3
 8002398:	f001 feb7 	bl	800410a <HAL_SYSTICK_Config>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e00e      	b.n	80023c4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2b0f      	cmp	r3, #15
 80023aa:	d80a      	bhi.n	80023c2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023ac:	2200      	movs	r2, #0
 80023ae:	6879      	ldr	r1, [r7, #4]
 80023b0:	f04f 30ff 	mov.w	r0, #4294967295
 80023b4:	f001 fe81 	bl	80040ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023b8:	4a06      	ldr	r2, [pc, #24]	@ (80023d4 <HAL_InitTick+0x68>)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023be:	2300      	movs	r3, #0
 80023c0:	e000      	b.n	80023c4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3708      	adds	r7, #8
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	24000028 	.word	0x24000028
 80023d0:	24000000 	.word	0x24000000
 80023d4:	24000024 	.word	0x24000024

080023d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80023dc:	4b06      	ldr	r3, [pc, #24]	@ (80023f8 <HAL_IncTick+0x20>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	461a      	mov	r2, r3
 80023e2:	4b06      	ldr	r3, [pc, #24]	@ (80023fc <HAL_IncTick+0x24>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4413      	add	r3, r2
 80023e8:	4a04      	ldr	r2, [pc, #16]	@ (80023fc <HAL_IncTick+0x24>)
 80023ea:	6013      	str	r3, [r2, #0]
}
 80023ec:	bf00      	nop
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	24000028 	.word	0x24000028
 80023fc:	240006b0 	.word	0x240006b0

08002400 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  return uwTick;
 8002404:	4b03      	ldr	r3, [pc, #12]	@ (8002414 <HAL_GetTick+0x14>)
 8002406:	681b      	ldr	r3, [r3, #0]
}
 8002408:	4618      	mov	r0, r3
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	240006b0 	.word	0x240006b0

08002418 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800241c:	4b03      	ldr	r3, [pc, #12]	@ (800242c <HAL_GetREVID+0x14>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	0c1b      	lsrs	r3, r3, #16
}
 8002422:	4618      	mov	r0, r3
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr
 800242c:	5c001000 	.word	0x5c001000

08002430 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800243a:	4b07      	ldr	r3, [pc, #28]	@ (8002458 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800243c:	685a      	ldr	r2, [r3, #4]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	43db      	mvns	r3, r3
 8002442:	401a      	ands	r2, r3
 8002444:	4904      	ldr	r1, [pc, #16]	@ (8002458 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	4313      	orrs	r3, r2
 800244a:	604b      	str	r3, [r1, #4]
}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr
 8002458:	58000400 	.word	0x58000400

0800245c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	431a      	orrs	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	609a      	str	r2, [r3, #8]
}
 8002476:	bf00      	nop
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr

08002482 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002482:	b480      	push	{r7}
 8002484:	b083      	sub	sp, #12
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
 800248a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	431a      	orrs	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	609a      	str	r2, [r3, #8]
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b087      	sub	sp, #28
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d107      	bne.n	80024e8 <LL_ADC_SetChannelPreselection+0x24>
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	0e9b      	lsrs	r3, r3, #26
 80024dc:	f003 031f 	and.w	r3, r3, #31
 80024e0:	2201      	movs	r2, #1
 80024e2:	fa02 f303 	lsl.w	r3, r2, r3
 80024e6:	e015      	b.n	8002514 <LL_ADC_SetChannelPreselection+0x50>
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	fa93 f3a3 	rbit	r3, r3
 80024f2:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 80024fe:	2320      	movs	r3, #32
 8002500:	e003      	b.n	800250a <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	fab3 f383 	clz	r3, r3
 8002508:	b2db      	uxtb	r3, r3
 800250a:	f003 031f 	and.w	r3, r3, #31
 800250e:	2201      	movs	r2, #1
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	69d2      	ldr	r2, [r2, #28]
 8002518:	431a      	orrs	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 800251e:	bf00      	nop
 8002520:	371c      	adds	r7, #28
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr

0800252a <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800252a:	b480      	push	{r7}
 800252c:	b087      	sub	sp, #28
 800252e:	af00      	add	r7, sp, #0
 8002530:	60f8      	str	r0, [r7, #12]
 8002532:	60b9      	str	r1, [r7, #8]
 8002534:	607a      	str	r2, [r7, #4]
 8002536:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	3360      	adds	r3, #96	@ 0x60
 800253c:	461a      	mov	r2, r3
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	4413      	add	r3, r2
 8002544:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	430b      	orrs	r3, r1
 8002558:	431a      	orrs	r2, r3
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800255e:	bf00      	nop
 8002560:	371c      	adds	r7, #28
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr

0800256a <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800256a:	b480      	push	{r7}
 800256c:	b085      	sub	sp, #20
 800256e:	af00      	add	r7, sp, #0
 8002570:	60f8      	str	r0, [r7, #12]
 8002572:	60b9      	str	r1, [r7, #8]
 8002574:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	f003 031f 	and.w	r3, r3, #31
 8002584:	6879      	ldr	r1, [r7, #4]
 8002586:	fa01 f303 	lsl.w	r3, r1, r3
 800258a:	431a      	orrs	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	611a      	str	r2, [r3, #16]
}
 8002590:	bf00      	nop
 8002592:	3714      	adds	r7, #20
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800259c:	b480      	push	{r7}
 800259e:	b087      	sub	sp, #28
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	3360      	adds	r3, #96	@ 0x60
 80025ac:	461a      	mov	r2, r3
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	4413      	add	r3, r2
 80025b4:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	431a      	orrs	r2, r3
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	601a      	str	r2, [r3, #0]
  }
}
 80025c6:	bf00      	nop
 80025c8:	371c      	adds	r7, #28
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr

080025d2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80025d2:	b480      	push	{r7}
 80025d4:	b083      	sub	sp, #12
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80025e6:	2301      	movs	r3, #1
 80025e8:	e000      	b.n	80025ec <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b087      	sub	sp, #28
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	3330      	adds	r3, #48	@ 0x30
 8002608:	461a      	mov	r2, r3
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	0a1b      	lsrs	r3, r3, #8
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	f003 030c 	and.w	r3, r3, #12
 8002614:	4413      	add	r3, r2
 8002616:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	f003 031f 	and.w	r3, r3, #31
 8002622:	211f      	movs	r1, #31
 8002624:	fa01 f303 	lsl.w	r3, r1, r3
 8002628:	43db      	mvns	r3, r3
 800262a:	401a      	ands	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	0e9b      	lsrs	r3, r3, #26
 8002630:	f003 011f 	and.w	r1, r3, #31
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	f003 031f 	and.w	r3, r3, #31
 800263a:	fa01 f303 	lsl.w	r3, r1, r3
 800263e:	431a      	orrs	r2, r3
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002644:	bf00      	nop
 8002646:	371c      	adds	r7, #28
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	f023 0203 	bic.w	r2, r3, #3
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	431a      	orrs	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	60da      	str	r2, [r3, #12]
}
 800266a:	bf00      	nop
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr

08002676 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002676:	b480      	push	{r7}
 8002678:	b083      	sub	sp, #12
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002682:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800268a:	2301      	movs	r3, #1
 800268c:	e000      	b.n	8002690 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800268e:	2300      	movs	r3, #0
}
 8002690:	4618      	mov	r0, r3
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800269c:	b480      	push	{r7}
 800269e:	b087      	sub	sp, #28
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	3314      	adds	r3, #20
 80026ac:	461a      	mov	r2, r3
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	0e5b      	lsrs	r3, r3, #25
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	f003 0304 	and.w	r3, r3, #4
 80026b8:	4413      	add	r3, r2
 80026ba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	0d1b      	lsrs	r3, r3, #20
 80026c4:	f003 031f 	and.w	r3, r3, #31
 80026c8:	2107      	movs	r1, #7
 80026ca:	fa01 f303 	lsl.w	r3, r1, r3
 80026ce:	43db      	mvns	r3, r3
 80026d0:	401a      	ands	r2, r3
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	0d1b      	lsrs	r3, r3, #20
 80026d6:	f003 031f 	and.w	r3, r3, #31
 80026da:	6879      	ldr	r1, [r7, #4]
 80026dc:	fa01 f303 	lsl.w	r3, r1, r3
 80026e0:	431a      	orrs	r2, r3
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80026e6:	bf00      	nop
 80026e8:	371c      	adds	r7, #28
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
	...

080026f4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800270c:	43db      	mvns	r3, r3
 800270e:	401a      	ands	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f003 0318 	and.w	r3, r3, #24
 8002716:	4908      	ldr	r1, [pc, #32]	@ (8002738 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002718:	40d9      	lsrs	r1, r3
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	400b      	ands	r3, r1
 800271e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002722:	431a      	orrs	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800272a:	bf00      	nop
 800272c:	3714      	adds	r7, #20
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	000fffff 	.word	0x000fffff

0800273c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f003 031f 	and.w	r3, r3, #31
}
 800274c:	4618      	mov	r0, r3
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8002768:	4618      	mov	r0, r3
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	689a      	ldr	r2, [r3, #8]
 8002780:	4b04      	ldr	r3, [pc, #16]	@ (8002794 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002782:	4013      	ands	r3, r2
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	6093      	str	r3, [r2, #8]
}
 8002788:	bf00      	nop
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr
 8002794:	5fffffc0 	.word	0x5fffffc0

08002798 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80027a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80027ac:	d101      	bne.n	80027b2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80027ae:	2301      	movs	r3, #1
 80027b0:	e000      	b.n	80027b4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689a      	ldr	r2, [r3, #8]
 80027cc:	4b05      	ldr	r3, [pc, #20]	@ (80027e4 <LL_ADC_EnableInternalRegulator+0x24>)
 80027ce:	4013      	ands	r3, r2
 80027d0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr
 80027e4:	6fffffc0 	.word	0x6fffffc0

080027e8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80027fc:	d101      	bne.n	8002802 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80027fe:	2301      	movs	r3, #1
 8002800:	e000      	b.n	8002804 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	689a      	ldr	r2, [r3, #8]
 800281c:	4b05      	ldr	r3, [pc, #20]	@ (8002834 <LL_ADC_Enable+0x24>)
 800281e:	4013      	ands	r3, r2
 8002820:	f043 0201 	orr.w	r2, r3, #1
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002828:	bf00      	nop
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr
 8002834:	7fffffc0 	.word	0x7fffffc0

08002838 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	2b01      	cmp	r3, #1
 800284a:	d101      	bne.n	8002850 <LL_ADC_IsEnabled+0x18>
 800284c:	2301      	movs	r3, #1
 800284e:	e000      	b.n	8002852 <LL_ADC_IsEnabled+0x1a>
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
	...

08002860 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	689a      	ldr	r2, [r3, #8]
 800286c:	4b05      	ldr	r3, [pc, #20]	@ (8002884 <LL_ADC_REG_StartConversion+0x24>)
 800286e:	4013      	ands	r3, r2
 8002870:	f043 0204 	orr.w	r2, r3, #4
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr
 8002884:	7fffffc0 	.word	0x7fffffc0

08002888 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f003 0304 	and.w	r3, r3, #4
 8002898:	2b04      	cmp	r3, #4
 800289a:	d101      	bne.n	80028a0 <LL_ADC_REG_IsConversionOngoing+0x18>
 800289c:	2301      	movs	r3, #1
 800289e:	e000      	b.n	80028a2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr

080028ae <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80028ae:	b480      	push	{r7}
 80028b0:	b083      	sub	sp, #12
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f003 0308 	and.w	r3, r3, #8
 80028be:	2b08      	cmp	r3, #8
 80028c0:	d101      	bne.n	80028c6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80028c2:	2301      	movs	r3, #1
 80028c4:	e000      	b.n	80028c8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80028d4:	b590      	push	{r4, r7, lr}
 80028d6:	b089      	sub	sp, #36	@ 0x24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028dc:	2300      	movs	r3, #0
 80028de:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80028e0:	2300      	movs	r3, #0
 80028e2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e18f      	b.n	8002c0e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d109      	bne.n	8002910 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f7fe fe5b 	bl	80015b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4618      	mov	r0, r3
 8002916:	f7ff ff3f 	bl	8002798 <LL_ADC_IsDeepPowerDownEnabled>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d004      	beq.n	800292a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4618      	mov	r0, r3
 8002926:	f7ff ff25 	bl	8002774 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4618      	mov	r0, r3
 8002930:	f7ff ff5a 	bl	80027e8 <LL_ADC_IsInternalRegulatorEnabled>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d114      	bne.n	8002964 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4618      	mov	r0, r3
 8002940:	f7ff ff3e 	bl	80027c0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002944:	4b87      	ldr	r3, [pc, #540]	@ (8002b64 <HAL_ADC_Init+0x290>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	099b      	lsrs	r3, r3, #6
 800294a:	4a87      	ldr	r2, [pc, #540]	@ (8002b68 <HAL_ADC_Init+0x294>)
 800294c:	fba2 2303 	umull	r2, r3, r2, r3
 8002950:	099b      	lsrs	r3, r3, #6
 8002952:	3301      	adds	r3, #1
 8002954:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002956:	e002      	b.n	800295e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	3b01      	subs	r3, #1
 800295c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d1f9      	bne.n	8002958 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4618      	mov	r0, r3
 800296a:	f7ff ff3d 	bl	80027e8 <LL_ADC_IsInternalRegulatorEnabled>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d10d      	bne.n	8002990 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002978:	f043 0210 	orr.w	r2, r3, #16
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002984:	f043 0201 	orr.w	r2, r3, #1
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4618      	mov	r0, r3
 8002996:	f7ff ff77 	bl	8002888 <LL_ADC_REG_IsConversionOngoing>
 800299a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029a0:	f003 0310 	and.w	r3, r3, #16
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f040 8129 	bne.w	8002bfc <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f040 8125 	bne.w	8002bfc <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029b6:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80029ba:	f043 0202 	orr.w	r2, r3, #2
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7ff ff36 	bl	8002838 <LL_ADC_IsEnabled>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d136      	bne.n	8002a40 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a65      	ldr	r2, [pc, #404]	@ (8002b6c <HAL_ADC_Init+0x298>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d004      	beq.n	80029e6 <HAL_ADC_Init+0x112>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a63      	ldr	r2, [pc, #396]	@ (8002b70 <HAL_ADC_Init+0x29c>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d10e      	bne.n	8002a04 <HAL_ADC_Init+0x130>
 80029e6:	4861      	ldr	r0, [pc, #388]	@ (8002b6c <HAL_ADC_Init+0x298>)
 80029e8:	f7ff ff26 	bl	8002838 <LL_ADC_IsEnabled>
 80029ec:	4604      	mov	r4, r0
 80029ee:	4860      	ldr	r0, [pc, #384]	@ (8002b70 <HAL_ADC_Init+0x29c>)
 80029f0:	f7ff ff22 	bl	8002838 <LL_ADC_IsEnabled>
 80029f4:	4603      	mov	r3, r0
 80029f6:	4323      	orrs	r3, r4
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	bf0c      	ite	eq
 80029fc:	2301      	moveq	r3, #1
 80029fe:	2300      	movne	r3, #0
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	e008      	b.n	8002a16 <HAL_ADC_Init+0x142>
 8002a04:	485b      	ldr	r0, [pc, #364]	@ (8002b74 <HAL_ADC_Init+0x2a0>)
 8002a06:	f7ff ff17 	bl	8002838 <LL_ADC_IsEnabled>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	bf0c      	ite	eq
 8002a10:	2301      	moveq	r3, #1
 8002a12:	2300      	movne	r3, #0
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d012      	beq.n	8002a40 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a53      	ldr	r2, [pc, #332]	@ (8002b6c <HAL_ADC_Init+0x298>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d004      	beq.n	8002a2e <HAL_ADC_Init+0x15a>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a51      	ldr	r2, [pc, #324]	@ (8002b70 <HAL_ADC_Init+0x29c>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d101      	bne.n	8002a32 <HAL_ADC_Init+0x15e>
 8002a2e:	4a52      	ldr	r2, [pc, #328]	@ (8002b78 <HAL_ADC_Init+0x2a4>)
 8002a30:	e000      	b.n	8002a34 <HAL_ADC_Init+0x160>
 8002a32:	4a52      	ldr	r2, [pc, #328]	@ (8002b7c <HAL_ADC_Init+0x2a8>)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	4619      	mov	r1, r3
 8002a3a:	4610      	mov	r0, r2
 8002a3c:	f7ff fd0e 	bl	800245c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002a40:	f7ff fcea 	bl	8002418 <HAL_GetREVID>
 8002a44:	4603      	mov	r3, r0
 8002a46:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d914      	bls.n	8002a78 <HAL_ADC_Init+0x1a4>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	2b10      	cmp	r3, #16
 8002a54:	d110      	bne.n	8002a78 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	7d5b      	ldrb	r3, [r3, #21]
 8002a5a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002a60:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002a66:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	7f1b      	ldrb	r3, [r3, #28]
 8002a6c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002a6e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002a70:	f043 030c 	orr.w	r3, r3, #12
 8002a74:	61bb      	str	r3, [r7, #24]
 8002a76:	e00d      	b.n	8002a94 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	7d5b      	ldrb	r3, [r3, #21]
 8002a7c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002a82:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002a88:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	7f1b      	ldrb	r3, [r3, #28]
 8002a8e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002a90:	4313      	orrs	r3, r2
 8002a92:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	7f1b      	ldrb	r3, [r3, #28]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d106      	bne.n	8002aaa <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a1b      	ldr	r3, [r3, #32]
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	045b      	lsls	r3, r3, #17
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d009      	beq.n	8002ac6 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab6:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002abe:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68da      	ldr	r2, [r3, #12]
 8002acc:	4b2c      	ldr	r3, [pc, #176]	@ (8002b80 <HAL_ADC_Init+0x2ac>)
 8002ace:	4013      	ands	r3, r2
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	6812      	ldr	r2, [r2, #0]
 8002ad4:	69b9      	ldr	r1, [r7, #24]
 8002ad6:	430b      	orrs	r3, r1
 8002ad8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7ff fed2 	bl	8002888 <LL_ADC_REG_IsConversionOngoing>
 8002ae4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7ff fedf 	bl	80028ae <LL_ADC_INJ_IsConversionOngoing>
 8002af0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d15f      	bne.n	8002bb8 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d15c      	bne.n	8002bb8 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	7d1b      	ldrb	r3, [r3, #20]
 8002b02:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68da      	ldr	r2, [r3, #12]
 8002b12:	4b1c      	ldr	r3, [pc, #112]	@ (8002b84 <HAL_ADC_Init+0x2b0>)
 8002b14:	4013      	ands	r3, r2
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	6812      	ldr	r2, [r2, #0]
 8002b1a:	69b9      	ldr	r1, [r7, #24]
 8002b1c:	430b      	orrs	r3, r1
 8002b1e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d130      	bne.n	8002b8c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b2e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	691a      	ldr	r2, [r3, #16]
 8002b36:	4b14      	ldr	r3, [pc, #80]	@ (8002b88 <HAL_ADC_Init+0x2b4>)
 8002b38:	4013      	ands	r3, r2
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002b3e:	3a01      	subs	r2, #1
 8002b40:	0411      	lsls	r1, r2, #16
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002b46:	4311      	orrs	r1, r2
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002b4c:	4311      	orrs	r1, r2
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002b52:	430a      	orrs	r2, r1
 8002b54:	431a      	orrs	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f042 0201 	orr.w	r2, r2, #1
 8002b5e:	611a      	str	r2, [r3, #16]
 8002b60:	e01c      	b.n	8002b9c <HAL_ADC_Init+0x2c8>
 8002b62:	bf00      	nop
 8002b64:	24000000 	.word	0x24000000
 8002b68:	053e2d63 	.word	0x053e2d63
 8002b6c:	40022000 	.word	0x40022000
 8002b70:	40022100 	.word	0x40022100
 8002b74:	58026000 	.word	0x58026000
 8002b78:	40022300 	.word	0x40022300
 8002b7c:	58026300 	.word	0x58026300
 8002b80:	fff0c003 	.word	0xfff0c003
 8002b84:	ffffbffc 	.word	0xffffbffc
 8002b88:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	691a      	ldr	r2, [r3, #16]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f022 0201 	bic.w	r2, r2, #1
 8002b9a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 ff64 	bl	8003a80 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d10c      	bne.n	8002bda <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc6:	f023 010f 	bic.w	r1, r3, #15
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	1e5a      	subs	r2, r3, #1
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	631a      	str	r2, [r3, #48]	@ 0x30
 8002bd8:	e007      	b.n	8002bea <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f022 020f 	bic.w	r2, r2, #15
 8002be8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bee:	f023 0303 	bic.w	r3, r3, #3
 8002bf2:	f043 0201 	orr.w	r2, r3, #1
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	655a      	str	r2, [r3, #84]	@ 0x54
 8002bfa:	e007      	b.n	8002c0c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c00:	f043 0210 	orr.w	r2, r3, #16
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c0c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3724      	adds	r7, #36	@ 0x24
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd90      	pop	{r4, r7, pc}
 8002c16:	bf00      	nop

08002c18 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a55      	ldr	r2, [pc, #340]	@ (8002d80 <HAL_ADC_Start_DMA+0x168>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d004      	beq.n	8002c38 <HAL_ADC_Start_DMA+0x20>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a54      	ldr	r2, [pc, #336]	@ (8002d84 <HAL_ADC_Start_DMA+0x16c>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d101      	bne.n	8002c3c <HAL_ADC_Start_DMA+0x24>
 8002c38:	4b53      	ldr	r3, [pc, #332]	@ (8002d88 <HAL_ADC_Start_DMA+0x170>)
 8002c3a:	e000      	b.n	8002c3e <HAL_ADC_Start_DMA+0x26>
 8002c3c:	4b53      	ldr	r3, [pc, #332]	@ (8002d8c <HAL_ADC_Start_DMA+0x174>)
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7ff fd7c 	bl	800273c <LL_ADC_GetMultimode>
 8002c44:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7ff fe1c 	bl	8002888 <LL_ADC_REG_IsConversionOngoing>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	f040 808c 	bne.w	8002d70 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d101      	bne.n	8002c66 <HAL_ADC_Start_DMA+0x4e>
 8002c62:	2302      	movs	r3, #2
 8002c64:	e087      	b.n	8002d76 <HAL_ADC_Start_DMA+0x15e>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d005      	beq.n	8002c80 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	2b05      	cmp	r3, #5
 8002c78:	d002      	beq.n	8002c80 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	2b09      	cmp	r3, #9
 8002c7e:	d170      	bne.n	8002d62 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002c80:	68f8      	ldr	r0, [r7, #12]
 8002c82:	f000 fddf 	bl	8003844 <ADC_Enable>
 8002c86:	4603      	mov	r3, r0
 8002c88:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002c8a:	7dfb      	ldrb	r3, [r7, #23]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d163      	bne.n	8002d58 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002c94:	4b3e      	ldr	r3, [pc, #248]	@ (8002d90 <HAL_ADC_Start_DMA+0x178>)
 8002c96:	4013      	ands	r3, r2
 8002c98:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a37      	ldr	r2, [pc, #220]	@ (8002d84 <HAL_ADC_Start_DMA+0x16c>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d002      	beq.n	8002cb0 <HAL_ADC_Start_DMA+0x98>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	e000      	b.n	8002cb2 <HAL_ADC_Start_DMA+0x9a>
 8002cb0:	4b33      	ldr	r3, [pc, #204]	@ (8002d80 <HAL_ADC_Start_DMA+0x168>)
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	6812      	ldr	r2, [r2, #0]
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d002      	beq.n	8002cc0 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d105      	bne.n	8002ccc <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cc4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cd0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d006      	beq.n	8002ce6 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cdc:	f023 0206 	bic.w	r2, r3, #6
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	659a      	str	r2, [r3, #88]	@ 0x58
 8002ce4:	e002      	b.n	8002cec <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cf0:	4a28      	ldr	r2, [pc, #160]	@ (8002d94 <HAL_ADC_Start_DMA+0x17c>)
 8002cf2:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cf8:	4a27      	ldr	r2, [pc, #156]	@ (8002d98 <HAL_ADC_Start_DMA+0x180>)
 8002cfa:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d00:	4a26      	ldr	r2, [pc, #152]	@ (8002d9c <HAL_ADC_Start_DMA+0x184>)
 8002d02:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	221c      	movs	r2, #28
 8002d0a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	685a      	ldr	r2, [r3, #4]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f042 0210 	orr.w	r2, r2, #16
 8002d22:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	4610      	mov	r0, r2
 8002d30:	f7ff fc8e 	bl	8002650 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	3340      	adds	r3, #64	@ 0x40
 8002d3e:	4619      	mov	r1, r3
 8002d40:	68ba      	ldr	r2, [r7, #8]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f001 fd5c 	bl	8004800 <HAL_DMA_Start_IT>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7ff fd85 	bl	8002860 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002d56:	e00d      	b.n	8002d74 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8002d60:	e008      	b.n	8002d74 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002d6e:	e001      	b.n	8002d74 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002d70:	2302      	movs	r3, #2
 8002d72:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d74:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3718      	adds	r7, #24
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	40022000 	.word	0x40022000
 8002d84:	40022100 	.word	0x40022100
 8002d88:	40022300 	.word	0x40022300
 8002d8c:	58026300 	.word	0x58026300
 8002d90:	fffff0fe 	.word	0xfffff0fe
 8002d94:	08003959 	.word	0x08003959
 8002d98:	08003a31 	.word	0x08003a31
 8002d9c:	08003a4d 	.word	0x08003a4d

08002da0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b08a      	sub	sp, #40	@ 0x28
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002da8:	2300      	movs	r3, #0
 8002daa:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a87      	ldr	r2, [pc, #540]	@ (8002fe0 <HAL_ADC_IRQHandler+0x240>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d004      	beq.n	8002dd0 <HAL_ADC_IRQHandler+0x30>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a86      	ldr	r2, [pc, #536]	@ (8002fe4 <HAL_ADC_IRQHandler+0x244>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d101      	bne.n	8002dd4 <HAL_ADC_IRQHandler+0x34>
 8002dd0:	4b85      	ldr	r3, [pc, #532]	@ (8002fe8 <HAL_ADC_IRQHandler+0x248>)
 8002dd2:	e000      	b.n	8002dd6 <HAL_ADC_IRQHandler+0x36>
 8002dd4:	4b85      	ldr	r3, [pc, #532]	@ (8002fec <HAL_ADC_IRQHandler+0x24c>)
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7ff fcb0 	bl	800273c <LL_ADC_GetMultimode>
 8002ddc:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	f003 0302 	and.w	r3, r3, #2
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d017      	beq.n	8002e18 <HAL_ADC_IRQHandler+0x78>
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d012      	beq.n	8002e18 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002df6:	f003 0310 	and.w	r3, r3, #16
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d105      	bne.n	8002e0a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e02:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 ff92 	bl	8003d34 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2202      	movs	r2, #2
 8002e16:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	f003 0304 	and.w	r3, r3, #4
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d004      	beq.n	8002e2c <HAL_ADC_IRQHandler+0x8c>
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	f003 0304 	and.w	r3, r3, #4
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d10a      	bne.n	8002e42 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	f000 8083 	beq.w	8002f3e <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	f003 0308 	and.w	r3, r3, #8
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d07d      	beq.n	8002f3e <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e46:	f003 0310 	and.w	r3, r3, #16
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d105      	bne.n	8002e5a <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e52:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7ff fbb7 	bl	80025d2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d062      	beq.n	8002f30 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a5d      	ldr	r2, [pc, #372]	@ (8002fe4 <HAL_ADC_IRQHandler+0x244>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d002      	beq.n	8002e7a <HAL_ADC_IRQHandler+0xda>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	e000      	b.n	8002e7c <HAL_ADC_IRQHandler+0xdc>
 8002e7a:	4b59      	ldr	r3, [pc, #356]	@ (8002fe0 <HAL_ADC_IRQHandler+0x240>)
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	6812      	ldr	r2, [r2, #0]
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d008      	beq.n	8002e96 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d005      	beq.n	8002e96 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	2b05      	cmp	r3, #5
 8002e8e:	d002      	beq.n	8002e96 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	2b09      	cmp	r3, #9
 8002e94:	d104      	bne.n	8002ea0 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	623b      	str	r3, [r7, #32]
 8002e9e:	e00c      	b.n	8002eba <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a4f      	ldr	r2, [pc, #316]	@ (8002fe4 <HAL_ADC_IRQHandler+0x244>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d002      	beq.n	8002eb0 <HAL_ADC_IRQHandler+0x110>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	e000      	b.n	8002eb2 <HAL_ADC_IRQHandler+0x112>
 8002eb0:	4b4b      	ldr	r3, [pc, #300]	@ (8002fe0 <HAL_ADC_IRQHandler+0x240>)
 8002eb2:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002eba:	6a3b      	ldr	r3, [r7, #32]
 8002ebc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d135      	bne.n	8002f30 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0308 	and.w	r3, r3, #8
 8002ece:	2b08      	cmp	r3, #8
 8002ed0:	d12e      	bne.n	8002f30 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7ff fcd6 	bl	8002888 <LL_ADC_REG_IsConversionOngoing>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d11a      	bne.n	8002f18 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	685a      	ldr	r2, [r3, #4]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f022 020c 	bic.w	r2, r2, #12
 8002ef0:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ef6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f02:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d112      	bne.n	8002f30 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f0e:	f043 0201 	orr.w	r2, r3, #1
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	655a      	str	r2, [r3, #84]	@ 0x54
 8002f16:	e00b      	b.n	8002f30 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f1c:	f043 0210 	orr.w	r2, r3, #16
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f28:	f043 0201 	orr.w	r2, r3, #1
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f000 f96f 	bl	8003214 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	220c      	movs	r2, #12
 8002f3c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	f003 0320 	and.w	r3, r3, #32
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d004      	beq.n	8002f52 <HAL_ADC_IRQHandler+0x1b2>
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	f003 0320 	and.w	r3, r3, #32
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10b      	bne.n	8002f6a <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	f000 80a0 	beq.w	800309e <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f000 809a 	beq.w	800309e <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f6e:	f003 0310 	and.w	r3, r3, #16
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d105      	bne.n	8002f82 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f7a:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7ff fb75 	bl	8002676 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002f8c:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7ff fb1d 	bl	80025d2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002f98:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a11      	ldr	r2, [pc, #68]	@ (8002fe4 <HAL_ADC_IRQHandler+0x244>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d002      	beq.n	8002faa <HAL_ADC_IRQHandler+0x20a>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	e000      	b.n	8002fac <HAL_ADC_IRQHandler+0x20c>
 8002faa:	4b0d      	ldr	r3, [pc, #52]	@ (8002fe0 <HAL_ADC_IRQHandler+0x240>)
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	6812      	ldr	r2, [r2, #0]
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d008      	beq.n	8002fc6 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d005      	beq.n	8002fc6 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	2b06      	cmp	r3, #6
 8002fbe:	d002      	beq.n	8002fc6 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	2b07      	cmp	r3, #7
 8002fc4:	d104      	bne.n	8002fd0 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	623b      	str	r3, [r7, #32]
 8002fce:	e014      	b.n	8002ffa <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a03      	ldr	r2, [pc, #12]	@ (8002fe4 <HAL_ADC_IRQHandler+0x244>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d00a      	beq.n	8002ff0 <HAL_ADC_IRQHandler+0x250>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	e008      	b.n	8002ff2 <HAL_ADC_IRQHandler+0x252>
 8002fe0:	40022000 	.word	0x40022000
 8002fe4:	40022100 	.word	0x40022100
 8002fe8:	40022300 	.word	0x40022300
 8002fec:	58026300 	.word	0x58026300
 8002ff0:	4b84      	ldr	r3, [pc, #528]	@ (8003204 <HAL_ADC_IRQHandler+0x464>)
 8002ff2:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d047      	beq.n	8003090 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003000:	6a3b      	ldr	r3, [r7, #32]
 8003002:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d007      	beq.n	800301a <HAL_ADC_IRQHandler+0x27a>
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d03f      	beq.n	8003090 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003010:	6a3b      	ldr	r3, [r7, #32]
 8003012:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003016:	2b00      	cmp	r3, #0
 8003018:	d13a      	bne.n	8003090 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003024:	2b40      	cmp	r3, #64	@ 0x40
 8003026:	d133      	bne.n	8003090 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003028:	6a3b      	ldr	r3, [r7, #32]
 800302a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d12e      	bne.n	8003090 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4618      	mov	r0, r3
 8003038:	f7ff fc39 	bl	80028ae <LL_ADC_INJ_IsConversionOngoing>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d11a      	bne.n	8003078 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	685a      	ldr	r2, [r3, #4]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003050:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003056:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003062:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003066:	2b00      	cmp	r3, #0
 8003068:	d112      	bne.n	8003090 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800306e:	f043 0201 	orr.w	r2, r3, #1
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	655a      	str	r2, [r3, #84]	@ 0x54
 8003076:	e00b      	b.n	8003090 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800307c:	f043 0210 	orr.w	r2, r3, #16
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003088:	f043 0201 	orr.w	r2, r3, #1
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f000 fe27 	bl	8003ce4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2260      	movs	r2, #96	@ 0x60
 800309c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d011      	beq.n	80030cc <HAL_ADC_IRQHandler+0x32c>
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00c      	beq.n	80030cc <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030b6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 f8bc 	bl	800323c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2280      	movs	r2, #128	@ 0x80
 80030ca:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d012      	beq.n	80030fc <HAL_ADC_IRQHandler+0x35c>
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d00d      	beq.n	80030fc <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030e4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f000 fe0d 	bl	8003d0c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80030fa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003102:	2b00      	cmp	r3, #0
 8003104:	d012      	beq.n	800312c <HAL_ADC_IRQHandler+0x38c>
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00d      	beq.n	800312c <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003114:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f000 fdff 	bl	8003d20 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800312a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	f003 0310 	and.w	r3, r3, #16
 8003132:	2b00      	cmp	r3, #0
 8003134:	d043      	beq.n	80031be <HAL_ADC_IRQHandler+0x41e>
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	f003 0310 	and.w	r3, r3, #16
 800313c:	2b00      	cmp	r3, #0
 800313e:	d03e      	beq.n	80031be <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003144:	2b00      	cmp	r3, #0
 8003146:	d102      	bne.n	800314e <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8003148:	2301      	movs	r3, #1
 800314a:	627b      	str	r3, [r7, #36]	@ 0x24
 800314c:	e021      	b.n	8003192 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d015      	beq.n	8003180 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a2a      	ldr	r2, [pc, #168]	@ (8003204 <HAL_ADC_IRQHandler+0x464>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d004      	beq.n	8003168 <HAL_ADC_IRQHandler+0x3c8>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a29      	ldr	r2, [pc, #164]	@ (8003208 <HAL_ADC_IRQHandler+0x468>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d101      	bne.n	800316c <HAL_ADC_IRQHandler+0x3cc>
 8003168:	4b28      	ldr	r3, [pc, #160]	@ (800320c <HAL_ADC_IRQHandler+0x46c>)
 800316a:	e000      	b.n	800316e <HAL_ADC_IRQHandler+0x3ce>
 800316c:	4b28      	ldr	r3, [pc, #160]	@ (8003210 <HAL_ADC_IRQHandler+0x470>)
 800316e:	4618      	mov	r0, r3
 8003170:	f7ff faf2 	bl	8002758 <LL_ADC_GetMultiDMATransfer>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00b      	beq.n	8003192 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800317a:	2301      	movs	r3, #1
 800317c:	627b      	str	r3, [r7, #36]	@ 0x24
 800317e:	e008      	b.n	8003192 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	f003 0303 	and.w	r3, r3, #3
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800318e:	2301      	movs	r3, #1
 8003190:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003194:	2b01      	cmp	r3, #1
 8003196:	d10e      	bne.n	80031b6 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800319c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031a8:	f043 0202 	orr.w	r2, r3, #2
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f000 f84d 	bl	8003250 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2210      	movs	r2, #16
 80031bc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d018      	beq.n	80031fa <HAL_ADC_IRQHandler+0x45a>
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d013      	beq.n	80031fa <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031d6:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031e2:	f043 0208 	orr.w	r2, r3, #8
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80031f2:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f000 fd7f 	bl	8003cf8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80031fa:	bf00      	nop
 80031fc:	3728      	adds	r7, #40	@ 0x28
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	40022000 	.word	0x40022000
 8003208:	40022100 	.word	0x40022100
 800320c:	40022300 	.word	0x40022300
 8003210:	58026300 	.word	0x58026300

08003214 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800321c:	bf00      	nop
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003230:	bf00      	nop
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003244:	bf00      	nop
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003258:	bf00      	nop
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003264:	b590      	push	{r4, r7, lr}
 8003266:	b08d      	sub	sp, #52	@ 0x34
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800326e:	2300      	movs	r3, #0
 8003270:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003274:	2300      	movs	r3, #0
 8003276:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	4a65      	ldr	r2, [pc, #404]	@ (8003414 <HAL_ADC_ConfigChannel+0x1b0>)
 800327e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003286:	2b01      	cmp	r3, #1
 8003288:	d101      	bne.n	800328e <HAL_ADC_ConfigChannel+0x2a>
 800328a:	2302      	movs	r3, #2
 800328c:	e2c7      	b.n	800381e <HAL_ADC_ConfigChannel+0x5ba>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4618      	mov	r0, r3
 800329c:	f7ff faf4 	bl	8002888 <LL_ADC_REG_IsConversionOngoing>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f040 82ac 	bne.w	8003800 <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	db2c      	blt.n	800330a <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d108      	bne.n	80032ce <HAL_ADC_ConfigChannel+0x6a>
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	0e9b      	lsrs	r3, r3, #26
 80032c2:	f003 031f 	and.w	r3, r3, #31
 80032c6:	2201      	movs	r2, #1
 80032c8:	fa02 f303 	lsl.w	r3, r2, r3
 80032cc:	e016      	b.n	80032fc <HAL_ADC_ConfigChannel+0x98>
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	fa93 f3a3 	rbit	r3, r3
 80032da:	613b      	str	r3, [r7, #16]
  return result;
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 80032e6:	2320      	movs	r3, #32
 80032e8:	e003      	b.n	80032f2 <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	fab3 f383 	clz	r3, r3
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	f003 031f 	and.w	r3, r3, #31
 80032f6:	2201      	movs	r2, #1
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	6812      	ldr	r2, [r2, #0]
 8003300:	69d1      	ldr	r1, [r2, #28]
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	6812      	ldr	r2, [r2, #0]
 8003306:	430b      	orrs	r3, r1
 8003308:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6818      	ldr	r0, [r3, #0]
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	6859      	ldr	r1, [r3, #4]
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	461a      	mov	r2, r3
 8003318:	f7ff f96e 	bl	80025f8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4618      	mov	r0, r3
 8003322:	f7ff fab1 	bl	8002888 <LL_ADC_REG_IsConversionOngoing>
 8003326:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4618      	mov	r0, r3
 800332e:	f7ff fabe 	bl	80028ae <LL_ADC_INJ_IsConversionOngoing>
 8003332:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003336:	2b00      	cmp	r3, #0
 8003338:	f040 80b8 	bne.w	80034ac <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800333c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800333e:	2b00      	cmp	r3, #0
 8003340:	f040 80b4 	bne.w	80034ac <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6818      	ldr	r0, [r3, #0]
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	6819      	ldr	r1, [r3, #0]
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	461a      	mov	r2, r3
 8003352:	f7ff f9a3 	bl	800269c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003356:	4b30      	ldr	r3, [pc, #192]	@ (8003418 <HAL_ADC_ConfigChannel+0x1b4>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800335e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003362:	d10b      	bne.n	800337c <HAL_ADC_ConfigChannel+0x118>
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	695a      	ldr	r2, [r3, #20]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	089b      	lsrs	r3, r3, #2
 8003370:	f003 0307 	and.w	r3, r3, #7
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	fa02 f303 	lsl.w	r3, r2, r3
 800337a:	e01d      	b.n	80033b8 <HAL_ADC_ConfigChannel+0x154>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	f003 0310 	and.w	r3, r3, #16
 8003386:	2b00      	cmp	r3, #0
 8003388:	d10b      	bne.n	80033a2 <HAL_ADC_ConfigChannel+0x13e>
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	695a      	ldr	r2, [r3, #20]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	089b      	lsrs	r3, r3, #2
 8003396:	f003 0307 	and.w	r3, r3, #7
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	fa02 f303 	lsl.w	r3, r2, r3
 80033a0:	e00a      	b.n	80033b8 <HAL_ADC_ConfigChannel+0x154>
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	695a      	ldr	r2, [r3, #20]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	089b      	lsrs	r3, r3, #2
 80033ae:	f003 0304 	and.w	r3, r3, #4
 80033b2:	005b      	lsls	r3, r3, #1
 80033b4:	fa02 f303 	lsl.w	r3, r2, r3
 80033b8:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	2b04      	cmp	r3, #4
 80033c0:	d02c      	beq.n	800341c <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6818      	ldr	r0, [r3, #0]
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	6919      	ldr	r1, [r3, #16]
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	6a3b      	ldr	r3, [r7, #32]
 80033d0:	f7ff f8ab 	bl	800252a <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6818      	ldr	r0, [r3, #0]
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	6919      	ldr	r1, [r3, #16]
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	7e5b      	ldrb	r3, [r3, #25]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d102      	bne.n	80033ea <HAL_ADC_ConfigChannel+0x186>
 80033e4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80033e8:	e000      	b.n	80033ec <HAL_ADC_ConfigChannel+0x188>
 80033ea:	2300      	movs	r3, #0
 80033ec:	461a      	mov	r2, r3
 80033ee:	f7ff f8d5 	bl	800259c <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6818      	ldr	r0, [r3, #0]
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	6919      	ldr	r1, [r3, #16]
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	7e1b      	ldrb	r3, [r3, #24]
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d102      	bne.n	8003408 <HAL_ADC_ConfigChannel+0x1a4>
 8003402:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003406:	e000      	b.n	800340a <HAL_ADC_ConfigChannel+0x1a6>
 8003408:	2300      	movs	r3, #0
 800340a:	461a      	mov	r2, r3
 800340c:	f7ff f8ad 	bl	800256a <LL_ADC_SetDataRightShift>
 8003410:	e04c      	b.n	80034ac <HAL_ADC_ConfigChannel+0x248>
 8003412:	bf00      	nop
 8003414:	47ff0000 	.word	0x47ff0000
 8003418:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003422:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	069b      	lsls	r3, r3, #26
 800342c:	429a      	cmp	r2, r3
 800342e:	d107      	bne.n	8003440 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800343e:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003446:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	069b      	lsls	r3, r3, #26
 8003450:	429a      	cmp	r2, r3
 8003452:	d107      	bne.n	8003464 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003462:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800346a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	069b      	lsls	r3, r3, #26
 8003474:	429a      	cmp	r2, r3
 8003476:	d107      	bne.n	8003488 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003486:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800348e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	069b      	lsls	r3, r3, #26
 8003498:	429a      	cmp	r2, r3
 800349a:	d107      	bne.n	80034ac <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80034aa:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7ff f9c1 	bl	8002838 <LL_ADC_IsEnabled>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f040 81aa 	bne.w	8003812 <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6818      	ldr	r0, [r3, #0]
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	6819      	ldr	r1, [r3, #0]
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	461a      	mov	r2, r3
 80034cc:	f7ff f912 	bl	80026f4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	4a87      	ldr	r2, [pc, #540]	@ (80036f4 <HAL_ADC_ConfigChannel+0x490>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	f040 809a 	bne.w	8003610 <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4984      	ldr	r1, [pc, #528]	@ (80036f8 <HAL_ADC_ConfigChannel+0x494>)
 80034e6:	428b      	cmp	r3, r1
 80034e8:	d147      	bne.n	800357a <HAL_ADC_ConfigChannel+0x316>
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4983      	ldr	r1, [pc, #524]	@ (80036fc <HAL_ADC_ConfigChannel+0x498>)
 80034f0:	428b      	cmp	r3, r1
 80034f2:	d040      	beq.n	8003576 <HAL_ADC_ConfigChannel+0x312>
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4981      	ldr	r1, [pc, #516]	@ (8003700 <HAL_ADC_ConfigChannel+0x49c>)
 80034fa:	428b      	cmp	r3, r1
 80034fc:	d039      	beq.n	8003572 <HAL_ADC_ConfigChannel+0x30e>
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4980      	ldr	r1, [pc, #512]	@ (8003704 <HAL_ADC_ConfigChannel+0x4a0>)
 8003504:	428b      	cmp	r3, r1
 8003506:	d032      	beq.n	800356e <HAL_ADC_ConfigChannel+0x30a>
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	497e      	ldr	r1, [pc, #504]	@ (8003708 <HAL_ADC_ConfigChannel+0x4a4>)
 800350e:	428b      	cmp	r3, r1
 8003510:	d02b      	beq.n	800356a <HAL_ADC_ConfigChannel+0x306>
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	497d      	ldr	r1, [pc, #500]	@ (800370c <HAL_ADC_ConfigChannel+0x4a8>)
 8003518:	428b      	cmp	r3, r1
 800351a:	d024      	beq.n	8003566 <HAL_ADC_ConfigChannel+0x302>
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	497b      	ldr	r1, [pc, #492]	@ (8003710 <HAL_ADC_ConfigChannel+0x4ac>)
 8003522:	428b      	cmp	r3, r1
 8003524:	d01d      	beq.n	8003562 <HAL_ADC_ConfigChannel+0x2fe>
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	497a      	ldr	r1, [pc, #488]	@ (8003714 <HAL_ADC_ConfigChannel+0x4b0>)
 800352c:	428b      	cmp	r3, r1
 800352e:	d016      	beq.n	800355e <HAL_ADC_ConfigChannel+0x2fa>
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4978      	ldr	r1, [pc, #480]	@ (8003718 <HAL_ADC_ConfigChannel+0x4b4>)
 8003536:	428b      	cmp	r3, r1
 8003538:	d00f      	beq.n	800355a <HAL_ADC_ConfigChannel+0x2f6>
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4977      	ldr	r1, [pc, #476]	@ (800371c <HAL_ADC_ConfigChannel+0x4b8>)
 8003540:	428b      	cmp	r3, r1
 8003542:	d008      	beq.n	8003556 <HAL_ADC_ConfigChannel+0x2f2>
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4975      	ldr	r1, [pc, #468]	@ (8003720 <HAL_ADC_ConfigChannel+0x4bc>)
 800354a:	428b      	cmp	r3, r1
 800354c:	d101      	bne.n	8003552 <HAL_ADC_ConfigChannel+0x2ee>
 800354e:	4b75      	ldr	r3, [pc, #468]	@ (8003724 <HAL_ADC_ConfigChannel+0x4c0>)
 8003550:	e05a      	b.n	8003608 <HAL_ADC_ConfigChannel+0x3a4>
 8003552:	2300      	movs	r3, #0
 8003554:	e058      	b.n	8003608 <HAL_ADC_ConfigChannel+0x3a4>
 8003556:	4b74      	ldr	r3, [pc, #464]	@ (8003728 <HAL_ADC_ConfigChannel+0x4c4>)
 8003558:	e056      	b.n	8003608 <HAL_ADC_ConfigChannel+0x3a4>
 800355a:	4b74      	ldr	r3, [pc, #464]	@ (800372c <HAL_ADC_ConfigChannel+0x4c8>)
 800355c:	e054      	b.n	8003608 <HAL_ADC_ConfigChannel+0x3a4>
 800355e:	4b6e      	ldr	r3, [pc, #440]	@ (8003718 <HAL_ADC_ConfigChannel+0x4b4>)
 8003560:	e052      	b.n	8003608 <HAL_ADC_ConfigChannel+0x3a4>
 8003562:	4b6c      	ldr	r3, [pc, #432]	@ (8003714 <HAL_ADC_ConfigChannel+0x4b0>)
 8003564:	e050      	b.n	8003608 <HAL_ADC_ConfigChannel+0x3a4>
 8003566:	4b72      	ldr	r3, [pc, #456]	@ (8003730 <HAL_ADC_ConfigChannel+0x4cc>)
 8003568:	e04e      	b.n	8003608 <HAL_ADC_ConfigChannel+0x3a4>
 800356a:	4b72      	ldr	r3, [pc, #456]	@ (8003734 <HAL_ADC_ConfigChannel+0x4d0>)
 800356c:	e04c      	b.n	8003608 <HAL_ADC_ConfigChannel+0x3a4>
 800356e:	4b72      	ldr	r3, [pc, #456]	@ (8003738 <HAL_ADC_ConfigChannel+0x4d4>)
 8003570:	e04a      	b.n	8003608 <HAL_ADC_ConfigChannel+0x3a4>
 8003572:	4b72      	ldr	r3, [pc, #456]	@ (800373c <HAL_ADC_ConfigChannel+0x4d8>)
 8003574:	e048      	b.n	8003608 <HAL_ADC_ConfigChannel+0x3a4>
 8003576:	2301      	movs	r3, #1
 8003578:	e046      	b.n	8003608 <HAL_ADC_ConfigChannel+0x3a4>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4970      	ldr	r1, [pc, #448]	@ (8003740 <HAL_ADC_ConfigChannel+0x4dc>)
 8003580:	428b      	cmp	r3, r1
 8003582:	d140      	bne.n	8003606 <HAL_ADC_ConfigChannel+0x3a2>
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	495c      	ldr	r1, [pc, #368]	@ (80036fc <HAL_ADC_ConfigChannel+0x498>)
 800358a:	428b      	cmp	r3, r1
 800358c:	d039      	beq.n	8003602 <HAL_ADC_ConfigChannel+0x39e>
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	495b      	ldr	r1, [pc, #364]	@ (8003700 <HAL_ADC_ConfigChannel+0x49c>)
 8003594:	428b      	cmp	r3, r1
 8003596:	d032      	beq.n	80035fe <HAL_ADC_ConfigChannel+0x39a>
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4959      	ldr	r1, [pc, #356]	@ (8003704 <HAL_ADC_ConfigChannel+0x4a0>)
 800359e:	428b      	cmp	r3, r1
 80035a0:	d02b      	beq.n	80035fa <HAL_ADC_ConfigChannel+0x396>
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4958      	ldr	r1, [pc, #352]	@ (8003708 <HAL_ADC_ConfigChannel+0x4a4>)
 80035a8:	428b      	cmp	r3, r1
 80035aa:	d024      	beq.n	80035f6 <HAL_ADC_ConfigChannel+0x392>
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4956      	ldr	r1, [pc, #344]	@ (800370c <HAL_ADC_ConfigChannel+0x4a8>)
 80035b2:	428b      	cmp	r3, r1
 80035b4:	d01d      	beq.n	80035f2 <HAL_ADC_ConfigChannel+0x38e>
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4955      	ldr	r1, [pc, #340]	@ (8003710 <HAL_ADC_ConfigChannel+0x4ac>)
 80035bc:	428b      	cmp	r3, r1
 80035be:	d016      	beq.n	80035ee <HAL_ADC_ConfigChannel+0x38a>
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4953      	ldr	r1, [pc, #332]	@ (8003714 <HAL_ADC_ConfigChannel+0x4b0>)
 80035c6:	428b      	cmp	r3, r1
 80035c8:	d00f      	beq.n	80035ea <HAL_ADC_ConfigChannel+0x386>
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4952      	ldr	r1, [pc, #328]	@ (8003718 <HAL_ADC_ConfigChannel+0x4b4>)
 80035d0:	428b      	cmp	r3, r1
 80035d2:	d008      	beq.n	80035e6 <HAL_ADC_ConfigChannel+0x382>
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4951      	ldr	r1, [pc, #324]	@ (8003720 <HAL_ADC_ConfigChannel+0x4bc>)
 80035da:	428b      	cmp	r3, r1
 80035dc:	d101      	bne.n	80035e2 <HAL_ADC_ConfigChannel+0x37e>
 80035de:	4b51      	ldr	r3, [pc, #324]	@ (8003724 <HAL_ADC_ConfigChannel+0x4c0>)
 80035e0:	e012      	b.n	8003608 <HAL_ADC_ConfigChannel+0x3a4>
 80035e2:	2300      	movs	r3, #0
 80035e4:	e010      	b.n	8003608 <HAL_ADC_ConfigChannel+0x3a4>
 80035e6:	4b51      	ldr	r3, [pc, #324]	@ (800372c <HAL_ADC_ConfigChannel+0x4c8>)
 80035e8:	e00e      	b.n	8003608 <HAL_ADC_ConfigChannel+0x3a4>
 80035ea:	4b4b      	ldr	r3, [pc, #300]	@ (8003718 <HAL_ADC_ConfigChannel+0x4b4>)
 80035ec:	e00c      	b.n	8003608 <HAL_ADC_ConfigChannel+0x3a4>
 80035ee:	4b49      	ldr	r3, [pc, #292]	@ (8003714 <HAL_ADC_ConfigChannel+0x4b0>)
 80035f0:	e00a      	b.n	8003608 <HAL_ADC_ConfigChannel+0x3a4>
 80035f2:	4b4f      	ldr	r3, [pc, #316]	@ (8003730 <HAL_ADC_ConfigChannel+0x4cc>)
 80035f4:	e008      	b.n	8003608 <HAL_ADC_ConfigChannel+0x3a4>
 80035f6:	4b4f      	ldr	r3, [pc, #316]	@ (8003734 <HAL_ADC_ConfigChannel+0x4d0>)
 80035f8:	e006      	b.n	8003608 <HAL_ADC_ConfigChannel+0x3a4>
 80035fa:	4b4f      	ldr	r3, [pc, #316]	@ (8003738 <HAL_ADC_ConfigChannel+0x4d4>)
 80035fc:	e004      	b.n	8003608 <HAL_ADC_ConfigChannel+0x3a4>
 80035fe:	4b4f      	ldr	r3, [pc, #316]	@ (800373c <HAL_ADC_ConfigChannel+0x4d8>)
 8003600:	e002      	b.n	8003608 <HAL_ADC_ConfigChannel+0x3a4>
 8003602:	2301      	movs	r3, #1
 8003604:	e000      	b.n	8003608 <HAL_ADC_ConfigChannel+0x3a4>
 8003606:	2300      	movs	r3, #0
 8003608:	4619      	mov	r1, r3
 800360a:	4610      	mov	r0, r2
 800360c:	f7fe ff5a 	bl	80024c4 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2b00      	cmp	r3, #0
 8003616:	f280 80fc 	bge.w	8003812 <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a36      	ldr	r2, [pc, #216]	@ (80036f8 <HAL_ADC_ConfigChannel+0x494>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d004      	beq.n	800362e <HAL_ADC_ConfigChannel+0x3ca>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a45      	ldr	r2, [pc, #276]	@ (8003740 <HAL_ADC_ConfigChannel+0x4dc>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d101      	bne.n	8003632 <HAL_ADC_ConfigChannel+0x3ce>
 800362e:	4b45      	ldr	r3, [pc, #276]	@ (8003744 <HAL_ADC_ConfigChannel+0x4e0>)
 8003630:	e000      	b.n	8003634 <HAL_ADC_ConfigChannel+0x3d0>
 8003632:	4b45      	ldr	r3, [pc, #276]	@ (8003748 <HAL_ADC_ConfigChannel+0x4e4>)
 8003634:	4618      	mov	r0, r3
 8003636:	f7fe ff37 	bl	80024a8 <LL_ADC_GetCommonPathInternalCh>
 800363a:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a2d      	ldr	r2, [pc, #180]	@ (80036f8 <HAL_ADC_ConfigChannel+0x494>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d004      	beq.n	8003650 <HAL_ADC_ConfigChannel+0x3ec>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a3d      	ldr	r2, [pc, #244]	@ (8003740 <HAL_ADC_ConfigChannel+0x4dc>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d10e      	bne.n	800366e <HAL_ADC_ConfigChannel+0x40a>
 8003650:	4829      	ldr	r0, [pc, #164]	@ (80036f8 <HAL_ADC_ConfigChannel+0x494>)
 8003652:	f7ff f8f1 	bl	8002838 <LL_ADC_IsEnabled>
 8003656:	4604      	mov	r4, r0
 8003658:	4839      	ldr	r0, [pc, #228]	@ (8003740 <HAL_ADC_ConfigChannel+0x4dc>)
 800365a:	f7ff f8ed 	bl	8002838 <LL_ADC_IsEnabled>
 800365e:	4603      	mov	r3, r0
 8003660:	4323      	orrs	r3, r4
 8003662:	2b00      	cmp	r3, #0
 8003664:	bf0c      	ite	eq
 8003666:	2301      	moveq	r3, #1
 8003668:	2300      	movne	r3, #0
 800366a:	b2db      	uxtb	r3, r3
 800366c:	e008      	b.n	8003680 <HAL_ADC_ConfigChannel+0x41c>
 800366e:	4837      	ldr	r0, [pc, #220]	@ (800374c <HAL_ADC_ConfigChannel+0x4e8>)
 8003670:	f7ff f8e2 	bl	8002838 <LL_ADC_IsEnabled>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	bf0c      	ite	eq
 800367a:	2301      	moveq	r3, #1
 800367c:	2300      	movne	r3, #0
 800367e:	b2db      	uxtb	r3, r3
 8003680:	2b00      	cmp	r3, #0
 8003682:	f000 80b3 	beq.w	80037ec <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a31      	ldr	r2, [pc, #196]	@ (8003750 <HAL_ADC_ConfigChannel+0x4ec>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d165      	bne.n	800375c <HAL_ADC_ConfigChannel+0x4f8>
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d160      	bne.n	800375c <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a2b      	ldr	r2, [pc, #172]	@ (800374c <HAL_ADC_ConfigChannel+0x4e8>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	f040 80b6 	bne.w	8003812 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a13      	ldr	r2, [pc, #76]	@ (80036f8 <HAL_ADC_ConfigChannel+0x494>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d004      	beq.n	80036ba <HAL_ADC_ConfigChannel+0x456>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a22      	ldr	r2, [pc, #136]	@ (8003740 <HAL_ADC_ConfigChannel+0x4dc>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d101      	bne.n	80036be <HAL_ADC_ConfigChannel+0x45a>
 80036ba:	4a22      	ldr	r2, [pc, #136]	@ (8003744 <HAL_ADC_ConfigChannel+0x4e0>)
 80036bc:	e000      	b.n	80036c0 <HAL_ADC_ConfigChannel+0x45c>
 80036be:	4a22      	ldr	r2, [pc, #136]	@ (8003748 <HAL_ADC_ConfigChannel+0x4e4>)
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80036c6:	4619      	mov	r1, r3
 80036c8:	4610      	mov	r0, r2
 80036ca:	f7fe feda 	bl	8002482 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80036ce:	4b21      	ldr	r3, [pc, #132]	@ (8003754 <HAL_ADC_ConfigChannel+0x4f0>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	099b      	lsrs	r3, r3, #6
 80036d4:	4a20      	ldr	r2, [pc, #128]	@ (8003758 <HAL_ADC_ConfigChannel+0x4f4>)
 80036d6:	fba2 2303 	umull	r2, r3, r2, r3
 80036da:	099b      	lsrs	r3, r3, #6
 80036dc:	3301      	adds	r3, #1
 80036de:	005b      	lsls	r3, r3, #1
 80036e0:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 80036e2:	e002      	b.n	80036ea <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	3b01      	subs	r3, #1
 80036e8:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1f9      	bne.n	80036e4 <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036f0:	e08f      	b.n	8003812 <HAL_ADC_ConfigChannel+0x5ae>
 80036f2:	bf00      	nop
 80036f4:	47ff0000 	.word	0x47ff0000
 80036f8:	40022000 	.word	0x40022000
 80036fc:	04300002 	.word	0x04300002
 8003700:	08600004 	.word	0x08600004
 8003704:	0c900008 	.word	0x0c900008
 8003708:	10c00010 	.word	0x10c00010
 800370c:	14f00020 	.word	0x14f00020
 8003710:	2a000400 	.word	0x2a000400
 8003714:	2e300800 	.word	0x2e300800
 8003718:	32601000 	.word	0x32601000
 800371c:	43210000 	.word	0x43210000
 8003720:	4b840000 	.word	0x4b840000
 8003724:	4fb80000 	.word	0x4fb80000
 8003728:	47520000 	.word	0x47520000
 800372c:	36902000 	.word	0x36902000
 8003730:	25b00200 	.word	0x25b00200
 8003734:	21800100 	.word	0x21800100
 8003738:	1d500080 	.word	0x1d500080
 800373c:	19200040 	.word	0x19200040
 8003740:	40022100 	.word	0x40022100
 8003744:	40022300 	.word	0x40022300
 8003748:	58026300 	.word	0x58026300
 800374c:	58026000 	.word	0x58026000
 8003750:	cb840000 	.word	0xcb840000
 8003754:	24000000 	.word	0x24000000
 8003758:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a31      	ldr	r2, [pc, #196]	@ (8003828 <HAL_ADC_ConfigChannel+0x5c4>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d11e      	bne.n	80037a4 <HAL_ADC_ConfigChannel+0x540>
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d119      	bne.n	80037a4 <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a2d      	ldr	r2, [pc, #180]	@ (800382c <HAL_ADC_ConfigChannel+0x5c8>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d14b      	bne.n	8003812 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a2c      	ldr	r2, [pc, #176]	@ (8003830 <HAL_ADC_ConfigChannel+0x5cc>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d004      	beq.n	800378e <HAL_ADC_ConfigChannel+0x52a>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a2a      	ldr	r2, [pc, #168]	@ (8003834 <HAL_ADC_ConfigChannel+0x5d0>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d101      	bne.n	8003792 <HAL_ADC_ConfigChannel+0x52e>
 800378e:	4a2a      	ldr	r2, [pc, #168]	@ (8003838 <HAL_ADC_ConfigChannel+0x5d4>)
 8003790:	e000      	b.n	8003794 <HAL_ADC_ConfigChannel+0x530>
 8003792:	4a2a      	ldr	r2, [pc, #168]	@ (800383c <HAL_ADC_ConfigChannel+0x5d8>)
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800379a:	4619      	mov	r1, r3
 800379c:	4610      	mov	r0, r2
 800379e:	f7fe fe70 	bl	8002482 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037a2:	e036      	b.n	8003812 <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a25      	ldr	r2, [pc, #148]	@ (8003840 <HAL_ADC_ConfigChannel+0x5dc>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d131      	bne.n	8003812 <HAL_ADC_ConfigChannel+0x5ae>
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d12c      	bne.n	8003812 <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a1b      	ldr	r2, [pc, #108]	@ (800382c <HAL_ADC_ConfigChannel+0x5c8>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d127      	bne.n	8003812 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a1a      	ldr	r2, [pc, #104]	@ (8003830 <HAL_ADC_ConfigChannel+0x5cc>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d004      	beq.n	80037d6 <HAL_ADC_ConfigChannel+0x572>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a18      	ldr	r2, [pc, #96]	@ (8003834 <HAL_ADC_ConfigChannel+0x5d0>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d101      	bne.n	80037da <HAL_ADC_ConfigChannel+0x576>
 80037d6:	4a18      	ldr	r2, [pc, #96]	@ (8003838 <HAL_ADC_ConfigChannel+0x5d4>)
 80037d8:	e000      	b.n	80037dc <HAL_ADC_ConfigChannel+0x578>
 80037da:	4a18      	ldr	r2, [pc, #96]	@ (800383c <HAL_ADC_ConfigChannel+0x5d8>)
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80037e2:	4619      	mov	r1, r3
 80037e4:	4610      	mov	r0, r2
 80037e6:	f7fe fe4c 	bl	8002482 <LL_ADC_SetCommonPathInternalCh>
 80037ea:	e012      	b.n	8003812 <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037f0:	f043 0220 	orr.w	r2, r3, #32
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80037fe:	e008      	b.n	8003812 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003804:	f043 0220 	orr.w	r2, r3, #32
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800381a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800381e:	4618      	mov	r0, r3
 8003820:	3734      	adds	r7, #52	@ 0x34
 8003822:	46bd      	mov	sp, r7
 8003824:	bd90      	pop	{r4, r7, pc}
 8003826:	bf00      	nop
 8003828:	c7520000 	.word	0xc7520000
 800382c:	58026000 	.word	0x58026000
 8003830:	40022000 	.word	0x40022000
 8003834:	40022100 	.word	0x40022100
 8003838:	40022300 	.word	0x40022300
 800383c:	58026300 	.word	0x58026300
 8003840:	cfb80000 	.word	0xcfb80000

08003844 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4618      	mov	r0, r3
 8003852:	f7fe fff1 	bl	8002838 <LL_ADC_IsEnabled>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d16e      	bne.n	800393a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	689a      	ldr	r2, [r3, #8]
 8003862:	4b38      	ldr	r3, [pc, #224]	@ (8003944 <ADC_Enable+0x100>)
 8003864:	4013      	ands	r3, r2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00d      	beq.n	8003886 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800386e:	f043 0210 	orr.w	r2, r3, #16
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800387a:	f043 0201 	orr.w	r2, r3, #1
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e05a      	b.n	800393c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4618      	mov	r0, r3
 800388c:	f7fe ffc0 	bl	8002810 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003890:	f7fe fdb6 	bl	8002400 <HAL_GetTick>
 8003894:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a2b      	ldr	r2, [pc, #172]	@ (8003948 <ADC_Enable+0x104>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d004      	beq.n	80038aa <ADC_Enable+0x66>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a29      	ldr	r2, [pc, #164]	@ (800394c <ADC_Enable+0x108>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d101      	bne.n	80038ae <ADC_Enable+0x6a>
 80038aa:	4b29      	ldr	r3, [pc, #164]	@ (8003950 <ADC_Enable+0x10c>)
 80038ac:	e000      	b.n	80038b0 <ADC_Enable+0x6c>
 80038ae:	4b29      	ldr	r3, [pc, #164]	@ (8003954 <ADC_Enable+0x110>)
 80038b0:	4618      	mov	r0, r3
 80038b2:	f7fe ff43 	bl	800273c <LL_ADC_GetMultimode>
 80038b6:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a23      	ldr	r2, [pc, #140]	@ (800394c <ADC_Enable+0x108>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d002      	beq.n	80038c8 <ADC_Enable+0x84>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	e000      	b.n	80038ca <ADC_Enable+0x86>
 80038c8:	4b1f      	ldr	r3, [pc, #124]	@ (8003948 <ADC_Enable+0x104>)
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	6812      	ldr	r2, [r2, #0]
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d02c      	beq.n	800392c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d130      	bne.n	800393a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80038d8:	e028      	b.n	800392c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4618      	mov	r0, r3
 80038e0:	f7fe ffaa 	bl	8002838 <LL_ADC_IsEnabled>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d104      	bne.n	80038f4 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7fe ff8e 	bl	8002810 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80038f4:	f7fe fd84 	bl	8002400 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d914      	bls.n	800392c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0301 	and.w	r3, r3, #1
 800390c:	2b01      	cmp	r3, #1
 800390e:	d00d      	beq.n	800392c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003914:	f043 0210 	orr.w	r2, r3, #16
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003920:	f043 0201 	orr.w	r2, r3, #1
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e007      	b.n	800393c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b01      	cmp	r3, #1
 8003938:	d1cf      	bne.n	80038da <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	3710      	adds	r7, #16
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	8000003f 	.word	0x8000003f
 8003948:	40022000 	.word	0x40022000
 800394c:	40022100 	.word	0x40022100
 8003950:	40022300 	.word	0x40022300
 8003954:	58026300 	.word	0x58026300

08003958 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003964:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800396a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800396e:	2b00      	cmp	r3, #0
 8003970:	d14b      	bne.n	8003a0a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003976:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0308 	and.w	r3, r3, #8
 8003988:	2b00      	cmp	r3, #0
 800398a:	d021      	beq.n	80039d0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4618      	mov	r0, r3
 8003992:	f7fe fe1e 	bl	80025d2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d032      	beq.n	8003a02 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d12b      	bne.n	8003a02 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039ae:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d11f      	bne.n	8003a02 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039c6:	f043 0201 	orr.w	r2, r3, #1
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	655a      	str	r2, [r3, #84]	@ 0x54
 80039ce:	e018      	b.n	8003a02 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	f003 0303 	and.w	r3, r3, #3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d111      	bne.n	8003a02 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039e2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d105      	bne.n	8003a02 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039fa:	f043 0201 	orr.w	r2, r3, #1
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003a02:	68f8      	ldr	r0, [r7, #12]
 8003a04:	f7ff fc06 	bl	8003214 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003a08:	e00e      	b.n	8003a28 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a0e:	f003 0310 	and.w	r3, r3, #16
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d003      	beq.n	8003a1e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003a16:	68f8      	ldr	r0, [r7, #12]
 8003a18:	f7ff fc1a 	bl	8003250 <HAL_ADC_ErrorCallback>
}
 8003a1c:	e004      	b.n	8003a28 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	4798      	blx	r3
}
 8003a28:	bf00      	nop
 8003a2a:	3710      	adds	r7, #16
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a3c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003a3e:	68f8      	ldr	r0, [r7, #12]
 8003a40:	f7ff fbf2 	bl	8003228 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a44:	bf00      	nop
 8003a46:	3710      	adds	r7, #16
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a58:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a5e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a6a:	f043 0204 	orr.w	r2, r3, #4
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003a72:	68f8      	ldr	r0, [r7, #12]
 8003a74:	f7ff fbec 	bl	8003250 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a78:	bf00      	nop
 8003a7a:	3710      	adds	r7, #16
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a7a      	ldr	r2, [pc, #488]	@ (8003c78 <ADC_ConfigureBoostMode+0x1f8>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d004      	beq.n	8003a9c <ADC_ConfigureBoostMode+0x1c>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a79      	ldr	r2, [pc, #484]	@ (8003c7c <ADC_ConfigureBoostMode+0x1fc>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d109      	bne.n	8003ab0 <ADC_ConfigureBoostMode+0x30>
 8003a9c:	4b78      	ldr	r3, [pc, #480]	@ (8003c80 <ADC_ConfigureBoostMode+0x200>)
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	bf14      	ite	ne
 8003aa8:	2301      	movne	r3, #1
 8003aaa:	2300      	moveq	r3, #0
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	e008      	b.n	8003ac2 <ADC_ConfigureBoostMode+0x42>
 8003ab0:	4b74      	ldr	r3, [pc, #464]	@ (8003c84 <ADC_ConfigureBoostMode+0x204>)
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	bf14      	ite	ne
 8003abc:	2301      	movne	r3, #1
 8003abe:	2300      	moveq	r3, #0
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d01c      	beq.n	8003b00 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003ac6:	f004 fbe1 	bl	800828c <HAL_RCC_GetHCLKFreq>
 8003aca:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003ad4:	d010      	beq.n	8003af8 <ADC_ConfigureBoostMode+0x78>
 8003ad6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003ada:	d873      	bhi.n	8003bc4 <ADC_ConfigureBoostMode+0x144>
 8003adc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ae0:	d002      	beq.n	8003ae8 <ADC_ConfigureBoostMode+0x68>
 8003ae2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ae6:	d16d      	bne.n	8003bc4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	0c1b      	lsrs	r3, r3, #16
 8003aee:	68fa      	ldr	r2, [r7, #12]
 8003af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af4:	60fb      	str	r3, [r7, #12]
        break;
 8003af6:	e068      	b.n	8003bca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	089b      	lsrs	r3, r3, #2
 8003afc:	60fb      	str	r3, [r7, #12]
        break;
 8003afe:	e064      	b.n	8003bca <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003b00:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003b04:	f04f 0100 	mov.w	r1, #0
 8003b08:	f005 fe26 	bl	8009758 <HAL_RCCEx_GetPeriphCLKFreq>
 8003b0c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003b16:	d051      	beq.n	8003bbc <ADC_ConfigureBoostMode+0x13c>
 8003b18:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003b1c:	d854      	bhi.n	8003bc8 <ADC_ConfigureBoostMode+0x148>
 8003b1e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003b22:	d047      	beq.n	8003bb4 <ADC_ConfigureBoostMode+0x134>
 8003b24:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003b28:	d84e      	bhi.n	8003bc8 <ADC_ConfigureBoostMode+0x148>
 8003b2a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003b2e:	d03d      	beq.n	8003bac <ADC_ConfigureBoostMode+0x12c>
 8003b30:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003b34:	d848      	bhi.n	8003bc8 <ADC_ConfigureBoostMode+0x148>
 8003b36:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b3a:	d033      	beq.n	8003ba4 <ADC_ConfigureBoostMode+0x124>
 8003b3c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b40:	d842      	bhi.n	8003bc8 <ADC_ConfigureBoostMode+0x148>
 8003b42:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003b46:	d029      	beq.n	8003b9c <ADC_ConfigureBoostMode+0x11c>
 8003b48:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003b4c:	d83c      	bhi.n	8003bc8 <ADC_ConfigureBoostMode+0x148>
 8003b4e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003b52:	d01a      	beq.n	8003b8a <ADC_ConfigureBoostMode+0x10a>
 8003b54:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003b58:	d836      	bhi.n	8003bc8 <ADC_ConfigureBoostMode+0x148>
 8003b5a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003b5e:	d014      	beq.n	8003b8a <ADC_ConfigureBoostMode+0x10a>
 8003b60:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003b64:	d830      	bhi.n	8003bc8 <ADC_ConfigureBoostMode+0x148>
 8003b66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b6a:	d00e      	beq.n	8003b8a <ADC_ConfigureBoostMode+0x10a>
 8003b6c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b70:	d82a      	bhi.n	8003bc8 <ADC_ConfigureBoostMode+0x148>
 8003b72:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003b76:	d008      	beq.n	8003b8a <ADC_ConfigureBoostMode+0x10a>
 8003b78:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003b7c:	d824      	bhi.n	8003bc8 <ADC_ConfigureBoostMode+0x148>
 8003b7e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b82:	d002      	beq.n	8003b8a <ADC_ConfigureBoostMode+0x10a>
 8003b84:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003b88:	d11e      	bne.n	8003bc8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	0c9b      	lsrs	r3, r3, #18
 8003b90:	005b      	lsls	r3, r3, #1
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b98:	60fb      	str	r3, [r7, #12]
        break;
 8003b9a:	e016      	b.n	8003bca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	091b      	lsrs	r3, r3, #4
 8003ba0:	60fb      	str	r3, [r7, #12]
        break;
 8003ba2:	e012      	b.n	8003bca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	095b      	lsrs	r3, r3, #5
 8003ba8:	60fb      	str	r3, [r7, #12]
        break;
 8003baa:	e00e      	b.n	8003bca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	099b      	lsrs	r3, r3, #6
 8003bb0:	60fb      	str	r3, [r7, #12]
        break;
 8003bb2:	e00a      	b.n	8003bca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	09db      	lsrs	r3, r3, #7
 8003bb8:	60fb      	str	r3, [r7, #12]
        break;
 8003bba:	e006      	b.n	8003bca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	0a1b      	lsrs	r3, r3, #8
 8003bc0:	60fb      	str	r3, [r7, #12]
        break;
 8003bc2:	e002      	b.n	8003bca <ADC_ConfigureBoostMode+0x14a>
        break;
 8003bc4:	bf00      	nop
 8003bc6:	e000      	b.n	8003bca <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003bc8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003bca:	f7fe fc25 	bl	8002418 <HAL_GetREVID>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d815      	bhi.n	8003c04 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	4a2b      	ldr	r2, [pc, #172]	@ (8003c88 <ADC_ConfigureBoostMode+0x208>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d908      	bls.n	8003bf2 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	689a      	ldr	r2, [r3, #8]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bee:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003bf0:	e03e      	b.n	8003c70 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	689a      	ldr	r2, [r3, #8]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c00:	609a      	str	r2, [r3, #8]
}
 8003c02:	e035      	b.n	8003c70 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	085b      	lsrs	r3, r3, #1
 8003c08:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	4a1f      	ldr	r2, [pc, #124]	@ (8003c8c <ADC_ConfigureBoostMode+0x20c>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d808      	bhi.n	8003c24 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	689a      	ldr	r2, [r3, #8]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003c20:	609a      	str	r2, [r3, #8]
}
 8003c22:	e025      	b.n	8003c70 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	4a1a      	ldr	r2, [pc, #104]	@ (8003c90 <ADC_ConfigureBoostMode+0x210>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d80a      	bhi.n	8003c42 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c3e:	609a      	str	r2, [r3, #8]
}
 8003c40:	e016      	b.n	8003c70 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	4a13      	ldr	r2, [pc, #76]	@ (8003c94 <ADC_ConfigureBoostMode+0x214>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d80a      	bhi.n	8003c60 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c5c:	609a      	str	r2, [r3, #8]
}
 8003c5e:	e007      	b.n	8003c70 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	689a      	ldr	r2, [r3, #8]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003c6e:	609a      	str	r2, [r3, #8]
}
 8003c70:	bf00      	nop
 8003c72:	3710      	adds	r7, #16
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	40022000 	.word	0x40022000
 8003c7c:	40022100 	.word	0x40022100
 8003c80:	40022300 	.word	0x40022300
 8003c84:	58026300 	.word	0x58026300
 8003c88:	01312d00 	.word	0x01312d00
 8003c8c:	005f5e10 	.word	0x005f5e10
 8003c90:	00bebc20 	.word	0x00bebc20
 8003c94:	017d7840 	.word	0x017d7840

08003c98 <LL_ADC_IsEnabled>:
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f003 0301 	and.w	r3, r3, #1
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d101      	bne.n	8003cb0 <LL_ADC_IsEnabled+0x18>
 8003cac:	2301      	movs	r3, #1
 8003cae:	e000      	b.n	8003cb2 <LL_ADC_IsEnabled+0x1a>
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr

08003cbe <LL_ADC_REG_IsConversionOngoing>:
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	b083      	sub	sp, #12
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f003 0304 	and.w	r3, r3, #4
 8003cce:	2b04      	cmp	r3, #4
 8003cd0:	d101      	bne.n	8003cd6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e000      	b.n	8003cd8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003cd6:	2300      	movs	r3, #0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003d00:	bf00      	nop
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003d28:	bf00      	nop
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003d48:	b590      	push	{r4, r7, lr}
 8003d4a:	b09f      	sub	sp, #124	@ 0x7c
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d52:	2300      	movs	r3, #0
 8003d54:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d101      	bne.n	8003d66 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003d62:	2302      	movs	r3, #2
 8003d64:	e0be      	b.n	8003ee4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003d72:	2300      	movs	r3, #0
 8003d74:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a5c      	ldr	r2, [pc, #368]	@ (8003eec <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d102      	bne.n	8003d86 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003d80:	4b5b      	ldr	r3, [pc, #364]	@ (8003ef0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003d82:	60bb      	str	r3, [r7, #8]
 8003d84:	e001      	b.n	8003d8a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003d86:	2300      	movs	r3, #0
 8003d88:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d10b      	bne.n	8003da8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d94:	f043 0220 	orr.w	r2, r3, #32
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e09d      	b.n	8003ee4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7ff ff87 	bl	8003cbe <LL_ADC_REG_IsConversionOngoing>
 8003db0:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7ff ff81 	bl	8003cbe <LL_ADC_REG_IsConversionOngoing>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d17f      	bne.n	8003ec2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003dc2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d17c      	bne.n	8003ec2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a47      	ldr	r2, [pc, #284]	@ (8003eec <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d004      	beq.n	8003ddc <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a46      	ldr	r2, [pc, #280]	@ (8003ef0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d101      	bne.n	8003de0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003ddc:	4b45      	ldr	r3, [pc, #276]	@ (8003ef4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003dde:	e000      	b.n	8003de2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003de0:	4b45      	ldr	r3, [pc, #276]	@ (8003ef8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003de2:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d039      	beq.n	8003e60 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003dec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	431a      	orrs	r2, r3
 8003dfa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003dfc:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a3a      	ldr	r2, [pc, #232]	@ (8003eec <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d004      	beq.n	8003e12 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a38      	ldr	r2, [pc, #224]	@ (8003ef0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d10e      	bne.n	8003e30 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003e12:	4836      	ldr	r0, [pc, #216]	@ (8003eec <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003e14:	f7ff ff40 	bl	8003c98 <LL_ADC_IsEnabled>
 8003e18:	4604      	mov	r4, r0
 8003e1a:	4835      	ldr	r0, [pc, #212]	@ (8003ef0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003e1c:	f7ff ff3c 	bl	8003c98 <LL_ADC_IsEnabled>
 8003e20:	4603      	mov	r3, r0
 8003e22:	4323      	orrs	r3, r4
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	bf0c      	ite	eq
 8003e28:	2301      	moveq	r3, #1
 8003e2a:	2300      	movne	r3, #0
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	e008      	b.n	8003e42 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003e30:	4832      	ldr	r0, [pc, #200]	@ (8003efc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003e32:	f7ff ff31 	bl	8003c98 <LL_ADC_IsEnabled>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	bf0c      	ite	eq
 8003e3c:	2301      	moveq	r3, #1
 8003e3e:	2300      	movne	r3, #0
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d047      	beq.n	8003ed6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003e46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e48:	689a      	ldr	r2, [r3, #8]
 8003e4a:	4b2d      	ldr	r3, [pc, #180]	@ (8003f00 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	683a      	ldr	r2, [r7, #0]
 8003e50:	6811      	ldr	r1, [r2, #0]
 8003e52:	683a      	ldr	r2, [r7, #0]
 8003e54:	6892      	ldr	r2, [r2, #8]
 8003e56:	430a      	orrs	r2, r1
 8003e58:	431a      	orrs	r2, r3
 8003e5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e5c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e5e:	e03a      	b.n	8003ed6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003e60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003e68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e6a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a1e      	ldr	r2, [pc, #120]	@ (8003eec <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d004      	beq.n	8003e80 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a1d      	ldr	r2, [pc, #116]	@ (8003ef0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d10e      	bne.n	8003e9e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003e80:	481a      	ldr	r0, [pc, #104]	@ (8003eec <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003e82:	f7ff ff09 	bl	8003c98 <LL_ADC_IsEnabled>
 8003e86:	4604      	mov	r4, r0
 8003e88:	4819      	ldr	r0, [pc, #100]	@ (8003ef0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003e8a:	f7ff ff05 	bl	8003c98 <LL_ADC_IsEnabled>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	4323      	orrs	r3, r4
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	bf0c      	ite	eq
 8003e96:	2301      	moveq	r3, #1
 8003e98:	2300      	movne	r3, #0
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	e008      	b.n	8003eb0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003e9e:	4817      	ldr	r0, [pc, #92]	@ (8003efc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003ea0:	f7ff fefa 	bl	8003c98 <LL_ADC_IsEnabled>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	bf0c      	ite	eq
 8003eaa:	2301      	moveq	r3, #1
 8003eac:	2300      	movne	r3, #0
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d010      	beq.n	8003ed6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003eb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003eb6:	689a      	ldr	r2, [r3, #8]
 8003eb8:	4b11      	ldr	r3, [pc, #68]	@ (8003f00 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003eba:	4013      	ands	r3, r2
 8003ebc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003ebe:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003ec0:	e009      	b.n	8003ed6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ec6:	f043 0220 	orr.w	r2, r3, #32
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003ed4:	e000      	b.n	8003ed8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003ed6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003ee0:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	377c      	adds	r7, #124	@ 0x7c
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd90      	pop	{r4, r7, pc}
 8003eec:	40022000 	.word	0x40022000
 8003ef0:	40022100 	.word	0x40022100
 8003ef4:	40022300 	.word	0x40022300
 8003ef8:	58026300 	.word	0x58026300
 8003efc:	58026000 	.word	0x58026000
 8003f00:	fffff0e0 	.word	0xfffff0e0

08003f04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b085      	sub	sp, #20
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f003 0307 	and.w	r3, r3, #7
 8003f12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f14:	4b0b      	ldr	r3, [pc, #44]	@ (8003f44 <__NVIC_SetPriorityGrouping+0x40>)
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f1a:	68ba      	ldr	r2, [r7, #8]
 8003f1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003f20:	4013      	ands	r3, r2
 8003f22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003f2c:	4b06      	ldr	r3, [pc, #24]	@ (8003f48 <__NVIC_SetPriorityGrouping+0x44>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f32:	4a04      	ldr	r2, [pc, #16]	@ (8003f44 <__NVIC_SetPriorityGrouping+0x40>)
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	60d3      	str	r3, [r2, #12]
}
 8003f38:	bf00      	nop
 8003f3a:	3714      	adds	r7, #20
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr
 8003f44:	e000ed00 	.word	0xe000ed00
 8003f48:	05fa0000 	.word	0x05fa0000

08003f4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f50:	4b04      	ldr	r3, [pc, #16]	@ (8003f64 <__NVIC_GetPriorityGrouping+0x18>)
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	0a1b      	lsrs	r3, r3, #8
 8003f56:	f003 0307 	and.w	r3, r3, #7
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr
 8003f64:	e000ed00 	.word	0xe000ed00

08003f68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	4603      	mov	r3, r0
 8003f70:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003f72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	db0b      	blt.n	8003f92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f7a:	88fb      	ldrh	r3, [r7, #6]
 8003f7c:	f003 021f 	and.w	r2, r3, #31
 8003f80:	4907      	ldr	r1, [pc, #28]	@ (8003fa0 <__NVIC_EnableIRQ+0x38>)
 8003f82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f86:	095b      	lsrs	r3, r3, #5
 8003f88:	2001      	movs	r0, #1
 8003f8a:	fa00 f202 	lsl.w	r2, r0, r2
 8003f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f92:	bf00      	nop
 8003f94:	370c      	adds	r7, #12
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	e000e100 	.word	0xe000e100

08003fa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	4603      	mov	r3, r0
 8003fac:	6039      	str	r1, [r7, #0]
 8003fae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003fb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	db0a      	blt.n	8003fce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	b2da      	uxtb	r2, r3
 8003fbc:	490c      	ldr	r1, [pc, #48]	@ (8003ff0 <__NVIC_SetPriority+0x4c>)
 8003fbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003fc2:	0112      	lsls	r2, r2, #4
 8003fc4:	b2d2      	uxtb	r2, r2
 8003fc6:	440b      	add	r3, r1
 8003fc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003fcc:	e00a      	b.n	8003fe4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	b2da      	uxtb	r2, r3
 8003fd2:	4908      	ldr	r1, [pc, #32]	@ (8003ff4 <__NVIC_SetPriority+0x50>)
 8003fd4:	88fb      	ldrh	r3, [r7, #6]
 8003fd6:	f003 030f 	and.w	r3, r3, #15
 8003fda:	3b04      	subs	r3, #4
 8003fdc:	0112      	lsls	r2, r2, #4
 8003fde:	b2d2      	uxtb	r2, r2
 8003fe0:	440b      	add	r3, r1
 8003fe2:	761a      	strb	r2, [r3, #24]
}
 8003fe4:	bf00      	nop
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr
 8003ff0:	e000e100 	.word	0xe000e100
 8003ff4:	e000ed00 	.word	0xe000ed00

08003ff8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b089      	sub	sp, #36	@ 0x24
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f003 0307 	and.w	r3, r3, #7
 800400a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	f1c3 0307 	rsb	r3, r3, #7
 8004012:	2b04      	cmp	r3, #4
 8004014:	bf28      	it	cs
 8004016:	2304      	movcs	r3, #4
 8004018:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	3304      	adds	r3, #4
 800401e:	2b06      	cmp	r3, #6
 8004020:	d902      	bls.n	8004028 <NVIC_EncodePriority+0x30>
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	3b03      	subs	r3, #3
 8004026:	e000      	b.n	800402a <NVIC_EncodePriority+0x32>
 8004028:	2300      	movs	r3, #0
 800402a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800402c:	f04f 32ff 	mov.w	r2, #4294967295
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	fa02 f303 	lsl.w	r3, r2, r3
 8004036:	43da      	mvns	r2, r3
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	401a      	ands	r2, r3
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004040:	f04f 31ff 	mov.w	r1, #4294967295
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	fa01 f303 	lsl.w	r3, r1, r3
 800404a:	43d9      	mvns	r1, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004050:	4313      	orrs	r3, r2
         );
}
 8004052:	4618      	mov	r0, r3
 8004054:	3724      	adds	r7, #36	@ 0x24
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
	...

08004060 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b082      	sub	sp, #8
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	3b01      	subs	r3, #1
 800406c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004070:	d301      	bcc.n	8004076 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004072:	2301      	movs	r3, #1
 8004074:	e00f      	b.n	8004096 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004076:	4a0a      	ldr	r2, [pc, #40]	@ (80040a0 <SysTick_Config+0x40>)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	3b01      	subs	r3, #1
 800407c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800407e:	210f      	movs	r1, #15
 8004080:	f04f 30ff 	mov.w	r0, #4294967295
 8004084:	f7ff ff8e 	bl	8003fa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004088:	4b05      	ldr	r3, [pc, #20]	@ (80040a0 <SysTick_Config+0x40>)
 800408a:	2200      	movs	r2, #0
 800408c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800408e:	4b04      	ldr	r3, [pc, #16]	@ (80040a0 <SysTick_Config+0x40>)
 8004090:	2207      	movs	r2, #7
 8004092:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3708      	adds	r7, #8
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	e000e010 	.word	0xe000e010

080040a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f7ff ff29 	bl	8003f04 <__NVIC_SetPriorityGrouping>
}
 80040b2:	bf00      	nop
 80040b4:	3708      	adds	r7, #8
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}

080040ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b086      	sub	sp, #24
 80040be:	af00      	add	r7, sp, #0
 80040c0:	4603      	mov	r3, r0
 80040c2:	60b9      	str	r1, [r7, #8]
 80040c4:	607a      	str	r2, [r7, #4]
 80040c6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80040c8:	f7ff ff40 	bl	8003f4c <__NVIC_GetPriorityGrouping>
 80040cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	68b9      	ldr	r1, [r7, #8]
 80040d2:	6978      	ldr	r0, [r7, #20]
 80040d4:	f7ff ff90 	bl	8003ff8 <NVIC_EncodePriority>
 80040d8:	4602      	mov	r2, r0
 80040da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80040de:	4611      	mov	r1, r2
 80040e0:	4618      	mov	r0, r3
 80040e2:	f7ff ff5f 	bl	8003fa4 <__NVIC_SetPriority>
}
 80040e6:	bf00      	nop
 80040e8:	3718      	adds	r7, #24
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}

080040ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040ee:	b580      	push	{r7, lr}
 80040f0:	b082      	sub	sp, #8
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	4603      	mov	r3, r0
 80040f6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040fc:	4618      	mov	r0, r3
 80040fe:	f7ff ff33 	bl	8003f68 <__NVIC_EnableIRQ>
}
 8004102:	bf00      	nop
 8004104:	3708      	adds	r7, #8
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}

0800410a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800410a:	b580      	push	{r7, lr}
 800410c:	b082      	sub	sp, #8
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f7ff ffa4 	bl	8004060 <SysTick_Config>
 8004118:	4603      	mov	r3, r0
}
 800411a:	4618      	mov	r0, r3
 800411c:	3708      	adds	r7, #8
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
	...

08004124 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8004124:	b480      	push	{r7}
 8004126:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8004128:	4b06      	ldr	r3, [pc, #24]	@ (8004144 <HAL_GetCurrentCPUID+0x20>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004130:	2b70      	cmp	r3, #112	@ 0x70
 8004132:	d101      	bne.n	8004138 <HAL_GetCurrentCPUID+0x14>
  {
    return  CM7_CPUID;
 8004134:	2303      	movs	r3, #3
 8004136:	e000      	b.n	800413a <HAL_GetCurrentCPUID+0x16>
  }
  else
  {
    return CM4_CPUID;
 8004138:	2301      	movs	r3, #1
  }
}
 800413a:	4618      	mov	r0, r3
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr
 8004144:	e000ed00 	.word	0xe000ed00

08004148 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b086      	sub	sp, #24
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004150:	f7fe f956 	bl	8002400 <HAL_GetTick>
 8004154:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d101      	bne.n	8004160 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e316      	b.n	800478e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a66      	ldr	r2, [pc, #408]	@ (8004300 <HAL_DMA_Init+0x1b8>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d04a      	beq.n	8004200 <HAL_DMA_Init+0xb8>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a65      	ldr	r2, [pc, #404]	@ (8004304 <HAL_DMA_Init+0x1bc>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d045      	beq.n	8004200 <HAL_DMA_Init+0xb8>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a63      	ldr	r2, [pc, #396]	@ (8004308 <HAL_DMA_Init+0x1c0>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d040      	beq.n	8004200 <HAL_DMA_Init+0xb8>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a62      	ldr	r2, [pc, #392]	@ (800430c <HAL_DMA_Init+0x1c4>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d03b      	beq.n	8004200 <HAL_DMA_Init+0xb8>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a60      	ldr	r2, [pc, #384]	@ (8004310 <HAL_DMA_Init+0x1c8>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d036      	beq.n	8004200 <HAL_DMA_Init+0xb8>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a5f      	ldr	r2, [pc, #380]	@ (8004314 <HAL_DMA_Init+0x1cc>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d031      	beq.n	8004200 <HAL_DMA_Init+0xb8>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a5d      	ldr	r2, [pc, #372]	@ (8004318 <HAL_DMA_Init+0x1d0>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d02c      	beq.n	8004200 <HAL_DMA_Init+0xb8>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a5c      	ldr	r2, [pc, #368]	@ (800431c <HAL_DMA_Init+0x1d4>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d027      	beq.n	8004200 <HAL_DMA_Init+0xb8>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a5a      	ldr	r2, [pc, #360]	@ (8004320 <HAL_DMA_Init+0x1d8>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d022      	beq.n	8004200 <HAL_DMA_Init+0xb8>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a59      	ldr	r2, [pc, #356]	@ (8004324 <HAL_DMA_Init+0x1dc>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d01d      	beq.n	8004200 <HAL_DMA_Init+0xb8>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a57      	ldr	r2, [pc, #348]	@ (8004328 <HAL_DMA_Init+0x1e0>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d018      	beq.n	8004200 <HAL_DMA_Init+0xb8>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a56      	ldr	r2, [pc, #344]	@ (800432c <HAL_DMA_Init+0x1e4>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d013      	beq.n	8004200 <HAL_DMA_Init+0xb8>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a54      	ldr	r2, [pc, #336]	@ (8004330 <HAL_DMA_Init+0x1e8>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d00e      	beq.n	8004200 <HAL_DMA_Init+0xb8>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a53      	ldr	r2, [pc, #332]	@ (8004334 <HAL_DMA_Init+0x1ec>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d009      	beq.n	8004200 <HAL_DMA_Init+0xb8>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a51      	ldr	r2, [pc, #324]	@ (8004338 <HAL_DMA_Init+0x1f0>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d004      	beq.n	8004200 <HAL_DMA_Init+0xb8>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a50      	ldr	r2, [pc, #320]	@ (800433c <HAL_DMA_Init+0x1f4>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d101      	bne.n	8004204 <HAL_DMA_Init+0xbc>
 8004200:	2301      	movs	r3, #1
 8004202:	e000      	b.n	8004206 <HAL_DMA_Init+0xbe>
 8004204:	2300      	movs	r3, #0
 8004206:	2b00      	cmp	r3, #0
 8004208:	f000 813b 	beq.w	8004482 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2202      	movs	r2, #2
 8004210:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a37      	ldr	r2, [pc, #220]	@ (8004300 <HAL_DMA_Init+0x1b8>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d04a      	beq.n	80042bc <HAL_DMA_Init+0x174>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a36      	ldr	r2, [pc, #216]	@ (8004304 <HAL_DMA_Init+0x1bc>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d045      	beq.n	80042bc <HAL_DMA_Init+0x174>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a34      	ldr	r2, [pc, #208]	@ (8004308 <HAL_DMA_Init+0x1c0>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d040      	beq.n	80042bc <HAL_DMA_Init+0x174>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a33      	ldr	r2, [pc, #204]	@ (800430c <HAL_DMA_Init+0x1c4>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d03b      	beq.n	80042bc <HAL_DMA_Init+0x174>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a31      	ldr	r2, [pc, #196]	@ (8004310 <HAL_DMA_Init+0x1c8>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d036      	beq.n	80042bc <HAL_DMA_Init+0x174>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a30      	ldr	r2, [pc, #192]	@ (8004314 <HAL_DMA_Init+0x1cc>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d031      	beq.n	80042bc <HAL_DMA_Init+0x174>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a2e      	ldr	r2, [pc, #184]	@ (8004318 <HAL_DMA_Init+0x1d0>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d02c      	beq.n	80042bc <HAL_DMA_Init+0x174>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a2d      	ldr	r2, [pc, #180]	@ (800431c <HAL_DMA_Init+0x1d4>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d027      	beq.n	80042bc <HAL_DMA_Init+0x174>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a2b      	ldr	r2, [pc, #172]	@ (8004320 <HAL_DMA_Init+0x1d8>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d022      	beq.n	80042bc <HAL_DMA_Init+0x174>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a2a      	ldr	r2, [pc, #168]	@ (8004324 <HAL_DMA_Init+0x1dc>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d01d      	beq.n	80042bc <HAL_DMA_Init+0x174>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a28      	ldr	r2, [pc, #160]	@ (8004328 <HAL_DMA_Init+0x1e0>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d018      	beq.n	80042bc <HAL_DMA_Init+0x174>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a27      	ldr	r2, [pc, #156]	@ (800432c <HAL_DMA_Init+0x1e4>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d013      	beq.n	80042bc <HAL_DMA_Init+0x174>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a25      	ldr	r2, [pc, #148]	@ (8004330 <HAL_DMA_Init+0x1e8>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d00e      	beq.n	80042bc <HAL_DMA_Init+0x174>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a24      	ldr	r2, [pc, #144]	@ (8004334 <HAL_DMA_Init+0x1ec>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d009      	beq.n	80042bc <HAL_DMA_Init+0x174>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a22      	ldr	r2, [pc, #136]	@ (8004338 <HAL_DMA_Init+0x1f0>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d004      	beq.n	80042bc <HAL_DMA_Init+0x174>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a21      	ldr	r2, [pc, #132]	@ (800433c <HAL_DMA_Init+0x1f4>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d108      	bne.n	80042ce <HAL_DMA_Init+0x186>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f022 0201 	bic.w	r2, r2, #1
 80042ca:	601a      	str	r2, [r3, #0]
 80042cc:	e007      	b.n	80042de <HAL_DMA_Init+0x196>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f022 0201 	bic.w	r2, r2, #1
 80042dc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80042de:	e02f      	b.n	8004340 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80042e0:	f7fe f88e 	bl	8002400 <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	2b05      	cmp	r3, #5
 80042ec:	d928      	bls.n	8004340 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2220      	movs	r2, #32
 80042f2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2203      	movs	r2, #3
 80042f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e246      	b.n	800478e <HAL_DMA_Init+0x646>
 8004300:	40020010 	.word	0x40020010
 8004304:	40020028 	.word	0x40020028
 8004308:	40020040 	.word	0x40020040
 800430c:	40020058 	.word	0x40020058
 8004310:	40020070 	.word	0x40020070
 8004314:	40020088 	.word	0x40020088
 8004318:	400200a0 	.word	0x400200a0
 800431c:	400200b8 	.word	0x400200b8
 8004320:	40020410 	.word	0x40020410
 8004324:	40020428 	.word	0x40020428
 8004328:	40020440 	.word	0x40020440
 800432c:	40020458 	.word	0x40020458
 8004330:	40020470 	.word	0x40020470
 8004334:	40020488 	.word	0x40020488
 8004338:	400204a0 	.word	0x400204a0
 800433c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	2b00      	cmp	r3, #0
 800434c:	d1c8      	bne.n	80042e0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004356:	697a      	ldr	r2, [r7, #20]
 8004358:	4b83      	ldr	r3, [pc, #524]	@ (8004568 <HAL_DMA_Init+0x420>)
 800435a:	4013      	ands	r3, r2
 800435c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004366:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004372:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	699b      	ldr	r3, [r3, #24]
 8004378:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800437e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a1b      	ldr	r3, [r3, #32]
 8004384:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004386:	697a      	ldr	r2, [r7, #20]
 8004388:	4313      	orrs	r3, r2
 800438a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004390:	2b04      	cmp	r3, #4
 8004392:	d107      	bne.n	80043a4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800439c:	4313      	orrs	r3, r2
 800439e:	697a      	ldr	r2, [r7, #20]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80043a4:	4b71      	ldr	r3, [pc, #452]	@ (800456c <HAL_DMA_Init+0x424>)
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	4b71      	ldr	r3, [pc, #452]	@ (8004570 <HAL_DMA_Init+0x428>)
 80043aa:	4013      	ands	r3, r2
 80043ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80043b0:	d328      	bcc.n	8004404 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	2b28      	cmp	r3, #40	@ 0x28
 80043b8:	d903      	bls.n	80043c2 <HAL_DMA_Init+0x27a>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	2b2e      	cmp	r3, #46	@ 0x2e
 80043c0:	d917      	bls.n	80043f2 <HAL_DMA_Init+0x2aa>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	2b3e      	cmp	r3, #62	@ 0x3e
 80043c8:	d903      	bls.n	80043d2 <HAL_DMA_Init+0x28a>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	2b42      	cmp	r3, #66	@ 0x42
 80043d0:	d90f      	bls.n	80043f2 <HAL_DMA_Init+0x2aa>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	2b46      	cmp	r3, #70	@ 0x46
 80043d8:	d903      	bls.n	80043e2 <HAL_DMA_Init+0x29a>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	2b48      	cmp	r3, #72	@ 0x48
 80043e0:	d907      	bls.n	80043f2 <HAL_DMA_Init+0x2aa>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	2b4e      	cmp	r3, #78	@ 0x4e
 80043e8:	d905      	bls.n	80043f6 <HAL_DMA_Init+0x2ae>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	2b52      	cmp	r3, #82	@ 0x52
 80043f0:	d801      	bhi.n	80043f6 <HAL_DMA_Init+0x2ae>
 80043f2:	2301      	movs	r3, #1
 80043f4:	e000      	b.n	80043f8 <HAL_DMA_Init+0x2b0>
 80043f6:	2300      	movs	r3, #0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d003      	beq.n	8004404 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004402:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	697a      	ldr	r2, [r7, #20]
 800440a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	f023 0307 	bic.w	r3, r3, #7
 800441a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004420:	697a      	ldr	r2, [r7, #20]
 8004422:	4313      	orrs	r3, r2
 8004424:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800442a:	2b04      	cmp	r3, #4
 800442c:	d117      	bne.n	800445e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004432:	697a      	ldr	r2, [r7, #20]
 8004434:	4313      	orrs	r3, r2
 8004436:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800443c:	2b00      	cmp	r3, #0
 800443e:	d00e      	beq.n	800445e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f002 fb33 	bl	8006aac <DMA_CheckFifoParam>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d008      	beq.n	800445e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2240      	movs	r2, #64	@ 0x40
 8004450:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2201      	movs	r2, #1
 8004456:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e197      	b.n	800478e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	697a      	ldr	r2, [r7, #20]
 8004464:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f002 fa6e 	bl	8006948 <DMA_CalcBaseAndBitshift>
 800446c:	4603      	mov	r3, r0
 800446e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004474:	f003 031f 	and.w	r3, r3, #31
 8004478:	223f      	movs	r2, #63	@ 0x3f
 800447a:	409a      	lsls	r2, r3
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	609a      	str	r2, [r3, #8]
 8004480:	e0cd      	b.n	800461e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a3b      	ldr	r2, [pc, #236]	@ (8004574 <HAL_DMA_Init+0x42c>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d022      	beq.n	80044d2 <HAL_DMA_Init+0x38a>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a39      	ldr	r2, [pc, #228]	@ (8004578 <HAL_DMA_Init+0x430>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d01d      	beq.n	80044d2 <HAL_DMA_Init+0x38a>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a38      	ldr	r2, [pc, #224]	@ (800457c <HAL_DMA_Init+0x434>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d018      	beq.n	80044d2 <HAL_DMA_Init+0x38a>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a36      	ldr	r2, [pc, #216]	@ (8004580 <HAL_DMA_Init+0x438>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d013      	beq.n	80044d2 <HAL_DMA_Init+0x38a>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a35      	ldr	r2, [pc, #212]	@ (8004584 <HAL_DMA_Init+0x43c>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d00e      	beq.n	80044d2 <HAL_DMA_Init+0x38a>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a33      	ldr	r2, [pc, #204]	@ (8004588 <HAL_DMA_Init+0x440>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d009      	beq.n	80044d2 <HAL_DMA_Init+0x38a>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a32      	ldr	r2, [pc, #200]	@ (800458c <HAL_DMA_Init+0x444>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d004      	beq.n	80044d2 <HAL_DMA_Init+0x38a>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a30      	ldr	r2, [pc, #192]	@ (8004590 <HAL_DMA_Init+0x448>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d101      	bne.n	80044d6 <HAL_DMA_Init+0x38e>
 80044d2:	2301      	movs	r3, #1
 80044d4:	e000      	b.n	80044d8 <HAL_DMA_Init+0x390>
 80044d6:	2300      	movs	r3, #0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f000 8097 	beq.w	800460c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a24      	ldr	r2, [pc, #144]	@ (8004574 <HAL_DMA_Init+0x42c>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d021      	beq.n	800452c <HAL_DMA_Init+0x3e4>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a22      	ldr	r2, [pc, #136]	@ (8004578 <HAL_DMA_Init+0x430>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d01c      	beq.n	800452c <HAL_DMA_Init+0x3e4>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a21      	ldr	r2, [pc, #132]	@ (800457c <HAL_DMA_Init+0x434>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d017      	beq.n	800452c <HAL_DMA_Init+0x3e4>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a1f      	ldr	r2, [pc, #124]	@ (8004580 <HAL_DMA_Init+0x438>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d012      	beq.n	800452c <HAL_DMA_Init+0x3e4>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a1e      	ldr	r2, [pc, #120]	@ (8004584 <HAL_DMA_Init+0x43c>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d00d      	beq.n	800452c <HAL_DMA_Init+0x3e4>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a1c      	ldr	r2, [pc, #112]	@ (8004588 <HAL_DMA_Init+0x440>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d008      	beq.n	800452c <HAL_DMA_Init+0x3e4>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a1b      	ldr	r2, [pc, #108]	@ (800458c <HAL_DMA_Init+0x444>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d003      	beq.n	800452c <HAL_DMA_Init+0x3e4>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a19      	ldr	r2, [pc, #100]	@ (8004590 <HAL_DMA_Init+0x448>)
 800452a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2202      	movs	r2, #2
 8004530:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004544:	697a      	ldr	r2, [r7, #20]
 8004546:	4b13      	ldr	r3, [pc, #76]	@ (8004594 <HAL_DMA_Init+0x44c>)
 8004548:	4013      	ands	r3, r2
 800454a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	2b40      	cmp	r3, #64	@ 0x40
 8004552:	d021      	beq.n	8004598 <HAL_DMA_Init+0x450>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	2b80      	cmp	r3, #128	@ 0x80
 800455a:	d102      	bne.n	8004562 <HAL_DMA_Init+0x41a>
 800455c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004560:	e01b      	b.n	800459a <HAL_DMA_Init+0x452>
 8004562:	2300      	movs	r3, #0
 8004564:	e019      	b.n	800459a <HAL_DMA_Init+0x452>
 8004566:	bf00      	nop
 8004568:	fe10803f 	.word	0xfe10803f
 800456c:	5c001000 	.word	0x5c001000
 8004570:	ffff0000 	.word	0xffff0000
 8004574:	58025408 	.word	0x58025408
 8004578:	5802541c 	.word	0x5802541c
 800457c:	58025430 	.word	0x58025430
 8004580:	58025444 	.word	0x58025444
 8004584:	58025458 	.word	0x58025458
 8004588:	5802546c 	.word	0x5802546c
 800458c:	58025480 	.word	0x58025480
 8004590:	58025494 	.word	0x58025494
 8004594:	fffe000f 	.word	0xfffe000f
 8004598:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	68d2      	ldr	r2, [r2, #12]
 800459e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80045a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80045a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80045b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	699b      	ldr	r3, [r3, #24]
 80045b6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80045b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	69db      	ldr	r3, [r3, #28]
 80045be:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80045c0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a1b      	ldr	r3, [r3, #32]
 80045c6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80045c8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80045ca:	697a      	ldr	r2, [r7, #20]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	697a      	ldr	r2, [r7, #20]
 80045d6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	461a      	mov	r2, r3
 80045de:	4b6e      	ldr	r3, [pc, #440]	@ (8004798 <HAL_DMA_Init+0x650>)
 80045e0:	4413      	add	r3, r2
 80045e2:	4a6e      	ldr	r2, [pc, #440]	@ (800479c <HAL_DMA_Init+0x654>)
 80045e4:	fba2 2303 	umull	r2, r3, r2, r3
 80045e8:	091b      	lsrs	r3, r3, #4
 80045ea:	009a      	lsls	r2, r3, #2
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f002 f9a9 	bl	8006948 <DMA_CalcBaseAndBitshift>
 80045f6:	4603      	mov	r3, r0
 80045f8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045fe:	f003 031f 	and.w	r3, r3, #31
 8004602:	2201      	movs	r2, #1
 8004604:	409a      	lsls	r2, r3
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	605a      	str	r2, [r3, #4]
 800460a:	e008      	b.n	800461e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2240      	movs	r2, #64	@ 0x40
 8004610:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2203      	movs	r2, #3
 8004616:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e0b7      	b.n	800478e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a5f      	ldr	r2, [pc, #380]	@ (80047a0 <HAL_DMA_Init+0x658>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d072      	beq.n	800470e <HAL_DMA_Init+0x5c6>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a5d      	ldr	r2, [pc, #372]	@ (80047a4 <HAL_DMA_Init+0x65c>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d06d      	beq.n	800470e <HAL_DMA_Init+0x5c6>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a5c      	ldr	r2, [pc, #368]	@ (80047a8 <HAL_DMA_Init+0x660>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d068      	beq.n	800470e <HAL_DMA_Init+0x5c6>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a5a      	ldr	r2, [pc, #360]	@ (80047ac <HAL_DMA_Init+0x664>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d063      	beq.n	800470e <HAL_DMA_Init+0x5c6>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a59      	ldr	r2, [pc, #356]	@ (80047b0 <HAL_DMA_Init+0x668>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d05e      	beq.n	800470e <HAL_DMA_Init+0x5c6>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a57      	ldr	r2, [pc, #348]	@ (80047b4 <HAL_DMA_Init+0x66c>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d059      	beq.n	800470e <HAL_DMA_Init+0x5c6>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a56      	ldr	r2, [pc, #344]	@ (80047b8 <HAL_DMA_Init+0x670>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d054      	beq.n	800470e <HAL_DMA_Init+0x5c6>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a54      	ldr	r2, [pc, #336]	@ (80047bc <HAL_DMA_Init+0x674>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d04f      	beq.n	800470e <HAL_DMA_Init+0x5c6>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a53      	ldr	r2, [pc, #332]	@ (80047c0 <HAL_DMA_Init+0x678>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d04a      	beq.n	800470e <HAL_DMA_Init+0x5c6>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a51      	ldr	r2, [pc, #324]	@ (80047c4 <HAL_DMA_Init+0x67c>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d045      	beq.n	800470e <HAL_DMA_Init+0x5c6>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a50      	ldr	r2, [pc, #320]	@ (80047c8 <HAL_DMA_Init+0x680>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d040      	beq.n	800470e <HAL_DMA_Init+0x5c6>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a4e      	ldr	r2, [pc, #312]	@ (80047cc <HAL_DMA_Init+0x684>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d03b      	beq.n	800470e <HAL_DMA_Init+0x5c6>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a4d      	ldr	r2, [pc, #308]	@ (80047d0 <HAL_DMA_Init+0x688>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d036      	beq.n	800470e <HAL_DMA_Init+0x5c6>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a4b      	ldr	r2, [pc, #300]	@ (80047d4 <HAL_DMA_Init+0x68c>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d031      	beq.n	800470e <HAL_DMA_Init+0x5c6>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a4a      	ldr	r2, [pc, #296]	@ (80047d8 <HAL_DMA_Init+0x690>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d02c      	beq.n	800470e <HAL_DMA_Init+0x5c6>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a48      	ldr	r2, [pc, #288]	@ (80047dc <HAL_DMA_Init+0x694>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d027      	beq.n	800470e <HAL_DMA_Init+0x5c6>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a47      	ldr	r2, [pc, #284]	@ (80047e0 <HAL_DMA_Init+0x698>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d022      	beq.n	800470e <HAL_DMA_Init+0x5c6>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a45      	ldr	r2, [pc, #276]	@ (80047e4 <HAL_DMA_Init+0x69c>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d01d      	beq.n	800470e <HAL_DMA_Init+0x5c6>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a44      	ldr	r2, [pc, #272]	@ (80047e8 <HAL_DMA_Init+0x6a0>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d018      	beq.n	800470e <HAL_DMA_Init+0x5c6>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a42      	ldr	r2, [pc, #264]	@ (80047ec <HAL_DMA_Init+0x6a4>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d013      	beq.n	800470e <HAL_DMA_Init+0x5c6>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a41      	ldr	r2, [pc, #260]	@ (80047f0 <HAL_DMA_Init+0x6a8>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d00e      	beq.n	800470e <HAL_DMA_Init+0x5c6>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a3f      	ldr	r2, [pc, #252]	@ (80047f4 <HAL_DMA_Init+0x6ac>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d009      	beq.n	800470e <HAL_DMA_Init+0x5c6>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a3e      	ldr	r2, [pc, #248]	@ (80047f8 <HAL_DMA_Init+0x6b0>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d004      	beq.n	800470e <HAL_DMA_Init+0x5c6>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a3c      	ldr	r2, [pc, #240]	@ (80047fc <HAL_DMA_Init+0x6b4>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d101      	bne.n	8004712 <HAL_DMA_Init+0x5ca>
 800470e:	2301      	movs	r3, #1
 8004710:	e000      	b.n	8004714 <HAL_DMA_Init+0x5cc>
 8004712:	2300      	movs	r3, #0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d032      	beq.n	800477e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f002 fa43 	bl	8006ba4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	2b80      	cmp	r3, #128	@ 0x80
 8004724:	d102      	bne.n	800472c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685a      	ldr	r2, [r3, #4]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004734:	b2d2      	uxtb	r2, r2
 8004736:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004740:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d010      	beq.n	800476c <HAL_DMA_Init+0x624>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	2b08      	cmp	r3, #8
 8004750:	d80c      	bhi.n	800476c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f002 fac0 	bl	8006cd8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800475c:	2200      	movs	r2, #0
 800475e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004768:	605a      	str	r2, [r3, #4]
 800476a:	e008      	b.n	800477e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3718      	adds	r7, #24
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	a7fdabf8 	.word	0xa7fdabf8
 800479c:	cccccccd 	.word	0xcccccccd
 80047a0:	40020010 	.word	0x40020010
 80047a4:	40020028 	.word	0x40020028
 80047a8:	40020040 	.word	0x40020040
 80047ac:	40020058 	.word	0x40020058
 80047b0:	40020070 	.word	0x40020070
 80047b4:	40020088 	.word	0x40020088
 80047b8:	400200a0 	.word	0x400200a0
 80047bc:	400200b8 	.word	0x400200b8
 80047c0:	40020410 	.word	0x40020410
 80047c4:	40020428 	.word	0x40020428
 80047c8:	40020440 	.word	0x40020440
 80047cc:	40020458 	.word	0x40020458
 80047d0:	40020470 	.word	0x40020470
 80047d4:	40020488 	.word	0x40020488
 80047d8:	400204a0 	.word	0x400204a0
 80047dc:	400204b8 	.word	0x400204b8
 80047e0:	58025408 	.word	0x58025408
 80047e4:	5802541c 	.word	0x5802541c
 80047e8:	58025430 	.word	0x58025430
 80047ec:	58025444 	.word	0x58025444
 80047f0:	58025458 	.word	0x58025458
 80047f4:	5802546c 	.word	0x5802546c
 80047f8:	58025480 	.word	0x58025480
 80047fc:	58025494 	.word	0x58025494

08004800 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b086      	sub	sp, #24
 8004804:	af00      	add	r7, sp, #0
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	607a      	str	r2, [r7, #4]
 800480c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800480e:	2300      	movs	r3, #0
 8004810:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d101      	bne.n	800481c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e226      	b.n	8004c6a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004822:	2b01      	cmp	r3, #1
 8004824:	d101      	bne.n	800482a <HAL_DMA_Start_IT+0x2a>
 8004826:	2302      	movs	r3, #2
 8004828:	e21f      	b.n	8004c6a <HAL_DMA_Start_IT+0x46a>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2201      	movs	r2, #1
 800482e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b01      	cmp	r3, #1
 800483c:	f040 820a 	bne.w	8004c54 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2202      	movs	r2, #2
 8004844:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2200      	movs	r2, #0
 800484c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a68      	ldr	r2, [pc, #416]	@ (80049f4 <HAL_DMA_Start_IT+0x1f4>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d04a      	beq.n	80048ee <HAL_DMA_Start_IT+0xee>
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a66      	ldr	r2, [pc, #408]	@ (80049f8 <HAL_DMA_Start_IT+0x1f8>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d045      	beq.n	80048ee <HAL_DMA_Start_IT+0xee>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a65      	ldr	r2, [pc, #404]	@ (80049fc <HAL_DMA_Start_IT+0x1fc>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d040      	beq.n	80048ee <HAL_DMA_Start_IT+0xee>
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a63      	ldr	r2, [pc, #396]	@ (8004a00 <HAL_DMA_Start_IT+0x200>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d03b      	beq.n	80048ee <HAL_DMA_Start_IT+0xee>
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a62      	ldr	r2, [pc, #392]	@ (8004a04 <HAL_DMA_Start_IT+0x204>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d036      	beq.n	80048ee <HAL_DMA_Start_IT+0xee>
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a60      	ldr	r2, [pc, #384]	@ (8004a08 <HAL_DMA_Start_IT+0x208>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d031      	beq.n	80048ee <HAL_DMA_Start_IT+0xee>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a5f      	ldr	r2, [pc, #380]	@ (8004a0c <HAL_DMA_Start_IT+0x20c>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d02c      	beq.n	80048ee <HAL_DMA_Start_IT+0xee>
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a5d      	ldr	r2, [pc, #372]	@ (8004a10 <HAL_DMA_Start_IT+0x210>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d027      	beq.n	80048ee <HAL_DMA_Start_IT+0xee>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a5c      	ldr	r2, [pc, #368]	@ (8004a14 <HAL_DMA_Start_IT+0x214>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d022      	beq.n	80048ee <HAL_DMA_Start_IT+0xee>
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a5a      	ldr	r2, [pc, #360]	@ (8004a18 <HAL_DMA_Start_IT+0x218>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d01d      	beq.n	80048ee <HAL_DMA_Start_IT+0xee>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a59      	ldr	r2, [pc, #356]	@ (8004a1c <HAL_DMA_Start_IT+0x21c>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d018      	beq.n	80048ee <HAL_DMA_Start_IT+0xee>
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a57      	ldr	r2, [pc, #348]	@ (8004a20 <HAL_DMA_Start_IT+0x220>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d013      	beq.n	80048ee <HAL_DMA_Start_IT+0xee>
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a56      	ldr	r2, [pc, #344]	@ (8004a24 <HAL_DMA_Start_IT+0x224>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d00e      	beq.n	80048ee <HAL_DMA_Start_IT+0xee>
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a54      	ldr	r2, [pc, #336]	@ (8004a28 <HAL_DMA_Start_IT+0x228>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d009      	beq.n	80048ee <HAL_DMA_Start_IT+0xee>
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a53      	ldr	r2, [pc, #332]	@ (8004a2c <HAL_DMA_Start_IT+0x22c>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d004      	beq.n	80048ee <HAL_DMA_Start_IT+0xee>
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a51      	ldr	r2, [pc, #324]	@ (8004a30 <HAL_DMA_Start_IT+0x230>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d108      	bne.n	8004900 <HAL_DMA_Start_IT+0x100>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f022 0201 	bic.w	r2, r2, #1
 80048fc:	601a      	str	r2, [r3, #0]
 80048fe:	e007      	b.n	8004910 <HAL_DMA_Start_IT+0x110>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f022 0201 	bic.w	r2, r2, #1
 800490e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	68b9      	ldr	r1, [r7, #8]
 8004916:	68f8      	ldr	r0, [r7, #12]
 8004918:	f001 fe6a 	bl	80065f0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a34      	ldr	r2, [pc, #208]	@ (80049f4 <HAL_DMA_Start_IT+0x1f4>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d04a      	beq.n	80049bc <HAL_DMA_Start_IT+0x1bc>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a33      	ldr	r2, [pc, #204]	@ (80049f8 <HAL_DMA_Start_IT+0x1f8>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d045      	beq.n	80049bc <HAL_DMA_Start_IT+0x1bc>
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a31      	ldr	r2, [pc, #196]	@ (80049fc <HAL_DMA_Start_IT+0x1fc>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d040      	beq.n	80049bc <HAL_DMA_Start_IT+0x1bc>
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a30      	ldr	r2, [pc, #192]	@ (8004a00 <HAL_DMA_Start_IT+0x200>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d03b      	beq.n	80049bc <HAL_DMA_Start_IT+0x1bc>
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a2e      	ldr	r2, [pc, #184]	@ (8004a04 <HAL_DMA_Start_IT+0x204>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d036      	beq.n	80049bc <HAL_DMA_Start_IT+0x1bc>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a2d      	ldr	r2, [pc, #180]	@ (8004a08 <HAL_DMA_Start_IT+0x208>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d031      	beq.n	80049bc <HAL_DMA_Start_IT+0x1bc>
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a2b      	ldr	r2, [pc, #172]	@ (8004a0c <HAL_DMA_Start_IT+0x20c>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d02c      	beq.n	80049bc <HAL_DMA_Start_IT+0x1bc>
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a2a      	ldr	r2, [pc, #168]	@ (8004a10 <HAL_DMA_Start_IT+0x210>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d027      	beq.n	80049bc <HAL_DMA_Start_IT+0x1bc>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a28      	ldr	r2, [pc, #160]	@ (8004a14 <HAL_DMA_Start_IT+0x214>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d022      	beq.n	80049bc <HAL_DMA_Start_IT+0x1bc>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a27      	ldr	r2, [pc, #156]	@ (8004a18 <HAL_DMA_Start_IT+0x218>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d01d      	beq.n	80049bc <HAL_DMA_Start_IT+0x1bc>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a25      	ldr	r2, [pc, #148]	@ (8004a1c <HAL_DMA_Start_IT+0x21c>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d018      	beq.n	80049bc <HAL_DMA_Start_IT+0x1bc>
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a24      	ldr	r2, [pc, #144]	@ (8004a20 <HAL_DMA_Start_IT+0x220>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d013      	beq.n	80049bc <HAL_DMA_Start_IT+0x1bc>
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a22      	ldr	r2, [pc, #136]	@ (8004a24 <HAL_DMA_Start_IT+0x224>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d00e      	beq.n	80049bc <HAL_DMA_Start_IT+0x1bc>
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a21      	ldr	r2, [pc, #132]	@ (8004a28 <HAL_DMA_Start_IT+0x228>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d009      	beq.n	80049bc <HAL_DMA_Start_IT+0x1bc>
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a1f      	ldr	r2, [pc, #124]	@ (8004a2c <HAL_DMA_Start_IT+0x22c>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d004      	beq.n	80049bc <HAL_DMA_Start_IT+0x1bc>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a1e      	ldr	r2, [pc, #120]	@ (8004a30 <HAL_DMA_Start_IT+0x230>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d101      	bne.n	80049c0 <HAL_DMA_Start_IT+0x1c0>
 80049bc:	2301      	movs	r3, #1
 80049be:	e000      	b.n	80049c2 <HAL_DMA_Start_IT+0x1c2>
 80049c0:	2300      	movs	r3, #0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d036      	beq.n	8004a34 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f023 021e 	bic.w	r2, r3, #30
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f042 0216 	orr.w	r2, r2, #22
 80049d8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d03e      	beq.n	8004a60 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f042 0208 	orr.w	r2, r2, #8
 80049f0:	601a      	str	r2, [r3, #0]
 80049f2:	e035      	b.n	8004a60 <HAL_DMA_Start_IT+0x260>
 80049f4:	40020010 	.word	0x40020010
 80049f8:	40020028 	.word	0x40020028
 80049fc:	40020040 	.word	0x40020040
 8004a00:	40020058 	.word	0x40020058
 8004a04:	40020070 	.word	0x40020070
 8004a08:	40020088 	.word	0x40020088
 8004a0c:	400200a0 	.word	0x400200a0
 8004a10:	400200b8 	.word	0x400200b8
 8004a14:	40020410 	.word	0x40020410
 8004a18:	40020428 	.word	0x40020428
 8004a1c:	40020440 	.word	0x40020440
 8004a20:	40020458 	.word	0x40020458
 8004a24:	40020470 	.word	0x40020470
 8004a28:	40020488 	.word	0x40020488
 8004a2c:	400204a0 	.word	0x400204a0
 8004a30:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f023 020e 	bic.w	r2, r3, #14
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f042 020a 	orr.w	r2, r2, #10
 8004a46:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d007      	beq.n	8004a60 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f042 0204 	orr.w	r2, r2, #4
 8004a5e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a83      	ldr	r2, [pc, #524]	@ (8004c74 <HAL_DMA_Start_IT+0x474>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d072      	beq.n	8004b50 <HAL_DMA_Start_IT+0x350>
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a82      	ldr	r2, [pc, #520]	@ (8004c78 <HAL_DMA_Start_IT+0x478>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d06d      	beq.n	8004b50 <HAL_DMA_Start_IT+0x350>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a80      	ldr	r2, [pc, #512]	@ (8004c7c <HAL_DMA_Start_IT+0x47c>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d068      	beq.n	8004b50 <HAL_DMA_Start_IT+0x350>
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a7f      	ldr	r2, [pc, #508]	@ (8004c80 <HAL_DMA_Start_IT+0x480>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d063      	beq.n	8004b50 <HAL_DMA_Start_IT+0x350>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a7d      	ldr	r2, [pc, #500]	@ (8004c84 <HAL_DMA_Start_IT+0x484>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d05e      	beq.n	8004b50 <HAL_DMA_Start_IT+0x350>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a7c      	ldr	r2, [pc, #496]	@ (8004c88 <HAL_DMA_Start_IT+0x488>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d059      	beq.n	8004b50 <HAL_DMA_Start_IT+0x350>
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a7a      	ldr	r2, [pc, #488]	@ (8004c8c <HAL_DMA_Start_IT+0x48c>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d054      	beq.n	8004b50 <HAL_DMA_Start_IT+0x350>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a79      	ldr	r2, [pc, #484]	@ (8004c90 <HAL_DMA_Start_IT+0x490>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d04f      	beq.n	8004b50 <HAL_DMA_Start_IT+0x350>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a77      	ldr	r2, [pc, #476]	@ (8004c94 <HAL_DMA_Start_IT+0x494>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d04a      	beq.n	8004b50 <HAL_DMA_Start_IT+0x350>
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a76      	ldr	r2, [pc, #472]	@ (8004c98 <HAL_DMA_Start_IT+0x498>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d045      	beq.n	8004b50 <HAL_DMA_Start_IT+0x350>
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a74      	ldr	r2, [pc, #464]	@ (8004c9c <HAL_DMA_Start_IT+0x49c>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d040      	beq.n	8004b50 <HAL_DMA_Start_IT+0x350>
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a73      	ldr	r2, [pc, #460]	@ (8004ca0 <HAL_DMA_Start_IT+0x4a0>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d03b      	beq.n	8004b50 <HAL_DMA_Start_IT+0x350>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a71      	ldr	r2, [pc, #452]	@ (8004ca4 <HAL_DMA_Start_IT+0x4a4>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d036      	beq.n	8004b50 <HAL_DMA_Start_IT+0x350>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a70      	ldr	r2, [pc, #448]	@ (8004ca8 <HAL_DMA_Start_IT+0x4a8>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d031      	beq.n	8004b50 <HAL_DMA_Start_IT+0x350>
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a6e      	ldr	r2, [pc, #440]	@ (8004cac <HAL_DMA_Start_IT+0x4ac>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d02c      	beq.n	8004b50 <HAL_DMA_Start_IT+0x350>
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a6d      	ldr	r2, [pc, #436]	@ (8004cb0 <HAL_DMA_Start_IT+0x4b0>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d027      	beq.n	8004b50 <HAL_DMA_Start_IT+0x350>
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a6b      	ldr	r2, [pc, #428]	@ (8004cb4 <HAL_DMA_Start_IT+0x4b4>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d022      	beq.n	8004b50 <HAL_DMA_Start_IT+0x350>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a6a      	ldr	r2, [pc, #424]	@ (8004cb8 <HAL_DMA_Start_IT+0x4b8>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d01d      	beq.n	8004b50 <HAL_DMA_Start_IT+0x350>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a68      	ldr	r2, [pc, #416]	@ (8004cbc <HAL_DMA_Start_IT+0x4bc>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d018      	beq.n	8004b50 <HAL_DMA_Start_IT+0x350>
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a67      	ldr	r2, [pc, #412]	@ (8004cc0 <HAL_DMA_Start_IT+0x4c0>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d013      	beq.n	8004b50 <HAL_DMA_Start_IT+0x350>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a65      	ldr	r2, [pc, #404]	@ (8004cc4 <HAL_DMA_Start_IT+0x4c4>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d00e      	beq.n	8004b50 <HAL_DMA_Start_IT+0x350>
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a64      	ldr	r2, [pc, #400]	@ (8004cc8 <HAL_DMA_Start_IT+0x4c8>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d009      	beq.n	8004b50 <HAL_DMA_Start_IT+0x350>
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a62      	ldr	r2, [pc, #392]	@ (8004ccc <HAL_DMA_Start_IT+0x4cc>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d004      	beq.n	8004b50 <HAL_DMA_Start_IT+0x350>
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a61      	ldr	r2, [pc, #388]	@ (8004cd0 <HAL_DMA_Start_IT+0x4d0>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d101      	bne.n	8004b54 <HAL_DMA_Start_IT+0x354>
 8004b50:	2301      	movs	r3, #1
 8004b52:	e000      	b.n	8004b56 <HAL_DMA_Start_IT+0x356>
 8004b54:	2300      	movs	r3, #0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d01a      	beq.n	8004b90 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d007      	beq.n	8004b78 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b72:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b76:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d007      	beq.n	8004b90 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b8a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b8e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a37      	ldr	r2, [pc, #220]	@ (8004c74 <HAL_DMA_Start_IT+0x474>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d04a      	beq.n	8004c30 <HAL_DMA_Start_IT+0x430>
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a36      	ldr	r2, [pc, #216]	@ (8004c78 <HAL_DMA_Start_IT+0x478>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d045      	beq.n	8004c30 <HAL_DMA_Start_IT+0x430>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a34      	ldr	r2, [pc, #208]	@ (8004c7c <HAL_DMA_Start_IT+0x47c>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d040      	beq.n	8004c30 <HAL_DMA_Start_IT+0x430>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a33      	ldr	r2, [pc, #204]	@ (8004c80 <HAL_DMA_Start_IT+0x480>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d03b      	beq.n	8004c30 <HAL_DMA_Start_IT+0x430>
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a31      	ldr	r2, [pc, #196]	@ (8004c84 <HAL_DMA_Start_IT+0x484>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d036      	beq.n	8004c30 <HAL_DMA_Start_IT+0x430>
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a30      	ldr	r2, [pc, #192]	@ (8004c88 <HAL_DMA_Start_IT+0x488>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d031      	beq.n	8004c30 <HAL_DMA_Start_IT+0x430>
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a2e      	ldr	r2, [pc, #184]	@ (8004c8c <HAL_DMA_Start_IT+0x48c>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d02c      	beq.n	8004c30 <HAL_DMA_Start_IT+0x430>
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a2d      	ldr	r2, [pc, #180]	@ (8004c90 <HAL_DMA_Start_IT+0x490>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d027      	beq.n	8004c30 <HAL_DMA_Start_IT+0x430>
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a2b      	ldr	r2, [pc, #172]	@ (8004c94 <HAL_DMA_Start_IT+0x494>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d022      	beq.n	8004c30 <HAL_DMA_Start_IT+0x430>
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a2a      	ldr	r2, [pc, #168]	@ (8004c98 <HAL_DMA_Start_IT+0x498>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d01d      	beq.n	8004c30 <HAL_DMA_Start_IT+0x430>
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a28      	ldr	r2, [pc, #160]	@ (8004c9c <HAL_DMA_Start_IT+0x49c>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d018      	beq.n	8004c30 <HAL_DMA_Start_IT+0x430>
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a27      	ldr	r2, [pc, #156]	@ (8004ca0 <HAL_DMA_Start_IT+0x4a0>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d013      	beq.n	8004c30 <HAL_DMA_Start_IT+0x430>
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a25      	ldr	r2, [pc, #148]	@ (8004ca4 <HAL_DMA_Start_IT+0x4a4>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d00e      	beq.n	8004c30 <HAL_DMA_Start_IT+0x430>
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a24      	ldr	r2, [pc, #144]	@ (8004ca8 <HAL_DMA_Start_IT+0x4a8>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d009      	beq.n	8004c30 <HAL_DMA_Start_IT+0x430>
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a22      	ldr	r2, [pc, #136]	@ (8004cac <HAL_DMA_Start_IT+0x4ac>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d004      	beq.n	8004c30 <HAL_DMA_Start_IT+0x430>
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a21      	ldr	r2, [pc, #132]	@ (8004cb0 <HAL_DMA_Start_IT+0x4b0>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d108      	bne.n	8004c42 <HAL_DMA_Start_IT+0x442>
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f042 0201 	orr.w	r2, r2, #1
 8004c3e:	601a      	str	r2, [r3, #0]
 8004c40:	e012      	b.n	8004c68 <HAL_DMA_Start_IT+0x468>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f042 0201 	orr.w	r2, r2, #1
 8004c50:	601a      	str	r2, [r3, #0]
 8004c52:	e009      	b.n	8004c68 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004c5a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004c68:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3718      	adds	r7, #24
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	40020010 	.word	0x40020010
 8004c78:	40020028 	.word	0x40020028
 8004c7c:	40020040 	.word	0x40020040
 8004c80:	40020058 	.word	0x40020058
 8004c84:	40020070 	.word	0x40020070
 8004c88:	40020088 	.word	0x40020088
 8004c8c:	400200a0 	.word	0x400200a0
 8004c90:	400200b8 	.word	0x400200b8
 8004c94:	40020410 	.word	0x40020410
 8004c98:	40020428 	.word	0x40020428
 8004c9c:	40020440 	.word	0x40020440
 8004ca0:	40020458 	.word	0x40020458
 8004ca4:	40020470 	.word	0x40020470
 8004ca8:	40020488 	.word	0x40020488
 8004cac:	400204a0 	.word	0x400204a0
 8004cb0:	400204b8 	.word	0x400204b8
 8004cb4:	58025408 	.word	0x58025408
 8004cb8:	5802541c 	.word	0x5802541c
 8004cbc:	58025430 	.word	0x58025430
 8004cc0:	58025444 	.word	0x58025444
 8004cc4:	58025458 	.word	0x58025458
 8004cc8:	5802546c 	.word	0x5802546c
 8004ccc:	58025480 	.word	0x58025480
 8004cd0:	58025494 	.word	0x58025494

08004cd4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b086      	sub	sp, #24
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004cdc:	f7fd fb90 	bl	8002400 <HAL_GetTick>
 8004ce0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d101      	bne.n	8004cec <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e2dc      	b.n	80052a6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	d008      	beq.n	8004d0a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2280      	movs	r2, #128	@ 0x80
 8004cfc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e2cd      	b.n	80052a6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a76      	ldr	r2, [pc, #472]	@ (8004ee8 <HAL_DMA_Abort+0x214>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d04a      	beq.n	8004daa <HAL_DMA_Abort+0xd6>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a74      	ldr	r2, [pc, #464]	@ (8004eec <HAL_DMA_Abort+0x218>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d045      	beq.n	8004daa <HAL_DMA_Abort+0xd6>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a73      	ldr	r2, [pc, #460]	@ (8004ef0 <HAL_DMA_Abort+0x21c>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d040      	beq.n	8004daa <HAL_DMA_Abort+0xd6>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a71      	ldr	r2, [pc, #452]	@ (8004ef4 <HAL_DMA_Abort+0x220>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d03b      	beq.n	8004daa <HAL_DMA_Abort+0xd6>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a70      	ldr	r2, [pc, #448]	@ (8004ef8 <HAL_DMA_Abort+0x224>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d036      	beq.n	8004daa <HAL_DMA_Abort+0xd6>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a6e      	ldr	r2, [pc, #440]	@ (8004efc <HAL_DMA_Abort+0x228>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d031      	beq.n	8004daa <HAL_DMA_Abort+0xd6>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a6d      	ldr	r2, [pc, #436]	@ (8004f00 <HAL_DMA_Abort+0x22c>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d02c      	beq.n	8004daa <HAL_DMA_Abort+0xd6>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a6b      	ldr	r2, [pc, #428]	@ (8004f04 <HAL_DMA_Abort+0x230>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d027      	beq.n	8004daa <HAL_DMA_Abort+0xd6>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a6a      	ldr	r2, [pc, #424]	@ (8004f08 <HAL_DMA_Abort+0x234>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d022      	beq.n	8004daa <HAL_DMA_Abort+0xd6>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a68      	ldr	r2, [pc, #416]	@ (8004f0c <HAL_DMA_Abort+0x238>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d01d      	beq.n	8004daa <HAL_DMA_Abort+0xd6>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a67      	ldr	r2, [pc, #412]	@ (8004f10 <HAL_DMA_Abort+0x23c>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d018      	beq.n	8004daa <HAL_DMA_Abort+0xd6>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a65      	ldr	r2, [pc, #404]	@ (8004f14 <HAL_DMA_Abort+0x240>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d013      	beq.n	8004daa <HAL_DMA_Abort+0xd6>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a64      	ldr	r2, [pc, #400]	@ (8004f18 <HAL_DMA_Abort+0x244>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d00e      	beq.n	8004daa <HAL_DMA_Abort+0xd6>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a62      	ldr	r2, [pc, #392]	@ (8004f1c <HAL_DMA_Abort+0x248>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d009      	beq.n	8004daa <HAL_DMA_Abort+0xd6>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a61      	ldr	r2, [pc, #388]	@ (8004f20 <HAL_DMA_Abort+0x24c>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d004      	beq.n	8004daa <HAL_DMA_Abort+0xd6>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a5f      	ldr	r2, [pc, #380]	@ (8004f24 <HAL_DMA_Abort+0x250>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d101      	bne.n	8004dae <HAL_DMA_Abort+0xda>
 8004daa:	2301      	movs	r3, #1
 8004dac:	e000      	b.n	8004db0 <HAL_DMA_Abort+0xdc>
 8004dae:	2300      	movs	r3, #0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d013      	beq.n	8004ddc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f022 021e 	bic.w	r2, r2, #30
 8004dc2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	695a      	ldr	r2, [r3, #20]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004dd2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	617b      	str	r3, [r7, #20]
 8004dda:	e00a      	b.n	8004df2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f022 020e 	bic.w	r2, r2, #14
 8004dea:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a3c      	ldr	r2, [pc, #240]	@ (8004ee8 <HAL_DMA_Abort+0x214>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d072      	beq.n	8004ee2 <HAL_DMA_Abort+0x20e>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a3a      	ldr	r2, [pc, #232]	@ (8004eec <HAL_DMA_Abort+0x218>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d06d      	beq.n	8004ee2 <HAL_DMA_Abort+0x20e>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a39      	ldr	r2, [pc, #228]	@ (8004ef0 <HAL_DMA_Abort+0x21c>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d068      	beq.n	8004ee2 <HAL_DMA_Abort+0x20e>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a37      	ldr	r2, [pc, #220]	@ (8004ef4 <HAL_DMA_Abort+0x220>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d063      	beq.n	8004ee2 <HAL_DMA_Abort+0x20e>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a36      	ldr	r2, [pc, #216]	@ (8004ef8 <HAL_DMA_Abort+0x224>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d05e      	beq.n	8004ee2 <HAL_DMA_Abort+0x20e>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a34      	ldr	r2, [pc, #208]	@ (8004efc <HAL_DMA_Abort+0x228>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d059      	beq.n	8004ee2 <HAL_DMA_Abort+0x20e>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a33      	ldr	r2, [pc, #204]	@ (8004f00 <HAL_DMA_Abort+0x22c>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d054      	beq.n	8004ee2 <HAL_DMA_Abort+0x20e>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a31      	ldr	r2, [pc, #196]	@ (8004f04 <HAL_DMA_Abort+0x230>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d04f      	beq.n	8004ee2 <HAL_DMA_Abort+0x20e>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a30      	ldr	r2, [pc, #192]	@ (8004f08 <HAL_DMA_Abort+0x234>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d04a      	beq.n	8004ee2 <HAL_DMA_Abort+0x20e>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a2e      	ldr	r2, [pc, #184]	@ (8004f0c <HAL_DMA_Abort+0x238>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d045      	beq.n	8004ee2 <HAL_DMA_Abort+0x20e>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a2d      	ldr	r2, [pc, #180]	@ (8004f10 <HAL_DMA_Abort+0x23c>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d040      	beq.n	8004ee2 <HAL_DMA_Abort+0x20e>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a2b      	ldr	r2, [pc, #172]	@ (8004f14 <HAL_DMA_Abort+0x240>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d03b      	beq.n	8004ee2 <HAL_DMA_Abort+0x20e>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a2a      	ldr	r2, [pc, #168]	@ (8004f18 <HAL_DMA_Abort+0x244>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d036      	beq.n	8004ee2 <HAL_DMA_Abort+0x20e>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a28      	ldr	r2, [pc, #160]	@ (8004f1c <HAL_DMA_Abort+0x248>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d031      	beq.n	8004ee2 <HAL_DMA_Abort+0x20e>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a27      	ldr	r2, [pc, #156]	@ (8004f20 <HAL_DMA_Abort+0x24c>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d02c      	beq.n	8004ee2 <HAL_DMA_Abort+0x20e>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a25      	ldr	r2, [pc, #148]	@ (8004f24 <HAL_DMA_Abort+0x250>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d027      	beq.n	8004ee2 <HAL_DMA_Abort+0x20e>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a24      	ldr	r2, [pc, #144]	@ (8004f28 <HAL_DMA_Abort+0x254>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d022      	beq.n	8004ee2 <HAL_DMA_Abort+0x20e>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a22      	ldr	r2, [pc, #136]	@ (8004f2c <HAL_DMA_Abort+0x258>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d01d      	beq.n	8004ee2 <HAL_DMA_Abort+0x20e>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a21      	ldr	r2, [pc, #132]	@ (8004f30 <HAL_DMA_Abort+0x25c>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d018      	beq.n	8004ee2 <HAL_DMA_Abort+0x20e>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a1f      	ldr	r2, [pc, #124]	@ (8004f34 <HAL_DMA_Abort+0x260>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d013      	beq.n	8004ee2 <HAL_DMA_Abort+0x20e>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a1e      	ldr	r2, [pc, #120]	@ (8004f38 <HAL_DMA_Abort+0x264>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d00e      	beq.n	8004ee2 <HAL_DMA_Abort+0x20e>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a1c      	ldr	r2, [pc, #112]	@ (8004f3c <HAL_DMA_Abort+0x268>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d009      	beq.n	8004ee2 <HAL_DMA_Abort+0x20e>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a1b      	ldr	r2, [pc, #108]	@ (8004f40 <HAL_DMA_Abort+0x26c>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d004      	beq.n	8004ee2 <HAL_DMA_Abort+0x20e>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a19      	ldr	r2, [pc, #100]	@ (8004f44 <HAL_DMA_Abort+0x270>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d132      	bne.n	8004f48 <HAL_DMA_Abort+0x274>
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e031      	b.n	8004f4a <HAL_DMA_Abort+0x276>
 8004ee6:	bf00      	nop
 8004ee8:	40020010 	.word	0x40020010
 8004eec:	40020028 	.word	0x40020028
 8004ef0:	40020040 	.word	0x40020040
 8004ef4:	40020058 	.word	0x40020058
 8004ef8:	40020070 	.word	0x40020070
 8004efc:	40020088 	.word	0x40020088
 8004f00:	400200a0 	.word	0x400200a0
 8004f04:	400200b8 	.word	0x400200b8
 8004f08:	40020410 	.word	0x40020410
 8004f0c:	40020428 	.word	0x40020428
 8004f10:	40020440 	.word	0x40020440
 8004f14:	40020458 	.word	0x40020458
 8004f18:	40020470 	.word	0x40020470
 8004f1c:	40020488 	.word	0x40020488
 8004f20:	400204a0 	.word	0x400204a0
 8004f24:	400204b8 	.word	0x400204b8
 8004f28:	58025408 	.word	0x58025408
 8004f2c:	5802541c 	.word	0x5802541c
 8004f30:	58025430 	.word	0x58025430
 8004f34:	58025444 	.word	0x58025444
 8004f38:	58025458 	.word	0x58025458
 8004f3c:	5802546c 	.word	0x5802546c
 8004f40:	58025480 	.word	0x58025480
 8004f44:	58025494 	.word	0x58025494
 8004f48:	2300      	movs	r3, #0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d007      	beq.n	8004f5e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f58:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004f5c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a6d      	ldr	r2, [pc, #436]	@ (8005118 <HAL_DMA_Abort+0x444>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d04a      	beq.n	8004ffe <HAL_DMA_Abort+0x32a>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a6b      	ldr	r2, [pc, #428]	@ (800511c <HAL_DMA_Abort+0x448>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d045      	beq.n	8004ffe <HAL_DMA_Abort+0x32a>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a6a      	ldr	r2, [pc, #424]	@ (8005120 <HAL_DMA_Abort+0x44c>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d040      	beq.n	8004ffe <HAL_DMA_Abort+0x32a>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a68      	ldr	r2, [pc, #416]	@ (8005124 <HAL_DMA_Abort+0x450>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d03b      	beq.n	8004ffe <HAL_DMA_Abort+0x32a>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a67      	ldr	r2, [pc, #412]	@ (8005128 <HAL_DMA_Abort+0x454>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d036      	beq.n	8004ffe <HAL_DMA_Abort+0x32a>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a65      	ldr	r2, [pc, #404]	@ (800512c <HAL_DMA_Abort+0x458>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d031      	beq.n	8004ffe <HAL_DMA_Abort+0x32a>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a64      	ldr	r2, [pc, #400]	@ (8005130 <HAL_DMA_Abort+0x45c>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d02c      	beq.n	8004ffe <HAL_DMA_Abort+0x32a>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a62      	ldr	r2, [pc, #392]	@ (8005134 <HAL_DMA_Abort+0x460>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d027      	beq.n	8004ffe <HAL_DMA_Abort+0x32a>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a61      	ldr	r2, [pc, #388]	@ (8005138 <HAL_DMA_Abort+0x464>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d022      	beq.n	8004ffe <HAL_DMA_Abort+0x32a>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a5f      	ldr	r2, [pc, #380]	@ (800513c <HAL_DMA_Abort+0x468>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d01d      	beq.n	8004ffe <HAL_DMA_Abort+0x32a>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a5e      	ldr	r2, [pc, #376]	@ (8005140 <HAL_DMA_Abort+0x46c>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d018      	beq.n	8004ffe <HAL_DMA_Abort+0x32a>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a5c      	ldr	r2, [pc, #368]	@ (8005144 <HAL_DMA_Abort+0x470>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d013      	beq.n	8004ffe <HAL_DMA_Abort+0x32a>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a5b      	ldr	r2, [pc, #364]	@ (8005148 <HAL_DMA_Abort+0x474>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d00e      	beq.n	8004ffe <HAL_DMA_Abort+0x32a>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a59      	ldr	r2, [pc, #356]	@ (800514c <HAL_DMA_Abort+0x478>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d009      	beq.n	8004ffe <HAL_DMA_Abort+0x32a>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a58      	ldr	r2, [pc, #352]	@ (8005150 <HAL_DMA_Abort+0x47c>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d004      	beq.n	8004ffe <HAL_DMA_Abort+0x32a>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a56      	ldr	r2, [pc, #344]	@ (8005154 <HAL_DMA_Abort+0x480>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d108      	bne.n	8005010 <HAL_DMA_Abort+0x33c>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f022 0201 	bic.w	r2, r2, #1
 800500c:	601a      	str	r2, [r3, #0]
 800500e:	e007      	b.n	8005020 <HAL_DMA_Abort+0x34c>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f022 0201 	bic.w	r2, r2, #1
 800501e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005020:	e013      	b.n	800504a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005022:	f7fd f9ed 	bl	8002400 <HAL_GetTick>
 8005026:	4602      	mov	r2, r0
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	2b05      	cmp	r3, #5
 800502e:	d90c      	bls.n	800504a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2220      	movs	r2, #32
 8005034:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2203      	movs	r2, #3
 800503a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e12d      	b.n	80052a6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0301 	and.w	r3, r3, #1
 8005052:	2b00      	cmp	r3, #0
 8005054:	d1e5      	bne.n	8005022 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a2f      	ldr	r2, [pc, #188]	@ (8005118 <HAL_DMA_Abort+0x444>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d04a      	beq.n	80050f6 <HAL_DMA_Abort+0x422>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a2d      	ldr	r2, [pc, #180]	@ (800511c <HAL_DMA_Abort+0x448>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d045      	beq.n	80050f6 <HAL_DMA_Abort+0x422>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a2c      	ldr	r2, [pc, #176]	@ (8005120 <HAL_DMA_Abort+0x44c>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d040      	beq.n	80050f6 <HAL_DMA_Abort+0x422>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a2a      	ldr	r2, [pc, #168]	@ (8005124 <HAL_DMA_Abort+0x450>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d03b      	beq.n	80050f6 <HAL_DMA_Abort+0x422>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a29      	ldr	r2, [pc, #164]	@ (8005128 <HAL_DMA_Abort+0x454>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d036      	beq.n	80050f6 <HAL_DMA_Abort+0x422>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a27      	ldr	r2, [pc, #156]	@ (800512c <HAL_DMA_Abort+0x458>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d031      	beq.n	80050f6 <HAL_DMA_Abort+0x422>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a26      	ldr	r2, [pc, #152]	@ (8005130 <HAL_DMA_Abort+0x45c>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d02c      	beq.n	80050f6 <HAL_DMA_Abort+0x422>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a24      	ldr	r2, [pc, #144]	@ (8005134 <HAL_DMA_Abort+0x460>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d027      	beq.n	80050f6 <HAL_DMA_Abort+0x422>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a23      	ldr	r2, [pc, #140]	@ (8005138 <HAL_DMA_Abort+0x464>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d022      	beq.n	80050f6 <HAL_DMA_Abort+0x422>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a21      	ldr	r2, [pc, #132]	@ (800513c <HAL_DMA_Abort+0x468>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d01d      	beq.n	80050f6 <HAL_DMA_Abort+0x422>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a20      	ldr	r2, [pc, #128]	@ (8005140 <HAL_DMA_Abort+0x46c>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d018      	beq.n	80050f6 <HAL_DMA_Abort+0x422>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a1e      	ldr	r2, [pc, #120]	@ (8005144 <HAL_DMA_Abort+0x470>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d013      	beq.n	80050f6 <HAL_DMA_Abort+0x422>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a1d      	ldr	r2, [pc, #116]	@ (8005148 <HAL_DMA_Abort+0x474>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d00e      	beq.n	80050f6 <HAL_DMA_Abort+0x422>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a1b      	ldr	r2, [pc, #108]	@ (800514c <HAL_DMA_Abort+0x478>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d009      	beq.n	80050f6 <HAL_DMA_Abort+0x422>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a1a      	ldr	r2, [pc, #104]	@ (8005150 <HAL_DMA_Abort+0x47c>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d004      	beq.n	80050f6 <HAL_DMA_Abort+0x422>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a18      	ldr	r2, [pc, #96]	@ (8005154 <HAL_DMA_Abort+0x480>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d101      	bne.n	80050fa <HAL_DMA_Abort+0x426>
 80050f6:	2301      	movs	r3, #1
 80050f8:	e000      	b.n	80050fc <HAL_DMA_Abort+0x428>
 80050fa:	2300      	movs	r3, #0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d02b      	beq.n	8005158 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005104:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800510a:	f003 031f 	and.w	r3, r3, #31
 800510e:	223f      	movs	r2, #63	@ 0x3f
 8005110:	409a      	lsls	r2, r3
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	609a      	str	r2, [r3, #8]
 8005116:	e02a      	b.n	800516e <HAL_DMA_Abort+0x49a>
 8005118:	40020010 	.word	0x40020010
 800511c:	40020028 	.word	0x40020028
 8005120:	40020040 	.word	0x40020040
 8005124:	40020058 	.word	0x40020058
 8005128:	40020070 	.word	0x40020070
 800512c:	40020088 	.word	0x40020088
 8005130:	400200a0 	.word	0x400200a0
 8005134:	400200b8 	.word	0x400200b8
 8005138:	40020410 	.word	0x40020410
 800513c:	40020428 	.word	0x40020428
 8005140:	40020440 	.word	0x40020440
 8005144:	40020458 	.word	0x40020458
 8005148:	40020470 	.word	0x40020470
 800514c:	40020488 	.word	0x40020488
 8005150:	400204a0 	.word	0x400204a0
 8005154:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800515c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005162:	f003 031f 	and.w	r3, r3, #31
 8005166:	2201      	movs	r2, #1
 8005168:	409a      	lsls	r2, r3
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a4f      	ldr	r2, [pc, #316]	@ (80052b0 <HAL_DMA_Abort+0x5dc>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d072      	beq.n	800525e <HAL_DMA_Abort+0x58a>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a4d      	ldr	r2, [pc, #308]	@ (80052b4 <HAL_DMA_Abort+0x5e0>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d06d      	beq.n	800525e <HAL_DMA_Abort+0x58a>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a4c      	ldr	r2, [pc, #304]	@ (80052b8 <HAL_DMA_Abort+0x5e4>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d068      	beq.n	800525e <HAL_DMA_Abort+0x58a>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a4a      	ldr	r2, [pc, #296]	@ (80052bc <HAL_DMA_Abort+0x5e8>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d063      	beq.n	800525e <HAL_DMA_Abort+0x58a>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a49      	ldr	r2, [pc, #292]	@ (80052c0 <HAL_DMA_Abort+0x5ec>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d05e      	beq.n	800525e <HAL_DMA_Abort+0x58a>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a47      	ldr	r2, [pc, #284]	@ (80052c4 <HAL_DMA_Abort+0x5f0>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d059      	beq.n	800525e <HAL_DMA_Abort+0x58a>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a46      	ldr	r2, [pc, #280]	@ (80052c8 <HAL_DMA_Abort+0x5f4>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d054      	beq.n	800525e <HAL_DMA_Abort+0x58a>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a44      	ldr	r2, [pc, #272]	@ (80052cc <HAL_DMA_Abort+0x5f8>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d04f      	beq.n	800525e <HAL_DMA_Abort+0x58a>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a43      	ldr	r2, [pc, #268]	@ (80052d0 <HAL_DMA_Abort+0x5fc>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d04a      	beq.n	800525e <HAL_DMA_Abort+0x58a>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a41      	ldr	r2, [pc, #260]	@ (80052d4 <HAL_DMA_Abort+0x600>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d045      	beq.n	800525e <HAL_DMA_Abort+0x58a>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a40      	ldr	r2, [pc, #256]	@ (80052d8 <HAL_DMA_Abort+0x604>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d040      	beq.n	800525e <HAL_DMA_Abort+0x58a>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a3e      	ldr	r2, [pc, #248]	@ (80052dc <HAL_DMA_Abort+0x608>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d03b      	beq.n	800525e <HAL_DMA_Abort+0x58a>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a3d      	ldr	r2, [pc, #244]	@ (80052e0 <HAL_DMA_Abort+0x60c>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d036      	beq.n	800525e <HAL_DMA_Abort+0x58a>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a3b      	ldr	r2, [pc, #236]	@ (80052e4 <HAL_DMA_Abort+0x610>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d031      	beq.n	800525e <HAL_DMA_Abort+0x58a>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a3a      	ldr	r2, [pc, #232]	@ (80052e8 <HAL_DMA_Abort+0x614>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d02c      	beq.n	800525e <HAL_DMA_Abort+0x58a>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a38      	ldr	r2, [pc, #224]	@ (80052ec <HAL_DMA_Abort+0x618>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d027      	beq.n	800525e <HAL_DMA_Abort+0x58a>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a37      	ldr	r2, [pc, #220]	@ (80052f0 <HAL_DMA_Abort+0x61c>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d022      	beq.n	800525e <HAL_DMA_Abort+0x58a>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a35      	ldr	r2, [pc, #212]	@ (80052f4 <HAL_DMA_Abort+0x620>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d01d      	beq.n	800525e <HAL_DMA_Abort+0x58a>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a34      	ldr	r2, [pc, #208]	@ (80052f8 <HAL_DMA_Abort+0x624>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d018      	beq.n	800525e <HAL_DMA_Abort+0x58a>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a32      	ldr	r2, [pc, #200]	@ (80052fc <HAL_DMA_Abort+0x628>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d013      	beq.n	800525e <HAL_DMA_Abort+0x58a>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a31      	ldr	r2, [pc, #196]	@ (8005300 <HAL_DMA_Abort+0x62c>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d00e      	beq.n	800525e <HAL_DMA_Abort+0x58a>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a2f      	ldr	r2, [pc, #188]	@ (8005304 <HAL_DMA_Abort+0x630>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d009      	beq.n	800525e <HAL_DMA_Abort+0x58a>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a2e      	ldr	r2, [pc, #184]	@ (8005308 <HAL_DMA_Abort+0x634>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d004      	beq.n	800525e <HAL_DMA_Abort+0x58a>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a2c      	ldr	r2, [pc, #176]	@ (800530c <HAL_DMA_Abort+0x638>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d101      	bne.n	8005262 <HAL_DMA_Abort+0x58e>
 800525e:	2301      	movs	r3, #1
 8005260:	e000      	b.n	8005264 <HAL_DMA_Abort+0x590>
 8005262:	2300      	movs	r3, #0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d015      	beq.n	8005294 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005270:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005276:	2b00      	cmp	r3, #0
 8005278:	d00c      	beq.n	8005294 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005284:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005288:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005292:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3718      	adds	r7, #24
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	40020010 	.word	0x40020010
 80052b4:	40020028 	.word	0x40020028
 80052b8:	40020040 	.word	0x40020040
 80052bc:	40020058 	.word	0x40020058
 80052c0:	40020070 	.word	0x40020070
 80052c4:	40020088 	.word	0x40020088
 80052c8:	400200a0 	.word	0x400200a0
 80052cc:	400200b8 	.word	0x400200b8
 80052d0:	40020410 	.word	0x40020410
 80052d4:	40020428 	.word	0x40020428
 80052d8:	40020440 	.word	0x40020440
 80052dc:	40020458 	.word	0x40020458
 80052e0:	40020470 	.word	0x40020470
 80052e4:	40020488 	.word	0x40020488
 80052e8:	400204a0 	.word	0x400204a0
 80052ec:	400204b8 	.word	0x400204b8
 80052f0:	58025408 	.word	0x58025408
 80052f4:	5802541c 	.word	0x5802541c
 80052f8:	58025430 	.word	0x58025430
 80052fc:	58025444 	.word	0x58025444
 8005300:	58025458 	.word	0x58025458
 8005304:	5802546c 	.word	0x5802546c
 8005308:	58025480 	.word	0x58025480
 800530c:	58025494 	.word	0x58025494

08005310 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d101      	bne.n	8005322 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e237      	b.n	8005792 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005328:	b2db      	uxtb	r3, r3
 800532a:	2b02      	cmp	r3, #2
 800532c:	d004      	beq.n	8005338 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2280      	movs	r2, #128	@ 0x80
 8005332:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	e22c      	b.n	8005792 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a5c      	ldr	r2, [pc, #368]	@ (80054b0 <HAL_DMA_Abort_IT+0x1a0>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d04a      	beq.n	80053d8 <HAL_DMA_Abort_IT+0xc8>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a5b      	ldr	r2, [pc, #364]	@ (80054b4 <HAL_DMA_Abort_IT+0x1a4>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d045      	beq.n	80053d8 <HAL_DMA_Abort_IT+0xc8>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a59      	ldr	r2, [pc, #356]	@ (80054b8 <HAL_DMA_Abort_IT+0x1a8>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d040      	beq.n	80053d8 <HAL_DMA_Abort_IT+0xc8>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a58      	ldr	r2, [pc, #352]	@ (80054bc <HAL_DMA_Abort_IT+0x1ac>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d03b      	beq.n	80053d8 <HAL_DMA_Abort_IT+0xc8>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a56      	ldr	r2, [pc, #344]	@ (80054c0 <HAL_DMA_Abort_IT+0x1b0>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d036      	beq.n	80053d8 <HAL_DMA_Abort_IT+0xc8>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a55      	ldr	r2, [pc, #340]	@ (80054c4 <HAL_DMA_Abort_IT+0x1b4>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d031      	beq.n	80053d8 <HAL_DMA_Abort_IT+0xc8>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a53      	ldr	r2, [pc, #332]	@ (80054c8 <HAL_DMA_Abort_IT+0x1b8>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d02c      	beq.n	80053d8 <HAL_DMA_Abort_IT+0xc8>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a52      	ldr	r2, [pc, #328]	@ (80054cc <HAL_DMA_Abort_IT+0x1bc>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d027      	beq.n	80053d8 <HAL_DMA_Abort_IT+0xc8>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a50      	ldr	r2, [pc, #320]	@ (80054d0 <HAL_DMA_Abort_IT+0x1c0>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d022      	beq.n	80053d8 <HAL_DMA_Abort_IT+0xc8>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a4f      	ldr	r2, [pc, #316]	@ (80054d4 <HAL_DMA_Abort_IT+0x1c4>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d01d      	beq.n	80053d8 <HAL_DMA_Abort_IT+0xc8>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a4d      	ldr	r2, [pc, #308]	@ (80054d8 <HAL_DMA_Abort_IT+0x1c8>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d018      	beq.n	80053d8 <HAL_DMA_Abort_IT+0xc8>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a4c      	ldr	r2, [pc, #304]	@ (80054dc <HAL_DMA_Abort_IT+0x1cc>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d013      	beq.n	80053d8 <HAL_DMA_Abort_IT+0xc8>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a4a      	ldr	r2, [pc, #296]	@ (80054e0 <HAL_DMA_Abort_IT+0x1d0>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d00e      	beq.n	80053d8 <HAL_DMA_Abort_IT+0xc8>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a49      	ldr	r2, [pc, #292]	@ (80054e4 <HAL_DMA_Abort_IT+0x1d4>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d009      	beq.n	80053d8 <HAL_DMA_Abort_IT+0xc8>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a47      	ldr	r2, [pc, #284]	@ (80054e8 <HAL_DMA_Abort_IT+0x1d8>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d004      	beq.n	80053d8 <HAL_DMA_Abort_IT+0xc8>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a46      	ldr	r2, [pc, #280]	@ (80054ec <HAL_DMA_Abort_IT+0x1dc>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d101      	bne.n	80053dc <HAL_DMA_Abort_IT+0xcc>
 80053d8:	2301      	movs	r3, #1
 80053da:	e000      	b.n	80053de <HAL_DMA_Abort_IT+0xce>
 80053dc:	2300      	movs	r3, #0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	f000 8086 	beq.w	80054f0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2204      	movs	r2, #4
 80053e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a2f      	ldr	r2, [pc, #188]	@ (80054b0 <HAL_DMA_Abort_IT+0x1a0>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d04a      	beq.n	800548c <HAL_DMA_Abort_IT+0x17c>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a2e      	ldr	r2, [pc, #184]	@ (80054b4 <HAL_DMA_Abort_IT+0x1a4>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d045      	beq.n	800548c <HAL_DMA_Abort_IT+0x17c>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a2c      	ldr	r2, [pc, #176]	@ (80054b8 <HAL_DMA_Abort_IT+0x1a8>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d040      	beq.n	800548c <HAL_DMA_Abort_IT+0x17c>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a2b      	ldr	r2, [pc, #172]	@ (80054bc <HAL_DMA_Abort_IT+0x1ac>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d03b      	beq.n	800548c <HAL_DMA_Abort_IT+0x17c>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a29      	ldr	r2, [pc, #164]	@ (80054c0 <HAL_DMA_Abort_IT+0x1b0>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d036      	beq.n	800548c <HAL_DMA_Abort_IT+0x17c>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a28      	ldr	r2, [pc, #160]	@ (80054c4 <HAL_DMA_Abort_IT+0x1b4>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d031      	beq.n	800548c <HAL_DMA_Abort_IT+0x17c>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a26      	ldr	r2, [pc, #152]	@ (80054c8 <HAL_DMA_Abort_IT+0x1b8>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d02c      	beq.n	800548c <HAL_DMA_Abort_IT+0x17c>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a25      	ldr	r2, [pc, #148]	@ (80054cc <HAL_DMA_Abort_IT+0x1bc>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d027      	beq.n	800548c <HAL_DMA_Abort_IT+0x17c>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a23      	ldr	r2, [pc, #140]	@ (80054d0 <HAL_DMA_Abort_IT+0x1c0>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d022      	beq.n	800548c <HAL_DMA_Abort_IT+0x17c>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a22      	ldr	r2, [pc, #136]	@ (80054d4 <HAL_DMA_Abort_IT+0x1c4>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d01d      	beq.n	800548c <HAL_DMA_Abort_IT+0x17c>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a20      	ldr	r2, [pc, #128]	@ (80054d8 <HAL_DMA_Abort_IT+0x1c8>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d018      	beq.n	800548c <HAL_DMA_Abort_IT+0x17c>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a1f      	ldr	r2, [pc, #124]	@ (80054dc <HAL_DMA_Abort_IT+0x1cc>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d013      	beq.n	800548c <HAL_DMA_Abort_IT+0x17c>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a1d      	ldr	r2, [pc, #116]	@ (80054e0 <HAL_DMA_Abort_IT+0x1d0>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d00e      	beq.n	800548c <HAL_DMA_Abort_IT+0x17c>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a1c      	ldr	r2, [pc, #112]	@ (80054e4 <HAL_DMA_Abort_IT+0x1d4>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d009      	beq.n	800548c <HAL_DMA_Abort_IT+0x17c>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a1a      	ldr	r2, [pc, #104]	@ (80054e8 <HAL_DMA_Abort_IT+0x1d8>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d004      	beq.n	800548c <HAL_DMA_Abort_IT+0x17c>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a19      	ldr	r2, [pc, #100]	@ (80054ec <HAL_DMA_Abort_IT+0x1dc>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d108      	bne.n	800549e <HAL_DMA_Abort_IT+0x18e>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f022 0201 	bic.w	r2, r2, #1
 800549a:	601a      	str	r2, [r3, #0]
 800549c:	e178      	b.n	8005790 <HAL_DMA_Abort_IT+0x480>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f022 0201 	bic.w	r2, r2, #1
 80054ac:	601a      	str	r2, [r3, #0]
 80054ae:	e16f      	b.n	8005790 <HAL_DMA_Abort_IT+0x480>
 80054b0:	40020010 	.word	0x40020010
 80054b4:	40020028 	.word	0x40020028
 80054b8:	40020040 	.word	0x40020040
 80054bc:	40020058 	.word	0x40020058
 80054c0:	40020070 	.word	0x40020070
 80054c4:	40020088 	.word	0x40020088
 80054c8:	400200a0 	.word	0x400200a0
 80054cc:	400200b8 	.word	0x400200b8
 80054d0:	40020410 	.word	0x40020410
 80054d4:	40020428 	.word	0x40020428
 80054d8:	40020440 	.word	0x40020440
 80054dc:	40020458 	.word	0x40020458
 80054e0:	40020470 	.word	0x40020470
 80054e4:	40020488 	.word	0x40020488
 80054e8:	400204a0 	.word	0x400204a0
 80054ec:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f022 020e 	bic.w	r2, r2, #14
 80054fe:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a6c      	ldr	r2, [pc, #432]	@ (80056b8 <HAL_DMA_Abort_IT+0x3a8>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d04a      	beq.n	80055a0 <HAL_DMA_Abort_IT+0x290>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a6b      	ldr	r2, [pc, #428]	@ (80056bc <HAL_DMA_Abort_IT+0x3ac>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d045      	beq.n	80055a0 <HAL_DMA_Abort_IT+0x290>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a69      	ldr	r2, [pc, #420]	@ (80056c0 <HAL_DMA_Abort_IT+0x3b0>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d040      	beq.n	80055a0 <HAL_DMA_Abort_IT+0x290>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a68      	ldr	r2, [pc, #416]	@ (80056c4 <HAL_DMA_Abort_IT+0x3b4>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d03b      	beq.n	80055a0 <HAL_DMA_Abort_IT+0x290>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a66      	ldr	r2, [pc, #408]	@ (80056c8 <HAL_DMA_Abort_IT+0x3b8>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d036      	beq.n	80055a0 <HAL_DMA_Abort_IT+0x290>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a65      	ldr	r2, [pc, #404]	@ (80056cc <HAL_DMA_Abort_IT+0x3bc>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d031      	beq.n	80055a0 <HAL_DMA_Abort_IT+0x290>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a63      	ldr	r2, [pc, #396]	@ (80056d0 <HAL_DMA_Abort_IT+0x3c0>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d02c      	beq.n	80055a0 <HAL_DMA_Abort_IT+0x290>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a62      	ldr	r2, [pc, #392]	@ (80056d4 <HAL_DMA_Abort_IT+0x3c4>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d027      	beq.n	80055a0 <HAL_DMA_Abort_IT+0x290>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a60      	ldr	r2, [pc, #384]	@ (80056d8 <HAL_DMA_Abort_IT+0x3c8>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d022      	beq.n	80055a0 <HAL_DMA_Abort_IT+0x290>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a5f      	ldr	r2, [pc, #380]	@ (80056dc <HAL_DMA_Abort_IT+0x3cc>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d01d      	beq.n	80055a0 <HAL_DMA_Abort_IT+0x290>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a5d      	ldr	r2, [pc, #372]	@ (80056e0 <HAL_DMA_Abort_IT+0x3d0>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d018      	beq.n	80055a0 <HAL_DMA_Abort_IT+0x290>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a5c      	ldr	r2, [pc, #368]	@ (80056e4 <HAL_DMA_Abort_IT+0x3d4>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d013      	beq.n	80055a0 <HAL_DMA_Abort_IT+0x290>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a5a      	ldr	r2, [pc, #360]	@ (80056e8 <HAL_DMA_Abort_IT+0x3d8>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d00e      	beq.n	80055a0 <HAL_DMA_Abort_IT+0x290>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a59      	ldr	r2, [pc, #356]	@ (80056ec <HAL_DMA_Abort_IT+0x3dc>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d009      	beq.n	80055a0 <HAL_DMA_Abort_IT+0x290>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a57      	ldr	r2, [pc, #348]	@ (80056f0 <HAL_DMA_Abort_IT+0x3e0>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d004      	beq.n	80055a0 <HAL_DMA_Abort_IT+0x290>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a56      	ldr	r2, [pc, #344]	@ (80056f4 <HAL_DMA_Abort_IT+0x3e4>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d108      	bne.n	80055b2 <HAL_DMA_Abort_IT+0x2a2>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f022 0201 	bic.w	r2, r2, #1
 80055ae:	601a      	str	r2, [r3, #0]
 80055b0:	e007      	b.n	80055c2 <HAL_DMA_Abort_IT+0x2b2>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f022 0201 	bic.w	r2, r2, #1
 80055c0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a3c      	ldr	r2, [pc, #240]	@ (80056b8 <HAL_DMA_Abort_IT+0x3a8>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d072      	beq.n	80056b2 <HAL_DMA_Abort_IT+0x3a2>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a3a      	ldr	r2, [pc, #232]	@ (80056bc <HAL_DMA_Abort_IT+0x3ac>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d06d      	beq.n	80056b2 <HAL_DMA_Abort_IT+0x3a2>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a39      	ldr	r2, [pc, #228]	@ (80056c0 <HAL_DMA_Abort_IT+0x3b0>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d068      	beq.n	80056b2 <HAL_DMA_Abort_IT+0x3a2>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a37      	ldr	r2, [pc, #220]	@ (80056c4 <HAL_DMA_Abort_IT+0x3b4>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d063      	beq.n	80056b2 <HAL_DMA_Abort_IT+0x3a2>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a36      	ldr	r2, [pc, #216]	@ (80056c8 <HAL_DMA_Abort_IT+0x3b8>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d05e      	beq.n	80056b2 <HAL_DMA_Abort_IT+0x3a2>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a34      	ldr	r2, [pc, #208]	@ (80056cc <HAL_DMA_Abort_IT+0x3bc>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d059      	beq.n	80056b2 <HAL_DMA_Abort_IT+0x3a2>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a33      	ldr	r2, [pc, #204]	@ (80056d0 <HAL_DMA_Abort_IT+0x3c0>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d054      	beq.n	80056b2 <HAL_DMA_Abort_IT+0x3a2>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a31      	ldr	r2, [pc, #196]	@ (80056d4 <HAL_DMA_Abort_IT+0x3c4>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d04f      	beq.n	80056b2 <HAL_DMA_Abort_IT+0x3a2>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a30      	ldr	r2, [pc, #192]	@ (80056d8 <HAL_DMA_Abort_IT+0x3c8>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d04a      	beq.n	80056b2 <HAL_DMA_Abort_IT+0x3a2>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a2e      	ldr	r2, [pc, #184]	@ (80056dc <HAL_DMA_Abort_IT+0x3cc>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d045      	beq.n	80056b2 <HAL_DMA_Abort_IT+0x3a2>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a2d      	ldr	r2, [pc, #180]	@ (80056e0 <HAL_DMA_Abort_IT+0x3d0>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d040      	beq.n	80056b2 <HAL_DMA_Abort_IT+0x3a2>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a2b      	ldr	r2, [pc, #172]	@ (80056e4 <HAL_DMA_Abort_IT+0x3d4>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d03b      	beq.n	80056b2 <HAL_DMA_Abort_IT+0x3a2>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a2a      	ldr	r2, [pc, #168]	@ (80056e8 <HAL_DMA_Abort_IT+0x3d8>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d036      	beq.n	80056b2 <HAL_DMA_Abort_IT+0x3a2>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a28      	ldr	r2, [pc, #160]	@ (80056ec <HAL_DMA_Abort_IT+0x3dc>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d031      	beq.n	80056b2 <HAL_DMA_Abort_IT+0x3a2>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a27      	ldr	r2, [pc, #156]	@ (80056f0 <HAL_DMA_Abort_IT+0x3e0>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d02c      	beq.n	80056b2 <HAL_DMA_Abort_IT+0x3a2>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a25      	ldr	r2, [pc, #148]	@ (80056f4 <HAL_DMA_Abort_IT+0x3e4>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d027      	beq.n	80056b2 <HAL_DMA_Abort_IT+0x3a2>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a24      	ldr	r2, [pc, #144]	@ (80056f8 <HAL_DMA_Abort_IT+0x3e8>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d022      	beq.n	80056b2 <HAL_DMA_Abort_IT+0x3a2>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a22      	ldr	r2, [pc, #136]	@ (80056fc <HAL_DMA_Abort_IT+0x3ec>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d01d      	beq.n	80056b2 <HAL_DMA_Abort_IT+0x3a2>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a21      	ldr	r2, [pc, #132]	@ (8005700 <HAL_DMA_Abort_IT+0x3f0>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d018      	beq.n	80056b2 <HAL_DMA_Abort_IT+0x3a2>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a1f      	ldr	r2, [pc, #124]	@ (8005704 <HAL_DMA_Abort_IT+0x3f4>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d013      	beq.n	80056b2 <HAL_DMA_Abort_IT+0x3a2>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a1e      	ldr	r2, [pc, #120]	@ (8005708 <HAL_DMA_Abort_IT+0x3f8>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d00e      	beq.n	80056b2 <HAL_DMA_Abort_IT+0x3a2>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a1c      	ldr	r2, [pc, #112]	@ (800570c <HAL_DMA_Abort_IT+0x3fc>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d009      	beq.n	80056b2 <HAL_DMA_Abort_IT+0x3a2>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a1b      	ldr	r2, [pc, #108]	@ (8005710 <HAL_DMA_Abort_IT+0x400>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d004      	beq.n	80056b2 <HAL_DMA_Abort_IT+0x3a2>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a19      	ldr	r2, [pc, #100]	@ (8005714 <HAL_DMA_Abort_IT+0x404>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d132      	bne.n	8005718 <HAL_DMA_Abort_IT+0x408>
 80056b2:	2301      	movs	r3, #1
 80056b4:	e031      	b.n	800571a <HAL_DMA_Abort_IT+0x40a>
 80056b6:	bf00      	nop
 80056b8:	40020010 	.word	0x40020010
 80056bc:	40020028 	.word	0x40020028
 80056c0:	40020040 	.word	0x40020040
 80056c4:	40020058 	.word	0x40020058
 80056c8:	40020070 	.word	0x40020070
 80056cc:	40020088 	.word	0x40020088
 80056d0:	400200a0 	.word	0x400200a0
 80056d4:	400200b8 	.word	0x400200b8
 80056d8:	40020410 	.word	0x40020410
 80056dc:	40020428 	.word	0x40020428
 80056e0:	40020440 	.word	0x40020440
 80056e4:	40020458 	.word	0x40020458
 80056e8:	40020470 	.word	0x40020470
 80056ec:	40020488 	.word	0x40020488
 80056f0:	400204a0 	.word	0x400204a0
 80056f4:	400204b8 	.word	0x400204b8
 80056f8:	58025408 	.word	0x58025408
 80056fc:	5802541c 	.word	0x5802541c
 8005700:	58025430 	.word	0x58025430
 8005704:	58025444 	.word	0x58025444
 8005708:	58025458 	.word	0x58025458
 800570c:	5802546c 	.word	0x5802546c
 8005710:	58025480 	.word	0x58025480
 8005714:	58025494 	.word	0x58025494
 8005718:	2300      	movs	r3, #0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d028      	beq.n	8005770 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005728:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800572c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005732:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005738:	f003 031f 	and.w	r3, r3, #31
 800573c:	2201      	movs	r2, #1
 800573e:	409a      	lsls	r2, r3
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800574c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005752:	2b00      	cmp	r3, #0
 8005754:	d00c      	beq.n	8005770 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005760:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005764:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800576e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005784:	2b00      	cmp	r3, #0
 8005786:	d003      	beq.n	8005790 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005790:	2300      	movs	r3, #0
}
 8005792:	4618      	mov	r0, r3
 8005794:	3710      	adds	r7, #16
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop

0800579c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b08a      	sub	sp, #40	@ 0x28
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80057a4:	2300      	movs	r3, #0
 80057a6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80057a8:	4b67      	ldr	r3, [pc, #412]	@ (8005948 <HAL_DMA_IRQHandler+0x1ac>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a67      	ldr	r2, [pc, #412]	@ (800594c <HAL_DMA_IRQHandler+0x1b0>)
 80057ae:	fba2 2303 	umull	r2, r3, r2, r3
 80057b2:	0a9b      	lsrs	r3, r3, #10
 80057b4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057ba:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057c0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80057c2:	6a3b      	ldr	r3, [r7, #32]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a5f      	ldr	r2, [pc, #380]	@ (8005950 <HAL_DMA_IRQHandler+0x1b4>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d04a      	beq.n	800586e <HAL_DMA_IRQHandler+0xd2>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a5d      	ldr	r2, [pc, #372]	@ (8005954 <HAL_DMA_IRQHandler+0x1b8>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d045      	beq.n	800586e <HAL_DMA_IRQHandler+0xd2>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a5c      	ldr	r2, [pc, #368]	@ (8005958 <HAL_DMA_IRQHandler+0x1bc>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d040      	beq.n	800586e <HAL_DMA_IRQHandler+0xd2>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a5a      	ldr	r2, [pc, #360]	@ (800595c <HAL_DMA_IRQHandler+0x1c0>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d03b      	beq.n	800586e <HAL_DMA_IRQHandler+0xd2>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a59      	ldr	r2, [pc, #356]	@ (8005960 <HAL_DMA_IRQHandler+0x1c4>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d036      	beq.n	800586e <HAL_DMA_IRQHandler+0xd2>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a57      	ldr	r2, [pc, #348]	@ (8005964 <HAL_DMA_IRQHandler+0x1c8>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d031      	beq.n	800586e <HAL_DMA_IRQHandler+0xd2>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a56      	ldr	r2, [pc, #344]	@ (8005968 <HAL_DMA_IRQHandler+0x1cc>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d02c      	beq.n	800586e <HAL_DMA_IRQHandler+0xd2>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a54      	ldr	r2, [pc, #336]	@ (800596c <HAL_DMA_IRQHandler+0x1d0>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d027      	beq.n	800586e <HAL_DMA_IRQHandler+0xd2>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a53      	ldr	r2, [pc, #332]	@ (8005970 <HAL_DMA_IRQHandler+0x1d4>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d022      	beq.n	800586e <HAL_DMA_IRQHandler+0xd2>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a51      	ldr	r2, [pc, #324]	@ (8005974 <HAL_DMA_IRQHandler+0x1d8>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d01d      	beq.n	800586e <HAL_DMA_IRQHandler+0xd2>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a50      	ldr	r2, [pc, #320]	@ (8005978 <HAL_DMA_IRQHandler+0x1dc>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d018      	beq.n	800586e <HAL_DMA_IRQHandler+0xd2>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a4e      	ldr	r2, [pc, #312]	@ (800597c <HAL_DMA_IRQHandler+0x1e0>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d013      	beq.n	800586e <HAL_DMA_IRQHandler+0xd2>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a4d      	ldr	r2, [pc, #308]	@ (8005980 <HAL_DMA_IRQHandler+0x1e4>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d00e      	beq.n	800586e <HAL_DMA_IRQHandler+0xd2>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a4b      	ldr	r2, [pc, #300]	@ (8005984 <HAL_DMA_IRQHandler+0x1e8>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d009      	beq.n	800586e <HAL_DMA_IRQHandler+0xd2>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a4a      	ldr	r2, [pc, #296]	@ (8005988 <HAL_DMA_IRQHandler+0x1ec>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d004      	beq.n	800586e <HAL_DMA_IRQHandler+0xd2>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a48      	ldr	r2, [pc, #288]	@ (800598c <HAL_DMA_IRQHandler+0x1f0>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d101      	bne.n	8005872 <HAL_DMA_IRQHandler+0xd6>
 800586e:	2301      	movs	r3, #1
 8005870:	e000      	b.n	8005874 <HAL_DMA_IRQHandler+0xd8>
 8005872:	2300      	movs	r3, #0
 8005874:	2b00      	cmp	r3, #0
 8005876:	f000 842b 	beq.w	80060d0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800587e:	f003 031f 	and.w	r3, r3, #31
 8005882:	2208      	movs	r2, #8
 8005884:	409a      	lsls	r2, r3
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	4013      	ands	r3, r2
 800588a:	2b00      	cmp	r3, #0
 800588c:	f000 80a2 	beq.w	80059d4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a2e      	ldr	r2, [pc, #184]	@ (8005950 <HAL_DMA_IRQHandler+0x1b4>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d04a      	beq.n	8005930 <HAL_DMA_IRQHandler+0x194>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a2d      	ldr	r2, [pc, #180]	@ (8005954 <HAL_DMA_IRQHandler+0x1b8>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d045      	beq.n	8005930 <HAL_DMA_IRQHandler+0x194>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a2b      	ldr	r2, [pc, #172]	@ (8005958 <HAL_DMA_IRQHandler+0x1bc>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d040      	beq.n	8005930 <HAL_DMA_IRQHandler+0x194>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a2a      	ldr	r2, [pc, #168]	@ (800595c <HAL_DMA_IRQHandler+0x1c0>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d03b      	beq.n	8005930 <HAL_DMA_IRQHandler+0x194>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a28      	ldr	r2, [pc, #160]	@ (8005960 <HAL_DMA_IRQHandler+0x1c4>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d036      	beq.n	8005930 <HAL_DMA_IRQHandler+0x194>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a27      	ldr	r2, [pc, #156]	@ (8005964 <HAL_DMA_IRQHandler+0x1c8>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d031      	beq.n	8005930 <HAL_DMA_IRQHandler+0x194>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a25      	ldr	r2, [pc, #148]	@ (8005968 <HAL_DMA_IRQHandler+0x1cc>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d02c      	beq.n	8005930 <HAL_DMA_IRQHandler+0x194>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a24      	ldr	r2, [pc, #144]	@ (800596c <HAL_DMA_IRQHandler+0x1d0>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d027      	beq.n	8005930 <HAL_DMA_IRQHandler+0x194>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a22      	ldr	r2, [pc, #136]	@ (8005970 <HAL_DMA_IRQHandler+0x1d4>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d022      	beq.n	8005930 <HAL_DMA_IRQHandler+0x194>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a21      	ldr	r2, [pc, #132]	@ (8005974 <HAL_DMA_IRQHandler+0x1d8>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d01d      	beq.n	8005930 <HAL_DMA_IRQHandler+0x194>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a1f      	ldr	r2, [pc, #124]	@ (8005978 <HAL_DMA_IRQHandler+0x1dc>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d018      	beq.n	8005930 <HAL_DMA_IRQHandler+0x194>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a1e      	ldr	r2, [pc, #120]	@ (800597c <HAL_DMA_IRQHandler+0x1e0>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d013      	beq.n	8005930 <HAL_DMA_IRQHandler+0x194>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a1c      	ldr	r2, [pc, #112]	@ (8005980 <HAL_DMA_IRQHandler+0x1e4>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d00e      	beq.n	8005930 <HAL_DMA_IRQHandler+0x194>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a1b      	ldr	r2, [pc, #108]	@ (8005984 <HAL_DMA_IRQHandler+0x1e8>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d009      	beq.n	8005930 <HAL_DMA_IRQHandler+0x194>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a19      	ldr	r2, [pc, #100]	@ (8005988 <HAL_DMA_IRQHandler+0x1ec>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d004      	beq.n	8005930 <HAL_DMA_IRQHandler+0x194>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a18      	ldr	r2, [pc, #96]	@ (800598c <HAL_DMA_IRQHandler+0x1f0>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d12f      	bne.n	8005990 <HAL_DMA_IRQHandler+0x1f4>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 0304 	and.w	r3, r3, #4
 800593a:	2b00      	cmp	r3, #0
 800593c:	bf14      	ite	ne
 800593e:	2301      	movne	r3, #1
 8005940:	2300      	moveq	r3, #0
 8005942:	b2db      	uxtb	r3, r3
 8005944:	e02e      	b.n	80059a4 <HAL_DMA_IRQHandler+0x208>
 8005946:	bf00      	nop
 8005948:	24000000 	.word	0x24000000
 800594c:	1b4e81b5 	.word	0x1b4e81b5
 8005950:	40020010 	.word	0x40020010
 8005954:	40020028 	.word	0x40020028
 8005958:	40020040 	.word	0x40020040
 800595c:	40020058 	.word	0x40020058
 8005960:	40020070 	.word	0x40020070
 8005964:	40020088 	.word	0x40020088
 8005968:	400200a0 	.word	0x400200a0
 800596c:	400200b8 	.word	0x400200b8
 8005970:	40020410 	.word	0x40020410
 8005974:	40020428 	.word	0x40020428
 8005978:	40020440 	.word	0x40020440
 800597c:	40020458 	.word	0x40020458
 8005980:	40020470 	.word	0x40020470
 8005984:	40020488 	.word	0x40020488
 8005988:	400204a0 	.word	0x400204a0
 800598c:	400204b8 	.word	0x400204b8
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f003 0308 	and.w	r3, r3, #8
 800599a:	2b00      	cmp	r3, #0
 800599c:	bf14      	ite	ne
 800599e:	2301      	movne	r3, #1
 80059a0:	2300      	moveq	r3, #0
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d015      	beq.n	80059d4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f022 0204 	bic.w	r2, r2, #4
 80059b6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059bc:	f003 031f 	and.w	r3, r3, #31
 80059c0:	2208      	movs	r2, #8
 80059c2:	409a      	lsls	r2, r3
 80059c4:	6a3b      	ldr	r3, [r7, #32]
 80059c6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059cc:	f043 0201 	orr.w	r2, r3, #1
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059d8:	f003 031f 	and.w	r3, r3, #31
 80059dc:	69ba      	ldr	r2, [r7, #24]
 80059de:	fa22 f303 	lsr.w	r3, r2, r3
 80059e2:	f003 0301 	and.w	r3, r3, #1
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d06e      	beq.n	8005ac8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a69      	ldr	r2, [pc, #420]	@ (8005b94 <HAL_DMA_IRQHandler+0x3f8>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d04a      	beq.n	8005a8a <HAL_DMA_IRQHandler+0x2ee>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a67      	ldr	r2, [pc, #412]	@ (8005b98 <HAL_DMA_IRQHandler+0x3fc>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d045      	beq.n	8005a8a <HAL_DMA_IRQHandler+0x2ee>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a66      	ldr	r2, [pc, #408]	@ (8005b9c <HAL_DMA_IRQHandler+0x400>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d040      	beq.n	8005a8a <HAL_DMA_IRQHandler+0x2ee>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a64      	ldr	r2, [pc, #400]	@ (8005ba0 <HAL_DMA_IRQHandler+0x404>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d03b      	beq.n	8005a8a <HAL_DMA_IRQHandler+0x2ee>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a63      	ldr	r2, [pc, #396]	@ (8005ba4 <HAL_DMA_IRQHandler+0x408>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d036      	beq.n	8005a8a <HAL_DMA_IRQHandler+0x2ee>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a61      	ldr	r2, [pc, #388]	@ (8005ba8 <HAL_DMA_IRQHandler+0x40c>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d031      	beq.n	8005a8a <HAL_DMA_IRQHandler+0x2ee>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a60      	ldr	r2, [pc, #384]	@ (8005bac <HAL_DMA_IRQHandler+0x410>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d02c      	beq.n	8005a8a <HAL_DMA_IRQHandler+0x2ee>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a5e      	ldr	r2, [pc, #376]	@ (8005bb0 <HAL_DMA_IRQHandler+0x414>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d027      	beq.n	8005a8a <HAL_DMA_IRQHandler+0x2ee>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a5d      	ldr	r2, [pc, #372]	@ (8005bb4 <HAL_DMA_IRQHandler+0x418>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d022      	beq.n	8005a8a <HAL_DMA_IRQHandler+0x2ee>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a5b      	ldr	r2, [pc, #364]	@ (8005bb8 <HAL_DMA_IRQHandler+0x41c>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d01d      	beq.n	8005a8a <HAL_DMA_IRQHandler+0x2ee>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a5a      	ldr	r2, [pc, #360]	@ (8005bbc <HAL_DMA_IRQHandler+0x420>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d018      	beq.n	8005a8a <HAL_DMA_IRQHandler+0x2ee>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a58      	ldr	r2, [pc, #352]	@ (8005bc0 <HAL_DMA_IRQHandler+0x424>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d013      	beq.n	8005a8a <HAL_DMA_IRQHandler+0x2ee>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a57      	ldr	r2, [pc, #348]	@ (8005bc4 <HAL_DMA_IRQHandler+0x428>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d00e      	beq.n	8005a8a <HAL_DMA_IRQHandler+0x2ee>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a55      	ldr	r2, [pc, #340]	@ (8005bc8 <HAL_DMA_IRQHandler+0x42c>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d009      	beq.n	8005a8a <HAL_DMA_IRQHandler+0x2ee>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a54      	ldr	r2, [pc, #336]	@ (8005bcc <HAL_DMA_IRQHandler+0x430>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d004      	beq.n	8005a8a <HAL_DMA_IRQHandler+0x2ee>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a52      	ldr	r2, [pc, #328]	@ (8005bd0 <HAL_DMA_IRQHandler+0x434>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d10a      	bne.n	8005aa0 <HAL_DMA_IRQHandler+0x304>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	695b      	ldr	r3, [r3, #20]
 8005a90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	bf14      	ite	ne
 8005a98:	2301      	movne	r3, #1
 8005a9a:	2300      	moveq	r3, #0
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	e003      	b.n	8005aa8 <HAL_DMA_IRQHandler+0x30c>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d00d      	beq.n	8005ac8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ab0:	f003 031f 	and.w	r3, r3, #31
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	409a      	lsls	r2, r3
 8005ab8:	6a3b      	ldr	r3, [r7, #32]
 8005aba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ac0:	f043 0202 	orr.w	r2, r3, #2
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005acc:	f003 031f 	and.w	r3, r3, #31
 8005ad0:	2204      	movs	r2, #4
 8005ad2:	409a      	lsls	r2, r3
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	f000 808f 	beq.w	8005bfc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a2c      	ldr	r2, [pc, #176]	@ (8005b94 <HAL_DMA_IRQHandler+0x3f8>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d04a      	beq.n	8005b7e <HAL_DMA_IRQHandler+0x3e2>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a2a      	ldr	r2, [pc, #168]	@ (8005b98 <HAL_DMA_IRQHandler+0x3fc>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d045      	beq.n	8005b7e <HAL_DMA_IRQHandler+0x3e2>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a29      	ldr	r2, [pc, #164]	@ (8005b9c <HAL_DMA_IRQHandler+0x400>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d040      	beq.n	8005b7e <HAL_DMA_IRQHandler+0x3e2>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a27      	ldr	r2, [pc, #156]	@ (8005ba0 <HAL_DMA_IRQHandler+0x404>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d03b      	beq.n	8005b7e <HAL_DMA_IRQHandler+0x3e2>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a26      	ldr	r2, [pc, #152]	@ (8005ba4 <HAL_DMA_IRQHandler+0x408>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d036      	beq.n	8005b7e <HAL_DMA_IRQHandler+0x3e2>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a24      	ldr	r2, [pc, #144]	@ (8005ba8 <HAL_DMA_IRQHandler+0x40c>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d031      	beq.n	8005b7e <HAL_DMA_IRQHandler+0x3e2>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a23      	ldr	r2, [pc, #140]	@ (8005bac <HAL_DMA_IRQHandler+0x410>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d02c      	beq.n	8005b7e <HAL_DMA_IRQHandler+0x3e2>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a21      	ldr	r2, [pc, #132]	@ (8005bb0 <HAL_DMA_IRQHandler+0x414>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d027      	beq.n	8005b7e <HAL_DMA_IRQHandler+0x3e2>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a20      	ldr	r2, [pc, #128]	@ (8005bb4 <HAL_DMA_IRQHandler+0x418>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d022      	beq.n	8005b7e <HAL_DMA_IRQHandler+0x3e2>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a1e      	ldr	r2, [pc, #120]	@ (8005bb8 <HAL_DMA_IRQHandler+0x41c>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d01d      	beq.n	8005b7e <HAL_DMA_IRQHandler+0x3e2>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a1d      	ldr	r2, [pc, #116]	@ (8005bbc <HAL_DMA_IRQHandler+0x420>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d018      	beq.n	8005b7e <HAL_DMA_IRQHandler+0x3e2>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a1b      	ldr	r2, [pc, #108]	@ (8005bc0 <HAL_DMA_IRQHandler+0x424>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d013      	beq.n	8005b7e <HAL_DMA_IRQHandler+0x3e2>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a1a      	ldr	r2, [pc, #104]	@ (8005bc4 <HAL_DMA_IRQHandler+0x428>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d00e      	beq.n	8005b7e <HAL_DMA_IRQHandler+0x3e2>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a18      	ldr	r2, [pc, #96]	@ (8005bc8 <HAL_DMA_IRQHandler+0x42c>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d009      	beq.n	8005b7e <HAL_DMA_IRQHandler+0x3e2>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a17      	ldr	r2, [pc, #92]	@ (8005bcc <HAL_DMA_IRQHandler+0x430>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d004      	beq.n	8005b7e <HAL_DMA_IRQHandler+0x3e2>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a15      	ldr	r2, [pc, #84]	@ (8005bd0 <HAL_DMA_IRQHandler+0x434>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d12a      	bne.n	8005bd4 <HAL_DMA_IRQHandler+0x438>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 0302 	and.w	r3, r3, #2
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	bf14      	ite	ne
 8005b8c:	2301      	movne	r3, #1
 8005b8e:	2300      	moveq	r3, #0
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	e023      	b.n	8005bdc <HAL_DMA_IRQHandler+0x440>
 8005b94:	40020010 	.word	0x40020010
 8005b98:	40020028 	.word	0x40020028
 8005b9c:	40020040 	.word	0x40020040
 8005ba0:	40020058 	.word	0x40020058
 8005ba4:	40020070 	.word	0x40020070
 8005ba8:	40020088 	.word	0x40020088
 8005bac:	400200a0 	.word	0x400200a0
 8005bb0:	400200b8 	.word	0x400200b8
 8005bb4:	40020410 	.word	0x40020410
 8005bb8:	40020428 	.word	0x40020428
 8005bbc:	40020440 	.word	0x40020440
 8005bc0:	40020458 	.word	0x40020458
 8005bc4:	40020470 	.word	0x40020470
 8005bc8:	40020488 	.word	0x40020488
 8005bcc:	400204a0 	.word	0x400204a0
 8005bd0:	400204b8 	.word	0x400204b8
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	2300      	movs	r3, #0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d00d      	beq.n	8005bfc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005be4:	f003 031f 	and.w	r3, r3, #31
 8005be8:	2204      	movs	r2, #4
 8005bea:	409a      	lsls	r2, r3
 8005bec:	6a3b      	ldr	r3, [r7, #32]
 8005bee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bf4:	f043 0204 	orr.w	r2, r3, #4
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c00:	f003 031f 	and.w	r3, r3, #31
 8005c04:	2210      	movs	r2, #16
 8005c06:	409a      	lsls	r2, r3
 8005c08:	69bb      	ldr	r3, [r7, #24]
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	f000 80a6 	beq.w	8005d5e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a85      	ldr	r2, [pc, #532]	@ (8005e2c <HAL_DMA_IRQHandler+0x690>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d04a      	beq.n	8005cb2 <HAL_DMA_IRQHandler+0x516>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a83      	ldr	r2, [pc, #524]	@ (8005e30 <HAL_DMA_IRQHandler+0x694>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d045      	beq.n	8005cb2 <HAL_DMA_IRQHandler+0x516>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a82      	ldr	r2, [pc, #520]	@ (8005e34 <HAL_DMA_IRQHandler+0x698>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d040      	beq.n	8005cb2 <HAL_DMA_IRQHandler+0x516>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a80      	ldr	r2, [pc, #512]	@ (8005e38 <HAL_DMA_IRQHandler+0x69c>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d03b      	beq.n	8005cb2 <HAL_DMA_IRQHandler+0x516>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a7f      	ldr	r2, [pc, #508]	@ (8005e3c <HAL_DMA_IRQHandler+0x6a0>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d036      	beq.n	8005cb2 <HAL_DMA_IRQHandler+0x516>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a7d      	ldr	r2, [pc, #500]	@ (8005e40 <HAL_DMA_IRQHandler+0x6a4>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d031      	beq.n	8005cb2 <HAL_DMA_IRQHandler+0x516>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a7c      	ldr	r2, [pc, #496]	@ (8005e44 <HAL_DMA_IRQHandler+0x6a8>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d02c      	beq.n	8005cb2 <HAL_DMA_IRQHandler+0x516>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a7a      	ldr	r2, [pc, #488]	@ (8005e48 <HAL_DMA_IRQHandler+0x6ac>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d027      	beq.n	8005cb2 <HAL_DMA_IRQHandler+0x516>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a79      	ldr	r2, [pc, #484]	@ (8005e4c <HAL_DMA_IRQHandler+0x6b0>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d022      	beq.n	8005cb2 <HAL_DMA_IRQHandler+0x516>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a77      	ldr	r2, [pc, #476]	@ (8005e50 <HAL_DMA_IRQHandler+0x6b4>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d01d      	beq.n	8005cb2 <HAL_DMA_IRQHandler+0x516>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a76      	ldr	r2, [pc, #472]	@ (8005e54 <HAL_DMA_IRQHandler+0x6b8>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d018      	beq.n	8005cb2 <HAL_DMA_IRQHandler+0x516>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a74      	ldr	r2, [pc, #464]	@ (8005e58 <HAL_DMA_IRQHandler+0x6bc>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d013      	beq.n	8005cb2 <HAL_DMA_IRQHandler+0x516>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a73      	ldr	r2, [pc, #460]	@ (8005e5c <HAL_DMA_IRQHandler+0x6c0>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d00e      	beq.n	8005cb2 <HAL_DMA_IRQHandler+0x516>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a71      	ldr	r2, [pc, #452]	@ (8005e60 <HAL_DMA_IRQHandler+0x6c4>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d009      	beq.n	8005cb2 <HAL_DMA_IRQHandler+0x516>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a70      	ldr	r2, [pc, #448]	@ (8005e64 <HAL_DMA_IRQHandler+0x6c8>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d004      	beq.n	8005cb2 <HAL_DMA_IRQHandler+0x516>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a6e      	ldr	r2, [pc, #440]	@ (8005e68 <HAL_DMA_IRQHandler+0x6cc>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d10a      	bne.n	8005cc8 <HAL_DMA_IRQHandler+0x52c>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 0308 	and.w	r3, r3, #8
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	bf14      	ite	ne
 8005cc0:	2301      	movne	r3, #1
 8005cc2:	2300      	moveq	r3, #0
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	e009      	b.n	8005cdc <HAL_DMA_IRQHandler+0x540>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 0304 	and.w	r3, r3, #4
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	bf14      	ite	ne
 8005cd6:	2301      	movne	r3, #1
 8005cd8:	2300      	moveq	r3, #0
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d03e      	beq.n	8005d5e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ce4:	f003 031f 	and.w	r3, r3, #31
 8005ce8:	2210      	movs	r2, #16
 8005cea:	409a      	lsls	r2, r3
 8005cec:	6a3b      	ldr	r3, [r7, #32]
 8005cee:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d018      	beq.n	8005d30 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d108      	bne.n	8005d1e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d024      	beq.n	8005d5e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	4798      	blx	r3
 8005d1c:	e01f      	b.n	8005d5e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d01b      	beq.n	8005d5e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	4798      	blx	r3
 8005d2e:	e016      	b.n	8005d5e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d107      	bne.n	8005d4e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f022 0208 	bic.w	r2, r2, #8
 8005d4c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d003      	beq.n	8005d5e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d62:	f003 031f 	and.w	r3, r3, #31
 8005d66:	2220      	movs	r2, #32
 8005d68:	409a      	lsls	r2, r3
 8005d6a:	69bb      	ldr	r3, [r7, #24]
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	f000 8110 	beq.w	8005f94 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a2c      	ldr	r2, [pc, #176]	@ (8005e2c <HAL_DMA_IRQHandler+0x690>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d04a      	beq.n	8005e14 <HAL_DMA_IRQHandler+0x678>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a2b      	ldr	r2, [pc, #172]	@ (8005e30 <HAL_DMA_IRQHandler+0x694>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d045      	beq.n	8005e14 <HAL_DMA_IRQHandler+0x678>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a29      	ldr	r2, [pc, #164]	@ (8005e34 <HAL_DMA_IRQHandler+0x698>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d040      	beq.n	8005e14 <HAL_DMA_IRQHandler+0x678>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a28      	ldr	r2, [pc, #160]	@ (8005e38 <HAL_DMA_IRQHandler+0x69c>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d03b      	beq.n	8005e14 <HAL_DMA_IRQHandler+0x678>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a26      	ldr	r2, [pc, #152]	@ (8005e3c <HAL_DMA_IRQHandler+0x6a0>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d036      	beq.n	8005e14 <HAL_DMA_IRQHandler+0x678>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a25      	ldr	r2, [pc, #148]	@ (8005e40 <HAL_DMA_IRQHandler+0x6a4>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d031      	beq.n	8005e14 <HAL_DMA_IRQHandler+0x678>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a23      	ldr	r2, [pc, #140]	@ (8005e44 <HAL_DMA_IRQHandler+0x6a8>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d02c      	beq.n	8005e14 <HAL_DMA_IRQHandler+0x678>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a22      	ldr	r2, [pc, #136]	@ (8005e48 <HAL_DMA_IRQHandler+0x6ac>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d027      	beq.n	8005e14 <HAL_DMA_IRQHandler+0x678>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a20      	ldr	r2, [pc, #128]	@ (8005e4c <HAL_DMA_IRQHandler+0x6b0>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d022      	beq.n	8005e14 <HAL_DMA_IRQHandler+0x678>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a1f      	ldr	r2, [pc, #124]	@ (8005e50 <HAL_DMA_IRQHandler+0x6b4>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d01d      	beq.n	8005e14 <HAL_DMA_IRQHandler+0x678>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a1d      	ldr	r2, [pc, #116]	@ (8005e54 <HAL_DMA_IRQHandler+0x6b8>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d018      	beq.n	8005e14 <HAL_DMA_IRQHandler+0x678>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a1c      	ldr	r2, [pc, #112]	@ (8005e58 <HAL_DMA_IRQHandler+0x6bc>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d013      	beq.n	8005e14 <HAL_DMA_IRQHandler+0x678>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a1a      	ldr	r2, [pc, #104]	@ (8005e5c <HAL_DMA_IRQHandler+0x6c0>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d00e      	beq.n	8005e14 <HAL_DMA_IRQHandler+0x678>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a19      	ldr	r2, [pc, #100]	@ (8005e60 <HAL_DMA_IRQHandler+0x6c4>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d009      	beq.n	8005e14 <HAL_DMA_IRQHandler+0x678>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a17      	ldr	r2, [pc, #92]	@ (8005e64 <HAL_DMA_IRQHandler+0x6c8>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d004      	beq.n	8005e14 <HAL_DMA_IRQHandler+0x678>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a16      	ldr	r2, [pc, #88]	@ (8005e68 <HAL_DMA_IRQHandler+0x6cc>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d12b      	bne.n	8005e6c <HAL_DMA_IRQHandler+0x6d0>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 0310 	and.w	r3, r3, #16
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	bf14      	ite	ne
 8005e22:	2301      	movne	r3, #1
 8005e24:	2300      	moveq	r3, #0
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	e02a      	b.n	8005e80 <HAL_DMA_IRQHandler+0x6e4>
 8005e2a:	bf00      	nop
 8005e2c:	40020010 	.word	0x40020010
 8005e30:	40020028 	.word	0x40020028
 8005e34:	40020040 	.word	0x40020040
 8005e38:	40020058 	.word	0x40020058
 8005e3c:	40020070 	.word	0x40020070
 8005e40:	40020088 	.word	0x40020088
 8005e44:	400200a0 	.word	0x400200a0
 8005e48:	400200b8 	.word	0x400200b8
 8005e4c:	40020410 	.word	0x40020410
 8005e50:	40020428 	.word	0x40020428
 8005e54:	40020440 	.word	0x40020440
 8005e58:	40020458 	.word	0x40020458
 8005e5c:	40020470 	.word	0x40020470
 8005e60:	40020488 	.word	0x40020488
 8005e64:	400204a0 	.word	0x400204a0
 8005e68:	400204b8 	.word	0x400204b8
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 0302 	and.w	r3, r3, #2
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	bf14      	ite	ne
 8005e7a:	2301      	movne	r3, #1
 8005e7c:	2300      	moveq	r3, #0
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	f000 8087 	beq.w	8005f94 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e8a:	f003 031f 	and.w	r3, r3, #31
 8005e8e:	2220      	movs	r2, #32
 8005e90:	409a      	lsls	r2, r3
 8005e92:	6a3b      	ldr	r3, [r7, #32]
 8005e94:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	2b04      	cmp	r3, #4
 8005ea0:	d139      	bne.n	8005f16 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f022 0216 	bic.w	r2, r2, #22
 8005eb0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	695a      	ldr	r2, [r3, #20]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005ec0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d103      	bne.n	8005ed2 <HAL_DMA_IRQHandler+0x736>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d007      	beq.n	8005ee2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f022 0208 	bic.w	r2, r2, #8
 8005ee0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ee6:	f003 031f 	and.w	r3, r3, #31
 8005eea:	223f      	movs	r2, #63	@ 0x3f
 8005eec:	409a      	lsls	r2, r3
 8005eee:	6a3b      	ldr	r3, [r7, #32]
 8005ef0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	f000 834a 	beq.w	80065a0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	4798      	blx	r3
          }
          return;
 8005f14:	e344      	b.n	80065a0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d018      	beq.n	8005f56 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d108      	bne.n	8005f44 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d02c      	beq.n	8005f94 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	4798      	blx	r3
 8005f42:	e027      	b.n	8005f94 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d023      	beq.n	8005f94 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	4798      	blx	r3
 8005f54:	e01e      	b.n	8005f94 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d10f      	bne.n	8005f84 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f022 0210 	bic.w	r2, r2, #16
 8005f72:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d003      	beq.n	8005f94 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	f000 8306 	beq.w	80065aa <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fa2:	f003 0301 	and.w	r3, r3, #1
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	f000 8088 	beq.w	80060bc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2204      	movs	r2, #4
 8005fb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a7a      	ldr	r2, [pc, #488]	@ (80061a4 <HAL_DMA_IRQHandler+0xa08>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d04a      	beq.n	8006054 <HAL_DMA_IRQHandler+0x8b8>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a79      	ldr	r2, [pc, #484]	@ (80061a8 <HAL_DMA_IRQHandler+0xa0c>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d045      	beq.n	8006054 <HAL_DMA_IRQHandler+0x8b8>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a77      	ldr	r2, [pc, #476]	@ (80061ac <HAL_DMA_IRQHandler+0xa10>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d040      	beq.n	8006054 <HAL_DMA_IRQHandler+0x8b8>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a76      	ldr	r2, [pc, #472]	@ (80061b0 <HAL_DMA_IRQHandler+0xa14>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d03b      	beq.n	8006054 <HAL_DMA_IRQHandler+0x8b8>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a74      	ldr	r2, [pc, #464]	@ (80061b4 <HAL_DMA_IRQHandler+0xa18>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d036      	beq.n	8006054 <HAL_DMA_IRQHandler+0x8b8>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a73      	ldr	r2, [pc, #460]	@ (80061b8 <HAL_DMA_IRQHandler+0xa1c>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d031      	beq.n	8006054 <HAL_DMA_IRQHandler+0x8b8>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a71      	ldr	r2, [pc, #452]	@ (80061bc <HAL_DMA_IRQHandler+0xa20>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d02c      	beq.n	8006054 <HAL_DMA_IRQHandler+0x8b8>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a70      	ldr	r2, [pc, #448]	@ (80061c0 <HAL_DMA_IRQHandler+0xa24>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d027      	beq.n	8006054 <HAL_DMA_IRQHandler+0x8b8>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a6e      	ldr	r2, [pc, #440]	@ (80061c4 <HAL_DMA_IRQHandler+0xa28>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d022      	beq.n	8006054 <HAL_DMA_IRQHandler+0x8b8>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a6d      	ldr	r2, [pc, #436]	@ (80061c8 <HAL_DMA_IRQHandler+0xa2c>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d01d      	beq.n	8006054 <HAL_DMA_IRQHandler+0x8b8>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a6b      	ldr	r2, [pc, #428]	@ (80061cc <HAL_DMA_IRQHandler+0xa30>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d018      	beq.n	8006054 <HAL_DMA_IRQHandler+0x8b8>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a6a      	ldr	r2, [pc, #424]	@ (80061d0 <HAL_DMA_IRQHandler+0xa34>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d013      	beq.n	8006054 <HAL_DMA_IRQHandler+0x8b8>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a68      	ldr	r2, [pc, #416]	@ (80061d4 <HAL_DMA_IRQHandler+0xa38>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d00e      	beq.n	8006054 <HAL_DMA_IRQHandler+0x8b8>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a67      	ldr	r2, [pc, #412]	@ (80061d8 <HAL_DMA_IRQHandler+0xa3c>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d009      	beq.n	8006054 <HAL_DMA_IRQHandler+0x8b8>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a65      	ldr	r2, [pc, #404]	@ (80061dc <HAL_DMA_IRQHandler+0xa40>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d004      	beq.n	8006054 <HAL_DMA_IRQHandler+0x8b8>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a64      	ldr	r2, [pc, #400]	@ (80061e0 <HAL_DMA_IRQHandler+0xa44>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d108      	bne.n	8006066 <HAL_DMA_IRQHandler+0x8ca>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f022 0201 	bic.w	r2, r2, #1
 8006062:	601a      	str	r2, [r3, #0]
 8006064:	e007      	b.n	8006076 <HAL_DMA_IRQHandler+0x8da>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f022 0201 	bic.w	r2, r2, #1
 8006074:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	3301      	adds	r3, #1
 800607a:	60fb      	str	r3, [r7, #12]
 800607c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800607e:	429a      	cmp	r2, r3
 8006080:	d307      	bcc.n	8006092 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f003 0301 	and.w	r3, r3, #1
 800608c:	2b00      	cmp	r3, #0
 800608e:	d1f2      	bne.n	8006076 <HAL_DMA_IRQHandler+0x8da>
 8006090:	e000      	b.n	8006094 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006092:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f003 0301 	and.w	r3, r3, #1
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d004      	beq.n	80060ac <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2203      	movs	r2, #3
 80060a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80060aa:	e003      	b.n	80060b4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	f000 8272 	beq.w	80065aa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	4798      	blx	r3
 80060ce:	e26c      	b.n	80065aa <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a43      	ldr	r2, [pc, #268]	@ (80061e4 <HAL_DMA_IRQHandler+0xa48>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d022      	beq.n	8006120 <HAL_DMA_IRQHandler+0x984>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a42      	ldr	r2, [pc, #264]	@ (80061e8 <HAL_DMA_IRQHandler+0xa4c>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d01d      	beq.n	8006120 <HAL_DMA_IRQHandler+0x984>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a40      	ldr	r2, [pc, #256]	@ (80061ec <HAL_DMA_IRQHandler+0xa50>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d018      	beq.n	8006120 <HAL_DMA_IRQHandler+0x984>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a3f      	ldr	r2, [pc, #252]	@ (80061f0 <HAL_DMA_IRQHandler+0xa54>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d013      	beq.n	8006120 <HAL_DMA_IRQHandler+0x984>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a3d      	ldr	r2, [pc, #244]	@ (80061f4 <HAL_DMA_IRQHandler+0xa58>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d00e      	beq.n	8006120 <HAL_DMA_IRQHandler+0x984>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a3c      	ldr	r2, [pc, #240]	@ (80061f8 <HAL_DMA_IRQHandler+0xa5c>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d009      	beq.n	8006120 <HAL_DMA_IRQHandler+0x984>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a3a      	ldr	r2, [pc, #232]	@ (80061fc <HAL_DMA_IRQHandler+0xa60>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d004      	beq.n	8006120 <HAL_DMA_IRQHandler+0x984>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a39      	ldr	r2, [pc, #228]	@ (8006200 <HAL_DMA_IRQHandler+0xa64>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d101      	bne.n	8006124 <HAL_DMA_IRQHandler+0x988>
 8006120:	2301      	movs	r3, #1
 8006122:	e000      	b.n	8006126 <HAL_DMA_IRQHandler+0x98a>
 8006124:	2300      	movs	r3, #0
 8006126:	2b00      	cmp	r3, #0
 8006128:	f000 823f 	beq.w	80065aa <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006138:	f003 031f 	and.w	r3, r3, #31
 800613c:	2204      	movs	r2, #4
 800613e:	409a      	lsls	r2, r3
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	4013      	ands	r3, r2
 8006144:	2b00      	cmp	r3, #0
 8006146:	f000 80cd 	beq.w	80062e4 <HAL_DMA_IRQHandler+0xb48>
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	f003 0304 	and.w	r3, r3, #4
 8006150:	2b00      	cmp	r3, #0
 8006152:	f000 80c7 	beq.w	80062e4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800615a:	f003 031f 	and.w	r3, r3, #31
 800615e:	2204      	movs	r2, #4
 8006160:	409a      	lsls	r2, r3
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800616c:	2b00      	cmp	r3, #0
 800616e:	d049      	beq.n	8006204 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006176:	2b00      	cmp	r3, #0
 8006178:	d109      	bne.n	800618e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800617e:	2b00      	cmp	r3, #0
 8006180:	f000 8210 	beq.w	80065a4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800618c:	e20a      	b.n	80065a4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006192:	2b00      	cmp	r3, #0
 8006194:	f000 8206 	beq.w	80065a4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80061a0:	e200      	b.n	80065a4 <HAL_DMA_IRQHandler+0xe08>
 80061a2:	bf00      	nop
 80061a4:	40020010 	.word	0x40020010
 80061a8:	40020028 	.word	0x40020028
 80061ac:	40020040 	.word	0x40020040
 80061b0:	40020058 	.word	0x40020058
 80061b4:	40020070 	.word	0x40020070
 80061b8:	40020088 	.word	0x40020088
 80061bc:	400200a0 	.word	0x400200a0
 80061c0:	400200b8 	.word	0x400200b8
 80061c4:	40020410 	.word	0x40020410
 80061c8:	40020428 	.word	0x40020428
 80061cc:	40020440 	.word	0x40020440
 80061d0:	40020458 	.word	0x40020458
 80061d4:	40020470 	.word	0x40020470
 80061d8:	40020488 	.word	0x40020488
 80061dc:	400204a0 	.word	0x400204a0
 80061e0:	400204b8 	.word	0x400204b8
 80061e4:	58025408 	.word	0x58025408
 80061e8:	5802541c 	.word	0x5802541c
 80061ec:	58025430 	.word	0x58025430
 80061f0:	58025444 	.word	0x58025444
 80061f4:	58025458 	.word	0x58025458
 80061f8:	5802546c 	.word	0x5802546c
 80061fc:	58025480 	.word	0x58025480
 8006200:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	f003 0320 	and.w	r3, r3, #32
 800620a:	2b00      	cmp	r3, #0
 800620c:	d160      	bne.n	80062d0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a7f      	ldr	r2, [pc, #508]	@ (8006410 <HAL_DMA_IRQHandler+0xc74>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d04a      	beq.n	80062ae <HAL_DMA_IRQHandler+0xb12>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a7d      	ldr	r2, [pc, #500]	@ (8006414 <HAL_DMA_IRQHandler+0xc78>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d045      	beq.n	80062ae <HAL_DMA_IRQHandler+0xb12>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a7c      	ldr	r2, [pc, #496]	@ (8006418 <HAL_DMA_IRQHandler+0xc7c>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d040      	beq.n	80062ae <HAL_DMA_IRQHandler+0xb12>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a7a      	ldr	r2, [pc, #488]	@ (800641c <HAL_DMA_IRQHandler+0xc80>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d03b      	beq.n	80062ae <HAL_DMA_IRQHandler+0xb12>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a79      	ldr	r2, [pc, #484]	@ (8006420 <HAL_DMA_IRQHandler+0xc84>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d036      	beq.n	80062ae <HAL_DMA_IRQHandler+0xb12>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a77      	ldr	r2, [pc, #476]	@ (8006424 <HAL_DMA_IRQHandler+0xc88>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d031      	beq.n	80062ae <HAL_DMA_IRQHandler+0xb12>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a76      	ldr	r2, [pc, #472]	@ (8006428 <HAL_DMA_IRQHandler+0xc8c>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d02c      	beq.n	80062ae <HAL_DMA_IRQHandler+0xb12>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a74      	ldr	r2, [pc, #464]	@ (800642c <HAL_DMA_IRQHandler+0xc90>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d027      	beq.n	80062ae <HAL_DMA_IRQHandler+0xb12>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a73      	ldr	r2, [pc, #460]	@ (8006430 <HAL_DMA_IRQHandler+0xc94>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d022      	beq.n	80062ae <HAL_DMA_IRQHandler+0xb12>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a71      	ldr	r2, [pc, #452]	@ (8006434 <HAL_DMA_IRQHandler+0xc98>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d01d      	beq.n	80062ae <HAL_DMA_IRQHandler+0xb12>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a70      	ldr	r2, [pc, #448]	@ (8006438 <HAL_DMA_IRQHandler+0xc9c>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d018      	beq.n	80062ae <HAL_DMA_IRQHandler+0xb12>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a6e      	ldr	r2, [pc, #440]	@ (800643c <HAL_DMA_IRQHandler+0xca0>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d013      	beq.n	80062ae <HAL_DMA_IRQHandler+0xb12>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a6d      	ldr	r2, [pc, #436]	@ (8006440 <HAL_DMA_IRQHandler+0xca4>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d00e      	beq.n	80062ae <HAL_DMA_IRQHandler+0xb12>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a6b      	ldr	r2, [pc, #428]	@ (8006444 <HAL_DMA_IRQHandler+0xca8>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d009      	beq.n	80062ae <HAL_DMA_IRQHandler+0xb12>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a6a      	ldr	r2, [pc, #424]	@ (8006448 <HAL_DMA_IRQHandler+0xcac>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d004      	beq.n	80062ae <HAL_DMA_IRQHandler+0xb12>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a68      	ldr	r2, [pc, #416]	@ (800644c <HAL_DMA_IRQHandler+0xcb0>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d108      	bne.n	80062c0 <HAL_DMA_IRQHandler+0xb24>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f022 0208 	bic.w	r2, r2, #8
 80062bc:	601a      	str	r2, [r3, #0]
 80062be:	e007      	b.n	80062d0 <HAL_DMA_IRQHandler+0xb34>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f022 0204 	bic.w	r2, r2, #4
 80062ce:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	f000 8165 	beq.w	80065a4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80062e2:	e15f      	b.n	80065a4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062e8:	f003 031f 	and.w	r3, r3, #31
 80062ec:	2202      	movs	r2, #2
 80062ee:	409a      	lsls	r2, r3
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	4013      	ands	r3, r2
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	f000 80c5 	beq.w	8006484 <HAL_DMA_IRQHandler+0xce8>
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	f003 0302 	and.w	r3, r3, #2
 8006300:	2b00      	cmp	r3, #0
 8006302:	f000 80bf 	beq.w	8006484 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800630a:	f003 031f 	and.w	r3, r3, #31
 800630e:	2202      	movs	r2, #2
 8006310:	409a      	lsls	r2, r3
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800631c:	2b00      	cmp	r3, #0
 800631e:	d018      	beq.n	8006352 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006326:	2b00      	cmp	r3, #0
 8006328:	d109      	bne.n	800633e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800632e:	2b00      	cmp	r3, #0
 8006330:	f000 813a 	beq.w	80065a8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800633c:	e134      	b.n	80065a8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006342:	2b00      	cmp	r3, #0
 8006344:	f000 8130 	beq.w	80065a8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006350:	e12a      	b.n	80065a8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	f003 0320 	and.w	r3, r3, #32
 8006358:	2b00      	cmp	r3, #0
 800635a:	f040 8089 	bne.w	8006470 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a2b      	ldr	r2, [pc, #172]	@ (8006410 <HAL_DMA_IRQHandler+0xc74>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d04a      	beq.n	80063fe <HAL_DMA_IRQHandler+0xc62>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a29      	ldr	r2, [pc, #164]	@ (8006414 <HAL_DMA_IRQHandler+0xc78>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d045      	beq.n	80063fe <HAL_DMA_IRQHandler+0xc62>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a28      	ldr	r2, [pc, #160]	@ (8006418 <HAL_DMA_IRQHandler+0xc7c>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d040      	beq.n	80063fe <HAL_DMA_IRQHandler+0xc62>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a26      	ldr	r2, [pc, #152]	@ (800641c <HAL_DMA_IRQHandler+0xc80>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d03b      	beq.n	80063fe <HAL_DMA_IRQHandler+0xc62>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a25      	ldr	r2, [pc, #148]	@ (8006420 <HAL_DMA_IRQHandler+0xc84>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d036      	beq.n	80063fe <HAL_DMA_IRQHandler+0xc62>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a23      	ldr	r2, [pc, #140]	@ (8006424 <HAL_DMA_IRQHandler+0xc88>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d031      	beq.n	80063fe <HAL_DMA_IRQHandler+0xc62>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a22      	ldr	r2, [pc, #136]	@ (8006428 <HAL_DMA_IRQHandler+0xc8c>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d02c      	beq.n	80063fe <HAL_DMA_IRQHandler+0xc62>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a20      	ldr	r2, [pc, #128]	@ (800642c <HAL_DMA_IRQHandler+0xc90>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d027      	beq.n	80063fe <HAL_DMA_IRQHandler+0xc62>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a1f      	ldr	r2, [pc, #124]	@ (8006430 <HAL_DMA_IRQHandler+0xc94>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d022      	beq.n	80063fe <HAL_DMA_IRQHandler+0xc62>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a1d      	ldr	r2, [pc, #116]	@ (8006434 <HAL_DMA_IRQHandler+0xc98>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d01d      	beq.n	80063fe <HAL_DMA_IRQHandler+0xc62>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a1c      	ldr	r2, [pc, #112]	@ (8006438 <HAL_DMA_IRQHandler+0xc9c>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d018      	beq.n	80063fe <HAL_DMA_IRQHandler+0xc62>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a1a      	ldr	r2, [pc, #104]	@ (800643c <HAL_DMA_IRQHandler+0xca0>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d013      	beq.n	80063fe <HAL_DMA_IRQHandler+0xc62>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a19      	ldr	r2, [pc, #100]	@ (8006440 <HAL_DMA_IRQHandler+0xca4>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d00e      	beq.n	80063fe <HAL_DMA_IRQHandler+0xc62>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a17      	ldr	r2, [pc, #92]	@ (8006444 <HAL_DMA_IRQHandler+0xca8>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d009      	beq.n	80063fe <HAL_DMA_IRQHandler+0xc62>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a16      	ldr	r2, [pc, #88]	@ (8006448 <HAL_DMA_IRQHandler+0xcac>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d004      	beq.n	80063fe <HAL_DMA_IRQHandler+0xc62>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a14      	ldr	r2, [pc, #80]	@ (800644c <HAL_DMA_IRQHandler+0xcb0>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d128      	bne.n	8006450 <HAL_DMA_IRQHandler+0xcb4>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f022 0214 	bic.w	r2, r2, #20
 800640c:	601a      	str	r2, [r3, #0]
 800640e:	e027      	b.n	8006460 <HAL_DMA_IRQHandler+0xcc4>
 8006410:	40020010 	.word	0x40020010
 8006414:	40020028 	.word	0x40020028
 8006418:	40020040 	.word	0x40020040
 800641c:	40020058 	.word	0x40020058
 8006420:	40020070 	.word	0x40020070
 8006424:	40020088 	.word	0x40020088
 8006428:	400200a0 	.word	0x400200a0
 800642c:	400200b8 	.word	0x400200b8
 8006430:	40020410 	.word	0x40020410
 8006434:	40020428 	.word	0x40020428
 8006438:	40020440 	.word	0x40020440
 800643c:	40020458 	.word	0x40020458
 8006440:	40020470 	.word	0x40020470
 8006444:	40020488 	.word	0x40020488
 8006448:	400204a0 	.word	0x400204a0
 800644c:	400204b8 	.word	0x400204b8
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f022 020a 	bic.w	r2, r2, #10
 800645e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2201      	movs	r2, #1
 8006464:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006474:	2b00      	cmp	r3, #0
 8006476:	f000 8097 	beq.w	80065a8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006482:	e091      	b.n	80065a8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006488:	f003 031f 	and.w	r3, r3, #31
 800648c:	2208      	movs	r2, #8
 800648e:	409a      	lsls	r2, r3
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	4013      	ands	r3, r2
 8006494:	2b00      	cmp	r3, #0
 8006496:	f000 8088 	beq.w	80065aa <HAL_DMA_IRQHandler+0xe0e>
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	f003 0308 	and.w	r3, r3, #8
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	f000 8082 	beq.w	80065aa <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a41      	ldr	r2, [pc, #260]	@ (80065b0 <HAL_DMA_IRQHandler+0xe14>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d04a      	beq.n	8006546 <HAL_DMA_IRQHandler+0xdaa>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a3f      	ldr	r2, [pc, #252]	@ (80065b4 <HAL_DMA_IRQHandler+0xe18>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d045      	beq.n	8006546 <HAL_DMA_IRQHandler+0xdaa>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a3e      	ldr	r2, [pc, #248]	@ (80065b8 <HAL_DMA_IRQHandler+0xe1c>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d040      	beq.n	8006546 <HAL_DMA_IRQHandler+0xdaa>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a3c      	ldr	r2, [pc, #240]	@ (80065bc <HAL_DMA_IRQHandler+0xe20>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d03b      	beq.n	8006546 <HAL_DMA_IRQHandler+0xdaa>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a3b      	ldr	r2, [pc, #236]	@ (80065c0 <HAL_DMA_IRQHandler+0xe24>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d036      	beq.n	8006546 <HAL_DMA_IRQHandler+0xdaa>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a39      	ldr	r2, [pc, #228]	@ (80065c4 <HAL_DMA_IRQHandler+0xe28>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d031      	beq.n	8006546 <HAL_DMA_IRQHandler+0xdaa>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a38      	ldr	r2, [pc, #224]	@ (80065c8 <HAL_DMA_IRQHandler+0xe2c>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d02c      	beq.n	8006546 <HAL_DMA_IRQHandler+0xdaa>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a36      	ldr	r2, [pc, #216]	@ (80065cc <HAL_DMA_IRQHandler+0xe30>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d027      	beq.n	8006546 <HAL_DMA_IRQHandler+0xdaa>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a35      	ldr	r2, [pc, #212]	@ (80065d0 <HAL_DMA_IRQHandler+0xe34>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d022      	beq.n	8006546 <HAL_DMA_IRQHandler+0xdaa>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a33      	ldr	r2, [pc, #204]	@ (80065d4 <HAL_DMA_IRQHandler+0xe38>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d01d      	beq.n	8006546 <HAL_DMA_IRQHandler+0xdaa>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a32      	ldr	r2, [pc, #200]	@ (80065d8 <HAL_DMA_IRQHandler+0xe3c>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d018      	beq.n	8006546 <HAL_DMA_IRQHandler+0xdaa>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a30      	ldr	r2, [pc, #192]	@ (80065dc <HAL_DMA_IRQHandler+0xe40>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d013      	beq.n	8006546 <HAL_DMA_IRQHandler+0xdaa>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a2f      	ldr	r2, [pc, #188]	@ (80065e0 <HAL_DMA_IRQHandler+0xe44>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d00e      	beq.n	8006546 <HAL_DMA_IRQHandler+0xdaa>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a2d      	ldr	r2, [pc, #180]	@ (80065e4 <HAL_DMA_IRQHandler+0xe48>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d009      	beq.n	8006546 <HAL_DMA_IRQHandler+0xdaa>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a2c      	ldr	r2, [pc, #176]	@ (80065e8 <HAL_DMA_IRQHandler+0xe4c>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d004      	beq.n	8006546 <HAL_DMA_IRQHandler+0xdaa>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a2a      	ldr	r2, [pc, #168]	@ (80065ec <HAL_DMA_IRQHandler+0xe50>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d108      	bne.n	8006558 <HAL_DMA_IRQHandler+0xdbc>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f022 021c 	bic.w	r2, r2, #28
 8006554:	601a      	str	r2, [r3, #0]
 8006556:	e007      	b.n	8006568 <HAL_DMA_IRQHandler+0xdcc>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f022 020e 	bic.w	r2, r2, #14
 8006566:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800656c:	f003 031f 	and.w	r3, r3, #31
 8006570:	2201      	movs	r2, #1
 8006572:	409a      	lsls	r2, r3
 8006574:	69fb      	ldr	r3, [r7, #28]
 8006576:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2201      	movs	r2, #1
 800657c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2201      	movs	r2, #1
 8006582:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006592:	2b00      	cmp	r3, #0
 8006594:	d009      	beq.n	80065aa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	4798      	blx	r3
 800659e:	e004      	b.n	80065aa <HAL_DMA_IRQHandler+0xe0e>
          return;
 80065a0:	bf00      	nop
 80065a2:	e002      	b.n	80065aa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80065a4:	bf00      	nop
 80065a6:	e000      	b.n	80065aa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80065a8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80065aa:	3728      	adds	r7, #40	@ 0x28
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}
 80065b0:	40020010 	.word	0x40020010
 80065b4:	40020028 	.word	0x40020028
 80065b8:	40020040 	.word	0x40020040
 80065bc:	40020058 	.word	0x40020058
 80065c0:	40020070 	.word	0x40020070
 80065c4:	40020088 	.word	0x40020088
 80065c8:	400200a0 	.word	0x400200a0
 80065cc:	400200b8 	.word	0x400200b8
 80065d0:	40020410 	.word	0x40020410
 80065d4:	40020428 	.word	0x40020428
 80065d8:	40020440 	.word	0x40020440
 80065dc:	40020458 	.word	0x40020458
 80065e0:	40020470 	.word	0x40020470
 80065e4:	40020488 	.word	0x40020488
 80065e8:	400204a0 	.word	0x400204a0
 80065ec:	400204b8 	.word	0x400204b8

080065f0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b087      	sub	sp, #28
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	60f8      	str	r0, [r7, #12]
 80065f8:	60b9      	str	r1, [r7, #8]
 80065fa:	607a      	str	r2, [r7, #4]
 80065fc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006602:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006608:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a7f      	ldr	r2, [pc, #508]	@ (800680c <DMA_SetConfig+0x21c>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d072      	beq.n	80066fa <DMA_SetConfig+0x10a>
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a7d      	ldr	r2, [pc, #500]	@ (8006810 <DMA_SetConfig+0x220>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d06d      	beq.n	80066fa <DMA_SetConfig+0x10a>
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a7c      	ldr	r2, [pc, #496]	@ (8006814 <DMA_SetConfig+0x224>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d068      	beq.n	80066fa <DMA_SetConfig+0x10a>
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a7a      	ldr	r2, [pc, #488]	@ (8006818 <DMA_SetConfig+0x228>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d063      	beq.n	80066fa <DMA_SetConfig+0x10a>
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a79      	ldr	r2, [pc, #484]	@ (800681c <DMA_SetConfig+0x22c>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d05e      	beq.n	80066fa <DMA_SetConfig+0x10a>
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a77      	ldr	r2, [pc, #476]	@ (8006820 <DMA_SetConfig+0x230>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d059      	beq.n	80066fa <DMA_SetConfig+0x10a>
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a76      	ldr	r2, [pc, #472]	@ (8006824 <DMA_SetConfig+0x234>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d054      	beq.n	80066fa <DMA_SetConfig+0x10a>
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a74      	ldr	r2, [pc, #464]	@ (8006828 <DMA_SetConfig+0x238>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d04f      	beq.n	80066fa <DMA_SetConfig+0x10a>
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a73      	ldr	r2, [pc, #460]	@ (800682c <DMA_SetConfig+0x23c>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d04a      	beq.n	80066fa <DMA_SetConfig+0x10a>
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a71      	ldr	r2, [pc, #452]	@ (8006830 <DMA_SetConfig+0x240>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d045      	beq.n	80066fa <DMA_SetConfig+0x10a>
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a70      	ldr	r2, [pc, #448]	@ (8006834 <DMA_SetConfig+0x244>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d040      	beq.n	80066fa <DMA_SetConfig+0x10a>
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a6e      	ldr	r2, [pc, #440]	@ (8006838 <DMA_SetConfig+0x248>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d03b      	beq.n	80066fa <DMA_SetConfig+0x10a>
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a6d      	ldr	r2, [pc, #436]	@ (800683c <DMA_SetConfig+0x24c>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d036      	beq.n	80066fa <DMA_SetConfig+0x10a>
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a6b      	ldr	r2, [pc, #428]	@ (8006840 <DMA_SetConfig+0x250>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d031      	beq.n	80066fa <DMA_SetConfig+0x10a>
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a6a      	ldr	r2, [pc, #424]	@ (8006844 <DMA_SetConfig+0x254>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d02c      	beq.n	80066fa <DMA_SetConfig+0x10a>
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a68      	ldr	r2, [pc, #416]	@ (8006848 <DMA_SetConfig+0x258>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d027      	beq.n	80066fa <DMA_SetConfig+0x10a>
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a67      	ldr	r2, [pc, #412]	@ (800684c <DMA_SetConfig+0x25c>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d022      	beq.n	80066fa <DMA_SetConfig+0x10a>
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a65      	ldr	r2, [pc, #404]	@ (8006850 <DMA_SetConfig+0x260>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d01d      	beq.n	80066fa <DMA_SetConfig+0x10a>
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a64      	ldr	r2, [pc, #400]	@ (8006854 <DMA_SetConfig+0x264>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d018      	beq.n	80066fa <DMA_SetConfig+0x10a>
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a62      	ldr	r2, [pc, #392]	@ (8006858 <DMA_SetConfig+0x268>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d013      	beq.n	80066fa <DMA_SetConfig+0x10a>
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a61      	ldr	r2, [pc, #388]	@ (800685c <DMA_SetConfig+0x26c>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d00e      	beq.n	80066fa <DMA_SetConfig+0x10a>
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a5f      	ldr	r2, [pc, #380]	@ (8006860 <DMA_SetConfig+0x270>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d009      	beq.n	80066fa <DMA_SetConfig+0x10a>
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a5e      	ldr	r2, [pc, #376]	@ (8006864 <DMA_SetConfig+0x274>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d004      	beq.n	80066fa <DMA_SetConfig+0x10a>
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a5c      	ldr	r2, [pc, #368]	@ (8006868 <DMA_SetConfig+0x278>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d101      	bne.n	80066fe <DMA_SetConfig+0x10e>
 80066fa:	2301      	movs	r3, #1
 80066fc:	e000      	b.n	8006700 <DMA_SetConfig+0x110>
 80066fe:	2300      	movs	r3, #0
 8006700:	2b00      	cmp	r3, #0
 8006702:	d00d      	beq.n	8006720 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006708:	68fa      	ldr	r2, [r7, #12]
 800670a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800670c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006712:	2b00      	cmp	r3, #0
 8006714:	d004      	beq.n	8006720 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800671a:	68fa      	ldr	r2, [r7, #12]
 800671c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800671e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a39      	ldr	r2, [pc, #228]	@ (800680c <DMA_SetConfig+0x21c>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d04a      	beq.n	80067c0 <DMA_SetConfig+0x1d0>
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a38      	ldr	r2, [pc, #224]	@ (8006810 <DMA_SetConfig+0x220>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d045      	beq.n	80067c0 <DMA_SetConfig+0x1d0>
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a36      	ldr	r2, [pc, #216]	@ (8006814 <DMA_SetConfig+0x224>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d040      	beq.n	80067c0 <DMA_SetConfig+0x1d0>
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a35      	ldr	r2, [pc, #212]	@ (8006818 <DMA_SetConfig+0x228>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d03b      	beq.n	80067c0 <DMA_SetConfig+0x1d0>
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a33      	ldr	r2, [pc, #204]	@ (800681c <DMA_SetConfig+0x22c>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d036      	beq.n	80067c0 <DMA_SetConfig+0x1d0>
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a32      	ldr	r2, [pc, #200]	@ (8006820 <DMA_SetConfig+0x230>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d031      	beq.n	80067c0 <DMA_SetConfig+0x1d0>
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a30      	ldr	r2, [pc, #192]	@ (8006824 <DMA_SetConfig+0x234>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d02c      	beq.n	80067c0 <DMA_SetConfig+0x1d0>
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a2f      	ldr	r2, [pc, #188]	@ (8006828 <DMA_SetConfig+0x238>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d027      	beq.n	80067c0 <DMA_SetConfig+0x1d0>
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a2d      	ldr	r2, [pc, #180]	@ (800682c <DMA_SetConfig+0x23c>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d022      	beq.n	80067c0 <DMA_SetConfig+0x1d0>
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a2c      	ldr	r2, [pc, #176]	@ (8006830 <DMA_SetConfig+0x240>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d01d      	beq.n	80067c0 <DMA_SetConfig+0x1d0>
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a2a      	ldr	r2, [pc, #168]	@ (8006834 <DMA_SetConfig+0x244>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d018      	beq.n	80067c0 <DMA_SetConfig+0x1d0>
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a29      	ldr	r2, [pc, #164]	@ (8006838 <DMA_SetConfig+0x248>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d013      	beq.n	80067c0 <DMA_SetConfig+0x1d0>
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a27      	ldr	r2, [pc, #156]	@ (800683c <DMA_SetConfig+0x24c>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d00e      	beq.n	80067c0 <DMA_SetConfig+0x1d0>
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a26      	ldr	r2, [pc, #152]	@ (8006840 <DMA_SetConfig+0x250>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d009      	beq.n	80067c0 <DMA_SetConfig+0x1d0>
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a24      	ldr	r2, [pc, #144]	@ (8006844 <DMA_SetConfig+0x254>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d004      	beq.n	80067c0 <DMA_SetConfig+0x1d0>
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a23      	ldr	r2, [pc, #140]	@ (8006848 <DMA_SetConfig+0x258>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d101      	bne.n	80067c4 <DMA_SetConfig+0x1d4>
 80067c0:	2301      	movs	r3, #1
 80067c2:	e000      	b.n	80067c6 <DMA_SetConfig+0x1d6>
 80067c4:	2300      	movs	r3, #0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d059      	beq.n	800687e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067ce:	f003 031f 	and.w	r3, r3, #31
 80067d2:	223f      	movs	r2, #63	@ 0x3f
 80067d4:	409a      	lsls	r2, r3
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80067e8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	683a      	ldr	r2, [r7, #0]
 80067f0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	2b40      	cmp	r3, #64	@ 0x40
 80067f8:	d138      	bne.n	800686c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	68ba      	ldr	r2, [r7, #8]
 8006808:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800680a:	e086      	b.n	800691a <DMA_SetConfig+0x32a>
 800680c:	40020010 	.word	0x40020010
 8006810:	40020028 	.word	0x40020028
 8006814:	40020040 	.word	0x40020040
 8006818:	40020058 	.word	0x40020058
 800681c:	40020070 	.word	0x40020070
 8006820:	40020088 	.word	0x40020088
 8006824:	400200a0 	.word	0x400200a0
 8006828:	400200b8 	.word	0x400200b8
 800682c:	40020410 	.word	0x40020410
 8006830:	40020428 	.word	0x40020428
 8006834:	40020440 	.word	0x40020440
 8006838:	40020458 	.word	0x40020458
 800683c:	40020470 	.word	0x40020470
 8006840:	40020488 	.word	0x40020488
 8006844:	400204a0 	.word	0x400204a0
 8006848:	400204b8 	.word	0x400204b8
 800684c:	58025408 	.word	0x58025408
 8006850:	5802541c 	.word	0x5802541c
 8006854:	58025430 	.word	0x58025430
 8006858:	58025444 	.word	0x58025444
 800685c:	58025458 	.word	0x58025458
 8006860:	5802546c 	.word	0x5802546c
 8006864:	58025480 	.word	0x58025480
 8006868:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	68ba      	ldr	r2, [r7, #8]
 8006872:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	687a      	ldr	r2, [r7, #4]
 800687a:	60da      	str	r2, [r3, #12]
}
 800687c:	e04d      	b.n	800691a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a29      	ldr	r2, [pc, #164]	@ (8006928 <DMA_SetConfig+0x338>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d022      	beq.n	80068ce <DMA_SetConfig+0x2de>
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a27      	ldr	r2, [pc, #156]	@ (800692c <DMA_SetConfig+0x33c>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d01d      	beq.n	80068ce <DMA_SetConfig+0x2de>
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a26      	ldr	r2, [pc, #152]	@ (8006930 <DMA_SetConfig+0x340>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d018      	beq.n	80068ce <DMA_SetConfig+0x2de>
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a24      	ldr	r2, [pc, #144]	@ (8006934 <DMA_SetConfig+0x344>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d013      	beq.n	80068ce <DMA_SetConfig+0x2de>
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a23      	ldr	r2, [pc, #140]	@ (8006938 <DMA_SetConfig+0x348>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d00e      	beq.n	80068ce <DMA_SetConfig+0x2de>
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a21      	ldr	r2, [pc, #132]	@ (800693c <DMA_SetConfig+0x34c>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d009      	beq.n	80068ce <DMA_SetConfig+0x2de>
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a20      	ldr	r2, [pc, #128]	@ (8006940 <DMA_SetConfig+0x350>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d004      	beq.n	80068ce <DMA_SetConfig+0x2de>
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a1e      	ldr	r2, [pc, #120]	@ (8006944 <DMA_SetConfig+0x354>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d101      	bne.n	80068d2 <DMA_SetConfig+0x2e2>
 80068ce:	2301      	movs	r3, #1
 80068d0:	e000      	b.n	80068d4 <DMA_SetConfig+0x2e4>
 80068d2:	2300      	movs	r3, #0
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d020      	beq.n	800691a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068dc:	f003 031f 	and.w	r3, r3, #31
 80068e0:	2201      	movs	r2, #1
 80068e2:	409a      	lsls	r2, r3
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	683a      	ldr	r2, [r7, #0]
 80068ee:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	2b40      	cmp	r3, #64	@ 0x40
 80068f6:	d108      	bne.n	800690a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	68ba      	ldr	r2, [r7, #8]
 8006906:	60da      	str	r2, [r3, #12]
}
 8006908:	e007      	b.n	800691a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	68ba      	ldr	r2, [r7, #8]
 8006910:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	60da      	str	r2, [r3, #12]
}
 800691a:	bf00      	nop
 800691c:	371c      	adds	r7, #28
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr
 8006926:	bf00      	nop
 8006928:	58025408 	.word	0x58025408
 800692c:	5802541c 	.word	0x5802541c
 8006930:	58025430 	.word	0x58025430
 8006934:	58025444 	.word	0x58025444
 8006938:	58025458 	.word	0x58025458
 800693c:	5802546c 	.word	0x5802546c
 8006940:	58025480 	.word	0x58025480
 8006944:	58025494 	.word	0x58025494

08006948 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006948:	b480      	push	{r7}
 800694a:	b085      	sub	sp, #20
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a42      	ldr	r2, [pc, #264]	@ (8006a60 <DMA_CalcBaseAndBitshift+0x118>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d04a      	beq.n	80069f0 <DMA_CalcBaseAndBitshift+0xa8>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a41      	ldr	r2, [pc, #260]	@ (8006a64 <DMA_CalcBaseAndBitshift+0x11c>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d045      	beq.n	80069f0 <DMA_CalcBaseAndBitshift+0xa8>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a3f      	ldr	r2, [pc, #252]	@ (8006a68 <DMA_CalcBaseAndBitshift+0x120>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d040      	beq.n	80069f0 <DMA_CalcBaseAndBitshift+0xa8>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a3e      	ldr	r2, [pc, #248]	@ (8006a6c <DMA_CalcBaseAndBitshift+0x124>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d03b      	beq.n	80069f0 <DMA_CalcBaseAndBitshift+0xa8>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a3c      	ldr	r2, [pc, #240]	@ (8006a70 <DMA_CalcBaseAndBitshift+0x128>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d036      	beq.n	80069f0 <DMA_CalcBaseAndBitshift+0xa8>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a3b      	ldr	r2, [pc, #236]	@ (8006a74 <DMA_CalcBaseAndBitshift+0x12c>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d031      	beq.n	80069f0 <DMA_CalcBaseAndBitshift+0xa8>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a39      	ldr	r2, [pc, #228]	@ (8006a78 <DMA_CalcBaseAndBitshift+0x130>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d02c      	beq.n	80069f0 <DMA_CalcBaseAndBitshift+0xa8>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a38      	ldr	r2, [pc, #224]	@ (8006a7c <DMA_CalcBaseAndBitshift+0x134>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d027      	beq.n	80069f0 <DMA_CalcBaseAndBitshift+0xa8>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a36      	ldr	r2, [pc, #216]	@ (8006a80 <DMA_CalcBaseAndBitshift+0x138>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d022      	beq.n	80069f0 <DMA_CalcBaseAndBitshift+0xa8>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a35      	ldr	r2, [pc, #212]	@ (8006a84 <DMA_CalcBaseAndBitshift+0x13c>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d01d      	beq.n	80069f0 <DMA_CalcBaseAndBitshift+0xa8>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a33      	ldr	r2, [pc, #204]	@ (8006a88 <DMA_CalcBaseAndBitshift+0x140>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d018      	beq.n	80069f0 <DMA_CalcBaseAndBitshift+0xa8>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a32      	ldr	r2, [pc, #200]	@ (8006a8c <DMA_CalcBaseAndBitshift+0x144>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d013      	beq.n	80069f0 <DMA_CalcBaseAndBitshift+0xa8>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a30      	ldr	r2, [pc, #192]	@ (8006a90 <DMA_CalcBaseAndBitshift+0x148>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d00e      	beq.n	80069f0 <DMA_CalcBaseAndBitshift+0xa8>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a2f      	ldr	r2, [pc, #188]	@ (8006a94 <DMA_CalcBaseAndBitshift+0x14c>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d009      	beq.n	80069f0 <DMA_CalcBaseAndBitshift+0xa8>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a2d      	ldr	r2, [pc, #180]	@ (8006a98 <DMA_CalcBaseAndBitshift+0x150>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d004      	beq.n	80069f0 <DMA_CalcBaseAndBitshift+0xa8>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a2c      	ldr	r2, [pc, #176]	@ (8006a9c <DMA_CalcBaseAndBitshift+0x154>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d101      	bne.n	80069f4 <DMA_CalcBaseAndBitshift+0xac>
 80069f0:	2301      	movs	r3, #1
 80069f2:	e000      	b.n	80069f6 <DMA_CalcBaseAndBitshift+0xae>
 80069f4:	2300      	movs	r3, #0
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d024      	beq.n	8006a44 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	b2db      	uxtb	r3, r3
 8006a00:	3b10      	subs	r3, #16
 8006a02:	4a27      	ldr	r2, [pc, #156]	@ (8006aa0 <DMA_CalcBaseAndBitshift+0x158>)
 8006a04:	fba2 2303 	umull	r2, r3, r2, r3
 8006a08:	091b      	lsrs	r3, r3, #4
 8006a0a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f003 0307 	and.w	r3, r3, #7
 8006a12:	4a24      	ldr	r2, [pc, #144]	@ (8006aa4 <DMA_CalcBaseAndBitshift+0x15c>)
 8006a14:	5cd3      	ldrb	r3, [r2, r3]
 8006a16:	461a      	mov	r2, r3
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2b03      	cmp	r3, #3
 8006a20:	d908      	bls.n	8006a34 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	461a      	mov	r2, r3
 8006a28:	4b1f      	ldr	r3, [pc, #124]	@ (8006aa8 <DMA_CalcBaseAndBitshift+0x160>)
 8006a2a:	4013      	ands	r3, r2
 8006a2c:	1d1a      	adds	r2, r3, #4
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	659a      	str	r2, [r3, #88]	@ 0x58
 8006a32:	e00d      	b.n	8006a50 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	461a      	mov	r2, r3
 8006a3a:	4b1b      	ldr	r3, [pc, #108]	@ (8006aa8 <DMA_CalcBaseAndBitshift+0x160>)
 8006a3c:	4013      	ands	r3, r2
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	6593      	str	r3, [r2, #88]	@ 0x58
 8006a42:	e005      	b.n	8006a50 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3714      	adds	r7, #20
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr
 8006a60:	40020010 	.word	0x40020010
 8006a64:	40020028 	.word	0x40020028
 8006a68:	40020040 	.word	0x40020040
 8006a6c:	40020058 	.word	0x40020058
 8006a70:	40020070 	.word	0x40020070
 8006a74:	40020088 	.word	0x40020088
 8006a78:	400200a0 	.word	0x400200a0
 8006a7c:	400200b8 	.word	0x400200b8
 8006a80:	40020410 	.word	0x40020410
 8006a84:	40020428 	.word	0x40020428
 8006a88:	40020440 	.word	0x40020440
 8006a8c:	40020458 	.word	0x40020458
 8006a90:	40020470 	.word	0x40020470
 8006a94:	40020488 	.word	0x40020488
 8006a98:	400204a0 	.word	0x400204a0
 8006a9c:	400204b8 	.word	0x400204b8
 8006aa0:	aaaaaaab 	.word	0xaaaaaaab
 8006aa4:	08011020 	.word	0x08011020
 8006aa8:	fffffc00 	.word	0xfffffc00

08006aac <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b085      	sub	sp, #20
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	699b      	ldr	r3, [r3, #24]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d120      	bne.n	8006b02 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ac4:	2b03      	cmp	r3, #3
 8006ac6:	d858      	bhi.n	8006b7a <DMA_CheckFifoParam+0xce>
 8006ac8:	a201      	add	r2, pc, #4	@ (adr r2, 8006ad0 <DMA_CheckFifoParam+0x24>)
 8006aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ace:	bf00      	nop
 8006ad0:	08006ae1 	.word	0x08006ae1
 8006ad4:	08006af3 	.word	0x08006af3
 8006ad8:	08006ae1 	.word	0x08006ae1
 8006adc:	08006b7b 	.word	0x08006b7b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ae4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d048      	beq.n	8006b7e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006af0:	e045      	b.n	8006b7e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006af6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006afa:	d142      	bne.n	8006b82 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006afc:	2301      	movs	r3, #1
 8006afe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006b00:	e03f      	b.n	8006b82 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	699b      	ldr	r3, [r3, #24]
 8006b06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b0a:	d123      	bne.n	8006b54 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b10:	2b03      	cmp	r3, #3
 8006b12:	d838      	bhi.n	8006b86 <DMA_CheckFifoParam+0xda>
 8006b14:	a201      	add	r2, pc, #4	@ (adr r2, 8006b1c <DMA_CheckFifoParam+0x70>)
 8006b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b1a:	bf00      	nop
 8006b1c:	08006b2d 	.word	0x08006b2d
 8006b20:	08006b33 	.word	0x08006b33
 8006b24:	08006b2d 	.word	0x08006b2d
 8006b28:	08006b45 	.word	0x08006b45
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	73fb      	strb	r3, [r7, #15]
        break;
 8006b30:	e030      	b.n	8006b94 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b36:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d025      	beq.n	8006b8a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006b42:	e022      	b.n	8006b8a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b48:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006b4c:	d11f      	bne.n	8006b8e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006b52:	e01c      	b.n	8006b8e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b58:	2b02      	cmp	r3, #2
 8006b5a:	d902      	bls.n	8006b62 <DMA_CheckFifoParam+0xb6>
 8006b5c:	2b03      	cmp	r3, #3
 8006b5e:	d003      	beq.n	8006b68 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006b60:	e018      	b.n	8006b94 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	73fb      	strb	r3, [r7, #15]
        break;
 8006b66:	e015      	b.n	8006b94 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b6c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d00e      	beq.n	8006b92 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	73fb      	strb	r3, [r7, #15]
    break;
 8006b78:	e00b      	b.n	8006b92 <DMA_CheckFifoParam+0xe6>
        break;
 8006b7a:	bf00      	nop
 8006b7c:	e00a      	b.n	8006b94 <DMA_CheckFifoParam+0xe8>
        break;
 8006b7e:	bf00      	nop
 8006b80:	e008      	b.n	8006b94 <DMA_CheckFifoParam+0xe8>
        break;
 8006b82:	bf00      	nop
 8006b84:	e006      	b.n	8006b94 <DMA_CheckFifoParam+0xe8>
        break;
 8006b86:	bf00      	nop
 8006b88:	e004      	b.n	8006b94 <DMA_CheckFifoParam+0xe8>
        break;
 8006b8a:	bf00      	nop
 8006b8c:	e002      	b.n	8006b94 <DMA_CheckFifoParam+0xe8>
        break;
 8006b8e:	bf00      	nop
 8006b90:	e000      	b.n	8006b94 <DMA_CheckFifoParam+0xe8>
    break;
 8006b92:	bf00      	nop
    }
  }

  return status;
 8006b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3714      	adds	r7, #20
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr
 8006ba2:	bf00      	nop

08006ba4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b085      	sub	sp, #20
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a38      	ldr	r2, [pc, #224]	@ (8006c98 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d022      	beq.n	8006c02 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a36      	ldr	r2, [pc, #216]	@ (8006c9c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d01d      	beq.n	8006c02 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a35      	ldr	r2, [pc, #212]	@ (8006ca0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d018      	beq.n	8006c02 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a33      	ldr	r2, [pc, #204]	@ (8006ca4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d013      	beq.n	8006c02 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a32      	ldr	r2, [pc, #200]	@ (8006ca8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d00e      	beq.n	8006c02 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a30      	ldr	r2, [pc, #192]	@ (8006cac <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d009      	beq.n	8006c02 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a2f      	ldr	r2, [pc, #188]	@ (8006cb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d004      	beq.n	8006c02 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a2d      	ldr	r2, [pc, #180]	@ (8006cb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d101      	bne.n	8006c06 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006c02:	2301      	movs	r3, #1
 8006c04:	e000      	b.n	8006c08 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006c06:	2300      	movs	r3, #0
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d01a      	beq.n	8006c42 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	3b08      	subs	r3, #8
 8006c14:	4a28      	ldr	r2, [pc, #160]	@ (8006cb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006c16:	fba2 2303 	umull	r2, r3, r2, r3
 8006c1a:	091b      	lsrs	r3, r3, #4
 8006c1c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006c1e:	68fa      	ldr	r2, [r7, #12]
 8006c20:	4b26      	ldr	r3, [pc, #152]	@ (8006cbc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006c22:	4413      	add	r3, r2
 8006c24:	009b      	lsls	r3, r3, #2
 8006c26:	461a      	mov	r2, r3
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	4a24      	ldr	r2, [pc, #144]	@ (8006cc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006c30:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	f003 031f 	and.w	r3, r3, #31
 8006c38:	2201      	movs	r2, #1
 8006c3a:	409a      	lsls	r2, r3
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006c40:	e024      	b.n	8006c8c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	b2db      	uxtb	r3, r3
 8006c48:	3b10      	subs	r3, #16
 8006c4a:	4a1e      	ldr	r2, [pc, #120]	@ (8006cc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c50:	091b      	lsrs	r3, r3, #4
 8006c52:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	4a1c      	ldr	r2, [pc, #112]	@ (8006cc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d806      	bhi.n	8006c6a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	4a1b      	ldr	r2, [pc, #108]	@ (8006ccc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d902      	bls.n	8006c6a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	3308      	adds	r3, #8
 8006c68:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006c6a:	68fa      	ldr	r2, [r7, #12]
 8006c6c:	4b18      	ldr	r3, [pc, #96]	@ (8006cd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006c6e:	4413      	add	r3, r2
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	461a      	mov	r2, r3
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4a16      	ldr	r2, [pc, #88]	@ (8006cd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006c7c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f003 031f 	and.w	r3, r3, #31
 8006c84:	2201      	movs	r2, #1
 8006c86:	409a      	lsls	r2, r3
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006c8c:	bf00      	nop
 8006c8e:	3714      	adds	r7, #20
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr
 8006c98:	58025408 	.word	0x58025408
 8006c9c:	5802541c 	.word	0x5802541c
 8006ca0:	58025430 	.word	0x58025430
 8006ca4:	58025444 	.word	0x58025444
 8006ca8:	58025458 	.word	0x58025458
 8006cac:	5802546c 	.word	0x5802546c
 8006cb0:	58025480 	.word	0x58025480
 8006cb4:	58025494 	.word	0x58025494
 8006cb8:	cccccccd 	.word	0xcccccccd
 8006cbc:	16009600 	.word	0x16009600
 8006cc0:	58025880 	.word	0x58025880
 8006cc4:	aaaaaaab 	.word	0xaaaaaaab
 8006cc8:	400204b8 	.word	0x400204b8
 8006ccc:	4002040f 	.word	0x4002040f
 8006cd0:	10008200 	.word	0x10008200
 8006cd4:	40020880 	.word	0x40020880

08006cd8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b085      	sub	sp, #20
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d04a      	beq.n	8006d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2b08      	cmp	r3, #8
 8006cf2:	d847      	bhi.n	8006d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a25      	ldr	r2, [pc, #148]	@ (8006d90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d022      	beq.n	8006d44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a24      	ldr	r2, [pc, #144]	@ (8006d94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d01d      	beq.n	8006d44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a22      	ldr	r2, [pc, #136]	@ (8006d98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d018      	beq.n	8006d44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a21      	ldr	r2, [pc, #132]	@ (8006d9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d013      	beq.n	8006d44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a1f      	ldr	r2, [pc, #124]	@ (8006da0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d00e      	beq.n	8006d44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a1e      	ldr	r2, [pc, #120]	@ (8006da4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d009      	beq.n	8006d44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a1c      	ldr	r2, [pc, #112]	@ (8006da8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d004      	beq.n	8006d44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a1b      	ldr	r2, [pc, #108]	@ (8006dac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d101      	bne.n	8006d48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006d44:	2301      	movs	r3, #1
 8006d46:	e000      	b.n	8006d4a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006d48:	2300      	movs	r3, #0
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d00a      	beq.n	8006d64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006d4e:	68fa      	ldr	r2, [r7, #12]
 8006d50:	4b17      	ldr	r3, [pc, #92]	@ (8006db0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006d52:	4413      	add	r3, r2
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	461a      	mov	r2, r3
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	4a15      	ldr	r2, [pc, #84]	@ (8006db4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006d60:	671a      	str	r2, [r3, #112]	@ 0x70
 8006d62:	e009      	b.n	8006d78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006d64:	68fa      	ldr	r2, [r7, #12]
 8006d66:	4b14      	ldr	r3, [pc, #80]	@ (8006db8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006d68:	4413      	add	r3, r2
 8006d6a:	009b      	lsls	r3, r3, #2
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	4a11      	ldr	r2, [pc, #68]	@ (8006dbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006d76:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	3b01      	subs	r3, #1
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	409a      	lsls	r2, r3
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8006d84:	bf00      	nop
 8006d86:	3714      	adds	r7, #20
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr
 8006d90:	58025408 	.word	0x58025408
 8006d94:	5802541c 	.word	0x5802541c
 8006d98:	58025430 	.word	0x58025430
 8006d9c:	58025444 	.word	0x58025444
 8006da0:	58025458 	.word	0x58025458
 8006da4:	5802546c 	.word	0x5802546c
 8006da8:	58025480 	.word	0x58025480
 8006dac:	58025494 	.word	0x58025494
 8006db0:	1600963f 	.word	0x1600963f
 8006db4:	58025940 	.word	0x58025940
 8006db8:	1000823f 	.word	0x1000823f
 8006dbc:	40020940 	.word	0x40020940

08006dc0 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b087      	sub	sp, #28
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	460b      	mov	r3, r1
 8006dca:	607a      	str	r2, [r7, #4]
 8006dcc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d101      	bne.n	8006ddc <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	e00a      	b.n	8006df2 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8006ddc:	7afb      	ldrb	r3, [r7, #11]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d103      	bne.n	8006dea <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	605a      	str	r2, [r3, #4]
      break;
 8006de8:	e002      	b.n	8006df0 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8006dea:	2301      	movs	r3, #1
 8006dec:	75fb      	strb	r3, [r7, #23]
      break;
 8006dee:	bf00      	nop
  }

  return status;
 8006df0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	371c      	adds	r7, #28
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr

08006dfe <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8006dfe:	b480      	push	{r7}
 8006e00:	b083      	sub	sp, #12
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]
 8006e06:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d101      	bne.n	8006e12 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e003      	b.n	8006e1a <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	683a      	ldr	r2, [r7, #0]
 8006e16:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8006e18:	2300      	movs	r3, #0
  }
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	370c      	adds	r7, #12
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e24:	4770      	bx	lr
	...

08006e28 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b086      	sub	sp, #24
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	0c1b      	lsrs	r3, r3, #16
 8006e36:	f003 0303 	and.w	r3, r3, #3
 8006e3a:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f003 031f 	and.w	r3, r3, #31
 8006e44:	2201      	movs	r2, #1
 8006e46:	fa02 f303 	lsl.w	r3, r2, r3
 8006e4a:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8006e4c:	f7fd f96a 	bl	8004124 <HAL_GetCurrentCPUID>
 8006e50:	4603      	mov	r3, r0
 8006e52:	2b03      	cmp	r3, #3
 8006e54:	d105      	bne.n	8006e62 <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	011a      	lsls	r2, r3, #4
 8006e5a:	4b0f      	ldr	r3, [pc, #60]	@ (8006e98 <HAL_EXTI_IRQHandler+0x70>)
 8006e5c:	4413      	add	r3, r2
 8006e5e:	617b      	str	r3, [r7, #20]
 8006e60:	e004      	b.n	8006e6c <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	011a      	lsls	r2, r3, #4
 8006e66:	4b0d      	ldr	r3, [pc, #52]	@ (8006e9c <HAL_EXTI_IRQHandler+0x74>)
 8006e68:	4413      	add	r3, r2
 8006e6a:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	68fa      	ldr	r2, [r7, #12]
 8006e72:	4013      	ands	r3, r2
 8006e74:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d009      	beq.n	8006e90 <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	68fa      	ldr	r2, [r7, #12]
 8006e80:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d002      	beq.n	8006e90 <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	4798      	blx	r3
    }
  }
}
 8006e90:	bf00      	nop
 8006e92:	3718      	adds	r7, #24
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}
 8006e98:	58000088 	.word	0x58000088
 8006e9c:	580000c8 	.word	0x580000c8

08006ea0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b089      	sub	sp, #36	@ 0x24
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006eae:	4b89      	ldr	r3, [pc, #548]	@ (80070d4 <HAL_GPIO_Init+0x234>)
 8006eb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006eb2:	e194      	b.n	80071de <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	2101      	movs	r1, #1
 8006eba:	69fb      	ldr	r3, [r7, #28]
 8006ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8006ec0:	4013      	ands	r3, r2
 8006ec2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	f000 8186 	beq.w	80071d8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	f003 0303 	and.w	r3, r3, #3
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d005      	beq.n	8006ee4 <HAL_GPIO_Init+0x44>
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	f003 0303 	and.w	r3, r3, #3
 8006ee0:	2b02      	cmp	r3, #2
 8006ee2:	d130      	bne.n	8006f46 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	689b      	ldr	r3, [r3, #8]
 8006ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006eea:	69fb      	ldr	r3, [r7, #28]
 8006eec:	005b      	lsls	r3, r3, #1
 8006eee:	2203      	movs	r2, #3
 8006ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ef4:	43db      	mvns	r3, r3
 8006ef6:	69ba      	ldr	r2, [r7, #24]
 8006ef8:	4013      	ands	r3, r2
 8006efa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	68da      	ldr	r2, [r3, #12]
 8006f00:	69fb      	ldr	r3, [r7, #28]
 8006f02:	005b      	lsls	r3, r3, #1
 8006f04:	fa02 f303 	lsl.w	r3, r2, r3
 8006f08:	69ba      	ldr	r2, [r7, #24]
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	69ba      	ldr	r2, [r7, #24]
 8006f12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	69fb      	ldr	r3, [r7, #28]
 8006f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f22:	43db      	mvns	r3, r3
 8006f24:	69ba      	ldr	r2, [r7, #24]
 8006f26:	4013      	ands	r3, r2
 8006f28:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	091b      	lsrs	r3, r3, #4
 8006f30:	f003 0201 	and.w	r2, r3, #1
 8006f34:	69fb      	ldr	r3, [r7, #28]
 8006f36:	fa02 f303 	lsl.w	r3, r2, r3
 8006f3a:	69ba      	ldr	r2, [r7, #24]
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	69ba      	ldr	r2, [r7, #24]
 8006f44:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	f003 0303 	and.w	r3, r3, #3
 8006f4e:	2b03      	cmp	r3, #3
 8006f50:	d017      	beq.n	8006f82 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	68db      	ldr	r3, [r3, #12]
 8006f56:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006f58:	69fb      	ldr	r3, [r7, #28]
 8006f5a:	005b      	lsls	r3, r3, #1
 8006f5c:	2203      	movs	r2, #3
 8006f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f62:	43db      	mvns	r3, r3
 8006f64:	69ba      	ldr	r2, [r7, #24]
 8006f66:	4013      	ands	r3, r2
 8006f68:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	689a      	ldr	r2, [r3, #8]
 8006f6e:	69fb      	ldr	r3, [r7, #28]
 8006f70:	005b      	lsls	r3, r3, #1
 8006f72:	fa02 f303 	lsl.w	r3, r2, r3
 8006f76:	69ba      	ldr	r2, [r7, #24]
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	69ba      	ldr	r2, [r7, #24]
 8006f80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	f003 0303 	and.w	r3, r3, #3
 8006f8a:	2b02      	cmp	r3, #2
 8006f8c:	d123      	bne.n	8006fd6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006f8e:	69fb      	ldr	r3, [r7, #28]
 8006f90:	08da      	lsrs	r2, r3, #3
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	3208      	adds	r2, #8
 8006f96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006f9c:	69fb      	ldr	r3, [r7, #28]
 8006f9e:	f003 0307 	and.w	r3, r3, #7
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	220f      	movs	r2, #15
 8006fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8006faa:	43db      	mvns	r3, r3
 8006fac:	69ba      	ldr	r2, [r7, #24]
 8006fae:	4013      	ands	r3, r2
 8006fb0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	691a      	ldr	r2, [r3, #16]
 8006fb6:	69fb      	ldr	r3, [r7, #28]
 8006fb8:	f003 0307 	and.w	r3, r3, #7
 8006fbc:	009b      	lsls	r3, r3, #2
 8006fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8006fc2:	69ba      	ldr	r2, [r7, #24]
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	08da      	lsrs	r2, r3, #3
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	3208      	adds	r2, #8
 8006fd0:	69b9      	ldr	r1, [r7, #24]
 8006fd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006fdc:	69fb      	ldr	r3, [r7, #28]
 8006fde:	005b      	lsls	r3, r3, #1
 8006fe0:	2203      	movs	r2, #3
 8006fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8006fe6:	43db      	mvns	r3, r3
 8006fe8:	69ba      	ldr	r2, [r7, #24]
 8006fea:	4013      	ands	r3, r2
 8006fec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	f003 0203 	and.w	r2, r3, #3
 8006ff6:	69fb      	ldr	r3, [r7, #28]
 8006ff8:	005b      	lsls	r3, r3, #1
 8006ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8006ffe:	69ba      	ldr	r2, [r7, #24]
 8007000:	4313      	orrs	r3, r2
 8007002:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	69ba      	ldr	r2, [r7, #24]
 8007008:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007012:	2b00      	cmp	r3, #0
 8007014:	f000 80e0 	beq.w	80071d8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007018:	4b2f      	ldr	r3, [pc, #188]	@ (80070d8 <HAL_GPIO_Init+0x238>)
 800701a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800701e:	4a2e      	ldr	r2, [pc, #184]	@ (80070d8 <HAL_GPIO_Init+0x238>)
 8007020:	f043 0302 	orr.w	r3, r3, #2
 8007024:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8007028:	4b2b      	ldr	r3, [pc, #172]	@ (80070d8 <HAL_GPIO_Init+0x238>)
 800702a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800702e:	f003 0302 	and.w	r3, r3, #2
 8007032:	60fb      	str	r3, [r7, #12]
 8007034:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007036:	4a29      	ldr	r2, [pc, #164]	@ (80070dc <HAL_GPIO_Init+0x23c>)
 8007038:	69fb      	ldr	r3, [r7, #28]
 800703a:	089b      	lsrs	r3, r3, #2
 800703c:	3302      	adds	r3, #2
 800703e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007042:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007044:	69fb      	ldr	r3, [r7, #28]
 8007046:	f003 0303 	and.w	r3, r3, #3
 800704a:	009b      	lsls	r3, r3, #2
 800704c:	220f      	movs	r2, #15
 800704e:	fa02 f303 	lsl.w	r3, r2, r3
 8007052:	43db      	mvns	r3, r3
 8007054:	69ba      	ldr	r2, [r7, #24]
 8007056:	4013      	ands	r3, r2
 8007058:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4a20      	ldr	r2, [pc, #128]	@ (80070e0 <HAL_GPIO_Init+0x240>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d052      	beq.n	8007108 <HAL_GPIO_Init+0x268>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	4a1f      	ldr	r2, [pc, #124]	@ (80070e4 <HAL_GPIO_Init+0x244>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d031      	beq.n	80070ce <HAL_GPIO_Init+0x22e>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	4a1e      	ldr	r2, [pc, #120]	@ (80070e8 <HAL_GPIO_Init+0x248>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d02b      	beq.n	80070ca <HAL_GPIO_Init+0x22a>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4a1d      	ldr	r2, [pc, #116]	@ (80070ec <HAL_GPIO_Init+0x24c>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d025      	beq.n	80070c6 <HAL_GPIO_Init+0x226>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	4a1c      	ldr	r2, [pc, #112]	@ (80070f0 <HAL_GPIO_Init+0x250>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d01f      	beq.n	80070c2 <HAL_GPIO_Init+0x222>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	4a1b      	ldr	r2, [pc, #108]	@ (80070f4 <HAL_GPIO_Init+0x254>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d019      	beq.n	80070be <HAL_GPIO_Init+0x21e>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	4a1a      	ldr	r2, [pc, #104]	@ (80070f8 <HAL_GPIO_Init+0x258>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d013      	beq.n	80070ba <HAL_GPIO_Init+0x21a>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	4a19      	ldr	r2, [pc, #100]	@ (80070fc <HAL_GPIO_Init+0x25c>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d00d      	beq.n	80070b6 <HAL_GPIO_Init+0x216>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	4a18      	ldr	r2, [pc, #96]	@ (8007100 <HAL_GPIO_Init+0x260>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d007      	beq.n	80070b2 <HAL_GPIO_Init+0x212>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	4a17      	ldr	r2, [pc, #92]	@ (8007104 <HAL_GPIO_Init+0x264>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d101      	bne.n	80070ae <HAL_GPIO_Init+0x20e>
 80070aa:	2309      	movs	r3, #9
 80070ac:	e02d      	b.n	800710a <HAL_GPIO_Init+0x26a>
 80070ae:	230a      	movs	r3, #10
 80070b0:	e02b      	b.n	800710a <HAL_GPIO_Init+0x26a>
 80070b2:	2308      	movs	r3, #8
 80070b4:	e029      	b.n	800710a <HAL_GPIO_Init+0x26a>
 80070b6:	2307      	movs	r3, #7
 80070b8:	e027      	b.n	800710a <HAL_GPIO_Init+0x26a>
 80070ba:	2306      	movs	r3, #6
 80070bc:	e025      	b.n	800710a <HAL_GPIO_Init+0x26a>
 80070be:	2305      	movs	r3, #5
 80070c0:	e023      	b.n	800710a <HAL_GPIO_Init+0x26a>
 80070c2:	2304      	movs	r3, #4
 80070c4:	e021      	b.n	800710a <HAL_GPIO_Init+0x26a>
 80070c6:	2303      	movs	r3, #3
 80070c8:	e01f      	b.n	800710a <HAL_GPIO_Init+0x26a>
 80070ca:	2302      	movs	r3, #2
 80070cc:	e01d      	b.n	800710a <HAL_GPIO_Init+0x26a>
 80070ce:	2301      	movs	r3, #1
 80070d0:	e01b      	b.n	800710a <HAL_GPIO_Init+0x26a>
 80070d2:	bf00      	nop
 80070d4:	58000080 	.word	0x58000080
 80070d8:	58024400 	.word	0x58024400
 80070dc:	58000400 	.word	0x58000400
 80070e0:	58020000 	.word	0x58020000
 80070e4:	58020400 	.word	0x58020400
 80070e8:	58020800 	.word	0x58020800
 80070ec:	58020c00 	.word	0x58020c00
 80070f0:	58021000 	.word	0x58021000
 80070f4:	58021400 	.word	0x58021400
 80070f8:	58021800 	.word	0x58021800
 80070fc:	58021c00 	.word	0x58021c00
 8007100:	58022000 	.word	0x58022000
 8007104:	58022400 	.word	0x58022400
 8007108:	2300      	movs	r3, #0
 800710a:	69fa      	ldr	r2, [r7, #28]
 800710c:	f002 0203 	and.w	r2, r2, #3
 8007110:	0092      	lsls	r2, r2, #2
 8007112:	4093      	lsls	r3, r2
 8007114:	69ba      	ldr	r2, [r7, #24]
 8007116:	4313      	orrs	r3, r2
 8007118:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800711a:	4938      	ldr	r1, [pc, #224]	@ (80071fc <HAL_GPIO_Init+0x35c>)
 800711c:	69fb      	ldr	r3, [r7, #28]
 800711e:	089b      	lsrs	r3, r3, #2
 8007120:	3302      	adds	r3, #2
 8007122:	69ba      	ldr	r2, [r7, #24]
 8007124:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007128:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	43db      	mvns	r3, r3
 8007134:	69ba      	ldr	r2, [r7, #24]
 8007136:	4013      	ands	r3, r2
 8007138:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007142:	2b00      	cmp	r3, #0
 8007144:	d003      	beq.n	800714e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007146:	69ba      	ldr	r2, [r7, #24]
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	4313      	orrs	r3, r2
 800714c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800714e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007152:	69bb      	ldr	r3, [r7, #24]
 8007154:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007156:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	43db      	mvns	r3, r3
 8007162:	69ba      	ldr	r2, [r7, #24]
 8007164:	4013      	ands	r3, r2
 8007166:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007170:	2b00      	cmp	r3, #0
 8007172:	d003      	beq.n	800717c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007174:	69ba      	ldr	r2, [r7, #24]
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	4313      	orrs	r3, r2
 800717a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800717c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007180:	69bb      	ldr	r3, [r7, #24]
 8007182:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	43db      	mvns	r3, r3
 800718e:	69ba      	ldr	r2, [r7, #24]
 8007190:	4013      	ands	r3, r2
 8007192:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800719c:	2b00      	cmp	r3, #0
 800719e:	d003      	beq.n	80071a8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80071a0:	69ba      	ldr	r2, [r7, #24]
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	4313      	orrs	r3, r2
 80071a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	69ba      	ldr	r2, [r7, #24]
 80071ac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	43db      	mvns	r3, r3
 80071b8:	69ba      	ldr	r2, [r7, #24]
 80071ba:	4013      	ands	r3, r2
 80071bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d003      	beq.n	80071d2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80071ca:	69ba      	ldr	r2, [r7, #24]
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	4313      	orrs	r3, r2
 80071d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	69ba      	ldr	r2, [r7, #24]
 80071d6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80071d8:	69fb      	ldr	r3, [r7, #28]
 80071da:	3301      	adds	r3, #1
 80071dc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	69fb      	ldr	r3, [r7, #28]
 80071e4:	fa22 f303 	lsr.w	r3, r2, r3
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	f47f ae63 	bne.w	8006eb4 <HAL_GPIO_Init+0x14>
  }
}
 80071ee:	bf00      	nop
 80071f0:	bf00      	nop
 80071f2:	3724      	adds	r7, #36	@ 0x24
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr
 80071fc:	58000400 	.word	0x58000400

08007200 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007200:	b480      	push	{r7}
 8007202:	b083      	sub	sp, #12
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	460b      	mov	r3, r1
 800720a:	807b      	strh	r3, [r7, #2]
 800720c:	4613      	mov	r3, r2
 800720e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007210:	787b      	ldrb	r3, [r7, #1]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d003      	beq.n	800721e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007216:	887a      	ldrh	r2, [r7, #2]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800721c:	e003      	b.n	8007226 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800721e:	887b      	ldrh	r3, [r7, #2]
 8007220:	041a      	lsls	r2, r3, #16
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	619a      	str	r2, [r3, #24]
}
 8007226:	bf00      	nop
 8007228:	370c      	adds	r7, #12
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr

08007232 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007232:	b480      	push	{r7}
 8007234:	b085      	sub	sp, #20
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]
 800723a:	460b      	mov	r3, r1
 800723c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	695b      	ldr	r3, [r3, #20]
 8007242:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007244:	887a      	ldrh	r2, [r7, #2]
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	4013      	ands	r3, r2
 800724a:	041a      	lsls	r2, r3, #16
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	43d9      	mvns	r1, r3
 8007250:	887b      	ldrh	r3, [r7, #2]
 8007252:	400b      	ands	r3, r1
 8007254:	431a      	orrs	r2, r3
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	619a      	str	r2, [r3, #24]
}
 800725a:	bf00      	nop
 800725c:	3714      	adds	r7, #20
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr
	...

08007268 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8007268:	b480      	push	{r7}
 800726a:	b083      	sub	sp, #12
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8007270:	4a08      	ldr	r2, [pc, #32]	@ (8007294 <HAL_HSEM_FastTake+0x2c>)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	3320      	adds	r3, #32
 8007276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800727a:	4a07      	ldr	r2, [pc, #28]	@ (8007298 <HAL_HSEM_FastTake+0x30>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d101      	bne.n	8007284 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8007280:	2300      	movs	r3, #0
 8007282:	e000      	b.n	8007286 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8007284:	2301      	movs	r3, #1
}
 8007286:	4618      	mov	r0, r3
 8007288:	370c      	adds	r7, #12
 800728a:	46bd      	mov	sp, r7
 800728c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007290:	4770      	bx	lr
 8007292:	bf00      	nop
 8007294:	58026400 	.word	0x58026400
 8007298:	80000300 	.word	0x80000300

0800729c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800729c:	b480      	push	{r7}
 800729e:	b083      	sub	sp, #12
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80072a6:	4906      	ldr	r1, [pc, #24]	@ (80072c0 <HAL_HSEM_Release+0x24>)
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80072b4:	bf00      	nop
 80072b6:	370c      	adds	r7, #12
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr
 80072c0:	58026400 	.word	0x58026400

080072c4 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b084      	sub	sp, #16
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80072cc:	4b29      	ldr	r3, [pc, #164]	@ (8007374 <HAL_PWREx_ConfigSupply+0xb0>)
 80072ce:	68db      	ldr	r3, [r3, #12]
 80072d0:	f003 0307 	and.w	r3, r3, #7
 80072d4:	2b06      	cmp	r3, #6
 80072d6:	d00a      	beq.n	80072ee <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80072d8:	4b26      	ldr	r3, [pc, #152]	@ (8007374 <HAL_PWREx_ConfigSupply+0xb0>)
 80072da:	68db      	ldr	r3, [r3, #12]
 80072dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	429a      	cmp	r2, r3
 80072e4:	d001      	beq.n	80072ea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80072e6:	2301      	movs	r3, #1
 80072e8:	e040      	b.n	800736c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80072ea:	2300      	movs	r3, #0
 80072ec:	e03e      	b.n	800736c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80072ee:	4b21      	ldr	r3, [pc, #132]	@ (8007374 <HAL_PWREx_ConfigSupply+0xb0>)
 80072f0:	68db      	ldr	r3, [r3, #12]
 80072f2:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80072f6:	491f      	ldr	r1, [pc, #124]	@ (8007374 <HAL_PWREx_ConfigSupply+0xb0>)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	4313      	orrs	r3, r2
 80072fc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80072fe:	f7fb f87f 	bl	8002400 <HAL_GetTick>
 8007302:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007304:	e009      	b.n	800731a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007306:	f7fb f87b 	bl	8002400 <HAL_GetTick>
 800730a:	4602      	mov	r2, r0
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	1ad3      	subs	r3, r2, r3
 8007310:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007314:	d901      	bls.n	800731a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007316:	2301      	movs	r3, #1
 8007318:	e028      	b.n	800736c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800731a:	4b16      	ldr	r3, [pc, #88]	@ (8007374 <HAL_PWREx_ConfigSupply+0xb0>)
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007322:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007326:	d1ee      	bne.n	8007306 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2b1e      	cmp	r3, #30
 800732c:	d008      	beq.n	8007340 <HAL_PWREx_ConfigSupply+0x7c>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2b2e      	cmp	r3, #46	@ 0x2e
 8007332:	d005      	beq.n	8007340 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2b1d      	cmp	r3, #29
 8007338:	d002      	beq.n	8007340 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2b2d      	cmp	r3, #45	@ 0x2d
 800733e:	d114      	bne.n	800736a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8007340:	f7fb f85e 	bl	8002400 <HAL_GetTick>
 8007344:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8007346:	e009      	b.n	800735c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007348:	f7fb f85a 	bl	8002400 <HAL_GetTick>
 800734c:	4602      	mov	r2, r0
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	1ad3      	subs	r3, r2, r3
 8007352:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007356:	d901      	bls.n	800735c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8007358:	2301      	movs	r3, #1
 800735a:	e007      	b.n	800736c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800735c:	4b05      	ldr	r3, [pc, #20]	@ (8007374 <HAL_PWREx_ConfigSupply+0xb0>)
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007364:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007368:	d1ee      	bne.n	8007348 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800736a:	2300      	movs	r3, #0
}
 800736c:	4618      	mov	r0, r3
 800736e:	3710      	adds	r7, #16
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}
 8007374:	58024800 	.word	0x58024800

08007378 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b08c      	sub	sp, #48	@ 0x30
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d102      	bne.n	800738c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007386:	2301      	movs	r3, #1
 8007388:	f000 bc48 	b.w	8007c1c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f003 0301 	and.w	r3, r3, #1
 8007394:	2b00      	cmp	r3, #0
 8007396:	f000 8088 	beq.w	80074aa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800739a:	4b99      	ldr	r3, [pc, #612]	@ (8007600 <HAL_RCC_OscConfig+0x288>)
 800739c:	691b      	ldr	r3, [r3, #16]
 800739e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80073a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80073a4:	4b96      	ldr	r3, [pc, #600]	@ (8007600 <HAL_RCC_OscConfig+0x288>)
 80073a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80073aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073ac:	2b10      	cmp	r3, #16
 80073ae:	d007      	beq.n	80073c0 <HAL_RCC_OscConfig+0x48>
 80073b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073b2:	2b18      	cmp	r3, #24
 80073b4:	d111      	bne.n	80073da <HAL_RCC_OscConfig+0x62>
 80073b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073b8:	f003 0303 	and.w	r3, r3, #3
 80073bc:	2b02      	cmp	r3, #2
 80073be:	d10c      	bne.n	80073da <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073c0:	4b8f      	ldr	r3, [pc, #572]	@ (8007600 <HAL_RCC_OscConfig+0x288>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d06d      	beq.n	80074a8 <HAL_RCC_OscConfig+0x130>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d169      	bne.n	80074a8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80073d4:	2301      	movs	r3, #1
 80073d6:	f000 bc21 	b.w	8007c1c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073e2:	d106      	bne.n	80073f2 <HAL_RCC_OscConfig+0x7a>
 80073e4:	4b86      	ldr	r3, [pc, #536]	@ (8007600 <HAL_RCC_OscConfig+0x288>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a85      	ldr	r2, [pc, #532]	@ (8007600 <HAL_RCC_OscConfig+0x288>)
 80073ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80073ee:	6013      	str	r3, [r2, #0]
 80073f0:	e02e      	b.n	8007450 <HAL_RCC_OscConfig+0xd8>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d10c      	bne.n	8007414 <HAL_RCC_OscConfig+0x9c>
 80073fa:	4b81      	ldr	r3, [pc, #516]	@ (8007600 <HAL_RCC_OscConfig+0x288>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a80      	ldr	r2, [pc, #512]	@ (8007600 <HAL_RCC_OscConfig+0x288>)
 8007400:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007404:	6013      	str	r3, [r2, #0]
 8007406:	4b7e      	ldr	r3, [pc, #504]	@ (8007600 <HAL_RCC_OscConfig+0x288>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a7d      	ldr	r2, [pc, #500]	@ (8007600 <HAL_RCC_OscConfig+0x288>)
 800740c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007410:	6013      	str	r3, [r2, #0]
 8007412:	e01d      	b.n	8007450 <HAL_RCC_OscConfig+0xd8>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800741c:	d10c      	bne.n	8007438 <HAL_RCC_OscConfig+0xc0>
 800741e:	4b78      	ldr	r3, [pc, #480]	@ (8007600 <HAL_RCC_OscConfig+0x288>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a77      	ldr	r2, [pc, #476]	@ (8007600 <HAL_RCC_OscConfig+0x288>)
 8007424:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007428:	6013      	str	r3, [r2, #0]
 800742a:	4b75      	ldr	r3, [pc, #468]	@ (8007600 <HAL_RCC_OscConfig+0x288>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a74      	ldr	r2, [pc, #464]	@ (8007600 <HAL_RCC_OscConfig+0x288>)
 8007430:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007434:	6013      	str	r3, [r2, #0]
 8007436:	e00b      	b.n	8007450 <HAL_RCC_OscConfig+0xd8>
 8007438:	4b71      	ldr	r3, [pc, #452]	@ (8007600 <HAL_RCC_OscConfig+0x288>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a70      	ldr	r2, [pc, #448]	@ (8007600 <HAL_RCC_OscConfig+0x288>)
 800743e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007442:	6013      	str	r3, [r2, #0]
 8007444:	4b6e      	ldr	r3, [pc, #440]	@ (8007600 <HAL_RCC_OscConfig+0x288>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a6d      	ldr	r2, [pc, #436]	@ (8007600 <HAL_RCC_OscConfig+0x288>)
 800744a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800744e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d013      	beq.n	8007480 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007458:	f7fa ffd2 	bl	8002400 <HAL_GetTick>
 800745c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800745e:	e008      	b.n	8007472 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007460:	f7fa ffce 	bl	8002400 <HAL_GetTick>
 8007464:	4602      	mov	r2, r0
 8007466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007468:	1ad3      	subs	r3, r2, r3
 800746a:	2b64      	cmp	r3, #100	@ 0x64
 800746c:	d901      	bls.n	8007472 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800746e:	2303      	movs	r3, #3
 8007470:	e3d4      	b.n	8007c1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007472:	4b63      	ldr	r3, [pc, #396]	@ (8007600 <HAL_RCC_OscConfig+0x288>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800747a:	2b00      	cmp	r3, #0
 800747c:	d0f0      	beq.n	8007460 <HAL_RCC_OscConfig+0xe8>
 800747e:	e014      	b.n	80074aa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007480:	f7fa ffbe 	bl	8002400 <HAL_GetTick>
 8007484:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007486:	e008      	b.n	800749a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007488:	f7fa ffba 	bl	8002400 <HAL_GetTick>
 800748c:	4602      	mov	r2, r0
 800748e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007490:	1ad3      	subs	r3, r2, r3
 8007492:	2b64      	cmp	r3, #100	@ 0x64
 8007494:	d901      	bls.n	800749a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007496:	2303      	movs	r3, #3
 8007498:	e3c0      	b.n	8007c1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800749a:	4b59      	ldr	r3, [pc, #356]	@ (8007600 <HAL_RCC_OscConfig+0x288>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d1f0      	bne.n	8007488 <HAL_RCC_OscConfig+0x110>
 80074a6:	e000      	b.n	80074aa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f003 0302 	and.w	r3, r3, #2
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	f000 80ca 	beq.w	800764c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80074b8:	4b51      	ldr	r3, [pc, #324]	@ (8007600 <HAL_RCC_OscConfig+0x288>)
 80074ba:	691b      	ldr	r3, [r3, #16]
 80074bc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80074c0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80074c2:	4b4f      	ldr	r3, [pc, #316]	@ (8007600 <HAL_RCC_OscConfig+0x288>)
 80074c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074c6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80074c8:	6a3b      	ldr	r3, [r7, #32]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d007      	beq.n	80074de <HAL_RCC_OscConfig+0x166>
 80074ce:	6a3b      	ldr	r3, [r7, #32]
 80074d0:	2b18      	cmp	r3, #24
 80074d2:	d156      	bne.n	8007582 <HAL_RCC_OscConfig+0x20a>
 80074d4:	69fb      	ldr	r3, [r7, #28]
 80074d6:	f003 0303 	and.w	r3, r3, #3
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d151      	bne.n	8007582 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80074de:	4b48      	ldr	r3, [pc, #288]	@ (8007600 <HAL_RCC_OscConfig+0x288>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f003 0304 	and.w	r3, r3, #4
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d005      	beq.n	80074f6 <HAL_RCC_OscConfig+0x17e>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	68db      	ldr	r3, [r3, #12]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d101      	bne.n	80074f6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80074f2:	2301      	movs	r3, #1
 80074f4:	e392      	b.n	8007c1c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80074f6:	4b42      	ldr	r3, [pc, #264]	@ (8007600 <HAL_RCC_OscConfig+0x288>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f023 0219 	bic.w	r2, r3, #25
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	68db      	ldr	r3, [r3, #12]
 8007502:	493f      	ldr	r1, [pc, #252]	@ (8007600 <HAL_RCC_OscConfig+0x288>)
 8007504:	4313      	orrs	r3, r2
 8007506:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007508:	f7fa ff7a 	bl	8002400 <HAL_GetTick>
 800750c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800750e:	e008      	b.n	8007522 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007510:	f7fa ff76 	bl	8002400 <HAL_GetTick>
 8007514:	4602      	mov	r2, r0
 8007516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007518:	1ad3      	subs	r3, r2, r3
 800751a:	2b02      	cmp	r3, #2
 800751c:	d901      	bls.n	8007522 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800751e:	2303      	movs	r3, #3
 8007520:	e37c      	b.n	8007c1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007522:	4b37      	ldr	r3, [pc, #220]	@ (8007600 <HAL_RCC_OscConfig+0x288>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f003 0304 	and.w	r3, r3, #4
 800752a:	2b00      	cmp	r3, #0
 800752c:	d0f0      	beq.n	8007510 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800752e:	f7fa ff73 	bl	8002418 <HAL_GetREVID>
 8007532:	4603      	mov	r3, r0
 8007534:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007538:	4293      	cmp	r3, r2
 800753a:	d817      	bhi.n	800756c <HAL_RCC_OscConfig+0x1f4>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	691b      	ldr	r3, [r3, #16]
 8007540:	2b40      	cmp	r3, #64	@ 0x40
 8007542:	d108      	bne.n	8007556 <HAL_RCC_OscConfig+0x1de>
 8007544:	4b2e      	ldr	r3, [pc, #184]	@ (8007600 <HAL_RCC_OscConfig+0x288>)
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800754c:	4a2c      	ldr	r2, [pc, #176]	@ (8007600 <HAL_RCC_OscConfig+0x288>)
 800754e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007552:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007554:	e07a      	b.n	800764c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007556:	4b2a      	ldr	r3, [pc, #168]	@ (8007600 <HAL_RCC_OscConfig+0x288>)
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	691b      	ldr	r3, [r3, #16]
 8007562:	031b      	lsls	r3, r3, #12
 8007564:	4926      	ldr	r1, [pc, #152]	@ (8007600 <HAL_RCC_OscConfig+0x288>)
 8007566:	4313      	orrs	r3, r2
 8007568:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800756a:	e06f      	b.n	800764c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800756c:	4b24      	ldr	r3, [pc, #144]	@ (8007600 <HAL_RCC_OscConfig+0x288>)
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	691b      	ldr	r3, [r3, #16]
 8007578:	061b      	lsls	r3, r3, #24
 800757a:	4921      	ldr	r1, [pc, #132]	@ (8007600 <HAL_RCC_OscConfig+0x288>)
 800757c:	4313      	orrs	r3, r2
 800757e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007580:	e064      	b.n	800764c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	68db      	ldr	r3, [r3, #12]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d047      	beq.n	800761a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800758a:	4b1d      	ldr	r3, [pc, #116]	@ (8007600 <HAL_RCC_OscConfig+0x288>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f023 0219 	bic.w	r2, r3, #25
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	68db      	ldr	r3, [r3, #12]
 8007596:	491a      	ldr	r1, [pc, #104]	@ (8007600 <HAL_RCC_OscConfig+0x288>)
 8007598:	4313      	orrs	r3, r2
 800759a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800759c:	f7fa ff30 	bl	8002400 <HAL_GetTick>
 80075a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80075a2:	e008      	b.n	80075b6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80075a4:	f7fa ff2c 	bl	8002400 <HAL_GetTick>
 80075a8:	4602      	mov	r2, r0
 80075aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ac:	1ad3      	subs	r3, r2, r3
 80075ae:	2b02      	cmp	r3, #2
 80075b0:	d901      	bls.n	80075b6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80075b2:	2303      	movs	r3, #3
 80075b4:	e332      	b.n	8007c1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80075b6:	4b12      	ldr	r3, [pc, #72]	@ (8007600 <HAL_RCC_OscConfig+0x288>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f003 0304 	and.w	r3, r3, #4
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d0f0      	beq.n	80075a4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075c2:	f7fa ff29 	bl	8002418 <HAL_GetREVID>
 80075c6:	4603      	mov	r3, r0
 80075c8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d819      	bhi.n	8007604 <HAL_RCC_OscConfig+0x28c>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	691b      	ldr	r3, [r3, #16]
 80075d4:	2b40      	cmp	r3, #64	@ 0x40
 80075d6:	d108      	bne.n	80075ea <HAL_RCC_OscConfig+0x272>
 80075d8:	4b09      	ldr	r3, [pc, #36]	@ (8007600 <HAL_RCC_OscConfig+0x288>)
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80075e0:	4a07      	ldr	r2, [pc, #28]	@ (8007600 <HAL_RCC_OscConfig+0x288>)
 80075e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80075e6:	6053      	str	r3, [r2, #4]
 80075e8:	e030      	b.n	800764c <HAL_RCC_OscConfig+0x2d4>
 80075ea:	4b05      	ldr	r3, [pc, #20]	@ (8007600 <HAL_RCC_OscConfig+0x288>)
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	691b      	ldr	r3, [r3, #16]
 80075f6:	031b      	lsls	r3, r3, #12
 80075f8:	4901      	ldr	r1, [pc, #4]	@ (8007600 <HAL_RCC_OscConfig+0x288>)
 80075fa:	4313      	orrs	r3, r2
 80075fc:	604b      	str	r3, [r1, #4]
 80075fe:	e025      	b.n	800764c <HAL_RCC_OscConfig+0x2d4>
 8007600:	58024400 	.word	0x58024400
 8007604:	4b9a      	ldr	r3, [pc, #616]	@ (8007870 <HAL_RCC_OscConfig+0x4f8>)
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	691b      	ldr	r3, [r3, #16]
 8007610:	061b      	lsls	r3, r3, #24
 8007612:	4997      	ldr	r1, [pc, #604]	@ (8007870 <HAL_RCC_OscConfig+0x4f8>)
 8007614:	4313      	orrs	r3, r2
 8007616:	604b      	str	r3, [r1, #4]
 8007618:	e018      	b.n	800764c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800761a:	4b95      	ldr	r3, [pc, #596]	@ (8007870 <HAL_RCC_OscConfig+0x4f8>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a94      	ldr	r2, [pc, #592]	@ (8007870 <HAL_RCC_OscConfig+0x4f8>)
 8007620:	f023 0301 	bic.w	r3, r3, #1
 8007624:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007626:	f7fa feeb 	bl	8002400 <HAL_GetTick>
 800762a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800762c:	e008      	b.n	8007640 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800762e:	f7fa fee7 	bl	8002400 <HAL_GetTick>
 8007632:	4602      	mov	r2, r0
 8007634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007636:	1ad3      	subs	r3, r2, r3
 8007638:	2b02      	cmp	r3, #2
 800763a:	d901      	bls.n	8007640 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800763c:	2303      	movs	r3, #3
 800763e:	e2ed      	b.n	8007c1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007640:	4b8b      	ldr	r3, [pc, #556]	@ (8007870 <HAL_RCC_OscConfig+0x4f8>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f003 0304 	and.w	r3, r3, #4
 8007648:	2b00      	cmp	r3, #0
 800764a:	d1f0      	bne.n	800762e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f003 0310 	and.w	r3, r3, #16
 8007654:	2b00      	cmp	r3, #0
 8007656:	f000 80a9 	beq.w	80077ac <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800765a:	4b85      	ldr	r3, [pc, #532]	@ (8007870 <HAL_RCC_OscConfig+0x4f8>)
 800765c:	691b      	ldr	r3, [r3, #16]
 800765e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007662:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007664:	4b82      	ldr	r3, [pc, #520]	@ (8007870 <HAL_RCC_OscConfig+0x4f8>)
 8007666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007668:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800766a:	69bb      	ldr	r3, [r7, #24]
 800766c:	2b08      	cmp	r3, #8
 800766e:	d007      	beq.n	8007680 <HAL_RCC_OscConfig+0x308>
 8007670:	69bb      	ldr	r3, [r7, #24]
 8007672:	2b18      	cmp	r3, #24
 8007674:	d13a      	bne.n	80076ec <HAL_RCC_OscConfig+0x374>
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	f003 0303 	and.w	r3, r3, #3
 800767c:	2b01      	cmp	r3, #1
 800767e:	d135      	bne.n	80076ec <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007680:	4b7b      	ldr	r3, [pc, #492]	@ (8007870 <HAL_RCC_OscConfig+0x4f8>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007688:	2b00      	cmp	r3, #0
 800768a:	d005      	beq.n	8007698 <HAL_RCC_OscConfig+0x320>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	69db      	ldr	r3, [r3, #28]
 8007690:	2b80      	cmp	r3, #128	@ 0x80
 8007692:	d001      	beq.n	8007698 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	e2c1      	b.n	8007c1c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007698:	f7fa febe 	bl	8002418 <HAL_GetREVID>
 800769c:	4603      	mov	r3, r0
 800769e:	f241 0203 	movw	r2, #4099	@ 0x1003
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d817      	bhi.n	80076d6 <HAL_RCC_OscConfig+0x35e>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6a1b      	ldr	r3, [r3, #32]
 80076aa:	2b20      	cmp	r3, #32
 80076ac:	d108      	bne.n	80076c0 <HAL_RCC_OscConfig+0x348>
 80076ae:	4b70      	ldr	r3, [pc, #448]	@ (8007870 <HAL_RCC_OscConfig+0x4f8>)
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80076b6:	4a6e      	ldr	r2, [pc, #440]	@ (8007870 <HAL_RCC_OscConfig+0x4f8>)
 80076b8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80076bc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80076be:	e075      	b.n	80077ac <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80076c0:	4b6b      	ldr	r3, [pc, #428]	@ (8007870 <HAL_RCC_OscConfig+0x4f8>)
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6a1b      	ldr	r3, [r3, #32]
 80076cc:	069b      	lsls	r3, r3, #26
 80076ce:	4968      	ldr	r1, [pc, #416]	@ (8007870 <HAL_RCC_OscConfig+0x4f8>)
 80076d0:	4313      	orrs	r3, r2
 80076d2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80076d4:	e06a      	b.n	80077ac <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80076d6:	4b66      	ldr	r3, [pc, #408]	@ (8007870 <HAL_RCC_OscConfig+0x4f8>)
 80076d8:	68db      	ldr	r3, [r3, #12]
 80076da:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6a1b      	ldr	r3, [r3, #32]
 80076e2:	061b      	lsls	r3, r3, #24
 80076e4:	4962      	ldr	r1, [pc, #392]	@ (8007870 <HAL_RCC_OscConfig+0x4f8>)
 80076e6:	4313      	orrs	r3, r2
 80076e8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80076ea:	e05f      	b.n	80077ac <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	69db      	ldr	r3, [r3, #28]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d042      	beq.n	800777a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80076f4:	4b5e      	ldr	r3, [pc, #376]	@ (8007870 <HAL_RCC_OscConfig+0x4f8>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a5d      	ldr	r2, [pc, #372]	@ (8007870 <HAL_RCC_OscConfig+0x4f8>)
 80076fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007700:	f7fa fe7e 	bl	8002400 <HAL_GetTick>
 8007704:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007706:	e008      	b.n	800771a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007708:	f7fa fe7a 	bl	8002400 <HAL_GetTick>
 800770c:	4602      	mov	r2, r0
 800770e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007710:	1ad3      	subs	r3, r2, r3
 8007712:	2b02      	cmp	r3, #2
 8007714:	d901      	bls.n	800771a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007716:	2303      	movs	r3, #3
 8007718:	e280      	b.n	8007c1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800771a:	4b55      	ldr	r3, [pc, #340]	@ (8007870 <HAL_RCC_OscConfig+0x4f8>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007722:	2b00      	cmp	r3, #0
 8007724:	d0f0      	beq.n	8007708 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007726:	f7fa fe77 	bl	8002418 <HAL_GetREVID>
 800772a:	4603      	mov	r3, r0
 800772c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007730:	4293      	cmp	r3, r2
 8007732:	d817      	bhi.n	8007764 <HAL_RCC_OscConfig+0x3ec>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6a1b      	ldr	r3, [r3, #32]
 8007738:	2b20      	cmp	r3, #32
 800773a:	d108      	bne.n	800774e <HAL_RCC_OscConfig+0x3d6>
 800773c:	4b4c      	ldr	r3, [pc, #304]	@ (8007870 <HAL_RCC_OscConfig+0x4f8>)
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8007744:	4a4a      	ldr	r2, [pc, #296]	@ (8007870 <HAL_RCC_OscConfig+0x4f8>)
 8007746:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800774a:	6053      	str	r3, [r2, #4]
 800774c:	e02e      	b.n	80077ac <HAL_RCC_OscConfig+0x434>
 800774e:	4b48      	ldr	r3, [pc, #288]	@ (8007870 <HAL_RCC_OscConfig+0x4f8>)
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6a1b      	ldr	r3, [r3, #32]
 800775a:	069b      	lsls	r3, r3, #26
 800775c:	4944      	ldr	r1, [pc, #272]	@ (8007870 <HAL_RCC_OscConfig+0x4f8>)
 800775e:	4313      	orrs	r3, r2
 8007760:	604b      	str	r3, [r1, #4]
 8007762:	e023      	b.n	80077ac <HAL_RCC_OscConfig+0x434>
 8007764:	4b42      	ldr	r3, [pc, #264]	@ (8007870 <HAL_RCC_OscConfig+0x4f8>)
 8007766:	68db      	ldr	r3, [r3, #12]
 8007768:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6a1b      	ldr	r3, [r3, #32]
 8007770:	061b      	lsls	r3, r3, #24
 8007772:	493f      	ldr	r1, [pc, #252]	@ (8007870 <HAL_RCC_OscConfig+0x4f8>)
 8007774:	4313      	orrs	r3, r2
 8007776:	60cb      	str	r3, [r1, #12]
 8007778:	e018      	b.n	80077ac <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800777a:	4b3d      	ldr	r3, [pc, #244]	@ (8007870 <HAL_RCC_OscConfig+0x4f8>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a3c      	ldr	r2, [pc, #240]	@ (8007870 <HAL_RCC_OscConfig+0x4f8>)
 8007780:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007784:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007786:	f7fa fe3b 	bl	8002400 <HAL_GetTick>
 800778a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800778c:	e008      	b.n	80077a0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800778e:	f7fa fe37 	bl	8002400 <HAL_GetTick>
 8007792:	4602      	mov	r2, r0
 8007794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007796:	1ad3      	subs	r3, r2, r3
 8007798:	2b02      	cmp	r3, #2
 800779a:	d901      	bls.n	80077a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800779c:	2303      	movs	r3, #3
 800779e:	e23d      	b.n	8007c1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80077a0:	4b33      	ldr	r3, [pc, #204]	@ (8007870 <HAL_RCC_OscConfig+0x4f8>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d1f0      	bne.n	800778e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f003 0308 	and.w	r3, r3, #8
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d036      	beq.n	8007826 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	695b      	ldr	r3, [r3, #20]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d019      	beq.n	80077f4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80077c0:	4b2b      	ldr	r3, [pc, #172]	@ (8007870 <HAL_RCC_OscConfig+0x4f8>)
 80077c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077c4:	4a2a      	ldr	r2, [pc, #168]	@ (8007870 <HAL_RCC_OscConfig+0x4f8>)
 80077c6:	f043 0301 	orr.w	r3, r3, #1
 80077ca:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077cc:	f7fa fe18 	bl	8002400 <HAL_GetTick>
 80077d0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80077d2:	e008      	b.n	80077e6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80077d4:	f7fa fe14 	bl	8002400 <HAL_GetTick>
 80077d8:	4602      	mov	r2, r0
 80077da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077dc:	1ad3      	subs	r3, r2, r3
 80077de:	2b02      	cmp	r3, #2
 80077e0:	d901      	bls.n	80077e6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80077e2:	2303      	movs	r3, #3
 80077e4:	e21a      	b.n	8007c1c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80077e6:	4b22      	ldr	r3, [pc, #136]	@ (8007870 <HAL_RCC_OscConfig+0x4f8>)
 80077e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077ea:	f003 0302 	and.w	r3, r3, #2
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d0f0      	beq.n	80077d4 <HAL_RCC_OscConfig+0x45c>
 80077f2:	e018      	b.n	8007826 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80077f4:	4b1e      	ldr	r3, [pc, #120]	@ (8007870 <HAL_RCC_OscConfig+0x4f8>)
 80077f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077f8:	4a1d      	ldr	r2, [pc, #116]	@ (8007870 <HAL_RCC_OscConfig+0x4f8>)
 80077fa:	f023 0301 	bic.w	r3, r3, #1
 80077fe:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007800:	f7fa fdfe 	bl	8002400 <HAL_GetTick>
 8007804:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007806:	e008      	b.n	800781a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007808:	f7fa fdfa 	bl	8002400 <HAL_GetTick>
 800780c:	4602      	mov	r2, r0
 800780e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007810:	1ad3      	subs	r3, r2, r3
 8007812:	2b02      	cmp	r3, #2
 8007814:	d901      	bls.n	800781a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007816:	2303      	movs	r3, #3
 8007818:	e200      	b.n	8007c1c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800781a:	4b15      	ldr	r3, [pc, #84]	@ (8007870 <HAL_RCC_OscConfig+0x4f8>)
 800781c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800781e:	f003 0302 	and.w	r3, r3, #2
 8007822:	2b00      	cmp	r3, #0
 8007824:	d1f0      	bne.n	8007808 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f003 0320 	and.w	r3, r3, #32
 800782e:	2b00      	cmp	r3, #0
 8007830:	d039      	beq.n	80078a6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	699b      	ldr	r3, [r3, #24]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d01c      	beq.n	8007874 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800783a:	4b0d      	ldr	r3, [pc, #52]	@ (8007870 <HAL_RCC_OscConfig+0x4f8>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a0c      	ldr	r2, [pc, #48]	@ (8007870 <HAL_RCC_OscConfig+0x4f8>)
 8007840:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007844:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007846:	f7fa fddb 	bl	8002400 <HAL_GetTick>
 800784a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800784c:	e008      	b.n	8007860 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800784e:	f7fa fdd7 	bl	8002400 <HAL_GetTick>
 8007852:	4602      	mov	r2, r0
 8007854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007856:	1ad3      	subs	r3, r2, r3
 8007858:	2b02      	cmp	r3, #2
 800785a:	d901      	bls.n	8007860 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800785c:	2303      	movs	r3, #3
 800785e:	e1dd      	b.n	8007c1c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007860:	4b03      	ldr	r3, [pc, #12]	@ (8007870 <HAL_RCC_OscConfig+0x4f8>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007868:	2b00      	cmp	r3, #0
 800786a:	d0f0      	beq.n	800784e <HAL_RCC_OscConfig+0x4d6>
 800786c:	e01b      	b.n	80078a6 <HAL_RCC_OscConfig+0x52e>
 800786e:	bf00      	nop
 8007870:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007874:	4b9b      	ldr	r3, [pc, #620]	@ (8007ae4 <HAL_RCC_OscConfig+0x76c>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a9a      	ldr	r2, [pc, #616]	@ (8007ae4 <HAL_RCC_OscConfig+0x76c>)
 800787a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800787e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007880:	f7fa fdbe 	bl	8002400 <HAL_GetTick>
 8007884:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007886:	e008      	b.n	800789a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007888:	f7fa fdba 	bl	8002400 <HAL_GetTick>
 800788c:	4602      	mov	r2, r0
 800788e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007890:	1ad3      	subs	r3, r2, r3
 8007892:	2b02      	cmp	r3, #2
 8007894:	d901      	bls.n	800789a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007896:	2303      	movs	r3, #3
 8007898:	e1c0      	b.n	8007c1c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800789a:	4b92      	ldr	r3, [pc, #584]	@ (8007ae4 <HAL_RCC_OscConfig+0x76c>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d1f0      	bne.n	8007888 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f003 0304 	and.w	r3, r3, #4
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	f000 8081 	beq.w	80079b6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80078b4:	4b8c      	ldr	r3, [pc, #560]	@ (8007ae8 <HAL_RCC_OscConfig+0x770>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a8b      	ldr	r2, [pc, #556]	@ (8007ae8 <HAL_RCC_OscConfig+0x770>)
 80078ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80078be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80078c0:	f7fa fd9e 	bl	8002400 <HAL_GetTick>
 80078c4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80078c6:	e008      	b.n	80078da <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80078c8:	f7fa fd9a 	bl	8002400 <HAL_GetTick>
 80078cc:	4602      	mov	r2, r0
 80078ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078d0:	1ad3      	subs	r3, r2, r3
 80078d2:	2b64      	cmp	r3, #100	@ 0x64
 80078d4:	d901      	bls.n	80078da <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80078d6:	2303      	movs	r3, #3
 80078d8:	e1a0      	b.n	8007c1c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80078da:	4b83      	ldr	r3, [pc, #524]	@ (8007ae8 <HAL_RCC_OscConfig+0x770>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d0f0      	beq.n	80078c8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d106      	bne.n	80078fc <HAL_RCC_OscConfig+0x584>
 80078ee:	4b7d      	ldr	r3, [pc, #500]	@ (8007ae4 <HAL_RCC_OscConfig+0x76c>)
 80078f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078f2:	4a7c      	ldr	r2, [pc, #496]	@ (8007ae4 <HAL_RCC_OscConfig+0x76c>)
 80078f4:	f043 0301 	orr.w	r3, r3, #1
 80078f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80078fa:	e02d      	b.n	8007958 <HAL_RCC_OscConfig+0x5e0>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d10c      	bne.n	800791e <HAL_RCC_OscConfig+0x5a6>
 8007904:	4b77      	ldr	r3, [pc, #476]	@ (8007ae4 <HAL_RCC_OscConfig+0x76c>)
 8007906:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007908:	4a76      	ldr	r2, [pc, #472]	@ (8007ae4 <HAL_RCC_OscConfig+0x76c>)
 800790a:	f023 0301 	bic.w	r3, r3, #1
 800790e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007910:	4b74      	ldr	r3, [pc, #464]	@ (8007ae4 <HAL_RCC_OscConfig+0x76c>)
 8007912:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007914:	4a73      	ldr	r2, [pc, #460]	@ (8007ae4 <HAL_RCC_OscConfig+0x76c>)
 8007916:	f023 0304 	bic.w	r3, r3, #4
 800791a:	6713      	str	r3, [r2, #112]	@ 0x70
 800791c:	e01c      	b.n	8007958 <HAL_RCC_OscConfig+0x5e0>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	689b      	ldr	r3, [r3, #8]
 8007922:	2b05      	cmp	r3, #5
 8007924:	d10c      	bne.n	8007940 <HAL_RCC_OscConfig+0x5c8>
 8007926:	4b6f      	ldr	r3, [pc, #444]	@ (8007ae4 <HAL_RCC_OscConfig+0x76c>)
 8007928:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800792a:	4a6e      	ldr	r2, [pc, #440]	@ (8007ae4 <HAL_RCC_OscConfig+0x76c>)
 800792c:	f043 0304 	orr.w	r3, r3, #4
 8007930:	6713      	str	r3, [r2, #112]	@ 0x70
 8007932:	4b6c      	ldr	r3, [pc, #432]	@ (8007ae4 <HAL_RCC_OscConfig+0x76c>)
 8007934:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007936:	4a6b      	ldr	r2, [pc, #428]	@ (8007ae4 <HAL_RCC_OscConfig+0x76c>)
 8007938:	f043 0301 	orr.w	r3, r3, #1
 800793c:	6713      	str	r3, [r2, #112]	@ 0x70
 800793e:	e00b      	b.n	8007958 <HAL_RCC_OscConfig+0x5e0>
 8007940:	4b68      	ldr	r3, [pc, #416]	@ (8007ae4 <HAL_RCC_OscConfig+0x76c>)
 8007942:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007944:	4a67      	ldr	r2, [pc, #412]	@ (8007ae4 <HAL_RCC_OscConfig+0x76c>)
 8007946:	f023 0301 	bic.w	r3, r3, #1
 800794a:	6713      	str	r3, [r2, #112]	@ 0x70
 800794c:	4b65      	ldr	r3, [pc, #404]	@ (8007ae4 <HAL_RCC_OscConfig+0x76c>)
 800794e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007950:	4a64      	ldr	r2, [pc, #400]	@ (8007ae4 <HAL_RCC_OscConfig+0x76c>)
 8007952:	f023 0304 	bic.w	r3, r3, #4
 8007956:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d015      	beq.n	800798c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007960:	f7fa fd4e 	bl	8002400 <HAL_GetTick>
 8007964:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007966:	e00a      	b.n	800797e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007968:	f7fa fd4a 	bl	8002400 <HAL_GetTick>
 800796c:	4602      	mov	r2, r0
 800796e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007970:	1ad3      	subs	r3, r2, r3
 8007972:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007976:	4293      	cmp	r3, r2
 8007978:	d901      	bls.n	800797e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800797a:	2303      	movs	r3, #3
 800797c:	e14e      	b.n	8007c1c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800797e:	4b59      	ldr	r3, [pc, #356]	@ (8007ae4 <HAL_RCC_OscConfig+0x76c>)
 8007980:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007982:	f003 0302 	and.w	r3, r3, #2
 8007986:	2b00      	cmp	r3, #0
 8007988:	d0ee      	beq.n	8007968 <HAL_RCC_OscConfig+0x5f0>
 800798a:	e014      	b.n	80079b6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800798c:	f7fa fd38 	bl	8002400 <HAL_GetTick>
 8007990:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007992:	e00a      	b.n	80079aa <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007994:	f7fa fd34 	bl	8002400 <HAL_GetTick>
 8007998:	4602      	mov	r2, r0
 800799a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800799c:	1ad3      	subs	r3, r2, r3
 800799e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d901      	bls.n	80079aa <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80079a6:	2303      	movs	r3, #3
 80079a8:	e138      	b.n	8007c1c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80079aa:	4b4e      	ldr	r3, [pc, #312]	@ (8007ae4 <HAL_RCC_OscConfig+0x76c>)
 80079ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079ae:	f003 0302 	and.w	r3, r3, #2
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d1ee      	bne.n	8007994 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	f000 812d 	beq.w	8007c1a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80079c0:	4b48      	ldr	r3, [pc, #288]	@ (8007ae4 <HAL_RCC_OscConfig+0x76c>)
 80079c2:	691b      	ldr	r3, [r3, #16]
 80079c4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80079c8:	2b18      	cmp	r3, #24
 80079ca:	f000 80bd 	beq.w	8007b48 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079d2:	2b02      	cmp	r3, #2
 80079d4:	f040 809e 	bne.w	8007b14 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079d8:	4b42      	ldr	r3, [pc, #264]	@ (8007ae4 <HAL_RCC_OscConfig+0x76c>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a41      	ldr	r2, [pc, #260]	@ (8007ae4 <HAL_RCC_OscConfig+0x76c>)
 80079de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80079e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079e4:	f7fa fd0c 	bl	8002400 <HAL_GetTick>
 80079e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80079ea:	e008      	b.n	80079fe <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079ec:	f7fa fd08 	bl	8002400 <HAL_GetTick>
 80079f0:	4602      	mov	r2, r0
 80079f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079f4:	1ad3      	subs	r3, r2, r3
 80079f6:	2b02      	cmp	r3, #2
 80079f8:	d901      	bls.n	80079fe <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80079fa:	2303      	movs	r3, #3
 80079fc:	e10e      	b.n	8007c1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80079fe:	4b39      	ldr	r3, [pc, #228]	@ (8007ae4 <HAL_RCC_OscConfig+0x76c>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d1f0      	bne.n	80079ec <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007a0a:	4b36      	ldr	r3, [pc, #216]	@ (8007ae4 <HAL_RCC_OscConfig+0x76c>)
 8007a0c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007a0e:	4b37      	ldr	r3, [pc, #220]	@ (8007aec <HAL_RCC_OscConfig+0x774>)
 8007a10:	4013      	ands	r3, r2
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8007a16:	687a      	ldr	r2, [r7, #4]
 8007a18:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007a1a:	0112      	lsls	r2, r2, #4
 8007a1c:	430a      	orrs	r2, r1
 8007a1e:	4931      	ldr	r1, [pc, #196]	@ (8007ae4 <HAL_RCC_OscConfig+0x76c>)
 8007a20:	4313      	orrs	r3, r2
 8007a22:	628b      	str	r3, [r1, #40]	@ 0x28
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a28:	3b01      	subs	r3, #1
 8007a2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a32:	3b01      	subs	r3, #1
 8007a34:	025b      	lsls	r3, r3, #9
 8007a36:	b29b      	uxth	r3, r3
 8007a38:	431a      	orrs	r2, r3
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a3e:	3b01      	subs	r3, #1
 8007a40:	041b      	lsls	r3, r3, #16
 8007a42:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007a46:	431a      	orrs	r2, r3
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a4c:	3b01      	subs	r3, #1
 8007a4e:	061b      	lsls	r3, r3, #24
 8007a50:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007a54:	4923      	ldr	r1, [pc, #140]	@ (8007ae4 <HAL_RCC_OscConfig+0x76c>)
 8007a56:	4313      	orrs	r3, r2
 8007a58:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007a5a:	4b22      	ldr	r3, [pc, #136]	@ (8007ae4 <HAL_RCC_OscConfig+0x76c>)
 8007a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a5e:	4a21      	ldr	r2, [pc, #132]	@ (8007ae4 <HAL_RCC_OscConfig+0x76c>)
 8007a60:	f023 0301 	bic.w	r3, r3, #1
 8007a64:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007a66:	4b1f      	ldr	r3, [pc, #124]	@ (8007ae4 <HAL_RCC_OscConfig+0x76c>)
 8007a68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007a6a:	4b21      	ldr	r3, [pc, #132]	@ (8007af0 <HAL_RCC_OscConfig+0x778>)
 8007a6c:	4013      	ands	r3, r2
 8007a6e:	687a      	ldr	r2, [r7, #4]
 8007a70:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007a72:	00d2      	lsls	r2, r2, #3
 8007a74:	491b      	ldr	r1, [pc, #108]	@ (8007ae4 <HAL_RCC_OscConfig+0x76c>)
 8007a76:	4313      	orrs	r3, r2
 8007a78:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007a7a:	4b1a      	ldr	r3, [pc, #104]	@ (8007ae4 <HAL_RCC_OscConfig+0x76c>)
 8007a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a7e:	f023 020c 	bic.w	r2, r3, #12
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a86:	4917      	ldr	r1, [pc, #92]	@ (8007ae4 <HAL_RCC_OscConfig+0x76c>)
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007a8c:	4b15      	ldr	r3, [pc, #84]	@ (8007ae4 <HAL_RCC_OscConfig+0x76c>)
 8007a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a90:	f023 0202 	bic.w	r2, r3, #2
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a98:	4912      	ldr	r1, [pc, #72]	@ (8007ae4 <HAL_RCC_OscConfig+0x76c>)
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007a9e:	4b11      	ldr	r3, [pc, #68]	@ (8007ae4 <HAL_RCC_OscConfig+0x76c>)
 8007aa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aa2:	4a10      	ldr	r2, [pc, #64]	@ (8007ae4 <HAL_RCC_OscConfig+0x76c>)
 8007aa4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007aa8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8007ae4 <HAL_RCC_OscConfig+0x76c>)
 8007aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aae:	4a0d      	ldr	r2, [pc, #52]	@ (8007ae4 <HAL_RCC_OscConfig+0x76c>)
 8007ab0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ab4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8007ae4 <HAL_RCC_OscConfig+0x76c>)
 8007ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aba:	4a0a      	ldr	r2, [pc, #40]	@ (8007ae4 <HAL_RCC_OscConfig+0x76c>)
 8007abc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007ac0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007ac2:	4b08      	ldr	r3, [pc, #32]	@ (8007ae4 <HAL_RCC_OscConfig+0x76c>)
 8007ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ac6:	4a07      	ldr	r2, [pc, #28]	@ (8007ae4 <HAL_RCC_OscConfig+0x76c>)
 8007ac8:	f043 0301 	orr.w	r3, r3, #1
 8007acc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007ace:	4b05      	ldr	r3, [pc, #20]	@ (8007ae4 <HAL_RCC_OscConfig+0x76c>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a04      	ldr	r2, [pc, #16]	@ (8007ae4 <HAL_RCC_OscConfig+0x76c>)
 8007ad4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007ad8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ada:	f7fa fc91 	bl	8002400 <HAL_GetTick>
 8007ade:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007ae0:	e011      	b.n	8007b06 <HAL_RCC_OscConfig+0x78e>
 8007ae2:	bf00      	nop
 8007ae4:	58024400 	.word	0x58024400
 8007ae8:	58024800 	.word	0x58024800
 8007aec:	fffffc0c 	.word	0xfffffc0c
 8007af0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007af4:	f7fa fc84 	bl	8002400 <HAL_GetTick>
 8007af8:	4602      	mov	r2, r0
 8007afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007afc:	1ad3      	subs	r3, r2, r3
 8007afe:	2b02      	cmp	r3, #2
 8007b00:	d901      	bls.n	8007b06 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8007b02:	2303      	movs	r3, #3
 8007b04:	e08a      	b.n	8007c1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007b06:	4b47      	ldr	r3, [pc, #284]	@ (8007c24 <HAL_RCC_OscConfig+0x8ac>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d0f0      	beq.n	8007af4 <HAL_RCC_OscConfig+0x77c>
 8007b12:	e082      	b.n	8007c1a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b14:	4b43      	ldr	r3, [pc, #268]	@ (8007c24 <HAL_RCC_OscConfig+0x8ac>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a42      	ldr	r2, [pc, #264]	@ (8007c24 <HAL_RCC_OscConfig+0x8ac>)
 8007b1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007b1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b20:	f7fa fc6e 	bl	8002400 <HAL_GetTick>
 8007b24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007b26:	e008      	b.n	8007b3a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b28:	f7fa fc6a 	bl	8002400 <HAL_GetTick>
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b30:	1ad3      	subs	r3, r2, r3
 8007b32:	2b02      	cmp	r3, #2
 8007b34:	d901      	bls.n	8007b3a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007b36:	2303      	movs	r3, #3
 8007b38:	e070      	b.n	8007c1c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007b3a:	4b3a      	ldr	r3, [pc, #232]	@ (8007c24 <HAL_RCC_OscConfig+0x8ac>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d1f0      	bne.n	8007b28 <HAL_RCC_OscConfig+0x7b0>
 8007b46:	e068      	b.n	8007c1a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007b48:	4b36      	ldr	r3, [pc, #216]	@ (8007c24 <HAL_RCC_OscConfig+0x8ac>)
 8007b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b4c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007b4e:	4b35      	ldr	r3, [pc, #212]	@ (8007c24 <HAL_RCC_OscConfig+0x8ac>)
 8007b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b52:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d031      	beq.n	8007bc0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	f003 0203 	and.w	r2, r3, #3
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b66:	429a      	cmp	r2, r3
 8007b68:	d12a      	bne.n	8007bc0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	091b      	lsrs	r3, r3, #4
 8007b6e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d122      	bne.n	8007bc0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b84:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007b86:	429a      	cmp	r2, r3
 8007b88:	d11a      	bne.n	8007bc0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	0a5b      	lsrs	r3, r3, #9
 8007b8e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b96:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d111      	bne.n	8007bc0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	0c1b      	lsrs	r3, r3, #16
 8007ba0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ba8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007baa:	429a      	cmp	r2, r3
 8007bac:	d108      	bne.n	8007bc0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	0e1b      	lsrs	r3, r3, #24
 8007bb2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bba:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d001      	beq.n	8007bc4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	e02b      	b.n	8007c1c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007bc4:	4b17      	ldr	r3, [pc, #92]	@ (8007c24 <HAL_RCC_OscConfig+0x8ac>)
 8007bc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007bc8:	08db      	lsrs	r3, r3, #3
 8007bca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007bce:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007bd4:	693a      	ldr	r2, [r7, #16]
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d01f      	beq.n	8007c1a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007bda:	4b12      	ldr	r3, [pc, #72]	@ (8007c24 <HAL_RCC_OscConfig+0x8ac>)
 8007bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bde:	4a11      	ldr	r2, [pc, #68]	@ (8007c24 <HAL_RCC_OscConfig+0x8ac>)
 8007be0:	f023 0301 	bic.w	r3, r3, #1
 8007be4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007be6:	f7fa fc0b 	bl	8002400 <HAL_GetTick>
 8007bea:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007bec:	bf00      	nop
 8007bee:	f7fa fc07 	bl	8002400 <HAL_GetTick>
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d0f9      	beq.n	8007bee <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8007c24 <HAL_RCC_OscConfig+0x8ac>)
 8007bfc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007bfe:	4b0a      	ldr	r3, [pc, #40]	@ (8007c28 <HAL_RCC_OscConfig+0x8b0>)
 8007c00:	4013      	ands	r3, r2
 8007c02:	687a      	ldr	r2, [r7, #4]
 8007c04:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007c06:	00d2      	lsls	r2, r2, #3
 8007c08:	4906      	ldr	r1, [pc, #24]	@ (8007c24 <HAL_RCC_OscConfig+0x8ac>)
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007c0e:	4b05      	ldr	r3, [pc, #20]	@ (8007c24 <HAL_RCC_OscConfig+0x8ac>)
 8007c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c12:	4a04      	ldr	r2, [pc, #16]	@ (8007c24 <HAL_RCC_OscConfig+0x8ac>)
 8007c14:	f043 0301 	orr.w	r3, r3, #1
 8007c18:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007c1a:	2300      	movs	r3, #0
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3730      	adds	r7, #48	@ 0x30
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}
 8007c24:	58024400 	.word	0x58024400
 8007c28:	ffff0007 	.word	0xffff0007

08007c2c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b086      	sub	sp, #24
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d101      	bne.n	8007c40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	e19c      	b.n	8007f7a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007c40:	4b8a      	ldr	r3, [pc, #552]	@ (8007e6c <HAL_RCC_ClockConfig+0x240>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f003 030f 	and.w	r3, r3, #15
 8007c48:	683a      	ldr	r2, [r7, #0]
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d910      	bls.n	8007c70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c4e:	4b87      	ldr	r3, [pc, #540]	@ (8007e6c <HAL_RCC_ClockConfig+0x240>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f023 020f 	bic.w	r2, r3, #15
 8007c56:	4985      	ldr	r1, [pc, #532]	@ (8007e6c <HAL_RCC_ClockConfig+0x240>)
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c5e:	4b83      	ldr	r3, [pc, #524]	@ (8007e6c <HAL_RCC_ClockConfig+0x240>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f003 030f 	and.w	r3, r3, #15
 8007c66:	683a      	ldr	r2, [r7, #0]
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	d001      	beq.n	8007c70 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	e184      	b.n	8007f7a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f003 0304 	and.w	r3, r3, #4
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d010      	beq.n	8007c9e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	691a      	ldr	r2, [r3, #16]
 8007c80:	4b7b      	ldr	r3, [pc, #492]	@ (8007e70 <HAL_RCC_ClockConfig+0x244>)
 8007c82:	699b      	ldr	r3, [r3, #24]
 8007c84:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d908      	bls.n	8007c9e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007c8c:	4b78      	ldr	r3, [pc, #480]	@ (8007e70 <HAL_RCC_ClockConfig+0x244>)
 8007c8e:	699b      	ldr	r3, [r3, #24]
 8007c90:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	691b      	ldr	r3, [r3, #16]
 8007c98:	4975      	ldr	r1, [pc, #468]	@ (8007e70 <HAL_RCC_ClockConfig+0x244>)
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f003 0308 	and.w	r3, r3, #8
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d010      	beq.n	8007ccc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	695a      	ldr	r2, [r3, #20]
 8007cae:	4b70      	ldr	r3, [pc, #448]	@ (8007e70 <HAL_RCC_ClockConfig+0x244>)
 8007cb0:	69db      	ldr	r3, [r3, #28]
 8007cb2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d908      	bls.n	8007ccc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007cba:	4b6d      	ldr	r3, [pc, #436]	@ (8007e70 <HAL_RCC_ClockConfig+0x244>)
 8007cbc:	69db      	ldr	r3, [r3, #28]
 8007cbe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	695b      	ldr	r3, [r3, #20]
 8007cc6:	496a      	ldr	r1, [pc, #424]	@ (8007e70 <HAL_RCC_ClockConfig+0x244>)
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f003 0310 	and.w	r3, r3, #16
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d010      	beq.n	8007cfa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	699a      	ldr	r2, [r3, #24]
 8007cdc:	4b64      	ldr	r3, [pc, #400]	@ (8007e70 <HAL_RCC_ClockConfig+0x244>)
 8007cde:	69db      	ldr	r3, [r3, #28]
 8007ce0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d908      	bls.n	8007cfa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007ce8:	4b61      	ldr	r3, [pc, #388]	@ (8007e70 <HAL_RCC_ClockConfig+0x244>)
 8007cea:	69db      	ldr	r3, [r3, #28]
 8007cec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	699b      	ldr	r3, [r3, #24]
 8007cf4:	495e      	ldr	r1, [pc, #376]	@ (8007e70 <HAL_RCC_ClockConfig+0x244>)
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f003 0320 	and.w	r3, r3, #32
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d010      	beq.n	8007d28 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	69da      	ldr	r2, [r3, #28]
 8007d0a:	4b59      	ldr	r3, [pc, #356]	@ (8007e70 <HAL_RCC_ClockConfig+0x244>)
 8007d0c:	6a1b      	ldr	r3, [r3, #32]
 8007d0e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d908      	bls.n	8007d28 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007d16:	4b56      	ldr	r3, [pc, #344]	@ (8007e70 <HAL_RCC_ClockConfig+0x244>)
 8007d18:	6a1b      	ldr	r3, [r3, #32]
 8007d1a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	69db      	ldr	r3, [r3, #28]
 8007d22:	4953      	ldr	r1, [pc, #332]	@ (8007e70 <HAL_RCC_ClockConfig+0x244>)
 8007d24:	4313      	orrs	r3, r2
 8007d26:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f003 0302 	and.w	r3, r3, #2
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d010      	beq.n	8007d56 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	68da      	ldr	r2, [r3, #12]
 8007d38:	4b4d      	ldr	r3, [pc, #308]	@ (8007e70 <HAL_RCC_ClockConfig+0x244>)
 8007d3a:	699b      	ldr	r3, [r3, #24]
 8007d3c:	f003 030f 	and.w	r3, r3, #15
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d908      	bls.n	8007d56 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d44:	4b4a      	ldr	r3, [pc, #296]	@ (8007e70 <HAL_RCC_ClockConfig+0x244>)
 8007d46:	699b      	ldr	r3, [r3, #24]
 8007d48:	f023 020f 	bic.w	r2, r3, #15
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	68db      	ldr	r3, [r3, #12]
 8007d50:	4947      	ldr	r1, [pc, #284]	@ (8007e70 <HAL_RCC_ClockConfig+0x244>)
 8007d52:	4313      	orrs	r3, r2
 8007d54:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f003 0301 	and.w	r3, r3, #1
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d055      	beq.n	8007e0e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007d62:	4b43      	ldr	r3, [pc, #268]	@ (8007e70 <HAL_RCC_ClockConfig+0x244>)
 8007d64:	699b      	ldr	r3, [r3, #24]
 8007d66:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	689b      	ldr	r3, [r3, #8]
 8007d6e:	4940      	ldr	r1, [pc, #256]	@ (8007e70 <HAL_RCC_ClockConfig+0x244>)
 8007d70:	4313      	orrs	r3, r2
 8007d72:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	2b02      	cmp	r3, #2
 8007d7a:	d107      	bne.n	8007d8c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007d7c:	4b3c      	ldr	r3, [pc, #240]	@ (8007e70 <HAL_RCC_ClockConfig+0x244>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d121      	bne.n	8007dcc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007d88:	2301      	movs	r3, #1
 8007d8a:	e0f6      	b.n	8007f7a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	2b03      	cmp	r3, #3
 8007d92:	d107      	bne.n	8007da4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007d94:	4b36      	ldr	r3, [pc, #216]	@ (8007e70 <HAL_RCC_ClockConfig+0x244>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d115      	bne.n	8007dcc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007da0:	2301      	movs	r3, #1
 8007da2:	e0ea      	b.n	8007f7a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	d107      	bne.n	8007dbc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007dac:	4b30      	ldr	r3, [pc, #192]	@ (8007e70 <HAL_RCC_ClockConfig+0x244>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d109      	bne.n	8007dcc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007db8:	2301      	movs	r3, #1
 8007dba:	e0de      	b.n	8007f7a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007dbc:	4b2c      	ldr	r3, [pc, #176]	@ (8007e70 <HAL_RCC_ClockConfig+0x244>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f003 0304 	and.w	r3, r3, #4
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d101      	bne.n	8007dcc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007dc8:	2301      	movs	r3, #1
 8007dca:	e0d6      	b.n	8007f7a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007dcc:	4b28      	ldr	r3, [pc, #160]	@ (8007e70 <HAL_RCC_ClockConfig+0x244>)
 8007dce:	691b      	ldr	r3, [r3, #16]
 8007dd0:	f023 0207 	bic.w	r2, r3, #7
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	4925      	ldr	r1, [pc, #148]	@ (8007e70 <HAL_RCC_ClockConfig+0x244>)
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007dde:	f7fa fb0f 	bl	8002400 <HAL_GetTick>
 8007de2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007de4:	e00a      	b.n	8007dfc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007de6:	f7fa fb0b 	bl	8002400 <HAL_GetTick>
 8007dea:	4602      	mov	r2, r0
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	1ad3      	subs	r3, r2, r3
 8007df0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d901      	bls.n	8007dfc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007df8:	2303      	movs	r3, #3
 8007dfa:	e0be      	b.n	8007f7a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007dfc:	4b1c      	ldr	r3, [pc, #112]	@ (8007e70 <HAL_RCC_ClockConfig+0x244>)
 8007dfe:	691b      	ldr	r3, [r3, #16]
 8007e00:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	00db      	lsls	r3, r3, #3
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	d1eb      	bne.n	8007de6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f003 0302 	and.w	r3, r3, #2
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d010      	beq.n	8007e3c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	68da      	ldr	r2, [r3, #12]
 8007e1e:	4b14      	ldr	r3, [pc, #80]	@ (8007e70 <HAL_RCC_ClockConfig+0x244>)
 8007e20:	699b      	ldr	r3, [r3, #24]
 8007e22:	f003 030f 	and.w	r3, r3, #15
 8007e26:	429a      	cmp	r2, r3
 8007e28:	d208      	bcs.n	8007e3c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e2a:	4b11      	ldr	r3, [pc, #68]	@ (8007e70 <HAL_RCC_ClockConfig+0x244>)
 8007e2c:	699b      	ldr	r3, [r3, #24]
 8007e2e:	f023 020f 	bic.w	r2, r3, #15
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	68db      	ldr	r3, [r3, #12]
 8007e36:	490e      	ldr	r1, [pc, #56]	@ (8007e70 <HAL_RCC_ClockConfig+0x244>)
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8007e6c <HAL_RCC_ClockConfig+0x240>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f003 030f 	and.w	r3, r3, #15
 8007e44:	683a      	ldr	r2, [r7, #0]
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d214      	bcs.n	8007e74 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e4a:	4b08      	ldr	r3, [pc, #32]	@ (8007e6c <HAL_RCC_ClockConfig+0x240>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f023 020f 	bic.w	r2, r3, #15
 8007e52:	4906      	ldr	r1, [pc, #24]	@ (8007e6c <HAL_RCC_ClockConfig+0x240>)
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	4313      	orrs	r3, r2
 8007e58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e5a:	4b04      	ldr	r3, [pc, #16]	@ (8007e6c <HAL_RCC_ClockConfig+0x240>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f003 030f 	and.w	r3, r3, #15
 8007e62:	683a      	ldr	r2, [r7, #0]
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d005      	beq.n	8007e74 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	e086      	b.n	8007f7a <HAL_RCC_ClockConfig+0x34e>
 8007e6c:	52002000 	.word	0x52002000
 8007e70:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f003 0304 	and.w	r3, r3, #4
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d010      	beq.n	8007ea2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	691a      	ldr	r2, [r3, #16]
 8007e84:	4b3f      	ldr	r3, [pc, #252]	@ (8007f84 <HAL_RCC_ClockConfig+0x358>)
 8007e86:	699b      	ldr	r3, [r3, #24]
 8007e88:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	d208      	bcs.n	8007ea2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007e90:	4b3c      	ldr	r3, [pc, #240]	@ (8007f84 <HAL_RCC_ClockConfig+0x358>)
 8007e92:	699b      	ldr	r3, [r3, #24]
 8007e94:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	691b      	ldr	r3, [r3, #16]
 8007e9c:	4939      	ldr	r1, [pc, #228]	@ (8007f84 <HAL_RCC_ClockConfig+0x358>)
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f003 0308 	and.w	r3, r3, #8
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d010      	beq.n	8007ed0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	695a      	ldr	r2, [r3, #20]
 8007eb2:	4b34      	ldr	r3, [pc, #208]	@ (8007f84 <HAL_RCC_ClockConfig+0x358>)
 8007eb4:	69db      	ldr	r3, [r3, #28]
 8007eb6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007eba:	429a      	cmp	r2, r3
 8007ebc:	d208      	bcs.n	8007ed0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007ebe:	4b31      	ldr	r3, [pc, #196]	@ (8007f84 <HAL_RCC_ClockConfig+0x358>)
 8007ec0:	69db      	ldr	r3, [r3, #28]
 8007ec2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	695b      	ldr	r3, [r3, #20]
 8007eca:	492e      	ldr	r1, [pc, #184]	@ (8007f84 <HAL_RCC_ClockConfig+0x358>)
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f003 0310 	and.w	r3, r3, #16
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d010      	beq.n	8007efe <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	699a      	ldr	r2, [r3, #24]
 8007ee0:	4b28      	ldr	r3, [pc, #160]	@ (8007f84 <HAL_RCC_ClockConfig+0x358>)
 8007ee2:	69db      	ldr	r3, [r3, #28]
 8007ee4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	d208      	bcs.n	8007efe <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007eec:	4b25      	ldr	r3, [pc, #148]	@ (8007f84 <HAL_RCC_ClockConfig+0x358>)
 8007eee:	69db      	ldr	r3, [r3, #28]
 8007ef0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	699b      	ldr	r3, [r3, #24]
 8007ef8:	4922      	ldr	r1, [pc, #136]	@ (8007f84 <HAL_RCC_ClockConfig+0x358>)
 8007efa:	4313      	orrs	r3, r2
 8007efc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f003 0320 	and.w	r3, r3, #32
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d010      	beq.n	8007f2c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	69da      	ldr	r2, [r3, #28]
 8007f0e:	4b1d      	ldr	r3, [pc, #116]	@ (8007f84 <HAL_RCC_ClockConfig+0x358>)
 8007f10:	6a1b      	ldr	r3, [r3, #32]
 8007f12:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d208      	bcs.n	8007f2c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007f1a:	4b1a      	ldr	r3, [pc, #104]	@ (8007f84 <HAL_RCC_ClockConfig+0x358>)
 8007f1c:	6a1b      	ldr	r3, [r3, #32]
 8007f1e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	69db      	ldr	r3, [r3, #28]
 8007f26:	4917      	ldr	r1, [pc, #92]	@ (8007f84 <HAL_RCC_ClockConfig+0x358>)
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007f2c:	f000 f834 	bl	8007f98 <HAL_RCC_GetSysClockFreq>
 8007f30:	4602      	mov	r2, r0
 8007f32:	4b14      	ldr	r3, [pc, #80]	@ (8007f84 <HAL_RCC_ClockConfig+0x358>)
 8007f34:	699b      	ldr	r3, [r3, #24]
 8007f36:	0a1b      	lsrs	r3, r3, #8
 8007f38:	f003 030f 	and.w	r3, r3, #15
 8007f3c:	4912      	ldr	r1, [pc, #72]	@ (8007f88 <HAL_RCC_ClockConfig+0x35c>)
 8007f3e:	5ccb      	ldrb	r3, [r1, r3]
 8007f40:	f003 031f 	and.w	r3, r3, #31
 8007f44:	fa22 f303 	lsr.w	r3, r2, r3
 8007f48:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007f4a:	4b0e      	ldr	r3, [pc, #56]	@ (8007f84 <HAL_RCC_ClockConfig+0x358>)
 8007f4c:	699b      	ldr	r3, [r3, #24]
 8007f4e:	f003 030f 	and.w	r3, r3, #15
 8007f52:	4a0d      	ldr	r2, [pc, #52]	@ (8007f88 <HAL_RCC_ClockConfig+0x35c>)
 8007f54:	5cd3      	ldrb	r3, [r2, r3]
 8007f56:	f003 031f 	and.w	r3, r3, #31
 8007f5a:	693a      	ldr	r2, [r7, #16]
 8007f5c:	fa22 f303 	lsr.w	r3, r2, r3
 8007f60:	4a0a      	ldr	r2, [pc, #40]	@ (8007f8c <HAL_RCC_ClockConfig+0x360>)
 8007f62:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007f64:	4a0a      	ldr	r2, [pc, #40]	@ (8007f90 <HAL_RCC_ClockConfig+0x364>)
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8007f94 <HAL_RCC_ClockConfig+0x368>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f7fa f9fc 	bl	800236c <HAL_InitTick>
 8007f74:	4603      	mov	r3, r0
 8007f76:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3718      	adds	r7, #24
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}
 8007f82:	bf00      	nop
 8007f84:	58024400 	.word	0x58024400
 8007f88:	08011004 	.word	0x08011004
 8007f8c:	24000004 	.word	0x24000004
 8007f90:	24000000 	.word	0x24000000
 8007f94:	24000024 	.word	0x24000024

08007f98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b089      	sub	sp, #36	@ 0x24
 8007f9c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007f9e:	4bb3      	ldr	r3, [pc, #716]	@ (800826c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007fa0:	691b      	ldr	r3, [r3, #16]
 8007fa2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007fa6:	2b18      	cmp	r3, #24
 8007fa8:	f200 8155 	bhi.w	8008256 <HAL_RCC_GetSysClockFreq+0x2be>
 8007fac:	a201      	add	r2, pc, #4	@ (adr r2, 8007fb4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fb2:	bf00      	nop
 8007fb4:	08008019 	.word	0x08008019
 8007fb8:	08008257 	.word	0x08008257
 8007fbc:	08008257 	.word	0x08008257
 8007fc0:	08008257 	.word	0x08008257
 8007fc4:	08008257 	.word	0x08008257
 8007fc8:	08008257 	.word	0x08008257
 8007fcc:	08008257 	.word	0x08008257
 8007fd0:	08008257 	.word	0x08008257
 8007fd4:	0800803f 	.word	0x0800803f
 8007fd8:	08008257 	.word	0x08008257
 8007fdc:	08008257 	.word	0x08008257
 8007fe0:	08008257 	.word	0x08008257
 8007fe4:	08008257 	.word	0x08008257
 8007fe8:	08008257 	.word	0x08008257
 8007fec:	08008257 	.word	0x08008257
 8007ff0:	08008257 	.word	0x08008257
 8007ff4:	08008045 	.word	0x08008045
 8007ff8:	08008257 	.word	0x08008257
 8007ffc:	08008257 	.word	0x08008257
 8008000:	08008257 	.word	0x08008257
 8008004:	08008257 	.word	0x08008257
 8008008:	08008257 	.word	0x08008257
 800800c:	08008257 	.word	0x08008257
 8008010:	08008257 	.word	0x08008257
 8008014:	0800804b 	.word	0x0800804b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008018:	4b94      	ldr	r3, [pc, #592]	@ (800826c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f003 0320 	and.w	r3, r3, #32
 8008020:	2b00      	cmp	r3, #0
 8008022:	d009      	beq.n	8008038 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008024:	4b91      	ldr	r3, [pc, #580]	@ (800826c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	08db      	lsrs	r3, r3, #3
 800802a:	f003 0303 	and.w	r3, r3, #3
 800802e:	4a90      	ldr	r2, [pc, #576]	@ (8008270 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008030:	fa22 f303 	lsr.w	r3, r2, r3
 8008034:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008036:	e111      	b.n	800825c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008038:	4b8d      	ldr	r3, [pc, #564]	@ (8008270 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800803a:	61bb      	str	r3, [r7, #24]
      break;
 800803c:	e10e      	b.n	800825c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800803e:	4b8d      	ldr	r3, [pc, #564]	@ (8008274 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008040:	61bb      	str	r3, [r7, #24]
      break;
 8008042:	e10b      	b.n	800825c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008044:	4b8c      	ldr	r3, [pc, #560]	@ (8008278 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008046:	61bb      	str	r3, [r7, #24]
      break;
 8008048:	e108      	b.n	800825c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800804a:	4b88      	ldr	r3, [pc, #544]	@ (800826c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800804c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800804e:	f003 0303 	and.w	r3, r3, #3
 8008052:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008054:	4b85      	ldr	r3, [pc, #532]	@ (800826c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008058:	091b      	lsrs	r3, r3, #4
 800805a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800805e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008060:	4b82      	ldr	r3, [pc, #520]	@ (800826c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008064:	f003 0301 	and.w	r3, r3, #1
 8008068:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800806a:	4b80      	ldr	r3, [pc, #512]	@ (800826c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800806c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800806e:	08db      	lsrs	r3, r3, #3
 8008070:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008074:	68fa      	ldr	r2, [r7, #12]
 8008076:	fb02 f303 	mul.w	r3, r2, r3
 800807a:	ee07 3a90 	vmov	s15, r3
 800807e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008082:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	2b00      	cmp	r3, #0
 800808a:	f000 80e1 	beq.w	8008250 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	2b02      	cmp	r3, #2
 8008092:	f000 8083 	beq.w	800819c <HAL_RCC_GetSysClockFreq+0x204>
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	2b02      	cmp	r3, #2
 800809a:	f200 80a1 	bhi.w	80081e0 <HAL_RCC_GetSysClockFreq+0x248>
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d003      	beq.n	80080ac <HAL_RCC_GetSysClockFreq+0x114>
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	2b01      	cmp	r3, #1
 80080a8:	d056      	beq.n	8008158 <HAL_RCC_GetSysClockFreq+0x1c0>
 80080aa:	e099      	b.n	80081e0 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80080ac:	4b6f      	ldr	r3, [pc, #444]	@ (800826c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f003 0320 	and.w	r3, r3, #32
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d02d      	beq.n	8008114 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80080b8:	4b6c      	ldr	r3, [pc, #432]	@ (800826c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	08db      	lsrs	r3, r3, #3
 80080be:	f003 0303 	and.w	r3, r3, #3
 80080c2:	4a6b      	ldr	r2, [pc, #428]	@ (8008270 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80080c4:	fa22 f303 	lsr.w	r3, r2, r3
 80080c8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	ee07 3a90 	vmov	s15, r3
 80080d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	ee07 3a90 	vmov	s15, r3
 80080da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080e2:	4b62      	ldr	r3, [pc, #392]	@ (800826c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080ea:	ee07 3a90 	vmov	s15, r3
 80080ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80080f6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800827c <HAL_RCC_GetSysClockFreq+0x2e4>
 80080fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008102:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008106:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800810a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800810e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008112:	e087      	b.n	8008224 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	ee07 3a90 	vmov	s15, r3
 800811a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800811e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8008280 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008122:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008126:	4b51      	ldr	r3, [pc, #324]	@ (800826c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800812a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800812e:	ee07 3a90 	vmov	s15, r3
 8008132:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008136:	ed97 6a02 	vldr	s12, [r7, #8]
 800813a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800827c <HAL_RCC_GetSysClockFreq+0x2e4>
 800813e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008142:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008146:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800814a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800814e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008152:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008156:	e065      	b.n	8008224 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	ee07 3a90 	vmov	s15, r3
 800815e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008162:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8008284 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008166:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800816a:	4b40      	ldr	r3, [pc, #256]	@ (800826c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800816c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800816e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008172:	ee07 3a90 	vmov	s15, r3
 8008176:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800817a:	ed97 6a02 	vldr	s12, [r7, #8]
 800817e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800827c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008182:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008186:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800818a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800818e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008192:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008196:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800819a:	e043      	b.n	8008224 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	ee07 3a90 	vmov	s15, r3
 80081a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081a6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8008288 <HAL_RCC_GetSysClockFreq+0x2f0>
 80081aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081ae:	4b2f      	ldr	r3, [pc, #188]	@ (800826c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081b6:	ee07 3a90 	vmov	s15, r3
 80081ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081be:	ed97 6a02 	vldr	s12, [r7, #8]
 80081c2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800827c <HAL_RCC_GetSysClockFreq+0x2e4>
 80081c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80081d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80081de:	e021      	b.n	8008224 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	ee07 3a90 	vmov	s15, r3
 80081e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081ea:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8008284 <HAL_RCC_GetSysClockFreq+0x2ec>
 80081ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081f2:	4b1e      	ldr	r3, [pc, #120]	@ (800826c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081fa:	ee07 3a90 	vmov	s15, r3
 80081fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008202:	ed97 6a02 	vldr	s12, [r7, #8]
 8008206:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800827c <HAL_RCC_GetSysClockFreq+0x2e4>
 800820a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800820e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008212:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008216:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800821a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800821e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008222:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008224:	4b11      	ldr	r3, [pc, #68]	@ (800826c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008228:	0a5b      	lsrs	r3, r3, #9
 800822a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800822e:	3301      	adds	r3, #1
 8008230:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	ee07 3a90 	vmov	s15, r3
 8008238:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800823c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008240:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008244:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008248:	ee17 3a90 	vmov	r3, s15
 800824c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800824e:	e005      	b.n	800825c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008250:	2300      	movs	r3, #0
 8008252:	61bb      	str	r3, [r7, #24]
      break;
 8008254:	e002      	b.n	800825c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008256:	4b07      	ldr	r3, [pc, #28]	@ (8008274 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008258:	61bb      	str	r3, [r7, #24]
      break;
 800825a:	bf00      	nop
  }

  return sysclockfreq;
 800825c:	69bb      	ldr	r3, [r7, #24]
}
 800825e:	4618      	mov	r0, r3
 8008260:	3724      	adds	r7, #36	@ 0x24
 8008262:	46bd      	mov	sp, r7
 8008264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008268:	4770      	bx	lr
 800826a:	bf00      	nop
 800826c:	58024400 	.word	0x58024400
 8008270:	03d09000 	.word	0x03d09000
 8008274:	003d0900 	.word	0x003d0900
 8008278:	017d7840 	.word	0x017d7840
 800827c:	46000000 	.word	0x46000000
 8008280:	4c742400 	.word	0x4c742400
 8008284:	4a742400 	.word	0x4a742400
 8008288:	4bbebc20 	.word	0x4bbebc20

0800828c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b082      	sub	sp, #8
 8008290:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008292:	f7ff fe81 	bl	8007f98 <HAL_RCC_GetSysClockFreq>
 8008296:	4602      	mov	r2, r0
 8008298:	4b10      	ldr	r3, [pc, #64]	@ (80082dc <HAL_RCC_GetHCLKFreq+0x50>)
 800829a:	699b      	ldr	r3, [r3, #24]
 800829c:	0a1b      	lsrs	r3, r3, #8
 800829e:	f003 030f 	and.w	r3, r3, #15
 80082a2:	490f      	ldr	r1, [pc, #60]	@ (80082e0 <HAL_RCC_GetHCLKFreq+0x54>)
 80082a4:	5ccb      	ldrb	r3, [r1, r3]
 80082a6:	f003 031f 	and.w	r3, r3, #31
 80082aa:	fa22 f303 	lsr.w	r3, r2, r3
 80082ae:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80082b0:	4b0a      	ldr	r3, [pc, #40]	@ (80082dc <HAL_RCC_GetHCLKFreq+0x50>)
 80082b2:	699b      	ldr	r3, [r3, #24]
 80082b4:	f003 030f 	and.w	r3, r3, #15
 80082b8:	4a09      	ldr	r2, [pc, #36]	@ (80082e0 <HAL_RCC_GetHCLKFreq+0x54>)
 80082ba:	5cd3      	ldrb	r3, [r2, r3]
 80082bc:	f003 031f 	and.w	r3, r3, #31
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	fa22 f303 	lsr.w	r3, r2, r3
 80082c6:	4a07      	ldr	r2, [pc, #28]	@ (80082e4 <HAL_RCC_GetHCLKFreq+0x58>)
 80082c8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80082ca:	4a07      	ldr	r2, [pc, #28]	@ (80082e8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80082d0:	4b04      	ldr	r3, [pc, #16]	@ (80082e4 <HAL_RCC_GetHCLKFreq+0x58>)
 80082d2:	681b      	ldr	r3, [r3, #0]
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3708      	adds	r7, #8
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}
 80082dc:	58024400 	.word	0x58024400
 80082e0:	08011004 	.word	0x08011004
 80082e4:	24000004 	.word	0x24000004
 80082e8:	24000000 	.word	0x24000000

080082ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80082f0:	f7ff ffcc 	bl	800828c <HAL_RCC_GetHCLKFreq>
 80082f4:	4602      	mov	r2, r0
 80082f6:	4b06      	ldr	r3, [pc, #24]	@ (8008310 <HAL_RCC_GetPCLK1Freq+0x24>)
 80082f8:	69db      	ldr	r3, [r3, #28]
 80082fa:	091b      	lsrs	r3, r3, #4
 80082fc:	f003 0307 	and.w	r3, r3, #7
 8008300:	4904      	ldr	r1, [pc, #16]	@ (8008314 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008302:	5ccb      	ldrb	r3, [r1, r3]
 8008304:	f003 031f 	and.w	r3, r3, #31
 8008308:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800830c:	4618      	mov	r0, r3
 800830e:	bd80      	pop	{r7, pc}
 8008310:	58024400 	.word	0x58024400
 8008314:	08011004 	.word	0x08011004

08008318 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800831c:	f7ff ffb6 	bl	800828c <HAL_RCC_GetHCLKFreq>
 8008320:	4602      	mov	r2, r0
 8008322:	4b06      	ldr	r3, [pc, #24]	@ (800833c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008324:	69db      	ldr	r3, [r3, #28]
 8008326:	0a1b      	lsrs	r3, r3, #8
 8008328:	f003 0307 	and.w	r3, r3, #7
 800832c:	4904      	ldr	r1, [pc, #16]	@ (8008340 <HAL_RCC_GetPCLK2Freq+0x28>)
 800832e:	5ccb      	ldrb	r3, [r1, r3]
 8008330:	f003 031f 	and.w	r3, r3, #31
 8008334:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008338:	4618      	mov	r0, r3
 800833a:	bd80      	pop	{r7, pc}
 800833c:	58024400 	.word	0x58024400
 8008340:	08011004 	.word	0x08011004

08008344 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008344:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008348:	b0ca      	sub	sp, #296	@ 0x128
 800834a:	af00      	add	r7, sp, #0
 800834c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008350:	2300      	movs	r3, #0
 8008352:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008356:	2300      	movs	r3, #0
 8008358:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800835c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008364:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8008368:	2500      	movs	r5, #0
 800836a:	ea54 0305 	orrs.w	r3, r4, r5
 800836e:	d049      	beq.n	8008404 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008370:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008374:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008376:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800837a:	d02f      	beq.n	80083dc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800837c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008380:	d828      	bhi.n	80083d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008382:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008386:	d01a      	beq.n	80083be <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008388:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800838c:	d822      	bhi.n	80083d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800838e:	2b00      	cmp	r3, #0
 8008390:	d003      	beq.n	800839a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008392:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008396:	d007      	beq.n	80083a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008398:	e01c      	b.n	80083d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800839a:	4bb8      	ldr	r3, [pc, #736]	@ (800867c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800839c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800839e:	4ab7      	ldr	r2, [pc, #732]	@ (800867c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80083a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80083a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80083a6:	e01a      	b.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80083a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083ac:	3308      	adds	r3, #8
 80083ae:	2102      	movs	r1, #2
 80083b0:	4618      	mov	r0, r3
 80083b2:	f002 fb61 	bl	800aa78 <RCCEx_PLL2_Config>
 80083b6:	4603      	mov	r3, r0
 80083b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80083bc:	e00f      	b.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80083be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083c2:	3328      	adds	r3, #40	@ 0x28
 80083c4:	2102      	movs	r1, #2
 80083c6:	4618      	mov	r0, r3
 80083c8:	f002 fc08 	bl	800abdc <RCCEx_PLL3_Config>
 80083cc:	4603      	mov	r3, r0
 80083ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80083d2:	e004      	b.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80083d4:	2301      	movs	r3, #1
 80083d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80083da:	e000      	b.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80083dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d10a      	bne.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80083e6:	4ba5      	ldr	r3, [pc, #660]	@ (800867c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80083e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083ea:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80083ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80083f4:	4aa1      	ldr	r2, [pc, #644]	@ (800867c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80083f6:	430b      	orrs	r3, r1
 80083f8:	6513      	str	r3, [r2, #80]	@ 0x50
 80083fa:	e003      	b.n	8008404 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008400:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008404:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800840c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008410:	f04f 0900 	mov.w	r9, #0
 8008414:	ea58 0309 	orrs.w	r3, r8, r9
 8008418:	d047      	beq.n	80084aa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800841a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800841e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008420:	2b04      	cmp	r3, #4
 8008422:	d82a      	bhi.n	800847a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008424:	a201      	add	r2, pc, #4	@ (adr r2, 800842c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800842a:	bf00      	nop
 800842c:	08008441 	.word	0x08008441
 8008430:	0800844f 	.word	0x0800844f
 8008434:	08008465 	.word	0x08008465
 8008438:	08008483 	.word	0x08008483
 800843c:	08008483 	.word	0x08008483
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008440:	4b8e      	ldr	r3, [pc, #568]	@ (800867c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008444:	4a8d      	ldr	r2, [pc, #564]	@ (800867c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008446:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800844a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800844c:	e01a      	b.n	8008484 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800844e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008452:	3308      	adds	r3, #8
 8008454:	2100      	movs	r1, #0
 8008456:	4618      	mov	r0, r3
 8008458:	f002 fb0e 	bl	800aa78 <RCCEx_PLL2_Config>
 800845c:	4603      	mov	r3, r0
 800845e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008462:	e00f      	b.n	8008484 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008464:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008468:	3328      	adds	r3, #40	@ 0x28
 800846a:	2100      	movs	r1, #0
 800846c:	4618      	mov	r0, r3
 800846e:	f002 fbb5 	bl	800abdc <RCCEx_PLL3_Config>
 8008472:	4603      	mov	r3, r0
 8008474:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008478:	e004      	b.n	8008484 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800847a:	2301      	movs	r3, #1
 800847c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008480:	e000      	b.n	8008484 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008482:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008484:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008488:	2b00      	cmp	r3, #0
 800848a:	d10a      	bne.n	80084a2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800848c:	4b7b      	ldr	r3, [pc, #492]	@ (800867c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800848e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008490:	f023 0107 	bic.w	r1, r3, #7
 8008494:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800849a:	4a78      	ldr	r2, [pc, #480]	@ (800867c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800849c:	430b      	orrs	r3, r1
 800849e:	6513      	str	r3, [r2, #80]	@ 0x50
 80084a0:	e003      	b.n	80084aa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80084aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80084b6:	f04f 0b00 	mov.w	fp, #0
 80084ba:	ea5a 030b 	orrs.w	r3, sl, fp
 80084be:	d04c      	beq.n	800855a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80084c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80084c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80084ca:	d030      	beq.n	800852e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80084cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80084d0:	d829      	bhi.n	8008526 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80084d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80084d4:	d02d      	beq.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80084d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80084d8:	d825      	bhi.n	8008526 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80084da:	2b80      	cmp	r3, #128	@ 0x80
 80084dc:	d018      	beq.n	8008510 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80084de:	2b80      	cmp	r3, #128	@ 0x80
 80084e0:	d821      	bhi.n	8008526 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d002      	beq.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80084e6:	2b40      	cmp	r3, #64	@ 0x40
 80084e8:	d007      	beq.n	80084fa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80084ea:	e01c      	b.n	8008526 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084ec:	4b63      	ldr	r3, [pc, #396]	@ (800867c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80084ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084f0:	4a62      	ldr	r2, [pc, #392]	@ (800867c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80084f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80084f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80084f8:	e01c      	b.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80084fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084fe:	3308      	adds	r3, #8
 8008500:	2100      	movs	r1, #0
 8008502:	4618      	mov	r0, r3
 8008504:	f002 fab8 	bl	800aa78 <RCCEx_PLL2_Config>
 8008508:	4603      	mov	r3, r0
 800850a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800850e:	e011      	b.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008510:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008514:	3328      	adds	r3, #40	@ 0x28
 8008516:	2100      	movs	r1, #0
 8008518:	4618      	mov	r0, r3
 800851a:	f002 fb5f 	bl	800abdc <RCCEx_PLL3_Config>
 800851e:	4603      	mov	r3, r0
 8008520:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008524:	e006      	b.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008526:	2301      	movs	r3, #1
 8008528:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800852c:	e002      	b.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800852e:	bf00      	nop
 8008530:	e000      	b.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008532:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008534:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008538:	2b00      	cmp	r3, #0
 800853a:	d10a      	bne.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800853c:	4b4f      	ldr	r3, [pc, #316]	@ (800867c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800853e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008540:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8008544:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008548:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800854a:	4a4c      	ldr	r2, [pc, #304]	@ (800867c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800854c:	430b      	orrs	r3, r1
 800854e:	6513      	str	r3, [r2, #80]	@ 0x50
 8008550:	e003      	b.n	800855a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008552:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008556:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800855a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800855e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008562:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8008566:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800856a:	2300      	movs	r3, #0
 800856c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8008570:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8008574:	460b      	mov	r3, r1
 8008576:	4313      	orrs	r3, r2
 8008578:	d053      	beq.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800857a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800857e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008582:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008586:	d035      	beq.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8008588:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800858c:	d82e      	bhi.n	80085ec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800858e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008592:	d031      	beq.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8008594:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008598:	d828      	bhi.n	80085ec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800859a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800859e:	d01a      	beq.n	80085d6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80085a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80085a4:	d822      	bhi.n	80085ec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d003      	beq.n	80085b2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80085aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80085ae:	d007      	beq.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80085b0:	e01c      	b.n	80085ec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085b2:	4b32      	ldr	r3, [pc, #200]	@ (800867c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80085b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085b6:	4a31      	ldr	r2, [pc, #196]	@ (800867c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80085b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80085bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80085be:	e01c      	b.n	80085fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80085c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085c4:	3308      	adds	r3, #8
 80085c6:	2100      	movs	r1, #0
 80085c8:	4618      	mov	r0, r3
 80085ca:	f002 fa55 	bl	800aa78 <RCCEx_PLL2_Config>
 80085ce:	4603      	mov	r3, r0
 80085d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80085d4:	e011      	b.n	80085fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80085d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085da:	3328      	adds	r3, #40	@ 0x28
 80085dc:	2100      	movs	r1, #0
 80085de:	4618      	mov	r0, r3
 80085e0:	f002 fafc 	bl	800abdc <RCCEx_PLL3_Config>
 80085e4:	4603      	mov	r3, r0
 80085e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80085ea:	e006      	b.n	80085fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80085ec:	2301      	movs	r3, #1
 80085ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80085f2:	e002      	b.n	80085fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80085f4:	bf00      	nop
 80085f6:	e000      	b.n	80085fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80085f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d10b      	bne.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008602:	4b1e      	ldr	r3, [pc, #120]	@ (800867c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008606:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800860a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800860e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008612:	4a1a      	ldr	r2, [pc, #104]	@ (800867c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008614:	430b      	orrs	r3, r1
 8008616:	6593      	str	r3, [r2, #88]	@ 0x58
 8008618:	e003      	b.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800861a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800861e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008622:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800862a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800862e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008632:	2300      	movs	r3, #0
 8008634:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008638:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800863c:	460b      	mov	r3, r1
 800863e:	4313      	orrs	r3, r2
 8008640:	d056      	beq.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008642:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008646:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800864a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800864e:	d038      	beq.n	80086c2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008650:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008654:	d831      	bhi.n	80086ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008656:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800865a:	d034      	beq.n	80086c6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800865c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008660:	d82b      	bhi.n	80086ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008662:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008666:	d01d      	beq.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8008668:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800866c:	d825      	bhi.n	80086ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 800866e:	2b00      	cmp	r3, #0
 8008670:	d006      	beq.n	8008680 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008672:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008676:	d00a      	beq.n	800868e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008678:	e01f      	b.n	80086ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 800867a:	bf00      	nop
 800867c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008680:	4ba2      	ldr	r3, [pc, #648]	@ (800890c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008684:	4aa1      	ldr	r2, [pc, #644]	@ (800890c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008686:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800868a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800868c:	e01c      	b.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800868e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008692:	3308      	adds	r3, #8
 8008694:	2100      	movs	r1, #0
 8008696:	4618      	mov	r0, r3
 8008698:	f002 f9ee 	bl	800aa78 <RCCEx_PLL2_Config>
 800869c:	4603      	mov	r3, r0
 800869e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80086a2:	e011      	b.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80086a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086a8:	3328      	adds	r3, #40	@ 0x28
 80086aa:	2100      	movs	r1, #0
 80086ac:	4618      	mov	r0, r3
 80086ae:	f002 fa95 	bl	800abdc <RCCEx_PLL3_Config>
 80086b2:	4603      	mov	r3, r0
 80086b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80086b8:	e006      	b.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80086ba:	2301      	movs	r3, #1
 80086bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80086c0:	e002      	b.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80086c2:	bf00      	nop
 80086c4:	e000      	b.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80086c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d10b      	bne.n	80086e8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80086d0:	4b8e      	ldr	r3, [pc, #568]	@ (800890c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80086d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086d4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80086d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086dc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80086e0:	4a8a      	ldr	r2, [pc, #552]	@ (800890c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80086e2:	430b      	orrs	r3, r1
 80086e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80086e6:	e003      	b.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80086f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80086fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008700:	2300      	movs	r3, #0
 8008702:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008706:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800870a:	460b      	mov	r3, r1
 800870c:	4313      	orrs	r3, r2
 800870e:	d03a      	beq.n	8008786 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8008710:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008716:	2b30      	cmp	r3, #48	@ 0x30
 8008718:	d01f      	beq.n	800875a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800871a:	2b30      	cmp	r3, #48	@ 0x30
 800871c:	d819      	bhi.n	8008752 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800871e:	2b20      	cmp	r3, #32
 8008720:	d00c      	beq.n	800873c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8008722:	2b20      	cmp	r3, #32
 8008724:	d815      	bhi.n	8008752 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008726:	2b00      	cmp	r3, #0
 8008728:	d019      	beq.n	800875e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800872a:	2b10      	cmp	r3, #16
 800872c:	d111      	bne.n	8008752 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800872e:	4b77      	ldr	r3, [pc, #476]	@ (800890c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008732:	4a76      	ldr	r2, [pc, #472]	@ (800890c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008734:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008738:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800873a:	e011      	b.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800873c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008740:	3308      	adds	r3, #8
 8008742:	2102      	movs	r1, #2
 8008744:	4618      	mov	r0, r3
 8008746:	f002 f997 	bl	800aa78 <RCCEx_PLL2_Config>
 800874a:	4603      	mov	r3, r0
 800874c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008750:	e006      	b.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008752:	2301      	movs	r3, #1
 8008754:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008758:	e002      	b.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800875a:	bf00      	nop
 800875c:	e000      	b.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800875e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008760:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008764:	2b00      	cmp	r3, #0
 8008766:	d10a      	bne.n	800877e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008768:	4b68      	ldr	r3, [pc, #416]	@ (800890c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800876a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800876c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008770:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008776:	4a65      	ldr	r2, [pc, #404]	@ (800890c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008778:	430b      	orrs	r3, r1
 800877a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800877c:	e003      	b.n	8008786 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800877e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008782:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800878a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800878e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8008792:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008796:	2300      	movs	r3, #0
 8008798:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800879c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80087a0:	460b      	mov	r3, r1
 80087a2:	4313      	orrs	r3, r2
 80087a4:	d051      	beq.n	800884a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80087a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80087ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80087b0:	d035      	beq.n	800881e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80087b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80087b6:	d82e      	bhi.n	8008816 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80087b8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80087bc:	d031      	beq.n	8008822 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80087be:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80087c2:	d828      	bhi.n	8008816 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80087c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80087c8:	d01a      	beq.n	8008800 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80087ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80087ce:	d822      	bhi.n	8008816 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d003      	beq.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0x498>
 80087d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087d8:	d007      	beq.n	80087ea <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80087da:	e01c      	b.n	8008816 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087dc:	4b4b      	ldr	r3, [pc, #300]	@ (800890c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80087de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087e0:	4a4a      	ldr	r2, [pc, #296]	@ (800890c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80087e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80087e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80087e8:	e01c      	b.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80087ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087ee:	3308      	adds	r3, #8
 80087f0:	2100      	movs	r1, #0
 80087f2:	4618      	mov	r0, r3
 80087f4:	f002 f940 	bl	800aa78 <RCCEx_PLL2_Config>
 80087f8:	4603      	mov	r3, r0
 80087fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80087fe:	e011      	b.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008800:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008804:	3328      	adds	r3, #40	@ 0x28
 8008806:	2100      	movs	r1, #0
 8008808:	4618      	mov	r0, r3
 800880a:	f002 f9e7 	bl	800abdc <RCCEx_PLL3_Config>
 800880e:	4603      	mov	r3, r0
 8008810:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008814:	e006      	b.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008816:	2301      	movs	r3, #1
 8008818:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800881c:	e002      	b.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800881e:	bf00      	nop
 8008820:	e000      	b.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008822:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008824:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008828:	2b00      	cmp	r3, #0
 800882a:	d10a      	bne.n	8008842 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800882c:	4b37      	ldr	r3, [pc, #220]	@ (800890c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800882e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008830:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008834:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008838:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800883a:	4a34      	ldr	r2, [pc, #208]	@ (800890c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800883c:	430b      	orrs	r3, r1
 800883e:	6513      	str	r3, [r2, #80]	@ 0x50
 8008840:	e003      	b.n	800884a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008842:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008846:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800884a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800884e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008852:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8008856:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800885a:	2300      	movs	r3, #0
 800885c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008860:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8008864:	460b      	mov	r3, r1
 8008866:	4313      	orrs	r3, r2
 8008868:	d056      	beq.n	8008918 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800886a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800886e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008870:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008874:	d033      	beq.n	80088de <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008876:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800887a:	d82c      	bhi.n	80088d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800887c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008880:	d02f      	beq.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8008882:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008886:	d826      	bhi.n	80088d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008888:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800888c:	d02b      	beq.n	80088e6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800888e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008892:	d820      	bhi.n	80088d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008894:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008898:	d012      	beq.n	80088c0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800889a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800889e:	d81a      	bhi.n	80088d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d022      	beq.n	80088ea <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80088a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80088a8:	d115      	bne.n	80088d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80088aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088ae:	3308      	adds	r3, #8
 80088b0:	2101      	movs	r1, #1
 80088b2:	4618      	mov	r0, r3
 80088b4:	f002 f8e0 	bl	800aa78 <RCCEx_PLL2_Config>
 80088b8:	4603      	mov	r3, r0
 80088ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80088be:	e015      	b.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80088c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088c4:	3328      	adds	r3, #40	@ 0x28
 80088c6:	2101      	movs	r1, #1
 80088c8:	4618      	mov	r0, r3
 80088ca:	f002 f987 	bl	800abdc <RCCEx_PLL3_Config>
 80088ce:	4603      	mov	r3, r0
 80088d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80088d4:	e00a      	b.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80088d6:	2301      	movs	r3, #1
 80088d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80088dc:	e006      	b.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80088de:	bf00      	nop
 80088e0:	e004      	b.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80088e2:	bf00      	nop
 80088e4:	e002      	b.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80088e6:	bf00      	nop
 80088e8:	e000      	b.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80088ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d10d      	bne.n	8008910 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80088f4:	4b05      	ldr	r3, [pc, #20]	@ (800890c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80088f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088f8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80088fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008900:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008902:	4a02      	ldr	r2, [pc, #8]	@ (800890c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008904:	430b      	orrs	r3, r1
 8008906:	6513      	str	r3, [r2, #80]	@ 0x50
 8008908:	e006      	b.n	8008918 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800890a:	bf00      	nop
 800890c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008910:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008914:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008918:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800891c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008920:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8008924:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008928:	2300      	movs	r3, #0
 800892a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800892e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8008932:	460b      	mov	r3, r1
 8008934:	4313      	orrs	r3, r2
 8008936:	d055      	beq.n	80089e4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008938:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800893c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008940:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008944:	d033      	beq.n	80089ae <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8008946:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800894a:	d82c      	bhi.n	80089a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800894c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008950:	d02f      	beq.n	80089b2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8008952:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008956:	d826      	bhi.n	80089a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008958:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800895c:	d02b      	beq.n	80089b6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800895e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008962:	d820      	bhi.n	80089a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008964:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008968:	d012      	beq.n	8008990 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800896a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800896e:	d81a      	bhi.n	80089a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008970:	2b00      	cmp	r3, #0
 8008972:	d022      	beq.n	80089ba <HAL_RCCEx_PeriphCLKConfig+0x676>
 8008974:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008978:	d115      	bne.n	80089a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800897a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800897e:	3308      	adds	r3, #8
 8008980:	2101      	movs	r1, #1
 8008982:	4618      	mov	r0, r3
 8008984:	f002 f878 	bl	800aa78 <RCCEx_PLL2_Config>
 8008988:	4603      	mov	r3, r0
 800898a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800898e:	e015      	b.n	80089bc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008990:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008994:	3328      	adds	r3, #40	@ 0x28
 8008996:	2101      	movs	r1, #1
 8008998:	4618      	mov	r0, r3
 800899a:	f002 f91f 	bl	800abdc <RCCEx_PLL3_Config>
 800899e:	4603      	mov	r3, r0
 80089a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80089a4:	e00a      	b.n	80089bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80089a6:	2301      	movs	r3, #1
 80089a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80089ac:	e006      	b.n	80089bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80089ae:	bf00      	nop
 80089b0:	e004      	b.n	80089bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80089b2:	bf00      	nop
 80089b4:	e002      	b.n	80089bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80089b6:	bf00      	nop
 80089b8:	e000      	b.n	80089bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80089ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d10b      	bne.n	80089dc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80089c4:	4ba3      	ldr	r3, [pc, #652]	@ (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80089c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089c8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80089cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80089d4:	4a9f      	ldr	r2, [pc, #636]	@ (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80089d6:	430b      	orrs	r3, r1
 80089d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80089da:	e003      	b.n	80089e4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80089e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80089e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ec:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80089f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80089f4:	2300      	movs	r3, #0
 80089f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80089fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80089fe:	460b      	mov	r3, r1
 8008a00:	4313      	orrs	r3, r2
 8008a02:	d037      	beq.n	8008a74 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a0e:	d00e      	beq.n	8008a2e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8008a10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a14:	d816      	bhi.n	8008a44 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d018      	beq.n	8008a4c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8008a1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a1e:	d111      	bne.n	8008a44 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a20:	4b8c      	ldr	r3, [pc, #560]	@ (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a24:	4a8b      	ldr	r2, [pc, #556]	@ (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008a2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008a2c:	e00f      	b.n	8008a4e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a32:	3308      	adds	r3, #8
 8008a34:	2101      	movs	r1, #1
 8008a36:	4618      	mov	r0, r3
 8008a38:	f002 f81e 	bl	800aa78 <RCCEx_PLL2_Config>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008a42:	e004      	b.n	8008a4e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a44:	2301      	movs	r3, #1
 8008a46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008a4a:	e000      	b.n	8008a4e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8008a4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d10a      	bne.n	8008a6c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008a56:	4b7f      	ldr	r3, [pc, #508]	@ (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a5a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a64:	4a7b      	ldr	r2, [pc, #492]	@ (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a66:	430b      	orrs	r3, r1
 8008a68:	6513      	str	r3, [r2, #80]	@ 0x50
 8008a6a:	e003      	b.n	8008a74 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a7c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8008a80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008a84:	2300      	movs	r3, #0
 8008a86:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008a8a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8008a8e:	460b      	mov	r3, r1
 8008a90:	4313      	orrs	r3, r2
 8008a92:	d039      	beq.n	8008b08 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a9a:	2b03      	cmp	r3, #3
 8008a9c:	d81c      	bhi.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8008a9e:	a201      	add	r2, pc, #4	@ (adr r2, 8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8008aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aa4:	08008ae1 	.word	0x08008ae1
 8008aa8:	08008ab5 	.word	0x08008ab5
 8008aac:	08008ac3 	.word	0x08008ac3
 8008ab0:	08008ae1 	.word	0x08008ae1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ab4:	4b67      	ldr	r3, [pc, #412]	@ (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ab8:	4a66      	ldr	r2, [pc, #408]	@ (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008aba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008abe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008ac0:	e00f      	b.n	8008ae2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ac6:	3308      	adds	r3, #8
 8008ac8:	2102      	movs	r1, #2
 8008aca:	4618      	mov	r0, r3
 8008acc:	f001 ffd4 	bl	800aa78 <RCCEx_PLL2_Config>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008ad6:	e004      	b.n	8008ae2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008ad8:	2301      	movs	r3, #1
 8008ada:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008ade:	e000      	b.n	8008ae2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8008ae0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ae2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d10a      	bne.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008aea:	4b5a      	ldr	r3, [pc, #360]	@ (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008aec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008aee:	f023 0103 	bic.w	r1, r3, #3
 8008af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008af6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008af8:	4a56      	ldr	r2, [pc, #344]	@ (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008afa:	430b      	orrs	r3, r1
 8008afc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008afe:	e003      	b.n	8008b08 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b10:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008b14:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008b18:	2300      	movs	r3, #0
 8008b1a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008b1e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8008b22:	460b      	mov	r3, r1
 8008b24:	4313      	orrs	r3, r2
 8008b26:	f000 809f 	beq.w	8008c68 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008b2a:	4b4b      	ldr	r3, [pc, #300]	@ (8008c58 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	4a4a      	ldr	r2, [pc, #296]	@ (8008c58 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008b30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008b34:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008b36:	f7f9 fc63 	bl	8002400 <HAL_GetTick>
 8008b3a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008b3e:	e00b      	b.n	8008b58 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b40:	f7f9 fc5e 	bl	8002400 <HAL_GetTick>
 8008b44:	4602      	mov	r2, r0
 8008b46:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008b4a:	1ad3      	subs	r3, r2, r3
 8008b4c:	2b64      	cmp	r3, #100	@ 0x64
 8008b4e:	d903      	bls.n	8008b58 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008b50:	2303      	movs	r3, #3
 8008b52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008b56:	e005      	b.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008b58:	4b3f      	ldr	r3, [pc, #252]	@ (8008c58 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d0ed      	beq.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008b64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d179      	bne.n	8008c60 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008b6c:	4b39      	ldr	r3, [pc, #228]	@ (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008b6e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b74:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008b78:	4053      	eors	r3, r2
 8008b7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d015      	beq.n	8008bae <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008b82:	4b34      	ldr	r3, [pc, #208]	@ (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008b84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b8a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008b8e:	4b31      	ldr	r3, [pc, #196]	@ (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008b90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b92:	4a30      	ldr	r2, [pc, #192]	@ (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008b94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008b98:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008b9a:	4b2e      	ldr	r3, [pc, #184]	@ (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008b9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b9e:	4a2d      	ldr	r2, [pc, #180]	@ (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008ba0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008ba4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008ba6:	4a2b      	ldr	r2, [pc, #172]	@ (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008ba8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8008bac:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bb2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008bb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008bba:	d118      	bne.n	8008bee <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bbc:	f7f9 fc20 	bl	8002400 <HAL_GetTick>
 8008bc0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008bc4:	e00d      	b.n	8008be2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008bc6:	f7f9 fc1b 	bl	8002400 <HAL_GetTick>
 8008bca:	4602      	mov	r2, r0
 8008bcc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008bd0:	1ad2      	subs	r2, r2, r3
 8008bd2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	d903      	bls.n	8008be2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8008bda:	2303      	movs	r3, #3
 8008bdc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8008be0:	e005      	b.n	8008bee <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008be2:	4b1c      	ldr	r3, [pc, #112]	@ (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008be4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008be6:	f003 0302 	and.w	r3, r3, #2
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d0eb      	beq.n	8008bc6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8008bee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d129      	bne.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bfa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008bfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008c02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008c06:	d10e      	bne.n	8008c26 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8008c08:	4b12      	ldr	r3, [pc, #72]	@ (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c0a:	691b      	ldr	r3, [r3, #16]
 8008c0c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8008c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c14:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008c18:	091a      	lsrs	r2, r3, #4
 8008c1a:	4b10      	ldr	r3, [pc, #64]	@ (8008c5c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8008c1c:	4013      	ands	r3, r2
 8008c1e:	4a0d      	ldr	r2, [pc, #52]	@ (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c20:	430b      	orrs	r3, r1
 8008c22:	6113      	str	r3, [r2, #16]
 8008c24:	e005      	b.n	8008c32 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8008c26:	4b0b      	ldr	r3, [pc, #44]	@ (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c28:	691b      	ldr	r3, [r3, #16]
 8008c2a:	4a0a      	ldr	r2, [pc, #40]	@ (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c2c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008c30:	6113      	str	r3, [r2, #16]
 8008c32:	4b08      	ldr	r3, [pc, #32]	@ (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c34:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8008c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c3a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008c3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c42:	4a04      	ldr	r2, [pc, #16]	@ (8008c54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c44:	430b      	orrs	r3, r1
 8008c46:	6713      	str	r3, [r2, #112]	@ 0x70
 8008c48:	e00e      	b.n	8008c68 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008c4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8008c52:	e009      	b.n	8008c68 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008c54:	58024400 	.word	0x58024400
 8008c58:	58024800 	.word	0x58024800
 8008c5c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c70:	f002 0301 	and.w	r3, r2, #1
 8008c74:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008c78:	2300      	movs	r3, #0
 8008c7a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008c7e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008c82:	460b      	mov	r3, r1
 8008c84:	4313      	orrs	r3, r2
 8008c86:	f000 8089 	beq.w	8008d9c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8008c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008c90:	2b28      	cmp	r3, #40	@ 0x28
 8008c92:	d86b      	bhi.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8008c94:	a201      	add	r2, pc, #4	@ (adr r2, 8008c9c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c9a:	bf00      	nop
 8008c9c:	08008d75 	.word	0x08008d75
 8008ca0:	08008d6d 	.word	0x08008d6d
 8008ca4:	08008d6d 	.word	0x08008d6d
 8008ca8:	08008d6d 	.word	0x08008d6d
 8008cac:	08008d6d 	.word	0x08008d6d
 8008cb0:	08008d6d 	.word	0x08008d6d
 8008cb4:	08008d6d 	.word	0x08008d6d
 8008cb8:	08008d6d 	.word	0x08008d6d
 8008cbc:	08008d41 	.word	0x08008d41
 8008cc0:	08008d6d 	.word	0x08008d6d
 8008cc4:	08008d6d 	.word	0x08008d6d
 8008cc8:	08008d6d 	.word	0x08008d6d
 8008ccc:	08008d6d 	.word	0x08008d6d
 8008cd0:	08008d6d 	.word	0x08008d6d
 8008cd4:	08008d6d 	.word	0x08008d6d
 8008cd8:	08008d6d 	.word	0x08008d6d
 8008cdc:	08008d57 	.word	0x08008d57
 8008ce0:	08008d6d 	.word	0x08008d6d
 8008ce4:	08008d6d 	.word	0x08008d6d
 8008ce8:	08008d6d 	.word	0x08008d6d
 8008cec:	08008d6d 	.word	0x08008d6d
 8008cf0:	08008d6d 	.word	0x08008d6d
 8008cf4:	08008d6d 	.word	0x08008d6d
 8008cf8:	08008d6d 	.word	0x08008d6d
 8008cfc:	08008d75 	.word	0x08008d75
 8008d00:	08008d6d 	.word	0x08008d6d
 8008d04:	08008d6d 	.word	0x08008d6d
 8008d08:	08008d6d 	.word	0x08008d6d
 8008d0c:	08008d6d 	.word	0x08008d6d
 8008d10:	08008d6d 	.word	0x08008d6d
 8008d14:	08008d6d 	.word	0x08008d6d
 8008d18:	08008d6d 	.word	0x08008d6d
 8008d1c:	08008d75 	.word	0x08008d75
 8008d20:	08008d6d 	.word	0x08008d6d
 8008d24:	08008d6d 	.word	0x08008d6d
 8008d28:	08008d6d 	.word	0x08008d6d
 8008d2c:	08008d6d 	.word	0x08008d6d
 8008d30:	08008d6d 	.word	0x08008d6d
 8008d34:	08008d6d 	.word	0x08008d6d
 8008d38:	08008d6d 	.word	0x08008d6d
 8008d3c:	08008d75 	.word	0x08008d75
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d44:	3308      	adds	r3, #8
 8008d46:	2101      	movs	r1, #1
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f001 fe95 	bl	800aa78 <RCCEx_PLL2_Config>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008d54:	e00f      	b.n	8008d76 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d5a:	3328      	adds	r3, #40	@ 0x28
 8008d5c:	2101      	movs	r1, #1
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f001 ff3c 	bl	800abdc <RCCEx_PLL3_Config>
 8008d64:	4603      	mov	r3, r0
 8008d66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008d6a:	e004      	b.n	8008d76 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008d72:	e000      	b.n	8008d76 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8008d74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d10a      	bne.n	8008d94 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008d7e:	4bbf      	ldr	r3, [pc, #764]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008d80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d82:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8008d86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d8a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008d8c:	4abb      	ldr	r2, [pc, #748]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008d8e:	430b      	orrs	r3, r1
 8008d90:	6553      	str	r3, [r2, #84]	@ 0x54
 8008d92:	e003      	b.n	8008d9c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da4:	f002 0302 	and.w	r3, r2, #2
 8008da8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008dac:	2300      	movs	r3, #0
 8008dae:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008db2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8008db6:	460b      	mov	r3, r1
 8008db8:	4313      	orrs	r3, r2
 8008dba:	d041      	beq.n	8008e40 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dc0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008dc2:	2b05      	cmp	r3, #5
 8008dc4:	d824      	bhi.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8008dc6:	a201      	add	r2, pc, #4	@ (adr r2, 8008dcc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8008dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dcc:	08008e19 	.word	0x08008e19
 8008dd0:	08008de5 	.word	0x08008de5
 8008dd4:	08008dfb 	.word	0x08008dfb
 8008dd8:	08008e19 	.word	0x08008e19
 8008ddc:	08008e19 	.word	0x08008e19
 8008de0:	08008e19 	.word	0x08008e19
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008de8:	3308      	adds	r3, #8
 8008dea:	2101      	movs	r1, #1
 8008dec:	4618      	mov	r0, r3
 8008dee:	f001 fe43 	bl	800aa78 <RCCEx_PLL2_Config>
 8008df2:	4603      	mov	r3, r0
 8008df4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008df8:	e00f      	b.n	8008e1a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dfe:	3328      	adds	r3, #40	@ 0x28
 8008e00:	2101      	movs	r1, #1
 8008e02:	4618      	mov	r0, r3
 8008e04:	f001 feea 	bl	800abdc <RCCEx_PLL3_Config>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008e0e:	e004      	b.n	8008e1a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e10:	2301      	movs	r3, #1
 8008e12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008e16:	e000      	b.n	8008e1a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8008e18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d10a      	bne.n	8008e38 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008e22:	4b96      	ldr	r3, [pc, #600]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008e24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e26:	f023 0107 	bic.w	r1, r3, #7
 8008e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e2e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008e30:	4a92      	ldr	r2, [pc, #584]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008e32:	430b      	orrs	r3, r1
 8008e34:	6553      	str	r3, [r2, #84]	@ 0x54
 8008e36:	e003      	b.n	8008e40 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e48:	f002 0304 	and.w	r3, r2, #4
 8008e4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008e50:	2300      	movs	r3, #0
 8008e52:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008e56:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008e5a:	460b      	mov	r3, r1
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	d044      	beq.n	8008eea <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008e68:	2b05      	cmp	r3, #5
 8008e6a:	d825      	bhi.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8008e6c:	a201      	add	r2, pc, #4	@ (adr r2, 8008e74 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8008e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e72:	bf00      	nop
 8008e74:	08008ec1 	.word	0x08008ec1
 8008e78:	08008e8d 	.word	0x08008e8d
 8008e7c:	08008ea3 	.word	0x08008ea3
 8008e80:	08008ec1 	.word	0x08008ec1
 8008e84:	08008ec1 	.word	0x08008ec1
 8008e88:	08008ec1 	.word	0x08008ec1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e90:	3308      	adds	r3, #8
 8008e92:	2101      	movs	r1, #1
 8008e94:	4618      	mov	r0, r3
 8008e96:	f001 fdef 	bl	800aa78 <RCCEx_PLL2_Config>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008ea0:	e00f      	b.n	8008ec2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ea6:	3328      	adds	r3, #40	@ 0x28
 8008ea8:	2101      	movs	r1, #1
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f001 fe96 	bl	800abdc <RCCEx_PLL3_Config>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008eb6:	e004      	b.n	8008ec2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008eb8:	2301      	movs	r3, #1
 8008eba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008ebe:	e000      	b.n	8008ec2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8008ec0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ec2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d10b      	bne.n	8008ee2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008eca:	4b6c      	ldr	r3, [pc, #432]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008ecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ece:	f023 0107 	bic.w	r1, r3, #7
 8008ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ed6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008eda:	4a68      	ldr	r2, [pc, #416]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008edc:	430b      	orrs	r3, r1
 8008ede:	6593      	str	r3, [r2, #88]	@ 0x58
 8008ee0:	e003      	b.n	8008eea <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ee2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ee6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef2:	f002 0320 	and.w	r3, r2, #32
 8008ef6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008efa:	2300      	movs	r3, #0
 8008efc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008f00:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008f04:	460b      	mov	r3, r1
 8008f06:	4313      	orrs	r3, r2
 8008f08:	d055      	beq.n	8008fb6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f12:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008f16:	d033      	beq.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8008f18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008f1c:	d82c      	bhi.n	8008f78 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f22:	d02f      	beq.n	8008f84 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8008f24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f28:	d826      	bhi.n	8008f78 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008f2a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008f2e:	d02b      	beq.n	8008f88 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8008f30:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008f34:	d820      	bhi.n	8008f78 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008f36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f3a:	d012      	beq.n	8008f62 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008f3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f40:	d81a      	bhi.n	8008f78 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d022      	beq.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8008f46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008f4a:	d115      	bne.n	8008f78 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008f4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f50:	3308      	adds	r3, #8
 8008f52:	2100      	movs	r1, #0
 8008f54:	4618      	mov	r0, r3
 8008f56:	f001 fd8f 	bl	800aa78 <RCCEx_PLL2_Config>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008f60:	e015      	b.n	8008f8e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f66:	3328      	adds	r3, #40	@ 0x28
 8008f68:	2102      	movs	r1, #2
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f001 fe36 	bl	800abdc <RCCEx_PLL3_Config>
 8008f70:	4603      	mov	r3, r0
 8008f72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008f76:	e00a      	b.n	8008f8e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f78:	2301      	movs	r3, #1
 8008f7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008f7e:	e006      	b.n	8008f8e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008f80:	bf00      	nop
 8008f82:	e004      	b.n	8008f8e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008f84:	bf00      	nop
 8008f86:	e002      	b.n	8008f8e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008f88:	bf00      	nop
 8008f8a:	e000      	b.n	8008f8e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008f8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d10b      	bne.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008f96:	4b39      	ldr	r3, [pc, #228]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008f98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f9a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fa6:	4a35      	ldr	r2, [pc, #212]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008fa8:	430b      	orrs	r3, r1
 8008faa:	6553      	str	r3, [r2, #84]	@ 0x54
 8008fac:	e003      	b.n	8008fb6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008fb2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fbe:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008fc2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008fcc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008fd0:	460b      	mov	r3, r1
 8008fd2:	4313      	orrs	r3, r2
 8008fd4:	d058      	beq.n	8009088 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fda:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008fde:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008fe2:	d033      	beq.n	800904c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8008fe4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008fe8:	d82c      	bhi.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008fea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008fee:	d02f      	beq.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8008ff0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ff4:	d826      	bhi.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008ff6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008ffa:	d02b      	beq.n	8009054 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8008ffc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009000:	d820      	bhi.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009002:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009006:	d012      	beq.n	800902e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009008:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800900c:	d81a      	bhi.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800900e:	2b00      	cmp	r3, #0
 8009010:	d022      	beq.n	8009058 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8009012:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009016:	d115      	bne.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009018:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800901c:	3308      	adds	r3, #8
 800901e:	2100      	movs	r1, #0
 8009020:	4618      	mov	r0, r3
 8009022:	f001 fd29 	bl	800aa78 <RCCEx_PLL2_Config>
 8009026:	4603      	mov	r3, r0
 8009028:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800902c:	e015      	b.n	800905a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800902e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009032:	3328      	adds	r3, #40	@ 0x28
 8009034:	2102      	movs	r1, #2
 8009036:	4618      	mov	r0, r3
 8009038:	f001 fdd0 	bl	800abdc <RCCEx_PLL3_Config>
 800903c:	4603      	mov	r3, r0
 800903e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009042:	e00a      	b.n	800905a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009044:	2301      	movs	r3, #1
 8009046:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800904a:	e006      	b.n	800905a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800904c:	bf00      	nop
 800904e:	e004      	b.n	800905a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009050:	bf00      	nop
 8009052:	e002      	b.n	800905a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009054:	bf00      	nop
 8009056:	e000      	b.n	800905a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009058:	bf00      	nop
    }

    if (ret == HAL_OK)
 800905a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800905e:	2b00      	cmp	r3, #0
 8009060:	d10e      	bne.n	8009080 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009062:	4b06      	ldr	r3, [pc, #24]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009064:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009066:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800906a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800906e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009072:	4a02      	ldr	r2, [pc, #8]	@ (800907c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009074:	430b      	orrs	r3, r1
 8009076:	6593      	str	r3, [r2, #88]	@ 0x58
 8009078:	e006      	b.n	8009088 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800907a:	bf00      	nop
 800907c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009080:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009084:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009088:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800908c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009090:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009094:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009098:	2300      	movs	r3, #0
 800909a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800909e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80090a2:	460b      	mov	r3, r1
 80090a4:	4313      	orrs	r3, r2
 80090a6:	d055      	beq.n	8009154 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80090a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80090b0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80090b4:	d033      	beq.n	800911e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80090b6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80090ba:	d82c      	bhi.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80090bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80090c0:	d02f      	beq.n	8009122 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80090c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80090c6:	d826      	bhi.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80090c8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80090cc:	d02b      	beq.n	8009126 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80090ce:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80090d2:	d820      	bhi.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80090d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80090d8:	d012      	beq.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80090da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80090de:	d81a      	bhi.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d022      	beq.n	800912a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80090e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80090e8:	d115      	bne.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80090ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090ee:	3308      	adds	r3, #8
 80090f0:	2100      	movs	r1, #0
 80090f2:	4618      	mov	r0, r3
 80090f4:	f001 fcc0 	bl	800aa78 <RCCEx_PLL2_Config>
 80090f8:	4603      	mov	r3, r0
 80090fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80090fe:	e015      	b.n	800912c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009100:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009104:	3328      	adds	r3, #40	@ 0x28
 8009106:	2102      	movs	r1, #2
 8009108:	4618      	mov	r0, r3
 800910a:	f001 fd67 	bl	800abdc <RCCEx_PLL3_Config>
 800910e:	4603      	mov	r3, r0
 8009110:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009114:	e00a      	b.n	800912c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009116:	2301      	movs	r3, #1
 8009118:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800911c:	e006      	b.n	800912c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800911e:	bf00      	nop
 8009120:	e004      	b.n	800912c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009122:	bf00      	nop
 8009124:	e002      	b.n	800912c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009126:	bf00      	nop
 8009128:	e000      	b.n	800912c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800912a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800912c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009130:	2b00      	cmp	r3, #0
 8009132:	d10b      	bne.n	800914c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009134:	4ba1      	ldr	r3, [pc, #644]	@ (80093bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009136:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009138:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800913c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009140:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009144:	4a9d      	ldr	r2, [pc, #628]	@ (80093bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009146:	430b      	orrs	r3, r1
 8009148:	6593      	str	r3, [r2, #88]	@ 0x58
 800914a:	e003      	b.n	8009154 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800914c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009150:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800915c:	f002 0308 	and.w	r3, r2, #8
 8009160:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009164:	2300      	movs	r3, #0
 8009166:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800916a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800916e:	460b      	mov	r3, r1
 8009170:	4313      	orrs	r3, r2
 8009172:	d01e      	beq.n	80091b2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009174:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009178:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800917c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009180:	d10c      	bne.n	800919c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009182:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009186:	3328      	adds	r3, #40	@ 0x28
 8009188:	2102      	movs	r1, #2
 800918a:	4618      	mov	r0, r3
 800918c:	f001 fd26 	bl	800abdc <RCCEx_PLL3_Config>
 8009190:	4603      	mov	r3, r0
 8009192:	2b00      	cmp	r3, #0
 8009194:	d002      	beq.n	800919c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8009196:	2301      	movs	r3, #1
 8009198:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800919c:	4b87      	ldr	r3, [pc, #540]	@ (80093bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800919e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091a0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80091a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80091ac:	4a83      	ldr	r2, [pc, #524]	@ (80093bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80091ae:	430b      	orrs	r3, r1
 80091b0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80091b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ba:	f002 0310 	and.w	r3, r2, #16
 80091be:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80091c2:	2300      	movs	r3, #0
 80091c4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80091c8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80091cc:	460b      	mov	r3, r1
 80091ce:	4313      	orrs	r3, r2
 80091d0:	d01e      	beq.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80091d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80091da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80091de:	d10c      	bne.n	80091fa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80091e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091e4:	3328      	adds	r3, #40	@ 0x28
 80091e6:	2102      	movs	r1, #2
 80091e8:	4618      	mov	r0, r3
 80091ea:	f001 fcf7 	bl	800abdc <RCCEx_PLL3_Config>
 80091ee:	4603      	mov	r3, r0
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d002      	beq.n	80091fa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80091f4:	2301      	movs	r3, #1
 80091f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80091fa:	4b70      	ldr	r3, [pc, #448]	@ (80093bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80091fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091fe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009202:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009206:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800920a:	4a6c      	ldr	r2, [pc, #432]	@ (80093bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800920c:	430b      	orrs	r3, r1
 800920e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009210:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009218:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800921c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009220:	2300      	movs	r3, #0
 8009222:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009226:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800922a:	460b      	mov	r3, r1
 800922c:	4313      	orrs	r3, r2
 800922e:	d03e      	beq.n	80092ae <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009230:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009234:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009238:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800923c:	d022      	beq.n	8009284 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800923e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009242:	d81b      	bhi.n	800927c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8009244:	2b00      	cmp	r3, #0
 8009246:	d003      	beq.n	8009250 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8009248:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800924c:	d00b      	beq.n	8009266 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800924e:	e015      	b.n	800927c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009250:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009254:	3308      	adds	r3, #8
 8009256:	2100      	movs	r1, #0
 8009258:	4618      	mov	r0, r3
 800925a:	f001 fc0d 	bl	800aa78 <RCCEx_PLL2_Config>
 800925e:	4603      	mov	r3, r0
 8009260:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009264:	e00f      	b.n	8009286 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009266:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800926a:	3328      	adds	r3, #40	@ 0x28
 800926c:	2102      	movs	r1, #2
 800926e:	4618      	mov	r0, r3
 8009270:	f001 fcb4 	bl	800abdc <RCCEx_PLL3_Config>
 8009274:	4603      	mov	r3, r0
 8009276:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800927a:	e004      	b.n	8009286 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800927c:	2301      	movs	r3, #1
 800927e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009282:	e000      	b.n	8009286 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8009284:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009286:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800928a:	2b00      	cmp	r3, #0
 800928c:	d10b      	bne.n	80092a6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800928e:	4b4b      	ldr	r3, [pc, #300]	@ (80093bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009290:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009292:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009296:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800929a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800929e:	4a47      	ldr	r2, [pc, #284]	@ (80093bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80092a0:	430b      	orrs	r3, r1
 80092a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80092a4:	e003      	b.n	80092ae <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80092aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80092ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80092ba:	67bb      	str	r3, [r7, #120]	@ 0x78
 80092bc:	2300      	movs	r3, #0
 80092be:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80092c0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80092c4:	460b      	mov	r3, r1
 80092c6:	4313      	orrs	r3, r2
 80092c8:	d03b      	beq.n	8009342 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80092ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092d2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80092d6:	d01f      	beq.n	8009318 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80092d8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80092dc:	d818      	bhi.n	8009310 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80092de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80092e2:	d003      	beq.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80092e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80092e8:	d007      	beq.n	80092fa <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80092ea:	e011      	b.n	8009310 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092ec:	4b33      	ldr	r3, [pc, #204]	@ (80093bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80092ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092f0:	4a32      	ldr	r2, [pc, #200]	@ (80093bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80092f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80092f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80092f8:	e00f      	b.n	800931a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80092fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092fe:	3328      	adds	r3, #40	@ 0x28
 8009300:	2101      	movs	r1, #1
 8009302:	4618      	mov	r0, r3
 8009304:	f001 fc6a 	bl	800abdc <RCCEx_PLL3_Config>
 8009308:	4603      	mov	r3, r0
 800930a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800930e:	e004      	b.n	800931a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009310:	2301      	movs	r3, #1
 8009312:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009316:	e000      	b.n	800931a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8009318:	bf00      	nop
    }

    if (ret == HAL_OK)
 800931a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800931e:	2b00      	cmp	r3, #0
 8009320:	d10b      	bne.n	800933a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009322:	4b26      	ldr	r3, [pc, #152]	@ (80093bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009324:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009326:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800932a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800932e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009332:	4a22      	ldr	r2, [pc, #136]	@ (80093bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009334:	430b      	orrs	r3, r1
 8009336:	6553      	str	r3, [r2, #84]	@ 0x54
 8009338:	e003      	b.n	8009342 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800933a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800933e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009342:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800934a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800934e:	673b      	str	r3, [r7, #112]	@ 0x70
 8009350:	2300      	movs	r3, #0
 8009352:	677b      	str	r3, [r7, #116]	@ 0x74
 8009354:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009358:	460b      	mov	r3, r1
 800935a:	4313      	orrs	r3, r2
 800935c:	d034      	beq.n	80093c8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800935e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009362:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009364:	2b00      	cmp	r3, #0
 8009366:	d003      	beq.n	8009370 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8009368:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800936c:	d007      	beq.n	800937e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800936e:	e011      	b.n	8009394 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009370:	4b12      	ldr	r3, [pc, #72]	@ (80093bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009374:	4a11      	ldr	r2, [pc, #68]	@ (80093bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009376:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800937a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800937c:	e00e      	b.n	800939c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800937e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009382:	3308      	adds	r3, #8
 8009384:	2102      	movs	r1, #2
 8009386:	4618      	mov	r0, r3
 8009388:	f001 fb76 	bl	800aa78 <RCCEx_PLL2_Config>
 800938c:	4603      	mov	r3, r0
 800938e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009392:	e003      	b.n	800939c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8009394:	2301      	movs	r3, #1
 8009396:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800939a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800939c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d10d      	bne.n	80093c0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80093a4:	4b05      	ldr	r3, [pc, #20]	@ (80093bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80093a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80093a8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80093ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093b2:	4a02      	ldr	r2, [pc, #8]	@ (80093bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80093b4:	430b      	orrs	r3, r1
 80093b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80093b8:	e006      	b.n	80093c8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80093ba:	bf00      	nop
 80093bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80093c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093d0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80093d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80093d6:	2300      	movs	r3, #0
 80093d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80093da:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80093de:	460b      	mov	r3, r1
 80093e0:	4313      	orrs	r3, r2
 80093e2:	d00c      	beq.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80093e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093e8:	3328      	adds	r3, #40	@ 0x28
 80093ea:	2102      	movs	r1, #2
 80093ec:	4618      	mov	r0, r3
 80093ee:	f001 fbf5 	bl	800abdc <RCCEx_PLL3_Config>
 80093f2:	4603      	mov	r3, r0
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d002      	beq.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80093f8:	2301      	movs	r3, #1
 80093fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80093fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009406:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800940a:	663b      	str	r3, [r7, #96]	@ 0x60
 800940c:	2300      	movs	r3, #0
 800940e:	667b      	str	r3, [r7, #100]	@ 0x64
 8009410:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009414:	460b      	mov	r3, r1
 8009416:	4313      	orrs	r3, r2
 8009418:	d038      	beq.n	800948c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800941a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800941e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009422:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009426:	d018      	beq.n	800945a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8009428:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800942c:	d811      	bhi.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800942e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009432:	d014      	beq.n	800945e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8009434:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009438:	d80b      	bhi.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800943a:	2b00      	cmp	r3, #0
 800943c:	d011      	beq.n	8009462 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800943e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009442:	d106      	bne.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009444:	4bc3      	ldr	r3, [pc, #780]	@ (8009754 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009448:	4ac2      	ldr	r2, [pc, #776]	@ (8009754 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800944a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800944e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009450:	e008      	b.n	8009464 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009452:	2301      	movs	r3, #1
 8009454:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009458:	e004      	b.n	8009464 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800945a:	bf00      	nop
 800945c:	e002      	b.n	8009464 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800945e:	bf00      	nop
 8009460:	e000      	b.n	8009464 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009462:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009464:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009468:	2b00      	cmp	r3, #0
 800946a:	d10b      	bne.n	8009484 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800946c:	4bb9      	ldr	r3, [pc, #740]	@ (8009754 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800946e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009470:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009474:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009478:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800947c:	4ab5      	ldr	r2, [pc, #724]	@ (8009754 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800947e:	430b      	orrs	r3, r1
 8009480:	6553      	str	r3, [r2, #84]	@ 0x54
 8009482:	e003      	b.n	800948c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009484:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009488:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800948c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009494:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8009498:	65bb      	str	r3, [r7, #88]	@ 0x58
 800949a:	2300      	movs	r3, #0
 800949c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800949e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80094a2:	460b      	mov	r3, r1
 80094a4:	4313      	orrs	r3, r2
 80094a6:	d009      	beq.n	80094bc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80094a8:	4baa      	ldr	r3, [pc, #680]	@ (8009754 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80094aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094ac:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80094b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80094b6:	4aa7      	ldr	r2, [pc, #668]	@ (8009754 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80094b8:	430b      	orrs	r3, r1
 80094ba:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80094bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80094c8:	653b      	str	r3, [r7, #80]	@ 0x50
 80094ca:	2300      	movs	r3, #0
 80094cc:	657b      	str	r3, [r7, #84]	@ 0x54
 80094ce:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80094d2:	460b      	mov	r3, r1
 80094d4:	4313      	orrs	r3, r2
 80094d6:	d00a      	beq.n	80094ee <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80094d8:	4b9e      	ldr	r3, [pc, #632]	@ (8009754 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80094da:	691b      	ldr	r3, [r3, #16]
 80094dc:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80094e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094e4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80094e8:	4a9a      	ldr	r2, [pc, #616]	@ (8009754 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80094ea:	430b      	orrs	r3, r1
 80094ec:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80094ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094f6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80094fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80094fc:	2300      	movs	r3, #0
 80094fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009500:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009504:	460b      	mov	r3, r1
 8009506:	4313      	orrs	r3, r2
 8009508:	d009      	beq.n	800951e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800950a:	4b92      	ldr	r3, [pc, #584]	@ (8009754 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800950c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800950e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8009512:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009516:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009518:	4a8e      	ldr	r2, [pc, #568]	@ (8009754 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800951a:	430b      	orrs	r3, r1
 800951c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800951e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009526:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800952a:	643b      	str	r3, [r7, #64]	@ 0x40
 800952c:	2300      	movs	r3, #0
 800952e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009530:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009534:	460b      	mov	r3, r1
 8009536:	4313      	orrs	r3, r2
 8009538:	d00e      	beq.n	8009558 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800953a:	4b86      	ldr	r3, [pc, #536]	@ (8009754 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800953c:	691b      	ldr	r3, [r3, #16]
 800953e:	4a85      	ldr	r2, [pc, #532]	@ (8009754 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009540:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009544:	6113      	str	r3, [r2, #16]
 8009546:	4b83      	ldr	r3, [pc, #524]	@ (8009754 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009548:	6919      	ldr	r1, [r3, #16]
 800954a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800954e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009552:	4a80      	ldr	r2, [pc, #512]	@ (8009754 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009554:	430b      	orrs	r3, r1
 8009556:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009558:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800955c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009560:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009564:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009566:	2300      	movs	r3, #0
 8009568:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800956a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800956e:	460b      	mov	r3, r1
 8009570:	4313      	orrs	r3, r2
 8009572:	d009      	beq.n	8009588 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009574:	4b77      	ldr	r3, [pc, #476]	@ (8009754 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009576:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009578:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800957c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009582:	4a74      	ldr	r2, [pc, #464]	@ (8009754 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009584:	430b      	orrs	r3, r1
 8009586:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009588:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800958c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009590:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8009594:	633b      	str	r3, [r7, #48]	@ 0x30
 8009596:	2300      	movs	r3, #0
 8009598:	637b      	str	r3, [r7, #52]	@ 0x34
 800959a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800959e:	460b      	mov	r3, r1
 80095a0:	4313      	orrs	r3, r2
 80095a2:	d00a      	beq.n	80095ba <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80095a4:	4b6b      	ldr	r3, [pc, #428]	@ (8009754 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80095a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095a8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80095ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80095b4:	4a67      	ldr	r2, [pc, #412]	@ (8009754 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80095b6:	430b      	orrs	r3, r1
 80095b8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80095ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095c2:	2100      	movs	r1, #0
 80095c4:	62b9      	str	r1, [r7, #40]	@ 0x28
 80095c6:	f003 0301 	and.w	r3, r3, #1
 80095ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80095cc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80095d0:	460b      	mov	r3, r1
 80095d2:	4313      	orrs	r3, r2
 80095d4:	d011      	beq.n	80095fa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80095d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095da:	3308      	adds	r3, #8
 80095dc:	2100      	movs	r1, #0
 80095de:	4618      	mov	r0, r3
 80095e0:	f001 fa4a 	bl	800aa78 <RCCEx_PLL2_Config>
 80095e4:	4603      	mov	r3, r0
 80095e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80095ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d003      	beq.n	80095fa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80095f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80095fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009602:	2100      	movs	r1, #0
 8009604:	6239      	str	r1, [r7, #32]
 8009606:	f003 0302 	and.w	r3, r3, #2
 800960a:	627b      	str	r3, [r7, #36]	@ 0x24
 800960c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009610:	460b      	mov	r3, r1
 8009612:	4313      	orrs	r3, r2
 8009614:	d011      	beq.n	800963a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009616:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800961a:	3308      	adds	r3, #8
 800961c:	2101      	movs	r1, #1
 800961e:	4618      	mov	r0, r3
 8009620:	f001 fa2a 	bl	800aa78 <RCCEx_PLL2_Config>
 8009624:	4603      	mov	r3, r0
 8009626:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800962a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800962e:	2b00      	cmp	r3, #0
 8009630:	d003      	beq.n	800963a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009632:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009636:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800963a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800963e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009642:	2100      	movs	r1, #0
 8009644:	61b9      	str	r1, [r7, #24]
 8009646:	f003 0304 	and.w	r3, r3, #4
 800964a:	61fb      	str	r3, [r7, #28]
 800964c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009650:	460b      	mov	r3, r1
 8009652:	4313      	orrs	r3, r2
 8009654:	d011      	beq.n	800967a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009656:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800965a:	3308      	adds	r3, #8
 800965c:	2102      	movs	r1, #2
 800965e:	4618      	mov	r0, r3
 8009660:	f001 fa0a 	bl	800aa78 <RCCEx_PLL2_Config>
 8009664:	4603      	mov	r3, r0
 8009666:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800966a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800966e:	2b00      	cmp	r3, #0
 8009670:	d003      	beq.n	800967a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009672:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009676:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800967a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800967e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009682:	2100      	movs	r1, #0
 8009684:	6139      	str	r1, [r7, #16]
 8009686:	f003 0308 	and.w	r3, r3, #8
 800968a:	617b      	str	r3, [r7, #20]
 800968c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009690:	460b      	mov	r3, r1
 8009692:	4313      	orrs	r3, r2
 8009694:	d011      	beq.n	80096ba <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800969a:	3328      	adds	r3, #40	@ 0x28
 800969c:	2100      	movs	r1, #0
 800969e:	4618      	mov	r0, r3
 80096a0:	f001 fa9c 	bl	800abdc <RCCEx_PLL3_Config>
 80096a4:	4603      	mov	r3, r0
 80096a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80096aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d003      	beq.n	80096ba <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80096b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80096ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c2:	2100      	movs	r1, #0
 80096c4:	60b9      	str	r1, [r7, #8]
 80096c6:	f003 0310 	and.w	r3, r3, #16
 80096ca:	60fb      	str	r3, [r7, #12]
 80096cc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80096d0:	460b      	mov	r3, r1
 80096d2:	4313      	orrs	r3, r2
 80096d4:	d011      	beq.n	80096fa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80096d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096da:	3328      	adds	r3, #40	@ 0x28
 80096dc:	2101      	movs	r1, #1
 80096de:	4618      	mov	r0, r3
 80096e0:	f001 fa7c 	bl	800abdc <RCCEx_PLL3_Config>
 80096e4:	4603      	mov	r3, r0
 80096e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80096ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d003      	beq.n	80096fa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80096f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80096fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009702:	2100      	movs	r1, #0
 8009704:	6039      	str	r1, [r7, #0]
 8009706:	f003 0320 	and.w	r3, r3, #32
 800970a:	607b      	str	r3, [r7, #4]
 800970c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009710:	460b      	mov	r3, r1
 8009712:	4313      	orrs	r3, r2
 8009714:	d011      	beq.n	800973a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009716:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800971a:	3328      	adds	r3, #40	@ 0x28
 800971c:	2102      	movs	r1, #2
 800971e:	4618      	mov	r0, r3
 8009720:	f001 fa5c 	bl	800abdc <RCCEx_PLL3_Config>
 8009724:	4603      	mov	r3, r0
 8009726:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800972a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800972e:	2b00      	cmp	r3, #0
 8009730:	d003      	beq.n	800973a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009732:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009736:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800973a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800973e:	2b00      	cmp	r3, #0
 8009740:	d101      	bne.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8009742:	2300      	movs	r3, #0
 8009744:	e000      	b.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8009746:	2301      	movs	r3, #1
}
 8009748:	4618      	mov	r0, r3
 800974a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800974e:	46bd      	mov	sp, r7
 8009750:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009754:	58024400 	.word	0x58024400

08009758 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b090      	sub	sp, #64	@ 0x40
 800975c:	af00      	add	r7, sp, #0
 800975e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009762:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009766:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800976a:	430b      	orrs	r3, r1
 800976c:	f040 8094 	bne.w	8009898 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8009770:	4b9e      	ldr	r3, [pc, #632]	@ (80099ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009772:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009774:	f003 0307 	and.w	r3, r3, #7
 8009778:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800977a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800977c:	2b04      	cmp	r3, #4
 800977e:	f200 8087 	bhi.w	8009890 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8009782:	a201      	add	r2, pc, #4	@ (adr r2, 8009788 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009788:	0800979d 	.word	0x0800979d
 800978c:	080097c5 	.word	0x080097c5
 8009790:	080097ed 	.word	0x080097ed
 8009794:	08009889 	.word	0x08009889
 8009798:	08009815 	.word	0x08009815
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800979c:	4b93      	ldr	r3, [pc, #588]	@ (80099ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80097a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80097a8:	d108      	bne.n	80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80097aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80097ae:	4618      	mov	r0, r3
 80097b0:	f001 f810 	bl	800a7d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80097b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80097b8:	f000 bd45 	b.w	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80097bc:	2300      	movs	r3, #0
 80097be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097c0:	f000 bd41 	b.w	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80097c4:	4b89      	ldr	r3, [pc, #548]	@ (80099ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80097cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80097d0:	d108      	bne.n	80097e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80097d2:	f107 0318 	add.w	r3, r7, #24
 80097d6:	4618      	mov	r0, r3
 80097d8:	f000 fd54 	bl	800a284 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80097dc:	69bb      	ldr	r3, [r7, #24]
 80097de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80097e0:	f000 bd31 	b.w	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80097e4:	2300      	movs	r3, #0
 80097e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097e8:	f000 bd2d 	b.w	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80097ec:	4b7f      	ldr	r3, [pc, #508]	@ (80099ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80097f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80097f8:	d108      	bne.n	800980c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80097fa:	f107 030c 	add.w	r3, r7, #12
 80097fe:	4618      	mov	r0, r3
 8009800:	f000 fe94 	bl	800a52c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009808:	f000 bd1d 	b.w	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800980c:	2300      	movs	r3, #0
 800980e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009810:	f000 bd19 	b.w	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009814:	4b75      	ldr	r3, [pc, #468]	@ (80099ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009816:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009818:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800981c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800981e:	4b73      	ldr	r3, [pc, #460]	@ (80099ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f003 0304 	and.w	r3, r3, #4
 8009826:	2b04      	cmp	r3, #4
 8009828:	d10c      	bne.n	8009844 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800982a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800982c:	2b00      	cmp	r3, #0
 800982e:	d109      	bne.n	8009844 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009830:	4b6e      	ldr	r3, [pc, #440]	@ (80099ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	08db      	lsrs	r3, r3, #3
 8009836:	f003 0303 	and.w	r3, r3, #3
 800983a:	4a6d      	ldr	r2, [pc, #436]	@ (80099f0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800983c:	fa22 f303 	lsr.w	r3, r2, r3
 8009840:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009842:	e01f      	b.n	8009884 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009844:	4b69      	ldr	r3, [pc, #420]	@ (80099ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800984c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009850:	d106      	bne.n	8009860 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8009852:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009854:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009858:	d102      	bne.n	8009860 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800985a:	4b66      	ldr	r3, [pc, #408]	@ (80099f4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800985c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800985e:	e011      	b.n	8009884 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009860:	4b62      	ldr	r3, [pc, #392]	@ (80099ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009868:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800986c:	d106      	bne.n	800987c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800986e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009870:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009874:	d102      	bne.n	800987c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009876:	4b60      	ldr	r3, [pc, #384]	@ (80099f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009878:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800987a:	e003      	b.n	8009884 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800987c:	2300      	movs	r3, #0
 800987e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009880:	f000 bce1 	b.w	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009884:	f000 bcdf 	b.w	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009888:	4b5c      	ldr	r3, [pc, #368]	@ (80099fc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800988a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800988c:	f000 bcdb 	b.w	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009890:	2300      	movs	r3, #0
 8009892:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009894:	f000 bcd7 	b.w	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8009898:	e9d7 2300 	ldrd	r2, r3, [r7]
 800989c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80098a0:	430b      	orrs	r3, r1
 80098a2:	f040 80ad 	bne.w	8009a00 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80098a6:	4b51      	ldr	r3, [pc, #324]	@ (80099ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80098a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098aa:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80098ae:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80098b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80098b6:	d056      	beq.n	8009966 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80098b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80098be:	f200 8090 	bhi.w	80099e2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80098c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098c4:	2bc0      	cmp	r3, #192	@ 0xc0
 80098c6:	f000 8088 	beq.w	80099da <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80098ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098cc:	2bc0      	cmp	r3, #192	@ 0xc0
 80098ce:	f200 8088 	bhi.w	80099e2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80098d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098d4:	2b80      	cmp	r3, #128	@ 0x80
 80098d6:	d032      	beq.n	800993e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80098d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098da:	2b80      	cmp	r3, #128	@ 0x80
 80098dc:	f200 8081 	bhi.w	80099e2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80098e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d003      	beq.n	80098ee <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80098e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098e8:	2b40      	cmp	r3, #64	@ 0x40
 80098ea:	d014      	beq.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80098ec:	e079      	b.n	80099e2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80098ee:	4b3f      	ldr	r3, [pc, #252]	@ (80099ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80098f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80098fa:	d108      	bne.n	800990e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80098fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009900:	4618      	mov	r0, r3
 8009902:	f000 ff67 	bl	800a7d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009908:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800990a:	f000 bc9c 	b.w	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800990e:	2300      	movs	r3, #0
 8009910:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009912:	f000 bc98 	b.w	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009916:	4b35      	ldr	r3, [pc, #212]	@ (80099ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800991e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009922:	d108      	bne.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009924:	f107 0318 	add.w	r3, r7, #24
 8009928:	4618      	mov	r0, r3
 800992a:	f000 fcab 	bl	800a284 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800992e:	69bb      	ldr	r3, [r7, #24]
 8009930:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009932:	f000 bc88 	b.w	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009936:	2300      	movs	r3, #0
 8009938:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800993a:	f000 bc84 	b.w	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800993e:	4b2b      	ldr	r3, [pc, #172]	@ (80099ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009946:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800994a:	d108      	bne.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800994c:	f107 030c 	add.w	r3, r7, #12
 8009950:	4618      	mov	r0, r3
 8009952:	f000 fdeb 	bl	800a52c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800995a:	f000 bc74 	b.w	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800995e:	2300      	movs	r3, #0
 8009960:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009962:	f000 bc70 	b.w	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009966:	4b21      	ldr	r3, [pc, #132]	@ (80099ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800996a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800996e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009970:	4b1e      	ldr	r3, [pc, #120]	@ (80099ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f003 0304 	and.w	r3, r3, #4
 8009978:	2b04      	cmp	r3, #4
 800997a:	d10c      	bne.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800997c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800997e:	2b00      	cmp	r3, #0
 8009980:	d109      	bne.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009982:	4b1a      	ldr	r3, [pc, #104]	@ (80099ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	08db      	lsrs	r3, r3, #3
 8009988:	f003 0303 	and.w	r3, r3, #3
 800998c:	4a18      	ldr	r2, [pc, #96]	@ (80099f0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800998e:	fa22 f303 	lsr.w	r3, r2, r3
 8009992:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009994:	e01f      	b.n	80099d6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009996:	4b15      	ldr	r3, [pc, #84]	@ (80099ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800999e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80099a2:	d106      	bne.n	80099b2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80099a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80099aa:	d102      	bne.n	80099b2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80099ac:	4b11      	ldr	r3, [pc, #68]	@ (80099f4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80099ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80099b0:	e011      	b.n	80099d6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80099b2:	4b0e      	ldr	r3, [pc, #56]	@ (80099ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80099ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80099be:	d106      	bne.n	80099ce <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80099c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099c6:	d102      	bne.n	80099ce <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80099c8:	4b0b      	ldr	r3, [pc, #44]	@ (80099f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80099ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80099cc:	e003      	b.n	80099d6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80099ce:	2300      	movs	r3, #0
 80099d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80099d2:	f000 bc38 	b.w	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80099d6:	f000 bc36 	b.w	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80099da:	4b08      	ldr	r3, [pc, #32]	@ (80099fc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80099dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099de:	f000 bc32 	b.w	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80099e2:	2300      	movs	r3, #0
 80099e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099e6:	f000 bc2e 	b.w	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80099ea:	bf00      	nop
 80099ec:	58024400 	.word	0x58024400
 80099f0:	03d09000 	.word	0x03d09000
 80099f4:	003d0900 	.word	0x003d0900
 80099f8:	017d7840 	.word	0x017d7840
 80099fc:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009a00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a04:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8009a08:	430b      	orrs	r3, r1
 8009a0a:	f040 809c 	bne.w	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8009a0e:	4b9e      	ldr	r3, [pc, #632]	@ (8009c88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009a10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a12:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8009a16:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a1a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009a1e:	d054      	beq.n	8009aca <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8009a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a22:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009a26:	f200 808b 	bhi.w	8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a2c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009a30:	f000 8083 	beq.w	8009b3a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8009a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a36:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009a3a:	f200 8081 	bhi.w	8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a40:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009a44:	d02f      	beq.n	8009aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8009a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009a4c:	d878      	bhi.n	8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d004      	beq.n	8009a5e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8009a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a56:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009a5a:	d012      	beq.n	8009a82 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8009a5c:	e070      	b.n	8009b40 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009a5e:	4b8a      	ldr	r3, [pc, #552]	@ (8009c88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009a66:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009a6a:	d107      	bne.n	8009a7c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009a6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009a70:	4618      	mov	r0, r3
 8009a72:	f000 feaf 	bl	800a7d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a7a:	e3e4      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a80:	e3e1      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009a82:	4b81      	ldr	r3, [pc, #516]	@ (8009c88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009a8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009a8e:	d107      	bne.n	8009aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a90:	f107 0318 	add.w	r3, r7, #24
 8009a94:	4618      	mov	r0, r3
 8009a96:	f000 fbf5 	bl	800a284 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009a9a:	69bb      	ldr	r3, [r7, #24]
 8009a9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a9e:	e3d2      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009aa4:	e3cf      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009aa6:	4b78      	ldr	r3, [pc, #480]	@ (8009c88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009aae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009ab2:	d107      	bne.n	8009ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ab4:	f107 030c 	add.w	r3, r7, #12
 8009ab8:	4618      	mov	r0, r3
 8009aba:	f000 fd37 	bl	800a52c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ac2:	e3c0      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ac8:	e3bd      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009aca:	4b6f      	ldr	r3, [pc, #444]	@ (8009c88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009ace:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009ad2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009ad4:	4b6c      	ldr	r3, [pc, #432]	@ (8009c88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f003 0304 	and.w	r3, r3, #4
 8009adc:	2b04      	cmp	r3, #4
 8009ade:	d10c      	bne.n	8009afa <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8009ae0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d109      	bne.n	8009afa <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009ae6:	4b68      	ldr	r3, [pc, #416]	@ (8009c88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	08db      	lsrs	r3, r3, #3
 8009aec:	f003 0303 	and.w	r3, r3, #3
 8009af0:	4a66      	ldr	r2, [pc, #408]	@ (8009c8c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009af2:	fa22 f303 	lsr.w	r3, r2, r3
 8009af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009af8:	e01e      	b.n	8009b38 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009afa:	4b63      	ldr	r3, [pc, #396]	@ (8009c88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b06:	d106      	bne.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8009b08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009b0e:	d102      	bne.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009b10:	4b5f      	ldr	r3, [pc, #380]	@ (8009c90 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009b12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009b14:	e010      	b.n	8009b38 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009b16:	4b5c      	ldr	r3, [pc, #368]	@ (8009c88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009b22:	d106      	bne.n	8009b32 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8009b24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b2a:	d102      	bne.n	8009b32 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009b2c:	4b59      	ldr	r3, [pc, #356]	@ (8009c94 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009b30:	e002      	b.n	8009b38 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009b32:	2300      	movs	r3, #0
 8009b34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009b36:	e386      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009b38:	e385      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009b3a:	4b57      	ldr	r3, [pc, #348]	@ (8009c98 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b3e:	e382      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009b40:	2300      	movs	r3, #0
 8009b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b44:	e37f      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009b46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b4a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8009b4e:	430b      	orrs	r3, r1
 8009b50:	f040 80a7 	bne.w	8009ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8009b54:	4b4c      	ldr	r3, [pc, #304]	@ (8009c88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009b56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b58:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8009b5c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b60:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009b64:	d055      	beq.n	8009c12 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8009b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b68:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009b6c:	f200 8096 	bhi.w	8009c9c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b72:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009b76:	f000 8084 	beq.w	8009c82 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8009b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b7c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009b80:	f200 808c 	bhi.w	8009c9c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b86:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009b8a:	d030      	beq.n	8009bee <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8009b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b8e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009b92:	f200 8083 	bhi.w	8009c9c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d004      	beq.n	8009ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8009b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009ba2:	d012      	beq.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8009ba4:	e07a      	b.n	8009c9c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009ba6:	4b38      	ldr	r3, [pc, #224]	@ (8009c88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009bae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009bb2:	d107      	bne.n	8009bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009bb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f000 fe0b 	bl	800a7d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009bc2:	e340      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bc8:	e33d      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009bca:	4b2f      	ldr	r3, [pc, #188]	@ (8009c88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009bd2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009bd6:	d107      	bne.n	8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009bd8:	f107 0318 	add.w	r3, r7, #24
 8009bdc:	4618      	mov	r0, r3
 8009bde:	f000 fb51 	bl	800a284 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009be2:	69bb      	ldr	r3, [r7, #24]
 8009be4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009be6:	e32e      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009be8:	2300      	movs	r3, #0
 8009bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bec:	e32b      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009bee:	4b26      	ldr	r3, [pc, #152]	@ (8009c88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009bf6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009bfa:	d107      	bne.n	8009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009bfc:	f107 030c 	add.w	r3, r7, #12
 8009c00:	4618      	mov	r0, r3
 8009c02:	f000 fc93 	bl	800a52c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c0a:	e31c      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c10:	e319      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009c12:	4b1d      	ldr	r3, [pc, #116]	@ (8009c88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009c14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009c16:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009c1a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009c1c:	4b1a      	ldr	r3, [pc, #104]	@ (8009c88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f003 0304 	and.w	r3, r3, #4
 8009c24:	2b04      	cmp	r3, #4
 8009c26:	d10c      	bne.n	8009c42 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8009c28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d109      	bne.n	8009c42 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009c2e:	4b16      	ldr	r3, [pc, #88]	@ (8009c88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	08db      	lsrs	r3, r3, #3
 8009c34:	f003 0303 	and.w	r3, r3, #3
 8009c38:	4a14      	ldr	r2, [pc, #80]	@ (8009c8c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8009c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009c40:	e01e      	b.n	8009c80 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009c42:	4b11      	ldr	r3, [pc, #68]	@ (8009c88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c4e:	d106      	bne.n	8009c5e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8009c50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009c56:	d102      	bne.n	8009c5e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009c58:	4b0d      	ldr	r3, [pc, #52]	@ (8009c90 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009c5c:	e010      	b.n	8009c80 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009c5e:	4b0a      	ldr	r3, [pc, #40]	@ (8009c88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c66:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009c6a:	d106      	bne.n	8009c7a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8009c6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c72:	d102      	bne.n	8009c7a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009c74:	4b07      	ldr	r3, [pc, #28]	@ (8009c94 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009c78:	e002      	b.n	8009c80 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009c7e:	e2e2      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009c80:	e2e1      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009c82:	4b05      	ldr	r3, [pc, #20]	@ (8009c98 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009c84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c86:	e2de      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009c88:	58024400 	.word	0x58024400
 8009c8c:	03d09000 	.word	0x03d09000
 8009c90:	003d0900 	.word	0x003d0900
 8009c94:	017d7840 	.word	0x017d7840
 8009c98:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ca0:	e2d1      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009ca2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ca6:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8009caa:	430b      	orrs	r3, r1
 8009cac:	f040 809c 	bne.w	8009de8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8009cb0:	4b93      	ldr	r3, [pc, #588]	@ (8009f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009cb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009cb4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8009cb8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009cba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cbc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009cc0:	d054      	beq.n	8009d6c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8009cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cc4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009cc8:	f200 808b 	bhi.w	8009de2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cce:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009cd2:	f000 8083 	beq.w	8009ddc <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8009cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cd8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009cdc:	f200 8081 	bhi.w	8009de2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ce2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009ce6:	d02f      	beq.n	8009d48 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8009ce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009cee:	d878      	bhi.n	8009de2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009cf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d004      	beq.n	8009d00 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8009cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cf8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009cfc:	d012      	beq.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8009cfe:	e070      	b.n	8009de2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009d00:	4b7f      	ldr	r3, [pc, #508]	@ (8009f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009d08:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009d0c:	d107      	bne.n	8009d1e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009d0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009d12:	4618      	mov	r0, r3
 8009d14:	f000 fd5e 	bl	800a7d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009d18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d1c:	e293      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d22:	e290      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009d24:	4b76      	ldr	r3, [pc, #472]	@ (8009f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009d2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009d30:	d107      	bne.n	8009d42 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d32:	f107 0318 	add.w	r3, r7, #24
 8009d36:	4618      	mov	r0, r3
 8009d38:	f000 faa4 	bl	800a284 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009d3c:	69bb      	ldr	r3, [r7, #24]
 8009d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d40:	e281      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009d42:	2300      	movs	r3, #0
 8009d44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d46:	e27e      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009d48:	4b6d      	ldr	r3, [pc, #436]	@ (8009f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009d50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009d54:	d107      	bne.n	8009d66 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d56:	f107 030c 	add.w	r3, r7, #12
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f000 fbe6 	bl	800a52c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d64:	e26f      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009d66:	2300      	movs	r3, #0
 8009d68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d6a:	e26c      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009d6c:	4b64      	ldr	r3, [pc, #400]	@ (8009f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009d6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009d70:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009d74:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009d76:	4b62      	ldr	r3, [pc, #392]	@ (8009f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f003 0304 	and.w	r3, r3, #4
 8009d7e:	2b04      	cmp	r3, #4
 8009d80:	d10c      	bne.n	8009d9c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8009d82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d109      	bne.n	8009d9c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009d88:	4b5d      	ldr	r3, [pc, #372]	@ (8009f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	08db      	lsrs	r3, r3, #3
 8009d8e:	f003 0303 	and.w	r3, r3, #3
 8009d92:	4a5c      	ldr	r2, [pc, #368]	@ (8009f04 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009d94:	fa22 f303 	lsr.w	r3, r2, r3
 8009d98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009d9a:	e01e      	b.n	8009dda <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009d9c:	4b58      	ldr	r3, [pc, #352]	@ (8009f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009da4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009da8:	d106      	bne.n	8009db8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8009daa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009dac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009db0:	d102      	bne.n	8009db8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009db2:	4b55      	ldr	r3, [pc, #340]	@ (8009f08 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009db4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009db6:	e010      	b.n	8009dda <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009db8:	4b51      	ldr	r3, [pc, #324]	@ (8009f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009dc0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009dc4:	d106      	bne.n	8009dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8009dc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009dc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009dcc:	d102      	bne.n	8009dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009dce:	4b4f      	ldr	r3, [pc, #316]	@ (8009f0c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009dd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009dd2:	e002      	b.n	8009dda <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009dd8:	e235      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009dda:	e234      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009ddc:	4b4c      	ldr	r3, [pc, #304]	@ (8009f10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8009dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009de0:	e231      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009de2:	2300      	movs	r3, #0
 8009de4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009de6:	e22e      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8009de8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009dec:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8009df0:	430b      	orrs	r3, r1
 8009df2:	f040 808f 	bne.w	8009f14 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8009df6:	4b42      	ldr	r3, [pc, #264]	@ (8009f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009df8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009dfa:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8009dfe:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8009e00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e02:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009e06:	d06b      	beq.n	8009ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8009e08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e0a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009e0e:	d874      	bhi.n	8009efa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009e10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e12:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009e16:	d056      	beq.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8009e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e1a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009e1e:	d86c      	bhi.n	8009efa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009e20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e22:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009e26:	d03b      	beq.n	8009ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8009e28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e2a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009e2e:	d864      	bhi.n	8009efa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009e30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e32:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009e36:	d021      	beq.n	8009e7c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8009e38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009e3e:	d85c      	bhi.n	8009efa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d004      	beq.n	8009e50 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8009e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e4c:	d004      	beq.n	8009e58 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8009e4e:	e054      	b.n	8009efa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8009e50:	f7fe fa4c 	bl	80082ec <HAL_RCC_GetPCLK1Freq>
 8009e54:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009e56:	e1f6      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009e58:	4b29      	ldr	r3, [pc, #164]	@ (8009f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009e60:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009e64:	d107      	bne.n	8009e76 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e66:	f107 0318 	add.w	r3, r7, #24
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f000 fa0a 	bl	800a284 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009e70:	69fb      	ldr	r3, [r7, #28]
 8009e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e74:	e1e7      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009e76:	2300      	movs	r3, #0
 8009e78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e7a:	e1e4      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009e7c:	4b20      	ldr	r3, [pc, #128]	@ (8009f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009e84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009e88:	d107      	bne.n	8009e9a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e8a:	f107 030c 	add.w	r3, r7, #12
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f000 fb4c 	bl	800a52c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009e94:	693b      	ldr	r3, [r7, #16]
 8009e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e98:	e1d5      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e9e:	e1d2      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009ea0:	4b17      	ldr	r3, [pc, #92]	@ (8009f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f003 0304 	and.w	r3, r3, #4
 8009ea8:	2b04      	cmp	r3, #4
 8009eaa:	d109      	bne.n	8009ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009eac:	4b14      	ldr	r3, [pc, #80]	@ (8009f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	08db      	lsrs	r3, r3, #3
 8009eb2:	f003 0303 	and.w	r3, r3, #3
 8009eb6:	4a13      	ldr	r2, [pc, #76]	@ (8009f04 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8009eb8:	fa22 f303 	lsr.w	r3, r2, r3
 8009ebc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ebe:	e1c2      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ec4:	e1bf      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009ec6:	4b0e      	ldr	r3, [pc, #56]	@ (8009f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ece:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ed2:	d102      	bne.n	8009eda <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8009ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8009f08 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ed8:	e1b5      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009eda:	2300      	movs	r3, #0
 8009edc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ede:	e1b2      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009ee0:	4b07      	ldr	r3, [pc, #28]	@ (8009f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ee8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009eec:	d102      	bne.n	8009ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8009eee:	4b07      	ldr	r3, [pc, #28]	@ (8009f0c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009ef0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ef2:	e1a8      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ef8:	e1a5      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009efa:	2300      	movs	r3, #0
 8009efc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009efe:	e1a2      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009f00:	58024400 	.word	0x58024400
 8009f04:	03d09000 	.word	0x03d09000
 8009f08:	003d0900 	.word	0x003d0900
 8009f0c:	017d7840 	.word	0x017d7840
 8009f10:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009f14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f18:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8009f1c:	430b      	orrs	r3, r1
 8009f1e:	d173      	bne.n	800a008 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8009f20:	4b9c      	ldr	r3, [pc, #624]	@ (800a194 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009f22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f24:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009f28:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009f30:	d02f      	beq.n	8009f92 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009f32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f34:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009f38:	d863      	bhi.n	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8009f3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d004      	beq.n	8009f4a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8009f40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f46:	d012      	beq.n	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8009f48:	e05b      	b.n	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009f4a:	4b92      	ldr	r3, [pc, #584]	@ (800a194 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009f52:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009f56:	d107      	bne.n	8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f58:	f107 0318 	add.w	r3, r7, #24
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f000 f991 	bl	800a284 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009f62:	69bb      	ldr	r3, [r7, #24]
 8009f64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f66:	e16e      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f68:	2300      	movs	r3, #0
 8009f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f6c:	e16b      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009f6e:	4b89      	ldr	r3, [pc, #548]	@ (800a194 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009f76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009f7a:	d107      	bne.n	8009f8c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f7c:	f107 030c 	add.w	r3, r7, #12
 8009f80:	4618      	mov	r0, r3
 8009f82:	f000 fad3 	bl	800a52c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f8a:	e15c      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f90:	e159      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009f92:	4b80      	ldr	r3, [pc, #512]	@ (800a194 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009f94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009f96:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009f9a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009f9c:	4b7d      	ldr	r3, [pc, #500]	@ (800a194 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	f003 0304 	and.w	r3, r3, #4
 8009fa4:	2b04      	cmp	r3, #4
 8009fa6:	d10c      	bne.n	8009fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8009fa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d109      	bne.n	8009fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009fae:	4b79      	ldr	r3, [pc, #484]	@ (800a194 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	08db      	lsrs	r3, r3, #3
 8009fb4:	f003 0303 	and.w	r3, r3, #3
 8009fb8:	4a77      	ldr	r2, [pc, #476]	@ (800a198 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009fba:	fa22 f303 	lsr.w	r3, r2, r3
 8009fbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009fc0:	e01e      	b.n	800a000 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009fc2:	4b74      	ldr	r3, [pc, #464]	@ (800a194 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009fca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009fce:	d106      	bne.n	8009fde <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8009fd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fd2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009fd6:	d102      	bne.n	8009fde <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009fd8:	4b70      	ldr	r3, [pc, #448]	@ (800a19c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8009fda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009fdc:	e010      	b.n	800a000 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009fde:	4b6d      	ldr	r3, [pc, #436]	@ (800a194 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009fe6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009fea:	d106      	bne.n	8009ffa <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8009fec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009ff2:	d102      	bne.n	8009ffa <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009ff4:	4b6a      	ldr	r3, [pc, #424]	@ (800a1a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009ff8:	e002      	b.n	800a000 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009ffe:	e122      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a000:	e121      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a002:	2300      	movs	r3, #0
 800a004:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a006:	e11e      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a008:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a00c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800a010:	430b      	orrs	r3, r1
 800a012:	d133      	bne.n	800a07c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a014:	4b5f      	ldr	r3, [pc, #380]	@ (800a194 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a016:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a018:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a01c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a01e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a020:	2b00      	cmp	r3, #0
 800a022:	d004      	beq.n	800a02e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800a024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a026:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a02a:	d012      	beq.n	800a052 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800a02c:	e023      	b.n	800a076 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a02e:	4b59      	ldr	r3, [pc, #356]	@ (800a194 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a036:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a03a:	d107      	bne.n	800a04c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a03c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a040:	4618      	mov	r0, r3
 800a042:	f000 fbc7 	bl	800a7d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a048:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a04a:	e0fc      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a04c:	2300      	movs	r3, #0
 800a04e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a050:	e0f9      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a052:	4b50      	ldr	r3, [pc, #320]	@ (800a194 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a05a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a05e:	d107      	bne.n	800a070 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a060:	f107 0318 	add.w	r3, r7, #24
 800a064:	4618      	mov	r0, r3
 800a066:	f000 f90d 	bl	800a284 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a06a:	6a3b      	ldr	r3, [r7, #32]
 800a06c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a06e:	e0ea      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a070:	2300      	movs	r3, #0
 800a072:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a074:	e0e7      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a076:	2300      	movs	r3, #0
 800a078:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a07a:	e0e4      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a07c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a080:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800a084:	430b      	orrs	r3, r1
 800a086:	f040 808d 	bne.w	800a1a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a08a:	4b42      	ldr	r3, [pc, #264]	@ (800a194 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a08c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a08e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800a092:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a096:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a09a:	d06b      	beq.n	800a174 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800a09c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a09e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a0a2:	d874      	bhi.n	800a18e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a0a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a0aa:	d056      	beq.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800a0ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a0b2:	d86c      	bhi.n	800a18e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a0b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0b6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a0ba:	d03b      	beq.n	800a134 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800a0bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0be:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a0c2:	d864      	bhi.n	800a18e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a0c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a0ca:	d021      	beq.n	800a110 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800a0cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a0d2:	d85c      	bhi.n	800a18e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a0d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d004      	beq.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800a0da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a0e0:	d004      	beq.n	800a0ec <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800a0e2:	e054      	b.n	800a18e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a0e4:	f000 f8b8 	bl	800a258 <HAL_RCCEx_GetD3PCLK1Freq>
 800a0e8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a0ea:	e0ac      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a0ec:	4b29      	ldr	r3, [pc, #164]	@ (800a194 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a0f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a0f8:	d107      	bne.n	800a10a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a0fa:	f107 0318 	add.w	r3, r7, #24
 800a0fe:	4618      	mov	r0, r3
 800a100:	f000 f8c0 	bl	800a284 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a104:	69fb      	ldr	r3, [r7, #28]
 800a106:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a108:	e09d      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a10a:	2300      	movs	r3, #0
 800a10c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a10e:	e09a      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a110:	4b20      	ldr	r3, [pc, #128]	@ (800a194 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a118:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a11c:	d107      	bne.n	800a12e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a11e:	f107 030c 	add.w	r3, r7, #12
 800a122:	4618      	mov	r0, r3
 800a124:	f000 fa02 	bl	800a52c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a128:	693b      	ldr	r3, [r7, #16]
 800a12a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a12c:	e08b      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a12e:	2300      	movs	r3, #0
 800a130:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a132:	e088      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a134:	4b17      	ldr	r3, [pc, #92]	@ (800a194 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	f003 0304 	and.w	r3, r3, #4
 800a13c:	2b04      	cmp	r3, #4
 800a13e:	d109      	bne.n	800a154 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a140:	4b14      	ldr	r3, [pc, #80]	@ (800a194 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	08db      	lsrs	r3, r3, #3
 800a146:	f003 0303 	and.w	r3, r3, #3
 800a14a:	4a13      	ldr	r2, [pc, #76]	@ (800a198 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a14c:	fa22 f303 	lsr.w	r3, r2, r3
 800a150:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a152:	e078      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a154:	2300      	movs	r3, #0
 800a156:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a158:	e075      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a15a:	4b0e      	ldr	r3, [pc, #56]	@ (800a194 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a162:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a166:	d102      	bne.n	800a16e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800a168:	4b0c      	ldr	r3, [pc, #48]	@ (800a19c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a16a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a16c:	e06b      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a16e:	2300      	movs	r3, #0
 800a170:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a172:	e068      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a174:	4b07      	ldr	r3, [pc, #28]	@ (800a194 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a17c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a180:	d102      	bne.n	800a188 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800a182:	4b07      	ldr	r3, [pc, #28]	@ (800a1a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a184:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a186:	e05e      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a188:	2300      	movs	r3, #0
 800a18a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a18c:	e05b      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800a18e:	2300      	movs	r3, #0
 800a190:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a192:	e058      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a194:	58024400 	.word	0x58024400
 800a198:	03d09000 	.word	0x03d09000
 800a19c:	003d0900 	.word	0x003d0900
 800a1a0:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a1a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1a8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800a1ac:	430b      	orrs	r3, r1
 800a1ae:	d148      	bne.n	800a242 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800a1b0:	4b27      	ldr	r3, [pc, #156]	@ (800a250 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a1b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a1b4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a1b8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a1ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a1c0:	d02a      	beq.n	800a218 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800a1c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a1c8:	d838      	bhi.n	800a23c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800a1ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d004      	beq.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800a1d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a1d6:	d00d      	beq.n	800a1f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800a1d8:	e030      	b.n	800a23c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a1da:	4b1d      	ldr	r3, [pc, #116]	@ (800a250 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a1e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a1e6:	d102      	bne.n	800a1ee <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800a1e8:	4b1a      	ldr	r3, [pc, #104]	@ (800a254 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800a1ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1ec:	e02b      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1f2:	e028      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a1f4:	4b16      	ldr	r3, [pc, #88]	@ (800a250 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a1fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a200:	d107      	bne.n	800a212 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a202:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a206:	4618      	mov	r0, r3
 800a208:	f000 fae4 	bl	800a7d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a20c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a20e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a210:	e019      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a212:	2300      	movs	r3, #0
 800a214:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a216:	e016      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a218:	4b0d      	ldr	r3, [pc, #52]	@ (800a250 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a220:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a224:	d107      	bne.n	800a236 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a226:	f107 0318 	add.w	r3, r7, #24
 800a22a:	4618      	mov	r0, r3
 800a22c:	f000 f82a 	bl	800a284 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a230:	69fb      	ldr	r3, [r7, #28]
 800a232:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a234:	e007      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a236:	2300      	movs	r3, #0
 800a238:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a23a:	e004      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a23c:	2300      	movs	r3, #0
 800a23e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a240:	e001      	b.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800a242:	2300      	movs	r3, #0
 800a244:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800a246:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a248:	4618      	mov	r0, r3
 800a24a:	3740      	adds	r7, #64	@ 0x40
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bd80      	pop	{r7, pc}
 800a250:	58024400 	.word	0x58024400
 800a254:	017d7840 	.word	0x017d7840

0800a258 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a25c:	f7fe f816 	bl	800828c <HAL_RCC_GetHCLKFreq>
 800a260:	4602      	mov	r2, r0
 800a262:	4b06      	ldr	r3, [pc, #24]	@ (800a27c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a264:	6a1b      	ldr	r3, [r3, #32]
 800a266:	091b      	lsrs	r3, r3, #4
 800a268:	f003 0307 	and.w	r3, r3, #7
 800a26c:	4904      	ldr	r1, [pc, #16]	@ (800a280 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a26e:	5ccb      	ldrb	r3, [r1, r3]
 800a270:	f003 031f 	and.w	r3, r3, #31
 800a274:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a278:	4618      	mov	r0, r3
 800a27a:	bd80      	pop	{r7, pc}
 800a27c:	58024400 	.word	0x58024400
 800a280:	08011004 	.word	0x08011004

0800a284 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a284:	b480      	push	{r7}
 800a286:	b089      	sub	sp, #36	@ 0x24
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a28c:	4ba1      	ldr	r3, [pc, #644]	@ (800a514 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a28e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a290:	f003 0303 	and.w	r3, r3, #3
 800a294:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a296:	4b9f      	ldr	r3, [pc, #636]	@ (800a514 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a29a:	0b1b      	lsrs	r3, r3, #12
 800a29c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a2a0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a2a2:	4b9c      	ldr	r3, [pc, #624]	@ (800a514 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a2a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2a6:	091b      	lsrs	r3, r3, #4
 800a2a8:	f003 0301 	and.w	r3, r3, #1
 800a2ac:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a2ae:	4b99      	ldr	r3, [pc, #612]	@ (800a514 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a2b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a2b2:	08db      	lsrs	r3, r3, #3
 800a2b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a2b8:	693a      	ldr	r2, [r7, #16]
 800a2ba:	fb02 f303 	mul.w	r3, r2, r3
 800a2be:	ee07 3a90 	vmov	s15, r3
 800a2c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2c6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	f000 8111 	beq.w	800a4f4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a2d2:	69bb      	ldr	r3, [r7, #24]
 800a2d4:	2b02      	cmp	r3, #2
 800a2d6:	f000 8083 	beq.w	800a3e0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a2da:	69bb      	ldr	r3, [r7, #24]
 800a2dc:	2b02      	cmp	r3, #2
 800a2de:	f200 80a1 	bhi.w	800a424 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a2e2:	69bb      	ldr	r3, [r7, #24]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d003      	beq.n	800a2f0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a2e8:	69bb      	ldr	r3, [r7, #24]
 800a2ea:	2b01      	cmp	r3, #1
 800a2ec:	d056      	beq.n	800a39c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a2ee:	e099      	b.n	800a424 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a2f0:	4b88      	ldr	r3, [pc, #544]	@ (800a514 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	f003 0320 	and.w	r3, r3, #32
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d02d      	beq.n	800a358 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a2fc:	4b85      	ldr	r3, [pc, #532]	@ (800a514 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	08db      	lsrs	r3, r3, #3
 800a302:	f003 0303 	and.w	r3, r3, #3
 800a306:	4a84      	ldr	r2, [pc, #528]	@ (800a518 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a308:	fa22 f303 	lsr.w	r3, r2, r3
 800a30c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a30e:	68bb      	ldr	r3, [r7, #8]
 800a310:	ee07 3a90 	vmov	s15, r3
 800a314:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a318:	697b      	ldr	r3, [r7, #20]
 800a31a:	ee07 3a90 	vmov	s15, r3
 800a31e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a322:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a326:	4b7b      	ldr	r3, [pc, #492]	@ (800a514 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a32a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a32e:	ee07 3a90 	vmov	s15, r3
 800a332:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a336:	ed97 6a03 	vldr	s12, [r7, #12]
 800a33a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a51c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a33e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a342:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a346:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a34a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a34e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a352:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a356:	e087      	b.n	800a468 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a358:	697b      	ldr	r3, [r7, #20]
 800a35a:	ee07 3a90 	vmov	s15, r3
 800a35e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a362:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a520 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a366:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a36a:	4b6a      	ldr	r3, [pc, #424]	@ (800a514 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a36c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a36e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a372:	ee07 3a90 	vmov	s15, r3
 800a376:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a37a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a37e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a51c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a382:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a386:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a38a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a38e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a392:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a396:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a39a:	e065      	b.n	800a468 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a39c:	697b      	ldr	r3, [r7, #20]
 800a39e:	ee07 3a90 	vmov	s15, r3
 800a3a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3a6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a524 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a3aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3ae:	4b59      	ldr	r3, [pc, #356]	@ (800a514 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a3b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3b6:	ee07 3a90 	vmov	s15, r3
 800a3ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3be:	ed97 6a03 	vldr	s12, [r7, #12]
 800a3c2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a51c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a3c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a3d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a3de:	e043      	b.n	800a468 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a3e0:	697b      	ldr	r3, [r7, #20]
 800a3e2:	ee07 3a90 	vmov	s15, r3
 800a3e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3ea:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a528 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a3ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3f2:	4b48      	ldr	r3, [pc, #288]	@ (800a514 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a3f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3fa:	ee07 3a90 	vmov	s15, r3
 800a3fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a402:	ed97 6a03 	vldr	s12, [r7, #12]
 800a406:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a51c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a40a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a40e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a412:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a416:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a41a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a41e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a422:	e021      	b.n	800a468 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a424:	697b      	ldr	r3, [r7, #20]
 800a426:	ee07 3a90 	vmov	s15, r3
 800a42a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a42e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a524 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a432:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a436:	4b37      	ldr	r3, [pc, #220]	@ (800a514 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a438:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a43a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a43e:	ee07 3a90 	vmov	s15, r3
 800a442:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a446:	ed97 6a03 	vldr	s12, [r7, #12]
 800a44a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a51c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a44e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a452:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a456:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a45a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a45e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a462:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a466:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800a468:	4b2a      	ldr	r3, [pc, #168]	@ (800a514 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a46a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a46c:	0a5b      	lsrs	r3, r3, #9
 800a46e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a472:	ee07 3a90 	vmov	s15, r3
 800a476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a47a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a47e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a482:	edd7 6a07 	vldr	s13, [r7, #28]
 800a486:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a48a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a48e:	ee17 2a90 	vmov	r2, s15
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800a496:	4b1f      	ldr	r3, [pc, #124]	@ (800a514 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a49a:	0c1b      	lsrs	r3, r3, #16
 800a49c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a4a0:	ee07 3a90 	vmov	s15, r3
 800a4a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a4ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a4b0:	edd7 6a07 	vldr	s13, [r7, #28]
 800a4b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a4b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a4bc:	ee17 2a90 	vmov	r2, s15
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800a4c4:	4b13      	ldr	r3, [pc, #76]	@ (800a514 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a4c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4c8:	0e1b      	lsrs	r3, r3, #24
 800a4ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a4ce:	ee07 3a90 	vmov	s15, r3
 800a4d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a4da:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a4de:	edd7 6a07 	vldr	s13, [r7, #28]
 800a4e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a4e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a4ea:	ee17 2a90 	vmov	r2, s15
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a4f2:	e008      	b.n	800a506 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2200      	movs	r2, #0
 800a504:	609a      	str	r2, [r3, #8]
}
 800a506:	bf00      	nop
 800a508:	3724      	adds	r7, #36	@ 0x24
 800a50a:	46bd      	mov	sp, r7
 800a50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a510:	4770      	bx	lr
 800a512:	bf00      	nop
 800a514:	58024400 	.word	0x58024400
 800a518:	03d09000 	.word	0x03d09000
 800a51c:	46000000 	.word	0x46000000
 800a520:	4c742400 	.word	0x4c742400
 800a524:	4a742400 	.word	0x4a742400
 800a528:	4bbebc20 	.word	0x4bbebc20

0800a52c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800a52c:	b480      	push	{r7}
 800a52e:	b089      	sub	sp, #36	@ 0x24
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a534:	4ba1      	ldr	r3, [pc, #644]	@ (800a7bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a538:	f003 0303 	and.w	r3, r3, #3
 800a53c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800a53e:	4b9f      	ldr	r3, [pc, #636]	@ (800a7bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a542:	0d1b      	lsrs	r3, r3, #20
 800a544:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a548:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a54a:	4b9c      	ldr	r3, [pc, #624]	@ (800a7bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a54c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a54e:	0a1b      	lsrs	r3, r3, #8
 800a550:	f003 0301 	and.w	r3, r3, #1
 800a554:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800a556:	4b99      	ldr	r3, [pc, #612]	@ (800a7bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a55a:	08db      	lsrs	r3, r3, #3
 800a55c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a560:	693a      	ldr	r2, [r7, #16]
 800a562:	fb02 f303 	mul.w	r3, r2, r3
 800a566:	ee07 3a90 	vmov	s15, r3
 800a56a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a56e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a572:	697b      	ldr	r3, [r7, #20]
 800a574:	2b00      	cmp	r3, #0
 800a576:	f000 8111 	beq.w	800a79c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a57a:	69bb      	ldr	r3, [r7, #24]
 800a57c:	2b02      	cmp	r3, #2
 800a57e:	f000 8083 	beq.w	800a688 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a582:	69bb      	ldr	r3, [r7, #24]
 800a584:	2b02      	cmp	r3, #2
 800a586:	f200 80a1 	bhi.w	800a6cc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a58a:	69bb      	ldr	r3, [r7, #24]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d003      	beq.n	800a598 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a590:	69bb      	ldr	r3, [r7, #24]
 800a592:	2b01      	cmp	r3, #1
 800a594:	d056      	beq.n	800a644 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a596:	e099      	b.n	800a6cc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a598:	4b88      	ldr	r3, [pc, #544]	@ (800a7bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f003 0320 	and.w	r3, r3, #32
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d02d      	beq.n	800a600 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a5a4:	4b85      	ldr	r3, [pc, #532]	@ (800a7bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	08db      	lsrs	r3, r3, #3
 800a5aa:	f003 0303 	and.w	r3, r3, #3
 800a5ae:	4a84      	ldr	r2, [pc, #528]	@ (800a7c0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a5b0:	fa22 f303 	lsr.w	r3, r2, r3
 800a5b4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a5b6:	68bb      	ldr	r3, [r7, #8]
 800a5b8:	ee07 3a90 	vmov	s15, r3
 800a5bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5c0:	697b      	ldr	r3, [r7, #20]
 800a5c2:	ee07 3a90 	vmov	s15, r3
 800a5c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5ce:	4b7b      	ldr	r3, [pc, #492]	@ (800a7bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a5d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5d6:	ee07 3a90 	vmov	s15, r3
 800a5da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5de:	ed97 6a03 	vldr	s12, [r7, #12]
 800a5e2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a7c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a5e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a5f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5fa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a5fe:	e087      	b.n	800a710 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a600:	697b      	ldr	r3, [r7, #20]
 800a602:	ee07 3a90 	vmov	s15, r3
 800a606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a60a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a7c8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a60e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a612:	4b6a      	ldr	r3, [pc, #424]	@ (800a7bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a61a:	ee07 3a90 	vmov	s15, r3
 800a61e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a622:	ed97 6a03 	vldr	s12, [r7, #12]
 800a626:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a7c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a62a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a62e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a632:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a636:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a63a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a63e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a642:	e065      	b.n	800a710 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a644:	697b      	ldr	r3, [r7, #20]
 800a646:	ee07 3a90 	vmov	s15, r3
 800a64a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a64e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a7cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a652:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a656:	4b59      	ldr	r3, [pc, #356]	@ (800a7bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a65a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a65e:	ee07 3a90 	vmov	s15, r3
 800a662:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a666:	ed97 6a03 	vldr	s12, [r7, #12]
 800a66a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a7c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a66e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a672:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a676:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a67a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a67e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a682:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a686:	e043      	b.n	800a710 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a688:	697b      	ldr	r3, [r7, #20]
 800a68a:	ee07 3a90 	vmov	s15, r3
 800a68e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a692:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a7d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a696:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a69a:	4b48      	ldr	r3, [pc, #288]	@ (800a7bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a69c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a69e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6a2:	ee07 3a90 	vmov	s15, r3
 800a6a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6aa:	ed97 6a03 	vldr	s12, [r7, #12]
 800a6ae:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a7c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a6b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a6be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a6ca:	e021      	b.n	800a710 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a6cc:	697b      	ldr	r3, [r7, #20]
 800a6ce:	ee07 3a90 	vmov	s15, r3
 800a6d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6d6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a7cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a6da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6de:	4b37      	ldr	r3, [pc, #220]	@ (800a7bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a6e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6e6:	ee07 3a90 	vmov	s15, r3
 800a6ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800a6f2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a7c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a6f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a702:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a70a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a70e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a710:	4b2a      	ldr	r3, [pc, #168]	@ (800a7bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a714:	0a5b      	lsrs	r3, r3, #9
 800a716:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a71a:	ee07 3a90 	vmov	s15, r3
 800a71e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a722:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a726:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a72a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a72e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a732:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a736:	ee17 2a90 	vmov	r2, s15
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a73e:	4b1f      	ldr	r3, [pc, #124]	@ (800a7bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a742:	0c1b      	lsrs	r3, r3, #16
 800a744:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a748:	ee07 3a90 	vmov	s15, r3
 800a74c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a750:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a754:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a758:	edd7 6a07 	vldr	s13, [r7, #28]
 800a75c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a760:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a764:	ee17 2a90 	vmov	r2, s15
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a76c:	4b13      	ldr	r3, [pc, #76]	@ (800a7bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a76e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a770:	0e1b      	lsrs	r3, r3, #24
 800a772:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a776:	ee07 3a90 	vmov	s15, r3
 800a77a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a77e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a782:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a786:	edd7 6a07 	vldr	s13, [r7, #28]
 800a78a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a78e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a792:	ee17 2a90 	vmov	r2, s15
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a79a:	e008      	b.n	800a7ae <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2200      	movs	r2, #0
 800a7a0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	609a      	str	r2, [r3, #8]
}
 800a7ae:	bf00      	nop
 800a7b0:	3724      	adds	r7, #36	@ 0x24
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b8:	4770      	bx	lr
 800a7ba:	bf00      	nop
 800a7bc:	58024400 	.word	0x58024400
 800a7c0:	03d09000 	.word	0x03d09000
 800a7c4:	46000000 	.word	0x46000000
 800a7c8:	4c742400 	.word	0x4c742400
 800a7cc:	4a742400 	.word	0x4a742400
 800a7d0:	4bbebc20 	.word	0x4bbebc20

0800a7d4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b089      	sub	sp, #36	@ 0x24
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a7dc:	4ba0      	ldr	r3, [pc, #640]	@ (800aa60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a7de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7e0:	f003 0303 	and.w	r3, r3, #3
 800a7e4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800a7e6:	4b9e      	ldr	r3, [pc, #632]	@ (800aa60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a7e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7ea:	091b      	lsrs	r3, r3, #4
 800a7ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a7f0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a7f2:	4b9b      	ldr	r3, [pc, #620]	@ (800aa60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a7f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7f6:	f003 0301 	and.w	r3, r3, #1
 800a7fa:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a7fc:	4b98      	ldr	r3, [pc, #608]	@ (800aa60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a7fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a800:	08db      	lsrs	r3, r3, #3
 800a802:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a806:	693a      	ldr	r2, [r7, #16]
 800a808:	fb02 f303 	mul.w	r3, r2, r3
 800a80c:	ee07 3a90 	vmov	s15, r3
 800a810:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a814:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a818:	697b      	ldr	r3, [r7, #20]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	f000 8111 	beq.w	800aa42 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a820:	69bb      	ldr	r3, [r7, #24]
 800a822:	2b02      	cmp	r3, #2
 800a824:	f000 8083 	beq.w	800a92e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a828:	69bb      	ldr	r3, [r7, #24]
 800a82a:	2b02      	cmp	r3, #2
 800a82c:	f200 80a1 	bhi.w	800a972 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a830:	69bb      	ldr	r3, [r7, #24]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d003      	beq.n	800a83e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a836:	69bb      	ldr	r3, [r7, #24]
 800a838:	2b01      	cmp	r3, #1
 800a83a:	d056      	beq.n	800a8ea <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a83c:	e099      	b.n	800a972 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a83e:	4b88      	ldr	r3, [pc, #544]	@ (800aa60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f003 0320 	and.w	r3, r3, #32
 800a846:	2b00      	cmp	r3, #0
 800a848:	d02d      	beq.n	800a8a6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a84a:	4b85      	ldr	r3, [pc, #532]	@ (800aa60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	08db      	lsrs	r3, r3, #3
 800a850:	f003 0303 	and.w	r3, r3, #3
 800a854:	4a83      	ldr	r2, [pc, #524]	@ (800aa64 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a856:	fa22 f303 	lsr.w	r3, r2, r3
 800a85a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	ee07 3a90 	vmov	s15, r3
 800a862:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a866:	697b      	ldr	r3, [r7, #20]
 800a868:	ee07 3a90 	vmov	s15, r3
 800a86c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a870:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a874:	4b7a      	ldr	r3, [pc, #488]	@ (800aa60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a878:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a87c:	ee07 3a90 	vmov	s15, r3
 800a880:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a884:	ed97 6a03 	vldr	s12, [r7, #12]
 800a888:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800aa68 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a88c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a890:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a894:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a898:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a89c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8a0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a8a4:	e087      	b.n	800a9b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a8a6:	697b      	ldr	r3, [r7, #20]
 800a8a8:	ee07 3a90 	vmov	s15, r3
 800a8ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8b0:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800aa6c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a8b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8b8:	4b69      	ldr	r3, [pc, #420]	@ (800aa60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a8ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8c0:	ee07 3a90 	vmov	s15, r3
 800a8c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8c8:	ed97 6a03 	vldr	s12, [r7, #12]
 800a8cc:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800aa68 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a8d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a8dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8e4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a8e8:	e065      	b.n	800a9b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a8ea:	697b      	ldr	r3, [r7, #20]
 800a8ec:	ee07 3a90 	vmov	s15, r3
 800a8f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8f4:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800aa70 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a8f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8fc:	4b58      	ldr	r3, [pc, #352]	@ (800aa60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a8fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a900:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a904:	ee07 3a90 	vmov	s15, r3
 800a908:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a90c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a910:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800aa68 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a914:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a918:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a91c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a920:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a924:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a928:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a92c:	e043      	b.n	800a9b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a92e:	697b      	ldr	r3, [r7, #20]
 800a930:	ee07 3a90 	vmov	s15, r3
 800a934:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a938:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800aa74 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a93c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a940:	4b47      	ldr	r3, [pc, #284]	@ (800aa60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a944:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a948:	ee07 3a90 	vmov	s15, r3
 800a94c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a950:	ed97 6a03 	vldr	s12, [r7, #12]
 800a954:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800aa68 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a958:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a95c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a960:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a964:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a968:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a96c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a970:	e021      	b.n	800a9b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a972:	697b      	ldr	r3, [r7, #20]
 800a974:	ee07 3a90 	vmov	s15, r3
 800a978:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a97c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800aa6c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a980:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a984:	4b36      	ldr	r3, [pc, #216]	@ (800aa60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a988:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a98c:	ee07 3a90 	vmov	s15, r3
 800a990:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a994:	ed97 6a03 	vldr	s12, [r7, #12]
 800a998:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800aa68 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a99c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a9a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a9b4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800a9b6:	4b2a      	ldr	r3, [pc, #168]	@ (800aa60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a9b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9ba:	0a5b      	lsrs	r3, r3, #9
 800a9bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a9c0:	ee07 3a90 	vmov	s15, r3
 800a9c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a9cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a9d0:	edd7 6a07 	vldr	s13, [r7, #28]
 800a9d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a9d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a9dc:	ee17 2a90 	vmov	r2, s15
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800a9e4:	4b1e      	ldr	r3, [pc, #120]	@ (800aa60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a9e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9e8:	0c1b      	lsrs	r3, r3, #16
 800a9ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a9ee:	ee07 3a90 	vmov	s15, r3
 800a9f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a9fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a9fe:	edd7 6a07 	vldr	s13, [r7, #28]
 800aa02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa0a:	ee17 2a90 	vmov	r2, s15
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800aa12:	4b13      	ldr	r3, [pc, #76]	@ (800aa60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aa14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa16:	0e1b      	lsrs	r3, r3, #24
 800aa18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa1c:	ee07 3a90 	vmov	s15, r3
 800aa20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa24:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aa28:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aa2c:	edd7 6a07 	vldr	s13, [r7, #28]
 800aa30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa38:	ee17 2a90 	vmov	r2, s15
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800aa40:	e008      	b.n	800aa54 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2200      	movs	r2, #0
 800aa46:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2200      	movs	r2, #0
 800aa52:	609a      	str	r2, [r3, #8]
}
 800aa54:	bf00      	nop
 800aa56:	3724      	adds	r7, #36	@ 0x24
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5e:	4770      	bx	lr
 800aa60:	58024400 	.word	0x58024400
 800aa64:	03d09000 	.word	0x03d09000
 800aa68:	46000000 	.word	0x46000000
 800aa6c:	4c742400 	.word	0x4c742400
 800aa70:	4a742400 	.word	0x4a742400
 800aa74:	4bbebc20 	.word	0x4bbebc20

0800aa78 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b084      	sub	sp, #16
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
 800aa80:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800aa82:	2300      	movs	r3, #0
 800aa84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800aa86:	4b53      	ldr	r3, [pc, #332]	@ (800abd4 <RCCEx_PLL2_Config+0x15c>)
 800aa88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa8a:	f003 0303 	and.w	r3, r3, #3
 800aa8e:	2b03      	cmp	r3, #3
 800aa90:	d101      	bne.n	800aa96 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800aa92:	2301      	movs	r3, #1
 800aa94:	e099      	b.n	800abca <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800aa96:	4b4f      	ldr	r3, [pc, #316]	@ (800abd4 <RCCEx_PLL2_Config+0x15c>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	4a4e      	ldr	r2, [pc, #312]	@ (800abd4 <RCCEx_PLL2_Config+0x15c>)
 800aa9c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800aaa0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aaa2:	f7f7 fcad 	bl	8002400 <HAL_GetTick>
 800aaa6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800aaa8:	e008      	b.n	800aabc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800aaaa:	f7f7 fca9 	bl	8002400 <HAL_GetTick>
 800aaae:	4602      	mov	r2, r0
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	1ad3      	subs	r3, r2, r3
 800aab4:	2b02      	cmp	r3, #2
 800aab6:	d901      	bls.n	800aabc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800aab8:	2303      	movs	r3, #3
 800aaba:	e086      	b.n	800abca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800aabc:	4b45      	ldr	r3, [pc, #276]	@ (800abd4 <RCCEx_PLL2_Config+0x15c>)
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d1f0      	bne.n	800aaaa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800aac8:	4b42      	ldr	r3, [pc, #264]	@ (800abd4 <RCCEx_PLL2_Config+0x15c>)
 800aaca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aacc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	031b      	lsls	r3, r3, #12
 800aad6:	493f      	ldr	r1, [pc, #252]	@ (800abd4 <RCCEx_PLL2_Config+0x15c>)
 800aad8:	4313      	orrs	r3, r2
 800aada:	628b      	str	r3, [r1, #40]	@ 0x28
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	685b      	ldr	r3, [r3, #4]
 800aae0:	3b01      	subs	r3, #1
 800aae2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	689b      	ldr	r3, [r3, #8]
 800aaea:	3b01      	subs	r3, #1
 800aaec:	025b      	lsls	r3, r3, #9
 800aaee:	b29b      	uxth	r3, r3
 800aaf0:	431a      	orrs	r2, r3
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	68db      	ldr	r3, [r3, #12]
 800aaf6:	3b01      	subs	r3, #1
 800aaf8:	041b      	lsls	r3, r3, #16
 800aafa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800aafe:	431a      	orrs	r2, r3
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	691b      	ldr	r3, [r3, #16]
 800ab04:	3b01      	subs	r3, #1
 800ab06:	061b      	lsls	r3, r3, #24
 800ab08:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ab0c:	4931      	ldr	r1, [pc, #196]	@ (800abd4 <RCCEx_PLL2_Config+0x15c>)
 800ab0e:	4313      	orrs	r3, r2
 800ab10:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ab12:	4b30      	ldr	r3, [pc, #192]	@ (800abd4 <RCCEx_PLL2_Config+0x15c>)
 800ab14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab16:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	695b      	ldr	r3, [r3, #20]
 800ab1e:	492d      	ldr	r1, [pc, #180]	@ (800abd4 <RCCEx_PLL2_Config+0x15c>)
 800ab20:	4313      	orrs	r3, r2
 800ab22:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ab24:	4b2b      	ldr	r3, [pc, #172]	@ (800abd4 <RCCEx_PLL2_Config+0x15c>)
 800ab26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab28:	f023 0220 	bic.w	r2, r3, #32
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	699b      	ldr	r3, [r3, #24]
 800ab30:	4928      	ldr	r1, [pc, #160]	@ (800abd4 <RCCEx_PLL2_Config+0x15c>)
 800ab32:	4313      	orrs	r3, r2
 800ab34:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ab36:	4b27      	ldr	r3, [pc, #156]	@ (800abd4 <RCCEx_PLL2_Config+0x15c>)
 800ab38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab3a:	4a26      	ldr	r2, [pc, #152]	@ (800abd4 <RCCEx_PLL2_Config+0x15c>)
 800ab3c:	f023 0310 	bic.w	r3, r3, #16
 800ab40:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ab42:	4b24      	ldr	r3, [pc, #144]	@ (800abd4 <RCCEx_PLL2_Config+0x15c>)
 800ab44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ab46:	4b24      	ldr	r3, [pc, #144]	@ (800abd8 <RCCEx_PLL2_Config+0x160>)
 800ab48:	4013      	ands	r3, r2
 800ab4a:	687a      	ldr	r2, [r7, #4]
 800ab4c:	69d2      	ldr	r2, [r2, #28]
 800ab4e:	00d2      	lsls	r2, r2, #3
 800ab50:	4920      	ldr	r1, [pc, #128]	@ (800abd4 <RCCEx_PLL2_Config+0x15c>)
 800ab52:	4313      	orrs	r3, r2
 800ab54:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ab56:	4b1f      	ldr	r3, [pc, #124]	@ (800abd4 <RCCEx_PLL2_Config+0x15c>)
 800ab58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab5a:	4a1e      	ldr	r2, [pc, #120]	@ (800abd4 <RCCEx_PLL2_Config+0x15c>)
 800ab5c:	f043 0310 	orr.w	r3, r3, #16
 800ab60:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d106      	bne.n	800ab76 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ab68:	4b1a      	ldr	r3, [pc, #104]	@ (800abd4 <RCCEx_PLL2_Config+0x15c>)
 800ab6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab6c:	4a19      	ldr	r2, [pc, #100]	@ (800abd4 <RCCEx_PLL2_Config+0x15c>)
 800ab6e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ab72:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ab74:	e00f      	b.n	800ab96 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	2b01      	cmp	r3, #1
 800ab7a:	d106      	bne.n	800ab8a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ab7c:	4b15      	ldr	r3, [pc, #84]	@ (800abd4 <RCCEx_PLL2_Config+0x15c>)
 800ab7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab80:	4a14      	ldr	r2, [pc, #80]	@ (800abd4 <RCCEx_PLL2_Config+0x15c>)
 800ab82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ab86:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ab88:	e005      	b.n	800ab96 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ab8a:	4b12      	ldr	r3, [pc, #72]	@ (800abd4 <RCCEx_PLL2_Config+0x15c>)
 800ab8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab8e:	4a11      	ldr	r2, [pc, #68]	@ (800abd4 <RCCEx_PLL2_Config+0x15c>)
 800ab90:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ab94:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ab96:	4b0f      	ldr	r3, [pc, #60]	@ (800abd4 <RCCEx_PLL2_Config+0x15c>)
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	4a0e      	ldr	r2, [pc, #56]	@ (800abd4 <RCCEx_PLL2_Config+0x15c>)
 800ab9c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800aba0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aba2:	f7f7 fc2d 	bl	8002400 <HAL_GetTick>
 800aba6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800aba8:	e008      	b.n	800abbc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800abaa:	f7f7 fc29 	bl	8002400 <HAL_GetTick>
 800abae:	4602      	mov	r2, r0
 800abb0:	68bb      	ldr	r3, [r7, #8]
 800abb2:	1ad3      	subs	r3, r2, r3
 800abb4:	2b02      	cmp	r3, #2
 800abb6:	d901      	bls.n	800abbc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800abb8:	2303      	movs	r3, #3
 800abba:	e006      	b.n	800abca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800abbc:	4b05      	ldr	r3, [pc, #20]	@ (800abd4 <RCCEx_PLL2_Config+0x15c>)
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d0f0      	beq.n	800abaa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800abc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800abca:	4618      	mov	r0, r3
 800abcc:	3710      	adds	r7, #16
 800abce:	46bd      	mov	sp, r7
 800abd0:	bd80      	pop	{r7, pc}
 800abd2:	bf00      	nop
 800abd4:	58024400 	.word	0x58024400
 800abd8:	ffff0007 	.word	0xffff0007

0800abdc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b084      	sub	sp, #16
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
 800abe4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800abe6:	2300      	movs	r3, #0
 800abe8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800abea:	4b53      	ldr	r3, [pc, #332]	@ (800ad38 <RCCEx_PLL3_Config+0x15c>)
 800abec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abee:	f003 0303 	and.w	r3, r3, #3
 800abf2:	2b03      	cmp	r3, #3
 800abf4:	d101      	bne.n	800abfa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800abf6:	2301      	movs	r3, #1
 800abf8:	e099      	b.n	800ad2e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800abfa:	4b4f      	ldr	r3, [pc, #316]	@ (800ad38 <RCCEx_PLL3_Config+0x15c>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	4a4e      	ldr	r2, [pc, #312]	@ (800ad38 <RCCEx_PLL3_Config+0x15c>)
 800ac00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ac04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ac06:	f7f7 fbfb 	bl	8002400 <HAL_GetTick>
 800ac0a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ac0c:	e008      	b.n	800ac20 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ac0e:	f7f7 fbf7 	bl	8002400 <HAL_GetTick>
 800ac12:	4602      	mov	r2, r0
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	1ad3      	subs	r3, r2, r3
 800ac18:	2b02      	cmp	r3, #2
 800ac1a:	d901      	bls.n	800ac20 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ac1c:	2303      	movs	r3, #3
 800ac1e:	e086      	b.n	800ad2e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ac20:	4b45      	ldr	r3, [pc, #276]	@ (800ad38 <RCCEx_PLL3_Config+0x15c>)
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d1f0      	bne.n	800ac0e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ac2c:	4b42      	ldr	r3, [pc, #264]	@ (800ad38 <RCCEx_PLL3_Config+0x15c>)
 800ac2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac30:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	051b      	lsls	r3, r3, #20
 800ac3a:	493f      	ldr	r1, [pc, #252]	@ (800ad38 <RCCEx_PLL3_Config+0x15c>)
 800ac3c:	4313      	orrs	r3, r2
 800ac3e:	628b      	str	r3, [r1, #40]	@ 0x28
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	685b      	ldr	r3, [r3, #4]
 800ac44:	3b01      	subs	r3, #1
 800ac46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	689b      	ldr	r3, [r3, #8]
 800ac4e:	3b01      	subs	r3, #1
 800ac50:	025b      	lsls	r3, r3, #9
 800ac52:	b29b      	uxth	r3, r3
 800ac54:	431a      	orrs	r2, r3
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	68db      	ldr	r3, [r3, #12]
 800ac5a:	3b01      	subs	r3, #1
 800ac5c:	041b      	lsls	r3, r3, #16
 800ac5e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800ac62:	431a      	orrs	r2, r3
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	691b      	ldr	r3, [r3, #16]
 800ac68:	3b01      	subs	r3, #1
 800ac6a:	061b      	lsls	r3, r3, #24
 800ac6c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ac70:	4931      	ldr	r1, [pc, #196]	@ (800ad38 <RCCEx_PLL3_Config+0x15c>)
 800ac72:	4313      	orrs	r3, r2
 800ac74:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ac76:	4b30      	ldr	r3, [pc, #192]	@ (800ad38 <RCCEx_PLL3_Config+0x15c>)
 800ac78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac7a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	695b      	ldr	r3, [r3, #20]
 800ac82:	492d      	ldr	r1, [pc, #180]	@ (800ad38 <RCCEx_PLL3_Config+0x15c>)
 800ac84:	4313      	orrs	r3, r2
 800ac86:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800ac88:	4b2b      	ldr	r3, [pc, #172]	@ (800ad38 <RCCEx_PLL3_Config+0x15c>)
 800ac8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac8c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	699b      	ldr	r3, [r3, #24]
 800ac94:	4928      	ldr	r1, [pc, #160]	@ (800ad38 <RCCEx_PLL3_Config+0x15c>)
 800ac96:	4313      	orrs	r3, r2
 800ac98:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800ac9a:	4b27      	ldr	r3, [pc, #156]	@ (800ad38 <RCCEx_PLL3_Config+0x15c>)
 800ac9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac9e:	4a26      	ldr	r2, [pc, #152]	@ (800ad38 <RCCEx_PLL3_Config+0x15c>)
 800aca0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aca4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800aca6:	4b24      	ldr	r3, [pc, #144]	@ (800ad38 <RCCEx_PLL3_Config+0x15c>)
 800aca8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800acaa:	4b24      	ldr	r3, [pc, #144]	@ (800ad3c <RCCEx_PLL3_Config+0x160>)
 800acac:	4013      	ands	r3, r2
 800acae:	687a      	ldr	r2, [r7, #4]
 800acb0:	69d2      	ldr	r2, [r2, #28]
 800acb2:	00d2      	lsls	r2, r2, #3
 800acb4:	4920      	ldr	r1, [pc, #128]	@ (800ad38 <RCCEx_PLL3_Config+0x15c>)
 800acb6:	4313      	orrs	r3, r2
 800acb8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800acba:	4b1f      	ldr	r3, [pc, #124]	@ (800ad38 <RCCEx_PLL3_Config+0x15c>)
 800acbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acbe:	4a1e      	ldr	r2, [pc, #120]	@ (800ad38 <RCCEx_PLL3_Config+0x15c>)
 800acc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800acc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d106      	bne.n	800acda <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800accc:	4b1a      	ldr	r3, [pc, #104]	@ (800ad38 <RCCEx_PLL3_Config+0x15c>)
 800acce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acd0:	4a19      	ldr	r2, [pc, #100]	@ (800ad38 <RCCEx_PLL3_Config+0x15c>)
 800acd2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800acd6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800acd8:	e00f      	b.n	800acfa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	2b01      	cmp	r3, #1
 800acde:	d106      	bne.n	800acee <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ace0:	4b15      	ldr	r3, [pc, #84]	@ (800ad38 <RCCEx_PLL3_Config+0x15c>)
 800ace2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ace4:	4a14      	ldr	r2, [pc, #80]	@ (800ad38 <RCCEx_PLL3_Config+0x15c>)
 800ace6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800acea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800acec:	e005      	b.n	800acfa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800acee:	4b12      	ldr	r3, [pc, #72]	@ (800ad38 <RCCEx_PLL3_Config+0x15c>)
 800acf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acf2:	4a11      	ldr	r2, [pc, #68]	@ (800ad38 <RCCEx_PLL3_Config+0x15c>)
 800acf4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800acf8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800acfa:	4b0f      	ldr	r3, [pc, #60]	@ (800ad38 <RCCEx_PLL3_Config+0x15c>)
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	4a0e      	ldr	r2, [pc, #56]	@ (800ad38 <RCCEx_PLL3_Config+0x15c>)
 800ad00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ad04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ad06:	f7f7 fb7b 	bl	8002400 <HAL_GetTick>
 800ad0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ad0c:	e008      	b.n	800ad20 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ad0e:	f7f7 fb77 	bl	8002400 <HAL_GetTick>
 800ad12:	4602      	mov	r2, r0
 800ad14:	68bb      	ldr	r3, [r7, #8]
 800ad16:	1ad3      	subs	r3, r2, r3
 800ad18:	2b02      	cmp	r3, #2
 800ad1a:	d901      	bls.n	800ad20 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ad1c:	2303      	movs	r3, #3
 800ad1e:	e006      	b.n	800ad2e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ad20:	4b05      	ldr	r3, [pc, #20]	@ (800ad38 <RCCEx_PLL3_Config+0x15c>)
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d0f0      	beq.n	800ad0e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800ad2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad2e:	4618      	mov	r0, r3
 800ad30:	3710      	adds	r7, #16
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bd80      	pop	{r7, pc}
 800ad36:	bf00      	nop
 800ad38:	58024400 	.word	0x58024400
 800ad3c:	ffff0007 	.word	0xffff0007

0800ad40 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b084      	sub	sp, #16
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d101      	bne.n	800ad52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ad4e:	2301      	movs	r3, #1
 800ad50:	e10f      	b.n	800af72 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	2200      	movs	r2, #0
 800ad56:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	4a87      	ldr	r2, [pc, #540]	@ (800af7c <HAL_SPI_Init+0x23c>)
 800ad5e:	4293      	cmp	r3, r2
 800ad60:	d00f      	beq.n	800ad82 <HAL_SPI_Init+0x42>
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	4a86      	ldr	r2, [pc, #536]	@ (800af80 <HAL_SPI_Init+0x240>)
 800ad68:	4293      	cmp	r3, r2
 800ad6a:	d00a      	beq.n	800ad82 <HAL_SPI_Init+0x42>
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	4a84      	ldr	r2, [pc, #528]	@ (800af84 <HAL_SPI_Init+0x244>)
 800ad72:	4293      	cmp	r3, r2
 800ad74:	d005      	beq.n	800ad82 <HAL_SPI_Init+0x42>
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	68db      	ldr	r3, [r3, #12]
 800ad7a:	2b0f      	cmp	r3, #15
 800ad7c:	d901      	bls.n	800ad82 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800ad7e:	2301      	movs	r3, #1
 800ad80:	e0f7      	b.n	800af72 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	f000 f900 	bl	800af88 <SPI_GetPacketSize>
 800ad88:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	4a7b      	ldr	r2, [pc, #492]	@ (800af7c <HAL_SPI_Init+0x23c>)
 800ad90:	4293      	cmp	r3, r2
 800ad92:	d00c      	beq.n	800adae <HAL_SPI_Init+0x6e>
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	4a79      	ldr	r2, [pc, #484]	@ (800af80 <HAL_SPI_Init+0x240>)
 800ad9a:	4293      	cmp	r3, r2
 800ad9c:	d007      	beq.n	800adae <HAL_SPI_Init+0x6e>
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	4a78      	ldr	r2, [pc, #480]	@ (800af84 <HAL_SPI_Init+0x244>)
 800ada4:	4293      	cmp	r3, r2
 800ada6:	d002      	beq.n	800adae <HAL_SPI_Init+0x6e>
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	2b08      	cmp	r3, #8
 800adac:	d811      	bhi.n	800add2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800adb2:	4a72      	ldr	r2, [pc, #456]	@ (800af7c <HAL_SPI_Init+0x23c>)
 800adb4:	4293      	cmp	r3, r2
 800adb6:	d009      	beq.n	800adcc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	4a70      	ldr	r2, [pc, #448]	@ (800af80 <HAL_SPI_Init+0x240>)
 800adbe:	4293      	cmp	r3, r2
 800adc0:	d004      	beq.n	800adcc <HAL_SPI_Init+0x8c>
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	4a6f      	ldr	r2, [pc, #444]	@ (800af84 <HAL_SPI_Init+0x244>)
 800adc8:	4293      	cmp	r3, r2
 800adca:	d104      	bne.n	800add6 <HAL_SPI_Init+0x96>
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	2b10      	cmp	r3, #16
 800add0:	d901      	bls.n	800add6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800add2:	2301      	movs	r3, #1
 800add4:	e0cd      	b.n	800af72 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800addc:	b2db      	uxtb	r3, r3
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d106      	bne.n	800adf0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2200      	movs	r2, #0
 800ade6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800adea:	6878      	ldr	r0, [r7, #4]
 800adec:	f7f6 fcd6 	bl	800179c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2202      	movs	r2, #2
 800adf4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	681a      	ldr	r2, [r3, #0]
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	f022 0201 	bic.w	r2, r2, #1
 800ae06:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	689b      	ldr	r3, [r3, #8]
 800ae0e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800ae12:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	699b      	ldr	r3, [r3, #24]
 800ae18:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ae1c:	d119      	bne.n	800ae52 <HAL_SPI_Init+0x112>
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	685b      	ldr	r3, [r3, #4]
 800ae22:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ae26:	d103      	bne.n	800ae30 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d008      	beq.n	800ae42 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d10c      	bne.n	800ae52 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ae3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ae40:	d107      	bne.n	800ae52 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	681a      	ldr	r2, [r3, #0]
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800ae50:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	685b      	ldr	r3, [r3, #4]
 800ae56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d00f      	beq.n	800ae7e <HAL_SPI_Init+0x13e>
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	68db      	ldr	r3, [r3, #12]
 800ae62:	2b06      	cmp	r3, #6
 800ae64:	d90b      	bls.n	800ae7e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	430a      	orrs	r2, r1
 800ae7a:	601a      	str	r2, [r3, #0]
 800ae7c:	e007      	b.n	800ae8e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	681a      	ldr	r2, [r3, #0]
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ae8c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	69da      	ldr	r2, [r3, #28]
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae96:	431a      	orrs	r2, r3
 800ae98:	68bb      	ldr	r3, [r7, #8]
 800ae9a:	431a      	orrs	r2, r3
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aea0:	ea42 0103 	orr.w	r1, r2, r3
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	68da      	ldr	r2, [r3, #12]
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	430a      	orrs	r2, r1
 800aeae:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aeb8:	431a      	orrs	r2, r3
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aebe:	431a      	orrs	r2, r3
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	699b      	ldr	r3, [r3, #24]
 800aec4:	431a      	orrs	r2, r3
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	691b      	ldr	r3, [r3, #16]
 800aeca:	431a      	orrs	r2, r3
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	695b      	ldr	r3, [r3, #20]
 800aed0:	431a      	orrs	r2, r3
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	6a1b      	ldr	r3, [r3, #32]
 800aed6:	431a      	orrs	r2, r3
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	685b      	ldr	r3, [r3, #4]
 800aedc:	431a      	orrs	r2, r3
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aee2:	431a      	orrs	r2, r3
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	689b      	ldr	r3, [r3, #8]
 800aee8:	431a      	orrs	r2, r3
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aeee:	ea42 0103 	orr.w	r1, r2, r3
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	430a      	orrs	r2, r1
 800aefc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	685b      	ldr	r3, [r3, #4]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d113      	bne.n	800af2e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	689b      	ldr	r3, [r3, #8]
 800af0c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800af18:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	689b      	ldr	r3, [r3, #8]
 800af20:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800af2c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	f022 0201 	bic.w	r2, r2, #1
 800af3c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	685b      	ldr	r3, [r3, #4]
 800af42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800af46:	2b00      	cmp	r3, #0
 800af48:	d00a      	beq.n	800af60 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	68db      	ldr	r3, [r3, #12]
 800af50:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	430a      	orrs	r2, r1
 800af5e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2200      	movs	r2, #0
 800af64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2201      	movs	r2, #1
 800af6c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800af70:	2300      	movs	r3, #0
}
 800af72:	4618      	mov	r0, r3
 800af74:	3710      	adds	r7, #16
 800af76:	46bd      	mov	sp, r7
 800af78:	bd80      	pop	{r7, pc}
 800af7a:	bf00      	nop
 800af7c:	40013000 	.word	0x40013000
 800af80:	40003800 	.word	0x40003800
 800af84:	40003c00 	.word	0x40003c00

0800af88 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800af88:	b480      	push	{r7}
 800af8a:	b085      	sub	sp, #20
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af94:	095b      	lsrs	r3, r3, #5
 800af96:	3301      	adds	r3, #1
 800af98:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	68db      	ldr	r3, [r3, #12]
 800af9e:	3301      	adds	r3, #1
 800afa0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800afa2:	68bb      	ldr	r3, [r7, #8]
 800afa4:	3307      	adds	r3, #7
 800afa6:	08db      	lsrs	r3, r3, #3
 800afa8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800afaa:	68bb      	ldr	r3, [r7, #8]
 800afac:	68fa      	ldr	r2, [r7, #12]
 800afae:	fb02 f303 	mul.w	r3, r2, r3
}
 800afb2:	4618      	mov	r0, r3
 800afb4:	3714      	adds	r7, #20
 800afb6:	46bd      	mov	sp, r7
 800afb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbc:	4770      	bx	lr

0800afbe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800afbe:	b580      	push	{r7, lr}
 800afc0:	b082      	sub	sp, #8
 800afc2:	af00      	add	r7, sp, #0
 800afc4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d101      	bne.n	800afd0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800afcc:	2301      	movs	r3, #1
 800afce:	e049      	b.n	800b064 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800afd6:	b2db      	uxtb	r3, r3
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d106      	bne.n	800afea <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2200      	movs	r2, #0
 800afe0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f7f6 fc67 	bl	80018b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	2202      	movs	r2, #2
 800afee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681a      	ldr	r2, [r3, #0]
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	3304      	adds	r3, #4
 800affa:	4619      	mov	r1, r3
 800affc:	4610      	mov	r0, r2
 800affe:	f000 fad5 	bl	800b5ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	2201      	movs	r2, #1
 800b006:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	2201      	movs	r2, #1
 800b00e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	2201      	movs	r2, #1
 800b016:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	2201      	movs	r2, #1
 800b01e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2201      	movs	r2, #1
 800b026:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2201      	movs	r2, #1
 800b02e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2201      	movs	r2, #1
 800b036:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2201      	movs	r2, #1
 800b03e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	2201      	movs	r2, #1
 800b046:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	2201      	movs	r2, #1
 800b04e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2201      	movs	r2, #1
 800b056:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	2201      	movs	r2, #1
 800b05e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b062:	2300      	movs	r3, #0
}
 800b064:	4618      	mov	r0, r3
 800b066:	3708      	adds	r7, #8
 800b068:	46bd      	mov	sp, r7
 800b06a:	bd80      	pop	{r7, pc}

0800b06c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b06c:	b480      	push	{r7}
 800b06e:	b085      	sub	sp, #20
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b07a:	b2db      	uxtb	r3, r3
 800b07c:	2b01      	cmp	r3, #1
 800b07e:	d001      	beq.n	800b084 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b080:	2301      	movs	r3, #1
 800b082:	e054      	b.n	800b12e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2202      	movs	r2, #2
 800b088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	68da      	ldr	r2, [r3, #12]
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	f042 0201 	orr.w	r2, r2, #1
 800b09a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	4a26      	ldr	r2, [pc, #152]	@ (800b13c <HAL_TIM_Base_Start_IT+0xd0>)
 800b0a2:	4293      	cmp	r3, r2
 800b0a4:	d022      	beq.n	800b0ec <HAL_TIM_Base_Start_IT+0x80>
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b0ae:	d01d      	beq.n	800b0ec <HAL_TIM_Base_Start_IT+0x80>
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	4a22      	ldr	r2, [pc, #136]	@ (800b140 <HAL_TIM_Base_Start_IT+0xd4>)
 800b0b6:	4293      	cmp	r3, r2
 800b0b8:	d018      	beq.n	800b0ec <HAL_TIM_Base_Start_IT+0x80>
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	4a21      	ldr	r2, [pc, #132]	@ (800b144 <HAL_TIM_Base_Start_IT+0xd8>)
 800b0c0:	4293      	cmp	r3, r2
 800b0c2:	d013      	beq.n	800b0ec <HAL_TIM_Base_Start_IT+0x80>
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	4a1f      	ldr	r2, [pc, #124]	@ (800b148 <HAL_TIM_Base_Start_IT+0xdc>)
 800b0ca:	4293      	cmp	r3, r2
 800b0cc:	d00e      	beq.n	800b0ec <HAL_TIM_Base_Start_IT+0x80>
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	4a1e      	ldr	r2, [pc, #120]	@ (800b14c <HAL_TIM_Base_Start_IT+0xe0>)
 800b0d4:	4293      	cmp	r3, r2
 800b0d6:	d009      	beq.n	800b0ec <HAL_TIM_Base_Start_IT+0x80>
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	4a1c      	ldr	r2, [pc, #112]	@ (800b150 <HAL_TIM_Base_Start_IT+0xe4>)
 800b0de:	4293      	cmp	r3, r2
 800b0e0:	d004      	beq.n	800b0ec <HAL_TIM_Base_Start_IT+0x80>
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	4a1b      	ldr	r2, [pc, #108]	@ (800b154 <HAL_TIM_Base_Start_IT+0xe8>)
 800b0e8:	4293      	cmp	r3, r2
 800b0ea:	d115      	bne.n	800b118 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	689a      	ldr	r2, [r3, #8]
 800b0f2:	4b19      	ldr	r3, [pc, #100]	@ (800b158 <HAL_TIM_Base_Start_IT+0xec>)
 800b0f4:	4013      	ands	r3, r2
 800b0f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	2b06      	cmp	r3, #6
 800b0fc:	d015      	beq.n	800b12a <HAL_TIM_Base_Start_IT+0xbe>
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b104:	d011      	beq.n	800b12a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	681a      	ldr	r2, [r3, #0]
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	f042 0201 	orr.w	r2, r2, #1
 800b114:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b116:	e008      	b.n	800b12a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	681a      	ldr	r2, [r3, #0]
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	f042 0201 	orr.w	r2, r2, #1
 800b126:	601a      	str	r2, [r3, #0]
 800b128:	e000      	b.n	800b12c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b12a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b12c:	2300      	movs	r3, #0
}
 800b12e:	4618      	mov	r0, r3
 800b130:	3714      	adds	r7, #20
 800b132:	46bd      	mov	sp, r7
 800b134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b138:	4770      	bx	lr
 800b13a:	bf00      	nop
 800b13c:	40010000 	.word	0x40010000
 800b140:	40000400 	.word	0x40000400
 800b144:	40000800 	.word	0x40000800
 800b148:	40000c00 	.word	0x40000c00
 800b14c:	40010400 	.word	0x40010400
 800b150:	40001800 	.word	0x40001800
 800b154:	40014000 	.word	0x40014000
 800b158:	00010007 	.word	0x00010007

0800b15c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b084      	sub	sp, #16
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	68db      	ldr	r3, [r3, #12]
 800b16a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	691b      	ldr	r3, [r3, #16]
 800b172:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	f003 0302 	and.w	r3, r3, #2
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d020      	beq.n	800b1c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	f003 0302 	and.w	r3, r3, #2
 800b184:	2b00      	cmp	r3, #0
 800b186:	d01b      	beq.n	800b1c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	f06f 0202 	mvn.w	r2, #2
 800b190:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	2201      	movs	r2, #1
 800b196:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	699b      	ldr	r3, [r3, #24]
 800b19e:	f003 0303 	and.w	r3, r3, #3
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d003      	beq.n	800b1ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b1a6:	6878      	ldr	r0, [r7, #4]
 800b1a8:	f000 f9e2 	bl	800b570 <HAL_TIM_IC_CaptureCallback>
 800b1ac:	e005      	b.n	800b1ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	f000 f9d4 	bl	800b55c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b1b4:	6878      	ldr	r0, [r7, #4]
 800b1b6:	f000 f9e5 	bl	800b584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	2200      	movs	r2, #0
 800b1be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b1c0:	68bb      	ldr	r3, [r7, #8]
 800b1c2:	f003 0304 	and.w	r3, r3, #4
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d020      	beq.n	800b20c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	f003 0304 	and.w	r3, r3, #4
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d01b      	beq.n	800b20c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	f06f 0204 	mvn.w	r2, #4
 800b1dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	2202      	movs	r2, #2
 800b1e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	699b      	ldr	r3, [r3, #24]
 800b1ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d003      	beq.n	800b1fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	f000 f9bc 	bl	800b570 <HAL_TIM_IC_CaptureCallback>
 800b1f8:	e005      	b.n	800b206 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b1fa:	6878      	ldr	r0, [r7, #4]
 800b1fc:	f000 f9ae 	bl	800b55c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b200:	6878      	ldr	r0, [r7, #4]
 800b202:	f000 f9bf 	bl	800b584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	2200      	movs	r2, #0
 800b20a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	f003 0308 	and.w	r3, r3, #8
 800b212:	2b00      	cmp	r3, #0
 800b214:	d020      	beq.n	800b258 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	f003 0308 	and.w	r3, r3, #8
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d01b      	beq.n	800b258 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	f06f 0208 	mvn.w	r2, #8
 800b228:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	2204      	movs	r2, #4
 800b22e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	69db      	ldr	r3, [r3, #28]
 800b236:	f003 0303 	and.w	r3, r3, #3
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d003      	beq.n	800b246 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b23e:	6878      	ldr	r0, [r7, #4]
 800b240:	f000 f996 	bl	800b570 <HAL_TIM_IC_CaptureCallback>
 800b244:	e005      	b.n	800b252 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f000 f988 	bl	800b55c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b24c:	6878      	ldr	r0, [r7, #4]
 800b24e:	f000 f999 	bl	800b584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	2200      	movs	r2, #0
 800b256:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b258:	68bb      	ldr	r3, [r7, #8]
 800b25a:	f003 0310 	and.w	r3, r3, #16
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d020      	beq.n	800b2a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	f003 0310 	and.w	r3, r3, #16
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d01b      	beq.n	800b2a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	f06f 0210 	mvn.w	r2, #16
 800b274:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	2208      	movs	r2, #8
 800b27a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	69db      	ldr	r3, [r3, #28]
 800b282:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b286:	2b00      	cmp	r3, #0
 800b288:	d003      	beq.n	800b292 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	f000 f970 	bl	800b570 <HAL_TIM_IC_CaptureCallback>
 800b290:	e005      	b.n	800b29e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b292:	6878      	ldr	r0, [r7, #4]
 800b294:	f000 f962 	bl	800b55c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	f000 f973 	bl	800b584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b2a4:	68bb      	ldr	r3, [r7, #8]
 800b2a6:	f003 0301 	and.w	r3, r3, #1
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d00c      	beq.n	800b2c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	f003 0301 	and.w	r3, r3, #1
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d007      	beq.n	800b2c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	f06f 0201 	mvn.w	r2, #1
 800b2c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b2c2:	6878      	ldr	r0, [r7, #4]
 800b2c4:	f7f5 fad0 	bl	8000868 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b2c8:	68bb      	ldr	r3, [r7, #8]
 800b2ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d104      	bne.n	800b2dc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b2d2:	68bb      	ldr	r3, [r7, #8]
 800b2d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d00c      	beq.n	800b2f6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d007      	beq.n	800b2f6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800b2ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b2f0:	6878      	ldr	r0, [r7, #4]
 800b2f2:	f000 fb31 	bl	800b958 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b2f6:	68bb      	ldr	r3, [r7, #8]
 800b2f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d00c      	beq.n	800b31a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b306:	2b00      	cmp	r3, #0
 800b308:	d007      	beq.n	800b31a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b312:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b314:	6878      	ldr	r0, [r7, #4]
 800b316:	f000 fb29 	bl	800b96c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b31a:	68bb      	ldr	r3, [r7, #8]
 800b31c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b320:	2b00      	cmp	r3, #0
 800b322:	d00c      	beq.n	800b33e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d007      	beq.n	800b33e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b336:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	f000 f92d 	bl	800b598 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b33e:	68bb      	ldr	r3, [r7, #8]
 800b340:	f003 0320 	and.w	r3, r3, #32
 800b344:	2b00      	cmp	r3, #0
 800b346:	d00c      	beq.n	800b362 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	f003 0320 	and.w	r3, r3, #32
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d007      	beq.n	800b362 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	f06f 0220 	mvn.w	r2, #32
 800b35a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	f000 faf1 	bl	800b944 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b362:	bf00      	nop
 800b364:	3710      	adds	r7, #16
 800b366:	46bd      	mov	sp, r7
 800b368:	bd80      	pop	{r7, pc}
	...

0800b36c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b084      	sub	sp, #16
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
 800b374:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b376:	2300      	movs	r3, #0
 800b378:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b380:	2b01      	cmp	r3, #1
 800b382:	d101      	bne.n	800b388 <HAL_TIM_ConfigClockSource+0x1c>
 800b384:	2302      	movs	r3, #2
 800b386:	e0dc      	b.n	800b542 <HAL_TIM_ConfigClockSource+0x1d6>
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2201      	movs	r2, #1
 800b38c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2202      	movs	r2, #2
 800b394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	689b      	ldr	r3, [r3, #8]
 800b39e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b3a0:	68ba      	ldr	r2, [r7, #8]
 800b3a2:	4b6a      	ldr	r3, [pc, #424]	@ (800b54c <HAL_TIM_ConfigClockSource+0x1e0>)
 800b3a4:	4013      	ands	r3, r2
 800b3a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b3a8:	68bb      	ldr	r3, [r7, #8]
 800b3aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b3ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	68ba      	ldr	r2, [r7, #8]
 800b3b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	4a64      	ldr	r2, [pc, #400]	@ (800b550 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b3be:	4293      	cmp	r3, r2
 800b3c0:	f000 80a9 	beq.w	800b516 <HAL_TIM_ConfigClockSource+0x1aa>
 800b3c4:	4a62      	ldr	r2, [pc, #392]	@ (800b550 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b3c6:	4293      	cmp	r3, r2
 800b3c8:	f200 80ae 	bhi.w	800b528 <HAL_TIM_ConfigClockSource+0x1bc>
 800b3cc:	4a61      	ldr	r2, [pc, #388]	@ (800b554 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b3ce:	4293      	cmp	r3, r2
 800b3d0:	f000 80a1 	beq.w	800b516 <HAL_TIM_ConfigClockSource+0x1aa>
 800b3d4:	4a5f      	ldr	r2, [pc, #380]	@ (800b554 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b3d6:	4293      	cmp	r3, r2
 800b3d8:	f200 80a6 	bhi.w	800b528 <HAL_TIM_ConfigClockSource+0x1bc>
 800b3dc:	4a5e      	ldr	r2, [pc, #376]	@ (800b558 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b3de:	4293      	cmp	r3, r2
 800b3e0:	f000 8099 	beq.w	800b516 <HAL_TIM_ConfigClockSource+0x1aa>
 800b3e4:	4a5c      	ldr	r2, [pc, #368]	@ (800b558 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b3e6:	4293      	cmp	r3, r2
 800b3e8:	f200 809e 	bhi.w	800b528 <HAL_TIM_ConfigClockSource+0x1bc>
 800b3ec:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b3f0:	f000 8091 	beq.w	800b516 <HAL_TIM_ConfigClockSource+0x1aa>
 800b3f4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b3f8:	f200 8096 	bhi.w	800b528 <HAL_TIM_ConfigClockSource+0x1bc>
 800b3fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b400:	f000 8089 	beq.w	800b516 <HAL_TIM_ConfigClockSource+0x1aa>
 800b404:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b408:	f200 808e 	bhi.w	800b528 <HAL_TIM_ConfigClockSource+0x1bc>
 800b40c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b410:	d03e      	beq.n	800b490 <HAL_TIM_ConfigClockSource+0x124>
 800b412:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b416:	f200 8087 	bhi.w	800b528 <HAL_TIM_ConfigClockSource+0x1bc>
 800b41a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b41e:	f000 8086 	beq.w	800b52e <HAL_TIM_ConfigClockSource+0x1c2>
 800b422:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b426:	d87f      	bhi.n	800b528 <HAL_TIM_ConfigClockSource+0x1bc>
 800b428:	2b70      	cmp	r3, #112	@ 0x70
 800b42a:	d01a      	beq.n	800b462 <HAL_TIM_ConfigClockSource+0xf6>
 800b42c:	2b70      	cmp	r3, #112	@ 0x70
 800b42e:	d87b      	bhi.n	800b528 <HAL_TIM_ConfigClockSource+0x1bc>
 800b430:	2b60      	cmp	r3, #96	@ 0x60
 800b432:	d050      	beq.n	800b4d6 <HAL_TIM_ConfigClockSource+0x16a>
 800b434:	2b60      	cmp	r3, #96	@ 0x60
 800b436:	d877      	bhi.n	800b528 <HAL_TIM_ConfigClockSource+0x1bc>
 800b438:	2b50      	cmp	r3, #80	@ 0x50
 800b43a:	d03c      	beq.n	800b4b6 <HAL_TIM_ConfigClockSource+0x14a>
 800b43c:	2b50      	cmp	r3, #80	@ 0x50
 800b43e:	d873      	bhi.n	800b528 <HAL_TIM_ConfigClockSource+0x1bc>
 800b440:	2b40      	cmp	r3, #64	@ 0x40
 800b442:	d058      	beq.n	800b4f6 <HAL_TIM_ConfigClockSource+0x18a>
 800b444:	2b40      	cmp	r3, #64	@ 0x40
 800b446:	d86f      	bhi.n	800b528 <HAL_TIM_ConfigClockSource+0x1bc>
 800b448:	2b30      	cmp	r3, #48	@ 0x30
 800b44a:	d064      	beq.n	800b516 <HAL_TIM_ConfigClockSource+0x1aa>
 800b44c:	2b30      	cmp	r3, #48	@ 0x30
 800b44e:	d86b      	bhi.n	800b528 <HAL_TIM_ConfigClockSource+0x1bc>
 800b450:	2b20      	cmp	r3, #32
 800b452:	d060      	beq.n	800b516 <HAL_TIM_ConfigClockSource+0x1aa>
 800b454:	2b20      	cmp	r3, #32
 800b456:	d867      	bhi.n	800b528 <HAL_TIM_ConfigClockSource+0x1bc>
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d05c      	beq.n	800b516 <HAL_TIM_ConfigClockSource+0x1aa>
 800b45c:	2b10      	cmp	r3, #16
 800b45e:	d05a      	beq.n	800b516 <HAL_TIM_ConfigClockSource+0x1aa>
 800b460:	e062      	b.n	800b528 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b472:	f000 f9b9 	bl	800b7e8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	689b      	ldr	r3, [r3, #8]
 800b47c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b47e:	68bb      	ldr	r3, [r7, #8]
 800b480:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b484:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	68ba      	ldr	r2, [r7, #8]
 800b48c:	609a      	str	r2, [r3, #8]
      break;
 800b48e:	e04f      	b.n	800b530 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b4a0:	f000 f9a2 	bl	800b7e8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	689a      	ldr	r2, [r3, #8]
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b4b2:	609a      	str	r2, [r3, #8]
      break;
 800b4b4:	e03c      	b.n	800b530 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b4ba:	683b      	ldr	r3, [r7, #0]
 800b4bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b4c2:	461a      	mov	r2, r3
 800b4c4:	f000 f912 	bl	800b6ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	2150      	movs	r1, #80	@ 0x50
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	f000 f96c 	bl	800b7ac <TIM_ITRx_SetConfig>
      break;
 800b4d4:	e02c      	b.n	800b530 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b4e2:	461a      	mov	r2, r3
 800b4e4:	f000 f931 	bl	800b74a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	2160      	movs	r1, #96	@ 0x60
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	f000 f95c 	bl	800b7ac <TIM_ITRx_SetConfig>
      break;
 800b4f4:	e01c      	b.n	800b530 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b502:	461a      	mov	r2, r3
 800b504:	f000 f8f2 	bl	800b6ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	2140      	movs	r1, #64	@ 0x40
 800b50e:	4618      	mov	r0, r3
 800b510:	f000 f94c 	bl	800b7ac <TIM_ITRx_SetConfig>
      break;
 800b514:	e00c      	b.n	800b530 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681a      	ldr	r2, [r3, #0]
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	4619      	mov	r1, r3
 800b520:	4610      	mov	r0, r2
 800b522:	f000 f943 	bl	800b7ac <TIM_ITRx_SetConfig>
      break;
 800b526:	e003      	b.n	800b530 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b528:	2301      	movs	r3, #1
 800b52a:	73fb      	strb	r3, [r7, #15]
      break;
 800b52c:	e000      	b.n	800b530 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b52e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2201      	movs	r2, #1
 800b534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2200      	movs	r2, #0
 800b53c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b540:	7bfb      	ldrb	r3, [r7, #15]
}
 800b542:	4618      	mov	r0, r3
 800b544:	3710      	adds	r7, #16
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}
 800b54a:	bf00      	nop
 800b54c:	ffceff88 	.word	0xffceff88
 800b550:	00100040 	.word	0x00100040
 800b554:	00100030 	.word	0x00100030
 800b558:	00100020 	.word	0x00100020

0800b55c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b55c:	b480      	push	{r7}
 800b55e:	b083      	sub	sp, #12
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b564:	bf00      	nop
 800b566:	370c      	adds	r7, #12
 800b568:	46bd      	mov	sp, r7
 800b56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56e:	4770      	bx	lr

0800b570 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b570:	b480      	push	{r7}
 800b572:	b083      	sub	sp, #12
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b578:	bf00      	nop
 800b57a:	370c      	adds	r7, #12
 800b57c:	46bd      	mov	sp, r7
 800b57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b582:	4770      	bx	lr

0800b584 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b584:	b480      	push	{r7}
 800b586:	b083      	sub	sp, #12
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b58c:	bf00      	nop
 800b58e:	370c      	adds	r7, #12
 800b590:	46bd      	mov	sp, r7
 800b592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b596:	4770      	bx	lr

0800b598 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b598:	b480      	push	{r7}
 800b59a:	b083      	sub	sp, #12
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b5a0:	bf00      	nop
 800b5a2:	370c      	adds	r7, #12
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5aa:	4770      	bx	lr

0800b5ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b5ac:	b480      	push	{r7}
 800b5ae:	b085      	sub	sp, #20
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
 800b5b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	4a43      	ldr	r2, [pc, #268]	@ (800b6cc <TIM_Base_SetConfig+0x120>)
 800b5c0:	4293      	cmp	r3, r2
 800b5c2:	d013      	beq.n	800b5ec <TIM_Base_SetConfig+0x40>
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b5ca:	d00f      	beq.n	800b5ec <TIM_Base_SetConfig+0x40>
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	4a40      	ldr	r2, [pc, #256]	@ (800b6d0 <TIM_Base_SetConfig+0x124>)
 800b5d0:	4293      	cmp	r3, r2
 800b5d2:	d00b      	beq.n	800b5ec <TIM_Base_SetConfig+0x40>
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	4a3f      	ldr	r2, [pc, #252]	@ (800b6d4 <TIM_Base_SetConfig+0x128>)
 800b5d8:	4293      	cmp	r3, r2
 800b5da:	d007      	beq.n	800b5ec <TIM_Base_SetConfig+0x40>
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	4a3e      	ldr	r2, [pc, #248]	@ (800b6d8 <TIM_Base_SetConfig+0x12c>)
 800b5e0:	4293      	cmp	r3, r2
 800b5e2:	d003      	beq.n	800b5ec <TIM_Base_SetConfig+0x40>
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	4a3d      	ldr	r2, [pc, #244]	@ (800b6dc <TIM_Base_SetConfig+0x130>)
 800b5e8:	4293      	cmp	r3, r2
 800b5ea:	d108      	bne.n	800b5fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b5f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	685b      	ldr	r3, [r3, #4]
 800b5f8:	68fa      	ldr	r2, [r7, #12]
 800b5fa:	4313      	orrs	r3, r2
 800b5fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	4a32      	ldr	r2, [pc, #200]	@ (800b6cc <TIM_Base_SetConfig+0x120>)
 800b602:	4293      	cmp	r3, r2
 800b604:	d01f      	beq.n	800b646 <TIM_Base_SetConfig+0x9a>
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b60c:	d01b      	beq.n	800b646 <TIM_Base_SetConfig+0x9a>
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	4a2f      	ldr	r2, [pc, #188]	@ (800b6d0 <TIM_Base_SetConfig+0x124>)
 800b612:	4293      	cmp	r3, r2
 800b614:	d017      	beq.n	800b646 <TIM_Base_SetConfig+0x9a>
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	4a2e      	ldr	r2, [pc, #184]	@ (800b6d4 <TIM_Base_SetConfig+0x128>)
 800b61a:	4293      	cmp	r3, r2
 800b61c:	d013      	beq.n	800b646 <TIM_Base_SetConfig+0x9a>
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	4a2d      	ldr	r2, [pc, #180]	@ (800b6d8 <TIM_Base_SetConfig+0x12c>)
 800b622:	4293      	cmp	r3, r2
 800b624:	d00f      	beq.n	800b646 <TIM_Base_SetConfig+0x9a>
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	4a2c      	ldr	r2, [pc, #176]	@ (800b6dc <TIM_Base_SetConfig+0x130>)
 800b62a:	4293      	cmp	r3, r2
 800b62c:	d00b      	beq.n	800b646 <TIM_Base_SetConfig+0x9a>
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	4a2b      	ldr	r2, [pc, #172]	@ (800b6e0 <TIM_Base_SetConfig+0x134>)
 800b632:	4293      	cmp	r3, r2
 800b634:	d007      	beq.n	800b646 <TIM_Base_SetConfig+0x9a>
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	4a2a      	ldr	r2, [pc, #168]	@ (800b6e4 <TIM_Base_SetConfig+0x138>)
 800b63a:	4293      	cmp	r3, r2
 800b63c:	d003      	beq.n	800b646 <TIM_Base_SetConfig+0x9a>
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	4a29      	ldr	r2, [pc, #164]	@ (800b6e8 <TIM_Base_SetConfig+0x13c>)
 800b642:	4293      	cmp	r3, r2
 800b644:	d108      	bne.n	800b658 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b64c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b64e:	683b      	ldr	r3, [r7, #0]
 800b650:	68db      	ldr	r3, [r3, #12]
 800b652:	68fa      	ldr	r2, [r7, #12]
 800b654:	4313      	orrs	r3, r2
 800b656:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	695b      	ldr	r3, [r3, #20]
 800b662:	4313      	orrs	r3, r2
 800b664:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	689a      	ldr	r2, [r3, #8]
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	681a      	ldr	r2, [r3, #0]
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	4a14      	ldr	r2, [pc, #80]	@ (800b6cc <TIM_Base_SetConfig+0x120>)
 800b67a:	4293      	cmp	r3, r2
 800b67c:	d00f      	beq.n	800b69e <TIM_Base_SetConfig+0xf2>
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	4a16      	ldr	r2, [pc, #88]	@ (800b6dc <TIM_Base_SetConfig+0x130>)
 800b682:	4293      	cmp	r3, r2
 800b684:	d00b      	beq.n	800b69e <TIM_Base_SetConfig+0xf2>
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	4a15      	ldr	r2, [pc, #84]	@ (800b6e0 <TIM_Base_SetConfig+0x134>)
 800b68a:	4293      	cmp	r3, r2
 800b68c:	d007      	beq.n	800b69e <TIM_Base_SetConfig+0xf2>
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	4a14      	ldr	r2, [pc, #80]	@ (800b6e4 <TIM_Base_SetConfig+0x138>)
 800b692:	4293      	cmp	r3, r2
 800b694:	d003      	beq.n	800b69e <TIM_Base_SetConfig+0xf2>
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	4a13      	ldr	r2, [pc, #76]	@ (800b6e8 <TIM_Base_SetConfig+0x13c>)
 800b69a:	4293      	cmp	r3, r2
 800b69c:	d103      	bne.n	800b6a6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	691a      	ldr	r2, [r3, #16]
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	f043 0204 	orr.w	r2, r3, #4
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	2201      	movs	r2, #1
 800b6b6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	68fa      	ldr	r2, [r7, #12]
 800b6bc:	601a      	str	r2, [r3, #0]
}
 800b6be:	bf00      	nop
 800b6c0:	3714      	adds	r7, #20
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c8:	4770      	bx	lr
 800b6ca:	bf00      	nop
 800b6cc:	40010000 	.word	0x40010000
 800b6d0:	40000400 	.word	0x40000400
 800b6d4:	40000800 	.word	0x40000800
 800b6d8:	40000c00 	.word	0x40000c00
 800b6dc:	40010400 	.word	0x40010400
 800b6e0:	40014000 	.word	0x40014000
 800b6e4:	40014400 	.word	0x40014400
 800b6e8:	40014800 	.word	0x40014800

0800b6ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b6ec:	b480      	push	{r7}
 800b6ee:	b087      	sub	sp, #28
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	60f8      	str	r0, [r7, #12]
 800b6f4:	60b9      	str	r1, [r7, #8]
 800b6f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	6a1b      	ldr	r3, [r3, #32]
 800b6fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	6a1b      	ldr	r3, [r3, #32]
 800b702:	f023 0201 	bic.w	r2, r3, #1
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	699b      	ldr	r3, [r3, #24]
 800b70e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b710:	693b      	ldr	r3, [r7, #16]
 800b712:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b716:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	011b      	lsls	r3, r3, #4
 800b71c:	693a      	ldr	r2, [r7, #16]
 800b71e:	4313      	orrs	r3, r2
 800b720:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b722:	697b      	ldr	r3, [r7, #20]
 800b724:	f023 030a 	bic.w	r3, r3, #10
 800b728:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b72a:	697a      	ldr	r2, [r7, #20]
 800b72c:	68bb      	ldr	r3, [r7, #8]
 800b72e:	4313      	orrs	r3, r2
 800b730:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	693a      	ldr	r2, [r7, #16]
 800b736:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	697a      	ldr	r2, [r7, #20]
 800b73c:	621a      	str	r2, [r3, #32]
}
 800b73e:	bf00      	nop
 800b740:	371c      	adds	r7, #28
 800b742:	46bd      	mov	sp, r7
 800b744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b748:	4770      	bx	lr

0800b74a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b74a:	b480      	push	{r7}
 800b74c:	b087      	sub	sp, #28
 800b74e:	af00      	add	r7, sp, #0
 800b750:	60f8      	str	r0, [r7, #12]
 800b752:	60b9      	str	r1, [r7, #8]
 800b754:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	6a1b      	ldr	r3, [r3, #32]
 800b75a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	6a1b      	ldr	r3, [r3, #32]
 800b760:	f023 0210 	bic.w	r2, r3, #16
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	699b      	ldr	r3, [r3, #24]
 800b76c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b76e:	693b      	ldr	r3, [r7, #16]
 800b770:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b774:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	031b      	lsls	r3, r3, #12
 800b77a:	693a      	ldr	r2, [r7, #16]
 800b77c:	4313      	orrs	r3, r2
 800b77e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b780:	697b      	ldr	r3, [r7, #20]
 800b782:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b786:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b788:	68bb      	ldr	r3, [r7, #8]
 800b78a:	011b      	lsls	r3, r3, #4
 800b78c:	697a      	ldr	r2, [r7, #20]
 800b78e:	4313      	orrs	r3, r2
 800b790:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	693a      	ldr	r2, [r7, #16]
 800b796:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	697a      	ldr	r2, [r7, #20]
 800b79c:	621a      	str	r2, [r3, #32]
}
 800b79e:	bf00      	nop
 800b7a0:	371c      	adds	r7, #28
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a8:	4770      	bx	lr
	...

0800b7ac <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b7ac:	b480      	push	{r7}
 800b7ae:	b085      	sub	sp, #20
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
 800b7b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	689b      	ldr	r3, [r3, #8]
 800b7ba:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b7bc:	68fa      	ldr	r2, [r7, #12]
 800b7be:	4b09      	ldr	r3, [pc, #36]	@ (800b7e4 <TIM_ITRx_SetConfig+0x38>)
 800b7c0:	4013      	ands	r3, r2
 800b7c2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b7c4:	683a      	ldr	r2, [r7, #0]
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	4313      	orrs	r3, r2
 800b7ca:	f043 0307 	orr.w	r3, r3, #7
 800b7ce:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	68fa      	ldr	r2, [r7, #12]
 800b7d4:	609a      	str	r2, [r3, #8]
}
 800b7d6:	bf00      	nop
 800b7d8:	3714      	adds	r7, #20
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e0:	4770      	bx	lr
 800b7e2:	bf00      	nop
 800b7e4:	ffcfff8f 	.word	0xffcfff8f

0800b7e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b7e8:	b480      	push	{r7}
 800b7ea:	b087      	sub	sp, #28
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	60f8      	str	r0, [r7, #12]
 800b7f0:	60b9      	str	r1, [r7, #8]
 800b7f2:	607a      	str	r2, [r7, #4]
 800b7f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	689b      	ldr	r3, [r3, #8]
 800b7fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b7fc:	697b      	ldr	r3, [r7, #20]
 800b7fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b802:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	021a      	lsls	r2, r3, #8
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	431a      	orrs	r2, r3
 800b80c:	68bb      	ldr	r3, [r7, #8]
 800b80e:	4313      	orrs	r3, r2
 800b810:	697a      	ldr	r2, [r7, #20]
 800b812:	4313      	orrs	r3, r2
 800b814:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	697a      	ldr	r2, [r7, #20]
 800b81a:	609a      	str	r2, [r3, #8]
}
 800b81c:	bf00      	nop
 800b81e:	371c      	adds	r7, #28
 800b820:	46bd      	mov	sp, r7
 800b822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b826:	4770      	bx	lr

0800b828 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b828:	b480      	push	{r7}
 800b82a:	b085      	sub	sp, #20
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
 800b830:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b838:	2b01      	cmp	r3, #1
 800b83a:	d101      	bne.n	800b840 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b83c:	2302      	movs	r3, #2
 800b83e:	e06d      	b.n	800b91c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2201      	movs	r2, #1
 800b844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2202      	movs	r2, #2
 800b84c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	685b      	ldr	r3, [r3, #4]
 800b856:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	689b      	ldr	r3, [r3, #8]
 800b85e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	4a30      	ldr	r2, [pc, #192]	@ (800b928 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b866:	4293      	cmp	r3, r2
 800b868:	d004      	beq.n	800b874 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	4a2f      	ldr	r2, [pc, #188]	@ (800b92c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b870:	4293      	cmp	r3, r2
 800b872:	d108      	bne.n	800b886 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b87a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	685b      	ldr	r3, [r3, #4]
 800b880:	68fa      	ldr	r2, [r7, #12]
 800b882:	4313      	orrs	r3, r2
 800b884:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b88c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b88e:	683b      	ldr	r3, [r7, #0]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	68fa      	ldr	r2, [r7, #12]
 800b894:	4313      	orrs	r3, r2
 800b896:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	68fa      	ldr	r2, [r7, #12]
 800b89e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	4a20      	ldr	r2, [pc, #128]	@ (800b928 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b8a6:	4293      	cmp	r3, r2
 800b8a8:	d022      	beq.n	800b8f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b8b2:	d01d      	beq.n	800b8f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	4a1d      	ldr	r2, [pc, #116]	@ (800b930 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b8ba:	4293      	cmp	r3, r2
 800b8bc:	d018      	beq.n	800b8f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	4a1c      	ldr	r2, [pc, #112]	@ (800b934 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b8c4:	4293      	cmp	r3, r2
 800b8c6:	d013      	beq.n	800b8f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	4a1a      	ldr	r2, [pc, #104]	@ (800b938 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b8ce:	4293      	cmp	r3, r2
 800b8d0:	d00e      	beq.n	800b8f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	4a15      	ldr	r2, [pc, #84]	@ (800b92c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b8d8:	4293      	cmp	r3, r2
 800b8da:	d009      	beq.n	800b8f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	4a16      	ldr	r2, [pc, #88]	@ (800b93c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b8e2:	4293      	cmp	r3, r2
 800b8e4:	d004      	beq.n	800b8f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	4a15      	ldr	r2, [pc, #84]	@ (800b940 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b8ec:	4293      	cmp	r3, r2
 800b8ee:	d10c      	bne.n	800b90a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b8f0:	68bb      	ldr	r3, [r7, #8]
 800b8f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b8f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	689b      	ldr	r3, [r3, #8]
 800b8fc:	68ba      	ldr	r2, [r7, #8]
 800b8fe:	4313      	orrs	r3, r2
 800b900:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	68ba      	ldr	r2, [r7, #8]
 800b908:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	2201      	movs	r2, #1
 800b90e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	2200      	movs	r2, #0
 800b916:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b91a:	2300      	movs	r3, #0
}
 800b91c:	4618      	mov	r0, r3
 800b91e:	3714      	adds	r7, #20
 800b920:	46bd      	mov	sp, r7
 800b922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b926:	4770      	bx	lr
 800b928:	40010000 	.word	0x40010000
 800b92c:	40010400 	.word	0x40010400
 800b930:	40000400 	.word	0x40000400
 800b934:	40000800 	.word	0x40000800
 800b938:	40000c00 	.word	0x40000c00
 800b93c:	40001800 	.word	0x40001800
 800b940:	40014000 	.word	0x40014000

0800b944 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b944:	b480      	push	{r7}
 800b946:	b083      	sub	sp, #12
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b94c:	bf00      	nop
 800b94e:	370c      	adds	r7, #12
 800b950:	46bd      	mov	sp, r7
 800b952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b956:	4770      	bx	lr

0800b958 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b958:	b480      	push	{r7}
 800b95a:	b083      	sub	sp, #12
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b960:	bf00      	nop
 800b962:	370c      	adds	r7, #12
 800b964:	46bd      	mov	sp, r7
 800b966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96a:	4770      	bx	lr

0800b96c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b96c:	b480      	push	{r7}
 800b96e:	b083      	sub	sp, #12
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b974:	bf00      	nop
 800b976:	370c      	adds	r7, #12
 800b978:	46bd      	mov	sp, r7
 800b97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97e:	4770      	bx	lr

0800b980 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b082      	sub	sp, #8
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d101      	bne.n	800b992 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b98e:	2301      	movs	r3, #1
 800b990:	e042      	b.n	800ba18 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d106      	bne.n	800b9aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2200      	movs	r2, #0
 800b9a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b9a4:	6878      	ldr	r0, [r7, #4]
 800b9a6:	f7f5 ffad 	bl	8001904 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2224      	movs	r2, #36	@ 0x24
 800b9ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	681a      	ldr	r2, [r3, #0]
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	f022 0201 	bic.w	r2, r2, #1
 800b9c0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d002      	beq.n	800b9d0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b9ca:	6878      	ldr	r0, [r7, #4]
 800b9cc:	f001 fa60 	bl	800ce90 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b9d0:	6878      	ldr	r0, [r7, #4]
 800b9d2:	f000 fcf5 	bl	800c3c0 <UART_SetConfig>
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	2b01      	cmp	r3, #1
 800b9da:	d101      	bne.n	800b9e0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b9dc:	2301      	movs	r3, #1
 800b9de:	e01b      	b.n	800ba18 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	685a      	ldr	r2, [r3, #4]
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b9ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	689a      	ldr	r2, [r3, #8]
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b9fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	681a      	ldr	r2, [r3, #0]
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	f042 0201 	orr.w	r2, r2, #1
 800ba0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ba10:	6878      	ldr	r0, [r7, #4]
 800ba12:	f001 fadf 	bl	800cfd4 <UART_CheckIdleState>
 800ba16:	4603      	mov	r3, r0
}
 800ba18:	4618      	mov	r0, r3
 800ba1a:	3708      	adds	r7, #8
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	bd80      	pop	{r7, pc}

0800ba20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b08a      	sub	sp, #40	@ 0x28
 800ba24:	af02      	add	r7, sp, #8
 800ba26:	60f8      	str	r0, [r7, #12]
 800ba28:	60b9      	str	r1, [r7, #8]
 800ba2a:	603b      	str	r3, [r7, #0]
 800ba2c:	4613      	mov	r3, r2
 800ba2e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ba36:	2b20      	cmp	r3, #32
 800ba38:	d17b      	bne.n	800bb32 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800ba3a:	68bb      	ldr	r3, [r7, #8]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d002      	beq.n	800ba46 <HAL_UART_Transmit+0x26>
 800ba40:	88fb      	ldrh	r3, [r7, #6]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d101      	bne.n	800ba4a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800ba46:	2301      	movs	r3, #1
 800ba48:	e074      	b.n	800bb34 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	2221      	movs	r2, #33	@ 0x21
 800ba56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ba5a:	f7f6 fcd1 	bl	8002400 <HAL_GetTick>
 800ba5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	88fa      	ldrh	r2, [r7, #6]
 800ba64:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	88fa      	ldrh	r2, [r7, #6]
 800ba6c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	689b      	ldr	r3, [r3, #8]
 800ba74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ba78:	d108      	bne.n	800ba8c <HAL_UART_Transmit+0x6c>
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	691b      	ldr	r3, [r3, #16]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d104      	bne.n	800ba8c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800ba82:	2300      	movs	r3, #0
 800ba84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ba86:	68bb      	ldr	r3, [r7, #8]
 800ba88:	61bb      	str	r3, [r7, #24]
 800ba8a:	e003      	b.n	800ba94 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ba8c:	68bb      	ldr	r3, [r7, #8]
 800ba8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ba90:	2300      	movs	r3, #0
 800ba92:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ba94:	e030      	b.n	800baf8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ba96:	683b      	ldr	r3, [r7, #0]
 800ba98:	9300      	str	r3, [sp, #0]
 800ba9a:	697b      	ldr	r3, [r7, #20]
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	2180      	movs	r1, #128	@ 0x80
 800baa0:	68f8      	ldr	r0, [r7, #12]
 800baa2:	f001 fb41 	bl	800d128 <UART_WaitOnFlagUntilTimeout>
 800baa6:	4603      	mov	r3, r0
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d005      	beq.n	800bab8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	2220      	movs	r2, #32
 800bab0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800bab4:	2303      	movs	r3, #3
 800bab6:	e03d      	b.n	800bb34 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800bab8:	69fb      	ldr	r3, [r7, #28]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d10b      	bne.n	800bad6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800babe:	69bb      	ldr	r3, [r7, #24]
 800bac0:	881b      	ldrh	r3, [r3, #0]
 800bac2:	461a      	mov	r2, r3
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bacc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800bace:	69bb      	ldr	r3, [r7, #24]
 800bad0:	3302      	adds	r3, #2
 800bad2:	61bb      	str	r3, [r7, #24]
 800bad4:	e007      	b.n	800bae6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800bad6:	69fb      	ldr	r3, [r7, #28]
 800bad8:	781a      	ldrb	r2, [r3, #0]
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800bae0:	69fb      	ldr	r3, [r7, #28]
 800bae2:	3301      	adds	r3, #1
 800bae4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800baec:	b29b      	uxth	r3, r3
 800baee:	3b01      	subs	r3, #1
 800baf0:	b29a      	uxth	r2, r3
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800bafe:	b29b      	uxth	r3, r3
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d1c8      	bne.n	800ba96 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bb04:	683b      	ldr	r3, [r7, #0]
 800bb06:	9300      	str	r3, [sp, #0]
 800bb08:	697b      	ldr	r3, [r7, #20]
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	2140      	movs	r1, #64	@ 0x40
 800bb0e:	68f8      	ldr	r0, [r7, #12]
 800bb10:	f001 fb0a 	bl	800d128 <UART_WaitOnFlagUntilTimeout>
 800bb14:	4603      	mov	r3, r0
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d005      	beq.n	800bb26 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	2220      	movs	r2, #32
 800bb1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800bb22:	2303      	movs	r3, #3
 800bb24:	e006      	b.n	800bb34 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	2220      	movs	r2, #32
 800bb2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800bb2e:	2300      	movs	r3, #0
 800bb30:	e000      	b.n	800bb34 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800bb32:	2302      	movs	r3, #2
  }
}
 800bb34:	4618      	mov	r0, r3
 800bb36:	3720      	adds	r7, #32
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	bd80      	pop	{r7, pc}

0800bb3c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b08a      	sub	sp, #40	@ 0x28
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	60f8      	str	r0, [r7, #12]
 800bb44:	60b9      	str	r1, [r7, #8]
 800bb46:	4613      	mov	r3, r2
 800bb48:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bb50:	2b20      	cmp	r3, #32
 800bb52:	d137      	bne.n	800bbc4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800bb54:	68bb      	ldr	r3, [r7, #8]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d002      	beq.n	800bb60 <HAL_UART_Receive_IT+0x24>
 800bb5a:	88fb      	ldrh	r3, [r7, #6]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d101      	bne.n	800bb64 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800bb60:	2301      	movs	r3, #1
 800bb62:	e030      	b.n	800bbc6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	2200      	movs	r2, #0
 800bb68:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	4a18      	ldr	r2, [pc, #96]	@ (800bbd0 <HAL_UART_Receive_IT+0x94>)
 800bb70:	4293      	cmp	r3, r2
 800bb72:	d01f      	beq.n	800bbb4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	685b      	ldr	r3, [r3, #4]
 800bb7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d018      	beq.n	800bbb4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb88:	697b      	ldr	r3, [r7, #20]
 800bb8a:	e853 3f00 	ldrex	r3, [r3]
 800bb8e:	613b      	str	r3, [r7, #16]
   return(result);
 800bb90:	693b      	ldr	r3, [r7, #16]
 800bb92:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800bb96:	627b      	str	r3, [r7, #36]	@ 0x24
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	461a      	mov	r2, r3
 800bb9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bba0:	623b      	str	r3, [r7, #32]
 800bba2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bba4:	69f9      	ldr	r1, [r7, #28]
 800bba6:	6a3a      	ldr	r2, [r7, #32]
 800bba8:	e841 2300 	strex	r3, r2, [r1]
 800bbac:	61bb      	str	r3, [r7, #24]
   return(result);
 800bbae:	69bb      	ldr	r3, [r7, #24]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d1e6      	bne.n	800bb82 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800bbb4:	88fb      	ldrh	r3, [r7, #6]
 800bbb6:	461a      	mov	r2, r3
 800bbb8:	68b9      	ldr	r1, [r7, #8]
 800bbba:	68f8      	ldr	r0, [r7, #12]
 800bbbc:	f001 fb22 	bl	800d204 <UART_Start_Receive_IT>
 800bbc0:	4603      	mov	r3, r0
 800bbc2:	e000      	b.n	800bbc6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800bbc4:	2302      	movs	r3, #2
  }
}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	3728      	adds	r7, #40	@ 0x28
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bd80      	pop	{r7, pc}
 800bbce:	bf00      	nop
 800bbd0:	58000c00 	.word	0x58000c00

0800bbd4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b0ba      	sub	sp, #232	@ 0xe8
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	69db      	ldr	r3, [r3, #28]
 800bbe2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	689b      	ldr	r3, [r3, #8]
 800bbf6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bbfa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800bbfe:	f640 030f 	movw	r3, #2063	@ 0x80f
 800bc02:	4013      	ands	r3, r2
 800bc04:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800bc08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d11b      	bne.n	800bc48 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bc10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bc14:	f003 0320 	and.w	r3, r3, #32
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d015      	beq.n	800bc48 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bc1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bc20:	f003 0320 	and.w	r3, r3, #32
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d105      	bne.n	800bc34 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bc28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bc2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d009      	beq.n	800bc48 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	f000 8393 	beq.w	800c364 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	4798      	blx	r3
      }
      return;
 800bc46:	e38d      	b.n	800c364 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800bc48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	f000 8123 	beq.w	800be98 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800bc52:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800bc56:	4b8d      	ldr	r3, [pc, #564]	@ (800be8c <HAL_UART_IRQHandler+0x2b8>)
 800bc58:	4013      	ands	r3, r2
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d106      	bne.n	800bc6c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800bc5e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800bc62:	4b8b      	ldr	r3, [pc, #556]	@ (800be90 <HAL_UART_IRQHandler+0x2bc>)
 800bc64:	4013      	ands	r3, r2
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	f000 8116 	beq.w	800be98 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bc6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bc70:	f003 0301 	and.w	r3, r3, #1
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d011      	beq.n	800bc9c <HAL_UART_IRQHandler+0xc8>
 800bc78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bc7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d00b      	beq.n	800bc9c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	2201      	movs	r2, #1
 800bc8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc92:	f043 0201 	orr.w	r2, r3, #1
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bc9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bca0:	f003 0302 	and.w	r3, r3, #2
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d011      	beq.n	800bccc <HAL_UART_IRQHandler+0xf8>
 800bca8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bcac:	f003 0301 	and.w	r3, r3, #1
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d00b      	beq.n	800bccc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	2202      	movs	r2, #2
 800bcba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bcc2:	f043 0204 	orr.w	r2, r3, #4
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bccc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bcd0:	f003 0304 	and.w	r3, r3, #4
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d011      	beq.n	800bcfc <HAL_UART_IRQHandler+0x128>
 800bcd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bcdc:	f003 0301 	and.w	r3, r3, #1
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d00b      	beq.n	800bcfc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	2204      	movs	r2, #4
 800bcea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bcf2:	f043 0202 	orr.w	r2, r3, #2
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bcfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bd00:	f003 0308 	and.w	r3, r3, #8
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d017      	beq.n	800bd38 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bd08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bd0c:	f003 0320 	and.w	r3, r3, #32
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d105      	bne.n	800bd20 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800bd14:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800bd18:	4b5c      	ldr	r3, [pc, #368]	@ (800be8c <HAL_UART_IRQHandler+0x2b8>)
 800bd1a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d00b      	beq.n	800bd38 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	2208      	movs	r2, #8
 800bd26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bd2e:	f043 0208 	orr.w	r2, r3, #8
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bd38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bd3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d012      	beq.n	800bd6a <HAL_UART_IRQHandler+0x196>
 800bd44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bd48:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d00c      	beq.n	800bd6a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bd58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bd60:	f043 0220 	orr.w	r2, r3, #32
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	f000 82f9 	beq.w	800c368 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bd76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bd7a:	f003 0320 	and.w	r3, r3, #32
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d013      	beq.n	800bdaa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bd82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bd86:	f003 0320 	and.w	r3, r3, #32
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d105      	bne.n	800bd9a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bd8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bd92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d007      	beq.n	800bdaa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d003      	beq.n	800bdaa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bda6:	6878      	ldr	r0, [r7, #4]
 800bda8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bdb0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	689b      	ldr	r3, [r3, #8]
 800bdba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bdbe:	2b40      	cmp	r3, #64	@ 0x40
 800bdc0:	d005      	beq.n	800bdce <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bdc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bdc6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d054      	beq.n	800be78 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bdce:	6878      	ldr	r0, [r7, #4]
 800bdd0:	f001 fb3a 	bl	800d448 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	689b      	ldr	r3, [r3, #8]
 800bdda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bdde:	2b40      	cmp	r3, #64	@ 0x40
 800bde0:	d146      	bne.n	800be70 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	3308      	adds	r3, #8
 800bde8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800bdf0:	e853 3f00 	ldrex	r3, [r3]
 800bdf4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800bdf8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bdfc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800be00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	3308      	adds	r3, #8
 800be0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800be0e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800be12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800be1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800be1e:	e841 2300 	strex	r3, r2, [r1]
 800be22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800be26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d1d9      	bne.n	800bde2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800be34:	2b00      	cmp	r3, #0
 800be36:	d017      	beq.n	800be68 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800be3e:	4a15      	ldr	r2, [pc, #84]	@ (800be94 <HAL_UART_IRQHandler+0x2c0>)
 800be40:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800be48:	4618      	mov	r0, r3
 800be4a:	f7f9 fa61 	bl	8005310 <HAL_DMA_Abort_IT>
 800be4e:	4603      	mov	r3, r0
 800be50:	2b00      	cmp	r3, #0
 800be52:	d019      	beq.n	800be88 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800be5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800be5c:	687a      	ldr	r2, [r7, #4]
 800be5e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800be62:	4610      	mov	r0, r2
 800be64:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be66:	e00f      	b.n	800be88 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800be68:	6878      	ldr	r0, [r7, #4]
 800be6a:	f000 fa93 	bl	800c394 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be6e:	e00b      	b.n	800be88 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800be70:	6878      	ldr	r0, [r7, #4]
 800be72:	f000 fa8f 	bl	800c394 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be76:	e007      	b.n	800be88 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800be78:	6878      	ldr	r0, [r7, #4]
 800be7a:	f000 fa8b 	bl	800c394 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	2200      	movs	r2, #0
 800be82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800be86:	e26f      	b.n	800c368 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be88:	bf00      	nop
    return;
 800be8a:	e26d      	b.n	800c368 <HAL_UART_IRQHandler+0x794>
 800be8c:	10000001 	.word	0x10000001
 800be90:	04000120 	.word	0x04000120
 800be94:	0800d515 	.word	0x0800d515

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800be9c:	2b01      	cmp	r3, #1
 800be9e:	f040 8203 	bne.w	800c2a8 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800bea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bea6:	f003 0310 	and.w	r3, r3, #16
 800beaa:	2b00      	cmp	r3, #0
 800beac:	f000 81fc 	beq.w	800c2a8 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800beb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800beb4:	f003 0310 	and.w	r3, r3, #16
 800beb8:	2b00      	cmp	r3, #0
 800beba:	f000 81f5 	beq.w	800c2a8 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	2210      	movs	r2, #16
 800bec4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	689b      	ldr	r3, [r3, #8]
 800becc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bed0:	2b40      	cmp	r3, #64	@ 0x40
 800bed2:	f040 816d 	bne.w	800c1b0 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	4aa4      	ldr	r2, [pc, #656]	@ (800c170 <HAL_UART_IRQHandler+0x59c>)
 800bee0:	4293      	cmp	r3, r2
 800bee2:	d068      	beq.n	800bfb6 <HAL_UART_IRQHandler+0x3e2>
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	4aa1      	ldr	r2, [pc, #644]	@ (800c174 <HAL_UART_IRQHandler+0x5a0>)
 800beee:	4293      	cmp	r3, r2
 800bef0:	d061      	beq.n	800bfb6 <HAL_UART_IRQHandler+0x3e2>
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	4a9f      	ldr	r2, [pc, #636]	@ (800c178 <HAL_UART_IRQHandler+0x5a4>)
 800befc:	4293      	cmp	r3, r2
 800befe:	d05a      	beq.n	800bfb6 <HAL_UART_IRQHandler+0x3e2>
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	4a9c      	ldr	r2, [pc, #624]	@ (800c17c <HAL_UART_IRQHandler+0x5a8>)
 800bf0a:	4293      	cmp	r3, r2
 800bf0c:	d053      	beq.n	800bfb6 <HAL_UART_IRQHandler+0x3e2>
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	4a9a      	ldr	r2, [pc, #616]	@ (800c180 <HAL_UART_IRQHandler+0x5ac>)
 800bf18:	4293      	cmp	r3, r2
 800bf1a:	d04c      	beq.n	800bfb6 <HAL_UART_IRQHandler+0x3e2>
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	4a97      	ldr	r2, [pc, #604]	@ (800c184 <HAL_UART_IRQHandler+0x5b0>)
 800bf26:	4293      	cmp	r3, r2
 800bf28:	d045      	beq.n	800bfb6 <HAL_UART_IRQHandler+0x3e2>
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	4a95      	ldr	r2, [pc, #596]	@ (800c188 <HAL_UART_IRQHandler+0x5b4>)
 800bf34:	4293      	cmp	r3, r2
 800bf36:	d03e      	beq.n	800bfb6 <HAL_UART_IRQHandler+0x3e2>
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	4a92      	ldr	r2, [pc, #584]	@ (800c18c <HAL_UART_IRQHandler+0x5b8>)
 800bf42:	4293      	cmp	r3, r2
 800bf44:	d037      	beq.n	800bfb6 <HAL_UART_IRQHandler+0x3e2>
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	4a90      	ldr	r2, [pc, #576]	@ (800c190 <HAL_UART_IRQHandler+0x5bc>)
 800bf50:	4293      	cmp	r3, r2
 800bf52:	d030      	beq.n	800bfb6 <HAL_UART_IRQHandler+0x3e2>
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	4a8d      	ldr	r2, [pc, #564]	@ (800c194 <HAL_UART_IRQHandler+0x5c0>)
 800bf5e:	4293      	cmp	r3, r2
 800bf60:	d029      	beq.n	800bfb6 <HAL_UART_IRQHandler+0x3e2>
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	4a8b      	ldr	r2, [pc, #556]	@ (800c198 <HAL_UART_IRQHandler+0x5c4>)
 800bf6c:	4293      	cmp	r3, r2
 800bf6e:	d022      	beq.n	800bfb6 <HAL_UART_IRQHandler+0x3e2>
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	4a88      	ldr	r2, [pc, #544]	@ (800c19c <HAL_UART_IRQHandler+0x5c8>)
 800bf7a:	4293      	cmp	r3, r2
 800bf7c:	d01b      	beq.n	800bfb6 <HAL_UART_IRQHandler+0x3e2>
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	4a86      	ldr	r2, [pc, #536]	@ (800c1a0 <HAL_UART_IRQHandler+0x5cc>)
 800bf88:	4293      	cmp	r3, r2
 800bf8a:	d014      	beq.n	800bfb6 <HAL_UART_IRQHandler+0x3e2>
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	4a83      	ldr	r2, [pc, #524]	@ (800c1a4 <HAL_UART_IRQHandler+0x5d0>)
 800bf96:	4293      	cmp	r3, r2
 800bf98:	d00d      	beq.n	800bfb6 <HAL_UART_IRQHandler+0x3e2>
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	4a81      	ldr	r2, [pc, #516]	@ (800c1a8 <HAL_UART_IRQHandler+0x5d4>)
 800bfa4:	4293      	cmp	r3, r2
 800bfa6:	d006      	beq.n	800bfb6 <HAL_UART_IRQHandler+0x3e2>
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	4a7e      	ldr	r2, [pc, #504]	@ (800c1ac <HAL_UART_IRQHandler+0x5d8>)
 800bfb2:	4293      	cmp	r3, r2
 800bfb4:	d106      	bne.n	800bfc4 <HAL_UART_IRQHandler+0x3f0>
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	685b      	ldr	r3, [r3, #4]
 800bfc0:	b29b      	uxth	r3, r3
 800bfc2:	e005      	b.n	800bfd0 <HAL_UART_IRQHandler+0x3fc>
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	685b      	ldr	r3, [r3, #4]
 800bfce:	b29b      	uxth	r3, r3
 800bfd0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bfd4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	f000 80ad 	beq.w	800c138 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bfe4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bfe8:	429a      	cmp	r2, r3
 800bfea:	f080 80a5 	bcs.w	800c138 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bff4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bffe:	69db      	ldr	r3, [r3, #28]
 800c000:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c004:	f000 8087 	beq.w	800c116 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c010:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c014:	e853 3f00 	ldrex	r3, [r3]
 800c018:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c01c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c020:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c024:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	461a      	mov	r2, r3
 800c02e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c032:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c036:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c03a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c03e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c042:	e841 2300 	strex	r3, r2, [r1]
 800c046:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c04a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d1da      	bne.n	800c008 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	3308      	adds	r3, #8
 800c058:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c05a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c05c:	e853 3f00 	ldrex	r3, [r3]
 800c060:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c062:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c064:	f023 0301 	bic.w	r3, r3, #1
 800c068:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	3308      	adds	r3, #8
 800c072:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c076:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c07a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c07c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c07e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c082:	e841 2300 	strex	r3, r2, [r1]
 800c086:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c088:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d1e1      	bne.n	800c052 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	3308      	adds	r3, #8
 800c094:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c096:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c098:	e853 3f00 	ldrex	r3, [r3]
 800c09c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c09e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c0a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c0a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	3308      	adds	r3, #8
 800c0ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c0b2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c0b4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0b6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c0b8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c0ba:	e841 2300 	strex	r3, r2, [r1]
 800c0be:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c0c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d1e3      	bne.n	800c08e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	2220      	movs	r2, #32
 800c0ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0dc:	e853 3f00 	ldrex	r3, [r3]
 800c0e0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c0e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c0e4:	f023 0310 	bic.w	r3, r3, #16
 800c0e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	461a      	mov	r2, r3
 800c0f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c0f6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c0f8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0fa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c0fc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c0fe:	e841 2300 	strex	r3, r2, [r1]
 800c102:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c104:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c106:	2b00      	cmp	r3, #0
 800c108:	d1e4      	bne.n	800c0d4 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c110:	4618      	mov	r0, r3
 800c112:	f7f8 fddf 	bl	8004cd4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	2202      	movs	r2, #2
 800c11a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c128:	b29b      	uxth	r3, r3
 800c12a:	1ad3      	subs	r3, r2, r3
 800c12c:	b29b      	uxth	r3, r3
 800c12e:	4619      	mov	r1, r3
 800c130:	6878      	ldr	r0, [r7, #4]
 800c132:	f000 f939 	bl	800c3a8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800c136:	e119      	b.n	800c36c <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c13e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c142:	429a      	cmp	r2, r3
 800c144:	f040 8112 	bne.w	800c36c <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c14e:	69db      	ldr	r3, [r3, #28]
 800c150:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c154:	f040 810a 	bne.w	800c36c <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	2202      	movs	r2, #2
 800c15c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c164:	4619      	mov	r1, r3
 800c166:	6878      	ldr	r0, [r7, #4]
 800c168:	f000 f91e 	bl	800c3a8 <HAL_UARTEx_RxEventCallback>
      return;
 800c16c:	e0fe      	b.n	800c36c <HAL_UART_IRQHandler+0x798>
 800c16e:	bf00      	nop
 800c170:	40020010 	.word	0x40020010
 800c174:	40020028 	.word	0x40020028
 800c178:	40020040 	.word	0x40020040
 800c17c:	40020058 	.word	0x40020058
 800c180:	40020070 	.word	0x40020070
 800c184:	40020088 	.word	0x40020088
 800c188:	400200a0 	.word	0x400200a0
 800c18c:	400200b8 	.word	0x400200b8
 800c190:	40020410 	.word	0x40020410
 800c194:	40020428 	.word	0x40020428
 800c198:	40020440 	.word	0x40020440
 800c19c:	40020458 	.word	0x40020458
 800c1a0:	40020470 	.word	0x40020470
 800c1a4:	40020488 	.word	0x40020488
 800c1a8:	400204a0 	.word	0x400204a0
 800c1ac:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c1bc:	b29b      	uxth	r3, r3
 800c1be:	1ad3      	subs	r3, r2, r3
 800c1c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c1ca:	b29b      	uxth	r3, r3
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	f000 80cf 	beq.w	800c370 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 800c1d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	f000 80ca 	beq.w	800c370 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1e4:	e853 3f00 	ldrex	r3, [r3]
 800c1e8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c1ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c1f0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	461a      	mov	r2, r3
 800c1fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c1fe:	647b      	str	r3, [r7, #68]	@ 0x44
 800c200:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c202:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c204:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c206:	e841 2300 	strex	r3, r2, [r1]
 800c20a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c20c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d1e4      	bne.n	800c1dc <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	3308      	adds	r3, #8
 800c218:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c21a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c21c:	e853 3f00 	ldrex	r3, [r3]
 800c220:	623b      	str	r3, [r7, #32]
   return(result);
 800c222:	6a3a      	ldr	r2, [r7, #32]
 800c224:	4b55      	ldr	r3, [pc, #340]	@ (800c37c <HAL_UART_IRQHandler+0x7a8>)
 800c226:	4013      	ands	r3, r2
 800c228:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	3308      	adds	r3, #8
 800c232:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c236:	633a      	str	r2, [r7, #48]	@ 0x30
 800c238:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c23a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c23c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c23e:	e841 2300 	strex	r3, r2, [r1]
 800c242:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c246:	2b00      	cmp	r3, #0
 800c248:	d1e3      	bne.n	800c212 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	2220      	movs	r2, #32
 800c24e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	2200      	movs	r2, #0
 800c256:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	2200      	movs	r2, #0
 800c25c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c264:	693b      	ldr	r3, [r7, #16]
 800c266:	e853 3f00 	ldrex	r3, [r3]
 800c26a:	60fb      	str	r3, [r7, #12]
   return(result);
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	f023 0310 	bic.w	r3, r3, #16
 800c272:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	461a      	mov	r2, r3
 800c27c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c280:	61fb      	str	r3, [r7, #28]
 800c282:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c284:	69b9      	ldr	r1, [r7, #24]
 800c286:	69fa      	ldr	r2, [r7, #28]
 800c288:	e841 2300 	strex	r3, r2, [r1]
 800c28c:	617b      	str	r3, [r7, #20]
   return(result);
 800c28e:	697b      	ldr	r3, [r7, #20]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d1e4      	bne.n	800c25e <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	2202      	movs	r2, #2
 800c298:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c29a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c29e:	4619      	mov	r1, r3
 800c2a0:	6878      	ldr	r0, [r7, #4]
 800c2a2:	f000 f881 	bl	800c3a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c2a6:	e063      	b.n	800c370 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c2a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c2ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d00e      	beq.n	800c2d2 <HAL_UART_IRQHandler+0x6fe>
 800c2b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c2b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d008      	beq.n	800c2d2 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800c2c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c2ca:	6878      	ldr	r0, [r7, #4]
 800c2cc:	f001 fe80 	bl	800dfd0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c2d0:	e051      	b.n	800c376 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c2d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c2d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d014      	beq.n	800c308 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c2de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c2e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d105      	bne.n	800c2f6 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c2ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c2ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d008      	beq.n	800c308 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d03a      	beq.n	800c374 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c302:	6878      	ldr	r0, [r7, #4]
 800c304:	4798      	blx	r3
    }
    return;
 800c306:	e035      	b.n	800c374 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c308:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c30c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c310:	2b00      	cmp	r3, #0
 800c312:	d009      	beq.n	800c328 <HAL_UART_IRQHandler+0x754>
 800c314:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c318:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d003      	beq.n	800c328 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 800c320:	6878      	ldr	r0, [r7, #4]
 800c322:	f001 f909 	bl	800d538 <UART_EndTransmit_IT>
    return;
 800c326:	e026      	b.n	800c376 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c328:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c32c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c330:	2b00      	cmp	r3, #0
 800c332:	d009      	beq.n	800c348 <HAL_UART_IRQHandler+0x774>
 800c334:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c338:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d003      	beq.n	800c348 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c340:	6878      	ldr	r0, [r7, #4]
 800c342:	f001 fe59 	bl	800dff8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c346:	e016      	b.n	800c376 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c34c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c350:	2b00      	cmp	r3, #0
 800c352:	d010      	beq.n	800c376 <HAL_UART_IRQHandler+0x7a2>
 800c354:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c358:	2b00      	cmp	r3, #0
 800c35a:	da0c      	bge.n	800c376 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c35c:	6878      	ldr	r0, [r7, #4]
 800c35e:	f001 fe41 	bl	800dfe4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c362:	e008      	b.n	800c376 <HAL_UART_IRQHandler+0x7a2>
      return;
 800c364:	bf00      	nop
 800c366:	e006      	b.n	800c376 <HAL_UART_IRQHandler+0x7a2>
    return;
 800c368:	bf00      	nop
 800c36a:	e004      	b.n	800c376 <HAL_UART_IRQHandler+0x7a2>
      return;
 800c36c:	bf00      	nop
 800c36e:	e002      	b.n	800c376 <HAL_UART_IRQHandler+0x7a2>
      return;
 800c370:	bf00      	nop
 800c372:	e000      	b.n	800c376 <HAL_UART_IRQHandler+0x7a2>
    return;
 800c374:	bf00      	nop
  }
}
 800c376:	37e8      	adds	r7, #232	@ 0xe8
 800c378:	46bd      	mov	sp, r7
 800c37a:	bd80      	pop	{r7, pc}
 800c37c:	effffffe 	.word	0xeffffffe

0800c380 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c380:	b480      	push	{r7}
 800c382:	b083      	sub	sp, #12
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c388:	bf00      	nop
 800c38a:	370c      	adds	r7, #12
 800c38c:	46bd      	mov	sp, r7
 800c38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c392:	4770      	bx	lr

0800c394 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c394:	b480      	push	{r7}
 800c396:	b083      	sub	sp, #12
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c39c:	bf00      	nop
 800c39e:	370c      	adds	r7, #12
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a6:	4770      	bx	lr

0800c3a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c3a8:	b480      	push	{r7}
 800c3aa:	b083      	sub	sp, #12
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
 800c3b0:	460b      	mov	r3, r1
 800c3b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c3b4:	bf00      	nop
 800c3b6:	370c      	adds	r7, #12
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3be:	4770      	bx	lr

0800c3c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c3c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c3c4:	b092      	sub	sp, #72	@ 0x48
 800c3c6:	af00      	add	r7, sp, #0
 800c3c8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c3d0:	697b      	ldr	r3, [r7, #20]
 800c3d2:	689a      	ldr	r2, [r3, #8]
 800c3d4:	697b      	ldr	r3, [r7, #20]
 800c3d6:	691b      	ldr	r3, [r3, #16]
 800c3d8:	431a      	orrs	r2, r3
 800c3da:	697b      	ldr	r3, [r7, #20]
 800c3dc:	695b      	ldr	r3, [r3, #20]
 800c3de:	431a      	orrs	r2, r3
 800c3e0:	697b      	ldr	r3, [r7, #20]
 800c3e2:	69db      	ldr	r3, [r3, #28]
 800c3e4:	4313      	orrs	r3, r2
 800c3e6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c3e8:	697b      	ldr	r3, [r7, #20]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	681a      	ldr	r2, [r3, #0]
 800c3ee:	4bbe      	ldr	r3, [pc, #760]	@ (800c6e8 <UART_SetConfig+0x328>)
 800c3f0:	4013      	ands	r3, r2
 800c3f2:	697a      	ldr	r2, [r7, #20]
 800c3f4:	6812      	ldr	r2, [r2, #0]
 800c3f6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c3f8:	430b      	orrs	r3, r1
 800c3fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c3fc:	697b      	ldr	r3, [r7, #20]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	685b      	ldr	r3, [r3, #4]
 800c402:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c406:	697b      	ldr	r3, [r7, #20]
 800c408:	68da      	ldr	r2, [r3, #12]
 800c40a:	697b      	ldr	r3, [r7, #20]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	430a      	orrs	r2, r1
 800c410:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c412:	697b      	ldr	r3, [r7, #20]
 800c414:	699b      	ldr	r3, [r3, #24]
 800c416:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c418:	697b      	ldr	r3, [r7, #20]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	4ab3      	ldr	r2, [pc, #716]	@ (800c6ec <UART_SetConfig+0x32c>)
 800c41e:	4293      	cmp	r3, r2
 800c420:	d004      	beq.n	800c42c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c422:	697b      	ldr	r3, [r7, #20]
 800c424:	6a1b      	ldr	r3, [r3, #32]
 800c426:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c428:	4313      	orrs	r3, r2
 800c42a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c42c:	697b      	ldr	r3, [r7, #20]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	689a      	ldr	r2, [r3, #8]
 800c432:	4baf      	ldr	r3, [pc, #700]	@ (800c6f0 <UART_SetConfig+0x330>)
 800c434:	4013      	ands	r3, r2
 800c436:	697a      	ldr	r2, [r7, #20]
 800c438:	6812      	ldr	r2, [r2, #0]
 800c43a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c43c:	430b      	orrs	r3, r1
 800c43e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c440:	697b      	ldr	r3, [r7, #20]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c446:	f023 010f 	bic.w	r1, r3, #15
 800c44a:	697b      	ldr	r3, [r7, #20]
 800c44c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c44e:	697b      	ldr	r3, [r7, #20]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	430a      	orrs	r2, r1
 800c454:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c456:	697b      	ldr	r3, [r7, #20]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	4aa6      	ldr	r2, [pc, #664]	@ (800c6f4 <UART_SetConfig+0x334>)
 800c45c:	4293      	cmp	r3, r2
 800c45e:	d177      	bne.n	800c550 <UART_SetConfig+0x190>
 800c460:	4ba5      	ldr	r3, [pc, #660]	@ (800c6f8 <UART_SetConfig+0x338>)
 800c462:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c464:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c468:	2b28      	cmp	r3, #40	@ 0x28
 800c46a:	d86d      	bhi.n	800c548 <UART_SetConfig+0x188>
 800c46c:	a201      	add	r2, pc, #4	@ (adr r2, 800c474 <UART_SetConfig+0xb4>)
 800c46e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c472:	bf00      	nop
 800c474:	0800c519 	.word	0x0800c519
 800c478:	0800c549 	.word	0x0800c549
 800c47c:	0800c549 	.word	0x0800c549
 800c480:	0800c549 	.word	0x0800c549
 800c484:	0800c549 	.word	0x0800c549
 800c488:	0800c549 	.word	0x0800c549
 800c48c:	0800c549 	.word	0x0800c549
 800c490:	0800c549 	.word	0x0800c549
 800c494:	0800c521 	.word	0x0800c521
 800c498:	0800c549 	.word	0x0800c549
 800c49c:	0800c549 	.word	0x0800c549
 800c4a0:	0800c549 	.word	0x0800c549
 800c4a4:	0800c549 	.word	0x0800c549
 800c4a8:	0800c549 	.word	0x0800c549
 800c4ac:	0800c549 	.word	0x0800c549
 800c4b0:	0800c549 	.word	0x0800c549
 800c4b4:	0800c529 	.word	0x0800c529
 800c4b8:	0800c549 	.word	0x0800c549
 800c4bc:	0800c549 	.word	0x0800c549
 800c4c0:	0800c549 	.word	0x0800c549
 800c4c4:	0800c549 	.word	0x0800c549
 800c4c8:	0800c549 	.word	0x0800c549
 800c4cc:	0800c549 	.word	0x0800c549
 800c4d0:	0800c549 	.word	0x0800c549
 800c4d4:	0800c531 	.word	0x0800c531
 800c4d8:	0800c549 	.word	0x0800c549
 800c4dc:	0800c549 	.word	0x0800c549
 800c4e0:	0800c549 	.word	0x0800c549
 800c4e4:	0800c549 	.word	0x0800c549
 800c4e8:	0800c549 	.word	0x0800c549
 800c4ec:	0800c549 	.word	0x0800c549
 800c4f0:	0800c549 	.word	0x0800c549
 800c4f4:	0800c539 	.word	0x0800c539
 800c4f8:	0800c549 	.word	0x0800c549
 800c4fc:	0800c549 	.word	0x0800c549
 800c500:	0800c549 	.word	0x0800c549
 800c504:	0800c549 	.word	0x0800c549
 800c508:	0800c549 	.word	0x0800c549
 800c50c:	0800c549 	.word	0x0800c549
 800c510:	0800c549 	.word	0x0800c549
 800c514:	0800c541 	.word	0x0800c541
 800c518:	2301      	movs	r3, #1
 800c51a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c51e:	e222      	b.n	800c966 <UART_SetConfig+0x5a6>
 800c520:	2304      	movs	r3, #4
 800c522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c526:	e21e      	b.n	800c966 <UART_SetConfig+0x5a6>
 800c528:	2308      	movs	r3, #8
 800c52a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c52e:	e21a      	b.n	800c966 <UART_SetConfig+0x5a6>
 800c530:	2310      	movs	r3, #16
 800c532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c536:	e216      	b.n	800c966 <UART_SetConfig+0x5a6>
 800c538:	2320      	movs	r3, #32
 800c53a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c53e:	e212      	b.n	800c966 <UART_SetConfig+0x5a6>
 800c540:	2340      	movs	r3, #64	@ 0x40
 800c542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c546:	e20e      	b.n	800c966 <UART_SetConfig+0x5a6>
 800c548:	2380      	movs	r3, #128	@ 0x80
 800c54a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c54e:	e20a      	b.n	800c966 <UART_SetConfig+0x5a6>
 800c550:	697b      	ldr	r3, [r7, #20]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	4a69      	ldr	r2, [pc, #420]	@ (800c6fc <UART_SetConfig+0x33c>)
 800c556:	4293      	cmp	r3, r2
 800c558:	d130      	bne.n	800c5bc <UART_SetConfig+0x1fc>
 800c55a:	4b67      	ldr	r3, [pc, #412]	@ (800c6f8 <UART_SetConfig+0x338>)
 800c55c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c55e:	f003 0307 	and.w	r3, r3, #7
 800c562:	2b05      	cmp	r3, #5
 800c564:	d826      	bhi.n	800c5b4 <UART_SetConfig+0x1f4>
 800c566:	a201      	add	r2, pc, #4	@ (adr r2, 800c56c <UART_SetConfig+0x1ac>)
 800c568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c56c:	0800c585 	.word	0x0800c585
 800c570:	0800c58d 	.word	0x0800c58d
 800c574:	0800c595 	.word	0x0800c595
 800c578:	0800c59d 	.word	0x0800c59d
 800c57c:	0800c5a5 	.word	0x0800c5a5
 800c580:	0800c5ad 	.word	0x0800c5ad
 800c584:	2300      	movs	r3, #0
 800c586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c58a:	e1ec      	b.n	800c966 <UART_SetConfig+0x5a6>
 800c58c:	2304      	movs	r3, #4
 800c58e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c592:	e1e8      	b.n	800c966 <UART_SetConfig+0x5a6>
 800c594:	2308      	movs	r3, #8
 800c596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c59a:	e1e4      	b.n	800c966 <UART_SetConfig+0x5a6>
 800c59c:	2310      	movs	r3, #16
 800c59e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5a2:	e1e0      	b.n	800c966 <UART_SetConfig+0x5a6>
 800c5a4:	2320      	movs	r3, #32
 800c5a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5aa:	e1dc      	b.n	800c966 <UART_SetConfig+0x5a6>
 800c5ac:	2340      	movs	r3, #64	@ 0x40
 800c5ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5b2:	e1d8      	b.n	800c966 <UART_SetConfig+0x5a6>
 800c5b4:	2380      	movs	r3, #128	@ 0x80
 800c5b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5ba:	e1d4      	b.n	800c966 <UART_SetConfig+0x5a6>
 800c5bc:	697b      	ldr	r3, [r7, #20]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	4a4f      	ldr	r2, [pc, #316]	@ (800c700 <UART_SetConfig+0x340>)
 800c5c2:	4293      	cmp	r3, r2
 800c5c4:	d130      	bne.n	800c628 <UART_SetConfig+0x268>
 800c5c6:	4b4c      	ldr	r3, [pc, #304]	@ (800c6f8 <UART_SetConfig+0x338>)
 800c5c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c5ca:	f003 0307 	and.w	r3, r3, #7
 800c5ce:	2b05      	cmp	r3, #5
 800c5d0:	d826      	bhi.n	800c620 <UART_SetConfig+0x260>
 800c5d2:	a201      	add	r2, pc, #4	@ (adr r2, 800c5d8 <UART_SetConfig+0x218>)
 800c5d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5d8:	0800c5f1 	.word	0x0800c5f1
 800c5dc:	0800c5f9 	.word	0x0800c5f9
 800c5e0:	0800c601 	.word	0x0800c601
 800c5e4:	0800c609 	.word	0x0800c609
 800c5e8:	0800c611 	.word	0x0800c611
 800c5ec:	0800c619 	.word	0x0800c619
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5f6:	e1b6      	b.n	800c966 <UART_SetConfig+0x5a6>
 800c5f8:	2304      	movs	r3, #4
 800c5fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5fe:	e1b2      	b.n	800c966 <UART_SetConfig+0x5a6>
 800c600:	2308      	movs	r3, #8
 800c602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c606:	e1ae      	b.n	800c966 <UART_SetConfig+0x5a6>
 800c608:	2310      	movs	r3, #16
 800c60a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c60e:	e1aa      	b.n	800c966 <UART_SetConfig+0x5a6>
 800c610:	2320      	movs	r3, #32
 800c612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c616:	e1a6      	b.n	800c966 <UART_SetConfig+0x5a6>
 800c618:	2340      	movs	r3, #64	@ 0x40
 800c61a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c61e:	e1a2      	b.n	800c966 <UART_SetConfig+0x5a6>
 800c620:	2380      	movs	r3, #128	@ 0x80
 800c622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c626:	e19e      	b.n	800c966 <UART_SetConfig+0x5a6>
 800c628:	697b      	ldr	r3, [r7, #20]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	4a35      	ldr	r2, [pc, #212]	@ (800c704 <UART_SetConfig+0x344>)
 800c62e:	4293      	cmp	r3, r2
 800c630:	d130      	bne.n	800c694 <UART_SetConfig+0x2d4>
 800c632:	4b31      	ldr	r3, [pc, #196]	@ (800c6f8 <UART_SetConfig+0x338>)
 800c634:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c636:	f003 0307 	and.w	r3, r3, #7
 800c63a:	2b05      	cmp	r3, #5
 800c63c:	d826      	bhi.n	800c68c <UART_SetConfig+0x2cc>
 800c63e:	a201      	add	r2, pc, #4	@ (adr r2, 800c644 <UART_SetConfig+0x284>)
 800c640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c644:	0800c65d 	.word	0x0800c65d
 800c648:	0800c665 	.word	0x0800c665
 800c64c:	0800c66d 	.word	0x0800c66d
 800c650:	0800c675 	.word	0x0800c675
 800c654:	0800c67d 	.word	0x0800c67d
 800c658:	0800c685 	.word	0x0800c685
 800c65c:	2300      	movs	r3, #0
 800c65e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c662:	e180      	b.n	800c966 <UART_SetConfig+0x5a6>
 800c664:	2304      	movs	r3, #4
 800c666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c66a:	e17c      	b.n	800c966 <UART_SetConfig+0x5a6>
 800c66c:	2308      	movs	r3, #8
 800c66e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c672:	e178      	b.n	800c966 <UART_SetConfig+0x5a6>
 800c674:	2310      	movs	r3, #16
 800c676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c67a:	e174      	b.n	800c966 <UART_SetConfig+0x5a6>
 800c67c:	2320      	movs	r3, #32
 800c67e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c682:	e170      	b.n	800c966 <UART_SetConfig+0x5a6>
 800c684:	2340      	movs	r3, #64	@ 0x40
 800c686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c68a:	e16c      	b.n	800c966 <UART_SetConfig+0x5a6>
 800c68c:	2380      	movs	r3, #128	@ 0x80
 800c68e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c692:	e168      	b.n	800c966 <UART_SetConfig+0x5a6>
 800c694:	697b      	ldr	r3, [r7, #20]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	4a1b      	ldr	r2, [pc, #108]	@ (800c708 <UART_SetConfig+0x348>)
 800c69a:	4293      	cmp	r3, r2
 800c69c:	d142      	bne.n	800c724 <UART_SetConfig+0x364>
 800c69e:	4b16      	ldr	r3, [pc, #88]	@ (800c6f8 <UART_SetConfig+0x338>)
 800c6a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c6a2:	f003 0307 	and.w	r3, r3, #7
 800c6a6:	2b05      	cmp	r3, #5
 800c6a8:	d838      	bhi.n	800c71c <UART_SetConfig+0x35c>
 800c6aa:	a201      	add	r2, pc, #4	@ (adr r2, 800c6b0 <UART_SetConfig+0x2f0>)
 800c6ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6b0:	0800c6c9 	.word	0x0800c6c9
 800c6b4:	0800c6d1 	.word	0x0800c6d1
 800c6b8:	0800c6d9 	.word	0x0800c6d9
 800c6bc:	0800c6e1 	.word	0x0800c6e1
 800c6c0:	0800c70d 	.word	0x0800c70d
 800c6c4:	0800c715 	.word	0x0800c715
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6ce:	e14a      	b.n	800c966 <UART_SetConfig+0x5a6>
 800c6d0:	2304      	movs	r3, #4
 800c6d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6d6:	e146      	b.n	800c966 <UART_SetConfig+0x5a6>
 800c6d8:	2308      	movs	r3, #8
 800c6da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6de:	e142      	b.n	800c966 <UART_SetConfig+0x5a6>
 800c6e0:	2310      	movs	r3, #16
 800c6e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c6e6:	e13e      	b.n	800c966 <UART_SetConfig+0x5a6>
 800c6e8:	cfff69f3 	.word	0xcfff69f3
 800c6ec:	58000c00 	.word	0x58000c00
 800c6f0:	11fff4ff 	.word	0x11fff4ff
 800c6f4:	40011000 	.word	0x40011000
 800c6f8:	58024400 	.word	0x58024400
 800c6fc:	40004400 	.word	0x40004400
 800c700:	40004800 	.word	0x40004800
 800c704:	40004c00 	.word	0x40004c00
 800c708:	40005000 	.word	0x40005000
 800c70c:	2320      	movs	r3, #32
 800c70e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c712:	e128      	b.n	800c966 <UART_SetConfig+0x5a6>
 800c714:	2340      	movs	r3, #64	@ 0x40
 800c716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c71a:	e124      	b.n	800c966 <UART_SetConfig+0x5a6>
 800c71c:	2380      	movs	r3, #128	@ 0x80
 800c71e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c722:	e120      	b.n	800c966 <UART_SetConfig+0x5a6>
 800c724:	697b      	ldr	r3, [r7, #20]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	4acb      	ldr	r2, [pc, #812]	@ (800ca58 <UART_SetConfig+0x698>)
 800c72a:	4293      	cmp	r3, r2
 800c72c:	d176      	bne.n	800c81c <UART_SetConfig+0x45c>
 800c72e:	4bcb      	ldr	r3, [pc, #812]	@ (800ca5c <UART_SetConfig+0x69c>)
 800c730:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c732:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c736:	2b28      	cmp	r3, #40	@ 0x28
 800c738:	d86c      	bhi.n	800c814 <UART_SetConfig+0x454>
 800c73a:	a201      	add	r2, pc, #4	@ (adr r2, 800c740 <UART_SetConfig+0x380>)
 800c73c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c740:	0800c7e5 	.word	0x0800c7e5
 800c744:	0800c815 	.word	0x0800c815
 800c748:	0800c815 	.word	0x0800c815
 800c74c:	0800c815 	.word	0x0800c815
 800c750:	0800c815 	.word	0x0800c815
 800c754:	0800c815 	.word	0x0800c815
 800c758:	0800c815 	.word	0x0800c815
 800c75c:	0800c815 	.word	0x0800c815
 800c760:	0800c7ed 	.word	0x0800c7ed
 800c764:	0800c815 	.word	0x0800c815
 800c768:	0800c815 	.word	0x0800c815
 800c76c:	0800c815 	.word	0x0800c815
 800c770:	0800c815 	.word	0x0800c815
 800c774:	0800c815 	.word	0x0800c815
 800c778:	0800c815 	.word	0x0800c815
 800c77c:	0800c815 	.word	0x0800c815
 800c780:	0800c7f5 	.word	0x0800c7f5
 800c784:	0800c815 	.word	0x0800c815
 800c788:	0800c815 	.word	0x0800c815
 800c78c:	0800c815 	.word	0x0800c815
 800c790:	0800c815 	.word	0x0800c815
 800c794:	0800c815 	.word	0x0800c815
 800c798:	0800c815 	.word	0x0800c815
 800c79c:	0800c815 	.word	0x0800c815
 800c7a0:	0800c7fd 	.word	0x0800c7fd
 800c7a4:	0800c815 	.word	0x0800c815
 800c7a8:	0800c815 	.word	0x0800c815
 800c7ac:	0800c815 	.word	0x0800c815
 800c7b0:	0800c815 	.word	0x0800c815
 800c7b4:	0800c815 	.word	0x0800c815
 800c7b8:	0800c815 	.word	0x0800c815
 800c7bc:	0800c815 	.word	0x0800c815
 800c7c0:	0800c805 	.word	0x0800c805
 800c7c4:	0800c815 	.word	0x0800c815
 800c7c8:	0800c815 	.word	0x0800c815
 800c7cc:	0800c815 	.word	0x0800c815
 800c7d0:	0800c815 	.word	0x0800c815
 800c7d4:	0800c815 	.word	0x0800c815
 800c7d8:	0800c815 	.word	0x0800c815
 800c7dc:	0800c815 	.word	0x0800c815
 800c7e0:	0800c80d 	.word	0x0800c80d
 800c7e4:	2301      	movs	r3, #1
 800c7e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c7ea:	e0bc      	b.n	800c966 <UART_SetConfig+0x5a6>
 800c7ec:	2304      	movs	r3, #4
 800c7ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c7f2:	e0b8      	b.n	800c966 <UART_SetConfig+0x5a6>
 800c7f4:	2308      	movs	r3, #8
 800c7f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c7fa:	e0b4      	b.n	800c966 <UART_SetConfig+0x5a6>
 800c7fc:	2310      	movs	r3, #16
 800c7fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c802:	e0b0      	b.n	800c966 <UART_SetConfig+0x5a6>
 800c804:	2320      	movs	r3, #32
 800c806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c80a:	e0ac      	b.n	800c966 <UART_SetConfig+0x5a6>
 800c80c:	2340      	movs	r3, #64	@ 0x40
 800c80e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c812:	e0a8      	b.n	800c966 <UART_SetConfig+0x5a6>
 800c814:	2380      	movs	r3, #128	@ 0x80
 800c816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c81a:	e0a4      	b.n	800c966 <UART_SetConfig+0x5a6>
 800c81c:	697b      	ldr	r3, [r7, #20]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	4a8f      	ldr	r2, [pc, #572]	@ (800ca60 <UART_SetConfig+0x6a0>)
 800c822:	4293      	cmp	r3, r2
 800c824:	d130      	bne.n	800c888 <UART_SetConfig+0x4c8>
 800c826:	4b8d      	ldr	r3, [pc, #564]	@ (800ca5c <UART_SetConfig+0x69c>)
 800c828:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c82a:	f003 0307 	and.w	r3, r3, #7
 800c82e:	2b05      	cmp	r3, #5
 800c830:	d826      	bhi.n	800c880 <UART_SetConfig+0x4c0>
 800c832:	a201      	add	r2, pc, #4	@ (adr r2, 800c838 <UART_SetConfig+0x478>)
 800c834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c838:	0800c851 	.word	0x0800c851
 800c83c:	0800c859 	.word	0x0800c859
 800c840:	0800c861 	.word	0x0800c861
 800c844:	0800c869 	.word	0x0800c869
 800c848:	0800c871 	.word	0x0800c871
 800c84c:	0800c879 	.word	0x0800c879
 800c850:	2300      	movs	r3, #0
 800c852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c856:	e086      	b.n	800c966 <UART_SetConfig+0x5a6>
 800c858:	2304      	movs	r3, #4
 800c85a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c85e:	e082      	b.n	800c966 <UART_SetConfig+0x5a6>
 800c860:	2308      	movs	r3, #8
 800c862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c866:	e07e      	b.n	800c966 <UART_SetConfig+0x5a6>
 800c868:	2310      	movs	r3, #16
 800c86a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c86e:	e07a      	b.n	800c966 <UART_SetConfig+0x5a6>
 800c870:	2320      	movs	r3, #32
 800c872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c876:	e076      	b.n	800c966 <UART_SetConfig+0x5a6>
 800c878:	2340      	movs	r3, #64	@ 0x40
 800c87a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c87e:	e072      	b.n	800c966 <UART_SetConfig+0x5a6>
 800c880:	2380      	movs	r3, #128	@ 0x80
 800c882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c886:	e06e      	b.n	800c966 <UART_SetConfig+0x5a6>
 800c888:	697b      	ldr	r3, [r7, #20]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	4a75      	ldr	r2, [pc, #468]	@ (800ca64 <UART_SetConfig+0x6a4>)
 800c88e:	4293      	cmp	r3, r2
 800c890:	d130      	bne.n	800c8f4 <UART_SetConfig+0x534>
 800c892:	4b72      	ldr	r3, [pc, #456]	@ (800ca5c <UART_SetConfig+0x69c>)
 800c894:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c896:	f003 0307 	and.w	r3, r3, #7
 800c89a:	2b05      	cmp	r3, #5
 800c89c:	d826      	bhi.n	800c8ec <UART_SetConfig+0x52c>
 800c89e:	a201      	add	r2, pc, #4	@ (adr r2, 800c8a4 <UART_SetConfig+0x4e4>)
 800c8a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8a4:	0800c8bd 	.word	0x0800c8bd
 800c8a8:	0800c8c5 	.word	0x0800c8c5
 800c8ac:	0800c8cd 	.word	0x0800c8cd
 800c8b0:	0800c8d5 	.word	0x0800c8d5
 800c8b4:	0800c8dd 	.word	0x0800c8dd
 800c8b8:	0800c8e5 	.word	0x0800c8e5
 800c8bc:	2300      	movs	r3, #0
 800c8be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8c2:	e050      	b.n	800c966 <UART_SetConfig+0x5a6>
 800c8c4:	2304      	movs	r3, #4
 800c8c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8ca:	e04c      	b.n	800c966 <UART_SetConfig+0x5a6>
 800c8cc:	2308      	movs	r3, #8
 800c8ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8d2:	e048      	b.n	800c966 <UART_SetConfig+0x5a6>
 800c8d4:	2310      	movs	r3, #16
 800c8d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8da:	e044      	b.n	800c966 <UART_SetConfig+0x5a6>
 800c8dc:	2320      	movs	r3, #32
 800c8de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8e2:	e040      	b.n	800c966 <UART_SetConfig+0x5a6>
 800c8e4:	2340      	movs	r3, #64	@ 0x40
 800c8e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8ea:	e03c      	b.n	800c966 <UART_SetConfig+0x5a6>
 800c8ec:	2380      	movs	r3, #128	@ 0x80
 800c8ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8f2:	e038      	b.n	800c966 <UART_SetConfig+0x5a6>
 800c8f4:	697b      	ldr	r3, [r7, #20]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	4a5b      	ldr	r2, [pc, #364]	@ (800ca68 <UART_SetConfig+0x6a8>)
 800c8fa:	4293      	cmp	r3, r2
 800c8fc:	d130      	bne.n	800c960 <UART_SetConfig+0x5a0>
 800c8fe:	4b57      	ldr	r3, [pc, #348]	@ (800ca5c <UART_SetConfig+0x69c>)
 800c900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c902:	f003 0307 	and.w	r3, r3, #7
 800c906:	2b05      	cmp	r3, #5
 800c908:	d826      	bhi.n	800c958 <UART_SetConfig+0x598>
 800c90a:	a201      	add	r2, pc, #4	@ (adr r2, 800c910 <UART_SetConfig+0x550>)
 800c90c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c910:	0800c929 	.word	0x0800c929
 800c914:	0800c931 	.word	0x0800c931
 800c918:	0800c939 	.word	0x0800c939
 800c91c:	0800c941 	.word	0x0800c941
 800c920:	0800c949 	.word	0x0800c949
 800c924:	0800c951 	.word	0x0800c951
 800c928:	2302      	movs	r3, #2
 800c92a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c92e:	e01a      	b.n	800c966 <UART_SetConfig+0x5a6>
 800c930:	2304      	movs	r3, #4
 800c932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c936:	e016      	b.n	800c966 <UART_SetConfig+0x5a6>
 800c938:	2308      	movs	r3, #8
 800c93a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c93e:	e012      	b.n	800c966 <UART_SetConfig+0x5a6>
 800c940:	2310      	movs	r3, #16
 800c942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c946:	e00e      	b.n	800c966 <UART_SetConfig+0x5a6>
 800c948:	2320      	movs	r3, #32
 800c94a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c94e:	e00a      	b.n	800c966 <UART_SetConfig+0x5a6>
 800c950:	2340      	movs	r3, #64	@ 0x40
 800c952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c956:	e006      	b.n	800c966 <UART_SetConfig+0x5a6>
 800c958:	2380      	movs	r3, #128	@ 0x80
 800c95a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c95e:	e002      	b.n	800c966 <UART_SetConfig+0x5a6>
 800c960:	2380      	movs	r3, #128	@ 0x80
 800c962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c966:	697b      	ldr	r3, [r7, #20]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	4a3f      	ldr	r2, [pc, #252]	@ (800ca68 <UART_SetConfig+0x6a8>)
 800c96c:	4293      	cmp	r3, r2
 800c96e:	f040 80f8 	bne.w	800cb62 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c972:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c976:	2b20      	cmp	r3, #32
 800c978:	dc46      	bgt.n	800ca08 <UART_SetConfig+0x648>
 800c97a:	2b02      	cmp	r3, #2
 800c97c:	f2c0 8082 	blt.w	800ca84 <UART_SetConfig+0x6c4>
 800c980:	3b02      	subs	r3, #2
 800c982:	2b1e      	cmp	r3, #30
 800c984:	d87e      	bhi.n	800ca84 <UART_SetConfig+0x6c4>
 800c986:	a201      	add	r2, pc, #4	@ (adr r2, 800c98c <UART_SetConfig+0x5cc>)
 800c988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c98c:	0800ca0f 	.word	0x0800ca0f
 800c990:	0800ca85 	.word	0x0800ca85
 800c994:	0800ca17 	.word	0x0800ca17
 800c998:	0800ca85 	.word	0x0800ca85
 800c99c:	0800ca85 	.word	0x0800ca85
 800c9a0:	0800ca85 	.word	0x0800ca85
 800c9a4:	0800ca27 	.word	0x0800ca27
 800c9a8:	0800ca85 	.word	0x0800ca85
 800c9ac:	0800ca85 	.word	0x0800ca85
 800c9b0:	0800ca85 	.word	0x0800ca85
 800c9b4:	0800ca85 	.word	0x0800ca85
 800c9b8:	0800ca85 	.word	0x0800ca85
 800c9bc:	0800ca85 	.word	0x0800ca85
 800c9c0:	0800ca85 	.word	0x0800ca85
 800c9c4:	0800ca37 	.word	0x0800ca37
 800c9c8:	0800ca85 	.word	0x0800ca85
 800c9cc:	0800ca85 	.word	0x0800ca85
 800c9d0:	0800ca85 	.word	0x0800ca85
 800c9d4:	0800ca85 	.word	0x0800ca85
 800c9d8:	0800ca85 	.word	0x0800ca85
 800c9dc:	0800ca85 	.word	0x0800ca85
 800c9e0:	0800ca85 	.word	0x0800ca85
 800c9e4:	0800ca85 	.word	0x0800ca85
 800c9e8:	0800ca85 	.word	0x0800ca85
 800c9ec:	0800ca85 	.word	0x0800ca85
 800c9f0:	0800ca85 	.word	0x0800ca85
 800c9f4:	0800ca85 	.word	0x0800ca85
 800c9f8:	0800ca85 	.word	0x0800ca85
 800c9fc:	0800ca85 	.word	0x0800ca85
 800ca00:	0800ca85 	.word	0x0800ca85
 800ca04:	0800ca77 	.word	0x0800ca77
 800ca08:	2b40      	cmp	r3, #64	@ 0x40
 800ca0a:	d037      	beq.n	800ca7c <UART_SetConfig+0x6bc>
 800ca0c:	e03a      	b.n	800ca84 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ca0e:	f7fd fc23 	bl	800a258 <HAL_RCCEx_GetD3PCLK1Freq>
 800ca12:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ca14:	e03c      	b.n	800ca90 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ca16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	f7fd fc32 	bl	800a284 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ca20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca24:	e034      	b.n	800ca90 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ca26:	f107 0318 	add.w	r3, r7, #24
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	f7fd fd7e 	bl	800a52c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ca30:	69fb      	ldr	r3, [r7, #28]
 800ca32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca34:	e02c      	b.n	800ca90 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ca36:	4b09      	ldr	r3, [pc, #36]	@ (800ca5c <UART_SetConfig+0x69c>)
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	f003 0320 	and.w	r3, r3, #32
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d016      	beq.n	800ca70 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ca42:	4b06      	ldr	r3, [pc, #24]	@ (800ca5c <UART_SetConfig+0x69c>)
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	08db      	lsrs	r3, r3, #3
 800ca48:	f003 0303 	and.w	r3, r3, #3
 800ca4c:	4a07      	ldr	r2, [pc, #28]	@ (800ca6c <UART_SetConfig+0x6ac>)
 800ca4e:	fa22 f303 	lsr.w	r3, r2, r3
 800ca52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ca54:	e01c      	b.n	800ca90 <UART_SetConfig+0x6d0>
 800ca56:	bf00      	nop
 800ca58:	40011400 	.word	0x40011400
 800ca5c:	58024400 	.word	0x58024400
 800ca60:	40007800 	.word	0x40007800
 800ca64:	40007c00 	.word	0x40007c00
 800ca68:	58000c00 	.word	0x58000c00
 800ca6c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800ca70:	4b9d      	ldr	r3, [pc, #628]	@ (800cce8 <UART_SetConfig+0x928>)
 800ca72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca74:	e00c      	b.n	800ca90 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ca76:	4b9d      	ldr	r3, [pc, #628]	@ (800ccec <UART_SetConfig+0x92c>)
 800ca78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca7a:	e009      	b.n	800ca90 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ca7c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ca80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca82:	e005      	b.n	800ca90 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800ca84:	2300      	movs	r3, #0
 800ca86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ca88:	2301      	movs	r3, #1
 800ca8a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ca8e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ca90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	f000 81de 	beq.w	800ce54 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ca98:	697b      	ldr	r3, [r7, #20]
 800ca9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca9c:	4a94      	ldr	r2, [pc, #592]	@ (800ccf0 <UART_SetConfig+0x930>)
 800ca9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800caa2:	461a      	mov	r2, r3
 800caa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800caa6:	fbb3 f3f2 	udiv	r3, r3, r2
 800caaa:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800caac:	697b      	ldr	r3, [r7, #20]
 800caae:	685a      	ldr	r2, [r3, #4]
 800cab0:	4613      	mov	r3, r2
 800cab2:	005b      	lsls	r3, r3, #1
 800cab4:	4413      	add	r3, r2
 800cab6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cab8:	429a      	cmp	r2, r3
 800caba:	d305      	bcc.n	800cac8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cabc:	697b      	ldr	r3, [r7, #20]
 800cabe:	685b      	ldr	r3, [r3, #4]
 800cac0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cac2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cac4:	429a      	cmp	r2, r3
 800cac6:	d903      	bls.n	800cad0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800cac8:	2301      	movs	r3, #1
 800caca:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800cace:	e1c1      	b.n	800ce54 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cad0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cad2:	2200      	movs	r2, #0
 800cad4:	60bb      	str	r3, [r7, #8]
 800cad6:	60fa      	str	r2, [r7, #12]
 800cad8:	697b      	ldr	r3, [r7, #20]
 800cada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cadc:	4a84      	ldr	r2, [pc, #528]	@ (800ccf0 <UART_SetConfig+0x930>)
 800cade:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cae2:	b29b      	uxth	r3, r3
 800cae4:	2200      	movs	r2, #0
 800cae6:	603b      	str	r3, [r7, #0]
 800cae8:	607a      	str	r2, [r7, #4]
 800caea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800caee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800caf2:	f7f3 fc5d 	bl	80003b0 <__aeabi_uldivmod>
 800caf6:	4602      	mov	r2, r0
 800caf8:	460b      	mov	r3, r1
 800cafa:	4610      	mov	r0, r2
 800cafc:	4619      	mov	r1, r3
 800cafe:	f04f 0200 	mov.w	r2, #0
 800cb02:	f04f 0300 	mov.w	r3, #0
 800cb06:	020b      	lsls	r3, r1, #8
 800cb08:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800cb0c:	0202      	lsls	r2, r0, #8
 800cb0e:	6979      	ldr	r1, [r7, #20]
 800cb10:	6849      	ldr	r1, [r1, #4]
 800cb12:	0849      	lsrs	r1, r1, #1
 800cb14:	2000      	movs	r0, #0
 800cb16:	460c      	mov	r4, r1
 800cb18:	4605      	mov	r5, r0
 800cb1a:	eb12 0804 	adds.w	r8, r2, r4
 800cb1e:	eb43 0905 	adc.w	r9, r3, r5
 800cb22:	697b      	ldr	r3, [r7, #20]
 800cb24:	685b      	ldr	r3, [r3, #4]
 800cb26:	2200      	movs	r2, #0
 800cb28:	469a      	mov	sl, r3
 800cb2a:	4693      	mov	fp, r2
 800cb2c:	4652      	mov	r2, sl
 800cb2e:	465b      	mov	r3, fp
 800cb30:	4640      	mov	r0, r8
 800cb32:	4649      	mov	r1, r9
 800cb34:	f7f3 fc3c 	bl	80003b0 <__aeabi_uldivmod>
 800cb38:	4602      	mov	r2, r0
 800cb3a:	460b      	mov	r3, r1
 800cb3c:	4613      	mov	r3, r2
 800cb3e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cb40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb42:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cb46:	d308      	bcc.n	800cb5a <UART_SetConfig+0x79a>
 800cb48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cb4e:	d204      	bcs.n	800cb5a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800cb50:	697b      	ldr	r3, [r7, #20]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cb56:	60da      	str	r2, [r3, #12]
 800cb58:	e17c      	b.n	800ce54 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800cb5a:	2301      	movs	r3, #1
 800cb5c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800cb60:	e178      	b.n	800ce54 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cb62:	697b      	ldr	r3, [r7, #20]
 800cb64:	69db      	ldr	r3, [r3, #28]
 800cb66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cb6a:	f040 80c5 	bne.w	800ccf8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800cb6e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800cb72:	2b20      	cmp	r3, #32
 800cb74:	dc48      	bgt.n	800cc08 <UART_SetConfig+0x848>
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	db7b      	blt.n	800cc72 <UART_SetConfig+0x8b2>
 800cb7a:	2b20      	cmp	r3, #32
 800cb7c:	d879      	bhi.n	800cc72 <UART_SetConfig+0x8b2>
 800cb7e:	a201      	add	r2, pc, #4	@ (adr r2, 800cb84 <UART_SetConfig+0x7c4>)
 800cb80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb84:	0800cc0f 	.word	0x0800cc0f
 800cb88:	0800cc17 	.word	0x0800cc17
 800cb8c:	0800cc73 	.word	0x0800cc73
 800cb90:	0800cc73 	.word	0x0800cc73
 800cb94:	0800cc1f 	.word	0x0800cc1f
 800cb98:	0800cc73 	.word	0x0800cc73
 800cb9c:	0800cc73 	.word	0x0800cc73
 800cba0:	0800cc73 	.word	0x0800cc73
 800cba4:	0800cc2f 	.word	0x0800cc2f
 800cba8:	0800cc73 	.word	0x0800cc73
 800cbac:	0800cc73 	.word	0x0800cc73
 800cbb0:	0800cc73 	.word	0x0800cc73
 800cbb4:	0800cc73 	.word	0x0800cc73
 800cbb8:	0800cc73 	.word	0x0800cc73
 800cbbc:	0800cc73 	.word	0x0800cc73
 800cbc0:	0800cc73 	.word	0x0800cc73
 800cbc4:	0800cc3f 	.word	0x0800cc3f
 800cbc8:	0800cc73 	.word	0x0800cc73
 800cbcc:	0800cc73 	.word	0x0800cc73
 800cbd0:	0800cc73 	.word	0x0800cc73
 800cbd4:	0800cc73 	.word	0x0800cc73
 800cbd8:	0800cc73 	.word	0x0800cc73
 800cbdc:	0800cc73 	.word	0x0800cc73
 800cbe0:	0800cc73 	.word	0x0800cc73
 800cbe4:	0800cc73 	.word	0x0800cc73
 800cbe8:	0800cc73 	.word	0x0800cc73
 800cbec:	0800cc73 	.word	0x0800cc73
 800cbf0:	0800cc73 	.word	0x0800cc73
 800cbf4:	0800cc73 	.word	0x0800cc73
 800cbf8:	0800cc73 	.word	0x0800cc73
 800cbfc:	0800cc73 	.word	0x0800cc73
 800cc00:	0800cc73 	.word	0x0800cc73
 800cc04:	0800cc65 	.word	0x0800cc65
 800cc08:	2b40      	cmp	r3, #64	@ 0x40
 800cc0a:	d02e      	beq.n	800cc6a <UART_SetConfig+0x8aa>
 800cc0c:	e031      	b.n	800cc72 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cc0e:	f7fb fb6d 	bl	80082ec <HAL_RCC_GetPCLK1Freq>
 800cc12:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cc14:	e033      	b.n	800cc7e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cc16:	f7fb fb7f 	bl	8008318 <HAL_RCC_GetPCLK2Freq>
 800cc1a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cc1c:	e02f      	b.n	800cc7e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cc1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cc22:	4618      	mov	r0, r3
 800cc24:	f7fd fb2e 	bl	800a284 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cc28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc2c:	e027      	b.n	800cc7e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cc2e:	f107 0318 	add.w	r3, r7, #24
 800cc32:	4618      	mov	r0, r3
 800cc34:	f7fd fc7a 	bl	800a52c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cc38:	69fb      	ldr	r3, [r7, #28]
 800cc3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc3c:	e01f      	b.n	800cc7e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cc3e:	4b2d      	ldr	r3, [pc, #180]	@ (800ccf4 <UART_SetConfig+0x934>)
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	f003 0320 	and.w	r3, r3, #32
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d009      	beq.n	800cc5e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cc4a:	4b2a      	ldr	r3, [pc, #168]	@ (800ccf4 <UART_SetConfig+0x934>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	08db      	lsrs	r3, r3, #3
 800cc50:	f003 0303 	and.w	r3, r3, #3
 800cc54:	4a24      	ldr	r2, [pc, #144]	@ (800cce8 <UART_SetConfig+0x928>)
 800cc56:	fa22 f303 	lsr.w	r3, r2, r3
 800cc5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cc5c:	e00f      	b.n	800cc7e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800cc5e:	4b22      	ldr	r3, [pc, #136]	@ (800cce8 <UART_SetConfig+0x928>)
 800cc60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc62:	e00c      	b.n	800cc7e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cc64:	4b21      	ldr	r3, [pc, #132]	@ (800ccec <UART_SetConfig+0x92c>)
 800cc66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc68:	e009      	b.n	800cc7e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cc6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cc6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc70:	e005      	b.n	800cc7e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800cc72:	2300      	movs	r3, #0
 800cc74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800cc76:	2301      	movs	r3, #1
 800cc78:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800cc7c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cc7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	f000 80e7 	beq.w	800ce54 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cc86:	697b      	ldr	r3, [r7, #20]
 800cc88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc8a:	4a19      	ldr	r2, [pc, #100]	@ (800ccf0 <UART_SetConfig+0x930>)
 800cc8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cc90:	461a      	mov	r2, r3
 800cc92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc94:	fbb3 f3f2 	udiv	r3, r3, r2
 800cc98:	005a      	lsls	r2, r3, #1
 800cc9a:	697b      	ldr	r3, [r7, #20]
 800cc9c:	685b      	ldr	r3, [r3, #4]
 800cc9e:	085b      	lsrs	r3, r3, #1
 800cca0:	441a      	add	r2, r3
 800cca2:	697b      	ldr	r3, [r7, #20]
 800cca4:	685b      	ldr	r3, [r3, #4]
 800cca6:	fbb2 f3f3 	udiv	r3, r2, r3
 800ccaa:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ccac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccae:	2b0f      	cmp	r3, #15
 800ccb0:	d916      	bls.n	800cce0 <UART_SetConfig+0x920>
 800ccb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ccb8:	d212      	bcs.n	800cce0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ccba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccbc:	b29b      	uxth	r3, r3
 800ccbe:	f023 030f 	bic.w	r3, r3, #15
 800ccc2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ccc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccc6:	085b      	lsrs	r3, r3, #1
 800ccc8:	b29b      	uxth	r3, r3
 800ccca:	f003 0307 	and.w	r3, r3, #7
 800ccce:	b29a      	uxth	r2, r3
 800ccd0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ccd2:	4313      	orrs	r3, r2
 800ccd4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800ccd6:	697b      	ldr	r3, [r7, #20]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800ccdc:	60da      	str	r2, [r3, #12]
 800ccde:	e0b9      	b.n	800ce54 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800cce0:	2301      	movs	r3, #1
 800cce2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800cce6:	e0b5      	b.n	800ce54 <UART_SetConfig+0xa94>
 800cce8:	03d09000 	.word	0x03d09000
 800ccec:	003d0900 	.word	0x003d0900
 800ccf0:	08011028 	.word	0x08011028
 800ccf4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800ccf8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ccfc:	2b20      	cmp	r3, #32
 800ccfe:	dc49      	bgt.n	800cd94 <UART_SetConfig+0x9d4>
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	db7c      	blt.n	800cdfe <UART_SetConfig+0xa3e>
 800cd04:	2b20      	cmp	r3, #32
 800cd06:	d87a      	bhi.n	800cdfe <UART_SetConfig+0xa3e>
 800cd08:	a201      	add	r2, pc, #4	@ (adr r2, 800cd10 <UART_SetConfig+0x950>)
 800cd0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd0e:	bf00      	nop
 800cd10:	0800cd9b 	.word	0x0800cd9b
 800cd14:	0800cda3 	.word	0x0800cda3
 800cd18:	0800cdff 	.word	0x0800cdff
 800cd1c:	0800cdff 	.word	0x0800cdff
 800cd20:	0800cdab 	.word	0x0800cdab
 800cd24:	0800cdff 	.word	0x0800cdff
 800cd28:	0800cdff 	.word	0x0800cdff
 800cd2c:	0800cdff 	.word	0x0800cdff
 800cd30:	0800cdbb 	.word	0x0800cdbb
 800cd34:	0800cdff 	.word	0x0800cdff
 800cd38:	0800cdff 	.word	0x0800cdff
 800cd3c:	0800cdff 	.word	0x0800cdff
 800cd40:	0800cdff 	.word	0x0800cdff
 800cd44:	0800cdff 	.word	0x0800cdff
 800cd48:	0800cdff 	.word	0x0800cdff
 800cd4c:	0800cdff 	.word	0x0800cdff
 800cd50:	0800cdcb 	.word	0x0800cdcb
 800cd54:	0800cdff 	.word	0x0800cdff
 800cd58:	0800cdff 	.word	0x0800cdff
 800cd5c:	0800cdff 	.word	0x0800cdff
 800cd60:	0800cdff 	.word	0x0800cdff
 800cd64:	0800cdff 	.word	0x0800cdff
 800cd68:	0800cdff 	.word	0x0800cdff
 800cd6c:	0800cdff 	.word	0x0800cdff
 800cd70:	0800cdff 	.word	0x0800cdff
 800cd74:	0800cdff 	.word	0x0800cdff
 800cd78:	0800cdff 	.word	0x0800cdff
 800cd7c:	0800cdff 	.word	0x0800cdff
 800cd80:	0800cdff 	.word	0x0800cdff
 800cd84:	0800cdff 	.word	0x0800cdff
 800cd88:	0800cdff 	.word	0x0800cdff
 800cd8c:	0800cdff 	.word	0x0800cdff
 800cd90:	0800cdf1 	.word	0x0800cdf1
 800cd94:	2b40      	cmp	r3, #64	@ 0x40
 800cd96:	d02e      	beq.n	800cdf6 <UART_SetConfig+0xa36>
 800cd98:	e031      	b.n	800cdfe <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cd9a:	f7fb faa7 	bl	80082ec <HAL_RCC_GetPCLK1Freq>
 800cd9e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cda0:	e033      	b.n	800ce0a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cda2:	f7fb fab9 	bl	8008318 <HAL_RCC_GetPCLK2Freq>
 800cda6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cda8:	e02f      	b.n	800ce0a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cdaa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cdae:	4618      	mov	r0, r3
 800cdb0:	f7fd fa68 	bl	800a284 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cdb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cdb8:	e027      	b.n	800ce0a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cdba:	f107 0318 	add.w	r3, r7, #24
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	f7fd fbb4 	bl	800a52c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cdc4:	69fb      	ldr	r3, [r7, #28]
 800cdc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cdc8:	e01f      	b.n	800ce0a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cdca:	4b2d      	ldr	r3, [pc, #180]	@ (800ce80 <UART_SetConfig+0xac0>)
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	f003 0320 	and.w	r3, r3, #32
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d009      	beq.n	800cdea <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cdd6:	4b2a      	ldr	r3, [pc, #168]	@ (800ce80 <UART_SetConfig+0xac0>)
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	08db      	lsrs	r3, r3, #3
 800cddc:	f003 0303 	and.w	r3, r3, #3
 800cde0:	4a28      	ldr	r2, [pc, #160]	@ (800ce84 <UART_SetConfig+0xac4>)
 800cde2:	fa22 f303 	lsr.w	r3, r2, r3
 800cde6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cde8:	e00f      	b.n	800ce0a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800cdea:	4b26      	ldr	r3, [pc, #152]	@ (800ce84 <UART_SetConfig+0xac4>)
 800cdec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cdee:	e00c      	b.n	800ce0a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cdf0:	4b25      	ldr	r3, [pc, #148]	@ (800ce88 <UART_SetConfig+0xac8>)
 800cdf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cdf4:	e009      	b.n	800ce0a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cdf6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cdfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cdfc:	e005      	b.n	800ce0a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800cdfe:	2300      	movs	r3, #0
 800ce00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ce02:	2301      	movs	r3, #1
 800ce04:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ce08:	bf00      	nop
    }

    if (pclk != 0U)
 800ce0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d021      	beq.n	800ce54 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ce10:	697b      	ldr	r3, [r7, #20]
 800ce12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce14:	4a1d      	ldr	r2, [pc, #116]	@ (800ce8c <UART_SetConfig+0xacc>)
 800ce16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ce1a:	461a      	mov	r2, r3
 800ce1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce1e:	fbb3 f2f2 	udiv	r2, r3, r2
 800ce22:	697b      	ldr	r3, [r7, #20]
 800ce24:	685b      	ldr	r3, [r3, #4]
 800ce26:	085b      	lsrs	r3, r3, #1
 800ce28:	441a      	add	r2, r3
 800ce2a:	697b      	ldr	r3, [r7, #20]
 800ce2c:	685b      	ldr	r3, [r3, #4]
 800ce2e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce32:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ce34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce36:	2b0f      	cmp	r3, #15
 800ce38:	d909      	bls.n	800ce4e <UART_SetConfig+0xa8e>
 800ce3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ce40:	d205      	bcs.n	800ce4e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ce42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce44:	b29a      	uxth	r2, r3
 800ce46:	697b      	ldr	r3, [r7, #20]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	60da      	str	r2, [r3, #12]
 800ce4c:	e002      	b.n	800ce54 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ce4e:	2301      	movs	r3, #1
 800ce50:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ce54:	697b      	ldr	r3, [r7, #20]
 800ce56:	2201      	movs	r2, #1
 800ce58:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800ce5c:	697b      	ldr	r3, [r7, #20]
 800ce5e:	2201      	movs	r2, #1
 800ce60:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ce64:	697b      	ldr	r3, [r7, #20]
 800ce66:	2200      	movs	r2, #0
 800ce68:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ce6a:	697b      	ldr	r3, [r7, #20]
 800ce6c:	2200      	movs	r2, #0
 800ce6e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ce70:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800ce74:	4618      	mov	r0, r3
 800ce76:	3748      	adds	r7, #72	@ 0x48
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ce7e:	bf00      	nop
 800ce80:	58024400 	.word	0x58024400
 800ce84:	03d09000 	.word	0x03d09000
 800ce88:	003d0900 	.word	0x003d0900
 800ce8c:	08011028 	.word	0x08011028

0800ce90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ce90:	b480      	push	{r7}
 800ce92:	b083      	sub	sp, #12
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce9c:	f003 0308 	and.w	r3, r3, #8
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d00a      	beq.n	800ceba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	685b      	ldr	r3, [r3, #4]
 800ceaa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	430a      	orrs	r2, r1
 800ceb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cebe:	f003 0301 	and.w	r3, r3, #1
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d00a      	beq.n	800cedc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	685b      	ldr	r3, [r3, #4]
 800cecc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	430a      	orrs	r2, r1
 800ceda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cee0:	f003 0302 	and.w	r3, r3, #2
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d00a      	beq.n	800cefe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	685b      	ldr	r3, [r3, #4]
 800ceee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	430a      	orrs	r2, r1
 800cefc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf02:	f003 0304 	and.w	r3, r3, #4
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d00a      	beq.n	800cf20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	685b      	ldr	r3, [r3, #4]
 800cf10:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	430a      	orrs	r2, r1
 800cf1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf24:	f003 0310 	and.w	r3, r3, #16
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d00a      	beq.n	800cf42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	689b      	ldr	r3, [r3, #8]
 800cf32:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	430a      	orrs	r2, r1
 800cf40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf46:	f003 0320 	and.w	r3, r3, #32
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d00a      	beq.n	800cf64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	689b      	ldr	r3, [r3, #8]
 800cf54:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	430a      	orrs	r2, r1
 800cf62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d01a      	beq.n	800cfa6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	685b      	ldr	r3, [r3, #4]
 800cf76:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	430a      	orrs	r2, r1
 800cf84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cf8e:	d10a      	bne.n	800cfa6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	685b      	ldr	r3, [r3, #4]
 800cf96:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	430a      	orrs	r2, r1
 800cfa4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cfaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d00a      	beq.n	800cfc8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	685b      	ldr	r3, [r3, #4]
 800cfb8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	430a      	orrs	r2, r1
 800cfc6:	605a      	str	r2, [r3, #4]
  }
}
 800cfc8:	bf00      	nop
 800cfca:	370c      	adds	r7, #12
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd2:	4770      	bx	lr

0800cfd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	b098      	sub	sp, #96	@ 0x60
 800cfd8:	af02      	add	r7, sp, #8
 800cfda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	2200      	movs	r2, #0
 800cfe0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cfe4:	f7f5 fa0c 	bl	8002400 <HAL_GetTick>
 800cfe8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	f003 0308 	and.w	r3, r3, #8
 800cff4:	2b08      	cmp	r3, #8
 800cff6:	d12f      	bne.n	800d058 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cff8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cffc:	9300      	str	r3, [sp, #0]
 800cffe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d000:	2200      	movs	r2, #0
 800d002:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d006:	6878      	ldr	r0, [r7, #4]
 800d008:	f000 f88e 	bl	800d128 <UART_WaitOnFlagUntilTimeout>
 800d00c:	4603      	mov	r3, r0
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d022      	beq.n	800d058 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d01a:	e853 3f00 	ldrex	r3, [r3]
 800d01e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d020:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d022:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d026:	653b      	str	r3, [r7, #80]	@ 0x50
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	461a      	mov	r2, r3
 800d02e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d030:	647b      	str	r3, [r7, #68]	@ 0x44
 800d032:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d034:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d036:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d038:	e841 2300 	strex	r3, r2, [r1]
 800d03c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d03e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d040:	2b00      	cmp	r3, #0
 800d042:	d1e6      	bne.n	800d012 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	2220      	movs	r2, #32
 800d048:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	2200      	movs	r2, #0
 800d050:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d054:	2303      	movs	r3, #3
 800d056:	e063      	b.n	800d120 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	f003 0304 	and.w	r3, r3, #4
 800d062:	2b04      	cmp	r3, #4
 800d064:	d149      	bne.n	800d0fa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d066:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d06a:	9300      	str	r3, [sp, #0]
 800d06c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d06e:	2200      	movs	r2, #0
 800d070:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d074:	6878      	ldr	r0, [r7, #4]
 800d076:	f000 f857 	bl	800d128 <UART_WaitOnFlagUntilTimeout>
 800d07a:	4603      	mov	r3, r0
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d03c      	beq.n	800d0fa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d088:	e853 3f00 	ldrex	r3, [r3]
 800d08c:	623b      	str	r3, [r7, #32]
   return(result);
 800d08e:	6a3b      	ldr	r3, [r7, #32]
 800d090:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d094:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	461a      	mov	r2, r3
 800d09c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d09e:	633b      	str	r3, [r7, #48]	@ 0x30
 800d0a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d0a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d0a6:	e841 2300 	strex	r3, r2, [r1]
 800d0aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d0ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d1e6      	bne.n	800d080 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	3308      	adds	r3, #8
 800d0b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0ba:	693b      	ldr	r3, [r7, #16]
 800d0bc:	e853 3f00 	ldrex	r3, [r3]
 800d0c0:	60fb      	str	r3, [r7, #12]
   return(result);
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	f023 0301 	bic.w	r3, r3, #1
 800d0c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	3308      	adds	r3, #8
 800d0d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d0d2:	61fa      	str	r2, [r7, #28]
 800d0d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0d6:	69b9      	ldr	r1, [r7, #24]
 800d0d8:	69fa      	ldr	r2, [r7, #28]
 800d0da:	e841 2300 	strex	r3, r2, [r1]
 800d0de:	617b      	str	r3, [r7, #20]
   return(result);
 800d0e0:	697b      	ldr	r3, [r7, #20]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d1e5      	bne.n	800d0b2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	2220      	movs	r2, #32
 800d0ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d0f6:	2303      	movs	r3, #3
 800d0f8:	e012      	b.n	800d120 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	2220      	movs	r2, #32
 800d0fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	2220      	movs	r2, #32
 800d106:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	2200      	movs	r2, #0
 800d10e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	2200      	movs	r2, #0
 800d114:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	2200      	movs	r2, #0
 800d11a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d11e:	2300      	movs	r3, #0
}
 800d120:	4618      	mov	r0, r3
 800d122:	3758      	adds	r7, #88	@ 0x58
 800d124:	46bd      	mov	sp, r7
 800d126:	bd80      	pop	{r7, pc}

0800d128 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d128:	b580      	push	{r7, lr}
 800d12a:	b084      	sub	sp, #16
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	60f8      	str	r0, [r7, #12]
 800d130:	60b9      	str	r1, [r7, #8]
 800d132:	603b      	str	r3, [r7, #0]
 800d134:	4613      	mov	r3, r2
 800d136:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d138:	e04f      	b.n	800d1da <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d13a:	69bb      	ldr	r3, [r7, #24]
 800d13c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d140:	d04b      	beq.n	800d1da <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d142:	f7f5 f95d 	bl	8002400 <HAL_GetTick>
 800d146:	4602      	mov	r2, r0
 800d148:	683b      	ldr	r3, [r7, #0]
 800d14a:	1ad3      	subs	r3, r2, r3
 800d14c:	69ba      	ldr	r2, [r7, #24]
 800d14e:	429a      	cmp	r2, r3
 800d150:	d302      	bcc.n	800d158 <UART_WaitOnFlagUntilTimeout+0x30>
 800d152:	69bb      	ldr	r3, [r7, #24]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d101      	bne.n	800d15c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d158:	2303      	movs	r3, #3
 800d15a:	e04e      	b.n	800d1fa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	f003 0304 	and.w	r3, r3, #4
 800d166:	2b00      	cmp	r3, #0
 800d168:	d037      	beq.n	800d1da <UART_WaitOnFlagUntilTimeout+0xb2>
 800d16a:	68bb      	ldr	r3, [r7, #8]
 800d16c:	2b80      	cmp	r3, #128	@ 0x80
 800d16e:	d034      	beq.n	800d1da <UART_WaitOnFlagUntilTimeout+0xb2>
 800d170:	68bb      	ldr	r3, [r7, #8]
 800d172:	2b40      	cmp	r3, #64	@ 0x40
 800d174:	d031      	beq.n	800d1da <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	69db      	ldr	r3, [r3, #28]
 800d17c:	f003 0308 	and.w	r3, r3, #8
 800d180:	2b08      	cmp	r3, #8
 800d182:	d110      	bne.n	800d1a6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	2208      	movs	r2, #8
 800d18a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d18c:	68f8      	ldr	r0, [r7, #12]
 800d18e:	f000 f95b 	bl	800d448 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	2208      	movs	r2, #8
 800d196:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	2200      	movs	r2, #0
 800d19e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800d1a2:	2301      	movs	r3, #1
 800d1a4:	e029      	b.n	800d1fa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	69db      	ldr	r3, [r3, #28]
 800d1ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d1b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d1b4:	d111      	bne.n	800d1da <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d1be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d1c0:	68f8      	ldr	r0, [r7, #12]
 800d1c2:	f000 f941 	bl	800d448 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	2220      	movs	r2, #32
 800d1ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800d1d6:	2303      	movs	r3, #3
 800d1d8:	e00f      	b.n	800d1fa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	69da      	ldr	r2, [r3, #28]
 800d1e0:	68bb      	ldr	r3, [r7, #8]
 800d1e2:	4013      	ands	r3, r2
 800d1e4:	68ba      	ldr	r2, [r7, #8]
 800d1e6:	429a      	cmp	r2, r3
 800d1e8:	bf0c      	ite	eq
 800d1ea:	2301      	moveq	r3, #1
 800d1ec:	2300      	movne	r3, #0
 800d1ee:	b2db      	uxtb	r3, r3
 800d1f0:	461a      	mov	r2, r3
 800d1f2:	79fb      	ldrb	r3, [r7, #7]
 800d1f4:	429a      	cmp	r2, r3
 800d1f6:	d0a0      	beq.n	800d13a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d1f8:	2300      	movs	r3, #0
}
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	3710      	adds	r7, #16
 800d1fe:	46bd      	mov	sp, r7
 800d200:	bd80      	pop	{r7, pc}
	...

0800d204 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d204:	b480      	push	{r7}
 800d206:	b0a3      	sub	sp, #140	@ 0x8c
 800d208:	af00      	add	r7, sp, #0
 800d20a:	60f8      	str	r0, [r7, #12]
 800d20c:	60b9      	str	r1, [r7, #8]
 800d20e:	4613      	mov	r3, r2
 800d210:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	68ba      	ldr	r2, [r7, #8]
 800d216:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	88fa      	ldrh	r2, [r7, #6]
 800d21c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	88fa      	ldrh	r2, [r7, #6]
 800d224:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	2200      	movs	r2, #0
 800d22c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	689b      	ldr	r3, [r3, #8]
 800d232:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d236:	d10e      	bne.n	800d256 <UART_Start_Receive_IT+0x52>
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	691b      	ldr	r3, [r3, #16]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d105      	bne.n	800d24c <UART_Start_Receive_IT+0x48>
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800d246:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d24a:	e02d      	b.n	800d2a8 <UART_Start_Receive_IT+0xa4>
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	22ff      	movs	r2, #255	@ 0xff
 800d250:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d254:	e028      	b.n	800d2a8 <UART_Start_Receive_IT+0xa4>
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	689b      	ldr	r3, [r3, #8]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d10d      	bne.n	800d27a <UART_Start_Receive_IT+0x76>
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	691b      	ldr	r3, [r3, #16]
 800d262:	2b00      	cmp	r3, #0
 800d264:	d104      	bne.n	800d270 <UART_Start_Receive_IT+0x6c>
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	22ff      	movs	r2, #255	@ 0xff
 800d26a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d26e:	e01b      	b.n	800d2a8 <UART_Start_Receive_IT+0xa4>
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	227f      	movs	r2, #127	@ 0x7f
 800d274:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d278:	e016      	b.n	800d2a8 <UART_Start_Receive_IT+0xa4>
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	689b      	ldr	r3, [r3, #8]
 800d27e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d282:	d10d      	bne.n	800d2a0 <UART_Start_Receive_IT+0x9c>
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	691b      	ldr	r3, [r3, #16]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d104      	bne.n	800d296 <UART_Start_Receive_IT+0x92>
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	227f      	movs	r2, #127	@ 0x7f
 800d290:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d294:	e008      	b.n	800d2a8 <UART_Start_Receive_IT+0xa4>
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	223f      	movs	r2, #63	@ 0x3f
 800d29a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d29e:	e003      	b.n	800d2a8 <UART_Start_Receive_IT+0xa4>
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	2222      	movs	r2, #34	@ 0x22
 800d2b4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	3308      	adds	r3, #8
 800d2be:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d2c2:	e853 3f00 	ldrex	r3, [r3]
 800d2c6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800d2c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d2ca:	f043 0301 	orr.w	r3, r3, #1
 800d2ce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	3308      	adds	r3, #8
 800d2d8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800d2dc:	673a      	str	r2, [r7, #112]	@ 0x70
 800d2de:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2e0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800d2e2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800d2e4:	e841 2300 	strex	r3, r2, [r1]
 800d2e8:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800d2ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d1e3      	bne.n	800d2b8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d2f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d2f8:	d14f      	bne.n	800d39a <UART_Start_Receive_IT+0x196>
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d300:	88fa      	ldrh	r2, [r7, #6]
 800d302:	429a      	cmp	r2, r3
 800d304:	d349      	bcc.n	800d39a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	689b      	ldr	r3, [r3, #8]
 800d30a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d30e:	d107      	bne.n	800d320 <UART_Start_Receive_IT+0x11c>
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	691b      	ldr	r3, [r3, #16]
 800d314:	2b00      	cmp	r3, #0
 800d316:	d103      	bne.n	800d320 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	4a47      	ldr	r2, [pc, #284]	@ (800d438 <UART_Start_Receive_IT+0x234>)
 800d31c:	675a      	str	r2, [r3, #116]	@ 0x74
 800d31e:	e002      	b.n	800d326 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	4a46      	ldr	r2, [pc, #280]	@ (800d43c <UART_Start_Receive_IT+0x238>)
 800d324:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	691b      	ldr	r3, [r3, #16]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d01a      	beq.n	800d364 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d334:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d336:	e853 3f00 	ldrex	r3, [r3]
 800d33a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800d33c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d33e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d342:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	461a      	mov	r2, r3
 800d34c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d350:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d352:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d354:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d356:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d358:	e841 2300 	strex	r3, r2, [r1]
 800d35c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800d35e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d360:	2b00      	cmp	r3, #0
 800d362:	d1e4      	bne.n	800d32e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	3308      	adds	r3, #8
 800d36a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d36c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d36e:	e853 3f00 	ldrex	r3, [r3]
 800d372:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d376:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d37a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	3308      	adds	r3, #8
 800d382:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800d384:	64ba      	str	r2, [r7, #72]	@ 0x48
 800d386:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d388:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d38a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d38c:	e841 2300 	strex	r3, r2, [r1]
 800d390:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800d392:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d394:	2b00      	cmp	r3, #0
 800d396:	d1e5      	bne.n	800d364 <UART_Start_Receive_IT+0x160>
 800d398:	e046      	b.n	800d428 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	689b      	ldr	r3, [r3, #8]
 800d39e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d3a2:	d107      	bne.n	800d3b4 <UART_Start_Receive_IT+0x1b0>
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	691b      	ldr	r3, [r3, #16]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d103      	bne.n	800d3b4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	4a24      	ldr	r2, [pc, #144]	@ (800d440 <UART_Start_Receive_IT+0x23c>)
 800d3b0:	675a      	str	r2, [r3, #116]	@ 0x74
 800d3b2:	e002      	b.n	800d3ba <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	4a23      	ldr	r2, [pc, #140]	@ (800d444 <UART_Start_Receive_IT+0x240>)
 800d3b8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	691b      	ldr	r3, [r3, #16]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d019      	beq.n	800d3f6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3ca:	e853 3f00 	ldrex	r3, [r3]
 800d3ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d3d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3d2:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800d3d6:	677b      	str	r3, [r7, #116]	@ 0x74
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	461a      	mov	r2, r3
 800d3de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d3e0:	637b      	str	r3, [r7, #52]	@ 0x34
 800d3e2:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3e4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d3e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d3e8:	e841 2300 	strex	r3, r2, [r1]
 800d3ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800d3ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d1e6      	bne.n	800d3c2 <UART_Start_Receive_IT+0x1be>
 800d3f4:	e018      	b.n	800d428 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3fc:	697b      	ldr	r3, [r7, #20]
 800d3fe:	e853 3f00 	ldrex	r3, [r3]
 800d402:	613b      	str	r3, [r7, #16]
   return(result);
 800d404:	693b      	ldr	r3, [r7, #16]
 800d406:	f043 0320 	orr.w	r3, r3, #32
 800d40a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	461a      	mov	r2, r3
 800d412:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d414:	623b      	str	r3, [r7, #32]
 800d416:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d418:	69f9      	ldr	r1, [r7, #28]
 800d41a:	6a3a      	ldr	r2, [r7, #32]
 800d41c:	e841 2300 	strex	r3, r2, [r1]
 800d420:	61bb      	str	r3, [r7, #24]
   return(result);
 800d422:	69bb      	ldr	r3, [r7, #24]
 800d424:	2b00      	cmp	r3, #0
 800d426:	d1e6      	bne.n	800d3f6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800d428:	2300      	movs	r3, #0
}
 800d42a:	4618      	mov	r0, r3
 800d42c:	378c      	adds	r7, #140	@ 0x8c
 800d42e:	46bd      	mov	sp, r7
 800d430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d434:	4770      	bx	lr
 800d436:	bf00      	nop
 800d438:	0800dc65 	.word	0x0800dc65
 800d43c:	0800d901 	.word	0x0800d901
 800d440:	0800d749 	.word	0x0800d749
 800d444:	0800d591 	.word	0x0800d591

0800d448 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d448:	b480      	push	{r7}
 800d44a:	b095      	sub	sp, #84	@ 0x54
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d456:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d458:	e853 3f00 	ldrex	r3, [r3]
 800d45c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d45e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d460:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d464:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	461a      	mov	r2, r3
 800d46c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d46e:	643b      	str	r3, [r7, #64]	@ 0x40
 800d470:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d472:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d474:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d476:	e841 2300 	strex	r3, r2, [r1]
 800d47a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d47c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d1e6      	bne.n	800d450 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	3308      	adds	r3, #8
 800d488:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d48a:	6a3b      	ldr	r3, [r7, #32]
 800d48c:	e853 3f00 	ldrex	r3, [r3]
 800d490:	61fb      	str	r3, [r7, #28]
   return(result);
 800d492:	69fa      	ldr	r2, [r7, #28]
 800d494:	4b1e      	ldr	r3, [pc, #120]	@ (800d510 <UART_EndRxTransfer+0xc8>)
 800d496:	4013      	ands	r3, r2
 800d498:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	3308      	adds	r3, #8
 800d4a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d4a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d4a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d4a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d4aa:	e841 2300 	strex	r3, r2, [r1]
 800d4ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d4b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d1e5      	bne.n	800d482 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d4ba:	2b01      	cmp	r3, #1
 800d4bc:	d118      	bne.n	800d4f0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	e853 3f00 	ldrex	r3, [r3]
 800d4ca:	60bb      	str	r3, [r7, #8]
   return(result);
 800d4cc:	68bb      	ldr	r3, [r7, #8]
 800d4ce:	f023 0310 	bic.w	r3, r3, #16
 800d4d2:	647b      	str	r3, [r7, #68]	@ 0x44
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	461a      	mov	r2, r3
 800d4da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d4dc:	61bb      	str	r3, [r7, #24]
 800d4de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4e0:	6979      	ldr	r1, [r7, #20]
 800d4e2:	69ba      	ldr	r2, [r7, #24]
 800d4e4:	e841 2300 	strex	r3, r2, [r1]
 800d4e8:	613b      	str	r3, [r7, #16]
   return(result);
 800d4ea:	693b      	ldr	r3, [r7, #16]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d1e6      	bne.n	800d4be <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	2220      	movs	r2, #32
 800d4f4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	2200      	movs	r2, #0
 800d502:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d504:	bf00      	nop
 800d506:	3754      	adds	r7, #84	@ 0x54
 800d508:	46bd      	mov	sp, r7
 800d50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50e:	4770      	bx	lr
 800d510:	effffffe 	.word	0xeffffffe

0800d514 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d514:	b580      	push	{r7, lr}
 800d516:	b084      	sub	sp, #16
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d520:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	2200      	movs	r2, #0
 800d526:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d52a:	68f8      	ldr	r0, [r7, #12]
 800d52c:	f7fe ff32 	bl	800c394 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d530:	bf00      	nop
 800d532:	3710      	adds	r7, #16
 800d534:	46bd      	mov	sp, r7
 800d536:	bd80      	pop	{r7, pc}

0800d538 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b088      	sub	sp, #32
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	e853 3f00 	ldrex	r3, [r3]
 800d54c:	60bb      	str	r3, [r7, #8]
   return(result);
 800d54e:	68bb      	ldr	r3, [r7, #8]
 800d550:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d554:	61fb      	str	r3, [r7, #28]
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	461a      	mov	r2, r3
 800d55c:	69fb      	ldr	r3, [r7, #28]
 800d55e:	61bb      	str	r3, [r7, #24]
 800d560:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d562:	6979      	ldr	r1, [r7, #20]
 800d564:	69ba      	ldr	r2, [r7, #24]
 800d566:	e841 2300 	strex	r3, r2, [r1]
 800d56a:	613b      	str	r3, [r7, #16]
   return(result);
 800d56c:	693b      	ldr	r3, [r7, #16]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d1e6      	bne.n	800d540 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	2220      	movs	r2, #32
 800d576:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	2200      	movs	r2, #0
 800d57e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d580:	6878      	ldr	r0, [r7, #4]
 800d582:	f7fe fefd 	bl	800c380 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d586:	bf00      	nop
 800d588:	3720      	adds	r7, #32
 800d58a:	46bd      	mov	sp, r7
 800d58c:	bd80      	pop	{r7, pc}
	...

0800d590 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d590:	b580      	push	{r7, lr}
 800d592:	b09c      	sub	sp, #112	@ 0x70
 800d594:	af00      	add	r7, sp, #0
 800d596:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d59e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d5a8:	2b22      	cmp	r3, #34	@ 0x22
 800d5aa:	f040 80be 	bne.w	800d72a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5b4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d5b8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800d5bc:	b2d9      	uxtb	r1, r3
 800d5be:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800d5c2:	b2da      	uxtb	r2, r3
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d5c8:	400a      	ands	r2, r1
 800d5ca:	b2d2      	uxtb	r2, r2
 800d5cc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d5d2:	1c5a      	adds	r2, r3, #1
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d5de:	b29b      	uxth	r3, r3
 800d5e0:	3b01      	subs	r3, #1
 800d5e2:	b29a      	uxth	r2, r3
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d5f0:	b29b      	uxth	r3, r3
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	f040 80a1 	bne.w	800d73a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d600:	e853 3f00 	ldrex	r3, [r3]
 800d604:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d606:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d608:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d60c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	461a      	mov	r2, r3
 800d614:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d616:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d618:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d61a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d61c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d61e:	e841 2300 	strex	r3, r2, [r1]
 800d622:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d624:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d626:	2b00      	cmp	r3, #0
 800d628:	d1e6      	bne.n	800d5f8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	3308      	adds	r3, #8
 800d630:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d634:	e853 3f00 	ldrex	r3, [r3]
 800d638:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d63a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d63c:	f023 0301 	bic.w	r3, r3, #1
 800d640:	667b      	str	r3, [r7, #100]	@ 0x64
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	3308      	adds	r3, #8
 800d648:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d64a:	647a      	str	r2, [r7, #68]	@ 0x44
 800d64c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d64e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d650:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d652:	e841 2300 	strex	r3, r2, [r1]
 800d656:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d658:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d1e5      	bne.n	800d62a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	2220      	movs	r2, #32
 800d662:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	2200      	movs	r2, #0
 800d66a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	2200      	movs	r2, #0
 800d670:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	4a33      	ldr	r2, [pc, #204]	@ (800d744 <UART_RxISR_8BIT+0x1b4>)
 800d678:	4293      	cmp	r3, r2
 800d67a:	d01f      	beq.n	800d6bc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	685b      	ldr	r3, [r3, #4]
 800d682:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d686:	2b00      	cmp	r3, #0
 800d688:	d018      	beq.n	800d6bc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d692:	e853 3f00 	ldrex	r3, [r3]
 800d696:	623b      	str	r3, [r7, #32]
   return(result);
 800d698:	6a3b      	ldr	r3, [r7, #32]
 800d69a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d69e:	663b      	str	r3, [r7, #96]	@ 0x60
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	461a      	mov	r2, r3
 800d6a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d6a8:	633b      	str	r3, [r7, #48]	@ 0x30
 800d6aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d6ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d6b0:	e841 2300 	strex	r3, r2, [r1]
 800d6b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d6b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d1e6      	bne.n	800d68a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d6c0:	2b01      	cmp	r3, #1
 800d6c2:	d12e      	bne.n	800d722 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	2200      	movs	r2, #0
 800d6c8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6d0:	693b      	ldr	r3, [r7, #16]
 800d6d2:	e853 3f00 	ldrex	r3, [r3]
 800d6d6:	60fb      	str	r3, [r7, #12]
   return(result);
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	f023 0310 	bic.w	r3, r3, #16
 800d6de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	461a      	mov	r2, r3
 800d6e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d6e8:	61fb      	str	r3, [r7, #28]
 800d6ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6ec:	69b9      	ldr	r1, [r7, #24]
 800d6ee:	69fa      	ldr	r2, [r7, #28]
 800d6f0:	e841 2300 	strex	r3, r2, [r1]
 800d6f4:	617b      	str	r3, [r7, #20]
   return(result);
 800d6f6:	697b      	ldr	r3, [r7, #20]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d1e6      	bne.n	800d6ca <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	69db      	ldr	r3, [r3, #28]
 800d702:	f003 0310 	and.w	r3, r3, #16
 800d706:	2b10      	cmp	r3, #16
 800d708:	d103      	bne.n	800d712 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	2210      	movs	r2, #16
 800d710:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d718:	4619      	mov	r1, r3
 800d71a:	6878      	ldr	r0, [r7, #4]
 800d71c:	f7fe fe44 	bl	800c3a8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d720:	e00b      	b.n	800d73a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800d722:	6878      	ldr	r0, [r7, #4]
 800d724:	f7f4 fa86 	bl	8001c34 <HAL_UART_RxCpltCallback>
}
 800d728:	e007      	b.n	800d73a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	699a      	ldr	r2, [r3, #24]
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	f042 0208 	orr.w	r2, r2, #8
 800d738:	619a      	str	r2, [r3, #24]
}
 800d73a:	bf00      	nop
 800d73c:	3770      	adds	r7, #112	@ 0x70
 800d73e:	46bd      	mov	sp, r7
 800d740:	bd80      	pop	{r7, pc}
 800d742:	bf00      	nop
 800d744:	58000c00 	.word	0x58000c00

0800d748 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d748:	b580      	push	{r7, lr}
 800d74a:	b09c      	sub	sp, #112	@ 0x70
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d756:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d760:	2b22      	cmp	r3, #34	@ 0x22
 800d762:	f040 80be 	bne.w	800d8e2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d76c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d774:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800d776:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800d77a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800d77e:	4013      	ands	r3, r2
 800d780:	b29a      	uxth	r2, r3
 800d782:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d784:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d78a:	1c9a      	adds	r2, r3, #2
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d796:	b29b      	uxth	r3, r3
 800d798:	3b01      	subs	r3, #1
 800d79a:	b29a      	uxth	r2, r3
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d7a8:	b29b      	uxth	r3, r3
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	f040 80a1 	bne.w	800d8f2 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d7b8:	e853 3f00 	ldrex	r3, [r3]
 800d7bc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800d7be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d7c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d7c4:	667b      	str	r3, [r7, #100]	@ 0x64
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	461a      	mov	r2, r3
 800d7cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d7ce:	657b      	str	r3, [r7, #84]	@ 0x54
 800d7d0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7d2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d7d4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d7d6:	e841 2300 	strex	r3, r2, [r1]
 800d7da:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800d7dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d1e6      	bne.n	800d7b0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	3308      	adds	r3, #8
 800d7e8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7ec:	e853 3f00 	ldrex	r3, [r3]
 800d7f0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d7f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7f4:	f023 0301 	bic.w	r3, r3, #1
 800d7f8:	663b      	str	r3, [r7, #96]	@ 0x60
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	3308      	adds	r3, #8
 800d800:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d802:	643a      	str	r2, [r7, #64]	@ 0x40
 800d804:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d806:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d808:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d80a:	e841 2300 	strex	r3, r2, [r1]
 800d80e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d812:	2b00      	cmp	r3, #0
 800d814:	d1e5      	bne.n	800d7e2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	2220      	movs	r2, #32
 800d81a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	2200      	movs	r2, #0
 800d822:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	2200      	movs	r2, #0
 800d828:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	4a33      	ldr	r2, [pc, #204]	@ (800d8fc <UART_RxISR_16BIT+0x1b4>)
 800d830:	4293      	cmp	r3, r2
 800d832:	d01f      	beq.n	800d874 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	685b      	ldr	r3, [r3, #4]
 800d83a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d018      	beq.n	800d874 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d848:	6a3b      	ldr	r3, [r7, #32]
 800d84a:	e853 3f00 	ldrex	r3, [r3]
 800d84e:	61fb      	str	r3, [r7, #28]
   return(result);
 800d850:	69fb      	ldr	r3, [r7, #28]
 800d852:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d856:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	461a      	mov	r2, r3
 800d85e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d860:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d862:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d864:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d866:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d868:	e841 2300 	strex	r3, r2, [r1]
 800d86c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d86e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d870:	2b00      	cmp	r3, #0
 800d872:	d1e6      	bne.n	800d842 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d878:	2b01      	cmp	r3, #1
 800d87a:	d12e      	bne.n	800d8da <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	2200      	movs	r2, #0
 800d880:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	e853 3f00 	ldrex	r3, [r3]
 800d88e:	60bb      	str	r3, [r7, #8]
   return(result);
 800d890:	68bb      	ldr	r3, [r7, #8]
 800d892:	f023 0310 	bic.w	r3, r3, #16
 800d896:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	461a      	mov	r2, r3
 800d89e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d8a0:	61bb      	str	r3, [r7, #24]
 800d8a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8a4:	6979      	ldr	r1, [r7, #20]
 800d8a6:	69ba      	ldr	r2, [r7, #24]
 800d8a8:	e841 2300 	strex	r3, r2, [r1]
 800d8ac:	613b      	str	r3, [r7, #16]
   return(result);
 800d8ae:	693b      	ldr	r3, [r7, #16]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d1e6      	bne.n	800d882 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	69db      	ldr	r3, [r3, #28]
 800d8ba:	f003 0310 	and.w	r3, r3, #16
 800d8be:	2b10      	cmp	r3, #16
 800d8c0:	d103      	bne.n	800d8ca <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	2210      	movs	r2, #16
 800d8c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d8d0:	4619      	mov	r1, r3
 800d8d2:	6878      	ldr	r0, [r7, #4]
 800d8d4:	f7fe fd68 	bl	800c3a8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d8d8:	e00b      	b.n	800d8f2 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800d8da:	6878      	ldr	r0, [r7, #4]
 800d8dc:	f7f4 f9aa 	bl	8001c34 <HAL_UART_RxCpltCallback>
}
 800d8e0:	e007      	b.n	800d8f2 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	699a      	ldr	r2, [r3, #24]
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	f042 0208 	orr.w	r2, r2, #8
 800d8f0:	619a      	str	r2, [r3, #24]
}
 800d8f2:	bf00      	nop
 800d8f4:	3770      	adds	r7, #112	@ 0x70
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	bd80      	pop	{r7, pc}
 800d8fa:	bf00      	nop
 800d8fc:	58000c00 	.word	0x58000c00

0800d900 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d900:	b580      	push	{r7, lr}
 800d902:	b0ac      	sub	sp, #176	@ 0xb0
 800d904:	af00      	add	r7, sp, #0
 800d906:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d90e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	69db      	ldr	r3, [r3, #28]
 800d918:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	689b      	ldr	r3, [r3, #8]
 800d92c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d936:	2b22      	cmp	r3, #34	@ 0x22
 800d938:	f040 8181 	bne.w	800dc3e <UART_RxISR_8BIT_FIFOEN+0x33e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d942:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d946:	e124      	b.n	800db92 <UART_RxISR_8BIT_FIFOEN+0x292>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d94e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d952:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800d956:	b2d9      	uxtb	r1, r3
 800d958:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800d95c:	b2da      	uxtb	r2, r3
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d962:	400a      	ands	r2, r1
 800d964:	b2d2      	uxtb	r2, r2
 800d966:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d96c:	1c5a      	adds	r2, r3, #1
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d978:	b29b      	uxth	r3, r3
 800d97a:	3b01      	subs	r3, #1
 800d97c:	b29a      	uxth	r2, r3
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	69db      	ldr	r3, [r3, #28]
 800d98a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d98e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d992:	f003 0307 	and.w	r3, r3, #7
 800d996:	2b00      	cmp	r3, #0
 800d998:	d053      	beq.n	800da42 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d99a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d99e:	f003 0301 	and.w	r3, r3, #1
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d011      	beq.n	800d9ca <UART_RxISR_8BIT_FIFOEN+0xca>
 800d9a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d9aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d00b      	beq.n	800d9ca <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	2201      	movs	r2, #1
 800d9b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d9c0:	f043 0201 	orr.w	r2, r3, #1
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d9ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d9ce:	f003 0302 	and.w	r3, r3, #2
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d011      	beq.n	800d9fa <UART_RxISR_8BIT_FIFOEN+0xfa>
 800d9d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d9da:	f003 0301 	and.w	r3, r3, #1
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d00b      	beq.n	800d9fa <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	2202      	movs	r2, #2
 800d9e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d9f0:	f043 0204 	orr.w	r2, r3, #4
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d9fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d9fe:	f003 0304 	and.w	r3, r3, #4
 800da02:	2b00      	cmp	r3, #0
 800da04:	d011      	beq.n	800da2a <UART_RxISR_8BIT_FIFOEN+0x12a>
 800da06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800da0a:	f003 0301 	and.w	r3, r3, #1
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d00b      	beq.n	800da2a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	2204      	movs	r2, #4
 800da18:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800da20:	f043 0202 	orr.w	r2, r3, #2
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800da30:	2b00      	cmp	r3, #0
 800da32:	d006      	beq.n	800da42 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800da34:	6878      	ldr	r0, [r7, #4]
 800da36:	f7fe fcad 	bl	800c394 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	2200      	movs	r2, #0
 800da3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800da48:	b29b      	uxth	r3, r3
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	f040 80a1 	bne.w	800db92 <UART_RxISR_8BIT_FIFOEN+0x292>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da56:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800da58:	e853 3f00 	ldrex	r3, [r3]
 800da5c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800da5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800da60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800da64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	461a      	mov	r2, r3
 800da6e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800da72:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800da74:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da76:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800da78:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800da7a:	e841 2300 	strex	r3, r2, [r1]
 800da7e:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800da80:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800da82:	2b00      	cmp	r3, #0
 800da84:	d1e4      	bne.n	800da50 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	3308      	adds	r3, #8
 800da8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800da90:	e853 3f00 	ldrex	r3, [r3]
 800da94:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800da96:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800da98:	4b6f      	ldr	r3, [pc, #444]	@ (800dc58 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800da9a:	4013      	ands	r3, r2
 800da9c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	3308      	adds	r3, #8
 800daa6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800daaa:	66ba      	str	r2, [r7, #104]	@ 0x68
 800daac:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800daae:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800dab0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800dab2:	e841 2300 	strex	r3, r2, [r1]
 800dab6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800dab8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d1e3      	bne.n	800da86 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	2220      	movs	r2, #32
 800dac2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	2200      	movs	r2, #0
 800daca:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	2200      	movs	r2, #0
 800dad0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	4a61      	ldr	r2, [pc, #388]	@ (800dc5c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800dad8:	4293      	cmp	r3, r2
 800dada:	d021      	beq.n	800db20 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	685b      	ldr	r3, [r3, #4]
 800dae2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d01a      	beq.n	800db20 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800daf0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800daf2:	e853 3f00 	ldrex	r3, [r3]
 800daf6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800daf8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dafa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800dafe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	461a      	mov	r2, r3
 800db08:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800db0c:	657b      	str	r3, [r7, #84]	@ 0x54
 800db0e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db10:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800db12:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800db14:	e841 2300 	strex	r3, r2, [r1]
 800db18:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800db1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d1e4      	bne.n	800daea <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800db24:	2b01      	cmp	r3, #1
 800db26:	d130      	bne.n	800db8a <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	2200      	movs	r2, #0
 800db2c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db36:	e853 3f00 	ldrex	r3, [r3]
 800db3a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800db3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db3e:	f023 0310 	bic.w	r3, r3, #16
 800db42:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	461a      	mov	r2, r3
 800db4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800db50:	643b      	str	r3, [r7, #64]	@ 0x40
 800db52:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db54:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800db56:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800db58:	e841 2300 	strex	r3, r2, [r1]
 800db5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800db5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db60:	2b00      	cmp	r3, #0
 800db62:	d1e4      	bne.n	800db2e <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	69db      	ldr	r3, [r3, #28]
 800db6a:	f003 0310 	and.w	r3, r3, #16
 800db6e:	2b10      	cmp	r3, #16
 800db70:	d103      	bne.n	800db7a <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	2210      	movs	r2, #16
 800db78:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800db80:	4619      	mov	r1, r3
 800db82:	6878      	ldr	r0, [r7, #4]
 800db84:	f7fe fc10 	bl	800c3a8 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800db88:	e00e      	b.n	800dba8 <UART_RxISR_8BIT_FIFOEN+0x2a8>
          HAL_UART_RxCpltCallback(huart);
 800db8a:	6878      	ldr	r0, [r7, #4]
 800db8c:	f7f4 f852 	bl	8001c34 <HAL_UART_RxCpltCallback>
        break;
 800db90:	e00a      	b.n	800dba8 <UART_RxISR_8BIT_FIFOEN+0x2a8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800db92:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800db96:	2b00      	cmp	r3, #0
 800db98:	d006      	beq.n	800dba8 <UART_RxISR_8BIT_FIFOEN+0x2a8>
 800db9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800db9e:	f003 0320 	and.w	r3, r3, #32
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	f47f aed0 	bne.w	800d948 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800dbae:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800dbb2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d049      	beq.n	800dc4e <UART_RxISR_8BIT_FIFOEN+0x34e>
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800dbc0:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800dbc4:	429a      	cmp	r2, r3
 800dbc6:	d242      	bcs.n	800dc4e <UART_RxISR_8BIT_FIFOEN+0x34e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	3308      	adds	r3, #8
 800dbce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbd0:	6a3b      	ldr	r3, [r7, #32]
 800dbd2:	e853 3f00 	ldrex	r3, [r3]
 800dbd6:	61fb      	str	r3, [r7, #28]
   return(result);
 800dbd8:	69fb      	ldr	r3, [r7, #28]
 800dbda:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800dbde:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	3308      	adds	r3, #8
 800dbe8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800dbec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800dbee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbf0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dbf2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dbf4:	e841 2300 	strex	r3, r2, [r1]
 800dbf8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dbfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d1e3      	bne.n	800dbc8 <UART_RxISR_8BIT_FIFOEN+0x2c8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	4a17      	ldr	r2, [pc, #92]	@ (800dc60 <UART_RxISR_8BIT_FIFOEN+0x360>)
 800dc04:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	e853 3f00 	ldrex	r3, [r3]
 800dc12:	60bb      	str	r3, [r7, #8]
   return(result);
 800dc14:	68bb      	ldr	r3, [r7, #8]
 800dc16:	f043 0320 	orr.w	r3, r3, #32
 800dc1a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	461a      	mov	r2, r3
 800dc24:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800dc28:	61bb      	str	r3, [r7, #24]
 800dc2a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc2c:	6979      	ldr	r1, [r7, #20]
 800dc2e:	69ba      	ldr	r2, [r7, #24]
 800dc30:	e841 2300 	strex	r3, r2, [r1]
 800dc34:	613b      	str	r3, [r7, #16]
   return(result);
 800dc36:	693b      	ldr	r3, [r7, #16]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d1e4      	bne.n	800dc06 <UART_RxISR_8BIT_FIFOEN+0x306>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800dc3c:	e007      	b.n	800dc4e <UART_RxISR_8BIT_FIFOEN+0x34e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	699a      	ldr	r2, [r3, #24]
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	f042 0208 	orr.w	r2, r2, #8
 800dc4c:	619a      	str	r2, [r3, #24]
}
 800dc4e:	bf00      	nop
 800dc50:	37b0      	adds	r7, #176	@ 0xb0
 800dc52:	46bd      	mov	sp, r7
 800dc54:	bd80      	pop	{r7, pc}
 800dc56:	bf00      	nop
 800dc58:	effffffe 	.word	0xeffffffe
 800dc5c:	58000c00 	.word	0x58000c00
 800dc60:	0800d591 	.word	0x0800d591

0800dc64 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800dc64:	b580      	push	{r7, lr}
 800dc66:	b0ae      	sub	sp, #184	@ 0xb8
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800dc72:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	69db      	ldr	r3, [r3, #28]
 800dc7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	689b      	ldr	r3, [r3, #8]
 800dc90:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800dc9a:	2b22      	cmp	r3, #34	@ 0x22
 800dc9c:	f040 8185 	bne.w	800dfaa <UART_RxISR_16BIT_FIFOEN+0x346>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800dca6:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800dcaa:	e128      	b.n	800defe <UART_RxISR_16BIT_FIFOEN+0x29a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dcb2:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dcba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800dcbe:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800dcc2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800dcc6:	4013      	ands	r3, r2
 800dcc8:	b29a      	uxth	r2, r3
 800dcca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800dcce:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dcd4:	1c9a      	adds	r2, r3, #2
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800dce0:	b29b      	uxth	r3, r3
 800dce2:	3b01      	subs	r3, #1
 800dce4:	b29a      	uxth	r2, r3
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	69db      	ldr	r3, [r3, #28]
 800dcf2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800dcf6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800dcfa:	f003 0307 	and.w	r3, r3, #7
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d053      	beq.n	800ddaa <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800dd02:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800dd06:	f003 0301 	and.w	r3, r3, #1
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d011      	beq.n	800dd32 <UART_RxISR_16BIT_FIFOEN+0xce>
 800dd0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dd12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d00b      	beq.n	800dd32 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	2201      	movs	r2, #1
 800dd20:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dd28:	f043 0201 	orr.w	r2, r3, #1
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dd32:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800dd36:	f003 0302 	and.w	r3, r3, #2
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d011      	beq.n	800dd62 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800dd3e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800dd42:	f003 0301 	and.w	r3, r3, #1
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d00b      	beq.n	800dd62 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	2202      	movs	r2, #2
 800dd50:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dd58:	f043 0204 	orr.w	r2, r3, #4
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dd62:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800dd66:	f003 0304 	and.w	r3, r3, #4
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d011      	beq.n	800dd92 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800dd6e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800dd72:	f003 0301 	and.w	r3, r3, #1
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d00b      	beq.n	800dd92 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	2204      	movs	r2, #4
 800dd80:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dd88:	f043 0202 	orr.w	r2, r3, #2
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d006      	beq.n	800ddaa <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800dd9c:	6878      	ldr	r0, [r7, #4]
 800dd9e:	f7fe faf9 	bl	800c394 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	2200      	movs	r2, #0
 800dda6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ddb0:	b29b      	uxth	r3, r3
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	f040 80a3 	bne.w	800defe <UART_RxISR_16BIT_FIFOEN+0x29a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddbe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ddc0:	e853 3f00 	ldrex	r3, [r3]
 800ddc4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ddc6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ddc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ddcc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	461a      	mov	r2, r3
 800ddd6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ddda:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ddde:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dde0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800dde2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800dde6:	e841 2300 	strex	r3, r2, [r1]
 800ddea:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ddec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d1e2      	bne.n	800ddb8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	3308      	adds	r3, #8
 800ddf8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddfa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ddfc:	e853 3f00 	ldrex	r3, [r3]
 800de00:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800de02:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800de04:	4b6f      	ldr	r3, [pc, #444]	@ (800dfc4 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800de06:	4013      	ands	r3, r2
 800de08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	3308      	adds	r3, #8
 800de12:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800de16:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800de18:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de1a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800de1c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800de1e:	e841 2300 	strex	r3, r2, [r1]
 800de22:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800de24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800de26:	2b00      	cmp	r3, #0
 800de28:	d1e3      	bne.n	800ddf2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	2220      	movs	r2, #32
 800de2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	2200      	movs	r2, #0
 800de36:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	2200      	movs	r2, #0
 800de3c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	4a61      	ldr	r2, [pc, #388]	@ (800dfc8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800de44:	4293      	cmp	r3, r2
 800de46:	d021      	beq.n	800de8c <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	685b      	ldr	r3, [r3, #4]
 800de4e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800de52:	2b00      	cmp	r3, #0
 800de54:	d01a      	beq.n	800de8c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800de5e:	e853 3f00 	ldrex	r3, [r3]
 800de62:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800de64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800de66:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800de6a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	461a      	mov	r2, r3
 800de74:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800de78:	65bb      	str	r3, [r7, #88]	@ 0x58
 800de7a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de7c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800de7e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800de80:	e841 2300 	strex	r3, r2, [r1]
 800de84:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800de86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d1e4      	bne.n	800de56 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800de90:	2b01      	cmp	r3, #1
 800de92:	d130      	bne.n	800def6 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	2200      	movs	r2, #0
 800de98:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dea2:	e853 3f00 	ldrex	r3, [r3]
 800dea6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800dea8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800deaa:	f023 0310 	bic.w	r3, r3, #16
 800deae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	461a      	mov	r2, r3
 800deb8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800debc:	647b      	str	r3, [r7, #68]	@ 0x44
 800debe:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dec0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800dec2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dec4:	e841 2300 	strex	r3, r2, [r1]
 800dec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800deca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800decc:	2b00      	cmp	r3, #0
 800dece:	d1e4      	bne.n	800de9a <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	69db      	ldr	r3, [r3, #28]
 800ded6:	f003 0310 	and.w	r3, r3, #16
 800deda:	2b10      	cmp	r3, #16
 800dedc:	d103      	bne.n	800dee6 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	2210      	movs	r2, #16
 800dee4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800deec:	4619      	mov	r1, r3
 800deee:	6878      	ldr	r0, [r7, #4]
 800def0:	f7fe fa5a 	bl	800c3a8 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800def4:	e00e      	b.n	800df14 <UART_RxISR_16BIT_FIFOEN+0x2b0>
          HAL_UART_RxCpltCallback(huart);
 800def6:	6878      	ldr	r0, [r7, #4]
 800def8:	f7f3 fe9c 	bl	8001c34 <HAL_UART_RxCpltCallback>
        break;
 800defc:	e00a      	b.n	800df14 <UART_RxISR_16BIT_FIFOEN+0x2b0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800defe:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800df02:	2b00      	cmp	r3, #0
 800df04:	d006      	beq.n	800df14 <UART_RxISR_16BIT_FIFOEN+0x2b0>
 800df06:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800df0a:	f003 0320 	and.w	r3, r3, #32
 800df0e:	2b00      	cmp	r3, #0
 800df10:	f47f aecc 	bne.w	800dcac <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800df1a:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800df1e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800df22:	2b00      	cmp	r3, #0
 800df24:	d049      	beq.n	800dfba <UART_RxISR_16BIT_FIFOEN+0x356>
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800df2c:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800df30:	429a      	cmp	r2, r3
 800df32:	d242      	bcs.n	800dfba <UART_RxISR_16BIT_FIFOEN+0x356>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	3308      	adds	r3, #8
 800df3a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df3e:	e853 3f00 	ldrex	r3, [r3]
 800df42:	623b      	str	r3, [r7, #32]
   return(result);
 800df44:	6a3b      	ldr	r3, [r7, #32]
 800df46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800df4a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	3308      	adds	r3, #8
 800df54:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800df58:	633a      	str	r2, [r7, #48]	@ 0x30
 800df5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df5c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800df5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800df60:	e841 2300 	strex	r3, r2, [r1]
 800df64:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800df66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d1e3      	bne.n	800df34 <UART_RxISR_16BIT_FIFOEN+0x2d0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	4a17      	ldr	r2, [pc, #92]	@ (800dfcc <UART_RxISR_16BIT_FIFOEN+0x368>)
 800df70:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df78:	693b      	ldr	r3, [r7, #16]
 800df7a:	e853 3f00 	ldrex	r3, [r3]
 800df7e:	60fb      	str	r3, [r7, #12]
   return(result);
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	f043 0320 	orr.w	r3, r3, #32
 800df86:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	461a      	mov	r2, r3
 800df90:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800df94:	61fb      	str	r3, [r7, #28]
 800df96:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df98:	69b9      	ldr	r1, [r7, #24]
 800df9a:	69fa      	ldr	r2, [r7, #28]
 800df9c:	e841 2300 	strex	r3, r2, [r1]
 800dfa0:	617b      	str	r3, [r7, #20]
   return(result);
 800dfa2:	697b      	ldr	r3, [r7, #20]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d1e4      	bne.n	800df72 <UART_RxISR_16BIT_FIFOEN+0x30e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800dfa8:	e007      	b.n	800dfba <UART_RxISR_16BIT_FIFOEN+0x356>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	699a      	ldr	r2, [r3, #24]
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	f042 0208 	orr.w	r2, r2, #8
 800dfb8:	619a      	str	r2, [r3, #24]
}
 800dfba:	bf00      	nop
 800dfbc:	37b8      	adds	r7, #184	@ 0xb8
 800dfbe:	46bd      	mov	sp, r7
 800dfc0:	bd80      	pop	{r7, pc}
 800dfc2:	bf00      	nop
 800dfc4:	effffffe 	.word	0xeffffffe
 800dfc8:	58000c00 	.word	0x58000c00
 800dfcc:	0800d749 	.word	0x0800d749

0800dfd0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800dfd0:	b480      	push	{r7}
 800dfd2:	b083      	sub	sp, #12
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800dfd8:	bf00      	nop
 800dfda:	370c      	adds	r7, #12
 800dfdc:	46bd      	mov	sp, r7
 800dfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe2:	4770      	bx	lr

0800dfe4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800dfe4:	b480      	push	{r7}
 800dfe6:	b083      	sub	sp, #12
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800dfec:	bf00      	nop
 800dfee:	370c      	adds	r7, #12
 800dff0:	46bd      	mov	sp, r7
 800dff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff6:	4770      	bx	lr

0800dff8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800dff8:	b480      	push	{r7}
 800dffa:	b083      	sub	sp, #12
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e000:	bf00      	nop
 800e002:	370c      	adds	r7, #12
 800e004:	46bd      	mov	sp, r7
 800e006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e00a:	4770      	bx	lr

0800e00c <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800e00c:	b580      	push	{r7, lr}
 800e00e:	b084      	sub	sp, #16
 800e010:	af00      	add	r7, sp, #0
 800e012:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e01a:	2b01      	cmp	r3, #1
 800e01c:	d101      	bne.n	800e022 <HAL_UARTEx_EnableFifoMode+0x16>
 800e01e:	2302      	movs	r3, #2
 800e020:	e02b      	b.n	800e07a <HAL_UARTEx_EnableFifoMode+0x6e>
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	2201      	movs	r2, #1
 800e026:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	2224      	movs	r2, #36	@ 0x24
 800e02e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	681a      	ldr	r2, [r3, #0]
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	f022 0201 	bic.w	r2, r2, #1
 800e048:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e050:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800e058:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	68fa      	ldr	r2, [r7, #12]
 800e060:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e062:	6878      	ldr	r0, [r7, #4]
 800e064:	f000 f88a 	bl	800e17c <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	2220      	movs	r2, #32
 800e06c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	2200      	movs	r2, #0
 800e074:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e078:	2300      	movs	r3, #0
}
 800e07a:	4618      	mov	r0, r3
 800e07c:	3710      	adds	r7, #16
 800e07e:	46bd      	mov	sp, r7
 800e080:	bd80      	pop	{r7, pc}

0800e082 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e082:	b580      	push	{r7, lr}
 800e084:	b084      	sub	sp, #16
 800e086:	af00      	add	r7, sp, #0
 800e088:	6078      	str	r0, [r7, #4]
 800e08a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e092:	2b01      	cmp	r3, #1
 800e094:	d101      	bne.n	800e09a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e096:	2302      	movs	r3, #2
 800e098:	e02d      	b.n	800e0f6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	2201      	movs	r2, #1
 800e09e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	2224      	movs	r2, #36	@ 0x24
 800e0a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	681a      	ldr	r2, [r3, #0]
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	f022 0201 	bic.w	r2, r2, #1
 800e0c0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	689b      	ldr	r3, [r3, #8]
 800e0c8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	683a      	ldr	r2, [r7, #0]
 800e0d2:	430a      	orrs	r2, r1
 800e0d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e0d6:	6878      	ldr	r0, [r7, #4]
 800e0d8:	f000 f850 	bl	800e17c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	68fa      	ldr	r2, [r7, #12]
 800e0e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	2220      	movs	r2, #32
 800e0e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	2200      	movs	r2, #0
 800e0f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e0f4:	2300      	movs	r3, #0
}
 800e0f6:	4618      	mov	r0, r3
 800e0f8:	3710      	adds	r7, #16
 800e0fa:	46bd      	mov	sp, r7
 800e0fc:	bd80      	pop	{r7, pc}

0800e0fe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e0fe:	b580      	push	{r7, lr}
 800e100:	b084      	sub	sp, #16
 800e102:	af00      	add	r7, sp, #0
 800e104:	6078      	str	r0, [r7, #4]
 800e106:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e10e:	2b01      	cmp	r3, #1
 800e110:	d101      	bne.n	800e116 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e112:	2302      	movs	r3, #2
 800e114:	e02d      	b.n	800e172 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	2201      	movs	r2, #1
 800e11a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	2224      	movs	r2, #36	@ 0x24
 800e122:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	681a      	ldr	r2, [r3, #0]
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	f022 0201 	bic.w	r2, r2, #1
 800e13c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	689b      	ldr	r3, [r3, #8]
 800e144:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	683a      	ldr	r2, [r7, #0]
 800e14e:	430a      	orrs	r2, r1
 800e150:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e152:	6878      	ldr	r0, [r7, #4]
 800e154:	f000 f812 	bl	800e17c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	68fa      	ldr	r2, [r7, #12]
 800e15e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	2220      	movs	r2, #32
 800e164:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	2200      	movs	r2, #0
 800e16c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e170:	2300      	movs	r3, #0
}
 800e172:	4618      	mov	r0, r3
 800e174:	3710      	adds	r7, #16
 800e176:	46bd      	mov	sp, r7
 800e178:	bd80      	pop	{r7, pc}
	...

0800e17c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e17c:	b480      	push	{r7}
 800e17e:	b085      	sub	sp, #20
 800e180:	af00      	add	r7, sp, #0
 800e182:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d108      	bne.n	800e19e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	2201      	movs	r2, #1
 800e190:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	2201      	movs	r2, #1
 800e198:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e19c:	e031      	b.n	800e202 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e19e:	2310      	movs	r3, #16
 800e1a0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e1a2:	2310      	movs	r3, #16
 800e1a4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	689b      	ldr	r3, [r3, #8]
 800e1ac:	0e5b      	lsrs	r3, r3, #25
 800e1ae:	b2db      	uxtb	r3, r3
 800e1b0:	f003 0307 	and.w	r3, r3, #7
 800e1b4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	689b      	ldr	r3, [r3, #8]
 800e1bc:	0f5b      	lsrs	r3, r3, #29
 800e1be:	b2db      	uxtb	r3, r3
 800e1c0:	f003 0307 	and.w	r3, r3, #7
 800e1c4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e1c6:	7bbb      	ldrb	r3, [r7, #14]
 800e1c8:	7b3a      	ldrb	r2, [r7, #12]
 800e1ca:	4911      	ldr	r1, [pc, #68]	@ (800e210 <UARTEx_SetNbDataToProcess+0x94>)
 800e1cc:	5c8a      	ldrb	r2, [r1, r2]
 800e1ce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e1d2:	7b3a      	ldrb	r2, [r7, #12]
 800e1d4:	490f      	ldr	r1, [pc, #60]	@ (800e214 <UARTEx_SetNbDataToProcess+0x98>)
 800e1d6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e1d8:	fb93 f3f2 	sdiv	r3, r3, r2
 800e1dc:	b29a      	uxth	r2, r3
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e1e4:	7bfb      	ldrb	r3, [r7, #15]
 800e1e6:	7b7a      	ldrb	r2, [r7, #13]
 800e1e8:	4909      	ldr	r1, [pc, #36]	@ (800e210 <UARTEx_SetNbDataToProcess+0x94>)
 800e1ea:	5c8a      	ldrb	r2, [r1, r2]
 800e1ec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e1f0:	7b7a      	ldrb	r2, [r7, #13]
 800e1f2:	4908      	ldr	r1, [pc, #32]	@ (800e214 <UARTEx_SetNbDataToProcess+0x98>)
 800e1f4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e1f6:	fb93 f3f2 	sdiv	r3, r3, r2
 800e1fa:	b29a      	uxth	r2, r3
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800e202:	bf00      	nop
 800e204:	3714      	adds	r7, #20
 800e206:	46bd      	mov	sp, r7
 800e208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e20c:	4770      	bx	lr
 800e20e:	bf00      	nop
 800e210:	08011040 	.word	0x08011040
 800e214:	08011048 	.word	0x08011048

0800e218 <atoi>:
 800e218:	220a      	movs	r2, #10
 800e21a:	2100      	movs	r1, #0
 800e21c:	f000 b87a 	b.w	800e314 <strtol>

0800e220 <_strtol_l.isra.0>:
 800e220:	2b24      	cmp	r3, #36	@ 0x24
 800e222:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e226:	4686      	mov	lr, r0
 800e228:	4690      	mov	r8, r2
 800e22a:	d801      	bhi.n	800e230 <_strtol_l.isra.0+0x10>
 800e22c:	2b01      	cmp	r3, #1
 800e22e:	d106      	bne.n	800e23e <_strtol_l.isra.0+0x1e>
 800e230:	f000 ff3c 	bl	800f0ac <__errno>
 800e234:	2316      	movs	r3, #22
 800e236:	6003      	str	r3, [r0, #0]
 800e238:	2000      	movs	r0, #0
 800e23a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e23e:	4834      	ldr	r0, [pc, #208]	@ (800e310 <_strtol_l.isra.0+0xf0>)
 800e240:	460d      	mov	r5, r1
 800e242:	462a      	mov	r2, r5
 800e244:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e248:	5d06      	ldrb	r6, [r0, r4]
 800e24a:	f016 0608 	ands.w	r6, r6, #8
 800e24e:	d1f8      	bne.n	800e242 <_strtol_l.isra.0+0x22>
 800e250:	2c2d      	cmp	r4, #45	@ 0x2d
 800e252:	d110      	bne.n	800e276 <_strtol_l.isra.0+0x56>
 800e254:	782c      	ldrb	r4, [r5, #0]
 800e256:	2601      	movs	r6, #1
 800e258:	1c95      	adds	r5, r2, #2
 800e25a:	f033 0210 	bics.w	r2, r3, #16
 800e25e:	d115      	bne.n	800e28c <_strtol_l.isra.0+0x6c>
 800e260:	2c30      	cmp	r4, #48	@ 0x30
 800e262:	d10d      	bne.n	800e280 <_strtol_l.isra.0+0x60>
 800e264:	782a      	ldrb	r2, [r5, #0]
 800e266:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e26a:	2a58      	cmp	r2, #88	@ 0x58
 800e26c:	d108      	bne.n	800e280 <_strtol_l.isra.0+0x60>
 800e26e:	786c      	ldrb	r4, [r5, #1]
 800e270:	3502      	adds	r5, #2
 800e272:	2310      	movs	r3, #16
 800e274:	e00a      	b.n	800e28c <_strtol_l.isra.0+0x6c>
 800e276:	2c2b      	cmp	r4, #43	@ 0x2b
 800e278:	bf04      	itt	eq
 800e27a:	782c      	ldrbeq	r4, [r5, #0]
 800e27c:	1c95      	addeq	r5, r2, #2
 800e27e:	e7ec      	b.n	800e25a <_strtol_l.isra.0+0x3a>
 800e280:	2b00      	cmp	r3, #0
 800e282:	d1f6      	bne.n	800e272 <_strtol_l.isra.0+0x52>
 800e284:	2c30      	cmp	r4, #48	@ 0x30
 800e286:	bf14      	ite	ne
 800e288:	230a      	movne	r3, #10
 800e28a:	2308      	moveq	r3, #8
 800e28c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800e290:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e294:	2200      	movs	r2, #0
 800e296:	fbbc f9f3 	udiv	r9, ip, r3
 800e29a:	4610      	mov	r0, r2
 800e29c:	fb03 ca19 	mls	sl, r3, r9, ip
 800e2a0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800e2a4:	2f09      	cmp	r7, #9
 800e2a6:	d80f      	bhi.n	800e2c8 <_strtol_l.isra.0+0xa8>
 800e2a8:	463c      	mov	r4, r7
 800e2aa:	42a3      	cmp	r3, r4
 800e2ac:	dd1b      	ble.n	800e2e6 <_strtol_l.isra.0+0xc6>
 800e2ae:	1c57      	adds	r7, r2, #1
 800e2b0:	d007      	beq.n	800e2c2 <_strtol_l.isra.0+0xa2>
 800e2b2:	4581      	cmp	r9, r0
 800e2b4:	d314      	bcc.n	800e2e0 <_strtol_l.isra.0+0xc0>
 800e2b6:	d101      	bne.n	800e2bc <_strtol_l.isra.0+0x9c>
 800e2b8:	45a2      	cmp	sl, r4
 800e2ba:	db11      	blt.n	800e2e0 <_strtol_l.isra.0+0xc0>
 800e2bc:	fb00 4003 	mla	r0, r0, r3, r4
 800e2c0:	2201      	movs	r2, #1
 800e2c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e2c6:	e7eb      	b.n	800e2a0 <_strtol_l.isra.0+0x80>
 800e2c8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800e2cc:	2f19      	cmp	r7, #25
 800e2ce:	d801      	bhi.n	800e2d4 <_strtol_l.isra.0+0xb4>
 800e2d0:	3c37      	subs	r4, #55	@ 0x37
 800e2d2:	e7ea      	b.n	800e2aa <_strtol_l.isra.0+0x8a>
 800e2d4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800e2d8:	2f19      	cmp	r7, #25
 800e2da:	d804      	bhi.n	800e2e6 <_strtol_l.isra.0+0xc6>
 800e2dc:	3c57      	subs	r4, #87	@ 0x57
 800e2de:	e7e4      	b.n	800e2aa <_strtol_l.isra.0+0x8a>
 800e2e0:	f04f 32ff 	mov.w	r2, #4294967295
 800e2e4:	e7ed      	b.n	800e2c2 <_strtol_l.isra.0+0xa2>
 800e2e6:	1c53      	adds	r3, r2, #1
 800e2e8:	d108      	bne.n	800e2fc <_strtol_l.isra.0+0xdc>
 800e2ea:	2322      	movs	r3, #34	@ 0x22
 800e2ec:	f8ce 3000 	str.w	r3, [lr]
 800e2f0:	4660      	mov	r0, ip
 800e2f2:	f1b8 0f00 	cmp.w	r8, #0
 800e2f6:	d0a0      	beq.n	800e23a <_strtol_l.isra.0+0x1a>
 800e2f8:	1e69      	subs	r1, r5, #1
 800e2fa:	e006      	b.n	800e30a <_strtol_l.isra.0+0xea>
 800e2fc:	b106      	cbz	r6, 800e300 <_strtol_l.isra.0+0xe0>
 800e2fe:	4240      	negs	r0, r0
 800e300:	f1b8 0f00 	cmp.w	r8, #0
 800e304:	d099      	beq.n	800e23a <_strtol_l.isra.0+0x1a>
 800e306:	2a00      	cmp	r2, #0
 800e308:	d1f6      	bne.n	800e2f8 <_strtol_l.isra.0+0xd8>
 800e30a:	f8c8 1000 	str.w	r1, [r8]
 800e30e:	e794      	b.n	800e23a <_strtol_l.isra.0+0x1a>
 800e310:	08011051 	.word	0x08011051

0800e314 <strtol>:
 800e314:	4613      	mov	r3, r2
 800e316:	460a      	mov	r2, r1
 800e318:	4601      	mov	r1, r0
 800e31a:	4802      	ldr	r0, [pc, #8]	@ (800e324 <strtol+0x10>)
 800e31c:	6800      	ldr	r0, [r0, #0]
 800e31e:	f7ff bf7f 	b.w	800e220 <_strtol_l.isra.0>
 800e322:	bf00      	nop
 800e324:	24000038 	.word	0x24000038

0800e328 <__cvt>:
 800e328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e32a:	ed2d 8b02 	vpush	{d8}
 800e32e:	eeb0 8b40 	vmov.f64	d8, d0
 800e332:	b085      	sub	sp, #20
 800e334:	4617      	mov	r7, r2
 800e336:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800e338:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e33a:	ee18 2a90 	vmov	r2, s17
 800e33e:	f025 0520 	bic.w	r5, r5, #32
 800e342:	2a00      	cmp	r2, #0
 800e344:	bfb6      	itet	lt
 800e346:	222d      	movlt	r2, #45	@ 0x2d
 800e348:	2200      	movge	r2, #0
 800e34a:	eeb1 8b40 	vneglt.f64	d8, d0
 800e34e:	2d46      	cmp	r5, #70	@ 0x46
 800e350:	460c      	mov	r4, r1
 800e352:	701a      	strb	r2, [r3, #0]
 800e354:	d004      	beq.n	800e360 <__cvt+0x38>
 800e356:	2d45      	cmp	r5, #69	@ 0x45
 800e358:	d100      	bne.n	800e35c <__cvt+0x34>
 800e35a:	3401      	adds	r4, #1
 800e35c:	2102      	movs	r1, #2
 800e35e:	e000      	b.n	800e362 <__cvt+0x3a>
 800e360:	2103      	movs	r1, #3
 800e362:	ab03      	add	r3, sp, #12
 800e364:	9301      	str	r3, [sp, #4]
 800e366:	ab02      	add	r3, sp, #8
 800e368:	9300      	str	r3, [sp, #0]
 800e36a:	4622      	mov	r2, r4
 800e36c:	4633      	mov	r3, r6
 800e36e:	eeb0 0b48 	vmov.f64	d0, d8
 800e372:	f000 ff7d 	bl	800f270 <_dtoa_r>
 800e376:	2d47      	cmp	r5, #71	@ 0x47
 800e378:	d114      	bne.n	800e3a4 <__cvt+0x7c>
 800e37a:	07fb      	lsls	r3, r7, #31
 800e37c:	d50a      	bpl.n	800e394 <__cvt+0x6c>
 800e37e:	1902      	adds	r2, r0, r4
 800e380:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e388:	bf08      	it	eq
 800e38a:	9203      	streq	r2, [sp, #12]
 800e38c:	2130      	movs	r1, #48	@ 0x30
 800e38e:	9b03      	ldr	r3, [sp, #12]
 800e390:	4293      	cmp	r3, r2
 800e392:	d319      	bcc.n	800e3c8 <__cvt+0xa0>
 800e394:	9b03      	ldr	r3, [sp, #12]
 800e396:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e398:	1a1b      	subs	r3, r3, r0
 800e39a:	6013      	str	r3, [r2, #0]
 800e39c:	b005      	add	sp, #20
 800e39e:	ecbd 8b02 	vpop	{d8}
 800e3a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e3a4:	2d46      	cmp	r5, #70	@ 0x46
 800e3a6:	eb00 0204 	add.w	r2, r0, r4
 800e3aa:	d1e9      	bne.n	800e380 <__cvt+0x58>
 800e3ac:	7803      	ldrb	r3, [r0, #0]
 800e3ae:	2b30      	cmp	r3, #48	@ 0x30
 800e3b0:	d107      	bne.n	800e3c2 <__cvt+0x9a>
 800e3b2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e3b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3ba:	bf1c      	itt	ne
 800e3bc:	f1c4 0401 	rsbne	r4, r4, #1
 800e3c0:	6034      	strne	r4, [r6, #0]
 800e3c2:	6833      	ldr	r3, [r6, #0]
 800e3c4:	441a      	add	r2, r3
 800e3c6:	e7db      	b.n	800e380 <__cvt+0x58>
 800e3c8:	1c5c      	adds	r4, r3, #1
 800e3ca:	9403      	str	r4, [sp, #12]
 800e3cc:	7019      	strb	r1, [r3, #0]
 800e3ce:	e7de      	b.n	800e38e <__cvt+0x66>

0800e3d0 <__exponent>:
 800e3d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e3d2:	2900      	cmp	r1, #0
 800e3d4:	bfba      	itte	lt
 800e3d6:	4249      	neglt	r1, r1
 800e3d8:	232d      	movlt	r3, #45	@ 0x2d
 800e3da:	232b      	movge	r3, #43	@ 0x2b
 800e3dc:	2909      	cmp	r1, #9
 800e3de:	7002      	strb	r2, [r0, #0]
 800e3e0:	7043      	strb	r3, [r0, #1]
 800e3e2:	dd29      	ble.n	800e438 <__exponent+0x68>
 800e3e4:	f10d 0307 	add.w	r3, sp, #7
 800e3e8:	461d      	mov	r5, r3
 800e3ea:	270a      	movs	r7, #10
 800e3ec:	461a      	mov	r2, r3
 800e3ee:	fbb1 f6f7 	udiv	r6, r1, r7
 800e3f2:	fb07 1416 	mls	r4, r7, r6, r1
 800e3f6:	3430      	adds	r4, #48	@ 0x30
 800e3f8:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e3fc:	460c      	mov	r4, r1
 800e3fe:	2c63      	cmp	r4, #99	@ 0x63
 800e400:	f103 33ff 	add.w	r3, r3, #4294967295
 800e404:	4631      	mov	r1, r6
 800e406:	dcf1      	bgt.n	800e3ec <__exponent+0x1c>
 800e408:	3130      	adds	r1, #48	@ 0x30
 800e40a:	1e94      	subs	r4, r2, #2
 800e40c:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e410:	1c41      	adds	r1, r0, #1
 800e412:	4623      	mov	r3, r4
 800e414:	42ab      	cmp	r3, r5
 800e416:	d30a      	bcc.n	800e42e <__exponent+0x5e>
 800e418:	f10d 0309 	add.w	r3, sp, #9
 800e41c:	1a9b      	subs	r3, r3, r2
 800e41e:	42ac      	cmp	r4, r5
 800e420:	bf88      	it	hi
 800e422:	2300      	movhi	r3, #0
 800e424:	3302      	adds	r3, #2
 800e426:	4403      	add	r3, r0
 800e428:	1a18      	subs	r0, r3, r0
 800e42a:	b003      	add	sp, #12
 800e42c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e42e:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e432:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e436:	e7ed      	b.n	800e414 <__exponent+0x44>
 800e438:	2330      	movs	r3, #48	@ 0x30
 800e43a:	3130      	adds	r1, #48	@ 0x30
 800e43c:	7083      	strb	r3, [r0, #2]
 800e43e:	70c1      	strb	r1, [r0, #3]
 800e440:	1d03      	adds	r3, r0, #4
 800e442:	e7f1      	b.n	800e428 <__exponent+0x58>
 800e444:	0000      	movs	r0, r0
	...

0800e448 <_printf_float>:
 800e448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e44c:	b08d      	sub	sp, #52	@ 0x34
 800e44e:	460c      	mov	r4, r1
 800e450:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e454:	4616      	mov	r6, r2
 800e456:	461f      	mov	r7, r3
 800e458:	4605      	mov	r5, r0
 800e45a:	f000 fddd 	bl	800f018 <_localeconv_r>
 800e45e:	f8d0 b000 	ldr.w	fp, [r0]
 800e462:	4658      	mov	r0, fp
 800e464:	f7f1 ff9c 	bl	80003a0 <strlen>
 800e468:	2300      	movs	r3, #0
 800e46a:	930a      	str	r3, [sp, #40]	@ 0x28
 800e46c:	f8d8 3000 	ldr.w	r3, [r8]
 800e470:	f894 9018 	ldrb.w	r9, [r4, #24]
 800e474:	6822      	ldr	r2, [r4, #0]
 800e476:	9005      	str	r0, [sp, #20]
 800e478:	3307      	adds	r3, #7
 800e47a:	f023 0307 	bic.w	r3, r3, #7
 800e47e:	f103 0108 	add.w	r1, r3, #8
 800e482:	f8c8 1000 	str.w	r1, [r8]
 800e486:	ed93 0b00 	vldr	d0, [r3]
 800e48a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800e6e8 <_printf_float+0x2a0>
 800e48e:	eeb0 7bc0 	vabs.f64	d7, d0
 800e492:	eeb4 7b46 	vcmp.f64	d7, d6
 800e496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e49a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800e49e:	dd24      	ble.n	800e4ea <_printf_float+0xa2>
 800e4a0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e4a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4a8:	d502      	bpl.n	800e4b0 <_printf_float+0x68>
 800e4aa:	232d      	movs	r3, #45	@ 0x2d
 800e4ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e4b0:	498f      	ldr	r1, [pc, #572]	@ (800e6f0 <_printf_float+0x2a8>)
 800e4b2:	4b90      	ldr	r3, [pc, #576]	@ (800e6f4 <_printf_float+0x2ac>)
 800e4b4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800e4b8:	bf8c      	ite	hi
 800e4ba:	4688      	movhi	r8, r1
 800e4bc:	4698      	movls	r8, r3
 800e4be:	f022 0204 	bic.w	r2, r2, #4
 800e4c2:	2303      	movs	r3, #3
 800e4c4:	6123      	str	r3, [r4, #16]
 800e4c6:	6022      	str	r2, [r4, #0]
 800e4c8:	f04f 0a00 	mov.w	sl, #0
 800e4cc:	9700      	str	r7, [sp, #0]
 800e4ce:	4633      	mov	r3, r6
 800e4d0:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e4d2:	4621      	mov	r1, r4
 800e4d4:	4628      	mov	r0, r5
 800e4d6:	f000 f9d1 	bl	800e87c <_printf_common>
 800e4da:	3001      	adds	r0, #1
 800e4dc:	f040 8089 	bne.w	800e5f2 <_printf_float+0x1aa>
 800e4e0:	f04f 30ff 	mov.w	r0, #4294967295
 800e4e4:	b00d      	add	sp, #52	@ 0x34
 800e4e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4ea:	eeb4 0b40 	vcmp.f64	d0, d0
 800e4ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4f2:	d709      	bvc.n	800e508 <_printf_float+0xc0>
 800e4f4:	ee10 3a90 	vmov	r3, s1
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	bfbc      	itt	lt
 800e4fc:	232d      	movlt	r3, #45	@ 0x2d
 800e4fe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e502:	497d      	ldr	r1, [pc, #500]	@ (800e6f8 <_printf_float+0x2b0>)
 800e504:	4b7d      	ldr	r3, [pc, #500]	@ (800e6fc <_printf_float+0x2b4>)
 800e506:	e7d5      	b.n	800e4b4 <_printf_float+0x6c>
 800e508:	6863      	ldr	r3, [r4, #4]
 800e50a:	1c59      	adds	r1, r3, #1
 800e50c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800e510:	d139      	bne.n	800e586 <_printf_float+0x13e>
 800e512:	2306      	movs	r3, #6
 800e514:	6063      	str	r3, [r4, #4]
 800e516:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800e51a:	2300      	movs	r3, #0
 800e51c:	6022      	str	r2, [r4, #0]
 800e51e:	9303      	str	r3, [sp, #12]
 800e520:	ab0a      	add	r3, sp, #40	@ 0x28
 800e522:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800e526:	ab09      	add	r3, sp, #36	@ 0x24
 800e528:	9300      	str	r3, [sp, #0]
 800e52a:	6861      	ldr	r1, [r4, #4]
 800e52c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e530:	4628      	mov	r0, r5
 800e532:	f7ff fef9 	bl	800e328 <__cvt>
 800e536:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e53a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e53c:	4680      	mov	r8, r0
 800e53e:	d129      	bne.n	800e594 <_printf_float+0x14c>
 800e540:	1cc8      	adds	r0, r1, #3
 800e542:	db02      	blt.n	800e54a <_printf_float+0x102>
 800e544:	6863      	ldr	r3, [r4, #4]
 800e546:	4299      	cmp	r1, r3
 800e548:	dd41      	ble.n	800e5ce <_printf_float+0x186>
 800e54a:	f1a9 0902 	sub.w	r9, r9, #2
 800e54e:	fa5f f989 	uxtb.w	r9, r9
 800e552:	3901      	subs	r1, #1
 800e554:	464a      	mov	r2, r9
 800e556:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e55a:	9109      	str	r1, [sp, #36]	@ 0x24
 800e55c:	f7ff ff38 	bl	800e3d0 <__exponent>
 800e560:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e562:	1813      	adds	r3, r2, r0
 800e564:	2a01      	cmp	r2, #1
 800e566:	4682      	mov	sl, r0
 800e568:	6123      	str	r3, [r4, #16]
 800e56a:	dc02      	bgt.n	800e572 <_printf_float+0x12a>
 800e56c:	6822      	ldr	r2, [r4, #0]
 800e56e:	07d2      	lsls	r2, r2, #31
 800e570:	d501      	bpl.n	800e576 <_printf_float+0x12e>
 800e572:	3301      	adds	r3, #1
 800e574:	6123      	str	r3, [r4, #16]
 800e576:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d0a6      	beq.n	800e4cc <_printf_float+0x84>
 800e57e:	232d      	movs	r3, #45	@ 0x2d
 800e580:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e584:	e7a2      	b.n	800e4cc <_printf_float+0x84>
 800e586:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e58a:	d1c4      	bne.n	800e516 <_printf_float+0xce>
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d1c2      	bne.n	800e516 <_printf_float+0xce>
 800e590:	2301      	movs	r3, #1
 800e592:	e7bf      	b.n	800e514 <_printf_float+0xcc>
 800e594:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800e598:	d9db      	bls.n	800e552 <_printf_float+0x10a>
 800e59a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800e59e:	d118      	bne.n	800e5d2 <_printf_float+0x18a>
 800e5a0:	2900      	cmp	r1, #0
 800e5a2:	6863      	ldr	r3, [r4, #4]
 800e5a4:	dd0b      	ble.n	800e5be <_printf_float+0x176>
 800e5a6:	6121      	str	r1, [r4, #16]
 800e5a8:	b913      	cbnz	r3, 800e5b0 <_printf_float+0x168>
 800e5aa:	6822      	ldr	r2, [r4, #0]
 800e5ac:	07d0      	lsls	r0, r2, #31
 800e5ae:	d502      	bpl.n	800e5b6 <_printf_float+0x16e>
 800e5b0:	3301      	adds	r3, #1
 800e5b2:	440b      	add	r3, r1
 800e5b4:	6123      	str	r3, [r4, #16]
 800e5b6:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e5b8:	f04f 0a00 	mov.w	sl, #0
 800e5bc:	e7db      	b.n	800e576 <_printf_float+0x12e>
 800e5be:	b913      	cbnz	r3, 800e5c6 <_printf_float+0x17e>
 800e5c0:	6822      	ldr	r2, [r4, #0]
 800e5c2:	07d2      	lsls	r2, r2, #31
 800e5c4:	d501      	bpl.n	800e5ca <_printf_float+0x182>
 800e5c6:	3302      	adds	r3, #2
 800e5c8:	e7f4      	b.n	800e5b4 <_printf_float+0x16c>
 800e5ca:	2301      	movs	r3, #1
 800e5cc:	e7f2      	b.n	800e5b4 <_printf_float+0x16c>
 800e5ce:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800e5d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e5d4:	4299      	cmp	r1, r3
 800e5d6:	db05      	blt.n	800e5e4 <_printf_float+0x19c>
 800e5d8:	6823      	ldr	r3, [r4, #0]
 800e5da:	6121      	str	r1, [r4, #16]
 800e5dc:	07d8      	lsls	r0, r3, #31
 800e5de:	d5ea      	bpl.n	800e5b6 <_printf_float+0x16e>
 800e5e0:	1c4b      	adds	r3, r1, #1
 800e5e2:	e7e7      	b.n	800e5b4 <_printf_float+0x16c>
 800e5e4:	2900      	cmp	r1, #0
 800e5e6:	bfd4      	ite	le
 800e5e8:	f1c1 0202 	rsble	r2, r1, #2
 800e5ec:	2201      	movgt	r2, #1
 800e5ee:	4413      	add	r3, r2
 800e5f0:	e7e0      	b.n	800e5b4 <_printf_float+0x16c>
 800e5f2:	6823      	ldr	r3, [r4, #0]
 800e5f4:	055a      	lsls	r2, r3, #21
 800e5f6:	d407      	bmi.n	800e608 <_printf_float+0x1c0>
 800e5f8:	6923      	ldr	r3, [r4, #16]
 800e5fa:	4642      	mov	r2, r8
 800e5fc:	4631      	mov	r1, r6
 800e5fe:	4628      	mov	r0, r5
 800e600:	47b8      	blx	r7
 800e602:	3001      	adds	r0, #1
 800e604:	d12a      	bne.n	800e65c <_printf_float+0x214>
 800e606:	e76b      	b.n	800e4e0 <_printf_float+0x98>
 800e608:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800e60c:	f240 80e0 	bls.w	800e7d0 <_printf_float+0x388>
 800e610:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800e614:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e61c:	d133      	bne.n	800e686 <_printf_float+0x23e>
 800e61e:	4a38      	ldr	r2, [pc, #224]	@ (800e700 <_printf_float+0x2b8>)
 800e620:	2301      	movs	r3, #1
 800e622:	4631      	mov	r1, r6
 800e624:	4628      	mov	r0, r5
 800e626:	47b8      	blx	r7
 800e628:	3001      	adds	r0, #1
 800e62a:	f43f af59 	beq.w	800e4e0 <_printf_float+0x98>
 800e62e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e632:	4543      	cmp	r3, r8
 800e634:	db02      	blt.n	800e63c <_printf_float+0x1f4>
 800e636:	6823      	ldr	r3, [r4, #0]
 800e638:	07d8      	lsls	r0, r3, #31
 800e63a:	d50f      	bpl.n	800e65c <_printf_float+0x214>
 800e63c:	9b05      	ldr	r3, [sp, #20]
 800e63e:	465a      	mov	r2, fp
 800e640:	4631      	mov	r1, r6
 800e642:	4628      	mov	r0, r5
 800e644:	47b8      	blx	r7
 800e646:	3001      	adds	r0, #1
 800e648:	f43f af4a 	beq.w	800e4e0 <_printf_float+0x98>
 800e64c:	f04f 0900 	mov.w	r9, #0
 800e650:	f108 38ff 	add.w	r8, r8, #4294967295
 800e654:	f104 0a1a 	add.w	sl, r4, #26
 800e658:	45c8      	cmp	r8, r9
 800e65a:	dc09      	bgt.n	800e670 <_printf_float+0x228>
 800e65c:	6823      	ldr	r3, [r4, #0]
 800e65e:	079b      	lsls	r3, r3, #30
 800e660:	f100 8107 	bmi.w	800e872 <_printf_float+0x42a>
 800e664:	68e0      	ldr	r0, [r4, #12]
 800e666:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e668:	4298      	cmp	r0, r3
 800e66a:	bfb8      	it	lt
 800e66c:	4618      	movlt	r0, r3
 800e66e:	e739      	b.n	800e4e4 <_printf_float+0x9c>
 800e670:	2301      	movs	r3, #1
 800e672:	4652      	mov	r2, sl
 800e674:	4631      	mov	r1, r6
 800e676:	4628      	mov	r0, r5
 800e678:	47b8      	blx	r7
 800e67a:	3001      	adds	r0, #1
 800e67c:	f43f af30 	beq.w	800e4e0 <_printf_float+0x98>
 800e680:	f109 0901 	add.w	r9, r9, #1
 800e684:	e7e8      	b.n	800e658 <_printf_float+0x210>
 800e686:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e688:	2b00      	cmp	r3, #0
 800e68a:	dc3b      	bgt.n	800e704 <_printf_float+0x2bc>
 800e68c:	4a1c      	ldr	r2, [pc, #112]	@ (800e700 <_printf_float+0x2b8>)
 800e68e:	2301      	movs	r3, #1
 800e690:	4631      	mov	r1, r6
 800e692:	4628      	mov	r0, r5
 800e694:	47b8      	blx	r7
 800e696:	3001      	adds	r0, #1
 800e698:	f43f af22 	beq.w	800e4e0 <_printf_float+0x98>
 800e69c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e6a0:	ea59 0303 	orrs.w	r3, r9, r3
 800e6a4:	d102      	bne.n	800e6ac <_printf_float+0x264>
 800e6a6:	6823      	ldr	r3, [r4, #0]
 800e6a8:	07d9      	lsls	r1, r3, #31
 800e6aa:	d5d7      	bpl.n	800e65c <_printf_float+0x214>
 800e6ac:	9b05      	ldr	r3, [sp, #20]
 800e6ae:	465a      	mov	r2, fp
 800e6b0:	4631      	mov	r1, r6
 800e6b2:	4628      	mov	r0, r5
 800e6b4:	47b8      	blx	r7
 800e6b6:	3001      	adds	r0, #1
 800e6b8:	f43f af12 	beq.w	800e4e0 <_printf_float+0x98>
 800e6bc:	f04f 0a00 	mov.w	sl, #0
 800e6c0:	f104 0b1a 	add.w	fp, r4, #26
 800e6c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e6c6:	425b      	negs	r3, r3
 800e6c8:	4553      	cmp	r3, sl
 800e6ca:	dc01      	bgt.n	800e6d0 <_printf_float+0x288>
 800e6cc:	464b      	mov	r3, r9
 800e6ce:	e794      	b.n	800e5fa <_printf_float+0x1b2>
 800e6d0:	2301      	movs	r3, #1
 800e6d2:	465a      	mov	r2, fp
 800e6d4:	4631      	mov	r1, r6
 800e6d6:	4628      	mov	r0, r5
 800e6d8:	47b8      	blx	r7
 800e6da:	3001      	adds	r0, #1
 800e6dc:	f43f af00 	beq.w	800e4e0 <_printf_float+0x98>
 800e6e0:	f10a 0a01 	add.w	sl, sl, #1
 800e6e4:	e7ee      	b.n	800e6c4 <_printf_float+0x27c>
 800e6e6:	bf00      	nop
 800e6e8:	ffffffff 	.word	0xffffffff
 800e6ec:	7fefffff 	.word	0x7fefffff
 800e6f0:	08011155 	.word	0x08011155
 800e6f4:	08011151 	.word	0x08011151
 800e6f8:	0801115d 	.word	0x0801115d
 800e6fc:	08011159 	.word	0x08011159
 800e700:	08011161 	.word	0x08011161
 800e704:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e706:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e70a:	4553      	cmp	r3, sl
 800e70c:	bfa8      	it	ge
 800e70e:	4653      	movge	r3, sl
 800e710:	2b00      	cmp	r3, #0
 800e712:	4699      	mov	r9, r3
 800e714:	dc37      	bgt.n	800e786 <_printf_float+0x33e>
 800e716:	2300      	movs	r3, #0
 800e718:	9307      	str	r3, [sp, #28]
 800e71a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e71e:	f104 021a 	add.w	r2, r4, #26
 800e722:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e724:	9907      	ldr	r1, [sp, #28]
 800e726:	9306      	str	r3, [sp, #24]
 800e728:	eba3 0309 	sub.w	r3, r3, r9
 800e72c:	428b      	cmp	r3, r1
 800e72e:	dc31      	bgt.n	800e794 <_printf_float+0x34c>
 800e730:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e732:	459a      	cmp	sl, r3
 800e734:	dc3b      	bgt.n	800e7ae <_printf_float+0x366>
 800e736:	6823      	ldr	r3, [r4, #0]
 800e738:	07da      	lsls	r2, r3, #31
 800e73a:	d438      	bmi.n	800e7ae <_printf_float+0x366>
 800e73c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e73e:	ebaa 0903 	sub.w	r9, sl, r3
 800e742:	9b06      	ldr	r3, [sp, #24]
 800e744:	ebaa 0303 	sub.w	r3, sl, r3
 800e748:	4599      	cmp	r9, r3
 800e74a:	bfa8      	it	ge
 800e74c:	4699      	movge	r9, r3
 800e74e:	f1b9 0f00 	cmp.w	r9, #0
 800e752:	dc34      	bgt.n	800e7be <_printf_float+0x376>
 800e754:	f04f 0800 	mov.w	r8, #0
 800e758:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e75c:	f104 0b1a 	add.w	fp, r4, #26
 800e760:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e762:	ebaa 0303 	sub.w	r3, sl, r3
 800e766:	eba3 0309 	sub.w	r3, r3, r9
 800e76a:	4543      	cmp	r3, r8
 800e76c:	f77f af76 	ble.w	800e65c <_printf_float+0x214>
 800e770:	2301      	movs	r3, #1
 800e772:	465a      	mov	r2, fp
 800e774:	4631      	mov	r1, r6
 800e776:	4628      	mov	r0, r5
 800e778:	47b8      	blx	r7
 800e77a:	3001      	adds	r0, #1
 800e77c:	f43f aeb0 	beq.w	800e4e0 <_printf_float+0x98>
 800e780:	f108 0801 	add.w	r8, r8, #1
 800e784:	e7ec      	b.n	800e760 <_printf_float+0x318>
 800e786:	4642      	mov	r2, r8
 800e788:	4631      	mov	r1, r6
 800e78a:	4628      	mov	r0, r5
 800e78c:	47b8      	blx	r7
 800e78e:	3001      	adds	r0, #1
 800e790:	d1c1      	bne.n	800e716 <_printf_float+0x2ce>
 800e792:	e6a5      	b.n	800e4e0 <_printf_float+0x98>
 800e794:	2301      	movs	r3, #1
 800e796:	4631      	mov	r1, r6
 800e798:	4628      	mov	r0, r5
 800e79a:	9206      	str	r2, [sp, #24]
 800e79c:	47b8      	blx	r7
 800e79e:	3001      	adds	r0, #1
 800e7a0:	f43f ae9e 	beq.w	800e4e0 <_printf_float+0x98>
 800e7a4:	9b07      	ldr	r3, [sp, #28]
 800e7a6:	9a06      	ldr	r2, [sp, #24]
 800e7a8:	3301      	adds	r3, #1
 800e7aa:	9307      	str	r3, [sp, #28]
 800e7ac:	e7b9      	b.n	800e722 <_printf_float+0x2da>
 800e7ae:	9b05      	ldr	r3, [sp, #20]
 800e7b0:	465a      	mov	r2, fp
 800e7b2:	4631      	mov	r1, r6
 800e7b4:	4628      	mov	r0, r5
 800e7b6:	47b8      	blx	r7
 800e7b8:	3001      	adds	r0, #1
 800e7ba:	d1bf      	bne.n	800e73c <_printf_float+0x2f4>
 800e7bc:	e690      	b.n	800e4e0 <_printf_float+0x98>
 800e7be:	9a06      	ldr	r2, [sp, #24]
 800e7c0:	464b      	mov	r3, r9
 800e7c2:	4442      	add	r2, r8
 800e7c4:	4631      	mov	r1, r6
 800e7c6:	4628      	mov	r0, r5
 800e7c8:	47b8      	blx	r7
 800e7ca:	3001      	adds	r0, #1
 800e7cc:	d1c2      	bne.n	800e754 <_printf_float+0x30c>
 800e7ce:	e687      	b.n	800e4e0 <_printf_float+0x98>
 800e7d0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800e7d4:	f1b9 0f01 	cmp.w	r9, #1
 800e7d8:	dc01      	bgt.n	800e7de <_printf_float+0x396>
 800e7da:	07db      	lsls	r3, r3, #31
 800e7dc:	d536      	bpl.n	800e84c <_printf_float+0x404>
 800e7de:	2301      	movs	r3, #1
 800e7e0:	4642      	mov	r2, r8
 800e7e2:	4631      	mov	r1, r6
 800e7e4:	4628      	mov	r0, r5
 800e7e6:	47b8      	blx	r7
 800e7e8:	3001      	adds	r0, #1
 800e7ea:	f43f ae79 	beq.w	800e4e0 <_printf_float+0x98>
 800e7ee:	9b05      	ldr	r3, [sp, #20]
 800e7f0:	465a      	mov	r2, fp
 800e7f2:	4631      	mov	r1, r6
 800e7f4:	4628      	mov	r0, r5
 800e7f6:	47b8      	blx	r7
 800e7f8:	3001      	adds	r0, #1
 800e7fa:	f43f ae71 	beq.w	800e4e0 <_printf_float+0x98>
 800e7fe:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800e802:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e80a:	f109 39ff 	add.w	r9, r9, #4294967295
 800e80e:	d018      	beq.n	800e842 <_printf_float+0x3fa>
 800e810:	464b      	mov	r3, r9
 800e812:	f108 0201 	add.w	r2, r8, #1
 800e816:	4631      	mov	r1, r6
 800e818:	4628      	mov	r0, r5
 800e81a:	47b8      	blx	r7
 800e81c:	3001      	adds	r0, #1
 800e81e:	d10c      	bne.n	800e83a <_printf_float+0x3f2>
 800e820:	e65e      	b.n	800e4e0 <_printf_float+0x98>
 800e822:	2301      	movs	r3, #1
 800e824:	465a      	mov	r2, fp
 800e826:	4631      	mov	r1, r6
 800e828:	4628      	mov	r0, r5
 800e82a:	47b8      	blx	r7
 800e82c:	3001      	adds	r0, #1
 800e82e:	f43f ae57 	beq.w	800e4e0 <_printf_float+0x98>
 800e832:	f108 0801 	add.w	r8, r8, #1
 800e836:	45c8      	cmp	r8, r9
 800e838:	dbf3      	blt.n	800e822 <_printf_float+0x3da>
 800e83a:	4653      	mov	r3, sl
 800e83c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e840:	e6dc      	b.n	800e5fc <_printf_float+0x1b4>
 800e842:	f04f 0800 	mov.w	r8, #0
 800e846:	f104 0b1a 	add.w	fp, r4, #26
 800e84a:	e7f4      	b.n	800e836 <_printf_float+0x3ee>
 800e84c:	2301      	movs	r3, #1
 800e84e:	4642      	mov	r2, r8
 800e850:	e7e1      	b.n	800e816 <_printf_float+0x3ce>
 800e852:	2301      	movs	r3, #1
 800e854:	464a      	mov	r2, r9
 800e856:	4631      	mov	r1, r6
 800e858:	4628      	mov	r0, r5
 800e85a:	47b8      	blx	r7
 800e85c:	3001      	adds	r0, #1
 800e85e:	f43f ae3f 	beq.w	800e4e0 <_printf_float+0x98>
 800e862:	f108 0801 	add.w	r8, r8, #1
 800e866:	68e3      	ldr	r3, [r4, #12]
 800e868:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e86a:	1a5b      	subs	r3, r3, r1
 800e86c:	4543      	cmp	r3, r8
 800e86e:	dcf0      	bgt.n	800e852 <_printf_float+0x40a>
 800e870:	e6f8      	b.n	800e664 <_printf_float+0x21c>
 800e872:	f04f 0800 	mov.w	r8, #0
 800e876:	f104 0919 	add.w	r9, r4, #25
 800e87a:	e7f4      	b.n	800e866 <_printf_float+0x41e>

0800e87c <_printf_common>:
 800e87c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e880:	4616      	mov	r6, r2
 800e882:	4698      	mov	r8, r3
 800e884:	688a      	ldr	r2, [r1, #8]
 800e886:	690b      	ldr	r3, [r1, #16]
 800e888:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e88c:	4293      	cmp	r3, r2
 800e88e:	bfb8      	it	lt
 800e890:	4613      	movlt	r3, r2
 800e892:	6033      	str	r3, [r6, #0]
 800e894:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e898:	4607      	mov	r7, r0
 800e89a:	460c      	mov	r4, r1
 800e89c:	b10a      	cbz	r2, 800e8a2 <_printf_common+0x26>
 800e89e:	3301      	adds	r3, #1
 800e8a0:	6033      	str	r3, [r6, #0]
 800e8a2:	6823      	ldr	r3, [r4, #0]
 800e8a4:	0699      	lsls	r1, r3, #26
 800e8a6:	bf42      	ittt	mi
 800e8a8:	6833      	ldrmi	r3, [r6, #0]
 800e8aa:	3302      	addmi	r3, #2
 800e8ac:	6033      	strmi	r3, [r6, #0]
 800e8ae:	6825      	ldr	r5, [r4, #0]
 800e8b0:	f015 0506 	ands.w	r5, r5, #6
 800e8b4:	d106      	bne.n	800e8c4 <_printf_common+0x48>
 800e8b6:	f104 0a19 	add.w	sl, r4, #25
 800e8ba:	68e3      	ldr	r3, [r4, #12]
 800e8bc:	6832      	ldr	r2, [r6, #0]
 800e8be:	1a9b      	subs	r3, r3, r2
 800e8c0:	42ab      	cmp	r3, r5
 800e8c2:	dc26      	bgt.n	800e912 <_printf_common+0x96>
 800e8c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e8c8:	6822      	ldr	r2, [r4, #0]
 800e8ca:	3b00      	subs	r3, #0
 800e8cc:	bf18      	it	ne
 800e8ce:	2301      	movne	r3, #1
 800e8d0:	0692      	lsls	r2, r2, #26
 800e8d2:	d42b      	bmi.n	800e92c <_printf_common+0xb0>
 800e8d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e8d8:	4641      	mov	r1, r8
 800e8da:	4638      	mov	r0, r7
 800e8dc:	47c8      	blx	r9
 800e8de:	3001      	adds	r0, #1
 800e8e0:	d01e      	beq.n	800e920 <_printf_common+0xa4>
 800e8e2:	6823      	ldr	r3, [r4, #0]
 800e8e4:	6922      	ldr	r2, [r4, #16]
 800e8e6:	f003 0306 	and.w	r3, r3, #6
 800e8ea:	2b04      	cmp	r3, #4
 800e8ec:	bf02      	ittt	eq
 800e8ee:	68e5      	ldreq	r5, [r4, #12]
 800e8f0:	6833      	ldreq	r3, [r6, #0]
 800e8f2:	1aed      	subeq	r5, r5, r3
 800e8f4:	68a3      	ldr	r3, [r4, #8]
 800e8f6:	bf0c      	ite	eq
 800e8f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e8fc:	2500      	movne	r5, #0
 800e8fe:	4293      	cmp	r3, r2
 800e900:	bfc4      	itt	gt
 800e902:	1a9b      	subgt	r3, r3, r2
 800e904:	18ed      	addgt	r5, r5, r3
 800e906:	2600      	movs	r6, #0
 800e908:	341a      	adds	r4, #26
 800e90a:	42b5      	cmp	r5, r6
 800e90c:	d11a      	bne.n	800e944 <_printf_common+0xc8>
 800e90e:	2000      	movs	r0, #0
 800e910:	e008      	b.n	800e924 <_printf_common+0xa8>
 800e912:	2301      	movs	r3, #1
 800e914:	4652      	mov	r2, sl
 800e916:	4641      	mov	r1, r8
 800e918:	4638      	mov	r0, r7
 800e91a:	47c8      	blx	r9
 800e91c:	3001      	adds	r0, #1
 800e91e:	d103      	bne.n	800e928 <_printf_common+0xac>
 800e920:	f04f 30ff 	mov.w	r0, #4294967295
 800e924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e928:	3501      	adds	r5, #1
 800e92a:	e7c6      	b.n	800e8ba <_printf_common+0x3e>
 800e92c:	18e1      	adds	r1, r4, r3
 800e92e:	1c5a      	adds	r2, r3, #1
 800e930:	2030      	movs	r0, #48	@ 0x30
 800e932:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e936:	4422      	add	r2, r4
 800e938:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e93c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e940:	3302      	adds	r3, #2
 800e942:	e7c7      	b.n	800e8d4 <_printf_common+0x58>
 800e944:	2301      	movs	r3, #1
 800e946:	4622      	mov	r2, r4
 800e948:	4641      	mov	r1, r8
 800e94a:	4638      	mov	r0, r7
 800e94c:	47c8      	blx	r9
 800e94e:	3001      	adds	r0, #1
 800e950:	d0e6      	beq.n	800e920 <_printf_common+0xa4>
 800e952:	3601      	adds	r6, #1
 800e954:	e7d9      	b.n	800e90a <_printf_common+0x8e>
	...

0800e958 <_printf_i>:
 800e958:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e95c:	7e0f      	ldrb	r7, [r1, #24]
 800e95e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e960:	2f78      	cmp	r7, #120	@ 0x78
 800e962:	4691      	mov	r9, r2
 800e964:	4680      	mov	r8, r0
 800e966:	460c      	mov	r4, r1
 800e968:	469a      	mov	sl, r3
 800e96a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e96e:	d807      	bhi.n	800e980 <_printf_i+0x28>
 800e970:	2f62      	cmp	r7, #98	@ 0x62
 800e972:	d80a      	bhi.n	800e98a <_printf_i+0x32>
 800e974:	2f00      	cmp	r7, #0
 800e976:	f000 80d1 	beq.w	800eb1c <_printf_i+0x1c4>
 800e97a:	2f58      	cmp	r7, #88	@ 0x58
 800e97c:	f000 80b8 	beq.w	800eaf0 <_printf_i+0x198>
 800e980:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e984:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e988:	e03a      	b.n	800ea00 <_printf_i+0xa8>
 800e98a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e98e:	2b15      	cmp	r3, #21
 800e990:	d8f6      	bhi.n	800e980 <_printf_i+0x28>
 800e992:	a101      	add	r1, pc, #4	@ (adr r1, 800e998 <_printf_i+0x40>)
 800e994:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e998:	0800e9f1 	.word	0x0800e9f1
 800e99c:	0800ea05 	.word	0x0800ea05
 800e9a0:	0800e981 	.word	0x0800e981
 800e9a4:	0800e981 	.word	0x0800e981
 800e9a8:	0800e981 	.word	0x0800e981
 800e9ac:	0800e981 	.word	0x0800e981
 800e9b0:	0800ea05 	.word	0x0800ea05
 800e9b4:	0800e981 	.word	0x0800e981
 800e9b8:	0800e981 	.word	0x0800e981
 800e9bc:	0800e981 	.word	0x0800e981
 800e9c0:	0800e981 	.word	0x0800e981
 800e9c4:	0800eb03 	.word	0x0800eb03
 800e9c8:	0800ea2f 	.word	0x0800ea2f
 800e9cc:	0800eabd 	.word	0x0800eabd
 800e9d0:	0800e981 	.word	0x0800e981
 800e9d4:	0800e981 	.word	0x0800e981
 800e9d8:	0800eb25 	.word	0x0800eb25
 800e9dc:	0800e981 	.word	0x0800e981
 800e9e0:	0800ea2f 	.word	0x0800ea2f
 800e9e4:	0800e981 	.word	0x0800e981
 800e9e8:	0800e981 	.word	0x0800e981
 800e9ec:	0800eac5 	.word	0x0800eac5
 800e9f0:	6833      	ldr	r3, [r6, #0]
 800e9f2:	1d1a      	adds	r2, r3, #4
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	6032      	str	r2, [r6, #0]
 800e9f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e9fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ea00:	2301      	movs	r3, #1
 800ea02:	e09c      	b.n	800eb3e <_printf_i+0x1e6>
 800ea04:	6833      	ldr	r3, [r6, #0]
 800ea06:	6820      	ldr	r0, [r4, #0]
 800ea08:	1d19      	adds	r1, r3, #4
 800ea0a:	6031      	str	r1, [r6, #0]
 800ea0c:	0606      	lsls	r6, r0, #24
 800ea0e:	d501      	bpl.n	800ea14 <_printf_i+0xbc>
 800ea10:	681d      	ldr	r5, [r3, #0]
 800ea12:	e003      	b.n	800ea1c <_printf_i+0xc4>
 800ea14:	0645      	lsls	r5, r0, #25
 800ea16:	d5fb      	bpl.n	800ea10 <_printf_i+0xb8>
 800ea18:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ea1c:	2d00      	cmp	r5, #0
 800ea1e:	da03      	bge.n	800ea28 <_printf_i+0xd0>
 800ea20:	232d      	movs	r3, #45	@ 0x2d
 800ea22:	426d      	negs	r5, r5
 800ea24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ea28:	4858      	ldr	r0, [pc, #352]	@ (800eb8c <_printf_i+0x234>)
 800ea2a:	230a      	movs	r3, #10
 800ea2c:	e011      	b.n	800ea52 <_printf_i+0xfa>
 800ea2e:	6821      	ldr	r1, [r4, #0]
 800ea30:	6833      	ldr	r3, [r6, #0]
 800ea32:	0608      	lsls	r0, r1, #24
 800ea34:	f853 5b04 	ldr.w	r5, [r3], #4
 800ea38:	d402      	bmi.n	800ea40 <_printf_i+0xe8>
 800ea3a:	0649      	lsls	r1, r1, #25
 800ea3c:	bf48      	it	mi
 800ea3e:	b2ad      	uxthmi	r5, r5
 800ea40:	2f6f      	cmp	r7, #111	@ 0x6f
 800ea42:	4852      	ldr	r0, [pc, #328]	@ (800eb8c <_printf_i+0x234>)
 800ea44:	6033      	str	r3, [r6, #0]
 800ea46:	bf14      	ite	ne
 800ea48:	230a      	movne	r3, #10
 800ea4a:	2308      	moveq	r3, #8
 800ea4c:	2100      	movs	r1, #0
 800ea4e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ea52:	6866      	ldr	r6, [r4, #4]
 800ea54:	60a6      	str	r6, [r4, #8]
 800ea56:	2e00      	cmp	r6, #0
 800ea58:	db05      	blt.n	800ea66 <_printf_i+0x10e>
 800ea5a:	6821      	ldr	r1, [r4, #0]
 800ea5c:	432e      	orrs	r6, r5
 800ea5e:	f021 0104 	bic.w	r1, r1, #4
 800ea62:	6021      	str	r1, [r4, #0]
 800ea64:	d04b      	beq.n	800eafe <_printf_i+0x1a6>
 800ea66:	4616      	mov	r6, r2
 800ea68:	fbb5 f1f3 	udiv	r1, r5, r3
 800ea6c:	fb03 5711 	mls	r7, r3, r1, r5
 800ea70:	5dc7      	ldrb	r7, [r0, r7]
 800ea72:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ea76:	462f      	mov	r7, r5
 800ea78:	42bb      	cmp	r3, r7
 800ea7a:	460d      	mov	r5, r1
 800ea7c:	d9f4      	bls.n	800ea68 <_printf_i+0x110>
 800ea7e:	2b08      	cmp	r3, #8
 800ea80:	d10b      	bne.n	800ea9a <_printf_i+0x142>
 800ea82:	6823      	ldr	r3, [r4, #0]
 800ea84:	07df      	lsls	r7, r3, #31
 800ea86:	d508      	bpl.n	800ea9a <_printf_i+0x142>
 800ea88:	6923      	ldr	r3, [r4, #16]
 800ea8a:	6861      	ldr	r1, [r4, #4]
 800ea8c:	4299      	cmp	r1, r3
 800ea8e:	bfde      	ittt	le
 800ea90:	2330      	movle	r3, #48	@ 0x30
 800ea92:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ea96:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ea9a:	1b92      	subs	r2, r2, r6
 800ea9c:	6122      	str	r2, [r4, #16]
 800ea9e:	f8cd a000 	str.w	sl, [sp]
 800eaa2:	464b      	mov	r3, r9
 800eaa4:	aa03      	add	r2, sp, #12
 800eaa6:	4621      	mov	r1, r4
 800eaa8:	4640      	mov	r0, r8
 800eaaa:	f7ff fee7 	bl	800e87c <_printf_common>
 800eaae:	3001      	adds	r0, #1
 800eab0:	d14a      	bne.n	800eb48 <_printf_i+0x1f0>
 800eab2:	f04f 30ff 	mov.w	r0, #4294967295
 800eab6:	b004      	add	sp, #16
 800eab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eabc:	6823      	ldr	r3, [r4, #0]
 800eabe:	f043 0320 	orr.w	r3, r3, #32
 800eac2:	6023      	str	r3, [r4, #0]
 800eac4:	4832      	ldr	r0, [pc, #200]	@ (800eb90 <_printf_i+0x238>)
 800eac6:	2778      	movs	r7, #120	@ 0x78
 800eac8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800eacc:	6823      	ldr	r3, [r4, #0]
 800eace:	6831      	ldr	r1, [r6, #0]
 800ead0:	061f      	lsls	r7, r3, #24
 800ead2:	f851 5b04 	ldr.w	r5, [r1], #4
 800ead6:	d402      	bmi.n	800eade <_printf_i+0x186>
 800ead8:	065f      	lsls	r7, r3, #25
 800eada:	bf48      	it	mi
 800eadc:	b2ad      	uxthmi	r5, r5
 800eade:	6031      	str	r1, [r6, #0]
 800eae0:	07d9      	lsls	r1, r3, #31
 800eae2:	bf44      	itt	mi
 800eae4:	f043 0320 	orrmi.w	r3, r3, #32
 800eae8:	6023      	strmi	r3, [r4, #0]
 800eaea:	b11d      	cbz	r5, 800eaf4 <_printf_i+0x19c>
 800eaec:	2310      	movs	r3, #16
 800eaee:	e7ad      	b.n	800ea4c <_printf_i+0xf4>
 800eaf0:	4826      	ldr	r0, [pc, #152]	@ (800eb8c <_printf_i+0x234>)
 800eaf2:	e7e9      	b.n	800eac8 <_printf_i+0x170>
 800eaf4:	6823      	ldr	r3, [r4, #0]
 800eaf6:	f023 0320 	bic.w	r3, r3, #32
 800eafa:	6023      	str	r3, [r4, #0]
 800eafc:	e7f6      	b.n	800eaec <_printf_i+0x194>
 800eafe:	4616      	mov	r6, r2
 800eb00:	e7bd      	b.n	800ea7e <_printf_i+0x126>
 800eb02:	6833      	ldr	r3, [r6, #0]
 800eb04:	6825      	ldr	r5, [r4, #0]
 800eb06:	6961      	ldr	r1, [r4, #20]
 800eb08:	1d18      	adds	r0, r3, #4
 800eb0a:	6030      	str	r0, [r6, #0]
 800eb0c:	062e      	lsls	r6, r5, #24
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	d501      	bpl.n	800eb16 <_printf_i+0x1be>
 800eb12:	6019      	str	r1, [r3, #0]
 800eb14:	e002      	b.n	800eb1c <_printf_i+0x1c4>
 800eb16:	0668      	lsls	r0, r5, #25
 800eb18:	d5fb      	bpl.n	800eb12 <_printf_i+0x1ba>
 800eb1a:	8019      	strh	r1, [r3, #0]
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	6123      	str	r3, [r4, #16]
 800eb20:	4616      	mov	r6, r2
 800eb22:	e7bc      	b.n	800ea9e <_printf_i+0x146>
 800eb24:	6833      	ldr	r3, [r6, #0]
 800eb26:	1d1a      	adds	r2, r3, #4
 800eb28:	6032      	str	r2, [r6, #0]
 800eb2a:	681e      	ldr	r6, [r3, #0]
 800eb2c:	6862      	ldr	r2, [r4, #4]
 800eb2e:	2100      	movs	r1, #0
 800eb30:	4630      	mov	r0, r6
 800eb32:	f7f1 fbe5 	bl	8000300 <memchr>
 800eb36:	b108      	cbz	r0, 800eb3c <_printf_i+0x1e4>
 800eb38:	1b80      	subs	r0, r0, r6
 800eb3a:	6060      	str	r0, [r4, #4]
 800eb3c:	6863      	ldr	r3, [r4, #4]
 800eb3e:	6123      	str	r3, [r4, #16]
 800eb40:	2300      	movs	r3, #0
 800eb42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eb46:	e7aa      	b.n	800ea9e <_printf_i+0x146>
 800eb48:	6923      	ldr	r3, [r4, #16]
 800eb4a:	4632      	mov	r2, r6
 800eb4c:	4649      	mov	r1, r9
 800eb4e:	4640      	mov	r0, r8
 800eb50:	47d0      	blx	sl
 800eb52:	3001      	adds	r0, #1
 800eb54:	d0ad      	beq.n	800eab2 <_printf_i+0x15a>
 800eb56:	6823      	ldr	r3, [r4, #0]
 800eb58:	079b      	lsls	r3, r3, #30
 800eb5a:	d413      	bmi.n	800eb84 <_printf_i+0x22c>
 800eb5c:	68e0      	ldr	r0, [r4, #12]
 800eb5e:	9b03      	ldr	r3, [sp, #12]
 800eb60:	4298      	cmp	r0, r3
 800eb62:	bfb8      	it	lt
 800eb64:	4618      	movlt	r0, r3
 800eb66:	e7a6      	b.n	800eab6 <_printf_i+0x15e>
 800eb68:	2301      	movs	r3, #1
 800eb6a:	4632      	mov	r2, r6
 800eb6c:	4649      	mov	r1, r9
 800eb6e:	4640      	mov	r0, r8
 800eb70:	47d0      	blx	sl
 800eb72:	3001      	adds	r0, #1
 800eb74:	d09d      	beq.n	800eab2 <_printf_i+0x15a>
 800eb76:	3501      	adds	r5, #1
 800eb78:	68e3      	ldr	r3, [r4, #12]
 800eb7a:	9903      	ldr	r1, [sp, #12]
 800eb7c:	1a5b      	subs	r3, r3, r1
 800eb7e:	42ab      	cmp	r3, r5
 800eb80:	dcf2      	bgt.n	800eb68 <_printf_i+0x210>
 800eb82:	e7eb      	b.n	800eb5c <_printf_i+0x204>
 800eb84:	2500      	movs	r5, #0
 800eb86:	f104 0619 	add.w	r6, r4, #25
 800eb8a:	e7f5      	b.n	800eb78 <_printf_i+0x220>
 800eb8c:	08011163 	.word	0x08011163
 800eb90:	08011174 	.word	0x08011174

0800eb94 <std>:
 800eb94:	2300      	movs	r3, #0
 800eb96:	b510      	push	{r4, lr}
 800eb98:	4604      	mov	r4, r0
 800eb9a:	e9c0 3300 	strd	r3, r3, [r0]
 800eb9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800eba2:	6083      	str	r3, [r0, #8]
 800eba4:	8181      	strh	r1, [r0, #12]
 800eba6:	6643      	str	r3, [r0, #100]	@ 0x64
 800eba8:	81c2      	strh	r2, [r0, #14]
 800ebaa:	6183      	str	r3, [r0, #24]
 800ebac:	4619      	mov	r1, r3
 800ebae:	2208      	movs	r2, #8
 800ebb0:	305c      	adds	r0, #92	@ 0x5c
 800ebb2:	f000 f9bd 	bl	800ef30 <memset>
 800ebb6:	4b0d      	ldr	r3, [pc, #52]	@ (800ebec <std+0x58>)
 800ebb8:	6263      	str	r3, [r4, #36]	@ 0x24
 800ebba:	4b0d      	ldr	r3, [pc, #52]	@ (800ebf0 <std+0x5c>)
 800ebbc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ebbe:	4b0d      	ldr	r3, [pc, #52]	@ (800ebf4 <std+0x60>)
 800ebc0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ebc2:	4b0d      	ldr	r3, [pc, #52]	@ (800ebf8 <std+0x64>)
 800ebc4:	6323      	str	r3, [r4, #48]	@ 0x30
 800ebc6:	4b0d      	ldr	r3, [pc, #52]	@ (800ebfc <std+0x68>)
 800ebc8:	6224      	str	r4, [r4, #32]
 800ebca:	429c      	cmp	r4, r3
 800ebcc:	d006      	beq.n	800ebdc <std+0x48>
 800ebce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ebd2:	4294      	cmp	r4, r2
 800ebd4:	d002      	beq.n	800ebdc <std+0x48>
 800ebd6:	33d0      	adds	r3, #208	@ 0xd0
 800ebd8:	429c      	cmp	r4, r3
 800ebda:	d105      	bne.n	800ebe8 <std+0x54>
 800ebdc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ebe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ebe4:	f000 ba8c 	b.w	800f100 <__retarget_lock_init_recursive>
 800ebe8:	bd10      	pop	{r4, pc}
 800ebea:	bf00      	nop
 800ebec:	0800ed81 	.word	0x0800ed81
 800ebf0:	0800eda3 	.word	0x0800eda3
 800ebf4:	0800eddb 	.word	0x0800eddb
 800ebf8:	0800edff 	.word	0x0800edff
 800ebfc:	240006b4 	.word	0x240006b4

0800ec00 <stdio_exit_handler>:
 800ec00:	4a02      	ldr	r2, [pc, #8]	@ (800ec0c <stdio_exit_handler+0xc>)
 800ec02:	4903      	ldr	r1, [pc, #12]	@ (800ec10 <stdio_exit_handler+0x10>)
 800ec04:	4803      	ldr	r0, [pc, #12]	@ (800ec14 <stdio_exit_handler+0x14>)
 800ec06:	f000 b869 	b.w	800ecdc <_fwalk_sglue>
 800ec0a:	bf00      	nop
 800ec0c:	2400002c 	.word	0x2400002c
 800ec10:	08010c5d 	.word	0x08010c5d
 800ec14:	2400003c 	.word	0x2400003c

0800ec18 <cleanup_stdio>:
 800ec18:	6841      	ldr	r1, [r0, #4]
 800ec1a:	4b0c      	ldr	r3, [pc, #48]	@ (800ec4c <cleanup_stdio+0x34>)
 800ec1c:	4299      	cmp	r1, r3
 800ec1e:	b510      	push	{r4, lr}
 800ec20:	4604      	mov	r4, r0
 800ec22:	d001      	beq.n	800ec28 <cleanup_stdio+0x10>
 800ec24:	f002 f81a 	bl	8010c5c <_fflush_r>
 800ec28:	68a1      	ldr	r1, [r4, #8]
 800ec2a:	4b09      	ldr	r3, [pc, #36]	@ (800ec50 <cleanup_stdio+0x38>)
 800ec2c:	4299      	cmp	r1, r3
 800ec2e:	d002      	beq.n	800ec36 <cleanup_stdio+0x1e>
 800ec30:	4620      	mov	r0, r4
 800ec32:	f002 f813 	bl	8010c5c <_fflush_r>
 800ec36:	68e1      	ldr	r1, [r4, #12]
 800ec38:	4b06      	ldr	r3, [pc, #24]	@ (800ec54 <cleanup_stdio+0x3c>)
 800ec3a:	4299      	cmp	r1, r3
 800ec3c:	d004      	beq.n	800ec48 <cleanup_stdio+0x30>
 800ec3e:	4620      	mov	r0, r4
 800ec40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec44:	f002 b80a 	b.w	8010c5c <_fflush_r>
 800ec48:	bd10      	pop	{r4, pc}
 800ec4a:	bf00      	nop
 800ec4c:	240006b4 	.word	0x240006b4
 800ec50:	2400071c 	.word	0x2400071c
 800ec54:	24000784 	.word	0x24000784

0800ec58 <global_stdio_init.part.0>:
 800ec58:	b510      	push	{r4, lr}
 800ec5a:	4b0b      	ldr	r3, [pc, #44]	@ (800ec88 <global_stdio_init.part.0+0x30>)
 800ec5c:	4c0b      	ldr	r4, [pc, #44]	@ (800ec8c <global_stdio_init.part.0+0x34>)
 800ec5e:	4a0c      	ldr	r2, [pc, #48]	@ (800ec90 <global_stdio_init.part.0+0x38>)
 800ec60:	601a      	str	r2, [r3, #0]
 800ec62:	4620      	mov	r0, r4
 800ec64:	2200      	movs	r2, #0
 800ec66:	2104      	movs	r1, #4
 800ec68:	f7ff ff94 	bl	800eb94 <std>
 800ec6c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ec70:	2201      	movs	r2, #1
 800ec72:	2109      	movs	r1, #9
 800ec74:	f7ff ff8e 	bl	800eb94 <std>
 800ec78:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ec7c:	2202      	movs	r2, #2
 800ec7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec82:	2112      	movs	r1, #18
 800ec84:	f7ff bf86 	b.w	800eb94 <std>
 800ec88:	240007ec 	.word	0x240007ec
 800ec8c:	240006b4 	.word	0x240006b4
 800ec90:	0800ec01 	.word	0x0800ec01

0800ec94 <__sfp_lock_acquire>:
 800ec94:	4801      	ldr	r0, [pc, #4]	@ (800ec9c <__sfp_lock_acquire+0x8>)
 800ec96:	f000 ba34 	b.w	800f102 <__retarget_lock_acquire_recursive>
 800ec9a:	bf00      	nop
 800ec9c:	240007f5 	.word	0x240007f5

0800eca0 <__sfp_lock_release>:
 800eca0:	4801      	ldr	r0, [pc, #4]	@ (800eca8 <__sfp_lock_release+0x8>)
 800eca2:	f000 ba2f 	b.w	800f104 <__retarget_lock_release_recursive>
 800eca6:	bf00      	nop
 800eca8:	240007f5 	.word	0x240007f5

0800ecac <__sinit>:
 800ecac:	b510      	push	{r4, lr}
 800ecae:	4604      	mov	r4, r0
 800ecb0:	f7ff fff0 	bl	800ec94 <__sfp_lock_acquire>
 800ecb4:	6a23      	ldr	r3, [r4, #32]
 800ecb6:	b11b      	cbz	r3, 800ecc0 <__sinit+0x14>
 800ecb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ecbc:	f7ff bff0 	b.w	800eca0 <__sfp_lock_release>
 800ecc0:	4b04      	ldr	r3, [pc, #16]	@ (800ecd4 <__sinit+0x28>)
 800ecc2:	6223      	str	r3, [r4, #32]
 800ecc4:	4b04      	ldr	r3, [pc, #16]	@ (800ecd8 <__sinit+0x2c>)
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d1f5      	bne.n	800ecb8 <__sinit+0xc>
 800eccc:	f7ff ffc4 	bl	800ec58 <global_stdio_init.part.0>
 800ecd0:	e7f2      	b.n	800ecb8 <__sinit+0xc>
 800ecd2:	bf00      	nop
 800ecd4:	0800ec19 	.word	0x0800ec19
 800ecd8:	240007ec 	.word	0x240007ec

0800ecdc <_fwalk_sglue>:
 800ecdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ece0:	4607      	mov	r7, r0
 800ece2:	4688      	mov	r8, r1
 800ece4:	4614      	mov	r4, r2
 800ece6:	2600      	movs	r6, #0
 800ece8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ecec:	f1b9 0901 	subs.w	r9, r9, #1
 800ecf0:	d505      	bpl.n	800ecfe <_fwalk_sglue+0x22>
 800ecf2:	6824      	ldr	r4, [r4, #0]
 800ecf4:	2c00      	cmp	r4, #0
 800ecf6:	d1f7      	bne.n	800ece8 <_fwalk_sglue+0xc>
 800ecf8:	4630      	mov	r0, r6
 800ecfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ecfe:	89ab      	ldrh	r3, [r5, #12]
 800ed00:	2b01      	cmp	r3, #1
 800ed02:	d907      	bls.n	800ed14 <_fwalk_sglue+0x38>
 800ed04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ed08:	3301      	adds	r3, #1
 800ed0a:	d003      	beq.n	800ed14 <_fwalk_sglue+0x38>
 800ed0c:	4629      	mov	r1, r5
 800ed0e:	4638      	mov	r0, r7
 800ed10:	47c0      	blx	r8
 800ed12:	4306      	orrs	r6, r0
 800ed14:	3568      	adds	r5, #104	@ 0x68
 800ed16:	e7e9      	b.n	800ecec <_fwalk_sglue+0x10>

0800ed18 <iprintf>:
 800ed18:	b40f      	push	{r0, r1, r2, r3}
 800ed1a:	b507      	push	{r0, r1, r2, lr}
 800ed1c:	4906      	ldr	r1, [pc, #24]	@ (800ed38 <iprintf+0x20>)
 800ed1e:	ab04      	add	r3, sp, #16
 800ed20:	6808      	ldr	r0, [r1, #0]
 800ed22:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed26:	6881      	ldr	r1, [r0, #8]
 800ed28:	9301      	str	r3, [sp, #4]
 800ed2a:	f001 fdfb 	bl	8010924 <_vfiprintf_r>
 800ed2e:	b003      	add	sp, #12
 800ed30:	f85d eb04 	ldr.w	lr, [sp], #4
 800ed34:	b004      	add	sp, #16
 800ed36:	4770      	bx	lr
 800ed38:	24000038 	.word	0x24000038

0800ed3c <siprintf>:
 800ed3c:	b40e      	push	{r1, r2, r3}
 800ed3e:	b510      	push	{r4, lr}
 800ed40:	b09d      	sub	sp, #116	@ 0x74
 800ed42:	ab1f      	add	r3, sp, #124	@ 0x7c
 800ed44:	9002      	str	r0, [sp, #8]
 800ed46:	9006      	str	r0, [sp, #24]
 800ed48:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ed4c:	480a      	ldr	r0, [pc, #40]	@ (800ed78 <siprintf+0x3c>)
 800ed4e:	9107      	str	r1, [sp, #28]
 800ed50:	9104      	str	r1, [sp, #16]
 800ed52:	490a      	ldr	r1, [pc, #40]	@ (800ed7c <siprintf+0x40>)
 800ed54:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed58:	9105      	str	r1, [sp, #20]
 800ed5a:	2400      	movs	r4, #0
 800ed5c:	a902      	add	r1, sp, #8
 800ed5e:	6800      	ldr	r0, [r0, #0]
 800ed60:	9301      	str	r3, [sp, #4]
 800ed62:	941b      	str	r4, [sp, #108]	@ 0x6c
 800ed64:	f001 fcb8 	bl	80106d8 <_svfiprintf_r>
 800ed68:	9b02      	ldr	r3, [sp, #8]
 800ed6a:	701c      	strb	r4, [r3, #0]
 800ed6c:	b01d      	add	sp, #116	@ 0x74
 800ed6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed72:	b003      	add	sp, #12
 800ed74:	4770      	bx	lr
 800ed76:	bf00      	nop
 800ed78:	24000038 	.word	0x24000038
 800ed7c:	ffff0208 	.word	0xffff0208

0800ed80 <__sread>:
 800ed80:	b510      	push	{r4, lr}
 800ed82:	460c      	mov	r4, r1
 800ed84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed88:	f000 f96c 	bl	800f064 <_read_r>
 800ed8c:	2800      	cmp	r0, #0
 800ed8e:	bfab      	itete	ge
 800ed90:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ed92:	89a3      	ldrhlt	r3, [r4, #12]
 800ed94:	181b      	addge	r3, r3, r0
 800ed96:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ed9a:	bfac      	ite	ge
 800ed9c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ed9e:	81a3      	strhlt	r3, [r4, #12]
 800eda0:	bd10      	pop	{r4, pc}

0800eda2 <__swrite>:
 800eda2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eda6:	461f      	mov	r7, r3
 800eda8:	898b      	ldrh	r3, [r1, #12]
 800edaa:	05db      	lsls	r3, r3, #23
 800edac:	4605      	mov	r5, r0
 800edae:	460c      	mov	r4, r1
 800edb0:	4616      	mov	r6, r2
 800edb2:	d505      	bpl.n	800edc0 <__swrite+0x1e>
 800edb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800edb8:	2302      	movs	r3, #2
 800edba:	2200      	movs	r2, #0
 800edbc:	f000 f940 	bl	800f040 <_lseek_r>
 800edc0:	89a3      	ldrh	r3, [r4, #12]
 800edc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800edc6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800edca:	81a3      	strh	r3, [r4, #12]
 800edcc:	4632      	mov	r2, r6
 800edce:	463b      	mov	r3, r7
 800edd0:	4628      	mov	r0, r5
 800edd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800edd6:	f000 b957 	b.w	800f088 <_write_r>

0800edda <__sseek>:
 800edda:	b510      	push	{r4, lr}
 800eddc:	460c      	mov	r4, r1
 800edde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ede2:	f000 f92d 	bl	800f040 <_lseek_r>
 800ede6:	1c43      	adds	r3, r0, #1
 800ede8:	89a3      	ldrh	r3, [r4, #12]
 800edea:	bf15      	itete	ne
 800edec:	6560      	strne	r0, [r4, #84]	@ 0x54
 800edee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800edf2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800edf6:	81a3      	strheq	r3, [r4, #12]
 800edf8:	bf18      	it	ne
 800edfa:	81a3      	strhne	r3, [r4, #12]
 800edfc:	bd10      	pop	{r4, pc}

0800edfe <__sclose>:
 800edfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee02:	f000 b90d 	b.w	800f020 <_close_r>

0800ee06 <__swbuf_r>:
 800ee06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee08:	460e      	mov	r6, r1
 800ee0a:	4614      	mov	r4, r2
 800ee0c:	4605      	mov	r5, r0
 800ee0e:	b118      	cbz	r0, 800ee18 <__swbuf_r+0x12>
 800ee10:	6a03      	ldr	r3, [r0, #32]
 800ee12:	b90b      	cbnz	r3, 800ee18 <__swbuf_r+0x12>
 800ee14:	f7ff ff4a 	bl	800ecac <__sinit>
 800ee18:	69a3      	ldr	r3, [r4, #24]
 800ee1a:	60a3      	str	r3, [r4, #8]
 800ee1c:	89a3      	ldrh	r3, [r4, #12]
 800ee1e:	071a      	lsls	r2, r3, #28
 800ee20:	d501      	bpl.n	800ee26 <__swbuf_r+0x20>
 800ee22:	6923      	ldr	r3, [r4, #16]
 800ee24:	b943      	cbnz	r3, 800ee38 <__swbuf_r+0x32>
 800ee26:	4621      	mov	r1, r4
 800ee28:	4628      	mov	r0, r5
 800ee2a:	f000 f82b 	bl	800ee84 <__swsetup_r>
 800ee2e:	b118      	cbz	r0, 800ee38 <__swbuf_r+0x32>
 800ee30:	f04f 37ff 	mov.w	r7, #4294967295
 800ee34:	4638      	mov	r0, r7
 800ee36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee38:	6823      	ldr	r3, [r4, #0]
 800ee3a:	6922      	ldr	r2, [r4, #16]
 800ee3c:	1a98      	subs	r0, r3, r2
 800ee3e:	6963      	ldr	r3, [r4, #20]
 800ee40:	b2f6      	uxtb	r6, r6
 800ee42:	4283      	cmp	r3, r0
 800ee44:	4637      	mov	r7, r6
 800ee46:	dc05      	bgt.n	800ee54 <__swbuf_r+0x4e>
 800ee48:	4621      	mov	r1, r4
 800ee4a:	4628      	mov	r0, r5
 800ee4c:	f001 ff06 	bl	8010c5c <_fflush_r>
 800ee50:	2800      	cmp	r0, #0
 800ee52:	d1ed      	bne.n	800ee30 <__swbuf_r+0x2a>
 800ee54:	68a3      	ldr	r3, [r4, #8]
 800ee56:	3b01      	subs	r3, #1
 800ee58:	60a3      	str	r3, [r4, #8]
 800ee5a:	6823      	ldr	r3, [r4, #0]
 800ee5c:	1c5a      	adds	r2, r3, #1
 800ee5e:	6022      	str	r2, [r4, #0]
 800ee60:	701e      	strb	r6, [r3, #0]
 800ee62:	6962      	ldr	r2, [r4, #20]
 800ee64:	1c43      	adds	r3, r0, #1
 800ee66:	429a      	cmp	r2, r3
 800ee68:	d004      	beq.n	800ee74 <__swbuf_r+0x6e>
 800ee6a:	89a3      	ldrh	r3, [r4, #12]
 800ee6c:	07db      	lsls	r3, r3, #31
 800ee6e:	d5e1      	bpl.n	800ee34 <__swbuf_r+0x2e>
 800ee70:	2e0a      	cmp	r6, #10
 800ee72:	d1df      	bne.n	800ee34 <__swbuf_r+0x2e>
 800ee74:	4621      	mov	r1, r4
 800ee76:	4628      	mov	r0, r5
 800ee78:	f001 fef0 	bl	8010c5c <_fflush_r>
 800ee7c:	2800      	cmp	r0, #0
 800ee7e:	d0d9      	beq.n	800ee34 <__swbuf_r+0x2e>
 800ee80:	e7d6      	b.n	800ee30 <__swbuf_r+0x2a>
	...

0800ee84 <__swsetup_r>:
 800ee84:	b538      	push	{r3, r4, r5, lr}
 800ee86:	4b29      	ldr	r3, [pc, #164]	@ (800ef2c <__swsetup_r+0xa8>)
 800ee88:	4605      	mov	r5, r0
 800ee8a:	6818      	ldr	r0, [r3, #0]
 800ee8c:	460c      	mov	r4, r1
 800ee8e:	b118      	cbz	r0, 800ee98 <__swsetup_r+0x14>
 800ee90:	6a03      	ldr	r3, [r0, #32]
 800ee92:	b90b      	cbnz	r3, 800ee98 <__swsetup_r+0x14>
 800ee94:	f7ff ff0a 	bl	800ecac <__sinit>
 800ee98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee9c:	0719      	lsls	r1, r3, #28
 800ee9e:	d422      	bmi.n	800eee6 <__swsetup_r+0x62>
 800eea0:	06da      	lsls	r2, r3, #27
 800eea2:	d407      	bmi.n	800eeb4 <__swsetup_r+0x30>
 800eea4:	2209      	movs	r2, #9
 800eea6:	602a      	str	r2, [r5, #0]
 800eea8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eeac:	81a3      	strh	r3, [r4, #12]
 800eeae:	f04f 30ff 	mov.w	r0, #4294967295
 800eeb2:	e033      	b.n	800ef1c <__swsetup_r+0x98>
 800eeb4:	0758      	lsls	r0, r3, #29
 800eeb6:	d512      	bpl.n	800eede <__swsetup_r+0x5a>
 800eeb8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800eeba:	b141      	cbz	r1, 800eece <__swsetup_r+0x4a>
 800eebc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800eec0:	4299      	cmp	r1, r3
 800eec2:	d002      	beq.n	800eeca <__swsetup_r+0x46>
 800eec4:	4628      	mov	r0, r5
 800eec6:	f000 ff31 	bl	800fd2c <_free_r>
 800eeca:	2300      	movs	r3, #0
 800eecc:	6363      	str	r3, [r4, #52]	@ 0x34
 800eece:	89a3      	ldrh	r3, [r4, #12]
 800eed0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800eed4:	81a3      	strh	r3, [r4, #12]
 800eed6:	2300      	movs	r3, #0
 800eed8:	6063      	str	r3, [r4, #4]
 800eeda:	6923      	ldr	r3, [r4, #16]
 800eedc:	6023      	str	r3, [r4, #0]
 800eede:	89a3      	ldrh	r3, [r4, #12]
 800eee0:	f043 0308 	orr.w	r3, r3, #8
 800eee4:	81a3      	strh	r3, [r4, #12]
 800eee6:	6923      	ldr	r3, [r4, #16]
 800eee8:	b94b      	cbnz	r3, 800eefe <__swsetup_r+0x7a>
 800eeea:	89a3      	ldrh	r3, [r4, #12]
 800eeec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800eef0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800eef4:	d003      	beq.n	800eefe <__swsetup_r+0x7a>
 800eef6:	4621      	mov	r1, r4
 800eef8:	4628      	mov	r0, r5
 800eefa:	f001 ff0f 	bl	8010d1c <__smakebuf_r>
 800eefe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef02:	f013 0201 	ands.w	r2, r3, #1
 800ef06:	d00a      	beq.n	800ef1e <__swsetup_r+0x9a>
 800ef08:	2200      	movs	r2, #0
 800ef0a:	60a2      	str	r2, [r4, #8]
 800ef0c:	6962      	ldr	r2, [r4, #20]
 800ef0e:	4252      	negs	r2, r2
 800ef10:	61a2      	str	r2, [r4, #24]
 800ef12:	6922      	ldr	r2, [r4, #16]
 800ef14:	b942      	cbnz	r2, 800ef28 <__swsetup_r+0xa4>
 800ef16:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ef1a:	d1c5      	bne.n	800eea8 <__swsetup_r+0x24>
 800ef1c:	bd38      	pop	{r3, r4, r5, pc}
 800ef1e:	0799      	lsls	r1, r3, #30
 800ef20:	bf58      	it	pl
 800ef22:	6962      	ldrpl	r2, [r4, #20]
 800ef24:	60a2      	str	r2, [r4, #8]
 800ef26:	e7f4      	b.n	800ef12 <__swsetup_r+0x8e>
 800ef28:	2000      	movs	r0, #0
 800ef2a:	e7f7      	b.n	800ef1c <__swsetup_r+0x98>
 800ef2c:	24000038 	.word	0x24000038

0800ef30 <memset>:
 800ef30:	4402      	add	r2, r0
 800ef32:	4603      	mov	r3, r0
 800ef34:	4293      	cmp	r3, r2
 800ef36:	d100      	bne.n	800ef3a <memset+0xa>
 800ef38:	4770      	bx	lr
 800ef3a:	f803 1b01 	strb.w	r1, [r3], #1
 800ef3e:	e7f9      	b.n	800ef34 <memset+0x4>

0800ef40 <strcat>:
 800ef40:	b510      	push	{r4, lr}
 800ef42:	4602      	mov	r2, r0
 800ef44:	7814      	ldrb	r4, [r2, #0]
 800ef46:	4613      	mov	r3, r2
 800ef48:	3201      	adds	r2, #1
 800ef4a:	2c00      	cmp	r4, #0
 800ef4c:	d1fa      	bne.n	800ef44 <strcat+0x4>
 800ef4e:	3b01      	subs	r3, #1
 800ef50:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ef54:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ef58:	2a00      	cmp	r2, #0
 800ef5a:	d1f9      	bne.n	800ef50 <strcat+0x10>
 800ef5c:	bd10      	pop	{r4, pc}
	...

0800ef60 <strtok>:
 800ef60:	4b16      	ldr	r3, [pc, #88]	@ (800efbc <strtok+0x5c>)
 800ef62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef66:	681f      	ldr	r7, [r3, #0]
 800ef68:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800ef6a:	4605      	mov	r5, r0
 800ef6c:	460e      	mov	r6, r1
 800ef6e:	b9ec      	cbnz	r4, 800efac <strtok+0x4c>
 800ef70:	2050      	movs	r0, #80	@ 0x50
 800ef72:	f000 ff25 	bl	800fdc0 <malloc>
 800ef76:	4602      	mov	r2, r0
 800ef78:	6478      	str	r0, [r7, #68]	@ 0x44
 800ef7a:	b920      	cbnz	r0, 800ef86 <strtok+0x26>
 800ef7c:	4b10      	ldr	r3, [pc, #64]	@ (800efc0 <strtok+0x60>)
 800ef7e:	4811      	ldr	r0, [pc, #68]	@ (800efc4 <strtok+0x64>)
 800ef80:	215b      	movs	r1, #91	@ 0x5b
 800ef82:	f000 f8cf 	bl	800f124 <__assert_func>
 800ef86:	e9c0 4400 	strd	r4, r4, [r0]
 800ef8a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800ef8e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800ef92:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800ef96:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800ef9a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800ef9e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800efa2:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800efa6:	6184      	str	r4, [r0, #24]
 800efa8:	7704      	strb	r4, [r0, #28]
 800efaa:	6244      	str	r4, [r0, #36]	@ 0x24
 800efac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800efae:	4631      	mov	r1, r6
 800efb0:	4628      	mov	r0, r5
 800efb2:	2301      	movs	r3, #1
 800efb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800efb8:	f000 b806 	b.w	800efc8 <__strtok_r>
 800efbc:	24000038 	.word	0x24000038
 800efc0:	08011185 	.word	0x08011185
 800efc4:	0801119c 	.word	0x0801119c

0800efc8 <__strtok_r>:
 800efc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800efca:	4604      	mov	r4, r0
 800efcc:	b908      	cbnz	r0, 800efd2 <__strtok_r+0xa>
 800efce:	6814      	ldr	r4, [r2, #0]
 800efd0:	b144      	cbz	r4, 800efe4 <__strtok_r+0x1c>
 800efd2:	4620      	mov	r0, r4
 800efd4:	f814 5b01 	ldrb.w	r5, [r4], #1
 800efd8:	460f      	mov	r7, r1
 800efda:	f817 6b01 	ldrb.w	r6, [r7], #1
 800efde:	b91e      	cbnz	r6, 800efe8 <__strtok_r+0x20>
 800efe0:	b965      	cbnz	r5, 800effc <__strtok_r+0x34>
 800efe2:	6015      	str	r5, [r2, #0]
 800efe4:	2000      	movs	r0, #0
 800efe6:	e005      	b.n	800eff4 <__strtok_r+0x2c>
 800efe8:	42b5      	cmp	r5, r6
 800efea:	d1f6      	bne.n	800efda <__strtok_r+0x12>
 800efec:	2b00      	cmp	r3, #0
 800efee:	d1f0      	bne.n	800efd2 <__strtok_r+0xa>
 800eff0:	6014      	str	r4, [r2, #0]
 800eff2:	7003      	strb	r3, [r0, #0]
 800eff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eff6:	461c      	mov	r4, r3
 800eff8:	e00c      	b.n	800f014 <__strtok_r+0x4c>
 800effa:	b91d      	cbnz	r5, 800f004 <__strtok_r+0x3c>
 800effc:	4627      	mov	r7, r4
 800effe:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f002:	460e      	mov	r6, r1
 800f004:	f816 5b01 	ldrb.w	r5, [r6], #1
 800f008:	42ab      	cmp	r3, r5
 800f00a:	d1f6      	bne.n	800effa <__strtok_r+0x32>
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d0f2      	beq.n	800eff6 <__strtok_r+0x2e>
 800f010:	2300      	movs	r3, #0
 800f012:	703b      	strb	r3, [r7, #0]
 800f014:	6014      	str	r4, [r2, #0]
 800f016:	e7ed      	b.n	800eff4 <__strtok_r+0x2c>

0800f018 <_localeconv_r>:
 800f018:	4800      	ldr	r0, [pc, #0]	@ (800f01c <_localeconv_r+0x4>)
 800f01a:	4770      	bx	lr
 800f01c:	24000178 	.word	0x24000178

0800f020 <_close_r>:
 800f020:	b538      	push	{r3, r4, r5, lr}
 800f022:	4d06      	ldr	r5, [pc, #24]	@ (800f03c <_close_r+0x1c>)
 800f024:	2300      	movs	r3, #0
 800f026:	4604      	mov	r4, r0
 800f028:	4608      	mov	r0, r1
 800f02a:	602b      	str	r3, [r5, #0]
 800f02c:	f7f2 fd98 	bl	8001b60 <_close>
 800f030:	1c43      	adds	r3, r0, #1
 800f032:	d102      	bne.n	800f03a <_close_r+0x1a>
 800f034:	682b      	ldr	r3, [r5, #0]
 800f036:	b103      	cbz	r3, 800f03a <_close_r+0x1a>
 800f038:	6023      	str	r3, [r4, #0]
 800f03a:	bd38      	pop	{r3, r4, r5, pc}
 800f03c:	240007f0 	.word	0x240007f0

0800f040 <_lseek_r>:
 800f040:	b538      	push	{r3, r4, r5, lr}
 800f042:	4d07      	ldr	r5, [pc, #28]	@ (800f060 <_lseek_r+0x20>)
 800f044:	4604      	mov	r4, r0
 800f046:	4608      	mov	r0, r1
 800f048:	4611      	mov	r1, r2
 800f04a:	2200      	movs	r2, #0
 800f04c:	602a      	str	r2, [r5, #0]
 800f04e:	461a      	mov	r2, r3
 800f050:	f7f2 fdad 	bl	8001bae <_lseek>
 800f054:	1c43      	adds	r3, r0, #1
 800f056:	d102      	bne.n	800f05e <_lseek_r+0x1e>
 800f058:	682b      	ldr	r3, [r5, #0]
 800f05a:	b103      	cbz	r3, 800f05e <_lseek_r+0x1e>
 800f05c:	6023      	str	r3, [r4, #0]
 800f05e:	bd38      	pop	{r3, r4, r5, pc}
 800f060:	240007f0 	.word	0x240007f0

0800f064 <_read_r>:
 800f064:	b538      	push	{r3, r4, r5, lr}
 800f066:	4d07      	ldr	r5, [pc, #28]	@ (800f084 <_read_r+0x20>)
 800f068:	4604      	mov	r4, r0
 800f06a:	4608      	mov	r0, r1
 800f06c:	4611      	mov	r1, r2
 800f06e:	2200      	movs	r2, #0
 800f070:	602a      	str	r2, [r5, #0]
 800f072:	461a      	mov	r2, r3
 800f074:	f7f2 fd3b 	bl	8001aee <_read>
 800f078:	1c43      	adds	r3, r0, #1
 800f07a:	d102      	bne.n	800f082 <_read_r+0x1e>
 800f07c:	682b      	ldr	r3, [r5, #0]
 800f07e:	b103      	cbz	r3, 800f082 <_read_r+0x1e>
 800f080:	6023      	str	r3, [r4, #0]
 800f082:	bd38      	pop	{r3, r4, r5, pc}
 800f084:	240007f0 	.word	0x240007f0

0800f088 <_write_r>:
 800f088:	b538      	push	{r3, r4, r5, lr}
 800f08a:	4d07      	ldr	r5, [pc, #28]	@ (800f0a8 <_write_r+0x20>)
 800f08c:	4604      	mov	r4, r0
 800f08e:	4608      	mov	r0, r1
 800f090:	4611      	mov	r1, r2
 800f092:	2200      	movs	r2, #0
 800f094:	602a      	str	r2, [r5, #0]
 800f096:	461a      	mov	r2, r3
 800f098:	f7f2 fd46 	bl	8001b28 <_write>
 800f09c:	1c43      	adds	r3, r0, #1
 800f09e:	d102      	bne.n	800f0a6 <_write_r+0x1e>
 800f0a0:	682b      	ldr	r3, [r5, #0]
 800f0a2:	b103      	cbz	r3, 800f0a6 <_write_r+0x1e>
 800f0a4:	6023      	str	r3, [r4, #0]
 800f0a6:	bd38      	pop	{r3, r4, r5, pc}
 800f0a8:	240007f0 	.word	0x240007f0

0800f0ac <__errno>:
 800f0ac:	4b01      	ldr	r3, [pc, #4]	@ (800f0b4 <__errno+0x8>)
 800f0ae:	6818      	ldr	r0, [r3, #0]
 800f0b0:	4770      	bx	lr
 800f0b2:	bf00      	nop
 800f0b4:	24000038 	.word	0x24000038

0800f0b8 <__libc_init_array>:
 800f0b8:	b570      	push	{r4, r5, r6, lr}
 800f0ba:	4d0d      	ldr	r5, [pc, #52]	@ (800f0f0 <__libc_init_array+0x38>)
 800f0bc:	4c0d      	ldr	r4, [pc, #52]	@ (800f0f4 <__libc_init_array+0x3c>)
 800f0be:	1b64      	subs	r4, r4, r5
 800f0c0:	10a4      	asrs	r4, r4, #2
 800f0c2:	2600      	movs	r6, #0
 800f0c4:	42a6      	cmp	r6, r4
 800f0c6:	d109      	bne.n	800f0dc <__libc_init_array+0x24>
 800f0c8:	4d0b      	ldr	r5, [pc, #44]	@ (800f0f8 <__libc_init_array+0x40>)
 800f0ca:	4c0c      	ldr	r4, [pc, #48]	@ (800f0fc <__libc_init_array+0x44>)
 800f0cc:	f001 ff62 	bl	8010f94 <_init>
 800f0d0:	1b64      	subs	r4, r4, r5
 800f0d2:	10a4      	asrs	r4, r4, #2
 800f0d4:	2600      	movs	r6, #0
 800f0d6:	42a6      	cmp	r6, r4
 800f0d8:	d105      	bne.n	800f0e6 <__libc_init_array+0x2e>
 800f0da:	bd70      	pop	{r4, r5, r6, pc}
 800f0dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800f0e0:	4798      	blx	r3
 800f0e2:	3601      	adds	r6, #1
 800f0e4:	e7ee      	b.n	800f0c4 <__libc_init_array+0xc>
 800f0e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800f0ea:	4798      	blx	r3
 800f0ec:	3601      	adds	r6, #1
 800f0ee:	e7f2      	b.n	800f0d6 <__libc_init_array+0x1e>
 800f0f0:	08011420 	.word	0x08011420
 800f0f4:	08011420 	.word	0x08011420
 800f0f8:	08011420 	.word	0x08011420
 800f0fc:	08011424 	.word	0x08011424

0800f100 <__retarget_lock_init_recursive>:
 800f100:	4770      	bx	lr

0800f102 <__retarget_lock_acquire_recursive>:
 800f102:	4770      	bx	lr

0800f104 <__retarget_lock_release_recursive>:
 800f104:	4770      	bx	lr

0800f106 <memcpy>:
 800f106:	440a      	add	r2, r1
 800f108:	4291      	cmp	r1, r2
 800f10a:	f100 33ff 	add.w	r3, r0, #4294967295
 800f10e:	d100      	bne.n	800f112 <memcpy+0xc>
 800f110:	4770      	bx	lr
 800f112:	b510      	push	{r4, lr}
 800f114:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f118:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f11c:	4291      	cmp	r1, r2
 800f11e:	d1f9      	bne.n	800f114 <memcpy+0xe>
 800f120:	bd10      	pop	{r4, pc}
	...

0800f124 <__assert_func>:
 800f124:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f126:	4614      	mov	r4, r2
 800f128:	461a      	mov	r2, r3
 800f12a:	4b09      	ldr	r3, [pc, #36]	@ (800f150 <__assert_func+0x2c>)
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	4605      	mov	r5, r0
 800f130:	68d8      	ldr	r0, [r3, #12]
 800f132:	b14c      	cbz	r4, 800f148 <__assert_func+0x24>
 800f134:	4b07      	ldr	r3, [pc, #28]	@ (800f154 <__assert_func+0x30>)
 800f136:	9100      	str	r1, [sp, #0]
 800f138:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f13c:	4906      	ldr	r1, [pc, #24]	@ (800f158 <__assert_func+0x34>)
 800f13e:	462b      	mov	r3, r5
 800f140:	f001 fdb4 	bl	8010cac <fiprintf>
 800f144:	f001 fe72 	bl	8010e2c <abort>
 800f148:	4b04      	ldr	r3, [pc, #16]	@ (800f15c <__assert_func+0x38>)
 800f14a:	461c      	mov	r4, r3
 800f14c:	e7f3      	b.n	800f136 <__assert_func+0x12>
 800f14e:	bf00      	nop
 800f150:	24000038 	.word	0x24000038
 800f154:	080111f6 	.word	0x080111f6
 800f158:	08011203 	.word	0x08011203
 800f15c:	08011231 	.word	0x08011231

0800f160 <quorem>:
 800f160:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f164:	6903      	ldr	r3, [r0, #16]
 800f166:	690c      	ldr	r4, [r1, #16]
 800f168:	42a3      	cmp	r3, r4
 800f16a:	4607      	mov	r7, r0
 800f16c:	db7e      	blt.n	800f26c <quorem+0x10c>
 800f16e:	3c01      	subs	r4, #1
 800f170:	f101 0814 	add.w	r8, r1, #20
 800f174:	00a3      	lsls	r3, r4, #2
 800f176:	f100 0514 	add.w	r5, r0, #20
 800f17a:	9300      	str	r3, [sp, #0]
 800f17c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f180:	9301      	str	r3, [sp, #4]
 800f182:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f186:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f18a:	3301      	adds	r3, #1
 800f18c:	429a      	cmp	r2, r3
 800f18e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f192:	fbb2 f6f3 	udiv	r6, r2, r3
 800f196:	d32e      	bcc.n	800f1f6 <quorem+0x96>
 800f198:	f04f 0a00 	mov.w	sl, #0
 800f19c:	46c4      	mov	ip, r8
 800f19e:	46ae      	mov	lr, r5
 800f1a0:	46d3      	mov	fp, sl
 800f1a2:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f1a6:	b298      	uxth	r0, r3
 800f1a8:	fb06 a000 	mla	r0, r6, r0, sl
 800f1ac:	0c02      	lsrs	r2, r0, #16
 800f1ae:	0c1b      	lsrs	r3, r3, #16
 800f1b0:	fb06 2303 	mla	r3, r6, r3, r2
 800f1b4:	f8de 2000 	ldr.w	r2, [lr]
 800f1b8:	b280      	uxth	r0, r0
 800f1ba:	b292      	uxth	r2, r2
 800f1bc:	1a12      	subs	r2, r2, r0
 800f1be:	445a      	add	r2, fp
 800f1c0:	f8de 0000 	ldr.w	r0, [lr]
 800f1c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f1c8:	b29b      	uxth	r3, r3
 800f1ca:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f1ce:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f1d2:	b292      	uxth	r2, r2
 800f1d4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f1d8:	45e1      	cmp	r9, ip
 800f1da:	f84e 2b04 	str.w	r2, [lr], #4
 800f1de:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f1e2:	d2de      	bcs.n	800f1a2 <quorem+0x42>
 800f1e4:	9b00      	ldr	r3, [sp, #0]
 800f1e6:	58eb      	ldr	r3, [r5, r3]
 800f1e8:	b92b      	cbnz	r3, 800f1f6 <quorem+0x96>
 800f1ea:	9b01      	ldr	r3, [sp, #4]
 800f1ec:	3b04      	subs	r3, #4
 800f1ee:	429d      	cmp	r5, r3
 800f1f0:	461a      	mov	r2, r3
 800f1f2:	d32f      	bcc.n	800f254 <quorem+0xf4>
 800f1f4:	613c      	str	r4, [r7, #16]
 800f1f6:	4638      	mov	r0, r7
 800f1f8:	f001 f90a 	bl	8010410 <__mcmp>
 800f1fc:	2800      	cmp	r0, #0
 800f1fe:	db25      	blt.n	800f24c <quorem+0xec>
 800f200:	4629      	mov	r1, r5
 800f202:	2000      	movs	r0, #0
 800f204:	f858 2b04 	ldr.w	r2, [r8], #4
 800f208:	f8d1 c000 	ldr.w	ip, [r1]
 800f20c:	fa1f fe82 	uxth.w	lr, r2
 800f210:	fa1f f38c 	uxth.w	r3, ip
 800f214:	eba3 030e 	sub.w	r3, r3, lr
 800f218:	4403      	add	r3, r0
 800f21a:	0c12      	lsrs	r2, r2, #16
 800f21c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f220:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f224:	b29b      	uxth	r3, r3
 800f226:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f22a:	45c1      	cmp	r9, r8
 800f22c:	f841 3b04 	str.w	r3, [r1], #4
 800f230:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f234:	d2e6      	bcs.n	800f204 <quorem+0xa4>
 800f236:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f23a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f23e:	b922      	cbnz	r2, 800f24a <quorem+0xea>
 800f240:	3b04      	subs	r3, #4
 800f242:	429d      	cmp	r5, r3
 800f244:	461a      	mov	r2, r3
 800f246:	d30b      	bcc.n	800f260 <quorem+0x100>
 800f248:	613c      	str	r4, [r7, #16]
 800f24a:	3601      	adds	r6, #1
 800f24c:	4630      	mov	r0, r6
 800f24e:	b003      	add	sp, #12
 800f250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f254:	6812      	ldr	r2, [r2, #0]
 800f256:	3b04      	subs	r3, #4
 800f258:	2a00      	cmp	r2, #0
 800f25a:	d1cb      	bne.n	800f1f4 <quorem+0x94>
 800f25c:	3c01      	subs	r4, #1
 800f25e:	e7c6      	b.n	800f1ee <quorem+0x8e>
 800f260:	6812      	ldr	r2, [r2, #0]
 800f262:	3b04      	subs	r3, #4
 800f264:	2a00      	cmp	r2, #0
 800f266:	d1ef      	bne.n	800f248 <quorem+0xe8>
 800f268:	3c01      	subs	r4, #1
 800f26a:	e7ea      	b.n	800f242 <quorem+0xe2>
 800f26c:	2000      	movs	r0, #0
 800f26e:	e7ee      	b.n	800f24e <quorem+0xee>

0800f270 <_dtoa_r>:
 800f270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f274:	ed2d 8b02 	vpush	{d8}
 800f278:	69c7      	ldr	r7, [r0, #28]
 800f27a:	b091      	sub	sp, #68	@ 0x44
 800f27c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f280:	ec55 4b10 	vmov	r4, r5, d0
 800f284:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800f286:	9107      	str	r1, [sp, #28]
 800f288:	4681      	mov	r9, r0
 800f28a:	9209      	str	r2, [sp, #36]	@ 0x24
 800f28c:	930d      	str	r3, [sp, #52]	@ 0x34
 800f28e:	b97f      	cbnz	r7, 800f2b0 <_dtoa_r+0x40>
 800f290:	2010      	movs	r0, #16
 800f292:	f000 fd95 	bl	800fdc0 <malloc>
 800f296:	4602      	mov	r2, r0
 800f298:	f8c9 001c 	str.w	r0, [r9, #28]
 800f29c:	b920      	cbnz	r0, 800f2a8 <_dtoa_r+0x38>
 800f29e:	4ba0      	ldr	r3, [pc, #640]	@ (800f520 <_dtoa_r+0x2b0>)
 800f2a0:	21ef      	movs	r1, #239	@ 0xef
 800f2a2:	48a0      	ldr	r0, [pc, #640]	@ (800f524 <_dtoa_r+0x2b4>)
 800f2a4:	f7ff ff3e 	bl	800f124 <__assert_func>
 800f2a8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f2ac:	6007      	str	r7, [r0, #0]
 800f2ae:	60c7      	str	r7, [r0, #12]
 800f2b0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f2b4:	6819      	ldr	r1, [r3, #0]
 800f2b6:	b159      	cbz	r1, 800f2d0 <_dtoa_r+0x60>
 800f2b8:	685a      	ldr	r2, [r3, #4]
 800f2ba:	604a      	str	r2, [r1, #4]
 800f2bc:	2301      	movs	r3, #1
 800f2be:	4093      	lsls	r3, r2
 800f2c0:	608b      	str	r3, [r1, #8]
 800f2c2:	4648      	mov	r0, r9
 800f2c4:	f000 fe72 	bl	800ffac <_Bfree>
 800f2c8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f2cc:	2200      	movs	r2, #0
 800f2ce:	601a      	str	r2, [r3, #0]
 800f2d0:	1e2b      	subs	r3, r5, #0
 800f2d2:	bfbb      	ittet	lt
 800f2d4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f2d8:	9303      	strlt	r3, [sp, #12]
 800f2da:	2300      	movge	r3, #0
 800f2dc:	2201      	movlt	r2, #1
 800f2de:	bfac      	ite	ge
 800f2e0:	6033      	strge	r3, [r6, #0]
 800f2e2:	6032      	strlt	r2, [r6, #0]
 800f2e4:	4b90      	ldr	r3, [pc, #576]	@ (800f528 <_dtoa_r+0x2b8>)
 800f2e6:	9e03      	ldr	r6, [sp, #12]
 800f2e8:	43b3      	bics	r3, r6
 800f2ea:	d110      	bne.n	800f30e <_dtoa_r+0x9e>
 800f2ec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f2ee:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f2f2:	6013      	str	r3, [r2, #0]
 800f2f4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800f2f8:	4323      	orrs	r3, r4
 800f2fa:	f000 84e6 	beq.w	800fcca <_dtoa_r+0xa5a>
 800f2fe:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f300:	4f8a      	ldr	r7, [pc, #552]	@ (800f52c <_dtoa_r+0x2bc>)
 800f302:	2b00      	cmp	r3, #0
 800f304:	f000 84e8 	beq.w	800fcd8 <_dtoa_r+0xa68>
 800f308:	1cfb      	adds	r3, r7, #3
 800f30a:	f000 bce3 	b.w	800fcd4 <_dtoa_r+0xa64>
 800f30e:	ed9d 8b02 	vldr	d8, [sp, #8]
 800f312:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f31a:	d10a      	bne.n	800f332 <_dtoa_r+0xc2>
 800f31c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f31e:	2301      	movs	r3, #1
 800f320:	6013      	str	r3, [r2, #0]
 800f322:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f324:	b113      	cbz	r3, 800f32c <_dtoa_r+0xbc>
 800f326:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800f328:	4b81      	ldr	r3, [pc, #516]	@ (800f530 <_dtoa_r+0x2c0>)
 800f32a:	6013      	str	r3, [r2, #0]
 800f32c:	4f81      	ldr	r7, [pc, #516]	@ (800f534 <_dtoa_r+0x2c4>)
 800f32e:	f000 bcd3 	b.w	800fcd8 <_dtoa_r+0xa68>
 800f332:	aa0e      	add	r2, sp, #56	@ 0x38
 800f334:	a90f      	add	r1, sp, #60	@ 0x3c
 800f336:	4648      	mov	r0, r9
 800f338:	eeb0 0b48 	vmov.f64	d0, d8
 800f33c:	f001 f918 	bl	8010570 <__d2b>
 800f340:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800f344:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f346:	9001      	str	r0, [sp, #4]
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d045      	beq.n	800f3d8 <_dtoa_r+0x168>
 800f34c:	eeb0 7b48 	vmov.f64	d7, d8
 800f350:	ee18 1a90 	vmov	r1, s17
 800f354:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800f358:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800f35c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800f360:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800f364:	2500      	movs	r5, #0
 800f366:	ee07 1a90 	vmov	s15, r1
 800f36a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800f36e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800f508 <_dtoa_r+0x298>
 800f372:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f376:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800f510 <_dtoa_r+0x2a0>
 800f37a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800f37e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800f518 <_dtoa_r+0x2a8>
 800f382:	ee07 3a90 	vmov	s15, r3
 800f386:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800f38a:	eeb0 7b46 	vmov.f64	d7, d6
 800f38e:	eea4 7b05 	vfma.f64	d7, d4, d5
 800f392:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800f396:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800f39a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f39e:	ee16 8a90 	vmov	r8, s13
 800f3a2:	d508      	bpl.n	800f3b6 <_dtoa_r+0x146>
 800f3a4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800f3a8:	eeb4 6b47 	vcmp.f64	d6, d7
 800f3ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3b0:	bf18      	it	ne
 800f3b2:	f108 38ff 	addne.w	r8, r8, #4294967295
 800f3b6:	f1b8 0f16 	cmp.w	r8, #22
 800f3ba:	d82b      	bhi.n	800f414 <_dtoa_r+0x1a4>
 800f3bc:	495e      	ldr	r1, [pc, #376]	@ (800f538 <_dtoa_r+0x2c8>)
 800f3be:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800f3c2:	ed91 7b00 	vldr	d7, [r1]
 800f3c6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800f3ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3ce:	d501      	bpl.n	800f3d4 <_dtoa_r+0x164>
 800f3d0:	f108 38ff 	add.w	r8, r8, #4294967295
 800f3d4:	2100      	movs	r1, #0
 800f3d6:	e01e      	b.n	800f416 <_dtoa_r+0x1a6>
 800f3d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f3da:	4413      	add	r3, r2
 800f3dc:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800f3e0:	2920      	cmp	r1, #32
 800f3e2:	bfc1      	itttt	gt
 800f3e4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800f3e8:	408e      	lslgt	r6, r1
 800f3ea:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800f3ee:	fa24 f101 	lsrgt.w	r1, r4, r1
 800f3f2:	bfd6      	itet	le
 800f3f4:	f1c1 0120 	rsble	r1, r1, #32
 800f3f8:	4331      	orrgt	r1, r6
 800f3fa:	fa04 f101 	lslle.w	r1, r4, r1
 800f3fe:	ee07 1a90 	vmov	s15, r1
 800f402:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800f406:	3b01      	subs	r3, #1
 800f408:	ee17 1a90 	vmov	r1, s15
 800f40c:	2501      	movs	r5, #1
 800f40e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800f412:	e7a8      	b.n	800f366 <_dtoa_r+0xf6>
 800f414:	2101      	movs	r1, #1
 800f416:	1ad2      	subs	r2, r2, r3
 800f418:	1e53      	subs	r3, r2, #1
 800f41a:	9306      	str	r3, [sp, #24]
 800f41c:	bf45      	ittet	mi
 800f41e:	f1c2 0301 	rsbmi	r3, r2, #1
 800f422:	9304      	strmi	r3, [sp, #16]
 800f424:	2300      	movpl	r3, #0
 800f426:	2300      	movmi	r3, #0
 800f428:	bf4c      	ite	mi
 800f42a:	9306      	strmi	r3, [sp, #24]
 800f42c:	9304      	strpl	r3, [sp, #16]
 800f42e:	f1b8 0f00 	cmp.w	r8, #0
 800f432:	910c      	str	r1, [sp, #48]	@ 0x30
 800f434:	db18      	blt.n	800f468 <_dtoa_r+0x1f8>
 800f436:	9b06      	ldr	r3, [sp, #24]
 800f438:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800f43c:	4443      	add	r3, r8
 800f43e:	9306      	str	r3, [sp, #24]
 800f440:	2300      	movs	r3, #0
 800f442:	9a07      	ldr	r2, [sp, #28]
 800f444:	2a09      	cmp	r2, #9
 800f446:	d845      	bhi.n	800f4d4 <_dtoa_r+0x264>
 800f448:	2a05      	cmp	r2, #5
 800f44a:	bfc4      	itt	gt
 800f44c:	3a04      	subgt	r2, #4
 800f44e:	9207      	strgt	r2, [sp, #28]
 800f450:	9a07      	ldr	r2, [sp, #28]
 800f452:	f1a2 0202 	sub.w	r2, r2, #2
 800f456:	bfcc      	ite	gt
 800f458:	2400      	movgt	r4, #0
 800f45a:	2401      	movle	r4, #1
 800f45c:	2a03      	cmp	r2, #3
 800f45e:	d844      	bhi.n	800f4ea <_dtoa_r+0x27a>
 800f460:	e8df f002 	tbb	[pc, r2]
 800f464:	0b173634 	.word	0x0b173634
 800f468:	9b04      	ldr	r3, [sp, #16]
 800f46a:	2200      	movs	r2, #0
 800f46c:	eba3 0308 	sub.w	r3, r3, r8
 800f470:	9304      	str	r3, [sp, #16]
 800f472:	920a      	str	r2, [sp, #40]	@ 0x28
 800f474:	f1c8 0300 	rsb	r3, r8, #0
 800f478:	e7e3      	b.n	800f442 <_dtoa_r+0x1d2>
 800f47a:	2201      	movs	r2, #1
 800f47c:	9208      	str	r2, [sp, #32]
 800f47e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f480:	eb08 0b02 	add.w	fp, r8, r2
 800f484:	f10b 0a01 	add.w	sl, fp, #1
 800f488:	4652      	mov	r2, sl
 800f48a:	2a01      	cmp	r2, #1
 800f48c:	bfb8      	it	lt
 800f48e:	2201      	movlt	r2, #1
 800f490:	e006      	b.n	800f4a0 <_dtoa_r+0x230>
 800f492:	2201      	movs	r2, #1
 800f494:	9208      	str	r2, [sp, #32]
 800f496:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f498:	2a00      	cmp	r2, #0
 800f49a:	dd29      	ble.n	800f4f0 <_dtoa_r+0x280>
 800f49c:	4693      	mov	fp, r2
 800f49e:	4692      	mov	sl, r2
 800f4a0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800f4a4:	2100      	movs	r1, #0
 800f4a6:	2004      	movs	r0, #4
 800f4a8:	f100 0614 	add.w	r6, r0, #20
 800f4ac:	4296      	cmp	r6, r2
 800f4ae:	d926      	bls.n	800f4fe <_dtoa_r+0x28e>
 800f4b0:	6079      	str	r1, [r7, #4]
 800f4b2:	4648      	mov	r0, r9
 800f4b4:	9305      	str	r3, [sp, #20]
 800f4b6:	f000 fd39 	bl	800ff2c <_Balloc>
 800f4ba:	9b05      	ldr	r3, [sp, #20]
 800f4bc:	4607      	mov	r7, r0
 800f4be:	2800      	cmp	r0, #0
 800f4c0:	d13e      	bne.n	800f540 <_dtoa_r+0x2d0>
 800f4c2:	4b1e      	ldr	r3, [pc, #120]	@ (800f53c <_dtoa_r+0x2cc>)
 800f4c4:	4602      	mov	r2, r0
 800f4c6:	f240 11af 	movw	r1, #431	@ 0x1af
 800f4ca:	e6ea      	b.n	800f2a2 <_dtoa_r+0x32>
 800f4cc:	2200      	movs	r2, #0
 800f4ce:	e7e1      	b.n	800f494 <_dtoa_r+0x224>
 800f4d0:	2200      	movs	r2, #0
 800f4d2:	e7d3      	b.n	800f47c <_dtoa_r+0x20c>
 800f4d4:	2401      	movs	r4, #1
 800f4d6:	2200      	movs	r2, #0
 800f4d8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800f4dc:	f04f 3bff 	mov.w	fp, #4294967295
 800f4e0:	2100      	movs	r1, #0
 800f4e2:	46da      	mov	sl, fp
 800f4e4:	2212      	movs	r2, #18
 800f4e6:	9109      	str	r1, [sp, #36]	@ 0x24
 800f4e8:	e7da      	b.n	800f4a0 <_dtoa_r+0x230>
 800f4ea:	2201      	movs	r2, #1
 800f4ec:	9208      	str	r2, [sp, #32]
 800f4ee:	e7f5      	b.n	800f4dc <_dtoa_r+0x26c>
 800f4f0:	f04f 0b01 	mov.w	fp, #1
 800f4f4:	46da      	mov	sl, fp
 800f4f6:	465a      	mov	r2, fp
 800f4f8:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800f4fc:	e7d0      	b.n	800f4a0 <_dtoa_r+0x230>
 800f4fe:	3101      	adds	r1, #1
 800f500:	0040      	lsls	r0, r0, #1
 800f502:	e7d1      	b.n	800f4a8 <_dtoa_r+0x238>
 800f504:	f3af 8000 	nop.w
 800f508:	636f4361 	.word	0x636f4361
 800f50c:	3fd287a7 	.word	0x3fd287a7
 800f510:	8b60c8b3 	.word	0x8b60c8b3
 800f514:	3fc68a28 	.word	0x3fc68a28
 800f518:	509f79fb 	.word	0x509f79fb
 800f51c:	3fd34413 	.word	0x3fd34413
 800f520:	08011185 	.word	0x08011185
 800f524:	0801123f 	.word	0x0801123f
 800f528:	7ff00000 	.word	0x7ff00000
 800f52c:	0801123b 	.word	0x0801123b
 800f530:	08011162 	.word	0x08011162
 800f534:	08011161 	.word	0x08011161
 800f538:	08011350 	.word	0x08011350
 800f53c:	08011297 	.word	0x08011297
 800f540:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800f544:	f1ba 0f0e 	cmp.w	sl, #14
 800f548:	6010      	str	r0, [r2, #0]
 800f54a:	d86e      	bhi.n	800f62a <_dtoa_r+0x3ba>
 800f54c:	2c00      	cmp	r4, #0
 800f54e:	d06c      	beq.n	800f62a <_dtoa_r+0x3ba>
 800f550:	f1b8 0f00 	cmp.w	r8, #0
 800f554:	f340 80b4 	ble.w	800f6c0 <_dtoa_r+0x450>
 800f558:	4ac8      	ldr	r2, [pc, #800]	@ (800f87c <_dtoa_r+0x60c>)
 800f55a:	f008 010f 	and.w	r1, r8, #15
 800f55e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800f562:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800f566:	ed92 7b00 	vldr	d7, [r2]
 800f56a:	ea4f 1128 	mov.w	r1, r8, asr #4
 800f56e:	f000 809b 	beq.w	800f6a8 <_dtoa_r+0x438>
 800f572:	4ac3      	ldr	r2, [pc, #780]	@ (800f880 <_dtoa_r+0x610>)
 800f574:	ed92 6b08 	vldr	d6, [r2, #32]
 800f578:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800f57c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800f580:	f001 010f 	and.w	r1, r1, #15
 800f584:	2203      	movs	r2, #3
 800f586:	48be      	ldr	r0, [pc, #760]	@ (800f880 <_dtoa_r+0x610>)
 800f588:	2900      	cmp	r1, #0
 800f58a:	f040 808f 	bne.w	800f6ac <_dtoa_r+0x43c>
 800f58e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f592:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f596:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f59a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f59c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f5a0:	2900      	cmp	r1, #0
 800f5a2:	f000 80b3 	beq.w	800f70c <_dtoa_r+0x49c>
 800f5a6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800f5aa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f5ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5b2:	f140 80ab 	bpl.w	800f70c <_dtoa_r+0x49c>
 800f5b6:	f1ba 0f00 	cmp.w	sl, #0
 800f5ba:	f000 80a7 	beq.w	800f70c <_dtoa_r+0x49c>
 800f5be:	f1bb 0f00 	cmp.w	fp, #0
 800f5c2:	dd30      	ble.n	800f626 <_dtoa_r+0x3b6>
 800f5c4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800f5c8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f5cc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f5d0:	f108 31ff 	add.w	r1, r8, #4294967295
 800f5d4:	9105      	str	r1, [sp, #20]
 800f5d6:	3201      	adds	r2, #1
 800f5d8:	465c      	mov	r4, fp
 800f5da:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f5de:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800f5e2:	ee07 2a90 	vmov	s15, r2
 800f5e6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f5ea:	eea7 5b06 	vfma.f64	d5, d7, d6
 800f5ee:	ee15 2a90 	vmov	r2, s11
 800f5f2:	ec51 0b15 	vmov	r0, r1, d5
 800f5f6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800f5fa:	2c00      	cmp	r4, #0
 800f5fc:	f040 808a 	bne.w	800f714 <_dtoa_r+0x4a4>
 800f600:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800f604:	ee36 6b47 	vsub.f64	d6, d6, d7
 800f608:	ec41 0b17 	vmov	d7, r0, r1
 800f60c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f614:	f300 826a 	bgt.w	800faec <_dtoa_r+0x87c>
 800f618:	eeb1 7b47 	vneg.f64	d7, d7
 800f61c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f624:	d423      	bmi.n	800f66e <_dtoa_r+0x3fe>
 800f626:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f62a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f62c:	2a00      	cmp	r2, #0
 800f62e:	f2c0 8129 	blt.w	800f884 <_dtoa_r+0x614>
 800f632:	f1b8 0f0e 	cmp.w	r8, #14
 800f636:	f300 8125 	bgt.w	800f884 <_dtoa_r+0x614>
 800f63a:	4b90      	ldr	r3, [pc, #576]	@ (800f87c <_dtoa_r+0x60c>)
 800f63c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f640:	ed93 6b00 	vldr	d6, [r3]
 800f644:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f646:	2b00      	cmp	r3, #0
 800f648:	f280 80c8 	bge.w	800f7dc <_dtoa_r+0x56c>
 800f64c:	f1ba 0f00 	cmp.w	sl, #0
 800f650:	f300 80c4 	bgt.w	800f7dc <_dtoa_r+0x56c>
 800f654:	d10b      	bne.n	800f66e <_dtoa_r+0x3fe>
 800f656:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800f65a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800f65e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f662:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f66a:	f2c0 823c 	blt.w	800fae6 <_dtoa_r+0x876>
 800f66e:	2400      	movs	r4, #0
 800f670:	4625      	mov	r5, r4
 800f672:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f674:	43db      	mvns	r3, r3
 800f676:	9305      	str	r3, [sp, #20]
 800f678:	463e      	mov	r6, r7
 800f67a:	f04f 0800 	mov.w	r8, #0
 800f67e:	4621      	mov	r1, r4
 800f680:	4648      	mov	r0, r9
 800f682:	f000 fc93 	bl	800ffac <_Bfree>
 800f686:	2d00      	cmp	r5, #0
 800f688:	f000 80a2 	beq.w	800f7d0 <_dtoa_r+0x560>
 800f68c:	f1b8 0f00 	cmp.w	r8, #0
 800f690:	d005      	beq.n	800f69e <_dtoa_r+0x42e>
 800f692:	45a8      	cmp	r8, r5
 800f694:	d003      	beq.n	800f69e <_dtoa_r+0x42e>
 800f696:	4641      	mov	r1, r8
 800f698:	4648      	mov	r0, r9
 800f69a:	f000 fc87 	bl	800ffac <_Bfree>
 800f69e:	4629      	mov	r1, r5
 800f6a0:	4648      	mov	r0, r9
 800f6a2:	f000 fc83 	bl	800ffac <_Bfree>
 800f6a6:	e093      	b.n	800f7d0 <_dtoa_r+0x560>
 800f6a8:	2202      	movs	r2, #2
 800f6aa:	e76c      	b.n	800f586 <_dtoa_r+0x316>
 800f6ac:	07cc      	lsls	r4, r1, #31
 800f6ae:	d504      	bpl.n	800f6ba <_dtoa_r+0x44a>
 800f6b0:	ed90 6b00 	vldr	d6, [r0]
 800f6b4:	3201      	adds	r2, #1
 800f6b6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f6ba:	1049      	asrs	r1, r1, #1
 800f6bc:	3008      	adds	r0, #8
 800f6be:	e763      	b.n	800f588 <_dtoa_r+0x318>
 800f6c0:	d022      	beq.n	800f708 <_dtoa_r+0x498>
 800f6c2:	f1c8 0100 	rsb	r1, r8, #0
 800f6c6:	4a6d      	ldr	r2, [pc, #436]	@ (800f87c <_dtoa_r+0x60c>)
 800f6c8:	f001 000f 	and.w	r0, r1, #15
 800f6cc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800f6d0:	ed92 7b00 	vldr	d7, [r2]
 800f6d4:	ee28 7b07 	vmul.f64	d7, d8, d7
 800f6d8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f6dc:	4868      	ldr	r0, [pc, #416]	@ (800f880 <_dtoa_r+0x610>)
 800f6de:	1109      	asrs	r1, r1, #4
 800f6e0:	2400      	movs	r4, #0
 800f6e2:	2202      	movs	r2, #2
 800f6e4:	b929      	cbnz	r1, 800f6f2 <_dtoa_r+0x482>
 800f6e6:	2c00      	cmp	r4, #0
 800f6e8:	f43f af57 	beq.w	800f59a <_dtoa_r+0x32a>
 800f6ec:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f6f0:	e753      	b.n	800f59a <_dtoa_r+0x32a>
 800f6f2:	07ce      	lsls	r6, r1, #31
 800f6f4:	d505      	bpl.n	800f702 <_dtoa_r+0x492>
 800f6f6:	ed90 6b00 	vldr	d6, [r0]
 800f6fa:	3201      	adds	r2, #1
 800f6fc:	2401      	movs	r4, #1
 800f6fe:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f702:	1049      	asrs	r1, r1, #1
 800f704:	3008      	adds	r0, #8
 800f706:	e7ed      	b.n	800f6e4 <_dtoa_r+0x474>
 800f708:	2202      	movs	r2, #2
 800f70a:	e746      	b.n	800f59a <_dtoa_r+0x32a>
 800f70c:	f8cd 8014 	str.w	r8, [sp, #20]
 800f710:	4654      	mov	r4, sl
 800f712:	e762      	b.n	800f5da <_dtoa_r+0x36a>
 800f714:	4a59      	ldr	r2, [pc, #356]	@ (800f87c <_dtoa_r+0x60c>)
 800f716:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800f71a:	ed12 4b02 	vldr	d4, [r2, #-8]
 800f71e:	9a08      	ldr	r2, [sp, #32]
 800f720:	ec41 0b17 	vmov	d7, r0, r1
 800f724:	443c      	add	r4, r7
 800f726:	b34a      	cbz	r2, 800f77c <_dtoa_r+0x50c>
 800f728:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800f72c:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800f730:	463e      	mov	r6, r7
 800f732:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800f736:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800f73a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f73e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f742:	ee14 2a90 	vmov	r2, s9
 800f746:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f74a:	3230      	adds	r2, #48	@ 0x30
 800f74c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f750:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f758:	f806 2b01 	strb.w	r2, [r6], #1
 800f75c:	d438      	bmi.n	800f7d0 <_dtoa_r+0x560>
 800f75e:	ee32 5b46 	vsub.f64	d5, d2, d6
 800f762:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800f766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f76a:	d46e      	bmi.n	800f84a <_dtoa_r+0x5da>
 800f76c:	42a6      	cmp	r6, r4
 800f76e:	f43f af5a 	beq.w	800f626 <_dtoa_r+0x3b6>
 800f772:	ee27 7b03 	vmul.f64	d7, d7, d3
 800f776:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f77a:	e7e0      	b.n	800f73e <_dtoa_r+0x4ce>
 800f77c:	4621      	mov	r1, r4
 800f77e:	463e      	mov	r6, r7
 800f780:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f784:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800f788:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f78c:	ee14 2a90 	vmov	r2, s9
 800f790:	3230      	adds	r2, #48	@ 0x30
 800f792:	f806 2b01 	strb.w	r2, [r6], #1
 800f796:	42a6      	cmp	r6, r4
 800f798:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f79c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f7a0:	d119      	bne.n	800f7d6 <_dtoa_r+0x566>
 800f7a2:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800f7a6:	ee37 4b05 	vadd.f64	d4, d7, d5
 800f7aa:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800f7ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7b2:	dc4a      	bgt.n	800f84a <_dtoa_r+0x5da>
 800f7b4:	ee35 5b47 	vsub.f64	d5, d5, d7
 800f7b8:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800f7bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7c0:	f57f af31 	bpl.w	800f626 <_dtoa_r+0x3b6>
 800f7c4:	460e      	mov	r6, r1
 800f7c6:	3901      	subs	r1, #1
 800f7c8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f7cc:	2b30      	cmp	r3, #48	@ 0x30
 800f7ce:	d0f9      	beq.n	800f7c4 <_dtoa_r+0x554>
 800f7d0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800f7d4:	e027      	b.n	800f826 <_dtoa_r+0x5b6>
 800f7d6:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f7da:	e7d5      	b.n	800f788 <_dtoa_r+0x518>
 800f7dc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f7e0:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800f7e4:	463e      	mov	r6, r7
 800f7e6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800f7ea:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800f7ee:	ee15 3a10 	vmov	r3, s10
 800f7f2:	3330      	adds	r3, #48	@ 0x30
 800f7f4:	f806 3b01 	strb.w	r3, [r6], #1
 800f7f8:	1bf3      	subs	r3, r6, r7
 800f7fa:	459a      	cmp	sl, r3
 800f7fc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800f800:	eea3 7b46 	vfms.f64	d7, d3, d6
 800f804:	d132      	bne.n	800f86c <_dtoa_r+0x5fc>
 800f806:	ee37 7b07 	vadd.f64	d7, d7, d7
 800f80a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f80e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f812:	dc18      	bgt.n	800f846 <_dtoa_r+0x5d6>
 800f814:	eeb4 7b46 	vcmp.f64	d7, d6
 800f818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f81c:	d103      	bne.n	800f826 <_dtoa_r+0x5b6>
 800f81e:	ee15 3a10 	vmov	r3, s10
 800f822:	07db      	lsls	r3, r3, #31
 800f824:	d40f      	bmi.n	800f846 <_dtoa_r+0x5d6>
 800f826:	9901      	ldr	r1, [sp, #4]
 800f828:	4648      	mov	r0, r9
 800f82a:	f000 fbbf 	bl	800ffac <_Bfree>
 800f82e:	2300      	movs	r3, #0
 800f830:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f832:	7033      	strb	r3, [r6, #0]
 800f834:	f108 0301 	add.w	r3, r8, #1
 800f838:	6013      	str	r3, [r2, #0]
 800f83a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	f000 824b 	beq.w	800fcd8 <_dtoa_r+0xa68>
 800f842:	601e      	str	r6, [r3, #0]
 800f844:	e248      	b.n	800fcd8 <_dtoa_r+0xa68>
 800f846:	f8cd 8014 	str.w	r8, [sp, #20]
 800f84a:	4633      	mov	r3, r6
 800f84c:	461e      	mov	r6, r3
 800f84e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f852:	2a39      	cmp	r2, #57	@ 0x39
 800f854:	d106      	bne.n	800f864 <_dtoa_r+0x5f4>
 800f856:	429f      	cmp	r7, r3
 800f858:	d1f8      	bne.n	800f84c <_dtoa_r+0x5dc>
 800f85a:	9a05      	ldr	r2, [sp, #20]
 800f85c:	3201      	adds	r2, #1
 800f85e:	9205      	str	r2, [sp, #20]
 800f860:	2230      	movs	r2, #48	@ 0x30
 800f862:	703a      	strb	r2, [r7, #0]
 800f864:	781a      	ldrb	r2, [r3, #0]
 800f866:	3201      	adds	r2, #1
 800f868:	701a      	strb	r2, [r3, #0]
 800f86a:	e7b1      	b.n	800f7d0 <_dtoa_r+0x560>
 800f86c:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f870:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f878:	d1b5      	bne.n	800f7e6 <_dtoa_r+0x576>
 800f87a:	e7d4      	b.n	800f826 <_dtoa_r+0x5b6>
 800f87c:	08011350 	.word	0x08011350
 800f880:	08011328 	.word	0x08011328
 800f884:	9908      	ldr	r1, [sp, #32]
 800f886:	2900      	cmp	r1, #0
 800f888:	f000 80e9 	beq.w	800fa5e <_dtoa_r+0x7ee>
 800f88c:	9907      	ldr	r1, [sp, #28]
 800f88e:	2901      	cmp	r1, #1
 800f890:	f300 80cb 	bgt.w	800fa2a <_dtoa_r+0x7ba>
 800f894:	2d00      	cmp	r5, #0
 800f896:	f000 80c4 	beq.w	800fa22 <_dtoa_r+0x7b2>
 800f89a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800f89e:	9e04      	ldr	r6, [sp, #16]
 800f8a0:	461c      	mov	r4, r3
 800f8a2:	9305      	str	r3, [sp, #20]
 800f8a4:	9b04      	ldr	r3, [sp, #16]
 800f8a6:	4413      	add	r3, r2
 800f8a8:	9304      	str	r3, [sp, #16]
 800f8aa:	9b06      	ldr	r3, [sp, #24]
 800f8ac:	2101      	movs	r1, #1
 800f8ae:	4413      	add	r3, r2
 800f8b0:	4648      	mov	r0, r9
 800f8b2:	9306      	str	r3, [sp, #24]
 800f8b4:	f000 fc2e 	bl	8010114 <__i2b>
 800f8b8:	9b05      	ldr	r3, [sp, #20]
 800f8ba:	4605      	mov	r5, r0
 800f8bc:	b166      	cbz	r6, 800f8d8 <_dtoa_r+0x668>
 800f8be:	9a06      	ldr	r2, [sp, #24]
 800f8c0:	2a00      	cmp	r2, #0
 800f8c2:	dd09      	ble.n	800f8d8 <_dtoa_r+0x668>
 800f8c4:	42b2      	cmp	r2, r6
 800f8c6:	9904      	ldr	r1, [sp, #16]
 800f8c8:	bfa8      	it	ge
 800f8ca:	4632      	movge	r2, r6
 800f8cc:	1a89      	subs	r1, r1, r2
 800f8ce:	9104      	str	r1, [sp, #16]
 800f8d0:	9906      	ldr	r1, [sp, #24]
 800f8d2:	1ab6      	subs	r6, r6, r2
 800f8d4:	1a8a      	subs	r2, r1, r2
 800f8d6:	9206      	str	r2, [sp, #24]
 800f8d8:	b30b      	cbz	r3, 800f91e <_dtoa_r+0x6ae>
 800f8da:	9a08      	ldr	r2, [sp, #32]
 800f8dc:	2a00      	cmp	r2, #0
 800f8de:	f000 80c5 	beq.w	800fa6c <_dtoa_r+0x7fc>
 800f8e2:	2c00      	cmp	r4, #0
 800f8e4:	f000 80bf 	beq.w	800fa66 <_dtoa_r+0x7f6>
 800f8e8:	4629      	mov	r1, r5
 800f8ea:	4622      	mov	r2, r4
 800f8ec:	4648      	mov	r0, r9
 800f8ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f8f0:	f000 fcc8 	bl	8010284 <__pow5mult>
 800f8f4:	9a01      	ldr	r2, [sp, #4]
 800f8f6:	4601      	mov	r1, r0
 800f8f8:	4605      	mov	r5, r0
 800f8fa:	4648      	mov	r0, r9
 800f8fc:	f000 fc20 	bl	8010140 <__multiply>
 800f900:	9901      	ldr	r1, [sp, #4]
 800f902:	9005      	str	r0, [sp, #20]
 800f904:	4648      	mov	r0, r9
 800f906:	f000 fb51 	bl	800ffac <_Bfree>
 800f90a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f90c:	1b1b      	subs	r3, r3, r4
 800f90e:	f000 80b0 	beq.w	800fa72 <_dtoa_r+0x802>
 800f912:	9905      	ldr	r1, [sp, #20]
 800f914:	461a      	mov	r2, r3
 800f916:	4648      	mov	r0, r9
 800f918:	f000 fcb4 	bl	8010284 <__pow5mult>
 800f91c:	9001      	str	r0, [sp, #4]
 800f91e:	2101      	movs	r1, #1
 800f920:	4648      	mov	r0, r9
 800f922:	f000 fbf7 	bl	8010114 <__i2b>
 800f926:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f928:	4604      	mov	r4, r0
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	f000 81da 	beq.w	800fce4 <_dtoa_r+0xa74>
 800f930:	461a      	mov	r2, r3
 800f932:	4601      	mov	r1, r0
 800f934:	4648      	mov	r0, r9
 800f936:	f000 fca5 	bl	8010284 <__pow5mult>
 800f93a:	9b07      	ldr	r3, [sp, #28]
 800f93c:	2b01      	cmp	r3, #1
 800f93e:	4604      	mov	r4, r0
 800f940:	f300 80a0 	bgt.w	800fa84 <_dtoa_r+0x814>
 800f944:	9b02      	ldr	r3, [sp, #8]
 800f946:	2b00      	cmp	r3, #0
 800f948:	f040 8096 	bne.w	800fa78 <_dtoa_r+0x808>
 800f94c:	9b03      	ldr	r3, [sp, #12]
 800f94e:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800f952:	2a00      	cmp	r2, #0
 800f954:	f040 8092 	bne.w	800fa7c <_dtoa_r+0x80c>
 800f958:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800f95c:	0d12      	lsrs	r2, r2, #20
 800f95e:	0512      	lsls	r2, r2, #20
 800f960:	2a00      	cmp	r2, #0
 800f962:	f000 808d 	beq.w	800fa80 <_dtoa_r+0x810>
 800f966:	9b04      	ldr	r3, [sp, #16]
 800f968:	3301      	adds	r3, #1
 800f96a:	9304      	str	r3, [sp, #16]
 800f96c:	9b06      	ldr	r3, [sp, #24]
 800f96e:	3301      	adds	r3, #1
 800f970:	9306      	str	r3, [sp, #24]
 800f972:	2301      	movs	r3, #1
 800f974:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f976:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f978:	2b00      	cmp	r3, #0
 800f97a:	f000 81b9 	beq.w	800fcf0 <_dtoa_r+0xa80>
 800f97e:	6922      	ldr	r2, [r4, #16]
 800f980:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800f984:	6910      	ldr	r0, [r2, #16]
 800f986:	f000 fb79 	bl	801007c <__hi0bits>
 800f98a:	f1c0 0020 	rsb	r0, r0, #32
 800f98e:	9b06      	ldr	r3, [sp, #24]
 800f990:	4418      	add	r0, r3
 800f992:	f010 001f 	ands.w	r0, r0, #31
 800f996:	f000 8081 	beq.w	800fa9c <_dtoa_r+0x82c>
 800f99a:	f1c0 0220 	rsb	r2, r0, #32
 800f99e:	2a04      	cmp	r2, #4
 800f9a0:	dd73      	ble.n	800fa8a <_dtoa_r+0x81a>
 800f9a2:	9b04      	ldr	r3, [sp, #16]
 800f9a4:	f1c0 001c 	rsb	r0, r0, #28
 800f9a8:	4403      	add	r3, r0
 800f9aa:	9304      	str	r3, [sp, #16]
 800f9ac:	9b06      	ldr	r3, [sp, #24]
 800f9ae:	4406      	add	r6, r0
 800f9b0:	4403      	add	r3, r0
 800f9b2:	9306      	str	r3, [sp, #24]
 800f9b4:	9b04      	ldr	r3, [sp, #16]
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	dd05      	ble.n	800f9c6 <_dtoa_r+0x756>
 800f9ba:	9901      	ldr	r1, [sp, #4]
 800f9bc:	461a      	mov	r2, r3
 800f9be:	4648      	mov	r0, r9
 800f9c0:	f000 fcba 	bl	8010338 <__lshift>
 800f9c4:	9001      	str	r0, [sp, #4]
 800f9c6:	9b06      	ldr	r3, [sp, #24]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	dd05      	ble.n	800f9d8 <_dtoa_r+0x768>
 800f9cc:	4621      	mov	r1, r4
 800f9ce:	461a      	mov	r2, r3
 800f9d0:	4648      	mov	r0, r9
 800f9d2:	f000 fcb1 	bl	8010338 <__lshift>
 800f9d6:	4604      	mov	r4, r0
 800f9d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d060      	beq.n	800faa0 <_dtoa_r+0x830>
 800f9de:	9801      	ldr	r0, [sp, #4]
 800f9e0:	4621      	mov	r1, r4
 800f9e2:	f000 fd15 	bl	8010410 <__mcmp>
 800f9e6:	2800      	cmp	r0, #0
 800f9e8:	da5a      	bge.n	800faa0 <_dtoa_r+0x830>
 800f9ea:	f108 33ff 	add.w	r3, r8, #4294967295
 800f9ee:	9305      	str	r3, [sp, #20]
 800f9f0:	9901      	ldr	r1, [sp, #4]
 800f9f2:	2300      	movs	r3, #0
 800f9f4:	220a      	movs	r2, #10
 800f9f6:	4648      	mov	r0, r9
 800f9f8:	f000 fafa 	bl	800fff0 <__multadd>
 800f9fc:	9b08      	ldr	r3, [sp, #32]
 800f9fe:	9001      	str	r0, [sp, #4]
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	f000 8177 	beq.w	800fcf4 <_dtoa_r+0xa84>
 800fa06:	4629      	mov	r1, r5
 800fa08:	2300      	movs	r3, #0
 800fa0a:	220a      	movs	r2, #10
 800fa0c:	4648      	mov	r0, r9
 800fa0e:	f000 faef 	bl	800fff0 <__multadd>
 800fa12:	f1bb 0f00 	cmp.w	fp, #0
 800fa16:	4605      	mov	r5, r0
 800fa18:	dc6e      	bgt.n	800faf8 <_dtoa_r+0x888>
 800fa1a:	9b07      	ldr	r3, [sp, #28]
 800fa1c:	2b02      	cmp	r3, #2
 800fa1e:	dc48      	bgt.n	800fab2 <_dtoa_r+0x842>
 800fa20:	e06a      	b.n	800faf8 <_dtoa_r+0x888>
 800fa22:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fa24:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800fa28:	e739      	b.n	800f89e <_dtoa_r+0x62e>
 800fa2a:	f10a 34ff 	add.w	r4, sl, #4294967295
 800fa2e:	42a3      	cmp	r3, r4
 800fa30:	db07      	blt.n	800fa42 <_dtoa_r+0x7d2>
 800fa32:	f1ba 0f00 	cmp.w	sl, #0
 800fa36:	eba3 0404 	sub.w	r4, r3, r4
 800fa3a:	db0b      	blt.n	800fa54 <_dtoa_r+0x7e4>
 800fa3c:	9e04      	ldr	r6, [sp, #16]
 800fa3e:	4652      	mov	r2, sl
 800fa40:	e72f      	b.n	800f8a2 <_dtoa_r+0x632>
 800fa42:	1ae2      	subs	r2, r4, r3
 800fa44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fa46:	9e04      	ldr	r6, [sp, #16]
 800fa48:	4413      	add	r3, r2
 800fa4a:	930a      	str	r3, [sp, #40]	@ 0x28
 800fa4c:	4652      	mov	r2, sl
 800fa4e:	4623      	mov	r3, r4
 800fa50:	2400      	movs	r4, #0
 800fa52:	e726      	b.n	800f8a2 <_dtoa_r+0x632>
 800fa54:	9a04      	ldr	r2, [sp, #16]
 800fa56:	eba2 060a 	sub.w	r6, r2, sl
 800fa5a:	2200      	movs	r2, #0
 800fa5c:	e721      	b.n	800f8a2 <_dtoa_r+0x632>
 800fa5e:	9e04      	ldr	r6, [sp, #16]
 800fa60:	9d08      	ldr	r5, [sp, #32]
 800fa62:	461c      	mov	r4, r3
 800fa64:	e72a      	b.n	800f8bc <_dtoa_r+0x64c>
 800fa66:	9a01      	ldr	r2, [sp, #4]
 800fa68:	9205      	str	r2, [sp, #20]
 800fa6a:	e752      	b.n	800f912 <_dtoa_r+0x6a2>
 800fa6c:	9901      	ldr	r1, [sp, #4]
 800fa6e:	461a      	mov	r2, r3
 800fa70:	e751      	b.n	800f916 <_dtoa_r+0x6a6>
 800fa72:	9b05      	ldr	r3, [sp, #20]
 800fa74:	9301      	str	r3, [sp, #4]
 800fa76:	e752      	b.n	800f91e <_dtoa_r+0x6ae>
 800fa78:	2300      	movs	r3, #0
 800fa7a:	e77b      	b.n	800f974 <_dtoa_r+0x704>
 800fa7c:	9b02      	ldr	r3, [sp, #8]
 800fa7e:	e779      	b.n	800f974 <_dtoa_r+0x704>
 800fa80:	920b      	str	r2, [sp, #44]	@ 0x2c
 800fa82:	e778      	b.n	800f976 <_dtoa_r+0x706>
 800fa84:	2300      	movs	r3, #0
 800fa86:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fa88:	e779      	b.n	800f97e <_dtoa_r+0x70e>
 800fa8a:	d093      	beq.n	800f9b4 <_dtoa_r+0x744>
 800fa8c:	9b04      	ldr	r3, [sp, #16]
 800fa8e:	321c      	adds	r2, #28
 800fa90:	4413      	add	r3, r2
 800fa92:	9304      	str	r3, [sp, #16]
 800fa94:	9b06      	ldr	r3, [sp, #24]
 800fa96:	4416      	add	r6, r2
 800fa98:	4413      	add	r3, r2
 800fa9a:	e78a      	b.n	800f9b2 <_dtoa_r+0x742>
 800fa9c:	4602      	mov	r2, r0
 800fa9e:	e7f5      	b.n	800fa8c <_dtoa_r+0x81c>
 800faa0:	f1ba 0f00 	cmp.w	sl, #0
 800faa4:	f8cd 8014 	str.w	r8, [sp, #20]
 800faa8:	46d3      	mov	fp, sl
 800faaa:	dc21      	bgt.n	800faf0 <_dtoa_r+0x880>
 800faac:	9b07      	ldr	r3, [sp, #28]
 800faae:	2b02      	cmp	r3, #2
 800fab0:	dd1e      	ble.n	800faf0 <_dtoa_r+0x880>
 800fab2:	f1bb 0f00 	cmp.w	fp, #0
 800fab6:	f47f addc 	bne.w	800f672 <_dtoa_r+0x402>
 800faba:	4621      	mov	r1, r4
 800fabc:	465b      	mov	r3, fp
 800fabe:	2205      	movs	r2, #5
 800fac0:	4648      	mov	r0, r9
 800fac2:	f000 fa95 	bl	800fff0 <__multadd>
 800fac6:	4601      	mov	r1, r0
 800fac8:	4604      	mov	r4, r0
 800faca:	9801      	ldr	r0, [sp, #4]
 800facc:	f000 fca0 	bl	8010410 <__mcmp>
 800fad0:	2800      	cmp	r0, #0
 800fad2:	f77f adce 	ble.w	800f672 <_dtoa_r+0x402>
 800fad6:	463e      	mov	r6, r7
 800fad8:	2331      	movs	r3, #49	@ 0x31
 800fada:	f806 3b01 	strb.w	r3, [r6], #1
 800fade:	9b05      	ldr	r3, [sp, #20]
 800fae0:	3301      	adds	r3, #1
 800fae2:	9305      	str	r3, [sp, #20]
 800fae4:	e5c9      	b.n	800f67a <_dtoa_r+0x40a>
 800fae6:	f8cd 8014 	str.w	r8, [sp, #20]
 800faea:	4654      	mov	r4, sl
 800faec:	4625      	mov	r5, r4
 800faee:	e7f2      	b.n	800fad6 <_dtoa_r+0x866>
 800faf0:	9b08      	ldr	r3, [sp, #32]
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	f000 8102 	beq.w	800fcfc <_dtoa_r+0xa8c>
 800faf8:	2e00      	cmp	r6, #0
 800fafa:	dd05      	ble.n	800fb08 <_dtoa_r+0x898>
 800fafc:	4629      	mov	r1, r5
 800fafe:	4632      	mov	r2, r6
 800fb00:	4648      	mov	r0, r9
 800fb02:	f000 fc19 	bl	8010338 <__lshift>
 800fb06:	4605      	mov	r5, r0
 800fb08:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d058      	beq.n	800fbc0 <_dtoa_r+0x950>
 800fb0e:	6869      	ldr	r1, [r5, #4]
 800fb10:	4648      	mov	r0, r9
 800fb12:	f000 fa0b 	bl	800ff2c <_Balloc>
 800fb16:	4606      	mov	r6, r0
 800fb18:	b928      	cbnz	r0, 800fb26 <_dtoa_r+0x8b6>
 800fb1a:	4b82      	ldr	r3, [pc, #520]	@ (800fd24 <_dtoa_r+0xab4>)
 800fb1c:	4602      	mov	r2, r0
 800fb1e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800fb22:	f7ff bbbe 	b.w	800f2a2 <_dtoa_r+0x32>
 800fb26:	692a      	ldr	r2, [r5, #16]
 800fb28:	3202      	adds	r2, #2
 800fb2a:	0092      	lsls	r2, r2, #2
 800fb2c:	f105 010c 	add.w	r1, r5, #12
 800fb30:	300c      	adds	r0, #12
 800fb32:	f7ff fae8 	bl	800f106 <memcpy>
 800fb36:	2201      	movs	r2, #1
 800fb38:	4631      	mov	r1, r6
 800fb3a:	4648      	mov	r0, r9
 800fb3c:	f000 fbfc 	bl	8010338 <__lshift>
 800fb40:	1c7b      	adds	r3, r7, #1
 800fb42:	9304      	str	r3, [sp, #16]
 800fb44:	eb07 030b 	add.w	r3, r7, fp
 800fb48:	9309      	str	r3, [sp, #36]	@ 0x24
 800fb4a:	9b02      	ldr	r3, [sp, #8]
 800fb4c:	f003 0301 	and.w	r3, r3, #1
 800fb50:	46a8      	mov	r8, r5
 800fb52:	9308      	str	r3, [sp, #32]
 800fb54:	4605      	mov	r5, r0
 800fb56:	9b04      	ldr	r3, [sp, #16]
 800fb58:	9801      	ldr	r0, [sp, #4]
 800fb5a:	4621      	mov	r1, r4
 800fb5c:	f103 3bff 	add.w	fp, r3, #4294967295
 800fb60:	f7ff fafe 	bl	800f160 <quorem>
 800fb64:	4641      	mov	r1, r8
 800fb66:	9002      	str	r0, [sp, #8]
 800fb68:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800fb6c:	9801      	ldr	r0, [sp, #4]
 800fb6e:	f000 fc4f 	bl	8010410 <__mcmp>
 800fb72:	462a      	mov	r2, r5
 800fb74:	9006      	str	r0, [sp, #24]
 800fb76:	4621      	mov	r1, r4
 800fb78:	4648      	mov	r0, r9
 800fb7a:	f000 fc65 	bl	8010448 <__mdiff>
 800fb7e:	68c2      	ldr	r2, [r0, #12]
 800fb80:	4606      	mov	r6, r0
 800fb82:	b9fa      	cbnz	r2, 800fbc4 <_dtoa_r+0x954>
 800fb84:	4601      	mov	r1, r0
 800fb86:	9801      	ldr	r0, [sp, #4]
 800fb88:	f000 fc42 	bl	8010410 <__mcmp>
 800fb8c:	4602      	mov	r2, r0
 800fb8e:	4631      	mov	r1, r6
 800fb90:	4648      	mov	r0, r9
 800fb92:	920a      	str	r2, [sp, #40]	@ 0x28
 800fb94:	f000 fa0a 	bl	800ffac <_Bfree>
 800fb98:	9b07      	ldr	r3, [sp, #28]
 800fb9a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fb9c:	9e04      	ldr	r6, [sp, #16]
 800fb9e:	ea42 0103 	orr.w	r1, r2, r3
 800fba2:	9b08      	ldr	r3, [sp, #32]
 800fba4:	4319      	orrs	r1, r3
 800fba6:	d10f      	bne.n	800fbc8 <_dtoa_r+0x958>
 800fba8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800fbac:	d028      	beq.n	800fc00 <_dtoa_r+0x990>
 800fbae:	9b06      	ldr	r3, [sp, #24]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	dd02      	ble.n	800fbba <_dtoa_r+0x94a>
 800fbb4:	9b02      	ldr	r3, [sp, #8]
 800fbb6:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800fbba:	f88b a000 	strb.w	sl, [fp]
 800fbbe:	e55e      	b.n	800f67e <_dtoa_r+0x40e>
 800fbc0:	4628      	mov	r0, r5
 800fbc2:	e7bd      	b.n	800fb40 <_dtoa_r+0x8d0>
 800fbc4:	2201      	movs	r2, #1
 800fbc6:	e7e2      	b.n	800fb8e <_dtoa_r+0x91e>
 800fbc8:	9b06      	ldr	r3, [sp, #24]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	db04      	blt.n	800fbd8 <_dtoa_r+0x968>
 800fbce:	9907      	ldr	r1, [sp, #28]
 800fbd0:	430b      	orrs	r3, r1
 800fbd2:	9908      	ldr	r1, [sp, #32]
 800fbd4:	430b      	orrs	r3, r1
 800fbd6:	d120      	bne.n	800fc1a <_dtoa_r+0x9aa>
 800fbd8:	2a00      	cmp	r2, #0
 800fbda:	ddee      	ble.n	800fbba <_dtoa_r+0x94a>
 800fbdc:	9901      	ldr	r1, [sp, #4]
 800fbde:	2201      	movs	r2, #1
 800fbe0:	4648      	mov	r0, r9
 800fbe2:	f000 fba9 	bl	8010338 <__lshift>
 800fbe6:	4621      	mov	r1, r4
 800fbe8:	9001      	str	r0, [sp, #4]
 800fbea:	f000 fc11 	bl	8010410 <__mcmp>
 800fbee:	2800      	cmp	r0, #0
 800fbf0:	dc03      	bgt.n	800fbfa <_dtoa_r+0x98a>
 800fbf2:	d1e2      	bne.n	800fbba <_dtoa_r+0x94a>
 800fbf4:	f01a 0f01 	tst.w	sl, #1
 800fbf8:	d0df      	beq.n	800fbba <_dtoa_r+0x94a>
 800fbfa:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800fbfe:	d1d9      	bne.n	800fbb4 <_dtoa_r+0x944>
 800fc00:	2339      	movs	r3, #57	@ 0x39
 800fc02:	f88b 3000 	strb.w	r3, [fp]
 800fc06:	4633      	mov	r3, r6
 800fc08:	461e      	mov	r6, r3
 800fc0a:	3b01      	subs	r3, #1
 800fc0c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800fc10:	2a39      	cmp	r2, #57	@ 0x39
 800fc12:	d052      	beq.n	800fcba <_dtoa_r+0xa4a>
 800fc14:	3201      	adds	r2, #1
 800fc16:	701a      	strb	r2, [r3, #0]
 800fc18:	e531      	b.n	800f67e <_dtoa_r+0x40e>
 800fc1a:	2a00      	cmp	r2, #0
 800fc1c:	dd07      	ble.n	800fc2e <_dtoa_r+0x9be>
 800fc1e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800fc22:	d0ed      	beq.n	800fc00 <_dtoa_r+0x990>
 800fc24:	f10a 0301 	add.w	r3, sl, #1
 800fc28:	f88b 3000 	strb.w	r3, [fp]
 800fc2c:	e527      	b.n	800f67e <_dtoa_r+0x40e>
 800fc2e:	9b04      	ldr	r3, [sp, #16]
 800fc30:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fc32:	f803 ac01 	strb.w	sl, [r3, #-1]
 800fc36:	4293      	cmp	r3, r2
 800fc38:	d029      	beq.n	800fc8e <_dtoa_r+0xa1e>
 800fc3a:	9901      	ldr	r1, [sp, #4]
 800fc3c:	2300      	movs	r3, #0
 800fc3e:	220a      	movs	r2, #10
 800fc40:	4648      	mov	r0, r9
 800fc42:	f000 f9d5 	bl	800fff0 <__multadd>
 800fc46:	45a8      	cmp	r8, r5
 800fc48:	9001      	str	r0, [sp, #4]
 800fc4a:	f04f 0300 	mov.w	r3, #0
 800fc4e:	f04f 020a 	mov.w	r2, #10
 800fc52:	4641      	mov	r1, r8
 800fc54:	4648      	mov	r0, r9
 800fc56:	d107      	bne.n	800fc68 <_dtoa_r+0x9f8>
 800fc58:	f000 f9ca 	bl	800fff0 <__multadd>
 800fc5c:	4680      	mov	r8, r0
 800fc5e:	4605      	mov	r5, r0
 800fc60:	9b04      	ldr	r3, [sp, #16]
 800fc62:	3301      	adds	r3, #1
 800fc64:	9304      	str	r3, [sp, #16]
 800fc66:	e776      	b.n	800fb56 <_dtoa_r+0x8e6>
 800fc68:	f000 f9c2 	bl	800fff0 <__multadd>
 800fc6c:	4629      	mov	r1, r5
 800fc6e:	4680      	mov	r8, r0
 800fc70:	2300      	movs	r3, #0
 800fc72:	220a      	movs	r2, #10
 800fc74:	4648      	mov	r0, r9
 800fc76:	f000 f9bb 	bl	800fff0 <__multadd>
 800fc7a:	4605      	mov	r5, r0
 800fc7c:	e7f0      	b.n	800fc60 <_dtoa_r+0x9f0>
 800fc7e:	f1bb 0f00 	cmp.w	fp, #0
 800fc82:	bfcc      	ite	gt
 800fc84:	465e      	movgt	r6, fp
 800fc86:	2601      	movle	r6, #1
 800fc88:	443e      	add	r6, r7
 800fc8a:	f04f 0800 	mov.w	r8, #0
 800fc8e:	9901      	ldr	r1, [sp, #4]
 800fc90:	2201      	movs	r2, #1
 800fc92:	4648      	mov	r0, r9
 800fc94:	f000 fb50 	bl	8010338 <__lshift>
 800fc98:	4621      	mov	r1, r4
 800fc9a:	9001      	str	r0, [sp, #4]
 800fc9c:	f000 fbb8 	bl	8010410 <__mcmp>
 800fca0:	2800      	cmp	r0, #0
 800fca2:	dcb0      	bgt.n	800fc06 <_dtoa_r+0x996>
 800fca4:	d102      	bne.n	800fcac <_dtoa_r+0xa3c>
 800fca6:	f01a 0f01 	tst.w	sl, #1
 800fcaa:	d1ac      	bne.n	800fc06 <_dtoa_r+0x996>
 800fcac:	4633      	mov	r3, r6
 800fcae:	461e      	mov	r6, r3
 800fcb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fcb4:	2a30      	cmp	r2, #48	@ 0x30
 800fcb6:	d0fa      	beq.n	800fcae <_dtoa_r+0xa3e>
 800fcb8:	e4e1      	b.n	800f67e <_dtoa_r+0x40e>
 800fcba:	429f      	cmp	r7, r3
 800fcbc:	d1a4      	bne.n	800fc08 <_dtoa_r+0x998>
 800fcbe:	9b05      	ldr	r3, [sp, #20]
 800fcc0:	3301      	adds	r3, #1
 800fcc2:	9305      	str	r3, [sp, #20]
 800fcc4:	2331      	movs	r3, #49	@ 0x31
 800fcc6:	703b      	strb	r3, [r7, #0]
 800fcc8:	e4d9      	b.n	800f67e <_dtoa_r+0x40e>
 800fcca:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fccc:	4f16      	ldr	r7, [pc, #88]	@ (800fd28 <_dtoa_r+0xab8>)
 800fcce:	b11b      	cbz	r3, 800fcd8 <_dtoa_r+0xa68>
 800fcd0:	f107 0308 	add.w	r3, r7, #8
 800fcd4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800fcd6:	6013      	str	r3, [r2, #0]
 800fcd8:	4638      	mov	r0, r7
 800fcda:	b011      	add	sp, #68	@ 0x44
 800fcdc:	ecbd 8b02 	vpop	{d8}
 800fce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fce4:	9b07      	ldr	r3, [sp, #28]
 800fce6:	2b01      	cmp	r3, #1
 800fce8:	f77f ae2c 	ble.w	800f944 <_dtoa_r+0x6d4>
 800fcec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fcee:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fcf0:	2001      	movs	r0, #1
 800fcf2:	e64c      	b.n	800f98e <_dtoa_r+0x71e>
 800fcf4:	f1bb 0f00 	cmp.w	fp, #0
 800fcf8:	f77f aed8 	ble.w	800faac <_dtoa_r+0x83c>
 800fcfc:	463e      	mov	r6, r7
 800fcfe:	9801      	ldr	r0, [sp, #4]
 800fd00:	4621      	mov	r1, r4
 800fd02:	f7ff fa2d 	bl	800f160 <quorem>
 800fd06:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800fd0a:	f806 ab01 	strb.w	sl, [r6], #1
 800fd0e:	1bf2      	subs	r2, r6, r7
 800fd10:	4593      	cmp	fp, r2
 800fd12:	ddb4      	ble.n	800fc7e <_dtoa_r+0xa0e>
 800fd14:	9901      	ldr	r1, [sp, #4]
 800fd16:	2300      	movs	r3, #0
 800fd18:	220a      	movs	r2, #10
 800fd1a:	4648      	mov	r0, r9
 800fd1c:	f000 f968 	bl	800fff0 <__multadd>
 800fd20:	9001      	str	r0, [sp, #4]
 800fd22:	e7ec      	b.n	800fcfe <_dtoa_r+0xa8e>
 800fd24:	08011297 	.word	0x08011297
 800fd28:	08011232 	.word	0x08011232

0800fd2c <_free_r>:
 800fd2c:	b538      	push	{r3, r4, r5, lr}
 800fd2e:	4605      	mov	r5, r0
 800fd30:	2900      	cmp	r1, #0
 800fd32:	d041      	beq.n	800fdb8 <_free_r+0x8c>
 800fd34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fd38:	1f0c      	subs	r4, r1, #4
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	bfb8      	it	lt
 800fd3e:	18e4      	addlt	r4, r4, r3
 800fd40:	f000 f8e8 	bl	800ff14 <__malloc_lock>
 800fd44:	4a1d      	ldr	r2, [pc, #116]	@ (800fdbc <_free_r+0x90>)
 800fd46:	6813      	ldr	r3, [r2, #0]
 800fd48:	b933      	cbnz	r3, 800fd58 <_free_r+0x2c>
 800fd4a:	6063      	str	r3, [r4, #4]
 800fd4c:	6014      	str	r4, [r2, #0]
 800fd4e:	4628      	mov	r0, r5
 800fd50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fd54:	f000 b8e4 	b.w	800ff20 <__malloc_unlock>
 800fd58:	42a3      	cmp	r3, r4
 800fd5a:	d908      	bls.n	800fd6e <_free_r+0x42>
 800fd5c:	6820      	ldr	r0, [r4, #0]
 800fd5e:	1821      	adds	r1, r4, r0
 800fd60:	428b      	cmp	r3, r1
 800fd62:	bf01      	itttt	eq
 800fd64:	6819      	ldreq	r1, [r3, #0]
 800fd66:	685b      	ldreq	r3, [r3, #4]
 800fd68:	1809      	addeq	r1, r1, r0
 800fd6a:	6021      	streq	r1, [r4, #0]
 800fd6c:	e7ed      	b.n	800fd4a <_free_r+0x1e>
 800fd6e:	461a      	mov	r2, r3
 800fd70:	685b      	ldr	r3, [r3, #4]
 800fd72:	b10b      	cbz	r3, 800fd78 <_free_r+0x4c>
 800fd74:	42a3      	cmp	r3, r4
 800fd76:	d9fa      	bls.n	800fd6e <_free_r+0x42>
 800fd78:	6811      	ldr	r1, [r2, #0]
 800fd7a:	1850      	adds	r0, r2, r1
 800fd7c:	42a0      	cmp	r0, r4
 800fd7e:	d10b      	bne.n	800fd98 <_free_r+0x6c>
 800fd80:	6820      	ldr	r0, [r4, #0]
 800fd82:	4401      	add	r1, r0
 800fd84:	1850      	adds	r0, r2, r1
 800fd86:	4283      	cmp	r3, r0
 800fd88:	6011      	str	r1, [r2, #0]
 800fd8a:	d1e0      	bne.n	800fd4e <_free_r+0x22>
 800fd8c:	6818      	ldr	r0, [r3, #0]
 800fd8e:	685b      	ldr	r3, [r3, #4]
 800fd90:	6053      	str	r3, [r2, #4]
 800fd92:	4408      	add	r0, r1
 800fd94:	6010      	str	r0, [r2, #0]
 800fd96:	e7da      	b.n	800fd4e <_free_r+0x22>
 800fd98:	d902      	bls.n	800fda0 <_free_r+0x74>
 800fd9a:	230c      	movs	r3, #12
 800fd9c:	602b      	str	r3, [r5, #0]
 800fd9e:	e7d6      	b.n	800fd4e <_free_r+0x22>
 800fda0:	6820      	ldr	r0, [r4, #0]
 800fda2:	1821      	adds	r1, r4, r0
 800fda4:	428b      	cmp	r3, r1
 800fda6:	bf04      	itt	eq
 800fda8:	6819      	ldreq	r1, [r3, #0]
 800fdaa:	685b      	ldreq	r3, [r3, #4]
 800fdac:	6063      	str	r3, [r4, #4]
 800fdae:	bf04      	itt	eq
 800fdb0:	1809      	addeq	r1, r1, r0
 800fdb2:	6021      	streq	r1, [r4, #0]
 800fdb4:	6054      	str	r4, [r2, #4]
 800fdb6:	e7ca      	b.n	800fd4e <_free_r+0x22>
 800fdb8:	bd38      	pop	{r3, r4, r5, pc}
 800fdba:	bf00      	nop
 800fdbc:	240007fc 	.word	0x240007fc

0800fdc0 <malloc>:
 800fdc0:	4b02      	ldr	r3, [pc, #8]	@ (800fdcc <malloc+0xc>)
 800fdc2:	4601      	mov	r1, r0
 800fdc4:	6818      	ldr	r0, [r3, #0]
 800fdc6:	f000 b825 	b.w	800fe14 <_malloc_r>
 800fdca:	bf00      	nop
 800fdcc:	24000038 	.word	0x24000038

0800fdd0 <sbrk_aligned>:
 800fdd0:	b570      	push	{r4, r5, r6, lr}
 800fdd2:	4e0f      	ldr	r6, [pc, #60]	@ (800fe10 <sbrk_aligned+0x40>)
 800fdd4:	460c      	mov	r4, r1
 800fdd6:	6831      	ldr	r1, [r6, #0]
 800fdd8:	4605      	mov	r5, r0
 800fdda:	b911      	cbnz	r1, 800fde2 <sbrk_aligned+0x12>
 800fddc:	f001 f816 	bl	8010e0c <_sbrk_r>
 800fde0:	6030      	str	r0, [r6, #0]
 800fde2:	4621      	mov	r1, r4
 800fde4:	4628      	mov	r0, r5
 800fde6:	f001 f811 	bl	8010e0c <_sbrk_r>
 800fdea:	1c43      	adds	r3, r0, #1
 800fdec:	d103      	bne.n	800fdf6 <sbrk_aligned+0x26>
 800fdee:	f04f 34ff 	mov.w	r4, #4294967295
 800fdf2:	4620      	mov	r0, r4
 800fdf4:	bd70      	pop	{r4, r5, r6, pc}
 800fdf6:	1cc4      	adds	r4, r0, #3
 800fdf8:	f024 0403 	bic.w	r4, r4, #3
 800fdfc:	42a0      	cmp	r0, r4
 800fdfe:	d0f8      	beq.n	800fdf2 <sbrk_aligned+0x22>
 800fe00:	1a21      	subs	r1, r4, r0
 800fe02:	4628      	mov	r0, r5
 800fe04:	f001 f802 	bl	8010e0c <_sbrk_r>
 800fe08:	3001      	adds	r0, #1
 800fe0a:	d1f2      	bne.n	800fdf2 <sbrk_aligned+0x22>
 800fe0c:	e7ef      	b.n	800fdee <sbrk_aligned+0x1e>
 800fe0e:	bf00      	nop
 800fe10:	240007f8 	.word	0x240007f8

0800fe14 <_malloc_r>:
 800fe14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe18:	1ccd      	adds	r5, r1, #3
 800fe1a:	f025 0503 	bic.w	r5, r5, #3
 800fe1e:	3508      	adds	r5, #8
 800fe20:	2d0c      	cmp	r5, #12
 800fe22:	bf38      	it	cc
 800fe24:	250c      	movcc	r5, #12
 800fe26:	2d00      	cmp	r5, #0
 800fe28:	4606      	mov	r6, r0
 800fe2a:	db01      	blt.n	800fe30 <_malloc_r+0x1c>
 800fe2c:	42a9      	cmp	r1, r5
 800fe2e:	d904      	bls.n	800fe3a <_malloc_r+0x26>
 800fe30:	230c      	movs	r3, #12
 800fe32:	6033      	str	r3, [r6, #0]
 800fe34:	2000      	movs	r0, #0
 800fe36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe3a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ff10 <_malloc_r+0xfc>
 800fe3e:	f000 f869 	bl	800ff14 <__malloc_lock>
 800fe42:	f8d8 3000 	ldr.w	r3, [r8]
 800fe46:	461c      	mov	r4, r3
 800fe48:	bb44      	cbnz	r4, 800fe9c <_malloc_r+0x88>
 800fe4a:	4629      	mov	r1, r5
 800fe4c:	4630      	mov	r0, r6
 800fe4e:	f7ff ffbf 	bl	800fdd0 <sbrk_aligned>
 800fe52:	1c43      	adds	r3, r0, #1
 800fe54:	4604      	mov	r4, r0
 800fe56:	d158      	bne.n	800ff0a <_malloc_r+0xf6>
 800fe58:	f8d8 4000 	ldr.w	r4, [r8]
 800fe5c:	4627      	mov	r7, r4
 800fe5e:	2f00      	cmp	r7, #0
 800fe60:	d143      	bne.n	800feea <_malloc_r+0xd6>
 800fe62:	2c00      	cmp	r4, #0
 800fe64:	d04b      	beq.n	800fefe <_malloc_r+0xea>
 800fe66:	6823      	ldr	r3, [r4, #0]
 800fe68:	4639      	mov	r1, r7
 800fe6a:	4630      	mov	r0, r6
 800fe6c:	eb04 0903 	add.w	r9, r4, r3
 800fe70:	f000 ffcc 	bl	8010e0c <_sbrk_r>
 800fe74:	4581      	cmp	r9, r0
 800fe76:	d142      	bne.n	800fefe <_malloc_r+0xea>
 800fe78:	6821      	ldr	r1, [r4, #0]
 800fe7a:	1a6d      	subs	r5, r5, r1
 800fe7c:	4629      	mov	r1, r5
 800fe7e:	4630      	mov	r0, r6
 800fe80:	f7ff ffa6 	bl	800fdd0 <sbrk_aligned>
 800fe84:	3001      	adds	r0, #1
 800fe86:	d03a      	beq.n	800fefe <_malloc_r+0xea>
 800fe88:	6823      	ldr	r3, [r4, #0]
 800fe8a:	442b      	add	r3, r5
 800fe8c:	6023      	str	r3, [r4, #0]
 800fe8e:	f8d8 3000 	ldr.w	r3, [r8]
 800fe92:	685a      	ldr	r2, [r3, #4]
 800fe94:	bb62      	cbnz	r2, 800fef0 <_malloc_r+0xdc>
 800fe96:	f8c8 7000 	str.w	r7, [r8]
 800fe9a:	e00f      	b.n	800febc <_malloc_r+0xa8>
 800fe9c:	6822      	ldr	r2, [r4, #0]
 800fe9e:	1b52      	subs	r2, r2, r5
 800fea0:	d420      	bmi.n	800fee4 <_malloc_r+0xd0>
 800fea2:	2a0b      	cmp	r2, #11
 800fea4:	d917      	bls.n	800fed6 <_malloc_r+0xc2>
 800fea6:	1961      	adds	r1, r4, r5
 800fea8:	42a3      	cmp	r3, r4
 800feaa:	6025      	str	r5, [r4, #0]
 800feac:	bf18      	it	ne
 800feae:	6059      	strne	r1, [r3, #4]
 800feb0:	6863      	ldr	r3, [r4, #4]
 800feb2:	bf08      	it	eq
 800feb4:	f8c8 1000 	streq.w	r1, [r8]
 800feb8:	5162      	str	r2, [r4, r5]
 800feba:	604b      	str	r3, [r1, #4]
 800febc:	4630      	mov	r0, r6
 800febe:	f000 f82f 	bl	800ff20 <__malloc_unlock>
 800fec2:	f104 000b 	add.w	r0, r4, #11
 800fec6:	1d23      	adds	r3, r4, #4
 800fec8:	f020 0007 	bic.w	r0, r0, #7
 800fecc:	1ac2      	subs	r2, r0, r3
 800fece:	bf1c      	itt	ne
 800fed0:	1a1b      	subne	r3, r3, r0
 800fed2:	50a3      	strne	r3, [r4, r2]
 800fed4:	e7af      	b.n	800fe36 <_malloc_r+0x22>
 800fed6:	6862      	ldr	r2, [r4, #4]
 800fed8:	42a3      	cmp	r3, r4
 800feda:	bf0c      	ite	eq
 800fedc:	f8c8 2000 	streq.w	r2, [r8]
 800fee0:	605a      	strne	r2, [r3, #4]
 800fee2:	e7eb      	b.n	800febc <_malloc_r+0xa8>
 800fee4:	4623      	mov	r3, r4
 800fee6:	6864      	ldr	r4, [r4, #4]
 800fee8:	e7ae      	b.n	800fe48 <_malloc_r+0x34>
 800feea:	463c      	mov	r4, r7
 800feec:	687f      	ldr	r7, [r7, #4]
 800feee:	e7b6      	b.n	800fe5e <_malloc_r+0x4a>
 800fef0:	461a      	mov	r2, r3
 800fef2:	685b      	ldr	r3, [r3, #4]
 800fef4:	42a3      	cmp	r3, r4
 800fef6:	d1fb      	bne.n	800fef0 <_malloc_r+0xdc>
 800fef8:	2300      	movs	r3, #0
 800fefa:	6053      	str	r3, [r2, #4]
 800fefc:	e7de      	b.n	800febc <_malloc_r+0xa8>
 800fefe:	230c      	movs	r3, #12
 800ff00:	6033      	str	r3, [r6, #0]
 800ff02:	4630      	mov	r0, r6
 800ff04:	f000 f80c 	bl	800ff20 <__malloc_unlock>
 800ff08:	e794      	b.n	800fe34 <_malloc_r+0x20>
 800ff0a:	6005      	str	r5, [r0, #0]
 800ff0c:	e7d6      	b.n	800febc <_malloc_r+0xa8>
 800ff0e:	bf00      	nop
 800ff10:	240007fc 	.word	0x240007fc

0800ff14 <__malloc_lock>:
 800ff14:	4801      	ldr	r0, [pc, #4]	@ (800ff1c <__malloc_lock+0x8>)
 800ff16:	f7ff b8f4 	b.w	800f102 <__retarget_lock_acquire_recursive>
 800ff1a:	bf00      	nop
 800ff1c:	240007f4 	.word	0x240007f4

0800ff20 <__malloc_unlock>:
 800ff20:	4801      	ldr	r0, [pc, #4]	@ (800ff28 <__malloc_unlock+0x8>)
 800ff22:	f7ff b8ef 	b.w	800f104 <__retarget_lock_release_recursive>
 800ff26:	bf00      	nop
 800ff28:	240007f4 	.word	0x240007f4

0800ff2c <_Balloc>:
 800ff2c:	b570      	push	{r4, r5, r6, lr}
 800ff2e:	69c6      	ldr	r6, [r0, #28]
 800ff30:	4604      	mov	r4, r0
 800ff32:	460d      	mov	r5, r1
 800ff34:	b976      	cbnz	r6, 800ff54 <_Balloc+0x28>
 800ff36:	2010      	movs	r0, #16
 800ff38:	f7ff ff42 	bl	800fdc0 <malloc>
 800ff3c:	4602      	mov	r2, r0
 800ff3e:	61e0      	str	r0, [r4, #28]
 800ff40:	b920      	cbnz	r0, 800ff4c <_Balloc+0x20>
 800ff42:	4b18      	ldr	r3, [pc, #96]	@ (800ffa4 <_Balloc+0x78>)
 800ff44:	4818      	ldr	r0, [pc, #96]	@ (800ffa8 <_Balloc+0x7c>)
 800ff46:	216b      	movs	r1, #107	@ 0x6b
 800ff48:	f7ff f8ec 	bl	800f124 <__assert_func>
 800ff4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ff50:	6006      	str	r6, [r0, #0]
 800ff52:	60c6      	str	r6, [r0, #12]
 800ff54:	69e6      	ldr	r6, [r4, #28]
 800ff56:	68f3      	ldr	r3, [r6, #12]
 800ff58:	b183      	cbz	r3, 800ff7c <_Balloc+0x50>
 800ff5a:	69e3      	ldr	r3, [r4, #28]
 800ff5c:	68db      	ldr	r3, [r3, #12]
 800ff5e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ff62:	b9b8      	cbnz	r0, 800ff94 <_Balloc+0x68>
 800ff64:	2101      	movs	r1, #1
 800ff66:	fa01 f605 	lsl.w	r6, r1, r5
 800ff6a:	1d72      	adds	r2, r6, #5
 800ff6c:	0092      	lsls	r2, r2, #2
 800ff6e:	4620      	mov	r0, r4
 800ff70:	f000 ff63 	bl	8010e3a <_calloc_r>
 800ff74:	b160      	cbz	r0, 800ff90 <_Balloc+0x64>
 800ff76:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ff7a:	e00e      	b.n	800ff9a <_Balloc+0x6e>
 800ff7c:	2221      	movs	r2, #33	@ 0x21
 800ff7e:	2104      	movs	r1, #4
 800ff80:	4620      	mov	r0, r4
 800ff82:	f000 ff5a 	bl	8010e3a <_calloc_r>
 800ff86:	69e3      	ldr	r3, [r4, #28]
 800ff88:	60f0      	str	r0, [r6, #12]
 800ff8a:	68db      	ldr	r3, [r3, #12]
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d1e4      	bne.n	800ff5a <_Balloc+0x2e>
 800ff90:	2000      	movs	r0, #0
 800ff92:	bd70      	pop	{r4, r5, r6, pc}
 800ff94:	6802      	ldr	r2, [r0, #0]
 800ff96:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ff9a:	2300      	movs	r3, #0
 800ff9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ffa0:	e7f7      	b.n	800ff92 <_Balloc+0x66>
 800ffa2:	bf00      	nop
 800ffa4:	08011185 	.word	0x08011185
 800ffa8:	080112a8 	.word	0x080112a8

0800ffac <_Bfree>:
 800ffac:	b570      	push	{r4, r5, r6, lr}
 800ffae:	69c6      	ldr	r6, [r0, #28]
 800ffb0:	4605      	mov	r5, r0
 800ffb2:	460c      	mov	r4, r1
 800ffb4:	b976      	cbnz	r6, 800ffd4 <_Bfree+0x28>
 800ffb6:	2010      	movs	r0, #16
 800ffb8:	f7ff ff02 	bl	800fdc0 <malloc>
 800ffbc:	4602      	mov	r2, r0
 800ffbe:	61e8      	str	r0, [r5, #28]
 800ffc0:	b920      	cbnz	r0, 800ffcc <_Bfree+0x20>
 800ffc2:	4b09      	ldr	r3, [pc, #36]	@ (800ffe8 <_Bfree+0x3c>)
 800ffc4:	4809      	ldr	r0, [pc, #36]	@ (800ffec <_Bfree+0x40>)
 800ffc6:	218f      	movs	r1, #143	@ 0x8f
 800ffc8:	f7ff f8ac 	bl	800f124 <__assert_func>
 800ffcc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ffd0:	6006      	str	r6, [r0, #0]
 800ffd2:	60c6      	str	r6, [r0, #12]
 800ffd4:	b13c      	cbz	r4, 800ffe6 <_Bfree+0x3a>
 800ffd6:	69eb      	ldr	r3, [r5, #28]
 800ffd8:	6862      	ldr	r2, [r4, #4]
 800ffda:	68db      	ldr	r3, [r3, #12]
 800ffdc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ffe0:	6021      	str	r1, [r4, #0]
 800ffe2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ffe6:	bd70      	pop	{r4, r5, r6, pc}
 800ffe8:	08011185 	.word	0x08011185
 800ffec:	080112a8 	.word	0x080112a8

0800fff0 <__multadd>:
 800fff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fff4:	690d      	ldr	r5, [r1, #16]
 800fff6:	4607      	mov	r7, r0
 800fff8:	460c      	mov	r4, r1
 800fffa:	461e      	mov	r6, r3
 800fffc:	f101 0c14 	add.w	ip, r1, #20
 8010000:	2000      	movs	r0, #0
 8010002:	f8dc 3000 	ldr.w	r3, [ip]
 8010006:	b299      	uxth	r1, r3
 8010008:	fb02 6101 	mla	r1, r2, r1, r6
 801000c:	0c1e      	lsrs	r6, r3, #16
 801000e:	0c0b      	lsrs	r3, r1, #16
 8010010:	fb02 3306 	mla	r3, r2, r6, r3
 8010014:	b289      	uxth	r1, r1
 8010016:	3001      	adds	r0, #1
 8010018:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801001c:	4285      	cmp	r5, r0
 801001e:	f84c 1b04 	str.w	r1, [ip], #4
 8010022:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010026:	dcec      	bgt.n	8010002 <__multadd+0x12>
 8010028:	b30e      	cbz	r6, 801006e <__multadd+0x7e>
 801002a:	68a3      	ldr	r3, [r4, #8]
 801002c:	42ab      	cmp	r3, r5
 801002e:	dc19      	bgt.n	8010064 <__multadd+0x74>
 8010030:	6861      	ldr	r1, [r4, #4]
 8010032:	4638      	mov	r0, r7
 8010034:	3101      	adds	r1, #1
 8010036:	f7ff ff79 	bl	800ff2c <_Balloc>
 801003a:	4680      	mov	r8, r0
 801003c:	b928      	cbnz	r0, 801004a <__multadd+0x5a>
 801003e:	4602      	mov	r2, r0
 8010040:	4b0c      	ldr	r3, [pc, #48]	@ (8010074 <__multadd+0x84>)
 8010042:	480d      	ldr	r0, [pc, #52]	@ (8010078 <__multadd+0x88>)
 8010044:	21ba      	movs	r1, #186	@ 0xba
 8010046:	f7ff f86d 	bl	800f124 <__assert_func>
 801004a:	6922      	ldr	r2, [r4, #16]
 801004c:	3202      	adds	r2, #2
 801004e:	f104 010c 	add.w	r1, r4, #12
 8010052:	0092      	lsls	r2, r2, #2
 8010054:	300c      	adds	r0, #12
 8010056:	f7ff f856 	bl	800f106 <memcpy>
 801005a:	4621      	mov	r1, r4
 801005c:	4638      	mov	r0, r7
 801005e:	f7ff ffa5 	bl	800ffac <_Bfree>
 8010062:	4644      	mov	r4, r8
 8010064:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010068:	3501      	adds	r5, #1
 801006a:	615e      	str	r6, [r3, #20]
 801006c:	6125      	str	r5, [r4, #16]
 801006e:	4620      	mov	r0, r4
 8010070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010074:	08011297 	.word	0x08011297
 8010078:	080112a8 	.word	0x080112a8

0801007c <__hi0bits>:
 801007c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010080:	4603      	mov	r3, r0
 8010082:	bf36      	itet	cc
 8010084:	0403      	lslcc	r3, r0, #16
 8010086:	2000      	movcs	r0, #0
 8010088:	2010      	movcc	r0, #16
 801008a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801008e:	bf3c      	itt	cc
 8010090:	021b      	lslcc	r3, r3, #8
 8010092:	3008      	addcc	r0, #8
 8010094:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010098:	bf3c      	itt	cc
 801009a:	011b      	lslcc	r3, r3, #4
 801009c:	3004      	addcc	r0, #4
 801009e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80100a2:	bf3c      	itt	cc
 80100a4:	009b      	lslcc	r3, r3, #2
 80100a6:	3002      	addcc	r0, #2
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	db05      	blt.n	80100b8 <__hi0bits+0x3c>
 80100ac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80100b0:	f100 0001 	add.w	r0, r0, #1
 80100b4:	bf08      	it	eq
 80100b6:	2020      	moveq	r0, #32
 80100b8:	4770      	bx	lr

080100ba <__lo0bits>:
 80100ba:	6803      	ldr	r3, [r0, #0]
 80100bc:	4602      	mov	r2, r0
 80100be:	f013 0007 	ands.w	r0, r3, #7
 80100c2:	d00b      	beq.n	80100dc <__lo0bits+0x22>
 80100c4:	07d9      	lsls	r1, r3, #31
 80100c6:	d421      	bmi.n	801010c <__lo0bits+0x52>
 80100c8:	0798      	lsls	r0, r3, #30
 80100ca:	bf49      	itett	mi
 80100cc:	085b      	lsrmi	r3, r3, #1
 80100ce:	089b      	lsrpl	r3, r3, #2
 80100d0:	2001      	movmi	r0, #1
 80100d2:	6013      	strmi	r3, [r2, #0]
 80100d4:	bf5c      	itt	pl
 80100d6:	6013      	strpl	r3, [r2, #0]
 80100d8:	2002      	movpl	r0, #2
 80100da:	4770      	bx	lr
 80100dc:	b299      	uxth	r1, r3
 80100de:	b909      	cbnz	r1, 80100e4 <__lo0bits+0x2a>
 80100e0:	0c1b      	lsrs	r3, r3, #16
 80100e2:	2010      	movs	r0, #16
 80100e4:	b2d9      	uxtb	r1, r3
 80100e6:	b909      	cbnz	r1, 80100ec <__lo0bits+0x32>
 80100e8:	3008      	adds	r0, #8
 80100ea:	0a1b      	lsrs	r3, r3, #8
 80100ec:	0719      	lsls	r1, r3, #28
 80100ee:	bf04      	itt	eq
 80100f0:	091b      	lsreq	r3, r3, #4
 80100f2:	3004      	addeq	r0, #4
 80100f4:	0799      	lsls	r1, r3, #30
 80100f6:	bf04      	itt	eq
 80100f8:	089b      	lsreq	r3, r3, #2
 80100fa:	3002      	addeq	r0, #2
 80100fc:	07d9      	lsls	r1, r3, #31
 80100fe:	d403      	bmi.n	8010108 <__lo0bits+0x4e>
 8010100:	085b      	lsrs	r3, r3, #1
 8010102:	f100 0001 	add.w	r0, r0, #1
 8010106:	d003      	beq.n	8010110 <__lo0bits+0x56>
 8010108:	6013      	str	r3, [r2, #0]
 801010a:	4770      	bx	lr
 801010c:	2000      	movs	r0, #0
 801010e:	4770      	bx	lr
 8010110:	2020      	movs	r0, #32
 8010112:	4770      	bx	lr

08010114 <__i2b>:
 8010114:	b510      	push	{r4, lr}
 8010116:	460c      	mov	r4, r1
 8010118:	2101      	movs	r1, #1
 801011a:	f7ff ff07 	bl	800ff2c <_Balloc>
 801011e:	4602      	mov	r2, r0
 8010120:	b928      	cbnz	r0, 801012e <__i2b+0x1a>
 8010122:	4b05      	ldr	r3, [pc, #20]	@ (8010138 <__i2b+0x24>)
 8010124:	4805      	ldr	r0, [pc, #20]	@ (801013c <__i2b+0x28>)
 8010126:	f240 1145 	movw	r1, #325	@ 0x145
 801012a:	f7fe fffb 	bl	800f124 <__assert_func>
 801012e:	2301      	movs	r3, #1
 8010130:	6144      	str	r4, [r0, #20]
 8010132:	6103      	str	r3, [r0, #16]
 8010134:	bd10      	pop	{r4, pc}
 8010136:	bf00      	nop
 8010138:	08011297 	.word	0x08011297
 801013c:	080112a8 	.word	0x080112a8

08010140 <__multiply>:
 8010140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010144:	4617      	mov	r7, r2
 8010146:	690a      	ldr	r2, [r1, #16]
 8010148:	693b      	ldr	r3, [r7, #16]
 801014a:	429a      	cmp	r2, r3
 801014c:	bfa8      	it	ge
 801014e:	463b      	movge	r3, r7
 8010150:	4689      	mov	r9, r1
 8010152:	bfa4      	itt	ge
 8010154:	460f      	movge	r7, r1
 8010156:	4699      	movge	r9, r3
 8010158:	693d      	ldr	r5, [r7, #16]
 801015a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801015e:	68bb      	ldr	r3, [r7, #8]
 8010160:	6879      	ldr	r1, [r7, #4]
 8010162:	eb05 060a 	add.w	r6, r5, sl
 8010166:	42b3      	cmp	r3, r6
 8010168:	b085      	sub	sp, #20
 801016a:	bfb8      	it	lt
 801016c:	3101      	addlt	r1, #1
 801016e:	f7ff fedd 	bl	800ff2c <_Balloc>
 8010172:	b930      	cbnz	r0, 8010182 <__multiply+0x42>
 8010174:	4602      	mov	r2, r0
 8010176:	4b41      	ldr	r3, [pc, #260]	@ (801027c <__multiply+0x13c>)
 8010178:	4841      	ldr	r0, [pc, #260]	@ (8010280 <__multiply+0x140>)
 801017a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801017e:	f7fe ffd1 	bl	800f124 <__assert_func>
 8010182:	f100 0414 	add.w	r4, r0, #20
 8010186:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 801018a:	4623      	mov	r3, r4
 801018c:	2200      	movs	r2, #0
 801018e:	4573      	cmp	r3, lr
 8010190:	d320      	bcc.n	80101d4 <__multiply+0x94>
 8010192:	f107 0814 	add.w	r8, r7, #20
 8010196:	f109 0114 	add.w	r1, r9, #20
 801019a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801019e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80101a2:	9302      	str	r3, [sp, #8]
 80101a4:	1beb      	subs	r3, r5, r7
 80101a6:	3b15      	subs	r3, #21
 80101a8:	f023 0303 	bic.w	r3, r3, #3
 80101ac:	3304      	adds	r3, #4
 80101ae:	3715      	adds	r7, #21
 80101b0:	42bd      	cmp	r5, r7
 80101b2:	bf38      	it	cc
 80101b4:	2304      	movcc	r3, #4
 80101b6:	9301      	str	r3, [sp, #4]
 80101b8:	9b02      	ldr	r3, [sp, #8]
 80101ba:	9103      	str	r1, [sp, #12]
 80101bc:	428b      	cmp	r3, r1
 80101be:	d80c      	bhi.n	80101da <__multiply+0x9a>
 80101c0:	2e00      	cmp	r6, #0
 80101c2:	dd03      	ble.n	80101cc <__multiply+0x8c>
 80101c4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d055      	beq.n	8010278 <__multiply+0x138>
 80101cc:	6106      	str	r6, [r0, #16]
 80101ce:	b005      	add	sp, #20
 80101d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101d4:	f843 2b04 	str.w	r2, [r3], #4
 80101d8:	e7d9      	b.n	801018e <__multiply+0x4e>
 80101da:	f8b1 a000 	ldrh.w	sl, [r1]
 80101de:	f1ba 0f00 	cmp.w	sl, #0
 80101e2:	d01f      	beq.n	8010224 <__multiply+0xe4>
 80101e4:	46c4      	mov	ip, r8
 80101e6:	46a1      	mov	r9, r4
 80101e8:	2700      	movs	r7, #0
 80101ea:	f85c 2b04 	ldr.w	r2, [ip], #4
 80101ee:	f8d9 3000 	ldr.w	r3, [r9]
 80101f2:	fa1f fb82 	uxth.w	fp, r2
 80101f6:	b29b      	uxth	r3, r3
 80101f8:	fb0a 330b 	mla	r3, sl, fp, r3
 80101fc:	443b      	add	r3, r7
 80101fe:	f8d9 7000 	ldr.w	r7, [r9]
 8010202:	0c12      	lsrs	r2, r2, #16
 8010204:	0c3f      	lsrs	r7, r7, #16
 8010206:	fb0a 7202 	mla	r2, sl, r2, r7
 801020a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801020e:	b29b      	uxth	r3, r3
 8010210:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010214:	4565      	cmp	r5, ip
 8010216:	f849 3b04 	str.w	r3, [r9], #4
 801021a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801021e:	d8e4      	bhi.n	80101ea <__multiply+0xaa>
 8010220:	9b01      	ldr	r3, [sp, #4]
 8010222:	50e7      	str	r7, [r4, r3]
 8010224:	9b03      	ldr	r3, [sp, #12]
 8010226:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801022a:	3104      	adds	r1, #4
 801022c:	f1b9 0f00 	cmp.w	r9, #0
 8010230:	d020      	beq.n	8010274 <__multiply+0x134>
 8010232:	6823      	ldr	r3, [r4, #0]
 8010234:	4647      	mov	r7, r8
 8010236:	46a4      	mov	ip, r4
 8010238:	f04f 0a00 	mov.w	sl, #0
 801023c:	f8b7 b000 	ldrh.w	fp, [r7]
 8010240:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8010244:	fb09 220b 	mla	r2, r9, fp, r2
 8010248:	4452      	add	r2, sl
 801024a:	b29b      	uxth	r3, r3
 801024c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010250:	f84c 3b04 	str.w	r3, [ip], #4
 8010254:	f857 3b04 	ldr.w	r3, [r7], #4
 8010258:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801025c:	f8bc 3000 	ldrh.w	r3, [ip]
 8010260:	fb09 330a 	mla	r3, r9, sl, r3
 8010264:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8010268:	42bd      	cmp	r5, r7
 801026a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801026e:	d8e5      	bhi.n	801023c <__multiply+0xfc>
 8010270:	9a01      	ldr	r2, [sp, #4]
 8010272:	50a3      	str	r3, [r4, r2]
 8010274:	3404      	adds	r4, #4
 8010276:	e79f      	b.n	80101b8 <__multiply+0x78>
 8010278:	3e01      	subs	r6, #1
 801027a:	e7a1      	b.n	80101c0 <__multiply+0x80>
 801027c:	08011297 	.word	0x08011297
 8010280:	080112a8 	.word	0x080112a8

08010284 <__pow5mult>:
 8010284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010288:	4615      	mov	r5, r2
 801028a:	f012 0203 	ands.w	r2, r2, #3
 801028e:	4607      	mov	r7, r0
 8010290:	460e      	mov	r6, r1
 8010292:	d007      	beq.n	80102a4 <__pow5mult+0x20>
 8010294:	4c25      	ldr	r4, [pc, #148]	@ (801032c <__pow5mult+0xa8>)
 8010296:	3a01      	subs	r2, #1
 8010298:	2300      	movs	r3, #0
 801029a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801029e:	f7ff fea7 	bl	800fff0 <__multadd>
 80102a2:	4606      	mov	r6, r0
 80102a4:	10ad      	asrs	r5, r5, #2
 80102a6:	d03d      	beq.n	8010324 <__pow5mult+0xa0>
 80102a8:	69fc      	ldr	r4, [r7, #28]
 80102aa:	b97c      	cbnz	r4, 80102cc <__pow5mult+0x48>
 80102ac:	2010      	movs	r0, #16
 80102ae:	f7ff fd87 	bl	800fdc0 <malloc>
 80102b2:	4602      	mov	r2, r0
 80102b4:	61f8      	str	r0, [r7, #28]
 80102b6:	b928      	cbnz	r0, 80102c4 <__pow5mult+0x40>
 80102b8:	4b1d      	ldr	r3, [pc, #116]	@ (8010330 <__pow5mult+0xac>)
 80102ba:	481e      	ldr	r0, [pc, #120]	@ (8010334 <__pow5mult+0xb0>)
 80102bc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80102c0:	f7fe ff30 	bl	800f124 <__assert_func>
 80102c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80102c8:	6004      	str	r4, [r0, #0]
 80102ca:	60c4      	str	r4, [r0, #12]
 80102cc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80102d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80102d4:	b94c      	cbnz	r4, 80102ea <__pow5mult+0x66>
 80102d6:	f240 2171 	movw	r1, #625	@ 0x271
 80102da:	4638      	mov	r0, r7
 80102dc:	f7ff ff1a 	bl	8010114 <__i2b>
 80102e0:	2300      	movs	r3, #0
 80102e2:	f8c8 0008 	str.w	r0, [r8, #8]
 80102e6:	4604      	mov	r4, r0
 80102e8:	6003      	str	r3, [r0, #0]
 80102ea:	f04f 0900 	mov.w	r9, #0
 80102ee:	07eb      	lsls	r3, r5, #31
 80102f0:	d50a      	bpl.n	8010308 <__pow5mult+0x84>
 80102f2:	4631      	mov	r1, r6
 80102f4:	4622      	mov	r2, r4
 80102f6:	4638      	mov	r0, r7
 80102f8:	f7ff ff22 	bl	8010140 <__multiply>
 80102fc:	4631      	mov	r1, r6
 80102fe:	4680      	mov	r8, r0
 8010300:	4638      	mov	r0, r7
 8010302:	f7ff fe53 	bl	800ffac <_Bfree>
 8010306:	4646      	mov	r6, r8
 8010308:	106d      	asrs	r5, r5, #1
 801030a:	d00b      	beq.n	8010324 <__pow5mult+0xa0>
 801030c:	6820      	ldr	r0, [r4, #0]
 801030e:	b938      	cbnz	r0, 8010320 <__pow5mult+0x9c>
 8010310:	4622      	mov	r2, r4
 8010312:	4621      	mov	r1, r4
 8010314:	4638      	mov	r0, r7
 8010316:	f7ff ff13 	bl	8010140 <__multiply>
 801031a:	6020      	str	r0, [r4, #0]
 801031c:	f8c0 9000 	str.w	r9, [r0]
 8010320:	4604      	mov	r4, r0
 8010322:	e7e4      	b.n	80102ee <__pow5mult+0x6a>
 8010324:	4630      	mov	r0, r6
 8010326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801032a:	bf00      	nop
 801032c:	0801131c 	.word	0x0801131c
 8010330:	08011185 	.word	0x08011185
 8010334:	080112a8 	.word	0x080112a8

08010338 <__lshift>:
 8010338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801033c:	460c      	mov	r4, r1
 801033e:	6849      	ldr	r1, [r1, #4]
 8010340:	6923      	ldr	r3, [r4, #16]
 8010342:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010346:	68a3      	ldr	r3, [r4, #8]
 8010348:	4607      	mov	r7, r0
 801034a:	4691      	mov	r9, r2
 801034c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010350:	f108 0601 	add.w	r6, r8, #1
 8010354:	42b3      	cmp	r3, r6
 8010356:	db0b      	blt.n	8010370 <__lshift+0x38>
 8010358:	4638      	mov	r0, r7
 801035a:	f7ff fde7 	bl	800ff2c <_Balloc>
 801035e:	4605      	mov	r5, r0
 8010360:	b948      	cbnz	r0, 8010376 <__lshift+0x3e>
 8010362:	4602      	mov	r2, r0
 8010364:	4b28      	ldr	r3, [pc, #160]	@ (8010408 <__lshift+0xd0>)
 8010366:	4829      	ldr	r0, [pc, #164]	@ (801040c <__lshift+0xd4>)
 8010368:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801036c:	f7fe feda 	bl	800f124 <__assert_func>
 8010370:	3101      	adds	r1, #1
 8010372:	005b      	lsls	r3, r3, #1
 8010374:	e7ee      	b.n	8010354 <__lshift+0x1c>
 8010376:	2300      	movs	r3, #0
 8010378:	f100 0114 	add.w	r1, r0, #20
 801037c:	f100 0210 	add.w	r2, r0, #16
 8010380:	4618      	mov	r0, r3
 8010382:	4553      	cmp	r3, sl
 8010384:	db33      	blt.n	80103ee <__lshift+0xb6>
 8010386:	6920      	ldr	r0, [r4, #16]
 8010388:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801038c:	f104 0314 	add.w	r3, r4, #20
 8010390:	f019 091f 	ands.w	r9, r9, #31
 8010394:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010398:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801039c:	d02b      	beq.n	80103f6 <__lshift+0xbe>
 801039e:	f1c9 0e20 	rsb	lr, r9, #32
 80103a2:	468a      	mov	sl, r1
 80103a4:	2200      	movs	r2, #0
 80103a6:	6818      	ldr	r0, [r3, #0]
 80103a8:	fa00 f009 	lsl.w	r0, r0, r9
 80103ac:	4310      	orrs	r0, r2
 80103ae:	f84a 0b04 	str.w	r0, [sl], #4
 80103b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80103b6:	459c      	cmp	ip, r3
 80103b8:	fa22 f20e 	lsr.w	r2, r2, lr
 80103bc:	d8f3      	bhi.n	80103a6 <__lshift+0x6e>
 80103be:	ebac 0304 	sub.w	r3, ip, r4
 80103c2:	3b15      	subs	r3, #21
 80103c4:	f023 0303 	bic.w	r3, r3, #3
 80103c8:	3304      	adds	r3, #4
 80103ca:	f104 0015 	add.w	r0, r4, #21
 80103ce:	4560      	cmp	r0, ip
 80103d0:	bf88      	it	hi
 80103d2:	2304      	movhi	r3, #4
 80103d4:	50ca      	str	r2, [r1, r3]
 80103d6:	b10a      	cbz	r2, 80103dc <__lshift+0xa4>
 80103d8:	f108 0602 	add.w	r6, r8, #2
 80103dc:	3e01      	subs	r6, #1
 80103de:	4638      	mov	r0, r7
 80103e0:	612e      	str	r6, [r5, #16]
 80103e2:	4621      	mov	r1, r4
 80103e4:	f7ff fde2 	bl	800ffac <_Bfree>
 80103e8:	4628      	mov	r0, r5
 80103ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80103ee:	f842 0f04 	str.w	r0, [r2, #4]!
 80103f2:	3301      	adds	r3, #1
 80103f4:	e7c5      	b.n	8010382 <__lshift+0x4a>
 80103f6:	3904      	subs	r1, #4
 80103f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80103fc:	f841 2f04 	str.w	r2, [r1, #4]!
 8010400:	459c      	cmp	ip, r3
 8010402:	d8f9      	bhi.n	80103f8 <__lshift+0xc0>
 8010404:	e7ea      	b.n	80103dc <__lshift+0xa4>
 8010406:	bf00      	nop
 8010408:	08011297 	.word	0x08011297
 801040c:	080112a8 	.word	0x080112a8

08010410 <__mcmp>:
 8010410:	690a      	ldr	r2, [r1, #16]
 8010412:	4603      	mov	r3, r0
 8010414:	6900      	ldr	r0, [r0, #16]
 8010416:	1a80      	subs	r0, r0, r2
 8010418:	b530      	push	{r4, r5, lr}
 801041a:	d10e      	bne.n	801043a <__mcmp+0x2a>
 801041c:	3314      	adds	r3, #20
 801041e:	3114      	adds	r1, #20
 8010420:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010424:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010428:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801042c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010430:	4295      	cmp	r5, r2
 8010432:	d003      	beq.n	801043c <__mcmp+0x2c>
 8010434:	d205      	bcs.n	8010442 <__mcmp+0x32>
 8010436:	f04f 30ff 	mov.w	r0, #4294967295
 801043a:	bd30      	pop	{r4, r5, pc}
 801043c:	42a3      	cmp	r3, r4
 801043e:	d3f3      	bcc.n	8010428 <__mcmp+0x18>
 8010440:	e7fb      	b.n	801043a <__mcmp+0x2a>
 8010442:	2001      	movs	r0, #1
 8010444:	e7f9      	b.n	801043a <__mcmp+0x2a>
	...

08010448 <__mdiff>:
 8010448:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801044c:	4689      	mov	r9, r1
 801044e:	4606      	mov	r6, r0
 8010450:	4611      	mov	r1, r2
 8010452:	4648      	mov	r0, r9
 8010454:	4614      	mov	r4, r2
 8010456:	f7ff ffdb 	bl	8010410 <__mcmp>
 801045a:	1e05      	subs	r5, r0, #0
 801045c:	d112      	bne.n	8010484 <__mdiff+0x3c>
 801045e:	4629      	mov	r1, r5
 8010460:	4630      	mov	r0, r6
 8010462:	f7ff fd63 	bl	800ff2c <_Balloc>
 8010466:	4602      	mov	r2, r0
 8010468:	b928      	cbnz	r0, 8010476 <__mdiff+0x2e>
 801046a:	4b3f      	ldr	r3, [pc, #252]	@ (8010568 <__mdiff+0x120>)
 801046c:	f240 2137 	movw	r1, #567	@ 0x237
 8010470:	483e      	ldr	r0, [pc, #248]	@ (801056c <__mdiff+0x124>)
 8010472:	f7fe fe57 	bl	800f124 <__assert_func>
 8010476:	2301      	movs	r3, #1
 8010478:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801047c:	4610      	mov	r0, r2
 801047e:	b003      	add	sp, #12
 8010480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010484:	bfbc      	itt	lt
 8010486:	464b      	movlt	r3, r9
 8010488:	46a1      	movlt	r9, r4
 801048a:	4630      	mov	r0, r6
 801048c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010490:	bfba      	itte	lt
 8010492:	461c      	movlt	r4, r3
 8010494:	2501      	movlt	r5, #1
 8010496:	2500      	movge	r5, #0
 8010498:	f7ff fd48 	bl	800ff2c <_Balloc>
 801049c:	4602      	mov	r2, r0
 801049e:	b918      	cbnz	r0, 80104a8 <__mdiff+0x60>
 80104a0:	4b31      	ldr	r3, [pc, #196]	@ (8010568 <__mdiff+0x120>)
 80104a2:	f240 2145 	movw	r1, #581	@ 0x245
 80104a6:	e7e3      	b.n	8010470 <__mdiff+0x28>
 80104a8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80104ac:	6926      	ldr	r6, [r4, #16]
 80104ae:	60c5      	str	r5, [r0, #12]
 80104b0:	f109 0310 	add.w	r3, r9, #16
 80104b4:	f109 0514 	add.w	r5, r9, #20
 80104b8:	f104 0e14 	add.w	lr, r4, #20
 80104bc:	f100 0b14 	add.w	fp, r0, #20
 80104c0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80104c4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80104c8:	9301      	str	r3, [sp, #4]
 80104ca:	46d9      	mov	r9, fp
 80104cc:	f04f 0c00 	mov.w	ip, #0
 80104d0:	9b01      	ldr	r3, [sp, #4]
 80104d2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80104d6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80104da:	9301      	str	r3, [sp, #4]
 80104dc:	fa1f f38a 	uxth.w	r3, sl
 80104e0:	4619      	mov	r1, r3
 80104e2:	b283      	uxth	r3, r0
 80104e4:	1acb      	subs	r3, r1, r3
 80104e6:	0c00      	lsrs	r0, r0, #16
 80104e8:	4463      	add	r3, ip
 80104ea:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80104ee:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80104f2:	b29b      	uxth	r3, r3
 80104f4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80104f8:	4576      	cmp	r6, lr
 80104fa:	f849 3b04 	str.w	r3, [r9], #4
 80104fe:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010502:	d8e5      	bhi.n	80104d0 <__mdiff+0x88>
 8010504:	1b33      	subs	r3, r6, r4
 8010506:	3b15      	subs	r3, #21
 8010508:	f023 0303 	bic.w	r3, r3, #3
 801050c:	3415      	adds	r4, #21
 801050e:	3304      	adds	r3, #4
 8010510:	42a6      	cmp	r6, r4
 8010512:	bf38      	it	cc
 8010514:	2304      	movcc	r3, #4
 8010516:	441d      	add	r5, r3
 8010518:	445b      	add	r3, fp
 801051a:	461e      	mov	r6, r3
 801051c:	462c      	mov	r4, r5
 801051e:	4544      	cmp	r4, r8
 8010520:	d30e      	bcc.n	8010540 <__mdiff+0xf8>
 8010522:	f108 0103 	add.w	r1, r8, #3
 8010526:	1b49      	subs	r1, r1, r5
 8010528:	f021 0103 	bic.w	r1, r1, #3
 801052c:	3d03      	subs	r5, #3
 801052e:	45a8      	cmp	r8, r5
 8010530:	bf38      	it	cc
 8010532:	2100      	movcc	r1, #0
 8010534:	440b      	add	r3, r1
 8010536:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801053a:	b191      	cbz	r1, 8010562 <__mdiff+0x11a>
 801053c:	6117      	str	r7, [r2, #16]
 801053e:	e79d      	b.n	801047c <__mdiff+0x34>
 8010540:	f854 1b04 	ldr.w	r1, [r4], #4
 8010544:	46e6      	mov	lr, ip
 8010546:	0c08      	lsrs	r0, r1, #16
 8010548:	fa1c fc81 	uxtah	ip, ip, r1
 801054c:	4471      	add	r1, lr
 801054e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010552:	b289      	uxth	r1, r1
 8010554:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010558:	f846 1b04 	str.w	r1, [r6], #4
 801055c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010560:	e7dd      	b.n	801051e <__mdiff+0xd6>
 8010562:	3f01      	subs	r7, #1
 8010564:	e7e7      	b.n	8010536 <__mdiff+0xee>
 8010566:	bf00      	nop
 8010568:	08011297 	.word	0x08011297
 801056c:	080112a8 	.word	0x080112a8

08010570 <__d2b>:
 8010570:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010574:	460f      	mov	r7, r1
 8010576:	2101      	movs	r1, #1
 8010578:	ec59 8b10 	vmov	r8, r9, d0
 801057c:	4616      	mov	r6, r2
 801057e:	f7ff fcd5 	bl	800ff2c <_Balloc>
 8010582:	4604      	mov	r4, r0
 8010584:	b930      	cbnz	r0, 8010594 <__d2b+0x24>
 8010586:	4602      	mov	r2, r0
 8010588:	4b23      	ldr	r3, [pc, #140]	@ (8010618 <__d2b+0xa8>)
 801058a:	4824      	ldr	r0, [pc, #144]	@ (801061c <__d2b+0xac>)
 801058c:	f240 310f 	movw	r1, #783	@ 0x30f
 8010590:	f7fe fdc8 	bl	800f124 <__assert_func>
 8010594:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010598:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801059c:	b10d      	cbz	r5, 80105a2 <__d2b+0x32>
 801059e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80105a2:	9301      	str	r3, [sp, #4]
 80105a4:	f1b8 0300 	subs.w	r3, r8, #0
 80105a8:	d023      	beq.n	80105f2 <__d2b+0x82>
 80105aa:	4668      	mov	r0, sp
 80105ac:	9300      	str	r3, [sp, #0]
 80105ae:	f7ff fd84 	bl	80100ba <__lo0bits>
 80105b2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80105b6:	b1d0      	cbz	r0, 80105ee <__d2b+0x7e>
 80105b8:	f1c0 0320 	rsb	r3, r0, #32
 80105bc:	fa02 f303 	lsl.w	r3, r2, r3
 80105c0:	430b      	orrs	r3, r1
 80105c2:	40c2      	lsrs	r2, r0
 80105c4:	6163      	str	r3, [r4, #20]
 80105c6:	9201      	str	r2, [sp, #4]
 80105c8:	9b01      	ldr	r3, [sp, #4]
 80105ca:	61a3      	str	r3, [r4, #24]
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	bf0c      	ite	eq
 80105d0:	2201      	moveq	r2, #1
 80105d2:	2202      	movne	r2, #2
 80105d4:	6122      	str	r2, [r4, #16]
 80105d6:	b1a5      	cbz	r5, 8010602 <__d2b+0x92>
 80105d8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80105dc:	4405      	add	r5, r0
 80105de:	603d      	str	r5, [r7, #0]
 80105e0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80105e4:	6030      	str	r0, [r6, #0]
 80105e6:	4620      	mov	r0, r4
 80105e8:	b003      	add	sp, #12
 80105ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80105ee:	6161      	str	r1, [r4, #20]
 80105f0:	e7ea      	b.n	80105c8 <__d2b+0x58>
 80105f2:	a801      	add	r0, sp, #4
 80105f4:	f7ff fd61 	bl	80100ba <__lo0bits>
 80105f8:	9b01      	ldr	r3, [sp, #4]
 80105fa:	6163      	str	r3, [r4, #20]
 80105fc:	3020      	adds	r0, #32
 80105fe:	2201      	movs	r2, #1
 8010600:	e7e8      	b.n	80105d4 <__d2b+0x64>
 8010602:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010606:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801060a:	6038      	str	r0, [r7, #0]
 801060c:	6918      	ldr	r0, [r3, #16]
 801060e:	f7ff fd35 	bl	801007c <__hi0bits>
 8010612:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010616:	e7e5      	b.n	80105e4 <__d2b+0x74>
 8010618:	08011297 	.word	0x08011297
 801061c:	080112a8 	.word	0x080112a8

08010620 <__ssputs_r>:
 8010620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010624:	688e      	ldr	r6, [r1, #8]
 8010626:	461f      	mov	r7, r3
 8010628:	42be      	cmp	r6, r7
 801062a:	680b      	ldr	r3, [r1, #0]
 801062c:	4682      	mov	sl, r0
 801062e:	460c      	mov	r4, r1
 8010630:	4690      	mov	r8, r2
 8010632:	d82d      	bhi.n	8010690 <__ssputs_r+0x70>
 8010634:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010638:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801063c:	d026      	beq.n	801068c <__ssputs_r+0x6c>
 801063e:	6965      	ldr	r5, [r4, #20]
 8010640:	6909      	ldr	r1, [r1, #16]
 8010642:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010646:	eba3 0901 	sub.w	r9, r3, r1
 801064a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801064e:	1c7b      	adds	r3, r7, #1
 8010650:	444b      	add	r3, r9
 8010652:	106d      	asrs	r5, r5, #1
 8010654:	429d      	cmp	r5, r3
 8010656:	bf38      	it	cc
 8010658:	461d      	movcc	r5, r3
 801065a:	0553      	lsls	r3, r2, #21
 801065c:	d527      	bpl.n	80106ae <__ssputs_r+0x8e>
 801065e:	4629      	mov	r1, r5
 8010660:	f7ff fbd8 	bl	800fe14 <_malloc_r>
 8010664:	4606      	mov	r6, r0
 8010666:	b360      	cbz	r0, 80106c2 <__ssputs_r+0xa2>
 8010668:	6921      	ldr	r1, [r4, #16]
 801066a:	464a      	mov	r2, r9
 801066c:	f7fe fd4b 	bl	800f106 <memcpy>
 8010670:	89a3      	ldrh	r3, [r4, #12]
 8010672:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010676:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801067a:	81a3      	strh	r3, [r4, #12]
 801067c:	6126      	str	r6, [r4, #16]
 801067e:	6165      	str	r5, [r4, #20]
 8010680:	444e      	add	r6, r9
 8010682:	eba5 0509 	sub.w	r5, r5, r9
 8010686:	6026      	str	r6, [r4, #0]
 8010688:	60a5      	str	r5, [r4, #8]
 801068a:	463e      	mov	r6, r7
 801068c:	42be      	cmp	r6, r7
 801068e:	d900      	bls.n	8010692 <__ssputs_r+0x72>
 8010690:	463e      	mov	r6, r7
 8010692:	6820      	ldr	r0, [r4, #0]
 8010694:	4632      	mov	r2, r6
 8010696:	4641      	mov	r1, r8
 8010698:	f000 fb7c 	bl	8010d94 <memmove>
 801069c:	68a3      	ldr	r3, [r4, #8]
 801069e:	1b9b      	subs	r3, r3, r6
 80106a0:	60a3      	str	r3, [r4, #8]
 80106a2:	6823      	ldr	r3, [r4, #0]
 80106a4:	4433      	add	r3, r6
 80106a6:	6023      	str	r3, [r4, #0]
 80106a8:	2000      	movs	r0, #0
 80106aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80106ae:	462a      	mov	r2, r5
 80106b0:	f000 fbe9 	bl	8010e86 <_realloc_r>
 80106b4:	4606      	mov	r6, r0
 80106b6:	2800      	cmp	r0, #0
 80106b8:	d1e0      	bne.n	801067c <__ssputs_r+0x5c>
 80106ba:	6921      	ldr	r1, [r4, #16]
 80106bc:	4650      	mov	r0, sl
 80106be:	f7ff fb35 	bl	800fd2c <_free_r>
 80106c2:	230c      	movs	r3, #12
 80106c4:	f8ca 3000 	str.w	r3, [sl]
 80106c8:	89a3      	ldrh	r3, [r4, #12]
 80106ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80106ce:	81a3      	strh	r3, [r4, #12]
 80106d0:	f04f 30ff 	mov.w	r0, #4294967295
 80106d4:	e7e9      	b.n	80106aa <__ssputs_r+0x8a>
	...

080106d8 <_svfiprintf_r>:
 80106d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106dc:	4698      	mov	r8, r3
 80106de:	898b      	ldrh	r3, [r1, #12]
 80106e0:	061b      	lsls	r3, r3, #24
 80106e2:	b09d      	sub	sp, #116	@ 0x74
 80106e4:	4607      	mov	r7, r0
 80106e6:	460d      	mov	r5, r1
 80106e8:	4614      	mov	r4, r2
 80106ea:	d510      	bpl.n	801070e <_svfiprintf_r+0x36>
 80106ec:	690b      	ldr	r3, [r1, #16]
 80106ee:	b973      	cbnz	r3, 801070e <_svfiprintf_r+0x36>
 80106f0:	2140      	movs	r1, #64	@ 0x40
 80106f2:	f7ff fb8f 	bl	800fe14 <_malloc_r>
 80106f6:	6028      	str	r0, [r5, #0]
 80106f8:	6128      	str	r0, [r5, #16]
 80106fa:	b930      	cbnz	r0, 801070a <_svfiprintf_r+0x32>
 80106fc:	230c      	movs	r3, #12
 80106fe:	603b      	str	r3, [r7, #0]
 8010700:	f04f 30ff 	mov.w	r0, #4294967295
 8010704:	b01d      	add	sp, #116	@ 0x74
 8010706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801070a:	2340      	movs	r3, #64	@ 0x40
 801070c:	616b      	str	r3, [r5, #20]
 801070e:	2300      	movs	r3, #0
 8010710:	9309      	str	r3, [sp, #36]	@ 0x24
 8010712:	2320      	movs	r3, #32
 8010714:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010718:	f8cd 800c 	str.w	r8, [sp, #12]
 801071c:	2330      	movs	r3, #48	@ 0x30
 801071e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80108bc <_svfiprintf_r+0x1e4>
 8010722:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010726:	f04f 0901 	mov.w	r9, #1
 801072a:	4623      	mov	r3, r4
 801072c:	469a      	mov	sl, r3
 801072e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010732:	b10a      	cbz	r2, 8010738 <_svfiprintf_r+0x60>
 8010734:	2a25      	cmp	r2, #37	@ 0x25
 8010736:	d1f9      	bne.n	801072c <_svfiprintf_r+0x54>
 8010738:	ebba 0b04 	subs.w	fp, sl, r4
 801073c:	d00b      	beq.n	8010756 <_svfiprintf_r+0x7e>
 801073e:	465b      	mov	r3, fp
 8010740:	4622      	mov	r2, r4
 8010742:	4629      	mov	r1, r5
 8010744:	4638      	mov	r0, r7
 8010746:	f7ff ff6b 	bl	8010620 <__ssputs_r>
 801074a:	3001      	adds	r0, #1
 801074c:	f000 80a7 	beq.w	801089e <_svfiprintf_r+0x1c6>
 8010750:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010752:	445a      	add	r2, fp
 8010754:	9209      	str	r2, [sp, #36]	@ 0x24
 8010756:	f89a 3000 	ldrb.w	r3, [sl]
 801075a:	2b00      	cmp	r3, #0
 801075c:	f000 809f 	beq.w	801089e <_svfiprintf_r+0x1c6>
 8010760:	2300      	movs	r3, #0
 8010762:	f04f 32ff 	mov.w	r2, #4294967295
 8010766:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801076a:	f10a 0a01 	add.w	sl, sl, #1
 801076e:	9304      	str	r3, [sp, #16]
 8010770:	9307      	str	r3, [sp, #28]
 8010772:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010776:	931a      	str	r3, [sp, #104]	@ 0x68
 8010778:	4654      	mov	r4, sl
 801077a:	2205      	movs	r2, #5
 801077c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010780:	484e      	ldr	r0, [pc, #312]	@ (80108bc <_svfiprintf_r+0x1e4>)
 8010782:	f7ef fdbd 	bl	8000300 <memchr>
 8010786:	9a04      	ldr	r2, [sp, #16]
 8010788:	b9d8      	cbnz	r0, 80107c2 <_svfiprintf_r+0xea>
 801078a:	06d0      	lsls	r0, r2, #27
 801078c:	bf44      	itt	mi
 801078e:	2320      	movmi	r3, #32
 8010790:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010794:	0711      	lsls	r1, r2, #28
 8010796:	bf44      	itt	mi
 8010798:	232b      	movmi	r3, #43	@ 0x2b
 801079a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801079e:	f89a 3000 	ldrb.w	r3, [sl]
 80107a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80107a4:	d015      	beq.n	80107d2 <_svfiprintf_r+0xfa>
 80107a6:	9a07      	ldr	r2, [sp, #28]
 80107a8:	4654      	mov	r4, sl
 80107aa:	2000      	movs	r0, #0
 80107ac:	f04f 0c0a 	mov.w	ip, #10
 80107b0:	4621      	mov	r1, r4
 80107b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80107b6:	3b30      	subs	r3, #48	@ 0x30
 80107b8:	2b09      	cmp	r3, #9
 80107ba:	d94b      	bls.n	8010854 <_svfiprintf_r+0x17c>
 80107bc:	b1b0      	cbz	r0, 80107ec <_svfiprintf_r+0x114>
 80107be:	9207      	str	r2, [sp, #28]
 80107c0:	e014      	b.n	80107ec <_svfiprintf_r+0x114>
 80107c2:	eba0 0308 	sub.w	r3, r0, r8
 80107c6:	fa09 f303 	lsl.w	r3, r9, r3
 80107ca:	4313      	orrs	r3, r2
 80107cc:	9304      	str	r3, [sp, #16]
 80107ce:	46a2      	mov	sl, r4
 80107d0:	e7d2      	b.n	8010778 <_svfiprintf_r+0xa0>
 80107d2:	9b03      	ldr	r3, [sp, #12]
 80107d4:	1d19      	adds	r1, r3, #4
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	9103      	str	r1, [sp, #12]
 80107da:	2b00      	cmp	r3, #0
 80107dc:	bfbb      	ittet	lt
 80107de:	425b      	neglt	r3, r3
 80107e0:	f042 0202 	orrlt.w	r2, r2, #2
 80107e4:	9307      	strge	r3, [sp, #28]
 80107e6:	9307      	strlt	r3, [sp, #28]
 80107e8:	bfb8      	it	lt
 80107ea:	9204      	strlt	r2, [sp, #16]
 80107ec:	7823      	ldrb	r3, [r4, #0]
 80107ee:	2b2e      	cmp	r3, #46	@ 0x2e
 80107f0:	d10a      	bne.n	8010808 <_svfiprintf_r+0x130>
 80107f2:	7863      	ldrb	r3, [r4, #1]
 80107f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80107f6:	d132      	bne.n	801085e <_svfiprintf_r+0x186>
 80107f8:	9b03      	ldr	r3, [sp, #12]
 80107fa:	1d1a      	adds	r2, r3, #4
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	9203      	str	r2, [sp, #12]
 8010800:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010804:	3402      	adds	r4, #2
 8010806:	9305      	str	r3, [sp, #20]
 8010808:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80108cc <_svfiprintf_r+0x1f4>
 801080c:	7821      	ldrb	r1, [r4, #0]
 801080e:	2203      	movs	r2, #3
 8010810:	4650      	mov	r0, sl
 8010812:	f7ef fd75 	bl	8000300 <memchr>
 8010816:	b138      	cbz	r0, 8010828 <_svfiprintf_r+0x150>
 8010818:	9b04      	ldr	r3, [sp, #16]
 801081a:	eba0 000a 	sub.w	r0, r0, sl
 801081e:	2240      	movs	r2, #64	@ 0x40
 8010820:	4082      	lsls	r2, r0
 8010822:	4313      	orrs	r3, r2
 8010824:	3401      	adds	r4, #1
 8010826:	9304      	str	r3, [sp, #16]
 8010828:	f814 1b01 	ldrb.w	r1, [r4], #1
 801082c:	4824      	ldr	r0, [pc, #144]	@ (80108c0 <_svfiprintf_r+0x1e8>)
 801082e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010832:	2206      	movs	r2, #6
 8010834:	f7ef fd64 	bl	8000300 <memchr>
 8010838:	2800      	cmp	r0, #0
 801083a:	d036      	beq.n	80108aa <_svfiprintf_r+0x1d2>
 801083c:	4b21      	ldr	r3, [pc, #132]	@ (80108c4 <_svfiprintf_r+0x1ec>)
 801083e:	bb1b      	cbnz	r3, 8010888 <_svfiprintf_r+0x1b0>
 8010840:	9b03      	ldr	r3, [sp, #12]
 8010842:	3307      	adds	r3, #7
 8010844:	f023 0307 	bic.w	r3, r3, #7
 8010848:	3308      	adds	r3, #8
 801084a:	9303      	str	r3, [sp, #12]
 801084c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801084e:	4433      	add	r3, r6
 8010850:	9309      	str	r3, [sp, #36]	@ 0x24
 8010852:	e76a      	b.n	801072a <_svfiprintf_r+0x52>
 8010854:	fb0c 3202 	mla	r2, ip, r2, r3
 8010858:	460c      	mov	r4, r1
 801085a:	2001      	movs	r0, #1
 801085c:	e7a8      	b.n	80107b0 <_svfiprintf_r+0xd8>
 801085e:	2300      	movs	r3, #0
 8010860:	3401      	adds	r4, #1
 8010862:	9305      	str	r3, [sp, #20]
 8010864:	4619      	mov	r1, r3
 8010866:	f04f 0c0a 	mov.w	ip, #10
 801086a:	4620      	mov	r0, r4
 801086c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010870:	3a30      	subs	r2, #48	@ 0x30
 8010872:	2a09      	cmp	r2, #9
 8010874:	d903      	bls.n	801087e <_svfiprintf_r+0x1a6>
 8010876:	2b00      	cmp	r3, #0
 8010878:	d0c6      	beq.n	8010808 <_svfiprintf_r+0x130>
 801087a:	9105      	str	r1, [sp, #20]
 801087c:	e7c4      	b.n	8010808 <_svfiprintf_r+0x130>
 801087e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010882:	4604      	mov	r4, r0
 8010884:	2301      	movs	r3, #1
 8010886:	e7f0      	b.n	801086a <_svfiprintf_r+0x192>
 8010888:	ab03      	add	r3, sp, #12
 801088a:	9300      	str	r3, [sp, #0]
 801088c:	462a      	mov	r2, r5
 801088e:	4b0e      	ldr	r3, [pc, #56]	@ (80108c8 <_svfiprintf_r+0x1f0>)
 8010890:	a904      	add	r1, sp, #16
 8010892:	4638      	mov	r0, r7
 8010894:	f7fd fdd8 	bl	800e448 <_printf_float>
 8010898:	1c42      	adds	r2, r0, #1
 801089a:	4606      	mov	r6, r0
 801089c:	d1d6      	bne.n	801084c <_svfiprintf_r+0x174>
 801089e:	89ab      	ldrh	r3, [r5, #12]
 80108a0:	065b      	lsls	r3, r3, #25
 80108a2:	f53f af2d 	bmi.w	8010700 <_svfiprintf_r+0x28>
 80108a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80108a8:	e72c      	b.n	8010704 <_svfiprintf_r+0x2c>
 80108aa:	ab03      	add	r3, sp, #12
 80108ac:	9300      	str	r3, [sp, #0]
 80108ae:	462a      	mov	r2, r5
 80108b0:	4b05      	ldr	r3, [pc, #20]	@ (80108c8 <_svfiprintf_r+0x1f0>)
 80108b2:	a904      	add	r1, sp, #16
 80108b4:	4638      	mov	r0, r7
 80108b6:	f7fe f84f 	bl	800e958 <_printf_i>
 80108ba:	e7ed      	b.n	8010898 <_svfiprintf_r+0x1c0>
 80108bc:	08011301 	.word	0x08011301
 80108c0:	0801130b 	.word	0x0801130b
 80108c4:	0800e449 	.word	0x0800e449
 80108c8:	08010621 	.word	0x08010621
 80108cc:	08011307 	.word	0x08011307

080108d0 <__sfputc_r>:
 80108d0:	6893      	ldr	r3, [r2, #8]
 80108d2:	3b01      	subs	r3, #1
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	b410      	push	{r4}
 80108d8:	6093      	str	r3, [r2, #8]
 80108da:	da08      	bge.n	80108ee <__sfputc_r+0x1e>
 80108dc:	6994      	ldr	r4, [r2, #24]
 80108de:	42a3      	cmp	r3, r4
 80108e0:	db01      	blt.n	80108e6 <__sfputc_r+0x16>
 80108e2:	290a      	cmp	r1, #10
 80108e4:	d103      	bne.n	80108ee <__sfputc_r+0x1e>
 80108e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80108ea:	f7fe ba8c 	b.w	800ee06 <__swbuf_r>
 80108ee:	6813      	ldr	r3, [r2, #0]
 80108f0:	1c58      	adds	r0, r3, #1
 80108f2:	6010      	str	r0, [r2, #0]
 80108f4:	7019      	strb	r1, [r3, #0]
 80108f6:	4608      	mov	r0, r1
 80108f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80108fc:	4770      	bx	lr

080108fe <__sfputs_r>:
 80108fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010900:	4606      	mov	r6, r0
 8010902:	460f      	mov	r7, r1
 8010904:	4614      	mov	r4, r2
 8010906:	18d5      	adds	r5, r2, r3
 8010908:	42ac      	cmp	r4, r5
 801090a:	d101      	bne.n	8010910 <__sfputs_r+0x12>
 801090c:	2000      	movs	r0, #0
 801090e:	e007      	b.n	8010920 <__sfputs_r+0x22>
 8010910:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010914:	463a      	mov	r2, r7
 8010916:	4630      	mov	r0, r6
 8010918:	f7ff ffda 	bl	80108d0 <__sfputc_r>
 801091c:	1c43      	adds	r3, r0, #1
 801091e:	d1f3      	bne.n	8010908 <__sfputs_r+0xa>
 8010920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010924 <_vfiprintf_r>:
 8010924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010928:	460d      	mov	r5, r1
 801092a:	b09d      	sub	sp, #116	@ 0x74
 801092c:	4614      	mov	r4, r2
 801092e:	4698      	mov	r8, r3
 8010930:	4606      	mov	r6, r0
 8010932:	b118      	cbz	r0, 801093c <_vfiprintf_r+0x18>
 8010934:	6a03      	ldr	r3, [r0, #32]
 8010936:	b90b      	cbnz	r3, 801093c <_vfiprintf_r+0x18>
 8010938:	f7fe f9b8 	bl	800ecac <__sinit>
 801093c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801093e:	07d9      	lsls	r1, r3, #31
 8010940:	d405      	bmi.n	801094e <_vfiprintf_r+0x2a>
 8010942:	89ab      	ldrh	r3, [r5, #12]
 8010944:	059a      	lsls	r2, r3, #22
 8010946:	d402      	bmi.n	801094e <_vfiprintf_r+0x2a>
 8010948:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801094a:	f7fe fbda 	bl	800f102 <__retarget_lock_acquire_recursive>
 801094e:	89ab      	ldrh	r3, [r5, #12]
 8010950:	071b      	lsls	r3, r3, #28
 8010952:	d501      	bpl.n	8010958 <_vfiprintf_r+0x34>
 8010954:	692b      	ldr	r3, [r5, #16]
 8010956:	b99b      	cbnz	r3, 8010980 <_vfiprintf_r+0x5c>
 8010958:	4629      	mov	r1, r5
 801095a:	4630      	mov	r0, r6
 801095c:	f7fe fa92 	bl	800ee84 <__swsetup_r>
 8010960:	b170      	cbz	r0, 8010980 <_vfiprintf_r+0x5c>
 8010962:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010964:	07dc      	lsls	r4, r3, #31
 8010966:	d504      	bpl.n	8010972 <_vfiprintf_r+0x4e>
 8010968:	f04f 30ff 	mov.w	r0, #4294967295
 801096c:	b01d      	add	sp, #116	@ 0x74
 801096e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010972:	89ab      	ldrh	r3, [r5, #12]
 8010974:	0598      	lsls	r0, r3, #22
 8010976:	d4f7      	bmi.n	8010968 <_vfiprintf_r+0x44>
 8010978:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801097a:	f7fe fbc3 	bl	800f104 <__retarget_lock_release_recursive>
 801097e:	e7f3      	b.n	8010968 <_vfiprintf_r+0x44>
 8010980:	2300      	movs	r3, #0
 8010982:	9309      	str	r3, [sp, #36]	@ 0x24
 8010984:	2320      	movs	r3, #32
 8010986:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801098a:	f8cd 800c 	str.w	r8, [sp, #12]
 801098e:	2330      	movs	r3, #48	@ 0x30
 8010990:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010b40 <_vfiprintf_r+0x21c>
 8010994:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010998:	f04f 0901 	mov.w	r9, #1
 801099c:	4623      	mov	r3, r4
 801099e:	469a      	mov	sl, r3
 80109a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80109a4:	b10a      	cbz	r2, 80109aa <_vfiprintf_r+0x86>
 80109a6:	2a25      	cmp	r2, #37	@ 0x25
 80109a8:	d1f9      	bne.n	801099e <_vfiprintf_r+0x7a>
 80109aa:	ebba 0b04 	subs.w	fp, sl, r4
 80109ae:	d00b      	beq.n	80109c8 <_vfiprintf_r+0xa4>
 80109b0:	465b      	mov	r3, fp
 80109b2:	4622      	mov	r2, r4
 80109b4:	4629      	mov	r1, r5
 80109b6:	4630      	mov	r0, r6
 80109b8:	f7ff ffa1 	bl	80108fe <__sfputs_r>
 80109bc:	3001      	adds	r0, #1
 80109be:	f000 80a7 	beq.w	8010b10 <_vfiprintf_r+0x1ec>
 80109c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80109c4:	445a      	add	r2, fp
 80109c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80109c8:	f89a 3000 	ldrb.w	r3, [sl]
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	f000 809f 	beq.w	8010b10 <_vfiprintf_r+0x1ec>
 80109d2:	2300      	movs	r3, #0
 80109d4:	f04f 32ff 	mov.w	r2, #4294967295
 80109d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80109dc:	f10a 0a01 	add.w	sl, sl, #1
 80109e0:	9304      	str	r3, [sp, #16]
 80109e2:	9307      	str	r3, [sp, #28]
 80109e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80109e8:	931a      	str	r3, [sp, #104]	@ 0x68
 80109ea:	4654      	mov	r4, sl
 80109ec:	2205      	movs	r2, #5
 80109ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80109f2:	4853      	ldr	r0, [pc, #332]	@ (8010b40 <_vfiprintf_r+0x21c>)
 80109f4:	f7ef fc84 	bl	8000300 <memchr>
 80109f8:	9a04      	ldr	r2, [sp, #16]
 80109fa:	b9d8      	cbnz	r0, 8010a34 <_vfiprintf_r+0x110>
 80109fc:	06d1      	lsls	r1, r2, #27
 80109fe:	bf44      	itt	mi
 8010a00:	2320      	movmi	r3, #32
 8010a02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010a06:	0713      	lsls	r3, r2, #28
 8010a08:	bf44      	itt	mi
 8010a0a:	232b      	movmi	r3, #43	@ 0x2b
 8010a0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010a10:	f89a 3000 	ldrb.w	r3, [sl]
 8010a14:	2b2a      	cmp	r3, #42	@ 0x2a
 8010a16:	d015      	beq.n	8010a44 <_vfiprintf_r+0x120>
 8010a18:	9a07      	ldr	r2, [sp, #28]
 8010a1a:	4654      	mov	r4, sl
 8010a1c:	2000      	movs	r0, #0
 8010a1e:	f04f 0c0a 	mov.w	ip, #10
 8010a22:	4621      	mov	r1, r4
 8010a24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010a28:	3b30      	subs	r3, #48	@ 0x30
 8010a2a:	2b09      	cmp	r3, #9
 8010a2c:	d94b      	bls.n	8010ac6 <_vfiprintf_r+0x1a2>
 8010a2e:	b1b0      	cbz	r0, 8010a5e <_vfiprintf_r+0x13a>
 8010a30:	9207      	str	r2, [sp, #28]
 8010a32:	e014      	b.n	8010a5e <_vfiprintf_r+0x13a>
 8010a34:	eba0 0308 	sub.w	r3, r0, r8
 8010a38:	fa09 f303 	lsl.w	r3, r9, r3
 8010a3c:	4313      	orrs	r3, r2
 8010a3e:	9304      	str	r3, [sp, #16]
 8010a40:	46a2      	mov	sl, r4
 8010a42:	e7d2      	b.n	80109ea <_vfiprintf_r+0xc6>
 8010a44:	9b03      	ldr	r3, [sp, #12]
 8010a46:	1d19      	adds	r1, r3, #4
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	9103      	str	r1, [sp, #12]
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	bfbb      	ittet	lt
 8010a50:	425b      	neglt	r3, r3
 8010a52:	f042 0202 	orrlt.w	r2, r2, #2
 8010a56:	9307      	strge	r3, [sp, #28]
 8010a58:	9307      	strlt	r3, [sp, #28]
 8010a5a:	bfb8      	it	lt
 8010a5c:	9204      	strlt	r2, [sp, #16]
 8010a5e:	7823      	ldrb	r3, [r4, #0]
 8010a60:	2b2e      	cmp	r3, #46	@ 0x2e
 8010a62:	d10a      	bne.n	8010a7a <_vfiprintf_r+0x156>
 8010a64:	7863      	ldrb	r3, [r4, #1]
 8010a66:	2b2a      	cmp	r3, #42	@ 0x2a
 8010a68:	d132      	bne.n	8010ad0 <_vfiprintf_r+0x1ac>
 8010a6a:	9b03      	ldr	r3, [sp, #12]
 8010a6c:	1d1a      	adds	r2, r3, #4
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	9203      	str	r2, [sp, #12]
 8010a72:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010a76:	3402      	adds	r4, #2
 8010a78:	9305      	str	r3, [sp, #20]
 8010a7a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010b50 <_vfiprintf_r+0x22c>
 8010a7e:	7821      	ldrb	r1, [r4, #0]
 8010a80:	2203      	movs	r2, #3
 8010a82:	4650      	mov	r0, sl
 8010a84:	f7ef fc3c 	bl	8000300 <memchr>
 8010a88:	b138      	cbz	r0, 8010a9a <_vfiprintf_r+0x176>
 8010a8a:	9b04      	ldr	r3, [sp, #16]
 8010a8c:	eba0 000a 	sub.w	r0, r0, sl
 8010a90:	2240      	movs	r2, #64	@ 0x40
 8010a92:	4082      	lsls	r2, r0
 8010a94:	4313      	orrs	r3, r2
 8010a96:	3401      	adds	r4, #1
 8010a98:	9304      	str	r3, [sp, #16]
 8010a9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a9e:	4829      	ldr	r0, [pc, #164]	@ (8010b44 <_vfiprintf_r+0x220>)
 8010aa0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010aa4:	2206      	movs	r2, #6
 8010aa6:	f7ef fc2b 	bl	8000300 <memchr>
 8010aaa:	2800      	cmp	r0, #0
 8010aac:	d03f      	beq.n	8010b2e <_vfiprintf_r+0x20a>
 8010aae:	4b26      	ldr	r3, [pc, #152]	@ (8010b48 <_vfiprintf_r+0x224>)
 8010ab0:	bb1b      	cbnz	r3, 8010afa <_vfiprintf_r+0x1d6>
 8010ab2:	9b03      	ldr	r3, [sp, #12]
 8010ab4:	3307      	adds	r3, #7
 8010ab6:	f023 0307 	bic.w	r3, r3, #7
 8010aba:	3308      	adds	r3, #8
 8010abc:	9303      	str	r3, [sp, #12]
 8010abe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ac0:	443b      	add	r3, r7
 8010ac2:	9309      	str	r3, [sp, #36]	@ 0x24
 8010ac4:	e76a      	b.n	801099c <_vfiprintf_r+0x78>
 8010ac6:	fb0c 3202 	mla	r2, ip, r2, r3
 8010aca:	460c      	mov	r4, r1
 8010acc:	2001      	movs	r0, #1
 8010ace:	e7a8      	b.n	8010a22 <_vfiprintf_r+0xfe>
 8010ad0:	2300      	movs	r3, #0
 8010ad2:	3401      	adds	r4, #1
 8010ad4:	9305      	str	r3, [sp, #20]
 8010ad6:	4619      	mov	r1, r3
 8010ad8:	f04f 0c0a 	mov.w	ip, #10
 8010adc:	4620      	mov	r0, r4
 8010ade:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010ae2:	3a30      	subs	r2, #48	@ 0x30
 8010ae4:	2a09      	cmp	r2, #9
 8010ae6:	d903      	bls.n	8010af0 <_vfiprintf_r+0x1cc>
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d0c6      	beq.n	8010a7a <_vfiprintf_r+0x156>
 8010aec:	9105      	str	r1, [sp, #20]
 8010aee:	e7c4      	b.n	8010a7a <_vfiprintf_r+0x156>
 8010af0:	fb0c 2101 	mla	r1, ip, r1, r2
 8010af4:	4604      	mov	r4, r0
 8010af6:	2301      	movs	r3, #1
 8010af8:	e7f0      	b.n	8010adc <_vfiprintf_r+0x1b8>
 8010afa:	ab03      	add	r3, sp, #12
 8010afc:	9300      	str	r3, [sp, #0]
 8010afe:	462a      	mov	r2, r5
 8010b00:	4b12      	ldr	r3, [pc, #72]	@ (8010b4c <_vfiprintf_r+0x228>)
 8010b02:	a904      	add	r1, sp, #16
 8010b04:	4630      	mov	r0, r6
 8010b06:	f7fd fc9f 	bl	800e448 <_printf_float>
 8010b0a:	4607      	mov	r7, r0
 8010b0c:	1c78      	adds	r0, r7, #1
 8010b0e:	d1d6      	bne.n	8010abe <_vfiprintf_r+0x19a>
 8010b10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010b12:	07d9      	lsls	r1, r3, #31
 8010b14:	d405      	bmi.n	8010b22 <_vfiprintf_r+0x1fe>
 8010b16:	89ab      	ldrh	r3, [r5, #12]
 8010b18:	059a      	lsls	r2, r3, #22
 8010b1a:	d402      	bmi.n	8010b22 <_vfiprintf_r+0x1fe>
 8010b1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010b1e:	f7fe faf1 	bl	800f104 <__retarget_lock_release_recursive>
 8010b22:	89ab      	ldrh	r3, [r5, #12]
 8010b24:	065b      	lsls	r3, r3, #25
 8010b26:	f53f af1f 	bmi.w	8010968 <_vfiprintf_r+0x44>
 8010b2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010b2c:	e71e      	b.n	801096c <_vfiprintf_r+0x48>
 8010b2e:	ab03      	add	r3, sp, #12
 8010b30:	9300      	str	r3, [sp, #0]
 8010b32:	462a      	mov	r2, r5
 8010b34:	4b05      	ldr	r3, [pc, #20]	@ (8010b4c <_vfiprintf_r+0x228>)
 8010b36:	a904      	add	r1, sp, #16
 8010b38:	4630      	mov	r0, r6
 8010b3a:	f7fd ff0d 	bl	800e958 <_printf_i>
 8010b3e:	e7e4      	b.n	8010b0a <_vfiprintf_r+0x1e6>
 8010b40:	08011301 	.word	0x08011301
 8010b44:	0801130b 	.word	0x0801130b
 8010b48:	0800e449 	.word	0x0800e449
 8010b4c:	080108ff 	.word	0x080108ff
 8010b50:	08011307 	.word	0x08011307

08010b54 <__sflush_r>:
 8010b54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b5c:	0716      	lsls	r6, r2, #28
 8010b5e:	4605      	mov	r5, r0
 8010b60:	460c      	mov	r4, r1
 8010b62:	d454      	bmi.n	8010c0e <__sflush_r+0xba>
 8010b64:	684b      	ldr	r3, [r1, #4]
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	dc02      	bgt.n	8010b70 <__sflush_r+0x1c>
 8010b6a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	dd48      	ble.n	8010c02 <__sflush_r+0xae>
 8010b70:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010b72:	2e00      	cmp	r6, #0
 8010b74:	d045      	beq.n	8010c02 <__sflush_r+0xae>
 8010b76:	2300      	movs	r3, #0
 8010b78:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010b7c:	682f      	ldr	r7, [r5, #0]
 8010b7e:	6a21      	ldr	r1, [r4, #32]
 8010b80:	602b      	str	r3, [r5, #0]
 8010b82:	d030      	beq.n	8010be6 <__sflush_r+0x92>
 8010b84:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010b86:	89a3      	ldrh	r3, [r4, #12]
 8010b88:	0759      	lsls	r1, r3, #29
 8010b8a:	d505      	bpl.n	8010b98 <__sflush_r+0x44>
 8010b8c:	6863      	ldr	r3, [r4, #4]
 8010b8e:	1ad2      	subs	r2, r2, r3
 8010b90:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010b92:	b10b      	cbz	r3, 8010b98 <__sflush_r+0x44>
 8010b94:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010b96:	1ad2      	subs	r2, r2, r3
 8010b98:	2300      	movs	r3, #0
 8010b9a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010b9c:	6a21      	ldr	r1, [r4, #32]
 8010b9e:	4628      	mov	r0, r5
 8010ba0:	47b0      	blx	r6
 8010ba2:	1c43      	adds	r3, r0, #1
 8010ba4:	89a3      	ldrh	r3, [r4, #12]
 8010ba6:	d106      	bne.n	8010bb6 <__sflush_r+0x62>
 8010ba8:	6829      	ldr	r1, [r5, #0]
 8010baa:	291d      	cmp	r1, #29
 8010bac:	d82b      	bhi.n	8010c06 <__sflush_r+0xb2>
 8010bae:	4a2a      	ldr	r2, [pc, #168]	@ (8010c58 <__sflush_r+0x104>)
 8010bb0:	40ca      	lsrs	r2, r1
 8010bb2:	07d6      	lsls	r6, r2, #31
 8010bb4:	d527      	bpl.n	8010c06 <__sflush_r+0xb2>
 8010bb6:	2200      	movs	r2, #0
 8010bb8:	6062      	str	r2, [r4, #4]
 8010bba:	04d9      	lsls	r1, r3, #19
 8010bbc:	6922      	ldr	r2, [r4, #16]
 8010bbe:	6022      	str	r2, [r4, #0]
 8010bc0:	d504      	bpl.n	8010bcc <__sflush_r+0x78>
 8010bc2:	1c42      	adds	r2, r0, #1
 8010bc4:	d101      	bne.n	8010bca <__sflush_r+0x76>
 8010bc6:	682b      	ldr	r3, [r5, #0]
 8010bc8:	b903      	cbnz	r3, 8010bcc <__sflush_r+0x78>
 8010bca:	6560      	str	r0, [r4, #84]	@ 0x54
 8010bcc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010bce:	602f      	str	r7, [r5, #0]
 8010bd0:	b1b9      	cbz	r1, 8010c02 <__sflush_r+0xae>
 8010bd2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010bd6:	4299      	cmp	r1, r3
 8010bd8:	d002      	beq.n	8010be0 <__sflush_r+0x8c>
 8010bda:	4628      	mov	r0, r5
 8010bdc:	f7ff f8a6 	bl	800fd2c <_free_r>
 8010be0:	2300      	movs	r3, #0
 8010be2:	6363      	str	r3, [r4, #52]	@ 0x34
 8010be4:	e00d      	b.n	8010c02 <__sflush_r+0xae>
 8010be6:	2301      	movs	r3, #1
 8010be8:	4628      	mov	r0, r5
 8010bea:	47b0      	blx	r6
 8010bec:	4602      	mov	r2, r0
 8010bee:	1c50      	adds	r0, r2, #1
 8010bf0:	d1c9      	bne.n	8010b86 <__sflush_r+0x32>
 8010bf2:	682b      	ldr	r3, [r5, #0]
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d0c6      	beq.n	8010b86 <__sflush_r+0x32>
 8010bf8:	2b1d      	cmp	r3, #29
 8010bfa:	d001      	beq.n	8010c00 <__sflush_r+0xac>
 8010bfc:	2b16      	cmp	r3, #22
 8010bfe:	d11e      	bne.n	8010c3e <__sflush_r+0xea>
 8010c00:	602f      	str	r7, [r5, #0]
 8010c02:	2000      	movs	r0, #0
 8010c04:	e022      	b.n	8010c4c <__sflush_r+0xf8>
 8010c06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010c0a:	b21b      	sxth	r3, r3
 8010c0c:	e01b      	b.n	8010c46 <__sflush_r+0xf2>
 8010c0e:	690f      	ldr	r7, [r1, #16]
 8010c10:	2f00      	cmp	r7, #0
 8010c12:	d0f6      	beq.n	8010c02 <__sflush_r+0xae>
 8010c14:	0793      	lsls	r3, r2, #30
 8010c16:	680e      	ldr	r6, [r1, #0]
 8010c18:	bf08      	it	eq
 8010c1a:	694b      	ldreq	r3, [r1, #20]
 8010c1c:	600f      	str	r7, [r1, #0]
 8010c1e:	bf18      	it	ne
 8010c20:	2300      	movne	r3, #0
 8010c22:	eba6 0807 	sub.w	r8, r6, r7
 8010c26:	608b      	str	r3, [r1, #8]
 8010c28:	f1b8 0f00 	cmp.w	r8, #0
 8010c2c:	dde9      	ble.n	8010c02 <__sflush_r+0xae>
 8010c2e:	6a21      	ldr	r1, [r4, #32]
 8010c30:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010c32:	4643      	mov	r3, r8
 8010c34:	463a      	mov	r2, r7
 8010c36:	4628      	mov	r0, r5
 8010c38:	47b0      	blx	r6
 8010c3a:	2800      	cmp	r0, #0
 8010c3c:	dc08      	bgt.n	8010c50 <__sflush_r+0xfc>
 8010c3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010c46:	81a3      	strh	r3, [r4, #12]
 8010c48:	f04f 30ff 	mov.w	r0, #4294967295
 8010c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c50:	4407      	add	r7, r0
 8010c52:	eba8 0800 	sub.w	r8, r8, r0
 8010c56:	e7e7      	b.n	8010c28 <__sflush_r+0xd4>
 8010c58:	20400001 	.word	0x20400001

08010c5c <_fflush_r>:
 8010c5c:	b538      	push	{r3, r4, r5, lr}
 8010c5e:	690b      	ldr	r3, [r1, #16]
 8010c60:	4605      	mov	r5, r0
 8010c62:	460c      	mov	r4, r1
 8010c64:	b913      	cbnz	r3, 8010c6c <_fflush_r+0x10>
 8010c66:	2500      	movs	r5, #0
 8010c68:	4628      	mov	r0, r5
 8010c6a:	bd38      	pop	{r3, r4, r5, pc}
 8010c6c:	b118      	cbz	r0, 8010c76 <_fflush_r+0x1a>
 8010c6e:	6a03      	ldr	r3, [r0, #32]
 8010c70:	b90b      	cbnz	r3, 8010c76 <_fflush_r+0x1a>
 8010c72:	f7fe f81b 	bl	800ecac <__sinit>
 8010c76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d0f3      	beq.n	8010c66 <_fflush_r+0xa>
 8010c7e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010c80:	07d0      	lsls	r0, r2, #31
 8010c82:	d404      	bmi.n	8010c8e <_fflush_r+0x32>
 8010c84:	0599      	lsls	r1, r3, #22
 8010c86:	d402      	bmi.n	8010c8e <_fflush_r+0x32>
 8010c88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010c8a:	f7fe fa3a 	bl	800f102 <__retarget_lock_acquire_recursive>
 8010c8e:	4628      	mov	r0, r5
 8010c90:	4621      	mov	r1, r4
 8010c92:	f7ff ff5f 	bl	8010b54 <__sflush_r>
 8010c96:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010c98:	07da      	lsls	r2, r3, #31
 8010c9a:	4605      	mov	r5, r0
 8010c9c:	d4e4      	bmi.n	8010c68 <_fflush_r+0xc>
 8010c9e:	89a3      	ldrh	r3, [r4, #12]
 8010ca0:	059b      	lsls	r3, r3, #22
 8010ca2:	d4e1      	bmi.n	8010c68 <_fflush_r+0xc>
 8010ca4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010ca6:	f7fe fa2d 	bl	800f104 <__retarget_lock_release_recursive>
 8010caa:	e7dd      	b.n	8010c68 <_fflush_r+0xc>

08010cac <fiprintf>:
 8010cac:	b40e      	push	{r1, r2, r3}
 8010cae:	b503      	push	{r0, r1, lr}
 8010cb0:	4601      	mov	r1, r0
 8010cb2:	ab03      	add	r3, sp, #12
 8010cb4:	4805      	ldr	r0, [pc, #20]	@ (8010ccc <fiprintf+0x20>)
 8010cb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8010cba:	6800      	ldr	r0, [r0, #0]
 8010cbc:	9301      	str	r3, [sp, #4]
 8010cbe:	f7ff fe31 	bl	8010924 <_vfiprintf_r>
 8010cc2:	b002      	add	sp, #8
 8010cc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8010cc8:	b003      	add	sp, #12
 8010cca:	4770      	bx	lr
 8010ccc:	24000038 	.word	0x24000038

08010cd0 <__swhatbuf_r>:
 8010cd0:	b570      	push	{r4, r5, r6, lr}
 8010cd2:	460c      	mov	r4, r1
 8010cd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010cd8:	2900      	cmp	r1, #0
 8010cda:	b096      	sub	sp, #88	@ 0x58
 8010cdc:	4615      	mov	r5, r2
 8010cde:	461e      	mov	r6, r3
 8010ce0:	da0d      	bge.n	8010cfe <__swhatbuf_r+0x2e>
 8010ce2:	89a3      	ldrh	r3, [r4, #12]
 8010ce4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010ce8:	f04f 0100 	mov.w	r1, #0
 8010cec:	bf14      	ite	ne
 8010cee:	2340      	movne	r3, #64	@ 0x40
 8010cf0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010cf4:	2000      	movs	r0, #0
 8010cf6:	6031      	str	r1, [r6, #0]
 8010cf8:	602b      	str	r3, [r5, #0]
 8010cfa:	b016      	add	sp, #88	@ 0x58
 8010cfc:	bd70      	pop	{r4, r5, r6, pc}
 8010cfe:	466a      	mov	r2, sp
 8010d00:	f000 f862 	bl	8010dc8 <_fstat_r>
 8010d04:	2800      	cmp	r0, #0
 8010d06:	dbec      	blt.n	8010ce2 <__swhatbuf_r+0x12>
 8010d08:	9901      	ldr	r1, [sp, #4]
 8010d0a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010d0e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010d12:	4259      	negs	r1, r3
 8010d14:	4159      	adcs	r1, r3
 8010d16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010d1a:	e7eb      	b.n	8010cf4 <__swhatbuf_r+0x24>

08010d1c <__smakebuf_r>:
 8010d1c:	898b      	ldrh	r3, [r1, #12]
 8010d1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010d20:	079d      	lsls	r5, r3, #30
 8010d22:	4606      	mov	r6, r0
 8010d24:	460c      	mov	r4, r1
 8010d26:	d507      	bpl.n	8010d38 <__smakebuf_r+0x1c>
 8010d28:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010d2c:	6023      	str	r3, [r4, #0]
 8010d2e:	6123      	str	r3, [r4, #16]
 8010d30:	2301      	movs	r3, #1
 8010d32:	6163      	str	r3, [r4, #20]
 8010d34:	b003      	add	sp, #12
 8010d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d38:	ab01      	add	r3, sp, #4
 8010d3a:	466a      	mov	r2, sp
 8010d3c:	f7ff ffc8 	bl	8010cd0 <__swhatbuf_r>
 8010d40:	9f00      	ldr	r7, [sp, #0]
 8010d42:	4605      	mov	r5, r0
 8010d44:	4639      	mov	r1, r7
 8010d46:	4630      	mov	r0, r6
 8010d48:	f7ff f864 	bl	800fe14 <_malloc_r>
 8010d4c:	b948      	cbnz	r0, 8010d62 <__smakebuf_r+0x46>
 8010d4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010d52:	059a      	lsls	r2, r3, #22
 8010d54:	d4ee      	bmi.n	8010d34 <__smakebuf_r+0x18>
 8010d56:	f023 0303 	bic.w	r3, r3, #3
 8010d5a:	f043 0302 	orr.w	r3, r3, #2
 8010d5e:	81a3      	strh	r3, [r4, #12]
 8010d60:	e7e2      	b.n	8010d28 <__smakebuf_r+0xc>
 8010d62:	89a3      	ldrh	r3, [r4, #12]
 8010d64:	6020      	str	r0, [r4, #0]
 8010d66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010d6a:	81a3      	strh	r3, [r4, #12]
 8010d6c:	9b01      	ldr	r3, [sp, #4]
 8010d6e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010d72:	b15b      	cbz	r3, 8010d8c <__smakebuf_r+0x70>
 8010d74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010d78:	4630      	mov	r0, r6
 8010d7a:	f000 f837 	bl	8010dec <_isatty_r>
 8010d7e:	b128      	cbz	r0, 8010d8c <__smakebuf_r+0x70>
 8010d80:	89a3      	ldrh	r3, [r4, #12]
 8010d82:	f023 0303 	bic.w	r3, r3, #3
 8010d86:	f043 0301 	orr.w	r3, r3, #1
 8010d8a:	81a3      	strh	r3, [r4, #12]
 8010d8c:	89a3      	ldrh	r3, [r4, #12]
 8010d8e:	431d      	orrs	r5, r3
 8010d90:	81a5      	strh	r5, [r4, #12]
 8010d92:	e7cf      	b.n	8010d34 <__smakebuf_r+0x18>

08010d94 <memmove>:
 8010d94:	4288      	cmp	r0, r1
 8010d96:	b510      	push	{r4, lr}
 8010d98:	eb01 0402 	add.w	r4, r1, r2
 8010d9c:	d902      	bls.n	8010da4 <memmove+0x10>
 8010d9e:	4284      	cmp	r4, r0
 8010da0:	4623      	mov	r3, r4
 8010da2:	d807      	bhi.n	8010db4 <memmove+0x20>
 8010da4:	1e43      	subs	r3, r0, #1
 8010da6:	42a1      	cmp	r1, r4
 8010da8:	d008      	beq.n	8010dbc <memmove+0x28>
 8010daa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010dae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010db2:	e7f8      	b.n	8010da6 <memmove+0x12>
 8010db4:	4402      	add	r2, r0
 8010db6:	4601      	mov	r1, r0
 8010db8:	428a      	cmp	r2, r1
 8010dba:	d100      	bne.n	8010dbe <memmove+0x2a>
 8010dbc:	bd10      	pop	{r4, pc}
 8010dbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010dc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010dc6:	e7f7      	b.n	8010db8 <memmove+0x24>

08010dc8 <_fstat_r>:
 8010dc8:	b538      	push	{r3, r4, r5, lr}
 8010dca:	4d07      	ldr	r5, [pc, #28]	@ (8010de8 <_fstat_r+0x20>)
 8010dcc:	2300      	movs	r3, #0
 8010dce:	4604      	mov	r4, r0
 8010dd0:	4608      	mov	r0, r1
 8010dd2:	4611      	mov	r1, r2
 8010dd4:	602b      	str	r3, [r5, #0]
 8010dd6:	f7f0 fecf 	bl	8001b78 <_fstat>
 8010dda:	1c43      	adds	r3, r0, #1
 8010ddc:	d102      	bne.n	8010de4 <_fstat_r+0x1c>
 8010dde:	682b      	ldr	r3, [r5, #0]
 8010de0:	b103      	cbz	r3, 8010de4 <_fstat_r+0x1c>
 8010de2:	6023      	str	r3, [r4, #0]
 8010de4:	bd38      	pop	{r3, r4, r5, pc}
 8010de6:	bf00      	nop
 8010de8:	240007f0 	.word	0x240007f0

08010dec <_isatty_r>:
 8010dec:	b538      	push	{r3, r4, r5, lr}
 8010dee:	4d06      	ldr	r5, [pc, #24]	@ (8010e08 <_isatty_r+0x1c>)
 8010df0:	2300      	movs	r3, #0
 8010df2:	4604      	mov	r4, r0
 8010df4:	4608      	mov	r0, r1
 8010df6:	602b      	str	r3, [r5, #0]
 8010df8:	f7f0 fece 	bl	8001b98 <_isatty>
 8010dfc:	1c43      	adds	r3, r0, #1
 8010dfe:	d102      	bne.n	8010e06 <_isatty_r+0x1a>
 8010e00:	682b      	ldr	r3, [r5, #0]
 8010e02:	b103      	cbz	r3, 8010e06 <_isatty_r+0x1a>
 8010e04:	6023      	str	r3, [r4, #0]
 8010e06:	bd38      	pop	{r3, r4, r5, pc}
 8010e08:	240007f0 	.word	0x240007f0

08010e0c <_sbrk_r>:
 8010e0c:	b538      	push	{r3, r4, r5, lr}
 8010e0e:	4d06      	ldr	r5, [pc, #24]	@ (8010e28 <_sbrk_r+0x1c>)
 8010e10:	2300      	movs	r3, #0
 8010e12:	4604      	mov	r4, r0
 8010e14:	4608      	mov	r0, r1
 8010e16:	602b      	str	r3, [r5, #0]
 8010e18:	f7f0 fed6 	bl	8001bc8 <_sbrk>
 8010e1c:	1c43      	adds	r3, r0, #1
 8010e1e:	d102      	bne.n	8010e26 <_sbrk_r+0x1a>
 8010e20:	682b      	ldr	r3, [r5, #0]
 8010e22:	b103      	cbz	r3, 8010e26 <_sbrk_r+0x1a>
 8010e24:	6023      	str	r3, [r4, #0]
 8010e26:	bd38      	pop	{r3, r4, r5, pc}
 8010e28:	240007f0 	.word	0x240007f0

08010e2c <abort>:
 8010e2c:	b508      	push	{r3, lr}
 8010e2e:	2006      	movs	r0, #6
 8010e30:	f000 f88c 	bl	8010f4c <raise>
 8010e34:	2001      	movs	r0, #1
 8010e36:	f7f0 fe4f 	bl	8001ad8 <_exit>

08010e3a <_calloc_r>:
 8010e3a:	b570      	push	{r4, r5, r6, lr}
 8010e3c:	fba1 5402 	umull	r5, r4, r1, r2
 8010e40:	b934      	cbnz	r4, 8010e50 <_calloc_r+0x16>
 8010e42:	4629      	mov	r1, r5
 8010e44:	f7fe ffe6 	bl	800fe14 <_malloc_r>
 8010e48:	4606      	mov	r6, r0
 8010e4a:	b928      	cbnz	r0, 8010e58 <_calloc_r+0x1e>
 8010e4c:	4630      	mov	r0, r6
 8010e4e:	bd70      	pop	{r4, r5, r6, pc}
 8010e50:	220c      	movs	r2, #12
 8010e52:	6002      	str	r2, [r0, #0]
 8010e54:	2600      	movs	r6, #0
 8010e56:	e7f9      	b.n	8010e4c <_calloc_r+0x12>
 8010e58:	462a      	mov	r2, r5
 8010e5a:	4621      	mov	r1, r4
 8010e5c:	f7fe f868 	bl	800ef30 <memset>
 8010e60:	e7f4      	b.n	8010e4c <_calloc_r+0x12>

08010e62 <__ascii_mbtowc>:
 8010e62:	b082      	sub	sp, #8
 8010e64:	b901      	cbnz	r1, 8010e68 <__ascii_mbtowc+0x6>
 8010e66:	a901      	add	r1, sp, #4
 8010e68:	b142      	cbz	r2, 8010e7c <__ascii_mbtowc+0x1a>
 8010e6a:	b14b      	cbz	r3, 8010e80 <__ascii_mbtowc+0x1e>
 8010e6c:	7813      	ldrb	r3, [r2, #0]
 8010e6e:	600b      	str	r3, [r1, #0]
 8010e70:	7812      	ldrb	r2, [r2, #0]
 8010e72:	1e10      	subs	r0, r2, #0
 8010e74:	bf18      	it	ne
 8010e76:	2001      	movne	r0, #1
 8010e78:	b002      	add	sp, #8
 8010e7a:	4770      	bx	lr
 8010e7c:	4610      	mov	r0, r2
 8010e7e:	e7fb      	b.n	8010e78 <__ascii_mbtowc+0x16>
 8010e80:	f06f 0001 	mvn.w	r0, #1
 8010e84:	e7f8      	b.n	8010e78 <__ascii_mbtowc+0x16>

08010e86 <_realloc_r>:
 8010e86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e8a:	4607      	mov	r7, r0
 8010e8c:	4614      	mov	r4, r2
 8010e8e:	460d      	mov	r5, r1
 8010e90:	b921      	cbnz	r1, 8010e9c <_realloc_r+0x16>
 8010e92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010e96:	4611      	mov	r1, r2
 8010e98:	f7fe bfbc 	b.w	800fe14 <_malloc_r>
 8010e9c:	b92a      	cbnz	r2, 8010eaa <_realloc_r+0x24>
 8010e9e:	f7fe ff45 	bl	800fd2c <_free_r>
 8010ea2:	4625      	mov	r5, r4
 8010ea4:	4628      	mov	r0, r5
 8010ea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010eaa:	f000 f86b 	bl	8010f84 <_malloc_usable_size_r>
 8010eae:	4284      	cmp	r4, r0
 8010eb0:	4606      	mov	r6, r0
 8010eb2:	d802      	bhi.n	8010eba <_realloc_r+0x34>
 8010eb4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010eb8:	d8f4      	bhi.n	8010ea4 <_realloc_r+0x1e>
 8010eba:	4621      	mov	r1, r4
 8010ebc:	4638      	mov	r0, r7
 8010ebe:	f7fe ffa9 	bl	800fe14 <_malloc_r>
 8010ec2:	4680      	mov	r8, r0
 8010ec4:	b908      	cbnz	r0, 8010eca <_realloc_r+0x44>
 8010ec6:	4645      	mov	r5, r8
 8010ec8:	e7ec      	b.n	8010ea4 <_realloc_r+0x1e>
 8010eca:	42b4      	cmp	r4, r6
 8010ecc:	4622      	mov	r2, r4
 8010ece:	4629      	mov	r1, r5
 8010ed0:	bf28      	it	cs
 8010ed2:	4632      	movcs	r2, r6
 8010ed4:	f7fe f917 	bl	800f106 <memcpy>
 8010ed8:	4629      	mov	r1, r5
 8010eda:	4638      	mov	r0, r7
 8010edc:	f7fe ff26 	bl	800fd2c <_free_r>
 8010ee0:	e7f1      	b.n	8010ec6 <_realloc_r+0x40>

08010ee2 <__ascii_wctomb>:
 8010ee2:	4603      	mov	r3, r0
 8010ee4:	4608      	mov	r0, r1
 8010ee6:	b141      	cbz	r1, 8010efa <__ascii_wctomb+0x18>
 8010ee8:	2aff      	cmp	r2, #255	@ 0xff
 8010eea:	d904      	bls.n	8010ef6 <__ascii_wctomb+0x14>
 8010eec:	228a      	movs	r2, #138	@ 0x8a
 8010eee:	601a      	str	r2, [r3, #0]
 8010ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8010ef4:	4770      	bx	lr
 8010ef6:	700a      	strb	r2, [r1, #0]
 8010ef8:	2001      	movs	r0, #1
 8010efa:	4770      	bx	lr

08010efc <_raise_r>:
 8010efc:	291f      	cmp	r1, #31
 8010efe:	b538      	push	{r3, r4, r5, lr}
 8010f00:	4605      	mov	r5, r0
 8010f02:	460c      	mov	r4, r1
 8010f04:	d904      	bls.n	8010f10 <_raise_r+0x14>
 8010f06:	2316      	movs	r3, #22
 8010f08:	6003      	str	r3, [r0, #0]
 8010f0a:	f04f 30ff 	mov.w	r0, #4294967295
 8010f0e:	bd38      	pop	{r3, r4, r5, pc}
 8010f10:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010f12:	b112      	cbz	r2, 8010f1a <_raise_r+0x1e>
 8010f14:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010f18:	b94b      	cbnz	r3, 8010f2e <_raise_r+0x32>
 8010f1a:	4628      	mov	r0, r5
 8010f1c:	f000 f830 	bl	8010f80 <_getpid_r>
 8010f20:	4622      	mov	r2, r4
 8010f22:	4601      	mov	r1, r0
 8010f24:	4628      	mov	r0, r5
 8010f26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010f2a:	f000 b817 	b.w	8010f5c <_kill_r>
 8010f2e:	2b01      	cmp	r3, #1
 8010f30:	d00a      	beq.n	8010f48 <_raise_r+0x4c>
 8010f32:	1c59      	adds	r1, r3, #1
 8010f34:	d103      	bne.n	8010f3e <_raise_r+0x42>
 8010f36:	2316      	movs	r3, #22
 8010f38:	6003      	str	r3, [r0, #0]
 8010f3a:	2001      	movs	r0, #1
 8010f3c:	e7e7      	b.n	8010f0e <_raise_r+0x12>
 8010f3e:	2100      	movs	r1, #0
 8010f40:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010f44:	4620      	mov	r0, r4
 8010f46:	4798      	blx	r3
 8010f48:	2000      	movs	r0, #0
 8010f4a:	e7e0      	b.n	8010f0e <_raise_r+0x12>

08010f4c <raise>:
 8010f4c:	4b02      	ldr	r3, [pc, #8]	@ (8010f58 <raise+0xc>)
 8010f4e:	4601      	mov	r1, r0
 8010f50:	6818      	ldr	r0, [r3, #0]
 8010f52:	f7ff bfd3 	b.w	8010efc <_raise_r>
 8010f56:	bf00      	nop
 8010f58:	24000038 	.word	0x24000038

08010f5c <_kill_r>:
 8010f5c:	b538      	push	{r3, r4, r5, lr}
 8010f5e:	4d07      	ldr	r5, [pc, #28]	@ (8010f7c <_kill_r+0x20>)
 8010f60:	2300      	movs	r3, #0
 8010f62:	4604      	mov	r4, r0
 8010f64:	4608      	mov	r0, r1
 8010f66:	4611      	mov	r1, r2
 8010f68:	602b      	str	r3, [r5, #0]
 8010f6a:	f7f0 fda5 	bl	8001ab8 <_kill>
 8010f6e:	1c43      	adds	r3, r0, #1
 8010f70:	d102      	bne.n	8010f78 <_kill_r+0x1c>
 8010f72:	682b      	ldr	r3, [r5, #0]
 8010f74:	b103      	cbz	r3, 8010f78 <_kill_r+0x1c>
 8010f76:	6023      	str	r3, [r4, #0]
 8010f78:	bd38      	pop	{r3, r4, r5, pc}
 8010f7a:	bf00      	nop
 8010f7c:	240007f0 	.word	0x240007f0

08010f80 <_getpid_r>:
 8010f80:	f7f0 bd92 	b.w	8001aa8 <_getpid>

08010f84 <_malloc_usable_size_r>:
 8010f84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010f88:	1f18      	subs	r0, r3, #4
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	bfbc      	itt	lt
 8010f8e:	580b      	ldrlt	r3, [r1, r0]
 8010f90:	18c0      	addlt	r0, r0, r3
 8010f92:	4770      	bx	lr

08010f94 <_init>:
 8010f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f96:	bf00      	nop
 8010f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010f9a:	bc08      	pop	{r3}
 8010f9c:	469e      	mov	lr, r3
 8010f9e:	4770      	bx	lr

08010fa0 <_fini>:
 8010fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010fa2:	bf00      	nop
 8010fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010fa6:	bc08      	pop	{r3}
 8010fa8:	469e      	mov	lr, r3
 8010faa:	4770      	bx	lr


CART1_DM_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010340  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000268  080105e0  080105e0  000115e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010848  08010848  00012088  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08010848  08010848  00011848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010850  08010850  00012088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010850  08010850  00011850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010854  08010854  00011854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  24000000  08010858  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000618  24000088  080108e0  00012088  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  240006a0  080108e0  000126a0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00012088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002213b  00000000  00000000  000120b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004009  00000000  00000000  000341f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a00  00000000  00000000  00038200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000142b  00000000  00000000  00039c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000402d3  00000000  00000000  0003b02b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023e1d  00000000  00000000  0007b2fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a43d7  00000000  00000000  0009f11b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  002434f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000079fc  00000000  00000000  00243538  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  0024af34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000088 	.word	0x24000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080105c8 	.word	0x080105c8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400008c 	.word	0x2400008c
 80002dc:	080105c8 	.word	0x080105c8

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b988 	b.w	80006d8 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	468e      	mov	lr, r1
 80003e8:	4604      	mov	r4, r0
 80003ea:	4688      	mov	r8, r1
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d14a      	bne.n	8000486 <__udivmoddi4+0xa6>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4617      	mov	r7, r2
 80003f4:	d962      	bls.n	80004bc <__udivmoddi4+0xdc>
 80003f6:	fab2 f682 	clz	r6, r2
 80003fa:	b14e      	cbz	r6, 8000410 <__udivmoddi4+0x30>
 80003fc:	f1c6 0320 	rsb	r3, r6, #32
 8000400:	fa01 f806 	lsl.w	r8, r1, r6
 8000404:	fa20 f303 	lsr.w	r3, r0, r3
 8000408:	40b7      	lsls	r7, r6
 800040a:	ea43 0808 	orr.w	r8, r3, r8
 800040e:	40b4      	lsls	r4, r6
 8000410:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000414:	fa1f fc87 	uxth.w	ip, r7
 8000418:	fbb8 f1fe 	udiv	r1, r8, lr
 800041c:	0c23      	lsrs	r3, r4, #16
 800041e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fb01 f20c 	mul.w	r2, r1, ip
 800042a:	429a      	cmp	r2, r3
 800042c:	d909      	bls.n	8000442 <__udivmoddi4+0x62>
 800042e:	18fb      	adds	r3, r7, r3
 8000430:	f101 30ff 	add.w	r0, r1, #4294967295
 8000434:	f080 80ea 	bcs.w	800060c <__udivmoddi4+0x22c>
 8000438:	429a      	cmp	r2, r3
 800043a:	f240 80e7 	bls.w	800060c <__udivmoddi4+0x22c>
 800043e:	3902      	subs	r1, #2
 8000440:	443b      	add	r3, r7
 8000442:	1a9a      	subs	r2, r3, r2
 8000444:	b2a3      	uxth	r3, r4
 8000446:	fbb2 f0fe 	udiv	r0, r2, lr
 800044a:	fb0e 2210 	mls	r2, lr, r0, r2
 800044e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000452:	fb00 fc0c 	mul.w	ip, r0, ip
 8000456:	459c      	cmp	ip, r3
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0x8e>
 800045a:	18fb      	adds	r3, r7, r3
 800045c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000460:	f080 80d6 	bcs.w	8000610 <__udivmoddi4+0x230>
 8000464:	459c      	cmp	ip, r3
 8000466:	f240 80d3 	bls.w	8000610 <__udivmoddi4+0x230>
 800046a:	443b      	add	r3, r7
 800046c:	3802      	subs	r0, #2
 800046e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000472:	eba3 030c 	sub.w	r3, r3, ip
 8000476:	2100      	movs	r1, #0
 8000478:	b11d      	cbz	r5, 8000482 <__udivmoddi4+0xa2>
 800047a:	40f3      	lsrs	r3, r6
 800047c:	2200      	movs	r2, #0
 800047e:	e9c5 3200 	strd	r3, r2, [r5]
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	428b      	cmp	r3, r1
 8000488:	d905      	bls.n	8000496 <__udivmoddi4+0xb6>
 800048a:	b10d      	cbz	r5, 8000490 <__udivmoddi4+0xb0>
 800048c:	e9c5 0100 	strd	r0, r1, [r5]
 8000490:	2100      	movs	r1, #0
 8000492:	4608      	mov	r0, r1
 8000494:	e7f5      	b.n	8000482 <__udivmoddi4+0xa2>
 8000496:	fab3 f183 	clz	r1, r3
 800049a:	2900      	cmp	r1, #0
 800049c:	d146      	bne.n	800052c <__udivmoddi4+0x14c>
 800049e:	4573      	cmp	r3, lr
 80004a0:	d302      	bcc.n	80004a8 <__udivmoddi4+0xc8>
 80004a2:	4282      	cmp	r2, r0
 80004a4:	f200 8105 	bhi.w	80006b2 <__udivmoddi4+0x2d2>
 80004a8:	1a84      	subs	r4, r0, r2
 80004aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80004ae:	2001      	movs	r0, #1
 80004b0:	4690      	mov	r8, r2
 80004b2:	2d00      	cmp	r5, #0
 80004b4:	d0e5      	beq.n	8000482 <__udivmoddi4+0xa2>
 80004b6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ba:	e7e2      	b.n	8000482 <__udivmoddi4+0xa2>
 80004bc:	2a00      	cmp	r2, #0
 80004be:	f000 8090 	beq.w	80005e2 <__udivmoddi4+0x202>
 80004c2:	fab2 f682 	clz	r6, r2
 80004c6:	2e00      	cmp	r6, #0
 80004c8:	f040 80a4 	bne.w	8000614 <__udivmoddi4+0x234>
 80004cc:	1a8a      	subs	r2, r1, r2
 80004ce:	0c03      	lsrs	r3, r0, #16
 80004d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004d4:	b280      	uxth	r0, r0
 80004d6:	b2bc      	uxth	r4, r7
 80004d8:	2101      	movs	r1, #1
 80004da:	fbb2 fcfe 	udiv	ip, r2, lr
 80004de:	fb0e 221c 	mls	r2, lr, ip, r2
 80004e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004e6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ea:	429a      	cmp	r2, r3
 80004ec:	d907      	bls.n	80004fe <__udivmoddi4+0x11e>
 80004ee:	18fb      	adds	r3, r7, r3
 80004f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004f4:	d202      	bcs.n	80004fc <__udivmoddi4+0x11c>
 80004f6:	429a      	cmp	r2, r3
 80004f8:	f200 80e0 	bhi.w	80006bc <__udivmoddi4+0x2dc>
 80004fc:	46c4      	mov	ip, r8
 80004fe:	1a9b      	subs	r3, r3, r2
 8000500:	fbb3 f2fe 	udiv	r2, r3, lr
 8000504:	fb0e 3312 	mls	r3, lr, r2, r3
 8000508:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800050c:	fb02 f404 	mul.w	r4, r2, r4
 8000510:	429c      	cmp	r4, r3
 8000512:	d907      	bls.n	8000524 <__udivmoddi4+0x144>
 8000514:	18fb      	adds	r3, r7, r3
 8000516:	f102 30ff 	add.w	r0, r2, #4294967295
 800051a:	d202      	bcs.n	8000522 <__udivmoddi4+0x142>
 800051c:	429c      	cmp	r4, r3
 800051e:	f200 80ca 	bhi.w	80006b6 <__udivmoddi4+0x2d6>
 8000522:	4602      	mov	r2, r0
 8000524:	1b1b      	subs	r3, r3, r4
 8000526:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800052a:	e7a5      	b.n	8000478 <__udivmoddi4+0x98>
 800052c:	f1c1 0620 	rsb	r6, r1, #32
 8000530:	408b      	lsls	r3, r1
 8000532:	fa22 f706 	lsr.w	r7, r2, r6
 8000536:	431f      	orrs	r7, r3
 8000538:	fa0e f401 	lsl.w	r4, lr, r1
 800053c:	fa20 f306 	lsr.w	r3, r0, r6
 8000540:	fa2e fe06 	lsr.w	lr, lr, r6
 8000544:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000548:	4323      	orrs	r3, r4
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	fa1f fc87 	uxth.w	ip, r7
 8000552:	fbbe f0f9 	udiv	r0, lr, r9
 8000556:	0c1c      	lsrs	r4, r3, #16
 8000558:	fb09 ee10 	mls	lr, r9, r0, lr
 800055c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000560:	fb00 fe0c 	mul.w	lr, r0, ip
 8000564:	45a6      	cmp	lr, r4
 8000566:	fa02 f201 	lsl.w	r2, r2, r1
 800056a:	d909      	bls.n	8000580 <__udivmoddi4+0x1a0>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000572:	f080 809c 	bcs.w	80006ae <__udivmoddi4+0x2ce>
 8000576:	45a6      	cmp	lr, r4
 8000578:	f240 8099 	bls.w	80006ae <__udivmoddi4+0x2ce>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	eba4 040e 	sub.w	r4, r4, lr
 8000584:	fa1f fe83 	uxth.w	lr, r3
 8000588:	fbb4 f3f9 	udiv	r3, r4, r9
 800058c:	fb09 4413 	mls	r4, r9, r3, r4
 8000590:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000594:	fb03 fc0c 	mul.w	ip, r3, ip
 8000598:	45a4      	cmp	ip, r4
 800059a:	d908      	bls.n	80005ae <__udivmoddi4+0x1ce>
 800059c:	193c      	adds	r4, r7, r4
 800059e:	f103 3eff 	add.w	lr, r3, #4294967295
 80005a2:	f080 8082 	bcs.w	80006aa <__udivmoddi4+0x2ca>
 80005a6:	45a4      	cmp	ip, r4
 80005a8:	d97f      	bls.n	80006aa <__udivmoddi4+0x2ca>
 80005aa:	3b02      	subs	r3, #2
 80005ac:	443c      	add	r4, r7
 80005ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005b2:	eba4 040c 	sub.w	r4, r4, ip
 80005b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ba:	4564      	cmp	r4, ip
 80005bc:	4673      	mov	r3, lr
 80005be:	46e1      	mov	r9, ip
 80005c0:	d362      	bcc.n	8000688 <__udivmoddi4+0x2a8>
 80005c2:	d05f      	beq.n	8000684 <__udivmoddi4+0x2a4>
 80005c4:	b15d      	cbz	r5, 80005de <__udivmoddi4+0x1fe>
 80005c6:	ebb8 0203 	subs.w	r2, r8, r3
 80005ca:	eb64 0409 	sbc.w	r4, r4, r9
 80005ce:	fa04 f606 	lsl.w	r6, r4, r6
 80005d2:	fa22 f301 	lsr.w	r3, r2, r1
 80005d6:	431e      	orrs	r6, r3
 80005d8:	40cc      	lsrs	r4, r1
 80005da:	e9c5 6400 	strd	r6, r4, [r5]
 80005de:	2100      	movs	r1, #0
 80005e0:	e74f      	b.n	8000482 <__udivmoddi4+0xa2>
 80005e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005e6:	0c01      	lsrs	r1, r0, #16
 80005e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005ec:	b280      	uxth	r0, r0
 80005ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005f2:	463b      	mov	r3, r7
 80005f4:	4638      	mov	r0, r7
 80005f6:	463c      	mov	r4, r7
 80005f8:	46b8      	mov	r8, r7
 80005fa:	46be      	mov	lr, r7
 80005fc:	2620      	movs	r6, #32
 80005fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000602:	eba2 0208 	sub.w	r2, r2, r8
 8000606:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800060a:	e766      	b.n	80004da <__udivmoddi4+0xfa>
 800060c:	4601      	mov	r1, r0
 800060e:	e718      	b.n	8000442 <__udivmoddi4+0x62>
 8000610:	4610      	mov	r0, r2
 8000612:	e72c      	b.n	800046e <__udivmoddi4+0x8e>
 8000614:	f1c6 0220 	rsb	r2, r6, #32
 8000618:	fa2e f302 	lsr.w	r3, lr, r2
 800061c:	40b7      	lsls	r7, r6
 800061e:	40b1      	lsls	r1, r6
 8000620:	fa20 f202 	lsr.w	r2, r0, r2
 8000624:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000628:	430a      	orrs	r2, r1
 800062a:	fbb3 f8fe 	udiv	r8, r3, lr
 800062e:	b2bc      	uxth	r4, r7
 8000630:	fb0e 3318 	mls	r3, lr, r8, r3
 8000634:	0c11      	lsrs	r1, r2, #16
 8000636:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800063a:	fb08 f904 	mul.w	r9, r8, r4
 800063e:	40b0      	lsls	r0, r6
 8000640:	4589      	cmp	r9, r1
 8000642:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000646:	b280      	uxth	r0, r0
 8000648:	d93e      	bls.n	80006c8 <__udivmoddi4+0x2e8>
 800064a:	1879      	adds	r1, r7, r1
 800064c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000650:	d201      	bcs.n	8000656 <__udivmoddi4+0x276>
 8000652:	4589      	cmp	r9, r1
 8000654:	d81f      	bhi.n	8000696 <__udivmoddi4+0x2b6>
 8000656:	eba1 0109 	sub.w	r1, r1, r9
 800065a:	fbb1 f9fe 	udiv	r9, r1, lr
 800065e:	fb09 f804 	mul.w	r8, r9, r4
 8000662:	fb0e 1119 	mls	r1, lr, r9, r1
 8000666:	b292      	uxth	r2, r2
 8000668:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800066c:	4542      	cmp	r2, r8
 800066e:	d229      	bcs.n	80006c4 <__udivmoddi4+0x2e4>
 8000670:	18ba      	adds	r2, r7, r2
 8000672:	f109 31ff 	add.w	r1, r9, #4294967295
 8000676:	d2c4      	bcs.n	8000602 <__udivmoddi4+0x222>
 8000678:	4542      	cmp	r2, r8
 800067a:	d2c2      	bcs.n	8000602 <__udivmoddi4+0x222>
 800067c:	f1a9 0102 	sub.w	r1, r9, #2
 8000680:	443a      	add	r2, r7
 8000682:	e7be      	b.n	8000602 <__udivmoddi4+0x222>
 8000684:	45f0      	cmp	r8, lr
 8000686:	d29d      	bcs.n	80005c4 <__udivmoddi4+0x1e4>
 8000688:	ebbe 0302 	subs.w	r3, lr, r2
 800068c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000690:	3801      	subs	r0, #1
 8000692:	46e1      	mov	r9, ip
 8000694:	e796      	b.n	80005c4 <__udivmoddi4+0x1e4>
 8000696:	eba7 0909 	sub.w	r9, r7, r9
 800069a:	4449      	add	r1, r9
 800069c:	f1a8 0c02 	sub.w	ip, r8, #2
 80006a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a4:	fb09 f804 	mul.w	r8, r9, r4
 80006a8:	e7db      	b.n	8000662 <__udivmoddi4+0x282>
 80006aa:	4673      	mov	r3, lr
 80006ac:	e77f      	b.n	80005ae <__udivmoddi4+0x1ce>
 80006ae:	4650      	mov	r0, sl
 80006b0:	e766      	b.n	8000580 <__udivmoddi4+0x1a0>
 80006b2:	4608      	mov	r0, r1
 80006b4:	e6fd      	b.n	80004b2 <__udivmoddi4+0xd2>
 80006b6:	443b      	add	r3, r7
 80006b8:	3a02      	subs	r2, #2
 80006ba:	e733      	b.n	8000524 <__udivmoddi4+0x144>
 80006bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80006c0:	443b      	add	r3, r7
 80006c2:	e71c      	b.n	80004fe <__udivmoddi4+0x11e>
 80006c4:	4649      	mov	r1, r9
 80006c6:	e79c      	b.n	8000602 <__udivmoddi4+0x222>
 80006c8:	eba1 0109 	sub.w	r1, r1, r9
 80006cc:	46c4      	mov	ip, r8
 80006ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80006d2:	fb09 f804 	mul.w	r8, r9, r4
 80006d6:	e7c4      	b.n	8000662 <__udivmoddi4+0x282>

080006d8 <__aeabi_idiv0>:
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop

080006dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006e0:	4b49      	ldr	r3, [pc, #292]	@ (8000808 <SystemInit+0x12c>)
 80006e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006e6:	4a48      	ldr	r2, [pc, #288]	@ (8000808 <SystemInit+0x12c>)
 80006e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006f0:	4b45      	ldr	r3, [pc, #276]	@ (8000808 <SystemInit+0x12c>)
 80006f2:	691b      	ldr	r3, [r3, #16]
 80006f4:	4a44      	ldr	r2, [pc, #272]	@ (8000808 <SystemInit+0x12c>)
 80006f6:	f043 0310 	orr.w	r3, r3, #16
 80006fa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006fc:	4b43      	ldr	r3, [pc, #268]	@ (800080c <SystemInit+0x130>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f003 030f 	and.w	r3, r3, #15
 8000704:	2b06      	cmp	r3, #6
 8000706:	d807      	bhi.n	8000718 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000708:	4b40      	ldr	r3, [pc, #256]	@ (800080c <SystemInit+0x130>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f023 030f 	bic.w	r3, r3, #15
 8000710:	4a3e      	ldr	r2, [pc, #248]	@ (800080c <SystemInit+0x130>)
 8000712:	f043 0307 	orr.w	r3, r3, #7
 8000716:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000718:	4b3d      	ldr	r3, [pc, #244]	@ (8000810 <SystemInit+0x134>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a3c      	ldr	r2, [pc, #240]	@ (8000810 <SystemInit+0x134>)
 800071e:	f043 0301 	orr.w	r3, r3, #1
 8000722:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000724:	4b3a      	ldr	r3, [pc, #232]	@ (8000810 <SystemInit+0x134>)
 8000726:	2200      	movs	r2, #0
 8000728:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800072a:	4b39      	ldr	r3, [pc, #228]	@ (8000810 <SystemInit+0x134>)
 800072c:	681a      	ldr	r2, [r3, #0]
 800072e:	4938      	ldr	r1, [pc, #224]	@ (8000810 <SystemInit+0x134>)
 8000730:	4b38      	ldr	r3, [pc, #224]	@ (8000814 <SystemInit+0x138>)
 8000732:	4013      	ands	r3, r2
 8000734:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000736:	4b35      	ldr	r3, [pc, #212]	@ (800080c <SystemInit+0x130>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	f003 0308 	and.w	r3, r3, #8
 800073e:	2b00      	cmp	r3, #0
 8000740:	d007      	beq.n	8000752 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000742:	4b32      	ldr	r3, [pc, #200]	@ (800080c <SystemInit+0x130>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f023 030f 	bic.w	r3, r3, #15
 800074a:	4a30      	ldr	r2, [pc, #192]	@ (800080c <SystemInit+0x130>)
 800074c:	f043 0307 	orr.w	r3, r3, #7
 8000750:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000752:	4b2f      	ldr	r3, [pc, #188]	@ (8000810 <SystemInit+0x134>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000758:	4b2d      	ldr	r3, [pc, #180]	@ (8000810 <SystemInit+0x134>)
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800075e:	4b2c      	ldr	r3, [pc, #176]	@ (8000810 <SystemInit+0x134>)
 8000760:	2200      	movs	r2, #0
 8000762:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000764:	4b2a      	ldr	r3, [pc, #168]	@ (8000810 <SystemInit+0x134>)
 8000766:	4a2c      	ldr	r2, [pc, #176]	@ (8000818 <SystemInit+0x13c>)
 8000768:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800076a:	4b29      	ldr	r3, [pc, #164]	@ (8000810 <SystemInit+0x134>)
 800076c:	4a2b      	ldr	r2, [pc, #172]	@ (800081c <SystemInit+0x140>)
 800076e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000770:	4b27      	ldr	r3, [pc, #156]	@ (8000810 <SystemInit+0x134>)
 8000772:	4a2b      	ldr	r2, [pc, #172]	@ (8000820 <SystemInit+0x144>)
 8000774:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000776:	4b26      	ldr	r3, [pc, #152]	@ (8000810 <SystemInit+0x134>)
 8000778:	2200      	movs	r2, #0
 800077a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800077c:	4b24      	ldr	r3, [pc, #144]	@ (8000810 <SystemInit+0x134>)
 800077e:	4a28      	ldr	r2, [pc, #160]	@ (8000820 <SystemInit+0x144>)
 8000780:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000782:	4b23      	ldr	r3, [pc, #140]	@ (8000810 <SystemInit+0x134>)
 8000784:	2200      	movs	r2, #0
 8000786:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000788:	4b21      	ldr	r3, [pc, #132]	@ (8000810 <SystemInit+0x134>)
 800078a:	4a25      	ldr	r2, [pc, #148]	@ (8000820 <SystemInit+0x144>)
 800078c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800078e:	4b20      	ldr	r3, [pc, #128]	@ (8000810 <SystemInit+0x134>)
 8000790:	2200      	movs	r2, #0
 8000792:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000794:	4b1e      	ldr	r3, [pc, #120]	@ (8000810 <SystemInit+0x134>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a1d      	ldr	r2, [pc, #116]	@ (8000810 <SystemInit+0x134>)
 800079a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800079e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80007a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000810 <SystemInit+0x134>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80007a6:	4b1f      	ldr	r3, [pc, #124]	@ (8000824 <SystemInit+0x148>)
 80007a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007aa:	4a1e      	ldr	r2, [pc, #120]	@ (8000824 <SystemInit+0x148>)
 80007ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007b0:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80007b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000828 <SystemInit+0x14c>)
 80007b4:	681a      	ldr	r2, [r3, #0]
 80007b6:	4b1d      	ldr	r3, [pc, #116]	@ (800082c <SystemInit+0x150>)
 80007b8:	4013      	ands	r3, r2
 80007ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80007be:	d202      	bcs.n	80007c6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80007c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000830 <SystemInit+0x154>)
 80007c2:	2201      	movs	r2, #1
 80007c4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80007c6:	4b12      	ldr	r3, [pc, #72]	@ (8000810 <SystemInit+0x134>)
 80007c8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d113      	bne.n	80007fc <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80007d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000810 <SystemInit+0x134>)
 80007d6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007da:	4a0d      	ldr	r2, [pc, #52]	@ (8000810 <SystemInit+0x134>)
 80007dc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007e0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80007e4:	4b13      	ldr	r3, [pc, #76]	@ (8000834 <SystemInit+0x158>)
 80007e6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80007ea:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80007ec:	4b08      	ldr	r3, [pc, #32]	@ (8000810 <SystemInit+0x134>)
 80007ee:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007f2:	4a07      	ldr	r2, [pc, #28]	@ (8000810 <SystemInit+0x134>)
 80007f4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80007f8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80007fc:	bf00      	nop
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	e000ed00 	.word	0xe000ed00
 800080c:	52002000 	.word	0x52002000
 8000810:	58024400 	.word	0x58024400
 8000814:	eaf6ed7f 	.word	0xeaf6ed7f
 8000818:	02020200 	.word	0x02020200
 800081c:	01ff0000 	.word	0x01ff0000
 8000820:	01010280 	.word	0x01010280
 8000824:	580000c0 	.word	0x580000c0
 8000828:	5c001000 	.word	0x5c001000
 800082c:	ffff0000 	.word	0xffff0000
 8000830:	51008108 	.word	0x51008108
 8000834:	52004000 	.word	0x52004000

08000838 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 800083c:	4b09      	ldr	r3, [pc, #36]	@ (8000864 <ExitRun0Mode+0x2c>)
 800083e:	68db      	ldr	r3, [r3, #12]
 8000840:	4a08      	ldr	r2, [pc, #32]	@ (8000864 <ExitRun0Mode+0x2c>)
 8000842:	f023 0302 	bic.w	r3, r3, #2
 8000846:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000848:	bf00      	nop
 800084a:	4b06      	ldr	r3, [pc, #24]	@ (8000864 <ExitRun0Mode+0x2c>)
 800084c:	685b      	ldr	r3, [r3, #4]
 800084e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000852:	2b00      	cmp	r3, #0
 8000854:	d0f9      	beq.n	800084a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000856:	bf00      	nop
 8000858:	bf00      	nop
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	58024800 	.word	0x58024800

08000868 <HAL_TIM_PeriodElapsedCallback>:
uint32_t cnt1ms = 0;

double TC[MAX_TC_CH];

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000878:	d136      	bne.n	80008e8 <HAL_TIM_PeriodElapsedCallback+0x80>
	{
		// 1ms마다 실행되는 코드
		f1ms = true;
 800087a:	4b1e      	ldr	r3, [pc, #120]	@ (80008f4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800087c:	2201      	movs	r2, #1
 800087e:	701a      	strb	r2, [r3, #0]
		cnt1ms++;
 8000880:	4b1d      	ldr	r3, [pc, #116]	@ (80008f8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	3301      	adds	r3, #1
 8000886:	4a1c      	ldr	r2, [pc, #112]	@ (80008f8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000888:	6013      	str	r3, [r2, #0]

		if (cnt1ms%10 == 0)
 800088a:	4b1b      	ldr	r3, [pc, #108]	@ (80008f8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800088c:	6819      	ldr	r1, [r3, #0]
 800088e:	4b1b      	ldr	r3, [pc, #108]	@ (80008fc <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000890:	fba3 2301 	umull	r2, r3, r3, r1
 8000894:	08da      	lsrs	r2, r3, #3
 8000896:	4613      	mov	r3, r2
 8000898:	009b      	lsls	r3, r3, #2
 800089a:	4413      	add	r3, r2
 800089c:	005b      	lsls	r3, r3, #1
 800089e:	1aca      	subs	r2, r1, r3
 80008a0:	2a00      	cmp	r2, #0
 80008a2:	d102      	bne.n	80008aa <HAL_TIM_PeriodElapsedCallback+0x42>
		{
			f10ms = true;
 80008a4:	4b16      	ldr	r3, [pc, #88]	@ (8000900 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80008a6:	2201      	movs	r2, #1
 80008a8:	701a      	strb	r2, [r3, #0]
		}

		if (cnt1ms%100 == 0)
 80008aa:	4b13      	ldr	r3, [pc, #76]	@ (80008f8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80008ac:	681a      	ldr	r2, [r3, #0]
 80008ae:	4b15      	ldr	r3, [pc, #84]	@ (8000904 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80008b0:	fba3 1302 	umull	r1, r3, r3, r2
 80008b4:	095b      	lsrs	r3, r3, #5
 80008b6:	2164      	movs	r1, #100	@ 0x64
 80008b8:	fb01 f303 	mul.w	r3, r1, r3
 80008bc:	1ad3      	subs	r3, r2, r3
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d102      	bne.n	80008c8 <HAL_TIM_PeriodElapsedCallback+0x60>
		{
			f100ms = true;
 80008c2:	4b11      	ldr	r3, [pc, #68]	@ (8000908 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80008c4:	2201      	movs	r2, #1
 80008c6:	701a      	strb	r2, [r3, #0]
		}

		if (cnt1ms%1000 == 0)
 80008c8:	4b0b      	ldr	r3, [pc, #44]	@ (80008f8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80008ca:	681a      	ldr	r2, [r3, #0]
 80008cc:	4b0f      	ldr	r3, [pc, #60]	@ (800090c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80008ce:	fba3 1302 	umull	r1, r3, r3, r2
 80008d2:	099b      	lsrs	r3, r3, #6
 80008d4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80008d8:	fb01 f303 	mul.w	r3, r1, r3
 80008dc:	1ad3      	subs	r3, r2, r3
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d102      	bne.n	80008e8 <HAL_TIM_PeriodElapsedCallback+0x80>
		{
			f1000ms = true;
 80008e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000910 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80008e4:	2201      	movs	r2, #1
 80008e6:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80008e8:	bf00      	nop
 80008ea:	370c      	adds	r7, #12
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr
 80008f4:	240002fc 	.word	0x240002fc
 80008f8:	24000300 	.word	0x24000300
 80008fc:	cccccccd 	.word	0xcccccccd
 8000900:	240002fd 	.word	0x240002fd
 8000904:	51eb851f 	.word	0x51eb851f
 8000908:	240002fe 	.word	0x240002fe
 800090c:	10624dd3 	.word	0x10624dd3
 8000910:	240002ff 	.word	0x240002ff

08000914 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b0aa      	sub	sp, #168	@ 0xa8
 8000918:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800091a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800091e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000922:	bf00      	nop
 8000924:	4b7f      	ldr	r3, [pc, #508]	@ (8000b24 <main+0x210>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800092c:	2b00      	cmp	r3, #0
 800092e:	d006      	beq.n	800093e <main+0x2a>
 8000930:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000934:	1e5a      	subs	r2, r3, #1
 8000936:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800093a:	2b00      	cmp	r3, #0
 800093c:	dcf2      	bgt.n	8000924 <main+0x10>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800093e:	f002 fafd 	bl	8002f3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000942:	f000 f907 	bl	8000b54 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000946:	4b77      	ldr	r3, [pc, #476]	@ (8000b24 <main+0x210>)
 8000948:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800094c:	4a75      	ldr	r2, [pc, #468]	@ (8000b24 <main+0x210>)
 800094e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000952:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000956:	4b73      	ldr	r3, [pc, #460]	@ (8000b24 <main+0x210>)
 8000958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800095c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000960:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000964:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000968:	2000      	movs	r0, #0
 800096a:	f007 faa1 	bl	8007eb0 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800096e:	2100      	movs	r1, #0
 8000970:	2000      	movs	r0, #0
 8000972:	f007 fab7 	bl	8007ee4 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000976:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800097a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800097e:	bf00      	nop
 8000980:	4b68      	ldr	r3, [pc, #416]	@ (8000b24 <main+0x210>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000988:	2b00      	cmp	r3, #0
 800098a:	d106      	bne.n	800099a <main+0x86>
 800098c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000990:	1e5a      	subs	r2, r3, #1
 8000992:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8000996:	2b00      	cmp	r3, #0
 8000998:	dcf2      	bgt.n	8000980 <main+0x6c>
if ( timeout < 0 )
 800099a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800099e:	2b00      	cmp	r3, #0
 80009a0:	da01      	bge.n	80009a6 <main+0x92>
{
Error_Handler();
 80009a2:	f000 fc9d 	bl	80012e0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009a6:	f000 fba9 	bl	80010fc <MX_GPIO_Init>
  MX_DMA_Init();
 80009aa:	f000 fb87 	bl	80010bc <MX_DMA_Init>
  MX_SPI1_Init();
 80009ae:	f000 fa93 	bl	8000ed8 <MX_SPI1_Init>
  MX_TIM2_Init();
 80009b2:	f000 fae9 	bl	8000f88 <MX_TIM2_Init>
  MX_ADC1_Init();
 80009b6:	f000 f949 	bl	8000c4c <MX_ADC1_Init>
  MX_UART4_Init();
 80009ba:	f000 fb33 	bl	8001024 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  uint8_t sv[MAX_SV_NUM] = {0};
 80009be:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	811a      	strh	r2, [r3, #8]

  HAL_TIM_Base_Start_IT(&htim2);
 80009ca:	4857      	ldr	r0, [pc, #348]	@ (8000b28 <main+0x214>)
 80009cc:	f00b fc84 	bl	800c2d8 <HAL_TIM_Base_Start_IT>

  InitPT();
 80009d0:	f000 fc8c 	bl	80012ec <InitPT>
  InitTMTC();
 80009d4:	f001 fff2 	bl	80029bc <InitTMTC>


  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80009d8:	2000      	movs	r0, #0
 80009da:	f002 f859 	bl	8002a90 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 80009de:	2001      	movs	r0, #1
 80009e0:	f002 f856 	bl	8002a90 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80009e4:	2002      	movs	r0, #2
 80009e6:	f002 f853 	bl	8002a90 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80009ea:	2101      	movs	r1, #1
 80009ec:	2000      	movs	r0, #0
 80009ee:	f002 f943 	bl	8002c78 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80009f2:	4b4e      	ldr	r3, [pc, #312]	@ (8000b2c <main+0x218>)
 80009f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009f8:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80009fa:	4b4c      	ldr	r3, [pc, #304]	@ (8000b2c <main+0x218>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000a00:	4b4a      	ldr	r3, [pc, #296]	@ (8000b2c <main+0x218>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000a06:	4b49      	ldr	r3, [pc, #292]	@ (8000b2c <main+0x218>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000a0c:	4b47      	ldr	r3, [pc, #284]	@ (8000b2c <main+0x218>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000a12:	4946      	ldr	r1, [pc, #280]	@ (8000b2c <main+0x218>)
 8000a14:	2000      	movs	r0, #0
 8000a16:	f002 f9b3 	bl	8002d80 <BSP_COM_Init>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <main+0x110>
  {
    Error_Handler();
 8000a20:	f000 fc5e 	bl	80012e0 <Error_Handler>
  }

  /* USER CODE BEGIN BSP */
  /* -- Sample board code to send message over COM1 port ---- */
  printf("Welcome to STM32 world !\n\r");
 8000a24:	4842      	ldr	r0, [pc, #264]	@ (8000b30 <main+0x21c>)
 8000a26:	f00e fe75 	bl	800f714 <iprintf>
  /* -- Sample board code to switch on leds ---- */
  BSP_LED_On(LED_GREEN);
 8000a2a:	2000      	movs	r0, #0
 8000a2c:	f002 f8a6 	bl	8002b7c <BSP_LED_On>
  BSP_LED_On(LED_YELLOW);
 8000a30:	2001      	movs	r0, #1
 8000a32:	f002 f8a3 	bl	8002b7c <BSP_LED_On>
  BSP_LED_Off(LED_RED);
 8000a36:	2002      	movs	r0, #2
 8000a38:	f002 f8ca 	bl	8002bd0 <BSP_LED_Off>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (fTC == true)
 8000a3c:	4b3d      	ldr	r3, [pc, #244]	@ (8000b34 <main+0x220>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d14b      	bne.n	8000adc <main+0x1c8>
	  {
		  fTC = false;
 8000a44:	4b3b      	ldr	r3, [pc, #236]	@ (8000b34 <main+0x220>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	701a      	strb	r2, [r3, #0]

		  uint8_t TC[MAX_TC_SIZE];
		  GetTC(TC);
 8000a4a:	1d3b      	adds	r3, r7, #4
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f001 ffc7 	bl	80029e0 <GetTC>

		  uint8_t sv_cnt = 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
		  char* tok;
		  tok = strtok((char*)TC,",");
 8000a58:	1d3b      	adds	r3, r7, #4
 8000a5a:	4937      	ldr	r1, [pc, #220]	@ (8000b38 <main+0x224>)
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f00e ff4b 	bl	800f8f8 <strtok>
 8000a62:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
		  if (strcmp(tok,"IGRVT") == 0)
 8000a66:	4935      	ldr	r1, [pc, #212]	@ (8000b3c <main+0x228>)
 8000a68:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8000a6c:	f7ff fc38 	bl	80002e0 <strcmp>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d132      	bne.n	8000adc <main+0x1c8>
		  {
			  tok = strtok(NULL,",");
 8000a76:	4930      	ldr	r1, [pc, #192]	@ (8000b38 <main+0x224>)
 8000a78:	2000      	movs	r0, #0
 8000a7a:	f00e ff3d 	bl	800f8f8 <strtok>
 8000a7e:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
			  while( tok != NULL)
 8000a82:	e025      	b.n	8000ad0 <main+0x1bc>
			  {
				  uint8_t data = (uint8_t)atoi(tok);
 8000a84:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8000a88:	f00e fcfa 	bl	800f480 <atoi>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
					  if (data == 999)
					  {
						  sv_cnt = 0;
						  break;
					  }
					  else if (data <= 1)
 8000a92:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	d80b      	bhi.n	8000ab2 <main+0x19e>
					  {
						  sv[sv_cnt] = atoi(tok);
 8000a9a:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8000a9e:	f00e fcef 	bl	800f480 <atoi>
 8000aa2:	4602      	mov	r2, r0
 8000aa4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8000aa8:	b2d2      	uxtb	r2, r2
 8000aaa:	33a8      	adds	r3, #168	@ 0xa8
 8000aac:	443b      	add	r3, r7
 8000aae:	f803 2c20 	strb.w	r2, [r3, #-32]
					  }
				  }
				  sv_cnt++;
 8000ab2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
				  if (sv_cnt > MAX_SV_NUM)
 8000abc:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8000ac0:	2b0a      	cmp	r3, #10
 8000ac2:	d80a      	bhi.n	8000ada <main+0x1c6>
				  {
					  break;
				  }

				  tok = strtok(NULL,",");
 8000ac4:	491c      	ldr	r1, [pc, #112]	@ (8000b38 <main+0x224>)
 8000ac6:	2000      	movs	r0, #0
 8000ac8:	f00e ff16 	bl	800f8f8 <strtok>
 8000acc:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
			  while( tok != NULL)
 8000ad0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d1d5      	bne.n	8000a84 <main+0x170>
 8000ad8:	e000      	b.n	8000adc <main+0x1c8>
					  break;
 8000ada:	bf00      	nop
			  }
		  }
	  } // if (fTC == true)

	  if (f10ms == true)
 8000adc:	4b18      	ldr	r3, [pc, #96]	@ (8000b40 <main+0x22c>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	2b01      	cmp	r3, #1
 8000ae2:	d10d      	bne.n	8000b00 <main+0x1ec>
	  {
		  f10ms = false;
 8000ae4:	4b16      	ldr	r3, [pc, #88]	@ (8000b40 <main+0x22c>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	701a      	strb	r2, [r3, #0]

		  SVUpdate(sv);
 8000aea:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8000aee:	4618      	mov	r0, r3
 8000af0:	f000 fc1e 	bl	8001330 <SVUpdate>

		  GetTemp(TC);
 8000af4:	4813      	ldr	r0, [pc, #76]	@ (8000b44 <main+0x230>)
 8000af6:	f001 fef6 	bl	80028e6 <GetTemp>

		  GetADCRaw(ADC_results);
 8000afa:	4813      	ldr	r0, [pc, #76]	@ (8000b48 <main+0x234>)
 8000afc:	f000 fc08 	bl	8001310 <GetADCRaw>
	  }

	  if (f1000ms == true)
 8000b00:	4b12      	ldr	r3, [pc, #72]	@ (8000b4c <main+0x238>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d199      	bne.n	8000a3c <main+0x128>
	  {
		  f1000ms = false;
 8000b08:	4b10      	ldr	r3, [pc, #64]	@ (8000b4c <main+0x238>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	701a      	strb	r2, [r3, #0]
		  BSP_LED_Toggle(LED_RED);
 8000b0e:	2002      	movs	r0, #2
 8000b10:	f002 f888 	bl	8002c24 <BSP_LED_Toggle>

		  char *msg = "UART4 ready\r\n";
 8000b14:	4b0e      	ldr	r3, [pc, #56]	@ (8000b50 <main+0x23c>)
 8000b16:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		  SendTM((uint8_t*)msg);
 8000b1a:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8000b1e:	f001 ff73 	bl	8002a08 <SendTM>
	  if (fTC == true)
 8000b22:	e78b      	b.n	8000a3c <main+0x128>
 8000b24:	58024400 	.word	0x58024400
 8000b28:	2400021c 	.word	0x2400021c
 8000b2c:	240000a4 	.word	0x240000a4
 8000b30:	080105e0 	.word	0x080105e0
 8000b34:	240003a4 	.word	0x240003a4
 8000b38:	080105fc 	.word	0x080105fc
 8000b3c:	08010600 	.word	0x08010600
 8000b40:	240002fd 	.word	0x240002fd
 8000b44:	24000308 	.word	0x24000308
 8000b48:	24000368 	.word	0x24000368
 8000b4c:	240002ff 	.word	0x240002ff
 8000b50:	08010608 	.word	0x08010608

08000b54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b09c      	sub	sp, #112	@ 0x70
 8000b58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b5e:	224c      	movs	r2, #76	@ 0x4c
 8000b60:	2100      	movs	r1, #0
 8000b62:	4618      	mov	r0, r3
 8000b64:	f00e fec0 	bl	800f8e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b68:	1d3b      	adds	r3, r7, #4
 8000b6a:	2220      	movs	r2, #32
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f00e feba 	bl	800f8e8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000b74:	2004      	movs	r0, #4
 8000b76:	f007 f9c9 	bl	8007f0c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	603b      	str	r3, [r7, #0]
 8000b7e:	4b31      	ldr	r3, [pc, #196]	@ (8000c44 <SystemClock_Config+0xf0>)
 8000b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b82:	4a30      	ldr	r2, [pc, #192]	@ (8000c44 <SystemClock_Config+0xf0>)
 8000b84:	f023 0301 	bic.w	r3, r3, #1
 8000b88:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000b8a:	4b2e      	ldr	r3, [pc, #184]	@ (8000c44 <SystemClock_Config+0xf0>)
 8000b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	603b      	str	r3, [r7, #0]
 8000b94:	4b2c      	ldr	r3, [pc, #176]	@ (8000c48 <SystemClock_Config+0xf4>)
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b9c:	4a2a      	ldr	r2, [pc, #168]	@ (8000c48 <SystemClock_Config+0xf4>)
 8000b9e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ba2:	6193      	str	r3, [r2, #24]
 8000ba4:	4b28      	ldr	r3, [pc, #160]	@ (8000c48 <SystemClock_Config+0xf4>)
 8000ba6:	699b      	ldr	r3, [r3, #24]
 8000ba8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000bac:	603b      	str	r3, [r7, #0]
 8000bae:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000bb0:	bf00      	nop
 8000bb2:	4b25      	ldr	r3, [pc, #148]	@ (8000c48 <SystemClock_Config+0xf4>)
 8000bb4:	699b      	ldr	r3, [r3, #24]
 8000bb6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000bba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000bbe:	d1f8      	bne.n	8000bb2 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bc8:	2340      	movs	r3, #64	@ 0x40
 8000bca:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000bd4:	2304      	movs	r3, #4
 8000bd6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000bd8:	230a      	movs	r3, #10
 8000bda:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000be0:	2302      	movs	r3, #2
 8000be2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000be4:	2302      	movs	r3, #2
 8000be6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000be8:	230c      	movs	r3, #12
 8000bea:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000bec:	2302      	movs	r3, #2
 8000bee:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bf4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f007 f9e1 	bl	8007fc0 <HAL_RCC_OscConfig>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000c04:	f000 fb6c 	bl	80012e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c08:	233f      	movs	r3, #63	@ 0x3f
 8000c0a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c10:	2300      	movs	r3, #0
 8000c12:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000c14:	2300      	movs	r3, #0
 8000c16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c1c:	2340      	movs	r3, #64	@ 0x40
 8000c1e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000c20:	2300      	movs	r3, #0
 8000c22:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000c24:	2300      	movs	r3, #0
 8000c26:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c28:	1d3b      	adds	r3, r7, #4
 8000c2a:	2101      	movs	r1, #1
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f007 fe21 	bl	8008874 <HAL_RCC_ClockConfig>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000c38:	f000 fb52 	bl	80012e0 <Error_Handler>
  }
}
 8000c3c:	bf00      	nop
 8000c3e:	3770      	adds	r7, #112	@ 0x70
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	58000400 	.word	0x58000400
 8000c48:	58024800 	.word	0x58024800

08000c4c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08a      	sub	sp, #40	@ 0x28
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c52:	f107 031c 	add.w	r3, r7, #28
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	605a      	str	r2, [r3, #4]
 8000c5c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c5e:	463b      	mov	r3, r7
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
 8000c6c:	615a      	str	r2, [r3, #20]
 8000c6e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c70:	4b8a      	ldr	r3, [pc, #552]	@ (8000e9c <MX_ADC1_Init+0x250>)
 8000c72:	4a8b      	ldr	r2, [pc, #556]	@ (8000ea0 <MX_ADC1_Init+0x254>)
 8000c74:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV64;
 8000c76:	4b89      	ldr	r3, [pc, #548]	@ (8000e9c <MX_ADC1_Init+0x250>)
 8000c78:	f44f 1210 	mov.w	r2, #2359296	@ 0x240000
 8000c7c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c7e:	4b87      	ldr	r3, [pc, #540]	@ (8000e9c <MX_ADC1_Init+0x250>)
 8000c80:	2208      	movs	r2, #8
 8000c82:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c84:	4b85      	ldr	r3, [pc, #532]	@ (8000e9c <MX_ADC1_Init+0x250>)
 8000c86:	2201      	movs	r2, #1
 8000c88:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000c8a:	4b84      	ldr	r3, [pc, #528]	@ (8000e9c <MX_ADC1_Init+0x250>)
 8000c8c:	2208      	movs	r2, #8
 8000c8e:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c90:	4b82      	ldr	r3, [pc, #520]	@ (8000e9c <MX_ADC1_Init+0x250>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c96:	4b81      	ldr	r3, [pc, #516]	@ (8000e9c <MX_ADC1_Init+0x250>)
 8000c98:	2201      	movs	r2, #1
 8000c9a:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 13;
 8000c9c:	4b7f      	ldr	r3, [pc, #508]	@ (8000e9c <MX_ADC1_Init+0x250>)
 8000c9e:	220d      	movs	r2, #13
 8000ca0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ca2:	4b7e      	ldr	r3, [pc, #504]	@ (8000e9c <MX_ADC1_Init+0x250>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ca8:	4b7c      	ldr	r3, [pc, #496]	@ (8000e9c <MX_ADC1_Init+0x250>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cae:	4b7b      	ldr	r3, [pc, #492]	@ (8000e9c <MX_ADC1_Init+0x250>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000cb4:	4b79      	ldr	r3, [pc, #484]	@ (8000e9c <MX_ADC1_Init+0x250>)
 8000cb6:	2203      	movs	r2, #3
 8000cb8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000cba:	4b78      	ldr	r3, [pc, #480]	@ (8000e9c <MX_ADC1_Init+0x250>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000cc0:	4b76      	ldr	r3, [pc, #472]	@ (8000e9c <MX_ADC1_Init+0x250>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000cc6:	4b75      	ldr	r3, [pc, #468]	@ (8000e9c <MX_ADC1_Init+0x250>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8000cce:	4b73      	ldr	r3, [pc, #460]	@ (8000e9c <MX_ADC1_Init+0x250>)
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cd4:	4871      	ldr	r0, [pc, #452]	@ (8000e9c <MX_ADC1_Init+0x250>)
 8000cd6:	f002 fc21 	bl	800351c <HAL_ADC_Init>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000ce0:	f000 fafe 	bl	80012e0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ce8:	f107 031c 	add.w	r3, r7, #28
 8000cec:	4619      	mov	r1, r3
 8000cee:	486b      	ldr	r0, [pc, #428]	@ (8000e9c <MX_ADC1_Init+0x250>)
 8000cf0:	f003 fe4e 	bl	8004990 <HAL_ADCEx_MultiModeConfigChannel>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000cfa:	f000 faf1 	bl	80012e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000cfe:	4b69      	ldr	r3, [pc, #420]	@ (8000ea4 <MX_ADC1_Init+0x258>)
 8000d00:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d02:	2306      	movs	r3, #6
 8000d04:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8000d06:	2303      	movs	r3, #3
 8000d08:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d0a:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000d0e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d10:	2304      	movs	r3, #4
 8000d12:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d1c:	463b      	mov	r3, r7
 8000d1e:	4619      	mov	r1, r3
 8000d20:	485e      	ldr	r0, [pc, #376]	@ (8000e9c <MX_ADC1_Init+0x250>)
 8000d22:	f003 f8c3 	bl	8003eac <HAL_ADC_ConfigChannel>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000d2c:	f000 fad8 	bl	80012e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000d30:	4b5d      	ldr	r3, [pc, #372]	@ (8000ea8 <MX_ADC1_Init+0x25c>)
 8000d32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000d34:	230c      	movs	r3, #12
 8000d36:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d38:	463b      	mov	r3, r7
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4857      	ldr	r0, [pc, #348]	@ (8000e9c <MX_ADC1_Init+0x250>)
 8000d3e:	f003 f8b5 	bl	8003eac <HAL_ADC_ConfigChannel>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000d48:	f000 faca 	bl	80012e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000d4c:	4b57      	ldr	r3, [pc, #348]	@ (8000eac <MX_ADC1_Init+0x260>)
 8000d4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000d50:	2312      	movs	r3, #18
 8000d52:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d54:	463b      	mov	r3, r7
 8000d56:	4619      	mov	r1, r3
 8000d58:	4850      	ldr	r0, [pc, #320]	@ (8000e9c <MX_ADC1_Init+0x250>)
 8000d5a:	f003 f8a7 	bl	8003eac <HAL_ADC_ConfigChannel>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000d64:	f000 fabc 	bl	80012e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000d68:	4b51      	ldr	r3, [pc, #324]	@ (8000eb0 <MX_ADC1_Init+0x264>)
 8000d6a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000d6c:	2318      	movs	r3, #24
 8000d6e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d70:	463b      	mov	r3, r7
 8000d72:	4619      	mov	r1, r3
 8000d74:	4849      	ldr	r0, [pc, #292]	@ (8000e9c <MX_ADC1_Init+0x250>)
 8000d76:	f003 f899 	bl	8003eac <HAL_ADC_ConfigChannel>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8000d80:	f000 faae 	bl	80012e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000d84:	4b4b      	ldr	r3, [pc, #300]	@ (8000eb4 <MX_ADC1_Init+0x268>)
 8000d86:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000d88:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d8c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d8e:	463b      	mov	r3, r7
 8000d90:	4619      	mov	r1, r3
 8000d92:	4842      	ldr	r0, [pc, #264]	@ (8000e9c <MX_ADC1_Init+0x250>)
 8000d94:	f003 f88a 	bl	8003eac <HAL_ADC_ConfigChannel>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_ADC1_Init+0x156>
  {
    Error_Handler();
 8000d9e:	f000 fa9f 	bl	80012e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000da2:	4b45      	ldr	r3, [pc, #276]	@ (8000eb8 <MX_ADC1_Init+0x26c>)
 8000da4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000da6:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8000daa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dac:	463b      	mov	r3, r7
 8000dae:	4619      	mov	r1, r3
 8000db0:	483a      	ldr	r0, [pc, #232]	@ (8000e9c <MX_ADC1_Init+0x250>)
 8000db2:	f003 f87b 	bl	8003eac <HAL_ADC_ConfigChannel>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_ADC1_Init+0x174>
  {
    Error_Handler();
 8000dbc:	f000 fa90 	bl	80012e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000dc0:	4b3e      	ldr	r3, [pc, #248]	@ (8000ebc <MX_ADC1_Init+0x270>)
 8000dc2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000dc4:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 8000dc8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dca:	463b      	mov	r3, r7
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4833      	ldr	r0, [pc, #204]	@ (8000e9c <MX_ADC1_Init+0x250>)
 8000dd0:	f003 f86c 	bl	8003eac <HAL_ADC_ConfigChannel>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_ADC1_Init+0x192>
  {
    Error_Handler();
 8000dda:	f000 fa81 	bl	80012e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000dde:	4b38      	ldr	r3, [pc, #224]	@ (8000ec0 <MX_ADC1_Init+0x274>)
 8000de0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000de2:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8000de6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000de8:	463b      	mov	r3, r7
 8000dea:	4619      	mov	r1, r3
 8000dec:	482b      	ldr	r0, [pc, #172]	@ (8000e9c <MX_ADC1_Init+0x250>)
 8000dee:	f003 f85d 	bl	8003eac <HAL_ADC_ConfigChannel>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_ADC1_Init+0x1b0>
  {
    Error_Handler();
 8000df8:	f000 fa72 	bl	80012e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000dfc:	4b31      	ldr	r3, [pc, #196]	@ (8000ec4 <MX_ADC1_Init+0x278>)
 8000dfe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000e00:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8000e04:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e06:	463b      	mov	r3, r7
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4824      	ldr	r0, [pc, #144]	@ (8000e9c <MX_ADC1_Init+0x250>)
 8000e0c:	f003 f84e 	bl	8003eac <HAL_ADC_ConfigChannel>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_ADC1_Init+0x1ce>
  {
    Error_Handler();
 8000e16:	f000 fa63 	bl	80012e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000e1a:	4b2b      	ldr	r3, [pc, #172]	@ (8000ec8 <MX_ADC1_Init+0x27c>)
 8000e1c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000e1e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e22:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e24:	463b      	mov	r3, r7
 8000e26:	4619      	mov	r1, r3
 8000e28:	481c      	ldr	r0, [pc, #112]	@ (8000e9c <MX_ADC1_Init+0x250>)
 8000e2a:	f003 f83f 	bl	8003eac <HAL_ADC_ConfigChannel>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_ADC1_Init+0x1ec>
  {
    Error_Handler();
 8000e34:	f000 fa54 	bl	80012e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8000e38:	4b24      	ldr	r3, [pc, #144]	@ (8000ecc <MX_ADC1_Init+0x280>)
 8000e3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8000e3c:	f240 2306 	movw	r3, #518	@ 0x206
 8000e40:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e42:	463b      	mov	r3, r7
 8000e44:	4619      	mov	r1, r3
 8000e46:	4815      	ldr	r0, [pc, #84]	@ (8000e9c <MX_ADC1_Init+0x250>)
 8000e48:	f003 f830 	bl	8003eac <HAL_ADC_ConfigChannel>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_ADC1_Init+0x20a>
  {
    Error_Handler();
 8000e52:	f000 fa45 	bl	80012e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 8000e56:	4b1e      	ldr	r3, [pc, #120]	@ (8000ed0 <MX_ADC1_Init+0x284>)
 8000e58:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8000e5a:	f44f 7303 	mov.w	r3, #524	@ 0x20c
 8000e5e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e60:	463b      	mov	r3, r7
 8000e62:	4619      	mov	r1, r3
 8000e64:	480d      	ldr	r0, [pc, #52]	@ (8000e9c <MX_ADC1_Init+0x250>)
 8000e66:	f003 f821 	bl	8003eac <HAL_ADC_ConfigChannel>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_ADC1_Init+0x228>
  {
    Error_Handler();
 8000e70:	f000 fa36 	bl	80012e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 8000e74:	4b17      	ldr	r3, [pc, #92]	@ (8000ed4 <MX_ADC1_Init+0x288>)
 8000e76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8000e78:	f240 2312 	movw	r3, #530	@ 0x212
 8000e7c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e7e:	463b      	mov	r3, r7
 8000e80:	4619      	mov	r1, r3
 8000e82:	4806      	ldr	r0, [pc, #24]	@ (8000e9c <MX_ADC1_Init+0x250>)
 8000e84:	f003 f812 	bl	8003eac <HAL_ADC_ConfigChannel>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_ADC1_Init+0x246>
  {
    Error_Handler();
 8000e8e:	f000 fa27 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e92:	bf00      	nop
 8000e94:	3728      	adds	r7, #40	@ 0x28
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	240000b8 	.word	0x240000b8
 8000ea0:	40022000 	.word	0x40022000
 8000ea4:	08600004 	.word	0x08600004
 8000ea8:	0c900008 	.word	0x0c900008
 8000eac:	10c00010 	.word	0x10c00010
 8000eb0:	1d500080 	.word	0x1d500080
 8000eb4:	21800100 	.word	0x21800100
 8000eb8:	2a000400 	.word	0x2a000400
 8000ebc:	2e300800 	.word	0x2e300800
 8000ec0:	3ac04000 	.word	0x3ac04000
 8000ec4:	3ef08000 	.word	0x3ef08000
 8000ec8:	43210000 	.word	0x43210000
 8000ecc:	47520000 	.word	0x47520000
 8000ed0:	4b840000 	.word	0x4b840000
 8000ed4:	4fb80000 	.word	0x4fb80000

08000ed8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000edc:	4b28      	ldr	r3, [pc, #160]	@ (8000f80 <MX_SPI1_Init+0xa8>)
 8000ede:	4a29      	ldr	r2, [pc, #164]	@ (8000f84 <MX_SPI1_Init+0xac>)
 8000ee0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ee2:	4b27      	ldr	r3, [pc, #156]	@ (8000f80 <MX_SPI1_Init+0xa8>)
 8000ee4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000ee8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000eea:	4b25      	ldr	r3, [pc, #148]	@ (8000f80 <MX_SPI1_Init+0xa8>)
 8000eec:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000ef0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ef2:	4b23      	ldr	r3, [pc, #140]	@ (8000f80 <MX_SPI1_Init+0xa8>)
 8000ef4:	2207      	movs	r2, #7
 8000ef6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ef8:	4b21      	ldr	r3, [pc, #132]	@ (8000f80 <MX_SPI1_Init+0xa8>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000efe:	4b20      	ldr	r3, [pc, #128]	@ (8000f80 <MX_SPI1_Init+0xa8>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f04:	4b1e      	ldr	r3, [pc, #120]	@ (8000f80 <MX_SPI1_Init+0xa8>)
 8000f06:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000f0a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000f0c:	4b1c      	ldr	r3, [pc, #112]	@ (8000f80 <MX_SPI1_Init+0xa8>)
 8000f0e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000f12:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f14:	4b1a      	ldr	r3, [pc, #104]	@ (8000f80 <MX_SPI1_Init+0xa8>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f1a:	4b19      	ldr	r3, [pc, #100]	@ (8000f80 <MX_SPI1_Init+0xa8>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f20:	4b17      	ldr	r3, [pc, #92]	@ (8000f80 <MX_SPI1_Init+0xa8>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000f26:	4b16      	ldr	r3, [pc, #88]	@ (8000f80 <MX_SPI1_Init+0xa8>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f2c:	4b14      	ldr	r3, [pc, #80]	@ (8000f80 <MX_SPI1_Init+0xa8>)
 8000f2e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f32:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000f34:	4b12      	ldr	r3, [pc, #72]	@ (8000f80 <MX_SPI1_Init+0xa8>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000f3a:	4b11      	ldr	r3, [pc, #68]	@ (8000f80 <MX_SPI1_Init+0xa8>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f40:	4b0f      	ldr	r3, [pc, #60]	@ (8000f80 <MX_SPI1_Init+0xa8>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f46:	4b0e      	ldr	r3, [pc, #56]	@ (8000f80 <MX_SPI1_Init+0xa8>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000f4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f80 <MX_SPI1_Init+0xa8>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000f52:	4b0b      	ldr	r3, [pc, #44]	@ (8000f80 <MX_SPI1_Init+0xa8>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000f58:	4b09      	ldr	r3, [pc, #36]	@ (8000f80 <MX_SPI1_Init+0xa8>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000f5e:	4b08      	ldr	r3, [pc, #32]	@ (8000f80 <MX_SPI1_Init+0xa8>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000f64:	4b06      	ldr	r3, [pc, #24]	@ (8000f80 <MX_SPI1_Init+0xa8>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f6a:	4805      	ldr	r0, [pc, #20]	@ (8000f80 <MX_SPI1_Init+0xa8>)
 8000f6c:	f00a fd0c 	bl	800b988 <HAL_SPI_Init>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8000f76:	f000 f9b3 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	24000194 	.word	0x24000194
 8000f84:	40013000 	.word	0x40013000

08000f88 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b088      	sub	sp, #32
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f8e:	f107 0310 	add.w	r3, r7, #16
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	605a      	str	r2, [r3, #4]
 8000f98:	609a      	str	r2, [r3, #8]
 8000f9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f9c:	1d3b      	adds	r3, r7, #4
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	605a      	str	r2, [r3, #4]
 8000fa4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fa6:	4b1e      	ldr	r3, [pc, #120]	@ (8001020 <MX_TIM2_Init+0x98>)
 8000fa8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 8000fae:	4b1c      	ldr	r3, [pc, #112]	@ (8001020 <MX_TIM2_Init+0x98>)
 8000fb0:	223f      	movs	r2, #63	@ 0x3f
 8000fb2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fb4:	4b1a      	ldr	r3, [pc, #104]	@ (8001020 <MX_TIM2_Init+0x98>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000fba:	4b19      	ldr	r3, [pc, #100]	@ (8001020 <MX_TIM2_Init+0x98>)
 8000fbc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000fc0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fc2:	4b17      	ldr	r3, [pc, #92]	@ (8001020 <MX_TIM2_Init+0x98>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fc8:	4b15      	ldr	r3, [pc, #84]	@ (8001020 <MX_TIM2_Init+0x98>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fce:	4814      	ldr	r0, [pc, #80]	@ (8001020 <MX_TIM2_Init+0x98>)
 8000fd0:	f00b f92b 	bl	800c22a <HAL_TIM_Base_Init>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000fda:	f000 f981 	bl	80012e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fde:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fe2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fe4:	f107 0310 	add.w	r3, r7, #16
 8000fe8:	4619      	mov	r1, r3
 8000fea:	480d      	ldr	r0, [pc, #52]	@ (8001020 <MX_TIM2_Init+0x98>)
 8000fec:	f00b faf4 	bl	800c5d8 <HAL_TIM_ConfigClockSource>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000ff6:	f000 f973 	bl	80012e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ffe:	2300      	movs	r3, #0
 8001000:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001002:	1d3b      	adds	r3, r7, #4
 8001004:	4619      	mov	r1, r3
 8001006:	4806      	ldr	r0, [pc, #24]	@ (8001020 <MX_TIM2_Init+0x98>)
 8001008:	f00b fd44 	bl	800ca94 <HAL_TIMEx_MasterConfigSynchronization>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001012:	f000 f965 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001016:	bf00      	nop
 8001018:	3720      	adds	r7, #32
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	2400021c 	.word	0x2400021c

08001024 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001028:	4b22      	ldr	r3, [pc, #136]	@ (80010b4 <MX_UART4_Init+0x90>)
 800102a:	4a23      	ldr	r2, [pc, #140]	@ (80010b8 <MX_UART4_Init+0x94>)
 800102c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 230400;
 800102e:	4b21      	ldr	r3, [pc, #132]	@ (80010b4 <MX_UART4_Init+0x90>)
 8001030:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8001034:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001036:	4b1f      	ldr	r3, [pc, #124]	@ (80010b4 <MX_UART4_Init+0x90>)
 8001038:	2200      	movs	r2, #0
 800103a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800103c:	4b1d      	ldr	r3, [pc, #116]	@ (80010b4 <MX_UART4_Init+0x90>)
 800103e:	2200      	movs	r2, #0
 8001040:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001042:	4b1c      	ldr	r3, [pc, #112]	@ (80010b4 <MX_UART4_Init+0x90>)
 8001044:	2200      	movs	r2, #0
 8001046:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001048:	4b1a      	ldr	r3, [pc, #104]	@ (80010b4 <MX_UART4_Init+0x90>)
 800104a:	220c      	movs	r2, #12
 800104c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800104e:	4b19      	ldr	r3, [pc, #100]	@ (80010b4 <MX_UART4_Init+0x90>)
 8001050:	2200      	movs	r2, #0
 8001052:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001054:	4b17      	ldr	r3, [pc, #92]	@ (80010b4 <MX_UART4_Init+0x90>)
 8001056:	2200      	movs	r2, #0
 8001058:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800105a:	4b16      	ldr	r3, [pc, #88]	@ (80010b4 <MX_UART4_Init+0x90>)
 800105c:	2200      	movs	r2, #0
 800105e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001060:	4b14      	ldr	r3, [pc, #80]	@ (80010b4 <MX_UART4_Init+0x90>)
 8001062:	2200      	movs	r2, #0
 8001064:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001066:	4b13      	ldr	r3, [pc, #76]	@ (80010b4 <MX_UART4_Init+0x90>)
 8001068:	2200      	movs	r2, #0
 800106a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800106c:	4811      	ldr	r0, [pc, #68]	@ (80010b4 <MX_UART4_Init+0x90>)
 800106e:	f00b fdbd 	bl	800cbec <HAL_UART_Init>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001078:	f000 f932 	bl	80012e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800107c:	2100      	movs	r1, #0
 800107e:	480d      	ldr	r0, [pc, #52]	@ (80010b4 <MX_UART4_Init+0x90>)
 8001080:	f00e f933 	bl	800f2ea <HAL_UARTEx_SetTxFifoThreshold>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800108a:	f000 f929 	bl	80012e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800108e:	2100      	movs	r1, #0
 8001090:	4808      	ldr	r0, [pc, #32]	@ (80010b4 <MX_UART4_Init+0x90>)
 8001092:	f00e f968 	bl	800f366 <HAL_UARTEx_SetRxFifoThreshold>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 800109c:	f000 f920 	bl	80012e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80010a0:	4804      	ldr	r0, [pc, #16]	@ (80010b4 <MX_UART4_Init+0x90>)
 80010a2:	f00e f8e9 	bl	800f278 <HAL_UARTEx_DisableFifoMode>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80010ac:	f000 f918 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	24000268 	.word	0x24000268
 80010b8:	40004c00 	.word	0x40004c00

080010bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010c2:	4b0d      	ldr	r3, [pc, #52]	@ (80010f8 <MX_DMA_Init+0x3c>)
 80010c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80010c8:	4a0b      	ldr	r2, [pc, #44]	@ (80010f8 <MX_DMA_Init+0x3c>)
 80010ca:	f043 0301 	orr.w	r3, r3, #1
 80010ce:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80010d2:	4b09      	ldr	r3, [pc, #36]	@ (80010f8 <MX_DMA_Init+0x3c>)
 80010d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80010d8:	f003 0301 	and.w	r3, r3, #1
 80010dc:	607b      	str	r3, [r7, #4]
 80010de:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80010e0:	2200      	movs	r2, #0
 80010e2:	2100      	movs	r1, #0
 80010e4:	200b      	movs	r0, #11
 80010e6:	f003 fe0c 	bl	8004d02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80010ea:	200b      	movs	r0, #11
 80010ec:	f003 fe23 	bl	8004d36 <HAL_NVIC_EnableIRQ>

}
 80010f0:	bf00      	nop
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	58024400 	.word	0x58024400

080010fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08c      	sub	sp, #48	@ 0x30
 8001100:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001102:	f107 031c 	add.w	r3, r7, #28
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	609a      	str	r2, [r3, #8]
 800110e:	60da      	str	r2, [r3, #12]
 8001110:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001112:	4b63      	ldr	r3, [pc, #396]	@ (80012a0 <MX_GPIO_Init+0x1a4>)
 8001114:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001118:	4a61      	ldr	r2, [pc, #388]	@ (80012a0 <MX_GPIO_Init+0x1a4>)
 800111a:	f043 0310 	orr.w	r3, r3, #16
 800111e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001122:	4b5f      	ldr	r3, [pc, #380]	@ (80012a0 <MX_GPIO_Init+0x1a4>)
 8001124:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001128:	f003 0310 	and.w	r3, r3, #16
 800112c:	61bb      	str	r3, [r7, #24]
 800112e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001130:	4b5b      	ldr	r3, [pc, #364]	@ (80012a0 <MX_GPIO_Init+0x1a4>)
 8001132:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001136:	4a5a      	ldr	r2, [pc, #360]	@ (80012a0 <MX_GPIO_Init+0x1a4>)
 8001138:	f043 0320 	orr.w	r3, r3, #32
 800113c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001140:	4b57      	ldr	r3, [pc, #348]	@ (80012a0 <MX_GPIO_Init+0x1a4>)
 8001142:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001146:	f003 0320 	and.w	r3, r3, #32
 800114a:	617b      	str	r3, [r7, #20]
 800114c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800114e:	4b54      	ldr	r3, [pc, #336]	@ (80012a0 <MX_GPIO_Init+0x1a4>)
 8001150:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001154:	4a52      	ldr	r2, [pc, #328]	@ (80012a0 <MX_GPIO_Init+0x1a4>)
 8001156:	f043 0304 	orr.w	r3, r3, #4
 800115a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800115e:	4b50      	ldr	r3, [pc, #320]	@ (80012a0 <MX_GPIO_Init+0x1a4>)
 8001160:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001164:	f003 0304 	and.w	r3, r3, #4
 8001168:	613b      	str	r3, [r7, #16]
 800116a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800116c:	4b4c      	ldr	r3, [pc, #304]	@ (80012a0 <MX_GPIO_Init+0x1a4>)
 800116e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001172:	4a4b      	ldr	r2, [pc, #300]	@ (80012a0 <MX_GPIO_Init+0x1a4>)
 8001174:	f043 0301 	orr.w	r3, r3, #1
 8001178:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800117c:	4b48      	ldr	r3, [pc, #288]	@ (80012a0 <MX_GPIO_Init+0x1a4>)
 800117e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800118a:	4b45      	ldr	r3, [pc, #276]	@ (80012a0 <MX_GPIO_Init+0x1a4>)
 800118c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001190:	4a43      	ldr	r2, [pc, #268]	@ (80012a0 <MX_GPIO_Init+0x1a4>)
 8001192:	f043 0308 	orr.w	r3, r3, #8
 8001196:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800119a:	4b41      	ldr	r3, [pc, #260]	@ (80012a0 <MX_GPIO_Init+0x1a4>)
 800119c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011a0:	f003 0308 	and.w	r3, r3, #8
 80011a4:	60bb      	str	r3, [r7, #8]
 80011a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011a8:	4b3d      	ldr	r3, [pc, #244]	@ (80012a0 <MX_GPIO_Init+0x1a4>)
 80011aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011ae:	4a3c      	ldr	r2, [pc, #240]	@ (80012a0 <MX_GPIO_Init+0x1a4>)
 80011b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011b8:	4b39      	ldr	r3, [pc, #228]	@ (80012a0 <MX_GPIO_Init+0x1a4>)
 80011ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011c2:	607b      	str	r3, [r7, #4]
 80011c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80011c6:	2200      	movs	r2, #0
 80011c8:	f64f 71fd 	movw	r1, #65533	@ 0xfffd
 80011cc:	4835      	ldr	r0, [pc, #212]	@ (80012a4 <MX_GPIO_Init+0x1a8>)
 80011ce:	f006 fe3b 	bl	8007e48 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80011d2:	2200      	movs	r2, #0
 80011d4:	f647 41ff 	movw	r1, #31999	@ 0x7cff
 80011d8:	4833      	ldr	r0, [pc, #204]	@ (80012a8 <MX_GPIO_Init+0x1ac>)
 80011da:	f006 fe35 	bl	8007e48 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80011de:	2200      	movs	r2, #0
 80011e0:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 80011e4:	4831      	ldr	r0, [pc, #196]	@ (80012ac <MX_GPIO_Init+0x1b0>)
 80011e6:	f006 fe2f 	bl	8007e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80011ea:	f64f 73fd 	movw	r3, #65533	@ 0xfffd
 80011ee:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f0:	2301      	movs	r3, #1
 80011f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f8:	2300      	movs	r3, #0
 80011fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011fc:	f107 031c 	add.w	r3, r7, #28
 8001200:	4619      	mov	r1, r3
 8001202:	4828      	ldr	r0, [pc, #160]	@ (80012a4 <MX_GPIO_Init+0x1a8>)
 8001204:	f006 fc70 	bl	8007ae8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8001208:	f44f 7320 	mov.w	r3, #640	@ 0x280
 800120c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800120e:	2303      	movs	r3, #3
 8001210:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001216:	f107 031c 	add.w	r3, r7, #28
 800121a:	4619      	mov	r1, r3
 800121c:	4824      	ldr	r0, [pc, #144]	@ (80012b0 <MX_GPIO_Init+0x1b4>)
 800121e:	f006 fc63 	bl	8007ae8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin PD11 PD12 PD13
                           PD14 PD0 PD1 PD2
                           PD3 PD4 PD5 PD6
                           PD7 */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001222:	f647 43ff 	movw	r3, #31999	@ 0x7cff
 8001226:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001228:	2301      	movs	r3, #1
 800122a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	2300      	movs	r3, #0
 800122e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001230:	2300      	movs	r3, #0
 8001232:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001234:	f107 031c 	add.w	r3, r7, #28
 8001238:	4619      	mov	r1, r3
 800123a:	481b      	ldr	r0, [pc, #108]	@ (80012a8 <MX_GPIO_Init+0x1ac>)
 800123c:	f006 fc54 	bl	8007ae8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001240:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001244:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001246:	2301      	movs	r3, #1
 8001248:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124e:	2300      	movs	r3, #0
 8001250:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001252:	f107 031c 	add.w	r3, r7, #28
 8001256:	4619      	mov	r1, r3
 8001258:	4814      	ldr	r0, [pc, #80]	@ (80012ac <MX_GPIO_Init+0x1b0>)
 800125a:	f006 fc45 	bl	8007ae8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800125e:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8001262:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001264:	2302      	movs	r3, #2
 8001266:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126c:	2300      	movs	r3, #0
 800126e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001270:	230a      	movs	r3, #10
 8001272:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001274:	f107 031c 	add.w	r3, r7, #28
 8001278:	4619      	mov	r1, r3
 800127a:	480e      	ldr	r0, [pc, #56]	@ (80012b4 <MX_GPIO_Init+0x1b8>)
 800127c:	f006 fc34 	bl	8007ae8 <HAL_GPIO_Init>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001280:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 8001284:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8001288:	f001 fef6 	bl	8003078 <HAL_SYSCFG_AnalogSwitchConfig>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 800128c:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 8001290:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8001294:	f001 fef0 	bl	8003078 <HAL_SYSCFG_AnalogSwitchConfig>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001298:	bf00      	nop
 800129a:	3730      	adds	r7, #48	@ 0x30
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	58024400 	.word	0x58024400
 80012a4:	58021000 	.word	0x58021000
 80012a8:	58020c00 	.word	0x58020c00
 80012ac:	58020800 	.word	0x58020800
 80012b0:	58021400 	.word	0x58021400
 80012b4:	58020000 	.word	0x58020000

080012b8 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 80012c2:	79fb      	ldrb	r3, [r7, #7]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d102      	bne.n	80012ce <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 80012c8:	4b04      	ldr	r3, [pc, #16]	@ (80012dc <BSP_PB_Callback+0x24>)
 80012ca:	2201      	movs	r2, #1
 80012cc:	601a      	str	r2, [r3, #0]
  }
}
 80012ce:	bf00      	nop
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	240000b4 	.word	0x240000b4

080012e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012e4:	b672      	cpsid	i
}
 80012e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012e8:	bf00      	nop
 80012ea:	e7fd      	b.n	80012e8 <Error_Handler+0x8>

080012ec <InitPT>:

extern void Error_Handler(void);


void InitPT(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
    if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, N_ADC_CH) != HAL_OK)
 80012f0:	220d      	movs	r2, #13
 80012f2:	4905      	ldr	r1, [pc, #20]	@ (8001308 <InitPT+0x1c>)
 80012f4:	4805      	ldr	r0, [pc, #20]	@ (800130c <InitPT+0x20>)
 80012f6:	f002 fab3 	bl	8003860 <HAL_ADC_Start_DMA>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <InitPT+0x18>
    {
        Error_Handler();
 8001300:	f7ff ffee 	bl	80012e0 <Error_Handler>
    }
}
 8001304:	bf00      	nop
 8001306:	bd80      	pop	{r7, pc}
 8001308:	24000384 	.word	0x24000384
 800130c:	240000b8 	.word	0x240000b8

08001310 <GetADCRaw>:

void GetADCRaw(uint16_t* buf)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
	memcpy((void*)buf, (void*)adc_buffer, sizeof(uint16_t)*N_ADC_CH);
 8001318:	221a      	movs	r2, #26
 800131a:	4904      	ldr	r1, [pc, #16]	@ (800132c <GetADCRaw+0x1c>)
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f00e fbba 	bl	800fa96 <memcpy>
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	24000384 	.word	0x24000384

08001330 <SVUpdate>:

#include "solenoidvalve.h"
#include <stdint.h>

void SVUpdate(uint8_t* ch)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i<MAX_SV_NUM; i++) {
 8001338:	2300      	movs	r3, #0
 800133a:	73fb      	strb	r3, [r7, #15]
 800133c:	e0d1      	b.n	80014e2 <SVUpdate+0x1b2>
		switch(i) {
 800133e:	7bfb      	ldrb	r3, [r7, #15]
 8001340:	2b09      	cmp	r3, #9
 8001342:	f200 80ca 	bhi.w	80014da <SVUpdate+0x1aa>
 8001346:	a201      	add	r2, pc, #4	@ (adr r2, 800134c <SVUpdate+0x1c>)
 8001348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800134c:	08001375 	.word	0x08001375
 8001350:	08001395 	.word	0x08001395
 8001354:	080013b7 	.word	0x080013b7
 8001358:	080013d9 	.word	0x080013d9
 800135c:	080013fb 	.word	0x080013fb
 8001360:	08001421 	.word	0x08001421
 8001364:	08001447 	.word	0x08001447
 8001368:	0800146d 	.word	0x0800146d
 800136c:	08001493 	.word	0x08001493
 8001370:	080014b5 	.word	0x080014b5
		case 0: // SV CH1
			if (ch[0] == 0) {
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d105      	bne.n	8001388 <SVUpdate+0x58>
				HAL_GPIO_WritePin(SV_CH1_PORT, SV_CH1_GPIO, GPIO_PIN_RESET);
 800137c:	2200      	movs	r2, #0
 800137e:	2101      	movs	r1, #1
 8001380:	485c      	ldr	r0, [pc, #368]	@ (80014f4 <SVUpdate+0x1c4>)
 8001382:	f006 fd61 	bl	8007e48 <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(SV_CH1_PORT, SV_CH1_GPIO, GPIO_PIN_SET);
			}
			break;
 8001386:	e0a9      	b.n	80014dc <SVUpdate+0x1ac>
				HAL_GPIO_WritePin(SV_CH1_PORT, SV_CH1_GPIO, GPIO_PIN_SET);
 8001388:	2201      	movs	r2, #1
 800138a:	2101      	movs	r1, #1
 800138c:	4859      	ldr	r0, [pc, #356]	@ (80014f4 <SVUpdate+0x1c4>)
 800138e:	f006 fd5b 	bl	8007e48 <HAL_GPIO_WritePin>
			break;
 8001392:	e0a3      	b.n	80014dc <SVUpdate+0x1ac>
		case 1:
			if (ch[1] == 0) {
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	3301      	adds	r3, #1
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d105      	bne.n	80013aa <SVUpdate+0x7a>
				HAL_GPIO_WritePin(SV_CH2_PORT, SV_CH2_GPIO, GPIO_PIN_RESET);
 800139e:	2200      	movs	r2, #0
 80013a0:	2108      	movs	r1, #8
 80013a2:	4854      	ldr	r0, [pc, #336]	@ (80014f4 <SVUpdate+0x1c4>)
 80013a4:	f006 fd50 	bl	8007e48 <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(SV_CH2_PORT, SV_CH2_GPIO, GPIO_PIN_SET);
			}
			break;
 80013a8:	e098      	b.n	80014dc <SVUpdate+0x1ac>
				HAL_GPIO_WritePin(SV_CH2_PORT, SV_CH2_GPIO, GPIO_PIN_SET);
 80013aa:	2201      	movs	r2, #1
 80013ac:	2108      	movs	r1, #8
 80013ae:	4851      	ldr	r0, [pc, #324]	@ (80014f4 <SVUpdate+0x1c4>)
 80013b0:	f006 fd4a 	bl	8007e48 <HAL_GPIO_WritePin>
			break;
 80013b4:	e092      	b.n	80014dc <SVUpdate+0x1ac>
		case 2:
			if (ch[2] == 0) {
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	3302      	adds	r3, #2
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d105      	bne.n	80013cc <SVUpdate+0x9c>
				HAL_GPIO_WritePin(SV_CH3_PORT, SV_CH3_GPIO, GPIO_PIN_RESET);
 80013c0:	2200      	movs	r2, #0
 80013c2:	2110      	movs	r1, #16
 80013c4:	484b      	ldr	r0, [pc, #300]	@ (80014f4 <SVUpdate+0x1c4>)
 80013c6:	f006 fd3f 	bl	8007e48 <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(SV_CH3_PORT, SV_CH3_GPIO, GPIO_PIN_SET);
			}
			break;
 80013ca:	e087      	b.n	80014dc <SVUpdate+0x1ac>
				HAL_GPIO_WritePin(SV_CH3_PORT, SV_CH3_GPIO, GPIO_PIN_SET);
 80013cc:	2201      	movs	r2, #1
 80013ce:	2110      	movs	r1, #16
 80013d0:	4848      	ldr	r0, [pc, #288]	@ (80014f4 <SVUpdate+0x1c4>)
 80013d2:	f006 fd39 	bl	8007e48 <HAL_GPIO_WritePin>
			break;
 80013d6:	e081      	b.n	80014dc <SVUpdate+0x1ac>
		case 3:
			if (ch[3] == 0) {
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	3303      	adds	r3, #3
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d105      	bne.n	80013ee <SVUpdate+0xbe>
				HAL_GPIO_WritePin(SV_CH4_PORT, SV_CH4_GPIO, GPIO_PIN_RESET);
 80013e2:	2200      	movs	r2, #0
 80013e4:	2180      	movs	r1, #128	@ 0x80
 80013e6:	4843      	ldr	r0, [pc, #268]	@ (80014f4 <SVUpdate+0x1c4>)
 80013e8:	f006 fd2e 	bl	8007e48 <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(SV_CH4_PORT, SV_CH4_GPIO, GPIO_PIN_SET);
			}
			break;
 80013ec:	e076      	b.n	80014dc <SVUpdate+0x1ac>
				HAL_GPIO_WritePin(SV_CH4_PORT, SV_CH4_GPIO, GPIO_PIN_SET);
 80013ee:	2201      	movs	r2, #1
 80013f0:	2180      	movs	r1, #128	@ 0x80
 80013f2:	4840      	ldr	r0, [pc, #256]	@ (80014f4 <SVUpdate+0x1c4>)
 80013f4:	f006 fd28 	bl	8007e48 <HAL_GPIO_WritePin>
			break;
 80013f8:	e070      	b.n	80014dc <SVUpdate+0x1ac>
		case 4:
			if (ch[4] == 0) {
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	3304      	adds	r3, #4
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d106      	bne.n	8001412 <SVUpdate+0xe2>
				HAL_GPIO_WritePin(SV_CH5_PORT, SV_CH5_GPIO, GPIO_PIN_RESET);
 8001404:	2200      	movs	r2, #0
 8001406:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800140a:	483a      	ldr	r0, [pc, #232]	@ (80014f4 <SVUpdate+0x1c4>)
 800140c:	f006 fd1c 	bl	8007e48 <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(SV_CH5_PORT, SV_CH5_GPIO, GPIO_PIN_SET);
			}
			break;
 8001410:	e064      	b.n	80014dc <SVUpdate+0x1ac>
				HAL_GPIO_WritePin(SV_CH5_PORT, SV_CH5_GPIO, GPIO_PIN_SET);
 8001412:	2201      	movs	r2, #1
 8001414:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001418:	4836      	ldr	r0, [pc, #216]	@ (80014f4 <SVUpdate+0x1c4>)
 800141a:	f006 fd15 	bl	8007e48 <HAL_GPIO_WritePin>
			break;
 800141e:	e05d      	b.n	80014dc <SVUpdate+0x1ac>
		case 5:
			if (ch[5] == 0) {
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	3305      	adds	r3, #5
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d106      	bne.n	8001438 <SVUpdate+0x108>
				HAL_GPIO_WritePin(SV_CH6_PORT, SV_CH6_GPIO, GPIO_PIN_RESET);
 800142a:	2200      	movs	r2, #0
 800142c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001430:	4830      	ldr	r0, [pc, #192]	@ (80014f4 <SVUpdate+0x1c4>)
 8001432:	f006 fd09 	bl	8007e48 <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(SV_CH6_PORT, SV_CH6_GPIO, GPIO_PIN_SET);
			}
			break;
 8001436:	e051      	b.n	80014dc <SVUpdate+0x1ac>
				HAL_GPIO_WritePin(SV_CH6_PORT, SV_CH6_GPIO, GPIO_PIN_SET);
 8001438:	2201      	movs	r2, #1
 800143a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800143e:	482d      	ldr	r0, [pc, #180]	@ (80014f4 <SVUpdate+0x1c4>)
 8001440:	f006 fd02 	bl	8007e48 <HAL_GPIO_WritePin>
			break;
 8001444:	e04a      	b.n	80014dc <SVUpdate+0x1ac>
		case 6:
			if (ch[6] == 0) {
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	3306      	adds	r3, #6
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d106      	bne.n	800145e <SVUpdate+0x12e>
				HAL_GPIO_WritePin(SV_CH7_PORT, SV_CH7_GPIO, GPIO_PIN_RESET);
 8001450:	2200      	movs	r2, #0
 8001452:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001456:	4827      	ldr	r0, [pc, #156]	@ (80014f4 <SVUpdate+0x1c4>)
 8001458:	f006 fcf6 	bl	8007e48 <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(SV_CH7_PORT, SV_CH7_GPIO, GPIO_PIN_SET);
			}
			break;
 800145c:	e03e      	b.n	80014dc <SVUpdate+0x1ac>
				HAL_GPIO_WritePin(SV_CH7_PORT, SV_CH7_GPIO, GPIO_PIN_SET);
 800145e:	2201      	movs	r2, #1
 8001460:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001464:	4823      	ldr	r0, [pc, #140]	@ (80014f4 <SVUpdate+0x1c4>)
 8001466:	f006 fcef 	bl	8007e48 <HAL_GPIO_WritePin>
			break;
 800146a:	e037      	b.n	80014dc <SVUpdate+0x1ac>
		case 7:
			if (ch[7] == 0) {
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	3307      	adds	r3, #7
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d106      	bne.n	8001484 <SVUpdate+0x154>
				HAL_GPIO_WritePin(SV_CH8_PORT, SV_CH8_GPIO, GPIO_PIN_RESET);
 8001476:	2200      	movs	r2, #0
 8001478:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800147c:	481d      	ldr	r0, [pc, #116]	@ (80014f4 <SVUpdate+0x1c4>)
 800147e:	f006 fce3 	bl	8007e48 <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(SV_CH8_PORT, SV_CH8_GPIO, GPIO_PIN_SET);
			}
			break;
 8001482:	e02b      	b.n	80014dc <SVUpdate+0x1ac>
				HAL_GPIO_WritePin(SV_CH8_PORT, SV_CH8_GPIO, GPIO_PIN_SET);
 8001484:	2201      	movs	r2, #1
 8001486:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800148a:	481a      	ldr	r0, [pc, #104]	@ (80014f4 <SVUpdate+0x1c4>)
 800148c:	f006 fcdc 	bl	8007e48 <HAL_GPIO_WritePin>
			break;
 8001490:	e024      	b.n	80014dc <SVUpdate+0x1ac>
		case 8:
			if (ch[8] == 0) {
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	3308      	adds	r3, #8
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d105      	bne.n	80014a8 <SVUpdate+0x178>
				HAL_GPIO_WritePin(SV_CH9_PORT, SV_CH9_GPIO, GPIO_PIN_RESET);
 800149c:	2200      	movs	r2, #0
 800149e:	2140      	movs	r1, #64	@ 0x40
 80014a0:	4815      	ldr	r0, [pc, #84]	@ (80014f8 <SVUpdate+0x1c8>)
 80014a2:	f006 fcd1 	bl	8007e48 <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(SV_CH9_PORT, SV_CH9_GPIO, GPIO_PIN_SET);
			}
			break;
 80014a6:	e019      	b.n	80014dc <SVUpdate+0x1ac>
				HAL_GPIO_WritePin(SV_CH9_PORT, SV_CH9_GPIO, GPIO_PIN_SET);
 80014a8:	2201      	movs	r2, #1
 80014aa:	2140      	movs	r1, #64	@ 0x40
 80014ac:	4812      	ldr	r0, [pc, #72]	@ (80014f8 <SVUpdate+0x1c8>)
 80014ae:	f006 fccb 	bl	8007e48 <HAL_GPIO_WritePin>
			break;
 80014b2:	e013      	b.n	80014dc <SVUpdate+0x1ac>
		case 9:
			if (ch[9] == 0) {
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	3309      	adds	r3, #9
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d106      	bne.n	80014cc <SVUpdate+0x19c>
				HAL_GPIO_WritePin(SV_CH10_PORT, SV_CH10_GPIO, GPIO_PIN_RESET);
 80014be:	2200      	movs	r2, #0
 80014c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014c4:	480c      	ldr	r0, [pc, #48]	@ (80014f8 <SVUpdate+0x1c8>)
 80014c6:	f006 fcbf 	bl	8007e48 <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(SV_CH10_PORT, SV_CH10_GPIO, GPIO_PIN_SET);
			}
			break;
 80014ca:	e007      	b.n	80014dc <SVUpdate+0x1ac>
				HAL_GPIO_WritePin(SV_CH10_PORT, SV_CH10_GPIO, GPIO_PIN_SET);
 80014cc:	2201      	movs	r2, #1
 80014ce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014d2:	4809      	ldr	r0, [pc, #36]	@ (80014f8 <SVUpdate+0x1c8>)
 80014d4:	f006 fcb8 	bl	8007e48 <HAL_GPIO_WritePin>
			break;
 80014d8:	e000      	b.n	80014dc <SVUpdate+0x1ac>
		default:
			break;
 80014da:	bf00      	nop
	for (uint8_t i = 0; i<MAX_SV_NUM; i++) {
 80014dc:	7bfb      	ldrb	r3, [r7, #15]
 80014de:	3301      	adds	r3, #1
 80014e0:	73fb      	strb	r3, [r7, #15]
 80014e2:	7bfb      	ldrb	r3, [r7, #15]
 80014e4:	2b09      	cmp	r3, #9
 80014e6:	f67f af2a 	bls.w	800133e <SVUpdate+0xe>
		}
	}

}
 80014ea:	bf00      	nop
 80014ec:	bf00      	nop
 80014ee:	3710      	adds	r7, #16
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	58021000 	.word	0x58021000
 80014f8:	58020800 	.word	0x58020800

080014fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001502:	4b0a      	ldr	r3, [pc, #40]	@ (800152c <HAL_MspInit+0x30>)
 8001504:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001508:	4a08      	ldr	r2, [pc, #32]	@ (800152c <HAL_MspInit+0x30>)
 800150a:	f043 0302 	orr.w	r3, r3, #2
 800150e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001512:	4b06      	ldr	r3, [pc, #24]	@ (800152c <HAL_MspInit+0x30>)
 8001514:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001518:	f003 0302 	and.w	r3, r3, #2
 800151c:	607b      	str	r3, [r7, #4]
 800151e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001520:	bf00      	nop
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	58024400 	.word	0x58024400

08001530 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b0bc      	sub	sp, #240	@ 0xf0
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001538:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001548:	f107 0318 	add.w	r3, r7, #24
 800154c:	22c0      	movs	r2, #192	@ 0xc0
 800154e:	2100      	movs	r1, #0
 8001550:	4618      	mov	r0, r3
 8001552:	f00e f9c9 	bl	800f8e8 <memset>
  if(hadc->Instance==ADC1)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a67      	ldr	r2, [pc, #412]	@ (80016f8 <HAL_ADC_MspInit+0x1c8>)
 800155c:	4293      	cmp	r3, r2
 800155e:	f040 80c6 	bne.w	80016ee <HAL_ADC_MspInit+0x1be>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001562:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001566:	f04f 0300 	mov.w	r3, #0
 800156a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 800156e:	2304      	movs	r3, #4
 8001570:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 8001572:	230a      	movs	r3, #10
 8001574:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001576:	2302      	movs	r3, #2
 8001578:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800157a:	2302      	movs	r3, #2
 800157c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800157e:	2302      	movs	r3, #2
 8001580:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001582:	23c0      	movs	r3, #192	@ 0xc0
 8001584:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001586:	2320      	movs	r3, #32
 8001588:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0.0;
 800158a:	2300      	movs	r3, #0
 800158c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800158e:	2300      	movs	r3, #0
 8001590:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001594:	f107 0318 	add.w	r3, r7, #24
 8001598:	4618      	mov	r0, r3
 800159a:	f007 fcf7 	bl	8008f8c <HAL_RCCEx_PeriphCLKConfig>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 80015a4:	f7ff fe9c 	bl	80012e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80015a8:	4b54      	ldr	r3, [pc, #336]	@ (80016fc <HAL_ADC_MspInit+0x1cc>)
 80015aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80015ae:	4a53      	ldr	r2, [pc, #332]	@ (80016fc <HAL_ADC_MspInit+0x1cc>)
 80015b0:	f043 0320 	orr.w	r3, r3, #32
 80015b4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80015b8:	4b50      	ldr	r3, [pc, #320]	@ (80016fc <HAL_ADC_MspInit+0x1cc>)
 80015ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80015be:	f003 0320 	and.w	r3, r3, #32
 80015c2:	617b      	str	r3, [r7, #20]
 80015c4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015c6:	4b4d      	ldr	r3, [pc, #308]	@ (80016fc <HAL_ADC_MspInit+0x1cc>)
 80015c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015cc:	4a4b      	ldr	r2, [pc, #300]	@ (80016fc <HAL_ADC_MspInit+0x1cc>)
 80015ce:	f043 0304 	orr.w	r3, r3, #4
 80015d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015d6:	4b49      	ldr	r3, [pc, #292]	@ (80016fc <HAL_ADC_MspInit+0x1cc>)
 80015d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015dc:	f003 0304 	and.w	r3, r3, #4
 80015e0:	613b      	str	r3, [r7, #16]
 80015e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e4:	4b45      	ldr	r3, [pc, #276]	@ (80016fc <HAL_ADC_MspInit+0x1cc>)
 80015e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015ea:	4a44      	ldr	r2, [pc, #272]	@ (80016fc <HAL_ADC_MspInit+0x1cc>)
 80015ec:	f043 0301 	orr.w	r3, r3, #1
 80015f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015f4:	4b41      	ldr	r3, [pc, #260]	@ (80016fc <HAL_ADC_MspInit+0x1cc>)
 80015f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001602:	4b3e      	ldr	r3, [pc, #248]	@ (80016fc <HAL_ADC_MspInit+0x1cc>)
 8001604:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001608:	4a3c      	ldr	r2, [pc, #240]	@ (80016fc <HAL_ADC_MspInit+0x1cc>)
 800160a:	f043 0320 	orr.w	r3, r3, #32
 800160e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001612:	4b3a      	ldr	r3, [pc, #232]	@ (80016fc <HAL_ADC_MspInit+0x1cc>)
 8001614:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001618:	f003 0320 	and.w	r3, r3, #32
 800161c:	60bb      	str	r3, [r7, #8]
 800161e:	68bb      	ldr	r3, [r7, #8]
    PA7     ------> ADC1_INP7
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001620:	2333      	movs	r3, #51	@ 0x33
 8001622:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001626:	2303      	movs	r3, #3
 8001628:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001632:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001636:	4619      	mov	r1, r3
 8001638:	4831      	ldr	r0, [pc, #196]	@ (8001700 <HAL_ADC_MspInit+0x1d0>)
 800163a:	f006 fa55 	bl	8007ae8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800163e:	23ff      	movs	r3, #255	@ 0xff
 8001640:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001644:	2303      	movs	r3, #3
 8001646:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001650:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001654:	4619      	mov	r1, r3
 8001656:	482b      	ldr	r0, [pc, #172]	@ (8001704 <HAL_ADC_MspInit+0x1d4>)
 8001658:	f006 fa46 	bl	8007ae8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800165c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001660:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001664:	2303      	movs	r3, #3
 8001666:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	2300      	movs	r3, #0
 800166c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001670:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001674:	4619      	mov	r1, r3
 8001676:	4824      	ldr	r0, [pc, #144]	@ (8001708 <HAL_ADC_MspInit+0x1d8>)
 8001678:	f006 fa36 	bl	8007ae8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 800167c:	4b23      	ldr	r3, [pc, #140]	@ (800170c <HAL_ADC_MspInit+0x1dc>)
 800167e:	4a24      	ldr	r2, [pc, #144]	@ (8001710 <HAL_ADC_MspInit+0x1e0>)
 8001680:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001682:	4b22      	ldr	r3, [pc, #136]	@ (800170c <HAL_ADC_MspInit+0x1dc>)
 8001684:	2209      	movs	r2, #9
 8001686:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001688:	4b20      	ldr	r3, [pc, #128]	@ (800170c <HAL_ADC_MspInit+0x1dc>)
 800168a:	2200      	movs	r2, #0
 800168c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800168e:	4b1f      	ldr	r3, [pc, #124]	@ (800170c <HAL_ADC_MspInit+0x1dc>)
 8001690:	2200      	movs	r2, #0
 8001692:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001694:	4b1d      	ldr	r3, [pc, #116]	@ (800170c <HAL_ADC_MspInit+0x1dc>)
 8001696:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800169a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800169c:	4b1b      	ldr	r3, [pc, #108]	@ (800170c <HAL_ADC_MspInit+0x1dc>)
 800169e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80016a2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016a4:	4b19      	ldr	r3, [pc, #100]	@ (800170c <HAL_ADC_MspInit+0x1dc>)
 80016a6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016aa:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80016ac:	4b17      	ldr	r3, [pc, #92]	@ (800170c <HAL_ADC_MspInit+0x1dc>)
 80016ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016b2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80016b4:	4b15      	ldr	r3, [pc, #84]	@ (800170c <HAL_ADC_MspInit+0x1dc>)
 80016b6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80016ba:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016bc:	4b13      	ldr	r3, [pc, #76]	@ (800170c <HAL_ADC_MspInit+0x1dc>)
 80016be:	2200      	movs	r2, #0
 80016c0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80016c2:	4812      	ldr	r0, [pc, #72]	@ (800170c <HAL_ADC_MspInit+0x1dc>)
 80016c4:	f003 fb64 	bl	8004d90 <HAL_DMA_Init>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <HAL_ADC_MspInit+0x1a2>
    {
      Error_Handler();
 80016ce:	f7ff fe07 	bl	80012e0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a0d      	ldr	r2, [pc, #52]	@ (800170c <HAL_ADC_MspInit+0x1dc>)
 80016d6:	64da      	str	r2, [r3, #76]	@ 0x4c
 80016d8:	4a0c      	ldr	r2, [pc, #48]	@ (800170c <HAL_ADC_MspInit+0x1dc>)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80016de:	2200      	movs	r2, #0
 80016e0:	2100      	movs	r1, #0
 80016e2:	2012      	movs	r0, #18
 80016e4:	f003 fb0d 	bl	8004d02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80016e8:	2012      	movs	r0, #18
 80016ea:	f003 fb24 	bl	8004d36 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80016ee:	bf00      	nop
 80016f0:	37f0      	adds	r7, #240	@ 0xf0
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40022000 	.word	0x40022000
 80016fc:	58024400 	.word	0x58024400
 8001700:	58020800 	.word	0x58020800
 8001704:	58020000 	.word	0x58020000
 8001708:	58021400 	.word	0x58021400
 800170c:	2400011c 	.word	0x2400011c
 8001710:	40020010 	.word	0x40020010

08001714 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b0ba      	sub	sp, #232	@ 0xe8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800172c:	f107 0310 	add.w	r3, r7, #16
 8001730:	22c0      	movs	r2, #192	@ 0xc0
 8001732:	2100      	movs	r1, #0
 8001734:	4618      	mov	r0, r3
 8001736:	f00e f8d7 	bl	800f8e8 <memset>
  if(hspi->Instance==SPI1)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a26      	ldr	r2, [pc, #152]	@ (80017d8 <HAL_SPI_MspInit+0xc4>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d145      	bne.n	80017d0 <HAL_SPI_MspInit+0xbc>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001744:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001748:	f04f 0300 	mov.w	r3, #0
 800174c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001750:	2300      	movs	r3, #0
 8001752:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001754:	f107 0310 	add.w	r3, r7, #16
 8001758:	4618      	mov	r0, r3
 800175a:	f007 fc17 	bl	8008f8c <HAL_RCCEx_PeriphCLKConfig>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001764:	f7ff fdbc 	bl	80012e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001768:	4b1c      	ldr	r3, [pc, #112]	@ (80017dc <HAL_SPI_MspInit+0xc8>)
 800176a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800176e:	4a1b      	ldr	r2, [pc, #108]	@ (80017dc <HAL_SPI_MspInit+0xc8>)
 8001770:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001774:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001778:	4b18      	ldr	r3, [pc, #96]	@ (80017dc <HAL_SPI_MspInit+0xc8>)
 800177a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800177e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001786:	4b15      	ldr	r3, [pc, #84]	@ (80017dc <HAL_SPI_MspInit+0xc8>)
 8001788:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800178c:	4a13      	ldr	r2, [pc, #76]	@ (80017dc <HAL_SPI_MspInit+0xc8>)
 800178e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001792:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001796:	4b11      	ldr	r3, [pc, #68]	@ (80017dc <HAL_SPI_MspInit+0xc8>)
 8001798:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800179c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017a0:	60bb      	str	r3, [r7, #8]
 80017a2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PG9     ------> SPI1_MISO
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80017a4:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80017a8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ac:	2302      	movs	r3, #2
 80017ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b8:	2300      	movs	r3, #0
 80017ba:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017be:	2305      	movs	r3, #5
 80017c0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017c4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80017c8:	4619      	mov	r1, r3
 80017ca:	4805      	ldr	r0, [pc, #20]	@ (80017e0 <HAL_SPI_MspInit+0xcc>)
 80017cc:	f006 f98c 	bl	8007ae8 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80017d0:	bf00      	nop
 80017d2:	37e8      	adds	r7, #232	@ 0xe8
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40013000 	.word	0x40013000
 80017dc:	58024400 	.word	0x58024400
 80017e0:	58021800 	.word	0x58021800

080017e4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017f4:	d116      	bne.n	8001824 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017f6:	4b0d      	ldr	r3, [pc, #52]	@ (800182c <HAL_TIM_Base_MspInit+0x48>)
 80017f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80017fc:	4a0b      	ldr	r2, [pc, #44]	@ (800182c <HAL_TIM_Base_MspInit+0x48>)
 80017fe:	f043 0301 	orr.w	r3, r3, #1
 8001802:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001806:	4b09      	ldr	r3, [pc, #36]	@ (800182c <HAL_TIM_Base_MspInit+0x48>)
 8001808:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800180c:	f003 0301 	and.w	r3, r3, #1
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001814:	2200      	movs	r2, #0
 8001816:	2100      	movs	r1, #0
 8001818:	201c      	movs	r0, #28
 800181a:	f003 fa72 	bl	8004d02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800181e:	201c      	movs	r0, #28
 8001820:	f003 fa89 	bl	8004d36 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001824:	bf00      	nop
 8001826:	3710      	adds	r7, #16
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	58024400 	.word	0x58024400

08001830 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b0ba      	sub	sp, #232	@ 0xe8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001838:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
 8001846:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001848:	f107 0310 	add.w	r3, r7, #16
 800184c:	22c0      	movs	r2, #192	@ 0xc0
 800184e:	2100      	movs	r1, #0
 8001850:	4618      	mov	r0, r3
 8001852:	f00e f849 	bl	800f8e8 <memset>
  if(huart->Instance==UART4)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a2b      	ldr	r2, [pc, #172]	@ (8001908 <HAL_UART_MspInit+0xd8>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d14e      	bne.n	80018fe <HAL_UART_MspInit+0xce>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001860:	f04f 0202 	mov.w	r2, #2
 8001864:	f04f 0300 	mov.w	r3, #0
 8001868:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800186c:	2300      	movs	r3, #0
 800186e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001872:	f107 0310 	add.w	r3, r7, #16
 8001876:	4618      	mov	r0, r3
 8001878:	f007 fb88 	bl	8008f8c <HAL_RCCEx_PeriphCLKConfig>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001882:	f7ff fd2d 	bl	80012e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001886:	4b21      	ldr	r3, [pc, #132]	@ (800190c <HAL_UART_MspInit+0xdc>)
 8001888:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800188c:	4a1f      	ldr	r2, [pc, #124]	@ (800190c <HAL_UART_MspInit+0xdc>)
 800188e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001892:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001896:	4b1d      	ldr	r3, [pc, #116]	@ (800190c <HAL_UART_MspInit+0xdc>)
 8001898:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800189c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018a4:	4b19      	ldr	r3, [pc, #100]	@ (800190c <HAL_UART_MspInit+0xdc>)
 80018a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018aa:	4a18      	ldr	r2, [pc, #96]	@ (800190c <HAL_UART_MspInit+0xdc>)
 80018ac:	f043 0304 	orr.w	r3, r3, #4
 80018b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018b4:	4b15      	ldr	r3, [pc, #84]	@ (800190c <HAL_UART_MspInit+0xdc>)
 80018b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018ba:	f003 0304 	and.w	r3, r3, #4
 80018be:	60bb      	str	r3, [r7, #8]
 80018c0:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80018c2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80018c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ca:	2302      	movs	r3, #2
 80018cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d6:	2300      	movs	r3, #0
 80018d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80018dc:	2308      	movs	r3, #8
 80018de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018e2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80018e6:	4619      	mov	r1, r3
 80018e8:	4809      	ldr	r0, [pc, #36]	@ (8001910 <HAL_UART_MspInit+0xe0>)
 80018ea:	f006 f8fd 	bl	8007ae8 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80018ee:	2200      	movs	r2, #0
 80018f0:	2100      	movs	r1, #0
 80018f2:	2034      	movs	r0, #52	@ 0x34
 80018f4:	f003 fa05 	bl	8004d02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80018f8:	2034      	movs	r0, #52	@ 0x34
 80018fa:	f003 fa1c 	bl	8004d36 <HAL_NVIC_EnableIRQ>

    /* USER CODE END UART4_MspInit 1 */

  }

}
 80018fe:	bf00      	nop
 8001900:	37e8      	adds	r7, #232	@ 0xe8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40004c00 	.word	0x40004c00
 800190c:	58024400 	.word	0x58024400
 8001910:	58020800 	.word	0x58020800

08001914 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001918:	bf00      	nop
 800191a:	e7fd      	b.n	8001918 <NMI_Handler+0x4>

0800191c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001920:	bf00      	nop
 8001922:	e7fd      	b.n	8001920 <HardFault_Handler+0x4>

08001924 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001928:	bf00      	nop
 800192a:	e7fd      	b.n	8001928 <MemManage_Handler+0x4>

0800192c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001930:	bf00      	nop
 8001932:	e7fd      	b.n	8001930 <BusFault_Handler+0x4>

08001934 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001938:	bf00      	nop
 800193a:	e7fd      	b.n	8001938 <UsageFault_Handler+0x4>

0800193c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001940:	bf00      	nop
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800194a:	b480      	push	{r7}
 800194c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800196a:	f001 fb59 	bl	8003020 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
	...

08001974 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001978:	4802      	ldr	r0, [pc, #8]	@ (8001984 <DMA1_Stream0_IRQHandler+0x10>)
 800197a:	f004 fd33 	bl	80063e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800197e:	bf00      	nop
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	2400011c 	.word	0x2400011c

08001988 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800198c:	4802      	ldr	r0, [pc, #8]	@ (8001998 <ADC_IRQHandler+0x10>)
 800198e:	f002 f82b 	bl	80039e8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	240000b8 	.word	0x240000b8

0800199c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019a0:	4802      	ldr	r0, [pc, #8]	@ (80019ac <TIM2_IRQHandler+0x10>)
 80019a2:	f00a fd11 	bl	800c3c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	2400021c 	.word	0x2400021c

080019b0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 80019b4:	2000      	movs	r0, #0
 80019b6:	f001 f9d1 	bl	8002d5c <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80019ba:	bf00      	nop
 80019bc:	bd80      	pop	{r7, pc}
	...

080019c0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80019c4:	4802      	ldr	r0, [pc, #8]	@ (80019d0 <UART4_IRQHandler+0x10>)
 80019c6:	f00b fa3b 	bl	800ce40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	24000268 	.word	0x24000268

080019d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  return 1;
 80019d8:	2301      	movs	r3, #1
}
 80019da:	4618      	mov	r0, r3
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <_kill>:

int _kill(int pid, int sig)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019ee:	f00e f825 	bl	800fa3c <__errno>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2216      	movs	r2, #22
 80019f6:	601a      	str	r2, [r3, #0]
  return -1;
 80019f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3708      	adds	r7, #8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <_exit>:

void _exit (int status)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f7ff ffe7 	bl	80019e4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a16:	bf00      	nop
 8001a18:	e7fd      	b.n	8001a16 <_exit+0x12>

08001a1a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b086      	sub	sp, #24
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	60f8      	str	r0, [r7, #12]
 8001a22:	60b9      	str	r1, [r7, #8]
 8001a24:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a26:	2300      	movs	r3, #0
 8001a28:	617b      	str	r3, [r7, #20]
 8001a2a:	e00a      	b.n	8001a42 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a2c:	f3af 8000 	nop.w
 8001a30:	4601      	mov	r1, r0
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	1c5a      	adds	r2, r3, #1
 8001a36:	60ba      	str	r2, [r7, #8]
 8001a38:	b2ca      	uxtb	r2, r1
 8001a3a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	617b      	str	r3, [r7, #20]
 8001a42:	697a      	ldr	r2, [r7, #20]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	dbf0      	blt.n	8001a2c <_read+0x12>
  }

  return len;
 8001a4a:	687b      	ldr	r3, [r7, #4]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3718      	adds	r7, #24
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a60:	2300      	movs	r3, #0
 8001a62:	617b      	str	r3, [r7, #20]
 8001a64:	e009      	b.n	8001a7a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	1c5a      	adds	r2, r3, #1
 8001a6a:	60ba      	str	r2, [r7, #8]
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f001 f9e8 	bl	8002e44 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	3301      	adds	r3, #1
 8001a78:	617b      	str	r3, [r7, #20]
 8001a7a:	697a      	ldr	r2, [r7, #20]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	dbf1      	blt.n	8001a66 <_write+0x12>
  }
  return len;
 8001a82:	687b      	ldr	r3, [r7, #4]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3718      	adds	r7, #24
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <_close>:

int _close(int file)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ab4:	605a      	str	r2, [r3, #4]
  return 0;
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <_isatty>:

int _isatty(int file)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001acc:	2301      	movs	r3, #1
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr

08001ada <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ada:	b480      	push	{r7}
 8001adc:	b085      	sub	sp, #20
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	60f8      	str	r0, [r7, #12]
 8001ae2:	60b9      	str	r1, [r7, #8]
 8001ae4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3714      	adds	r7, #20
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001afc:	4a14      	ldr	r2, [pc, #80]	@ (8001b50 <_sbrk+0x5c>)
 8001afe:	4b15      	ldr	r3, [pc, #84]	@ (8001b54 <_sbrk+0x60>)
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b08:	4b13      	ldr	r3, [pc, #76]	@ (8001b58 <_sbrk+0x64>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d102      	bne.n	8001b16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b10:	4b11      	ldr	r3, [pc, #68]	@ (8001b58 <_sbrk+0x64>)
 8001b12:	4a12      	ldr	r2, [pc, #72]	@ (8001b5c <_sbrk+0x68>)
 8001b14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b16:	4b10      	ldr	r3, [pc, #64]	@ (8001b58 <_sbrk+0x64>)
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d207      	bcs.n	8001b34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b24:	f00d ff8a 	bl	800fa3c <__errno>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	220c      	movs	r2, #12
 8001b2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b32:	e009      	b.n	8001b48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b34:	4b08      	ldr	r3, [pc, #32]	@ (8001b58 <_sbrk+0x64>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b3a:	4b07      	ldr	r3, [pc, #28]	@ (8001b58 <_sbrk+0x64>)
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4413      	add	r3, r2
 8001b42:	4a05      	ldr	r2, [pc, #20]	@ (8001b58 <_sbrk+0x64>)
 8001b44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b46:	68fb      	ldr	r3, [r7, #12]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3718      	adds	r7, #24
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	24080000 	.word	0x24080000
 8001b54:	00000400 	.word	0x00000400
 8001b58:	240003a0 	.word	0x240003a0
 8001b5c:	240006a0 	.word	0x240006a0

08001b60 <MAX31855_CS_Enable>:

extern SPI_HandleTypeDef hspi1; // SPI1 핸들러 외부 선언

// CS 핀을 Low로 설정 (SPI 통신 시작)
void MAX31855_CS_Enable(uint8_t ch)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	71fb      	strb	r3, [r7, #7]
	switch(ch) {
 8001b6a:	79fb      	ldrb	r3, [r7, #7]
 8001b6c:	2b0b      	cmp	r3, #11
 8001b6e:	f200 8329 	bhi.w	80021c4 <MAX31855_CS_Enable+0x664>
 8001b72:	a201      	add	r2, pc, #4	@ (adr r2, 8001b78 <MAX31855_CS_Enable+0x18>)
 8001b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b78:	08001ba9 	.word	0x08001ba9
 8001b7c:	08001c2b 	.word	0x08001c2b
 8001b80:	08001cad 	.word	0x08001cad
 8001b84:	08001d2f 	.word	0x08001d2f
 8001b88:	08001db1 	.word	0x08001db1
 8001b8c:	08001e33 	.word	0x08001e33
 8001b90:	08001eb9 	.word	0x08001eb9
 8001b94:	08001f3b 	.word	0x08001f3b
 8001b98:	08001fbd 	.word	0x08001fbd
 8001b9c:	0800203f 	.word	0x0800203f
 8001ba0:	080020c1 	.word	0x080020c1
 8001ba4:	08002143 	.word	0x08002143
	case TC_CH1:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_RESET);
 8001ba8:	2200      	movs	r2, #0
 8001baa:	2101      	movs	r1, #1
 8001bac:	48c1      	ldr	r0, [pc, #772]	@ (8001eb4 <MAX31855_CS_Enable+0x354>)
 8001bae:	f006 f94b 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	2102      	movs	r1, #2
 8001bb6:	48bf      	ldr	r0, [pc, #764]	@ (8001eb4 <MAX31855_CS_Enable+0x354>)
 8001bb8:	f006 f946 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	2104      	movs	r1, #4
 8001bc0:	48bc      	ldr	r0, [pc, #752]	@ (8001eb4 <MAX31855_CS_Enable+0x354>)
 8001bc2:	f006 f941 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	2108      	movs	r1, #8
 8001bca:	48ba      	ldr	r0, [pc, #744]	@ (8001eb4 <MAX31855_CS_Enable+0x354>)
 8001bcc:	f006 f93c 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	2110      	movs	r1, #16
 8001bd4:	48b7      	ldr	r0, [pc, #732]	@ (8001eb4 <MAX31855_CS_Enable+0x354>)
 8001bd6:	f006 f937 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8001bda:	2201      	movs	r2, #1
 8001bdc:	2120      	movs	r1, #32
 8001bde:	48b5      	ldr	r0, [pc, #724]	@ (8001eb4 <MAX31855_CS_Enable+0x354>)
 8001be0:	f006 f932 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8001be4:	2201      	movs	r2, #1
 8001be6:	2140      	movs	r1, #64	@ 0x40
 8001be8:	48b2      	ldr	r0, [pc, #712]	@ (8001eb4 <MAX31855_CS_Enable+0x354>)
 8001bea:	f006 f92d 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8001bee:	2201      	movs	r2, #1
 8001bf0:	2180      	movs	r1, #128	@ 0x80
 8001bf2:	48b0      	ldr	r0, [pc, #704]	@ (8001eb4 <MAX31855_CS_Enable+0x354>)
 8001bf4:	f006 f928 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001bfe:	48ad      	ldr	r0, [pc, #692]	@ (8001eb4 <MAX31855_CS_Enable+0x354>)
 8001c00:	f006 f922 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8001c04:	2201      	movs	r2, #1
 8001c06:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001c0a:	48aa      	ldr	r0, [pc, #680]	@ (8001eb4 <MAX31855_CS_Enable+0x354>)
 8001c0c:	f006 f91c 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8001c10:	2201      	movs	r2, #1
 8001c12:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c16:	48a7      	ldr	r0, [pc, #668]	@ (8001eb4 <MAX31855_CS_Enable+0x354>)
 8001c18:	f006 f916 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001c22:	48a4      	ldr	r0, [pc, #656]	@ (8001eb4 <MAX31855_CS_Enable+0x354>)
 8001c24:	f006 f910 	bl	8007e48 <HAL_GPIO_WritePin>
		break;
 8001c28:	e2cd      	b.n	80021c6 <MAX31855_CS_Enable+0x666>
	case TC_CH2:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	2101      	movs	r1, #1
 8001c2e:	48a1      	ldr	r0, [pc, #644]	@ (8001eb4 <MAX31855_CS_Enable+0x354>)
 8001c30:	f006 f90a 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_RESET);
 8001c34:	2200      	movs	r2, #0
 8001c36:	2102      	movs	r1, #2
 8001c38:	489e      	ldr	r0, [pc, #632]	@ (8001eb4 <MAX31855_CS_Enable+0x354>)
 8001c3a:	f006 f905 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8001c3e:	2201      	movs	r2, #1
 8001c40:	2104      	movs	r1, #4
 8001c42:	489c      	ldr	r0, [pc, #624]	@ (8001eb4 <MAX31855_CS_Enable+0x354>)
 8001c44:	f006 f900 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8001c48:	2201      	movs	r2, #1
 8001c4a:	2108      	movs	r1, #8
 8001c4c:	4899      	ldr	r0, [pc, #612]	@ (8001eb4 <MAX31855_CS_Enable+0x354>)
 8001c4e:	f006 f8fb 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8001c52:	2201      	movs	r2, #1
 8001c54:	2110      	movs	r1, #16
 8001c56:	4897      	ldr	r0, [pc, #604]	@ (8001eb4 <MAX31855_CS_Enable+0x354>)
 8001c58:	f006 f8f6 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	2120      	movs	r1, #32
 8001c60:	4894      	ldr	r0, [pc, #592]	@ (8001eb4 <MAX31855_CS_Enable+0x354>)
 8001c62:	f006 f8f1 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8001c66:	2201      	movs	r2, #1
 8001c68:	2140      	movs	r1, #64	@ 0x40
 8001c6a:	4892      	ldr	r0, [pc, #584]	@ (8001eb4 <MAX31855_CS_Enable+0x354>)
 8001c6c:	f006 f8ec 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8001c70:	2201      	movs	r2, #1
 8001c72:	2180      	movs	r1, #128	@ 0x80
 8001c74:	488f      	ldr	r0, [pc, #572]	@ (8001eb4 <MAX31855_CS_Enable+0x354>)
 8001c76:	f006 f8e7 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001c80:	488c      	ldr	r0, [pc, #560]	@ (8001eb4 <MAX31855_CS_Enable+0x354>)
 8001c82:	f006 f8e1 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8001c86:	2201      	movs	r2, #1
 8001c88:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001c8c:	4889      	ldr	r0, [pc, #548]	@ (8001eb4 <MAX31855_CS_Enable+0x354>)
 8001c8e:	f006 f8db 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8001c92:	2201      	movs	r2, #1
 8001c94:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c98:	4886      	ldr	r0, [pc, #536]	@ (8001eb4 <MAX31855_CS_Enable+0x354>)
 8001c9a:	f006 f8d5 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001ca4:	4883      	ldr	r0, [pc, #524]	@ (8001eb4 <MAX31855_CS_Enable+0x354>)
 8001ca6:	f006 f8cf 	bl	8007e48 <HAL_GPIO_WritePin>
		break;
 8001caa:	e28c      	b.n	80021c6 <MAX31855_CS_Enable+0x666>
	case TC_CH3:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8001cac:	2201      	movs	r2, #1
 8001cae:	2101      	movs	r1, #1
 8001cb0:	4880      	ldr	r0, [pc, #512]	@ (8001eb4 <MAX31855_CS_Enable+0x354>)
 8001cb2:	f006 f8c9 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	2102      	movs	r1, #2
 8001cba:	487e      	ldr	r0, [pc, #504]	@ (8001eb4 <MAX31855_CS_Enable+0x354>)
 8001cbc:	f006 f8c4 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_RESET);
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	2104      	movs	r1, #4
 8001cc4:	487b      	ldr	r0, [pc, #492]	@ (8001eb4 <MAX31855_CS_Enable+0x354>)
 8001cc6:	f006 f8bf 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8001cca:	2201      	movs	r2, #1
 8001ccc:	2108      	movs	r1, #8
 8001cce:	4879      	ldr	r0, [pc, #484]	@ (8001eb4 <MAX31855_CS_Enable+0x354>)
 8001cd0:	f006 f8ba 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	2110      	movs	r1, #16
 8001cd8:	4876      	ldr	r0, [pc, #472]	@ (8001eb4 <MAX31855_CS_Enable+0x354>)
 8001cda:	f006 f8b5 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8001cde:	2201      	movs	r2, #1
 8001ce0:	2120      	movs	r1, #32
 8001ce2:	4874      	ldr	r0, [pc, #464]	@ (8001eb4 <MAX31855_CS_Enable+0x354>)
 8001ce4:	f006 f8b0 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8001ce8:	2201      	movs	r2, #1
 8001cea:	2140      	movs	r1, #64	@ 0x40
 8001cec:	4871      	ldr	r0, [pc, #452]	@ (8001eb4 <MAX31855_CS_Enable+0x354>)
 8001cee:	f006 f8ab 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	2180      	movs	r1, #128	@ 0x80
 8001cf6:	486f      	ldr	r0, [pc, #444]	@ (8001eb4 <MAX31855_CS_Enable+0x354>)
 8001cf8:	f006 f8a6 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001d02:	486c      	ldr	r0, [pc, #432]	@ (8001eb4 <MAX31855_CS_Enable+0x354>)
 8001d04:	f006 f8a0 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8001d08:	2201      	movs	r2, #1
 8001d0a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001d0e:	4869      	ldr	r0, [pc, #420]	@ (8001eb4 <MAX31855_CS_Enable+0x354>)
 8001d10:	f006 f89a 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8001d14:	2201      	movs	r2, #1
 8001d16:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d1a:	4866      	ldr	r0, [pc, #408]	@ (8001eb4 <MAX31855_CS_Enable+0x354>)
 8001d1c:	f006 f894 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8001d20:	2201      	movs	r2, #1
 8001d22:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001d26:	4863      	ldr	r0, [pc, #396]	@ (8001eb4 <MAX31855_CS_Enable+0x354>)
 8001d28:	f006 f88e 	bl	8007e48 <HAL_GPIO_WritePin>
		break;
 8001d2c:	e24b      	b.n	80021c6 <MAX31855_CS_Enable+0x666>
	case TC_CH4:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8001d2e:	2201      	movs	r2, #1
 8001d30:	2101      	movs	r1, #1
 8001d32:	4860      	ldr	r0, [pc, #384]	@ (8001eb4 <MAX31855_CS_Enable+0x354>)
 8001d34:	f006 f888 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8001d38:	2201      	movs	r2, #1
 8001d3a:	2102      	movs	r1, #2
 8001d3c:	485d      	ldr	r0, [pc, #372]	@ (8001eb4 <MAX31855_CS_Enable+0x354>)
 8001d3e:	f006 f883 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8001d42:	2201      	movs	r2, #1
 8001d44:	2104      	movs	r1, #4
 8001d46:	485b      	ldr	r0, [pc, #364]	@ (8001eb4 <MAX31855_CS_Enable+0x354>)
 8001d48:	f006 f87e 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_RESET);
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	2108      	movs	r1, #8
 8001d50:	4858      	ldr	r0, [pc, #352]	@ (8001eb4 <MAX31855_CS_Enable+0x354>)
 8001d52:	f006 f879 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8001d56:	2201      	movs	r2, #1
 8001d58:	2110      	movs	r1, #16
 8001d5a:	4856      	ldr	r0, [pc, #344]	@ (8001eb4 <MAX31855_CS_Enable+0x354>)
 8001d5c:	f006 f874 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8001d60:	2201      	movs	r2, #1
 8001d62:	2120      	movs	r1, #32
 8001d64:	4853      	ldr	r0, [pc, #332]	@ (8001eb4 <MAX31855_CS_Enable+0x354>)
 8001d66:	f006 f86f 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	2140      	movs	r1, #64	@ 0x40
 8001d6e:	4851      	ldr	r0, [pc, #324]	@ (8001eb4 <MAX31855_CS_Enable+0x354>)
 8001d70:	f006 f86a 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8001d74:	2201      	movs	r2, #1
 8001d76:	2180      	movs	r1, #128	@ 0x80
 8001d78:	484e      	ldr	r0, [pc, #312]	@ (8001eb4 <MAX31855_CS_Enable+0x354>)
 8001d7a:	f006 f865 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001d84:	484b      	ldr	r0, [pc, #300]	@ (8001eb4 <MAX31855_CS_Enable+0x354>)
 8001d86:	f006 f85f 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001d90:	4848      	ldr	r0, [pc, #288]	@ (8001eb4 <MAX31855_CS_Enable+0x354>)
 8001d92:	f006 f859 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8001d96:	2201      	movs	r2, #1
 8001d98:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d9c:	4845      	ldr	r0, [pc, #276]	@ (8001eb4 <MAX31855_CS_Enable+0x354>)
 8001d9e:	f006 f853 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8001da2:	2201      	movs	r2, #1
 8001da4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001da8:	4842      	ldr	r0, [pc, #264]	@ (8001eb4 <MAX31855_CS_Enable+0x354>)
 8001daa:	f006 f84d 	bl	8007e48 <HAL_GPIO_WritePin>
		break;
 8001dae:	e20a      	b.n	80021c6 <MAX31855_CS_Enable+0x666>
	case TC_CH5:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8001db0:	2201      	movs	r2, #1
 8001db2:	2101      	movs	r1, #1
 8001db4:	483f      	ldr	r0, [pc, #252]	@ (8001eb4 <MAX31855_CS_Enable+0x354>)
 8001db6:	f006 f847 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8001dba:	2201      	movs	r2, #1
 8001dbc:	2102      	movs	r1, #2
 8001dbe:	483d      	ldr	r0, [pc, #244]	@ (8001eb4 <MAX31855_CS_Enable+0x354>)
 8001dc0:	f006 f842 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	2104      	movs	r1, #4
 8001dc8:	483a      	ldr	r0, [pc, #232]	@ (8001eb4 <MAX31855_CS_Enable+0x354>)
 8001dca:	f006 f83d 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8001dce:	2201      	movs	r2, #1
 8001dd0:	2108      	movs	r1, #8
 8001dd2:	4838      	ldr	r0, [pc, #224]	@ (8001eb4 <MAX31855_CS_Enable+0x354>)
 8001dd4:	f006 f838 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_RESET);
 8001dd8:	2200      	movs	r2, #0
 8001dda:	2110      	movs	r1, #16
 8001ddc:	4835      	ldr	r0, [pc, #212]	@ (8001eb4 <MAX31855_CS_Enable+0x354>)
 8001dde:	f006 f833 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8001de2:	2201      	movs	r2, #1
 8001de4:	2120      	movs	r1, #32
 8001de6:	4833      	ldr	r0, [pc, #204]	@ (8001eb4 <MAX31855_CS_Enable+0x354>)
 8001de8:	f006 f82e 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8001dec:	2201      	movs	r2, #1
 8001dee:	2140      	movs	r1, #64	@ 0x40
 8001df0:	4830      	ldr	r0, [pc, #192]	@ (8001eb4 <MAX31855_CS_Enable+0x354>)
 8001df2:	f006 f829 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8001df6:	2201      	movs	r2, #1
 8001df8:	2180      	movs	r1, #128	@ 0x80
 8001dfa:	482e      	ldr	r0, [pc, #184]	@ (8001eb4 <MAX31855_CS_Enable+0x354>)
 8001dfc:	f006 f824 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8001e00:	2201      	movs	r2, #1
 8001e02:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001e06:	482b      	ldr	r0, [pc, #172]	@ (8001eb4 <MAX31855_CS_Enable+0x354>)
 8001e08:	f006 f81e 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001e12:	4828      	ldr	r0, [pc, #160]	@ (8001eb4 <MAX31855_CS_Enable+0x354>)
 8001e14:	f006 f818 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8001e18:	2201      	movs	r2, #1
 8001e1a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e1e:	4825      	ldr	r0, [pc, #148]	@ (8001eb4 <MAX31855_CS_Enable+0x354>)
 8001e20:	f006 f812 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8001e24:	2201      	movs	r2, #1
 8001e26:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001e2a:	4822      	ldr	r0, [pc, #136]	@ (8001eb4 <MAX31855_CS_Enable+0x354>)
 8001e2c:	f006 f80c 	bl	8007e48 <HAL_GPIO_WritePin>
		break;
 8001e30:	e1c9      	b.n	80021c6 <MAX31855_CS_Enable+0x666>
	case TC_CH6:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8001e32:	2201      	movs	r2, #1
 8001e34:	2101      	movs	r1, #1
 8001e36:	481f      	ldr	r0, [pc, #124]	@ (8001eb4 <MAX31855_CS_Enable+0x354>)
 8001e38:	f006 f806 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	2102      	movs	r1, #2
 8001e40:	481c      	ldr	r0, [pc, #112]	@ (8001eb4 <MAX31855_CS_Enable+0x354>)
 8001e42:	f006 f801 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8001e46:	2201      	movs	r2, #1
 8001e48:	2104      	movs	r1, #4
 8001e4a:	481a      	ldr	r0, [pc, #104]	@ (8001eb4 <MAX31855_CS_Enable+0x354>)
 8001e4c:	f005 fffc 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8001e50:	2201      	movs	r2, #1
 8001e52:	2108      	movs	r1, #8
 8001e54:	4817      	ldr	r0, [pc, #92]	@ (8001eb4 <MAX31855_CS_Enable+0x354>)
 8001e56:	f005 fff7 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	2110      	movs	r1, #16
 8001e5e:	4815      	ldr	r0, [pc, #84]	@ (8001eb4 <MAX31855_CS_Enable+0x354>)
 8001e60:	f005 fff2 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_RESET);
 8001e64:	2200      	movs	r2, #0
 8001e66:	2120      	movs	r1, #32
 8001e68:	4812      	ldr	r0, [pc, #72]	@ (8001eb4 <MAX31855_CS_Enable+0x354>)
 8001e6a:	f005 ffed 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8001e6e:	2201      	movs	r2, #1
 8001e70:	2140      	movs	r1, #64	@ 0x40
 8001e72:	4810      	ldr	r0, [pc, #64]	@ (8001eb4 <MAX31855_CS_Enable+0x354>)
 8001e74:	f005 ffe8 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8001e78:	2201      	movs	r2, #1
 8001e7a:	2180      	movs	r1, #128	@ 0x80
 8001e7c:	480d      	ldr	r0, [pc, #52]	@ (8001eb4 <MAX31855_CS_Enable+0x354>)
 8001e7e:	f005 ffe3 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8001e82:	2201      	movs	r2, #1
 8001e84:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001e88:	480a      	ldr	r0, [pc, #40]	@ (8001eb4 <MAX31855_CS_Enable+0x354>)
 8001e8a:	f005 ffdd 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001e94:	4807      	ldr	r0, [pc, #28]	@ (8001eb4 <MAX31855_CS_Enable+0x354>)
 8001e96:	f005 ffd7 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001ea0:	4804      	ldr	r0, [pc, #16]	@ (8001eb4 <MAX31855_CS_Enable+0x354>)
 8001ea2:	f005 ffd1 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001eac:	4801      	ldr	r0, [pc, #4]	@ (8001eb4 <MAX31855_CS_Enable+0x354>)
 8001eae:	f005 ffcb 	bl	8007e48 <HAL_GPIO_WritePin>
		break;
 8001eb2:	e188      	b.n	80021c6 <MAX31855_CS_Enable+0x666>
 8001eb4:	58020c00 	.word	0x58020c00
	case TC_CH7:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8001eb8:	2201      	movs	r2, #1
 8001eba:	2101      	movs	r1, #1
 8001ebc:	48c4      	ldr	r0, [pc, #784]	@ (80021d0 <MAX31855_CS_Enable+0x670>)
 8001ebe:	f005 ffc3 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	2102      	movs	r1, #2
 8001ec6:	48c2      	ldr	r0, [pc, #776]	@ (80021d0 <MAX31855_CS_Enable+0x670>)
 8001ec8:	f005 ffbe 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8001ecc:	2201      	movs	r2, #1
 8001ece:	2104      	movs	r1, #4
 8001ed0:	48bf      	ldr	r0, [pc, #764]	@ (80021d0 <MAX31855_CS_Enable+0x670>)
 8001ed2:	f005 ffb9 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	2108      	movs	r1, #8
 8001eda:	48bd      	ldr	r0, [pc, #756]	@ (80021d0 <MAX31855_CS_Enable+0x670>)
 8001edc:	f005 ffb4 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	2110      	movs	r1, #16
 8001ee4:	48ba      	ldr	r0, [pc, #744]	@ (80021d0 <MAX31855_CS_Enable+0x670>)
 8001ee6:	f005 ffaf 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8001eea:	2201      	movs	r2, #1
 8001eec:	2120      	movs	r1, #32
 8001eee:	48b8      	ldr	r0, [pc, #736]	@ (80021d0 <MAX31855_CS_Enable+0x670>)
 8001ef0:	f005 ffaa 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_RESET);
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	2140      	movs	r1, #64	@ 0x40
 8001ef8:	48b5      	ldr	r0, [pc, #724]	@ (80021d0 <MAX31855_CS_Enable+0x670>)
 8001efa:	f005 ffa5 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8001efe:	2201      	movs	r2, #1
 8001f00:	2180      	movs	r1, #128	@ 0x80
 8001f02:	48b3      	ldr	r0, [pc, #716]	@ (80021d0 <MAX31855_CS_Enable+0x670>)
 8001f04:	f005 ffa0 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8001f08:	2201      	movs	r2, #1
 8001f0a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001f0e:	48b0      	ldr	r0, [pc, #704]	@ (80021d0 <MAX31855_CS_Enable+0x670>)
 8001f10:	f005 ff9a 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8001f14:	2201      	movs	r2, #1
 8001f16:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f1a:	48ad      	ldr	r0, [pc, #692]	@ (80021d0 <MAX31855_CS_Enable+0x670>)
 8001f1c:	f005 ff94 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8001f20:	2201      	movs	r2, #1
 8001f22:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f26:	48aa      	ldr	r0, [pc, #680]	@ (80021d0 <MAX31855_CS_Enable+0x670>)
 8001f28:	f005 ff8e 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001f32:	48a7      	ldr	r0, [pc, #668]	@ (80021d0 <MAX31855_CS_Enable+0x670>)
 8001f34:	f005 ff88 	bl	8007e48 <HAL_GPIO_WritePin>
		break;
 8001f38:	e145      	b.n	80021c6 <MAX31855_CS_Enable+0x666>
	case TC_CH8:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	2101      	movs	r1, #1
 8001f3e:	48a4      	ldr	r0, [pc, #656]	@ (80021d0 <MAX31855_CS_Enable+0x670>)
 8001f40:	f005 ff82 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8001f44:	2201      	movs	r2, #1
 8001f46:	2102      	movs	r1, #2
 8001f48:	48a1      	ldr	r0, [pc, #644]	@ (80021d0 <MAX31855_CS_Enable+0x670>)
 8001f4a:	f005 ff7d 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8001f4e:	2201      	movs	r2, #1
 8001f50:	2104      	movs	r1, #4
 8001f52:	489f      	ldr	r0, [pc, #636]	@ (80021d0 <MAX31855_CS_Enable+0x670>)
 8001f54:	f005 ff78 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8001f58:	2201      	movs	r2, #1
 8001f5a:	2108      	movs	r1, #8
 8001f5c:	489c      	ldr	r0, [pc, #624]	@ (80021d0 <MAX31855_CS_Enable+0x670>)
 8001f5e:	f005 ff73 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8001f62:	2201      	movs	r2, #1
 8001f64:	2110      	movs	r1, #16
 8001f66:	489a      	ldr	r0, [pc, #616]	@ (80021d0 <MAX31855_CS_Enable+0x670>)
 8001f68:	f005 ff6e 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	2120      	movs	r1, #32
 8001f70:	4897      	ldr	r0, [pc, #604]	@ (80021d0 <MAX31855_CS_Enable+0x670>)
 8001f72:	f005 ff69 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8001f76:	2201      	movs	r2, #1
 8001f78:	2140      	movs	r1, #64	@ 0x40
 8001f7a:	4895      	ldr	r0, [pc, #596]	@ (80021d0 <MAX31855_CS_Enable+0x670>)
 8001f7c:	f005 ff64 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_RESET);
 8001f80:	2200      	movs	r2, #0
 8001f82:	2180      	movs	r1, #128	@ 0x80
 8001f84:	4892      	ldr	r0, [pc, #584]	@ (80021d0 <MAX31855_CS_Enable+0x670>)
 8001f86:	f005 ff5f 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001f90:	488f      	ldr	r0, [pc, #572]	@ (80021d0 <MAX31855_CS_Enable+0x670>)
 8001f92:	f005 ff59 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8001f96:	2201      	movs	r2, #1
 8001f98:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f9c:	488c      	ldr	r0, [pc, #560]	@ (80021d0 <MAX31855_CS_Enable+0x670>)
 8001f9e:	f005 ff53 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001fa8:	4889      	ldr	r0, [pc, #548]	@ (80021d0 <MAX31855_CS_Enable+0x670>)
 8001faa:	f005 ff4d 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001fb4:	4886      	ldr	r0, [pc, #536]	@ (80021d0 <MAX31855_CS_Enable+0x670>)
 8001fb6:	f005 ff47 	bl	8007e48 <HAL_GPIO_WritePin>
		break;
 8001fba:	e104      	b.n	80021c6 <MAX31855_CS_Enable+0x666>
	case TC_CH9:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	4883      	ldr	r0, [pc, #524]	@ (80021d0 <MAX31855_CS_Enable+0x670>)
 8001fc2:	f005 ff41 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	2102      	movs	r1, #2
 8001fca:	4881      	ldr	r0, [pc, #516]	@ (80021d0 <MAX31855_CS_Enable+0x670>)
 8001fcc:	f005 ff3c 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	2104      	movs	r1, #4
 8001fd4:	487e      	ldr	r0, [pc, #504]	@ (80021d0 <MAX31855_CS_Enable+0x670>)
 8001fd6:	f005 ff37 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8001fda:	2201      	movs	r2, #1
 8001fdc:	2108      	movs	r1, #8
 8001fde:	487c      	ldr	r0, [pc, #496]	@ (80021d0 <MAX31855_CS_Enable+0x670>)
 8001fe0:	f005 ff32 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	2110      	movs	r1, #16
 8001fe8:	4879      	ldr	r0, [pc, #484]	@ (80021d0 <MAX31855_CS_Enable+0x670>)
 8001fea:	f005 ff2d 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8001fee:	2201      	movs	r2, #1
 8001ff0:	2120      	movs	r1, #32
 8001ff2:	4877      	ldr	r0, [pc, #476]	@ (80021d0 <MAX31855_CS_Enable+0x670>)
 8001ff4:	f005 ff28 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	2140      	movs	r1, #64	@ 0x40
 8001ffc:	4874      	ldr	r0, [pc, #464]	@ (80021d0 <MAX31855_CS_Enable+0x670>)
 8001ffe:	f005 ff23 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8002002:	2201      	movs	r2, #1
 8002004:	2180      	movs	r1, #128	@ 0x80
 8002006:	4872      	ldr	r0, [pc, #456]	@ (80021d0 <MAX31855_CS_Enable+0x670>)
 8002008:	f005 ff1e 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_RESET);
 800200c:	2200      	movs	r2, #0
 800200e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002012:	486f      	ldr	r0, [pc, #444]	@ (80021d0 <MAX31855_CS_Enable+0x670>)
 8002014:	f005 ff18 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8002018:	2201      	movs	r2, #1
 800201a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800201e:	486c      	ldr	r0, [pc, #432]	@ (80021d0 <MAX31855_CS_Enable+0x670>)
 8002020:	f005 ff12 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8002024:	2201      	movs	r2, #1
 8002026:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800202a:	4869      	ldr	r0, [pc, #420]	@ (80021d0 <MAX31855_CS_Enable+0x670>)
 800202c:	f005 ff0c 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8002030:	2201      	movs	r2, #1
 8002032:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002036:	4866      	ldr	r0, [pc, #408]	@ (80021d0 <MAX31855_CS_Enable+0x670>)
 8002038:	f005 ff06 	bl	8007e48 <HAL_GPIO_WritePin>
		break;
 800203c:	e0c3      	b.n	80021c6 <MAX31855_CS_Enable+0x666>
	case TC_CH10:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 800203e:	2201      	movs	r2, #1
 8002040:	2101      	movs	r1, #1
 8002042:	4863      	ldr	r0, [pc, #396]	@ (80021d0 <MAX31855_CS_Enable+0x670>)
 8002044:	f005 ff00 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8002048:	2201      	movs	r2, #1
 800204a:	2102      	movs	r1, #2
 800204c:	4860      	ldr	r0, [pc, #384]	@ (80021d0 <MAX31855_CS_Enable+0x670>)
 800204e:	f005 fefb 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8002052:	2201      	movs	r2, #1
 8002054:	2104      	movs	r1, #4
 8002056:	485e      	ldr	r0, [pc, #376]	@ (80021d0 <MAX31855_CS_Enable+0x670>)
 8002058:	f005 fef6 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 800205c:	2201      	movs	r2, #1
 800205e:	2108      	movs	r1, #8
 8002060:	485b      	ldr	r0, [pc, #364]	@ (80021d0 <MAX31855_CS_Enable+0x670>)
 8002062:	f005 fef1 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8002066:	2201      	movs	r2, #1
 8002068:	2110      	movs	r1, #16
 800206a:	4859      	ldr	r0, [pc, #356]	@ (80021d0 <MAX31855_CS_Enable+0x670>)
 800206c:	f005 feec 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8002070:	2201      	movs	r2, #1
 8002072:	2120      	movs	r1, #32
 8002074:	4856      	ldr	r0, [pc, #344]	@ (80021d0 <MAX31855_CS_Enable+0x670>)
 8002076:	f005 fee7 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 800207a:	2201      	movs	r2, #1
 800207c:	2140      	movs	r1, #64	@ 0x40
 800207e:	4854      	ldr	r0, [pc, #336]	@ (80021d0 <MAX31855_CS_Enable+0x670>)
 8002080:	f005 fee2 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8002084:	2201      	movs	r2, #1
 8002086:	2180      	movs	r1, #128	@ 0x80
 8002088:	4851      	ldr	r0, [pc, #324]	@ (80021d0 <MAX31855_CS_Enable+0x670>)
 800208a:	f005 fedd 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 800208e:	2201      	movs	r2, #1
 8002090:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002094:	484e      	ldr	r0, [pc, #312]	@ (80021d0 <MAX31855_CS_Enable+0x670>)
 8002096:	f005 fed7 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_RESET);
 800209a:	2200      	movs	r2, #0
 800209c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80020a0:	484b      	ldr	r0, [pc, #300]	@ (80021d0 <MAX31855_CS_Enable+0x670>)
 80020a2:	f005 fed1 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 80020a6:	2201      	movs	r2, #1
 80020a8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80020ac:	4848      	ldr	r0, [pc, #288]	@ (80021d0 <MAX31855_CS_Enable+0x670>)
 80020ae:	f005 fecb 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 80020b2:	2201      	movs	r2, #1
 80020b4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80020b8:	4845      	ldr	r0, [pc, #276]	@ (80021d0 <MAX31855_CS_Enable+0x670>)
 80020ba:	f005 fec5 	bl	8007e48 <HAL_GPIO_WritePin>
		break;
 80020be:	e082      	b.n	80021c6 <MAX31855_CS_Enable+0x666>
	case TC_CH11:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 80020c0:	2201      	movs	r2, #1
 80020c2:	2101      	movs	r1, #1
 80020c4:	4842      	ldr	r0, [pc, #264]	@ (80021d0 <MAX31855_CS_Enable+0x670>)
 80020c6:	f005 febf 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 80020ca:	2201      	movs	r2, #1
 80020cc:	2102      	movs	r1, #2
 80020ce:	4840      	ldr	r0, [pc, #256]	@ (80021d0 <MAX31855_CS_Enable+0x670>)
 80020d0:	f005 feba 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 80020d4:	2201      	movs	r2, #1
 80020d6:	2104      	movs	r1, #4
 80020d8:	483d      	ldr	r0, [pc, #244]	@ (80021d0 <MAX31855_CS_Enable+0x670>)
 80020da:	f005 feb5 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 80020de:	2201      	movs	r2, #1
 80020e0:	2108      	movs	r1, #8
 80020e2:	483b      	ldr	r0, [pc, #236]	@ (80021d0 <MAX31855_CS_Enable+0x670>)
 80020e4:	f005 feb0 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 80020e8:	2201      	movs	r2, #1
 80020ea:	2110      	movs	r1, #16
 80020ec:	4838      	ldr	r0, [pc, #224]	@ (80021d0 <MAX31855_CS_Enable+0x670>)
 80020ee:	f005 feab 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 80020f2:	2201      	movs	r2, #1
 80020f4:	2120      	movs	r1, #32
 80020f6:	4836      	ldr	r0, [pc, #216]	@ (80021d0 <MAX31855_CS_Enable+0x670>)
 80020f8:	f005 fea6 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 80020fc:	2201      	movs	r2, #1
 80020fe:	2140      	movs	r1, #64	@ 0x40
 8002100:	4833      	ldr	r0, [pc, #204]	@ (80021d0 <MAX31855_CS_Enable+0x670>)
 8002102:	f005 fea1 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8002106:	2201      	movs	r2, #1
 8002108:	2180      	movs	r1, #128	@ 0x80
 800210a:	4831      	ldr	r0, [pc, #196]	@ (80021d0 <MAX31855_CS_Enable+0x670>)
 800210c:	f005 fe9c 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8002110:	2201      	movs	r2, #1
 8002112:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002116:	482e      	ldr	r0, [pc, #184]	@ (80021d0 <MAX31855_CS_Enable+0x670>)
 8002118:	f005 fe96 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 800211c:	2201      	movs	r2, #1
 800211e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002122:	482b      	ldr	r0, [pc, #172]	@ (80021d0 <MAX31855_CS_Enable+0x670>)
 8002124:	f005 fe90 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_RESET);
 8002128:	2200      	movs	r2, #0
 800212a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800212e:	4828      	ldr	r0, [pc, #160]	@ (80021d0 <MAX31855_CS_Enable+0x670>)
 8002130:	f005 fe8a 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8002134:	2201      	movs	r2, #1
 8002136:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800213a:	4825      	ldr	r0, [pc, #148]	@ (80021d0 <MAX31855_CS_Enable+0x670>)
 800213c:	f005 fe84 	bl	8007e48 <HAL_GPIO_WritePin>
		break;
 8002140:	e041      	b.n	80021c6 <MAX31855_CS_Enable+0x666>
	case TC_CH12:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8002142:	2201      	movs	r2, #1
 8002144:	2101      	movs	r1, #1
 8002146:	4822      	ldr	r0, [pc, #136]	@ (80021d0 <MAX31855_CS_Enable+0x670>)
 8002148:	f005 fe7e 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 800214c:	2201      	movs	r2, #1
 800214e:	2102      	movs	r1, #2
 8002150:	481f      	ldr	r0, [pc, #124]	@ (80021d0 <MAX31855_CS_Enable+0x670>)
 8002152:	f005 fe79 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8002156:	2201      	movs	r2, #1
 8002158:	2104      	movs	r1, #4
 800215a:	481d      	ldr	r0, [pc, #116]	@ (80021d0 <MAX31855_CS_Enable+0x670>)
 800215c:	f005 fe74 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8002160:	2201      	movs	r2, #1
 8002162:	2108      	movs	r1, #8
 8002164:	481a      	ldr	r0, [pc, #104]	@ (80021d0 <MAX31855_CS_Enable+0x670>)
 8002166:	f005 fe6f 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 800216a:	2201      	movs	r2, #1
 800216c:	2110      	movs	r1, #16
 800216e:	4818      	ldr	r0, [pc, #96]	@ (80021d0 <MAX31855_CS_Enable+0x670>)
 8002170:	f005 fe6a 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8002174:	2201      	movs	r2, #1
 8002176:	2120      	movs	r1, #32
 8002178:	4815      	ldr	r0, [pc, #84]	@ (80021d0 <MAX31855_CS_Enable+0x670>)
 800217a:	f005 fe65 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 800217e:	2201      	movs	r2, #1
 8002180:	2140      	movs	r1, #64	@ 0x40
 8002182:	4813      	ldr	r0, [pc, #76]	@ (80021d0 <MAX31855_CS_Enable+0x670>)
 8002184:	f005 fe60 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8002188:	2201      	movs	r2, #1
 800218a:	2180      	movs	r1, #128	@ 0x80
 800218c:	4810      	ldr	r0, [pc, #64]	@ (80021d0 <MAX31855_CS_Enable+0x670>)
 800218e:	f005 fe5b 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8002192:	2201      	movs	r2, #1
 8002194:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002198:	480d      	ldr	r0, [pc, #52]	@ (80021d0 <MAX31855_CS_Enable+0x670>)
 800219a:	f005 fe55 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 800219e:	2201      	movs	r2, #1
 80021a0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80021a4:	480a      	ldr	r0, [pc, #40]	@ (80021d0 <MAX31855_CS_Enable+0x670>)
 80021a6:	f005 fe4f 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 80021aa:	2201      	movs	r2, #1
 80021ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80021b0:	4807      	ldr	r0, [pc, #28]	@ (80021d0 <MAX31855_CS_Enable+0x670>)
 80021b2:	f005 fe49 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_RESET);
 80021b6:	2200      	movs	r2, #0
 80021b8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80021bc:	4804      	ldr	r0, [pc, #16]	@ (80021d0 <MAX31855_CS_Enable+0x670>)
 80021be:	f005 fe43 	bl	8007e48 <HAL_GPIO_WritePin>
		break;
 80021c2:	e000      	b.n	80021c6 <MAX31855_CS_Enable+0x666>
	default:
		break;
 80021c4:	bf00      	nop
	}
}
 80021c6:	bf00      	nop
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	58020c00 	.word	0x58020c00

080021d4 <MAX31855_CS_Disable>:

// CS 핀을 High로 설정 (SPI 통신 종료)
void MAX31855_CS_Disable(uint8_t ch)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	4603      	mov	r3, r0
 80021dc:	71fb      	strb	r3, [r7, #7]
	switch(ch) {
 80021de:	79fb      	ldrb	r3, [r7, #7]
 80021e0:	2b0b      	cmp	r3, #11
 80021e2:	f200 8329 	bhi.w	8002838 <MAX31855_CS_Disable+0x664>
 80021e6:	a201      	add	r2, pc, #4	@ (adr r2, 80021ec <MAX31855_CS_Disable+0x18>)
 80021e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ec:	0800221d 	.word	0x0800221d
 80021f0:	0800229f 	.word	0x0800229f
 80021f4:	08002321 	.word	0x08002321
 80021f8:	080023a3 	.word	0x080023a3
 80021fc:	08002425 	.word	0x08002425
 8002200:	080024a7 	.word	0x080024a7
 8002204:	0800252d 	.word	0x0800252d
 8002208:	080025af 	.word	0x080025af
 800220c:	08002631 	.word	0x08002631
 8002210:	080026b3 	.word	0x080026b3
 8002214:	08002735 	.word	0x08002735
 8002218:	080027b7 	.word	0x080027b7
	case TC_CH1:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 800221c:	2201      	movs	r2, #1
 800221e:	2101      	movs	r1, #1
 8002220:	48c1      	ldr	r0, [pc, #772]	@ (8002528 <MAX31855_CS_Disable+0x354>)
 8002222:	f005 fe11 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8002226:	2201      	movs	r2, #1
 8002228:	2102      	movs	r1, #2
 800222a:	48bf      	ldr	r0, [pc, #764]	@ (8002528 <MAX31855_CS_Disable+0x354>)
 800222c:	f005 fe0c 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8002230:	2201      	movs	r2, #1
 8002232:	2104      	movs	r1, #4
 8002234:	48bc      	ldr	r0, [pc, #752]	@ (8002528 <MAX31855_CS_Disable+0x354>)
 8002236:	f005 fe07 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 800223a:	2201      	movs	r2, #1
 800223c:	2108      	movs	r1, #8
 800223e:	48ba      	ldr	r0, [pc, #744]	@ (8002528 <MAX31855_CS_Disable+0x354>)
 8002240:	f005 fe02 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8002244:	2201      	movs	r2, #1
 8002246:	2110      	movs	r1, #16
 8002248:	48b7      	ldr	r0, [pc, #732]	@ (8002528 <MAX31855_CS_Disable+0x354>)
 800224a:	f005 fdfd 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 800224e:	2201      	movs	r2, #1
 8002250:	2120      	movs	r1, #32
 8002252:	48b5      	ldr	r0, [pc, #724]	@ (8002528 <MAX31855_CS_Disable+0x354>)
 8002254:	f005 fdf8 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8002258:	2201      	movs	r2, #1
 800225a:	2140      	movs	r1, #64	@ 0x40
 800225c:	48b2      	ldr	r0, [pc, #712]	@ (8002528 <MAX31855_CS_Disable+0x354>)
 800225e:	f005 fdf3 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8002262:	2201      	movs	r2, #1
 8002264:	2180      	movs	r1, #128	@ 0x80
 8002266:	48b0      	ldr	r0, [pc, #704]	@ (8002528 <MAX31855_CS_Disable+0x354>)
 8002268:	f005 fdee 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 800226c:	2201      	movs	r2, #1
 800226e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002272:	48ad      	ldr	r0, [pc, #692]	@ (8002528 <MAX31855_CS_Disable+0x354>)
 8002274:	f005 fde8 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8002278:	2201      	movs	r2, #1
 800227a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800227e:	48aa      	ldr	r0, [pc, #680]	@ (8002528 <MAX31855_CS_Disable+0x354>)
 8002280:	f005 fde2 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8002284:	2201      	movs	r2, #1
 8002286:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800228a:	48a7      	ldr	r0, [pc, #668]	@ (8002528 <MAX31855_CS_Disable+0x354>)
 800228c:	f005 fddc 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8002290:	2201      	movs	r2, #1
 8002292:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002296:	48a4      	ldr	r0, [pc, #656]	@ (8002528 <MAX31855_CS_Disable+0x354>)
 8002298:	f005 fdd6 	bl	8007e48 <HAL_GPIO_WritePin>
		break;
 800229c:	e2cd      	b.n	800283a <MAX31855_CS_Disable+0x666>
	case TC_CH2:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 800229e:	2201      	movs	r2, #1
 80022a0:	2101      	movs	r1, #1
 80022a2:	48a1      	ldr	r0, [pc, #644]	@ (8002528 <MAX31855_CS_Disable+0x354>)
 80022a4:	f005 fdd0 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 80022a8:	2201      	movs	r2, #1
 80022aa:	2102      	movs	r1, #2
 80022ac:	489e      	ldr	r0, [pc, #632]	@ (8002528 <MAX31855_CS_Disable+0x354>)
 80022ae:	f005 fdcb 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 80022b2:	2201      	movs	r2, #1
 80022b4:	2104      	movs	r1, #4
 80022b6:	489c      	ldr	r0, [pc, #624]	@ (8002528 <MAX31855_CS_Disable+0x354>)
 80022b8:	f005 fdc6 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 80022bc:	2201      	movs	r2, #1
 80022be:	2108      	movs	r1, #8
 80022c0:	4899      	ldr	r0, [pc, #612]	@ (8002528 <MAX31855_CS_Disable+0x354>)
 80022c2:	f005 fdc1 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 80022c6:	2201      	movs	r2, #1
 80022c8:	2110      	movs	r1, #16
 80022ca:	4897      	ldr	r0, [pc, #604]	@ (8002528 <MAX31855_CS_Disable+0x354>)
 80022cc:	f005 fdbc 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 80022d0:	2201      	movs	r2, #1
 80022d2:	2120      	movs	r1, #32
 80022d4:	4894      	ldr	r0, [pc, #592]	@ (8002528 <MAX31855_CS_Disable+0x354>)
 80022d6:	f005 fdb7 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 80022da:	2201      	movs	r2, #1
 80022dc:	2140      	movs	r1, #64	@ 0x40
 80022de:	4892      	ldr	r0, [pc, #584]	@ (8002528 <MAX31855_CS_Disable+0x354>)
 80022e0:	f005 fdb2 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 80022e4:	2201      	movs	r2, #1
 80022e6:	2180      	movs	r1, #128	@ 0x80
 80022e8:	488f      	ldr	r0, [pc, #572]	@ (8002528 <MAX31855_CS_Disable+0x354>)
 80022ea:	f005 fdad 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 80022ee:	2201      	movs	r2, #1
 80022f0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80022f4:	488c      	ldr	r0, [pc, #560]	@ (8002528 <MAX31855_CS_Disable+0x354>)
 80022f6:	f005 fda7 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 80022fa:	2201      	movs	r2, #1
 80022fc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002300:	4889      	ldr	r0, [pc, #548]	@ (8002528 <MAX31855_CS_Disable+0x354>)
 8002302:	f005 fda1 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8002306:	2201      	movs	r2, #1
 8002308:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800230c:	4886      	ldr	r0, [pc, #536]	@ (8002528 <MAX31855_CS_Disable+0x354>)
 800230e:	f005 fd9b 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8002312:	2201      	movs	r2, #1
 8002314:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002318:	4883      	ldr	r0, [pc, #524]	@ (8002528 <MAX31855_CS_Disable+0x354>)
 800231a:	f005 fd95 	bl	8007e48 <HAL_GPIO_WritePin>
		break;
 800231e:	e28c      	b.n	800283a <MAX31855_CS_Disable+0x666>
	case TC_CH3:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8002320:	2201      	movs	r2, #1
 8002322:	2101      	movs	r1, #1
 8002324:	4880      	ldr	r0, [pc, #512]	@ (8002528 <MAX31855_CS_Disable+0x354>)
 8002326:	f005 fd8f 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 800232a:	2201      	movs	r2, #1
 800232c:	2102      	movs	r1, #2
 800232e:	487e      	ldr	r0, [pc, #504]	@ (8002528 <MAX31855_CS_Disable+0x354>)
 8002330:	f005 fd8a 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8002334:	2201      	movs	r2, #1
 8002336:	2104      	movs	r1, #4
 8002338:	487b      	ldr	r0, [pc, #492]	@ (8002528 <MAX31855_CS_Disable+0x354>)
 800233a:	f005 fd85 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 800233e:	2201      	movs	r2, #1
 8002340:	2108      	movs	r1, #8
 8002342:	4879      	ldr	r0, [pc, #484]	@ (8002528 <MAX31855_CS_Disable+0x354>)
 8002344:	f005 fd80 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8002348:	2201      	movs	r2, #1
 800234a:	2110      	movs	r1, #16
 800234c:	4876      	ldr	r0, [pc, #472]	@ (8002528 <MAX31855_CS_Disable+0x354>)
 800234e:	f005 fd7b 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8002352:	2201      	movs	r2, #1
 8002354:	2120      	movs	r1, #32
 8002356:	4874      	ldr	r0, [pc, #464]	@ (8002528 <MAX31855_CS_Disable+0x354>)
 8002358:	f005 fd76 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 800235c:	2201      	movs	r2, #1
 800235e:	2140      	movs	r1, #64	@ 0x40
 8002360:	4871      	ldr	r0, [pc, #452]	@ (8002528 <MAX31855_CS_Disable+0x354>)
 8002362:	f005 fd71 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8002366:	2201      	movs	r2, #1
 8002368:	2180      	movs	r1, #128	@ 0x80
 800236a:	486f      	ldr	r0, [pc, #444]	@ (8002528 <MAX31855_CS_Disable+0x354>)
 800236c:	f005 fd6c 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8002370:	2201      	movs	r2, #1
 8002372:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002376:	486c      	ldr	r0, [pc, #432]	@ (8002528 <MAX31855_CS_Disable+0x354>)
 8002378:	f005 fd66 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 800237c:	2201      	movs	r2, #1
 800237e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002382:	4869      	ldr	r0, [pc, #420]	@ (8002528 <MAX31855_CS_Disable+0x354>)
 8002384:	f005 fd60 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8002388:	2201      	movs	r2, #1
 800238a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800238e:	4866      	ldr	r0, [pc, #408]	@ (8002528 <MAX31855_CS_Disable+0x354>)
 8002390:	f005 fd5a 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8002394:	2201      	movs	r2, #1
 8002396:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800239a:	4863      	ldr	r0, [pc, #396]	@ (8002528 <MAX31855_CS_Disable+0x354>)
 800239c:	f005 fd54 	bl	8007e48 <HAL_GPIO_WritePin>
		break;
 80023a0:	e24b      	b.n	800283a <MAX31855_CS_Disable+0x666>
	case TC_CH4:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 80023a2:	2201      	movs	r2, #1
 80023a4:	2101      	movs	r1, #1
 80023a6:	4860      	ldr	r0, [pc, #384]	@ (8002528 <MAX31855_CS_Disable+0x354>)
 80023a8:	f005 fd4e 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 80023ac:	2201      	movs	r2, #1
 80023ae:	2102      	movs	r1, #2
 80023b0:	485d      	ldr	r0, [pc, #372]	@ (8002528 <MAX31855_CS_Disable+0x354>)
 80023b2:	f005 fd49 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 80023b6:	2201      	movs	r2, #1
 80023b8:	2104      	movs	r1, #4
 80023ba:	485b      	ldr	r0, [pc, #364]	@ (8002528 <MAX31855_CS_Disable+0x354>)
 80023bc:	f005 fd44 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 80023c0:	2201      	movs	r2, #1
 80023c2:	2108      	movs	r1, #8
 80023c4:	4858      	ldr	r0, [pc, #352]	@ (8002528 <MAX31855_CS_Disable+0x354>)
 80023c6:	f005 fd3f 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 80023ca:	2201      	movs	r2, #1
 80023cc:	2110      	movs	r1, #16
 80023ce:	4856      	ldr	r0, [pc, #344]	@ (8002528 <MAX31855_CS_Disable+0x354>)
 80023d0:	f005 fd3a 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 80023d4:	2201      	movs	r2, #1
 80023d6:	2120      	movs	r1, #32
 80023d8:	4853      	ldr	r0, [pc, #332]	@ (8002528 <MAX31855_CS_Disable+0x354>)
 80023da:	f005 fd35 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 80023de:	2201      	movs	r2, #1
 80023e0:	2140      	movs	r1, #64	@ 0x40
 80023e2:	4851      	ldr	r0, [pc, #324]	@ (8002528 <MAX31855_CS_Disable+0x354>)
 80023e4:	f005 fd30 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 80023e8:	2201      	movs	r2, #1
 80023ea:	2180      	movs	r1, #128	@ 0x80
 80023ec:	484e      	ldr	r0, [pc, #312]	@ (8002528 <MAX31855_CS_Disable+0x354>)
 80023ee:	f005 fd2b 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 80023f2:	2201      	movs	r2, #1
 80023f4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80023f8:	484b      	ldr	r0, [pc, #300]	@ (8002528 <MAX31855_CS_Disable+0x354>)
 80023fa:	f005 fd25 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 80023fe:	2201      	movs	r2, #1
 8002400:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002404:	4848      	ldr	r0, [pc, #288]	@ (8002528 <MAX31855_CS_Disable+0x354>)
 8002406:	f005 fd1f 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 800240a:	2201      	movs	r2, #1
 800240c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002410:	4845      	ldr	r0, [pc, #276]	@ (8002528 <MAX31855_CS_Disable+0x354>)
 8002412:	f005 fd19 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8002416:	2201      	movs	r2, #1
 8002418:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800241c:	4842      	ldr	r0, [pc, #264]	@ (8002528 <MAX31855_CS_Disable+0x354>)
 800241e:	f005 fd13 	bl	8007e48 <HAL_GPIO_WritePin>
		break;
 8002422:	e20a      	b.n	800283a <MAX31855_CS_Disable+0x666>
	case TC_CH5:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8002424:	2201      	movs	r2, #1
 8002426:	2101      	movs	r1, #1
 8002428:	483f      	ldr	r0, [pc, #252]	@ (8002528 <MAX31855_CS_Disable+0x354>)
 800242a:	f005 fd0d 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 800242e:	2201      	movs	r2, #1
 8002430:	2102      	movs	r1, #2
 8002432:	483d      	ldr	r0, [pc, #244]	@ (8002528 <MAX31855_CS_Disable+0x354>)
 8002434:	f005 fd08 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8002438:	2201      	movs	r2, #1
 800243a:	2104      	movs	r1, #4
 800243c:	483a      	ldr	r0, [pc, #232]	@ (8002528 <MAX31855_CS_Disable+0x354>)
 800243e:	f005 fd03 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8002442:	2201      	movs	r2, #1
 8002444:	2108      	movs	r1, #8
 8002446:	4838      	ldr	r0, [pc, #224]	@ (8002528 <MAX31855_CS_Disable+0x354>)
 8002448:	f005 fcfe 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 800244c:	2201      	movs	r2, #1
 800244e:	2110      	movs	r1, #16
 8002450:	4835      	ldr	r0, [pc, #212]	@ (8002528 <MAX31855_CS_Disable+0x354>)
 8002452:	f005 fcf9 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8002456:	2201      	movs	r2, #1
 8002458:	2120      	movs	r1, #32
 800245a:	4833      	ldr	r0, [pc, #204]	@ (8002528 <MAX31855_CS_Disable+0x354>)
 800245c:	f005 fcf4 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8002460:	2201      	movs	r2, #1
 8002462:	2140      	movs	r1, #64	@ 0x40
 8002464:	4830      	ldr	r0, [pc, #192]	@ (8002528 <MAX31855_CS_Disable+0x354>)
 8002466:	f005 fcef 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 800246a:	2201      	movs	r2, #1
 800246c:	2180      	movs	r1, #128	@ 0x80
 800246e:	482e      	ldr	r0, [pc, #184]	@ (8002528 <MAX31855_CS_Disable+0x354>)
 8002470:	f005 fcea 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8002474:	2201      	movs	r2, #1
 8002476:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800247a:	482b      	ldr	r0, [pc, #172]	@ (8002528 <MAX31855_CS_Disable+0x354>)
 800247c:	f005 fce4 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8002480:	2201      	movs	r2, #1
 8002482:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002486:	4828      	ldr	r0, [pc, #160]	@ (8002528 <MAX31855_CS_Disable+0x354>)
 8002488:	f005 fcde 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 800248c:	2201      	movs	r2, #1
 800248e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002492:	4825      	ldr	r0, [pc, #148]	@ (8002528 <MAX31855_CS_Disable+0x354>)
 8002494:	f005 fcd8 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8002498:	2201      	movs	r2, #1
 800249a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800249e:	4822      	ldr	r0, [pc, #136]	@ (8002528 <MAX31855_CS_Disable+0x354>)
 80024a0:	f005 fcd2 	bl	8007e48 <HAL_GPIO_WritePin>
		break;
 80024a4:	e1c9      	b.n	800283a <MAX31855_CS_Disable+0x666>
	case TC_CH6:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 80024a6:	2201      	movs	r2, #1
 80024a8:	2101      	movs	r1, #1
 80024aa:	481f      	ldr	r0, [pc, #124]	@ (8002528 <MAX31855_CS_Disable+0x354>)
 80024ac:	f005 fccc 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 80024b0:	2201      	movs	r2, #1
 80024b2:	2102      	movs	r1, #2
 80024b4:	481c      	ldr	r0, [pc, #112]	@ (8002528 <MAX31855_CS_Disable+0x354>)
 80024b6:	f005 fcc7 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 80024ba:	2201      	movs	r2, #1
 80024bc:	2104      	movs	r1, #4
 80024be:	481a      	ldr	r0, [pc, #104]	@ (8002528 <MAX31855_CS_Disable+0x354>)
 80024c0:	f005 fcc2 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 80024c4:	2201      	movs	r2, #1
 80024c6:	2108      	movs	r1, #8
 80024c8:	4817      	ldr	r0, [pc, #92]	@ (8002528 <MAX31855_CS_Disable+0x354>)
 80024ca:	f005 fcbd 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 80024ce:	2201      	movs	r2, #1
 80024d0:	2110      	movs	r1, #16
 80024d2:	4815      	ldr	r0, [pc, #84]	@ (8002528 <MAX31855_CS_Disable+0x354>)
 80024d4:	f005 fcb8 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 80024d8:	2201      	movs	r2, #1
 80024da:	2120      	movs	r1, #32
 80024dc:	4812      	ldr	r0, [pc, #72]	@ (8002528 <MAX31855_CS_Disable+0x354>)
 80024de:	f005 fcb3 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 80024e2:	2201      	movs	r2, #1
 80024e4:	2140      	movs	r1, #64	@ 0x40
 80024e6:	4810      	ldr	r0, [pc, #64]	@ (8002528 <MAX31855_CS_Disable+0x354>)
 80024e8:	f005 fcae 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 80024ec:	2201      	movs	r2, #1
 80024ee:	2180      	movs	r1, #128	@ 0x80
 80024f0:	480d      	ldr	r0, [pc, #52]	@ (8002528 <MAX31855_CS_Disable+0x354>)
 80024f2:	f005 fca9 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 80024f6:	2201      	movs	r2, #1
 80024f8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80024fc:	480a      	ldr	r0, [pc, #40]	@ (8002528 <MAX31855_CS_Disable+0x354>)
 80024fe:	f005 fca3 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8002502:	2201      	movs	r2, #1
 8002504:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002508:	4807      	ldr	r0, [pc, #28]	@ (8002528 <MAX31855_CS_Disable+0x354>)
 800250a:	f005 fc9d 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 800250e:	2201      	movs	r2, #1
 8002510:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002514:	4804      	ldr	r0, [pc, #16]	@ (8002528 <MAX31855_CS_Disable+0x354>)
 8002516:	f005 fc97 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 800251a:	2201      	movs	r2, #1
 800251c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002520:	4801      	ldr	r0, [pc, #4]	@ (8002528 <MAX31855_CS_Disable+0x354>)
 8002522:	f005 fc91 	bl	8007e48 <HAL_GPIO_WritePin>
		break;
 8002526:	e188      	b.n	800283a <MAX31855_CS_Disable+0x666>
 8002528:	58020c00 	.word	0x58020c00
	case TC_CH7:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 800252c:	2201      	movs	r2, #1
 800252e:	2101      	movs	r1, #1
 8002530:	48c4      	ldr	r0, [pc, #784]	@ (8002844 <MAX31855_CS_Disable+0x670>)
 8002532:	f005 fc89 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8002536:	2201      	movs	r2, #1
 8002538:	2102      	movs	r1, #2
 800253a:	48c2      	ldr	r0, [pc, #776]	@ (8002844 <MAX31855_CS_Disable+0x670>)
 800253c:	f005 fc84 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8002540:	2201      	movs	r2, #1
 8002542:	2104      	movs	r1, #4
 8002544:	48bf      	ldr	r0, [pc, #764]	@ (8002844 <MAX31855_CS_Disable+0x670>)
 8002546:	f005 fc7f 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 800254a:	2201      	movs	r2, #1
 800254c:	2108      	movs	r1, #8
 800254e:	48bd      	ldr	r0, [pc, #756]	@ (8002844 <MAX31855_CS_Disable+0x670>)
 8002550:	f005 fc7a 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8002554:	2201      	movs	r2, #1
 8002556:	2110      	movs	r1, #16
 8002558:	48ba      	ldr	r0, [pc, #744]	@ (8002844 <MAX31855_CS_Disable+0x670>)
 800255a:	f005 fc75 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 800255e:	2201      	movs	r2, #1
 8002560:	2120      	movs	r1, #32
 8002562:	48b8      	ldr	r0, [pc, #736]	@ (8002844 <MAX31855_CS_Disable+0x670>)
 8002564:	f005 fc70 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8002568:	2201      	movs	r2, #1
 800256a:	2140      	movs	r1, #64	@ 0x40
 800256c:	48b5      	ldr	r0, [pc, #724]	@ (8002844 <MAX31855_CS_Disable+0x670>)
 800256e:	f005 fc6b 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8002572:	2201      	movs	r2, #1
 8002574:	2180      	movs	r1, #128	@ 0x80
 8002576:	48b3      	ldr	r0, [pc, #716]	@ (8002844 <MAX31855_CS_Disable+0x670>)
 8002578:	f005 fc66 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 800257c:	2201      	movs	r2, #1
 800257e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002582:	48b0      	ldr	r0, [pc, #704]	@ (8002844 <MAX31855_CS_Disable+0x670>)
 8002584:	f005 fc60 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8002588:	2201      	movs	r2, #1
 800258a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800258e:	48ad      	ldr	r0, [pc, #692]	@ (8002844 <MAX31855_CS_Disable+0x670>)
 8002590:	f005 fc5a 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8002594:	2201      	movs	r2, #1
 8002596:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800259a:	48aa      	ldr	r0, [pc, #680]	@ (8002844 <MAX31855_CS_Disable+0x670>)
 800259c:	f005 fc54 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 80025a0:	2201      	movs	r2, #1
 80025a2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80025a6:	48a7      	ldr	r0, [pc, #668]	@ (8002844 <MAX31855_CS_Disable+0x670>)
 80025a8:	f005 fc4e 	bl	8007e48 <HAL_GPIO_WritePin>
		break;
 80025ac:	e145      	b.n	800283a <MAX31855_CS_Disable+0x666>
	case TC_CH8:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 80025ae:	2201      	movs	r2, #1
 80025b0:	2101      	movs	r1, #1
 80025b2:	48a4      	ldr	r0, [pc, #656]	@ (8002844 <MAX31855_CS_Disable+0x670>)
 80025b4:	f005 fc48 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 80025b8:	2201      	movs	r2, #1
 80025ba:	2102      	movs	r1, #2
 80025bc:	48a1      	ldr	r0, [pc, #644]	@ (8002844 <MAX31855_CS_Disable+0x670>)
 80025be:	f005 fc43 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 80025c2:	2201      	movs	r2, #1
 80025c4:	2104      	movs	r1, #4
 80025c6:	489f      	ldr	r0, [pc, #636]	@ (8002844 <MAX31855_CS_Disable+0x670>)
 80025c8:	f005 fc3e 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 80025cc:	2201      	movs	r2, #1
 80025ce:	2108      	movs	r1, #8
 80025d0:	489c      	ldr	r0, [pc, #624]	@ (8002844 <MAX31855_CS_Disable+0x670>)
 80025d2:	f005 fc39 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 80025d6:	2201      	movs	r2, #1
 80025d8:	2110      	movs	r1, #16
 80025da:	489a      	ldr	r0, [pc, #616]	@ (8002844 <MAX31855_CS_Disable+0x670>)
 80025dc:	f005 fc34 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 80025e0:	2201      	movs	r2, #1
 80025e2:	2120      	movs	r1, #32
 80025e4:	4897      	ldr	r0, [pc, #604]	@ (8002844 <MAX31855_CS_Disable+0x670>)
 80025e6:	f005 fc2f 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 80025ea:	2201      	movs	r2, #1
 80025ec:	2140      	movs	r1, #64	@ 0x40
 80025ee:	4895      	ldr	r0, [pc, #596]	@ (8002844 <MAX31855_CS_Disable+0x670>)
 80025f0:	f005 fc2a 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 80025f4:	2201      	movs	r2, #1
 80025f6:	2180      	movs	r1, #128	@ 0x80
 80025f8:	4892      	ldr	r0, [pc, #584]	@ (8002844 <MAX31855_CS_Disable+0x670>)
 80025fa:	f005 fc25 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 80025fe:	2201      	movs	r2, #1
 8002600:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002604:	488f      	ldr	r0, [pc, #572]	@ (8002844 <MAX31855_CS_Disable+0x670>)
 8002606:	f005 fc1f 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 800260a:	2201      	movs	r2, #1
 800260c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002610:	488c      	ldr	r0, [pc, #560]	@ (8002844 <MAX31855_CS_Disable+0x670>)
 8002612:	f005 fc19 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8002616:	2201      	movs	r2, #1
 8002618:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800261c:	4889      	ldr	r0, [pc, #548]	@ (8002844 <MAX31855_CS_Disable+0x670>)
 800261e:	f005 fc13 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8002622:	2201      	movs	r2, #1
 8002624:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002628:	4886      	ldr	r0, [pc, #536]	@ (8002844 <MAX31855_CS_Disable+0x670>)
 800262a:	f005 fc0d 	bl	8007e48 <HAL_GPIO_WritePin>
		break;
 800262e:	e104      	b.n	800283a <MAX31855_CS_Disable+0x666>
	case TC_CH9:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8002630:	2201      	movs	r2, #1
 8002632:	2101      	movs	r1, #1
 8002634:	4883      	ldr	r0, [pc, #524]	@ (8002844 <MAX31855_CS_Disable+0x670>)
 8002636:	f005 fc07 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 800263a:	2201      	movs	r2, #1
 800263c:	2102      	movs	r1, #2
 800263e:	4881      	ldr	r0, [pc, #516]	@ (8002844 <MAX31855_CS_Disable+0x670>)
 8002640:	f005 fc02 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8002644:	2201      	movs	r2, #1
 8002646:	2104      	movs	r1, #4
 8002648:	487e      	ldr	r0, [pc, #504]	@ (8002844 <MAX31855_CS_Disable+0x670>)
 800264a:	f005 fbfd 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 800264e:	2201      	movs	r2, #1
 8002650:	2108      	movs	r1, #8
 8002652:	487c      	ldr	r0, [pc, #496]	@ (8002844 <MAX31855_CS_Disable+0x670>)
 8002654:	f005 fbf8 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8002658:	2201      	movs	r2, #1
 800265a:	2110      	movs	r1, #16
 800265c:	4879      	ldr	r0, [pc, #484]	@ (8002844 <MAX31855_CS_Disable+0x670>)
 800265e:	f005 fbf3 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8002662:	2201      	movs	r2, #1
 8002664:	2120      	movs	r1, #32
 8002666:	4877      	ldr	r0, [pc, #476]	@ (8002844 <MAX31855_CS_Disable+0x670>)
 8002668:	f005 fbee 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 800266c:	2201      	movs	r2, #1
 800266e:	2140      	movs	r1, #64	@ 0x40
 8002670:	4874      	ldr	r0, [pc, #464]	@ (8002844 <MAX31855_CS_Disable+0x670>)
 8002672:	f005 fbe9 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8002676:	2201      	movs	r2, #1
 8002678:	2180      	movs	r1, #128	@ 0x80
 800267a:	4872      	ldr	r0, [pc, #456]	@ (8002844 <MAX31855_CS_Disable+0x670>)
 800267c:	f005 fbe4 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8002680:	2201      	movs	r2, #1
 8002682:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002686:	486f      	ldr	r0, [pc, #444]	@ (8002844 <MAX31855_CS_Disable+0x670>)
 8002688:	f005 fbde 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 800268c:	2201      	movs	r2, #1
 800268e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002692:	486c      	ldr	r0, [pc, #432]	@ (8002844 <MAX31855_CS_Disable+0x670>)
 8002694:	f005 fbd8 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8002698:	2201      	movs	r2, #1
 800269a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800269e:	4869      	ldr	r0, [pc, #420]	@ (8002844 <MAX31855_CS_Disable+0x670>)
 80026a0:	f005 fbd2 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 80026a4:	2201      	movs	r2, #1
 80026a6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80026aa:	4866      	ldr	r0, [pc, #408]	@ (8002844 <MAX31855_CS_Disable+0x670>)
 80026ac:	f005 fbcc 	bl	8007e48 <HAL_GPIO_WritePin>
		break;
 80026b0:	e0c3      	b.n	800283a <MAX31855_CS_Disable+0x666>
	case TC_CH10:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 80026b2:	2201      	movs	r2, #1
 80026b4:	2101      	movs	r1, #1
 80026b6:	4863      	ldr	r0, [pc, #396]	@ (8002844 <MAX31855_CS_Disable+0x670>)
 80026b8:	f005 fbc6 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 80026bc:	2201      	movs	r2, #1
 80026be:	2102      	movs	r1, #2
 80026c0:	4860      	ldr	r0, [pc, #384]	@ (8002844 <MAX31855_CS_Disable+0x670>)
 80026c2:	f005 fbc1 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 80026c6:	2201      	movs	r2, #1
 80026c8:	2104      	movs	r1, #4
 80026ca:	485e      	ldr	r0, [pc, #376]	@ (8002844 <MAX31855_CS_Disable+0x670>)
 80026cc:	f005 fbbc 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 80026d0:	2201      	movs	r2, #1
 80026d2:	2108      	movs	r1, #8
 80026d4:	485b      	ldr	r0, [pc, #364]	@ (8002844 <MAX31855_CS_Disable+0x670>)
 80026d6:	f005 fbb7 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 80026da:	2201      	movs	r2, #1
 80026dc:	2110      	movs	r1, #16
 80026de:	4859      	ldr	r0, [pc, #356]	@ (8002844 <MAX31855_CS_Disable+0x670>)
 80026e0:	f005 fbb2 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 80026e4:	2201      	movs	r2, #1
 80026e6:	2120      	movs	r1, #32
 80026e8:	4856      	ldr	r0, [pc, #344]	@ (8002844 <MAX31855_CS_Disable+0x670>)
 80026ea:	f005 fbad 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 80026ee:	2201      	movs	r2, #1
 80026f0:	2140      	movs	r1, #64	@ 0x40
 80026f2:	4854      	ldr	r0, [pc, #336]	@ (8002844 <MAX31855_CS_Disable+0x670>)
 80026f4:	f005 fba8 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 80026f8:	2201      	movs	r2, #1
 80026fa:	2180      	movs	r1, #128	@ 0x80
 80026fc:	4851      	ldr	r0, [pc, #324]	@ (8002844 <MAX31855_CS_Disable+0x670>)
 80026fe:	f005 fba3 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8002702:	2201      	movs	r2, #1
 8002704:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002708:	484e      	ldr	r0, [pc, #312]	@ (8002844 <MAX31855_CS_Disable+0x670>)
 800270a:	f005 fb9d 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 800270e:	2201      	movs	r2, #1
 8002710:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002714:	484b      	ldr	r0, [pc, #300]	@ (8002844 <MAX31855_CS_Disable+0x670>)
 8002716:	f005 fb97 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 800271a:	2201      	movs	r2, #1
 800271c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002720:	4848      	ldr	r0, [pc, #288]	@ (8002844 <MAX31855_CS_Disable+0x670>)
 8002722:	f005 fb91 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8002726:	2201      	movs	r2, #1
 8002728:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800272c:	4845      	ldr	r0, [pc, #276]	@ (8002844 <MAX31855_CS_Disable+0x670>)
 800272e:	f005 fb8b 	bl	8007e48 <HAL_GPIO_WritePin>
		break;
 8002732:	e082      	b.n	800283a <MAX31855_CS_Disable+0x666>
	case TC_CH11:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8002734:	2201      	movs	r2, #1
 8002736:	2101      	movs	r1, #1
 8002738:	4842      	ldr	r0, [pc, #264]	@ (8002844 <MAX31855_CS_Disable+0x670>)
 800273a:	f005 fb85 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 800273e:	2201      	movs	r2, #1
 8002740:	2102      	movs	r1, #2
 8002742:	4840      	ldr	r0, [pc, #256]	@ (8002844 <MAX31855_CS_Disable+0x670>)
 8002744:	f005 fb80 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8002748:	2201      	movs	r2, #1
 800274a:	2104      	movs	r1, #4
 800274c:	483d      	ldr	r0, [pc, #244]	@ (8002844 <MAX31855_CS_Disable+0x670>)
 800274e:	f005 fb7b 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8002752:	2201      	movs	r2, #1
 8002754:	2108      	movs	r1, #8
 8002756:	483b      	ldr	r0, [pc, #236]	@ (8002844 <MAX31855_CS_Disable+0x670>)
 8002758:	f005 fb76 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 800275c:	2201      	movs	r2, #1
 800275e:	2110      	movs	r1, #16
 8002760:	4838      	ldr	r0, [pc, #224]	@ (8002844 <MAX31855_CS_Disable+0x670>)
 8002762:	f005 fb71 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8002766:	2201      	movs	r2, #1
 8002768:	2120      	movs	r1, #32
 800276a:	4836      	ldr	r0, [pc, #216]	@ (8002844 <MAX31855_CS_Disable+0x670>)
 800276c:	f005 fb6c 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8002770:	2201      	movs	r2, #1
 8002772:	2140      	movs	r1, #64	@ 0x40
 8002774:	4833      	ldr	r0, [pc, #204]	@ (8002844 <MAX31855_CS_Disable+0x670>)
 8002776:	f005 fb67 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 800277a:	2201      	movs	r2, #1
 800277c:	2180      	movs	r1, #128	@ 0x80
 800277e:	4831      	ldr	r0, [pc, #196]	@ (8002844 <MAX31855_CS_Disable+0x670>)
 8002780:	f005 fb62 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8002784:	2201      	movs	r2, #1
 8002786:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800278a:	482e      	ldr	r0, [pc, #184]	@ (8002844 <MAX31855_CS_Disable+0x670>)
 800278c:	f005 fb5c 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8002790:	2201      	movs	r2, #1
 8002792:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002796:	482b      	ldr	r0, [pc, #172]	@ (8002844 <MAX31855_CS_Disable+0x670>)
 8002798:	f005 fb56 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 800279c:	2201      	movs	r2, #1
 800279e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80027a2:	4828      	ldr	r0, [pc, #160]	@ (8002844 <MAX31855_CS_Disable+0x670>)
 80027a4:	f005 fb50 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 80027a8:	2201      	movs	r2, #1
 80027aa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80027ae:	4825      	ldr	r0, [pc, #148]	@ (8002844 <MAX31855_CS_Disable+0x670>)
 80027b0:	f005 fb4a 	bl	8007e48 <HAL_GPIO_WritePin>
		break;
 80027b4:	e041      	b.n	800283a <MAX31855_CS_Disable+0x666>
	case TC_CH12:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 80027b6:	2201      	movs	r2, #1
 80027b8:	2101      	movs	r1, #1
 80027ba:	4822      	ldr	r0, [pc, #136]	@ (8002844 <MAX31855_CS_Disable+0x670>)
 80027bc:	f005 fb44 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 80027c0:	2201      	movs	r2, #1
 80027c2:	2102      	movs	r1, #2
 80027c4:	481f      	ldr	r0, [pc, #124]	@ (8002844 <MAX31855_CS_Disable+0x670>)
 80027c6:	f005 fb3f 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 80027ca:	2201      	movs	r2, #1
 80027cc:	2104      	movs	r1, #4
 80027ce:	481d      	ldr	r0, [pc, #116]	@ (8002844 <MAX31855_CS_Disable+0x670>)
 80027d0:	f005 fb3a 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 80027d4:	2201      	movs	r2, #1
 80027d6:	2108      	movs	r1, #8
 80027d8:	481a      	ldr	r0, [pc, #104]	@ (8002844 <MAX31855_CS_Disable+0x670>)
 80027da:	f005 fb35 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 80027de:	2201      	movs	r2, #1
 80027e0:	2110      	movs	r1, #16
 80027e2:	4818      	ldr	r0, [pc, #96]	@ (8002844 <MAX31855_CS_Disable+0x670>)
 80027e4:	f005 fb30 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 80027e8:	2201      	movs	r2, #1
 80027ea:	2120      	movs	r1, #32
 80027ec:	4815      	ldr	r0, [pc, #84]	@ (8002844 <MAX31855_CS_Disable+0x670>)
 80027ee:	f005 fb2b 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 80027f2:	2201      	movs	r2, #1
 80027f4:	2140      	movs	r1, #64	@ 0x40
 80027f6:	4813      	ldr	r0, [pc, #76]	@ (8002844 <MAX31855_CS_Disable+0x670>)
 80027f8:	f005 fb26 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 80027fc:	2201      	movs	r2, #1
 80027fe:	2180      	movs	r1, #128	@ 0x80
 8002800:	4810      	ldr	r0, [pc, #64]	@ (8002844 <MAX31855_CS_Disable+0x670>)
 8002802:	f005 fb21 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8002806:	2201      	movs	r2, #1
 8002808:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800280c:	480d      	ldr	r0, [pc, #52]	@ (8002844 <MAX31855_CS_Disable+0x670>)
 800280e:	f005 fb1b 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8002812:	2201      	movs	r2, #1
 8002814:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002818:	480a      	ldr	r0, [pc, #40]	@ (8002844 <MAX31855_CS_Disable+0x670>)
 800281a:	f005 fb15 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 800281e:	2201      	movs	r2, #1
 8002820:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002824:	4807      	ldr	r0, [pc, #28]	@ (8002844 <MAX31855_CS_Disable+0x670>)
 8002826:	f005 fb0f 	bl	8007e48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 800282a:	2201      	movs	r2, #1
 800282c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002830:	4804      	ldr	r0, [pc, #16]	@ (8002844 <MAX31855_CS_Disable+0x670>)
 8002832:	f005 fb09 	bl	8007e48 <HAL_GPIO_WritePin>
		break;
 8002836:	e000      	b.n	800283a <MAX31855_CS_Disable+0x666>
	default:
		break;
 8002838:	bf00      	nop
	}
}
 800283a:	bf00      	nop
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	58020c00 	.word	0x58020c00

08002848 <MAX31855_ReadData>:

// SPI를 통해 MAX31855에서 32비트 데이터 읽기
uint32_t MAX31855_ReadData(uint8_t ch)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	4603      	mov	r3, r0
 8002850:	71fb      	strb	r3, [r7, #7]
	uint8_t rxBuffer[4] = {0}; // 4바이트(32비트) 데이터 버퍼
 8002852:	2300      	movs	r3, #0
 8002854:	60bb      	str	r3, [r7, #8]
	uint32_t rawData = 0;
 8002856:	2300      	movs	r3, #0
 8002858:	60fb      	str	r3, [r7, #12]

	MAX31855_CS_Enable(ch); // CS Low → SPI 시작
 800285a:	79fb      	ldrb	r3, [r7, #7]
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff f97f 	bl	8001b60 <MAX31855_CS_Enable>
	HAL_SPI_Receive(&hspi1, rxBuffer, 4, SPI_TIMEOUT); // 32비트(4바이트) 데이터 수신
 8002862:	f107 0108 	add.w	r1, r7, #8
 8002866:	2364      	movs	r3, #100	@ 0x64
 8002868:	2204      	movs	r2, #4
 800286a:	480b      	ldr	r0, [pc, #44]	@ (8002898 <MAX31855_ReadData+0x50>)
 800286c:	f009 f9b0 	bl	800bbd0 <HAL_SPI_Receive>
	MAX31855_CS_Disable(ch); // CS High → SPI 종료
 8002870:	79fb      	ldrb	r3, [r7, #7]
 8002872:	4618      	mov	r0, r3
 8002874:	f7ff fcae 	bl	80021d4 <MAX31855_CS_Disable>

	// 4바이트 데이터를 32비트 정수로 변환
	rawData = ((uint32_t)rxBuffer[0] << 24) |
 8002878:	7a3b      	ldrb	r3, [r7, #8]
 800287a:	061a      	lsls	r2, r3, #24
			((uint32_t)rxBuffer[1] << 16) |
 800287c:	7a7b      	ldrb	r3, [r7, #9]
 800287e:	041b      	lsls	r3, r3, #16
	rawData = ((uint32_t)rxBuffer[0] << 24) |
 8002880:	431a      	orrs	r2, r3
			((uint32_t)rxBuffer[2] << 8) |
 8002882:	7abb      	ldrb	r3, [r7, #10]
 8002884:	021b      	lsls	r3, r3, #8
			((uint32_t)rxBuffer[1] << 16) |
 8002886:	4313      	orrs	r3, r2
			((uint32_t)rxBuffer[3]);
 8002888:	7afa      	ldrb	r2, [r7, #11]
	rawData = ((uint32_t)rxBuffer[0] << 24) |
 800288a:	4313      	orrs	r3, r2
 800288c:	60fb      	str	r3, [r7, #12]

	return rawData;
 800288e:	68fb      	ldr	r3, [r7, #12]
}
 8002890:	4618      	mov	r0, r3
 8002892:	3710      	adds	r7, #16
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	24000194 	.word	0x24000194

0800289c <MAX31855_GetThermocoupleTemperature>:

// 열전대(Hot Junction) 온도 변환 함수
float MAX31855_GetThermocoupleTemperature(uint8_t ch)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	4603      	mov	r3, r0
 80028a4:	71fb      	strb	r3, [r7, #7]
	uint32_t rawData = MAX31855_ReadData(ch);
 80028a6:	79fb      	ldrb	r3, [r7, #7]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7ff ffcd 	bl	8002848 <MAX31855_ReadData>
 80028ae:	60b8      	str	r0, [r7, #8]
	int16_t tempData = (rawData >> 18) & 0x3FFF; // 상위 14비트 추출
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	0c9b      	lsrs	r3, r3, #18
 80028b4:	81fb      	strh	r3, [r7, #14]

	// 음수 보정 (2의 보수 변환)
	if (rawData & 0x80000000)
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	da05      	bge.n	80028c8 <MAX31855_GetThermocoupleTemperature+0x2c>
	{
		tempData |= 0xC000; // 부호 확장
 80028bc:	89fb      	ldrh	r3, [r7, #14]
 80028be:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 80028c2:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 80028c6:	81fb      	strh	r3, [r7, #14]
	}

	return (float)tempData * 0.25; // 해상도 0.25°C 변환
 80028c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80028cc:	ee07 3a90 	vmov	s15, r3
 80028d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028d4:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 80028d8:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80028dc:	eeb0 0a67 	vmov.f32	s0, s15
 80028e0:	3710      	adds	r7, #16
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <GetTemp>:
	}
}


void GetTemp(double* Temp)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b084      	sub	sp, #16
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0; i < MAX_TC_CH; i++)
 80028ee:	2300      	movs	r3, #0
 80028f0:	73fb      	strb	r3, [r7, #15]
 80028f2:	e010      	b.n	8002916 <GetTemp+0x30>
	{
		Temp[i] = (double)MAX31855_GetThermocoupleTemperature(i);
 80028f4:	7bfb      	ldrb	r3, [r7, #15]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7ff ffd0 	bl	800289c <MAX31855_GetThermocoupleTemperature>
 80028fc:	eef0 7a40 	vmov.f32	s15, s0
 8002900:	7bfb      	ldrb	r3, [r7, #15]
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	4413      	add	r3, r2
 8002908:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800290c:	ed83 7b00 	vstr	d7, [r3]
	for (uint8_t i=0; i < MAX_TC_CH; i++)
 8002910:	7bfb      	ldrb	r3, [r7, #15]
 8002912:	3301      	adds	r3, #1
 8002914:	73fb      	strb	r3, [r7, #15]
 8002916:	7bfb      	ldrb	r3, [r7, #15]
 8002918:	2b0b      	cmp	r3, #11
 800291a:	d9eb      	bls.n	80028f4 <GetTemp+0xe>
	}
}
 800291c:	bf00      	nop
 800291e:	bf00      	nop
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
	...

08002928 <HAL_UART_RxCpltCallback>:
uint8_t NRecv = 0;

extern void Error_Handler(void);

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == UART4)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a19      	ldr	r2, [pc, #100]	@ (800299c <HAL_UART_RxCpltCallback+0x74>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d12c      	bne.n	8002994 <HAL_UART_RxCpltCallback+0x6c>
	{
		rx_buffer[rx_index++] = rx_data;
 800293a:	4b19      	ldr	r3, [pc, #100]	@ (80029a0 <HAL_UART_RxCpltCallback+0x78>)
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	1c5a      	adds	r2, r3, #1
 8002940:	b2d1      	uxtb	r1, r2
 8002942:	4a17      	ldr	r2, [pc, #92]	@ (80029a0 <HAL_UART_RxCpltCallback+0x78>)
 8002944:	7011      	strb	r1, [r2, #0]
 8002946:	461a      	mov	r2, r3
 8002948:	4b16      	ldr	r3, [pc, #88]	@ (80029a4 <HAL_UART_RxCpltCallback+0x7c>)
 800294a:	7819      	ldrb	r1, [r3, #0]
 800294c:	4b16      	ldr	r3, [pc, #88]	@ (80029a8 <HAL_UART_RxCpltCallback+0x80>)
 800294e:	5499      	strb	r1, [r3, r2]

		if (rx_data == 0x0A)
 8002950:	4b14      	ldr	r3, [pc, #80]	@ (80029a4 <HAL_UART_RxCpltCallback+0x7c>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	2b0a      	cmp	r3, #10
 8002956:	d110      	bne.n	800297a <HAL_UART_RxCpltCallback+0x52>
		{
			fTC = true;
 8002958:	4b14      	ldr	r3, [pc, #80]	@ (80029ac <HAL_UART_RxCpltCallback+0x84>)
 800295a:	2201      	movs	r2, #1
 800295c:	701a      	strb	r2, [r3, #0]
			memcpy((void*)tc_buffer, (void*)rx_buffer, sizeof(uint8_t)*rx_index);
 800295e:	4b10      	ldr	r3, [pc, #64]	@ (80029a0 <HAL_UART_RxCpltCallback+0x78>)
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	461a      	mov	r2, r3
 8002964:	4910      	ldr	r1, [pc, #64]	@ (80029a8 <HAL_UART_RxCpltCallback+0x80>)
 8002966:	4812      	ldr	r0, [pc, #72]	@ (80029b0 <HAL_UART_RxCpltCallback+0x88>)
 8002968:	f00d f895 	bl	800fa96 <memcpy>
			NRecv = rx_index;
 800296c:	4b0c      	ldr	r3, [pc, #48]	@ (80029a0 <HAL_UART_RxCpltCallback+0x78>)
 800296e:	781a      	ldrb	r2, [r3, #0]
 8002970:	4b10      	ldr	r3, [pc, #64]	@ (80029b4 <HAL_UART_RxCpltCallback+0x8c>)
 8002972:	701a      	strb	r2, [r3, #0]
			rx_index = 0;
 8002974:	4b0a      	ldr	r3, [pc, #40]	@ (80029a0 <HAL_UART_RxCpltCallback+0x78>)
 8002976:	2200      	movs	r2, #0
 8002978:	701a      	strb	r2, [r3, #0]
		}

		// 순환 버퍼 또는 수신 종료 문자 조건으로 처리 가능
		if (rx_index >= MAX_TC_SIZE)
 800297a:	4b09      	ldr	r3, [pc, #36]	@ (80029a0 <HAL_UART_RxCpltCallback+0x78>)
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	b25b      	sxtb	r3, r3
 8002980:	2b00      	cmp	r3, #0
 8002982:	da02      	bge.n	800298a <HAL_UART_RxCpltCallback+0x62>
		{
			rx_index = 0; // 오버플로 방지
 8002984:	4b06      	ldr	r3, [pc, #24]	@ (80029a0 <HAL_UART_RxCpltCallback+0x78>)
 8002986:	2200      	movs	r2, #0
 8002988:	701a      	strb	r2, [r3, #0]
		}

		// 다음 수신 재시작
		HAL_UART_Receive_IT(&huart4, &rx_data, 1);
 800298a:	2201      	movs	r2, #1
 800298c:	4905      	ldr	r1, [pc, #20]	@ (80029a4 <HAL_UART_RxCpltCallback+0x7c>)
 800298e:	480a      	ldr	r0, [pc, #40]	@ (80029b8 <HAL_UART_RxCpltCallback+0x90>)
 8002990:	f00a fa0a 	bl	800cda8 <HAL_UART_Receive_IT>
	}
}
 8002994:	bf00      	nop
 8002996:	3708      	adds	r7, #8
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	40004c00 	.word	0x40004c00
 80029a0:	24000428 	.word	0x24000428
 80029a4:	240003a5 	.word	0x240003a5
 80029a8:	240003a8 	.word	0x240003a8
 80029ac:	240003a4 	.word	0x240003a4
 80029b0:	2400042c 	.word	0x2400042c
 80029b4:	240004ac 	.word	0x240004ac
 80029b8:	24000268 	.word	0x24000268

080029bc <InitTMTC>:

void InitTMTC(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
	if (HAL_UART_Receive_IT(&huart4, &rx_data, 1) != HAL_OK)
 80029c0:	2201      	movs	r2, #1
 80029c2:	4905      	ldr	r1, [pc, #20]	@ (80029d8 <InitTMTC+0x1c>)
 80029c4:	4805      	ldr	r0, [pc, #20]	@ (80029dc <InitTMTC+0x20>)
 80029c6:	f00a f9ef 	bl	800cda8 <HAL_UART_Receive_IT>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <InitTMTC+0x18>
	{
		Error_Handler();
 80029d0:	f7fe fc86 	bl	80012e0 <Error_Handler>
	}
}
 80029d4:	bf00      	nop
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	240003a5 	.word	0x240003a5
 80029dc:	24000268 	.word	0x24000268

080029e0 <GetTC>:

void GetTC(uint8_t* TC)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
	memcpy((void*)TC,(void*)tc_buffer,sizeof(uint8_t)*NRecv);
 80029e8:	4b05      	ldr	r3, [pc, #20]	@ (8002a00 <GetTC+0x20>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	461a      	mov	r2, r3
 80029ee:	4905      	ldr	r1, [pc, #20]	@ (8002a04 <GetTC+0x24>)
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f00d f850 	bl	800fa96 <memcpy>
}
 80029f6:	bf00      	nop
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	240004ac 	.word	0x240004ac
 8002a04:	2400042c 	.word	0x2400042c

08002a08 <SendTM>:

void SendTM(uint8_t* TM)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
	uint8_t n_send = strlen((char*)TM);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f7fd fc6f 	bl	80002f4 <strlen>
 8002a16:	4603      	mov	r3, r0
 8002a18:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart4, (uint8_t*)TM, n_send, HAL_MAX_DELAY);
 8002a1a:	7bfb      	ldrb	r3, [r7, #15]
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a22:	6879      	ldr	r1, [r7, #4]
 8002a24:	4803      	ldr	r0, [pc, #12]	@ (8002a34 <SendTM+0x2c>)
 8002a26:	f00a f931 	bl	800cc8c <HAL_UART_Transmit>
}
 8002a2a:	bf00      	nop
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	24000268 	.word	0x24000268

08002a38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002a38:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8002a74 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8002a3c:	f7fd fefc 	bl	8000838 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002a40:	f7fd fe4c 	bl	80006dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a44:	480c      	ldr	r0, [pc, #48]	@ (8002a78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002a46:	490d      	ldr	r1, [pc, #52]	@ (8002a7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002a48:	4a0d      	ldr	r2, [pc, #52]	@ (8002a80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002a4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a4c:	e002      	b.n	8002a54 <LoopCopyDataInit>

08002a4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a52:	3304      	adds	r3, #4

08002a54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a58:	d3f9      	bcc.n	8002a4e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a5a:	4a0a      	ldr	r2, [pc, #40]	@ (8002a84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002a5c:	4c0a      	ldr	r4, [pc, #40]	@ (8002a88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002a5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a60:	e001      	b.n	8002a66 <LoopFillZerobss>

08002a62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a64:	3204      	adds	r2, #4

08002a66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a68:	d3fb      	bcc.n	8002a62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a6a:	f00c ffed 	bl	800fa48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a6e:	f7fd ff51 	bl	8000914 <main>
  bx  lr
 8002a72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a74:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002a78:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002a7c:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 8002a80:	08010858 	.word	0x08010858
  ldr r2, =_sbss
 8002a84:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 8002a88:	240006a0 	.word	0x240006a0

08002a8c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a8c:	e7fe      	b.n	8002a8c <ADC3_IRQHandler>
	...

08002a90 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b08c      	sub	sp, #48	@ 0x30
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	4603      	mov	r3, r0
 8002a98:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8002a9e:	79fb      	ldrb	r3, [r7, #7]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d009      	beq.n	8002ab8 <BSP_LED_Init+0x28>
 8002aa4:	79fb      	ldrb	r3, [r7, #7]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d006      	beq.n	8002ab8 <BSP_LED_Init+0x28>
 8002aaa:	79fb      	ldrb	r3, [r7, #7]
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d003      	beq.n	8002ab8 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002ab0:	f06f 0301 	mvn.w	r3, #1
 8002ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ab6:	e055      	b.n	8002b64 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8002ab8:	79fb      	ldrb	r3, [r7, #7]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d10f      	bne.n	8002ade <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8002abe:	4b2c      	ldr	r3, [pc, #176]	@ (8002b70 <BSP_LED_Init+0xe0>)
 8002ac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ac4:	4a2a      	ldr	r2, [pc, #168]	@ (8002b70 <BSP_LED_Init+0xe0>)
 8002ac6:	f043 0302 	orr.w	r3, r3, #2
 8002aca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002ace:	4b28      	ldr	r3, [pc, #160]	@ (8002b70 <BSP_LED_Init+0xe0>)
 8002ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	617b      	str	r3, [r7, #20]
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	e021      	b.n	8002b22 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8002ade:	79fb      	ldrb	r3, [r7, #7]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d10f      	bne.n	8002b04 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8002ae4:	4b22      	ldr	r3, [pc, #136]	@ (8002b70 <BSP_LED_Init+0xe0>)
 8002ae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002aea:	4a21      	ldr	r2, [pc, #132]	@ (8002b70 <BSP_LED_Init+0xe0>)
 8002aec:	f043 0310 	orr.w	r3, r3, #16
 8002af0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002af4:	4b1e      	ldr	r3, [pc, #120]	@ (8002b70 <BSP_LED_Init+0xe0>)
 8002af6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002afa:	f003 0310 	and.w	r3, r3, #16
 8002afe:	613b      	str	r3, [r7, #16]
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	e00e      	b.n	8002b22 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8002b04:	4b1a      	ldr	r3, [pc, #104]	@ (8002b70 <BSP_LED_Init+0xe0>)
 8002b06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b0a:	4a19      	ldr	r2, [pc, #100]	@ (8002b70 <BSP_LED_Init+0xe0>)
 8002b0c:	f043 0302 	orr.w	r3, r3, #2
 8002b10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002b14:	4b16      	ldr	r3, [pc, #88]	@ (8002b70 <BSP_LED_Init+0xe0>)
 8002b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	60fb      	str	r3, [r7, #12]
 8002b20:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8002b22:	79fb      	ldrb	r3, [r7, #7]
 8002b24:	4a13      	ldr	r2, [pc, #76]	@ (8002b74 <BSP_LED_Init+0xe4>)
 8002b26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b2a:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8002b30:	2300      	movs	r3, #0
 8002b32:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b34:	2303      	movs	r3, #3
 8002b36:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8002b38:	79fb      	ldrb	r3, [r7, #7]
 8002b3a:	4a0f      	ldr	r2, [pc, #60]	@ (8002b78 <BSP_LED_Init+0xe8>)
 8002b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b40:	f107 0218 	add.w	r2, r7, #24
 8002b44:	4611      	mov	r1, r2
 8002b46:	4618      	mov	r0, r3
 8002b48:	f004 ffce 	bl	8007ae8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002b4c:	79fb      	ldrb	r3, [r7, #7]
 8002b4e:	4a0a      	ldr	r2, [pc, #40]	@ (8002b78 <BSP_LED_Init+0xe8>)
 8002b50:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002b54:	79fb      	ldrb	r3, [r7, #7]
 8002b56:	4a07      	ldr	r2, [pc, #28]	@ (8002b74 <BSP_LED_Init+0xe4>)
 8002b58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	4619      	mov	r1, r3
 8002b60:	f005 f972 	bl	8007e48 <HAL_GPIO_WritePin>
  }

  return ret;
 8002b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3730      	adds	r7, #48	@ 0x30
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	58024400 	.word	0x58024400
 8002b74:	08010628 	.word	0x08010628
 8002b78:	2400000c 	.word	0x2400000c

08002b7c <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	4603      	mov	r3, r0
 8002b84:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002b86:	2300      	movs	r3, #0
 8002b88:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8002b8a:	79fb      	ldrb	r3, [r7, #7]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d009      	beq.n	8002ba4 <BSP_LED_On+0x28>
 8002b90:	79fb      	ldrb	r3, [r7, #7]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d006      	beq.n	8002ba4 <BSP_LED_On+0x28>
 8002b96:	79fb      	ldrb	r3, [r7, #7]
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d003      	beq.n	8002ba4 <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002b9c:	f06f 0301 	mvn.w	r3, #1
 8002ba0:	60fb      	str	r3, [r7, #12]
 8002ba2:	e00b      	b.n	8002bbc <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8002ba4:	79fb      	ldrb	r3, [r7, #7]
 8002ba6:	4a08      	ldr	r2, [pc, #32]	@ (8002bc8 <BSP_LED_On+0x4c>)
 8002ba8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002bac:	79fb      	ldrb	r3, [r7, #7]
 8002bae:	4a07      	ldr	r2, [pc, #28]	@ (8002bcc <BSP_LED_On+0x50>)
 8002bb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	f005 f946 	bl	8007e48 <HAL_GPIO_WritePin>
  }

  return ret;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	2400000c 	.word	0x2400000c
 8002bcc:	08010628 	.word	0x08010628

08002bd0 <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8002bde:	79fb      	ldrb	r3, [r7, #7]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d009      	beq.n	8002bf8 <BSP_LED_Off+0x28>
 8002be4:	79fb      	ldrb	r3, [r7, #7]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d006      	beq.n	8002bf8 <BSP_LED_Off+0x28>
 8002bea:	79fb      	ldrb	r3, [r7, #7]
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d003      	beq.n	8002bf8 <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002bf0:	f06f 0301 	mvn.w	r3, #1
 8002bf4:	60fb      	str	r3, [r7, #12]
 8002bf6:	e00b      	b.n	8002c10 <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002bf8:	79fb      	ldrb	r3, [r7, #7]
 8002bfa:	4a08      	ldr	r2, [pc, #32]	@ (8002c1c <BSP_LED_Off+0x4c>)
 8002bfc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002c00:	79fb      	ldrb	r3, [r7, #7]
 8002c02:	4a07      	ldr	r2, [pc, #28]	@ (8002c20 <BSP_LED_Off+0x50>)
 8002c04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	f005 f91c 	bl	8007e48 <HAL_GPIO_WritePin>
  }

  return ret;
 8002c10:	68fb      	ldr	r3, [r7, #12]
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3710      	adds	r7, #16
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	2400000c 	.word	0x2400000c
 8002c20:	08010628 	.word	0x08010628

08002c24 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8002c32:	79fb      	ldrb	r3, [r7, #7]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d009      	beq.n	8002c4c <BSP_LED_Toggle+0x28>
 8002c38:	79fb      	ldrb	r3, [r7, #7]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d006      	beq.n	8002c4c <BSP_LED_Toggle+0x28>
 8002c3e:	79fb      	ldrb	r3, [r7, #7]
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d003      	beq.n	8002c4c <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002c44:	f06f 0301 	mvn.w	r3, #1
 8002c48:	60fb      	str	r3, [r7, #12]
 8002c4a:	e00b      	b.n	8002c64 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8002c4c:	79fb      	ldrb	r3, [r7, #7]
 8002c4e:	4a08      	ldr	r2, [pc, #32]	@ (8002c70 <BSP_LED_Toggle+0x4c>)
 8002c50:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002c54:	79fb      	ldrb	r3, [r7, #7]
 8002c56:	4907      	ldr	r1, [pc, #28]	@ (8002c74 <BSP_LED_Toggle+0x50>)
 8002c58:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	4610      	mov	r0, r2
 8002c60:	f005 f90b 	bl	8007e7a <HAL_GPIO_TogglePin>
  }

  return ret;
 8002c64:	68fb      	ldr	r3, [r7, #12]
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3710      	adds	r7, #16
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	2400000c 	.word	0x2400000c
 8002c74:	08010628 	.word	0x08010628

08002c78 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b088      	sub	sp, #32
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	4603      	mov	r3, r0
 8002c80:	460a      	mov	r2, r1
 8002c82:	71fb      	strb	r3, [r7, #7]
 8002c84:	4613      	mov	r3, r2
 8002c86:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8002c88:	4b2e      	ldr	r3, [pc, #184]	@ (8002d44 <BSP_PB_Init+0xcc>)
 8002c8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c8e:	4a2d      	ldr	r2, [pc, #180]	@ (8002d44 <BSP_PB_Init+0xcc>)
 8002c90:	f043 0304 	orr.w	r3, r3, #4
 8002c94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002c98:	4b2a      	ldr	r3, [pc, #168]	@ (8002d44 <BSP_PB_Init+0xcc>)
 8002c9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c9e:	f003 0304 	and.w	r3, r3, #4
 8002ca2:	60bb      	str	r3, [r7, #8]
 8002ca4:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8002ca6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002caa:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8002cac:	2302      	movs	r3, #2
 8002cae:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8002cb4:	79bb      	ldrb	r3, [r7, #6]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d10c      	bne.n	8002cd4 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8002cbe:	79fb      	ldrb	r3, [r7, #7]
 8002cc0:	4a21      	ldr	r2, [pc, #132]	@ (8002d48 <BSP_PB_Init+0xd0>)
 8002cc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cc6:	f107 020c 	add.w	r2, r7, #12
 8002cca:	4611      	mov	r1, r2
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f004 ff0b 	bl	8007ae8 <HAL_GPIO_Init>
 8002cd2:	e031      	b.n	8002d38 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8002cd4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002cd8:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002cda:	79fb      	ldrb	r3, [r7, #7]
 8002cdc:	4a1a      	ldr	r2, [pc, #104]	@ (8002d48 <BSP_PB_Init+0xd0>)
 8002cde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ce2:	f107 020c 	add.w	r2, r7, #12
 8002ce6:	4611      	mov	r1, r2
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f004 fefd 	bl	8007ae8 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8002cee:	79fb      	ldrb	r3, [r7, #7]
 8002cf0:	00db      	lsls	r3, r3, #3
 8002cf2:	4a16      	ldr	r2, [pc, #88]	@ (8002d4c <BSP_PB_Init+0xd4>)
 8002cf4:	441a      	add	r2, r3
 8002cf6:	79fb      	ldrb	r3, [r7, #7]
 8002cf8:	4915      	ldr	r1, [pc, #84]	@ (8002d50 <BSP_PB_Init+0xd8>)
 8002cfa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002cfe:	4619      	mov	r1, r3
 8002d00:	4610      	mov	r0, r2
 8002d02:	f004 fea0 	bl	8007a46 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8002d06:	79fb      	ldrb	r3, [r7, #7]
 8002d08:	00db      	lsls	r3, r3, #3
 8002d0a:	4a10      	ldr	r2, [pc, #64]	@ (8002d4c <BSP_PB_Init+0xd4>)
 8002d0c:	1898      	adds	r0, r3, r2
 8002d0e:	79fb      	ldrb	r3, [r7, #7]
 8002d10:	4a10      	ldr	r2, [pc, #64]	@ (8002d54 <BSP_PB_Init+0xdc>)
 8002d12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d16:	461a      	mov	r2, r3
 8002d18:	2100      	movs	r1, #0
 8002d1a:	f004 fe75 	bl	8007a08 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8002d1e:	2028      	movs	r0, #40	@ 0x28
 8002d20:	79fb      	ldrb	r3, [r7, #7]
 8002d22:	4a0d      	ldr	r2, [pc, #52]	@ (8002d58 <BSP_PB_Init+0xe0>)
 8002d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	f001 ffe9 	bl	8004d02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8002d30:	2328      	movs	r3, #40	@ 0x28
 8002d32:	4618      	mov	r0, r3
 8002d34:	f001 ffff 	bl	8004d36 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3720      	adds	r7, #32
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	58024400 	.word	0x58024400
 8002d48:	24000018 	.word	0x24000018
 8002d4c:	240004b0 	.word	0x240004b0
 8002d50:	08010630 	.word	0x08010630
 8002d54:	2400001c 	.word	0x2400001c
 8002d58:	24000020 	.word	0x24000020

08002d5c <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	4603      	mov	r3, r0
 8002d64:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8002d66:	79fb      	ldrb	r3, [r7, #7]
 8002d68:	00db      	lsls	r3, r3, #3
 8002d6a:	4a04      	ldr	r2, [pc, #16]	@ (8002d7c <BSP_PB_IRQHandler+0x20>)
 8002d6c:	4413      	add	r3, r2
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f004 fe7e 	bl	8007a70 <HAL_EXTI_IRQHandler>
}
 8002d74:	bf00      	nop
 8002d76:	3708      	adds	r7, #8
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	240004b0 	.word	0x240004b0

08002d80 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	4603      	mov	r3, r0
 8002d88:	6039      	str	r1, [r7, #0]
 8002d8a:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8002d90:	79fb      	ldrb	r3, [r7, #7]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d003      	beq.n	8002d9e <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002d96:	f06f 0301 	mvn.w	r3, #1
 8002d9a:	60fb      	str	r3, [r7, #12]
 8002d9c:	e018      	b.n	8002dd0 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8002d9e:	79fb      	ldrb	r3, [r7, #7]
 8002da0:	2294      	movs	r2, #148	@ 0x94
 8002da2:	fb02 f303 	mul.w	r3, r2, r3
 8002da6:	4a0d      	ldr	r2, [pc, #52]	@ (8002ddc <BSP_COM_Init+0x5c>)
 8002da8:	4413      	add	r3, r2
 8002daa:	4618      	mov	r0, r3
 8002dac:	f000 f86e 	bl	8002e8c <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8002db0:	79fb      	ldrb	r3, [r7, #7]
 8002db2:	2294      	movs	r2, #148	@ 0x94
 8002db4:	fb02 f303 	mul.w	r3, r2, r3
 8002db8:	4a08      	ldr	r2, [pc, #32]	@ (8002ddc <BSP_COM_Init+0x5c>)
 8002dba:	4413      	add	r3, r2
 8002dbc:	6839      	ldr	r1, [r7, #0]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f000 f80e 	bl	8002de0 <MX_USART3_Init>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d002      	beq.n	8002dd0 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002dca:	f06f 0303 	mvn.w	r3, #3
 8002dce:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	240004b8 	.word	0x240004b8

08002de0 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8002dea:	4b15      	ldr	r3, [pc, #84]	@ (8002e40 <MX_USART3_Init+0x60>)
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	220c      	movs	r2, #12
 8002dfe:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	895b      	ldrh	r3, [r3, #10]
 8002e04:	461a      	mov	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	685a      	ldr	r2, [r3, #4]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	891b      	ldrh	r3, [r3, #8]
 8002e16:	461a      	mov	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	899b      	ldrh	r3, [r3, #12]
 8002e20:	461a      	mov	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002e2c:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f009 fedc 	bl	800cbec <HAL_UART_Init>
 8002e34:	4603      	mov	r3, r0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	24000008 	.word	0x24000008

08002e44 <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8002e4c:	4b09      	ldr	r3, [pc, #36]	@ (8002e74 <__io_putchar+0x30>)
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	461a      	mov	r2, r3
 8002e52:	2394      	movs	r3, #148	@ 0x94
 8002e54:	fb02 f303 	mul.w	r3, r2, r3
 8002e58:	4a07      	ldr	r2, [pc, #28]	@ (8002e78 <__io_putchar+0x34>)
 8002e5a:	1898      	adds	r0, r3, r2
 8002e5c:	1d39      	adds	r1, r7, #4
 8002e5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e62:	2201      	movs	r2, #1
 8002e64:	f009 ff12 	bl	800cc8c <HAL_UART_Transmit>
  return ch;
 8002e68:	687b      	ldr	r3, [r7, #4]
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	2400054c 	.word	0x2400054c
 8002e78:	240004b8 	.word	0x240004b8

08002e7c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8002e80:	2000      	movs	r0, #0
 8002e82:	f7fe fa19 	bl	80012b8 <BSP_PB_Callback>
}
 8002e86:	bf00      	nop
 8002e88:	bd80      	pop	{r7, pc}
	...

08002e8c <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b08a      	sub	sp, #40	@ 0x28
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8002e94:	4b27      	ldr	r3, [pc, #156]	@ (8002f34 <COM1_MspInit+0xa8>)
 8002e96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e9a:	4a26      	ldr	r2, [pc, #152]	@ (8002f34 <COM1_MspInit+0xa8>)
 8002e9c:	f043 0308 	orr.w	r3, r3, #8
 8002ea0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002ea4:	4b23      	ldr	r3, [pc, #140]	@ (8002f34 <COM1_MspInit+0xa8>)
 8002ea6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002eaa:	f003 0308 	and.w	r3, r3, #8
 8002eae:	613b      	str	r3, [r7, #16]
 8002eb0:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8002eb2:	4b20      	ldr	r3, [pc, #128]	@ (8002f34 <COM1_MspInit+0xa8>)
 8002eb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002eb8:	4a1e      	ldr	r2, [pc, #120]	@ (8002f34 <COM1_MspInit+0xa8>)
 8002eba:	f043 0308 	orr.w	r3, r3, #8
 8002ebe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002ec2:	4b1c      	ldr	r3, [pc, #112]	@ (8002f34 <COM1_MspInit+0xa8>)
 8002ec4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ec8:	f003 0308 	and.w	r3, r3, #8
 8002ecc:	60fb      	str	r3, [r7, #12]
 8002ece:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8002ed0:	4b18      	ldr	r3, [pc, #96]	@ (8002f34 <COM1_MspInit+0xa8>)
 8002ed2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002ed6:	4a17      	ldr	r2, [pc, #92]	@ (8002f34 <COM1_MspInit+0xa8>)
 8002ed8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002edc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002ee0:	4b14      	ldr	r3, [pc, #80]	@ (8002f34 <COM1_MspInit+0xa8>)
 8002ee2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002ee6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002eea:	60bb      	str	r3, [r7, #8]
 8002eec:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 8002eee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ef2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ef8:	2302      	movs	r3, #2
 8002efa:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002efc:	2301      	movs	r3, #1
 8002efe:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8002f00:	2307      	movs	r3, #7
 8002f02:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8002f04:	f107 0314 	add.w	r3, r7, #20
 8002f08:	4619      	mov	r1, r3
 8002f0a:	480b      	ldr	r0, [pc, #44]	@ (8002f38 <COM1_MspInit+0xac>)
 8002f0c:	f004 fdec 	bl	8007ae8 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8002f10:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f14:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002f16:	2302      	movs	r3, #2
 8002f18:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8002f1a:	2307      	movs	r3, #7
 8002f1c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8002f1e:	f107 0314 	add.w	r3, r7, #20
 8002f22:	4619      	mov	r1, r3
 8002f24:	4804      	ldr	r0, [pc, #16]	@ (8002f38 <COM1_MspInit+0xac>)
 8002f26:	f004 fddf 	bl	8007ae8 <HAL_GPIO_Init>
}
 8002f2a:	bf00      	nop
 8002f2c:	3728      	adds	r7, #40	@ 0x28
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	58024400 	.word	0x58024400
 8002f38:	58020c00 	.word	0x58020c00

08002f3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f42:	2003      	movs	r0, #3
 8002f44:	f001 fed2 	bl	8004cec <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002f48:	f005 fe4a 	bl	8008be0 <HAL_RCC_GetSysClockFreq>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	4b15      	ldr	r3, [pc, #84]	@ (8002fa4 <HAL_Init+0x68>)
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	0a1b      	lsrs	r3, r3, #8
 8002f54:	f003 030f 	and.w	r3, r3, #15
 8002f58:	4913      	ldr	r1, [pc, #76]	@ (8002fa8 <HAL_Init+0x6c>)
 8002f5a:	5ccb      	ldrb	r3, [r1, r3]
 8002f5c:	f003 031f 	and.w	r3, r3, #31
 8002f60:	fa22 f303 	lsr.w	r3, r2, r3
 8002f64:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f66:	4b0f      	ldr	r3, [pc, #60]	@ (8002fa4 <HAL_Init+0x68>)
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	f003 030f 	and.w	r3, r3, #15
 8002f6e:	4a0e      	ldr	r2, [pc, #56]	@ (8002fa8 <HAL_Init+0x6c>)
 8002f70:	5cd3      	ldrb	r3, [r2, r3]
 8002f72:	f003 031f 	and.w	r3, r3, #31
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	fa22 f303 	lsr.w	r3, r2, r3
 8002f7c:	4a0b      	ldr	r2, [pc, #44]	@ (8002fac <HAL_Init+0x70>)
 8002f7e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f80:	4a0b      	ldr	r2, [pc, #44]	@ (8002fb0 <HAL_Init+0x74>)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f86:	2000      	movs	r0, #0
 8002f88:	f000 f814 	bl	8002fb4 <HAL_InitTick>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e002      	b.n	8002f9c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002f96:	f7fe fab1 	bl	80014fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3708      	adds	r7, #8
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	58024400 	.word	0x58024400
 8002fa8:	08010618 	.word	0x08010618
 8002fac:	24000004 	.word	0x24000004
 8002fb0:	24000000 	.word	0x24000000

08002fb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002fbc:	4b15      	ldr	r3, [pc, #84]	@ (8003014 <HAL_InitTick+0x60>)
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d101      	bne.n	8002fc8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e021      	b.n	800300c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002fc8:	4b13      	ldr	r3, [pc, #76]	@ (8003018 <HAL_InitTick+0x64>)
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	4b11      	ldr	r3, [pc, #68]	@ (8003014 <HAL_InitTick+0x60>)
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002fd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f001 feb7 	bl	8004d52 <HAL_SYSTICK_Config>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e00e      	b.n	800300c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2b0f      	cmp	r3, #15
 8002ff2:	d80a      	bhi.n	800300a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	6879      	ldr	r1, [r7, #4]
 8002ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ffc:	f001 fe81 	bl	8004d02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003000:	4a06      	ldr	r2, [pc, #24]	@ (800301c <HAL_InitTick+0x68>)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003006:	2300      	movs	r3, #0
 8003008:	e000      	b.n	800300c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
}
 800300c:	4618      	mov	r0, r3
 800300e:	3708      	adds	r7, #8
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	24000028 	.word	0x24000028
 8003018:	24000000 	.word	0x24000000
 800301c:	24000024 	.word	0x24000024

08003020 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003024:	4b06      	ldr	r3, [pc, #24]	@ (8003040 <HAL_IncTick+0x20>)
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	461a      	mov	r2, r3
 800302a:	4b06      	ldr	r3, [pc, #24]	@ (8003044 <HAL_IncTick+0x24>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4413      	add	r3, r2
 8003030:	4a04      	ldr	r2, [pc, #16]	@ (8003044 <HAL_IncTick+0x24>)
 8003032:	6013      	str	r3, [r2, #0]
}
 8003034:	bf00      	nop
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	24000028 	.word	0x24000028
 8003044:	24000550 	.word	0x24000550

08003048 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
  return uwTick;
 800304c:	4b03      	ldr	r3, [pc, #12]	@ (800305c <HAL_GetTick+0x14>)
 800304e:	681b      	ldr	r3, [r3, #0]
}
 8003050:	4618      	mov	r0, r3
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	24000550 	.word	0x24000550

08003060 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003064:	4b03      	ldr	r3, [pc, #12]	@ (8003074 <HAL_GetREVID+0x14>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	0c1b      	lsrs	r3, r3, #16
}
 800306a:	4618      	mov	r0, r3
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr
 8003074:	5c001000 	.word	0x5c001000

08003078 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003082:	4b07      	ldr	r3, [pc, #28]	@ (80030a0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003084:	685a      	ldr	r2, [r3, #4]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	43db      	mvns	r3, r3
 800308a:	401a      	ands	r2, r3
 800308c:	4904      	ldr	r1, [pc, #16]	@ (80030a0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	4313      	orrs	r3, r2
 8003092:	604b      	str	r3, [r1, #4]
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr
 80030a0:	58000400 	.word	0x58000400

080030a4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	431a      	orrs	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	609a      	str	r2, [r3, #8]
}
 80030be:	bf00      	nop
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr

080030ca <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80030ca:	b480      	push	{r7}
 80030cc:	b083      	sub	sp, #12
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
 80030d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	431a      	orrs	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	609a      	str	r2, [r3, #8]
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003100:	4618      	mov	r0, r3
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr

0800310c <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800310c:	b480      	push	{r7}
 800310e:	b087      	sub	sp, #28
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800311c:	2b00      	cmp	r3, #0
 800311e:	d107      	bne.n	8003130 <LL_ADC_SetChannelPreselection+0x24>
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	0e9b      	lsrs	r3, r3, #26
 8003124:	f003 031f 	and.w	r3, r3, #31
 8003128:	2201      	movs	r2, #1
 800312a:	fa02 f303 	lsl.w	r3, r2, r3
 800312e:	e015      	b.n	800315c <LL_ADC_SetChannelPreselection+0x50>
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	fa93 f3a3 	rbit	r3, r3
 800313a:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d101      	bne.n	800314a <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 8003146:	2320      	movs	r3, #32
 8003148:	e003      	b.n	8003152 <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	fab3 f383 	clz	r3, r3
 8003150:	b2db      	uxtb	r3, r3
 8003152:	f003 031f 	and.w	r3, r3, #31
 8003156:	2201      	movs	r2, #1
 8003158:	fa02 f303 	lsl.w	r3, r2, r3
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	69d2      	ldr	r2, [r2, #28]
 8003160:	431a      	orrs	r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 8003166:	bf00      	nop
 8003168:	371c      	adds	r7, #28
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr

08003172 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003172:	b480      	push	{r7}
 8003174:	b087      	sub	sp, #28
 8003176:	af00      	add	r7, sp, #0
 8003178:	60f8      	str	r0, [r7, #12]
 800317a:	60b9      	str	r1, [r7, #8]
 800317c:	607a      	str	r2, [r7, #4]
 800317e:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	3360      	adds	r3, #96	@ 0x60
 8003184:	461a      	mov	r2, r3
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	4413      	add	r3, r2
 800318c:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	430b      	orrs	r3, r1
 80031a0:	431a      	orrs	r2, r3
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80031a6:	bf00      	nop
 80031a8:	371c      	adds	r7, #28
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr

080031b2 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80031b2:	b480      	push	{r7}
 80031b4:	b085      	sub	sp, #20
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	60f8      	str	r0, [r7, #12]
 80031ba:	60b9      	str	r1, [r7, #8]
 80031bc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	f003 031f 	and.w	r3, r3, #31
 80031cc:	6879      	ldr	r1, [r7, #4]
 80031ce:	fa01 f303 	lsl.w	r3, r1, r3
 80031d2:	431a      	orrs	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	611a      	str	r2, [r3, #16]
}
 80031d8:	bf00      	nop
 80031da:	3714      	adds	r7, #20
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b087      	sub	sp, #28
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	3360      	adds	r3, #96	@ 0x60
 80031f4:	461a      	mov	r2, r3
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	4413      	add	r3, r2
 80031fc:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	431a      	orrs	r2, r3
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	601a      	str	r2, [r3, #0]
  }
}
 800320e:	bf00      	nop
 8003210:	371c      	adds	r7, #28
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr

0800321a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800321a:	b480      	push	{r7}
 800321c:	b083      	sub	sp, #12
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800322e:	2301      	movs	r3, #1
 8003230:	e000      	b.n	8003234 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003240:	b480      	push	{r7}
 8003242:	b087      	sub	sp, #28
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	3330      	adds	r3, #48	@ 0x30
 8003250:	461a      	mov	r2, r3
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	0a1b      	lsrs	r3, r3, #8
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	f003 030c 	and.w	r3, r3, #12
 800325c:	4413      	add	r3, r2
 800325e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	f003 031f 	and.w	r3, r3, #31
 800326a:	211f      	movs	r1, #31
 800326c:	fa01 f303 	lsl.w	r3, r1, r3
 8003270:	43db      	mvns	r3, r3
 8003272:	401a      	ands	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	0e9b      	lsrs	r3, r3, #26
 8003278:	f003 011f 	and.w	r1, r3, #31
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	f003 031f 	and.w	r3, r3, #31
 8003282:	fa01 f303 	lsl.w	r3, r1, r3
 8003286:	431a      	orrs	r2, r3
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800328c:	bf00      	nop
 800328e:	371c      	adds	r7, #28
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	f023 0203 	bic.w	r2, r3, #3
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	431a      	orrs	r2, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	60da      	str	r2, [r3, #12]
}
 80032b2:	bf00      	nop
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr

080032be <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80032be:	b480      	push	{r7}
 80032c0:	b083      	sub	sp, #12
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032ca:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d101      	bne.n	80032d6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80032d2:	2301      	movs	r3, #1
 80032d4:	e000      	b.n	80032d8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80032d6:	2300      	movs	r3, #0
}
 80032d8:	4618      	mov	r0, r3
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b087      	sub	sp, #28
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	3314      	adds	r3, #20
 80032f4:	461a      	mov	r2, r3
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	0e5b      	lsrs	r3, r3, #25
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	f003 0304 	and.w	r3, r3, #4
 8003300:	4413      	add	r3, r2
 8003302:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	0d1b      	lsrs	r3, r3, #20
 800330c:	f003 031f 	and.w	r3, r3, #31
 8003310:	2107      	movs	r1, #7
 8003312:	fa01 f303 	lsl.w	r3, r1, r3
 8003316:	43db      	mvns	r3, r3
 8003318:	401a      	ands	r2, r3
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	0d1b      	lsrs	r3, r3, #20
 800331e:	f003 031f 	and.w	r3, r3, #31
 8003322:	6879      	ldr	r1, [r7, #4]
 8003324:	fa01 f303 	lsl.w	r3, r1, r3
 8003328:	431a      	orrs	r2, r3
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800332e:	bf00      	nop
 8003330:	371c      	adds	r7, #28
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
	...

0800333c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800333c:	b480      	push	{r7}
 800333e:	b085      	sub	sp, #20
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003354:	43db      	mvns	r3, r3
 8003356:	401a      	ands	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f003 0318 	and.w	r3, r3, #24
 800335e:	4908      	ldr	r1, [pc, #32]	@ (8003380 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003360:	40d9      	lsrs	r1, r3
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	400b      	ands	r3, r1
 8003366:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800336a:	431a      	orrs	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003372:	bf00      	nop
 8003374:	3714      	adds	r7, #20
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	000fffff 	.word	0x000fffff

08003384 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f003 031f 	and.w	r3, r3, #31
}
 8003394:	4618      	mov	r0, r3
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689a      	ldr	r2, [r3, #8]
 80033c8:	4b04      	ldr	r3, [pc, #16]	@ (80033dc <LL_ADC_DisableDeepPowerDown+0x20>)
 80033ca:	4013      	ands	r3, r2
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	6093      	str	r3, [r2, #8]
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr
 80033dc:	5fffffc0 	.word	0x5fffffc0

080033e0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80033f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80033f4:	d101      	bne.n	80033fa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80033f6:	2301      	movs	r3, #1
 80033f8:	e000      	b.n	80033fc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689a      	ldr	r2, [r3, #8]
 8003414:	4b05      	ldr	r3, [pc, #20]	@ (800342c <LL_ADC_EnableInternalRegulator+0x24>)
 8003416:	4013      	ands	r3, r2
 8003418:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr
 800342c:	6fffffc0 	.word	0x6fffffc0

08003430 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003440:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003444:	d101      	bne.n	800344a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003446:	2301      	movs	r3, #1
 8003448:	e000      	b.n	800344c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689a      	ldr	r2, [r3, #8]
 8003464:	4b05      	ldr	r3, [pc, #20]	@ (800347c <LL_ADC_Enable+0x24>)
 8003466:	4013      	ands	r3, r2
 8003468:	f043 0201 	orr.w	r2, r3, #1
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003470:	bf00      	nop
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr
 800347c:	7fffffc0 	.word	0x7fffffc0

08003480 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	2b01      	cmp	r3, #1
 8003492:	d101      	bne.n	8003498 <LL_ADC_IsEnabled+0x18>
 8003494:	2301      	movs	r3, #1
 8003496:	e000      	b.n	800349a <LL_ADC_IsEnabled+0x1a>
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	370c      	adds	r7, #12
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
	...

080034a8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689a      	ldr	r2, [r3, #8]
 80034b4:	4b05      	ldr	r3, [pc, #20]	@ (80034cc <LL_ADC_REG_StartConversion+0x24>)
 80034b6:	4013      	ands	r3, r2
 80034b8:	f043 0204 	orr.w	r2, r3, #4
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80034c0:	bf00      	nop
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr
 80034cc:	7fffffc0 	.word	0x7fffffc0

080034d0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	f003 0304 	and.w	r3, r3, #4
 80034e0:	2b04      	cmp	r3, #4
 80034e2:	d101      	bne.n	80034e8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80034e4:	2301      	movs	r3, #1
 80034e6:	e000      	b.n	80034ea <LL_ADC_REG_IsConversionOngoing+0x1a>
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	370c      	adds	r7, #12
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr

080034f6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80034f6:	b480      	push	{r7}
 80034f8:	b083      	sub	sp, #12
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f003 0308 	and.w	r3, r3, #8
 8003506:	2b08      	cmp	r3, #8
 8003508:	d101      	bne.n	800350e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800350a:	2301      	movs	r3, #1
 800350c:	e000      	b.n	8003510 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800350e:	2300      	movs	r3, #0
}
 8003510:	4618      	mov	r0, r3
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800351c:	b590      	push	{r4, r7, lr}
 800351e:	b089      	sub	sp, #36	@ 0x24
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003524:	2300      	movs	r3, #0
 8003526:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003528:	2300      	movs	r3, #0
 800352a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d101      	bne.n	8003536 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e18f      	b.n	8003856 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003540:	2b00      	cmp	r3, #0
 8003542:	d109      	bne.n	8003558 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f7fd fff3 	bl	8001530 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4618      	mov	r0, r3
 800355e:	f7ff ff3f 	bl	80033e0 <LL_ADC_IsDeepPowerDownEnabled>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d004      	beq.n	8003572 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4618      	mov	r0, r3
 800356e:	f7ff ff25 	bl	80033bc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4618      	mov	r0, r3
 8003578:	f7ff ff5a 	bl	8003430 <LL_ADC_IsInternalRegulatorEnabled>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d114      	bne.n	80035ac <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4618      	mov	r0, r3
 8003588:	f7ff ff3e 	bl	8003408 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800358c:	4b87      	ldr	r3, [pc, #540]	@ (80037ac <HAL_ADC_Init+0x290>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	099b      	lsrs	r3, r3, #6
 8003592:	4a87      	ldr	r2, [pc, #540]	@ (80037b0 <HAL_ADC_Init+0x294>)
 8003594:	fba2 2303 	umull	r2, r3, r2, r3
 8003598:	099b      	lsrs	r3, r3, #6
 800359a:	3301      	adds	r3, #1
 800359c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800359e:	e002      	b.n	80035a6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	3b01      	subs	r3, #1
 80035a4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d1f9      	bne.n	80035a0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7ff ff3d 	bl	8003430 <LL_ADC_IsInternalRegulatorEnabled>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d10d      	bne.n	80035d8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035c0:	f043 0210 	orr.w	r2, r3, #16
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035cc:	f043 0201 	orr.w	r2, r3, #1
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4618      	mov	r0, r3
 80035de:	f7ff ff77 	bl	80034d0 <LL_ADC_REG_IsConversionOngoing>
 80035e2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035e8:	f003 0310 	and.w	r3, r3, #16
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	f040 8129 	bne.w	8003844 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f040 8125 	bne.w	8003844 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035fe:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003602:	f043 0202 	orr.w	r2, r3, #2
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4618      	mov	r0, r3
 8003610:	f7ff ff36 	bl	8003480 <LL_ADC_IsEnabled>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d136      	bne.n	8003688 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a65      	ldr	r2, [pc, #404]	@ (80037b4 <HAL_ADC_Init+0x298>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d004      	beq.n	800362e <HAL_ADC_Init+0x112>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a63      	ldr	r2, [pc, #396]	@ (80037b8 <HAL_ADC_Init+0x29c>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d10e      	bne.n	800364c <HAL_ADC_Init+0x130>
 800362e:	4861      	ldr	r0, [pc, #388]	@ (80037b4 <HAL_ADC_Init+0x298>)
 8003630:	f7ff ff26 	bl	8003480 <LL_ADC_IsEnabled>
 8003634:	4604      	mov	r4, r0
 8003636:	4860      	ldr	r0, [pc, #384]	@ (80037b8 <HAL_ADC_Init+0x29c>)
 8003638:	f7ff ff22 	bl	8003480 <LL_ADC_IsEnabled>
 800363c:	4603      	mov	r3, r0
 800363e:	4323      	orrs	r3, r4
 8003640:	2b00      	cmp	r3, #0
 8003642:	bf0c      	ite	eq
 8003644:	2301      	moveq	r3, #1
 8003646:	2300      	movne	r3, #0
 8003648:	b2db      	uxtb	r3, r3
 800364a:	e008      	b.n	800365e <HAL_ADC_Init+0x142>
 800364c:	485b      	ldr	r0, [pc, #364]	@ (80037bc <HAL_ADC_Init+0x2a0>)
 800364e:	f7ff ff17 	bl	8003480 <LL_ADC_IsEnabled>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	bf0c      	ite	eq
 8003658:	2301      	moveq	r3, #1
 800365a:	2300      	movne	r3, #0
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d012      	beq.n	8003688 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a53      	ldr	r2, [pc, #332]	@ (80037b4 <HAL_ADC_Init+0x298>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d004      	beq.n	8003676 <HAL_ADC_Init+0x15a>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a51      	ldr	r2, [pc, #324]	@ (80037b8 <HAL_ADC_Init+0x29c>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d101      	bne.n	800367a <HAL_ADC_Init+0x15e>
 8003676:	4a52      	ldr	r2, [pc, #328]	@ (80037c0 <HAL_ADC_Init+0x2a4>)
 8003678:	e000      	b.n	800367c <HAL_ADC_Init+0x160>
 800367a:	4a52      	ldr	r2, [pc, #328]	@ (80037c4 <HAL_ADC_Init+0x2a8>)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	4619      	mov	r1, r3
 8003682:	4610      	mov	r0, r2
 8003684:	f7ff fd0e 	bl	80030a4 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003688:	f7ff fcea 	bl	8003060 <HAL_GetREVID>
 800368c:	4603      	mov	r3, r0
 800368e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003692:	4293      	cmp	r3, r2
 8003694:	d914      	bls.n	80036c0 <HAL_ADC_Init+0x1a4>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	2b10      	cmp	r3, #16
 800369c:	d110      	bne.n	80036c0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	7d5b      	ldrb	r3, [r3, #21]
 80036a2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80036a8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80036ae:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	7f1b      	ldrb	r3, [r3, #28]
 80036b4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80036b6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80036b8:	f043 030c 	orr.w	r3, r3, #12
 80036bc:	61bb      	str	r3, [r7, #24]
 80036be:	e00d      	b.n	80036dc <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	7d5b      	ldrb	r3, [r3, #21]
 80036c4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80036ca:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80036d0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	7f1b      	ldrb	r3, [r3, #28]
 80036d6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80036d8:	4313      	orrs	r3, r2
 80036da:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	7f1b      	ldrb	r3, [r3, #28]
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d106      	bne.n	80036f2 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a1b      	ldr	r3, [r3, #32]
 80036e8:	3b01      	subs	r3, #1
 80036ea:	045b      	lsls	r3, r3, #17
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d009      	beq.n	800370e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036fe:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003706:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	4313      	orrs	r3, r2
 800370c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68da      	ldr	r2, [r3, #12]
 8003714:	4b2c      	ldr	r3, [pc, #176]	@ (80037c8 <HAL_ADC_Init+0x2ac>)
 8003716:	4013      	ands	r3, r2
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	6812      	ldr	r2, [r2, #0]
 800371c:	69b9      	ldr	r1, [r7, #24]
 800371e:	430b      	orrs	r3, r1
 8003720:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4618      	mov	r0, r3
 8003728:	f7ff fed2 	bl	80034d0 <LL_ADC_REG_IsConversionOngoing>
 800372c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4618      	mov	r0, r3
 8003734:	f7ff fedf 	bl	80034f6 <LL_ADC_INJ_IsConversionOngoing>
 8003738:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d15f      	bne.n	8003800 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d15c      	bne.n	8003800 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	7d1b      	ldrb	r3, [r3, #20]
 800374a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8003750:	4313      	orrs	r3, r2
 8003752:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68da      	ldr	r2, [r3, #12]
 800375a:	4b1c      	ldr	r3, [pc, #112]	@ (80037cc <HAL_ADC_Init+0x2b0>)
 800375c:	4013      	ands	r3, r2
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	6812      	ldr	r2, [r2, #0]
 8003762:	69b9      	ldr	r1, [r7, #24]
 8003764:	430b      	orrs	r3, r1
 8003766:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800376e:	2b01      	cmp	r3, #1
 8003770:	d130      	bne.n	80037d4 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003776:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	691a      	ldr	r2, [r3, #16]
 800377e:	4b14      	ldr	r3, [pc, #80]	@ (80037d0 <HAL_ADC_Init+0x2b4>)
 8003780:	4013      	ands	r3, r2
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003786:	3a01      	subs	r2, #1
 8003788:	0411      	lsls	r1, r2, #16
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800378e:	4311      	orrs	r1, r2
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003794:	4311      	orrs	r1, r2
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800379a:	430a      	orrs	r2, r1
 800379c:	431a      	orrs	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f042 0201 	orr.w	r2, r2, #1
 80037a6:	611a      	str	r2, [r3, #16]
 80037a8:	e01c      	b.n	80037e4 <HAL_ADC_Init+0x2c8>
 80037aa:	bf00      	nop
 80037ac:	24000000 	.word	0x24000000
 80037b0:	053e2d63 	.word	0x053e2d63
 80037b4:	40022000 	.word	0x40022000
 80037b8:	40022100 	.word	0x40022100
 80037bc:	58026000 	.word	0x58026000
 80037c0:	40022300 	.word	0x40022300
 80037c4:	58026300 	.word	0x58026300
 80037c8:	fff0c003 	.word	0xfff0c003
 80037cc:	ffffbffc 	.word	0xffffbffc
 80037d0:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	691a      	ldr	r2, [r3, #16]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f022 0201 	bic.w	r2, r2, #1
 80037e2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	430a      	orrs	r2, r1
 80037f8:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 ff64 	bl	80046c8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d10c      	bne.n	8003822 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800380e:	f023 010f 	bic.w	r1, r3, #15
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	1e5a      	subs	r2, r3, #1
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	430a      	orrs	r2, r1
 800381e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003820:	e007      	b.n	8003832 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f022 020f 	bic.w	r2, r2, #15
 8003830:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003836:	f023 0303 	bic.w	r3, r3, #3
 800383a:	f043 0201 	orr.w	r2, r3, #1
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	655a      	str	r2, [r3, #84]	@ 0x54
 8003842:	e007      	b.n	8003854 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003848:	f043 0210 	orr.w	r2, r3, #16
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003854:	7ffb      	ldrb	r3, [r7, #31]
}
 8003856:	4618      	mov	r0, r3
 8003858:	3724      	adds	r7, #36	@ 0x24
 800385a:	46bd      	mov	sp, r7
 800385c:	bd90      	pop	{r4, r7, pc}
 800385e:	bf00      	nop

08003860 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b086      	sub	sp, #24
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a55      	ldr	r2, [pc, #340]	@ (80039c8 <HAL_ADC_Start_DMA+0x168>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d004      	beq.n	8003880 <HAL_ADC_Start_DMA+0x20>
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a54      	ldr	r2, [pc, #336]	@ (80039cc <HAL_ADC_Start_DMA+0x16c>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d101      	bne.n	8003884 <HAL_ADC_Start_DMA+0x24>
 8003880:	4b53      	ldr	r3, [pc, #332]	@ (80039d0 <HAL_ADC_Start_DMA+0x170>)
 8003882:	e000      	b.n	8003886 <HAL_ADC_Start_DMA+0x26>
 8003884:	4b53      	ldr	r3, [pc, #332]	@ (80039d4 <HAL_ADC_Start_DMA+0x174>)
 8003886:	4618      	mov	r0, r3
 8003888:	f7ff fd7c 	bl	8003384 <LL_ADC_GetMultimode>
 800388c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4618      	mov	r0, r3
 8003894:	f7ff fe1c 	bl	80034d0 <LL_ADC_REG_IsConversionOngoing>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	f040 808c 	bne.w	80039b8 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d101      	bne.n	80038ae <HAL_ADC_Start_DMA+0x4e>
 80038aa:	2302      	movs	r3, #2
 80038ac:	e087      	b.n	80039be <HAL_ADC_Start_DMA+0x15e>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d005      	beq.n	80038c8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	2b05      	cmp	r3, #5
 80038c0:	d002      	beq.n	80038c8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	2b09      	cmp	r3, #9
 80038c6:	d170      	bne.n	80039aa <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f000 fddf 	bl	800448c <ADC_Enable>
 80038ce:	4603      	mov	r3, r0
 80038d0:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80038d2:	7dfb      	ldrb	r3, [r7, #23]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d163      	bne.n	80039a0 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80038dc:	4b3e      	ldr	r3, [pc, #248]	@ (80039d8 <HAL_ADC_Start_DMA+0x178>)
 80038de:	4013      	ands	r3, r2
 80038e0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a37      	ldr	r2, [pc, #220]	@ (80039cc <HAL_ADC_Start_DMA+0x16c>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d002      	beq.n	80038f8 <HAL_ADC_Start_DMA+0x98>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	e000      	b.n	80038fa <HAL_ADC_Start_DMA+0x9a>
 80038f8:	4b33      	ldr	r3, [pc, #204]	@ (80039c8 <HAL_ADC_Start_DMA+0x168>)
 80038fa:	68fa      	ldr	r2, [r7, #12]
 80038fc:	6812      	ldr	r2, [r2, #0]
 80038fe:	4293      	cmp	r3, r2
 8003900:	d002      	beq.n	8003908 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d105      	bne.n	8003914 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800390c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003918:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d006      	beq.n	800392e <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003924:	f023 0206 	bic.w	r2, r3, #6
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	659a      	str	r2, [r3, #88]	@ 0x58
 800392c:	e002      	b.n	8003934 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003938:	4a28      	ldr	r2, [pc, #160]	@ (80039dc <HAL_ADC_Start_DMA+0x17c>)
 800393a:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003940:	4a27      	ldr	r2, [pc, #156]	@ (80039e0 <HAL_ADC_Start_DMA+0x180>)
 8003942:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003948:	4a26      	ldr	r2, [pc, #152]	@ (80039e4 <HAL_ADC_Start_DMA+0x184>)
 800394a:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	221c      	movs	r2, #28
 8003952:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	685a      	ldr	r2, [r3, #4]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f042 0210 	orr.w	r2, r2, #16
 800396a:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003974:	4619      	mov	r1, r3
 8003976:	4610      	mov	r0, r2
 8003978:	f7ff fc8e 	bl	8003298 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	3340      	adds	r3, #64	@ 0x40
 8003986:	4619      	mov	r1, r3
 8003988:	68ba      	ldr	r2, [r7, #8]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f001 fd5c 	bl	8005448 <HAL_DMA_Start_IT>
 8003990:	4603      	mov	r3, r0
 8003992:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4618      	mov	r0, r3
 800399a:	f7ff fd85 	bl	80034a8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800399e:	e00d      	b.n	80039bc <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 80039a8:	e008      	b.n	80039bc <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80039b6:	e001      	b.n	80039bc <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80039b8:	2302      	movs	r3, #2
 80039ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80039bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3718      	adds	r7, #24
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	40022000 	.word	0x40022000
 80039cc:	40022100 	.word	0x40022100
 80039d0:	40022300 	.word	0x40022300
 80039d4:	58026300 	.word	0x58026300
 80039d8:	fffff0fe 	.word	0xfffff0fe
 80039dc:	080045a1 	.word	0x080045a1
 80039e0:	08004679 	.word	0x08004679
 80039e4:	08004695 	.word	0x08004695

080039e8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b08a      	sub	sp, #40	@ 0x28
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80039f0:	2300      	movs	r3, #0
 80039f2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a87      	ldr	r2, [pc, #540]	@ (8003c28 <HAL_ADC_IRQHandler+0x240>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d004      	beq.n	8003a18 <HAL_ADC_IRQHandler+0x30>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a86      	ldr	r2, [pc, #536]	@ (8003c2c <HAL_ADC_IRQHandler+0x244>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d101      	bne.n	8003a1c <HAL_ADC_IRQHandler+0x34>
 8003a18:	4b85      	ldr	r3, [pc, #532]	@ (8003c30 <HAL_ADC_IRQHandler+0x248>)
 8003a1a:	e000      	b.n	8003a1e <HAL_ADC_IRQHandler+0x36>
 8003a1c:	4b85      	ldr	r3, [pc, #532]	@ (8003c34 <HAL_ADC_IRQHandler+0x24c>)
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7ff fcb0 	bl	8003384 <LL_ADC_GetMultimode>
 8003a24:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	f003 0302 	and.w	r3, r3, #2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d017      	beq.n	8003a60 <HAL_ADC_IRQHandler+0x78>
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	f003 0302 	and.w	r3, r3, #2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d012      	beq.n	8003a60 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a3e:	f003 0310 	and.w	r3, r3, #16
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d105      	bne.n	8003a52 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a4a:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 ff92 	bl	800497c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2202      	movs	r2, #2
 8003a5e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	f003 0304 	and.w	r3, r3, #4
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d004      	beq.n	8003a74 <HAL_ADC_IRQHandler+0x8c>
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	f003 0304 	and.w	r3, r3, #4
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d10a      	bne.n	8003a8a <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f000 8083 	beq.w	8003b86 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	f003 0308 	and.w	r3, r3, #8
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d07d      	beq.n	8003b86 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a8e:	f003 0310 	and.w	r3, r3, #16
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d105      	bne.n	8003aa2 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a9a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7ff fbb7 	bl	800321a <LL_ADC_REG_IsTriggerSourceSWStart>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d062      	beq.n	8003b78 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a5d      	ldr	r2, [pc, #372]	@ (8003c2c <HAL_ADC_IRQHandler+0x244>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d002      	beq.n	8003ac2 <HAL_ADC_IRQHandler+0xda>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	e000      	b.n	8003ac4 <HAL_ADC_IRQHandler+0xdc>
 8003ac2:	4b59      	ldr	r3, [pc, #356]	@ (8003c28 <HAL_ADC_IRQHandler+0x240>)
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	6812      	ldr	r2, [r2, #0]
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d008      	beq.n	8003ade <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d005      	beq.n	8003ade <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	2b05      	cmp	r3, #5
 8003ad6:	d002      	beq.n	8003ade <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	2b09      	cmp	r3, #9
 8003adc:	d104      	bne.n	8003ae8 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	623b      	str	r3, [r7, #32]
 8003ae6:	e00c      	b.n	8003b02 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a4f      	ldr	r2, [pc, #316]	@ (8003c2c <HAL_ADC_IRQHandler+0x244>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d002      	beq.n	8003af8 <HAL_ADC_IRQHandler+0x110>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	e000      	b.n	8003afa <HAL_ADC_IRQHandler+0x112>
 8003af8:	4b4b      	ldr	r3, [pc, #300]	@ (8003c28 <HAL_ADC_IRQHandler+0x240>)
 8003afa:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003b02:	6a3b      	ldr	r3, [r7, #32]
 8003b04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d135      	bne.n	8003b78 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0308 	and.w	r3, r3, #8
 8003b16:	2b08      	cmp	r3, #8
 8003b18:	d12e      	bne.n	8003b78 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7ff fcd6 	bl	80034d0 <LL_ADC_REG_IsConversionOngoing>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d11a      	bne.n	8003b60 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	685a      	ldr	r2, [r3, #4]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f022 020c 	bic.w	r2, r2, #12
 8003b38:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b3e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b4a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d112      	bne.n	8003b78 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b56:	f043 0201 	orr.w	r2, r3, #1
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	655a      	str	r2, [r3, #84]	@ 0x54
 8003b5e:	e00b      	b.n	8003b78 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b64:	f043 0210 	orr.w	r2, r3, #16
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b70:	f043 0201 	orr.w	r2, r3, #1
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f000 f96f 	bl	8003e5c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	220c      	movs	r2, #12
 8003b84:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	f003 0320 	and.w	r3, r3, #32
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d004      	beq.n	8003b9a <HAL_ADC_IRQHandler+0x1b2>
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	f003 0320 	and.w	r3, r3, #32
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d10b      	bne.n	8003bb2 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f000 80a0 	beq.w	8003ce6 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f000 809a 	beq.w	8003ce6 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bb6:	f003 0310 	and.w	r3, r3, #16
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d105      	bne.n	8003bca <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bc2:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7ff fb75 	bl	80032be <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003bd4:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7ff fb1d 	bl	800321a <LL_ADC_REG_IsTriggerSourceSWStart>
 8003be0:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a11      	ldr	r2, [pc, #68]	@ (8003c2c <HAL_ADC_IRQHandler+0x244>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d002      	beq.n	8003bf2 <HAL_ADC_IRQHandler+0x20a>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	e000      	b.n	8003bf4 <HAL_ADC_IRQHandler+0x20c>
 8003bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8003c28 <HAL_ADC_IRQHandler+0x240>)
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	6812      	ldr	r2, [r2, #0]
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d008      	beq.n	8003c0e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d005      	beq.n	8003c0e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	2b06      	cmp	r3, #6
 8003c06:	d002      	beq.n	8003c0e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	2b07      	cmp	r3, #7
 8003c0c:	d104      	bne.n	8003c18 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	623b      	str	r3, [r7, #32]
 8003c16:	e014      	b.n	8003c42 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a03      	ldr	r2, [pc, #12]	@ (8003c2c <HAL_ADC_IRQHandler+0x244>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d00a      	beq.n	8003c38 <HAL_ADC_IRQHandler+0x250>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	e008      	b.n	8003c3a <HAL_ADC_IRQHandler+0x252>
 8003c28:	40022000 	.word	0x40022000
 8003c2c:	40022100 	.word	0x40022100
 8003c30:	40022300 	.word	0x40022300
 8003c34:	58026300 	.word	0x58026300
 8003c38:	4b84      	ldr	r3, [pc, #528]	@ (8003e4c <HAL_ADC_IRQHandler+0x464>)
 8003c3a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d047      	beq.n	8003cd8 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003c48:	6a3b      	ldr	r3, [r7, #32]
 8003c4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d007      	beq.n	8003c62 <HAL_ADC_IRQHandler+0x27a>
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d03f      	beq.n	8003cd8 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003c58:	6a3b      	ldr	r3, [r7, #32]
 8003c5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d13a      	bne.n	8003cd8 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c6c:	2b40      	cmp	r3, #64	@ 0x40
 8003c6e:	d133      	bne.n	8003cd8 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003c70:	6a3b      	ldr	r3, [r7, #32]
 8003c72:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d12e      	bne.n	8003cd8 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f7ff fc39 	bl	80034f6 <LL_ADC_INJ_IsConversionOngoing>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d11a      	bne.n	8003cc0 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	685a      	ldr	r2, [r3, #4]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003c98:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c9e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003caa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d112      	bne.n	8003cd8 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cb6:	f043 0201 	orr.w	r2, r3, #1
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	655a      	str	r2, [r3, #84]	@ 0x54
 8003cbe:	e00b      	b.n	8003cd8 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cc4:	f043 0210 	orr.w	r2, r3, #16
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cd0:	f043 0201 	orr.w	r2, r3, #1
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f000 fe27 	bl	800492c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2260      	movs	r2, #96	@ 0x60
 8003ce4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d011      	beq.n	8003d14 <HAL_ADC_IRQHandler+0x32c>
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00c      	beq.n	8003d14 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cfe:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 f8bc 	bl	8003e84 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2280      	movs	r2, #128	@ 0x80
 8003d12:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d012      	beq.n	8003d44 <HAL_ADC_IRQHandler+0x35c>
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00d      	beq.n	8003d44 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d2c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f000 fe0d 	bl	8004954 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003d42:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d012      	beq.n	8003d74 <HAL_ADC_IRQHandler+0x38c>
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d00d      	beq.n	8003d74 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d5c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f000 fdff 	bl	8004968 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d72:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	f003 0310 	and.w	r3, r3, #16
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d043      	beq.n	8003e06 <HAL_ADC_IRQHandler+0x41e>
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	f003 0310 	and.w	r3, r3, #16
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d03e      	beq.n	8003e06 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d102      	bne.n	8003d96 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8003d90:	2301      	movs	r3, #1
 8003d92:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d94:	e021      	b.n	8003dda <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d015      	beq.n	8003dc8 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a2a      	ldr	r2, [pc, #168]	@ (8003e4c <HAL_ADC_IRQHandler+0x464>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d004      	beq.n	8003db0 <HAL_ADC_IRQHandler+0x3c8>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a29      	ldr	r2, [pc, #164]	@ (8003e50 <HAL_ADC_IRQHandler+0x468>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d101      	bne.n	8003db4 <HAL_ADC_IRQHandler+0x3cc>
 8003db0:	4b28      	ldr	r3, [pc, #160]	@ (8003e54 <HAL_ADC_IRQHandler+0x46c>)
 8003db2:	e000      	b.n	8003db6 <HAL_ADC_IRQHandler+0x3ce>
 8003db4:	4b28      	ldr	r3, [pc, #160]	@ (8003e58 <HAL_ADC_IRQHandler+0x470>)
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7ff faf2 	bl	80033a0 <LL_ADC_GetMultiDMATransfer>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00b      	beq.n	8003dda <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dc6:	e008      	b.n	8003dda <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	f003 0303 	and.w	r3, r3, #3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d001      	beq.n	8003dda <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d10e      	bne.n	8003dfe <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003de4:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003df0:	f043 0202 	orr.w	r2, r3, #2
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 f84d 	bl	8003e98 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2210      	movs	r2, #16
 8003e04:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d018      	beq.n	8003e42 <HAL_ADC_IRQHandler+0x45a>
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d013      	beq.n	8003e42 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e1e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e2a:	f043 0208 	orr.w	r2, r3, #8
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003e3a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f000 fd7f 	bl	8004940 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003e42:	bf00      	nop
 8003e44:	3728      	adds	r7, #40	@ 0x28
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	40022000 	.word	0x40022000
 8003e50:	40022100 	.word	0x40022100
 8003e54:	40022300 	.word	0x40022300
 8003e58:	58026300 	.word	0x58026300

08003e5c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003e64:	bf00      	nop
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003e78:	bf00      	nop
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003eac:	b590      	push	{r4, r7, lr}
 8003eae:	b08d      	sub	sp, #52	@ 0x34
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	4a65      	ldr	r2, [pc, #404]	@ (800405c <HAL_ADC_ConfigChannel+0x1b0>)
 8003ec6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d101      	bne.n	8003ed6 <HAL_ADC_ConfigChannel+0x2a>
 8003ed2:	2302      	movs	r3, #2
 8003ed4:	e2c7      	b.n	8004466 <HAL_ADC_ConfigChannel+0x5ba>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7ff faf4 	bl	80034d0 <LL_ADC_REG_IsConversionOngoing>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f040 82ac 	bne.w	8004448 <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	db2c      	blt.n	8003f52 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d108      	bne.n	8003f16 <HAL_ADC_ConfigChannel+0x6a>
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	0e9b      	lsrs	r3, r3, #26
 8003f0a:	f003 031f 	and.w	r3, r3, #31
 8003f0e:	2201      	movs	r2, #1
 8003f10:	fa02 f303 	lsl.w	r3, r2, r3
 8003f14:	e016      	b.n	8003f44 <HAL_ADC_ConfigChannel+0x98>
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	fa93 f3a3 	rbit	r3, r3
 8003f22:	613b      	str	r3, [r7, #16]
  return result;
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d101      	bne.n	8003f32 <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 8003f2e:	2320      	movs	r3, #32
 8003f30:	e003      	b.n	8003f3a <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	fab3 f383 	clz	r3, r3
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	f003 031f 	and.w	r3, r3, #31
 8003f3e:	2201      	movs	r2, #1
 8003f40:	fa02 f303 	lsl.w	r3, r2, r3
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	6812      	ldr	r2, [r2, #0]
 8003f48:	69d1      	ldr	r1, [r2, #28]
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	6812      	ldr	r2, [r2, #0]
 8003f4e:	430b      	orrs	r3, r1
 8003f50:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6818      	ldr	r0, [r3, #0]
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	6859      	ldr	r1, [r3, #4]
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	461a      	mov	r2, r3
 8003f60:	f7ff f96e 	bl	8003240 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f7ff fab1 	bl	80034d0 <LL_ADC_REG_IsConversionOngoing>
 8003f6e:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7ff fabe 	bl	80034f6 <LL_ADC_INJ_IsConversionOngoing>
 8003f7a:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f040 80b8 	bne.w	80040f4 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	f040 80b4 	bne.w	80040f4 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6818      	ldr	r0, [r3, #0]
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	6819      	ldr	r1, [r3, #0]
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	461a      	mov	r2, r3
 8003f9a:	f7ff f9a3 	bl	80032e4 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003f9e:	4b30      	ldr	r3, [pc, #192]	@ (8004060 <HAL_ADC_ConfigChannel+0x1b4>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003fa6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003faa:	d10b      	bne.n	8003fc4 <HAL_ADC_ConfigChannel+0x118>
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	695a      	ldr	r2, [r3, #20]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	089b      	lsrs	r3, r3, #2
 8003fb8:	f003 0307 	and.w	r3, r3, #7
 8003fbc:	005b      	lsls	r3, r3, #1
 8003fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc2:	e01d      	b.n	8004000 <HAL_ADC_ConfigChannel+0x154>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	f003 0310 	and.w	r3, r3, #16
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d10b      	bne.n	8003fea <HAL_ADC_ConfigChannel+0x13e>
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	695a      	ldr	r2, [r3, #20]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	089b      	lsrs	r3, r3, #2
 8003fde:	f003 0307 	and.w	r3, r3, #7
 8003fe2:	005b      	lsls	r3, r3, #1
 8003fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe8:	e00a      	b.n	8004000 <HAL_ADC_ConfigChannel+0x154>
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	695a      	ldr	r2, [r3, #20]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	089b      	lsrs	r3, r3, #2
 8003ff6:	f003 0304 	and.w	r3, r3, #4
 8003ffa:	005b      	lsls	r3, r3, #1
 8003ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8004000:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	2b04      	cmp	r3, #4
 8004008:	d02c      	beq.n	8004064 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6818      	ldr	r0, [r3, #0]
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	6919      	ldr	r1, [r3, #16]
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	6a3b      	ldr	r3, [r7, #32]
 8004018:	f7ff f8ab 	bl	8003172 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6818      	ldr	r0, [r3, #0]
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	6919      	ldr	r1, [r3, #16]
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	7e5b      	ldrb	r3, [r3, #25]
 8004028:	2b01      	cmp	r3, #1
 800402a:	d102      	bne.n	8004032 <HAL_ADC_ConfigChannel+0x186>
 800402c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004030:	e000      	b.n	8004034 <HAL_ADC_ConfigChannel+0x188>
 8004032:	2300      	movs	r3, #0
 8004034:	461a      	mov	r2, r3
 8004036:	f7ff f8d5 	bl	80031e4 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6818      	ldr	r0, [r3, #0]
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	6919      	ldr	r1, [r3, #16]
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	7e1b      	ldrb	r3, [r3, #24]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d102      	bne.n	8004050 <HAL_ADC_ConfigChannel+0x1a4>
 800404a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800404e:	e000      	b.n	8004052 <HAL_ADC_ConfigChannel+0x1a6>
 8004050:	2300      	movs	r3, #0
 8004052:	461a      	mov	r2, r3
 8004054:	f7ff f8ad 	bl	80031b2 <LL_ADC_SetDataRightShift>
 8004058:	e04c      	b.n	80040f4 <HAL_ADC_ConfigChannel+0x248>
 800405a:	bf00      	nop
 800405c:	47ff0000 	.word	0x47ff0000
 8004060:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800406a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	069b      	lsls	r3, r3, #26
 8004074:	429a      	cmp	r2, r3
 8004076:	d107      	bne.n	8004088 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004086:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800408e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	069b      	lsls	r3, r3, #26
 8004098:	429a      	cmp	r2, r3
 800409a:	d107      	bne.n	80040ac <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80040aa:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040b2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	069b      	lsls	r3, r3, #26
 80040bc:	429a      	cmp	r2, r3
 80040be:	d107      	bne.n	80040d0 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80040ce:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040d6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	069b      	lsls	r3, r3, #26
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d107      	bne.n	80040f4 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80040f2:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7ff f9c1 	bl	8003480 <LL_ADC_IsEnabled>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	f040 81aa 	bne.w	800445a <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6818      	ldr	r0, [r3, #0]
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	6819      	ldr	r1, [r3, #0]
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	461a      	mov	r2, r3
 8004114:	f7ff f912 	bl	800333c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	4a87      	ldr	r2, [pc, #540]	@ (800433c <HAL_ADC_ConfigChannel+0x490>)
 800411e:	4293      	cmp	r3, r2
 8004120:	f040 809a 	bne.w	8004258 <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4984      	ldr	r1, [pc, #528]	@ (8004340 <HAL_ADC_ConfigChannel+0x494>)
 800412e:	428b      	cmp	r3, r1
 8004130:	d147      	bne.n	80041c2 <HAL_ADC_ConfigChannel+0x316>
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4983      	ldr	r1, [pc, #524]	@ (8004344 <HAL_ADC_ConfigChannel+0x498>)
 8004138:	428b      	cmp	r3, r1
 800413a:	d040      	beq.n	80041be <HAL_ADC_ConfigChannel+0x312>
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4981      	ldr	r1, [pc, #516]	@ (8004348 <HAL_ADC_ConfigChannel+0x49c>)
 8004142:	428b      	cmp	r3, r1
 8004144:	d039      	beq.n	80041ba <HAL_ADC_ConfigChannel+0x30e>
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4980      	ldr	r1, [pc, #512]	@ (800434c <HAL_ADC_ConfigChannel+0x4a0>)
 800414c:	428b      	cmp	r3, r1
 800414e:	d032      	beq.n	80041b6 <HAL_ADC_ConfigChannel+0x30a>
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	497e      	ldr	r1, [pc, #504]	@ (8004350 <HAL_ADC_ConfigChannel+0x4a4>)
 8004156:	428b      	cmp	r3, r1
 8004158:	d02b      	beq.n	80041b2 <HAL_ADC_ConfigChannel+0x306>
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	497d      	ldr	r1, [pc, #500]	@ (8004354 <HAL_ADC_ConfigChannel+0x4a8>)
 8004160:	428b      	cmp	r3, r1
 8004162:	d024      	beq.n	80041ae <HAL_ADC_ConfigChannel+0x302>
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	497b      	ldr	r1, [pc, #492]	@ (8004358 <HAL_ADC_ConfigChannel+0x4ac>)
 800416a:	428b      	cmp	r3, r1
 800416c:	d01d      	beq.n	80041aa <HAL_ADC_ConfigChannel+0x2fe>
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	497a      	ldr	r1, [pc, #488]	@ (800435c <HAL_ADC_ConfigChannel+0x4b0>)
 8004174:	428b      	cmp	r3, r1
 8004176:	d016      	beq.n	80041a6 <HAL_ADC_ConfigChannel+0x2fa>
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4978      	ldr	r1, [pc, #480]	@ (8004360 <HAL_ADC_ConfigChannel+0x4b4>)
 800417e:	428b      	cmp	r3, r1
 8004180:	d00f      	beq.n	80041a2 <HAL_ADC_ConfigChannel+0x2f6>
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4977      	ldr	r1, [pc, #476]	@ (8004364 <HAL_ADC_ConfigChannel+0x4b8>)
 8004188:	428b      	cmp	r3, r1
 800418a:	d008      	beq.n	800419e <HAL_ADC_ConfigChannel+0x2f2>
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4975      	ldr	r1, [pc, #468]	@ (8004368 <HAL_ADC_ConfigChannel+0x4bc>)
 8004192:	428b      	cmp	r3, r1
 8004194:	d101      	bne.n	800419a <HAL_ADC_ConfigChannel+0x2ee>
 8004196:	4b75      	ldr	r3, [pc, #468]	@ (800436c <HAL_ADC_ConfigChannel+0x4c0>)
 8004198:	e05a      	b.n	8004250 <HAL_ADC_ConfigChannel+0x3a4>
 800419a:	2300      	movs	r3, #0
 800419c:	e058      	b.n	8004250 <HAL_ADC_ConfigChannel+0x3a4>
 800419e:	4b74      	ldr	r3, [pc, #464]	@ (8004370 <HAL_ADC_ConfigChannel+0x4c4>)
 80041a0:	e056      	b.n	8004250 <HAL_ADC_ConfigChannel+0x3a4>
 80041a2:	4b74      	ldr	r3, [pc, #464]	@ (8004374 <HAL_ADC_ConfigChannel+0x4c8>)
 80041a4:	e054      	b.n	8004250 <HAL_ADC_ConfigChannel+0x3a4>
 80041a6:	4b6e      	ldr	r3, [pc, #440]	@ (8004360 <HAL_ADC_ConfigChannel+0x4b4>)
 80041a8:	e052      	b.n	8004250 <HAL_ADC_ConfigChannel+0x3a4>
 80041aa:	4b6c      	ldr	r3, [pc, #432]	@ (800435c <HAL_ADC_ConfigChannel+0x4b0>)
 80041ac:	e050      	b.n	8004250 <HAL_ADC_ConfigChannel+0x3a4>
 80041ae:	4b72      	ldr	r3, [pc, #456]	@ (8004378 <HAL_ADC_ConfigChannel+0x4cc>)
 80041b0:	e04e      	b.n	8004250 <HAL_ADC_ConfigChannel+0x3a4>
 80041b2:	4b72      	ldr	r3, [pc, #456]	@ (800437c <HAL_ADC_ConfigChannel+0x4d0>)
 80041b4:	e04c      	b.n	8004250 <HAL_ADC_ConfigChannel+0x3a4>
 80041b6:	4b72      	ldr	r3, [pc, #456]	@ (8004380 <HAL_ADC_ConfigChannel+0x4d4>)
 80041b8:	e04a      	b.n	8004250 <HAL_ADC_ConfigChannel+0x3a4>
 80041ba:	4b72      	ldr	r3, [pc, #456]	@ (8004384 <HAL_ADC_ConfigChannel+0x4d8>)
 80041bc:	e048      	b.n	8004250 <HAL_ADC_ConfigChannel+0x3a4>
 80041be:	2301      	movs	r3, #1
 80041c0:	e046      	b.n	8004250 <HAL_ADC_ConfigChannel+0x3a4>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4970      	ldr	r1, [pc, #448]	@ (8004388 <HAL_ADC_ConfigChannel+0x4dc>)
 80041c8:	428b      	cmp	r3, r1
 80041ca:	d140      	bne.n	800424e <HAL_ADC_ConfigChannel+0x3a2>
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	495c      	ldr	r1, [pc, #368]	@ (8004344 <HAL_ADC_ConfigChannel+0x498>)
 80041d2:	428b      	cmp	r3, r1
 80041d4:	d039      	beq.n	800424a <HAL_ADC_ConfigChannel+0x39e>
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	495b      	ldr	r1, [pc, #364]	@ (8004348 <HAL_ADC_ConfigChannel+0x49c>)
 80041dc:	428b      	cmp	r3, r1
 80041de:	d032      	beq.n	8004246 <HAL_ADC_ConfigChannel+0x39a>
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4959      	ldr	r1, [pc, #356]	@ (800434c <HAL_ADC_ConfigChannel+0x4a0>)
 80041e6:	428b      	cmp	r3, r1
 80041e8:	d02b      	beq.n	8004242 <HAL_ADC_ConfigChannel+0x396>
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4958      	ldr	r1, [pc, #352]	@ (8004350 <HAL_ADC_ConfigChannel+0x4a4>)
 80041f0:	428b      	cmp	r3, r1
 80041f2:	d024      	beq.n	800423e <HAL_ADC_ConfigChannel+0x392>
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4956      	ldr	r1, [pc, #344]	@ (8004354 <HAL_ADC_ConfigChannel+0x4a8>)
 80041fa:	428b      	cmp	r3, r1
 80041fc:	d01d      	beq.n	800423a <HAL_ADC_ConfigChannel+0x38e>
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4955      	ldr	r1, [pc, #340]	@ (8004358 <HAL_ADC_ConfigChannel+0x4ac>)
 8004204:	428b      	cmp	r3, r1
 8004206:	d016      	beq.n	8004236 <HAL_ADC_ConfigChannel+0x38a>
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4953      	ldr	r1, [pc, #332]	@ (800435c <HAL_ADC_ConfigChannel+0x4b0>)
 800420e:	428b      	cmp	r3, r1
 8004210:	d00f      	beq.n	8004232 <HAL_ADC_ConfigChannel+0x386>
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4952      	ldr	r1, [pc, #328]	@ (8004360 <HAL_ADC_ConfigChannel+0x4b4>)
 8004218:	428b      	cmp	r3, r1
 800421a:	d008      	beq.n	800422e <HAL_ADC_ConfigChannel+0x382>
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4951      	ldr	r1, [pc, #324]	@ (8004368 <HAL_ADC_ConfigChannel+0x4bc>)
 8004222:	428b      	cmp	r3, r1
 8004224:	d101      	bne.n	800422a <HAL_ADC_ConfigChannel+0x37e>
 8004226:	4b51      	ldr	r3, [pc, #324]	@ (800436c <HAL_ADC_ConfigChannel+0x4c0>)
 8004228:	e012      	b.n	8004250 <HAL_ADC_ConfigChannel+0x3a4>
 800422a:	2300      	movs	r3, #0
 800422c:	e010      	b.n	8004250 <HAL_ADC_ConfigChannel+0x3a4>
 800422e:	4b51      	ldr	r3, [pc, #324]	@ (8004374 <HAL_ADC_ConfigChannel+0x4c8>)
 8004230:	e00e      	b.n	8004250 <HAL_ADC_ConfigChannel+0x3a4>
 8004232:	4b4b      	ldr	r3, [pc, #300]	@ (8004360 <HAL_ADC_ConfigChannel+0x4b4>)
 8004234:	e00c      	b.n	8004250 <HAL_ADC_ConfigChannel+0x3a4>
 8004236:	4b49      	ldr	r3, [pc, #292]	@ (800435c <HAL_ADC_ConfigChannel+0x4b0>)
 8004238:	e00a      	b.n	8004250 <HAL_ADC_ConfigChannel+0x3a4>
 800423a:	4b4f      	ldr	r3, [pc, #316]	@ (8004378 <HAL_ADC_ConfigChannel+0x4cc>)
 800423c:	e008      	b.n	8004250 <HAL_ADC_ConfigChannel+0x3a4>
 800423e:	4b4f      	ldr	r3, [pc, #316]	@ (800437c <HAL_ADC_ConfigChannel+0x4d0>)
 8004240:	e006      	b.n	8004250 <HAL_ADC_ConfigChannel+0x3a4>
 8004242:	4b4f      	ldr	r3, [pc, #316]	@ (8004380 <HAL_ADC_ConfigChannel+0x4d4>)
 8004244:	e004      	b.n	8004250 <HAL_ADC_ConfigChannel+0x3a4>
 8004246:	4b4f      	ldr	r3, [pc, #316]	@ (8004384 <HAL_ADC_ConfigChannel+0x4d8>)
 8004248:	e002      	b.n	8004250 <HAL_ADC_ConfigChannel+0x3a4>
 800424a:	2301      	movs	r3, #1
 800424c:	e000      	b.n	8004250 <HAL_ADC_ConfigChannel+0x3a4>
 800424e:	2300      	movs	r3, #0
 8004250:	4619      	mov	r1, r3
 8004252:	4610      	mov	r0, r2
 8004254:	f7fe ff5a 	bl	800310c <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2b00      	cmp	r3, #0
 800425e:	f280 80fc 	bge.w	800445a <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a36      	ldr	r2, [pc, #216]	@ (8004340 <HAL_ADC_ConfigChannel+0x494>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d004      	beq.n	8004276 <HAL_ADC_ConfigChannel+0x3ca>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a45      	ldr	r2, [pc, #276]	@ (8004388 <HAL_ADC_ConfigChannel+0x4dc>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d101      	bne.n	800427a <HAL_ADC_ConfigChannel+0x3ce>
 8004276:	4b45      	ldr	r3, [pc, #276]	@ (800438c <HAL_ADC_ConfigChannel+0x4e0>)
 8004278:	e000      	b.n	800427c <HAL_ADC_ConfigChannel+0x3d0>
 800427a:	4b45      	ldr	r3, [pc, #276]	@ (8004390 <HAL_ADC_ConfigChannel+0x4e4>)
 800427c:	4618      	mov	r0, r3
 800427e:	f7fe ff37 	bl	80030f0 <LL_ADC_GetCommonPathInternalCh>
 8004282:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a2d      	ldr	r2, [pc, #180]	@ (8004340 <HAL_ADC_ConfigChannel+0x494>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d004      	beq.n	8004298 <HAL_ADC_ConfigChannel+0x3ec>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a3d      	ldr	r2, [pc, #244]	@ (8004388 <HAL_ADC_ConfigChannel+0x4dc>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d10e      	bne.n	80042b6 <HAL_ADC_ConfigChannel+0x40a>
 8004298:	4829      	ldr	r0, [pc, #164]	@ (8004340 <HAL_ADC_ConfigChannel+0x494>)
 800429a:	f7ff f8f1 	bl	8003480 <LL_ADC_IsEnabled>
 800429e:	4604      	mov	r4, r0
 80042a0:	4839      	ldr	r0, [pc, #228]	@ (8004388 <HAL_ADC_ConfigChannel+0x4dc>)
 80042a2:	f7ff f8ed 	bl	8003480 <LL_ADC_IsEnabled>
 80042a6:	4603      	mov	r3, r0
 80042a8:	4323      	orrs	r3, r4
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	bf0c      	ite	eq
 80042ae:	2301      	moveq	r3, #1
 80042b0:	2300      	movne	r3, #0
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	e008      	b.n	80042c8 <HAL_ADC_ConfigChannel+0x41c>
 80042b6:	4837      	ldr	r0, [pc, #220]	@ (8004394 <HAL_ADC_ConfigChannel+0x4e8>)
 80042b8:	f7ff f8e2 	bl	8003480 <LL_ADC_IsEnabled>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	bf0c      	ite	eq
 80042c2:	2301      	moveq	r3, #1
 80042c4:	2300      	movne	r3, #0
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	f000 80b3 	beq.w	8004434 <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a31      	ldr	r2, [pc, #196]	@ (8004398 <HAL_ADC_ConfigChannel+0x4ec>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d165      	bne.n	80043a4 <HAL_ADC_ConfigChannel+0x4f8>
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d160      	bne.n	80043a4 <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a2b      	ldr	r2, [pc, #172]	@ (8004394 <HAL_ADC_ConfigChannel+0x4e8>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	f040 80b6 	bne.w	800445a <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a13      	ldr	r2, [pc, #76]	@ (8004340 <HAL_ADC_ConfigChannel+0x494>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d004      	beq.n	8004302 <HAL_ADC_ConfigChannel+0x456>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a22      	ldr	r2, [pc, #136]	@ (8004388 <HAL_ADC_ConfigChannel+0x4dc>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d101      	bne.n	8004306 <HAL_ADC_ConfigChannel+0x45a>
 8004302:	4a22      	ldr	r2, [pc, #136]	@ (800438c <HAL_ADC_ConfigChannel+0x4e0>)
 8004304:	e000      	b.n	8004308 <HAL_ADC_ConfigChannel+0x45c>
 8004306:	4a22      	ldr	r2, [pc, #136]	@ (8004390 <HAL_ADC_ConfigChannel+0x4e4>)
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800430e:	4619      	mov	r1, r3
 8004310:	4610      	mov	r0, r2
 8004312:	f7fe feda 	bl	80030ca <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004316:	4b21      	ldr	r3, [pc, #132]	@ (800439c <HAL_ADC_ConfigChannel+0x4f0>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	099b      	lsrs	r3, r3, #6
 800431c:	4a20      	ldr	r2, [pc, #128]	@ (80043a0 <HAL_ADC_ConfigChannel+0x4f4>)
 800431e:	fba2 2303 	umull	r2, r3, r2, r3
 8004322:	099b      	lsrs	r3, r3, #6
 8004324:	3301      	adds	r3, #1
 8004326:	005b      	lsls	r3, r3, #1
 8004328:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800432a:	e002      	b.n	8004332 <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	3b01      	subs	r3, #1
 8004330:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d1f9      	bne.n	800432c <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004338:	e08f      	b.n	800445a <HAL_ADC_ConfigChannel+0x5ae>
 800433a:	bf00      	nop
 800433c:	47ff0000 	.word	0x47ff0000
 8004340:	40022000 	.word	0x40022000
 8004344:	04300002 	.word	0x04300002
 8004348:	08600004 	.word	0x08600004
 800434c:	0c900008 	.word	0x0c900008
 8004350:	10c00010 	.word	0x10c00010
 8004354:	14f00020 	.word	0x14f00020
 8004358:	2a000400 	.word	0x2a000400
 800435c:	2e300800 	.word	0x2e300800
 8004360:	32601000 	.word	0x32601000
 8004364:	43210000 	.word	0x43210000
 8004368:	4b840000 	.word	0x4b840000
 800436c:	4fb80000 	.word	0x4fb80000
 8004370:	47520000 	.word	0x47520000
 8004374:	36902000 	.word	0x36902000
 8004378:	25b00200 	.word	0x25b00200
 800437c:	21800100 	.word	0x21800100
 8004380:	1d500080 	.word	0x1d500080
 8004384:	19200040 	.word	0x19200040
 8004388:	40022100 	.word	0x40022100
 800438c:	40022300 	.word	0x40022300
 8004390:	58026300 	.word	0x58026300
 8004394:	58026000 	.word	0x58026000
 8004398:	cb840000 	.word	0xcb840000
 800439c:	24000000 	.word	0x24000000
 80043a0:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a31      	ldr	r2, [pc, #196]	@ (8004470 <HAL_ADC_ConfigChannel+0x5c4>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d11e      	bne.n	80043ec <HAL_ADC_ConfigChannel+0x540>
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d119      	bne.n	80043ec <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a2d      	ldr	r2, [pc, #180]	@ (8004474 <HAL_ADC_ConfigChannel+0x5c8>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d14b      	bne.n	800445a <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a2c      	ldr	r2, [pc, #176]	@ (8004478 <HAL_ADC_ConfigChannel+0x5cc>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d004      	beq.n	80043d6 <HAL_ADC_ConfigChannel+0x52a>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a2a      	ldr	r2, [pc, #168]	@ (800447c <HAL_ADC_ConfigChannel+0x5d0>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d101      	bne.n	80043da <HAL_ADC_ConfigChannel+0x52e>
 80043d6:	4a2a      	ldr	r2, [pc, #168]	@ (8004480 <HAL_ADC_ConfigChannel+0x5d4>)
 80043d8:	e000      	b.n	80043dc <HAL_ADC_ConfigChannel+0x530>
 80043da:	4a2a      	ldr	r2, [pc, #168]	@ (8004484 <HAL_ADC_ConfigChannel+0x5d8>)
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80043e2:	4619      	mov	r1, r3
 80043e4:	4610      	mov	r0, r2
 80043e6:	f7fe fe70 	bl	80030ca <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80043ea:	e036      	b.n	800445a <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a25      	ldr	r2, [pc, #148]	@ (8004488 <HAL_ADC_ConfigChannel+0x5dc>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d131      	bne.n	800445a <HAL_ADC_ConfigChannel+0x5ae>
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d12c      	bne.n	800445a <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a1b      	ldr	r2, [pc, #108]	@ (8004474 <HAL_ADC_ConfigChannel+0x5c8>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d127      	bne.n	800445a <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a1a      	ldr	r2, [pc, #104]	@ (8004478 <HAL_ADC_ConfigChannel+0x5cc>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d004      	beq.n	800441e <HAL_ADC_ConfigChannel+0x572>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a18      	ldr	r2, [pc, #96]	@ (800447c <HAL_ADC_ConfigChannel+0x5d0>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d101      	bne.n	8004422 <HAL_ADC_ConfigChannel+0x576>
 800441e:	4a18      	ldr	r2, [pc, #96]	@ (8004480 <HAL_ADC_ConfigChannel+0x5d4>)
 8004420:	e000      	b.n	8004424 <HAL_ADC_ConfigChannel+0x578>
 8004422:	4a18      	ldr	r2, [pc, #96]	@ (8004484 <HAL_ADC_ConfigChannel+0x5d8>)
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800442a:	4619      	mov	r1, r3
 800442c:	4610      	mov	r0, r2
 800442e:	f7fe fe4c 	bl	80030ca <LL_ADC_SetCommonPathInternalCh>
 8004432:	e012      	b.n	800445a <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004438:	f043 0220 	orr.w	r2, r3, #32
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8004446:	e008      	b.n	800445a <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800444c:	f043 0220 	orr.w	r2, r3, #32
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004462:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8004466:	4618      	mov	r0, r3
 8004468:	3734      	adds	r7, #52	@ 0x34
 800446a:	46bd      	mov	sp, r7
 800446c:	bd90      	pop	{r4, r7, pc}
 800446e:	bf00      	nop
 8004470:	c7520000 	.word	0xc7520000
 8004474:	58026000 	.word	0x58026000
 8004478:	40022000 	.word	0x40022000
 800447c:	40022100 	.word	0x40022100
 8004480:	40022300 	.word	0x40022300
 8004484:	58026300 	.word	0x58026300
 8004488:	cfb80000 	.word	0xcfb80000

0800448c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4618      	mov	r0, r3
 800449a:	f7fe fff1 	bl	8003480 <LL_ADC_IsEnabled>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d16e      	bne.n	8004582 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	689a      	ldr	r2, [r3, #8]
 80044aa:	4b38      	ldr	r3, [pc, #224]	@ (800458c <ADC_Enable+0x100>)
 80044ac:	4013      	ands	r3, r2
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00d      	beq.n	80044ce <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044b6:	f043 0210 	orr.w	r2, r3, #16
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044c2:	f043 0201 	orr.w	r2, r3, #1
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e05a      	b.n	8004584 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7fe ffc0 	bl	8003458 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80044d8:	f7fe fdb6 	bl	8003048 <HAL_GetTick>
 80044dc:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a2b      	ldr	r2, [pc, #172]	@ (8004590 <ADC_Enable+0x104>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d004      	beq.n	80044f2 <ADC_Enable+0x66>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a29      	ldr	r2, [pc, #164]	@ (8004594 <ADC_Enable+0x108>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d101      	bne.n	80044f6 <ADC_Enable+0x6a>
 80044f2:	4b29      	ldr	r3, [pc, #164]	@ (8004598 <ADC_Enable+0x10c>)
 80044f4:	e000      	b.n	80044f8 <ADC_Enable+0x6c>
 80044f6:	4b29      	ldr	r3, [pc, #164]	@ (800459c <ADC_Enable+0x110>)
 80044f8:	4618      	mov	r0, r3
 80044fa:	f7fe ff43 	bl	8003384 <LL_ADC_GetMultimode>
 80044fe:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a23      	ldr	r2, [pc, #140]	@ (8004594 <ADC_Enable+0x108>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d002      	beq.n	8004510 <ADC_Enable+0x84>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	e000      	b.n	8004512 <ADC_Enable+0x86>
 8004510:	4b1f      	ldr	r3, [pc, #124]	@ (8004590 <ADC_Enable+0x104>)
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	6812      	ldr	r2, [r2, #0]
 8004516:	4293      	cmp	r3, r2
 8004518:	d02c      	beq.n	8004574 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d130      	bne.n	8004582 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004520:	e028      	b.n	8004574 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4618      	mov	r0, r3
 8004528:	f7fe ffaa 	bl	8003480 <LL_ADC_IsEnabled>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d104      	bne.n	800453c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4618      	mov	r0, r3
 8004538:	f7fe ff8e 	bl	8003458 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800453c:	f7fe fd84 	bl	8003048 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	2b02      	cmp	r3, #2
 8004548:	d914      	bls.n	8004574 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0301 	and.w	r3, r3, #1
 8004554:	2b01      	cmp	r3, #1
 8004556:	d00d      	beq.n	8004574 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800455c:	f043 0210 	orr.w	r2, r3, #16
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004568:	f043 0201 	orr.w	r2, r3, #1
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e007      	b.n	8004584 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0301 	and.w	r3, r3, #1
 800457e:	2b01      	cmp	r3, #1
 8004580:	d1cf      	bne.n	8004522 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004582:	2300      	movs	r3, #0
}
 8004584:	4618      	mov	r0, r3
 8004586:	3710      	adds	r7, #16
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}
 800458c:	8000003f 	.word	0x8000003f
 8004590:	40022000 	.word	0x40022000
 8004594:	40022100 	.word	0x40022100
 8004598:	40022300 	.word	0x40022300
 800459c:	58026300 	.word	0x58026300

080045a0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045ac:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045b2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d14b      	bne.n	8004652 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045be:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0308 	and.w	r3, r3, #8
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d021      	beq.n	8004618 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4618      	mov	r0, r3
 80045da:	f7fe fe1e 	bl	800321a <LL_ADC_REG_IsTriggerSourceSWStart>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d032      	beq.n	800464a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d12b      	bne.n	800464a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045f6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004602:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d11f      	bne.n	800464a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800460e:	f043 0201 	orr.w	r2, r3, #1
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	655a      	str	r2, [r3, #84]	@ 0x54
 8004616:	e018      	b.n	800464a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	f003 0303 	and.w	r3, r3, #3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d111      	bne.n	800464a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800462a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004636:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d105      	bne.n	800464a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004642:	f043 0201 	orr.w	r2, r3, #1
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800464a:	68f8      	ldr	r0, [r7, #12]
 800464c:	f7ff fc06 	bl	8003e5c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004650:	e00e      	b.n	8004670 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004656:	f003 0310 	and.w	r3, r3, #16
 800465a:	2b00      	cmp	r3, #0
 800465c:	d003      	beq.n	8004666 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800465e:	68f8      	ldr	r0, [r7, #12]
 8004660:	f7ff fc1a 	bl	8003e98 <HAL_ADC_ErrorCallback>
}
 8004664:	e004      	b.n	8004670 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800466a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	4798      	blx	r3
}
 8004670:	bf00      	nop
 8004672:	3710      	adds	r7, #16
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004684:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004686:	68f8      	ldr	r0, [r7, #12]
 8004688:	f7ff fbf2 	bl	8003e70 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800468c:	bf00      	nop
 800468e:	3710      	adds	r7, #16
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046a0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046a6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046b2:	f043 0204 	orr.w	r2, r3, #4
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80046ba:	68f8      	ldr	r0, [r7, #12]
 80046bc:	f7ff fbec 	bl	8003e98 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80046c0:	bf00      	nop
 80046c2:	3710      	adds	r7, #16
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a7a      	ldr	r2, [pc, #488]	@ (80048c0 <ADC_ConfigureBoostMode+0x1f8>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d004      	beq.n	80046e4 <ADC_ConfigureBoostMode+0x1c>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a79      	ldr	r2, [pc, #484]	@ (80048c4 <ADC_ConfigureBoostMode+0x1fc>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d109      	bne.n	80046f8 <ADC_ConfigureBoostMode+0x30>
 80046e4:	4b78      	ldr	r3, [pc, #480]	@ (80048c8 <ADC_ConfigureBoostMode+0x200>)
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	bf14      	ite	ne
 80046f0:	2301      	movne	r3, #1
 80046f2:	2300      	moveq	r3, #0
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	e008      	b.n	800470a <ADC_ConfigureBoostMode+0x42>
 80046f8:	4b74      	ldr	r3, [pc, #464]	@ (80048cc <ADC_ConfigureBoostMode+0x204>)
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004700:	2b00      	cmp	r3, #0
 8004702:	bf14      	ite	ne
 8004704:	2301      	movne	r3, #1
 8004706:	2300      	moveq	r3, #0
 8004708:	b2db      	uxtb	r3, r3
 800470a:	2b00      	cmp	r3, #0
 800470c:	d01c      	beq.n	8004748 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800470e:	f004 fbe1 	bl	8008ed4 <HAL_RCC_GetHCLKFreq>
 8004712:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800471c:	d010      	beq.n	8004740 <ADC_ConfigureBoostMode+0x78>
 800471e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004722:	d873      	bhi.n	800480c <ADC_ConfigureBoostMode+0x144>
 8004724:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004728:	d002      	beq.n	8004730 <ADC_ConfigureBoostMode+0x68>
 800472a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800472e:	d16d      	bne.n	800480c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	0c1b      	lsrs	r3, r3, #16
 8004736:	68fa      	ldr	r2, [r7, #12]
 8004738:	fbb2 f3f3 	udiv	r3, r2, r3
 800473c:	60fb      	str	r3, [r7, #12]
        break;
 800473e:	e068      	b.n	8004812 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	089b      	lsrs	r3, r3, #2
 8004744:	60fb      	str	r3, [r7, #12]
        break;
 8004746:	e064      	b.n	8004812 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004748:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800474c:	f04f 0100 	mov.w	r1, #0
 8004750:	f005 fe26 	bl	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq>
 8004754:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800475e:	d051      	beq.n	8004804 <ADC_ConfigureBoostMode+0x13c>
 8004760:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004764:	d854      	bhi.n	8004810 <ADC_ConfigureBoostMode+0x148>
 8004766:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800476a:	d047      	beq.n	80047fc <ADC_ConfigureBoostMode+0x134>
 800476c:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004770:	d84e      	bhi.n	8004810 <ADC_ConfigureBoostMode+0x148>
 8004772:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004776:	d03d      	beq.n	80047f4 <ADC_ConfigureBoostMode+0x12c>
 8004778:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800477c:	d848      	bhi.n	8004810 <ADC_ConfigureBoostMode+0x148>
 800477e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004782:	d033      	beq.n	80047ec <ADC_ConfigureBoostMode+0x124>
 8004784:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004788:	d842      	bhi.n	8004810 <ADC_ConfigureBoostMode+0x148>
 800478a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800478e:	d029      	beq.n	80047e4 <ADC_ConfigureBoostMode+0x11c>
 8004790:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004794:	d83c      	bhi.n	8004810 <ADC_ConfigureBoostMode+0x148>
 8004796:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800479a:	d01a      	beq.n	80047d2 <ADC_ConfigureBoostMode+0x10a>
 800479c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80047a0:	d836      	bhi.n	8004810 <ADC_ConfigureBoostMode+0x148>
 80047a2:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80047a6:	d014      	beq.n	80047d2 <ADC_ConfigureBoostMode+0x10a>
 80047a8:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80047ac:	d830      	bhi.n	8004810 <ADC_ConfigureBoostMode+0x148>
 80047ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047b2:	d00e      	beq.n	80047d2 <ADC_ConfigureBoostMode+0x10a>
 80047b4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047b8:	d82a      	bhi.n	8004810 <ADC_ConfigureBoostMode+0x148>
 80047ba:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80047be:	d008      	beq.n	80047d2 <ADC_ConfigureBoostMode+0x10a>
 80047c0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80047c4:	d824      	bhi.n	8004810 <ADC_ConfigureBoostMode+0x148>
 80047c6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80047ca:	d002      	beq.n	80047d2 <ADC_ConfigureBoostMode+0x10a>
 80047cc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80047d0:	d11e      	bne.n	8004810 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	0c9b      	lsrs	r3, r3, #18
 80047d8:	005b      	lsls	r3, r3, #1
 80047da:	68fa      	ldr	r2, [r7, #12]
 80047dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e0:	60fb      	str	r3, [r7, #12]
        break;
 80047e2:	e016      	b.n	8004812 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	091b      	lsrs	r3, r3, #4
 80047e8:	60fb      	str	r3, [r7, #12]
        break;
 80047ea:	e012      	b.n	8004812 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	095b      	lsrs	r3, r3, #5
 80047f0:	60fb      	str	r3, [r7, #12]
        break;
 80047f2:	e00e      	b.n	8004812 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	099b      	lsrs	r3, r3, #6
 80047f8:	60fb      	str	r3, [r7, #12]
        break;
 80047fa:	e00a      	b.n	8004812 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	09db      	lsrs	r3, r3, #7
 8004800:	60fb      	str	r3, [r7, #12]
        break;
 8004802:	e006      	b.n	8004812 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	0a1b      	lsrs	r3, r3, #8
 8004808:	60fb      	str	r3, [r7, #12]
        break;
 800480a:	e002      	b.n	8004812 <ADC_ConfigureBoostMode+0x14a>
        break;
 800480c:	bf00      	nop
 800480e:	e000      	b.n	8004812 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004810:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004812:	f7fe fc25 	bl	8003060 <HAL_GetREVID>
 8004816:	4603      	mov	r3, r0
 8004818:	f241 0203 	movw	r2, #4099	@ 0x1003
 800481c:	4293      	cmp	r3, r2
 800481e:	d815      	bhi.n	800484c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	4a2b      	ldr	r2, [pc, #172]	@ (80048d0 <ADC_ConfigureBoostMode+0x208>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d908      	bls.n	800483a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	689a      	ldr	r2, [r3, #8]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004836:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004838:	e03e      	b.n	80048b8 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	689a      	ldr	r2, [r3, #8]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004848:	609a      	str	r2, [r3, #8]
}
 800484a:	e035      	b.n	80048b8 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	085b      	lsrs	r3, r3, #1
 8004850:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	4a1f      	ldr	r2, [pc, #124]	@ (80048d4 <ADC_ConfigureBoostMode+0x20c>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d808      	bhi.n	800486c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	689a      	ldr	r2, [r3, #8]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004868:	609a      	str	r2, [r3, #8]
}
 800486a:	e025      	b.n	80048b8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	4a1a      	ldr	r2, [pc, #104]	@ (80048d8 <ADC_ConfigureBoostMode+0x210>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d80a      	bhi.n	800488a <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004886:	609a      	str	r2, [r3, #8]
}
 8004888:	e016      	b.n	80048b8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	4a13      	ldr	r2, [pc, #76]	@ (80048dc <ADC_ConfigureBoostMode+0x214>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d80a      	bhi.n	80048a8 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048a4:	609a      	str	r2, [r3, #8]
}
 80048a6:	e007      	b.n	80048b8 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	689a      	ldr	r2, [r3, #8]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80048b6:	609a      	str	r2, [r3, #8]
}
 80048b8:	bf00      	nop
 80048ba:	3710      	adds	r7, #16
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	40022000 	.word	0x40022000
 80048c4:	40022100 	.word	0x40022100
 80048c8:	40022300 	.word	0x40022300
 80048cc:	58026300 	.word	0x58026300
 80048d0:	01312d00 	.word	0x01312d00
 80048d4:	005f5e10 	.word	0x005f5e10
 80048d8:	00bebc20 	.word	0x00bebc20
 80048dc:	017d7840 	.word	0x017d7840

080048e0 <LL_ADC_IsEnabled>:
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	f003 0301 	and.w	r3, r3, #1
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d101      	bne.n	80048f8 <LL_ADC_IsEnabled+0x18>
 80048f4:	2301      	movs	r3, #1
 80048f6:	e000      	b.n	80048fa <LL_ADC_IsEnabled+0x1a>
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	370c      	adds	r7, #12
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr

08004906 <LL_ADC_REG_IsConversionOngoing>:
{
 8004906:	b480      	push	{r7}
 8004908:	b083      	sub	sp, #12
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	f003 0304 	and.w	r3, r3, #4
 8004916:	2b04      	cmp	r3, #4
 8004918:	d101      	bne.n	800491e <LL_ADC_REG_IsConversionOngoing+0x18>
 800491a:	2301      	movs	r3, #1
 800491c:	e000      	b.n	8004920 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800491e:	2300      	movs	r3, #0
}
 8004920:	4618      	mov	r0, r3
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004934:	bf00      	nop
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004948:	bf00      	nop
 800494a:	370c      	adds	r7, #12
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800495c:	bf00      	nop
 800495e:	370c      	adds	r7, #12
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr

08004968 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004970:	bf00      	nop
 8004972:	370c      	adds	r7, #12
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004984:	bf00      	nop
 8004986:	370c      	adds	r7, #12
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004990:	b590      	push	{r4, r7, lr}
 8004992:	b09f      	sub	sp, #124	@ 0x7c
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800499a:	2300      	movs	r3, #0
 800499c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d101      	bne.n	80049ae <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80049aa:	2302      	movs	r3, #2
 80049ac:	e0be      	b.n	8004b2c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2201      	movs	r2, #1
 80049b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80049b6:	2300      	movs	r3, #0
 80049b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80049ba:	2300      	movs	r3, #0
 80049bc:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a5c      	ldr	r2, [pc, #368]	@ (8004b34 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d102      	bne.n	80049ce <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80049c8:	4b5b      	ldr	r3, [pc, #364]	@ (8004b38 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80049ca:	60bb      	str	r3, [r7, #8]
 80049cc:	e001      	b.n	80049d2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80049ce:	2300      	movs	r3, #0
 80049d0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d10b      	bne.n	80049f0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049dc:	f043 0220 	orr.w	r2, r3, #32
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e09d      	b.n	8004b2c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7ff ff87 	bl	8004906 <LL_ADC_REG_IsConversionOngoing>
 80049f8:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4618      	mov	r0, r3
 8004a00:	f7ff ff81 	bl	8004906 <LL_ADC_REG_IsConversionOngoing>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d17f      	bne.n	8004b0a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004a0a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d17c      	bne.n	8004b0a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a47      	ldr	r2, [pc, #284]	@ (8004b34 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d004      	beq.n	8004a24 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a46      	ldr	r2, [pc, #280]	@ (8004b38 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d101      	bne.n	8004a28 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004a24:	4b45      	ldr	r3, [pc, #276]	@ (8004b3c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004a26:	e000      	b.n	8004a2a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004a28:	4b45      	ldr	r3, [pc, #276]	@ (8004b40 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004a2a:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d039      	beq.n	8004aa8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004a34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	431a      	orrs	r2, r3
 8004a42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a44:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a3a      	ldr	r2, [pc, #232]	@ (8004b34 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d004      	beq.n	8004a5a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a38      	ldr	r2, [pc, #224]	@ (8004b38 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d10e      	bne.n	8004a78 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004a5a:	4836      	ldr	r0, [pc, #216]	@ (8004b34 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004a5c:	f7ff ff40 	bl	80048e0 <LL_ADC_IsEnabled>
 8004a60:	4604      	mov	r4, r0
 8004a62:	4835      	ldr	r0, [pc, #212]	@ (8004b38 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004a64:	f7ff ff3c 	bl	80048e0 <LL_ADC_IsEnabled>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	4323      	orrs	r3, r4
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	bf0c      	ite	eq
 8004a70:	2301      	moveq	r3, #1
 8004a72:	2300      	movne	r3, #0
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	e008      	b.n	8004a8a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004a78:	4832      	ldr	r0, [pc, #200]	@ (8004b44 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004a7a:	f7ff ff31 	bl	80048e0 <LL_ADC_IsEnabled>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	bf0c      	ite	eq
 8004a84:	2301      	moveq	r3, #1
 8004a86:	2300      	movne	r3, #0
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d047      	beq.n	8004b1e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004a8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a90:	689a      	ldr	r2, [r3, #8]
 8004a92:	4b2d      	ldr	r3, [pc, #180]	@ (8004b48 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004a94:	4013      	ands	r3, r2
 8004a96:	683a      	ldr	r2, [r7, #0]
 8004a98:	6811      	ldr	r1, [r2, #0]
 8004a9a:	683a      	ldr	r2, [r7, #0]
 8004a9c:	6892      	ldr	r2, [r2, #8]
 8004a9e:	430a      	orrs	r2, r1
 8004aa0:	431a      	orrs	r2, r3
 8004aa2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004aa4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004aa6:	e03a      	b.n	8004b1e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004aa8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004ab0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ab2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a1e      	ldr	r2, [pc, #120]	@ (8004b34 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d004      	beq.n	8004ac8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a1d      	ldr	r2, [pc, #116]	@ (8004b38 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d10e      	bne.n	8004ae6 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004ac8:	481a      	ldr	r0, [pc, #104]	@ (8004b34 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004aca:	f7ff ff09 	bl	80048e0 <LL_ADC_IsEnabled>
 8004ace:	4604      	mov	r4, r0
 8004ad0:	4819      	ldr	r0, [pc, #100]	@ (8004b38 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004ad2:	f7ff ff05 	bl	80048e0 <LL_ADC_IsEnabled>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	4323      	orrs	r3, r4
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	bf0c      	ite	eq
 8004ade:	2301      	moveq	r3, #1
 8004ae0:	2300      	movne	r3, #0
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	e008      	b.n	8004af8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004ae6:	4817      	ldr	r0, [pc, #92]	@ (8004b44 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004ae8:	f7ff fefa 	bl	80048e0 <LL_ADC_IsEnabled>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	bf0c      	ite	eq
 8004af2:	2301      	moveq	r3, #1
 8004af4:	2300      	movne	r3, #0
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d010      	beq.n	8004b1e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004afc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004afe:	689a      	ldr	r2, [r3, #8]
 8004b00:	4b11      	ldr	r3, [pc, #68]	@ (8004b48 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004b02:	4013      	ands	r3, r2
 8004b04:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004b06:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004b08:	e009      	b.n	8004b1e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b0e:	f043 0220 	orr.w	r2, r3, #32
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8004b1c:	e000      	b.n	8004b20 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004b1e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004b28:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	377c      	adds	r7, #124	@ 0x7c
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd90      	pop	{r4, r7, pc}
 8004b34:	40022000 	.word	0x40022000
 8004b38:	40022100 	.word	0x40022100
 8004b3c:	40022300 	.word	0x40022300
 8004b40:	58026300 	.word	0x58026300
 8004b44:	58026000 	.word	0x58026000
 8004b48:	fffff0e0 	.word	0xfffff0e0

08004b4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b085      	sub	sp, #20
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f003 0307 	and.w	r3, r3, #7
 8004b5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8004b8c <__NVIC_SetPriorityGrouping+0x40>)
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b62:	68ba      	ldr	r2, [r7, #8]
 8004b64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004b68:	4013      	ands	r3, r2
 8004b6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004b74:	4b06      	ldr	r3, [pc, #24]	@ (8004b90 <__NVIC_SetPriorityGrouping+0x44>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b7a:	4a04      	ldr	r2, [pc, #16]	@ (8004b8c <__NVIC_SetPriorityGrouping+0x40>)
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	60d3      	str	r3, [r2, #12]
}
 8004b80:	bf00      	nop
 8004b82:	3714      	adds	r7, #20
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr
 8004b8c:	e000ed00 	.word	0xe000ed00
 8004b90:	05fa0000 	.word	0x05fa0000

08004b94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b94:	b480      	push	{r7}
 8004b96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b98:	4b04      	ldr	r3, [pc, #16]	@ (8004bac <__NVIC_GetPriorityGrouping+0x18>)
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	0a1b      	lsrs	r3, r3, #8
 8004b9e:	f003 0307 	and.w	r3, r3, #7
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr
 8004bac:	e000ed00 	.word	0xe000ed00

08004bb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004bba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	db0b      	blt.n	8004bda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bc2:	88fb      	ldrh	r3, [r7, #6]
 8004bc4:	f003 021f 	and.w	r2, r3, #31
 8004bc8:	4907      	ldr	r1, [pc, #28]	@ (8004be8 <__NVIC_EnableIRQ+0x38>)
 8004bca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bce:	095b      	lsrs	r3, r3, #5
 8004bd0:	2001      	movs	r0, #1
 8004bd2:	fa00 f202 	lsl.w	r2, r0, r2
 8004bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004bda:	bf00      	nop
 8004bdc:	370c      	adds	r7, #12
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
 8004be6:	bf00      	nop
 8004be8:	e000e100 	.word	0xe000e100

08004bec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	6039      	str	r1, [r7, #0]
 8004bf6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004bf8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	db0a      	blt.n	8004c16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	b2da      	uxtb	r2, r3
 8004c04:	490c      	ldr	r1, [pc, #48]	@ (8004c38 <__NVIC_SetPriority+0x4c>)
 8004c06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c0a:	0112      	lsls	r2, r2, #4
 8004c0c:	b2d2      	uxtb	r2, r2
 8004c0e:	440b      	add	r3, r1
 8004c10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c14:	e00a      	b.n	8004c2c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	b2da      	uxtb	r2, r3
 8004c1a:	4908      	ldr	r1, [pc, #32]	@ (8004c3c <__NVIC_SetPriority+0x50>)
 8004c1c:	88fb      	ldrh	r3, [r7, #6]
 8004c1e:	f003 030f 	and.w	r3, r3, #15
 8004c22:	3b04      	subs	r3, #4
 8004c24:	0112      	lsls	r2, r2, #4
 8004c26:	b2d2      	uxtb	r2, r2
 8004c28:	440b      	add	r3, r1
 8004c2a:	761a      	strb	r2, [r3, #24]
}
 8004c2c:	bf00      	nop
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr
 8004c38:	e000e100 	.word	0xe000e100
 8004c3c:	e000ed00 	.word	0xe000ed00

08004c40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b089      	sub	sp, #36	@ 0x24
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f003 0307 	and.w	r3, r3, #7
 8004c52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	f1c3 0307 	rsb	r3, r3, #7
 8004c5a:	2b04      	cmp	r3, #4
 8004c5c:	bf28      	it	cs
 8004c5e:	2304      	movcs	r3, #4
 8004c60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	3304      	adds	r3, #4
 8004c66:	2b06      	cmp	r3, #6
 8004c68:	d902      	bls.n	8004c70 <NVIC_EncodePriority+0x30>
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	3b03      	subs	r3, #3
 8004c6e:	e000      	b.n	8004c72 <NVIC_EncodePriority+0x32>
 8004c70:	2300      	movs	r3, #0
 8004c72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c74:	f04f 32ff 	mov.w	r2, #4294967295
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7e:	43da      	mvns	r2, r3
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	401a      	ands	r2, r3
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c88:	f04f 31ff 	mov.w	r1, #4294967295
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c92:	43d9      	mvns	r1, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c98:	4313      	orrs	r3, r2
         );
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3724      	adds	r7, #36	@ 0x24
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr
	...

08004ca8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004cb8:	d301      	bcc.n	8004cbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e00f      	b.n	8004cde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004cbe:	4a0a      	ldr	r2, [pc, #40]	@ (8004ce8 <SysTick_Config+0x40>)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004cc6:	210f      	movs	r1, #15
 8004cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8004ccc:	f7ff ff8e 	bl	8004bec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004cd0:	4b05      	ldr	r3, [pc, #20]	@ (8004ce8 <SysTick_Config+0x40>)
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004cd6:	4b04      	ldr	r3, [pc, #16]	@ (8004ce8 <SysTick_Config+0x40>)
 8004cd8:	2207      	movs	r2, #7
 8004cda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3708      	adds	r7, #8
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	e000e010 	.word	0xe000e010

08004cec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f7ff ff29 	bl	8004b4c <__NVIC_SetPriorityGrouping>
}
 8004cfa:	bf00      	nop
 8004cfc:	3708      	adds	r7, #8
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d02:	b580      	push	{r7, lr}
 8004d04:	b086      	sub	sp, #24
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	4603      	mov	r3, r0
 8004d0a:	60b9      	str	r1, [r7, #8]
 8004d0c:	607a      	str	r2, [r7, #4]
 8004d0e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004d10:	f7ff ff40 	bl	8004b94 <__NVIC_GetPriorityGrouping>
 8004d14:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	68b9      	ldr	r1, [r7, #8]
 8004d1a:	6978      	ldr	r0, [r7, #20]
 8004d1c:	f7ff ff90 	bl	8004c40 <NVIC_EncodePriority>
 8004d20:	4602      	mov	r2, r0
 8004d22:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004d26:	4611      	mov	r1, r2
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f7ff ff5f 	bl	8004bec <__NVIC_SetPriority>
}
 8004d2e:	bf00      	nop
 8004d30:	3718      	adds	r7, #24
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}

08004d36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d36:	b580      	push	{r7, lr}
 8004d38:	b082      	sub	sp, #8
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d44:	4618      	mov	r0, r3
 8004d46:	f7ff ff33 	bl	8004bb0 <__NVIC_EnableIRQ>
}
 8004d4a:	bf00      	nop
 8004d4c:	3708      	adds	r7, #8
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}

08004d52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d52:	b580      	push	{r7, lr}
 8004d54:	b082      	sub	sp, #8
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f7ff ffa4 	bl	8004ca8 <SysTick_Config>
 8004d60:	4603      	mov	r3, r0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3708      	adds	r7, #8
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
	...

08004d6c <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8004d70:	4b06      	ldr	r3, [pc, #24]	@ (8004d8c <HAL_GetCurrentCPUID+0x20>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d78:	2b70      	cmp	r3, #112	@ 0x70
 8004d7a:	d101      	bne.n	8004d80 <HAL_GetCurrentCPUID+0x14>
  {
    return  CM7_CPUID;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e000      	b.n	8004d82 <HAL_GetCurrentCPUID+0x16>
  }
  else
  {
    return CM4_CPUID;
 8004d80:	2301      	movs	r3, #1
  }
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr
 8004d8c:	e000ed00 	.word	0xe000ed00

08004d90 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b086      	sub	sp, #24
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004d98:	f7fe f956 	bl	8003048 <HAL_GetTick>
 8004d9c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d101      	bne.n	8004da8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e316      	b.n	80053d6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a66      	ldr	r2, [pc, #408]	@ (8004f48 <HAL_DMA_Init+0x1b8>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d04a      	beq.n	8004e48 <HAL_DMA_Init+0xb8>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a65      	ldr	r2, [pc, #404]	@ (8004f4c <HAL_DMA_Init+0x1bc>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d045      	beq.n	8004e48 <HAL_DMA_Init+0xb8>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a63      	ldr	r2, [pc, #396]	@ (8004f50 <HAL_DMA_Init+0x1c0>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d040      	beq.n	8004e48 <HAL_DMA_Init+0xb8>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a62      	ldr	r2, [pc, #392]	@ (8004f54 <HAL_DMA_Init+0x1c4>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d03b      	beq.n	8004e48 <HAL_DMA_Init+0xb8>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a60      	ldr	r2, [pc, #384]	@ (8004f58 <HAL_DMA_Init+0x1c8>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d036      	beq.n	8004e48 <HAL_DMA_Init+0xb8>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a5f      	ldr	r2, [pc, #380]	@ (8004f5c <HAL_DMA_Init+0x1cc>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d031      	beq.n	8004e48 <HAL_DMA_Init+0xb8>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a5d      	ldr	r2, [pc, #372]	@ (8004f60 <HAL_DMA_Init+0x1d0>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d02c      	beq.n	8004e48 <HAL_DMA_Init+0xb8>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a5c      	ldr	r2, [pc, #368]	@ (8004f64 <HAL_DMA_Init+0x1d4>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d027      	beq.n	8004e48 <HAL_DMA_Init+0xb8>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a5a      	ldr	r2, [pc, #360]	@ (8004f68 <HAL_DMA_Init+0x1d8>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d022      	beq.n	8004e48 <HAL_DMA_Init+0xb8>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a59      	ldr	r2, [pc, #356]	@ (8004f6c <HAL_DMA_Init+0x1dc>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d01d      	beq.n	8004e48 <HAL_DMA_Init+0xb8>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a57      	ldr	r2, [pc, #348]	@ (8004f70 <HAL_DMA_Init+0x1e0>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d018      	beq.n	8004e48 <HAL_DMA_Init+0xb8>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a56      	ldr	r2, [pc, #344]	@ (8004f74 <HAL_DMA_Init+0x1e4>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d013      	beq.n	8004e48 <HAL_DMA_Init+0xb8>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a54      	ldr	r2, [pc, #336]	@ (8004f78 <HAL_DMA_Init+0x1e8>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d00e      	beq.n	8004e48 <HAL_DMA_Init+0xb8>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a53      	ldr	r2, [pc, #332]	@ (8004f7c <HAL_DMA_Init+0x1ec>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d009      	beq.n	8004e48 <HAL_DMA_Init+0xb8>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a51      	ldr	r2, [pc, #324]	@ (8004f80 <HAL_DMA_Init+0x1f0>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d004      	beq.n	8004e48 <HAL_DMA_Init+0xb8>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a50      	ldr	r2, [pc, #320]	@ (8004f84 <HAL_DMA_Init+0x1f4>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d101      	bne.n	8004e4c <HAL_DMA_Init+0xbc>
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e000      	b.n	8004e4e <HAL_DMA_Init+0xbe>
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	f000 813b 	beq.w	80050ca <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2202      	movs	r2, #2
 8004e58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a37      	ldr	r2, [pc, #220]	@ (8004f48 <HAL_DMA_Init+0x1b8>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d04a      	beq.n	8004f04 <HAL_DMA_Init+0x174>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a36      	ldr	r2, [pc, #216]	@ (8004f4c <HAL_DMA_Init+0x1bc>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d045      	beq.n	8004f04 <HAL_DMA_Init+0x174>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a34      	ldr	r2, [pc, #208]	@ (8004f50 <HAL_DMA_Init+0x1c0>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d040      	beq.n	8004f04 <HAL_DMA_Init+0x174>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a33      	ldr	r2, [pc, #204]	@ (8004f54 <HAL_DMA_Init+0x1c4>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d03b      	beq.n	8004f04 <HAL_DMA_Init+0x174>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a31      	ldr	r2, [pc, #196]	@ (8004f58 <HAL_DMA_Init+0x1c8>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d036      	beq.n	8004f04 <HAL_DMA_Init+0x174>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a30      	ldr	r2, [pc, #192]	@ (8004f5c <HAL_DMA_Init+0x1cc>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d031      	beq.n	8004f04 <HAL_DMA_Init+0x174>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a2e      	ldr	r2, [pc, #184]	@ (8004f60 <HAL_DMA_Init+0x1d0>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d02c      	beq.n	8004f04 <HAL_DMA_Init+0x174>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a2d      	ldr	r2, [pc, #180]	@ (8004f64 <HAL_DMA_Init+0x1d4>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d027      	beq.n	8004f04 <HAL_DMA_Init+0x174>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a2b      	ldr	r2, [pc, #172]	@ (8004f68 <HAL_DMA_Init+0x1d8>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d022      	beq.n	8004f04 <HAL_DMA_Init+0x174>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a2a      	ldr	r2, [pc, #168]	@ (8004f6c <HAL_DMA_Init+0x1dc>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d01d      	beq.n	8004f04 <HAL_DMA_Init+0x174>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a28      	ldr	r2, [pc, #160]	@ (8004f70 <HAL_DMA_Init+0x1e0>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d018      	beq.n	8004f04 <HAL_DMA_Init+0x174>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a27      	ldr	r2, [pc, #156]	@ (8004f74 <HAL_DMA_Init+0x1e4>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d013      	beq.n	8004f04 <HAL_DMA_Init+0x174>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a25      	ldr	r2, [pc, #148]	@ (8004f78 <HAL_DMA_Init+0x1e8>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d00e      	beq.n	8004f04 <HAL_DMA_Init+0x174>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a24      	ldr	r2, [pc, #144]	@ (8004f7c <HAL_DMA_Init+0x1ec>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d009      	beq.n	8004f04 <HAL_DMA_Init+0x174>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a22      	ldr	r2, [pc, #136]	@ (8004f80 <HAL_DMA_Init+0x1f0>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d004      	beq.n	8004f04 <HAL_DMA_Init+0x174>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a21      	ldr	r2, [pc, #132]	@ (8004f84 <HAL_DMA_Init+0x1f4>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d108      	bne.n	8004f16 <HAL_DMA_Init+0x186>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f022 0201 	bic.w	r2, r2, #1
 8004f12:	601a      	str	r2, [r3, #0]
 8004f14:	e007      	b.n	8004f26 <HAL_DMA_Init+0x196>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f022 0201 	bic.w	r2, r2, #1
 8004f24:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004f26:	e02f      	b.n	8004f88 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004f28:	f7fe f88e 	bl	8003048 <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	2b05      	cmp	r3, #5
 8004f34:	d928      	bls.n	8004f88 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2220      	movs	r2, #32
 8004f3a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2203      	movs	r2, #3
 8004f40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e246      	b.n	80053d6 <HAL_DMA_Init+0x646>
 8004f48:	40020010 	.word	0x40020010
 8004f4c:	40020028 	.word	0x40020028
 8004f50:	40020040 	.word	0x40020040
 8004f54:	40020058 	.word	0x40020058
 8004f58:	40020070 	.word	0x40020070
 8004f5c:	40020088 	.word	0x40020088
 8004f60:	400200a0 	.word	0x400200a0
 8004f64:	400200b8 	.word	0x400200b8
 8004f68:	40020410 	.word	0x40020410
 8004f6c:	40020428 	.word	0x40020428
 8004f70:	40020440 	.word	0x40020440
 8004f74:	40020458 	.word	0x40020458
 8004f78:	40020470 	.word	0x40020470
 8004f7c:	40020488 	.word	0x40020488
 8004f80:	400204a0 	.word	0x400204a0
 8004f84:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0301 	and.w	r3, r3, #1
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d1c8      	bne.n	8004f28 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004f9e:	697a      	ldr	r2, [r7, #20]
 8004fa0:	4b83      	ldr	r3, [pc, #524]	@ (80051b0 <HAL_DMA_Init+0x420>)
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004fae:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fba:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	699b      	ldr	r3, [r3, #24]
 8004fc0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fc6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6a1b      	ldr	r3, [r3, #32]
 8004fcc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004fce:	697a      	ldr	r2, [r7, #20]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fd8:	2b04      	cmp	r3, #4
 8004fda:	d107      	bne.n	8004fec <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	697a      	ldr	r2, [r7, #20]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004fec:	4b71      	ldr	r3, [pc, #452]	@ (80051b4 <HAL_DMA_Init+0x424>)
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	4b71      	ldr	r3, [pc, #452]	@ (80051b8 <HAL_DMA_Init+0x428>)
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ff8:	d328      	bcc.n	800504c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	2b28      	cmp	r3, #40	@ 0x28
 8005000:	d903      	bls.n	800500a <HAL_DMA_Init+0x27a>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	2b2e      	cmp	r3, #46	@ 0x2e
 8005008:	d917      	bls.n	800503a <HAL_DMA_Init+0x2aa>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005010:	d903      	bls.n	800501a <HAL_DMA_Init+0x28a>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	2b42      	cmp	r3, #66	@ 0x42
 8005018:	d90f      	bls.n	800503a <HAL_DMA_Init+0x2aa>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	2b46      	cmp	r3, #70	@ 0x46
 8005020:	d903      	bls.n	800502a <HAL_DMA_Init+0x29a>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	2b48      	cmp	r3, #72	@ 0x48
 8005028:	d907      	bls.n	800503a <HAL_DMA_Init+0x2aa>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	2b4e      	cmp	r3, #78	@ 0x4e
 8005030:	d905      	bls.n	800503e <HAL_DMA_Init+0x2ae>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	2b52      	cmp	r3, #82	@ 0x52
 8005038:	d801      	bhi.n	800503e <HAL_DMA_Init+0x2ae>
 800503a:	2301      	movs	r3, #1
 800503c:	e000      	b.n	8005040 <HAL_DMA_Init+0x2b0>
 800503e:	2300      	movs	r3, #0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d003      	beq.n	800504c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800504a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	697a      	ldr	r2, [r7, #20]
 8005052:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	695b      	ldr	r3, [r3, #20]
 800505a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	f023 0307 	bic.w	r3, r3, #7
 8005062:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005068:	697a      	ldr	r2, [r7, #20]
 800506a:	4313      	orrs	r3, r2
 800506c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005072:	2b04      	cmp	r3, #4
 8005074:	d117      	bne.n	80050a6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800507a:	697a      	ldr	r2, [r7, #20]
 800507c:	4313      	orrs	r3, r2
 800507e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005084:	2b00      	cmp	r3, #0
 8005086:	d00e      	beq.n	80050a6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f002 fb33 	bl	80076f4 <DMA_CheckFifoParam>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d008      	beq.n	80050a6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2240      	movs	r2, #64	@ 0x40
 8005098:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2201      	movs	r2, #1
 800509e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e197      	b.n	80053d6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	697a      	ldr	r2, [r7, #20]
 80050ac:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f002 fa6e 	bl	8007590 <DMA_CalcBaseAndBitshift>
 80050b4:	4603      	mov	r3, r0
 80050b6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050bc:	f003 031f 	and.w	r3, r3, #31
 80050c0:	223f      	movs	r2, #63	@ 0x3f
 80050c2:	409a      	lsls	r2, r3
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	609a      	str	r2, [r3, #8]
 80050c8:	e0cd      	b.n	8005266 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a3b      	ldr	r2, [pc, #236]	@ (80051bc <HAL_DMA_Init+0x42c>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d022      	beq.n	800511a <HAL_DMA_Init+0x38a>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a39      	ldr	r2, [pc, #228]	@ (80051c0 <HAL_DMA_Init+0x430>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d01d      	beq.n	800511a <HAL_DMA_Init+0x38a>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a38      	ldr	r2, [pc, #224]	@ (80051c4 <HAL_DMA_Init+0x434>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d018      	beq.n	800511a <HAL_DMA_Init+0x38a>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a36      	ldr	r2, [pc, #216]	@ (80051c8 <HAL_DMA_Init+0x438>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d013      	beq.n	800511a <HAL_DMA_Init+0x38a>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a35      	ldr	r2, [pc, #212]	@ (80051cc <HAL_DMA_Init+0x43c>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d00e      	beq.n	800511a <HAL_DMA_Init+0x38a>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a33      	ldr	r2, [pc, #204]	@ (80051d0 <HAL_DMA_Init+0x440>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d009      	beq.n	800511a <HAL_DMA_Init+0x38a>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a32      	ldr	r2, [pc, #200]	@ (80051d4 <HAL_DMA_Init+0x444>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d004      	beq.n	800511a <HAL_DMA_Init+0x38a>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a30      	ldr	r2, [pc, #192]	@ (80051d8 <HAL_DMA_Init+0x448>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d101      	bne.n	800511e <HAL_DMA_Init+0x38e>
 800511a:	2301      	movs	r3, #1
 800511c:	e000      	b.n	8005120 <HAL_DMA_Init+0x390>
 800511e:	2300      	movs	r3, #0
 8005120:	2b00      	cmp	r3, #0
 8005122:	f000 8097 	beq.w	8005254 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a24      	ldr	r2, [pc, #144]	@ (80051bc <HAL_DMA_Init+0x42c>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d021      	beq.n	8005174 <HAL_DMA_Init+0x3e4>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a22      	ldr	r2, [pc, #136]	@ (80051c0 <HAL_DMA_Init+0x430>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d01c      	beq.n	8005174 <HAL_DMA_Init+0x3e4>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a21      	ldr	r2, [pc, #132]	@ (80051c4 <HAL_DMA_Init+0x434>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d017      	beq.n	8005174 <HAL_DMA_Init+0x3e4>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a1f      	ldr	r2, [pc, #124]	@ (80051c8 <HAL_DMA_Init+0x438>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d012      	beq.n	8005174 <HAL_DMA_Init+0x3e4>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a1e      	ldr	r2, [pc, #120]	@ (80051cc <HAL_DMA_Init+0x43c>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d00d      	beq.n	8005174 <HAL_DMA_Init+0x3e4>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a1c      	ldr	r2, [pc, #112]	@ (80051d0 <HAL_DMA_Init+0x440>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d008      	beq.n	8005174 <HAL_DMA_Init+0x3e4>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a1b      	ldr	r2, [pc, #108]	@ (80051d4 <HAL_DMA_Init+0x444>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d003      	beq.n	8005174 <HAL_DMA_Init+0x3e4>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a19      	ldr	r2, [pc, #100]	@ (80051d8 <HAL_DMA_Init+0x448>)
 8005172:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2202      	movs	r2, #2
 8005178:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800518c:	697a      	ldr	r2, [r7, #20]
 800518e:	4b13      	ldr	r3, [pc, #76]	@ (80051dc <HAL_DMA_Init+0x44c>)
 8005190:	4013      	ands	r3, r2
 8005192:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	2b40      	cmp	r3, #64	@ 0x40
 800519a:	d021      	beq.n	80051e0 <HAL_DMA_Init+0x450>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	2b80      	cmp	r3, #128	@ 0x80
 80051a2:	d102      	bne.n	80051aa <HAL_DMA_Init+0x41a>
 80051a4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80051a8:	e01b      	b.n	80051e2 <HAL_DMA_Init+0x452>
 80051aa:	2300      	movs	r3, #0
 80051ac:	e019      	b.n	80051e2 <HAL_DMA_Init+0x452>
 80051ae:	bf00      	nop
 80051b0:	fe10803f 	.word	0xfe10803f
 80051b4:	5c001000 	.word	0x5c001000
 80051b8:	ffff0000 	.word	0xffff0000
 80051bc:	58025408 	.word	0x58025408
 80051c0:	5802541c 	.word	0x5802541c
 80051c4:	58025430 	.word	0x58025430
 80051c8:	58025444 	.word	0x58025444
 80051cc:	58025458 	.word	0x58025458
 80051d0:	5802546c 	.word	0x5802546c
 80051d4:	58025480 	.word	0x58025480
 80051d8:	58025494 	.word	0x58025494
 80051dc:	fffe000f 	.word	0xfffe000f
 80051e0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	68d2      	ldr	r2, [r2, #12]
 80051e6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80051e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80051f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	695b      	ldr	r3, [r3, #20]
 80051f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80051f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	699b      	ldr	r3, [r3, #24]
 80051fe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005200:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	69db      	ldr	r3, [r3, #28]
 8005206:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005208:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a1b      	ldr	r3, [r3, #32]
 800520e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005210:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005212:	697a      	ldr	r2, [r7, #20]
 8005214:	4313      	orrs	r3, r2
 8005216:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	697a      	ldr	r2, [r7, #20]
 800521e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	461a      	mov	r2, r3
 8005226:	4b6e      	ldr	r3, [pc, #440]	@ (80053e0 <HAL_DMA_Init+0x650>)
 8005228:	4413      	add	r3, r2
 800522a:	4a6e      	ldr	r2, [pc, #440]	@ (80053e4 <HAL_DMA_Init+0x654>)
 800522c:	fba2 2303 	umull	r2, r3, r2, r3
 8005230:	091b      	lsrs	r3, r3, #4
 8005232:	009a      	lsls	r2, r3, #2
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f002 f9a9 	bl	8007590 <DMA_CalcBaseAndBitshift>
 800523e:	4603      	mov	r3, r0
 8005240:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005246:	f003 031f 	and.w	r3, r3, #31
 800524a:	2201      	movs	r2, #1
 800524c:	409a      	lsls	r2, r3
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	605a      	str	r2, [r3, #4]
 8005252:	e008      	b.n	8005266 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2240      	movs	r2, #64	@ 0x40
 8005258:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2203      	movs	r2, #3
 800525e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e0b7      	b.n	80053d6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a5f      	ldr	r2, [pc, #380]	@ (80053e8 <HAL_DMA_Init+0x658>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d072      	beq.n	8005356 <HAL_DMA_Init+0x5c6>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a5d      	ldr	r2, [pc, #372]	@ (80053ec <HAL_DMA_Init+0x65c>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d06d      	beq.n	8005356 <HAL_DMA_Init+0x5c6>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a5c      	ldr	r2, [pc, #368]	@ (80053f0 <HAL_DMA_Init+0x660>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d068      	beq.n	8005356 <HAL_DMA_Init+0x5c6>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a5a      	ldr	r2, [pc, #360]	@ (80053f4 <HAL_DMA_Init+0x664>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d063      	beq.n	8005356 <HAL_DMA_Init+0x5c6>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a59      	ldr	r2, [pc, #356]	@ (80053f8 <HAL_DMA_Init+0x668>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d05e      	beq.n	8005356 <HAL_DMA_Init+0x5c6>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a57      	ldr	r2, [pc, #348]	@ (80053fc <HAL_DMA_Init+0x66c>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d059      	beq.n	8005356 <HAL_DMA_Init+0x5c6>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a56      	ldr	r2, [pc, #344]	@ (8005400 <HAL_DMA_Init+0x670>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d054      	beq.n	8005356 <HAL_DMA_Init+0x5c6>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a54      	ldr	r2, [pc, #336]	@ (8005404 <HAL_DMA_Init+0x674>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d04f      	beq.n	8005356 <HAL_DMA_Init+0x5c6>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a53      	ldr	r2, [pc, #332]	@ (8005408 <HAL_DMA_Init+0x678>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d04a      	beq.n	8005356 <HAL_DMA_Init+0x5c6>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a51      	ldr	r2, [pc, #324]	@ (800540c <HAL_DMA_Init+0x67c>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d045      	beq.n	8005356 <HAL_DMA_Init+0x5c6>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a50      	ldr	r2, [pc, #320]	@ (8005410 <HAL_DMA_Init+0x680>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d040      	beq.n	8005356 <HAL_DMA_Init+0x5c6>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a4e      	ldr	r2, [pc, #312]	@ (8005414 <HAL_DMA_Init+0x684>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d03b      	beq.n	8005356 <HAL_DMA_Init+0x5c6>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a4d      	ldr	r2, [pc, #308]	@ (8005418 <HAL_DMA_Init+0x688>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d036      	beq.n	8005356 <HAL_DMA_Init+0x5c6>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a4b      	ldr	r2, [pc, #300]	@ (800541c <HAL_DMA_Init+0x68c>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d031      	beq.n	8005356 <HAL_DMA_Init+0x5c6>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a4a      	ldr	r2, [pc, #296]	@ (8005420 <HAL_DMA_Init+0x690>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d02c      	beq.n	8005356 <HAL_DMA_Init+0x5c6>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a48      	ldr	r2, [pc, #288]	@ (8005424 <HAL_DMA_Init+0x694>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d027      	beq.n	8005356 <HAL_DMA_Init+0x5c6>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a47      	ldr	r2, [pc, #284]	@ (8005428 <HAL_DMA_Init+0x698>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d022      	beq.n	8005356 <HAL_DMA_Init+0x5c6>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a45      	ldr	r2, [pc, #276]	@ (800542c <HAL_DMA_Init+0x69c>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d01d      	beq.n	8005356 <HAL_DMA_Init+0x5c6>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a44      	ldr	r2, [pc, #272]	@ (8005430 <HAL_DMA_Init+0x6a0>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d018      	beq.n	8005356 <HAL_DMA_Init+0x5c6>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a42      	ldr	r2, [pc, #264]	@ (8005434 <HAL_DMA_Init+0x6a4>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d013      	beq.n	8005356 <HAL_DMA_Init+0x5c6>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a41      	ldr	r2, [pc, #260]	@ (8005438 <HAL_DMA_Init+0x6a8>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d00e      	beq.n	8005356 <HAL_DMA_Init+0x5c6>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a3f      	ldr	r2, [pc, #252]	@ (800543c <HAL_DMA_Init+0x6ac>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d009      	beq.n	8005356 <HAL_DMA_Init+0x5c6>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a3e      	ldr	r2, [pc, #248]	@ (8005440 <HAL_DMA_Init+0x6b0>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d004      	beq.n	8005356 <HAL_DMA_Init+0x5c6>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a3c      	ldr	r2, [pc, #240]	@ (8005444 <HAL_DMA_Init+0x6b4>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d101      	bne.n	800535a <HAL_DMA_Init+0x5ca>
 8005356:	2301      	movs	r3, #1
 8005358:	e000      	b.n	800535c <HAL_DMA_Init+0x5cc>
 800535a:	2300      	movs	r3, #0
 800535c:	2b00      	cmp	r3, #0
 800535e:	d032      	beq.n	80053c6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f002 fa43 	bl	80077ec <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	2b80      	cmp	r3, #128	@ 0x80
 800536c:	d102      	bne.n	8005374 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	685a      	ldr	r2, [r3, #4]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800537c:	b2d2      	uxtb	r2, r2
 800537e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005388:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d010      	beq.n	80053b4 <HAL_DMA_Init+0x624>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	2b08      	cmp	r3, #8
 8005398:	d80c      	bhi.n	80053b4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f002 fac0 	bl	8007920 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053a4:	2200      	movs	r2, #0
 80053a6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80053b0:	605a      	str	r2, [r3, #4]
 80053b2:	e008      	b.n	80053c6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3718      	adds	r7, #24
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	a7fdabf8 	.word	0xa7fdabf8
 80053e4:	cccccccd 	.word	0xcccccccd
 80053e8:	40020010 	.word	0x40020010
 80053ec:	40020028 	.word	0x40020028
 80053f0:	40020040 	.word	0x40020040
 80053f4:	40020058 	.word	0x40020058
 80053f8:	40020070 	.word	0x40020070
 80053fc:	40020088 	.word	0x40020088
 8005400:	400200a0 	.word	0x400200a0
 8005404:	400200b8 	.word	0x400200b8
 8005408:	40020410 	.word	0x40020410
 800540c:	40020428 	.word	0x40020428
 8005410:	40020440 	.word	0x40020440
 8005414:	40020458 	.word	0x40020458
 8005418:	40020470 	.word	0x40020470
 800541c:	40020488 	.word	0x40020488
 8005420:	400204a0 	.word	0x400204a0
 8005424:	400204b8 	.word	0x400204b8
 8005428:	58025408 	.word	0x58025408
 800542c:	5802541c 	.word	0x5802541c
 8005430:	58025430 	.word	0x58025430
 8005434:	58025444 	.word	0x58025444
 8005438:	58025458 	.word	0x58025458
 800543c:	5802546c 	.word	0x5802546c
 8005440:	58025480 	.word	0x58025480
 8005444:	58025494 	.word	0x58025494

08005448 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b086      	sub	sp, #24
 800544c:	af00      	add	r7, sp, #0
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	60b9      	str	r1, [r7, #8]
 8005452:	607a      	str	r2, [r7, #4]
 8005454:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005456:	2300      	movs	r3, #0
 8005458:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d101      	bne.n	8005464 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	e226      	b.n	80058b2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800546a:	2b01      	cmp	r3, #1
 800546c:	d101      	bne.n	8005472 <HAL_DMA_Start_IT+0x2a>
 800546e:	2302      	movs	r3, #2
 8005470:	e21f      	b.n	80058b2 <HAL_DMA_Start_IT+0x46a>
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2201      	movs	r2, #1
 8005476:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005480:	b2db      	uxtb	r3, r3
 8005482:	2b01      	cmp	r3, #1
 8005484:	f040 820a 	bne.w	800589c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2202      	movs	r2, #2
 800548c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2200      	movs	r2, #0
 8005494:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a68      	ldr	r2, [pc, #416]	@ (800563c <HAL_DMA_Start_IT+0x1f4>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d04a      	beq.n	8005536 <HAL_DMA_Start_IT+0xee>
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a66      	ldr	r2, [pc, #408]	@ (8005640 <HAL_DMA_Start_IT+0x1f8>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d045      	beq.n	8005536 <HAL_DMA_Start_IT+0xee>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a65      	ldr	r2, [pc, #404]	@ (8005644 <HAL_DMA_Start_IT+0x1fc>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d040      	beq.n	8005536 <HAL_DMA_Start_IT+0xee>
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a63      	ldr	r2, [pc, #396]	@ (8005648 <HAL_DMA_Start_IT+0x200>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d03b      	beq.n	8005536 <HAL_DMA_Start_IT+0xee>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a62      	ldr	r2, [pc, #392]	@ (800564c <HAL_DMA_Start_IT+0x204>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d036      	beq.n	8005536 <HAL_DMA_Start_IT+0xee>
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a60      	ldr	r2, [pc, #384]	@ (8005650 <HAL_DMA_Start_IT+0x208>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d031      	beq.n	8005536 <HAL_DMA_Start_IT+0xee>
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a5f      	ldr	r2, [pc, #380]	@ (8005654 <HAL_DMA_Start_IT+0x20c>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d02c      	beq.n	8005536 <HAL_DMA_Start_IT+0xee>
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a5d      	ldr	r2, [pc, #372]	@ (8005658 <HAL_DMA_Start_IT+0x210>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d027      	beq.n	8005536 <HAL_DMA_Start_IT+0xee>
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a5c      	ldr	r2, [pc, #368]	@ (800565c <HAL_DMA_Start_IT+0x214>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d022      	beq.n	8005536 <HAL_DMA_Start_IT+0xee>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a5a      	ldr	r2, [pc, #360]	@ (8005660 <HAL_DMA_Start_IT+0x218>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d01d      	beq.n	8005536 <HAL_DMA_Start_IT+0xee>
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a59      	ldr	r2, [pc, #356]	@ (8005664 <HAL_DMA_Start_IT+0x21c>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d018      	beq.n	8005536 <HAL_DMA_Start_IT+0xee>
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a57      	ldr	r2, [pc, #348]	@ (8005668 <HAL_DMA_Start_IT+0x220>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d013      	beq.n	8005536 <HAL_DMA_Start_IT+0xee>
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a56      	ldr	r2, [pc, #344]	@ (800566c <HAL_DMA_Start_IT+0x224>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d00e      	beq.n	8005536 <HAL_DMA_Start_IT+0xee>
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a54      	ldr	r2, [pc, #336]	@ (8005670 <HAL_DMA_Start_IT+0x228>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d009      	beq.n	8005536 <HAL_DMA_Start_IT+0xee>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a53      	ldr	r2, [pc, #332]	@ (8005674 <HAL_DMA_Start_IT+0x22c>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d004      	beq.n	8005536 <HAL_DMA_Start_IT+0xee>
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a51      	ldr	r2, [pc, #324]	@ (8005678 <HAL_DMA_Start_IT+0x230>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d108      	bne.n	8005548 <HAL_DMA_Start_IT+0x100>
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f022 0201 	bic.w	r2, r2, #1
 8005544:	601a      	str	r2, [r3, #0]
 8005546:	e007      	b.n	8005558 <HAL_DMA_Start_IT+0x110>
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f022 0201 	bic.w	r2, r2, #1
 8005556:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	68b9      	ldr	r1, [r7, #8]
 800555e:	68f8      	ldr	r0, [r7, #12]
 8005560:	f001 fe6a 	bl	8007238 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a34      	ldr	r2, [pc, #208]	@ (800563c <HAL_DMA_Start_IT+0x1f4>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d04a      	beq.n	8005604 <HAL_DMA_Start_IT+0x1bc>
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a33      	ldr	r2, [pc, #204]	@ (8005640 <HAL_DMA_Start_IT+0x1f8>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d045      	beq.n	8005604 <HAL_DMA_Start_IT+0x1bc>
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a31      	ldr	r2, [pc, #196]	@ (8005644 <HAL_DMA_Start_IT+0x1fc>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d040      	beq.n	8005604 <HAL_DMA_Start_IT+0x1bc>
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a30      	ldr	r2, [pc, #192]	@ (8005648 <HAL_DMA_Start_IT+0x200>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d03b      	beq.n	8005604 <HAL_DMA_Start_IT+0x1bc>
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a2e      	ldr	r2, [pc, #184]	@ (800564c <HAL_DMA_Start_IT+0x204>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d036      	beq.n	8005604 <HAL_DMA_Start_IT+0x1bc>
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a2d      	ldr	r2, [pc, #180]	@ (8005650 <HAL_DMA_Start_IT+0x208>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d031      	beq.n	8005604 <HAL_DMA_Start_IT+0x1bc>
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a2b      	ldr	r2, [pc, #172]	@ (8005654 <HAL_DMA_Start_IT+0x20c>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d02c      	beq.n	8005604 <HAL_DMA_Start_IT+0x1bc>
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a2a      	ldr	r2, [pc, #168]	@ (8005658 <HAL_DMA_Start_IT+0x210>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d027      	beq.n	8005604 <HAL_DMA_Start_IT+0x1bc>
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a28      	ldr	r2, [pc, #160]	@ (800565c <HAL_DMA_Start_IT+0x214>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d022      	beq.n	8005604 <HAL_DMA_Start_IT+0x1bc>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a27      	ldr	r2, [pc, #156]	@ (8005660 <HAL_DMA_Start_IT+0x218>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d01d      	beq.n	8005604 <HAL_DMA_Start_IT+0x1bc>
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a25      	ldr	r2, [pc, #148]	@ (8005664 <HAL_DMA_Start_IT+0x21c>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d018      	beq.n	8005604 <HAL_DMA_Start_IT+0x1bc>
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a24      	ldr	r2, [pc, #144]	@ (8005668 <HAL_DMA_Start_IT+0x220>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d013      	beq.n	8005604 <HAL_DMA_Start_IT+0x1bc>
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a22      	ldr	r2, [pc, #136]	@ (800566c <HAL_DMA_Start_IT+0x224>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d00e      	beq.n	8005604 <HAL_DMA_Start_IT+0x1bc>
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a21      	ldr	r2, [pc, #132]	@ (8005670 <HAL_DMA_Start_IT+0x228>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d009      	beq.n	8005604 <HAL_DMA_Start_IT+0x1bc>
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a1f      	ldr	r2, [pc, #124]	@ (8005674 <HAL_DMA_Start_IT+0x22c>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d004      	beq.n	8005604 <HAL_DMA_Start_IT+0x1bc>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a1e      	ldr	r2, [pc, #120]	@ (8005678 <HAL_DMA_Start_IT+0x230>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d101      	bne.n	8005608 <HAL_DMA_Start_IT+0x1c0>
 8005604:	2301      	movs	r3, #1
 8005606:	e000      	b.n	800560a <HAL_DMA_Start_IT+0x1c2>
 8005608:	2300      	movs	r3, #0
 800560a:	2b00      	cmp	r3, #0
 800560c:	d036      	beq.n	800567c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f023 021e 	bic.w	r2, r3, #30
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f042 0216 	orr.w	r2, r2, #22
 8005620:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005626:	2b00      	cmp	r3, #0
 8005628:	d03e      	beq.n	80056a8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f042 0208 	orr.w	r2, r2, #8
 8005638:	601a      	str	r2, [r3, #0]
 800563a:	e035      	b.n	80056a8 <HAL_DMA_Start_IT+0x260>
 800563c:	40020010 	.word	0x40020010
 8005640:	40020028 	.word	0x40020028
 8005644:	40020040 	.word	0x40020040
 8005648:	40020058 	.word	0x40020058
 800564c:	40020070 	.word	0x40020070
 8005650:	40020088 	.word	0x40020088
 8005654:	400200a0 	.word	0x400200a0
 8005658:	400200b8 	.word	0x400200b8
 800565c:	40020410 	.word	0x40020410
 8005660:	40020428 	.word	0x40020428
 8005664:	40020440 	.word	0x40020440
 8005668:	40020458 	.word	0x40020458
 800566c:	40020470 	.word	0x40020470
 8005670:	40020488 	.word	0x40020488
 8005674:	400204a0 	.word	0x400204a0
 8005678:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f023 020e 	bic.w	r2, r3, #14
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f042 020a 	orr.w	r2, r2, #10
 800568e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005694:	2b00      	cmp	r3, #0
 8005696:	d007      	beq.n	80056a8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f042 0204 	orr.w	r2, r2, #4
 80056a6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a83      	ldr	r2, [pc, #524]	@ (80058bc <HAL_DMA_Start_IT+0x474>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d072      	beq.n	8005798 <HAL_DMA_Start_IT+0x350>
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a82      	ldr	r2, [pc, #520]	@ (80058c0 <HAL_DMA_Start_IT+0x478>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d06d      	beq.n	8005798 <HAL_DMA_Start_IT+0x350>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a80      	ldr	r2, [pc, #512]	@ (80058c4 <HAL_DMA_Start_IT+0x47c>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d068      	beq.n	8005798 <HAL_DMA_Start_IT+0x350>
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a7f      	ldr	r2, [pc, #508]	@ (80058c8 <HAL_DMA_Start_IT+0x480>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d063      	beq.n	8005798 <HAL_DMA_Start_IT+0x350>
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a7d      	ldr	r2, [pc, #500]	@ (80058cc <HAL_DMA_Start_IT+0x484>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d05e      	beq.n	8005798 <HAL_DMA_Start_IT+0x350>
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a7c      	ldr	r2, [pc, #496]	@ (80058d0 <HAL_DMA_Start_IT+0x488>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d059      	beq.n	8005798 <HAL_DMA_Start_IT+0x350>
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a7a      	ldr	r2, [pc, #488]	@ (80058d4 <HAL_DMA_Start_IT+0x48c>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d054      	beq.n	8005798 <HAL_DMA_Start_IT+0x350>
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a79      	ldr	r2, [pc, #484]	@ (80058d8 <HAL_DMA_Start_IT+0x490>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d04f      	beq.n	8005798 <HAL_DMA_Start_IT+0x350>
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a77      	ldr	r2, [pc, #476]	@ (80058dc <HAL_DMA_Start_IT+0x494>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d04a      	beq.n	8005798 <HAL_DMA_Start_IT+0x350>
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a76      	ldr	r2, [pc, #472]	@ (80058e0 <HAL_DMA_Start_IT+0x498>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d045      	beq.n	8005798 <HAL_DMA_Start_IT+0x350>
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a74      	ldr	r2, [pc, #464]	@ (80058e4 <HAL_DMA_Start_IT+0x49c>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d040      	beq.n	8005798 <HAL_DMA_Start_IT+0x350>
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a73      	ldr	r2, [pc, #460]	@ (80058e8 <HAL_DMA_Start_IT+0x4a0>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d03b      	beq.n	8005798 <HAL_DMA_Start_IT+0x350>
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a71      	ldr	r2, [pc, #452]	@ (80058ec <HAL_DMA_Start_IT+0x4a4>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d036      	beq.n	8005798 <HAL_DMA_Start_IT+0x350>
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a70      	ldr	r2, [pc, #448]	@ (80058f0 <HAL_DMA_Start_IT+0x4a8>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d031      	beq.n	8005798 <HAL_DMA_Start_IT+0x350>
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a6e      	ldr	r2, [pc, #440]	@ (80058f4 <HAL_DMA_Start_IT+0x4ac>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d02c      	beq.n	8005798 <HAL_DMA_Start_IT+0x350>
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a6d      	ldr	r2, [pc, #436]	@ (80058f8 <HAL_DMA_Start_IT+0x4b0>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d027      	beq.n	8005798 <HAL_DMA_Start_IT+0x350>
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a6b      	ldr	r2, [pc, #428]	@ (80058fc <HAL_DMA_Start_IT+0x4b4>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d022      	beq.n	8005798 <HAL_DMA_Start_IT+0x350>
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a6a      	ldr	r2, [pc, #424]	@ (8005900 <HAL_DMA_Start_IT+0x4b8>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d01d      	beq.n	8005798 <HAL_DMA_Start_IT+0x350>
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a68      	ldr	r2, [pc, #416]	@ (8005904 <HAL_DMA_Start_IT+0x4bc>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d018      	beq.n	8005798 <HAL_DMA_Start_IT+0x350>
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a67      	ldr	r2, [pc, #412]	@ (8005908 <HAL_DMA_Start_IT+0x4c0>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d013      	beq.n	8005798 <HAL_DMA_Start_IT+0x350>
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a65      	ldr	r2, [pc, #404]	@ (800590c <HAL_DMA_Start_IT+0x4c4>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d00e      	beq.n	8005798 <HAL_DMA_Start_IT+0x350>
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a64      	ldr	r2, [pc, #400]	@ (8005910 <HAL_DMA_Start_IT+0x4c8>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d009      	beq.n	8005798 <HAL_DMA_Start_IT+0x350>
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a62      	ldr	r2, [pc, #392]	@ (8005914 <HAL_DMA_Start_IT+0x4cc>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d004      	beq.n	8005798 <HAL_DMA_Start_IT+0x350>
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a61      	ldr	r2, [pc, #388]	@ (8005918 <HAL_DMA_Start_IT+0x4d0>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d101      	bne.n	800579c <HAL_DMA_Start_IT+0x354>
 8005798:	2301      	movs	r3, #1
 800579a:	e000      	b.n	800579e <HAL_DMA_Start_IT+0x356>
 800579c:	2300      	movs	r3, #0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d01a      	beq.n	80057d8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d007      	beq.n	80057c0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80057be:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d007      	beq.n	80057d8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80057d6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a37      	ldr	r2, [pc, #220]	@ (80058bc <HAL_DMA_Start_IT+0x474>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d04a      	beq.n	8005878 <HAL_DMA_Start_IT+0x430>
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a36      	ldr	r2, [pc, #216]	@ (80058c0 <HAL_DMA_Start_IT+0x478>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d045      	beq.n	8005878 <HAL_DMA_Start_IT+0x430>
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a34      	ldr	r2, [pc, #208]	@ (80058c4 <HAL_DMA_Start_IT+0x47c>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d040      	beq.n	8005878 <HAL_DMA_Start_IT+0x430>
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a33      	ldr	r2, [pc, #204]	@ (80058c8 <HAL_DMA_Start_IT+0x480>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d03b      	beq.n	8005878 <HAL_DMA_Start_IT+0x430>
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a31      	ldr	r2, [pc, #196]	@ (80058cc <HAL_DMA_Start_IT+0x484>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d036      	beq.n	8005878 <HAL_DMA_Start_IT+0x430>
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a30      	ldr	r2, [pc, #192]	@ (80058d0 <HAL_DMA_Start_IT+0x488>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d031      	beq.n	8005878 <HAL_DMA_Start_IT+0x430>
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a2e      	ldr	r2, [pc, #184]	@ (80058d4 <HAL_DMA_Start_IT+0x48c>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d02c      	beq.n	8005878 <HAL_DMA_Start_IT+0x430>
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a2d      	ldr	r2, [pc, #180]	@ (80058d8 <HAL_DMA_Start_IT+0x490>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d027      	beq.n	8005878 <HAL_DMA_Start_IT+0x430>
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a2b      	ldr	r2, [pc, #172]	@ (80058dc <HAL_DMA_Start_IT+0x494>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d022      	beq.n	8005878 <HAL_DMA_Start_IT+0x430>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a2a      	ldr	r2, [pc, #168]	@ (80058e0 <HAL_DMA_Start_IT+0x498>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d01d      	beq.n	8005878 <HAL_DMA_Start_IT+0x430>
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a28      	ldr	r2, [pc, #160]	@ (80058e4 <HAL_DMA_Start_IT+0x49c>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d018      	beq.n	8005878 <HAL_DMA_Start_IT+0x430>
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a27      	ldr	r2, [pc, #156]	@ (80058e8 <HAL_DMA_Start_IT+0x4a0>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d013      	beq.n	8005878 <HAL_DMA_Start_IT+0x430>
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a25      	ldr	r2, [pc, #148]	@ (80058ec <HAL_DMA_Start_IT+0x4a4>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d00e      	beq.n	8005878 <HAL_DMA_Start_IT+0x430>
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a24      	ldr	r2, [pc, #144]	@ (80058f0 <HAL_DMA_Start_IT+0x4a8>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d009      	beq.n	8005878 <HAL_DMA_Start_IT+0x430>
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a22      	ldr	r2, [pc, #136]	@ (80058f4 <HAL_DMA_Start_IT+0x4ac>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d004      	beq.n	8005878 <HAL_DMA_Start_IT+0x430>
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a21      	ldr	r2, [pc, #132]	@ (80058f8 <HAL_DMA_Start_IT+0x4b0>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d108      	bne.n	800588a <HAL_DMA_Start_IT+0x442>
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f042 0201 	orr.w	r2, r2, #1
 8005886:	601a      	str	r2, [r3, #0]
 8005888:	e012      	b.n	80058b0 <HAL_DMA_Start_IT+0x468>
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f042 0201 	orr.w	r2, r2, #1
 8005898:	601a      	str	r2, [r3, #0]
 800589a:	e009      	b.n	80058b0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80058a2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80058b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3718      	adds	r7, #24
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	40020010 	.word	0x40020010
 80058c0:	40020028 	.word	0x40020028
 80058c4:	40020040 	.word	0x40020040
 80058c8:	40020058 	.word	0x40020058
 80058cc:	40020070 	.word	0x40020070
 80058d0:	40020088 	.word	0x40020088
 80058d4:	400200a0 	.word	0x400200a0
 80058d8:	400200b8 	.word	0x400200b8
 80058dc:	40020410 	.word	0x40020410
 80058e0:	40020428 	.word	0x40020428
 80058e4:	40020440 	.word	0x40020440
 80058e8:	40020458 	.word	0x40020458
 80058ec:	40020470 	.word	0x40020470
 80058f0:	40020488 	.word	0x40020488
 80058f4:	400204a0 	.word	0x400204a0
 80058f8:	400204b8 	.word	0x400204b8
 80058fc:	58025408 	.word	0x58025408
 8005900:	5802541c 	.word	0x5802541c
 8005904:	58025430 	.word	0x58025430
 8005908:	58025444 	.word	0x58025444
 800590c:	58025458 	.word	0x58025458
 8005910:	5802546c 	.word	0x5802546c
 8005914:	58025480 	.word	0x58025480
 8005918:	58025494 	.word	0x58025494

0800591c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b086      	sub	sp, #24
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005924:	f7fd fb90 	bl	8003048 <HAL_GetTick>
 8005928:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d101      	bne.n	8005934 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e2dc      	b.n	8005eee <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800593a:	b2db      	uxtb	r3, r3
 800593c:	2b02      	cmp	r3, #2
 800593e:	d008      	beq.n	8005952 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2280      	movs	r2, #128	@ 0x80
 8005944:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e2cd      	b.n	8005eee <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a76      	ldr	r2, [pc, #472]	@ (8005b30 <HAL_DMA_Abort+0x214>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d04a      	beq.n	80059f2 <HAL_DMA_Abort+0xd6>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a74      	ldr	r2, [pc, #464]	@ (8005b34 <HAL_DMA_Abort+0x218>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d045      	beq.n	80059f2 <HAL_DMA_Abort+0xd6>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a73      	ldr	r2, [pc, #460]	@ (8005b38 <HAL_DMA_Abort+0x21c>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d040      	beq.n	80059f2 <HAL_DMA_Abort+0xd6>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a71      	ldr	r2, [pc, #452]	@ (8005b3c <HAL_DMA_Abort+0x220>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d03b      	beq.n	80059f2 <HAL_DMA_Abort+0xd6>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a70      	ldr	r2, [pc, #448]	@ (8005b40 <HAL_DMA_Abort+0x224>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d036      	beq.n	80059f2 <HAL_DMA_Abort+0xd6>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a6e      	ldr	r2, [pc, #440]	@ (8005b44 <HAL_DMA_Abort+0x228>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d031      	beq.n	80059f2 <HAL_DMA_Abort+0xd6>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a6d      	ldr	r2, [pc, #436]	@ (8005b48 <HAL_DMA_Abort+0x22c>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d02c      	beq.n	80059f2 <HAL_DMA_Abort+0xd6>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a6b      	ldr	r2, [pc, #428]	@ (8005b4c <HAL_DMA_Abort+0x230>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d027      	beq.n	80059f2 <HAL_DMA_Abort+0xd6>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a6a      	ldr	r2, [pc, #424]	@ (8005b50 <HAL_DMA_Abort+0x234>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d022      	beq.n	80059f2 <HAL_DMA_Abort+0xd6>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a68      	ldr	r2, [pc, #416]	@ (8005b54 <HAL_DMA_Abort+0x238>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d01d      	beq.n	80059f2 <HAL_DMA_Abort+0xd6>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a67      	ldr	r2, [pc, #412]	@ (8005b58 <HAL_DMA_Abort+0x23c>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d018      	beq.n	80059f2 <HAL_DMA_Abort+0xd6>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a65      	ldr	r2, [pc, #404]	@ (8005b5c <HAL_DMA_Abort+0x240>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d013      	beq.n	80059f2 <HAL_DMA_Abort+0xd6>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a64      	ldr	r2, [pc, #400]	@ (8005b60 <HAL_DMA_Abort+0x244>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d00e      	beq.n	80059f2 <HAL_DMA_Abort+0xd6>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a62      	ldr	r2, [pc, #392]	@ (8005b64 <HAL_DMA_Abort+0x248>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d009      	beq.n	80059f2 <HAL_DMA_Abort+0xd6>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a61      	ldr	r2, [pc, #388]	@ (8005b68 <HAL_DMA_Abort+0x24c>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d004      	beq.n	80059f2 <HAL_DMA_Abort+0xd6>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a5f      	ldr	r2, [pc, #380]	@ (8005b6c <HAL_DMA_Abort+0x250>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d101      	bne.n	80059f6 <HAL_DMA_Abort+0xda>
 80059f2:	2301      	movs	r3, #1
 80059f4:	e000      	b.n	80059f8 <HAL_DMA_Abort+0xdc>
 80059f6:	2300      	movs	r3, #0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d013      	beq.n	8005a24 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f022 021e 	bic.w	r2, r2, #30
 8005a0a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	695a      	ldr	r2, [r3, #20]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005a1a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	617b      	str	r3, [r7, #20]
 8005a22:	e00a      	b.n	8005a3a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f022 020e 	bic.w	r2, r2, #14
 8005a32:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a3c      	ldr	r2, [pc, #240]	@ (8005b30 <HAL_DMA_Abort+0x214>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d072      	beq.n	8005b2a <HAL_DMA_Abort+0x20e>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a3a      	ldr	r2, [pc, #232]	@ (8005b34 <HAL_DMA_Abort+0x218>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d06d      	beq.n	8005b2a <HAL_DMA_Abort+0x20e>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a39      	ldr	r2, [pc, #228]	@ (8005b38 <HAL_DMA_Abort+0x21c>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d068      	beq.n	8005b2a <HAL_DMA_Abort+0x20e>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a37      	ldr	r2, [pc, #220]	@ (8005b3c <HAL_DMA_Abort+0x220>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d063      	beq.n	8005b2a <HAL_DMA_Abort+0x20e>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a36      	ldr	r2, [pc, #216]	@ (8005b40 <HAL_DMA_Abort+0x224>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d05e      	beq.n	8005b2a <HAL_DMA_Abort+0x20e>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a34      	ldr	r2, [pc, #208]	@ (8005b44 <HAL_DMA_Abort+0x228>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d059      	beq.n	8005b2a <HAL_DMA_Abort+0x20e>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a33      	ldr	r2, [pc, #204]	@ (8005b48 <HAL_DMA_Abort+0x22c>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d054      	beq.n	8005b2a <HAL_DMA_Abort+0x20e>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a31      	ldr	r2, [pc, #196]	@ (8005b4c <HAL_DMA_Abort+0x230>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d04f      	beq.n	8005b2a <HAL_DMA_Abort+0x20e>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a30      	ldr	r2, [pc, #192]	@ (8005b50 <HAL_DMA_Abort+0x234>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d04a      	beq.n	8005b2a <HAL_DMA_Abort+0x20e>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a2e      	ldr	r2, [pc, #184]	@ (8005b54 <HAL_DMA_Abort+0x238>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d045      	beq.n	8005b2a <HAL_DMA_Abort+0x20e>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a2d      	ldr	r2, [pc, #180]	@ (8005b58 <HAL_DMA_Abort+0x23c>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d040      	beq.n	8005b2a <HAL_DMA_Abort+0x20e>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a2b      	ldr	r2, [pc, #172]	@ (8005b5c <HAL_DMA_Abort+0x240>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d03b      	beq.n	8005b2a <HAL_DMA_Abort+0x20e>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a2a      	ldr	r2, [pc, #168]	@ (8005b60 <HAL_DMA_Abort+0x244>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d036      	beq.n	8005b2a <HAL_DMA_Abort+0x20e>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a28      	ldr	r2, [pc, #160]	@ (8005b64 <HAL_DMA_Abort+0x248>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d031      	beq.n	8005b2a <HAL_DMA_Abort+0x20e>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a27      	ldr	r2, [pc, #156]	@ (8005b68 <HAL_DMA_Abort+0x24c>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d02c      	beq.n	8005b2a <HAL_DMA_Abort+0x20e>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a25      	ldr	r2, [pc, #148]	@ (8005b6c <HAL_DMA_Abort+0x250>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d027      	beq.n	8005b2a <HAL_DMA_Abort+0x20e>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a24      	ldr	r2, [pc, #144]	@ (8005b70 <HAL_DMA_Abort+0x254>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d022      	beq.n	8005b2a <HAL_DMA_Abort+0x20e>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a22      	ldr	r2, [pc, #136]	@ (8005b74 <HAL_DMA_Abort+0x258>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d01d      	beq.n	8005b2a <HAL_DMA_Abort+0x20e>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a21      	ldr	r2, [pc, #132]	@ (8005b78 <HAL_DMA_Abort+0x25c>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d018      	beq.n	8005b2a <HAL_DMA_Abort+0x20e>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a1f      	ldr	r2, [pc, #124]	@ (8005b7c <HAL_DMA_Abort+0x260>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d013      	beq.n	8005b2a <HAL_DMA_Abort+0x20e>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a1e      	ldr	r2, [pc, #120]	@ (8005b80 <HAL_DMA_Abort+0x264>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d00e      	beq.n	8005b2a <HAL_DMA_Abort+0x20e>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a1c      	ldr	r2, [pc, #112]	@ (8005b84 <HAL_DMA_Abort+0x268>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d009      	beq.n	8005b2a <HAL_DMA_Abort+0x20e>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a1b      	ldr	r2, [pc, #108]	@ (8005b88 <HAL_DMA_Abort+0x26c>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d004      	beq.n	8005b2a <HAL_DMA_Abort+0x20e>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a19      	ldr	r2, [pc, #100]	@ (8005b8c <HAL_DMA_Abort+0x270>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d132      	bne.n	8005b90 <HAL_DMA_Abort+0x274>
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e031      	b.n	8005b92 <HAL_DMA_Abort+0x276>
 8005b2e:	bf00      	nop
 8005b30:	40020010 	.word	0x40020010
 8005b34:	40020028 	.word	0x40020028
 8005b38:	40020040 	.word	0x40020040
 8005b3c:	40020058 	.word	0x40020058
 8005b40:	40020070 	.word	0x40020070
 8005b44:	40020088 	.word	0x40020088
 8005b48:	400200a0 	.word	0x400200a0
 8005b4c:	400200b8 	.word	0x400200b8
 8005b50:	40020410 	.word	0x40020410
 8005b54:	40020428 	.word	0x40020428
 8005b58:	40020440 	.word	0x40020440
 8005b5c:	40020458 	.word	0x40020458
 8005b60:	40020470 	.word	0x40020470
 8005b64:	40020488 	.word	0x40020488
 8005b68:	400204a0 	.word	0x400204a0
 8005b6c:	400204b8 	.word	0x400204b8
 8005b70:	58025408 	.word	0x58025408
 8005b74:	5802541c 	.word	0x5802541c
 8005b78:	58025430 	.word	0x58025430
 8005b7c:	58025444 	.word	0x58025444
 8005b80:	58025458 	.word	0x58025458
 8005b84:	5802546c 	.word	0x5802546c
 8005b88:	58025480 	.word	0x58025480
 8005b8c:	58025494 	.word	0x58025494
 8005b90:	2300      	movs	r3, #0
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d007      	beq.n	8005ba6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ba0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005ba4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a6d      	ldr	r2, [pc, #436]	@ (8005d60 <HAL_DMA_Abort+0x444>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d04a      	beq.n	8005c46 <HAL_DMA_Abort+0x32a>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a6b      	ldr	r2, [pc, #428]	@ (8005d64 <HAL_DMA_Abort+0x448>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d045      	beq.n	8005c46 <HAL_DMA_Abort+0x32a>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a6a      	ldr	r2, [pc, #424]	@ (8005d68 <HAL_DMA_Abort+0x44c>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d040      	beq.n	8005c46 <HAL_DMA_Abort+0x32a>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a68      	ldr	r2, [pc, #416]	@ (8005d6c <HAL_DMA_Abort+0x450>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d03b      	beq.n	8005c46 <HAL_DMA_Abort+0x32a>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a67      	ldr	r2, [pc, #412]	@ (8005d70 <HAL_DMA_Abort+0x454>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d036      	beq.n	8005c46 <HAL_DMA_Abort+0x32a>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a65      	ldr	r2, [pc, #404]	@ (8005d74 <HAL_DMA_Abort+0x458>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d031      	beq.n	8005c46 <HAL_DMA_Abort+0x32a>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a64      	ldr	r2, [pc, #400]	@ (8005d78 <HAL_DMA_Abort+0x45c>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d02c      	beq.n	8005c46 <HAL_DMA_Abort+0x32a>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a62      	ldr	r2, [pc, #392]	@ (8005d7c <HAL_DMA_Abort+0x460>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d027      	beq.n	8005c46 <HAL_DMA_Abort+0x32a>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a61      	ldr	r2, [pc, #388]	@ (8005d80 <HAL_DMA_Abort+0x464>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d022      	beq.n	8005c46 <HAL_DMA_Abort+0x32a>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a5f      	ldr	r2, [pc, #380]	@ (8005d84 <HAL_DMA_Abort+0x468>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d01d      	beq.n	8005c46 <HAL_DMA_Abort+0x32a>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a5e      	ldr	r2, [pc, #376]	@ (8005d88 <HAL_DMA_Abort+0x46c>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d018      	beq.n	8005c46 <HAL_DMA_Abort+0x32a>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a5c      	ldr	r2, [pc, #368]	@ (8005d8c <HAL_DMA_Abort+0x470>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d013      	beq.n	8005c46 <HAL_DMA_Abort+0x32a>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a5b      	ldr	r2, [pc, #364]	@ (8005d90 <HAL_DMA_Abort+0x474>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d00e      	beq.n	8005c46 <HAL_DMA_Abort+0x32a>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a59      	ldr	r2, [pc, #356]	@ (8005d94 <HAL_DMA_Abort+0x478>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d009      	beq.n	8005c46 <HAL_DMA_Abort+0x32a>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a58      	ldr	r2, [pc, #352]	@ (8005d98 <HAL_DMA_Abort+0x47c>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d004      	beq.n	8005c46 <HAL_DMA_Abort+0x32a>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a56      	ldr	r2, [pc, #344]	@ (8005d9c <HAL_DMA_Abort+0x480>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d108      	bne.n	8005c58 <HAL_DMA_Abort+0x33c>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f022 0201 	bic.w	r2, r2, #1
 8005c54:	601a      	str	r2, [r3, #0]
 8005c56:	e007      	b.n	8005c68 <HAL_DMA_Abort+0x34c>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f022 0201 	bic.w	r2, r2, #1
 8005c66:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005c68:	e013      	b.n	8005c92 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005c6a:	f7fd f9ed 	bl	8003048 <HAL_GetTick>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	1ad3      	subs	r3, r2, r3
 8005c74:	2b05      	cmp	r3, #5
 8005c76:	d90c      	bls.n	8005c92 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2220      	movs	r2, #32
 8005c7c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2203      	movs	r2, #3
 8005c82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e12d      	b.n	8005eee <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 0301 	and.w	r3, r3, #1
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d1e5      	bne.n	8005c6a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a2f      	ldr	r2, [pc, #188]	@ (8005d60 <HAL_DMA_Abort+0x444>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d04a      	beq.n	8005d3e <HAL_DMA_Abort+0x422>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a2d      	ldr	r2, [pc, #180]	@ (8005d64 <HAL_DMA_Abort+0x448>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d045      	beq.n	8005d3e <HAL_DMA_Abort+0x422>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a2c      	ldr	r2, [pc, #176]	@ (8005d68 <HAL_DMA_Abort+0x44c>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d040      	beq.n	8005d3e <HAL_DMA_Abort+0x422>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a2a      	ldr	r2, [pc, #168]	@ (8005d6c <HAL_DMA_Abort+0x450>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d03b      	beq.n	8005d3e <HAL_DMA_Abort+0x422>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a29      	ldr	r2, [pc, #164]	@ (8005d70 <HAL_DMA_Abort+0x454>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d036      	beq.n	8005d3e <HAL_DMA_Abort+0x422>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a27      	ldr	r2, [pc, #156]	@ (8005d74 <HAL_DMA_Abort+0x458>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d031      	beq.n	8005d3e <HAL_DMA_Abort+0x422>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a26      	ldr	r2, [pc, #152]	@ (8005d78 <HAL_DMA_Abort+0x45c>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d02c      	beq.n	8005d3e <HAL_DMA_Abort+0x422>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a24      	ldr	r2, [pc, #144]	@ (8005d7c <HAL_DMA_Abort+0x460>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d027      	beq.n	8005d3e <HAL_DMA_Abort+0x422>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a23      	ldr	r2, [pc, #140]	@ (8005d80 <HAL_DMA_Abort+0x464>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d022      	beq.n	8005d3e <HAL_DMA_Abort+0x422>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a21      	ldr	r2, [pc, #132]	@ (8005d84 <HAL_DMA_Abort+0x468>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d01d      	beq.n	8005d3e <HAL_DMA_Abort+0x422>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a20      	ldr	r2, [pc, #128]	@ (8005d88 <HAL_DMA_Abort+0x46c>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d018      	beq.n	8005d3e <HAL_DMA_Abort+0x422>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a1e      	ldr	r2, [pc, #120]	@ (8005d8c <HAL_DMA_Abort+0x470>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d013      	beq.n	8005d3e <HAL_DMA_Abort+0x422>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a1d      	ldr	r2, [pc, #116]	@ (8005d90 <HAL_DMA_Abort+0x474>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d00e      	beq.n	8005d3e <HAL_DMA_Abort+0x422>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a1b      	ldr	r2, [pc, #108]	@ (8005d94 <HAL_DMA_Abort+0x478>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d009      	beq.n	8005d3e <HAL_DMA_Abort+0x422>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a1a      	ldr	r2, [pc, #104]	@ (8005d98 <HAL_DMA_Abort+0x47c>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d004      	beq.n	8005d3e <HAL_DMA_Abort+0x422>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a18      	ldr	r2, [pc, #96]	@ (8005d9c <HAL_DMA_Abort+0x480>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d101      	bne.n	8005d42 <HAL_DMA_Abort+0x426>
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e000      	b.n	8005d44 <HAL_DMA_Abort+0x428>
 8005d42:	2300      	movs	r3, #0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d02b      	beq.n	8005da0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d4c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d52:	f003 031f 	and.w	r3, r3, #31
 8005d56:	223f      	movs	r2, #63	@ 0x3f
 8005d58:	409a      	lsls	r2, r3
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	609a      	str	r2, [r3, #8]
 8005d5e:	e02a      	b.n	8005db6 <HAL_DMA_Abort+0x49a>
 8005d60:	40020010 	.word	0x40020010
 8005d64:	40020028 	.word	0x40020028
 8005d68:	40020040 	.word	0x40020040
 8005d6c:	40020058 	.word	0x40020058
 8005d70:	40020070 	.word	0x40020070
 8005d74:	40020088 	.word	0x40020088
 8005d78:	400200a0 	.word	0x400200a0
 8005d7c:	400200b8 	.word	0x400200b8
 8005d80:	40020410 	.word	0x40020410
 8005d84:	40020428 	.word	0x40020428
 8005d88:	40020440 	.word	0x40020440
 8005d8c:	40020458 	.word	0x40020458
 8005d90:	40020470 	.word	0x40020470
 8005d94:	40020488 	.word	0x40020488
 8005d98:	400204a0 	.word	0x400204a0
 8005d9c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005da4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005daa:	f003 031f 	and.w	r3, r3, #31
 8005dae:	2201      	movs	r2, #1
 8005db0:	409a      	lsls	r2, r3
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a4f      	ldr	r2, [pc, #316]	@ (8005ef8 <HAL_DMA_Abort+0x5dc>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d072      	beq.n	8005ea6 <HAL_DMA_Abort+0x58a>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a4d      	ldr	r2, [pc, #308]	@ (8005efc <HAL_DMA_Abort+0x5e0>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d06d      	beq.n	8005ea6 <HAL_DMA_Abort+0x58a>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a4c      	ldr	r2, [pc, #304]	@ (8005f00 <HAL_DMA_Abort+0x5e4>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d068      	beq.n	8005ea6 <HAL_DMA_Abort+0x58a>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a4a      	ldr	r2, [pc, #296]	@ (8005f04 <HAL_DMA_Abort+0x5e8>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d063      	beq.n	8005ea6 <HAL_DMA_Abort+0x58a>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a49      	ldr	r2, [pc, #292]	@ (8005f08 <HAL_DMA_Abort+0x5ec>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d05e      	beq.n	8005ea6 <HAL_DMA_Abort+0x58a>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a47      	ldr	r2, [pc, #284]	@ (8005f0c <HAL_DMA_Abort+0x5f0>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d059      	beq.n	8005ea6 <HAL_DMA_Abort+0x58a>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a46      	ldr	r2, [pc, #280]	@ (8005f10 <HAL_DMA_Abort+0x5f4>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d054      	beq.n	8005ea6 <HAL_DMA_Abort+0x58a>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a44      	ldr	r2, [pc, #272]	@ (8005f14 <HAL_DMA_Abort+0x5f8>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d04f      	beq.n	8005ea6 <HAL_DMA_Abort+0x58a>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a43      	ldr	r2, [pc, #268]	@ (8005f18 <HAL_DMA_Abort+0x5fc>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d04a      	beq.n	8005ea6 <HAL_DMA_Abort+0x58a>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a41      	ldr	r2, [pc, #260]	@ (8005f1c <HAL_DMA_Abort+0x600>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d045      	beq.n	8005ea6 <HAL_DMA_Abort+0x58a>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a40      	ldr	r2, [pc, #256]	@ (8005f20 <HAL_DMA_Abort+0x604>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d040      	beq.n	8005ea6 <HAL_DMA_Abort+0x58a>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a3e      	ldr	r2, [pc, #248]	@ (8005f24 <HAL_DMA_Abort+0x608>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d03b      	beq.n	8005ea6 <HAL_DMA_Abort+0x58a>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a3d      	ldr	r2, [pc, #244]	@ (8005f28 <HAL_DMA_Abort+0x60c>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d036      	beq.n	8005ea6 <HAL_DMA_Abort+0x58a>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a3b      	ldr	r2, [pc, #236]	@ (8005f2c <HAL_DMA_Abort+0x610>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d031      	beq.n	8005ea6 <HAL_DMA_Abort+0x58a>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a3a      	ldr	r2, [pc, #232]	@ (8005f30 <HAL_DMA_Abort+0x614>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d02c      	beq.n	8005ea6 <HAL_DMA_Abort+0x58a>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a38      	ldr	r2, [pc, #224]	@ (8005f34 <HAL_DMA_Abort+0x618>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d027      	beq.n	8005ea6 <HAL_DMA_Abort+0x58a>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a37      	ldr	r2, [pc, #220]	@ (8005f38 <HAL_DMA_Abort+0x61c>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d022      	beq.n	8005ea6 <HAL_DMA_Abort+0x58a>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a35      	ldr	r2, [pc, #212]	@ (8005f3c <HAL_DMA_Abort+0x620>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d01d      	beq.n	8005ea6 <HAL_DMA_Abort+0x58a>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a34      	ldr	r2, [pc, #208]	@ (8005f40 <HAL_DMA_Abort+0x624>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d018      	beq.n	8005ea6 <HAL_DMA_Abort+0x58a>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a32      	ldr	r2, [pc, #200]	@ (8005f44 <HAL_DMA_Abort+0x628>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d013      	beq.n	8005ea6 <HAL_DMA_Abort+0x58a>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a31      	ldr	r2, [pc, #196]	@ (8005f48 <HAL_DMA_Abort+0x62c>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d00e      	beq.n	8005ea6 <HAL_DMA_Abort+0x58a>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a2f      	ldr	r2, [pc, #188]	@ (8005f4c <HAL_DMA_Abort+0x630>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d009      	beq.n	8005ea6 <HAL_DMA_Abort+0x58a>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a2e      	ldr	r2, [pc, #184]	@ (8005f50 <HAL_DMA_Abort+0x634>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d004      	beq.n	8005ea6 <HAL_DMA_Abort+0x58a>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a2c      	ldr	r2, [pc, #176]	@ (8005f54 <HAL_DMA_Abort+0x638>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d101      	bne.n	8005eaa <HAL_DMA_Abort+0x58e>
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e000      	b.n	8005eac <HAL_DMA_Abort+0x590>
 8005eaa:	2300      	movs	r3, #0
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d015      	beq.n	8005edc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005eb8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d00c      	beq.n	8005edc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ecc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005ed0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005eda:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8005eec:	2300      	movs	r3, #0
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3718      	adds	r7, #24
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop
 8005ef8:	40020010 	.word	0x40020010
 8005efc:	40020028 	.word	0x40020028
 8005f00:	40020040 	.word	0x40020040
 8005f04:	40020058 	.word	0x40020058
 8005f08:	40020070 	.word	0x40020070
 8005f0c:	40020088 	.word	0x40020088
 8005f10:	400200a0 	.word	0x400200a0
 8005f14:	400200b8 	.word	0x400200b8
 8005f18:	40020410 	.word	0x40020410
 8005f1c:	40020428 	.word	0x40020428
 8005f20:	40020440 	.word	0x40020440
 8005f24:	40020458 	.word	0x40020458
 8005f28:	40020470 	.word	0x40020470
 8005f2c:	40020488 	.word	0x40020488
 8005f30:	400204a0 	.word	0x400204a0
 8005f34:	400204b8 	.word	0x400204b8
 8005f38:	58025408 	.word	0x58025408
 8005f3c:	5802541c 	.word	0x5802541c
 8005f40:	58025430 	.word	0x58025430
 8005f44:	58025444 	.word	0x58025444
 8005f48:	58025458 	.word	0x58025458
 8005f4c:	5802546c 	.word	0x5802546c
 8005f50:	58025480 	.word	0x58025480
 8005f54:	58025494 	.word	0x58025494

08005f58 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d101      	bne.n	8005f6a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e237      	b.n	80063da <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	2b02      	cmp	r3, #2
 8005f74:	d004      	beq.n	8005f80 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2280      	movs	r2, #128	@ 0x80
 8005f7a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e22c      	b.n	80063da <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a5c      	ldr	r2, [pc, #368]	@ (80060f8 <HAL_DMA_Abort_IT+0x1a0>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d04a      	beq.n	8006020 <HAL_DMA_Abort_IT+0xc8>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a5b      	ldr	r2, [pc, #364]	@ (80060fc <HAL_DMA_Abort_IT+0x1a4>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d045      	beq.n	8006020 <HAL_DMA_Abort_IT+0xc8>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a59      	ldr	r2, [pc, #356]	@ (8006100 <HAL_DMA_Abort_IT+0x1a8>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d040      	beq.n	8006020 <HAL_DMA_Abort_IT+0xc8>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a58      	ldr	r2, [pc, #352]	@ (8006104 <HAL_DMA_Abort_IT+0x1ac>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d03b      	beq.n	8006020 <HAL_DMA_Abort_IT+0xc8>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a56      	ldr	r2, [pc, #344]	@ (8006108 <HAL_DMA_Abort_IT+0x1b0>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d036      	beq.n	8006020 <HAL_DMA_Abort_IT+0xc8>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a55      	ldr	r2, [pc, #340]	@ (800610c <HAL_DMA_Abort_IT+0x1b4>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d031      	beq.n	8006020 <HAL_DMA_Abort_IT+0xc8>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a53      	ldr	r2, [pc, #332]	@ (8006110 <HAL_DMA_Abort_IT+0x1b8>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d02c      	beq.n	8006020 <HAL_DMA_Abort_IT+0xc8>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a52      	ldr	r2, [pc, #328]	@ (8006114 <HAL_DMA_Abort_IT+0x1bc>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d027      	beq.n	8006020 <HAL_DMA_Abort_IT+0xc8>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a50      	ldr	r2, [pc, #320]	@ (8006118 <HAL_DMA_Abort_IT+0x1c0>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d022      	beq.n	8006020 <HAL_DMA_Abort_IT+0xc8>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a4f      	ldr	r2, [pc, #316]	@ (800611c <HAL_DMA_Abort_IT+0x1c4>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d01d      	beq.n	8006020 <HAL_DMA_Abort_IT+0xc8>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a4d      	ldr	r2, [pc, #308]	@ (8006120 <HAL_DMA_Abort_IT+0x1c8>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d018      	beq.n	8006020 <HAL_DMA_Abort_IT+0xc8>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a4c      	ldr	r2, [pc, #304]	@ (8006124 <HAL_DMA_Abort_IT+0x1cc>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d013      	beq.n	8006020 <HAL_DMA_Abort_IT+0xc8>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a4a      	ldr	r2, [pc, #296]	@ (8006128 <HAL_DMA_Abort_IT+0x1d0>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d00e      	beq.n	8006020 <HAL_DMA_Abort_IT+0xc8>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a49      	ldr	r2, [pc, #292]	@ (800612c <HAL_DMA_Abort_IT+0x1d4>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d009      	beq.n	8006020 <HAL_DMA_Abort_IT+0xc8>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a47      	ldr	r2, [pc, #284]	@ (8006130 <HAL_DMA_Abort_IT+0x1d8>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d004      	beq.n	8006020 <HAL_DMA_Abort_IT+0xc8>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a46      	ldr	r2, [pc, #280]	@ (8006134 <HAL_DMA_Abort_IT+0x1dc>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d101      	bne.n	8006024 <HAL_DMA_Abort_IT+0xcc>
 8006020:	2301      	movs	r3, #1
 8006022:	e000      	b.n	8006026 <HAL_DMA_Abort_IT+0xce>
 8006024:	2300      	movs	r3, #0
 8006026:	2b00      	cmp	r3, #0
 8006028:	f000 8086 	beq.w	8006138 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2204      	movs	r2, #4
 8006030:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a2f      	ldr	r2, [pc, #188]	@ (80060f8 <HAL_DMA_Abort_IT+0x1a0>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d04a      	beq.n	80060d4 <HAL_DMA_Abort_IT+0x17c>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a2e      	ldr	r2, [pc, #184]	@ (80060fc <HAL_DMA_Abort_IT+0x1a4>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d045      	beq.n	80060d4 <HAL_DMA_Abort_IT+0x17c>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a2c      	ldr	r2, [pc, #176]	@ (8006100 <HAL_DMA_Abort_IT+0x1a8>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d040      	beq.n	80060d4 <HAL_DMA_Abort_IT+0x17c>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a2b      	ldr	r2, [pc, #172]	@ (8006104 <HAL_DMA_Abort_IT+0x1ac>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d03b      	beq.n	80060d4 <HAL_DMA_Abort_IT+0x17c>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a29      	ldr	r2, [pc, #164]	@ (8006108 <HAL_DMA_Abort_IT+0x1b0>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d036      	beq.n	80060d4 <HAL_DMA_Abort_IT+0x17c>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a28      	ldr	r2, [pc, #160]	@ (800610c <HAL_DMA_Abort_IT+0x1b4>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d031      	beq.n	80060d4 <HAL_DMA_Abort_IT+0x17c>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a26      	ldr	r2, [pc, #152]	@ (8006110 <HAL_DMA_Abort_IT+0x1b8>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d02c      	beq.n	80060d4 <HAL_DMA_Abort_IT+0x17c>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a25      	ldr	r2, [pc, #148]	@ (8006114 <HAL_DMA_Abort_IT+0x1bc>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d027      	beq.n	80060d4 <HAL_DMA_Abort_IT+0x17c>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a23      	ldr	r2, [pc, #140]	@ (8006118 <HAL_DMA_Abort_IT+0x1c0>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d022      	beq.n	80060d4 <HAL_DMA_Abort_IT+0x17c>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a22      	ldr	r2, [pc, #136]	@ (800611c <HAL_DMA_Abort_IT+0x1c4>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d01d      	beq.n	80060d4 <HAL_DMA_Abort_IT+0x17c>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a20      	ldr	r2, [pc, #128]	@ (8006120 <HAL_DMA_Abort_IT+0x1c8>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d018      	beq.n	80060d4 <HAL_DMA_Abort_IT+0x17c>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a1f      	ldr	r2, [pc, #124]	@ (8006124 <HAL_DMA_Abort_IT+0x1cc>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d013      	beq.n	80060d4 <HAL_DMA_Abort_IT+0x17c>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a1d      	ldr	r2, [pc, #116]	@ (8006128 <HAL_DMA_Abort_IT+0x1d0>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d00e      	beq.n	80060d4 <HAL_DMA_Abort_IT+0x17c>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a1c      	ldr	r2, [pc, #112]	@ (800612c <HAL_DMA_Abort_IT+0x1d4>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d009      	beq.n	80060d4 <HAL_DMA_Abort_IT+0x17c>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a1a      	ldr	r2, [pc, #104]	@ (8006130 <HAL_DMA_Abort_IT+0x1d8>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d004      	beq.n	80060d4 <HAL_DMA_Abort_IT+0x17c>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a19      	ldr	r2, [pc, #100]	@ (8006134 <HAL_DMA_Abort_IT+0x1dc>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d108      	bne.n	80060e6 <HAL_DMA_Abort_IT+0x18e>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f022 0201 	bic.w	r2, r2, #1
 80060e2:	601a      	str	r2, [r3, #0]
 80060e4:	e178      	b.n	80063d8 <HAL_DMA_Abort_IT+0x480>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f022 0201 	bic.w	r2, r2, #1
 80060f4:	601a      	str	r2, [r3, #0]
 80060f6:	e16f      	b.n	80063d8 <HAL_DMA_Abort_IT+0x480>
 80060f8:	40020010 	.word	0x40020010
 80060fc:	40020028 	.word	0x40020028
 8006100:	40020040 	.word	0x40020040
 8006104:	40020058 	.word	0x40020058
 8006108:	40020070 	.word	0x40020070
 800610c:	40020088 	.word	0x40020088
 8006110:	400200a0 	.word	0x400200a0
 8006114:	400200b8 	.word	0x400200b8
 8006118:	40020410 	.word	0x40020410
 800611c:	40020428 	.word	0x40020428
 8006120:	40020440 	.word	0x40020440
 8006124:	40020458 	.word	0x40020458
 8006128:	40020470 	.word	0x40020470
 800612c:	40020488 	.word	0x40020488
 8006130:	400204a0 	.word	0x400204a0
 8006134:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f022 020e 	bic.w	r2, r2, #14
 8006146:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a6c      	ldr	r2, [pc, #432]	@ (8006300 <HAL_DMA_Abort_IT+0x3a8>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d04a      	beq.n	80061e8 <HAL_DMA_Abort_IT+0x290>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a6b      	ldr	r2, [pc, #428]	@ (8006304 <HAL_DMA_Abort_IT+0x3ac>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d045      	beq.n	80061e8 <HAL_DMA_Abort_IT+0x290>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a69      	ldr	r2, [pc, #420]	@ (8006308 <HAL_DMA_Abort_IT+0x3b0>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d040      	beq.n	80061e8 <HAL_DMA_Abort_IT+0x290>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a68      	ldr	r2, [pc, #416]	@ (800630c <HAL_DMA_Abort_IT+0x3b4>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d03b      	beq.n	80061e8 <HAL_DMA_Abort_IT+0x290>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a66      	ldr	r2, [pc, #408]	@ (8006310 <HAL_DMA_Abort_IT+0x3b8>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d036      	beq.n	80061e8 <HAL_DMA_Abort_IT+0x290>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a65      	ldr	r2, [pc, #404]	@ (8006314 <HAL_DMA_Abort_IT+0x3bc>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d031      	beq.n	80061e8 <HAL_DMA_Abort_IT+0x290>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a63      	ldr	r2, [pc, #396]	@ (8006318 <HAL_DMA_Abort_IT+0x3c0>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d02c      	beq.n	80061e8 <HAL_DMA_Abort_IT+0x290>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a62      	ldr	r2, [pc, #392]	@ (800631c <HAL_DMA_Abort_IT+0x3c4>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d027      	beq.n	80061e8 <HAL_DMA_Abort_IT+0x290>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a60      	ldr	r2, [pc, #384]	@ (8006320 <HAL_DMA_Abort_IT+0x3c8>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d022      	beq.n	80061e8 <HAL_DMA_Abort_IT+0x290>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a5f      	ldr	r2, [pc, #380]	@ (8006324 <HAL_DMA_Abort_IT+0x3cc>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d01d      	beq.n	80061e8 <HAL_DMA_Abort_IT+0x290>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a5d      	ldr	r2, [pc, #372]	@ (8006328 <HAL_DMA_Abort_IT+0x3d0>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d018      	beq.n	80061e8 <HAL_DMA_Abort_IT+0x290>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a5c      	ldr	r2, [pc, #368]	@ (800632c <HAL_DMA_Abort_IT+0x3d4>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d013      	beq.n	80061e8 <HAL_DMA_Abort_IT+0x290>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a5a      	ldr	r2, [pc, #360]	@ (8006330 <HAL_DMA_Abort_IT+0x3d8>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d00e      	beq.n	80061e8 <HAL_DMA_Abort_IT+0x290>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a59      	ldr	r2, [pc, #356]	@ (8006334 <HAL_DMA_Abort_IT+0x3dc>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d009      	beq.n	80061e8 <HAL_DMA_Abort_IT+0x290>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a57      	ldr	r2, [pc, #348]	@ (8006338 <HAL_DMA_Abort_IT+0x3e0>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d004      	beq.n	80061e8 <HAL_DMA_Abort_IT+0x290>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a56      	ldr	r2, [pc, #344]	@ (800633c <HAL_DMA_Abort_IT+0x3e4>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d108      	bne.n	80061fa <HAL_DMA_Abort_IT+0x2a2>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f022 0201 	bic.w	r2, r2, #1
 80061f6:	601a      	str	r2, [r3, #0]
 80061f8:	e007      	b.n	800620a <HAL_DMA_Abort_IT+0x2b2>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f022 0201 	bic.w	r2, r2, #1
 8006208:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a3c      	ldr	r2, [pc, #240]	@ (8006300 <HAL_DMA_Abort_IT+0x3a8>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d072      	beq.n	80062fa <HAL_DMA_Abort_IT+0x3a2>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a3a      	ldr	r2, [pc, #232]	@ (8006304 <HAL_DMA_Abort_IT+0x3ac>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d06d      	beq.n	80062fa <HAL_DMA_Abort_IT+0x3a2>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a39      	ldr	r2, [pc, #228]	@ (8006308 <HAL_DMA_Abort_IT+0x3b0>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d068      	beq.n	80062fa <HAL_DMA_Abort_IT+0x3a2>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a37      	ldr	r2, [pc, #220]	@ (800630c <HAL_DMA_Abort_IT+0x3b4>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d063      	beq.n	80062fa <HAL_DMA_Abort_IT+0x3a2>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a36      	ldr	r2, [pc, #216]	@ (8006310 <HAL_DMA_Abort_IT+0x3b8>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d05e      	beq.n	80062fa <HAL_DMA_Abort_IT+0x3a2>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a34      	ldr	r2, [pc, #208]	@ (8006314 <HAL_DMA_Abort_IT+0x3bc>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d059      	beq.n	80062fa <HAL_DMA_Abort_IT+0x3a2>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a33      	ldr	r2, [pc, #204]	@ (8006318 <HAL_DMA_Abort_IT+0x3c0>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d054      	beq.n	80062fa <HAL_DMA_Abort_IT+0x3a2>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a31      	ldr	r2, [pc, #196]	@ (800631c <HAL_DMA_Abort_IT+0x3c4>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d04f      	beq.n	80062fa <HAL_DMA_Abort_IT+0x3a2>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a30      	ldr	r2, [pc, #192]	@ (8006320 <HAL_DMA_Abort_IT+0x3c8>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d04a      	beq.n	80062fa <HAL_DMA_Abort_IT+0x3a2>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a2e      	ldr	r2, [pc, #184]	@ (8006324 <HAL_DMA_Abort_IT+0x3cc>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d045      	beq.n	80062fa <HAL_DMA_Abort_IT+0x3a2>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a2d      	ldr	r2, [pc, #180]	@ (8006328 <HAL_DMA_Abort_IT+0x3d0>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d040      	beq.n	80062fa <HAL_DMA_Abort_IT+0x3a2>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a2b      	ldr	r2, [pc, #172]	@ (800632c <HAL_DMA_Abort_IT+0x3d4>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d03b      	beq.n	80062fa <HAL_DMA_Abort_IT+0x3a2>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a2a      	ldr	r2, [pc, #168]	@ (8006330 <HAL_DMA_Abort_IT+0x3d8>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d036      	beq.n	80062fa <HAL_DMA_Abort_IT+0x3a2>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a28      	ldr	r2, [pc, #160]	@ (8006334 <HAL_DMA_Abort_IT+0x3dc>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d031      	beq.n	80062fa <HAL_DMA_Abort_IT+0x3a2>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a27      	ldr	r2, [pc, #156]	@ (8006338 <HAL_DMA_Abort_IT+0x3e0>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d02c      	beq.n	80062fa <HAL_DMA_Abort_IT+0x3a2>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a25      	ldr	r2, [pc, #148]	@ (800633c <HAL_DMA_Abort_IT+0x3e4>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d027      	beq.n	80062fa <HAL_DMA_Abort_IT+0x3a2>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a24      	ldr	r2, [pc, #144]	@ (8006340 <HAL_DMA_Abort_IT+0x3e8>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d022      	beq.n	80062fa <HAL_DMA_Abort_IT+0x3a2>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a22      	ldr	r2, [pc, #136]	@ (8006344 <HAL_DMA_Abort_IT+0x3ec>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d01d      	beq.n	80062fa <HAL_DMA_Abort_IT+0x3a2>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a21      	ldr	r2, [pc, #132]	@ (8006348 <HAL_DMA_Abort_IT+0x3f0>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d018      	beq.n	80062fa <HAL_DMA_Abort_IT+0x3a2>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a1f      	ldr	r2, [pc, #124]	@ (800634c <HAL_DMA_Abort_IT+0x3f4>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d013      	beq.n	80062fa <HAL_DMA_Abort_IT+0x3a2>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a1e      	ldr	r2, [pc, #120]	@ (8006350 <HAL_DMA_Abort_IT+0x3f8>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d00e      	beq.n	80062fa <HAL_DMA_Abort_IT+0x3a2>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a1c      	ldr	r2, [pc, #112]	@ (8006354 <HAL_DMA_Abort_IT+0x3fc>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d009      	beq.n	80062fa <HAL_DMA_Abort_IT+0x3a2>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a1b      	ldr	r2, [pc, #108]	@ (8006358 <HAL_DMA_Abort_IT+0x400>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d004      	beq.n	80062fa <HAL_DMA_Abort_IT+0x3a2>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a19      	ldr	r2, [pc, #100]	@ (800635c <HAL_DMA_Abort_IT+0x404>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d132      	bne.n	8006360 <HAL_DMA_Abort_IT+0x408>
 80062fa:	2301      	movs	r3, #1
 80062fc:	e031      	b.n	8006362 <HAL_DMA_Abort_IT+0x40a>
 80062fe:	bf00      	nop
 8006300:	40020010 	.word	0x40020010
 8006304:	40020028 	.word	0x40020028
 8006308:	40020040 	.word	0x40020040
 800630c:	40020058 	.word	0x40020058
 8006310:	40020070 	.word	0x40020070
 8006314:	40020088 	.word	0x40020088
 8006318:	400200a0 	.word	0x400200a0
 800631c:	400200b8 	.word	0x400200b8
 8006320:	40020410 	.word	0x40020410
 8006324:	40020428 	.word	0x40020428
 8006328:	40020440 	.word	0x40020440
 800632c:	40020458 	.word	0x40020458
 8006330:	40020470 	.word	0x40020470
 8006334:	40020488 	.word	0x40020488
 8006338:	400204a0 	.word	0x400204a0
 800633c:	400204b8 	.word	0x400204b8
 8006340:	58025408 	.word	0x58025408
 8006344:	5802541c 	.word	0x5802541c
 8006348:	58025430 	.word	0x58025430
 800634c:	58025444 	.word	0x58025444
 8006350:	58025458 	.word	0x58025458
 8006354:	5802546c 	.word	0x5802546c
 8006358:	58025480 	.word	0x58025480
 800635c:	58025494 	.word	0x58025494
 8006360:	2300      	movs	r3, #0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d028      	beq.n	80063b8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006370:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006374:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800637a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006380:	f003 031f 	and.w	r3, r3, #31
 8006384:	2201      	movs	r2, #1
 8006386:	409a      	lsls	r2, r3
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006394:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800639a:	2b00      	cmp	r3, #0
 800639c:	d00c      	beq.n	80063b8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80063a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80063ac:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80063b6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2201      	movs	r2, #1
 80063bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d003      	beq.n	80063d8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3710      	adds	r7, #16
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	bf00      	nop

080063e4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b08a      	sub	sp, #40	@ 0x28
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80063ec:	2300      	movs	r3, #0
 80063ee:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80063f0:	4b67      	ldr	r3, [pc, #412]	@ (8006590 <HAL_DMA_IRQHandler+0x1ac>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a67      	ldr	r2, [pc, #412]	@ (8006594 <HAL_DMA_IRQHandler+0x1b0>)
 80063f6:	fba2 2303 	umull	r2, r3, r2, r3
 80063fa:	0a9b      	lsrs	r3, r3, #10
 80063fc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006402:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006408:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800640a:	6a3b      	ldr	r3, [r7, #32]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a5f      	ldr	r2, [pc, #380]	@ (8006598 <HAL_DMA_IRQHandler+0x1b4>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d04a      	beq.n	80064b6 <HAL_DMA_IRQHandler+0xd2>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a5d      	ldr	r2, [pc, #372]	@ (800659c <HAL_DMA_IRQHandler+0x1b8>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d045      	beq.n	80064b6 <HAL_DMA_IRQHandler+0xd2>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a5c      	ldr	r2, [pc, #368]	@ (80065a0 <HAL_DMA_IRQHandler+0x1bc>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d040      	beq.n	80064b6 <HAL_DMA_IRQHandler+0xd2>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a5a      	ldr	r2, [pc, #360]	@ (80065a4 <HAL_DMA_IRQHandler+0x1c0>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d03b      	beq.n	80064b6 <HAL_DMA_IRQHandler+0xd2>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a59      	ldr	r2, [pc, #356]	@ (80065a8 <HAL_DMA_IRQHandler+0x1c4>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d036      	beq.n	80064b6 <HAL_DMA_IRQHandler+0xd2>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a57      	ldr	r2, [pc, #348]	@ (80065ac <HAL_DMA_IRQHandler+0x1c8>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d031      	beq.n	80064b6 <HAL_DMA_IRQHandler+0xd2>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a56      	ldr	r2, [pc, #344]	@ (80065b0 <HAL_DMA_IRQHandler+0x1cc>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d02c      	beq.n	80064b6 <HAL_DMA_IRQHandler+0xd2>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a54      	ldr	r2, [pc, #336]	@ (80065b4 <HAL_DMA_IRQHandler+0x1d0>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d027      	beq.n	80064b6 <HAL_DMA_IRQHandler+0xd2>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a53      	ldr	r2, [pc, #332]	@ (80065b8 <HAL_DMA_IRQHandler+0x1d4>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d022      	beq.n	80064b6 <HAL_DMA_IRQHandler+0xd2>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a51      	ldr	r2, [pc, #324]	@ (80065bc <HAL_DMA_IRQHandler+0x1d8>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d01d      	beq.n	80064b6 <HAL_DMA_IRQHandler+0xd2>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a50      	ldr	r2, [pc, #320]	@ (80065c0 <HAL_DMA_IRQHandler+0x1dc>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d018      	beq.n	80064b6 <HAL_DMA_IRQHandler+0xd2>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a4e      	ldr	r2, [pc, #312]	@ (80065c4 <HAL_DMA_IRQHandler+0x1e0>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d013      	beq.n	80064b6 <HAL_DMA_IRQHandler+0xd2>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a4d      	ldr	r2, [pc, #308]	@ (80065c8 <HAL_DMA_IRQHandler+0x1e4>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d00e      	beq.n	80064b6 <HAL_DMA_IRQHandler+0xd2>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a4b      	ldr	r2, [pc, #300]	@ (80065cc <HAL_DMA_IRQHandler+0x1e8>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d009      	beq.n	80064b6 <HAL_DMA_IRQHandler+0xd2>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a4a      	ldr	r2, [pc, #296]	@ (80065d0 <HAL_DMA_IRQHandler+0x1ec>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d004      	beq.n	80064b6 <HAL_DMA_IRQHandler+0xd2>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a48      	ldr	r2, [pc, #288]	@ (80065d4 <HAL_DMA_IRQHandler+0x1f0>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d101      	bne.n	80064ba <HAL_DMA_IRQHandler+0xd6>
 80064b6:	2301      	movs	r3, #1
 80064b8:	e000      	b.n	80064bc <HAL_DMA_IRQHandler+0xd8>
 80064ba:	2300      	movs	r3, #0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	f000 842b 	beq.w	8006d18 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064c6:	f003 031f 	and.w	r3, r3, #31
 80064ca:	2208      	movs	r2, #8
 80064cc:	409a      	lsls	r2, r3
 80064ce:	69bb      	ldr	r3, [r7, #24]
 80064d0:	4013      	ands	r3, r2
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	f000 80a2 	beq.w	800661c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a2e      	ldr	r2, [pc, #184]	@ (8006598 <HAL_DMA_IRQHandler+0x1b4>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d04a      	beq.n	8006578 <HAL_DMA_IRQHandler+0x194>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a2d      	ldr	r2, [pc, #180]	@ (800659c <HAL_DMA_IRQHandler+0x1b8>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d045      	beq.n	8006578 <HAL_DMA_IRQHandler+0x194>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a2b      	ldr	r2, [pc, #172]	@ (80065a0 <HAL_DMA_IRQHandler+0x1bc>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d040      	beq.n	8006578 <HAL_DMA_IRQHandler+0x194>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a2a      	ldr	r2, [pc, #168]	@ (80065a4 <HAL_DMA_IRQHandler+0x1c0>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d03b      	beq.n	8006578 <HAL_DMA_IRQHandler+0x194>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a28      	ldr	r2, [pc, #160]	@ (80065a8 <HAL_DMA_IRQHandler+0x1c4>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d036      	beq.n	8006578 <HAL_DMA_IRQHandler+0x194>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a27      	ldr	r2, [pc, #156]	@ (80065ac <HAL_DMA_IRQHandler+0x1c8>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d031      	beq.n	8006578 <HAL_DMA_IRQHandler+0x194>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a25      	ldr	r2, [pc, #148]	@ (80065b0 <HAL_DMA_IRQHandler+0x1cc>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d02c      	beq.n	8006578 <HAL_DMA_IRQHandler+0x194>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a24      	ldr	r2, [pc, #144]	@ (80065b4 <HAL_DMA_IRQHandler+0x1d0>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d027      	beq.n	8006578 <HAL_DMA_IRQHandler+0x194>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a22      	ldr	r2, [pc, #136]	@ (80065b8 <HAL_DMA_IRQHandler+0x1d4>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d022      	beq.n	8006578 <HAL_DMA_IRQHandler+0x194>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a21      	ldr	r2, [pc, #132]	@ (80065bc <HAL_DMA_IRQHandler+0x1d8>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d01d      	beq.n	8006578 <HAL_DMA_IRQHandler+0x194>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a1f      	ldr	r2, [pc, #124]	@ (80065c0 <HAL_DMA_IRQHandler+0x1dc>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d018      	beq.n	8006578 <HAL_DMA_IRQHandler+0x194>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a1e      	ldr	r2, [pc, #120]	@ (80065c4 <HAL_DMA_IRQHandler+0x1e0>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d013      	beq.n	8006578 <HAL_DMA_IRQHandler+0x194>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a1c      	ldr	r2, [pc, #112]	@ (80065c8 <HAL_DMA_IRQHandler+0x1e4>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d00e      	beq.n	8006578 <HAL_DMA_IRQHandler+0x194>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a1b      	ldr	r2, [pc, #108]	@ (80065cc <HAL_DMA_IRQHandler+0x1e8>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d009      	beq.n	8006578 <HAL_DMA_IRQHandler+0x194>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a19      	ldr	r2, [pc, #100]	@ (80065d0 <HAL_DMA_IRQHandler+0x1ec>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d004      	beq.n	8006578 <HAL_DMA_IRQHandler+0x194>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a18      	ldr	r2, [pc, #96]	@ (80065d4 <HAL_DMA_IRQHandler+0x1f0>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d12f      	bne.n	80065d8 <HAL_DMA_IRQHandler+0x1f4>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f003 0304 	and.w	r3, r3, #4
 8006582:	2b00      	cmp	r3, #0
 8006584:	bf14      	ite	ne
 8006586:	2301      	movne	r3, #1
 8006588:	2300      	moveq	r3, #0
 800658a:	b2db      	uxtb	r3, r3
 800658c:	e02e      	b.n	80065ec <HAL_DMA_IRQHandler+0x208>
 800658e:	bf00      	nop
 8006590:	24000000 	.word	0x24000000
 8006594:	1b4e81b5 	.word	0x1b4e81b5
 8006598:	40020010 	.word	0x40020010
 800659c:	40020028 	.word	0x40020028
 80065a0:	40020040 	.word	0x40020040
 80065a4:	40020058 	.word	0x40020058
 80065a8:	40020070 	.word	0x40020070
 80065ac:	40020088 	.word	0x40020088
 80065b0:	400200a0 	.word	0x400200a0
 80065b4:	400200b8 	.word	0x400200b8
 80065b8:	40020410 	.word	0x40020410
 80065bc:	40020428 	.word	0x40020428
 80065c0:	40020440 	.word	0x40020440
 80065c4:	40020458 	.word	0x40020458
 80065c8:	40020470 	.word	0x40020470
 80065cc:	40020488 	.word	0x40020488
 80065d0:	400204a0 	.word	0x400204a0
 80065d4:	400204b8 	.word	0x400204b8
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f003 0308 	and.w	r3, r3, #8
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	bf14      	ite	ne
 80065e6:	2301      	movne	r3, #1
 80065e8:	2300      	moveq	r3, #0
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d015      	beq.n	800661c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f022 0204 	bic.w	r2, r2, #4
 80065fe:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006604:	f003 031f 	and.w	r3, r3, #31
 8006608:	2208      	movs	r2, #8
 800660a:	409a      	lsls	r2, r3
 800660c:	6a3b      	ldr	r3, [r7, #32]
 800660e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006614:	f043 0201 	orr.w	r2, r3, #1
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006620:	f003 031f 	and.w	r3, r3, #31
 8006624:	69ba      	ldr	r2, [r7, #24]
 8006626:	fa22 f303 	lsr.w	r3, r2, r3
 800662a:	f003 0301 	and.w	r3, r3, #1
 800662e:	2b00      	cmp	r3, #0
 8006630:	d06e      	beq.n	8006710 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a69      	ldr	r2, [pc, #420]	@ (80067dc <HAL_DMA_IRQHandler+0x3f8>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d04a      	beq.n	80066d2 <HAL_DMA_IRQHandler+0x2ee>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a67      	ldr	r2, [pc, #412]	@ (80067e0 <HAL_DMA_IRQHandler+0x3fc>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d045      	beq.n	80066d2 <HAL_DMA_IRQHandler+0x2ee>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a66      	ldr	r2, [pc, #408]	@ (80067e4 <HAL_DMA_IRQHandler+0x400>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d040      	beq.n	80066d2 <HAL_DMA_IRQHandler+0x2ee>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a64      	ldr	r2, [pc, #400]	@ (80067e8 <HAL_DMA_IRQHandler+0x404>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d03b      	beq.n	80066d2 <HAL_DMA_IRQHandler+0x2ee>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a63      	ldr	r2, [pc, #396]	@ (80067ec <HAL_DMA_IRQHandler+0x408>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d036      	beq.n	80066d2 <HAL_DMA_IRQHandler+0x2ee>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a61      	ldr	r2, [pc, #388]	@ (80067f0 <HAL_DMA_IRQHandler+0x40c>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d031      	beq.n	80066d2 <HAL_DMA_IRQHandler+0x2ee>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a60      	ldr	r2, [pc, #384]	@ (80067f4 <HAL_DMA_IRQHandler+0x410>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d02c      	beq.n	80066d2 <HAL_DMA_IRQHandler+0x2ee>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a5e      	ldr	r2, [pc, #376]	@ (80067f8 <HAL_DMA_IRQHandler+0x414>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d027      	beq.n	80066d2 <HAL_DMA_IRQHandler+0x2ee>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a5d      	ldr	r2, [pc, #372]	@ (80067fc <HAL_DMA_IRQHandler+0x418>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d022      	beq.n	80066d2 <HAL_DMA_IRQHandler+0x2ee>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a5b      	ldr	r2, [pc, #364]	@ (8006800 <HAL_DMA_IRQHandler+0x41c>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d01d      	beq.n	80066d2 <HAL_DMA_IRQHandler+0x2ee>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a5a      	ldr	r2, [pc, #360]	@ (8006804 <HAL_DMA_IRQHandler+0x420>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d018      	beq.n	80066d2 <HAL_DMA_IRQHandler+0x2ee>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a58      	ldr	r2, [pc, #352]	@ (8006808 <HAL_DMA_IRQHandler+0x424>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d013      	beq.n	80066d2 <HAL_DMA_IRQHandler+0x2ee>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a57      	ldr	r2, [pc, #348]	@ (800680c <HAL_DMA_IRQHandler+0x428>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d00e      	beq.n	80066d2 <HAL_DMA_IRQHandler+0x2ee>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a55      	ldr	r2, [pc, #340]	@ (8006810 <HAL_DMA_IRQHandler+0x42c>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d009      	beq.n	80066d2 <HAL_DMA_IRQHandler+0x2ee>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a54      	ldr	r2, [pc, #336]	@ (8006814 <HAL_DMA_IRQHandler+0x430>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d004      	beq.n	80066d2 <HAL_DMA_IRQHandler+0x2ee>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a52      	ldr	r2, [pc, #328]	@ (8006818 <HAL_DMA_IRQHandler+0x434>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d10a      	bne.n	80066e8 <HAL_DMA_IRQHandler+0x304>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	695b      	ldr	r3, [r3, #20]
 80066d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066dc:	2b00      	cmp	r3, #0
 80066de:	bf14      	ite	ne
 80066e0:	2301      	movne	r3, #1
 80066e2:	2300      	moveq	r3, #0
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	e003      	b.n	80066f0 <HAL_DMA_IRQHandler+0x30c>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	2300      	movs	r3, #0
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d00d      	beq.n	8006710 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066f8:	f003 031f 	and.w	r3, r3, #31
 80066fc:	2201      	movs	r2, #1
 80066fe:	409a      	lsls	r2, r3
 8006700:	6a3b      	ldr	r3, [r7, #32]
 8006702:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006708:	f043 0202 	orr.w	r2, r3, #2
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006714:	f003 031f 	and.w	r3, r3, #31
 8006718:	2204      	movs	r2, #4
 800671a:	409a      	lsls	r2, r3
 800671c:	69bb      	ldr	r3, [r7, #24]
 800671e:	4013      	ands	r3, r2
 8006720:	2b00      	cmp	r3, #0
 8006722:	f000 808f 	beq.w	8006844 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a2c      	ldr	r2, [pc, #176]	@ (80067dc <HAL_DMA_IRQHandler+0x3f8>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d04a      	beq.n	80067c6 <HAL_DMA_IRQHandler+0x3e2>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a2a      	ldr	r2, [pc, #168]	@ (80067e0 <HAL_DMA_IRQHandler+0x3fc>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d045      	beq.n	80067c6 <HAL_DMA_IRQHandler+0x3e2>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a29      	ldr	r2, [pc, #164]	@ (80067e4 <HAL_DMA_IRQHandler+0x400>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d040      	beq.n	80067c6 <HAL_DMA_IRQHandler+0x3e2>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a27      	ldr	r2, [pc, #156]	@ (80067e8 <HAL_DMA_IRQHandler+0x404>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d03b      	beq.n	80067c6 <HAL_DMA_IRQHandler+0x3e2>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a26      	ldr	r2, [pc, #152]	@ (80067ec <HAL_DMA_IRQHandler+0x408>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d036      	beq.n	80067c6 <HAL_DMA_IRQHandler+0x3e2>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a24      	ldr	r2, [pc, #144]	@ (80067f0 <HAL_DMA_IRQHandler+0x40c>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d031      	beq.n	80067c6 <HAL_DMA_IRQHandler+0x3e2>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a23      	ldr	r2, [pc, #140]	@ (80067f4 <HAL_DMA_IRQHandler+0x410>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d02c      	beq.n	80067c6 <HAL_DMA_IRQHandler+0x3e2>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a21      	ldr	r2, [pc, #132]	@ (80067f8 <HAL_DMA_IRQHandler+0x414>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d027      	beq.n	80067c6 <HAL_DMA_IRQHandler+0x3e2>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a20      	ldr	r2, [pc, #128]	@ (80067fc <HAL_DMA_IRQHandler+0x418>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d022      	beq.n	80067c6 <HAL_DMA_IRQHandler+0x3e2>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a1e      	ldr	r2, [pc, #120]	@ (8006800 <HAL_DMA_IRQHandler+0x41c>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d01d      	beq.n	80067c6 <HAL_DMA_IRQHandler+0x3e2>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a1d      	ldr	r2, [pc, #116]	@ (8006804 <HAL_DMA_IRQHandler+0x420>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d018      	beq.n	80067c6 <HAL_DMA_IRQHandler+0x3e2>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a1b      	ldr	r2, [pc, #108]	@ (8006808 <HAL_DMA_IRQHandler+0x424>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d013      	beq.n	80067c6 <HAL_DMA_IRQHandler+0x3e2>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a1a      	ldr	r2, [pc, #104]	@ (800680c <HAL_DMA_IRQHandler+0x428>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d00e      	beq.n	80067c6 <HAL_DMA_IRQHandler+0x3e2>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a18      	ldr	r2, [pc, #96]	@ (8006810 <HAL_DMA_IRQHandler+0x42c>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d009      	beq.n	80067c6 <HAL_DMA_IRQHandler+0x3e2>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a17      	ldr	r2, [pc, #92]	@ (8006814 <HAL_DMA_IRQHandler+0x430>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d004      	beq.n	80067c6 <HAL_DMA_IRQHandler+0x3e2>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a15      	ldr	r2, [pc, #84]	@ (8006818 <HAL_DMA_IRQHandler+0x434>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d12a      	bne.n	800681c <HAL_DMA_IRQHandler+0x438>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f003 0302 	and.w	r3, r3, #2
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	bf14      	ite	ne
 80067d4:	2301      	movne	r3, #1
 80067d6:	2300      	moveq	r3, #0
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	e023      	b.n	8006824 <HAL_DMA_IRQHandler+0x440>
 80067dc:	40020010 	.word	0x40020010
 80067e0:	40020028 	.word	0x40020028
 80067e4:	40020040 	.word	0x40020040
 80067e8:	40020058 	.word	0x40020058
 80067ec:	40020070 	.word	0x40020070
 80067f0:	40020088 	.word	0x40020088
 80067f4:	400200a0 	.word	0x400200a0
 80067f8:	400200b8 	.word	0x400200b8
 80067fc:	40020410 	.word	0x40020410
 8006800:	40020428 	.word	0x40020428
 8006804:	40020440 	.word	0x40020440
 8006808:	40020458 	.word	0x40020458
 800680c:	40020470 	.word	0x40020470
 8006810:	40020488 	.word	0x40020488
 8006814:	400204a0 	.word	0x400204a0
 8006818:	400204b8 	.word	0x400204b8
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	2300      	movs	r3, #0
 8006824:	2b00      	cmp	r3, #0
 8006826:	d00d      	beq.n	8006844 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800682c:	f003 031f 	and.w	r3, r3, #31
 8006830:	2204      	movs	r2, #4
 8006832:	409a      	lsls	r2, r3
 8006834:	6a3b      	ldr	r3, [r7, #32]
 8006836:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800683c:	f043 0204 	orr.w	r2, r3, #4
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006848:	f003 031f 	and.w	r3, r3, #31
 800684c:	2210      	movs	r2, #16
 800684e:	409a      	lsls	r2, r3
 8006850:	69bb      	ldr	r3, [r7, #24]
 8006852:	4013      	ands	r3, r2
 8006854:	2b00      	cmp	r3, #0
 8006856:	f000 80a6 	beq.w	80069a6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a85      	ldr	r2, [pc, #532]	@ (8006a74 <HAL_DMA_IRQHandler+0x690>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d04a      	beq.n	80068fa <HAL_DMA_IRQHandler+0x516>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a83      	ldr	r2, [pc, #524]	@ (8006a78 <HAL_DMA_IRQHandler+0x694>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d045      	beq.n	80068fa <HAL_DMA_IRQHandler+0x516>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a82      	ldr	r2, [pc, #520]	@ (8006a7c <HAL_DMA_IRQHandler+0x698>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d040      	beq.n	80068fa <HAL_DMA_IRQHandler+0x516>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a80      	ldr	r2, [pc, #512]	@ (8006a80 <HAL_DMA_IRQHandler+0x69c>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d03b      	beq.n	80068fa <HAL_DMA_IRQHandler+0x516>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a7f      	ldr	r2, [pc, #508]	@ (8006a84 <HAL_DMA_IRQHandler+0x6a0>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d036      	beq.n	80068fa <HAL_DMA_IRQHandler+0x516>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a7d      	ldr	r2, [pc, #500]	@ (8006a88 <HAL_DMA_IRQHandler+0x6a4>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d031      	beq.n	80068fa <HAL_DMA_IRQHandler+0x516>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a7c      	ldr	r2, [pc, #496]	@ (8006a8c <HAL_DMA_IRQHandler+0x6a8>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d02c      	beq.n	80068fa <HAL_DMA_IRQHandler+0x516>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a7a      	ldr	r2, [pc, #488]	@ (8006a90 <HAL_DMA_IRQHandler+0x6ac>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d027      	beq.n	80068fa <HAL_DMA_IRQHandler+0x516>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a79      	ldr	r2, [pc, #484]	@ (8006a94 <HAL_DMA_IRQHandler+0x6b0>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d022      	beq.n	80068fa <HAL_DMA_IRQHandler+0x516>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a77      	ldr	r2, [pc, #476]	@ (8006a98 <HAL_DMA_IRQHandler+0x6b4>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d01d      	beq.n	80068fa <HAL_DMA_IRQHandler+0x516>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a76      	ldr	r2, [pc, #472]	@ (8006a9c <HAL_DMA_IRQHandler+0x6b8>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d018      	beq.n	80068fa <HAL_DMA_IRQHandler+0x516>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a74      	ldr	r2, [pc, #464]	@ (8006aa0 <HAL_DMA_IRQHandler+0x6bc>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d013      	beq.n	80068fa <HAL_DMA_IRQHandler+0x516>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a73      	ldr	r2, [pc, #460]	@ (8006aa4 <HAL_DMA_IRQHandler+0x6c0>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d00e      	beq.n	80068fa <HAL_DMA_IRQHandler+0x516>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a71      	ldr	r2, [pc, #452]	@ (8006aa8 <HAL_DMA_IRQHandler+0x6c4>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d009      	beq.n	80068fa <HAL_DMA_IRQHandler+0x516>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a70      	ldr	r2, [pc, #448]	@ (8006aac <HAL_DMA_IRQHandler+0x6c8>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d004      	beq.n	80068fa <HAL_DMA_IRQHandler+0x516>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a6e      	ldr	r2, [pc, #440]	@ (8006ab0 <HAL_DMA_IRQHandler+0x6cc>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d10a      	bne.n	8006910 <HAL_DMA_IRQHandler+0x52c>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f003 0308 	and.w	r3, r3, #8
 8006904:	2b00      	cmp	r3, #0
 8006906:	bf14      	ite	ne
 8006908:	2301      	movne	r3, #1
 800690a:	2300      	moveq	r3, #0
 800690c:	b2db      	uxtb	r3, r3
 800690e:	e009      	b.n	8006924 <HAL_DMA_IRQHandler+0x540>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f003 0304 	and.w	r3, r3, #4
 800691a:	2b00      	cmp	r3, #0
 800691c:	bf14      	ite	ne
 800691e:	2301      	movne	r3, #1
 8006920:	2300      	moveq	r3, #0
 8006922:	b2db      	uxtb	r3, r3
 8006924:	2b00      	cmp	r3, #0
 8006926:	d03e      	beq.n	80069a6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800692c:	f003 031f 	and.w	r3, r3, #31
 8006930:	2210      	movs	r2, #16
 8006932:	409a      	lsls	r2, r3
 8006934:	6a3b      	ldr	r3, [r7, #32]
 8006936:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006942:	2b00      	cmp	r3, #0
 8006944:	d018      	beq.n	8006978 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006950:	2b00      	cmp	r3, #0
 8006952:	d108      	bne.n	8006966 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006958:	2b00      	cmp	r3, #0
 800695a:	d024      	beq.n	80069a6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	4798      	blx	r3
 8006964:	e01f      	b.n	80069a6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800696a:	2b00      	cmp	r3, #0
 800696c:	d01b      	beq.n	80069a6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	4798      	blx	r3
 8006976:	e016      	b.n	80069a6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006982:	2b00      	cmp	r3, #0
 8006984:	d107      	bne.n	8006996 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f022 0208 	bic.w	r2, r2, #8
 8006994:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800699a:	2b00      	cmp	r3, #0
 800699c:	d003      	beq.n	80069a6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069aa:	f003 031f 	and.w	r3, r3, #31
 80069ae:	2220      	movs	r2, #32
 80069b0:	409a      	lsls	r2, r3
 80069b2:	69bb      	ldr	r3, [r7, #24]
 80069b4:	4013      	ands	r3, r2
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	f000 8110 	beq.w	8006bdc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a2c      	ldr	r2, [pc, #176]	@ (8006a74 <HAL_DMA_IRQHandler+0x690>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d04a      	beq.n	8006a5c <HAL_DMA_IRQHandler+0x678>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a2b      	ldr	r2, [pc, #172]	@ (8006a78 <HAL_DMA_IRQHandler+0x694>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d045      	beq.n	8006a5c <HAL_DMA_IRQHandler+0x678>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a29      	ldr	r2, [pc, #164]	@ (8006a7c <HAL_DMA_IRQHandler+0x698>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d040      	beq.n	8006a5c <HAL_DMA_IRQHandler+0x678>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a28      	ldr	r2, [pc, #160]	@ (8006a80 <HAL_DMA_IRQHandler+0x69c>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d03b      	beq.n	8006a5c <HAL_DMA_IRQHandler+0x678>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a26      	ldr	r2, [pc, #152]	@ (8006a84 <HAL_DMA_IRQHandler+0x6a0>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d036      	beq.n	8006a5c <HAL_DMA_IRQHandler+0x678>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a25      	ldr	r2, [pc, #148]	@ (8006a88 <HAL_DMA_IRQHandler+0x6a4>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d031      	beq.n	8006a5c <HAL_DMA_IRQHandler+0x678>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a23      	ldr	r2, [pc, #140]	@ (8006a8c <HAL_DMA_IRQHandler+0x6a8>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d02c      	beq.n	8006a5c <HAL_DMA_IRQHandler+0x678>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a22      	ldr	r2, [pc, #136]	@ (8006a90 <HAL_DMA_IRQHandler+0x6ac>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d027      	beq.n	8006a5c <HAL_DMA_IRQHandler+0x678>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a20      	ldr	r2, [pc, #128]	@ (8006a94 <HAL_DMA_IRQHandler+0x6b0>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d022      	beq.n	8006a5c <HAL_DMA_IRQHandler+0x678>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a1f      	ldr	r2, [pc, #124]	@ (8006a98 <HAL_DMA_IRQHandler+0x6b4>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d01d      	beq.n	8006a5c <HAL_DMA_IRQHandler+0x678>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a1d      	ldr	r2, [pc, #116]	@ (8006a9c <HAL_DMA_IRQHandler+0x6b8>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d018      	beq.n	8006a5c <HAL_DMA_IRQHandler+0x678>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a1c      	ldr	r2, [pc, #112]	@ (8006aa0 <HAL_DMA_IRQHandler+0x6bc>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d013      	beq.n	8006a5c <HAL_DMA_IRQHandler+0x678>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a1a      	ldr	r2, [pc, #104]	@ (8006aa4 <HAL_DMA_IRQHandler+0x6c0>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d00e      	beq.n	8006a5c <HAL_DMA_IRQHandler+0x678>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a19      	ldr	r2, [pc, #100]	@ (8006aa8 <HAL_DMA_IRQHandler+0x6c4>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d009      	beq.n	8006a5c <HAL_DMA_IRQHandler+0x678>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a17      	ldr	r2, [pc, #92]	@ (8006aac <HAL_DMA_IRQHandler+0x6c8>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d004      	beq.n	8006a5c <HAL_DMA_IRQHandler+0x678>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a16      	ldr	r2, [pc, #88]	@ (8006ab0 <HAL_DMA_IRQHandler+0x6cc>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d12b      	bne.n	8006ab4 <HAL_DMA_IRQHandler+0x6d0>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f003 0310 	and.w	r3, r3, #16
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	bf14      	ite	ne
 8006a6a:	2301      	movne	r3, #1
 8006a6c:	2300      	moveq	r3, #0
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	e02a      	b.n	8006ac8 <HAL_DMA_IRQHandler+0x6e4>
 8006a72:	bf00      	nop
 8006a74:	40020010 	.word	0x40020010
 8006a78:	40020028 	.word	0x40020028
 8006a7c:	40020040 	.word	0x40020040
 8006a80:	40020058 	.word	0x40020058
 8006a84:	40020070 	.word	0x40020070
 8006a88:	40020088 	.word	0x40020088
 8006a8c:	400200a0 	.word	0x400200a0
 8006a90:	400200b8 	.word	0x400200b8
 8006a94:	40020410 	.word	0x40020410
 8006a98:	40020428 	.word	0x40020428
 8006a9c:	40020440 	.word	0x40020440
 8006aa0:	40020458 	.word	0x40020458
 8006aa4:	40020470 	.word	0x40020470
 8006aa8:	40020488 	.word	0x40020488
 8006aac:	400204a0 	.word	0x400204a0
 8006ab0:	400204b8 	.word	0x400204b8
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f003 0302 	and.w	r3, r3, #2
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	bf14      	ite	ne
 8006ac2:	2301      	movne	r3, #1
 8006ac4:	2300      	moveq	r3, #0
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	f000 8087 	beq.w	8006bdc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ad2:	f003 031f 	and.w	r3, r3, #31
 8006ad6:	2220      	movs	r2, #32
 8006ad8:	409a      	lsls	r2, r3
 8006ada:	6a3b      	ldr	r3, [r7, #32]
 8006adc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	2b04      	cmp	r3, #4
 8006ae8:	d139      	bne.n	8006b5e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f022 0216 	bic.w	r2, r2, #22
 8006af8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	695a      	ldr	r2, [r3, #20]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006b08:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d103      	bne.n	8006b1a <HAL_DMA_IRQHandler+0x736>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d007      	beq.n	8006b2a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f022 0208 	bic.w	r2, r2, #8
 8006b28:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b2e:	f003 031f 	and.w	r3, r3, #31
 8006b32:	223f      	movs	r2, #63	@ 0x3f
 8006b34:	409a      	lsls	r2, r3
 8006b36:	6a3b      	ldr	r3, [r7, #32]
 8006b38:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	f000 834a 	beq.w	80071e8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	4798      	blx	r3
          }
          return;
 8006b5c:	e344      	b.n	80071e8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d018      	beq.n	8006b9e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d108      	bne.n	8006b8c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d02c      	beq.n	8006bdc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	4798      	blx	r3
 8006b8a:	e027      	b.n	8006bdc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d023      	beq.n	8006bdc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	4798      	blx	r3
 8006b9c:	e01e      	b.n	8006bdc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d10f      	bne.n	8006bcc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f022 0210 	bic.w	r2, r2, #16
 8006bba:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d003      	beq.n	8006bdc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	f000 8306 	beq.w	80071f2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bea:	f003 0301 	and.w	r3, r3, #1
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	f000 8088 	beq.w	8006d04 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2204      	movs	r2, #4
 8006bf8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a7a      	ldr	r2, [pc, #488]	@ (8006dec <HAL_DMA_IRQHandler+0xa08>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d04a      	beq.n	8006c9c <HAL_DMA_IRQHandler+0x8b8>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a79      	ldr	r2, [pc, #484]	@ (8006df0 <HAL_DMA_IRQHandler+0xa0c>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d045      	beq.n	8006c9c <HAL_DMA_IRQHandler+0x8b8>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a77      	ldr	r2, [pc, #476]	@ (8006df4 <HAL_DMA_IRQHandler+0xa10>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d040      	beq.n	8006c9c <HAL_DMA_IRQHandler+0x8b8>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a76      	ldr	r2, [pc, #472]	@ (8006df8 <HAL_DMA_IRQHandler+0xa14>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d03b      	beq.n	8006c9c <HAL_DMA_IRQHandler+0x8b8>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a74      	ldr	r2, [pc, #464]	@ (8006dfc <HAL_DMA_IRQHandler+0xa18>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d036      	beq.n	8006c9c <HAL_DMA_IRQHandler+0x8b8>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a73      	ldr	r2, [pc, #460]	@ (8006e00 <HAL_DMA_IRQHandler+0xa1c>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d031      	beq.n	8006c9c <HAL_DMA_IRQHandler+0x8b8>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a71      	ldr	r2, [pc, #452]	@ (8006e04 <HAL_DMA_IRQHandler+0xa20>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d02c      	beq.n	8006c9c <HAL_DMA_IRQHandler+0x8b8>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a70      	ldr	r2, [pc, #448]	@ (8006e08 <HAL_DMA_IRQHandler+0xa24>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d027      	beq.n	8006c9c <HAL_DMA_IRQHandler+0x8b8>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a6e      	ldr	r2, [pc, #440]	@ (8006e0c <HAL_DMA_IRQHandler+0xa28>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d022      	beq.n	8006c9c <HAL_DMA_IRQHandler+0x8b8>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a6d      	ldr	r2, [pc, #436]	@ (8006e10 <HAL_DMA_IRQHandler+0xa2c>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d01d      	beq.n	8006c9c <HAL_DMA_IRQHandler+0x8b8>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a6b      	ldr	r2, [pc, #428]	@ (8006e14 <HAL_DMA_IRQHandler+0xa30>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d018      	beq.n	8006c9c <HAL_DMA_IRQHandler+0x8b8>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a6a      	ldr	r2, [pc, #424]	@ (8006e18 <HAL_DMA_IRQHandler+0xa34>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d013      	beq.n	8006c9c <HAL_DMA_IRQHandler+0x8b8>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a68      	ldr	r2, [pc, #416]	@ (8006e1c <HAL_DMA_IRQHandler+0xa38>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d00e      	beq.n	8006c9c <HAL_DMA_IRQHandler+0x8b8>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a67      	ldr	r2, [pc, #412]	@ (8006e20 <HAL_DMA_IRQHandler+0xa3c>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d009      	beq.n	8006c9c <HAL_DMA_IRQHandler+0x8b8>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a65      	ldr	r2, [pc, #404]	@ (8006e24 <HAL_DMA_IRQHandler+0xa40>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d004      	beq.n	8006c9c <HAL_DMA_IRQHandler+0x8b8>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a64      	ldr	r2, [pc, #400]	@ (8006e28 <HAL_DMA_IRQHandler+0xa44>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d108      	bne.n	8006cae <HAL_DMA_IRQHandler+0x8ca>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f022 0201 	bic.w	r2, r2, #1
 8006caa:	601a      	str	r2, [r3, #0]
 8006cac:	e007      	b.n	8006cbe <HAL_DMA_IRQHandler+0x8da>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f022 0201 	bic.w	r2, r2, #1
 8006cbc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	3301      	adds	r3, #1
 8006cc2:	60fb      	str	r3, [r7, #12]
 8006cc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d307      	bcc.n	8006cda <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f003 0301 	and.w	r3, r3, #1
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d1f2      	bne.n	8006cbe <HAL_DMA_IRQHandler+0x8da>
 8006cd8:	e000      	b.n	8006cdc <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006cda:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f003 0301 	and.w	r3, r3, #1
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d004      	beq.n	8006cf4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2203      	movs	r2, #3
 8006cee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8006cf2:	e003      	b.n	8006cfc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	f000 8272 	beq.w	80071f2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	4798      	blx	r3
 8006d16:	e26c      	b.n	80071f2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a43      	ldr	r2, [pc, #268]	@ (8006e2c <HAL_DMA_IRQHandler+0xa48>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d022      	beq.n	8006d68 <HAL_DMA_IRQHandler+0x984>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a42      	ldr	r2, [pc, #264]	@ (8006e30 <HAL_DMA_IRQHandler+0xa4c>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d01d      	beq.n	8006d68 <HAL_DMA_IRQHandler+0x984>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a40      	ldr	r2, [pc, #256]	@ (8006e34 <HAL_DMA_IRQHandler+0xa50>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d018      	beq.n	8006d68 <HAL_DMA_IRQHandler+0x984>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a3f      	ldr	r2, [pc, #252]	@ (8006e38 <HAL_DMA_IRQHandler+0xa54>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d013      	beq.n	8006d68 <HAL_DMA_IRQHandler+0x984>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a3d      	ldr	r2, [pc, #244]	@ (8006e3c <HAL_DMA_IRQHandler+0xa58>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d00e      	beq.n	8006d68 <HAL_DMA_IRQHandler+0x984>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a3c      	ldr	r2, [pc, #240]	@ (8006e40 <HAL_DMA_IRQHandler+0xa5c>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d009      	beq.n	8006d68 <HAL_DMA_IRQHandler+0x984>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a3a      	ldr	r2, [pc, #232]	@ (8006e44 <HAL_DMA_IRQHandler+0xa60>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d004      	beq.n	8006d68 <HAL_DMA_IRQHandler+0x984>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a39      	ldr	r2, [pc, #228]	@ (8006e48 <HAL_DMA_IRQHandler+0xa64>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d101      	bne.n	8006d6c <HAL_DMA_IRQHandler+0x988>
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e000      	b.n	8006d6e <HAL_DMA_IRQHandler+0x98a>
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	f000 823f 	beq.w	80071f2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d80:	f003 031f 	and.w	r3, r3, #31
 8006d84:	2204      	movs	r2, #4
 8006d86:	409a      	lsls	r2, r3
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	4013      	ands	r3, r2
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	f000 80cd 	beq.w	8006f2c <HAL_DMA_IRQHandler+0xb48>
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	f003 0304 	and.w	r3, r3, #4
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	f000 80c7 	beq.w	8006f2c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006da2:	f003 031f 	and.w	r3, r3, #31
 8006da6:	2204      	movs	r2, #4
 8006da8:	409a      	lsls	r2, r3
 8006daa:	69fb      	ldr	r3, [r7, #28]
 8006dac:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d049      	beq.n	8006e4c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d109      	bne.n	8006dd6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	f000 8210 	beq.w	80071ec <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006dd4:	e20a      	b.n	80071ec <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	f000 8206 	beq.w	80071ec <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006de8:	e200      	b.n	80071ec <HAL_DMA_IRQHandler+0xe08>
 8006dea:	bf00      	nop
 8006dec:	40020010 	.word	0x40020010
 8006df0:	40020028 	.word	0x40020028
 8006df4:	40020040 	.word	0x40020040
 8006df8:	40020058 	.word	0x40020058
 8006dfc:	40020070 	.word	0x40020070
 8006e00:	40020088 	.word	0x40020088
 8006e04:	400200a0 	.word	0x400200a0
 8006e08:	400200b8 	.word	0x400200b8
 8006e0c:	40020410 	.word	0x40020410
 8006e10:	40020428 	.word	0x40020428
 8006e14:	40020440 	.word	0x40020440
 8006e18:	40020458 	.word	0x40020458
 8006e1c:	40020470 	.word	0x40020470
 8006e20:	40020488 	.word	0x40020488
 8006e24:	400204a0 	.word	0x400204a0
 8006e28:	400204b8 	.word	0x400204b8
 8006e2c:	58025408 	.word	0x58025408
 8006e30:	5802541c 	.word	0x5802541c
 8006e34:	58025430 	.word	0x58025430
 8006e38:	58025444 	.word	0x58025444
 8006e3c:	58025458 	.word	0x58025458
 8006e40:	5802546c 	.word	0x5802546c
 8006e44:	58025480 	.word	0x58025480
 8006e48:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	f003 0320 	and.w	r3, r3, #32
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d160      	bne.n	8006f18 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a7f      	ldr	r2, [pc, #508]	@ (8007058 <HAL_DMA_IRQHandler+0xc74>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d04a      	beq.n	8006ef6 <HAL_DMA_IRQHandler+0xb12>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a7d      	ldr	r2, [pc, #500]	@ (800705c <HAL_DMA_IRQHandler+0xc78>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d045      	beq.n	8006ef6 <HAL_DMA_IRQHandler+0xb12>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a7c      	ldr	r2, [pc, #496]	@ (8007060 <HAL_DMA_IRQHandler+0xc7c>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d040      	beq.n	8006ef6 <HAL_DMA_IRQHandler+0xb12>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a7a      	ldr	r2, [pc, #488]	@ (8007064 <HAL_DMA_IRQHandler+0xc80>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d03b      	beq.n	8006ef6 <HAL_DMA_IRQHandler+0xb12>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a79      	ldr	r2, [pc, #484]	@ (8007068 <HAL_DMA_IRQHandler+0xc84>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d036      	beq.n	8006ef6 <HAL_DMA_IRQHandler+0xb12>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a77      	ldr	r2, [pc, #476]	@ (800706c <HAL_DMA_IRQHandler+0xc88>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d031      	beq.n	8006ef6 <HAL_DMA_IRQHandler+0xb12>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a76      	ldr	r2, [pc, #472]	@ (8007070 <HAL_DMA_IRQHandler+0xc8c>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d02c      	beq.n	8006ef6 <HAL_DMA_IRQHandler+0xb12>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a74      	ldr	r2, [pc, #464]	@ (8007074 <HAL_DMA_IRQHandler+0xc90>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d027      	beq.n	8006ef6 <HAL_DMA_IRQHandler+0xb12>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a73      	ldr	r2, [pc, #460]	@ (8007078 <HAL_DMA_IRQHandler+0xc94>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d022      	beq.n	8006ef6 <HAL_DMA_IRQHandler+0xb12>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a71      	ldr	r2, [pc, #452]	@ (800707c <HAL_DMA_IRQHandler+0xc98>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d01d      	beq.n	8006ef6 <HAL_DMA_IRQHandler+0xb12>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a70      	ldr	r2, [pc, #448]	@ (8007080 <HAL_DMA_IRQHandler+0xc9c>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d018      	beq.n	8006ef6 <HAL_DMA_IRQHandler+0xb12>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a6e      	ldr	r2, [pc, #440]	@ (8007084 <HAL_DMA_IRQHandler+0xca0>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d013      	beq.n	8006ef6 <HAL_DMA_IRQHandler+0xb12>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a6d      	ldr	r2, [pc, #436]	@ (8007088 <HAL_DMA_IRQHandler+0xca4>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d00e      	beq.n	8006ef6 <HAL_DMA_IRQHandler+0xb12>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a6b      	ldr	r2, [pc, #428]	@ (800708c <HAL_DMA_IRQHandler+0xca8>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d009      	beq.n	8006ef6 <HAL_DMA_IRQHandler+0xb12>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a6a      	ldr	r2, [pc, #424]	@ (8007090 <HAL_DMA_IRQHandler+0xcac>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d004      	beq.n	8006ef6 <HAL_DMA_IRQHandler+0xb12>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a68      	ldr	r2, [pc, #416]	@ (8007094 <HAL_DMA_IRQHandler+0xcb0>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d108      	bne.n	8006f08 <HAL_DMA_IRQHandler+0xb24>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	681a      	ldr	r2, [r3, #0]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f022 0208 	bic.w	r2, r2, #8
 8006f04:	601a      	str	r2, [r3, #0]
 8006f06:	e007      	b.n	8006f18 <HAL_DMA_IRQHandler+0xb34>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f022 0204 	bic.w	r2, r2, #4
 8006f16:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	f000 8165 	beq.w	80071ec <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f2a:	e15f      	b.n	80071ec <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f30:	f003 031f 	and.w	r3, r3, #31
 8006f34:	2202      	movs	r2, #2
 8006f36:	409a      	lsls	r2, r3
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	4013      	ands	r3, r2
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	f000 80c5 	beq.w	80070cc <HAL_DMA_IRQHandler+0xce8>
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	f003 0302 	and.w	r3, r3, #2
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	f000 80bf 	beq.w	80070cc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f52:	f003 031f 	and.w	r3, r3, #31
 8006f56:	2202      	movs	r2, #2
 8006f58:	409a      	lsls	r2, r3
 8006f5a:	69fb      	ldr	r3, [r7, #28]
 8006f5c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d018      	beq.n	8006f9a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d109      	bne.n	8006f86 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	f000 813a 	beq.w	80071f0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f84:	e134      	b.n	80071f0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	f000 8130 	beq.w	80071f0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f98:	e12a      	b.n	80071f0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	f003 0320 	and.w	r3, r3, #32
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	f040 8089 	bne.w	80070b8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a2b      	ldr	r2, [pc, #172]	@ (8007058 <HAL_DMA_IRQHandler+0xc74>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d04a      	beq.n	8007046 <HAL_DMA_IRQHandler+0xc62>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a29      	ldr	r2, [pc, #164]	@ (800705c <HAL_DMA_IRQHandler+0xc78>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d045      	beq.n	8007046 <HAL_DMA_IRQHandler+0xc62>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a28      	ldr	r2, [pc, #160]	@ (8007060 <HAL_DMA_IRQHandler+0xc7c>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d040      	beq.n	8007046 <HAL_DMA_IRQHandler+0xc62>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a26      	ldr	r2, [pc, #152]	@ (8007064 <HAL_DMA_IRQHandler+0xc80>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d03b      	beq.n	8007046 <HAL_DMA_IRQHandler+0xc62>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a25      	ldr	r2, [pc, #148]	@ (8007068 <HAL_DMA_IRQHandler+0xc84>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d036      	beq.n	8007046 <HAL_DMA_IRQHandler+0xc62>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a23      	ldr	r2, [pc, #140]	@ (800706c <HAL_DMA_IRQHandler+0xc88>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d031      	beq.n	8007046 <HAL_DMA_IRQHandler+0xc62>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a22      	ldr	r2, [pc, #136]	@ (8007070 <HAL_DMA_IRQHandler+0xc8c>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d02c      	beq.n	8007046 <HAL_DMA_IRQHandler+0xc62>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a20      	ldr	r2, [pc, #128]	@ (8007074 <HAL_DMA_IRQHandler+0xc90>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d027      	beq.n	8007046 <HAL_DMA_IRQHandler+0xc62>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a1f      	ldr	r2, [pc, #124]	@ (8007078 <HAL_DMA_IRQHandler+0xc94>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d022      	beq.n	8007046 <HAL_DMA_IRQHandler+0xc62>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a1d      	ldr	r2, [pc, #116]	@ (800707c <HAL_DMA_IRQHandler+0xc98>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d01d      	beq.n	8007046 <HAL_DMA_IRQHandler+0xc62>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a1c      	ldr	r2, [pc, #112]	@ (8007080 <HAL_DMA_IRQHandler+0xc9c>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d018      	beq.n	8007046 <HAL_DMA_IRQHandler+0xc62>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a1a      	ldr	r2, [pc, #104]	@ (8007084 <HAL_DMA_IRQHandler+0xca0>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d013      	beq.n	8007046 <HAL_DMA_IRQHandler+0xc62>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a19      	ldr	r2, [pc, #100]	@ (8007088 <HAL_DMA_IRQHandler+0xca4>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d00e      	beq.n	8007046 <HAL_DMA_IRQHandler+0xc62>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a17      	ldr	r2, [pc, #92]	@ (800708c <HAL_DMA_IRQHandler+0xca8>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d009      	beq.n	8007046 <HAL_DMA_IRQHandler+0xc62>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a16      	ldr	r2, [pc, #88]	@ (8007090 <HAL_DMA_IRQHandler+0xcac>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d004      	beq.n	8007046 <HAL_DMA_IRQHandler+0xc62>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a14      	ldr	r2, [pc, #80]	@ (8007094 <HAL_DMA_IRQHandler+0xcb0>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d128      	bne.n	8007098 <HAL_DMA_IRQHandler+0xcb4>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f022 0214 	bic.w	r2, r2, #20
 8007054:	601a      	str	r2, [r3, #0]
 8007056:	e027      	b.n	80070a8 <HAL_DMA_IRQHandler+0xcc4>
 8007058:	40020010 	.word	0x40020010
 800705c:	40020028 	.word	0x40020028
 8007060:	40020040 	.word	0x40020040
 8007064:	40020058 	.word	0x40020058
 8007068:	40020070 	.word	0x40020070
 800706c:	40020088 	.word	0x40020088
 8007070:	400200a0 	.word	0x400200a0
 8007074:	400200b8 	.word	0x400200b8
 8007078:	40020410 	.word	0x40020410
 800707c:	40020428 	.word	0x40020428
 8007080:	40020440 	.word	0x40020440
 8007084:	40020458 	.word	0x40020458
 8007088:	40020470 	.word	0x40020470
 800708c:	40020488 	.word	0x40020488
 8007090:	400204a0 	.word	0x400204a0
 8007094:	400204b8 	.word	0x400204b8
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f022 020a 	bic.w	r2, r2, #10
 80070a6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2201      	movs	r2, #1
 80070ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2200      	movs	r2, #0
 80070b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070bc:	2b00      	cmp	r3, #0
 80070be:	f000 8097 	beq.w	80071f0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80070ca:	e091      	b.n	80071f0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070d0:	f003 031f 	and.w	r3, r3, #31
 80070d4:	2208      	movs	r2, #8
 80070d6:	409a      	lsls	r2, r3
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	4013      	ands	r3, r2
 80070dc:	2b00      	cmp	r3, #0
 80070de:	f000 8088 	beq.w	80071f2 <HAL_DMA_IRQHandler+0xe0e>
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	f003 0308 	and.w	r3, r3, #8
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	f000 8082 	beq.w	80071f2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a41      	ldr	r2, [pc, #260]	@ (80071f8 <HAL_DMA_IRQHandler+0xe14>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d04a      	beq.n	800718e <HAL_DMA_IRQHandler+0xdaa>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a3f      	ldr	r2, [pc, #252]	@ (80071fc <HAL_DMA_IRQHandler+0xe18>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d045      	beq.n	800718e <HAL_DMA_IRQHandler+0xdaa>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a3e      	ldr	r2, [pc, #248]	@ (8007200 <HAL_DMA_IRQHandler+0xe1c>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d040      	beq.n	800718e <HAL_DMA_IRQHandler+0xdaa>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a3c      	ldr	r2, [pc, #240]	@ (8007204 <HAL_DMA_IRQHandler+0xe20>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d03b      	beq.n	800718e <HAL_DMA_IRQHandler+0xdaa>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a3b      	ldr	r2, [pc, #236]	@ (8007208 <HAL_DMA_IRQHandler+0xe24>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d036      	beq.n	800718e <HAL_DMA_IRQHandler+0xdaa>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a39      	ldr	r2, [pc, #228]	@ (800720c <HAL_DMA_IRQHandler+0xe28>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d031      	beq.n	800718e <HAL_DMA_IRQHandler+0xdaa>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a38      	ldr	r2, [pc, #224]	@ (8007210 <HAL_DMA_IRQHandler+0xe2c>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d02c      	beq.n	800718e <HAL_DMA_IRQHandler+0xdaa>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a36      	ldr	r2, [pc, #216]	@ (8007214 <HAL_DMA_IRQHandler+0xe30>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d027      	beq.n	800718e <HAL_DMA_IRQHandler+0xdaa>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a35      	ldr	r2, [pc, #212]	@ (8007218 <HAL_DMA_IRQHandler+0xe34>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d022      	beq.n	800718e <HAL_DMA_IRQHandler+0xdaa>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a33      	ldr	r2, [pc, #204]	@ (800721c <HAL_DMA_IRQHandler+0xe38>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d01d      	beq.n	800718e <HAL_DMA_IRQHandler+0xdaa>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a32      	ldr	r2, [pc, #200]	@ (8007220 <HAL_DMA_IRQHandler+0xe3c>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d018      	beq.n	800718e <HAL_DMA_IRQHandler+0xdaa>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a30      	ldr	r2, [pc, #192]	@ (8007224 <HAL_DMA_IRQHandler+0xe40>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d013      	beq.n	800718e <HAL_DMA_IRQHandler+0xdaa>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a2f      	ldr	r2, [pc, #188]	@ (8007228 <HAL_DMA_IRQHandler+0xe44>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d00e      	beq.n	800718e <HAL_DMA_IRQHandler+0xdaa>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a2d      	ldr	r2, [pc, #180]	@ (800722c <HAL_DMA_IRQHandler+0xe48>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d009      	beq.n	800718e <HAL_DMA_IRQHandler+0xdaa>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a2c      	ldr	r2, [pc, #176]	@ (8007230 <HAL_DMA_IRQHandler+0xe4c>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d004      	beq.n	800718e <HAL_DMA_IRQHandler+0xdaa>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a2a      	ldr	r2, [pc, #168]	@ (8007234 <HAL_DMA_IRQHandler+0xe50>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d108      	bne.n	80071a0 <HAL_DMA_IRQHandler+0xdbc>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f022 021c 	bic.w	r2, r2, #28
 800719c:	601a      	str	r2, [r3, #0]
 800719e:	e007      	b.n	80071b0 <HAL_DMA_IRQHandler+0xdcc>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f022 020e 	bic.w	r2, r2, #14
 80071ae:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071b4:	f003 031f 	and.w	r3, r3, #31
 80071b8:	2201      	movs	r2, #1
 80071ba:	409a      	lsls	r2, r3
 80071bc:	69fb      	ldr	r3, [r7, #28]
 80071be:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2201      	movs	r2, #1
 80071c4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2201      	movs	r2, #1
 80071ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2200      	movs	r2, #0
 80071d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d009      	beq.n	80071f2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	4798      	blx	r3
 80071e6:	e004      	b.n	80071f2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80071e8:	bf00      	nop
 80071ea:	e002      	b.n	80071f2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071ec:	bf00      	nop
 80071ee:	e000      	b.n	80071f2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071f0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80071f2:	3728      	adds	r7, #40	@ 0x28
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}
 80071f8:	40020010 	.word	0x40020010
 80071fc:	40020028 	.word	0x40020028
 8007200:	40020040 	.word	0x40020040
 8007204:	40020058 	.word	0x40020058
 8007208:	40020070 	.word	0x40020070
 800720c:	40020088 	.word	0x40020088
 8007210:	400200a0 	.word	0x400200a0
 8007214:	400200b8 	.word	0x400200b8
 8007218:	40020410 	.word	0x40020410
 800721c:	40020428 	.word	0x40020428
 8007220:	40020440 	.word	0x40020440
 8007224:	40020458 	.word	0x40020458
 8007228:	40020470 	.word	0x40020470
 800722c:	40020488 	.word	0x40020488
 8007230:	400204a0 	.word	0x400204a0
 8007234:	400204b8 	.word	0x400204b8

08007238 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007238:	b480      	push	{r7}
 800723a:	b087      	sub	sp, #28
 800723c:	af00      	add	r7, sp, #0
 800723e:	60f8      	str	r0, [r7, #12]
 8007240:	60b9      	str	r1, [r7, #8]
 8007242:	607a      	str	r2, [r7, #4]
 8007244:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800724a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007250:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a7f      	ldr	r2, [pc, #508]	@ (8007454 <DMA_SetConfig+0x21c>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d072      	beq.n	8007342 <DMA_SetConfig+0x10a>
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a7d      	ldr	r2, [pc, #500]	@ (8007458 <DMA_SetConfig+0x220>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d06d      	beq.n	8007342 <DMA_SetConfig+0x10a>
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a7c      	ldr	r2, [pc, #496]	@ (800745c <DMA_SetConfig+0x224>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d068      	beq.n	8007342 <DMA_SetConfig+0x10a>
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a7a      	ldr	r2, [pc, #488]	@ (8007460 <DMA_SetConfig+0x228>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d063      	beq.n	8007342 <DMA_SetConfig+0x10a>
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a79      	ldr	r2, [pc, #484]	@ (8007464 <DMA_SetConfig+0x22c>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d05e      	beq.n	8007342 <DMA_SetConfig+0x10a>
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a77      	ldr	r2, [pc, #476]	@ (8007468 <DMA_SetConfig+0x230>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d059      	beq.n	8007342 <DMA_SetConfig+0x10a>
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a76      	ldr	r2, [pc, #472]	@ (800746c <DMA_SetConfig+0x234>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d054      	beq.n	8007342 <DMA_SetConfig+0x10a>
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a74      	ldr	r2, [pc, #464]	@ (8007470 <DMA_SetConfig+0x238>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d04f      	beq.n	8007342 <DMA_SetConfig+0x10a>
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a73      	ldr	r2, [pc, #460]	@ (8007474 <DMA_SetConfig+0x23c>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d04a      	beq.n	8007342 <DMA_SetConfig+0x10a>
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a71      	ldr	r2, [pc, #452]	@ (8007478 <DMA_SetConfig+0x240>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d045      	beq.n	8007342 <DMA_SetConfig+0x10a>
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a70      	ldr	r2, [pc, #448]	@ (800747c <DMA_SetConfig+0x244>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d040      	beq.n	8007342 <DMA_SetConfig+0x10a>
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a6e      	ldr	r2, [pc, #440]	@ (8007480 <DMA_SetConfig+0x248>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d03b      	beq.n	8007342 <DMA_SetConfig+0x10a>
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a6d      	ldr	r2, [pc, #436]	@ (8007484 <DMA_SetConfig+0x24c>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d036      	beq.n	8007342 <DMA_SetConfig+0x10a>
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a6b      	ldr	r2, [pc, #428]	@ (8007488 <DMA_SetConfig+0x250>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d031      	beq.n	8007342 <DMA_SetConfig+0x10a>
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a6a      	ldr	r2, [pc, #424]	@ (800748c <DMA_SetConfig+0x254>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d02c      	beq.n	8007342 <DMA_SetConfig+0x10a>
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a68      	ldr	r2, [pc, #416]	@ (8007490 <DMA_SetConfig+0x258>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d027      	beq.n	8007342 <DMA_SetConfig+0x10a>
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a67      	ldr	r2, [pc, #412]	@ (8007494 <DMA_SetConfig+0x25c>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d022      	beq.n	8007342 <DMA_SetConfig+0x10a>
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a65      	ldr	r2, [pc, #404]	@ (8007498 <DMA_SetConfig+0x260>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d01d      	beq.n	8007342 <DMA_SetConfig+0x10a>
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a64      	ldr	r2, [pc, #400]	@ (800749c <DMA_SetConfig+0x264>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d018      	beq.n	8007342 <DMA_SetConfig+0x10a>
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a62      	ldr	r2, [pc, #392]	@ (80074a0 <DMA_SetConfig+0x268>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d013      	beq.n	8007342 <DMA_SetConfig+0x10a>
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a61      	ldr	r2, [pc, #388]	@ (80074a4 <DMA_SetConfig+0x26c>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d00e      	beq.n	8007342 <DMA_SetConfig+0x10a>
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a5f      	ldr	r2, [pc, #380]	@ (80074a8 <DMA_SetConfig+0x270>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d009      	beq.n	8007342 <DMA_SetConfig+0x10a>
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a5e      	ldr	r2, [pc, #376]	@ (80074ac <DMA_SetConfig+0x274>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d004      	beq.n	8007342 <DMA_SetConfig+0x10a>
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a5c      	ldr	r2, [pc, #368]	@ (80074b0 <DMA_SetConfig+0x278>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d101      	bne.n	8007346 <DMA_SetConfig+0x10e>
 8007342:	2301      	movs	r3, #1
 8007344:	e000      	b.n	8007348 <DMA_SetConfig+0x110>
 8007346:	2300      	movs	r3, #0
 8007348:	2b00      	cmp	r3, #0
 800734a:	d00d      	beq.n	8007368 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007350:	68fa      	ldr	r2, [r7, #12]
 8007352:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007354:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800735a:	2b00      	cmp	r3, #0
 800735c:	d004      	beq.n	8007368 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007362:	68fa      	ldr	r2, [r7, #12]
 8007364:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007366:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a39      	ldr	r2, [pc, #228]	@ (8007454 <DMA_SetConfig+0x21c>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d04a      	beq.n	8007408 <DMA_SetConfig+0x1d0>
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a38      	ldr	r2, [pc, #224]	@ (8007458 <DMA_SetConfig+0x220>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d045      	beq.n	8007408 <DMA_SetConfig+0x1d0>
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a36      	ldr	r2, [pc, #216]	@ (800745c <DMA_SetConfig+0x224>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d040      	beq.n	8007408 <DMA_SetConfig+0x1d0>
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a35      	ldr	r2, [pc, #212]	@ (8007460 <DMA_SetConfig+0x228>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d03b      	beq.n	8007408 <DMA_SetConfig+0x1d0>
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a33      	ldr	r2, [pc, #204]	@ (8007464 <DMA_SetConfig+0x22c>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d036      	beq.n	8007408 <DMA_SetConfig+0x1d0>
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a32      	ldr	r2, [pc, #200]	@ (8007468 <DMA_SetConfig+0x230>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d031      	beq.n	8007408 <DMA_SetConfig+0x1d0>
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a30      	ldr	r2, [pc, #192]	@ (800746c <DMA_SetConfig+0x234>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d02c      	beq.n	8007408 <DMA_SetConfig+0x1d0>
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a2f      	ldr	r2, [pc, #188]	@ (8007470 <DMA_SetConfig+0x238>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d027      	beq.n	8007408 <DMA_SetConfig+0x1d0>
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a2d      	ldr	r2, [pc, #180]	@ (8007474 <DMA_SetConfig+0x23c>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d022      	beq.n	8007408 <DMA_SetConfig+0x1d0>
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a2c      	ldr	r2, [pc, #176]	@ (8007478 <DMA_SetConfig+0x240>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d01d      	beq.n	8007408 <DMA_SetConfig+0x1d0>
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a2a      	ldr	r2, [pc, #168]	@ (800747c <DMA_SetConfig+0x244>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d018      	beq.n	8007408 <DMA_SetConfig+0x1d0>
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a29      	ldr	r2, [pc, #164]	@ (8007480 <DMA_SetConfig+0x248>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d013      	beq.n	8007408 <DMA_SetConfig+0x1d0>
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a27      	ldr	r2, [pc, #156]	@ (8007484 <DMA_SetConfig+0x24c>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d00e      	beq.n	8007408 <DMA_SetConfig+0x1d0>
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a26      	ldr	r2, [pc, #152]	@ (8007488 <DMA_SetConfig+0x250>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d009      	beq.n	8007408 <DMA_SetConfig+0x1d0>
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a24      	ldr	r2, [pc, #144]	@ (800748c <DMA_SetConfig+0x254>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d004      	beq.n	8007408 <DMA_SetConfig+0x1d0>
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a23      	ldr	r2, [pc, #140]	@ (8007490 <DMA_SetConfig+0x258>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d101      	bne.n	800740c <DMA_SetConfig+0x1d4>
 8007408:	2301      	movs	r3, #1
 800740a:	e000      	b.n	800740e <DMA_SetConfig+0x1d6>
 800740c:	2300      	movs	r3, #0
 800740e:	2b00      	cmp	r3, #0
 8007410:	d059      	beq.n	80074c6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007416:	f003 031f 	and.w	r3, r3, #31
 800741a:	223f      	movs	r2, #63	@ 0x3f
 800741c:	409a      	lsls	r2, r3
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	681a      	ldr	r2, [r3, #0]
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007430:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	683a      	ldr	r2, [r7, #0]
 8007438:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	2b40      	cmp	r3, #64	@ 0x40
 8007440:	d138      	bne.n	80074b4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	68ba      	ldr	r2, [r7, #8]
 8007450:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007452:	e086      	b.n	8007562 <DMA_SetConfig+0x32a>
 8007454:	40020010 	.word	0x40020010
 8007458:	40020028 	.word	0x40020028
 800745c:	40020040 	.word	0x40020040
 8007460:	40020058 	.word	0x40020058
 8007464:	40020070 	.word	0x40020070
 8007468:	40020088 	.word	0x40020088
 800746c:	400200a0 	.word	0x400200a0
 8007470:	400200b8 	.word	0x400200b8
 8007474:	40020410 	.word	0x40020410
 8007478:	40020428 	.word	0x40020428
 800747c:	40020440 	.word	0x40020440
 8007480:	40020458 	.word	0x40020458
 8007484:	40020470 	.word	0x40020470
 8007488:	40020488 	.word	0x40020488
 800748c:	400204a0 	.word	0x400204a0
 8007490:	400204b8 	.word	0x400204b8
 8007494:	58025408 	.word	0x58025408
 8007498:	5802541c 	.word	0x5802541c
 800749c:	58025430 	.word	0x58025430
 80074a0:	58025444 	.word	0x58025444
 80074a4:	58025458 	.word	0x58025458
 80074a8:	5802546c 	.word	0x5802546c
 80074ac:	58025480 	.word	0x58025480
 80074b0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	68ba      	ldr	r2, [r7, #8]
 80074ba:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	687a      	ldr	r2, [r7, #4]
 80074c2:	60da      	str	r2, [r3, #12]
}
 80074c4:	e04d      	b.n	8007562 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a29      	ldr	r2, [pc, #164]	@ (8007570 <DMA_SetConfig+0x338>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d022      	beq.n	8007516 <DMA_SetConfig+0x2de>
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a27      	ldr	r2, [pc, #156]	@ (8007574 <DMA_SetConfig+0x33c>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d01d      	beq.n	8007516 <DMA_SetConfig+0x2de>
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a26      	ldr	r2, [pc, #152]	@ (8007578 <DMA_SetConfig+0x340>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d018      	beq.n	8007516 <DMA_SetConfig+0x2de>
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a24      	ldr	r2, [pc, #144]	@ (800757c <DMA_SetConfig+0x344>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d013      	beq.n	8007516 <DMA_SetConfig+0x2de>
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a23      	ldr	r2, [pc, #140]	@ (8007580 <DMA_SetConfig+0x348>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d00e      	beq.n	8007516 <DMA_SetConfig+0x2de>
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a21      	ldr	r2, [pc, #132]	@ (8007584 <DMA_SetConfig+0x34c>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d009      	beq.n	8007516 <DMA_SetConfig+0x2de>
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a20      	ldr	r2, [pc, #128]	@ (8007588 <DMA_SetConfig+0x350>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d004      	beq.n	8007516 <DMA_SetConfig+0x2de>
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a1e      	ldr	r2, [pc, #120]	@ (800758c <DMA_SetConfig+0x354>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d101      	bne.n	800751a <DMA_SetConfig+0x2e2>
 8007516:	2301      	movs	r3, #1
 8007518:	e000      	b.n	800751c <DMA_SetConfig+0x2e4>
 800751a:	2300      	movs	r3, #0
 800751c:	2b00      	cmp	r3, #0
 800751e:	d020      	beq.n	8007562 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007524:	f003 031f 	and.w	r3, r3, #31
 8007528:	2201      	movs	r2, #1
 800752a:	409a      	lsls	r2, r3
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	683a      	ldr	r2, [r7, #0]
 8007536:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	2b40      	cmp	r3, #64	@ 0x40
 800753e:	d108      	bne.n	8007552 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	68ba      	ldr	r2, [r7, #8]
 800754e:	60da      	str	r2, [r3, #12]
}
 8007550:	e007      	b.n	8007562 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	68ba      	ldr	r2, [r7, #8]
 8007558:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	60da      	str	r2, [r3, #12]
}
 8007562:	bf00      	nop
 8007564:	371c      	adds	r7, #28
 8007566:	46bd      	mov	sp, r7
 8007568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756c:	4770      	bx	lr
 800756e:	bf00      	nop
 8007570:	58025408 	.word	0x58025408
 8007574:	5802541c 	.word	0x5802541c
 8007578:	58025430 	.word	0x58025430
 800757c:	58025444 	.word	0x58025444
 8007580:	58025458 	.word	0x58025458
 8007584:	5802546c 	.word	0x5802546c
 8007588:	58025480 	.word	0x58025480
 800758c:	58025494 	.word	0x58025494

08007590 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007590:	b480      	push	{r7}
 8007592:	b085      	sub	sp, #20
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a42      	ldr	r2, [pc, #264]	@ (80076a8 <DMA_CalcBaseAndBitshift+0x118>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d04a      	beq.n	8007638 <DMA_CalcBaseAndBitshift+0xa8>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a41      	ldr	r2, [pc, #260]	@ (80076ac <DMA_CalcBaseAndBitshift+0x11c>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d045      	beq.n	8007638 <DMA_CalcBaseAndBitshift+0xa8>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a3f      	ldr	r2, [pc, #252]	@ (80076b0 <DMA_CalcBaseAndBitshift+0x120>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d040      	beq.n	8007638 <DMA_CalcBaseAndBitshift+0xa8>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a3e      	ldr	r2, [pc, #248]	@ (80076b4 <DMA_CalcBaseAndBitshift+0x124>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d03b      	beq.n	8007638 <DMA_CalcBaseAndBitshift+0xa8>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a3c      	ldr	r2, [pc, #240]	@ (80076b8 <DMA_CalcBaseAndBitshift+0x128>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d036      	beq.n	8007638 <DMA_CalcBaseAndBitshift+0xa8>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a3b      	ldr	r2, [pc, #236]	@ (80076bc <DMA_CalcBaseAndBitshift+0x12c>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d031      	beq.n	8007638 <DMA_CalcBaseAndBitshift+0xa8>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a39      	ldr	r2, [pc, #228]	@ (80076c0 <DMA_CalcBaseAndBitshift+0x130>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d02c      	beq.n	8007638 <DMA_CalcBaseAndBitshift+0xa8>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4a38      	ldr	r2, [pc, #224]	@ (80076c4 <DMA_CalcBaseAndBitshift+0x134>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d027      	beq.n	8007638 <DMA_CalcBaseAndBitshift+0xa8>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a36      	ldr	r2, [pc, #216]	@ (80076c8 <DMA_CalcBaseAndBitshift+0x138>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d022      	beq.n	8007638 <DMA_CalcBaseAndBitshift+0xa8>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a35      	ldr	r2, [pc, #212]	@ (80076cc <DMA_CalcBaseAndBitshift+0x13c>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d01d      	beq.n	8007638 <DMA_CalcBaseAndBitshift+0xa8>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a33      	ldr	r2, [pc, #204]	@ (80076d0 <DMA_CalcBaseAndBitshift+0x140>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d018      	beq.n	8007638 <DMA_CalcBaseAndBitshift+0xa8>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a32      	ldr	r2, [pc, #200]	@ (80076d4 <DMA_CalcBaseAndBitshift+0x144>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d013      	beq.n	8007638 <DMA_CalcBaseAndBitshift+0xa8>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a30      	ldr	r2, [pc, #192]	@ (80076d8 <DMA_CalcBaseAndBitshift+0x148>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d00e      	beq.n	8007638 <DMA_CalcBaseAndBitshift+0xa8>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a2f      	ldr	r2, [pc, #188]	@ (80076dc <DMA_CalcBaseAndBitshift+0x14c>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d009      	beq.n	8007638 <DMA_CalcBaseAndBitshift+0xa8>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a2d      	ldr	r2, [pc, #180]	@ (80076e0 <DMA_CalcBaseAndBitshift+0x150>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d004      	beq.n	8007638 <DMA_CalcBaseAndBitshift+0xa8>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a2c      	ldr	r2, [pc, #176]	@ (80076e4 <DMA_CalcBaseAndBitshift+0x154>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d101      	bne.n	800763c <DMA_CalcBaseAndBitshift+0xac>
 8007638:	2301      	movs	r3, #1
 800763a:	e000      	b.n	800763e <DMA_CalcBaseAndBitshift+0xae>
 800763c:	2300      	movs	r3, #0
 800763e:	2b00      	cmp	r3, #0
 8007640:	d024      	beq.n	800768c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	b2db      	uxtb	r3, r3
 8007648:	3b10      	subs	r3, #16
 800764a:	4a27      	ldr	r2, [pc, #156]	@ (80076e8 <DMA_CalcBaseAndBitshift+0x158>)
 800764c:	fba2 2303 	umull	r2, r3, r2, r3
 8007650:	091b      	lsrs	r3, r3, #4
 8007652:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f003 0307 	and.w	r3, r3, #7
 800765a:	4a24      	ldr	r2, [pc, #144]	@ (80076ec <DMA_CalcBaseAndBitshift+0x15c>)
 800765c:	5cd3      	ldrb	r3, [r2, r3]
 800765e:	461a      	mov	r2, r3
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2b03      	cmp	r3, #3
 8007668:	d908      	bls.n	800767c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	461a      	mov	r2, r3
 8007670:	4b1f      	ldr	r3, [pc, #124]	@ (80076f0 <DMA_CalcBaseAndBitshift+0x160>)
 8007672:	4013      	ands	r3, r2
 8007674:	1d1a      	adds	r2, r3, #4
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	659a      	str	r2, [r3, #88]	@ 0x58
 800767a:	e00d      	b.n	8007698 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	461a      	mov	r2, r3
 8007682:	4b1b      	ldr	r3, [pc, #108]	@ (80076f0 <DMA_CalcBaseAndBitshift+0x160>)
 8007684:	4013      	ands	r3, r2
 8007686:	687a      	ldr	r2, [r7, #4]
 8007688:	6593      	str	r3, [r2, #88]	@ 0x58
 800768a:	e005      	b.n	8007698 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800769c:	4618      	mov	r0, r3
 800769e:	3714      	adds	r7, #20
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr
 80076a8:	40020010 	.word	0x40020010
 80076ac:	40020028 	.word	0x40020028
 80076b0:	40020040 	.word	0x40020040
 80076b4:	40020058 	.word	0x40020058
 80076b8:	40020070 	.word	0x40020070
 80076bc:	40020088 	.word	0x40020088
 80076c0:	400200a0 	.word	0x400200a0
 80076c4:	400200b8 	.word	0x400200b8
 80076c8:	40020410 	.word	0x40020410
 80076cc:	40020428 	.word	0x40020428
 80076d0:	40020440 	.word	0x40020440
 80076d4:	40020458 	.word	0x40020458
 80076d8:	40020470 	.word	0x40020470
 80076dc:	40020488 	.word	0x40020488
 80076e0:	400204a0 	.word	0x400204a0
 80076e4:	400204b8 	.word	0x400204b8
 80076e8:	aaaaaaab 	.word	0xaaaaaaab
 80076ec:	08010634 	.word	0x08010634
 80076f0:	fffffc00 	.word	0xfffffc00

080076f4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b085      	sub	sp, #20
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076fc:	2300      	movs	r3, #0
 80076fe:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	699b      	ldr	r3, [r3, #24]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d120      	bne.n	800774a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800770c:	2b03      	cmp	r3, #3
 800770e:	d858      	bhi.n	80077c2 <DMA_CheckFifoParam+0xce>
 8007710:	a201      	add	r2, pc, #4	@ (adr r2, 8007718 <DMA_CheckFifoParam+0x24>)
 8007712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007716:	bf00      	nop
 8007718:	08007729 	.word	0x08007729
 800771c:	0800773b 	.word	0x0800773b
 8007720:	08007729 	.word	0x08007729
 8007724:	080077c3 	.word	0x080077c3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800772c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007730:	2b00      	cmp	r3, #0
 8007732:	d048      	beq.n	80077c6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007734:	2301      	movs	r3, #1
 8007736:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007738:	e045      	b.n	80077c6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800773e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007742:	d142      	bne.n	80077ca <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007744:	2301      	movs	r3, #1
 8007746:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007748:	e03f      	b.n	80077ca <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	699b      	ldr	r3, [r3, #24]
 800774e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007752:	d123      	bne.n	800779c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007758:	2b03      	cmp	r3, #3
 800775a:	d838      	bhi.n	80077ce <DMA_CheckFifoParam+0xda>
 800775c:	a201      	add	r2, pc, #4	@ (adr r2, 8007764 <DMA_CheckFifoParam+0x70>)
 800775e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007762:	bf00      	nop
 8007764:	08007775 	.word	0x08007775
 8007768:	0800777b 	.word	0x0800777b
 800776c:	08007775 	.word	0x08007775
 8007770:	0800778d 	.word	0x0800778d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007774:	2301      	movs	r3, #1
 8007776:	73fb      	strb	r3, [r7, #15]
        break;
 8007778:	e030      	b.n	80077dc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800777e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007782:	2b00      	cmp	r3, #0
 8007784:	d025      	beq.n	80077d2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007786:	2301      	movs	r3, #1
 8007788:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800778a:	e022      	b.n	80077d2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007790:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007794:	d11f      	bne.n	80077d6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007796:	2301      	movs	r3, #1
 8007798:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800779a:	e01c      	b.n	80077d6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077a0:	2b02      	cmp	r3, #2
 80077a2:	d902      	bls.n	80077aa <DMA_CheckFifoParam+0xb6>
 80077a4:	2b03      	cmp	r3, #3
 80077a6:	d003      	beq.n	80077b0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80077a8:	e018      	b.n	80077dc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80077aa:	2301      	movs	r3, #1
 80077ac:	73fb      	strb	r3, [r7, #15]
        break;
 80077ae:	e015      	b.n	80077dc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d00e      	beq.n	80077da <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80077bc:	2301      	movs	r3, #1
 80077be:	73fb      	strb	r3, [r7, #15]
    break;
 80077c0:	e00b      	b.n	80077da <DMA_CheckFifoParam+0xe6>
        break;
 80077c2:	bf00      	nop
 80077c4:	e00a      	b.n	80077dc <DMA_CheckFifoParam+0xe8>
        break;
 80077c6:	bf00      	nop
 80077c8:	e008      	b.n	80077dc <DMA_CheckFifoParam+0xe8>
        break;
 80077ca:	bf00      	nop
 80077cc:	e006      	b.n	80077dc <DMA_CheckFifoParam+0xe8>
        break;
 80077ce:	bf00      	nop
 80077d0:	e004      	b.n	80077dc <DMA_CheckFifoParam+0xe8>
        break;
 80077d2:	bf00      	nop
 80077d4:	e002      	b.n	80077dc <DMA_CheckFifoParam+0xe8>
        break;
 80077d6:	bf00      	nop
 80077d8:	e000      	b.n	80077dc <DMA_CheckFifoParam+0xe8>
    break;
 80077da:	bf00      	nop
    }
  }

  return status;
 80077dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3714      	adds	r7, #20
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr
 80077ea:	bf00      	nop

080077ec <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b085      	sub	sp, #20
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a38      	ldr	r2, [pc, #224]	@ (80078e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d022      	beq.n	800784a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a36      	ldr	r2, [pc, #216]	@ (80078e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d01d      	beq.n	800784a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a35      	ldr	r2, [pc, #212]	@ (80078e8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d018      	beq.n	800784a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a33      	ldr	r2, [pc, #204]	@ (80078ec <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d013      	beq.n	800784a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a32      	ldr	r2, [pc, #200]	@ (80078f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d00e      	beq.n	800784a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a30      	ldr	r2, [pc, #192]	@ (80078f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d009      	beq.n	800784a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a2f      	ldr	r2, [pc, #188]	@ (80078f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d004      	beq.n	800784a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a2d      	ldr	r2, [pc, #180]	@ (80078fc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d101      	bne.n	800784e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800784a:	2301      	movs	r3, #1
 800784c:	e000      	b.n	8007850 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800784e:	2300      	movs	r3, #0
 8007850:	2b00      	cmp	r3, #0
 8007852:	d01a      	beq.n	800788a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	b2db      	uxtb	r3, r3
 800785a:	3b08      	subs	r3, #8
 800785c:	4a28      	ldr	r2, [pc, #160]	@ (8007900 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800785e:	fba2 2303 	umull	r2, r3, r2, r3
 8007862:	091b      	lsrs	r3, r3, #4
 8007864:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007866:	68fa      	ldr	r2, [r7, #12]
 8007868:	4b26      	ldr	r3, [pc, #152]	@ (8007904 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800786a:	4413      	add	r3, r2
 800786c:	009b      	lsls	r3, r3, #2
 800786e:	461a      	mov	r2, r3
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	4a24      	ldr	r2, [pc, #144]	@ (8007908 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007878:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	f003 031f 	and.w	r3, r3, #31
 8007880:	2201      	movs	r2, #1
 8007882:	409a      	lsls	r2, r3
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007888:	e024      	b.n	80078d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	b2db      	uxtb	r3, r3
 8007890:	3b10      	subs	r3, #16
 8007892:	4a1e      	ldr	r2, [pc, #120]	@ (800790c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007894:	fba2 2303 	umull	r2, r3, r2, r3
 8007898:	091b      	lsrs	r3, r3, #4
 800789a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	4a1c      	ldr	r2, [pc, #112]	@ (8007910 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d806      	bhi.n	80078b2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	4a1b      	ldr	r2, [pc, #108]	@ (8007914 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d902      	bls.n	80078b2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	3308      	adds	r3, #8
 80078b0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80078b2:	68fa      	ldr	r2, [r7, #12]
 80078b4:	4b18      	ldr	r3, [pc, #96]	@ (8007918 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80078b6:	4413      	add	r3, r2
 80078b8:	009b      	lsls	r3, r3, #2
 80078ba:	461a      	mov	r2, r3
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	4a16      	ldr	r2, [pc, #88]	@ (800791c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80078c4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	f003 031f 	and.w	r3, r3, #31
 80078cc:	2201      	movs	r2, #1
 80078ce:	409a      	lsls	r2, r3
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80078d4:	bf00      	nop
 80078d6:	3714      	adds	r7, #20
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr
 80078e0:	58025408 	.word	0x58025408
 80078e4:	5802541c 	.word	0x5802541c
 80078e8:	58025430 	.word	0x58025430
 80078ec:	58025444 	.word	0x58025444
 80078f0:	58025458 	.word	0x58025458
 80078f4:	5802546c 	.word	0x5802546c
 80078f8:	58025480 	.word	0x58025480
 80078fc:	58025494 	.word	0x58025494
 8007900:	cccccccd 	.word	0xcccccccd
 8007904:	16009600 	.word	0x16009600
 8007908:	58025880 	.word	0x58025880
 800790c:	aaaaaaab 	.word	0xaaaaaaab
 8007910:	400204b8 	.word	0x400204b8
 8007914:	4002040f 	.word	0x4002040f
 8007918:	10008200 	.word	0x10008200
 800791c:	40020880 	.word	0x40020880

08007920 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007920:	b480      	push	{r7}
 8007922:	b085      	sub	sp, #20
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	b2db      	uxtb	r3, r3
 800792e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d04a      	beq.n	80079cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2b08      	cmp	r3, #8
 800793a:	d847      	bhi.n	80079cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a25      	ldr	r2, [pc, #148]	@ (80079d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d022      	beq.n	800798c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a24      	ldr	r2, [pc, #144]	@ (80079dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d01d      	beq.n	800798c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a22      	ldr	r2, [pc, #136]	@ (80079e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d018      	beq.n	800798c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a21      	ldr	r2, [pc, #132]	@ (80079e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d013      	beq.n	800798c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a1f      	ldr	r2, [pc, #124]	@ (80079e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d00e      	beq.n	800798c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a1e      	ldr	r2, [pc, #120]	@ (80079ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d009      	beq.n	800798c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a1c      	ldr	r2, [pc, #112]	@ (80079f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d004      	beq.n	800798c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a1b      	ldr	r2, [pc, #108]	@ (80079f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d101      	bne.n	8007990 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800798c:	2301      	movs	r3, #1
 800798e:	e000      	b.n	8007992 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007990:	2300      	movs	r3, #0
 8007992:	2b00      	cmp	r3, #0
 8007994:	d00a      	beq.n	80079ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007996:	68fa      	ldr	r2, [r7, #12]
 8007998:	4b17      	ldr	r3, [pc, #92]	@ (80079f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800799a:	4413      	add	r3, r2
 800799c:	009b      	lsls	r3, r3, #2
 800799e:	461a      	mov	r2, r3
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	4a15      	ldr	r2, [pc, #84]	@ (80079fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80079a8:	671a      	str	r2, [r3, #112]	@ 0x70
 80079aa:	e009      	b.n	80079c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80079ac:	68fa      	ldr	r2, [r7, #12]
 80079ae:	4b14      	ldr	r3, [pc, #80]	@ (8007a00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80079b0:	4413      	add	r3, r2
 80079b2:	009b      	lsls	r3, r3, #2
 80079b4:	461a      	mov	r2, r3
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	4a11      	ldr	r2, [pc, #68]	@ (8007a04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80079be:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	3b01      	subs	r3, #1
 80079c4:	2201      	movs	r2, #1
 80079c6:	409a      	lsls	r2, r3
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80079cc:	bf00      	nop
 80079ce:	3714      	adds	r7, #20
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr
 80079d8:	58025408 	.word	0x58025408
 80079dc:	5802541c 	.word	0x5802541c
 80079e0:	58025430 	.word	0x58025430
 80079e4:	58025444 	.word	0x58025444
 80079e8:	58025458 	.word	0x58025458
 80079ec:	5802546c 	.word	0x5802546c
 80079f0:	58025480 	.word	0x58025480
 80079f4:	58025494 	.word	0x58025494
 80079f8:	1600963f 	.word	0x1600963f
 80079fc:	58025940 	.word	0x58025940
 8007a00:	1000823f 	.word	0x1000823f
 8007a04:	40020940 	.word	0x40020940

08007a08 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b087      	sub	sp, #28
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	460b      	mov	r3, r1
 8007a12:	607a      	str	r2, [r7, #4]
 8007a14:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8007a16:	2300      	movs	r3, #0
 8007a18:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d101      	bne.n	8007a24 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8007a20:	2301      	movs	r3, #1
 8007a22:	e00a      	b.n	8007a3a <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8007a24:	7afb      	ldrb	r3, [r7, #11]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d103      	bne.n	8007a32 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	687a      	ldr	r2, [r7, #4]
 8007a2e:	605a      	str	r2, [r3, #4]
      break;
 8007a30:	e002      	b.n	8007a38 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8007a32:	2301      	movs	r3, #1
 8007a34:	75fb      	strb	r3, [r7, #23]
      break;
 8007a36:	bf00      	nop
  }

  return status;
 8007a38:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	371c      	adds	r7, #28
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a44:	4770      	bx	lr

08007a46 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8007a46:	b480      	push	{r7}
 8007a48:	b083      	sub	sp, #12
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	6078      	str	r0, [r7, #4]
 8007a4e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d101      	bne.n	8007a5a <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8007a56:	2301      	movs	r3, #1
 8007a58:	e003      	b.n	8007a62 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	683a      	ldr	r2, [r7, #0]
 8007a5e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8007a60:	2300      	movs	r3, #0
  }
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	370c      	adds	r7, #12
 8007a66:	46bd      	mov	sp, r7
 8007a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6c:	4770      	bx	lr
	...

08007a70 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b086      	sub	sp, #24
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	0c1b      	lsrs	r3, r3, #16
 8007a7e:	f003 0303 	and.w	r3, r3, #3
 8007a82:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f003 031f 	and.w	r3, r3, #31
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a92:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8007a94:	f7fd f96a 	bl	8004d6c <HAL_GetCurrentCPUID>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	2b03      	cmp	r3, #3
 8007a9c:	d105      	bne.n	8007aaa <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	011a      	lsls	r2, r3, #4
 8007aa2:	4b0f      	ldr	r3, [pc, #60]	@ (8007ae0 <HAL_EXTI_IRQHandler+0x70>)
 8007aa4:	4413      	add	r3, r2
 8007aa6:	617b      	str	r3, [r7, #20]
 8007aa8:	e004      	b.n	8007ab4 <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	011a      	lsls	r2, r3, #4
 8007aae:	4b0d      	ldr	r3, [pc, #52]	@ (8007ae4 <HAL_EXTI_IRQHandler+0x74>)
 8007ab0:	4413      	add	r3, r2
 8007ab2:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	68fa      	ldr	r2, [r7, #12]
 8007aba:	4013      	ands	r3, r2
 8007abc:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d009      	beq.n	8007ad8 <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	68fa      	ldr	r2, [r7, #12]
 8007ac8:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d002      	beq.n	8007ad8 <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	4798      	blx	r3
    }
  }
}
 8007ad8:	bf00      	nop
 8007ada:	3718      	adds	r7, #24
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}
 8007ae0:	58000088 	.word	0x58000088
 8007ae4:	580000c8 	.word	0x580000c8

08007ae8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b089      	sub	sp, #36	@ 0x24
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007af2:	2300      	movs	r3, #0
 8007af4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007af6:	4b89      	ldr	r3, [pc, #548]	@ (8007d1c <HAL_GPIO_Init+0x234>)
 8007af8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007afa:	e194      	b.n	8007e26 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	681a      	ldr	r2, [r3, #0]
 8007b00:	2101      	movs	r1, #1
 8007b02:	69fb      	ldr	r3, [r7, #28]
 8007b04:	fa01 f303 	lsl.w	r3, r1, r3
 8007b08:	4013      	ands	r3, r2
 8007b0a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	f000 8186 	beq.w	8007e20 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	f003 0303 	and.w	r3, r3, #3
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d005      	beq.n	8007b2c <HAL_GPIO_Init+0x44>
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	f003 0303 	and.w	r3, r3, #3
 8007b28:	2b02      	cmp	r3, #2
 8007b2a:	d130      	bne.n	8007b8e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007b32:	69fb      	ldr	r3, [r7, #28]
 8007b34:	005b      	lsls	r3, r3, #1
 8007b36:	2203      	movs	r2, #3
 8007b38:	fa02 f303 	lsl.w	r3, r2, r3
 8007b3c:	43db      	mvns	r3, r3
 8007b3e:	69ba      	ldr	r2, [r7, #24]
 8007b40:	4013      	ands	r3, r2
 8007b42:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	68da      	ldr	r2, [r3, #12]
 8007b48:	69fb      	ldr	r3, [r7, #28]
 8007b4a:	005b      	lsls	r3, r3, #1
 8007b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8007b50:	69ba      	ldr	r2, [r7, #24]
 8007b52:	4313      	orrs	r3, r2
 8007b54:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	69ba      	ldr	r2, [r7, #24]
 8007b5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	685b      	ldr	r3, [r3, #4]
 8007b60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007b62:	2201      	movs	r2, #1
 8007b64:	69fb      	ldr	r3, [r7, #28]
 8007b66:	fa02 f303 	lsl.w	r3, r2, r3
 8007b6a:	43db      	mvns	r3, r3
 8007b6c:	69ba      	ldr	r2, [r7, #24]
 8007b6e:	4013      	ands	r3, r2
 8007b70:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	091b      	lsrs	r3, r3, #4
 8007b78:	f003 0201 	and.w	r2, r3, #1
 8007b7c:	69fb      	ldr	r3, [r7, #28]
 8007b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b82:	69ba      	ldr	r2, [r7, #24]
 8007b84:	4313      	orrs	r3, r2
 8007b86:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	69ba      	ldr	r2, [r7, #24]
 8007b8c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	f003 0303 	and.w	r3, r3, #3
 8007b96:	2b03      	cmp	r3, #3
 8007b98:	d017      	beq.n	8007bca <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	68db      	ldr	r3, [r3, #12]
 8007b9e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007ba0:	69fb      	ldr	r3, [r7, #28]
 8007ba2:	005b      	lsls	r3, r3, #1
 8007ba4:	2203      	movs	r2, #3
 8007ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8007baa:	43db      	mvns	r3, r3
 8007bac:	69ba      	ldr	r2, [r7, #24]
 8007bae:	4013      	ands	r3, r2
 8007bb0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	689a      	ldr	r2, [r3, #8]
 8007bb6:	69fb      	ldr	r3, [r7, #28]
 8007bb8:	005b      	lsls	r3, r3, #1
 8007bba:	fa02 f303 	lsl.w	r3, r2, r3
 8007bbe:	69ba      	ldr	r2, [r7, #24]
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	69ba      	ldr	r2, [r7, #24]
 8007bc8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	f003 0303 	and.w	r3, r3, #3
 8007bd2:	2b02      	cmp	r3, #2
 8007bd4:	d123      	bne.n	8007c1e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007bd6:	69fb      	ldr	r3, [r7, #28]
 8007bd8:	08da      	lsrs	r2, r3, #3
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	3208      	adds	r2, #8
 8007bde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007be4:	69fb      	ldr	r3, [r7, #28]
 8007be6:	f003 0307 	and.w	r3, r3, #7
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	220f      	movs	r2, #15
 8007bee:	fa02 f303 	lsl.w	r3, r2, r3
 8007bf2:	43db      	mvns	r3, r3
 8007bf4:	69ba      	ldr	r2, [r7, #24]
 8007bf6:	4013      	ands	r3, r2
 8007bf8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	691a      	ldr	r2, [r3, #16]
 8007bfe:	69fb      	ldr	r3, [r7, #28]
 8007c00:	f003 0307 	and.w	r3, r3, #7
 8007c04:	009b      	lsls	r3, r3, #2
 8007c06:	fa02 f303 	lsl.w	r3, r2, r3
 8007c0a:	69ba      	ldr	r2, [r7, #24]
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007c10:	69fb      	ldr	r3, [r7, #28]
 8007c12:	08da      	lsrs	r2, r3, #3
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	3208      	adds	r2, #8
 8007c18:	69b9      	ldr	r1, [r7, #24]
 8007c1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007c24:	69fb      	ldr	r3, [r7, #28]
 8007c26:	005b      	lsls	r3, r3, #1
 8007c28:	2203      	movs	r2, #3
 8007c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c2e:	43db      	mvns	r3, r3
 8007c30:	69ba      	ldr	r2, [r7, #24]
 8007c32:	4013      	ands	r3, r2
 8007c34:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	f003 0203 	and.w	r2, r3, #3
 8007c3e:	69fb      	ldr	r3, [r7, #28]
 8007c40:	005b      	lsls	r3, r3, #1
 8007c42:	fa02 f303 	lsl.w	r3, r2, r3
 8007c46:	69ba      	ldr	r2, [r7, #24]
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	69ba      	ldr	r2, [r7, #24]
 8007c50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	f000 80e0 	beq.w	8007e20 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007c60:	4b2f      	ldr	r3, [pc, #188]	@ (8007d20 <HAL_GPIO_Init+0x238>)
 8007c62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007c66:	4a2e      	ldr	r2, [pc, #184]	@ (8007d20 <HAL_GPIO_Init+0x238>)
 8007c68:	f043 0302 	orr.w	r3, r3, #2
 8007c6c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8007c70:	4b2b      	ldr	r3, [pc, #172]	@ (8007d20 <HAL_GPIO_Init+0x238>)
 8007c72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007c76:	f003 0302 	and.w	r3, r3, #2
 8007c7a:	60fb      	str	r3, [r7, #12]
 8007c7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007c7e:	4a29      	ldr	r2, [pc, #164]	@ (8007d24 <HAL_GPIO_Init+0x23c>)
 8007c80:	69fb      	ldr	r3, [r7, #28]
 8007c82:	089b      	lsrs	r3, r3, #2
 8007c84:	3302      	adds	r3, #2
 8007c86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007c8c:	69fb      	ldr	r3, [r7, #28]
 8007c8e:	f003 0303 	and.w	r3, r3, #3
 8007c92:	009b      	lsls	r3, r3, #2
 8007c94:	220f      	movs	r2, #15
 8007c96:	fa02 f303 	lsl.w	r3, r2, r3
 8007c9a:	43db      	mvns	r3, r3
 8007c9c:	69ba      	ldr	r2, [r7, #24]
 8007c9e:	4013      	ands	r3, r2
 8007ca0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	4a20      	ldr	r2, [pc, #128]	@ (8007d28 <HAL_GPIO_Init+0x240>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d052      	beq.n	8007d50 <HAL_GPIO_Init+0x268>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	4a1f      	ldr	r2, [pc, #124]	@ (8007d2c <HAL_GPIO_Init+0x244>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d031      	beq.n	8007d16 <HAL_GPIO_Init+0x22e>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	4a1e      	ldr	r2, [pc, #120]	@ (8007d30 <HAL_GPIO_Init+0x248>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d02b      	beq.n	8007d12 <HAL_GPIO_Init+0x22a>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	4a1d      	ldr	r2, [pc, #116]	@ (8007d34 <HAL_GPIO_Init+0x24c>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d025      	beq.n	8007d0e <HAL_GPIO_Init+0x226>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	4a1c      	ldr	r2, [pc, #112]	@ (8007d38 <HAL_GPIO_Init+0x250>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d01f      	beq.n	8007d0a <HAL_GPIO_Init+0x222>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	4a1b      	ldr	r2, [pc, #108]	@ (8007d3c <HAL_GPIO_Init+0x254>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d019      	beq.n	8007d06 <HAL_GPIO_Init+0x21e>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	4a1a      	ldr	r2, [pc, #104]	@ (8007d40 <HAL_GPIO_Init+0x258>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d013      	beq.n	8007d02 <HAL_GPIO_Init+0x21a>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	4a19      	ldr	r2, [pc, #100]	@ (8007d44 <HAL_GPIO_Init+0x25c>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d00d      	beq.n	8007cfe <HAL_GPIO_Init+0x216>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	4a18      	ldr	r2, [pc, #96]	@ (8007d48 <HAL_GPIO_Init+0x260>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d007      	beq.n	8007cfa <HAL_GPIO_Init+0x212>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	4a17      	ldr	r2, [pc, #92]	@ (8007d4c <HAL_GPIO_Init+0x264>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d101      	bne.n	8007cf6 <HAL_GPIO_Init+0x20e>
 8007cf2:	2309      	movs	r3, #9
 8007cf4:	e02d      	b.n	8007d52 <HAL_GPIO_Init+0x26a>
 8007cf6:	230a      	movs	r3, #10
 8007cf8:	e02b      	b.n	8007d52 <HAL_GPIO_Init+0x26a>
 8007cfa:	2308      	movs	r3, #8
 8007cfc:	e029      	b.n	8007d52 <HAL_GPIO_Init+0x26a>
 8007cfe:	2307      	movs	r3, #7
 8007d00:	e027      	b.n	8007d52 <HAL_GPIO_Init+0x26a>
 8007d02:	2306      	movs	r3, #6
 8007d04:	e025      	b.n	8007d52 <HAL_GPIO_Init+0x26a>
 8007d06:	2305      	movs	r3, #5
 8007d08:	e023      	b.n	8007d52 <HAL_GPIO_Init+0x26a>
 8007d0a:	2304      	movs	r3, #4
 8007d0c:	e021      	b.n	8007d52 <HAL_GPIO_Init+0x26a>
 8007d0e:	2303      	movs	r3, #3
 8007d10:	e01f      	b.n	8007d52 <HAL_GPIO_Init+0x26a>
 8007d12:	2302      	movs	r3, #2
 8007d14:	e01d      	b.n	8007d52 <HAL_GPIO_Init+0x26a>
 8007d16:	2301      	movs	r3, #1
 8007d18:	e01b      	b.n	8007d52 <HAL_GPIO_Init+0x26a>
 8007d1a:	bf00      	nop
 8007d1c:	58000080 	.word	0x58000080
 8007d20:	58024400 	.word	0x58024400
 8007d24:	58000400 	.word	0x58000400
 8007d28:	58020000 	.word	0x58020000
 8007d2c:	58020400 	.word	0x58020400
 8007d30:	58020800 	.word	0x58020800
 8007d34:	58020c00 	.word	0x58020c00
 8007d38:	58021000 	.word	0x58021000
 8007d3c:	58021400 	.word	0x58021400
 8007d40:	58021800 	.word	0x58021800
 8007d44:	58021c00 	.word	0x58021c00
 8007d48:	58022000 	.word	0x58022000
 8007d4c:	58022400 	.word	0x58022400
 8007d50:	2300      	movs	r3, #0
 8007d52:	69fa      	ldr	r2, [r7, #28]
 8007d54:	f002 0203 	and.w	r2, r2, #3
 8007d58:	0092      	lsls	r2, r2, #2
 8007d5a:	4093      	lsls	r3, r2
 8007d5c:	69ba      	ldr	r2, [r7, #24]
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007d62:	4938      	ldr	r1, [pc, #224]	@ (8007e44 <HAL_GPIO_Init+0x35c>)
 8007d64:	69fb      	ldr	r3, [r7, #28]
 8007d66:	089b      	lsrs	r3, r3, #2
 8007d68:	3302      	adds	r3, #2
 8007d6a:	69ba      	ldr	r2, [r7, #24]
 8007d6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007d70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	43db      	mvns	r3, r3
 8007d7c:	69ba      	ldr	r2, [r7, #24]
 8007d7e:	4013      	ands	r3, r2
 8007d80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d003      	beq.n	8007d96 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007d8e:	69ba      	ldr	r2, [r7, #24]
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	4313      	orrs	r3, r2
 8007d94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007d96:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007d9a:	69bb      	ldr	r3, [r7, #24]
 8007d9c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007d9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	43db      	mvns	r3, r3
 8007daa:	69ba      	ldr	r2, [r7, #24]
 8007dac:	4013      	ands	r3, r2
 8007dae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d003      	beq.n	8007dc4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007dbc:	69ba      	ldr	r2, [r7, #24]
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007dc4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007dc8:	69bb      	ldr	r3, [r7, #24]
 8007dca:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	43db      	mvns	r3, r3
 8007dd6:	69ba      	ldr	r2, [r7, #24]
 8007dd8:	4013      	ands	r3, r2
 8007dda:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d003      	beq.n	8007df0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007de8:	69ba      	ldr	r2, [r7, #24]
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	4313      	orrs	r3, r2
 8007dee:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	69ba      	ldr	r2, [r7, #24]
 8007df4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007df6:	697b      	ldr	r3, [r7, #20]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	43db      	mvns	r3, r3
 8007e00:	69ba      	ldr	r2, [r7, #24]
 8007e02:	4013      	ands	r3, r2
 8007e04:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d003      	beq.n	8007e1a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007e12:	69ba      	ldr	r2, [r7, #24]
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	4313      	orrs	r3, r2
 8007e18:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	69ba      	ldr	r2, [r7, #24]
 8007e1e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007e20:	69fb      	ldr	r3, [r7, #28]
 8007e22:	3301      	adds	r3, #1
 8007e24:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	681a      	ldr	r2, [r3, #0]
 8007e2a:	69fb      	ldr	r3, [r7, #28]
 8007e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	f47f ae63 	bne.w	8007afc <HAL_GPIO_Init+0x14>
  }
}
 8007e36:	bf00      	nop
 8007e38:	bf00      	nop
 8007e3a:	3724      	adds	r7, #36	@ 0x24
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e42:	4770      	bx	lr
 8007e44:	58000400 	.word	0x58000400

08007e48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b083      	sub	sp, #12
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	460b      	mov	r3, r1
 8007e52:	807b      	strh	r3, [r7, #2]
 8007e54:	4613      	mov	r3, r2
 8007e56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007e58:	787b      	ldrb	r3, [r7, #1]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d003      	beq.n	8007e66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007e5e:	887a      	ldrh	r2, [r7, #2]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007e64:	e003      	b.n	8007e6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007e66:	887b      	ldrh	r3, [r7, #2]
 8007e68:	041a      	lsls	r2, r3, #16
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	619a      	str	r2, [r3, #24]
}
 8007e6e:	bf00      	nop
 8007e70:	370c      	adds	r7, #12
 8007e72:	46bd      	mov	sp, r7
 8007e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e78:	4770      	bx	lr

08007e7a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007e7a:	b480      	push	{r7}
 8007e7c:	b085      	sub	sp, #20
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	6078      	str	r0, [r7, #4]
 8007e82:	460b      	mov	r3, r1
 8007e84:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	695b      	ldr	r3, [r3, #20]
 8007e8a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007e8c:	887a      	ldrh	r2, [r7, #2]
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	4013      	ands	r3, r2
 8007e92:	041a      	lsls	r2, r3, #16
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	43d9      	mvns	r1, r3
 8007e98:	887b      	ldrh	r3, [r7, #2]
 8007e9a:	400b      	ands	r3, r1
 8007e9c:	431a      	orrs	r2, r3
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	619a      	str	r2, [r3, #24]
}
 8007ea2:	bf00      	nop
 8007ea4:	3714      	adds	r7, #20
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eac:	4770      	bx	lr
	...

08007eb0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b083      	sub	sp, #12
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8007eb8:	4a08      	ldr	r2, [pc, #32]	@ (8007edc <HAL_HSEM_FastTake+0x2c>)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	3320      	adds	r3, #32
 8007ebe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ec2:	4a07      	ldr	r2, [pc, #28]	@ (8007ee0 <HAL_HSEM_FastTake+0x30>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d101      	bne.n	8007ecc <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	e000      	b.n	8007ece <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8007ecc:	2301      	movs	r3, #1
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	370c      	adds	r7, #12
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed8:	4770      	bx	lr
 8007eda:	bf00      	nop
 8007edc:	58026400 	.word	0x58026400
 8007ee0:	80000300 	.word	0x80000300

08007ee4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b083      	sub	sp, #12
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8007eee:	4906      	ldr	r1, [pc, #24]	@ (8007f08 <HAL_HSEM_Release+0x24>)
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8007efc:	bf00      	nop
 8007efe:	370c      	adds	r7, #12
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr
 8007f08:	58026400 	.word	0x58026400

08007f0c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b084      	sub	sp, #16
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8007f14:	4b29      	ldr	r3, [pc, #164]	@ (8007fbc <HAL_PWREx_ConfigSupply+0xb0>)
 8007f16:	68db      	ldr	r3, [r3, #12]
 8007f18:	f003 0307 	and.w	r3, r3, #7
 8007f1c:	2b06      	cmp	r3, #6
 8007f1e:	d00a      	beq.n	8007f36 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007f20:	4b26      	ldr	r3, [pc, #152]	@ (8007fbc <HAL_PWREx_ConfigSupply+0xb0>)
 8007f22:	68db      	ldr	r3, [r3, #12]
 8007f24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007f28:	687a      	ldr	r2, [r7, #4]
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	d001      	beq.n	8007f32 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	e040      	b.n	8007fb4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007f32:	2300      	movs	r3, #0
 8007f34:	e03e      	b.n	8007fb4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007f36:	4b21      	ldr	r3, [pc, #132]	@ (8007fbc <HAL_PWREx_ConfigSupply+0xb0>)
 8007f38:	68db      	ldr	r3, [r3, #12]
 8007f3a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8007f3e:	491f      	ldr	r1, [pc, #124]	@ (8007fbc <HAL_PWREx_ConfigSupply+0xb0>)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	4313      	orrs	r3, r2
 8007f44:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007f46:	f7fb f87f 	bl	8003048 <HAL_GetTick>
 8007f4a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007f4c:	e009      	b.n	8007f62 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007f4e:	f7fb f87b 	bl	8003048 <HAL_GetTick>
 8007f52:	4602      	mov	r2, r0
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	1ad3      	subs	r3, r2, r3
 8007f58:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007f5c:	d901      	bls.n	8007f62 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007f5e:	2301      	movs	r3, #1
 8007f60:	e028      	b.n	8007fb4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007f62:	4b16      	ldr	r3, [pc, #88]	@ (8007fbc <HAL_PWREx_ConfigSupply+0xb0>)
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007f6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f6e:	d1ee      	bne.n	8007f4e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2b1e      	cmp	r3, #30
 8007f74:	d008      	beq.n	8007f88 <HAL_PWREx_ConfigSupply+0x7c>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2b2e      	cmp	r3, #46	@ 0x2e
 8007f7a:	d005      	beq.n	8007f88 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2b1d      	cmp	r3, #29
 8007f80:	d002      	beq.n	8007f88 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2b2d      	cmp	r3, #45	@ 0x2d
 8007f86:	d114      	bne.n	8007fb2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8007f88:	f7fb f85e 	bl	8003048 <HAL_GetTick>
 8007f8c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8007f8e:	e009      	b.n	8007fa4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007f90:	f7fb f85a 	bl	8003048 <HAL_GetTick>
 8007f94:	4602      	mov	r2, r0
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	1ad3      	subs	r3, r2, r3
 8007f9a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007f9e:	d901      	bls.n	8007fa4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	e007      	b.n	8007fb4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8007fa4:	4b05      	ldr	r3, [pc, #20]	@ (8007fbc <HAL_PWREx_ConfigSupply+0xb0>)
 8007fa6:	68db      	ldr	r3, [r3, #12]
 8007fa8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007fac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007fb0:	d1ee      	bne.n	8007f90 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007fb2:	2300      	movs	r3, #0
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3710      	adds	r7, #16
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}
 8007fbc:	58024800 	.word	0x58024800

08007fc0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b08c      	sub	sp, #48	@ 0x30
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d102      	bne.n	8007fd4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007fce:	2301      	movs	r3, #1
 8007fd0:	f000 bc48 	b.w	8008864 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f003 0301 	and.w	r3, r3, #1
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	f000 8088 	beq.w	80080f2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007fe2:	4b99      	ldr	r3, [pc, #612]	@ (8008248 <HAL_RCC_OscConfig+0x288>)
 8007fe4:	691b      	ldr	r3, [r3, #16]
 8007fe6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007fea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007fec:	4b96      	ldr	r3, [pc, #600]	@ (8008248 <HAL_RCC_OscConfig+0x288>)
 8007fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007ff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ff4:	2b10      	cmp	r3, #16
 8007ff6:	d007      	beq.n	8008008 <HAL_RCC_OscConfig+0x48>
 8007ff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ffa:	2b18      	cmp	r3, #24
 8007ffc:	d111      	bne.n	8008022 <HAL_RCC_OscConfig+0x62>
 8007ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008000:	f003 0303 	and.w	r3, r3, #3
 8008004:	2b02      	cmp	r3, #2
 8008006:	d10c      	bne.n	8008022 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008008:	4b8f      	ldr	r3, [pc, #572]	@ (8008248 <HAL_RCC_OscConfig+0x288>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008010:	2b00      	cmp	r3, #0
 8008012:	d06d      	beq.n	80080f0 <HAL_RCC_OscConfig+0x130>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d169      	bne.n	80080f0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800801c:	2301      	movs	r3, #1
 800801e:	f000 bc21 	b.w	8008864 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800802a:	d106      	bne.n	800803a <HAL_RCC_OscConfig+0x7a>
 800802c:	4b86      	ldr	r3, [pc, #536]	@ (8008248 <HAL_RCC_OscConfig+0x288>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4a85      	ldr	r2, [pc, #532]	@ (8008248 <HAL_RCC_OscConfig+0x288>)
 8008032:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008036:	6013      	str	r3, [r2, #0]
 8008038:	e02e      	b.n	8008098 <HAL_RCC_OscConfig+0xd8>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d10c      	bne.n	800805c <HAL_RCC_OscConfig+0x9c>
 8008042:	4b81      	ldr	r3, [pc, #516]	@ (8008248 <HAL_RCC_OscConfig+0x288>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a80      	ldr	r2, [pc, #512]	@ (8008248 <HAL_RCC_OscConfig+0x288>)
 8008048:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800804c:	6013      	str	r3, [r2, #0]
 800804e:	4b7e      	ldr	r3, [pc, #504]	@ (8008248 <HAL_RCC_OscConfig+0x288>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a7d      	ldr	r2, [pc, #500]	@ (8008248 <HAL_RCC_OscConfig+0x288>)
 8008054:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008058:	6013      	str	r3, [r2, #0]
 800805a:	e01d      	b.n	8008098 <HAL_RCC_OscConfig+0xd8>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008064:	d10c      	bne.n	8008080 <HAL_RCC_OscConfig+0xc0>
 8008066:	4b78      	ldr	r3, [pc, #480]	@ (8008248 <HAL_RCC_OscConfig+0x288>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a77      	ldr	r2, [pc, #476]	@ (8008248 <HAL_RCC_OscConfig+0x288>)
 800806c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008070:	6013      	str	r3, [r2, #0]
 8008072:	4b75      	ldr	r3, [pc, #468]	@ (8008248 <HAL_RCC_OscConfig+0x288>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4a74      	ldr	r2, [pc, #464]	@ (8008248 <HAL_RCC_OscConfig+0x288>)
 8008078:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800807c:	6013      	str	r3, [r2, #0]
 800807e:	e00b      	b.n	8008098 <HAL_RCC_OscConfig+0xd8>
 8008080:	4b71      	ldr	r3, [pc, #452]	@ (8008248 <HAL_RCC_OscConfig+0x288>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a70      	ldr	r2, [pc, #448]	@ (8008248 <HAL_RCC_OscConfig+0x288>)
 8008086:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800808a:	6013      	str	r3, [r2, #0]
 800808c:	4b6e      	ldr	r3, [pc, #440]	@ (8008248 <HAL_RCC_OscConfig+0x288>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a6d      	ldr	r2, [pc, #436]	@ (8008248 <HAL_RCC_OscConfig+0x288>)
 8008092:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008096:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d013      	beq.n	80080c8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080a0:	f7fa ffd2 	bl	8003048 <HAL_GetTick>
 80080a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80080a6:	e008      	b.n	80080ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80080a8:	f7fa ffce 	bl	8003048 <HAL_GetTick>
 80080ac:	4602      	mov	r2, r0
 80080ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080b0:	1ad3      	subs	r3, r2, r3
 80080b2:	2b64      	cmp	r3, #100	@ 0x64
 80080b4:	d901      	bls.n	80080ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80080b6:	2303      	movs	r3, #3
 80080b8:	e3d4      	b.n	8008864 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80080ba:	4b63      	ldr	r3, [pc, #396]	@ (8008248 <HAL_RCC_OscConfig+0x288>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d0f0      	beq.n	80080a8 <HAL_RCC_OscConfig+0xe8>
 80080c6:	e014      	b.n	80080f2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080c8:	f7fa ffbe 	bl	8003048 <HAL_GetTick>
 80080cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80080ce:	e008      	b.n	80080e2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80080d0:	f7fa ffba 	bl	8003048 <HAL_GetTick>
 80080d4:	4602      	mov	r2, r0
 80080d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080d8:	1ad3      	subs	r3, r2, r3
 80080da:	2b64      	cmp	r3, #100	@ 0x64
 80080dc:	d901      	bls.n	80080e2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80080de:	2303      	movs	r3, #3
 80080e0:	e3c0      	b.n	8008864 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80080e2:	4b59      	ldr	r3, [pc, #356]	@ (8008248 <HAL_RCC_OscConfig+0x288>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d1f0      	bne.n	80080d0 <HAL_RCC_OscConfig+0x110>
 80080ee:	e000      	b.n	80080f2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80080f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f003 0302 	and.w	r3, r3, #2
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	f000 80ca 	beq.w	8008294 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008100:	4b51      	ldr	r3, [pc, #324]	@ (8008248 <HAL_RCC_OscConfig+0x288>)
 8008102:	691b      	ldr	r3, [r3, #16]
 8008104:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008108:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800810a:	4b4f      	ldr	r3, [pc, #316]	@ (8008248 <HAL_RCC_OscConfig+0x288>)
 800810c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800810e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008110:	6a3b      	ldr	r3, [r7, #32]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d007      	beq.n	8008126 <HAL_RCC_OscConfig+0x166>
 8008116:	6a3b      	ldr	r3, [r7, #32]
 8008118:	2b18      	cmp	r3, #24
 800811a:	d156      	bne.n	80081ca <HAL_RCC_OscConfig+0x20a>
 800811c:	69fb      	ldr	r3, [r7, #28]
 800811e:	f003 0303 	and.w	r3, r3, #3
 8008122:	2b00      	cmp	r3, #0
 8008124:	d151      	bne.n	80081ca <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008126:	4b48      	ldr	r3, [pc, #288]	@ (8008248 <HAL_RCC_OscConfig+0x288>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f003 0304 	and.w	r3, r3, #4
 800812e:	2b00      	cmp	r3, #0
 8008130:	d005      	beq.n	800813e <HAL_RCC_OscConfig+0x17e>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	68db      	ldr	r3, [r3, #12]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d101      	bne.n	800813e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800813a:	2301      	movs	r3, #1
 800813c:	e392      	b.n	8008864 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800813e:	4b42      	ldr	r3, [pc, #264]	@ (8008248 <HAL_RCC_OscConfig+0x288>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f023 0219 	bic.w	r2, r3, #25
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	68db      	ldr	r3, [r3, #12]
 800814a:	493f      	ldr	r1, [pc, #252]	@ (8008248 <HAL_RCC_OscConfig+0x288>)
 800814c:	4313      	orrs	r3, r2
 800814e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008150:	f7fa ff7a 	bl	8003048 <HAL_GetTick>
 8008154:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008156:	e008      	b.n	800816a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008158:	f7fa ff76 	bl	8003048 <HAL_GetTick>
 800815c:	4602      	mov	r2, r0
 800815e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008160:	1ad3      	subs	r3, r2, r3
 8008162:	2b02      	cmp	r3, #2
 8008164:	d901      	bls.n	800816a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008166:	2303      	movs	r3, #3
 8008168:	e37c      	b.n	8008864 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800816a:	4b37      	ldr	r3, [pc, #220]	@ (8008248 <HAL_RCC_OscConfig+0x288>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f003 0304 	and.w	r3, r3, #4
 8008172:	2b00      	cmp	r3, #0
 8008174:	d0f0      	beq.n	8008158 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008176:	f7fa ff73 	bl	8003060 <HAL_GetREVID>
 800817a:	4603      	mov	r3, r0
 800817c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008180:	4293      	cmp	r3, r2
 8008182:	d817      	bhi.n	80081b4 <HAL_RCC_OscConfig+0x1f4>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	691b      	ldr	r3, [r3, #16]
 8008188:	2b40      	cmp	r3, #64	@ 0x40
 800818a:	d108      	bne.n	800819e <HAL_RCC_OscConfig+0x1de>
 800818c:	4b2e      	ldr	r3, [pc, #184]	@ (8008248 <HAL_RCC_OscConfig+0x288>)
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8008194:	4a2c      	ldr	r2, [pc, #176]	@ (8008248 <HAL_RCC_OscConfig+0x288>)
 8008196:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800819a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800819c:	e07a      	b.n	8008294 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800819e:	4b2a      	ldr	r3, [pc, #168]	@ (8008248 <HAL_RCC_OscConfig+0x288>)
 80081a0:	685b      	ldr	r3, [r3, #4]
 80081a2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	691b      	ldr	r3, [r3, #16]
 80081aa:	031b      	lsls	r3, r3, #12
 80081ac:	4926      	ldr	r1, [pc, #152]	@ (8008248 <HAL_RCC_OscConfig+0x288>)
 80081ae:	4313      	orrs	r3, r2
 80081b0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80081b2:	e06f      	b.n	8008294 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80081b4:	4b24      	ldr	r3, [pc, #144]	@ (8008248 <HAL_RCC_OscConfig+0x288>)
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	691b      	ldr	r3, [r3, #16]
 80081c0:	061b      	lsls	r3, r3, #24
 80081c2:	4921      	ldr	r1, [pc, #132]	@ (8008248 <HAL_RCC_OscConfig+0x288>)
 80081c4:	4313      	orrs	r3, r2
 80081c6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80081c8:	e064      	b.n	8008294 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	68db      	ldr	r3, [r3, #12]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d047      	beq.n	8008262 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80081d2:	4b1d      	ldr	r3, [pc, #116]	@ (8008248 <HAL_RCC_OscConfig+0x288>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f023 0219 	bic.w	r2, r3, #25
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	68db      	ldr	r3, [r3, #12]
 80081de:	491a      	ldr	r1, [pc, #104]	@ (8008248 <HAL_RCC_OscConfig+0x288>)
 80081e0:	4313      	orrs	r3, r2
 80081e2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081e4:	f7fa ff30 	bl	8003048 <HAL_GetTick>
 80081e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80081ea:	e008      	b.n	80081fe <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80081ec:	f7fa ff2c 	bl	8003048 <HAL_GetTick>
 80081f0:	4602      	mov	r2, r0
 80081f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081f4:	1ad3      	subs	r3, r2, r3
 80081f6:	2b02      	cmp	r3, #2
 80081f8:	d901      	bls.n	80081fe <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80081fa:	2303      	movs	r3, #3
 80081fc:	e332      	b.n	8008864 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80081fe:	4b12      	ldr	r3, [pc, #72]	@ (8008248 <HAL_RCC_OscConfig+0x288>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f003 0304 	and.w	r3, r3, #4
 8008206:	2b00      	cmp	r3, #0
 8008208:	d0f0      	beq.n	80081ec <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800820a:	f7fa ff29 	bl	8003060 <HAL_GetREVID>
 800820e:	4603      	mov	r3, r0
 8008210:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008214:	4293      	cmp	r3, r2
 8008216:	d819      	bhi.n	800824c <HAL_RCC_OscConfig+0x28c>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	691b      	ldr	r3, [r3, #16]
 800821c:	2b40      	cmp	r3, #64	@ 0x40
 800821e:	d108      	bne.n	8008232 <HAL_RCC_OscConfig+0x272>
 8008220:	4b09      	ldr	r3, [pc, #36]	@ (8008248 <HAL_RCC_OscConfig+0x288>)
 8008222:	685b      	ldr	r3, [r3, #4]
 8008224:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8008228:	4a07      	ldr	r2, [pc, #28]	@ (8008248 <HAL_RCC_OscConfig+0x288>)
 800822a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800822e:	6053      	str	r3, [r2, #4]
 8008230:	e030      	b.n	8008294 <HAL_RCC_OscConfig+0x2d4>
 8008232:	4b05      	ldr	r3, [pc, #20]	@ (8008248 <HAL_RCC_OscConfig+0x288>)
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	691b      	ldr	r3, [r3, #16]
 800823e:	031b      	lsls	r3, r3, #12
 8008240:	4901      	ldr	r1, [pc, #4]	@ (8008248 <HAL_RCC_OscConfig+0x288>)
 8008242:	4313      	orrs	r3, r2
 8008244:	604b      	str	r3, [r1, #4]
 8008246:	e025      	b.n	8008294 <HAL_RCC_OscConfig+0x2d4>
 8008248:	58024400 	.word	0x58024400
 800824c:	4b9a      	ldr	r3, [pc, #616]	@ (80084b8 <HAL_RCC_OscConfig+0x4f8>)
 800824e:	685b      	ldr	r3, [r3, #4]
 8008250:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	691b      	ldr	r3, [r3, #16]
 8008258:	061b      	lsls	r3, r3, #24
 800825a:	4997      	ldr	r1, [pc, #604]	@ (80084b8 <HAL_RCC_OscConfig+0x4f8>)
 800825c:	4313      	orrs	r3, r2
 800825e:	604b      	str	r3, [r1, #4]
 8008260:	e018      	b.n	8008294 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008262:	4b95      	ldr	r3, [pc, #596]	@ (80084b8 <HAL_RCC_OscConfig+0x4f8>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a94      	ldr	r2, [pc, #592]	@ (80084b8 <HAL_RCC_OscConfig+0x4f8>)
 8008268:	f023 0301 	bic.w	r3, r3, #1
 800826c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800826e:	f7fa feeb 	bl	8003048 <HAL_GetTick>
 8008272:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008274:	e008      	b.n	8008288 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008276:	f7fa fee7 	bl	8003048 <HAL_GetTick>
 800827a:	4602      	mov	r2, r0
 800827c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800827e:	1ad3      	subs	r3, r2, r3
 8008280:	2b02      	cmp	r3, #2
 8008282:	d901      	bls.n	8008288 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8008284:	2303      	movs	r3, #3
 8008286:	e2ed      	b.n	8008864 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008288:	4b8b      	ldr	r3, [pc, #556]	@ (80084b8 <HAL_RCC_OscConfig+0x4f8>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f003 0304 	and.w	r3, r3, #4
 8008290:	2b00      	cmp	r3, #0
 8008292:	d1f0      	bne.n	8008276 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f003 0310 	and.w	r3, r3, #16
 800829c:	2b00      	cmp	r3, #0
 800829e:	f000 80a9 	beq.w	80083f4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80082a2:	4b85      	ldr	r3, [pc, #532]	@ (80084b8 <HAL_RCC_OscConfig+0x4f8>)
 80082a4:	691b      	ldr	r3, [r3, #16]
 80082a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80082aa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80082ac:	4b82      	ldr	r3, [pc, #520]	@ (80084b8 <HAL_RCC_OscConfig+0x4f8>)
 80082ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082b0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80082b2:	69bb      	ldr	r3, [r7, #24]
 80082b4:	2b08      	cmp	r3, #8
 80082b6:	d007      	beq.n	80082c8 <HAL_RCC_OscConfig+0x308>
 80082b8:	69bb      	ldr	r3, [r7, #24]
 80082ba:	2b18      	cmp	r3, #24
 80082bc:	d13a      	bne.n	8008334 <HAL_RCC_OscConfig+0x374>
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	f003 0303 	and.w	r3, r3, #3
 80082c4:	2b01      	cmp	r3, #1
 80082c6:	d135      	bne.n	8008334 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80082c8:	4b7b      	ldr	r3, [pc, #492]	@ (80084b8 <HAL_RCC_OscConfig+0x4f8>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d005      	beq.n	80082e0 <HAL_RCC_OscConfig+0x320>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	69db      	ldr	r3, [r3, #28]
 80082d8:	2b80      	cmp	r3, #128	@ 0x80
 80082da:	d001      	beq.n	80082e0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80082dc:	2301      	movs	r3, #1
 80082de:	e2c1      	b.n	8008864 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80082e0:	f7fa febe 	bl	8003060 <HAL_GetREVID>
 80082e4:	4603      	mov	r3, r0
 80082e6:	f241 0203 	movw	r2, #4099	@ 0x1003
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d817      	bhi.n	800831e <HAL_RCC_OscConfig+0x35e>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6a1b      	ldr	r3, [r3, #32]
 80082f2:	2b20      	cmp	r3, #32
 80082f4:	d108      	bne.n	8008308 <HAL_RCC_OscConfig+0x348>
 80082f6:	4b70      	ldr	r3, [pc, #448]	@ (80084b8 <HAL_RCC_OscConfig+0x4f8>)
 80082f8:	685b      	ldr	r3, [r3, #4]
 80082fa:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80082fe:	4a6e      	ldr	r2, [pc, #440]	@ (80084b8 <HAL_RCC_OscConfig+0x4f8>)
 8008300:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008304:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008306:	e075      	b.n	80083f4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008308:	4b6b      	ldr	r3, [pc, #428]	@ (80084b8 <HAL_RCC_OscConfig+0x4f8>)
 800830a:	685b      	ldr	r3, [r3, #4]
 800830c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6a1b      	ldr	r3, [r3, #32]
 8008314:	069b      	lsls	r3, r3, #26
 8008316:	4968      	ldr	r1, [pc, #416]	@ (80084b8 <HAL_RCC_OscConfig+0x4f8>)
 8008318:	4313      	orrs	r3, r2
 800831a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800831c:	e06a      	b.n	80083f4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800831e:	4b66      	ldr	r3, [pc, #408]	@ (80084b8 <HAL_RCC_OscConfig+0x4f8>)
 8008320:	68db      	ldr	r3, [r3, #12]
 8008322:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6a1b      	ldr	r3, [r3, #32]
 800832a:	061b      	lsls	r3, r3, #24
 800832c:	4962      	ldr	r1, [pc, #392]	@ (80084b8 <HAL_RCC_OscConfig+0x4f8>)
 800832e:	4313      	orrs	r3, r2
 8008330:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008332:	e05f      	b.n	80083f4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	69db      	ldr	r3, [r3, #28]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d042      	beq.n	80083c2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800833c:	4b5e      	ldr	r3, [pc, #376]	@ (80084b8 <HAL_RCC_OscConfig+0x4f8>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a5d      	ldr	r2, [pc, #372]	@ (80084b8 <HAL_RCC_OscConfig+0x4f8>)
 8008342:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008346:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008348:	f7fa fe7e 	bl	8003048 <HAL_GetTick>
 800834c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800834e:	e008      	b.n	8008362 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008350:	f7fa fe7a 	bl	8003048 <HAL_GetTick>
 8008354:	4602      	mov	r2, r0
 8008356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008358:	1ad3      	subs	r3, r2, r3
 800835a:	2b02      	cmp	r3, #2
 800835c:	d901      	bls.n	8008362 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800835e:	2303      	movs	r3, #3
 8008360:	e280      	b.n	8008864 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008362:	4b55      	ldr	r3, [pc, #340]	@ (80084b8 <HAL_RCC_OscConfig+0x4f8>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800836a:	2b00      	cmp	r3, #0
 800836c:	d0f0      	beq.n	8008350 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800836e:	f7fa fe77 	bl	8003060 <HAL_GetREVID>
 8008372:	4603      	mov	r3, r0
 8008374:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008378:	4293      	cmp	r3, r2
 800837a:	d817      	bhi.n	80083ac <HAL_RCC_OscConfig+0x3ec>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6a1b      	ldr	r3, [r3, #32]
 8008380:	2b20      	cmp	r3, #32
 8008382:	d108      	bne.n	8008396 <HAL_RCC_OscConfig+0x3d6>
 8008384:	4b4c      	ldr	r3, [pc, #304]	@ (80084b8 <HAL_RCC_OscConfig+0x4f8>)
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800838c:	4a4a      	ldr	r2, [pc, #296]	@ (80084b8 <HAL_RCC_OscConfig+0x4f8>)
 800838e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008392:	6053      	str	r3, [r2, #4]
 8008394:	e02e      	b.n	80083f4 <HAL_RCC_OscConfig+0x434>
 8008396:	4b48      	ldr	r3, [pc, #288]	@ (80084b8 <HAL_RCC_OscConfig+0x4f8>)
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6a1b      	ldr	r3, [r3, #32]
 80083a2:	069b      	lsls	r3, r3, #26
 80083a4:	4944      	ldr	r1, [pc, #272]	@ (80084b8 <HAL_RCC_OscConfig+0x4f8>)
 80083a6:	4313      	orrs	r3, r2
 80083a8:	604b      	str	r3, [r1, #4]
 80083aa:	e023      	b.n	80083f4 <HAL_RCC_OscConfig+0x434>
 80083ac:	4b42      	ldr	r3, [pc, #264]	@ (80084b8 <HAL_RCC_OscConfig+0x4f8>)
 80083ae:	68db      	ldr	r3, [r3, #12]
 80083b0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6a1b      	ldr	r3, [r3, #32]
 80083b8:	061b      	lsls	r3, r3, #24
 80083ba:	493f      	ldr	r1, [pc, #252]	@ (80084b8 <HAL_RCC_OscConfig+0x4f8>)
 80083bc:	4313      	orrs	r3, r2
 80083be:	60cb      	str	r3, [r1, #12]
 80083c0:	e018      	b.n	80083f4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80083c2:	4b3d      	ldr	r3, [pc, #244]	@ (80084b8 <HAL_RCC_OscConfig+0x4f8>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4a3c      	ldr	r2, [pc, #240]	@ (80084b8 <HAL_RCC_OscConfig+0x4f8>)
 80083c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80083cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083ce:	f7fa fe3b 	bl	8003048 <HAL_GetTick>
 80083d2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80083d4:	e008      	b.n	80083e8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80083d6:	f7fa fe37 	bl	8003048 <HAL_GetTick>
 80083da:	4602      	mov	r2, r0
 80083dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083de:	1ad3      	subs	r3, r2, r3
 80083e0:	2b02      	cmp	r3, #2
 80083e2:	d901      	bls.n	80083e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80083e4:	2303      	movs	r3, #3
 80083e6:	e23d      	b.n	8008864 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80083e8:	4b33      	ldr	r3, [pc, #204]	@ (80084b8 <HAL_RCC_OscConfig+0x4f8>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d1f0      	bne.n	80083d6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f003 0308 	and.w	r3, r3, #8
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d036      	beq.n	800846e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	695b      	ldr	r3, [r3, #20]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d019      	beq.n	800843c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008408:	4b2b      	ldr	r3, [pc, #172]	@ (80084b8 <HAL_RCC_OscConfig+0x4f8>)
 800840a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800840c:	4a2a      	ldr	r2, [pc, #168]	@ (80084b8 <HAL_RCC_OscConfig+0x4f8>)
 800840e:	f043 0301 	orr.w	r3, r3, #1
 8008412:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008414:	f7fa fe18 	bl	8003048 <HAL_GetTick>
 8008418:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800841a:	e008      	b.n	800842e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800841c:	f7fa fe14 	bl	8003048 <HAL_GetTick>
 8008420:	4602      	mov	r2, r0
 8008422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008424:	1ad3      	subs	r3, r2, r3
 8008426:	2b02      	cmp	r3, #2
 8008428:	d901      	bls.n	800842e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800842a:	2303      	movs	r3, #3
 800842c:	e21a      	b.n	8008864 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800842e:	4b22      	ldr	r3, [pc, #136]	@ (80084b8 <HAL_RCC_OscConfig+0x4f8>)
 8008430:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008432:	f003 0302 	and.w	r3, r3, #2
 8008436:	2b00      	cmp	r3, #0
 8008438:	d0f0      	beq.n	800841c <HAL_RCC_OscConfig+0x45c>
 800843a:	e018      	b.n	800846e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800843c:	4b1e      	ldr	r3, [pc, #120]	@ (80084b8 <HAL_RCC_OscConfig+0x4f8>)
 800843e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008440:	4a1d      	ldr	r2, [pc, #116]	@ (80084b8 <HAL_RCC_OscConfig+0x4f8>)
 8008442:	f023 0301 	bic.w	r3, r3, #1
 8008446:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008448:	f7fa fdfe 	bl	8003048 <HAL_GetTick>
 800844c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800844e:	e008      	b.n	8008462 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008450:	f7fa fdfa 	bl	8003048 <HAL_GetTick>
 8008454:	4602      	mov	r2, r0
 8008456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008458:	1ad3      	subs	r3, r2, r3
 800845a:	2b02      	cmp	r3, #2
 800845c:	d901      	bls.n	8008462 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800845e:	2303      	movs	r3, #3
 8008460:	e200      	b.n	8008864 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008462:	4b15      	ldr	r3, [pc, #84]	@ (80084b8 <HAL_RCC_OscConfig+0x4f8>)
 8008464:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008466:	f003 0302 	and.w	r3, r3, #2
 800846a:	2b00      	cmp	r3, #0
 800846c:	d1f0      	bne.n	8008450 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f003 0320 	and.w	r3, r3, #32
 8008476:	2b00      	cmp	r3, #0
 8008478:	d039      	beq.n	80084ee <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	699b      	ldr	r3, [r3, #24]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d01c      	beq.n	80084bc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008482:	4b0d      	ldr	r3, [pc, #52]	@ (80084b8 <HAL_RCC_OscConfig+0x4f8>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a0c      	ldr	r2, [pc, #48]	@ (80084b8 <HAL_RCC_OscConfig+0x4f8>)
 8008488:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800848c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800848e:	f7fa fddb 	bl	8003048 <HAL_GetTick>
 8008492:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008494:	e008      	b.n	80084a8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008496:	f7fa fdd7 	bl	8003048 <HAL_GetTick>
 800849a:	4602      	mov	r2, r0
 800849c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800849e:	1ad3      	subs	r3, r2, r3
 80084a0:	2b02      	cmp	r3, #2
 80084a2:	d901      	bls.n	80084a8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80084a4:	2303      	movs	r3, #3
 80084a6:	e1dd      	b.n	8008864 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80084a8:	4b03      	ldr	r3, [pc, #12]	@ (80084b8 <HAL_RCC_OscConfig+0x4f8>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d0f0      	beq.n	8008496 <HAL_RCC_OscConfig+0x4d6>
 80084b4:	e01b      	b.n	80084ee <HAL_RCC_OscConfig+0x52e>
 80084b6:	bf00      	nop
 80084b8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80084bc:	4b9b      	ldr	r3, [pc, #620]	@ (800872c <HAL_RCC_OscConfig+0x76c>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a9a      	ldr	r2, [pc, #616]	@ (800872c <HAL_RCC_OscConfig+0x76c>)
 80084c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80084c6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80084c8:	f7fa fdbe 	bl	8003048 <HAL_GetTick>
 80084cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80084ce:	e008      	b.n	80084e2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80084d0:	f7fa fdba 	bl	8003048 <HAL_GetTick>
 80084d4:	4602      	mov	r2, r0
 80084d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084d8:	1ad3      	subs	r3, r2, r3
 80084da:	2b02      	cmp	r3, #2
 80084dc:	d901      	bls.n	80084e2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80084de:	2303      	movs	r3, #3
 80084e0:	e1c0      	b.n	8008864 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80084e2:	4b92      	ldr	r3, [pc, #584]	@ (800872c <HAL_RCC_OscConfig+0x76c>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d1f0      	bne.n	80084d0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f003 0304 	and.w	r3, r3, #4
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	f000 8081 	beq.w	80085fe <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80084fc:	4b8c      	ldr	r3, [pc, #560]	@ (8008730 <HAL_RCC_OscConfig+0x770>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a8b      	ldr	r2, [pc, #556]	@ (8008730 <HAL_RCC_OscConfig+0x770>)
 8008502:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008506:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008508:	f7fa fd9e 	bl	8003048 <HAL_GetTick>
 800850c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800850e:	e008      	b.n	8008522 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008510:	f7fa fd9a 	bl	8003048 <HAL_GetTick>
 8008514:	4602      	mov	r2, r0
 8008516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008518:	1ad3      	subs	r3, r2, r3
 800851a:	2b64      	cmp	r3, #100	@ 0x64
 800851c:	d901      	bls.n	8008522 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800851e:	2303      	movs	r3, #3
 8008520:	e1a0      	b.n	8008864 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008522:	4b83      	ldr	r3, [pc, #524]	@ (8008730 <HAL_RCC_OscConfig+0x770>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800852a:	2b00      	cmp	r3, #0
 800852c:	d0f0      	beq.n	8008510 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	689b      	ldr	r3, [r3, #8]
 8008532:	2b01      	cmp	r3, #1
 8008534:	d106      	bne.n	8008544 <HAL_RCC_OscConfig+0x584>
 8008536:	4b7d      	ldr	r3, [pc, #500]	@ (800872c <HAL_RCC_OscConfig+0x76c>)
 8008538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800853a:	4a7c      	ldr	r2, [pc, #496]	@ (800872c <HAL_RCC_OscConfig+0x76c>)
 800853c:	f043 0301 	orr.w	r3, r3, #1
 8008540:	6713      	str	r3, [r2, #112]	@ 0x70
 8008542:	e02d      	b.n	80085a0 <HAL_RCC_OscConfig+0x5e0>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	689b      	ldr	r3, [r3, #8]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d10c      	bne.n	8008566 <HAL_RCC_OscConfig+0x5a6>
 800854c:	4b77      	ldr	r3, [pc, #476]	@ (800872c <HAL_RCC_OscConfig+0x76c>)
 800854e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008550:	4a76      	ldr	r2, [pc, #472]	@ (800872c <HAL_RCC_OscConfig+0x76c>)
 8008552:	f023 0301 	bic.w	r3, r3, #1
 8008556:	6713      	str	r3, [r2, #112]	@ 0x70
 8008558:	4b74      	ldr	r3, [pc, #464]	@ (800872c <HAL_RCC_OscConfig+0x76c>)
 800855a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800855c:	4a73      	ldr	r2, [pc, #460]	@ (800872c <HAL_RCC_OscConfig+0x76c>)
 800855e:	f023 0304 	bic.w	r3, r3, #4
 8008562:	6713      	str	r3, [r2, #112]	@ 0x70
 8008564:	e01c      	b.n	80085a0 <HAL_RCC_OscConfig+0x5e0>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	689b      	ldr	r3, [r3, #8]
 800856a:	2b05      	cmp	r3, #5
 800856c:	d10c      	bne.n	8008588 <HAL_RCC_OscConfig+0x5c8>
 800856e:	4b6f      	ldr	r3, [pc, #444]	@ (800872c <HAL_RCC_OscConfig+0x76c>)
 8008570:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008572:	4a6e      	ldr	r2, [pc, #440]	@ (800872c <HAL_RCC_OscConfig+0x76c>)
 8008574:	f043 0304 	orr.w	r3, r3, #4
 8008578:	6713      	str	r3, [r2, #112]	@ 0x70
 800857a:	4b6c      	ldr	r3, [pc, #432]	@ (800872c <HAL_RCC_OscConfig+0x76c>)
 800857c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800857e:	4a6b      	ldr	r2, [pc, #428]	@ (800872c <HAL_RCC_OscConfig+0x76c>)
 8008580:	f043 0301 	orr.w	r3, r3, #1
 8008584:	6713      	str	r3, [r2, #112]	@ 0x70
 8008586:	e00b      	b.n	80085a0 <HAL_RCC_OscConfig+0x5e0>
 8008588:	4b68      	ldr	r3, [pc, #416]	@ (800872c <HAL_RCC_OscConfig+0x76c>)
 800858a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800858c:	4a67      	ldr	r2, [pc, #412]	@ (800872c <HAL_RCC_OscConfig+0x76c>)
 800858e:	f023 0301 	bic.w	r3, r3, #1
 8008592:	6713      	str	r3, [r2, #112]	@ 0x70
 8008594:	4b65      	ldr	r3, [pc, #404]	@ (800872c <HAL_RCC_OscConfig+0x76c>)
 8008596:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008598:	4a64      	ldr	r2, [pc, #400]	@ (800872c <HAL_RCC_OscConfig+0x76c>)
 800859a:	f023 0304 	bic.w	r3, r3, #4
 800859e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	689b      	ldr	r3, [r3, #8]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d015      	beq.n	80085d4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085a8:	f7fa fd4e 	bl	8003048 <HAL_GetTick>
 80085ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80085ae:	e00a      	b.n	80085c6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80085b0:	f7fa fd4a 	bl	8003048 <HAL_GetTick>
 80085b4:	4602      	mov	r2, r0
 80085b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085b8:	1ad3      	subs	r3, r2, r3
 80085ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80085be:	4293      	cmp	r3, r2
 80085c0:	d901      	bls.n	80085c6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80085c2:	2303      	movs	r3, #3
 80085c4:	e14e      	b.n	8008864 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80085c6:	4b59      	ldr	r3, [pc, #356]	@ (800872c <HAL_RCC_OscConfig+0x76c>)
 80085c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085ca:	f003 0302 	and.w	r3, r3, #2
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d0ee      	beq.n	80085b0 <HAL_RCC_OscConfig+0x5f0>
 80085d2:	e014      	b.n	80085fe <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085d4:	f7fa fd38 	bl	8003048 <HAL_GetTick>
 80085d8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80085da:	e00a      	b.n	80085f2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80085dc:	f7fa fd34 	bl	8003048 <HAL_GetTick>
 80085e0:	4602      	mov	r2, r0
 80085e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085e4:	1ad3      	subs	r3, r2, r3
 80085e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d901      	bls.n	80085f2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80085ee:	2303      	movs	r3, #3
 80085f0:	e138      	b.n	8008864 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80085f2:	4b4e      	ldr	r3, [pc, #312]	@ (800872c <HAL_RCC_OscConfig+0x76c>)
 80085f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085f6:	f003 0302 	and.w	r3, r3, #2
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d1ee      	bne.n	80085dc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008602:	2b00      	cmp	r3, #0
 8008604:	f000 812d 	beq.w	8008862 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008608:	4b48      	ldr	r3, [pc, #288]	@ (800872c <HAL_RCC_OscConfig+0x76c>)
 800860a:	691b      	ldr	r3, [r3, #16]
 800860c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008610:	2b18      	cmp	r3, #24
 8008612:	f000 80bd 	beq.w	8008790 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800861a:	2b02      	cmp	r3, #2
 800861c:	f040 809e 	bne.w	800875c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008620:	4b42      	ldr	r3, [pc, #264]	@ (800872c <HAL_RCC_OscConfig+0x76c>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4a41      	ldr	r2, [pc, #260]	@ (800872c <HAL_RCC_OscConfig+0x76c>)
 8008626:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800862a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800862c:	f7fa fd0c 	bl	8003048 <HAL_GetTick>
 8008630:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008632:	e008      	b.n	8008646 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008634:	f7fa fd08 	bl	8003048 <HAL_GetTick>
 8008638:	4602      	mov	r2, r0
 800863a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800863c:	1ad3      	subs	r3, r2, r3
 800863e:	2b02      	cmp	r3, #2
 8008640:	d901      	bls.n	8008646 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8008642:	2303      	movs	r3, #3
 8008644:	e10e      	b.n	8008864 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008646:	4b39      	ldr	r3, [pc, #228]	@ (800872c <HAL_RCC_OscConfig+0x76c>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800864e:	2b00      	cmp	r3, #0
 8008650:	d1f0      	bne.n	8008634 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008652:	4b36      	ldr	r3, [pc, #216]	@ (800872c <HAL_RCC_OscConfig+0x76c>)
 8008654:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008656:	4b37      	ldr	r3, [pc, #220]	@ (8008734 <HAL_RCC_OscConfig+0x774>)
 8008658:	4013      	ands	r3, r2
 800865a:	687a      	ldr	r2, [r7, #4]
 800865c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800865e:	687a      	ldr	r2, [r7, #4]
 8008660:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008662:	0112      	lsls	r2, r2, #4
 8008664:	430a      	orrs	r2, r1
 8008666:	4931      	ldr	r1, [pc, #196]	@ (800872c <HAL_RCC_OscConfig+0x76c>)
 8008668:	4313      	orrs	r3, r2
 800866a:	628b      	str	r3, [r1, #40]	@ 0x28
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008670:	3b01      	subs	r3, #1
 8008672:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800867a:	3b01      	subs	r3, #1
 800867c:	025b      	lsls	r3, r3, #9
 800867e:	b29b      	uxth	r3, r3
 8008680:	431a      	orrs	r2, r3
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008686:	3b01      	subs	r3, #1
 8008688:	041b      	lsls	r3, r3, #16
 800868a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800868e:	431a      	orrs	r2, r3
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008694:	3b01      	subs	r3, #1
 8008696:	061b      	lsls	r3, r3, #24
 8008698:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800869c:	4923      	ldr	r1, [pc, #140]	@ (800872c <HAL_RCC_OscConfig+0x76c>)
 800869e:	4313      	orrs	r3, r2
 80086a0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80086a2:	4b22      	ldr	r3, [pc, #136]	@ (800872c <HAL_RCC_OscConfig+0x76c>)
 80086a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086a6:	4a21      	ldr	r2, [pc, #132]	@ (800872c <HAL_RCC_OscConfig+0x76c>)
 80086a8:	f023 0301 	bic.w	r3, r3, #1
 80086ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80086ae:	4b1f      	ldr	r3, [pc, #124]	@ (800872c <HAL_RCC_OscConfig+0x76c>)
 80086b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80086b2:	4b21      	ldr	r3, [pc, #132]	@ (8008738 <HAL_RCC_OscConfig+0x778>)
 80086b4:	4013      	ands	r3, r2
 80086b6:	687a      	ldr	r2, [r7, #4]
 80086b8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80086ba:	00d2      	lsls	r2, r2, #3
 80086bc:	491b      	ldr	r1, [pc, #108]	@ (800872c <HAL_RCC_OscConfig+0x76c>)
 80086be:	4313      	orrs	r3, r2
 80086c0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80086c2:	4b1a      	ldr	r3, [pc, #104]	@ (800872c <HAL_RCC_OscConfig+0x76c>)
 80086c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086c6:	f023 020c 	bic.w	r2, r3, #12
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086ce:	4917      	ldr	r1, [pc, #92]	@ (800872c <HAL_RCC_OscConfig+0x76c>)
 80086d0:	4313      	orrs	r3, r2
 80086d2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80086d4:	4b15      	ldr	r3, [pc, #84]	@ (800872c <HAL_RCC_OscConfig+0x76c>)
 80086d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086d8:	f023 0202 	bic.w	r2, r3, #2
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086e0:	4912      	ldr	r1, [pc, #72]	@ (800872c <HAL_RCC_OscConfig+0x76c>)
 80086e2:	4313      	orrs	r3, r2
 80086e4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80086e6:	4b11      	ldr	r3, [pc, #68]	@ (800872c <HAL_RCC_OscConfig+0x76c>)
 80086e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086ea:	4a10      	ldr	r2, [pc, #64]	@ (800872c <HAL_RCC_OscConfig+0x76c>)
 80086ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80086f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086f2:	4b0e      	ldr	r3, [pc, #56]	@ (800872c <HAL_RCC_OscConfig+0x76c>)
 80086f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086f6:	4a0d      	ldr	r2, [pc, #52]	@ (800872c <HAL_RCC_OscConfig+0x76c>)
 80086f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80086fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80086fe:	4b0b      	ldr	r3, [pc, #44]	@ (800872c <HAL_RCC_OscConfig+0x76c>)
 8008700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008702:	4a0a      	ldr	r2, [pc, #40]	@ (800872c <HAL_RCC_OscConfig+0x76c>)
 8008704:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008708:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800870a:	4b08      	ldr	r3, [pc, #32]	@ (800872c <HAL_RCC_OscConfig+0x76c>)
 800870c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800870e:	4a07      	ldr	r2, [pc, #28]	@ (800872c <HAL_RCC_OscConfig+0x76c>)
 8008710:	f043 0301 	orr.w	r3, r3, #1
 8008714:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008716:	4b05      	ldr	r3, [pc, #20]	@ (800872c <HAL_RCC_OscConfig+0x76c>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4a04      	ldr	r2, [pc, #16]	@ (800872c <HAL_RCC_OscConfig+0x76c>)
 800871c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008720:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008722:	f7fa fc91 	bl	8003048 <HAL_GetTick>
 8008726:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008728:	e011      	b.n	800874e <HAL_RCC_OscConfig+0x78e>
 800872a:	bf00      	nop
 800872c:	58024400 	.word	0x58024400
 8008730:	58024800 	.word	0x58024800
 8008734:	fffffc0c 	.word	0xfffffc0c
 8008738:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800873c:	f7fa fc84 	bl	8003048 <HAL_GetTick>
 8008740:	4602      	mov	r2, r0
 8008742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008744:	1ad3      	subs	r3, r2, r3
 8008746:	2b02      	cmp	r3, #2
 8008748:	d901      	bls.n	800874e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800874a:	2303      	movs	r3, #3
 800874c:	e08a      	b.n	8008864 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800874e:	4b47      	ldr	r3, [pc, #284]	@ (800886c <HAL_RCC_OscConfig+0x8ac>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008756:	2b00      	cmp	r3, #0
 8008758:	d0f0      	beq.n	800873c <HAL_RCC_OscConfig+0x77c>
 800875a:	e082      	b.n	8008862 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800875c:	4b43      	ldr	r3, [pc, #268]	@ (800886c <HAL_RCC_OscConfig+0x8ac>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4a42      	ldr	r2, [pc, #264]	@ (800886c <HAL_RCC_OscConfig+0x8ac>)
 8008762:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008766:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008768:	f7fa fc6e 	bl	8003048 <HAL_GetTick>
 800876c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800876e:	e008      	b.n	8008782 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008770:	f7fa fc6a 	bl	8003048 <HAL_GetTick>
 8008774:	4602      	mov	r2, r0
 8008776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008778:	1ad3      	subs	r3, r2, r3
 800877a:	2b02      	cmp	r3, #2
 800877c:	d901      	bls.n	8008782 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800877e:	2303      	movs	r3, #3
 8008780:	e070      	b.n	8008864 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008782:	4b3a      	ldr	r3, [pc, #232]	@ (800886c <HAL_RCC_OscConfig+0x8ac>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800878a:	2b00      	cmp	r3, #0
 800878c:	d1f0      	bne.n	8008770 <HAL_RCC_OscConfig+0x7b0>
 800878e:	e068      	b.n	8008862 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008790:	4b36      	ldr	r3, [pc, #216]	@ (800886c <HAL_RCC_OscConfig+0x8ac>)
 8008792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008794:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008796:	4b35      	ldr	r3, [pc, #212]	@ (800886c <HAL_RCC_OscConfig+0x8ac>)
 8008798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800879a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087a0:	2b01      	cmp	r3, #1
 80087a2:	d031      	beq.n	8008808 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80087a4:	693b      	ldr	r3, [r7, #16]
 80087a6:	f003 0203 	and.w	r2, r3, #3
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80087ae:	429a      	cmp	r2, r3
 80087b0:	d12a      	bne.n	8008808 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	091b      	lsrs	r3, r3, #4
 80087b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80087be:	429a      	cmp	r2, r3
 80087c0:	d122      	bne.n	8008808 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087cc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80087ce:	429a      	cmp	r2, r3
 80087d0:	d11a      	bne.n	8008808 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	0a5b      	lsrs	r3, r3, #9
 80087d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087de:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80087e0:	429a      	cmp	r2, r3
 80087e2:	d111      	bne.n	8008808 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	0c1b      	lsrs	r3, r3, #16
 80087e8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087f0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80087f2:	429a      	cmp	r2, r3
 80087f4:	d108      	bne.n	8008808 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	0e1b      	lsrs	r3, r3, #24
 80087fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008802:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008804:	429a      	cmp	r2, r3
 8008806:	d001      	beq.n	800880c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008808:	2301      	movs	r3, #1
 800880a:	e02b      	b.n	8008864 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800880c:	4b17      	ldr	r3, [pc, #92]	@ (800886c <HAL_RCC_OscConfig+0x8ac>)
 800880e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008810:	08db      	lsrs	r3, r3, #3
 8008812:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008816:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800881c:	693a      	ldr	r2, [r7, #16]
 800881e:	429a      	cmp	r2, r3
 8008820:	d01f      	beq.n	8008862 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008822:	4b12      	ldr	r3, [pc, #72]	@ (800886c <HAL_RCC_OscConfig+0x8ac>)
 8008824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008826:	4a11      	ldr	r2, [pc, #68]	@ (800886c <HAL_RCC_OscConfig+0x8ac>)
 8008828:	f023 0301 	bic.w	r3, r3, #1
 800882c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800882e:	f7fa fc0b 	bl	8003048 <HAL_GetTick>
 8008832:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008834:	bf00      	nop
 8008836:	f7fa fc07 	bl	8003048 <HAL_GetTick>
 800883a:	4602      	mov	r2, r0
 800883c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800883e:	4293      	cmp	r3, r2
 8008840:	d0f9      	beq.n	8008836 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008842:	4b0a      	ldr	r3, [pc, #40]	@ (800886c <HAL_RCC_OscConfig+0x8ac>)
 8008844:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008846:	4b0a      	ldr	r3, [pc, #40]	@ (8008870 <HAL_RCC_OscConfig+0x8b0>)
 8008848:	4013      	ands	r3, r2
 800884a:	687a      	ldr	r2, [r7, #4]
 800884c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800884e:	00d2      	lsls	r2, r2, #3
 8008850:	4906      	ldr	r1, [pc, #24]	@ (800886c <HAL_RCC_OscConfig+0x8ac>)
 8008852:	4313      	orrs	r3, r2
 8008854:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008856:	4b05      	ldr	r3, [pc, #20]	@ (800886c <HAL_RCC_OscConfig+0x8ac>)
 8008858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800885a:	4a04      	ldr	r2, [pc, #16]	@ (800886c <HAL_RCC_OscConfig+0x8ac>)
 800885c:	f043 0301 	orr.w	r3, r3, #1
 8008860:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008862:	2300      	movs	r3, #0
}
 8008864:	4618      	mov	r0, r3
 8008866:	3730      	adds	r7, #48	@ 0x30
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}
 800886c:	58024400 	.word	0x58024400
 8008870:	ffff0007 	.word	0xffff0007

08008874 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b086      	sub	sp, #24
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d101      	bne.n	8008888 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008884:	2301      	movs	r3, #1
 8008886:	e19c      	b.n	8008bc2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008888:	4b8a      	ldr	r3, [pc, #552]	@ (8008ab4 <HAL_RCC_ClockConfig+0x240>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f003 030f 	and.w	r3, r3, #15
 8008890:	683a      	ldr	r2, [r7, #0]
 8008892:	429a      	cmp	r2, r3
 8008894:	d910      	bls.n	80088b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008896:	4b87      	ldr	r3, [pc, #540]	@ (8008ab4 <HAL_RCC_ClockConfig+0x240>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f023 020f 	bic.w	r2, r3, #15
 800889e:	4985      	ldr	r1, [pc, #532]	@ (8008ab4 <HAL_RCC_ClockConfig+0x240>)
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	4313      	orrs	r3, r2
 80088a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80088a6:	4b83      	ldr	r3, [pc, #524]	@ (8008ab4 <HAL_RCC_ClockConfig+0x240>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f003 030f 	and.w	r3, r3, #15
 80088ae:	683a      	ldr	r2, [r7, #0]
 80088b0:	429a      	cmp	r2, r3
 80088b2:	d001      	beq.n	80088b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80088b4:	2301      	movs	r3, #1
 80088b6:	e184      	b.n	8008bc2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f003 0304 	and.w	r3, r3, #4
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d010      	beq.n	80088e6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	691a      	ldr	r2, [r3, #16]
 80088c8:	4b7b      	ldr	r3, [pc, #492]	@ (8008ab8 <HAL_RCC_ClockConfig+0x244>)
 80088ca:	699b      	ldr	r3, [r3, #24]
 80088cc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80088d0:	429a      	cmp	r2, r3
 80088d2:	d908      	bls.n	80088e6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80088d4:	4b78      	ldr	r3, [pc, #480]	@ (8008ab8 <HAL_RCC_ClockConfig+0x244>)
 80088d6:	699b      	ldr	r3, [r3, #24]
 80088d8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	691b      	ldr	r3, [r3, #16]
 80088e0:	4975      	ldr	r1, [pc, #468]	@ (8008ab8 <HAL_RCC_ClockConfig+0x244>)
 80088e2:	4313      	orrs	r3, r2
 80088e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f003 0308 	and.w	r3, r3, #8
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d010      	beq.n	8008914 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	695a      	ldr	r2, [r3, #20]
 80088f6:	4b70      	ldr	r3, [pc, #448]	@ (8008ab8 <HAL_RCC_ClockConfig+0x244>)
 80088f8:	69db      	ldr	r3, [r3, #28]
 80088fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80088fe:	429a      	cmp	r2, r3
 8008900:	d908      	bls.n	8008914 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008902:	4b6d      	ldr	r3, [pc, #436]	@ (8008ab8 <HAL_RCC_ClockConfig+0x244>)
 8008904:	69db      	ldr	r3, [r3, #28]
 8008906:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	695b      	ldr	r3, [r3, #20]
 800890e:	496a      	ldr	r1, [pc, #424]	@ (8008ab8 <HAL_RCC_ClockConfig+0x244>)
 8008910:	4313      	orrs	r3, r2
 8008912:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f003 0310 	and.w	r3, r3, #16
 800891c:	2b00      	cmp	r3, #0
 800891e:	d010      	beq.n	8008942 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	699a      	ldr	r2, [r3, #24]
 8008924:	4b64      	ldr	r3, [pc, #400]	@ (8008ab8 <HAL_RCC_ClockConfig+0x244>)
 8008926:	69db      	ldr	r3, [r3, #28]
 8008928:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800892c:	429a      	cmp	r2, r3
 800892e:	d908      	bls.n	8008942 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008930:	4b61      	ldr	r3, [pc, #388]	@ (8008ab8 <HAL_RCC_ClockConfig+0x244>)
 8008932:	69db      	ldr	r3, [r3, #28]
 8008934:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	699b      	ldr	r3, [r3, #24]
 800893c:	495e      	ldr	r1, [pc, #376]	@ (8008ab8 <HAL_RCC_ClockConfig+0x244>)
 800893e:	4313      	orrs	r3, r2
 8008940:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f003 0320 	and.w	r3, r3, #32
 800894a:	2b00      	cmp	r3, #0
 800894c:	d010      	beq.n	8008970 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	69da      	ldr	r2, [r3, #28]
 8008952:	4b59      	ldr	r3, [pc, #356]	@ (8008ab8 <HAL_RCC_ClockConfig+0x244>)
 8008954:	6a1b      	ldr	r3, [r3, #32]
 8008956:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800895a:	429a      	cmp	r2, r3
 800895c:	d908      	bls.n	8008970 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800895e:	4b56      	ldr	r3, [pc, #344]	@ (8008ab8 <HAL_RCC_ClockConfig+0x244>)
 8008960:	6a1b      	ldr	r3, [r3, #32]
 8008962:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	69db      	ldr	r3, [r3, #28]
 800896a:	4953      	ldr	r1, [pc, #332]	@ (8008ab8 <HAL_RCC_ClockConfig+0x244>)
 800896c:	4313      	orrs	r3, r2
 800896e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f003 0302 	and.w	r3, r3, #2
 8008978:	2b00      	cmp	r3, #0
 800897a:	d010      	beq.n	800899e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	68da      	ldr	r2, [r3, #12]
 8008980:	4b4d      	ldr	r3, [pc, #308]	@ (8008ab8 <HAL_RCC_ClockConfig+0x244>)
 8008982:	699b      	ldr	r3, [r3, #24]
 8008984:	f003 030f 	and.w	r3, r3, #15
 8008988:	429a      	cmp	r2, r3
 800898a:	d908      	bls.n	800899e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800898c:	4b4a      	ldr	r3, [pc, #296]	@ (8008ab8 <HAL_RCC_ClockConfig+0x244>)
 800898e:	699b      	ldr	r3, [r3, #24]
 8008990:	f023 020f 	bic.w	r2, r3, #15
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	68db      	ldr	r3, [r3, #12]
 8008998:	4947      	ldr	r1, [pc, #284]	@ (8008ab8 <HAL_RCC_ClockConfig+0x244>)
 800899a:	4313      	orrs	r3, r2
 800899c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f003 0301 	and.w	r3, r3, #1
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d055      	beq.n	8008a56 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80089aa:	4b43      	ldr	r3, [pc, #268]	@ (8008ab8 <HAL_RCC_ClockConfig+0x244>)
 80089ac:	699b      	ldr	r3, [r3, #24]
 80089ae:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	689b      	ldr	r3, [r3, #8]
 80089b6:	4940      	ldr	r1, [pc, #256]	@ (8008ab8 <HAL_RCC_ClockConfig+0x244>)
 80089b8:	4313      	orrs	r3, r2
 80089ba:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	2b02      	cmp	r3, #2
 80089c2:	d107      	bne.n	80089d4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80089c4:	4b3c      	ldr	r3, [pc, #240]	@ (8008ab8 <HAL_RCC_ClockConfig+0x244>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d121      	bne.n	8008a14 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80089d0:	2301      	movs	r3, #1
 80089d2:	e0f6      	b.n	8008bc2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	685b      	ldr	r3, [r3, #4]
 80089d8:	2b03      	cmp	r3, #3
 80089da:	d107      	bne.n	80089ec <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80089dc:	4b36      	ldr	r3, [pc, #216]	@ (8008ab8 <HAL_RCC_ClockConfig+0x244>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d115      	bne.n	8008a14 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80089e8:	2301      	movs	r3, #1
 80089ea:	e0ea      	b.n	8008bc2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	d107      	bne.n	8008a04 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80089f4:	4b30      	ldr	r3, [pc, #192]	@ (8008ab8 <HAL_RCC_ClockConfig+0x244>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d109      	bne.n	8008a14 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008a00:	2301      	movs	r3, #1
 8008a02:	e0de      	b.n	8008bc2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008a04:	4b2c      	ldr	r3, [pc, #176]	@ (8008ab8 <HAL_RCC_ClockConfig+0x244>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f003 0304 	and.w	r3, r3, #4
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d101      	bne.n	8008a14 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008a10:	2301      	movs	r3, #1
 8008a12:	e0d6      	b.n	8008bc2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008a14:	4b28      	ldr	r3, [pc, #160]	@ (8008ab8 <HAL_RCC_ClockConfig+0x244>)
 8008a16:	691b      	ldr	r3, [r3, #16]
 8008a18:	f023 0207 	bic.w	r2, r3, #7
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	685b      	ldr	r3, [r3, #4]
 8008a20:	4925      	ldr	r1, [pc, #148]	@ (8008ab8 <HAL_RCC_ClockConfig+0x244>)
 8008a22:	4313      	orrs	r3, r2
 8008a24:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a26:	f7fa fb0f 	bl	8003048 <HAL_GetTick>
 8008a2a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a2c:	e00a      	b.n	8008a44 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a2e:	f7fa fb0b 	bl	8003048 <HAL_GetTick>
 8008a32:	4602      	mov	r2, r0
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	1ad3      	subs	r3, r2, r3
 8008a38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d901      	bls.n	8008a44 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008a40:	2303      	movs	r3, #3
 8008a42:	e0be      	b.n	8008bc2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a44:	4b1c      	ldr	r3, [pc, #112]	@ (8008ab8 <HAL_RCC_ClockConfig+0x244>)
 8008a46:	691b      	ldr	r3, [r3, #16]
 8008a48:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	00db      	lsls	r3, r3, #3
 8008a52:	429a      	cmp	r2, r3
 8008a54:	d1eb      	bne.n	8008a2e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f003 0302 	and.w	r3, r3, #2
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d010      	beq.n	8008a84 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	68da      	ldr	r2, [r3, #12]
 8008a66:	4b14      	ldr	r3, [pc, #80]	@ (8008ab8 <HAL_RCC_ClockConfig+0x244>)
 8008a68:	699b      	ldr	r3, [r3, #24]
 8008a6a:	f003 030f 	and.w	r3, r3, #15
 8008a6e:	429a      	cmp	r2, r3
 8008a70:	d208      	bcs.n	8008a84 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a72:	4b11      	ldr	r3, [pc, #68]	@ (8008ab8 <HAL_RCC_ClockConfig+0x244>)
 8008a74:	699b      	ldr	r3, [r3, #24]
 8008a76:	f023 020f 	bic.w	r2, r3, #15
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	68db      	ldr	r3, [r3, #12]
 8008a7e:	490e      	ldr	r1, [pc, #56]	@ (8008ab8 <HAL_RCC_ClockConfig+0x244>)
 8008a80:	4313      	orrs	r3, r2
 8008a82:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008a84:	4b0b      	ldr	r3, [pc, #44]	@ (8008ab4 <HAL_RCC_ClockConfig+0x240>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f003 030f 	and.w	r3, r3, #15
 8008a8c:	683a      	ldr	r2, [r7, #0]
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	d214      	bcs.n	8008abc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a92:	4b08      	ldr	r3, [pc, #32]	@ (8008ab4 <HAL_RCC_ClockConfig+0x240>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f023 020f 	bic.w	r2, r3, #15
 8008a9a:	4906      	ldr	r1, [pc, #24]	@ (8008ab4 <HAL_RCC_ClockConfig+0x240>)
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	4313      	orrs	r3, r2
 8008aa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008aa2:	4b04      	ldr	r3, [pc, #16]	@ (8008ab4 <HAL_RCC_ClockConfig+0x240>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f003 030f 	and.w	r3, r3, #15
 8008aaa:	683a      	ldr	r2, [r7, #0]
 8008aac:	429a      	cmp	r2, r3
 8008aae:	d005      	beq.n	8008abc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	e086      	b.n	8008bc2 <HAL_RCC_ClockConfig+0x34e>
 8008ab4:	52002000 	.word	0x52002000
 8008ab8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f003 0304 	and.w	r3, r3, #4
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d010      	beq.n	8008aea <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	691a      	ldr	r2, [r3, #16]
 8008acc:	4b3f      	ldr	r3, [pc, #252]	@ (8008bcc <HAL_RCC_ClockConfig+0x358>)
 8008ace:	699b      	ldr	r3, [r3, #24]
 8008ad0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	d208      	bcs.n	8008aea <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008ad8:	4b3c      	ldr	r3, [pc, #240]	@ (8008bcc <HAL_RCC_ClockConfig+0x358>)
 8008ada:	699b      	ldr	r3, [r3, #24]
 8008adc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	691b      	ldr	r3, [r3, #16]
 8008ae4:	4939      	ldr	r1, [pc, #228]	@ (8008bcc <HAL_RCC_ClockConfig+0x358>)
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f003 0308 	and.w	r3, r3, #8
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d010      	beq.n	8008b18 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	695a      	ldr	r2, [r3, #20]
 8008afa:	4b34      	ldr	r3, [pc, #208]	@ (8008bcc <HAL_RCC_ClockConfig+0x358>)
 8008afc:	69db      	ldr	r3, [r3, #28]
 8008afe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008b02:	429a      	cmp	r2, r3
 8008b04:	d208      	bcs.n	8008b18 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008b06:	4b31      	ldr	r3, [pc, #196]	@ (8008bcc <HAL_RCC_ClockConfig+0x358>)
 8008b08:	69db      	ldr	r3, [r3, #28]
 8008b0a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	695b      	ldr	r3, [r3, #20]
 8008b12:	492e      	ldr	r1, [pc, #184]	@ (8008bcc <HAL_RCC_ClockConfig+0x358>)
 8008b14:	4313      	orrs	r3, r2
 8008b16:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f003 0310 	and.w	r3, r3, #16
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d010      	beq.n	8008b46 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	699a      	ldr	r2, [r3, #24]
 8008b28:	4b28      	ldr	r3, [pc, #160]	@ (8008bcc <HAL_RCC_ClockConfig+0x358>)
 8008b2a:	69db      	ldr	r3, [r3, #28]
 8008b2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008b30:	429a      	cmp	r2, r3
 8008b32:	d208      	bcs.n	8008b46 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008b34:	4b25      	ldr	r3, [pc, #148]	@ (8008bcc <HAL_RCC_ClockConfig+0x358>)
 8008b36:	69db      	ldr	r3, [r3, #28]
 8008b38:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	699b      	ldr	r3, [r3, #24]
 8008b40:	4922      	ldr	r1, [pc, #136]	@ (8008bcc <HAL_RCC_ClockConfig+0x358>)
 8008b42:	4313      	orrs	r3, r2
 8008b44:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f003 0320 	and.w	r3, r3, #32
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d010      	beq.n	8008b74 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	69da      	ldr	r2, [r3, #28]
 8008b56:	4b1d      	ldr	r3, [pc, #116]	@ (8008bcc <HAL_RCC_ClockConfig+0x358>)
 8008b58:	6a1b      	ldr	r3, [r3, #32]
 8008b5a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008b5e:	429a      	cmp	r2, r3
 8008b60:	d208      	bcs.n	8008b74 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008b62:	4b1a      	ldr	r3, [pc, #104]	@ (8008bcc <HAL_RCC_ClockConfig+0x358>)
 8008b64:	6a1b      	ldr	r3, [r3, #32]
 8008b66:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	69db      	ldr	r3, [r3, #28]
 8008b6e:	4917      	ldr	r1, [pc, #92]	@ (8008bcc <HAL_RCC_ClockConfig+0x358>)
 8008b70:	4313      	orrs	r3, r2
 8008b72:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008b74:	f000 f834 	bl	8008be0 <HAL_RCC_GetSysClockFreq>
 8008b78:	4602      	mov	r2, r0
 8008b7a:	4b14      	ldr	r3, [pc, #80]	@ (8008bcc <HAL_RCC_ClockConfig+0x358>)
 8008b7c:	699b      	ldr	r3, [r3, #24]
 8008b7e:	0a1b      	lsrs	r3, r3, #8
 8008b80:	f003 030f 	and.w	r3, r3, #15
 8008b84:	4912      	ldr	r1, [pc, #72]	@ (8008bd0 <HAL_RCC_ClockConfig+0x35c>)
 8008b86:	5ccb      	ldrb	r3, [r1, r3]
 8008b88:	f003 031f 	and.w	r3, r3, #31
 8008b8c:	fa22 f303 	lsr.w	r3, r2, r3
 8008b90:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008b92:	4b0e      	ldr	r3, [pc, #56]	@ (8008bcc <HAL_RCC_ClockConfig+0x358>)
 8008b94:	699b      	ldr	r3, [r3, #24]
 8008b96:	f003 030f 	and.w	r3, r3, #15
 8008b9a:	4a0d      	ldr	r2, [pc, #52]	@ (8008bd0 <HAL_RCC_ClockConfig+0x35c>)
 8008b9c:	5cd3      	ldrb	r3, [r2, r3]
 8008b9e:	f003 031f 	and.w	r3, r3, #31
 8008ba2:	693a      	ldr	r2, [r7, #16]
 8008ba4:	fa22 f303 	lsr.w	r3, r2, r3
 8008ba8:	4a0a      	ldr	r2, [pc, #40]	@ (8008bd4 <HAL_RCC_ClockConfig+0x360>)
 8008baa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008bac:	4a0a      	ldr	r2, [pc, #40]	@ (8008bd8 <HAL_RCC_ClockConfig+0x364>)
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008bb2:	4b0a      	ldr	r3, [pc, #40]	@ (8008bdc <HAL_RCC_ClockConfig+0x368>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f7fa f9fc 	bl	8002fb4 <HAL_InitTick>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3718      	adds	r7, #24
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}
 8008bca:	bf00      	nop
 8008bcc:	58024400 	.word	0x58024400
 8008bd0:	08010618 	.word	0x08010618
 8008bd4:	24000004 	.word	0x24000004
 8008bd8:	24000000 	.word	0x24000000
 8008bdc:	24000024 	.word	0x24000024

08008be0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008be0:	b480      	push	{r7}
 8008be2:	b089      	sub	sp, #36	@ 0x24
 8008be4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008be6:	4bb3      	ldr	r3, [pc, #716]	@ (8008eb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008be8:	691b      	ldr	r3, [r3, #16]
 8008bea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008bee:	2b18      	cmp	r3, #24
 8008bf0:	f200 8155 	bhi.w	8008e9e <HAL_RCC_GetSysClockFreq+0x2be>
 8008bf4:	a201      	add	r2, pc, #4	@ (adr r2, 8008bfc <HAL_RCC_GetSysClockFreq+0x1c>)
 8008bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bfa:	bf00      	nop
 8008bfc:	08008c61 	.word	0x08008c61
 8008c00:	08008e9f 	.word	0x08008e9f
 8008c04:	08008e9f 	.word	0x08008e9f
 8008c08:	08008e9f 	.word	0x08008e9f
 8008c0c:	08008e9f 	.word	0x08008e9f
 8008c10:	08008e9f 	.word	0x08008e9f
 8008c14:	08008e9f 	.word	0x08008e9f
 8008c18:	08008e9f 	.word	0x08008e9f
 8008c1c:	08008c87 	.word	0x08008c87
 8008c20:	08008e9f 	.word	0x08008e9f
 8008c24:	08008e9f 	.word	0x08008e9f
 8008c28:	08008e9f 	.word	0x08008e9f
 8008c2c:	08008e9f 	.word	0x08008e9f
 8008c30:	08008e9f 	.word	0x08008e9f
 8008c34:	08008e9f 	.word	0x08008e9f
 8008c38:	08008e9f 	.word	0x08008e9f
 8008c3c:	08008c8d 	.word	0x08008c8d
 8008c40:	08008e9f 	.word	0x08008e9f
 8008c44:	08008e9f 	.word	0x08008e9f
 8008c48:	08008e9f 	.word	0x08008e9f
 8008c4c:	08008e9f 	.word	0x08008e9f
 8008c50:	08008e9f 	.word	0x08008e9f
 8008c54:	08008e9f 	.word	0x08008e9f
 8008c58:	08008e9f 	.word	0x08008e9f
 8008c5c:	08008c93 	.word	0x08008c93
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c60:	4b94      	ldr	r3, [pc, #592]	@ (8008eb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f003 0320 	and.w	r3, r3, #32
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d009      	beq.n	8008c80 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c6c:	4b91      	ldr	r3, [pc, #580]	@ (8008eb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	08db      	lsrs	r3, r3, #3
 8008c72:	f003 0303 	and.w	r3, r3, #3
 8008c76:	4a90      	ldr	r2, [pc, #576]	@ (8008eb8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008c78:	fa22 f303 	lsr.w	r3, r2, r3
 8008c7c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008c7e:	e111      	b.n	8008ea4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008c80:	4b8d      	ldr	r3, [pc, #564]	@ (8008eb8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008c82:	61bb      	str	r3, [r7, #24]
      break;
 8008c84:	e10e      	b.n	8008ea4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008c86:	4b8d      	ldr	r3, [pc, #564]	@ (8008ebc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008c88:	61bb      	str	r3, [r7, #24]
      break;
 8008c8a:	e10b      	b.n	8008ea4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008c8c:	4b8c      	ldr	r3, [pc, #560]	@ (8008ec0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008c8e:	61bb      	str	r3, [r7, #24]
      break;
 8008c90:	e108      	b.n	8008ea4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008c92:	4b88      	ldr	r3, [pc, #544]	@ (8008eb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c96:	f003 0303 	and.w	r3, r3, #3
 8008c9a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008c9c:	4b85      	ldr	r3, [pc, #532]	@ (8008eb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ca0:	091b      	lsrs	r3, r3, #4
 8008ca2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008ca6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008ca8:	4b82      	ldr	r3, [pc, #520]	@ (8008eb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cac:	f003 0301 	and.w	r3, r3, #1
 8008cb0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008cb2:	4b80      	ldr	r3, [pc, #512]	@ (8008eb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008cb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cb6:	08db      	lsrs	r3, r3, #3
 8008cb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008cbc:	68fa      	ldr	r2, [r7, #12]
 8008cbe:	fb02 f303 	mul.w	r3, r2, r3
 8008cc2:	ee07 3a90 	vmov	s15, r3
 8008cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cca:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	f000 80e1 	beq.w	8008e98 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	2b02      	cmp	r3, #2
 8008cda:	f000 8083 	beq.w	8008de4 <HAL_RCC_GetSysClockFreq+0x204>
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	2b02      	cmp	r3, #2
 8008ce2:	f200 80a1 	bhi.w	8008e28 <HAL_RCC_GetSysClockFreq+0x248>
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d003      	beq.n	8008cf4 <HAL_RCC_GetSysClockFreq+0x114>
 8008cec:	697b      	ldr	r3, [r7, #20]
 8008cee:	2b01      	cmp	r3, #1
 8008cf0:	d056      	beq.n	8008da0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008cf2:	e099      	b.n	8008e28 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008cf4:	4b6f      	ldr	r3, [pc, #444]	@ (8008eb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f003 0320 	and.w	r3, r3, #32
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d02d      	beq.n	8008d5c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d00:	4b6c      	ldr	r3, [pc, #432]	@ (8008eb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	08db      	lsrs	r3, r3, #3
 8008d06:	f003 0303 	and.w	r3, r3, #3
 8008d0a:	4a6b      	ldr	r2, [pc, #428]	@ (8008eb8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008d0c:	fa22 f303 	lsr.w	r3, r2, r3
 8008d10:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	ee07 3a90 	vmov	s15, r3
 8008d18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	ee07 3a90 	vmov	s15, r3
 8008d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d2a:	4b62      	ldr	r3, [pc, #392]	@ (8008eb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d32:	ee07 3a90 	vmov	s15, r3
 8008d36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008d3e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8008ec4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008d42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d56:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008d5a:	e087      	b.n	8008e6c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	ee07 3a90 	vmov	s15, r3
 8008d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d66:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8008ec8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008d6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d6e:	4b51      	ldr	r3, [pc, #324]	@ (8008eb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d76:	ee07 3a90 	vmov	s15, r3
 8008d7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008d82:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8008ec4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008d86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d9a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008d9e:	e065      	b.n	8008e6c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	ee07 3a90 	vmov	s15, r3
 8008da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008daa:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8008ecc <HAL_RCC_GetSysClockFreq+0x2ec>
 8008dae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008db2:	4b40      	ldr	r3, [pc, #256]	@ (8008eb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008db6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dba:	ee07 3a90 	vmov	s15, r3
 8008dbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8008dc6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008ec4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008dca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008dd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dde:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008de2:	e043      	b.n	8008e6c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	ee07 3a90 	vmov	s15, r3
 8008dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dee:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8008ed0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008df2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008df6:	4b2f      	ldr	r3, [pc, #188]	@ (8008eb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dfe:	ee07 3a90 	vmov	s15, r3
 8008e02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e06:	ed97 6a02 	vldr	s12, [r7, #8]
 8008e0a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8008ec4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008e0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e22:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008e26:	e021      	b.n	8008e6c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	ee07 3a90 	vmov	s15, r3
 8008e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e32:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8008ecc <HAL_RCC_GetSysClockFreq+0x2ec>
 8008e36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e3a:	4b1e      	ldr	r3, [pc, #120]	@ (8008eb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e42:	ee07 3a90 	vmov	s15, r3
 8008e46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008e4e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8008ec4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008e52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e66:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008e6a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008e6c:	4b11      	ldr	r3, [pc, #68]	@ (8008eb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e70:	0a5b      	lsrs	r3, r3, #9
 8008e72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e76:	3301      	adds	r3, #1
 8008e78:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	ee07 3a90 	vmov	s15, r3
 8008e80:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008e84:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e90:	ee17 3a90 	vmov	r3, s15
 8008e94:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008e96:	e005      	b.n	8008ea4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	61bb      	str	r3, [r7, #24]
      break;
 8008e9c:	e002      	b.n	8008ea4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008e9e:	4b07      	ldr	r3, [pc, #28]	@ (8008ebc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008ea0:	61bb      	str	r3, [r7, #24]
      break;
 8008ea2:	bf00      	nop
  }

  return sysclockfreq;
 8008ea4:	69bb      	ldr	r3, [r7, #24]
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3724      	adds	r7, #36	@ 0x24
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb0:	4770      	bx	lr
 8008eb2:	bf00      	nop
 8008eb4:	58024400 	.word	0x58024400
 8008eb8:	03d09000 	.word	0x03d09000
 8008ebc:	003d0900 	.word	0x003d0900
 8008ec0:	017d7840 	.word	0x017d7840
 8008ec4:	46000000 	.word	0x46000000
 8008ec8:	4c742400 	.word	0x4c742400
 8008ecc:	4a742400 	.word	0x4a742400
 8008ed0:	4bbebc20 	.word	0x4bbebc20

08008ed4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b082      	sub	sp, #8
 8008ed8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008eda:	f7ff fe81 	bl	8008be0 <HAL_RCC_GetSysClockFreq>
 8008ede:	4602      	mov	r2, r0
 8008ee0:	4b10      	ldr	r3, [pc, #64]	@ (8008f24 <HAL_RCC_GetHCLKFreq+0x50>)
 8008ee2:	699b      	ldr	r3, [r3, #24]
 8008ee4:	0a1b      	lsrs	r3, r3, #8
 8008ee6:	f003 030f 	and.w	r3, r3, #15
 8008eea:	490f      	ldr	r1, [pc, #60]	@ (8008f28 <HAL_RCC_GetHCLKFreq+0x54>)
 8008eec:	5ccb      	ldrb	r3, [r1, r3]
 8008eee:	f003 031f 	and.w	r3, r3, #31
 8008ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8008ef6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008ef8:	4b0a      	ldr	r3, [pc, #40]	@ (8008f24 <HAL_RCC_GetHCLKFreq+0x50>)
 8008efa:	699b      	ldr	r3, [r3, #24]
 8008efc:	f003 030f 	and.w	r3, r3, #15
 8008f00:	4a09      	ldr	r2, [pc, #36]	@ (8008f28 <HAL_RCC_GetHCLKFreq+0x54>)
 8008f02:	5cd3      	ldrb	r3, [r2, r3]
 8008f04:	f003 031f 	and.w	r3, r3, #31
 8008f08:	687a      	ldr	r2, [r7, #4]
 8008f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8008f0e:	4a07      	ldr	r2, [pc, #28]	@ (8008f2c <HAL_RCC_GetHCLKFreq+0x58>)
 8008f10:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008f12:	4a07      	ldr	r2, [pc, #28]	@ (8008f30 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008f18:	4b04      	ldr	r3, [pc, #16]	@ (8008f2c <HAL_RCC_GetHCLKFreq+0x58>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3708      	adds	r7, #8
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}
 8008f24:	58024400 	.word	0x58024400
 8008f28:	08010618 	.word	0x08010618
 8008f2c:	24000004 	.word	0x24000004
 8008f30:	24000000 	.word	0x24000000

08008f34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008f38:	f7ff ffcc 	bl	8008ed4 <HAL_RCC_GetHCLKFreq>
 8008f3c:	4602      	mov	r2, r0
 8008f3e:	4b06      	ldr	r3, [pc, #24]	@ (8008f58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008f40:	69db      	ldr	r3, [r3, #28]
 8008f42:	091b      	lsrs	r3, r3, #4
 8008f44:	f003 0307 	and.w	r3, r3, #7
 8008f48:	4904      	ldr	r1, [pc, #16]	@ (8008f5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8008f4a:	5ccb      	ldrb	r3, [r1, r3]
 8008f4c:	f003 031f 	and.w	r3, r3, #31
 8008f50:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	bd80      	pop	{r7, pc}
 8008f58:	58024400 	.word	0x58024400
 8008f5c:	08010618 	.word	0x08010618

08008f60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008f64:	f7ff ffb6 	bl	8008ed4 <HAL_RCC_GetHCLKFreq>
 8008f68:	4602      	mov	r2, r0
 8008f6a:	4b06      	ldr	r3, [pc, #24]	@ (8008f84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008f6c:	69db      	ldr	r3, [r3, #28]
 8008f6e:	0a1b      	lsrs	r3, r3, #8
 8008f70:	f003 0307 	and.w	r3, r3, #7
 8008f74:	4904      	ldr	r1, [pc, #16]	@ (8008f88 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008f76:	5ccb      	ldrb	r3, [r1, r3]
 8008f78:	f003 031f 	and.w	r3, r3, #31
 8008f7c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	bd80      	pop	{r7, pc}
 8008f84:	58024400 	.word	0x58024400
 8008f88:	08010618 	.word	0x08010618

08008f8c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008f8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008f90:	b0ca      	sub	sp, #296	@ 0x128
 8008f92:	af00      	add	r7, sp, #0
 8008f94:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008f98:	2300      	movs	r3, #0
 8008f9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fac:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8008fb0:	2500      	movs	r5, #0
 8008fb2:	ea54 0305 	orrs.w	r3, r4, r5
 8008fb6:	d049      	beq.n	800904c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008fb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fbc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008fbe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008fc2:	d02f      	beq.n	8009024 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008fc4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008fc8:	d828      	bhi.n	800901c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008fca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008fce:	d01a      	beq.n	8009006 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008fd0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008fd4:	d822      	bhi.n	800901c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d003      	beq.n	8008fe2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008fda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008fde:	d007      	beq.n	8008ff0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008fe0:	e01c      	b.n	800901c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fe2:	4bb8      	ldr	r3, [pc, #736]	@ (80092c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fe6:	4ab7      	ldr	r2, [pc, #732]	@ (80092c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008fe8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008fec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008fee:	e01a      	b.n	8009026 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008ff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ff4:	3308      	adds	r3, #8
 8008ff6:	2102      	movs	r1, #2
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f002 fb61 	bl	800b6c0 <RCCEx_PLL2_Config>
 8008ffe:	4603      	mov	r3, r0
 8009000:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009004:	e00f      	b.n	8009026 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009006:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800900a:	3328      	adds	r3, #40	@ 0x28
 800900c:	2102      	movs	r1, #2
 800900e:	4618      	mov	r0, r3
 8009010:	f002 fc08 	bl	800b824 <RCCEx_PLL3_Config>
 8009014:	4603      	mov	r3, r0
 8009016:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800901a:	e004      	b.n	8009026 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800901c:	2301      	movs	r3, #1
 800901e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009022:	e000      	b.n	8009026 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009024:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009026:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800902a:	2b00      	cmp	r3, #0
 800902c:	d10a      	bne.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800902e:	4ba5      	ldr	r3, [pc, #660]	@ (80092c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009030:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009032:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009036:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800903a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800903c:	4aa1      	ldr	r2, [pc, #644]	@ (80092c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800903e:	430b      	orrs	r3, r1
 8009040:	6513      	str	r3, [r2, #80]	@ 0x50
 8009042:	e003      	b.n	800904c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009044:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009048:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800904c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009054:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8009058:	f04f 0900 	mov.w	r9, #0
 800905c:	ea58 0309 	orrs.w	r3, r8, r9
 8009060:	d047      	beq.n	80090f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009062:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009066:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009068:	2b04      	cmp	r3, #4
 800906a:	d82a      	bhi.n	80090c2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800906c:	a201      	add	r2, pc, #4	@ (adr r2, 8009074 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800906e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009072:	bf00      	nop
 8009074:	08009089 	.word	0x08009089
 8009078:	08009097 	.word	0x08009097
 800907c:	080090ad 	.word	0x080090ad
 8009080:	080090cb 	.word	0x080090cb
 8009084:	080090cb 	.word	0x080090cb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009088:	4b8e      	ldr	r3, [pc, #568]	@ (80092c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800908a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800908c:	4a8d      	ldr	r2, [pc, #564]	@ (80092c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800908e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009092:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009094:	e01a      	b.n	80090cc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009096:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800909a:	3308      	adds	r3, #8
 800909c:	2100      	movs	r1, #0
 800909e:	4618      	mov	r0, r3
 80090a0:	f002 fb0e 	bl	800b6c0 <RCCEx_PLL2_Config>
 80090a4:	4603      	mov	r3, r0
 80090a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80090aa:	e00f      	b.n	80090cc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80090ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090b0:	3328      	adds	r3, #40	@ 0x28
 80090b2:	2100      	movs	r1, #0
 80090b4:	4618      	mov	r0, r3
 80090b6:	f002 fbb5 	bl	800b824 <RCCEx_PLL3_Config>
 80090ba:	4603      	mov	r3, r0
 80090bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80090c0:	e004      	b.n	80090cc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80090c2:	2301      	movs	r3, #1
 80090c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80090c8:	e000      	b.n	80090cc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80090ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d10a      	bne.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80090d4:	4b7b      	ldr	r3, [pc, #492]	@ (80092c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80090d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090d8:	f023 0107 	bic.w	r1, r3, #7
 80090dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090e2:	4a78      	ldr	r2, [pc, #480]	@ (80092c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80090e4:	430b      	orrs	r3, r1
 80090e6:	6513      	str	r3, [r2, #80]	@ 0x50
 80090e8:	e003      	b.n	80090f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80090f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090fa:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80090fe:	f04f 0b00 	mov.w	fp, #0
 8009102:	ea5a 030b 	orrs.w	r3, sl, fp
 8009106:	d04c      	beq.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8009108:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800910c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800910e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009112:	d030      	beq.n	8009176 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8009114:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009118:	d829      	bhi.n	800916e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800911a:	2bc0      	cmp	r3, #192	@ 0xc0
 800911c:	d02d      	beq.n	800917a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800911e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009120:	d825      	bhi.n	800916e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009122:	2b80      	cmp	r3, #128	@ 0x80
 8009124:	d018      	beq.n	8009158 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8009126:	2b80      	cmp	r3, #128	@ 0x80
 8009128:	d821      	bhi.n	800916e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800912a:	2b00      	cmp	r3, #0
 800912c:	d002      	beq.n	8009134 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800912e:	2b40      	cmp	r3, #64	@ 0x40
 8009130:	d007      	beq.n	8009142 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8009132:	e01c      	b.n	800916e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009134:	4b63      	ldr	r3, [pc, #396]	@ (80092c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009138:	4a62      	ldr	r2, [pc, #392]	@ (80092c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800913a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800913e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009140:	e01c      	b.n	800917c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009142:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009146:	3308      	adds	r3, #8
 8009148:	2100      	movs	r1, #0
 800914a:	4618      	mov	r0, r3
 800914c:	f002 fab8 	bl	800b6c0 <RCCEx_PLL2_Config>
 8009150:	4603      	mov	r3, r0
 8009152:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009156:	e011      	b.n	800917c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009158:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800915c:	3328      	adds	r3, #40	@ 0x28
 800915e:	2100      	movs	r1, #0
 8009160:	4618      	mov	r0, r3
 8009162:	f002 fb5f 	bl	800b824 <RCCEx_PLL3_Config>
 8009166:	4603      	mov	r3, r0
 8009168:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800916c:	e006      	b.n	800917c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800916e:	2301      	movs	r3, #1
 8009170:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009174:	e002      	b.n	800917c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009176:	bf00      	nop
 8009178:	e000      	b.n	800917c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800917a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800917c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009180:	2b00      	cmp	r3, #0
 8009182:	d10a      	bne.n	800919a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009184:	4b4f      	ldr	r3, [pc, #316]	@ (80092c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009186:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009188:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800918c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009190:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009192:	4a4c      	ldr	r2, [pc, #304]	@ (80092c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009194:	430b      	orrs	r3, r1
 8009196:	6513      	str	r3, [r2, #80]	@ 0x50
 8009198:	e003      	b.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800919a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800919e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80091a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091aa:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80091ae:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80091b2:	2300      	movs	r3, #0
 80091b4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80091b8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80091bc:	460b      	mov	r3, r1
 80091be:	4313      	orrs	r3, r2
 80091c0:	d053      	beq.n	800926a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80091c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091c6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80091ca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80091ce:	d035      	beq.n	800923c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80091d0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80091d4:	d82e      	bhi.n	8009234 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80091d6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80091da:	d031      	beq.n	8009240 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80091dc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80091e0:	d828      	bhi.n	8009234 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80091e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80091e6:	d01a      	beq.n	800921e <HAL_RCCEx_PeriphCLKConfig+0x292>
 80091e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80091ec:	d822      	bhi.n	8009234 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d003      	beq.n	80091fa <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80091f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80091f6:	d007      	beq.n	8009208 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80091f8:	e01c      	b.n	8009234 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091fa:	4b32      	ldr	r3, [pc, #200]	@ (80092c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80091fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091fe:	4a31      	ldr	r2, [pc, #196]	@ (80092c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009200:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009204:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009206:	e01c      	b.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009208:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800920c:	3308      	adds	r3, #8
 800920e:	2100      	movs	r1, #0
 8009210:	4618      	mov	r0, r3
 8009212:	f002 fa55 	bl	800b6c0 <RCCEx_PLL2_Config>
 8009216:	4603      	mov	r3, r0
 8009218:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800921c:	e011      	b.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800921e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009222:	3328      	adds	r3, #40	@ 0x28
 8009224:	2100      	movs	r1, #0
 8009226:	4618      	mov	r0, r3
 8009228:	f002 fafc 	bl	800b824 <RCCEx_PLL3_Config>
 800922c:	4603      	mov	r3, r0
 800922e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009232:	e006      	b.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009234:	2301      	movs	r3, #1
 8009236:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800923a:	e002      	b.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800923c:	bf00      	nop
 800923e:	e000      	b.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009240:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009242:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009246:	2b00      	cmp	r3, #0
 8009248:	d10b      	bne.n	8009262 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800924a:	4b1e      	ldr	r3, [pc, #120]	@ (80092c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800924c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800924e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8009252:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009256:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800925a:	4a1a      	ldr	r2, [pc, #104]	@ (80092c4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800925c:	430b      	orrs	r3, r1
 800925e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009260:	e003      	b.n	800926a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009262:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009266:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800926a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800926e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009272:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8009276:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800927a:	2300      	movs	r3, #0
 800927c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009280:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8009284:	460b      	mov	r3, r1
 8009286:	4313      	orrs	r3, r2
 8009288:	d056      	beq.n	8009338 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800928a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800928e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009292:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009296:	d038      	beq.n	800930a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009298:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800929c:	d831      	bhi.n	8009302 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800929e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80092a2:	d034      	beq.n	800930e <HAL_RCCEx_PeriphCLKConfig+0x382>
 80092a4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80092a8:	d82b      	bhi.n	8009302 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80092aa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80092ae:	d01d      	beq.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0x360>
 80092b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80092b4:	d825      	bhi.n	8009302 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d006      	beq.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80092ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80092be:	d00a      	beq.n	80092d6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80092c0:	e01f      	b.n	8009302 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80092c2:	bf00      	nop
 80092c4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092c8:	4ba2      	ldr	r3, [pc, #648]	@ (8009554 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80092ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092cc:	4aa1      	ldr	r2, [pc, #644]	@ (8009554 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80092ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80092d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80092d4:	e01c      	b.n	8009310 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80092d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092da:	3308      	adds	r3, #8
 80092dc:	2100      	movs	r1, #0
 80092de:	4618      	mov	r0, r3
 80092e0:	f002 f9ee 	bl	800b6c0 <RCCEx_PLL2_Config>
 80092e4:	4603      	mov	r3, r0
 80092e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80092ea:	e011      	b.n	8009310 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80092ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092f0:	3328      	adds	r3, #40	@ 0x28
 80092f2:	2100      	movs	r1, #0
 80092f4:	4618      	mov	r0, r3
 80092f6:	f002 fa95 	bl	800b824 <RCCEx_PLL3_Config>
 80092fa:	4603      	mov	r3, r0
 80092fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009300:	e006      	b.n	8009310 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009302:	2301      	movs	r3, #1
 8009304:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009308:	e002      	b.n	8009310 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800930a:	bf00      	nop
 800930c:	e000      	b.n	8009310 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800930e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009310:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009314:	2b00      	cmp	r3, #0
 8009316:	d10b      	bne.n	8009330 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009318:	4b8e      	ldr	r3, [pc, #568]	@ (8009554 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800931a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800931c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8009320:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009324:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009328:	4a8a      	ldr	r2, [pc, #552]	@ (8009554 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800932a:	430b      	orrs	r3, r1
 800932c:	6593      	str	r3, [r2, #88]	@ 0x58
 800932e:	e003      	b.n	8009338 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009330:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009334:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009338:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800933c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009340:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8009344:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009348:	2300      	movs	r3, #0
 800934a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800934e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8009352:	460b      	mov	r3, r1
 8009354:	4313      	orrs	r3, r2
 8009356:	d03a      	beq.n	80093ce <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8009358:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800935c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800935e:	2b30      	cmp	r3, #48	@ 0x30
 8009360:	d01f      	beq.n	80093a2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8009362:	2b30      	cmp	r3, #48	@ 0x30
 8009364:	d819      	bhi.n	800939a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009366:	2b20      	cmp	r3, #32
 8009368:	d00c      	beq.n	8009384 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800936a:	2b20      	cmp	r3, #32
 800936c:	d815      	bhi.n	800939a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800936e:	2b00      	cmp	r3, #0
 8009370:	d019      	beq.n	80093a6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8009372:	2b10      	cmp	r3, #16
 8009374:	d111      	bne.n	800939a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009376:	4b77      	ldr	r3, [pc, #476]	@ (8009554 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800937a:	4a76      	ldr	r2, [pc, #472]	@ (8009554 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800937c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009380:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009382:	e011      	b.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009384:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009388:	3308      	adds	r3, #8
 800938a:	2102      	movs	r1, #2
 800938c:	4618      	mov	r0, r3
 800938e:	f002 f997 	bl	800b6c0 <RCCEx_PLL2_Config>
 8009392:	4603      	mov	r3, r0
 8009394:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009398:	e006      	b.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800939a:	2301      	movs	r3, #1
 800939c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80093a0:	e002      	b.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80093a2:	bf00      	nop
 80093a4:	e000      	b.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80093a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d10a      	bne.n	80093c6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80093b0:	4b68      	ldr	r3, [pc, #416]	@ (8009554 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80093b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80093b4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80093b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80093be:	4a65      	ldr	r2, [pc, #404]	@ (8009554 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80093c0:	430b      	orrs	r3, r1
 80093c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80093c4:	e003      	b.n	80093ce <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80093ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093d6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80093da:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80093de:	2300      	movs	r3, #0
 80093e0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80093e4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80093e8:	460b      	mov	r3, r1
 80093ea:	4313      	orrs	r3, r2
 80093ec:	d051      	beq.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80093ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80093f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80093f8:	d035      	beq.n	8009466 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80093fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80093fe:	d82e      	bhi.n	800945e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009400:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009404:	d031      	beq.n	800946a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8009406:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800940a:	d828      	bhi.n	800945e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800940c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009410:	d01a      	beq.n	8009448 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8009412:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009416:	d822      	bhi.n	800945e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009418:	2b00      	cmp	r3, #0
 800941a:	d003      	beq.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800941c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009420:	d007      	beq.n	8009432 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8009422:	e01c      	b.n	800945e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009424:	4b4b      	ldr	r3, [pc, #300]	@ (8009554 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009428:	4a4a      	ldr	r2, [pc, #296]	@ (8009554 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800942a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800942e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009430:	e01c      	b.n	800946c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009436:	3308      	adds	r3, #8
 8009438:	2100      	movs	r1, #0
 800943a:	4618      	mov	r0, r3
 800943c:	f002 f940 	bl	800b6c0 <RCCEx_PLL2_Config>
 8009440:	4603      	mov	r3, r0
 8009442:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009446:	e011      	b.n	800946c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009448:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800944c:	3328      	adds	r3, #40	@ 0x28
 800944e:	2100      	movs	r1, #0
 8009450:	4618      	mov	r0, r3
 8009452:	f002 f9e7 	bl	800b824 <RCCEx_PLL3_Config>
 8009456:	4603      	mov	r3, r0
 8009458:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800945c:	e006      	b.n	800946c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800945e:	2301      	movs	r3, #1
 8009460:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009464:	e002      	b.n	800946c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009466:	bf00      	nop
 8009468:	e000      	b.n	800946c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800946a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800946c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009470:	2b00      	cmp	r3, #0
 8009472:	d10a      	bne.n	800948a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009474:	4b37      	ldr	r3, [pc, #220]	@ (8009554 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009476:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009478:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800947c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009480:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009482:	4a34      	ldr	r2, [pc, #208]	@ (8009554 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009484:	430b      	orrs	r3, r1
 8009486:	6513      	str	r3, [r2, #80]	@ 0x50
 8009488:	e003      	b.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800948a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800948e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009492:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800949a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800949e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80094a2:	2300      	movs	r3, #0
 80094a4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80094a8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80094ac:	460b      	mov	r3, r1
 80094ae:	4313      	orrs	r3, r2
 80094b0:	d056      	beq.n	8009560 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80094b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80094b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80094bc:	d033      	beq.n	8009526 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80094be:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80094c2:	d82c      	bhi.n	800951e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80094c4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80094c8:	d02f      	beq.n	800952a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80094ca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80094ce:	d826      	bhi.n	800951e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80094d0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80094d4:	d02b      	beq.n	800952e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80094d6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80094da:	d820      	bhi.n	800951e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80094dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80094e0:	d012      	beq.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80094e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80094e6:	d81a      	bhi.n	800951e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d022      	beq.n	8009532 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80094ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80094f0:	d115      	bne.n	800951e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80094f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094f6:	3308      	adds	r3, #8
 80094f8:	2101      	movs	r1, #1
 80094fa:	4618      	mov	r0, r3
 80094fc:	f002 f8e0 	bl	800b6c0 <RCCEx_PLL2_Config>
 8009500:	4603      	mov	r3, r0
 8009502:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009506:	e015      	b.n	8009534 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009508:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800950c:	3328      	adds	r3, #40	@ 0x28
 800950e:	2101      	movs	r1, #1
 8009510:	4618      	mov	r0, r3
 8009512:	f002 f987 	bl	800b824 <RCCEx_PLL3_Config>
 8009516:	4603      	mov	r3, r0
 8009518:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800951c:	e00a      	b.n	8009534 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800951e:	2301      	movs	r3, #1
 8009520:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009524:	e006      	b.n	8009534 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009526:	bf00      	nop
 8009528:	e004      	b.n	8009534 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800952a:	bf00      	nop
 800952c:	e002      	b.n	8009534 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800952e:	bf00      	nop
 8009530:	e000      	b.n	8009534 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009532:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009534:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009538:	2b00      	cmp	r3, #0
 800953a:	d10d      	bne.n	8009558 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800953c:	4b05      	ldr	r3, [pc, #20]	@ (8009554 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800953e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009540:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8009544:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009548:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800954a:	4a02      	ldr	r2, [pc, #8]	@ (8009554 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800954c:	430b      	orrs	r3, r1
 800954e:	6513      	str	r3, [r2, #80]	@ 0x50
 8009550:	e006      	b.n	8009560 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009552:	bf00      	nop
 8009554:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009558:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800955c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009560:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009568:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800956c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009570:	2300      	movs	r3, #0
 8009572:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009576:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800957a:	460b      	mov	r3, r1
 800957c:	4313      	orrs	r3, r2
 800957e:	d055      	beq.n	800962c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009580:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009584:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009588:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800958c:	d033      	beq.n	80095f6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800958e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009592:	d82c      	bhi.n	80095ee <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009594:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009598:	d02f      	beq.n	80095fa <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800959a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800959e:	d826      	bhi.n	80095ee <HAL_RCCEx_PeriphCLKConfig+0x662>
 80095a0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80095a4:	d02b      	beq.n	80095fe <HAL_RCCEx_PeriphCLKConfig+0x672>
 80095a6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80095aa:	d820      	bhi.n	80095ee <HAL_RCCEx_PeriphCLKConfig+0x662>
 80095ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80095b0:	d012      	beq.n	80095d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80095b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80095b6:	d81a      	bhi.n	80095ee <HAL_RCCEx_PeriphCLKConfig+0x662>
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d022      	beq.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80095bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80095c0:	d115      	bne.n	80095ee <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80095c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095c6:	3308      	adds	r3, #8
 80095c8:	2101      	movs	r1, #1
 80095ca:	4618      	mov	r0, r3
 80095cc:	f002 f878 	bl	800b6c0 <RCCEx_PLL2_Config>
 80095d0:	4603      	mov	r3, r0
 80095d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80095d6:	e015      	b.n	8009604 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80095d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095dc:	3328      	adds	r3, #40	@ 0x28
 80095de:	2101      	movs	r1, #1
 80095e0:	4618      	mov	r0, r3
 80095e2:	f002 f91f 	bl	800b824 <RCCEx_PLL3_Config>
 80095e6:	4603      	mov	r3, r0
 80095e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80095ec:	e00a      	b.n	8009604 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80095ee:	2301      	movs	r3, #1
 80095f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80095f4:	e006      	b.n	8009604 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80095f6:	bf00      	nop
 80095f8:	e004      	b.n	8009604 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80095fa:	bf00      	nop
 80095fc:	e002      	b.n	8009604 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80095fe:	bf00      	nop
 8009600:	e000      	b.n	8009604 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009602:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009604:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009608:	2b00      	cmp	r3, #0
 800960a:	d10b      	bne.n	8009624 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800960c:	4ba3      	ldr	r3, [pc, #652]	@ (800989c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800960e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009610:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009614:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009618:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800961c:	4a9f      	ldr	r2, [pc, #636]	@ (800989c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800961e:	430b      	orrs	r3, r1
 8009620:	6593      	str	r3, [r2, #88]	@ 0x58
 8009622:	e003      	b.n	800962c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009624:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009628:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800962c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009634:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8009638:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800963c:	2300      	movs	r3, #0
 800963e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009642:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009646:	460b      	mov	r3, r1
 8009648:	4313      	orrs	r3, r2
 800964a:	d037      	beq.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800964c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009650:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009652:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009656:	d00e      	beq.n	8009676 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8009658:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800965c:	d816      	bhi.n	800968c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800965e:	2b00      	cmp	r3, #0
 8009660:	d018      	beq.n	8009694 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8009662:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009666:	d111      	bne.n	800968c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009668:	4b8c      	ldr	r3, [pc, #560]	@ (800989c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800966a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800966c:	4a8b      	ldr	r2, [pc, #556]	@ (800989c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800966e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009672:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009674:	e00f      	b.n	8009696 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009676:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800967a:	3308      	adds	r3, #8
 800967c:	2101      	movs	r1, #1
 800967e:	4618      	mov	r0, r3
 8009680:	f002 f81e 	bl	800b6c0 <RCCEx_PLL2_Config>
 8009684:	4603      	mov	r3, r0
 8009686:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800968a:	e004      	b.n	8009696 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800968c:	2301      	movs	r3, #1
 800968e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009692:	e000      	b.n	8009696 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8009694:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009696:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800969a:	2b00      	cmp	r3, #0
 800969c:	d10a      	bne.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800969e:	4b7f      	ldr	r3, [pc, #508]	@ (800989c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096a2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80096a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80096ac:	4a7b      	ldr	r2, [pc, #492]	@ (800989c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096ae:	430b      	orrs	r3, r1
 80096b0:	6513      	str	r3, [r2, #80]	@ 0x50
 80096b2:	e003      	b.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80096b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80096bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80096c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80096cc:	2300      	movs	r3, #0
 80096ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80096d2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80096d6:	460b      	mov	r3, r1
 80096d8:	4313      	orrs	r3, r2
 80096da:	d039      	beq.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80096dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80096e2:	2b03      	cmp	r3, #3
 80096e4:	d81c      	bhi.n	8009720 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80096e6:	a201      	add	r2, pc, #4	@ (adr r2, 80096ec <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80096e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096ec:	08009729 	.word	0x08009729
 80096f0:	080096fd 	.word	0x080096fd
 80096f4:	0800970b 	.word	0x0800970b
 80096f8:	08009729 	.word	0x08009729
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096fc:	4b67      	ldr	r3, [pc, #412]	@ (800989c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009700:	4a66      	ldr	r2, [pc, #408]	@ (800989c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009702:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009706:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009708:	e00f      	b.n	800972a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800970a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800970e:	3308      	adds	r3, #8
 8009710:	2102      	movs	r1, #2
 8009712:	4618      	mov	r0, r3
 8009714:	f001 ffd4 	bl	800b6c0 <RCCEx_PLL2_Config>
 8009718:	4603      	mov	r3, r0
 800971a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800971e:	e004      	b.n	800972a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009720:	2301      	movs	r3, #1
 8009722:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009726:	e000      	b.n	800972a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8009728:	bf00      	nop
    }

    if (ret == HAL_OK)
 800972a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800972e:	2b00      	cmp	r3, #0
 8009730:	d10a      	bne.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009732:	4b5a      	ldr	r3, [pc, #360]	@ (800989c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009736:	f023 0103 	bic.w	r1, r3, #3
 800973a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800973e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009740:	4a56      	ldr	r2, [pc, #344]	@ (800989c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009742:	430b      	orrs	r3, r1
 8009744:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009746:	e003      	b.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009748:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800974c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009750:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009758:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800975c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009760:	2300      	movs	r3, #0
 8009762:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009766:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800976a:	460b      	mov	r3, r1
 800976c:	4313      	orrs	r3, r2
 800976e:	f000 809f 	beq.w	80098b0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009772:	4b4b      	ldr	r3, [pc, #300]	@ (80098a0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	4a4a      	ldr	r2, [pc, #296]	@ (80098a0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009778:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800977c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800977e:	f7f9 fc63 	bl	8003048 <HAL_GetTick>
 8009782:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009786:	e00b      	b.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009788:	f7f9 fc5e 	bl	8003048 <HAL_GetTick>
 800978c:	4602      	mov	r2, r0
 800978e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009792:	1ad3      	subs	r3, r2, r3
 8009794:	2b64      	cmp	r3, #100	@ 0x64
 8009796:	d903      	bls.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8009798:	2303      	movs	r3, #3
 800979a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800979e:	e005      	b.n	80097ac <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80097a0:	4b3f      	ldr	r3, [pc, #252]	@ (80098a0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d0ed      	beq.n	8009788 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80097ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d179      	bne.n	80098a8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80097b4:	4b39      	ldr	r3, [pc, #228]	@ (800989c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80097b6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80097b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80097c0:	4053      	eors	r3, r2
 80097c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d015      	beq.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80097ca:	4b34      	ldr	r3, [pc, #208]	@ (800989c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80097cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80097d2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80097d6:	4b31      	ldr	r3, [pc, #196]	@ (800989c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80097d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097da:	4a30      	ldr	r2, [pc, #192]	@ (800989c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80097dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80097e0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80097e2:	4b2e      	ldr	r3, [pc, #184]	@ (800989c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80097e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097e6:	4a2d      	ldr	r2, [pc, #180]	@ (800989c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80097e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80097ec:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80097ee:	4a2b      	ldr	r2, [pc, #172]	@ (800989c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80097f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80097f4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80097f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80097fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009802:	d118      	bne.n	8009836 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009804:	f7f9 fc20 	bl	8003048 <HAL_GetTick>
 8009808:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800980c:	e00d      	b.n	800982a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800980e:	f7f9 fc1b 	bl	8003048 <HAL_GetTick>
 8009812:	4602      	mov	r2, r0
 8009814:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009818:	1ad2      	subs	r2, r2, r3
 800981a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800981e:	429a      	cmp	r2, r3
 8009820:	d903      	bls.n	800982a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8009822:	2303      	movs	r3, #3
 8009824:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8009828:	e005      	b.n	8009836 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800982a:	4b1c      	ldr	r3, [pc, #112]	@ (800989c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800982c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800982e:	f003 0302 	and.w	r3, r3, #2
 8009832:	2b00      	cmp	r3, #0
 8009834:	d0eb      	beq.n	800980e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8009836:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800983a:	2b00      	cmp	r3, #0
 800983c:	d129      	bne.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800983e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009842:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009846:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800984a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800984e:	d10e      	bne.n	800986e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8009850:	4b12      	ldr	r3, [pc, #72]	@ (800989c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009852:	691b      	ldr	r3, [r3, #16]
 8009854:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8009858:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800985c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009860:	091a      	lsrs	r2, r3, #4
 8009862:	4b10      	ldr	r3, [pc, #64]	@ (80098a4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8009864:	4013      	ands	r3, r2
 8009866:	4a0d      	ldr	r2, [pc, #52]	@ (800989c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009868:	430b      	orrs	r3, r1
 800986a:	6113      	str	r3, [r2, #16]
 800986c:	e005      	b.n	800987a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800986e:	4b0b      	ldr	r3, [pc, #44]	@ (800989c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009870:	691b      	ldr	r3, [r3, #16]
 8009872:	4a0a      	ldr	r2, [pc, #40]	@ (800989c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009874:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009878:	6113      	str	r3, [r2, #16]
 800987a:	4b08      	ldr	r3, [pc, #32]	@ (800989c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800987c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800987e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009882:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009886:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800988a:	4a04      	ldr	r2, [pc, #16]	@ (800989c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800988c:	430b      	orrs	r3, r1
 800988e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009890:	e00e      	b.n	80098b0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009892:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009896:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800989a:	e009      	b.n	80098b0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800989c:	58024400 	.word	0x58024400
 80098a0:	58024800 	.word	0x58024800
 80098a4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80098ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80098b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b8:	f002 0301 	and.w	r3, r2, #1
 80098bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80098c0:	2300      	movs	r3, #0
 80098c2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80098c6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80098ca:	460b      	mov	r3, r1
 80098cc:	4313      	orrs	r3, r2
 80098ce:	f000 8089 	beq.w	80099e4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80098d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80098d8:	2b28      	cmp	r3, #40	@ 0x28
 80098da:	d86b      	bhi.n	80099b4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80098dc:	a201      	add	r2, pc, #4	@ (adr r2, 80098e4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80098de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098e2:	bf00      	nop
 80098e4:	080099bd 	.word	0x080099bd
 80098e8:	080099b5 	.word	0x080099b5
 80098ec:	080099b5 	.word	0x080099b5
 80098f0:	080099b5 	.word	0x080099b5
 80098f4:	080099b5 	.word	0x080099b5
 80098f8:	080099b5 	.word	0x080099b5
 80098fc:	080099b5 	.word	0x080099b5
 8009900:	080099b5 	.word	0x080099b5
 8009904:	08009989 	.word	0x08009989
 8009908:	080099b5 	.word	0x080099b5
 800990c:	080099b5 	.word	0x080099b5
 8009910:	080099b5 	.word	0x080099b5
 8009914:	080099b5 	.word	0x080099b5
 8009918:	080099b5 	.word	0x080099b5
 800991c:	080099b5 	.word	0x080099b5
 8009920:	080099b5 	.word	0x080099b5
 8009924:	0800999f 	.word	0x0800999f
 8009928:	080099b5 	.word	0x080099b5
 800992c:	080099b5 	.word	0x080099b5
 8009930:	080099b5 	.word	0x080099b5
 8009934:	080099b5 	.word	0x080099b5
 8009938:	080099b5 	.word	0x080099b5
 800993c:	080099b5 	.word	0x080099b5
 8009940:	080099b5 	.word	0x080099b5
 8009944:	080099bd 	.word	0x080099bd
 8009948:	080099b5 	.word	0x080099b5
 800994c:	080099b5 	.word	0x080099b5
 8009950:	080099b5 	.word	0x080099b5
 8009954:	080099b5 	.word	0x080099b5
 8009958:	080099b5 	.word	0x080099b5
 800995c:	080099b5 	.word	0x080099b5
 8009960:	080099b5 	.word	0x080099b5
 8009964:	080099bd 	.word	0x080099bd
 8009968:	080099b5 	.word	0x080099b5
 800996c:	080099b5 	.word	0x080099b5
 8009970:	080099b5 	.word	0x080099b5
 8009974:	080099b5 	.word	0x080099b5
 8009978:	080099b5 	.word	0x080099b5
 800997c:	080099b5 	.word	0x080099b5
 8009980:	080099b5 	.word	0x080099b5
 8009984:	080099bd 	.word	0x080099bd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009988:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800998c:	3308      	adds	r3, #8
 800998e:	2101      	movs	r1, #1
 8009990:	4618      	mov	r0, r3
 8009992:	f001 fe95 	bl	800b6c0 <RCCEx_PLL2_Config>
 8009996:	4603      	mov	r3, r0
 8009998:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800999c:	e00f      	b.n	80099be <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800999e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099a2:	3328      	adds	r3, #40	@ 0x28
 80099a4:	2101      	movs	r1, #1
 80099a6:	4618      	mov	r0, r3
 80099a8:	f001 ff3c 	bl	800b824 <RCCEx_PLL3_Config>
 80099ac:	4603      	mov	r3, r0
 80099ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80099b2:	e004      	b.n	80099be <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80099b4:	2301      	movs	r3, #1
 80099b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80099ba:	e000      	b.n	80099be <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80099bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d10a      	bne.n	80099dc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80099c6:	4bbf      	ldr	r3, [pc, #764]	@ (8009cc4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80099c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099ca:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80099ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80099d4:	4abb      	ldr	r2, [pc, #748]	@ (8009cc4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80099d6:	430b      	orrs	r3, r1
 80099d8:	6553      	str	r3, [r2, #84]	@ 0x54
 80099da:	e003      	b.n	80099e4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80099e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80099e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ec:	f002 0302 	and.w	r3, r2, #2
 80099f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80099f4:	2300      	movs	r3, #0
 80099f6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80099fa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80099fe:	460b      	mov	r3, r1
 8009a00:	4313      	orrs	r3, r2
 8009a02:	d041      	beq.n	8009a88 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a08:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009a0a:	2b05      	cmp	r3, #5
 8009a0c:	d824      	bhi.n	8009a58 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8009a0e:	a201      	add	r2, pc, #4	@ (adr r2, 8009a14 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8009a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a14:	08009a61 	.word	0x08009a61
 8009a18:	08009a2d 	.word	0x08009a2d
 8009a1c:	08009a43 	.word	0x08009a43
 8009a20:	08009a61 	.word	0x08009a61
 8009a24:	08009a61 	.word	0x08009a61
 8009a28:	08009a61 	.word	0x08009a61
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a30:	3308      	adds	r3, #8
 8009a32:	2101      	movs	r1, #1
 8009a34:	4618      	mov	r0, r3
 8009a36:	f001 fe43 	bl	800b6c0 <RCCEx_PLL2_Config>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009a40:	e00f      	b.n	8009a62 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a46:	3328      	adds	r3, #40	@ 0x28
 8009a48:	2101      	movs	r1, #1
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f001 feea 	bl	800b824 <RCCEx_PLL3_Config>
 8009a50:	4603      	mov	r3, r0
 8009a52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009a56:	e004      	b.n	8009a62 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a58:	2301      	movs	r3, #1
 8009a5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009a5e:	e000      	b.n	8009a62 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8009a60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d10a      	bne.n	8009a80 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009a6a:	4b96      	ldr	r3, [pc, #600]	@ (8009cc4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009a6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a6e:	f023 0107 	bic.w	r1, r3, #7
 8009a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a76:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009a78:	4a92      	ldr	r2, [pc, #584]	@ (8009cc4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009a7a:	430b      	orrs	r3, r1
 8009a7c:	6553      	str	r3, [r2, #84]	@ 0x54
 8009a7e:	e003      	b.n	8009a88 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a90:	f002 0304 	and.w	r3, r2, #4
 8009a94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009a98:	2300      	movs	r3, #0
 8009a9a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009a9e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009aa2:	460b      	mov	r3, r1
 8009aa4:	4313      	orrs	r3, r2
 8009aa6:	d044      	beq.n	8009b32 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009aac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009ab0:	2b05      	cmp	r3, #5
 8009ab2:	d825      	bhi.n	8009b00 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8009ab4:	a201      	add	r2, pc, #4	@ (adr r2, 8009abc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8009ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aba:	bf00      	nop
 8009abc:	08009b09 	.word	0x08009b09
 8009ac0:	08009ad5 	.word	0x08009ad5
 8009ac4:	08009aeb 	.word	0x08009aeb
 8009ac8:	08009b09 	.word	0x08009b09
 8009acc:	08009b09 	.word	0x08009b09
 8009ad0:	08009b09 	.word	0x08009b09
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ad8:	3308      	adds	r3, #8
 8009ada:	2101      	movs	r1, #1
 8009adc:	4618      	mov	r0, r3
 8009ade:	f001 fdef 	bl	800b6c0 <RCCEx_PLL2_Config>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009ae8:	e00f      	b.n	8009b0a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009aee:	3328      	adds	r3, #40	@ 0x28
 8009af0:	2101      	movs	r1, #1
 8009af2:	4618      	mov	r0, r3
 8009af4:	f001 fe96 	bl	800b824 <RCCEx_PLL3_Config>
 8009af8:	4603      	mov	r3, r0
 8009afa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009afe:	e004      	b.n	8009b0a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b00:	2301      	movs	r3, #1
 8009b02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009b06:	e000      	b.n	8009b0a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8009b08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d10b      	bne.n	8009b2a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009b12:	4b6c      	ldr	r3, [pc, #432]	@ (8009cc4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009b14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b16:	f023 0107 	bic.w	r1, r3, #7
 8009b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009b22:	4a68      	ldr	r2, [pc, #416]	@ (8009cc4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009b24:	430b      	orrs	r3, r1
 8009b26:	6593      	str	r3, [r2, #88]	@ 0x58
 8009b28:	e003      	b.n	8009b32 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b3a:	f002 0320 	and.w	r3, r2, #32
 8009b3e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009b42:	2300      	movs	r3, #0
 8009b44:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009b48:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009b4c:	460b      	mov	r3, r1
 8009b4e:	4313      	orrs	r3, r2
 8009b50:	d055      	beq.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009b5e:	d033      	beq.n	8009bc8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8009b60:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009b64:	d82c      	bhi.n	8009bc0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009b66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b6a:	d02f      	beq.n	8009bcc <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8009b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b70:	d826      	bhi.n	8009bc0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009b72:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009b76:	d02b      	beq.n	8009bd0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8009b78:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009b7c:	d820      	bhi.n	8009bc0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009b7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b82:	d012      	beq.n	8009baa <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009b84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b88:	d81a      	bhi.n	8009bc0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d022      	beq.n	8009bd4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8009b8e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009b92:	d115      	bne.n	8009bc0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b98:	3308      	adds	r3, #8
 8009b9a:	2100      	movs	r1, #0
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f001 fd8f 	bl	800b6c0 <RCCEx_PLL2_Config>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009ba8:	e015      	b.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bae:	3328      	adds	r3, #40	@ 0x28
 8009bb0:	2102      	movs	r1, #2
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f001 fe36 	bl	800b824 <RCCEx_PLL3_Config>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009bbe:	e00a      	b.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009bc6:	e006      	b.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009bc8:	bf00      	nop
 8009bca:	e004      	b.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009bcc:	bf00      	nop
 8009bce:	e002      	b.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009bd0:	bf00      	nop
 8009bd2:	e000      	b.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009bd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d10b      	bne.n	8009bf6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009bde:	4b39      	ldr	r3, [pc, #228]	@ (8009cc4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009be0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009be2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009be6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bee:	4a35      	ldr	r2, [pc, #212]	@ (8009cc4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009bf0:	430b      	orrs	r3, r1
 8009bf2:	6553      	str	r3, [r2, #84]	@ 0x54
 8009bf4:	e003      	b.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bf6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009bfa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c06:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8009c0a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009c0e:	2300      	movs	r3, #0
 8009c10:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009c14:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8009c18:	460b      	mov	r3, r1
 8009c1a:	4313      	orrs	r3, r2
 8009c1c:	d058      	beq.n	8009cd0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c22:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009c26:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009c2a:	d033      	beq.n	8009c94 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009c2c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009c30:	d82c      	bhi.n	8009c8c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009c32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c36:	d02f      	beq.n	8009c98 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8009c38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c3c:	d826      	bhi.n	8009c8c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009c3e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009c42:	d02b      	beq.n	8009c9c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8009c44:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009c48:	d820      	bhi.n	8009c8c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009c4a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009c4e:	d012      	beq.n	8009c76 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009c50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009c54:	d81a      	bhi.n	8009c8c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d022      	beq.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8009c5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009c5e:	d115      	bne.n	8009c8c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c64:	3308      	adds	r3, #8
 8009c66:	2100      	movs	r1, #0
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f001 fd29 	bl	800b6c0 <RCCEx_PLL2_Config>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009c74:	e015      	b.n	8009ca2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009c76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c7a:	3328      	adds	r3, #40	@ 0x28
 8009c7c:	2102      	movs	r1, #2
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f001 fdd0 	bl	800b824 <RCCEx_PLL3_Config>
 8009c84:	4603      	mov	r3, r0
 8009c86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009c8a:	e00a      	b.n	8009ca2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009c92:	e006      	b.n	8009ca2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009c94:	bf00      	nop
 8009c96:	e004      	b.n	8009ca2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009c98:	bf00      	nop
 8009c9a:	e002      	b.n	8009ca2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009c9c:	bf00      	nop
 8009c9e:	e000      	b.n	8009ca2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009ca0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ca2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d10e      	bne.n	8009cc8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009caa:	4b06      	ldr	r3, [pc, #24]	@ (8009cc4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009cac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009cae:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8009cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009cba:	4a02      	ldr	r2, [pc, #8]	@ (8009cc4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009cbc:	430b      	orrs	r3, r1
 8009cbe:	6593      	str	r3, [r2, #88]	@ 0x58
 8009cc0:	e006      	b.n	8009cd0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8009cc2:	bf00      	nop
 8009cc4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ccc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009cd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009cdc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009ce6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8009cea:	460b      	mov	r3, r1
 8009cec:	4313      	orrs	r3, r2
 8009cee:	d055      	beq.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cf4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009cf8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009cfc:	d033      	beq.n	8009d66 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8009cfe:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009d02:	d82c      	bhi.n	8009d5e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009d04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009d08:	d02f      	beq.n	8009d6a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8009d0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009d0e:	d826      	bhi.n	8009d5e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009d10:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009d14:	d02b      	beq.n	8009d6e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8009d16:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009d1a:	d820      	bhi.n	8009d5e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009d1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009d20:	d012      	beq.n	8009d48 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8009d22:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009d26:	d81a      	bhi.n	8009d5e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d022      	beq.n	8009d72 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8009d2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d30:	d115      	bne.n	8009d5e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d36:	3308      	adds	r3, #8
 8009d38:	2100      	movs	r1, #0
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f001 fcc0 	bl	800b6c0 <RCCEx_PLL2_Config>
 8009d40:	4603      	mov	r3, r0
 8009d42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009d46:	e015      	b.n	8009d74 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d4c:	3328      	adds	r3, #40	@ 0x28
 8009d4e:	2102      	movs	r1, #2
 8009d50:	4618      	mov	r0, r3
 8009d52:	f001 fd67 	bl	800b824 <RCCEx_PLL3_Config>
 8009d56:	4603      	mov	r3, r0
 8009d58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009d5c:	e00a      	b.n	8009d74 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d5e:	2301      	movs	r3, #1
 8009d60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009d64:	e006      	b.n	8009d74 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009d66:	bf00      	nop
 8009d68:	e004      	b.n	8009d74 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009d6a:	bf00      	nop
 8009d6c:	e002      	b.n	8009d74 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009d6e:	bf00      	nop
 8009d70:	e000      	b.n	8009d74 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009d72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d10b      	bne.n	8009d94 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009d7c:	4ba1      	ldr	r3, [pc, #644]	@ (800a004 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d80:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8009d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d88:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009d8c:	4a9d      	ldr	r2, [pc, #628]	@ (800a004 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d8e:	430b      	orrs	r3, r1
 8009d90:	6593      	str	r3, [r2, #88]	@ 0x58
 8009d92:	e003      	b.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da4:	f002 0308 	and.w	r3, r2, #8
 8009da8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009dac:	2300      	movs	r3, #0
 8009dae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009db2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009db6:	460b      	mov	r3, r1
 8009db8:	4313      	orrs	r3, r2
 8009dba:	d01e      	beq.n	8009dfa <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009dc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009dc8:	d10c      	bne.n	8009de4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dce:	3328      	adds	r3, #40	@ 0x28
 8009dd0:	2102      	movs	r1, #2
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f001 fd26 	bl	800b824 <RCCEx_PLL3_Config>
 8009dd8:	4603      	mov	r3, r0
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d002      	beq.n	8009de4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8009dde:	2301      	movs	r3, #1
 8009de0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009de4:	4b87      	ldr	r3, [pc, #540]	@ (800a004 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009de6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009de8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009df0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009df4:	4a83      	ldr	r2, [pc, #524]	@ (800a004 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009df6:	430b      	orrs	r3, r1
 8009df8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e02:	f002 0310 	and.w	r3, r2, #16
 8009e06:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009e10:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8009e14:	460b      	mov	r3, r1
 8009e16:	4313      	orrs	r3, r2
 8009e18:	d01e      	beq.n	8009e58 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009e22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e26:	d10c      	bne.n	8009e42 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e2c:	3328      	adds	r3, #40	@ 0x28
 8009e2e:	2102      	movs	r1, #2
 8009e30:	4618      	mov	r0, r3
 8009e32:	f001 fcf7 	bl	800b824 <RCCEx_PLL3_Config>
 8009e36:	4603      	mov	r3, r0
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d002      	beq.n	8009e42 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009e42:	4b70      	ldr	r3, [pc, #448]	@ (800a004 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e46:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009e52:	4a6c      	ldr	r2, [pc, #432]	@ (800a004 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e54:	430b      	orrs	r3, r1
 8009e56:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009e58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e60:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009e64:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009e68:	2300      	movs	r3, #0
 8009e6a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009e6e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009e72:	460b      	mov	r3, r1
 8009e74:	4313      	orrs	r3, r2
 8009e76:	d03e      	beq.n	8009ef6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e7c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009e80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009e84:	d022      	beq.n	8009ecc <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8009e86:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009e8a:	d81b      	bhi.n	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d003      	beq.n	8009e98 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8009e90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e94:	d00b      	beq.n	8009eae <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8009e96:	e015      	b.n	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e9c:	3308      	adds	r3, #8
 8009e9e:	2100      	movs	r1, #0
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f001 fc0d 	bl	800b6c0 <RCCEx_PLL2_Config>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009eac:	e00f      	b.n	8009ece <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009eb2:	3328      	adds	r3, #40	@ 0x28
 8009eb4:	2102      	movs	r1, #2
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f001 fcb4 	bl	800b824 <RCCEx_PLL3_Config>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009ec2:	e004      	b.n	8009ece <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009eca:	e000      	b.n	8009ece <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8009ecc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ece:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d10b      	bne.n	8009eee <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009ed6:	4b4b      	ldr	r3, [pc, #300]	@ (800a004 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ed8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009eda:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ee2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009ee6:	4a47      	ldr	r2, [pc, #284]	@ (800a004 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ee8:	430b      	orrs	r3, r1
 8009eea:	6593      	str	r3, [r2, #88]	@ 0x58
 8009eec:	e003      	b.n	8009ef6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009eee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ef2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009efe:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8009f02:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009f04:	2300      	movs	r3, #0
 8009f06:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009f08:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8009f0c:	460b      	mov	r3, r1
 8009f0e:	4313      	orrs	r3, r2
 8009f10:	d03b      	beq.n	8009f8a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f1a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009f1e:	d01f      	beq.n	8009f60 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8009f20:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009f24:	d818      	bhi.n	8009f58 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8009f26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009f2a:	d003      	beq.n	8009f34 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8009f2c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009f30:	d007      	beq.n	8009f42 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8009f32:	e011      	b.n	8009f58 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f34:	4b33      	ldr	r3, [pc, #204]	@ (800a004 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f38:	4a32      	ldr	r2, [pc, #200]	@ (800a004 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009f3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009f3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009f40:	e00f      	b.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f46:	3328      	adds	r3, #40	@ 0x28
 8009f48:	2101      	movs	r1, #1
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f001 fc6a 	bl	800b824 <RCCEx_PLL3_Config>
 8009f50:	4603      	mov	r3, r0
 8009f52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8009f56:	e004      	b.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f58:	2301      	movs	r3, #1
 8009f5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009f5e:	e000      	b.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8009f60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d10b      	bne.n	8009f82 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009f6a:	4b26      	ldr	r3, [pc, #152]	@ (800a004 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009f6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f6e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f7a:	4a22      	ldr	r2, [pc, #136]	@ (800a004 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009f7c:	430b      	orrs	r3, r1
 8009f7e:	6553      	str	r3, [r2, #84]	@ 0x54
 8009f80:	e003      	b.n	8009f8a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f92:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009f96:	673b      	str	r3, [r7, #112]	@ 0x70
 8009f98:	2300      	movs	r3, #0
 8009f9a:	677b      	str	r3, [r7, #116]	@ 0x74
 8009f9c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009fa0:	460b      	mov	r3, r1
 8009fa2:	4313      	orrs	r3, r2
 8009fa4:	d034      	beq.n	800a010 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009faa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d003      	beq.n	8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8009fb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009fb4:	d007      	beq.n	8009fc6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8009fb6:	e011      	b.n	8009fdc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fb8:	4b12      	ldr	r3, [pc, #72]	@ (800a004 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fbc:	4a11      	ldr	r2, [pc, #68]	@ (800a004 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009fbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009fc2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009fc4:	e00e      	b.n	8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fca:	3308      	adds	r3, #8
 8009fcc:	2102      	movs	r1, #2
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f001 fb76 	bl	800b6c0 <RCCEx_PLL2_Config>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009fda:	e003      	b.n	8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8009fdc:	2301      	movs	r3, #1
 8009fde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009fe2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fe4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d10d      	bne.n	800a008 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009fec:	4b05      	ldr	r3, [pc, #20]	@ (800a004 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009fee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009ff0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ff8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ffa:	4a02      	ldr	r2, [pc, #8]	@ (800a004 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ffc:	430b      	orrs	r3, r1
 8009ffe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a000:	e006      	b.n	800a010 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800a002:	bf00      	nop
 800a004:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a008:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a00c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a010:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a014:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a018:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800a01c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a01e:	2300      	movs	r3, #0
 800a020:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a022:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800a026:	460b      	mov	r3, r1
 800a028:	4313      	orrs	r3, r2
 800a02a:	d00c      	beq.n	800a046 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a02c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a030:	3328      	adds	r3, #40	@ 0x28
 800a032:	2102      	movs	r1, #2
 800a034:	4618      	mov	r0, r3
 800a036:	f001 fbf5 	bl	800b824 <RCCEx_PLL3_Config>
 800a03a:	4603      	mov	r3, r0
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d002      	beq.n	800a046 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800a040:	2301      	movs	r3, #1
 800a042:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a046:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a04e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800a052:	663b      	str	r3, [r7, #96]	@ 0x60
 800a054:	2300      	movs	r3, #0
 800a056:	667b      	str	r3, [r7, #100]	@ 0x64
 800a058:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800a05c:	460b      	mov	r3, r1
 800a05e:	4313      	orrs	r3, r2
 800a060:	d038      	beq.n	800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a062:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a066:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a06a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a06e:	d018      	beq.n	800a0a2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800a070:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a074:	d811      	bhi.n	800a09a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a076:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a07a:	d014      	beq.n	800a0a6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800a07c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a080:	d80b      	bhi.n	800a09a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a082:	2b00      	cmp	r3, #0
 800a084:	d011      	beq.n	800a0aa <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800a086:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a08a:	d106      	bne.n	800a09a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a08c:	4bc3      	ldr	r3, [pc, #780]	@ (800a39c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a08e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a090:	4ac2      	ldr	r2, [pc, #776]	@ (800a39c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a092:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a096:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a098:	e008      	b.n	800a0ac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a09a:	2301      	movs	r3, #1
 800a09c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a0a0:	e004      	b.n	800a0ac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a0a2:	bf00      	nop
 800a0a4:	e002      	b.n	800a0ac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a0a6:	bf00      	nop
 800a0a8:	e000      	b.n	800a0ac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a0aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a0ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d10b      	bne.n	800a0cc <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a0b4:	4bb9      	ldr	r3, [pc, #740]	@ (800a39c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a0b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0b8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a0bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a0c4:	4ab5      	ldr	r2, [pc, #724]	@ (800a39c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a0c6:	430b      	orrs	r3, r1
 800a0c8:	6553      	str	r3, [r2, #84]	@ 0x54
 800a0ca:	e003      	b.n	800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a0d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a0d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0dc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800a0e0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a0e6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800a0ea:	460b      	mov	r3, r1
 800a0ec:	4313      	orrs	r3, r2
 800a0ee:	d009      	beq.n	800a104 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a0f0:	4baa      	ldr	r3, [pc, #680]	@ (800a39c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a0f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a0f4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a0f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a0fe:	4aa7      	ldr	r2, [pc, #668]	@ (800a39c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a100:	430b      	orrs	r3, r1
 800a102:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a104:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a10c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800a110:	653b      	str	r3, [r7, #80]	@ 0x50
 800a112:	2300      	movs	r3, #0
 800a114:	657b      	str	r3, [r7, #84]	@ 0x54
 800a116:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800a11a:	460b      	mov	r3, r1
 800a11c:	4313      	orrs	r3, r2
 800a11e:	d00a      	beq.n	800a136 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a120:	4b9e      	ldr	r3, [pc, #632]	@ (800a39c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a122:	691b      	ldr	r3, [r3, #16]
 800a124:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800a128:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a12c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a130:	4a9a      	ldr	r2, [pc, #616]	@ (800a39c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a132:	430b      	orrs	r3, r1
 800a134:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a136:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a13e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800a142:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a144:	2300      	movs	r3, #0
 800a146:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a148:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800a14c:	460b      	mov	r3, r1
 800a14e:	4313      	orrs	r3, r2
 800a150:	d009      	beq.n	800a166 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a152:	4b92      	ldr	r3, [pc, #584]	@ (800a39c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a154:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a156:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800a15a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a15e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a160:	4a8e      	ldr	r2, [pc, #568]	@ (800a39c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a162:	430b      	orrs	r3, r1
 800a164:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a16e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800a172:	643b      	str	r3, [r7, #64]	@ 0x40
 800a174:	2300      	movs	r3, #0
 800a176:	647b      	str	r3, [r7, #68]	@ 0x44
 800a178:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800a17c:	460b      	mov	r3, r1
 800a17e:	4313      	orrs	r3, r2
 800a180:	d00e      	beq.n	800a1a0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a182:	4b86      	ldr	r3, [pc, #536]	@ (800a39c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a184:	691b      	ldr	r3, [r3, #16]
 800a186:	4a85      	ldr	r2, [pc, #532]	@ (800a39c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a188:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a18c:	6113      	str	r3, [r2, #16]
 800a18e:	4b83      	ldr	r3, [pc, #524]	@ (800a39c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a190:	6919      	ldr	r1, [r3, #16]
 800a192:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a196:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a19a:	4a80      	ldr	r2, [pc, #512]	@ (800a39c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a19c:	430b      	orrs	r3, r1
 800a19e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a1a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800a1ac:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a1b2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800a1b6:	460b      	mov	r3, r1
 800a1b8:	4313      	orrs	r3, r2
 800a1ba:	d009      	beq.n	800a1d0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a1bc:	4b77      	ldr	r3, [pc, #476]	@ (800a39c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a1be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a1c0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a1c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1ca:	4a74      	ldr	r2, [pc, #464]	@ (800a39c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a1cc:	430b      	orrs	r3, r1
 800a1ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a1d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1d8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800a1dc:	633b      	str	r3, [r7, #48]	@ 0x30
 800a1de:	2300      	movs	r3, #0
 800a1e0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1e2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800a1e6:	460b      	mov	r3, r1
 800a1e8:	4313      	orrs	r3, r2
 800a1ea:	d00a      	beq.n	800a202 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a1ec:	4b6b      	ldr	r3, [pc, #428]	@ (800a39c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a1ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1f0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800a1f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a1fc:	4a67      	ldr	r2, [pc, #412]	@ (800a39c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a1fe:	430b      	orrs	r3, r1
 800a200:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a202:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a20a:	2100      	movs	r1, #0
 800a20c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800a20e:	f003 0301 	and.w	r3, r3, #1
 800a212:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a214:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800a218:	460b      	mov	r3, r1
 800a21a:	4313      	orrs	r3, r2
 800a21c:	d011      	beq.n	800a242 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a21e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a222:	3308      	adds	r3, #8
 800a224:	2100      	movs	r1, #0
 800a226:	4618      	mov	r0, r3
 800a228:	f001 fa4a 	bl	800b6c0 <RCCEx_PLL2_Config>
 800a22c:	4603      	mov	r3, r0
 800a22e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a232:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a236:	2b00      	cmp	r3, #0
 800a238:	d003      	beq.n	800a242 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a23a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a23e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a242:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a24a:	2100      	movs	r1, #0
 800a24c:	6239      	str	r1, [r7, #32]
 800a24e:	f003 0302 	and.w	r3, r3, #2
 800a252:	627b      	str	r3, [r7, #36]	@ 0x24
 800a254:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a258:	460b      	mov	r3, r1
 800a25a:	4313      	orrs	r3, r2
 800a25c:	d011      	beq.n	800a282 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a25e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a262:	3308      	adds	r3, #8
 800a264:	2101      	movs	r1, #1
 800a266:	4618      	mov	r0, r3
 800a268:	f001 fa2a 	bl	800b6c0 <RCCEx_PLL2_Config>
 800a26c:	4603      	mov	r3, r0
 800a26e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a272:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a276:	2b00      	cmp	r3, #0
 800a278:	d003      	beq.n	800a282 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a27a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a27e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a282:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a28a:	2100      	movs	r1, #0
 800a28c:	61b9      	str	r1, [r7, #24]
 800a28e:	f003 0304 	and.w	r3, r3, #4
 800a292:	61fb      	str	r3, [r7, #28]
 800a294:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a298:	460b      	mov	r3, r1
 800a29a:	4313      	orrs	r3, r2
 800a29c:	d011      	beq.n	800a2c2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a29e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2a2:	3308      	adds	r3, #8
 800a2a4:	2102      	movs	r1, #2
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f001 fa0a 	bl	800b6c0 <RCCEx_PLL2_Config>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a2b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d003      	beq.n	800a2c2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a2be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a2c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ca:	2100      	movs	r1, #0
 800a2cc:	6139      	str	r1, [r7, #16]
 800a2ce:	f003 0308 	and.w	r3, r3, #8
 800a2d2:	617b      	str	r3, [r7, #20]
 800a2d4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a2d8:	460b      	mov	r3, r1
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	d011      	beq.n	800a302 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a2de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2e2:	3328      	adds	r3, #40	@ 0x28
 800a2e4:	2100      	movs	r1, #0
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	f001 fa9c 	bl	800b824 <RCCEx_PLL3_Config>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800a2f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d003      	beq.n	800a302 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a2fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a302:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a30a:	2100      	movs	r1, #0
 800a30c:	60b9      	str	r1, [r7, #8]
 800a30e:	f003 0310 	and.w	r3, r3, #16
 800a312:	60fb      	str	r3, [r7, #12]
 800a314:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a318:	460b      	mov	r3, r1
 800a31a:	4313      	orrs	r3, r2
 800a31c:	d011      	beq.n	800a342 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a31e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a322:	3328      	adds	r3, #40	@ 0x28
 800a324:	2101      	movs	r1, #1
 800a326:	4618      	mov	r0, r3
 800a328:	f001 fa7c 	bl	800b824 <RCCEx_PLL3_Config>
 800a32c:	4603      	mov	r3, r0
 800a32e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a332:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a336:	2b00      	cmp	r3, #0
 800a338:	d003      	beq.n	800a342 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a33a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a33e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a342:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a34a:	2100      	movs	r1, #0
 800a34c:	6039      	str	r1, [r7, #0]
 800a34e:	f003 0320 	and.w	r3, r3, #32
 800a352:	607b      	str	r3, [r7, #4]
 800a354:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a358:	460b      	mov	r3, r1
 800a35a:	4313      	orrs	r3, r2
 800a35c:	d011      	beq.n	800a382 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a35e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a362:	3328      	adds	r3, #40	@ 0x28
 800a364:	2102      	movs	r1, #2
 800a366:	4618      	mov	r0, r3
 800a368:	f001 fa5c 	bl	800b824 <RCCEx_PLL3_Config>
 800a36c:	4603      	mov	r3, r0
 800a36e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a372:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a376:	2b00      	cmp	r3, #0
 800a378:	d003      	beq.n	800a382 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a37a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a37e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800a382:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800a386:	2b00      	cmp	r3, #0
 800a388:	d101      	bne.n	800a38e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800a38a:	2300      	movs	r3, #0
 800a38c:	e000      	b.n	800a390 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800a38e:	2301      	movs	r3, #1
}
 800a390:	4618      	mov	r0, r3
 800a392:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800a396:	46bd      	mov	sp, r7
 800a398:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a39c:	58024400 	.word	0x58024400

0800a3a0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b090      	sub	sp, #64	@ 0x40
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a3aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3ae:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800a3b2:	430b      	orrs	r3, r1
 800a3b4:	f040 8094 	bne.w	800a4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a3b8:	4b9e      	ldr	r3, [pc, #632]	@ (800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a3ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3bc:	f003 0307 	and.w	r3, r3, #7
 800a3c0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a3c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3c4:	2b04      	cmp	r3, #4
 800a3c6:	f200 8087 	bhi.w	800a4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a3ca:	a201      	add	r2, pc, #4	@ (adr r2, 800a3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a3cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3d0:	0800a3e5 	.word	0x0800a3e5
 800a3d4:	0800a40d 	.word	0x0800a40d
 800a3d8:	0800a435 	.word	0x0800a435
 800a3dc:	0800a4d1 	.word	0x0800a4d1
 800a3e0:	0800a45d 	.word	0x0800a45d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a3e4:	4b93      	ldr	r3, [pc, #588]	@ (800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a3ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a3f0:	d108      	bne.n	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a3f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f001 f810 	bl	800b41c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a3fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a400:	f000 bd45 	b.w	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a404:	2300      	movs	r3, #0
 800a406:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a408:	f000 bd41 	b.w	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a40c:	4b89      	ldr	r3, [pc, #548]	@ (800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a414:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a418:	d108      	bne.n	800a42c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a41a:	f107 0318 	add.w	r3, r7, #24
 800a41e:	4618      	mov	r0, r3
 800a420:	f000 fd54 	bl	800aecc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a424:	69bb      	ldr	r3, [r7, #24]
 800a426:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a428:	f000 bd31 	b.w	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a42c:	2300      	movs	r3, #0
 800a42e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a430:	f000 bd2d 	b.w	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a434:	4b7f      	ldr	r3, [pc, #508]	@ (800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a43c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a440:	d108      	bne.n	800a454 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a442:	f107 030c 	add.w	r3, r7, #12
 800a446:	4618      	mov	r0, r3
 800a448:	f000 fe94 	bl	800b174 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a450:	f000 bd1d 	b.w	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a454:	2300      	movs	r3, #0
 800a456:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a458:	f000 bd19 	b.w	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a45c:	4b75      	ldr	r3, [pc, #468]	@ (800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a45e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a460:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a464:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a466:	4b73      	ldr	r3, [pc, #460]	@ (800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	f003 0304 	and.w	r3, r3, #4
 800a46e:	2b04      	cmp	r3, #4
 800a470:	d10c      	bne.n	800a48c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a472:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a474:	2b00      	cmp	r3, #0
 800a476:	d109      	bne.n	800a48c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a478:	4b6e      	ldr	r3, [pc, #440]	@ (800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	08db      	lsrs	r3, r3, #3
 800a47e:	f003 0303 	and.w	r3, r3, #3
 800a482:	4a6d      	ldr	r2, [pc, #436]	@ (800a638 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a484:	fa22 f303 	lsr.w	r3, r2, r3
 800a488:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a48a:	e01f      	b.n	800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a48c:	4b69      	ldr	r3, [pc, #420]	@ (800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a494:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a498:	d106      	bne.n	800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a49a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a49c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a4a0:	d102      	bne.n	800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a4a2:	4b66      	ldr	r3, [pc, #408]	@ (800a63c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a4a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a4a6:	e011      	b.n	800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a4a8:	4b62      	ldr	r3, [pc, #392]	@ (800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a4b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a4b4:	d106      	bne.n	800a4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a4b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a4bc:	d102      	bne.n	800a4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a4be:	4b60      	ldr	r3, [pc, #384]	@ (800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a4c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a4c2:	e003      	b.n	800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a4c8:	f000 bce1 	b.w	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a4cc:	f000 bcdf 	b.w	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a4d0:	4b5c      	ldr	r3, [pc, #368]	@ (800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a4d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4d4:	f000 bcdb 	b.w	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a4d8:	2300      	movs	r3, #0
 800a4da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4dc:	f000 bcd7 	b.w	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a4e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4e4:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800a4e8:	430b      	orrs	r3, r1
 800a4ea:	f040 80ad 	bne.w	800a648 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800a4ee:	4b51      	ldr	r3, [pc, #324]	@ (800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a4f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a4f2:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800a4f6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a4f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a4fe:	d056      	beq.n	800a5ae <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800a500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a502:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a506:	f200 8090 	bhi.w	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a50a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a50c:	2bc0      	cmp	r3, #192	@ 0xc0
 800a50e:	f000 8088 	beq.w	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800a512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a514:	2bc0      	cmp	r3, #192	@ 0xc0
 800a516:	f200 8088 	bhi.w	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a51a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a51c:	2b80      	cmp	r3, #128	@ 0x80
 800a51e:	d032      	beq.n	800a586 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a522:	2b80      	cmp	r3, #128	@ 0x80
 800a524:	f200 8081 	bhi.w	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d003      	beq.n	800a536 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800a52e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a530:	2b40      	cmp	r3, #64	@ 0x40
 800a532:	d014      	beq.n	800a55e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800a534:	e079      	b.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a536:	4b3f      	ldr	r3, [pc, #252]	@ (800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a53e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a542:	d108      	bne.n	800a556 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a544:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a548:	4618      	mov	r0, r3
 800a54a:	f000 ff67 	bl	800b41c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a54e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a550:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a552:	f000 bc9c 	b.w	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a556:	2300      	movs	r3, #0
 800a558:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a55a:	f000 bc98 	b.w	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a55e:	4b35      	ldr	r3, [pc, #212]	@ (800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a566:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a56a:	d108      	bne.n	800a57e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a56c:	f107 0318 	add.w	r3, r7, #24
 800a570:	4618      	mov	r0, r3
 800a572:	f000 fcab 	bl	800aecc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a576:	69bb      	ldr	r3, [r7, #24]
 800a578:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a57a:	f000 bc88 	b.w	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a57e:	2300      	movs	r3, #0
 800a580:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a582:	f000 bc84 	b.w	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a586:	4b2b      	ldr	r3, [pc, #172]	@ (800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a58e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a592:	d108      	bne.n	800a5a6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a594:	f107 030c 	add.w	r3, r7, #12
 800a598:	4618      	mov	r0, r3
 800a59a:	f000 fdeb 	bl	800b174 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5a2:	f000 bc74 	b.w	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5aa:	f000 bc70 	b.w	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a5ae:	4b21      	ldr	r3, [pc, #132]	@ (800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a5b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a5b2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a5b6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a5b8:	4b1e      	ldr	r3, [pc, #120]	@ (800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f003 0304 	and.w	r3, r3, #4
 800a5c0:	2b04      	cmp	r3, #4
 800a5c2:	d10c      	bne.n	800a5de <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800a5c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d109      	bne.n	800a5de <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a5ca:	4b1a      	ldr	r3, [pc, #104]	@ (800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	08db      	lsrs	r3, r3, #3
 800a5d0:	f003 0303 	and.w	r3, r3, #3
 800a5d4:	4a18      	ldr	r2, [pc, #96]	@ (800a638 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a5d6:	fa22 f303 	lsr.w	r3, r2, r3
 800a5da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a5dc:	e01f      	b.n	800a61e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a5de:	4b15      	ldr	r3, [pc, #84]	@ (800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a5ea:	d106      	bne.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800a5ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a5f2:	d102      	bne.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a5f4:	4b11      	ldr	r3, [pc, #68]	@ (800a63c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a5f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a5f8:	e011      	b.n	800a61e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a5fa:	4b0e      	ldr	r3, [pc, #56]	@ (800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a602:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a606:	d106      	bne.n	800a616 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800a608:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a60a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a60e:	d102      	bne.n	800a616 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a610:	4b0b      	ldr	r3, [pc, #44]	@ (800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a612:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a614:	e003      	b.n	800a61e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a616:	2300      	movs	r3, #0
 800a618:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a61a:	f000 bc38 	b.w	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a61e:	f000 bc36 	b.w	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a622:	4b08      	ldr	r3, [pc, #32]	@ (800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a624:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a626:	f000 bc32 	b.w	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a62a:	2300      	movs	r3, #0
 800a62c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a62e:	f000 bc2e 	b.w	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a632:	bf00      	nop
 800a634:	58024400 	.word	0x58024400
 800a638:	03d09000 	.word	0x03d09000
 800a63c:	003d0900 	.word	0x003d0900
 800a640:	017d7840 	.word	0x017d7840
 800a644:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a648:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a64c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800a650:	430b      	orrs	r3, r1
 800a652:	f040 809c 	bne.w	800a78e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a656:	4b9e      	ldr	r3, [pc, #632]	@ (800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a658:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a65a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a65e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a662:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a666:	d054      	beq.n	800a712 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800a668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a66a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a66e:	f200 808b 	bhi.w	800a788 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a674:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a678:	f000 8083 	beq.w	800a782 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800a67c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a67e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a682:	f200 8081 	bhi.w	800a788 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a688:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a68c:	d02f      	beq.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800a68e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a690:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a694:	d878      	bhi.n	800a788 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d004      	beq.n	800a6a6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800a69c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a69e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a6a2:	d012      	beq.n	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800a6a4:	e070      	b.n	800a788 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a6a6:	4b8a      	ldr	r3, [pc, #552]	@ (800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a6ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a6b2:	d107      	bne.n	800a6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a6b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	f000 feaf 	bl	800b41c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a6be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6c2:	e3e4      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6c8:	e3e1      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a6ca:	4b81      	ldr	r3, [pc, #516]	@ (800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a6d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a6d6:	d107      	bne.n	800a6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6d8:	f107 0318 	add.w	r3, r7, #24
 800a6dc:	4618      	mov	r0, r3
 800a6de:	f000 fbf5 	bl	800aecc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a6e2:	69bb      	ldr	r3, [r7, #24]
 800a6e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6e6:	e3d2      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6ec:	e3cf      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a6ee:	4b78      	ldr	r3, [pc, #480]	@ (800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a6f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a6fa:	d107      	bne.n	800a70c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a6fc:	f107 030c 	add.w	r3, r7, #12
 800a700:	4618      	mov	r0, r3
 800a702:	f000 fd37 	bl	800b174 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a70a:	e3c0      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a70c:	2300      	movs	r3, #0
 800a70e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a710:	e3bd      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a712:	4b6f      	ldr	r3, [pc, #444]	@ (800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a716:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a71a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a71c:	4b6c      	ldr	r3, [pc, #432]	@ (800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f003 0304 	and.w	r3, r3, #4
 800a724:	2b04      	cmp	r3, #4
 800a726:	d10c      	bne.n	800a742 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800a728:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d109      	bne.n	800a742 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a72e:	4b68      	ldr	r3, [pc, #416]	@ (800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	08db      	lsrs	r3, r3, #3
 800a734:	f003 0303 	and.w	r3, r3, #3
 800a738:	4a66      	ldr	r2, [pc, #408]	@ (800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a73a:	fa22 f303 	lsr.w	r3, r2, r3
 800a73e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a740:	e01e      	b.n	800a780 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a742:	4b63      	ldr	r3, [pc, #396]	@ (800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a74a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a74e:	d106      	bne.n	800a75e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800a750:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a752:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a756:	d102      	bne.n	800a75e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a758:	4b5f      	ldr	r3, [pc, #380]	@ (800a8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a75a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a75c:	e010      	b.n	800a780 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a75e:	4b5c      	ldr	r3, [pc, #368]	@ (800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a766:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a76a:	d106      	bne.n	800a77a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800a76c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a76e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a772:	d102      	bne.n	800a77a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a774:	4b59      	ldr	r3, [pc, #356]	@ (800a8dc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a776:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a778:	e002      	b.n	800a780 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a77a:	2300      	movs	r3, #0
 800a77c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a77e:	e386      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a780:	e385      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a782:	4b57      	ldr	r3, [pc, #348]	@ (800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a784:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a786:	e382      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a788:	2300      	movs	r3, #0
 800a78a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a78c:	e37f      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a78e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a792:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800a796:	430b      	orrs	r3, r1
 800a798:	f040 80a7 	bne.w	800a8ea <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a79c:	4b4c      	ldr	r3, [pc, #304]	@ (800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a79e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a7a0:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a7a4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a7a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7a8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a7ac:	d055      	beq.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800a7ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a7b4:	f200 8096 	bhi.w	800a8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a7b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7ba:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a7be:	f000 8084 	beq.w	800a8ca <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800a7c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7c4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a7c8:	f200 808c 	bhi.w	800a8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a7cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a7d2:	d030      	beq.n	800a836 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800a7d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a7da:	f200 8083 	bhi.w	800a8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a7de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d004      	beq.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800a7e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a7ea:	d012      	beq.n	800a812 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800a7ec:	e07a      	b.n	800a8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a7ee:	4b38      	ldr	r3, [pc, #224]	@ (800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a7f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a7fa:	d107      	bne.n	800a80c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a7fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a800:	4618      	mov	r0, r3
 800a802:	f000 fe0b 	bl	800b41c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a808:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a80a:	e340      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a80c:	2300      	movs	r3, #0
 800a80e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a810:	e33d      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a812:	4b2f      	ldr	r3, [pc, #188]	@ (800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a81a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a81e:	d107      	bne.n	800a830 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a820:	f107 0318 	add.w	r3, r7, #24
 800a824:	4618      	mov	r0, r3
 800a826:	f000 fb51 	bl	800aecc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a82a:	69bb      	ldr	r3, [r7, #24]
 800a82c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a82e:	e32e      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a830:	2300      	movs	r3, #0
 800a832:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a834:	e32b      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a836:	4b26      	ldr	r3, [pc, #152]	@ (800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a83e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a842:	d107      	bne.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a844:	f107 030c 	add.w	r3, r7, #12
 800a848:	4618      	mov	r0, r3
 800a84a:	f000 fc93 	bl	800b174 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a852:	e31c      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a854:	2300      	movs	r3, #0
 800a856:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a858:	e319      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a85a:	4b1d      	ldr	r3, [pc, #116]	@ (800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a85c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a85e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a862:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a864:	4b1a      	ldr	r3, [pc, #104]	@ (800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	f003 0304 	and.w	r3, r3, #4
 800a86c:	2b04      	cmp	r3, #4
 800a86e:	d10c      	bne.n	800a88a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800a870:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a872:	2b00      	cmp	r3, #0
 800a874:	d109      	bne.n	800a88a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a876:	4b16      	ldr	r3, [pc, #88]	@ (800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	08db      	lsrs	r3, r3, #3
 800a87c:	f003 0303 	and.w	r3, r3, #3
 800a880:	4a14      	ldr	r2, [pc, #80]	@ (800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a882:	fa22 f303 	lsr.w	r3, r2, r3
 800a886:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a888:	e01e      	b.n	800a8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a88a:	4b11      	ldr	r3, [pc, #68]	@ (800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a892:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a896:	d106      	bne.n	800a8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800a898:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a89a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a89e:	d102      	bne.n	800a8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a8a0:	4b0d      	ldr	r3, [pc, #52]	@ (800a8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a8a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a8a4:	e010      	b.n	800a8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a8a6:	4b0a      	ldr	r3, [pc, #40]	@ (800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a8ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a8b2:	d106      	bne.n	800a8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800a8b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a8ba:	d102      	bne.n	800a8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a8bc:	4b07      	ldr	r3, [pc, #28]	@ (800a8dc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a8be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a8c0:	e002      	b.n	800a8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a8c6:	e2e2      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a8c8:	e2e1      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a8ca:	4b05      	ldr	r3, [pc, #20]	@ (800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a8cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8ce:	e2de      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a8d0:	58024400 	.word	0x58024400
 800a8d4:	03d09000 	.word	0x03d09000
 800a8d8:	003d0900 	.word	0x003d0900
 800a8dc:	017d7840 	.word	0x017d7840
 800a8e0:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8e8:	e2d1      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a8ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a8ee:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800a8f2:	430b      	orrs	r3, r1
 800a8f4:	f040 809c 	bne.w	800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a8f8:	4b93      	ldr	r3, [pc, #588]	@ (800ab48 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a8fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8fc:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a900:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a904:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a908:	d054      	beq.n	800a9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a90a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a90c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a910:	f200 808b 	bhi.w	800aa2a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a916:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a91a:	f000 8083 	beq.w	800aa24 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800a91e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a920:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a924:	f200 8081 	bhi.w	800aa2a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a92a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a92e:	d02f      	beq.n	800a990 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800a930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a932:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a936:	d878      	bhi.n	800aa2a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d004      	beq.n	800a948 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800a93e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a940:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a944:	d012      	beq.n	800a96c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800a946:	e070      	b.n	800aa2a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a948:	4b7f      	ldr	r3, [pc, #508]	@ (800ab48 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a950:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a954:	d107      	bne.n	800a966 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a956:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a95a:	4618      	mov	r0, r3
 800a95c:	f000 fd5e 	bl	800b41c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a962:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a964:	e293      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a966:	2300      	movs	r3, #0
 800a968:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a96a:	e290      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a96c:	4b76      	ldr	r3, [pc, #472]	@ (800ab48 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a974:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a978:	d107      	bne.n	800a98a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a97a:	f107 0318 	add.w	r3, r7, #24
 800a97e:	4618      	mov	r0, r3
 800a980:	f000 faa4 	bl	800aecc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a984:	69bb      	ldr	r3, [r7, #24]
 800a986:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a988:	e281      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a98a:	2300      	movs	r3, #0
 800a98c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a98e:	e27e      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a990:	4b6d      	ldr	r3, [pc, #436]	@ (800ab48 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a998:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a99c:	d107      	bne.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a99e:	f107 030c 	add.w	r3, r7, #12
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	f000 fbe6 	bl	800b174 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9ac:	e26f      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9b2:	e26c      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a9b4:	4b64      	ldr	r3, [pc, #400]	@ (800ab48 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a9b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a9b8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a9bc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a9be:	4b62      	ldr	r3, [pc, #392]	@ (800ab48 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	f003 0304 	and.w	r3, r3, #4
 800a9c6:	2b04      	cmp	r3, #4
 800a9c8:	d10c      	bne.n	800a9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800a9ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d109      	bne.n	800a9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a9d0:	4b5d      	ldr	r3, [pc, #372]	@ (800ab48 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	08db      	lsrs	r3, r3, #3
 800a9d6:	f003 0303 	and.w	r3, r3, #3
 800a9da:	4a5c      	ldr	r2, [pc, #368]	@ (800ab4c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a9dc:	fa22 f303 	lsr.w	r3, r2, r3
 800a9e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a9e2:	e01e      	b.n	800aa22 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a9e4:	4b58      	ldr	r3, [pc, #352]	@ (800ab48 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a9ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a9f0:	d106      	bne.n	800aa00 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800a9f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a9f8:	d102      	bne.n	800aa00 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a9fa:	4b55      	ldr	r3, [pc, #340]	@ (800ab50 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a9fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a9fe:	e010      	b.n	800aa22 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aa00:	4b51      	ldr	r3, [pc, #324]	@ (800ab48 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aa08:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa0c:	d106      	bne.n	800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800aa0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa14:	d102      	bne.n	800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800aa16:	4b4f      	ldr	r3, [pc, #316]	@ (800ab54 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800aa18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aa1a:	e002      	b.n	800aa22 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800aa20:	e235      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aa22:	e234      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800aa24:	4b4c      	ldr	r3, [pc, #304]	@ (800ab58 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800aa26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa28:	e231      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa2e:	e22e      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800aa30:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa34:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800aa38:	430b      	orrs	r3, r1
 800aa3a:	f040 808f 	bne.w	800ab5c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800aa3e:	4b42      	ldr	r3, [pc, #264]	@ (800ab48 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa42:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800aa46:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800aa48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa4a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800aa4e:	d06b      	beq.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800aa50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa52:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800aa56:	d874      	bhi.n	800ab42 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800aa58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa5a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800aa5e:	d056      	beq.n	800ab0e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800aa60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa62:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800aa66:	d86c      	bhi.n	800ab42 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800aa68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa6a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800aa6e:	d03b      	beq.n	800aae8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800aa70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa72:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800aa76:	d864      	bhi.n	800ab42 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800aa78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa7e:	d021      	beq.n	800aac4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800aa80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa82:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa86:	d85c      	bhi.n	800ab42 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800aa88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d004      	beq.n	800aa98 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800aa8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa94:	d004      	beq.n	800aaa0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800aa96:	e054      	b.n	800ab42 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800aa98:	f7fe fa4c 	bl	8008f34 <HAL_RCC_GetPCLK1Freq>
 800aa9c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800aa9e:	e1f6      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aaa0:	4b29      	ldr	r3, [pc, #164]	@ (800ab48 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aaa8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aaac:	d107      	bne.n	800aabe <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aaae:	f107 0318 	add.w	r3, r7, #24
 800aab2:	4618      	mov	r0, r3
 800aab4:	f000 fa0a 	bl	800aecc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800aab8:	69fb      	ldr	r3, [r7, #28]
 800aaba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aabc:	e1e7      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aabe:	2300      	movs	r3, #0
 800aac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aac2:	e1e4      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aac4:	4b20      	ldr	r3, [pc, #128]	@ (800ab48 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aacc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aad0:	d107      	bne.n	800aae2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aad2:	f107 030c 	add.w	r3, r7, #12
 800aad6:	4618      	mov	r0, r3
 800aad8:	f000 fb4c 	bl	800b174 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800aadc:	693b      	ldr	r3, [r7, #16]
 800aade:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aae0:	e1d5      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aae2:	2300      	movs	r3, #0
 800aae4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aae6:	e1d2      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800aae8:	4b17      	ldr	r3, [pc, #92]	@ (800ab48 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	f003 0304 	and.w	r3, r3, #4
 800aaf0:	2b04      	cmp	r3, #4
 800aaf2:	d109      	bne.n	800ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aaf4:	4b14      	ldr	r3, [pc, #80]	@ (800ab48 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	08db      	lsrs	r3, r3, #3
 800aafa:	f003 0303 	and.w	r3, r3, #3
 800aafe:	4a13      	ldr	r2, [pc, #76]	@ (800ab4c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800ab00:	fa22 f303 	lsr.w	r3, r2, r3
 800ab04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab06:	e1c2      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab08:	2300      	movs	r3, #0
 800ab0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab0c:	e1bf      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ab0e:	4b0e      	ldr	r3, [pc, #56]	@ (800ab48 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ab1a:	d102      	bne.n	800ab22 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800ab1c:	4b0c      	ldr	r3, [pc, #48]	@ (800ab50 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ab1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab20:	e1b5      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab22:	2300      	movs	r3, #0
 800ab24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab26:	e1b2      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ab28:	4b07      	ldr	r3, [pc, #28]	@ (800ab48 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ab30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ab34:	d102      	bne.n	800ab3c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800ab36:	4b07      	ldr	r3, [pc, #28]	@ (800ab54 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800ab38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab3a:	e1a8      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab40:	e1a5      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ab42:	2300      	movs	r3, #0
 800ab44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab46:	e1a2      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ab48:	58024400 	.word	0x58024400
 800ab4c:	03d09000 	.word	0x03d09000
 800ab50:	003d0900 	.word	0x003d0900
 800ab54:	017d7840 	.word	0x017d7840
 800ab58:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800ab5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab60:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800ab64:	430b      	orrs	r3, r1
 800ab66:	d173      	bne.n	800ac50 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800ab68:	4b9c      	ldr	r3, [pc, #624]	@ (800addc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ab6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab6c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800ab70:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ab72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ab78:	d02f      	beq.n	800abda <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800ab7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ab80:	d863      	bhi.n	800ac4a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800ab82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d004      	beq.n	800ab92 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800ab88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab8e:	d012      	beq.n	800abb6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800ab90:	e05b      	b.n	800ac4a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab92:	4b92      	ldr	r3, [pc, #584]	@ (800addc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ab9a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ab9e:	d107      	bne.n	800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aba0:	f107 0318 	add.w	r3, r7, #24
 800aba4:	4618      	mov	r0, r3
 800aba6:	f000 f991 	bl	800aecc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800abaa:	69bb      	ldr	r3, [r7, #24]
 800abac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abae:	e16e      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abb0:	2300      	movs	r3, #0
 800abb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abb4:	e16b      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800abb6:	4b89      	ldr	r3, [pc, #548]	@ (800addc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800abbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800abc2:	d107      	bne.n	800abd4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800abc4:	f107 030c 	add.w	r3, r7, #12
 800abc8:	4618      	mov	r0, r3
 800abca:	f000 fad3 	bl	800b174 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800abce:	697b      	ldr	r3, [r7, #20]
 800abd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abd2:	e15c      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abd4:	2300      	movs	r3, #0
 800abd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abd8:	e159      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800abda:	4b80      	ldr	r3, [pc, #512]	@ (800addc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800abdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800abde:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800abe2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800abe4:	4b7d      	ldr	r3, [pc, #500]	@ (800addc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	f003 0304 	and.w	r3, r3, #4
 800abec:	2b04      	cmp	r3, #4
 800abee:	d10c      	bne.n	800ac0a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800abf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d109      	bne.n	800ac0a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800abf6:	4b79      	ldr	r3, [pc, #484]	@ (800addc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	08db      	lsrs	r3, r3, #3
 800abfc:	f003 0303 	and.w	r3, r3, #3
 800ac00:	4a77      	ldr	r2, [pc, #476]	@ (800ade0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800ac02:	fa22 f303 	lsr.w	r3, r2, r3
 800ac06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac08:	e01e      	b.n	800ac48 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ac0a:	4b74      	ldr	r3, [pc, #464]	@ (800addc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac16:	d106      	bne.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800ac18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ac1e:	d102      	bne.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ac20:	4b70      	ldr	r3, [pc, #448]	@ (800ade4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800ac22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac24:	e010      	b.n	800ac48 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ac26:	4b6d      	ldr	r3, [pc, #436]	@ (800addc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ac2e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac32:	d106      	bne.n	800ac42 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800ac34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac3a:	d102      	bne.n	800ac42 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ac3c:	4b6a      	ldr	r3, [pc, #424]	@ (800ade8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800ac3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac40:	e002      	b.n	800ac48 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ac42:	2300      	movs	r3, #0
 800ac44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ac46:	e122      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ac48:	e121      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac4e:	e11e      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800ac50:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac54:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800ac58:	430b      	orrs	r3, r1
 800ac5a:	d133      	bne.n	800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800ac5c:	4b5f      	ldr	r3, [pc, #380]	@ (800addc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ac60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ac64:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ac66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d004      	beq.n	800ac76 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800ac6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac72:	d012      	beq.n	800ac9a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800ac74:	e023      	b.n	800acbe <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ac76:	4b59      	ldr	r3, [pc, #356]	@ (800addc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ac7e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ac82:	d107      	bne.n	800ac94 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ac84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ac88:	4618      	mov	r0, r3
 800ac8a:	f000 fbc7 	bl	800b41c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ac8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac92:	e0fc      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac94:	2300      	movs	r3, #0
 800ac96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac98:	e0f9      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ac9a:	4b50      	ldr	r3, [pc, #320]	@ (800addc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aca2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aca6:	d107      	bne.n	800acb8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aca8:	f107 0318 	add.w	r3, r7, #24
 800acac:	4618      	mov	r0, r3
 800acae:	f000 f90d 	bl	800aecc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800acb2:	6a3b      	ldr	r3, [r7, #32]
 800acb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acb6:	e0ea      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800acb8:	2300      	movs	r3, #0
 800acba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acbc:	e0e7      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800acbe:	2300      	movs	r3, #0
 800acc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acc2:	e0e4      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800acc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800acc8:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800accc:	430b      	orrs	r3, r1
 800acce:	f040 808d 	bne.w	800adec <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800acd2:	4b42      	ldr	r3, [pc, #264]	@ (800addc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800acd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800acd6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800acda:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800acdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acde:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ace2:	d06b      	beq.n	800adbc <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800ace4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ace6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800acea:	d874      	bhi.n	800add6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800acec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800acf2:	d056      	beq.n	800ada2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800acf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800acfa:	d86c      	bhi.n	800add6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800acfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acfe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ad02:	d03b      	beq.n	800ad7c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800ad04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad06:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ad0a:	d864      	bhi.n	800add6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ad0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ad12:	d021      	beq.n	800ad58 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800ad14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ad1a:	d85c      	bhi.n	800add6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ad1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d004      	beq.n	800ad2c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800ad22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ad28:	d004      	beq.n	800ad34 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800ad2a:	e054      	b.n	800add6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800ad2c:	f000 f8b8 	bl	800aea0 <HAL_RCCEx_GetD3PCLK1Freq>
 800ad30:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ad32:	e0ac      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ad34:	4b29      	ldr	r3, [pc, #164]	@ (800addc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ad3c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ad40:	d107      	bne.n	800ad52 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad42:	f107 0318 	add.w	r3, r7, #24
 800ad46:	4618      	mov	r0, r3
 800ad48:	f000 f8c0 	bl	800aecc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ad4c:	69fb      	ldr	r3, [r7, #28]
 800ad4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad50:	e09d      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad52:	2300      	movs	r3, #0
 800ad54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad56:	e09a      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ad58:	4b20      	ldr	r3, [pc, #128]	@ (800addc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ad60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ad64:	d107      	bne.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad66:	f107 030c 	add.w	r3, r7, #12
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	f000 fa02 	bl	800b174 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ad70:	693b      	ldr	r3, [r7, #16]
 800ad72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad74:	e08b      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad76:	2300      	movs	r3, #0
 800ad78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad7a:	e088      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ad7c:	4b17      	ldr	r3, [pc, #92]	@ (800addc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	f003 0304 	and.w	r3, r3, #4
 800ad84:	2b04      	cmp	r3, #4
 800ad86:	d109      	bne.n	800ad9c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad88:	4b14      	ldr	r3, [pc, #80]	@ (800addc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	08db      	lsrs	r3, r3, #3
 800ad8e:	f003 0303 	and.w	r3, r3, #3
 800ad92:	4a13      	ldr	r2, [pc, #76]	@ (800ade0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800ad94:	fa22 f303 	lsr.w	r3, r2, r3
 800ad98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad9a:	e078      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ada0:	e075      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ada2:	4b0e      	ldr	r3, [pc, #56]	@ (800addc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800adaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800adae:	d102      	bne.n	800adb6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800adb0:	4b0c      	ldr	r3, [pc, #48]	@ (800ade4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800adb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800adb4:	e06b      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800adb6:	2300      	movs	r3, #0
 800adb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800adba:	e068      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800adbc:	4b07      	ldr	r3, [pc, #28]	@ (800addc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800adc4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800adc8:	d102      	bne.n	800add0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800adca:	4b07      	ldr	r3, [pc, #28]	@ (800ade8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800adcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800adce:	e05e      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800add0:	2300      	movs	r3, #0
 800add2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800add4:	e05b      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800add6:	2300      	movs	r3, #0
 800add8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800adda:	e058      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800addc:	58024400 	.word	0x58024400
 800ade0:	03d09000 	.word	0x03d09000
 800ade4:	003d0900 	.word	0x003d0900
 800ade8:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800adec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800adf0:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800adf4:	430b      	orrs	r3, r1
 800adf6:	d148      	bne.n	800ae8a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800adf8:	4b27      	ldr	r3, [pc, #156]	@ (800ae98 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800adfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800adfc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ae00:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ae02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae08:	d02a      	beq.n	800ae60 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800ae0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae10:	d838      	bhi.n	800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800ae12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d004      	beq.n	800ae22 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800ae18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ae1e:	d00d      	beq.n	800ae3c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800ae20:	e030      	b.n	800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ae22:	4b1d      	ldr	r3, [pc, #116]	@ (800ae98 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ae2a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ae2e:	d102      	bne.n	800ae36 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800ae30:	4b1a      	ldr	r3, [pc, #104]	@ (800ae9c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800ae32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae34:	e02b      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae36:	2300      	movs	r3, #0
 800ae38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae3a:	e028      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ae3c:	4b16      	ldr	r3, [pc, #88]	@ (800ae98 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ae44:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ae48:	d107      	bne.n	800ae5a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ae4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ae4e:	4618      	mov	r0, r3
 800ae50:	f000 fae4 	bl	800b41c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ae54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae58:	e019      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae5e:	e016      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ae60:	4b0d      	ldr	r3, [pc, #52]	@ (800ae98 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ae68:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ae6c:	d107      	bne.n	800ae7e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae6e:	f107 0318 	add.w	r3, r7, #24
 800ae72:	4618      	mov	r0, r3
 800ae74:	f000 f82a 	bl	800aecc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ae78:	69fb      	ldr	r3, [r7, #28]
 800ae7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae7c:	e007      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae82:	e004      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ae84:	2300      	movs	r3, #0
 800ae86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae88:	e001      	b.n	800ae8e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800ae8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	3740      	adds	r7, #64	@ 0x40
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}
 800ae98:	58024400 	.word	0x58024400
 800ae9c:	017d7840 	.word	0x017d7840

0800aea0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800aea4:	f7fe f816 	bl	8008ed4 <HAL_RCC_GetHCLKFreq>
 800aea8:	4602      	mov	r2, r0
 800aeaa:	4b06      	ldr	r3, [pc, #24]	@ (800aec4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800aeac:	6a1b      	ldr	r3, [r3, #32]
 800aeae:	091b      	lsrs	r3, r3, #4
 800aeb0:	f003 0307 	and.w	r3, r3, #7
 800aeb4:	4904      	ldr	r1, [pc, #16]	@ (800aec8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800aeb6:	5ccb      	ldrb	r3, [r1, r3]
 800aeb8:	f003 031f 	and.w	r3, r3, #31
 800aebc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800aec0:	4618      	mov	r0, r3
 800aec2:	bd80      	pop	{r7, pc}
 800aec4:	58024400 	.word	0x58024400
 800aec8:	08010618 	.word	0x08010618

0800aecc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800aecc:	b480      	push	{r7}
 800aece:	b089      	sub	sp, #36	@ 0x24
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aed4:	4ba1      	ldr	r3, [pc, #644]	@ (800b15c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aed8:	f003 0303 	and.w	r3, r3, #3
 800aedc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800aede:	4b9f      	ldr	r3, [pc, #636]	@ (800b15c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aee2:	0b1b      	lsrs	r3, r3, #12
 800aee4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800aee8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800aeea:	4b9c      	ldr	r3, [pc, #624]	@ (800b15c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aeec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aeee:	091b      	lsrs	r3, r3, #4
 800aef0:	f003 0301 	and.w	r3, r3, #1
 800aef4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800aef6:	4b99      	ldr	r3, [pc, #612]	@ (800b15c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aef8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aefa:	08db      	lsrs	r3, r3, #3
 800aefc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800af00:	693a      	ldr	r2, [r7, #16]
 800af02:	fb02 f303 	mul.w	r3, r2, r3
 800af06:	ee07 3a90 	vmov	s15, r3
 800af0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af0e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800af12:	697b      	ldr	r3, [r7, #20]
 800af14:	2b00      	cmp	r3, #0
 800af16:	f000 8111 	beq.w	800b13c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800af1a:	69bb      	ldr	r3, [r7, #24]
 800af1c:	2b02      	cmp	r3, #2
 800af1e:	f000 8083 	beq.w	800b028 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800af22:	69bb      	ldr	r3, [r7, #24]
 800af24:	2b02      	cmp	r3, #2
 800af26:	f200 80a1 	bhi.w	800b06c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800af2a:	69bb      	ldr	r3, [r7, #24]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d003      	beq.n	800af38 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800af30:	69bb      	ldr	r3, [r7, #24]
 800af32:	2b01      	cmp	r3, #1
 800af34:	d056      	beq.n	800afe4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800af36:	e099      	b.n	800b06c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af38:	4b88      	ldr	r3, [pc, #544]	@ (800b15c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	f003 0320 	and.w	r3, r3, #32
 800af40:	2b00      	cmp	r3, #0
 800af42:	d02d      	beq.n	800afa0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800af44:	4b85      	ldr	r3, [pc, #532]	@ (800b15c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	08db      	lsrs	r3, r3, #3
 800af4a:	f003 0303 	and.w	r3, r3, #3
 800af4e:	4a84      	ldr	r2, [pc, #528]	@ (800b160 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800af50:	fa22 f303 	lsr.w	r3, r2, r3
 800af54:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800af56:	68bb      	ldr	r3, [r7, #8]
 800af58:	ee07 3a90 	vmov	s15, r3
 800af5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af60:	697b      	ldr	r3, [r7, #20]
 800af62:	ee07 3a90 	vmov	s15, r3
 800af66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af6e:	4b7b      	ldr	r3, [pc, #492]	@ (800b15c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af76:	ee07 3a90 	vmov	s15, r3
 800af7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af7e:	ed97 6a03 	vldr	s12, [r7, #12]
 800af82:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b164 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800af86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af9a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800af9e:	e087      	b.n	800b0b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800afa0:	697b      	ldr	r3, [r7, #20]
 800afa2:	ee07 3a90 	vmov	s15, r3
 800afa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afaa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b168 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800afae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afb2:	4b6a      	ldr	r3, [pc, #424]	@ (800b15c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afba:	ee07 3a90 	vmov	s15, r3
 800afbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afc2:	ed97 6a03 	vldr	s12, [r7, #12]
 800afc6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b164 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800afca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800afd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afda:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800afe2:	e065      	b.n	800b0b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800afe4:	697b      	ldr	r3, [r7, #20]
 800afe6:	ee07 3a90 	vmov	s15, r3
 800afea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afee:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b16c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800aff2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aff6:	4b59      	ldr	r3, [pc, #356]	@ (800b15c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800affa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800affe:	ee07 3a90 	vmov	s15, r3
 800b002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b006:	ed97 6a03 	vldr	s12, [r7, #12]
 800b00a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b164 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b00e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b012:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b016:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b01a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b01e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b022:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b026:	e043      	b.n	800b0b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b028:	697b      	ldr	r3, [r7, #20]
 800b02a:	ee07 3a90 	vmov	s15, r3
 800b02e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b032:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b170 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b036:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b03a:	4b48      	ldr	r3, [pc, #288]	@ (800b15c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b03c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b03e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b042:	ee07 3a90 	vmov	s15, r3
 800b046:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b04a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b04e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b164 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b052:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b056:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b05a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b05e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b062:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b066:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b06a:	e021      	b.n	800b0b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b06c:	697b      	ldr	r3, [r7, #20]
 800b06e:	ee07 3a90 	vmov	s15, r3
 800b072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b076:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b16c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b07a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b07e:	4b37      	ldr	r3, [pc, #220]	@ (800b15c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b080:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b086:	ee07 3a90 	vmov	s15, r3
 800b08a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b08e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b092:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b164 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b096:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b09a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b09e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b0a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b0ae:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b0b0:	4b2a      	ldr	r3, [pc, #168]	@ (800b15c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b0b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0b4:	0a5b      	lsrs	r3, r3, #9
 800b0b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b0ba:	ee07 3a90 	vmov	s15, r3
 800b0be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b0c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b0ca:	edd7 6a07 	vldr	s13, [r7, #28]
 800b0ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0d6:	ee17 2a90 	vmov	r2, s15
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b0de:	4b1f      	ldr	r3, [pc, #124]	@ (800b15c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b0e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0e2:	0c1b      	lsrs	r3, r3, #16
 800b0e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b0e8:	ee07 3a90 	vmov	s15, r3
 800b0ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b0f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b0f8:	edd7 6a07 	vldr	s13, [r7, #28]
 800b0fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b100:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b104:	ee17 2a90 	vmov	r2, s15
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b10c:	4b13      	ldr	r3, [pc, #76]	@ (800b15c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b10e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b110:	0e1b      	lsrs	r3, r3, #24
 800b112:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b116:	ee07 3a90 	vmov	s15, r3
 800b11a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b11e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b122:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b126:	edd7 6a07 	vldr	s13, [r7, #28]
 800b12a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b12e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b132:	ee17 2a90 	vmov	r2, s15
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b13a:	e008      	b.n	800b14e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2200      	movs	r2, #0
 800b140:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2200      	movs	r2, #0
 800b146:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2200      	movs	r2, #0
 800b14c:	609a      	str	r2, [r3, #8]
}
 800b14e:	bf00      	nop
 800b150:	3724      	adds	r7, #36	@ 0x24
 800b152:	46bd      	mov	sp, r7
 800b154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b158:	4770      	bx	lr
 800b15a:	bf00      	nop
 800b15c:	58024400 	.word	0x58024400
 800b160:	03d09000 	.word	0x03d09000
 800b164:	46000000 	.word	0x46000000
 800b168:	4c742400 	.word	0x4c742400
 800b16c:	4a742400 	.word	0x4a742400
 800b170:	4bbebc20 	.word	0x4bbebc20

0800b174 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b174:	b480      	push	{r7}
 800b176:	b089      	sub	sp, #36	@ 0x24
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b17c:	4ba1      	ldr	r3, [pc, #644]	@ (800b404 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b17e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b180:	f003 0303 	and.w	r3, r3, #3
 800b184:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b186:	4b9f      	ldr	r3, [pc, #636]	@ (800b404 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b188:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b18a:	0d1b      	lsrs	r3, r3, #20
 800b18c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b190:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b192:	4b9c      	ldr	r3, [pc, #624]	@ (800b404 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b196:	0a1b      	lsrs	r3, r3, #8
 800b198:	f003 0301 	and.w	r3, r3, #1
 800b19c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b19e:	4b99      	ldr	r3, [pc, #612]	@ (800b404 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b1a2:	08db      	lsrs	r3, r3, #3
 800b1a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b1a8:	693a      	ldr	r2, [r7, #16]
 800b1aa:	fb02 f303 	mul.w	r3, r2, r3
 800b1ae:	ee07 3a90 	vmov	s15, r3
 800b1b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1b6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b1ba:	697b      	ldr	r3, [r7, #20]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	f000 8111 	beq.w	800b3e4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b1c2:	69bb      	ldr	r3, [r7, #24]
 800b1c4:	2b02      	cmp	r3, #2
 800b1c6:	f000 8083 	beq.w	800b2d0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b1ca:	69bb      	ldr	r3, [r7, #24]
 800b1cc:	2b02      	cmp	r3, #2
 800b1ce:	f200 80a1 	bhi.w	800b314 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b1d2:	69bb      	ldr	r3, [r7, #24]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d003      	beq.n	800b1e0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b1d8:	69bb      	ldr	r3, [r7, #24]
 800b1da:	2b01      	cmp	r3, #1
 800b1dc:	d056      	beq.n	800b28c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b1de:	e099      	b.n	800b314 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b1e0:	4b88      	ldr	r3, [pc, #544]	@ (800b404 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	f003 0320 	and.w	r3, r3, #32
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d02d      	beq.n	800b248 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b1ec:	4b85      	ldr	r3, [pc, #532]	@ (800b404 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	08db      	lsrs	r3, r3, #3
 800b1f2:	f003 0303 	and.w	r3, r3, #3
 800b1f6:	4a84      	ldr	r2, [pc, #528]	@ (800b408 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b1f8:	fa22 f303 	lsr.w	r3, r2, r3
 800b1fc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b1fe:	68bb      	ldr	r3, [r7, #8]
 800b200:	ee07 3a90 	vmov	s15, r3
 800b204:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b208:	697b      	ldr	r3, [r7, #20]
 800b20a:	ee07 3a90 	vmov	s15, r3
 800b20e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b212:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b216:	4b7b      	ldr	r3, [pc, #492]	@ (800b404 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b21a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b21e:	ee07 3a90 	vmov	s15, r3
 800b222:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b226:	ed97 6a03 	vldr	s12, [r7, #12]
 800b22a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b40c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b22e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b232:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b236:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b23a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b23e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b242:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b246:	e087      	b.n	800b358 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b248:	697b      	ldr	r3, [r7, #20]
 800b24a:	ee07 3a90 	vmov	s15, r3
 800b24e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b252:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b410 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b256:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b25a:	4b6a      	ldr	r3, [pc, #424]	@ (800b404 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b25c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b25e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b262:	ee07 3a90 	vmov	s15, r3
 800b266:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b26a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b26e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b40c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b272:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b276:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b27a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b27e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b282:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b286:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b28a:	e065      	b.n	800b358 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b28c:	697b      	ldr	r3, [r7, #20]
 800b28e:	ee07 3a90 	vmov	s15, r3
 800b292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b296:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b414 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b29a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b29e:	4b59      	ldr	r3, [pc, #356]	@ (800b404 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2a6:	ee07 3a90 	vmov	s15, r3
 800b2aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2ae:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2b2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b40c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b2b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b2c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b2ce:	e043      	b.n	800b358 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b2d0:	697b      	ldr	r3, [r7, #20]
 800b2d2:	ee07 3a90 	vmov	s15, r3
 800b2d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2da:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b418 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b2de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2e2:	4b48      	ldr	r3, [pc, #288]	@ (800b404 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2ea:	ee07 3a90 	vmov	s15, r3
 800b2ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2f2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2f6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b40c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b2fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b302:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b306:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b30a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b30e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b312:	e021      	b.n	800b358 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b314:	697b      	ldr	r3, [r7, #20]
 800b316:	ee07 3a90 	vmov	s15, r3
 800b31a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b31e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b414 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b322:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b326:	4b37      	ldr	r3, [pc, #220]	@ (800b404 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b32a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b32e:	ee07 3a90 	vmov	s15, r3
 800b332:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b336:	ed97 6a03 	vldr	s12, [r7, #12]
 800b33a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b40c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b33e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b342:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b346:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b34a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b34e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b352:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b356:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b358:	4b2a      	ldr	r3, [pc, #168]	@ (800b404 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b35a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b35c:	0a5b      	lsrs	r3, r3, #9
 800b35e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b362:	ee07 3a90 	vmov	s15, r3
 800b366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b36a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b36e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b372:	edd7 6a07 	vldr	s13, [r7, #28]
 800b376:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b37a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b37e:	ee17 2a90 	vmov	r2, s15
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b386:	4b1f      	ldr	r3, [pc, #124]	@ (800b404 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b38a:	0c1b      	lsrs	r3, r3, #16
 800b38c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b390:	ee07 3a90 	vmov	s15, r3
 800b394:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b398:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b39c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b3a0:	edd7 6a07 	vldr	s13, [r7, #28]
 800b3a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b3ac:	ee17 2a90 	vmov	r2, s15
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b3b4:	4b13      	ldr	r3, [pc, #76]	@ (800b404 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3b8:	0e1b      	lsrs	r3, r3, #24
 800b3ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b3be:	ee07 3a90 	vmov	s15, r3
 800b3c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b3ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b3ce:	edd7 6a07 	vldr	s13, [r7, #28]
 800b3d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b3da:	ee17 2a90 	vmov	r2, s15
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b3e2:	e008      	b.n	800b3f6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	609a      	str	r2, [r3, #8]
}
 800b3f6:	bf00      	nop
 800b3f8:	3724      	adds	r7, #36	@ 0x24
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b400:	4770      	bx	lr
 800b402:	bf00      	nop
 800b404:	58024400 	.word	0x58024400
 800b408:	03d09000 	.word	0x03d09000
 800b40c:	46000000 	.word	0x46000000
 800b410:	4c742400 	.word	0x4c742400
 800b414:	4a742400 	.word	0x4a742400
 800b418:	4bbebc20 	.word	0x4bbebc20

0800b41c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b41c:	b480      	push	{r7}
 800b41e:	b089      	sub	sp, #36	@ 0x24
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b424:	4ba0      	ldr	r3, [pc, #640]	@ (800b6a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b428:	f003 0303 	and.w	r3, r3, #3
 800b42c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b42e:	4b9e      	ldr	r3, [pc, #632]	@ (800b6a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b432:	091b      	lsrs	r3, r3, #4
 800b434:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b438:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b43a:	4b9b      	ldr	r3, [pc, #620]	@ (800b6a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b43c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b43e:	f003 0301 	and.w	r3, r3, #1
 800b442:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b444:	4b98      	ldr	r3, [pc, #608]	@ (800b6a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b446:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b448:	08db      	lsrs	r3, r3, #3
 800b44a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b44e:	693a      	ldr	r2, [r7, #16]
 800b450:	fb02 f303 	mul.w	r3, r2, r3
 800b454:	ee07 3a90 	vmov	s15, r3
 800b458:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b45c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b460:	697b      	ldr	r3, [r7, #20]
 800b462:	2b00      	cmp	r3, #0
 800b464:	f000 8111 	beq.w	800b68a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b468:	69bb      	ldr	r3, [r7, #24]
 800b46a:	2b02      	cmp	r3, #2
 800b46c:	f000 8083 	beq.w	800b576 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b470:	69bb      	ldr	r3, [r7, #24]
 800b472:	2b02      	cmp	r3, #2
 800b474:	f200 80a1 	bhi.w	800b5ba <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b478:	69bb      	ldr	r3, [r7, #24]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d003      	beq.n	800b486 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b47e:	69bb      	ldr	r3, [r7, #24]
 800b480:	2b01      	cmp	r3, #1
 800b482:	d056      	beq.n	800b532 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b484:	e099      	b.n	800b5ba <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b486:	4b88      	ldr	r3, [pc, #544]	@ (800b6a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f003 0320 	and.w	r3, r3, #32
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d02d      	beq.n	800b4ee <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b492:	4b85      	ldr	r3, [pc, #532]	@ (800b6a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	08db      	lsrs	r3, r3, #3
 800b498:	f003 0303 	and.w	r3, r3, #3
 800b49c:	4a83      	ldr	r2, [pc, #524]	@ (800b6ac <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b49e:	fa22 f303 	lsr.w	r3, r2, r3
 800b4a2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	ee07 3a90 	vmov	s15, r3
 800b4aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4ae:	697b      	ldr	r3, [r7, #20]
 800b4b0:	ee07 3a90 	vmov	s15, r3
 800b4b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4bc:	4b7a      	ldr	r3, [pc, #488]	@ (800b6a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4c4:	ee07 3a90 	vmov	s15, r3
 800b4c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4cc:	ed97 6a03 	vldr	s12, [r7, #12]
 800b4d0:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800b6b0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b4d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b4e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4e8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b4ec:	e087      	b.n	800b5fe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b4ee:	697b      	ldr	r3, [r7, #20]
 800b4f0:	ee07 3a90 	vmov	s15, r3
 800b4f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4f8:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800b6b4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b4fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b500:	4b69      	ldr	r3, [pc, #420]	@ (800b6a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b504:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b508:	ee07 3a90 	vmov	s15, r3
 800b50c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b510:	ed97 6a03 	vldr	s12, [r7, #12]
 800b514:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800b6b0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b518:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b51c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b520:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b524:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b528:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b52c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b530:	e065      	b.n	800b5fe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b532:	697b      	ldr	r3, [r7, #20]
 800b534:	ee07 3a90 	vmov	s15, r3
 800b538:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b53c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800b6b8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b540:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b544:	4b58      	ldr	r3, [pc, #352]	@ (800b6a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b548:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b54c:	ee07 3a90 	vmov	s15, r3
 800b550:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b554:	ed97 6a03 	vldr	s12, [r7, #12]
 800b558:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800b6b0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b55c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b560:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b564:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b568:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b56c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b570:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b574:	e043      	b.n	800b5fe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b576:	697b      	ldr	r3, [r7, #20]
 800b578:	ee07 3a90 	vmov	s15, r3
 800b57c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b580:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800b6bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b584:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b588:	4b47      	ldr	r3, [pc, #284]	@ (800b6a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b58a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b58c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b590:	ee07 3a90 	vmov	s15, r3
 800b594:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b598:	ed97 6a03 	vldr	s12, [r7, #12]
 800b59c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800b6b0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b5a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5a8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b5ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5b4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b5b8:	e021      	b.n	800b5fe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b5ba:	697b      	ldr	r3, [r7, #20]
 800b5bc:	ee07 3a90 	vmov	s15, r3
 800b5c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5c4:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b6b4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b5c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5cc:	4b36      	ldr	r3, [pc, #216]	@ (800b6a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b5ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5d4:	ee07 3a90 	vmov	s15, r3
 800b5d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5dc:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5e0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800b6b0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b5e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b5f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5f8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b5fc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b5fe:	4b2a      	ldr	r3, [pc, #168]	@ (800b6a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b602:	0a5b      	lsrs	r3, r3, #9
 800b604:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b608:	ee07 3a90 	vmov	s15, r3
 800b60c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b610:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b614:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b618:	edd7 6a07 	vldr	s13, [r7, #28]
 800b61c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b620:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b624:	ee17 2a90 	vmov	r2, s15
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b62c:	4b1e      	ldr	r3, [pc, #120]	@ (800b6a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b62e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b630:	0c1b      	lsrs	r3, r3, #16
 800b632:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b636:	ee07 3a90 	vmov	s15, r3
 800b63a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b63e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b642:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b646:	edd7 6a07 	vldr	s13, [r7, #28]
 800b64a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b64e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b652:	ee17 2a90 	vmov	r2, s15
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b65a:	4b13      	ldr	r3, [pc, #76]	@ (800b6a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b65c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b65e:	0e1b      	lsrs	r3, r3, #24
 800b660:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b664:	ee07 3a90 	vmov	s15, r3
 800b668:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b66c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b670:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b674:	edd7 6a07 	vldr	s13, [r7, #28]
 800b678:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b67c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b680:	ee17 2a90 	vmov	r2, s15
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b688:	e008      	b.n	800b69c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2200      	movs	r2, #0
 800b68e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2200      	movs	r2, #0
 800b694:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	2200      	movs	r2, #0
 800b69a:	609a      	str	r2, [r3, #8]
}
 800b69c:	bf00      	nop
 800b69e:	3724      	adds	r7, #36	@ 0x24
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a6:	4770      	bx	lr
 800b6a8:	58024400 	.word	0x58024400
 800b6ac:	03d09000 	.word	0x03d09000
 800b6b0:	46000000 	.word	0x46000000
 800b6b4:	4c742400 	.word	0x4c742400
 800b6b8:	4a742400 	.word	0x4a742400
 800b6bc:	4bbebc20 	.word	0x4bbebc20

0800b6c0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b084      	sub	sp, #16
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
 800b6c8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b6ce:	4b53      	ldr	r3, [pc, #332]	@ (800b81c <RCCEx_PLL2_Config+0x15c>)
 800b6d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6d2:	f003 0303 	and.w	r3, r3, #3
 800b6d6:	2b03      	cmp	r3, #3
 800b6d8:	d101      	bne.n	800b6de <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b6da:	2301      	movs	r3, #1
 800b6dc:	e099      	b.n	800b812 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b6de:	4b4f      	ldr	r3, [pc, #316]	@ (800b81c <RCCEx_PLL2_Config+0x15c>)
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	4a4e      	ldr	r2, [pc, #312]	@ (800b81c <RCCEx_PLL2_Config+0x15c>)
 800b6e4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b6e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b6ea:	f7f7 fcad 	bl	8003048 <HAL_GetTick>
 800b6ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b6f0:	e008      	b.n	800b704 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b6f2:	f7f7 fca9 	bl	8003048 <HAL_GetTick>
 800b6f6:	4602      	mov	r2, r0
 800b6f8:	68bb      	ldr	r3, [r7, #8]
 800b6fa:	1ad3      	subs	r3, r2, r3
 800b6fc:	2b02      	cmp	r3, #2
 800b6fe:	d901      	bls.n	800b704 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b700:	2303      	movs	r3, #3
 800b702:	e086      	b.n	800b812 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b704:	4b45      	ldr	r3, [pc, #276]	@ (800b81c <RCCEx_PLL2_Config+0x15c>)
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d1f0      	bne.n	800b6f2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b710:	4b42      	ldr	r3, [pc, #264]	@ (800b81c <RCCEx_PLL2_Config+0x15c>)
 800b712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b714:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	031b      	lsls	r3, r3, #12
 800b71e:	493f      	ldr	r1, [pc, #252]	@ (800b81c <RCCEx_PLL2_Config+0x15c>)
 800b720:	4313      	orrs	r3, r2
 800b722:	628b      	str	r3, [r1, #40]	@ 0x28
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	685b      	ldr	r3, [r3, #4]
 800b728:	3b01      	subs	r3, #1
 800b72a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	689b      	ldr	r3, [r3, #8]
 800b732:	3b01      	subs	r3, #1
 800b734:	025b      	lsls	r3, r3, #9
 800b736:	b29b      	uxth	r3, r3
 800b738:	431a      	orrs	r2, r3
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	68db      	ldr	r3, [r3, #12]
 800b73e:	3b01      	subs	r3, #1
 800b740:	041b      	lsls	r3, r3, #16
 800b742:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b746:	431a      	orrs	r2, r3
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	691b      	ldr	r3, [r3, #16]
 800b74c:	3b01      	subs	r3, #1
 800b74e:	061b      	lsls	r3, r3, #24
 800b750:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b754:	4931      	ldr	r1, [pc, #196]	@ (800b81c <RCCEx_PLL2_Config+0x15c>)
 800b756:	4313      	orrs	r3, r2
 800b758:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b75a:	4b30      	ldr	r3, [pc, #192]	@ (800b81c <RCCEx_PLL2_Config+0x15c>)
 800b75c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b75e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	695b      	ldr	r3, [r3, #20]
 800b766:	492d      	ldr	r1, [pc, #180]	@ (800b81c <RCCEx_PLL2_Config+0x15c>)
 800b768:	4313      	orrs	r3, r2
 800b76a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b76c:	4b2b      	ldr	r3, [pc, #172]	@ (800b81c <RCCEx_PLL2_Config+0x15c>)
 800b76e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b770:	f023 0220 	bic.w	r2, r3, #32
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	699b      	ldr	r3, [r3, #24]
 800b778:	4928      	ldr	r1, [pc, #160]	@ (800b81c <RCCEx_PLL2_Config+0x15c>)
 800b77a:	4313      	orrs	r3, r2
 800b77c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b77e:	4b27      	ldr	r3, [pc, #156]	@ (800b81c <RCCEx_PLL2_Config+0x15c>)
 800b780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b782:	4a26      	ldr	r2, [pc, #152]	@ (800b81c <RCCEx_PLL2_Config+0x15c>)
 800b784:	f023 0310 	bic.w	r3, r3, #16
 800b788:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b78a:	4b24      	ldr	r3, [pc, #144]	@ (800b81c <RCCEx_PLL2_Config+0x15c>)
 800b78c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b78e:	4b24      	ldr	r3, [pc, #144]	@ (800b820 <RCCEx_PLL2_Config+0x160>)
 800b790:	4013      	ands	r3, r2
 800b792:	687a      	ldr	r2, [r7, #4]
 800b794:	69d2      	ldr	r2, [r2, #28]
 800b796:	00d2      	lsls	r2, r2, #3
 800b798:	4920      	ldr	r1, [pc, #128]	@ (800b81c <RCCEx_PLL2_Config+0x15c>)
 800b79a:	4313      	orrs	r3, r2
 800b79c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b79e:	4b1f      	ldr	r3, [pc, #124]	@ (800b81c <RCCEx_PLL2_Config+0x15c>)
 800b7a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7a2:	4a1e      	ldr	r2, [pc, #120]	@ (800b81c <RCCEx_PLL2_Config+0x15c>)
 800b7a4:	f043 0310 	orr.w	r3, r3, #16
 800b7a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d106      	bne.n	800b7be <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b7b0:	4b1a      	ldr	r3, [pc, #104]	@ (800b81c <RCCEx_PLL2_Config+0x15c>)
 800b7b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7b4:	4a19      	ldr	r2, [pc, #100]	@ (800b81c <RCCEx_PLL2_Config+0x15c>)
 800b7b6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b7ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b7bc:	e00f      	b.n	800b7de <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	2b01      	cmp	r3, #1
 800b7c2:	d106      	bne.n	800b7d2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b7c4:	4b15      	ldr	r3, [pc, #84]	@ (800b81c <RCCEx_PLL2_Config+0x15c>)
 800b7c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7c8:	4a14      	ldr	r2, [pc, #80]	@ (800b81c <RCCEx_PLL2_Config+0x15c>)
 800b7ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b7ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b7d0:	e005      	b.n	800b7de <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b7d2:	4b12      	ldr	r3, [pc, #72]	@ (800b81c <RCCEx_PLL2_Config+0x15c>)
 800b7d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7d6:	4a11      	ldr	r2, [pc, #68]	@ (800b81c <RCCEx_PLL2_Config+0x15c>)
 800b7d8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b7dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b7de:	4b0f      	ldr	r3, [pc, #60]	@ (800b81c <RCCEx_PLL2_Config+0x15c>)
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	4a0e      	ldr	r2, [pc, #56]	@ (800b81c <RCCEx_PLL2_Config+0x15c>)
 800b7e4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b7e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b7ea:	f7f7 fc2d 	bl	8003048 <HAL_GetTick>
 800b7ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b7f0:	e008      	b.n	800b804 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b7f2:	f7f7 fc29 	bl	8003048 <HAL_GetTick>
 800b7f6:	4602      	mov	r2, r0
 800b7f8:	68bb      	ldr	r3, [r7, #8]
 800b7fa:	1ad3      	subs	r3, r2, r3
 800b7fc:	2b02      	cmp	r3, #2
 800b7fe:	d901      	bls.n	800b804 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b800:	2303      	movs	r3, #3
 800b802:	e006      	b.n	800b812 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b804:	4b05      	ldr	r3, [pc, #20]	@ (800b81c <RCCEx_PLL2_Config+0x15c>)
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d0f0      	beq.n	800b7f2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b810:	7bfb      	ldrb	r3, [r7, #15]
}
 800b812:	4618      	mov	r0, r3
 800b814:	3710      	adds	r7, #16
 800b816:	46bd      	mov	sp, r7
 800b818:	bd80      	pop	{r7, pc}
 800b81a:	bf00      	nop
 800b81c:	58024400 	.word	0x58024400
 800b820:	ffff0007 	.word	0xffff0007

0800b824 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b824:	b580      	push	{r7, lr}
 800b826:	b084      	sub	sp, #16
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
 800b82c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b82e:	2300      	movs	r3, #0
 800b830:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b832:	4b53      	ldr	r3, [pc, #332]	@ (800b980 <RCCEx_PLL3_Config+0x15c>)
 800b834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b836:	f003 0303 	and.w	r3, r3, #3
 800b83a:	2b03      	cmp	r3, #3
 800b83c:	d101      	bne.n	800b842 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b83e:	2301      	movs	r3, #1
 800b840:	e099      	b.n	800b976 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b842:	4b4f      	ldr	r3, [pc, #316]	@ (800b980 <RCCEx_PLL3_Config+0x15c>)
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	4a4e      	ldr	r2, [pc, #312]	@ (800b980 <RCCEx_PLL3_Config+0x15c>)
 800b848:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b84c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b84e:	f7f7 fbfb 	bl	8003048 <HAL_GetTick>
 800b852:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b854:	e008      	b.n	800b868 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b856:	f7f7 fbf7 	bl	8003048 <HAL_GetTick>
 800b85a:	4602      	mov	r2, r0
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	1ad3      	subs	r3, r2, r3
 800b860:	2b02      	cmp	r3, #2
 800b862:	d901      	bls.n	800b868 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b864:	2303      	movs	r3, #3
 800b866:	e086      	b.n	800b976 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b868:	4b45      	ldr	r3, [pc, #276]	@ (800b980 <RCCEx_PLL3_Config+0x15c>)
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b870:	2b00      	cmp	r3, #0
 800b872:	d1f0      	bne.n	800b856 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b874:	4b42      	ldr	r3, [pc, #264]	@ (800b980 <RCCEx_PLL3_Config+0x15c>)
 800b876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b878:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	051b      	lsls	r3, r3, #20
 800b882:	493f      	ldr	r1, [pc, #252]	@ (800b980 <RCCEx_PLL3_Config+0x15c>)
 800b884:	4313      	orrs	r3, r2
 800b886:	628b      	str	r3, [r1, #40]	@ 0x28
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	685b      	ldr	r3, [r3, #4]
 800b88c:	3b01      	subs	r3, #1
 800b88e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	689b      	ldr	r3, [r3, #8]
 800b896:	3b01      	subs	r3, #1
 800b898:	025b      	lsls	r3, r3, #9
 800b89a:	b29b      	uxth	r3, r3
 800b89c:	431a      	orrs	r2, r3
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	68db      	ldr	r3, [r3, #12]
 800b8a2:	3b01      	subs	r3, #1
 800b8a4:	041b      	lsls	r3, r3, #16
 800b8a6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b8aa:	431a      	orrs	r2, r3
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	691b      	ldr	r3, [r3, #16]
 800b8b0:	3b01      	subs	r3, #1
 800b8b2:	061b      	lsls	r3, r3, #24
 800b8b4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b8b8:	4931      	ldr	r1, [pc, #196]	@ (800b980 <RCCEx_PLL3_Config+0x15c>)
 800b8ba:	4313      	orrs	r3, r2
 800b8bc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b8be:	4b30      	ldr	r3, [pc, #192]	@ (800b980 <RCCEx_PLL3_Config+0x15c>)
 800b8c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8c2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	695b      	ldr	r3, [r3, #20]
 800b8ca:	492d      	ldr	r1, [pc, #180]	@ (800b980 <RCCEx_PLL3_Config+0x15c>)
 800b8cc:	4313      	orrs	r3, r2
 800b8ce:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b8d0:	4b2b      	ldr	r3, [pc, #172]	@ (800b980 <RCCEx_PLL3_Config+0x15c>)
 800b8d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8d4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	699b      	ldr	r3, [r3, #24]
 800b8dc:	4928      	ldr	r1, [pc, #160]	@ (800b980 <RCCEx_PLL3_Config+0x15c>)
 800b8de:	4313      	orrs	r3, r2
 800b8e0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b8e2:	4b27      	ldr	r3, [pc, #156]	@ (800b980 <RCCEx_PLL3_Config+0x15c>)
 800b8e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8e6:	4a26      	ldr	r2, [pc, #152]	@ (800b980 <RCCEx_PLL3_Config+0x15c>)
 800b8e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b8ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b8ee:	4b24      	ldr	r3, [pc, #144]	@ (800b980 <RCCEx_PLL3_Config+0x15c>)
 800b8f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b8f2:	4b24      	ldr	r3, [pc, #144]	@ (800b984 <RCCEx_PLL3_Config+0x160>)
 800b8f4:	4013      	ands	r3, r2
 800b8f6:	687a      	ldr	r2, [r7, #4]
 800b8f8:	69d2      	ldr	r2, [r2, #28]
 800b8fa:	00d2      	lsls	r2, r2, #3
 800b8fc:	4920      	ldr	r1, [pc, #128]	@ (800b980 <RCCEx_PLL3_Config+0x15c>)
 800b8fe:	4313      	orrs	r3, r2
 800b900:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b902:	4b1f      	ldr	r3, [pc, #124]	@ (800b980 <RCCEx_PLL3_Config+0x15c>)
 800b904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b906:	4a1e      	ldr	r2, [pc, #120]	@ (800b980 <RCCEx_PLL3_Config+0x15c>)
 800b908:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b90c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b90e:	683b      	ldr	r3, [r7, #0]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d106      	bne.n	800b922 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b914:	4b1a      	ldr	r3, [pc, #104]	@ (800b980 <RCCEx_PLL3_Config+0x15c>)
 800b916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b918:	4a19      	ldr	r2, [pc, #100]	@ (800b980 <RCCEx_PLL3_Config+0x15c>)
 800b91a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b91e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b920:	e00f      	b.n	800b942 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b922:	683b      	ldr	r3, [r7, #0]
 800b924:	2b01      	cmp	r3, #1
 800b926:	d106      	bne.n	800b936 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b928:	4b15      	ldr	r3, [pc, #84]	@ (800b980 <RCCEx_PLL3_Config+0x15c>)
 800b92a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b92c:	4a14      	ldr	r2, [pc, #80]	@ (800b980 <RCCEx_PLL3_Config+0x15c>)
 800b92e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b932:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b934:	e005      	b.n	800b942 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b936:	4b12      	ldr	r3, [pc, #72]	@ (800b980 <RCCEx_PLL3_Config+0x15c>)
 800b938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b93a:	4a11      	ldr	r2, [pc, #68]	@ (800b980 <RCCEx_PLL3_Config+0x15c>)
 800b93c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b940:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b942:	4b0f      	ldr	r3, [pc, #60]	@ (800b980 <RCCEx_PLL3_Config+0x15c>)
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	4a0e      	ldr	r2, [pc, #56]	@ (800b980 <RCCEx_PLL3_Config+0x15c>)
 800b948:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b94c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b94e:	f7f7 fb7b 	bl	8003048 <HAL_GetTick>
 800b952:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b954:	e008      	b.n	800b968 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b956:	f7f7 fb77 	bl	8003048 <HAL_GetTick>
 800b95a:	4602      	mov	r2, r0
 800b95c:	68bb      	ldr	r3, [r7, #8]
 800b95e:	1ad3      	subs	r3, r2, r3
 800b960:	2b02      	cmp	r3, #2
 800b962:	d901      	bls.n	800b968 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b964:	2303      	movs	r3, #3
 800b966:	e006      	b.n	800b976 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b968:	4b05      	ldr	r3, [pc, #20]	@ (800b980 <RCCEx_PLL3_Config+0x15c>)
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b970:	2b00      	cmp	r3, #0
 800b972:	d0f0      	beq.n	800b956 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b974:	7bfb      	ldrb	r3, [r7, #15]
}
 800b976:	4618      	mov	r0, r3
 800b978:	3710      	adds	r7, #16
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd80      	pop	{r7, pc}
 800b97e:	bf00      	nop
 800b980:	58024400 	.word	0x58024400
 800b984:	ffff0007 	.word	0xffff0007

0800b988 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b084      	sub	sp, #16
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d101      	bne.n	800b99a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b996:	2301      	movs	r3, #1
 800b998:	e10f      	b.n	800bbba <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	2200      	movs	r2, #0
 800b99e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	4a87      	ldr	r2, [pc, #540]	@ (800bbc4 <HAL_SPI_Init+0x23c>)
 800b9a6:	4293      	cmp	r3, r2
 800b9a8:	d00f      	beq.n	800b9ca <HAL_SPI_Init+0x42>
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	4a86      	ldr	r2, [pc, #536]	@ (800bbc8 <HAL_SPI_Init+0x240>)
 800b9b0:	4293      	cmp	r3, r2
 800b9b2:	d00a      	beq.n	800b9ca <HAL_SPI_Init+0x42>
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	4a84      	ldr	r2, [pc, #528]	@ (800bbcc <HAL_SPI_Init+0x244>)
 800b9ba:	4293      	cmp	r3, r2
 800b9bc:	d005      	beq.n	800b9ca <HAL_SPI_Init+0x42>
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	68db      	ldr	r3, [r3, #12]
 800b9c2:	2b0f      	cmp	r3, #15
 800b9c4:	d901      	bls.n	800b9ca <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b9c6:	2301      	movs	r3, #1
 800b9c8:	e0f7      	b.n	800bbba <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b9ca:	6878      	ldr	r0, [r7, #4]
 800b9cc:	f000 fc12 	bl	800c1f4 <SPI_GetPacketSize>
 800b9d0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	4a7b      	ldr	r2, [pc, #492]	@ (800bbc4 <HAL_SPI_Init+0x23c>)
 800b9d8:	4293      	cmp	r3, r2
 800b9da:	d00c      	beq.n	800b9f6 <HAL_SPI_Init+0x6e>
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	4a79      	ldr	r2, [pc, #484]	@ (800bbc8 <HAL_SPI_Init+0x240>)
 800b9e2:	4293      	cmp	r3, r2
 800b9e4:	d007      	beq.n	800b9f6 <HAL_SPI_Init+0x6e>
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	4a78      	ldr	r2, [pc, #480]	@ (800bbcc <HAL_SPI_Init+0x244>)
 800b9ec:	4293      	cmp	r3, r2
 800b9ee:	d002      	beq.n	800b9f6 <HAL_SPI_Init+0x6e>
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	2b08      	cmp	r3, #8
 800b9f4:	d811      	bhi.n	800ba1a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b9fa:	4a72      	ldr	r2, [pc, #456]	@ (800bbc4 <HAL_SPI_Init+0x23c>)
 800b9fc:	4293      	cmp	r3, r2
 800b9fe:	d009      	beq.n	800ba14 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	4a70      	ldr	r2, [pc, #448]	@ (800bbc8 <HAL_SPI_Init+0x240>)
 800ba06:	4293      	cmp	r3, r2
 800ba08:	d004      	beq.n	800ba14 <HAL_SPI_Init+0x8c>
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	4a6f      	ldr	r2, [pc, #444]	@ (800bbcc <HAL_SPI_Init+0x244>)
 800ba10:	4293      	cmp	r3, r2
 800ba12:	d104      	bne.n	800ba1e <HAL_SPI_Init+0x96>
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	2b10      	cmp	r3, #16
 800ba18:	d901      	bls.n	800ba1e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800ba1a:	2301      	movs	r3, #1
 800ba1c:	e0cd      	b.n	800bbba <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ba24:	b2db      	uxtb	r3, r3
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d106      	bne.n	800ba38 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ba32:	6878      	ldr	r0, [r7, #4]
 800ba34:	f7f5 fe6e 	bl	8001714 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	2202      	movs	r2, #2
 800ba3c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	681a      	ldr	r2, [r3, #0]
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	f022 0201 	bic.w	r2, r2, #1
 800ba4e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	689b      	ldr	r3, [r3, #8]
 800ba56:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800ba5a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	699b      	ldr	r3, [r3, #24]
 800ba60:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ba64:	d119      	bne.n	800ba9a <HAL_SPI_Init+0x112>
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	685b      	ldr	r3, [r3, #4]
 800ba6a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ba6e:	d103      	bne.n	800ba78 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d008      	beq.n	800ba8a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d10c      	bne.n	800ba9a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ba84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ba88:	d107      	bne.n	800ba9a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	681a      	ldr	r2, [r3, #0]
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800ba98:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	685b      	ldr	r3, [r3, #4]
 800ba9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d00f      	beq.n	800bac6 <HAL_SPI_Init+0x13e>
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	68db      	ldr	r3, [r3, #12]
 800baaa:	2b06      	cmp	r3, #6
 800baac:	d90b      	bls.n	800bac6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	430a      	orrs	r2, r1
 800bac2:	601a      	str	r2, [r3, #0]
 800bac4:	e007      	b.n	800bad6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	681a      	ldr	r2, [r3, #0]
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800bad4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	69da      	ldr	r2, [r3, #28]
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bade:	431a      	orrs	r2, r3
 800bae0:	68bb      	ldr	r3, [r7, #8]
 800bae2:	431a      	orrs	r2, r3
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bae8:	ea42 0103 	orr.w	r1, r2, r3
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	68da      	ldr	r2, [r3, #12]
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	430a      	orrs	r2, r1
 800baf6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb00:	431a      	orrs	r2, r3
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb06:	431a      	orrs	r2, r3
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	699b      	ldr	r3, [r3, #24]
 800bb0c:	431a      	orrs	r2, r3
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	691b      	ldr	r3, [r3, #16]
 800bb12:	431a      	orrs	r2, r3
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	695b      	ldr	r3, [r3, #20]
 800bb18:	431a      	orrs	r2, r3
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	6a1b      	ldr	r3, [r3, #32]
 800bb1e:	431a      	orrs	r2, r3
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	685b      	ldr	r3, [r3, #4]
 800bb24:	431a      	orrs	r2, r3
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bb2a:	431a      	orrs	r2, r3
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	689b      	ldr	r3, [r3, #8]
 800bb30:	431a      	orrs	r2, r3
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bb36:	ea42 0103 	orr.w	r1, r2, r3
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	430a      	orrs	r2, r1
 800bb44:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	685b      	ldr	r3, [r3, #4]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d113      	bne.n	800bb76 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	689b      	ldr	r3, [r3, #8]
 800bb54:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bb60:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	689b      	ldr	r3, [r3, #8]
 800bb68:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800bb74:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	f022 0201 	bic.w	r2, r2, #1
 800bb84:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	685b      	ldr	r3, [r3, #4]
 800bb8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d00a      	beq.n	800bba8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	68db      	ldr	r3, [r3, #12]
 800bb98:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	430a      	orrs	r2, r1
 800bba6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	2200      	movs	r2, #0
 800bbac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	2201      	movs	r2, #1
 800bbb4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800bbb8:	2300      	movs	r3, #0
}
 800bbba:	4618      	mov	r0, r3
 800bbbc:	3710      	adds	r7, #16
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	bd80      	pop	{r7, pc}
 800bbc2:	bf00      	nop
 800bbc4:	40013000 	.word	0x40013000
 800bbc8:	40003800 	.word	0x40003800
 800bbcc:	40003c00 	.word	0x40003c00

0800bbd0 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b088      	sub	sp, #32
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	60f8      	str	r0, [r7, #12]
 800bbd8:	60b9      	str	r1, [r7, #8]
 800bbda:	603b      	str	r3, [r7, #0]
 800bbdc:	4613      	mov	r3, r2
 800bbde:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bbe4:	095b      	lsrs	r3, r3, #5
 800bbe6:	b29b      	uxth	r3, r3
 800bbe8:	3301      	adds	r3, #1
 800bbea:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	3330      	adds	r3, #48	@ 0x30
 800bbf2:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bbf4:	f7f7 fa28 	bl	8003048 <HAL_GetTick>
 800bbf8:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bc00:	b2db      	uxtb	r3, r3
 800bc02:	2b01      	cmp	r3, #1
 800bc04:	d001      	beq.n	800bc0a <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800bc06:	2302      	movs	r3, #2
 800bc08:	e250      	b.n	800c0ac <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800bc0a:	68bb      	ldr	r3, [r7, #8]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d002      	beq.n	800bc16 <HAL_SPI_Receive+0x46>
 800bc10:	88fb      	ldrh	r3, [r7, #6]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d101      	bne.n	800bc1a <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800bc16:	2301      	movs	r3, #1
 800bc18:	e248      	b.n	800c0ac <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800bc20:	2b01      	cmp	r3, #1
 800bc22:	d101      	bne.n	800bc28 <HAL_SPI_Receive+0x58>
 800bc24:	2302      	movs	r3, #2
 800bc26:	e241      	b.n	800c0ac <HAL_SPI_Receive+0x4dc>
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	2201      	movs	r2, #1
 800bc2c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	2204      	movs	r2, #4
 800bc34:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	68ba      	ldr	r2, [r7, #8]
 800bc44:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	88fa      	ldrh	r2, [r7, #6]
 800bc4a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	88fa      	ldrh	r2, [r7, #6]
 800bc52:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	2200      	movs	r2, #0
 800bc5a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	2200      	movs	r2, #0
 800bc60:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	2200      	movs	r2, #0
 800bc68:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	2200      	movs	r2, #0
 800bc70:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	2200      	movs	r2, #0
 800bc76:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	689b      	ldr	r3, [r3, #8]
 800bc7c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800bc80:	d108      	bne.n	800bc94 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	681a      	ldr	r2, [r3, #0]
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800bc90:	601a      	str	r2, [r3, #0]
 800bc92:	e009      	b.n	800bca8 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	68db      	ldr	r3, [r3, #12]
 800bc9a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800bca6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	685a      	ldr	r2, [r3, #4]
 800bcae:	4b95      	ldr	r3, [pc, #596]	@ (800bf04 <HAL_SPI_Receive+0x334>)
 800bcb0:	4013      	ands	r3, r2
 800bcb2:	88f9      	ldrh	r1, [r7, #6]
 800bcb4:	68fa      	ldr	r2, [r7, #12]
 800bcb6:	6812      	ldr	r2, [r2, #0]
 800bcb8:	430b      	orrs	r3, r1
 800bcba:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	681a      	ldr	r2, [r3, #0]
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	f042 0201 	orr.w	r2, r2, #1
 800bcca:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	685b      	ldr	r3, [r3, #4]
 800bcd0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bcd4:	d107      	bne.n	800bce6 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	681a      	ldr	r2, [r3, #0]
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bce4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	68db      	ldr	r3, [r3, #12]
 800bcea:	2b0f      	cmp	r3, #15
 800bcec:	d96c      	bls.n	800bdc8 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800bcee:	e064      	b.n	800bdba <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	695b      	ldr	r3, [r3, #20]
 800bcf6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	695b      	ldr	r3, [r3, #20]
 800bcfe:	f003 0301 	and.w	r3, r3, #1
 800bd02:	2b01      	cmp	r3, #1
 800bd04:	d114      	bne.n	800bd30 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	681a      	ldr	r2, [r3, #0]
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd0e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800bd10:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd16:	1d1a      	adds	r2, r3, #4
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bd22:	b29b      	uxth	r3, r3
 800bd24:	3b01      	subs	r3, #1
 800bd26:	b29a      	uxth	r2, r3
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bd2e:	e044      	b.n	800bdba <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bd36:	b29b      	uxth	r3, r3
 800bd38:	8bfa      	ldrh	r2, [r7, #30]
 800bd3a:	429a      	cmp	r2, r3
 800bd3c:	d919      	bls.n	800bd72 <HAL_SPI_Receive+0x1a2>
 800bd3e:	693b      	ldr	r3, [r7, #16]
 800bd40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d014      	beq.n	800bd72 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	681a      	ldr	r2, [r3, #0]
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd50:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800bd52:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd58:	1d1a      	adds	r2, r3, #4
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bd64:	b29b      	uxth	r3, r3
 800bd66:	3b01      	subs	r3, #1
 800bd68:	b29a      	uxth	r2, r3
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bd70:	e023      	b.n	800bdba <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bd72:	f7f7 f969 	bl	8003048 <HAL_GetTick>
 800bd76:	4602      	mov	r2, r0
 800bd78:	697b      	ldr	r3, [r7, #20]
 800bd7a:	1ad3      	subs	r3, r2, r3
 800bd7c:	683a      	ldr	r2, [r7, #0]
 800bd7e:	429a      	cmp	r2, r3
 800bd80:	d803      	bhi.n	800bd8a <HAL_SPI_Receive+0x1ba>
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd88:	d102      	bne.n	800bd90 <HAL_SPI_Receive+0x1c0>
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d114      	bne.n	800bdba <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bd90:	68f8      	ldr	r0, [r7, #12]
 800bd92:	f000 f98f 	bl	800c0b4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bd9c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	2201      	movs	r2, #1
 800bdaa:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800bdb6:	2303      	movs	r3, #3
 800bdb8:	e178      	b.n	800c0ac <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bdc0:	b29b      	uxth	r3, r3
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d194      	bne.n	800bcf0 <HAL_SPI_Receive+0x120>
 800bdc6:	e15e      	b.n	800c086 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	68db      	ldr	r3, [r3, #12]
 800bdcc:	2b07      	cmp	r3, #7
 800bdce:	f240 8153 	bls.w	800c078 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800bdd2:	e08f      	b.n	800bef4 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	695b      	ldr	r3, [r3, #20]
 800bdda:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	695b      	ldr	r3, [r3, #20]
 800bde2:	f003 0301 	and.w	r3, r3, #1
 800bde6:	2b01      	cmp	r3, #1
 800bde8:	d114      	bne.n	800be14 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bdee:	69ba      	ldr	r2, [r7, #24]
 800bdf0:	8812      	ldrh	r2, [r2, #0]
 800bdf2:	b292      	uxth	r2, r2
 800bdf4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bdfa:	1c9a      	adds	r2, r3, #2
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800be06:	b29b      	uxth	r3, r3
 800be08:	3b01      	subs	r3, #1
 800be0a:	b29a      	uxth	r2, r3
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800be12:	e06f      	b.n	800bef4 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800be1a:	b29b      	uxth	r3, r3
 800be1c:	8bfa      	ldrh	r2, [r7, #30]
 800be1e:	429a      	cmp	r2, r3
 800be20:	d924      	bls.n	800be6c <HAL_SPI_Receive+0x29c>
 800be22:	693b      	ldr	r3, [r7, #16]
 800be24:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d01f      	beq.n	800be6c <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be30:	69ba      	ldr	r2, [r7, #24]
 800be32:	8812      	ldrh	r2, [r2, #0]
 800be34:	b292      	uxth	r2, r2
 800be36:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be3c:	1c9a      	adds	r2, r3, #2
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be46:	69ba      	ldr	r2, [r7, #24]
 800be48:	8812      	ldrh	r2, [r2, #0]
 800be4a:	b292      	uxth	r2, r2
 800be4c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be52:	1c9a      	adds	r2, r3, #2
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800be5e:	b29b      	uxth	r3, r3
 800be60:	3b02      	subs	r3, #2
 800be62:	b29a      	uxth	r2, r3
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800be6a:	e043      	b.n	800bef4 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800be72:	b29b      	uxth	r3, r3
 800be74:	2b01      	cmp	r3, #1
 800be76:	d119      	bne.n	800beac <HAL_SPI_Receive+0x2dc>
 800be78:	693b      	ldr	r3, [r7, #16]
 800be7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d014      	beq.n	800beac <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be86:	69ba      	ldr	r2, [r7, #24]
 800be88:	8812      	ldrh	r2, [r2, #0]
 800be8a:	b292      	uxth	r2, r2
 800be8c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be92:	1c9a      	adds	r2, r3, #2
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800be9e:	b29b      	uxth	r3, r3
 800bea0:	3b01      	subs	r3, #1
 800bea2:	b29a      	uxth	r2, r3
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800beaa:	e023      	b.n	800bef4 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800beac:	f7f7 f8cc 	bl	8003048 <HAL_GetTick>
 800beb0:	4602      	mov	r2, r0
 800beb2:	697b      	ldr	r3, [r7, #20]
 800beb4:	1ad3      	subs	r3, r2, r3
 800beb6:	683a      	ldr	r2, [r7, #0]
 800beb8:	429a      	cmp	r2, r3
 800beba:	d803      	bhi.n	800bec4 <HAL_SPI_Receive+0x2f4>
 800bebc:	683b      	ldr	r3, [r7, #0]
 800bebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bec2:	d102      	bne.n	800beca <HAL_SPI_Receive+0x2fa>
 800bec4:	683b      	ldr	r3, [r7, #0]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d114      	bne.n	800bef4 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800beca:	68f8      	ldr	r0, [r7, #12]
 800becc:	f000 f8f2 	bl	800c0b4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bed6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	2201      	movs	r2, #1
 800bee4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	2200      	movs	r2, #0
 800beec:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800bef0:	2303      	movs	r3, #3
 800bef2:	e0db      	b.n	800c0ac <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800befa:	b29b      	uxth	r3, r3
 800befc:	2b00      	cmp	r3, #0
 800befe:	f47f af69 	bne.w	800bdd4 <HAL_SPI_Receive+0x204>
 800bf02:	e0c0      	b.n	800c086 <HAL_SPI_Receive+0x4b6>
 800bf04:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	695b      	ldr	r3, [r3, #20]
 800bf0e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	695b      	ldr	r3, [r3, #20]
 800bf16:	f003 0301 	and.w	r3, r3, #1
 800bf1a:	2b01      	cmp	r3, #1
 800bf1c:	d117      	bne.n	800bf4e <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bf2a:	7812      	ldrb	r2, [r2, #0]
 800bf2c:	b2d2      	uxtb	r2, r2
 800bf2e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bf34:	1c5a      	adds	r2, r3, #1
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bf40:	b29b      	uxth	r3, r3
 800bf42:	3b01      	subs	r3, #1
 800bf44:	b29a      	uxth	r2, r3
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bf4c:	e094      	b.n	800c078 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bf54:	b29b      	uxth	r3, r3
 800bf56:	8bfa      	ldrh	r2, [r7, #30]
 800bf58:	429a      	cmp	r2, r3
 800bf5a:	d946      	bls.n	800bfea <HAL_SPI_Receive+0x41a>
 800bf5c:	693b      	ldr	r3, [r7, #16]
 800bf5e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d041      	beq.n	800bfea <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bf72:	7812      	ldrb	r2, [r2, #0]
 800bf74:	b2d2      	uxtb	r2, r2
 800bf76:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bf7c:	1c5a      	adds	r2, r3, #1
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bf8e:	7812      	ldrb	r2, [r2, #0]
 800bf90:	b2d2      	uxtb	r2, r2
 800bf92:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bf98:	1c5a      	adds	r2, r3, #1
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bfaa:	7812      	ldrb	r2, [r2, #0]
 800bfac:	b2d2      	uxtb	r2, r2
 800bfae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bfb4:	1c5a      	adds	r2, r3, #1
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bfc6:	7812      	ldrb	r2, [r2, #0]
 800bfc8:	b2d2      	uxtb	r2, r2
 800bfca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bfd0:	1c5a      	adds	r2, r3, #1
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bfdc:	b29b      	uxth	r3, r3
 800bfde:	3b04      	subs	r3, #4
 800bfe0:	b29a      	uxth	r2, r3
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bfe8:	e046      	b.n	800c078 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bff0:	b29b      	uxth	r3, r3
 800bff2:	2b03      	cmp	r3, #3
 800bff4:	d81c      	bhi.n	800c030 <HAL_SPI_Receive+0x460>
 800bff6:	693b      	ldr	r3, [r7, #16]
 800bff8:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d017      	beq.n	800c030 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c00c:	7812      	ldrb	r2, [r2, #0]
 800c00e:	b2d2      	uxtb	r2, r2
 800c010:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c016:	1c5a      	adds	r2, r3, #1
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c022:	b29b      	uxth	r3, r3
 800c024:	3b01      	subs	r3, #1
 800c026:	b29a      	uxth	r2, r3
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c02e:	e023      	b.n	800c078 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c030:	f7f7 f80a 	bl	8003048 <HAL_GetTick>
 800c034:	4602      	mov	r2, r0
 800c036:	697b      	ldr	r3, [r7, #20]
 800c038:	1ad3      	subs	r3, r2, r3
 800c03a:	683a      	ldr	r2, [r7, #0]
 800c03c:	429a      	cmp	r2, r3
 800c03e:	d803      	bhi.n	800c048 <HAL_SPI_Receive+0x478>
 800c040:	683b      	ldr	r3, [r7, #0]
 800c042:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c046:	d102      	bne.n	800c04e <HAL_SPI_Receive+0x47e>
 800c048:	683b      	ldr	r3, [r7, #0]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d114      	bne.n	800c078 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c04e:	68f8      	ldr	r0, [r7, #12]
 800c050:	f000 f830 	bl	800c0b4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c05a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	2201      	movs	r2, #1
 800c068:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	2200      	movs	r2, #0
 800c070:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800c074:	2303      	movs	r3, #3
 800c076:	e019      	b.n	800c0ac <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c07e:	b29b      	uxth	r3, r3
 800c080:	2b00      	cmp	r3, #0
 800c082:	f47f af41 	bne.w	800bf08 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c086:	68f8      	ldr	r0, [r7, #12]
 800c088:	f000 f814 	bl	800c0b4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	2201      	movs	r2, #1
 800c090:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	2200      	movs	r2, #0
 800c098:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d001      	beq.n	800c0aa <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800c0a6:	2301      	movs	r3, #1
 800c0a8:	e000      	b.n	800c0ac <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800c0aa:	2300      	movs	r3, #0
  }
}
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	3720      	adds	r7, #32
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	bd80      	pop	{r7, pc}

0800c0b4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800c0b4:	b480      	push	{r7}
 800c0b6:	b085      	sub	sp, #20
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	695b      	ldr	r3, [r3, #20]
 800c0c2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	699a      	ldr	r2, [r3, #24]
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	f042 0208 	orr.w	r2, r2, #8
 800c0d2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	699a      	ldr	r2, [r3, #24]
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	f042 0210 	orr.w	r2, r2, #16
 800c0e2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	681a      	ldr	r2, [r3, #0]
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	f022 0201 	bic.w	r2, r2, #1
 800c0f2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	6919      	ldr	r1, [r3, #16]
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681a      	ldr	r2, [r3, #0]
 800c0fe:	4b3c      	ldr	r3, [pc, #240]	@ (800c1f0 <SPI_CloseTransfer+0x13c>)
 800c100:	400b      	ands	r3, r1
 800c102:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	689a      	ldr	r2, [r3, #8]
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800c112:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c11a:	b2db      	uxtb	r3, r3
 800c11c:	2b04      	cmp	r3, #4
 800c11e:	d014      	beq.n	800c14a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	f003 0320 	and.w	r3, r3, #32
 800c126:	2b00      	cmp	r3, #0
 800c128:	d00f      	beq.n	800c14a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c130:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	699a      	ldr	r2, [r3, #24]
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	f042 0220 	orr.w	r2, r2, #32
 800c148:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c150:	b2db      	uxtb	r3, r3
 800c152:	2b03      	cmp	r3, #3
 800c154:	d014      	beq.n	800c180 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d00f      	beq.n	800c180 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c166:	f043 0204 	orr.w	r2, r3, #4
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	699a      	ldr	r2, [r3, #24]
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c17e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c186:	2b00      	cmp	r3, #0
 800c188:	d00f      	beq.n	800c1aa <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c190:	f043 0201 	orr.w	r2, r3, #1
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	699a      	ldr	r2, [r3, #24]
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c1a8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d00f      	beq.n	800c1d4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c1ba:	f043 0208 	orr.w	r2, r3, #8
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	699a      	ldr	r2, [r3, #24]
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c1d2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2200      	movs	r2, #0
 800c1e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800c1e4:	bf00      	nop
 800c1e6:	3714      	adds	r7, #20
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ee:	4770      	bx	lr
 800c1f0:	fffffc90 	.word	0xfffffc90

0800c1f4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800c1f4:	b480      	push	{r7}
 800c1f6:	b085      	sub	sp, #20
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c200:	095b      	lsrs	r3, r3, #5
 800c202:	3301      	adds	r3, #1
 800c204:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	68db      	ldr	r3, [r3, #12]
 800c20a:	3301      	adds	r3, #1
 800c20c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c20e:	68bb      	ldr	r3, [r7, #8]
 800c210:	3307      	adds	r3, #7
 800c212:	08db      	lsrs	r3, r3, #3
 800c214:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c216:	68bb      	ldr	r3, [r7, #8]
 800c218:	68fa      	ldr	r2, [r7, #12]
 800c21a:	fb02 f303 	mul.w	r3, r2, r3
}
 800c21e:	4618      	mov	r0, r3
 800c220:	3714      	adds	r7, #20
 800c222:	46bd      	mov	sp, r7
 800c224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c228:	4770      	bx	lr

0800c22a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c22a:	b580      	push	{r7, lr}
 800c22c:	b082      	sub	sp, #8
 800c22e:	af00      	add	r7, sp, #0
 800c230:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d101      	bne.n	800c23c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c238:	2301      	movs	r3, #1
 800c23a:	e049      	b.n	800c2d0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c242:	b2db      	uxtb	r3, r3
 800c244:	2b00      	cmp	r3, #0
 800c246:	d106      	bne.n	800c256 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	2200      	movs	r2, #0
 800c24c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c250:	6878      	ldr	r0, [r7, #4]
 800c252:	f7f5 fac7 	bl	80017e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	2202      	movs	r2, #2
 800c25a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681a      	ldr	r2, [r3, #0]
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	3304      	adds	r3, #4
 800c266:	4619      	mov	r1, r3
 800c268:	4610      	mov	r0, r2
 800c26a:	f000 fad5 	bl	800c818 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	2201      	movs	r2, #1
 800c272:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	2201      	movs	r2, #1
 800c27a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	2201      	movs	r2, #1
 800c282:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	2201      	movs	r2, #1
 800c28a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	2201      	movs	r2, #1
 800c292:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	2201      	movs	r2, #1
 800c29a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	2201      	movs	r2, #1
 800c2a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	2201      	movs	r2, #1
 800c2aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	2201      	movs	r2, #1
 800c2b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	2201      	movs	r2, #1
 800c2ba:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2201      	movs	r2, #1
 800c2c2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	2201      	movs	r2, #1
 800c2ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c2ce:	2300      	movs	r3, #0
}
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	3708      	adds	r7, #8
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	bd80      	pop	{r7, pc}

0800c2d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c2d8:	b480      	push	{r7}
 800c2da:	b085      	sub	sp, #20
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c2e6:	b2db      	uxtb	r3, r3
 800c2e8:	2b01      	cmp	r3, #1
 800c2ea:	d001      	beq.n	800c2f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c2ec:	2301      	movs	r3, #1
 800c2ee:	e054      	b.n	800c39a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	2202      	movs	r2, #2
 800c2f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	68da      	ldr	r2, [r3, #12]
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	f042 0201 	orr.w	r2, r2, #1
 800c306:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	4a26      	ldr	r2, [pc, #152]	@ (800c3a8 <HAL_TIM_Base_Start_IT+0xd0>)
 800c30e:	4293      	cmp	r3, r2
 800c310:	d022      	beq.n	800c358 <HAL_TIM_Base_Start_IT+0x80>
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c31a:	d01d      	beq.n	800c358 <HAL_TIM_Base_Start_IT+0x80>
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	4a22      	ldr	r2, [pc, #136]	@ (800c3ac <HAL_TIM_Base_Start_IT+0xd4>)
 800c322:	4293      	cmp	r3, r2
 800c324:	d018      	beq.n	800c358 <HAL_TIM_Base_Start_IT+0x80>
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	4a21      	ldr	r2, [pc, #132]	@ (800c3b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800c32c:	4293      	cmp	r3, r2
 800c32e:	d013      	beq.n	800c358 <HAL_TIM_Base_Start_IT+0x80>
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	4a1f      	ldr	r2, [pc, #124]	@ (800c3b4 <HAL_TIM_Base_Start_IT+0xdc>)
 800c336:	4293      	cmp	r3, r2
 800c338:	d00e      	beq.n	800c358 <HAL_TIM_Base_Start_IT+0x80>
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	4a1e      	ldr	r2, [pc, #120]	@ (800c3b8 <HAL_TIM_Base_Start_IT+0xe0>)
 800c340:	4293      	cmp	r3, r2
 800c342:	d009      	beq.n	800c358 <HAL_TIM_Base_Start_IT+0x80>
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	4a1c      	ldr	r2, [pc, #112]	@ (800c3bc <HAL_TIM_Base_Start_IT+0xe4>)
 800c34a:	4293      	cmp	r3, r2
 800c34c:	d004      	beq.n	800c358 <HAL_TIM_Base_Start_IT+0x80>
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	4a1b      	ldr	r2, [pc, #108]	@ (800c3c0 <HAL_TIM_Base_Start_IT+0xe8>)
 800c354:	4293      	cmp	r3, r2
 800c356:	d115      	bne.n	800c384 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	689a      	ldr	r2, [r3, #8]
 800c35e:	4b19      	ldr	r3, [pc, #100]	@ (800c3c4 <HAL_TIM_Base_Start_IT+0xec>)
 800c360:	4013      	ands	r3, r2
 800c362:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	2b06      	cmp	r3, #6
 800c368:	d015      	beq.n	800c396 <HAL_TIM_Base_Start_IT+0xbe>
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c370:	d011      	beq.n	800c396 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	681a      	ldr	r2, [r3, #0]
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	f042 0201 	orr.w	r2, r2, #1
 800c380:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c382:	e008      	b.n	800c396 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	681a      	ldr	r2, [r3, #0]
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	f042 0201 	orr.w	r2, r2, #1
 800c392:	601a      	str	r2, [r3, #0]
 800c394:	e000      	b.n	800c398 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c396:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c398:	2300      	movs	r3, #0
}
 800c39a:	4618      	mov	r0, r3
 800c39c:	3714      	adds	r7, #20
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a4:	4770      	bx	lr
 800c3a6:	bf00      	nop
 800c3a8:	40010000 	.word	0x40010000
 800c3ac:	40000400 	.word	0x40000400
 800c3b0:	40000800 	.word	0x40000800
 800c3b4:	40000c00 	.word	0x40000c00
 800c3b8:	40010400 	.word	0x40010400
 800c3bc:	40001800 	.word	0x40001800
 800c3c0:	40014000 	.word	0x40014000
 800c3c4:	00010007 	.word	0x00010007

0800c3c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b084      	sub	sp, #16
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	68db      	ldr	r3, [r3, #12]
 800c3d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	691b      	ldr	r3, [r3, #16]
 800c3de:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c3e0:	68bb      	ldr	r3, [r7, #8]
 800c3e2:	f003 0302 	and.w	r3, r3, #2
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d020      	beq.n	800c42c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	f003 0302 	and.w	r3, r3, #2
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d01b      	beq.n	800c42c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	f06f 0202 	mvn.w	r2, #2
 800c3fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	2201      	movs	r2, #1
 800c402:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	699b      	ldr	r3, [r3, #24]
 800c40a:	f003 0303 	and.w	r3, r3, #3
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d003      	beq.n	800c41a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c412:	6878      	ldr	r0, [r7, #4]
 800c414:	f000 f9e2 	bl	800c7dc <HAL_TIM_IC_CaptureCallback>
 800c418:	e005      	b.n	800c426 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c41a:	6878      	ldr	r0, [r7, #4]
 800c41c:	f000 f9d4 	bl	800c7c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c420:	6878      	ldr	r0, [r7, #4]
 800c422:	f000 f9e5 	bl	800c7f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	2200      	movs	r2, #0
 800c42a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c42c:	68bb      	ldr	r3, [r7, #8]
 800c42e:	f003 0304 	and.w	r3, r3, #4
 800c432:	2b00      	cmp	r3, #0
 800c434:	d020      	beq.n	800c478 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	f003 0304 	and.w	r3, r3, #4
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d01b      	beq.n	800c478 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	f06f 0204 	mvn.w	r2, #4
 800c448:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	2202      	movs	r2, #2
 800c44e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	699b      	ldr	r3, [r3, #24]
 800c456:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d003      	beq.n	800c466 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c45e:	6878      	ldr	r0, [r7, #4]
 800c460:	f000 f9bc 	bl	800c7dc <HAL_TIM_IC_CaptureCallback>
 800c464:	e005      	b.n	800c472 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c466:	6878      	ldr	r0, [r7, #4]
 800c468:	f000 f9ae 	bl	800c7c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c46c:	6878      	ldr	r0, [r7, #4]
 800c46e:	f000 f9bf 	bl	800c7f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	2200      	movs	r2, #0
 800c476:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c478:	68bb      	ldr	r3, [r7, #8]
 800c47a:	f003 0308 	and.w	r3, r3, #8
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d020      	beq.n	800c4c4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	f003 0308 	and.w	r3, r3, #8
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d01b      	beq.n	800c4c4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	f06f 0208 	mvn.w	r2, #8
 800c494:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	2204      	movs	r2, #4
 800c49a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	69db      	ldr	r3, [r3, #28]
 800c4a2:	f003 0303 	and.w	r3, r3, #3
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d003      	beq.n	800c4b2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c4aa:	6878      	ldr	r0, [r7, #4]
 800c4ac:	f000 f996 	bl	800c7dc <HAL_TIM_IC_CaptureCallback>
 800c4b0:	e005      	b.n	800c4be <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c4b2:	6878      	ldr	r0, [r7, #4]
 800c4b4:	f000 f988 	bl	800c7c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c4b8:	6878      	ldr	r0, [r7, #4]
 800c4ba:	f000 f999 	bl	800c7f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c4c4:	68bb      	ldr	r3, [r7, #8]
 800c4c6:	f003 0310 	and.w	r3, r3, #16
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d020      	beq.n	800c510 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	f003 0310 	and.w	r3, r3, #16
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d01b      	beq.n	800c510 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	f06f 0210 	mvn.w	r2, #16
 800c4e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	2208      	movs	r2, #8
 800c4e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	69db      	ldr	r3, [r3, #28]
 800c4ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d003      	beq.n	800c4fe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c4f6:	6878      	ldr	r0, [r7, #4]
 800c4f8:	f000 f970 	bl	800c7dc <HAL_TIM_IC_CaptureCallback>
 800c4fc:	e005      	b.n	800c50a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c4fe:	6878      	ldr	r0, [r7, #4]
 800c500:	f000 f962 	bl	800c7c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c504:	6878      	ldr	r0, [r7, #4]
 800c506:	f000 f973 	bl	800c7f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	2200      	movs	r2, #0
 800c50e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c510:	68bb      	ldr	r3, [r7, #8]
 800c512:	f003 0301 	and.w	r3, r3, #1
 800c516:	2b00      	cmp	r3, #0
 800c518:	d00c      	beq.n	800c534 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	f003 0301 	and.w	r3, r3, #1
 800c520:	2b00      	cmp	r3, #0
 800c522:	d007      	beq.n	800c534 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	f06f 0201 	mvn.w	r2, #1
 800c52c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c52e:	6878      	ldr	r0, [r7, #4]
 800c530:	f7f4 f99a 	bl	8000868 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c534:	68bb      	ldr	r3, [r7, #8]
 800c536:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d104      	bne.n	800c548 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800c53e:	68bb      	ldr	r3, [r7, #8]
 800c540:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c544:	2b00      	cmp	r3, #0
 800c546:	d00c      	beq.n	800c562 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d007      	beq.n	800c562 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800c55a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c55c:	6878      	ldr	r0, [r7, #4]
 800c55e:	f000 fb31 	bl	800cbc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c562:	68bb      	ldr	r3, [r7, #8]
 800c564:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d00c      	beq.n	800c586 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c572:	2b00      	cmp	r3, #0
 800c574:	d007      	beq.n	800c586 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800c57e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c580:	6878      	ldr	r0, [r7, #4]
 800c582:	f000 fb29 	bl	800cbd8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c586:	68bb      	ldr	r3, [r7, #8]
 800c588:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d00c      	beq.n	800c5aa <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c596:	2b00      	cmp	r3, #0
 800c598:	d007      	beq.n	800c5aa <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c5a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c5a4:	6878      	ldr	r0, [r7, #4]
 800c5a6:	f000 f92d 	bl	800c804 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c5aa:	68bb      	ldr	r3, [r7, #8]
 800c5ac:	f003 0320 	and.w	r3, r3, #32
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d00c      	beq.n	800c5ce <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	f003 0320 	and.w	r3, r3, #32
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d007      	beq.n	800c5ce <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	f06f 0220 	mvn.w	r2, #32
 800c5c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c5c8:	6878      	ldr	r0, [r7, #4]
 800c5ca:	f000 faf1 	bl	800cbb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c5ce:	bf00      	nop
 800c5d0:	3710      	adds	r7, #16
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	bd80      	pop	{r7, pc}
	...

0800c5d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b084      	sub	sp, #16
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
 800c5e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c5ec:	2b01      	cmp	r3, #1
 800c5ee:	d101      	bne.n	800c5f4 <HAL_TIM_ConfigClockSource+0x1c>
 800c5f0:	2302      	movs	r3, #2
 800c5f2:	e0dc      	b.n	800c7ae <HAL_TIM_ConfigClockSource+0x1d6>
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	2201      	movs	r2, #1
 800c5f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	2202      	movs	r2, #2
 800c600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	689b      	ldr	r3, [r3, #8]
 800c60a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c60c:	68ba      	ldr	r2, [r7, #8]
 800c60e:	4b6a      	ldr	r3, [pc, #424]	@ (800c7b8 <HAL_TIM_ConfigClockSource+0x1e0>)
 800c610:	4013      	ands	r3, r2
 800c612:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c614:	68bb      	ldr	r3, [r7, #8]
 800c616:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c61a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	68ba      	ldr	r2, [r7, #8]
 800c622:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c624:	683b      	ldr	r3, [r7, #0]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	4a64      	ldr	r2, [pc, #400]	@ (800c7bc <HAL_TIM_ConfigClockSource+0x1e4>)
 800c62a:	4293      	cmp	r3, r2
 800c62c:	f000 80a9 	beq.w	800c782 <HAL_TIM_ConfigClockSource+0x1aa>
 800c630:	4a62      	ldr	r2, [pc, #392]	@ (800c7bc <HAL_TIM_ConfigClockSource+0x1e4>)
 800c632:	4293      	cmp	r3, r2
 800c634:	f200 80ae 	bhi.w	800c794 <HAL_TIM_ConfigClockSource+0x1bc>
 800c638:	4a61      	ldr	r2, [pc, #388]	@ (800c7c0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c63a:	4293      	cmp	r3, r2
 800c63c:	f000 80a1 	beq.w	800c782 <HAL_TIM_ConfigClockSource+0x1aa>
 800c640:	4a5f      	ldr	r2, [pc, #380]	@ (800c7c0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c642:	4293      	cmp	r3, r2
 800c644:	f200 80a6 	bhi.w	800c794 <HAL_TIM_ConfigClockSource+0x1bc>
 800c648:	4a5e      	ldr	r2, [pc, #376]	@ (800c7c4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c64a:	4293      	cmp	r3, r2
 800c64c:	f000 8099 	beq.w	800c782 <HAL_TIM_ConfigClockSource+0x1aa>
 800c650:	4a5c      	ldr	r2, [pc, #368]	@ (800c7c4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c652:	4293      	cmp	r3, r2
 800c654:	f200 809e 	bhi.w	800c794 <HAL_TIM_ConfigClockSource+0x1bc>
 800c658:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c65c:	f000 8091 	beq.w	800c782 <HAL_TIM_ConfigClockSource+0x1aa>
 800c660:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c664:	f200 8096 	bhi.w	800c794 <HAL_TIM_ConfigClockSource+0x1bc>
 800c668:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c66c:	f000 8089 	beq.w	800c782 <HAL_TIM_ConfigClockSource+0x1aa>
 800c670:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c674:	f200 808e 	bhi.w	800c794 <HAL_TIM_ConfigClockSource+0x1bc>
 800c678:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c67c:	d03e      	beq.n	800c6fc <HAL_TIM_ConfigClockSource+0x124>
 800c67e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c682:	f200 8087 	bhi.w	800c794 <HAL_TIM_ConfigClockSource+0x1bc>
 800c686:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c68a:	f000 8086 	beq.w	800c79a <HAL_TIM_ConfigClockSource+0x1c2>
 800c68e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c692:	d87f      	bhi.n	800c794 <HAL_TIM_ConfigClockSource+0x1bc>
 800c694:	2b70      	cmp	r3, #112	@ 0x70
 800c696:	d01a      	beq.n	800c6ce <HAL_TIM_ConfigClockSource+0xf6>
 800c698:	2b70      	cmp	r3, #112	@ 0x70
 800c69a:	d87b      	bhi.n	800c794 <HAL_TIM_ConfigClockSource+0x1bc>
 800c69c:	2b60      	cmp	r3, #96	@ 0x60
 800c69e:	d050      	beq.n	800c742 <HAL_TIM_ConfigClockSource+0x16a>
 800c6a0:	2b60      	cmp	r3, #96	@ 0x60
 800c6a2:	d877      	bhi.n	800c794 <HAL_TIM_ConfigClockSource+0x1bc>
 800c6a4:	2b50      	cmp	r3, #80	@ 0x50
 800c6a6:	d03c      	beq.n	800c722 <HAL_TIM_ConfigClockSource+0x14a>
 800c6a8:	2b50      	cmp	r3, #80	@ 0x50
 800c6aa:	d873      	bhi.n	800c794 <HAL_TIM_ConfigClockSource+0x1bc>
 800c6ac:	2b40      	cmp	r3, #64	@ 0x40
 800c6ae:	d058      	beq.n	800c762 <HAL_TIM_ConfigClockSource+0x18a>
 800c6b0:	2b40      	cmp	r3, #64	@ 0x40
 800c6b2:	d86f      	bhi.n	800c794 <HAL_TIM_ConfigClockSource+0x1bc>
 800c6b4:	2b30      	cmp	r3, #48	@ 0x30
 800c6b6:	d064      	beq.n	800c782 <HAL_TIM_ConfigClockSource+0x1aa>
 800c6b8:	2b30      	cmp	r3, #48	@ 0x30
 800c6ba:	d86b      	bhi.n	800c794 <HAL_TIM_ConfigClockSource+0x1bc>
 800c6bc:	2b20      	cmp	r3, #32
 800c6be:	d060      	beq.n	800c782 <HAL_TIM_ConfigClockSource+0x1aa>
 800c6c0:	2b20      	cmp	r3, #32
 800c6c2:	d867      	bhi.n	800c794 <HAL_TIM_ConfigClockSource+0x1bc>
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d05c      	beq.n	800c782 <HAL_TIM_ConfigClockSource+0x1aa>
 800c6c8:	2b10      	cmp	r3, #16
 800c6ca:	d05a      	beq.n	800c782 <HAL_TIM_ConfigClockSource+0x1aa>
 800c6cc:	e062      	b.n	800c794 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c6d6:	683b      	ldr	r3, [r7, #0]
 800c6d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c6de:	f000 f9b9 	bl	800ca54 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	689b      	ldr	r3, [r3, #8]
 800c6e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c6ea:	68bb      	ldr	r3, [r7, #8]
 800c6ec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c6f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	68ba      	ldr	r2, [r7, #8]
 800c6f8:	609a      	str	r2, [r3, #8]
      break;
 800c6fa:	e04f      	b.n	800c79c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c700:	683b      	ldr	r3, [r7, #0]
 800c702:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c704:	683b      	ldr	r3, [r7, #0]
 800c706:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c708:	683b      	ldr	r3, [r7, #0]
 800c70a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c70c:	f000 f9a2 	bl	800ca54 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	689a      	ldr	r2, [r3, #8]
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c71e:	609a      	str	r2, [r3, #8]
      break;
 800c720:	e03c      	b.n	800c79c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c72a:	683b      	ldr	r3, [r7, #0]
 800c72c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c72e:	461a      	mov	r2, r3
 800c730:	f000 f912 	bl	800c958 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	2150      	movs	r1, #80	@ 0x50
 800c73a:	4618      	mov	r0, r3
 800c73c:	f000 f96c 	bl	800ca18 <TIM_ITRx_SetConfig>
      break;
 800c740:	e02c      	b.n	800c79c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c746:	683b      	ldr	r3, [r7, #0]
 800c748:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c74a:	683b      	ldr	r3, [r7, #0]
 800c74c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c74e:	461a      	mov	r2, r3
 800c750:	f000 f931 	bl	800c9b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	2160      	movs	r1, #96	@ 0x60
 800c75a:	4618      	mov	r0, r3
 800c75c:	f000 f95c 	bl	800ca18 <TIM_ITRx_SetConfig>
      break;
 800c760:	e01c      	b.n	800c79c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c766:	683b      	ldr	r3, [r7, #0]
 800c768:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c76a:	683b      	ldr	r3, [r7, #0]
 800c76c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c76e:	461a      	mov	r2, r3
 800c770:	f000 f8f2 	bl	800c958 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	2140      	movs	r1, #64	@ 0x40
 800c77a:	4618      	mov	r0, r3
 800c77c:	f000 f94c 	bl	800ca18 <TIM_ITRx_SetConfig>
      break;
 800c780:	e00c      	b.n	800c79c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	681a      	ldr	r2, [r3, #0]
 800c786:	683b      	ldr	r3, [r7, #0]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	4619      	mov	r1, r3
 800c78c:	4610      	mov	r0, r2
 800c78e:	f000 f943 	bl	800ca18 <TIM_ITRx_SetConfig>
      break;
 800c792:	e003      	b.n	800c79c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800c794:	2301      	movs	r3, #1
 800c796:	73fb      	strb	r3, [r7, #15]
      break;
 800c798:	e000      	b.n	800c79c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800c79a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	2201      	movs	r2, #1
 800c7a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c7ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	3710      	adds	r7, #16
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	bd80      	pop	{r7, pc}
 800c7b6:	bf00      	nop
 800c7b8:	ffceff88 	.word	0xffceff88
 800c7bc:	00100040 	.word	0x00100040
 800c7c0:	00100030 	.word	0x00100030
 800c7c4:	00100020 	.word	0x00100020

0800c7c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c7c8:	b480      	push	{r7}
 800c7ca:	b083      	sub	sp, #12
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c7d0:	bf00      	nop
 800c7d2:	370c      	adds	r7, #12
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7da:	4770      	bx	lr

0800c7dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c7dc:	b480      	push	{r7}
 800c7de:	b083      	sub	sp, #12
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c7e4:	bf00      	nop
 800c7e6:	370c      	adds	r7, #12
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ee:	4770      	bx	lr

0800c7f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c7f0:	b480      	push	{r7}
 800c7f2:	b083      	sub	sp, #12
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c7f8:	bf00      	nop
 800c7fa:	370c      	adds	r7, #12
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c802:	4770      	bx	lr

0800c804 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c804:	b480      	push	{r7}
 800c806:	b083      	sub	sp, #12
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c80c:	bf00      	nop
 800c80e:	370c      	adds	r7, #12
 800c810:	46bd      	mov	sp, r7
 800c812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c816:	4770      	bx	lr

0800c818 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c818:	b480      	push	{r7}
 800c81a:	b085      	sub	sp, #20
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
 800c820:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	4a43      	ldr	r2, [pc, #268]	@ (800c938 <TIM_Base_SetConfig+0x120>)
 800c82c:	4293      	cmp	r3, r2
 800c82e:	d013      	beq.n	800c858 <TIM_Base_SetConfig+0x40>
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c836:	d00f      	beq.n	800c858 <TIM_Base_SetConfig+0x40>
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	4a40      	ldr	r2, [pc, #256]	@ (800c93c <TIM_Base_SetConfig+0x124>)
 800c83c:	4293      	cmp	r3, r2
 800c83e:	d00b      	beq.n	800c858 <TIM_Base_SetConfig+0x40>
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	4a3f      	ldr	r2, [pc, #252]	@ (800c940 <TIM_Base_SetConfig+0x128>)
 800c844:	4293      	cmp	r3, r2
 800c846:	d007      	beq.n	800c858 <TIM_Base_SetConfig+0x40>
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	4a3e      	ldr	r2, [pc, #248]	@ (800c944 <TIM_Base_SetConfig+0x12c>)
 800c84c:	4293      	cmp	r3, r2
 800c84e:	d003      	beq.n	800c858 <TIM_Base_SetConfig+0x40>
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	4a3d      	ldr	r2, [pc, #244]	@ (800c948 <TIM_Base_SetConfig+0x130>)
 800c854:	4293      	cmp	r3, r2
 800c856:	d108      	bne.n	800c86a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c85e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c860:	683b      	ldr	r3, [r7, #0]
 800c862:	685b      	ldr	r3, [r3, #4]
 800c864:	68fa      	ldr	r2, [r7, #12]
 800c866:	4313      	orrs	r3, r2
 800c868:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	4a32      	ldr	r2, [pc, #200]	@ (800c938 <TIM_Base_SetConfig+0x120>)
 800c86e:	4293      	cmp	r3, r2
 800c870:	d01f      	beq.n	800c8b2 <TIM_Base_SetConfig+0x9a>
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c878:	d01b      	beq.n	800c8b2 <TIM_Base_SetConfig+0x9a>
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	4a2f      	ldr	r2, [pc, #188]	@ (800c93c <TIM_Base_SetConfig+0x124>)
 800c87e:	4293      	cmp	r3, r2
 800c880:	d017      	beq.n	800c8b2 <TIM_Base_SetConfig+0x9a>
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	4a2e      	ldr	r2, [pc, #184]	@ (800c940 <TIM_Base_SetConfig+0x128>)
 800c886:	4293      	cmp	r3, r2
 800c888:	d013      	beq.n	800c8b2 <TIM_Base_SetConfig+0x9a>
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	4a2d      	ldr	r2, [pc, #180]	@ (800c944 <TIM_Base_SetConfig+0x12c>)
 800c88e:	4293      	cmp	r3, r2
 800c890:	d00f      	beq.n	800c8b2 <TIM_Base_SetConfig+0x9a>
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	4a2c      	ldr	r2, [pc, #176]	@ (800c948 <TIM_Base_SetConfig+0x130>)
 800c896:	4293      	cmp	r3, r2
 800c898:	d00b      	beq.n	800c8b2 <TIM_Base_SetConfig+0x9a>
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	4a2b      	ldr	r2, [pc, #172]	@ (800c94c <TIM_Base_SetConfig+0x134>)
 800c89e:	4293      	cmp	r3, r2
 800c8a0:	d007      	beq.n	800c8b2 <TIM_Base_SetConfig+0x9a>
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	4a2a      	ldr	r2, [pc, #168]	@ (800c950 <TIM_Base_SetConfig+0x138>)
 800c8a6:	4293      	cmp	r3, r2
 800c8a8:	d003      	beq.n	800c8b2 <TIM_Base_SetConfig+0x9a>
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	4a29      	ldr	r2, [pc, #164]	@ (800c954 <TIM_Base_SetConfig+0x13c>)
 800c8ae:	4293      	cmp	r3, r2
 800c8b0:	d108      	bne.n	800c8c4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c8b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c8ba:	683b      	ldr	r3, [r7, #0]
 800c8bc:	68db      	ldr	r3, [r3, #12]
 800c8be:	68fa      	ldr	r2, [r7, #12]
 800c8c0:	4313      	orrs	r3, r2
 800c8c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c8ca:	683b      	ldr	r3, [r7, #0]
 800c8cc:	695b      	ldr	r3, [r3, #20]
 800c8ce:	4313      	orrs	r3, r2
 800c8d0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c8d2:	683b      	ldr	r3, [r7, #0]
 800c8d4:	689a      	ldr	r2, [r3, #8]
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c8da:	683b      	ldr	r3, [r7, #0]
 800c8dc:	681a      	ldr	r2, [r3, #0]
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	4a14      	ldr	r2, [pc, #80]	@ (800c938 <TIM_Base_SetConfig+0x120>)
 800c8e6:	4293      	cmp	r3, r2
 800c8e8:	d00f      	beq.n	800c90a <TIM_Base_SetConfig+0xf2>
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	4a16      	ldr	r2, [pc, #88]	@ (800c948 <TIM_Base_SetConfig+0x130>)
 800c8ee:	4293      	cmp	r3, r2
 800c8f0:	d00b      	beq.n	800c90a <TIM_Base_SetConfig+0xf2>
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	4a15      	ldr	r2, [pc, #84]	@ (800c94c <TIM_Base_SetConfig+0x134>)
 800c8f6:	4293      	cmp	r3, r2
 800c8f8:	d007      	beq.n	800c90a <TIM_Base_SetConfig+0xf2>
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	4a14      	ldr	r2, [pc, #80]	@ (800c950 <TIM_Base_SetConfig+0x138>)
 800c8fe:	4293      	cmp	r3, r2
 800c900:	d003      	beq.n	800c90a <TIM_Base_SetConfig+0xf2>
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	4a13      	ldr	r2, [pc, #76]	@ (800c954 <TIM_Base_SetConfig+0x13c>)
 800c906:	4293      	cmp	r3, r2
 800c908:	d103      	bne.n	800c912 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c90a:	683b      	ldr	r3, [r7, #0]
 800c90c:	691a      	ldr	r2, [r3, #16]
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	f043 0204 	orr.w	r2, r3, #4
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	2201      	movs	r2, #1
 800c922:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	68fa      	ldr	r2, [r7, #12]
 800c928:	601a      	str	r2, [r3, #0]
}
 800c92a:	bf00      	nop
 800c92c:	3714      	adds	r7, #20
 800c92e:	46bd      	mov	sp, r7
 800c930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c934:	4770      	bx	lr
 800c936:	bf00      	nop
 800c938:	40010000 	.word	0x40010000
 800c93c:	40000400 	.word	0x40000400
 800c940:	40000800 	.word	0x40000800
 800c944:	40000c00 	.word	0x40000c00
 800c948:	40010400 	.word	0x40010400
 800c94c:	40014000 	.word	0x40014000
 800c950:	40014400 	.word	0x40014400
 800c954:	40014800 	.word	0x40014800

0800c958 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c958:	b480      	push	{r7}
 800c95a:	b087      	sub	sp, #28
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	60f8      	str	r0, [r7, #12]
 800c960:	60b9      	str	r1, [r7, #8]
 800c962:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	6a1b      	ldr	r3, [r3, #32]
 800c968:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	6a1b      	ldr	r3, [r3, #32]
 800c96e:	f023 0201 	bic.w	r2, r3, #1
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	699b      	ldr	r3, [r3, #24]
 800c97a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c97c:	693b      	ldr	r3, [r7, #16]
 800c97e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c982:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	011b      	lsls	r3, r3, #4
 800c988:	693a      	ldr	r2, [r7, #16]
 800c98a:	4313      	orrs	r3, r2
 800c98c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c98e:	697b      	ldr	r3, [r7, #20]
 800c990:	f023 030a 	bic.w	r3, r3, #10
 800c994:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c996:	697a      	ldr	r2, [r7, #20]
 800c998:	68bb      	ldr	r3, [r7, #8]
 800c99a:	4313      	orrs	r3, r2
 800c99c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	693a      	ldr	r2, [r7, #16]
 800c9a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	697a      	ldr	r2, [r7, #20]
 800c9a8:	621a      	str	r2, [r3, #32]
}
 800c9aa:	bf00      	nop
 800c9ac:	371c      	adds	r7, #28
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b4:	4770      	bx	lr

0800c9b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c9b6:	b480      	push	{r7}
 800c9b8:	b087      	sub	sp, #28
 800c9ba:	af00      	add	r7, sp, #0
 800c9bc:	60f8      	str	r0, [r7, #12]
 800c9be:	60b9      	str	r1, [r7, #8]
 800c9c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	6a1b      	ldr	r3, [r3, #32]
 800c9c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	6a1b      	ldr	r3, [r3, #32]
 800c9cc:	f023 0210 	bic.w	r2, r3, #16
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	699b      	ldr	r3, [r3, #24]
 800c9d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c9da:	693b      	ldr	r3, [r7, #16]
 800c9dc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c9e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	031b      	lsls	r3, r3, #12
 800c9e6:	693a      	ldr	r2, [r7, #16]
 800c9e8:	4313      	orrs	r3, r2
 800c9ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c9ec:	697b      	ldr	r3, [r7, #20]
 800c9ee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c9f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c9f4:	68bb      	ldr	r3, [r7, #8]
 800c9f6:	011b      	lsls	r3, r3, #4
 800c9f8:	697a      	ldr	r2, [r7, #20]
 800c9fa:	4313      	orrs	r3, r2
 800c9fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	693a      	ldr	r2, [r7, #16]
 800ca02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	697a      	ldr	r2, [r7, #20]
 800ca08:	621a      	str	r2, [r3, #32]
}
 800ca0a:	bf00      	nop
 800ca0c:	371c      	adds	r7, #28
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca14:	4770      	bx	lr
	...

0800ca18 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ca18:	b480      	push	{r7}
 800ca1a:	b085      	sub	sp, #20
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]
 800ca20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	689b      	ldr	r3, [r3, #8]
 800ca26:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ca28:	68fa      	ldr	r2, [r7, #12]
 800ca2a:	4b09      	ldr	r3, [pc, #36]	@ (800ca50 <TIM_ITRx_SetConfig+0x38>)
 800ca2c:	4013      	ands	r3, r2
 800ca2e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ca30:	683a      	ldr	r2, [r7, #0]
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	4313      	orrs	r3, r2
 800ca36:	f043 0307 	orr.w	r3, r3, #7
 800ca3a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	68fa      	ldr	r2, [r7, #12]
 800ca40:	609a      	str	r2, [r3, #8]
}
 800ca42:	bf00      	nop
 800ca44:	3714      	adds	r7, #20
 800ca46:	46bd      	mov	sp, r7
 800ca48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4c:	4770      	bx	lr
 800ca4e:	bf00      	nop
 800ca50:	ffcfff8f 	.word	0xffcfff8f

0800ca54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ca54:	b480      	push	{r7}
 800ca56:	b087      	sub	sp, #28
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	60f8      	str	r0, [r7, #12]
 800ca5c:	60b9      	str	r1, [r7, #8]
 800ca5e:	607a      	str	r2, [r7, #4]
 800ca60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	689b      	ldr	r3, [r3, #8]
 800ca66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ca68:	697b      	ldr	r3, [r7, #20]
 800ca6a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ca6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ca70:	683b      	ldr	r3, [r7, #0]
 800ca72:	021a      	lsls	r2, r3, #8
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	431a      	orrs	r2, r3
 800ca78:	68bb      	ldr	r3, [r7, #8]
 800ca7a:	4313      	orrs	r3, r2
 800ca7c:	697a      	ldr	r2, [r7, #20]
 800ca7e:	4313      	orrs	r3, r2
 800ca80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	697a      	ldr	r2, [r7, #20]
 800ca86:	609a      	str	r2, [r3, #8]
}
 800ca88:	bf00      	nop
 800ca8a:	371c      	adds	r7, #28
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca92:	4770      	bx	lr

0800ca94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ca94:	b480      	push	{r7}
 800ca96:	b085      	sub	sp, #20
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]
 800ca9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800caa4:	2b01      	cmp	r3, #1
 800caa6:	d101      	bne.n	800caac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800caa8:	2302      	movs	r3, #2
 800caaa:	e06d      	b.n	800cb88 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	2201      	movs	r2, #1
 800cab0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	2202      	movs	r2, #2
 800cab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	685b      	ldr	r3, [r3, #4]
 800cac2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	689b      	ldr	r3, [r3, #8]
 800caca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	4a30      	ldr	r2, [pc, #192]	@ (800cb94 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cad2:	4293      	cmp	r3, r2
 800cad4:	d004      	beq.n	800cae0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	4a2f      	ldr	r2, [pc, #188]	@ (800cb98 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cadc:	4293      	cmp	r3, r2
 800cade:	d108      	bne.n	800caf2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800cae6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cae8:	683b      	ldr	r3, [r7, #0]
 800caea:	685b      	ldr	r3, [r3, #4]
 800caec:	68fa      	ldr	r2, [r7, #12]
 800caee:	4313      	orrs	r3, r2
 800caf0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800caf8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	68fa      	ldr	r2, [r7, #12]
 800cb00:	4313      	orrs	r3, r2
 800cb02:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	68fa      	ldr	r2, [r7, #12]
 800cb0a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	4a20      	ldr	r2, [pc, #128]	@ (800cb94 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cb12:	4293      	cmp	r3, r2
 800cb14:	d022      	beq.n	800cb5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cb1e:	d01d      	beq.n	800cb5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	4a1d      	ldr	r2, [pc, #116]	@ (800cb9c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800cb26:	4293      	cmp	r3, r2
 800cb28:	d018      	beq.n	800cb5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	4a1c      	ldr	r2, [pc, #112]	@ (800cba0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800cb30:	4293      	cmp	r3, r2
 800cb32:	d013      	beq.n	800cb5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	4a1a      	ldr	r2, [pc, #104]	@ (800cba4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800cb3a:	4293      	cmp	r3, r2
 800cb3c:	d00e      	beq.n	800cb5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	4a15      	ldr	r2, [pc, #84]	@ (800cb98 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cb44:	4293      	cmp	r3, r2
 800cb46:	d009      	beq.n	800cb5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	4a16      	ldr	r2, [pc, #88]	@ (800cba8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cb4e:	4293      	cmp	r3, r2
 800cb50:	d004      	beq.n	800cb5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	4a15      	ldr	r2, [pc, #84]	@ (800cbac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cb58:	4293      	cmp	r3, r2
 800cb5a:	d10c      	bne.n	800cb76 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cb5c:	68bb      	ldr	r3, [r7, #8]
 800cb5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cb62:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cb64:	683b      	ldr	r3, [r7, #0]
 800cb66:	689b      	ldr	r3, [r3, #8]
 800cb68:	68ba      	ldr	r2, [r7, #8]
 800cb6a:	4313      	orrs	r3, r2
 800cb6c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	68ba      	ldr	r2, [r7, #8]
 800cb74:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	2201      	movs	r2, #1
 800cb7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	2200      	movs	r2, #0
 800cb82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800cb86:	2300      	movs	r3, #0
}
 800cb88:	4618      	mov	r0, r3
 800cb8a:	3714      	adds	r7, #20
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb92:	4770      	bx	lr
 800cb94:	40010000 	.word	0x40010000
 800cb98:	40010400 	.word	0x40010400
 800cb9c:	40000400 	.word	0x40000400
 800cba0:	40000800 	.word	0x40000800
 800cba4:	40000c00 	.word	0x40000c00
 800cba8:	40001800 	.word	0x40001800
 800cbac:	40014000 	.word	0x40014000

0800cbb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cbb0:	b480      	push	{r7}
 800cbb2:	b083      	sub	sp, #12
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cbb8:	bf00      	nop
 800cbba:	370c      	adds	r7, #12
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc2:	4770      	bx	lr

0800cbc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cbc4:	b480      	push	{r7}
 800cbc6:	b083      	sub	sp, #12
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cbcc:	bf00      	nop
 800cbce:	370c      	adds	r7, #12
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd6:	4770      	bx	lr

0800cbd8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cbd8:	b480      	push	{r7}
 800cbda:	b083      	sub	sp, #12
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cbe0:	bf00      	nop
 800cbe2:	370c      	adds	r7, #12
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbea:	4770      	bx	lr

0800cbec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b082      	sub	sp, #8
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d101      	bne.n	800cbfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cbfa:	2301      	movs	r3, #1
 800cbfc:	e042      	b.n	800cc84 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d106      	bne.n	800cc16 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cc10:	6878      	ldr	r0, [r7, #4]
 800cc12:	f7f4 fe0d 	bl	8001830 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	2224      	movs	r2, #36	@ 0x24
 800cc1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	681a      	ldr	r2, [r3, #0]
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	f022 0201 	bic.w	r2, r2, #1
 800cc2c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d002      	beq.n	800cc3c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800cc36:	6878      	ldr	r0, [r7, #4]
 800cc38:	f001 fa60 	bl	800e0fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cc3c:	6878      	ldr	r0, [r7, #4]
 800cc3e:	f000 fcf5 	bl	800d62c <UART_SetConfig>
 800cc42:	4603      	mov	r3, r0
 800cc44:	2b01      	cmp	r3, #1
 800cc46:	d101      	bne.n	800cc4c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800cc48:	2301      	movs	r3, #1
 800cc4a:	e01b      	b.n	800cc84 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	685a      	ldr	r2, [r3, #4]
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800cc5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	689a      	ldr	r2, [r3, #8]
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800cc6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	681a      	ldr	r2, [r3, #0]
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	f042 0201 	orr.w	r2, r2, #1
 800cc7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cc7c:	6878      	ldr	r0, [r7, #4]
 800cc7e:	f001 fadf 	bl	800e240 <UART_CheckIdleState>
 800cc82:	4603      	mov	r3, r0
}
 800cc84:	4618      	mov	r0, r3
 800cc86:	3708      	adds	r7, #8
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	bd80      	pop	{r7, pc}

0800cc8c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cc8c:	b580      	push	{r7, lr}
 800cc8e:	b08a      	sub	sp, #40	@ 0x28
 800cc90:	af02      	add	r7, sp, #8
 800cc92:	60f8      	str	r0, [r7, #12]
 800cc94:	60b9      	str	r1, [r7, #8]
 800cc96:	603b      	str	r3, [r7, #0]
 800cc98:	4613      	mov	r3, r2
 800cc9a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cca2:	2b20      	cmp	r3, #32
 800cca4:	d17b      	bne.n	800cd9e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800cca6:	68bb      	ldr	r3, [r7, #8]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d002      	beq.n	800ccb2 <HAL_UART_Transmit+0x26>
 800ccac:	88fb      	ldrh	r3, [r7, #6]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d101      	bne.n	800ccb6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800ccb2:	2301      	movs	r3, #1
 800ccb4:	e074      	b.n	800cda0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	2200      	movs	r2, #0
 800ccba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	2221      	movs	r2, #33	@ 0x21
 800ccc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ccc6:	f7f6 f9bf 	bl	8003048 <HAL_GetTick>
 800ccca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	88fa      	ldrh	r2, [r7, #6]
 800ccd0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	88fa      	ldrh	r2, [r7, #6]
 800ccd8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	689b      	ldr	r3, [r3, #8]
 800cce0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cce4:	d108      	bne.n	800ccf8 <HAL_UART_Transmit+0x6c>
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	691b      	ldr	r3, [r3, #16]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d104      	bne.n	800ccf8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800ccee:	2300      	movs	r3, #0
 800ccf0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ccf2:	68bb      	ldr	r3, [r7, #8]
 800ccf4:	61bb      	str	r3, [r7, #24]
 800ccf6:	e003      	b.n	800cd00 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ccf8:	68bb      	ldr	r3, [r7, #8]
 800ccfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800cd00:	e030      	b.n	800cd64 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cd02:	683b      	ldr	r3, [r7, #0]
 800cd04:	9300      	str	r3, [sp, #0]
 800cd06:	697b      	ldr	r3, [r7, #20]
 800cd08:	2200      	movs	r2, #0
 800cd0a:	2180      	movs	r1, #128	@ 0x80
 800cd0c:	68f8      	ldr	r0, [r7, #12]
 800cd0e:	f001 fb41 	bl	800e394 <UART_WaitOnFlagUntilTimeout>
 800cd12:	4603      	mov	r3, r0
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d005      	beq.n	800cd24 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	2220      	movs	r2, #32
 800cd1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800cd20:	2303      	movs	r3, #3
 800cd22:	e03d      	b.n	800cda0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800cd24:	69fb      	ldr	r3, [r7, #28]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d10b      	bne.n	800cd42 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cd2a:	69bb      	ldr	r3, [r7, #24]
 800cd2c:	881b      	ldrh	r3, [r3, #0]
 800cd2e:	461a      	mov	r2, r3
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cd38:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800cd3a:	69bb      	ldr	r3, [r7, #24]
 800cd3c:	3302      	adds	r3, #2
 800cd3e:	61bb      	str	r3, [r7, #24]
 800cd40:	e007      	b.n	800cd52 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800cd42:	69fb      	ldr	r3, [r7, #28]
 800cd44:	781a      	ldrb	r2, [r3, #0]
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800cd4c:	69fb      	ldr	r3, [r7, #28]
 800cd4e:	3301      	adds	r3, #1
 800cd50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800cd58:	b29b      	uxth	r3, r3
 800cd5a:	3b01      	subs	r3, #1
 800cd5c:	b29a      	uxth	r2, r3
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800cd6a:	b29b      	uxth	r3, r3
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d1c8      	bne.n	800cd02 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cd70:	683b      	ldr	r3, [r7, #0]
 800cd72:	9300      	str	r3, [sp, #0]
 800cd74:	697b      	ldr	r3, [r7, #20]
 800cd76:	2200      	movs	r2, #0
 800cd78:	2140      	movs	r1, #64	@ 0x40
 800cd7a:	68f8      	ldr	r0, [r7, #12]
 800cd7c:	f001 fb0a 	bl	800e394 <UART_WaitOnFlagUntilTimeout>
 800cd80:	4603      	mov	r3, r0
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d005      	beq.n	800cd92 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	2220      	movs	r2, #32
 800cd8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800cd8e:	2303      	movs	r3, #3
 800cd90:	e006      	b.n	800cda0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	2220      	movs	r2, #32
 800cd96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	e000      	b.n	800cda0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800cd9e:	2302      	movs	r3, #2
  }
}
 800cda0:	4618      	mov	r0, r3
 800cda2:	3720      	adds	r7, #32
 800cda4:	46bd      	mov	sp, r7
 800cda6:	bd80      	pop	{r7, pc}

0800cda8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b08a      	sub	sp, #40	@ 0x28
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	60f8      	str	r0, [r7, #12]
 800cdb0:	60b9      	str	r1, [r7, #8]
 800cdb2:	4613      	mov	r3, r2
 800cdb4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cdbc:	2b20      	cmp	r3, #32
 800cdbe:	d137      	bne.n	800ce30 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800cdc0:	68bb      	ldr	r3, [r7, #8]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d002      	beq.n	800cdcc <HAL_UART_Receive_IT+0x24>
 800cdc6:	88fb      	ldrh	r3, [r7, #6]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d101      	bne.n	800cdd0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800cdcc:	2301      	movs	r3, #1
 800cdce:	e030      	b.n	800ce32 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	4a18      	ldr	r2, [pc, #96]	@ (800ce3c <HAL_UART_Receive_IT+0x94>)
 800cddc:	4293      	cmp	r3, r2
 800cdde:	d01f      	beq.n	800ce20 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	685b      	ldr	r3, [r3, #4]
 800cde6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d018      	beq.n	800ce20 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdf4:	697b      	ldr	r3, [r7, #20]
 800cdf6:	e853 3f00 	ldrex	r3, [r3]
 800cdfa:	613b      	str	r3, [r7, #16]
   return(result);
 800cdfc:	693b      	ldr	r3, [r7, #16]
 800cdfe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ce02:	627b      	str	r3, [r7, #36]	@ 0x24
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	461a      	mov	r2, r3
 800ce0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce0c:	623b      	str	r3, [r7, #32]
 800ce0e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce10:	69f9      	ldr	r1, [r7, #28]
 800ce12:	6a3a      	ldr	r2, [r7, #32]
 800ce14:	e841 2300 	strex	r3, r2, [r1]
 800ce18:	61bb      	str	r3, [r7, #24]
   return(result);
 800ce1a:	69bb      	ldr	r3, [r7, #24]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d1e6      	bne.n	800cdee <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ce20:	88fb      	ldrh	r3, [r7, #6]
 800ce22:	461a      	mov	r2, r3
 800ce24:	68b9      	ldr	r1, [r7, #8]
 800ce26:	68f8      	ldr	r0, [r7, #12]
 800ce28:	f001 fb22 	bl	800e470 <UART_Start_Receive_IT>
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	e000      	b.n	800ce32 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ce30:	2302      	movs	r3, #2
  }
}
 800ce32:	4618      	mov	r0, r3
 800ce34:	3728      	adds	r7, #40	@ 0x28
 800ce36:	46bd      	mov	sp, r7
 800ce38:	bd80      	pop	{r7, pc}
 800ce3a:	bf00      	nop
 800ce3c:	58000c00 	.word	0x58000c00

0800ce40 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b0ba      	sub	sp, #232	@ 0xe8
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	69db      	ldr	r3, [r3, #28]
 800ce4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	689b      	ldr	r3, [r3, #8]
 800ce62:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ce66:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800ce6a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800ce6e:	4013      	ands	r3, r2
 800ce70:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800ce74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d11b      	bne.n	800ceb4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ce7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce80:	f003 0320 	and.w	r3, r3, #32
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d015      	beq.n	800ceb4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ce88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ce8c:	f003 0320 	and.w	r3, r3, #32
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d105      	bne.n	800cea0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ce94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ce98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d009      	beq.n	800ceb4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	f000 8393 	beq.w	800d5d0 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ceae:	6878      	ldr	r0, [r7, #4]
 800ceb0:	4798      	blx	r3
      }
      return;
 800ceb2:	e38d      	b.n	800d5d0 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ceb4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	f000 8123 	beq.w	800d104 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800cebe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800cec2:	4b8d      	ldr	r3, [pc, #564]	@ (800d0f8 <HAL_UART_IRQHandler+0x2b8>)
 800cec4:	4013      	ands	r3, r2
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d106      	bne.n	800ced8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ceca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800cece:	4b8b      	ldr	r3, [pc, #556]	@ (800d0fc <HAL_UART_IRQHandler+0x2bc>)
 800ced0:	4013      	ands	r3, r2
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	f000 8116 	beq.w	800d104 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ced8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cedc:	f003 0301 	and.w	r3, r3, #1
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d011      	beq.n	800cf08 <HAL_UART_IRQHandler+0xc8>
 800cee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cee8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d00b      	beq.n	800cf08 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	2201      	movs	r2, #1
 800cef6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cefe:	f043 0201 	orr.w	r2, r3, #1
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cf08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cf0c:	f003 0302 	and.w	r3, r3, #2
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d011      	beq.n	800cf38 <HAL_UART_IRQHandler+0xf8>
 800cf14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cf18:	f003 0301 	and.w	r3, r3, #1
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d00b      	beq.n	800cf38 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	2202      	movs	r2, #2
 800cf26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cf2e:	f043 0204 	orr.w	r2, r3, #4
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cf38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cf3c:	f003 0304 	and.w	r3, r3, #4
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d011      	beq.n	800cf68 <HAL_UART_IRQHandler+0x128>
 800cf44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cf48:	f003 0301 	and.w	r3, r3, #1
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d00b      	beq.n	800cf68 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	2204      	movs	r2, #4
 800cf56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cf5e:	f043 0202 	orr.w	r2, r3, #2
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800cf68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cf6c:	f003 0308 	and.w	r3, r3, #8
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d017      	beq.n	800cfa4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cf74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cf78:	f003 0320 	and.w	r3, r3, #32
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d105      	bne.n	800cf8c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800cf80:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800cf84:	4b5c      	ldr	r3, [pc, #368]	@ (800d0f8 <HAL_UART_IRQHandler+0x2b8>)
 800cf86:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d00b      	beq.n	800cfa4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	2208      	movs	r2, #8
 800cf92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cf9a:	f043 0208 	orr.w	r2, r3, #8
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800cfa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cfa8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d012      	beq.n	800cfd6 <HAL_UART_IRQHandler+0x196>
 800cfb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cfb4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d00c      	beq.n	800cfd6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cfc4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cfcc:	f043 0220 	orr.w	r2, r3, #32
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	f000 82f9 	beq.w	800d5d4 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cfe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cfe6:	f003 0320 	and.w	r3, r3, #32
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d013      	beq.n	800d016 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cfee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cff2:	f003 0320 	and.w	r3, r3, #32
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d105      	bne.n	800d006 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cffa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cffe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d002:	2b00      	cmp	r3, #0
 800d004:	d007      	beq.n	800d016 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d003      	beq.n	800d016 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d012:	6878      	ldr	r0, [r7, #4]
 800d014:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d01c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	689b      	ldr	r3, [r3, #8]
 800d026:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d02a:	2b40      	cmp	r3, #64	@ 0x40
 800d02c:	d005      	beq.n	800d03a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d02e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d032:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d036:	2b00      	cmp	r3, #0
 800d038:	d054      	beq.n	800d0e4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d03a:	6878      	ldr	r0, [r7, #4]
 800d03c:	f001 fb3a 	bl	800e6b4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	689b      	ldr	r3, [r3, #8]
 800d046:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d04a:	2b40      	cmp	r3, #64	@ 0x40
 800d04c:	d146      	bne.n	800d0dc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	3308      	adds	r3, #8
 800d054:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d058:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d05c:	e853 3f00 	ldrex	r3, [r3]
 800d060:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800d064:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d068:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d06c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	3308      	adds	r3, #8
 800d076:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800d07a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800d07e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d082:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800d086:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800d08a:	e841 2300 	strex	r3, r2, [r1]
 800d08e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800d092:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d096:	2b00      	cmp	r3, #0
 800d098:	d1d9      	bne.n	800d04e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d017      	beq.n	800d0d4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d0aa:	4a15      	ldr	r2, [pc, #84]	@ (800d100 <HAL_UART_IRQHandler+0x2c0>)
 800d0ac:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	f7f8 ff4f 	bl	8005f58 <HAL_DMA_Abort_IT>
 800d0ba:	4603      	mov	r3, r0
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d019      	beq.n	800d0f4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d0c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d0c8:	687a      	ldr	r2, [r7, #4]
 800d0ca:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800d0ce:	4610      	mov	r0, r2
 800d0d0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d0d2:	e00f      	b.n	800d0f4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d0d4:	6878      	ldr	r0, [r7, #4]
 800d0d6:	f000 fa93 	bl	800d600 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d0da:	e00b      	b.n	800d0f4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d0dc:	6878      	ldr	r0, [r7, #4]
 800d0de:	f000 fa8f 	bl	800d600 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d0e2:	e007      	b.n	800d0f4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d0e4:	6878      	ldr	r0, [r7, #4]
 800d0e6:	f000 fa8b 	bl	800d600 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800d0f2:	e26f      	b.n	800d5d4 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d0f4:	bf00      	nop
    return;
 800d0f6:	e26d      	b.n	800d5d4 <HAL_UART_IRQHandler+0x794>
 800d0f8:	10000001 	.word	0x10000001
 800d0fc:	04000120 	.word	0x04000120
 800d100:	0800e781 	.word	0x0800e781

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d108:	2b01      	cmp	r3, #1
 800d10a:	f040 8203 	bne.w	800d514 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d10e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d112:	f003 0310 	and.w	r3, r3, #16
 800d116:	2b00      	cmp	r3, #0
 800d118:	f000 81fc 	beq.w	800d514 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d11c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d120:	f003 0310 	and.w	r3, r3, #16
 800d124:	2b00      	cmp	r3, #0
 800d126:	f000 81f5 	beq.w	800d514 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	2210      	movs	r2, #16
 800d130:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	689b      	ldr	r3, [r3, #8]
 800d138:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d13c:	2b40      	cmp	r3, #64	@ 0x40
 800d13e:	f040 816d 	bne.w	800d41c <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	4aa4      	ldr	r2, [pc, #656]	@ (800d3dc <HAL_UART_IRQHandler+0x59c>)
 800d14c:	4293      	cmp	r3, r2
 800d14e:	d068      	beq.n	800d222 <HAL_UART_IRQHandler+0x3e2>
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	4aa1      	ldr	r2, [pc, #644]	@ (800d3e0 <HAL_UART_IRQHandler+0x5a0>)
 800d15a:	4293      	cmp	r3, r2
 800d15c:	d061      	beq.n	800d222 <HAL_UART_IRQHandler+0x3e2>
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	4a9f      	ldr	r2, [pc, #636]	@ (800d3e4 <HAL_UART_IRQHandler+0x5a4>)
 800d168:	4293      	cmp	r3, r2
 800d16a:	d05a      	beq.n	800d222 <HAL_UART_IRQHandler+0x3e2>
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	4a9c      	ldr	r2, [pc, #624]	@ (800d3e8 <HAL_UART_IRQHandler+0x5a8>)
 800d176:	4293      	cmp	r3, r2
 800d178:	d053      	beq.n	800d222 <HAL_UART_IRQHandler+0x3e2>
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	4a9a      	ldr	r2, [pc, #616]	@ (800d3ec <HAL_UART_IRQHandler+0x5ac>)
 800d184:	4293      	cmp	r3, r2
 800d186:	d04c      	beq.n	800d222 <HAL_UART_IRQHandler+0x3e2>
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	4a97      	ldr	r2, [pc, #604]	@ (800d3f0 <HAL_UART_IRQHandler+0x5b0>)
 800d192:	4293      	cmp	r3, r2
 800d194:	d045      	beq.n	800d222 <HAL_UART_IRQHandler+0x3e2>
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	4a95      	ldr	r2, [pc, #596]	@ (800d3f4 <HAL_UART_IRQHandler+0x5b4>)
 800d1a0:	4293      	cmp	r3, r2
 800d1a2:	d03e      	beq.n	800d222 <HAL_UART_IRQHandler+0x3e2>
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	4a92      	ldr	r2, [pc, #584]	@ (800d3f8 <HAL_UART_IRQHandler+0x5b8>)
 800d1ae:	4293      	cmp	r3, r2
 800d1b0:	d037      	beq.n	800d222 <HAL_UART_IRQHandler+0x3e2>
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	4a90      	ldr	r2, [pc, #576]	@ (800d3fc <HAL_UART_IRQHandler+0x5bc>)
 800d1bc:	4293      	cmp	r3, r2
 800d1be:	d030      	beq.n	800d222 <HAL_UART_IRQHandler+0x3e2>
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	4a8d      	ldr	r2, [pc, #564]	@ (800d400 <HAL_UART_IRQHandler+0x5c0>)
 800d1ca:	4293      	cmp	r3, r2
 800d1cc:	d029      	beq.n	800d222 <HAL_UART_IRQHandler+0x3e2>
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	4a8b      	ldr	r2, [pc, #556]	@ (800d404 <HAL_UART_IRQHandler+0x5c4>)
 800d1d8:	4293      	cmp	r3, r2
 800d1da:	d022      	beq.n	800d222 <HAL_UART_IRQHandler+0x3e2>
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	4a88      	ldr	r2, [pc, #544]	@ (800d408 <HAL_UART_IRQHandler+0x5c8>)
 800d1e6:	4293      	cmp	r3, r2
 800d1e8:	d01b      	beq.n	800d222 <HAL_UART_IRQHandler+0x3e2>
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	4a86      	ldr	r2, [pc, #536]	@ (800d40c <HAL_UART_IRQHandler+0x5cc>)
 800d1f4:	4293      	cmp	r3, r2
 800d1f6:	d014      	beq.n	800d222 <HAL_UART_IRQHandler+0x3e2>
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	4a83      	ldr	r2, [pc, #524]	@ (800d410 <HAL_UART_IRQHandler+0x5d0>)
 800d202:	4293      	cmp	r3, r2
 800d204:	d00d      	beq.n	800d222 <HAL_UART_IRQHandler+0x3e2>
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	4a81      	ldr	r2, [pc, #516]	@ (800d414 <HAL_UART_IRQHandler+0x5d4>)
 800d210:	4293      	cmp	r3, r2
 800d212:	d006      	beq.n	800d222 <HAL_UART_IRQHandler+0x3e2>
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	4a7e      	ldr	r2, [pc, #504]	@ (800d418 <HAL_UART_IRQHandler+0x5d8>)
 800d21e:	4293      	cmp	r3, r2
 800d220:	d106      	bne.n	800d230 <HAL_UART_IRQHandler+0x3f0>
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	685b      	ldr	r3, [r3, #4]
 800d22c:	b29b      	uxth	r3, r3
 800d22e:	e005      	b.n	800d23c <HAL_UART_IRQHandler+0x3fc>
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	685b      	ldr	r3, [r3, #4]
 800d23a:	b29b      	uxth	r3, r3
 800d23c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d240:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800d244:	2b00      	cmp	r3, #0
 800d246:	f000 80ad 	beq.w	800d3a4 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d250:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d254:	429a      	cmp	r2, r3
 800d256:	f080 80a5 	bcs.w	800d3a4 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d260:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d26a:	69db      	ldr	r3, [r3, #28]
 800d26c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d270:	f000 8087 	beq.w	800d382 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d27c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d280:	e853 3f00 	ldrex	r3, [r3]
 800d284:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800d288:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d28c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d290:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	461a      	mov	r2, r3
 800d29a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d29e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d2a2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d2aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d2ae:	e841 2300 	strex	r3, r2, [r1]
 800d2b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800d2b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d1da      	bne.n	800d274 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	3308      	adds	r3, #8
 800d2c4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d2c8:	e853 3f00 	ldrex	r3, [r3]
 800d2cc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d2ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d2d0:	f023 0301 	bic.w	r3, r3, #1
 800d2d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	3308      	adds	r3, #8
 800d2de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d2e2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800d2e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2e8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d2ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d2ee:	e841 2300 	strex	r3, r2, [r1]
 800d2f2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d2f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d1e1      	bne.n	800d2be <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	3308      	adds	r3, #8
 800d300:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d302:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d304:	e853 3f00 	ldrex	r3, [r3]
 800d308:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d30a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d30c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d310:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	3308      	adds	r3, #8
 800d31a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d31e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d320:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d322:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d324:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d326:	e841 2300 	strex	r3, r2, [r1]
 800d32a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d32c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d1e3      	bne.n	800d2fa <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	2220      	movs	r2, #32
 800d336:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	2200      	movs	r2, #0
 800d33e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d346:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d348:	e853 3f00 	ldrex	r3, [r3]
 800d34c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d34e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d350:	f023 0310 	bic.w	r3, r3, #16
 800d354:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	461a      	mov	r2, r3
 800d35e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d362:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d364:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d366:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d368:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d36a:	e841 2300 	strex	r3, r2, [r1]
 800d36e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d370:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d372:	2b00      	cmp	r3, #0
 800d374:	d1e4      	bne.n	800d340 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d37c:	4618      	mov	r0, r3
 800d37e:	f7f8 facd 	bl	800591c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	2202      	movs	r2, #2
 800d386:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d394:	b29b      	uxth	r3, r3
 800d396:	1ad3      	subs	r3, r2, r3
 800d398:	b29b      	uxth	r3, r3
 800d39a:	4619      	mov	r1, r3
 800d39c:	6878      	ldr	r0, [r7, #4]
 800d39e:	f000 f939 	bl	800d614 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800d3a2:	e119      	b.n	800d5d8 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d3aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d3ae:	429a      	cmp	r2, r3
 800d3b0:	f040 8112 	bne.w	800d5d8 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d3ba:	69db      	ldr	r3, [r3, #28]
 800d3bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d3c0:	f040 810a 	bne.w	800d5d8 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	2202      	movs	r2, #2
 800d3c8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d3d0:	4619      	mov	r1, r3
 800d3d2:	6878      	ldr	r0, [r7, #4]
 800d3d4:	f000 f91e 	bl	800d614 <HAL_UARTEx_RxEventCallback>
      return;
 800d3d8:	e0fe      	b.n	800d5d8 <HAL_UART_IRQHandler+0x798>
 800d3da:	bf00      	nop
 800d3dc:	40020010 	.word	0x40020010
 800d3e0:	40020028 	.word	0x40020028
 800d3e4:	40020040 	.word	0x40020040
 800d3e8:	40020058 	.word	0x40020058
 800d3ec:	40020070 	.word	0x40020070
 800d3f0:	40020088 	.word	0x40020088
 800d3f4:	400200a0 	.word	0x400200a0
 800d3f8:	400200b8 	.word	0x400200b8
 800d3fc:	40020410 	.word	0x40020410
 800d400:	40020428 	.word	0x40020428
 800d404:	40020440 	.word	0x40020440
 800d408:	40020458 	.word	0x40020458
 800d40c:	40020470 	.word	0x40020470
 800d410:	40020488 	.word	0x40020488
 800d414:	400204a0 	.word	0x400204a0
 800d418:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d428:	b29b      	uxth	r3, r3
 800d42a:	1ad3      	subs	r3, r2, r3
 800d42c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d436:	b29b      	uxth	r3, r3
 800d438:	2b00      	cmp	r3, #0
 800d43a:	f000 80cf 	beq.w	800d5dc <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 800d43e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d442:	2b00      	cmp	r3, #0
 800d444:	f000 80ca 	beq.w	800d5dc <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d44e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d450:	e853 3f00 	ldrex	r3, [r3]
 800d454:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d456:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d458:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d45c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	461a      	mov	r2, r3
 800d466:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d46a:	647b      	str	r3, [r7, #68]	@ 0x44
 800d46c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d46e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d470:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d472:	e841 2300 	strex	r3, r2, [r1]
 800d476:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d478:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d1e4      	bne.n	800d448 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	3308      	adds	r3, #8
 800d484:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d488:	e853 3f00 	ldrex	r3, [r3]
 800d48c:	623b      	str	r3, [r7, #32]
   return(result);
 800d48e:	6a3a      	ldr	r2, [r7, #32]
 800d490:	4b55      	ldr	r3, [pc, #340]	@ (800d5e8 <HAL_UART_IRQHandler+0x7a8>)
 800d492:	4013      	ands	r3, r2
 800d494:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	3308      	adds	r3, #8
 800d49e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d4a2:	633a      	str	r2, [r7, #48]	@ 0x30
 800d4a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d4a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d4aa:	e841 2300 	strex	r3, r2, [r1]
 800d4ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d4b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d1e3      	bne.n	800d47e <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	2220      	movs	r2, #32
 800d4ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	2200      	movs	r2, #0
 800d4c2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4d0:	693b      	ldr	r3, [r7, #16]
 800d4d2:	e853 3f00 	ldrex	r3, [r3]
 800d4d6:	60fb      	str	r3, [r7, #12]
   return(result);
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	f023 0310 	bic.w	r3, r3, #16
 800d4de:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	461a      	mov	r2, r3
 800d4e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800d4ec:	61fb      	str	r3, [r7, #28]
 800d4ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4f0:	69b9      	ldr	r1, [r7, #24]
 800d4f2:	69fa      	ldr	r2, [r7, #28]
 800d4f4:	e841 2300 	strex	r3, r2, [r1]
 800d4f8:	617b      	str	r3, [r7, #20]
   return(result);
 800d4fa:	697b      	ldr	r3, [r7, #20]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d1e4      	bne.n	800d4ca <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	2202      	movs	r2, #2
 800d504:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d506:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d50a:	4619      	mov	r1, r3
 800d50c:	6878      	ldr	r0, [r7, #4]
 800d50e:	f000 f881 	bl	800d614 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d512:	e063      	b.n	800d5dc <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d514:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d518:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d00e      	beq.n	800d53e <HAL_UART_IRQHandler+0x6fe>
 800d520:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d524:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d008      	beq.n	800d53e <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800d534:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d536:	6878      	ldr	r0, [r7, #4]
 800d538:	f001 fe80 	bl	800f23c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d53c:	e051      	b.n	800d5e2 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d53e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d542:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d546:	2b00      	cmp	r3, #0
 800d548:	d014      	beq.n	800d574 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d54a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d54e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d552:	2b00      	cmp	r3, #0
 800d554:	d105      	bne.n	800d562 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d556:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d55a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d008      	beq.n	800d574 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d566:	2b00      	cmp	r3, #0
 800d568:	d03a      	beq.n	800d5e0 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d56e:	6878      	ldr	r0, [r7, #4]
 800d570:	4798      	blx	r3
    }
    return;
 800d572:	e035      	b.n	800d5e0 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d578:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d009      	beq.n	800d594 <HAL_UART_IRQHandler+0x754>
 800d580:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d584:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d003      	beq.n	800d594 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 800d58c:	6878      	ldr	r0, [r7, #4]
 800d58e:	f001 f909 	bl	800e7a4 <UART_EndTransmit_IT>
    return;
 800d592:	e026      	b.n	800d5e2 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d598:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d009      	beq.n	800d5b4 <HAL_UART_IRQHandler+0x774>
 800d5a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d5a4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d003      	beq.n	800d5b4 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d5ac:	6878      	ldr	r0, [r7, #4]
 800d5ae:	f001 fe59 	bl	800f264 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d5b2:	e016      	b.n	800d5e2 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d5b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d5b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d010      	beq.n	800d5e2 <HAL_UART_IRQHandler+0x7a2>
 800d5c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	da0c      	bge.n	800d5e2 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d5c8:	6878      	ldr	r0, [r7, #4]
 800d5ca:	f001 fe41 	bl	800f250 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d5ce:	e008      	b.n	800d5e2 <HAL_UART_IRQHandler+0x7a2>
      return;
 800d5d0:	bf00      	nop
 800d5d2:	e006      	b.n	800d5e2 <HAL_UART_IRQHandler+0x7a2>
    return;
 800d5d4:	bf00      	nop
 800d5d6:	e004      	b.n	800d5e2 <HAL_UART_IRQHandler+0x7a2>
      return;
 800d5d8:	bf00      	nop
 800d5da:	e002      	b.n	800d5e2 <HAL_UART_IRQHandler+0x7a2>
      return;
 800d5dc:	bf00      	nop
 800d5de:	e000      	b.n	800d5e2 <HAL_UART_IRQHandler+0x7a2>
    return;
 800d5e0:	bf00      	nop
  }
}
 800d5e2:	37e8      	adds	r7, #232	@ 0xe8
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	bd80      	pop	{r7, pc}
 800d5e8:	effffffe 	.word	0xeffffffe

0800d5ec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d5ec:	b480      	push	{r7}
 800d5ee:	b083      	sub	sp, #12
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d5f4:	bf00      	nop
 800d5f6:	370c      	adds	r7, #12
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fe:	4770      	bx	lr

0800d600 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d600:	b480      	push	{r7}
 800d602:	b083      	sub	sp, #12
 800d604:	af00      	add	r7, sp, #0
 800d606:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d608:	bf00      	nop
 800d60a:	370c      	adds	r7, #12
 800d60c:	46bd      	mov	sp, r7
 800d60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d612:	4770      	bx	lr

0800d614 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d614:	b480      	push	{r7}
 800d616:	b083      	sub	sp, #12
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
 800d61c:	460b      	mov	r3, r1
 800d61e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d620:	bf00      	nop
 800d622:	370c      	adds	r7, #12
 800d624:	46bd      	mov	sp, r7
 800d626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d62a:	4770      	bx	lr

0800d62c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d62c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d630:	b092      	sub	sp, #72	@ 0x48
 800d632:	af00      	add	r7, sp, #0
 800d634:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d636:	2300      	movs	r3, #0
 800d638:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d63c:	697b      	ldr	r3, [r7, #20]
 800d63e:	689a      	ldr	r2, [r3, #8]
 800d640:	697b      	ldr	r3, [r7, #20]
 800d642:	691b      	ldr	r3, [r3, #16]
 800d644:	431a      	orrs	r2, r3
 800d646:	697b      	ldr	r3, [r7, #20]
 800d648:	695b      	ldr	r3, [r3, #20]
 800d64a:	431a      	orrs	r2, r3
 800d64c:	697b      	ldr	r3, [r7, #20]
 800d64e:	69db      	ldr	r3, [r3, #28]
 800d650:	4313      	orrs	r3, r2
 800d652:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d654:	697b      	ldr	r3, [r7, #20]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	681a      	ldr	r2, [r3, #0]
 800d65a:	4bbe      	ldr	r3, [pc, #760]	@ (800d954 <UART_SetConfig+0x328>)
 800d65c:	4013      	ands	r3, r2
 800d65e:	697a      	ldr	r2, [r7, #20]
 800d660:	6812      	ldr	r2, [r2, #0]
 800d662:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d664:	430b      	orrs	r3, r1
 800d666:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d668:	697b      	ldr	r3, [r7, #20]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	685b      	ldr	r3, [r3, #4]
 800d66e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d672:	697b      	ldr	r3, [r7, #20]
 800d674:	68da      	ldr	r2, [r3, #12]
 800d676:	697b      	ldr	r3, [r7, #20]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	430a      	orrs	r2, r1
 800d67c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d67e:	697b      	ldr	r3, [r7, #20]
 800d680:	699b      	ldr	r3, [r3, #24]
 800d682:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d684:	697b      	ldr	r3, [r7, #20]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	4ab3      	ldr	r2, [pc, #716]	@ (800d958 <UART_SetConfig+0x32c>)
 800d68a:	4293      	cmp	r3, r2
 800d68c:	d004      	beq.n	800d698 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d68e:	697b      	ldr	r3, [r7, #20]
 800d690:	6a1b      	ldr	r3, [r3, #32]
 800d692:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d694:	4313      	orrs	r3, r2
 800d696:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d698:	697b      	ldr	r3, [r7, #20]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	689a      	ldr	r2, [r3, #8]
 800d69e:	4baf      	ldr	r3, [pc, #700]	@ (800d95c <UART_SetConfig+0x330>)
 800d6a0:	4013      	ands	r3, r2
 800d6a2:	697a      	ldr	r2, [r7, #20]
 800d6a4:	6812      	ldr	r2, [r2, #0]
 800d6a6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d6a8:	430b      	orrs	r3, r1
 800d6aa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d6ac:	697b      	ldr	r3, [r7, #20]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6b2:	f023 010f 	bic.w	r1, r3, #15
 800d6b6:	697b      	ldr	r3, [r7, #20]
 800d6b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d6ba:	697b      	ldr	r3, [r7, #20]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	430a      	orrs	r2, r1
 800d6c0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d6c2:	697b      	ldr	r3, [r7, #20]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	4aa6      	ldr	r2, [pc, #664]	@ (800d960 <UART_SetConfig+0x334>)
 800d6c8:	4293      	cmp	r3, r2
 800d6ca:	d177      	bne.n	800d7bc <UART_SetConfig+0x190>
 800d6cc:	4ba5      	ldr	r3, [pc, #660]	@ (800d964 <UART_SetConfig+0x338>)
 800d6ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d6d0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d6d4:	2b28      	cmp	r3, #40	@ 0x28
 800d6d6:	d86d      	bhi.n	800d7b4 <UART_SetConfig+0x188>
 800d6d8:	a201      	add	r2, pc, #4	@ (adr r2, 800d6e0 <UART_SetConfig+0xb4>)
 800d6da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6de:	bf00      	nop
 800d6e0:	0800d785 	.word	0x0800d785
 800d6e4:	0800d7b5 	.word	0x0800d7b5
 800d6e8:	0800d7b5 	.word	0x0800d7b5
 800d6ec:	0800d7b5 	.word	0x0800d7b5
 800d6f0:	0800d7b5 	.word	0x0800d7b5
 800d6f4:	0800d7b5 	.word	0x0800d7b5
 800d6f8:	0800d7b5 	.word	0x0800d7b5
 800d6fc:	0800d7b5 	.word	0x0800d7b5
 800d700:	0800d78d 	.word	0x0800d78d
 800d704:	0800d7b5 	.word	0x0800d7b5
 800d708:	0800d7b5 	.word	0x0800d7b5
 800d70c:	0800d7b5 	.word	0x0800d7b5
 800d710:	0800d7b5 	.word	0x0800d7b5
 800d714:	0800d7b5 	.word	0x0800d7b5
 800d718:	0800d7b5 	.word	0x0800d7b5
 800d71c:	0800d7b5 	.word	0x0800d7b5
 800d720:	0800d795 	.word	0x0800d795
 800d724:	0800d7b5 	.word	0x0800d7b5
 800d728:	0800d7b5 	.word	0x0800d7b5
 800d72c:	0800d7b5 	.word	0x0800d7b5
 800d730:	0800d7b5 	.word	0x0800d7b5
 800d734:	0800d7b5 	.word	0x0800d7b5
 800d738:	0800d7b5 	.word	0x0800d7b5
 800d73c:	0800d7b5 	.word	0x0800d7b5
 800d740:	0800d79d 	.word	0x0800d79d
 800d744:	0800d7b5 	.word	0x0800d7b5
 800d748:	0800d7b5 	.word	0x0800d7b5
 800d74c:	0800d7b5 	.word	0x0800d7b5
 800d750:	0800d7b5 	.word	0x0800d7b5
 800d754:	0800d7b5 	.word	0x0800d7b5
 800d758:	0800d7b5 	.word	0x0800d7b5
 800d75c:	0800d7b5 	.word	0x0800d7b5
 800d760:	0800d7a5 	.word	0x0800d7a5
 800d764:	0800d7b5 	.word	0x0800d7b5
 800d768:	0800d7b5 	.word	0x0800d7b5
 800d76c:	0800d7b5 	.word	0x0800d7b5
 800d770:	0800d7b5 	.word	0x0800d7b5
 800d774:	0800d7b5 	.word	0x0800d7b5
 800d778:	0800d7b5 	.word	0x0800d7b5
 800d77c:	0800d7b5 	.word	0x0800d7b5
 800d780:	0800d7ad 	.word	0x0800d7ad
 800d784:	2301      	movs	r3, #1
 800d786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d78a:	e222      	b.n	800dbd2 <UART_SetConfig+0x5a6>
 800d78c:	2304      	movs	r3, #4
 800d78e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d792:	e21e      	b.n	800dbd2 <UART_SetConfig+0x5a6>
 800d794:	2308      	movs	r3, #8
 800d796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d79a:	e21a      	b.n	800dbd2 <UART_SetConfig+0x5a6>
 800d79c:	2310      	movs	r3, #16
 800d79e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7a2:	e216      	b.n	800dbd2 <UART_SetConfig+0x5a6>
 800d7a4:	2320      	movs	r3, #32
 800d7a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7aa:	e212      	b.n	800dbd2 <UART_SetConfig+0x5a6>
 800d7ac:	2340      	movs	r3, #64	@ 0x40
 800d7ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7b2:	e20e      	b.n	800dbd2 <UART_SetConfig+0x5a6>
 800d7b4:	2380      	movs	r3, #128	@ 0x80
 800d7b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7ba:	e20a      	b.n	800dbd2 <UART_SetConfig+0x5a6>
 800d7bc:	697b      	ldr	r3, [r7, #20]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	4a69      	ldr	r2, [pc, #420]	@ (800d968 <UART_SetConfig+0x33c>)
 800d7c2:	4293      	cmp	r3, r2
 800d7c4:	d130      	bne.n	800d828 <UART_SetConfig+0x1fc>
 800d7c6:	4b67      	ldr	r3, [pc, #412]	@ (800d964 <UART_SetConfig+0x338>)
 800d7c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d7ca:	f003 0307 	and.w	r3, r3, #7
 800d7ce:	2b05      	cmp	r3, #5
 800d7d0:	d826      	bhi.n	800d820 <UART_SetConfig+0x1f4>
 800d7d2:	a201      	add	r2, pc, #4	@ (adr r2, 800d7d8 <UART_SetConfig+0x1ac>)
 800d7d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7d8:	0800d7f1 	.word	0x0800d7f1
 800d7dc:	0800d7f9 	.word	0x0800d7f9
 800d7e0:	0800d801 	.word	0x0800d801
 800d7e4:	0800d809 	.word	0x0800d809
 800d7e8:	0800d811 	.word	0x0800d811
 800d7ec:	0800d819 	.word	0x0800d819
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7f6:	e1ec      	b.n	800dbd2 <UART_SetConfig+0x5a6>
 800d7f8:	2304      	movs	r3, #4
 800d7fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7fe:	e1e8      	b.n	800dbd2 <UART_SetConfig+0x5a6>
 800d800:	2308      	movs	r3, #8
 800d802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d806:	e1e4      	b.n	800dbd2 <UART_SetConfig+0x5a6>
 800d808:	2310      	movs	r3, #16
 800d80a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d80e:	e1e0      	b.n	800dbd2 <UART_SetConfig+0x5a6>
 800d810:	2320      	movs	r3, #32
 800d812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d816:	e1dc      	b.n	800dbd2 <UART_SetConfig+0x5a6>
 800d818:	2340      	movs	r3, #64	@ 0x40
 800d81a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d81e:	e1d8      	b.n	800dbd2 <UART_SetConfig+0x5a6>
 800d820:	2380      	movs	r3, #128	@ 0x80
 800d822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d826:	e1d4      	b.n	800dbd2 <UART_SetConfig+0x5a6>
 800d828:	697b      	ldr	r3, [r7, #20]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	4a4f      	ldr	r2, [pc, #316]	@ (800d96c <UART_SetConfig+0x340>)
 800d82e:	4293      	cmp	r3, r2
 800d830:	d130      	bne.n	800d894 <UART_SetConfig+0x268>
 800d832:	4b4c      	ldr	r3, [pc, #304]	@ (800d964 <UART_SetConfig+0x338>)
 800d834:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d836:	f003 0307 	and.w	r3, r3, #7
 800d83a:	2b05      	cmp	r3, #5
 800d83c:	d826      	bhi.n	800d88c <UART_SetConfig+0x260>
 800d83e:	a201      	add	r2, pc, #4	@ (adr r2, 800d844 <UART_SetConfig+0x218>)
 800d840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d844:	0800d85d 	.word	0x0800d85d
 800d848:	0800d865 	.word	0x0800d865
 800d84c:	0800d86d 	.word	0x0800d86d
 800d850:	0800d875 	.word	0x0800d875
 800d854:	0800d87d 	.word	0x0800d87d
 800d858:	0800d885 	.word	0x0800d885
 800d85c:	2300      	movs	r3, #0
 800d85e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d862:	e1b6      	b.n	800dbd2 <UART_SetConfig+0x5a6>
 800d864:	2304      	movs	r3, #4
 800d866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d86a:	e1b2      	b.n	800dbd2 <UART_SetConfig+0x5a6>
 800d86c:	2308      	movs	r3, #8
 800d86e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d872:	e1ae      	b.n	800dbd2 <UART_SetConfig+0x5a6>
 800d874:	2310      	movs	r3, #16
 800d876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d87a:	e1aa      	b.n	800dbd2 <UART_SetConfig+0x5a6>
 800d87c:	2320      	movs	r3, #32
 800d87e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d882:	e1a6      	b.n	800dbd2 <UART_SetConfig+0x5a6>
 800d884:	2340      	movs	r3, #64	@ 0x40
 800d886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d88a:	e1a2      	b.n	800dbd2 <UART_SetConfig+0x5a6>
 800d88c:	2380      	movs	r3, #128	@ 0x80
 800d88e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d892:	e19e      	b.n	800dbd2 <UART_SetConfig+0x5a6>
 800d894:	697b      	ldr	r3, [r7, #20]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	4a35      	ldr	r2, [pc, #212]	@ (800d970 <UART_SetConfig+0x344>)
 800d89a:	4293      	cmp	r3, r2
 800d89c:	d130      	bne.n	800d900 <UART_SetConfig+0x2d4>
 800d89e:	4b31      	ldr	r3, [pc, #196]	@ (800d964 <UART_SetConfig+0x338>)
 800d8a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d8a2:	f003 0307 	and.w	r3, r3, #7
 800d8a6:	2b05      	cmp	r3, #5
 800d8a8:	d826      	bhi.n	800d8f8 <UART_SetConfig+0x2cc>
 800d8aa:	a201      	add	r2, pc, #4	@ (adr r2, 800d8b0 <UART_SetConfig+0x284>)
 800d8ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8b0:	0800d8c9 	.word	0x0800d8c9
 800d8b4:	0800d8d1 	.word	0x0800d8d1
 800d8b8:	0800d8d9 	.word	0x0800d8d9
 800d8bc:	0800d8e1 	.word	0x0800d8e1
 800d8c0:	0800d8e9 	.word	0x0800d8e9
 800d8c4:	0800d8f1 	.word	0x0800d8f1
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8ce:	e180      	b.n	800dbd2 <UART_SetConfig+0x5a6>
 800d8d0:	2304      	movs	r3, #4
 800d8d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8d6:	e17c      	b.n	800dbd2 <UART_SetConfig+0x5a6>
 800d8d8:	2308      	movs	r3, #8
 800d8da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8de:	e178      	b.n	800dbd2 <UART_SetConfig+0x5a6>
 800d8e0:	2310      	movs	r3, #16
 800d8e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8e6:	e174      	b.n	800dbd2 <UART_SetConfig+0x5a6>
 800d8e8:	2320      	movs	r3, #32
 800d8ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8ee:	e170      	b.n	800dbd2 <UART_SetConfig+0x5a6>
 800d8f0:	2340      	movs	r3, #64	@ 0x40
 800d8f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8f6:	e16c      	b.n	800dbd2 <UART_SetConfig+0x5a6>
 800d8f8:	2380      	movs	r3, #128	@ 0x80
 800d8fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8fe:	e168      	b.n	800dbd2 <UART_SetConfig+0x5a6>
 800d900:	697b      	ldr	r3, [r7, #20]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	4a1b      	ldr	r2, [pc, #108]	@ (800d974 <UART_SetConfig+0x348>)
 800d906:	4293      	cmp	r3, r2
 800d908:	d142      	bne.n	800d990 <UART_SetConfig+0x364>
 800d90a:	4b16      	ldr	r3, [pc, #88]	@ (800d964 <UART_SetConfig+0x338>)
 800d90c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d90e:	f003 0307 	and.w	r3, r3, #7
 800d912:	2b05      	cmp	r3, #5
 800d914:	d838      	bhi.n	800d988 <UART_SetConfig+0x35c>
 800d916:	a201      	add	r2, pc, #4	@ (adr r2, 800d91c <UART_SetConfig+0x2f0>)
 800d918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d91c:	0800d935 	.word	0x0800d935
 800d920:	0800d93d 	.word	0x0800d93d
 800d924:	0800d945 	.word	0x0800d945
 800d928:	0800d94d 	.word	0x0800d94d
 800d92c:	0800d979 	.word	0x0800d979
 800d930:	0800d981 	.word	0x0800d981
 800d934:	2300      	movs	r3, #0
 800d936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d93a:	e14a      	b.n	800dbd2 <UART_SetConfig+0x5a6>
 800d93c:	2304      	movs	r3, #4
 800d93e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d942:	e146      	b.n	800dbd2 <UART_SetConfig+0x5a6>
 800d944:	2308      	movs	r3, #8
 800d946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d94a:	e142      	b.n	800dbd2 <UART_SetConfig+0x5a6>
 800d94c:	2310      	movs	r3, #16
 800d94e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d952:	e13e      	b.n	800dbd2 <UART_SetConfig+0x5a6>
 800d954:	cfff69f3 	.word	0xcfff69f3
 800d958:	58000c00 	.word	0x58000c00
 800d95c:	11fff4ff 	.word	0x11fff4ff
 800d960:	40011000 	.word	0x40011000
 800d964:	58024400 	.word	0x58024400
 800d968:	40004400 	.word	0x40004400
 800d96c:	40004800 	.word	0x40004800
 800d970:	40004c00 	.word	0x40004c00
 800d974:	40005000 	.word	0x40005000
 800d978:	2320      	movs	r3, #32
 800d97a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d97e:	e128      	b.n	800dbd2 <UART_SetConfig+0x5a6>
 800d980:	2340      	movs	r3, #64	@ 0x40
 800d982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d986:	e124      	b.n	800dbd2 <UART_SetConfig+0x5a6>
 800d988:	2380      	movs	r3, #128	@ 0x80
 800d98a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d98e:	e120      	b.n	800dbd2 <UART_SetConfig+0x5a6>
 800d990:	697b      	ldr	r3, [r7, #20]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	4acb      	ldr	r2, [pc, #812]	@ (800dcc4 <UART_SetConfig+0x698>)
 800d996:	4293      	cmp	r3, r2
 800d998:	d176      	bne.n	800da88 <UART_SetConfig+0x45c>
 800d99a:	4bcb      	ldr	r3, [pc, #812]	@ (800dcc8 <UART_SetConfig+0x69c>)
 800d99c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d99e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d9a2:	2b28      	cmp	r3, #40	@ 0x28
 800d9a4:	d86c      	bhi.n	800da80 <UART_SetConfig+0x454>
 800d9a6:	a201      	add	r2, pc, #4	@ (adr r2, 800d9ac <UART_SetConfig+0x380>)
 800d9a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9ac:	0800da51 	.word	0x0800da51
 800d9b0:	0800da81 	.word	0x0800da81
 800d9b4:	0800da81 	.word	0x0800da81
 800d9b8:	0800da81 	.word	0x0800da81
 800d9bc:	0800da81 	.word	0x0800da81
 800d9c0:	0800da81 	.word	0x0800da81
 800d9c4:	0800da81 	.word	0x0800da81
 800d9c8:	0800da81 	.word	0x0800da81
 800d9cc:	0800da59 	.word	0x0800da59
 800d9d0:	0800da81 	.word	0x0800da81
 800d9d4:	0800da81 	.word	0x0800da81
 800d9d8:	0800da81 	.word	0x0800da81
 800d9dc:	0800da81 	.word	0x0800da81
 800d9e0:	0800da81 	.word	0x0800da81
 800d9e4:	0800da81 	.word	0x0800da81
 800d9e8:	0800da81 	.word	0x0800da81
 800d9ec:	0800da61 	.word	0x0800da61
 800d9f0:	0800da81 	.word	0x0800da81
 800d9f4:	0800da81 	.word	0x0800da81
 800d9f8:	0800da81 	.word	0x0800da81
 800d9fc:	0800da81 	.word	0x0800da81
 800da00:	0800da81 	.word	0x0800da81
 800da04:	0800da81 	.word	0x0800da81
 800da08:	0800da81 	.word	0x0800da81
 800da0c:	0800da69 	.word	0x0800da69
 800da10:	0800da81 	.word	0x0800da81
 800da14:	0800da81 	.word	0x0800da81
 800da18:	0800da81 	.word	0x0800da81
 800da1c:	0800da81 	.word	0x0800da81
 800da20:	0800da81 	.word	0x0800da81
 800da24:	0800da81 	.word	0x0800da81
 800da28:	0800da81 	.word	0x0800da81
 800da2c:	0800da71 	.word	0x0800da71
 800da30:	0800da81 	.word	0x0800da81
 800da34:	0800da81 	.word	0x0800da81
 800da38:	0800da81 	.word	0x0800da81
 800da3c:	0800da81 	.word	0x0800da81
 800da40:	0800da81 	.word	0x0800da81
 800da44:	0800da81 	.word	0x0800da81
 800da48:	0800da81 	.word	0x0800da81
 800da4c:	0800da79 	.word	0x0800da79
 800da50:	2301      	movs	r3, #1
 800da52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da56:	e0bc      	b.n	800dbd2 <UART_SetConfig+0x5a6>
 800da58:	2304      	movs	r3, #4
 800da5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da5e:	e0b8      	b.n	800dbd2 <UART_SetConfig+0x5a6>
 800da60:	2308      	movs	r3, #8
 800da62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da66:	e0b4      	b.n	800dbd2 <UART_SetConfig+0x5a6>
 800da68:	2310      	movs	r3, #16
 800da6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da6e:	e0b0      	b.n	800dbd2 <UART_SetConfig+0x5a6>
 800da70:	2320      	movs	r3, #32
 800da72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da76:	e0ac      	b.n	800dbd2 <UART_SetConfig+0x5a6>
 800da78:	2340      	movs	r3, #64	@ 0x40
 800da7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da7e:	e0a8      	b.n	800dbd2 <UART_SetConfig+0x5a6>
 800da80:	2380      	movs	r3, #128	@ 0x80
 800da82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da86:	e0a4      	b.n	800dbd2 <UART_SetConfig+0x5a6>
 800da88:	697b      	ldr	r3, [r7, #20]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	4a8f      	ldr	r2, [pc, #572]	@ (800dccc <UART_SetConfig+0x6a0>)
 800da8e:	4293      	cmp	r3, r2
 800da90:	d130      	bne.n	800daf4 <UART_SetConfig+0x4c8>
 800da92:	4b8d      	ldr	r3, [pc, #564]	@ (800dcc8 <UART_SetConfig+0x69c>)
 800da94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800da96:	f003 0307 	and.w	r3, r3, #7
 800da9a:	2b05      	cmp	r3, #5
 800da9c:	d826      	bhi.n	800daec <UART_SetConfig+0x4c0>
 800da9e:	a201      	add	r2, pc, #4	@ (adr r2, 800daa4 <UART_SetConfig+0x478>)
 800daa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800daa4:	0800dabd 	.word	0x0800dabd
 800daa8:	0800dac5 	.word	0x0800dac5
 800daac:	0800dacd 	.word	0x0800dacd
 800dab0:	0800dad5 	.word	0x0800dad5
 800dab4:	0800dadd 	.word	0x0800dadd
 800dab8:	0800dae5 	.word	0x0800dae5
 800dabc:	2300      	movs	r3, #0
 800dabe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dac2:	e086      	b.n	800dbd2 <UART_SetConfig+0x5a6>
 800dac4:	2304      	movs	r3, #4
 800dac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800daca:	e082      	b.n	800dbd2 <UART_SetConfig+0x5a6>
 800dacc:	2308      	movs	r3, #8
 800dace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dad2:	e07e      	b.n	800dbd2 <UART_SetConfig+0x5a6>
 800dad4:	2310      	movs	r3, #16
 800dad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dada:	e07a      	b.n	800dbd2 <UART_SetConfig+0x5a6>
 800dadc:	2320      	movs	r3, #32
 800dade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dae2:	e076      	b.n	800dbd2 <UART_SetConfig+0x5a6>
 800dae4:	2340      	movs	r3, #64	@ 0x40
 800dae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800daea:	e072      	b.n	800dbd2 <UART_SetConfig+0x5a6>
 800daec:	2380      	movs	r3, #128	@ 0x80
 800daee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800daf2:	e06e      	b.n	800dbd2 <UART_SetConfig+0x5a6>
 800daf4:	697b      	ldr	r3, [r7, #20]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	4a75      	ldr	r2, [pc, #468]	@ (800dcd0 <UART_SetConfig+0x6a4>)
 800dafa:	4293      	cmp	r3, r2
 800dafc:	d130      	bne.n	800db60 <UART_SetConfig+0x534>
 800dafe:	4b72      	ldr	r3, [pc, #456]	@ (800dcc8 <UART_SetConfig+0x69c>)
 800db00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800db02:	f003 0307 	and.w	r3, r3, #7
 800db06:	2b05      	cmp	r3, #5
 800db08:	d826      	bhi.n	800db58 <UART_SetConfig+0x52c>
 800db0a:	a201      	add	r2, pc, #4	@ (adr r2, 800db10 <UART_SetConfig+0x4e4>)
 800db0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db10:	0800db29 	.word	0x0800db29
 800db14:	0800db31 	.word	0x0800db31
 800db18:	0800db39 	.word	0x0800db39
 800db1c:	0800db41 	.word	0x0800db41
 800db20:	0800db49 	.word	0x0800db49
 800db24:	0800db51 	.word	0x0800db51
 800db28:	2300      	movs	r3, #0
 800db2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db2e:	e050      	b.n	800dbd2 <UART_SetConfig+0x5a6>
 800db30:	2304      	movs	r3, #4
 800db32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db36:	e04c      	b.n	800dbd2 <UART_SetConfig+0x5a6>
 800db38:	2308      	movs	r3, #8
 800db3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db3e:	e048      	b.n	800dbd2 <UART_SetConfig+0x5a6>
 800db40:	2310      	movs	r3, #16
 800db42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db46:	e044      	b.n	800dbd2 <UART_SetConfig+0x5a6>
 800db48:	2320      	movs	r3, #32
 800db4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db4e:	e040      	b.n	800dbd2 <UART_SetConfig+0x5a6>
 800db50:	2340      	movs	r3, #64	@ 0x40
 800db52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db56:	e03c      	b.n	800dbd2 <UART_SetConfig+0x5a6>
 800db58:	2380      	movs	r3, #128	@ 0x80
 800db5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db5e:	e038      	b.n	800dbd2 <UART_SetConfig+0x5a6>
 800db60:	697b      	ldr	r3, [r7, #20]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	4a5b      	ldr	r2, [pc, #364]	@ (800dcd4 <UART_SetConfig+0x6a8>)
 800db66:	4293      	cmp	r3, r2
 800db68:	d130      	bne.n	800dbcc <UART_SetConfig+0x5a0>
 800db6a:	4b57      	ldr	r3, [pc, #348]	@ (800dcc8 <UART_SetConfig+0x69c>)
 800db6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800db6e:	f003 0307 	and.w	r3, r3, #7
 800db72:	2b05      	cmp	r3, #5
 800db74:	d826      	bhi.n	800dbc4 <UART_SetConfig+0x598>
 800db76:	a201      	add	r2, pc, #4	@ (adr r2, 800db7c <UART_SetConfig+0x550>)
 800db78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db7c:	0800db95 	.word	0x0800db95
 800db80:	0800db9d 	.word	0x0800db9d
 800db84:	0800dba5 	.word	0x0800dba5
 800db88:	0800dbad 	.word	0x0800dbad
 800db8c:	0800dbb5 	.word	0x0800dbb5
 800db90:	0800dbbd 	.word	0x0800dbbd
 800db94:	2302      	movs	r3, #2
 800db96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800db9a:	e01a      	b.n	800dbd2 <UART_SetConfig+0x5a6>
 800db9c:	2304      	movs	r3, #4
 800db9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dba2:	e016      	b.n	800dbd2 <UART_SetConfig+0x5a6>
 800dba4:	2308      	movs	r3, #8
 800dba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbaa:	e012      	b.n	800dbd2 <UART_SetConfig+0x5a6>
 800dbac:	2310      	movs	r3, #16
 800dbae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbb2:	e00e      	b.n	800dbd2 <UART_SetConfig+0x5a6>
 800dbb4:	2320      	movs	r3, #32
 800dbb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbba:	e00a      	b.n	800dbd2 <UART_SetConfig+0x5a6>
 800dbbc:	2340      	movs	r3, #64	@ 0x40
 800dbbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbc2:	e006      	b.n	800dbd2 <UART_SetConfig+0x5a6>
 800dbc4:	2380      	movs	r3, #128	@ 0x80
 800dbc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dbca:	e002      	b.n	800dbd2 <UART_SetConfig+0x5a6>
 800dbcc:	2380      	movs	r3, #128	@ 0x80
 800dbce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800dbd2:	697b      	ldr	r3, [r7, #20]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	4a3f      	ldr	r2, [pc, #252]	@ (800dcd4 <UART_SetConfig+0x6a8>)
 800dbd8:	4293      	cmp	r3, r2
 800dbda:	f040 80f8 	bne.w	800ddce <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800dbde:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800dbe2:	2b20      	cmp	r3, #32
 800dbe4:	dc46      	bgt.n	800dc74 <UART_SetConfig+0x648>
 800dbe6:	2b02      	cmp	r3, #2
 800dbe8:	f2c0 8082 	blt.w	800dcf0 <UART_SetConfig+0x6c4>
 800dbec:	3b02      	subs	r3, #2
 800dbee:	2b1e      	cmp	r3, #30
 800dbf0:	d87e      	bhi.n	800dcf0 <UART_SetConfig+0x6c4>
 800dbf2:	a201      	add	r2, pc, #4	@ (adr r2, 800dbf8 <UART_SetConfig+0x5cc>)
 800dbf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbf8:	0800dc7b 	.word	0x0800dc7b
 800dbfc:	0800dcf1 	.word	0x0800dcf1
 800dc00:	0800dc83 	.word	0x0800dc83
 800dc04:	0800dcf1 	.word	0x0800dcf1
 800dc08:	0800dcf1 	.word	0x0800dcf1
 800dc0c:	0800dcf1 	.word	0x0800dcf1
 800dc10:	0800dc93 	.word	0x0800dc93
 800dc14:	0800dcf1 	.word	0x0800dcf1
 800dc18:	0800dcf1 	.word	0x0800dcf1
 800dc1c:	0800dcf1 	.word	0x0800dcf1
 800dc20:	0800dcf1 	.word	0x0800dcf1
 800dc24:	0800dcf1 	.word	0x0800dcf1
 800dc28:	0800dcf1 	.word	0x0800dcf1
 800dc2c:	0800dcf1 	.word	0x0800dcf1
 800dc30:	0800dca3 	.word	0x0800dca3
 800dc34:	0800dcf1 	.word	0x0800dcf1
 800dc38:	0800dcf1 	.word	0x0800dcf1
 800dc3c:	0800dcf1 	.word	0x0800dcf1
 800dc40:	0800dcf1 	.word	0x0800dcf1
 800dc44:	0800dcf1 	.word	0x0800dcf1
 800dc48:	0800dcf1 	.word	0x0800dcf1
 800dc4c:	0800dcf1 	.word	0x0800dcf1
 800dc50:	0800dcf1 	.word	0x0800dcf1
 800dc54:	0800dcf1 	.word	0x0800dcf1
 800dc58:	0800dcf1 	.word	0x0800dcf1
 800dc5c:	0800dcf1 	.word	0x0800dcf1
 800dc60:	0800dcf1 	.word	0x0800dcf1
 800dc64:	0800dcf1 	.word	0x0800dcf1
 800dc68:	0800dcf1 	.word	0x0800dcf1
 800dc6c:	0800dcf1 	.word	0x0800dcf1
 800dc70:	0800dce3 	.word	0x0800dce3
 800dc74:	2b40      	cmp	r3, #64	@ 0x40
 800dc76:	d037      	beq.n	800dce8 <UART_SetConfig+0x6bc>
 800dc78:	e03a      	b.n	800dcf0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800dc7a:	f7fd f911 	bl	800aea0 <HAL_RCCEx_GetD3PCLK1Freq>
 800dc7e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800dc80:	e03c      	b.n	800dcfc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dc82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dc86:	4618      	mov	r0, r3
 800dc88:	f7fd f920 	bl	800aecc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dc8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dc90:	e034      	b.n	800dcfc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dc92:	f107 0318 	add.w	r3, r7, #24
 800dc96:	4618      	mov	r0, r3
 800dc98:	f7fd fa6c 	bl	800b174 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dc9c:	69fb      	ldr	r3, [r7, #28]
 800dc9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dca0:	e02c      	b.n	800dcfc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dca2:	4b09      	ldr	r3, [pc, #36]	@ (800dcc8 <UART_SetConfig+0x69c>)
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	f003 0320 	and.w	r3, r3, #32
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d016      	beq.n	800dcdc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dcae:	4b06      	ldr	r3, [pc, #24]	@ (800dcc8 <UART_SetConfig+0x69c>)
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	08db      	lsrs	r3, r3, #3
 800dcb4:	f003 0303 	and.w	r3, r3, #3
 800dcb8:	4a07      	ldr	r2, [pc, #28]	@ (800dcd8 <UART_SetConfig+0x6ac>)
 800dcba:	fa22 f303 	lsr.w	r3, r2, r3
 800dcbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dcc0:	e01c      	b.n	800dcfc <UART_SetConfig+0x6d0>
 800dcc2:	bf00      	nop
 800dcc4:	40011400 	.word	0x40011400
 800dcc8:	58024400 	.word	0x58024400
 800dccc:	40007800 	.word	0x40007800
 800dcd0:	40007c00 	.word	0x40007c00
 800dcd4:	58000c00 	.word	0x58000c00
 800dcd8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800dcdc:	4b9d      	ldr	r3, [pc, #628]	@ (800df54 <UART_SetConfig+0x928>)
 800dcde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dce0:	e00c      	b.n	800dcfc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dce2:	4b9d      	ldr	r3, [pc, #628]	@ (800df58 <UART_SetConfig+0x92c>)
 800dce4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dce6:	e009      	b.n	800dcfc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dce8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dcec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dcee:	e005      	b.n	800dcfc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800dcf4:	2301      	movs	r3, #1
 800dcf6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800dcfa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800dcfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	f000 81de 	beq.w	800e0c0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800dd04:	697b      	ldr	r3, [r7, #20]
 800dd06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd08:	4a94      	ldr	r2, [pc, #592]	@ (800df5c <UART_SetConfig+0x930>)
 800dd0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dd0e:	461a      	mov	r2, r3
 800dd10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd12:	fbb3 f3f2 	udiv	r3, r3, r2
 800dd16:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dd18:	697b      	ldr	r3, [r7, #20]
 800dd1a:	685a      	ldr	r2, [r3, #4]
 800dd1c:	4613      	mov	r3, r2
 800dd1e:	005b      	lsls	r3, r3, #1
 800dd20:	4413      	add	r3, r2
 800dd22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dd24:	429a      	cmp	r2, r3
 800dd26:	d305      	bcc.n	800dd34 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800dd28:	697b      	ldr	r3, [r7, #20]
 800dd2a:	685b      	ldr	r3, [r3, #4]
 800dd2c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dd2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dd30:	429a      	cmp	r2, r3
 800dd32:	d903      	bls.n	800dd3c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800dd34:	2301      	movs	r3, #1
 800dd36:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800dd3a:	e1c1      	b.n	800e0c0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dd3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd3e:	2200      	movs	r2, #0
 800dd40:	60bb      	str	r3, [r7, #8]
 800dd42:	60fa      	str	r2, [r7, #12]
 800dd44:	697b      	ldr	r3, [r7, #20]
 800dd46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd48:	4a84      	ldr	r2, [pc, #528]	@ (800df5c <UART_SetConfig+0x930>)
 800dd4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dd4e:	b29b      	uxth	r3, r3
 800dd50:	2200      	movs	r2, #0
 800dd52:	603b      	str	r3, [r7, #0]
 800dd54:	607a      	str	r2, [r7, #4]
 800dd56:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dd5a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800dd5e:	f7f2 fb27 	bl	80003b0 <__aeabi_uldivmod>
 800dd62:	4602      	mov	r2, r0
 800dd64:	460b      	mov	r3, r1
 800dd66:	4610      	mov	r0, r2
 800dd68:	4619      	mov	r1, r3
 800dd6a:	f04f 0200 	mov.w	r2, #0
 800dd6e:	f04f 0300 	mov.w	r3, #0
 800dd72:	020b      	lsls	r3, r1, #8
 800dd74:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800dd78:	0202      	lsls	r2, r0, #8
 800dd7a:	6979      	ldr	r1, [r7, #20]
 800dd7c:	6849      	ldr	r1, [r1, #4]
 800dd7e:	0849      	lsrs	r1, r1, #1
 800dd80:	2000      	movs	r0, #0
 800dd82:	460c      	mov	r4, r1
 800dd84:	4605      	mov	r5, r0
 800dd86:	eb12 0804 	adds.w	r8, r2, r4
 800dd8a:	eb43 0905 	adc.w	r9, r3, r5
 800dd8e:	697b      	ldr	r3, [r7, #20]
 800dd90:	685b      	ldr	r3, [r3, #4]
 800dd92:	2200      	movs	r2, #0
 800dd94:	469a      	mov	sl, r3
 800dd96:	4693      	mov	fp, r2
 800dd98:	4652      	mov	r2, sl
 800dd9a:	465b      	mov	r3, fp
 800dd9c:	4640      	mov	r0, r8
 800dd9e:	4649      	mov	r1, r9
 800dda0:	f7f2 fb06 	bl	80003b0 <__aeabi_uldivmod>
 800dda4:	4602      	mov	r2, r0
 800dda6:	460b      	mov	r3, r1
 800dda8:	4613      	mov	r3, r2
 800ddaa:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ddac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ddb2:	d308      	bcc.n	800ddc6 <UART_SetConfig+0x79a>
 800ddb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddb6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ddba:	d204      	bcs.n	800ddc6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800ddbc:	697b      	ldr	r3, [r7, #20]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ddc2:	60da      	str	r2, [r3, #12]
 800ddc4:	e17c      	b.n	800e0c0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800ddc6:	2301      	movs	r3, #1
 800ddc8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ddcc:	e178      	b.n	800e0c0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ddce:	697b      	ldr	r3, [r7, #20]
 800ddd0:	69db      	ldr	r3, [r3, #28]
 800ddd2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ddd6:	f040 80c5 	bne.w	800df64 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800ddda:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ddde:	2b20      	cmp	r3, #32
 800dde0:	dc48      	bgt.n	800de74 <UART_SetConfig+0x848>
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	db7b      	blt.n	800dede <UART_SetConfig+0x8b2>
 800dde6:	2b20      	cmp	r3, #32
 800dde8:	d879      	bhi.n	800dede <UART_SetConfig+0x8b2>
 800ddea:	a201      	add	r2, pc, #4	@ (adr r2, 800ddf0 <UART_SetConfig+0x7c4>)
 800ddec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddf0:	0800de7b 	.word	0x0800de7b
 800ddf4:	0800de83 	.word	0x0800de83
 800ddf8:	0800dedf 	.word	0x0800dedf
 800ddfc:	0800dedf 	.word	0x0800dedf
 800de00:	0800de8b 	.word	0x0800de8b
 800de04:	0800dedf 	.word	0x0800dedf
 800de08:	0800dedf 	.word	0x0800dedf
 800de0c:	0800dedf 	.word	0x0800dedf
 800de10:	0800de9b 	.word	0x0800de9b
 800de14:	0800dedf 	.word	0x0800dedf
 800de18:	0800dedf 	.word	0x0800dedf
 800de1c:	0800dedf 	.word	0x0800dedf
 800de20:	0800dedf 	.word	0x0800dedf
 800de24:	0800dedf 	.word	0x0800dedf
 800de28:	0800dedf 	.word	0x0800dedf
 800de2c:	0800dedf 	.word	0x0800dedf
 800de30:	0800deab 	.word	0x0800deab
 800de34:	0800dedf 	.word	0x0800dedf
 800de38:	0800dedf 	.word	0x0800dedf
 800de3c:	0800dedf 	.word	0x0800dedf
 800de40:	0800dedf 	.word	0x0800dedf
 800de44:	0800dedf 	.word	0x0800dedf
 800de48:	0800dedf 	.word	0x0800dedf
 800de4c:	0800dedf 	.word	0x0800dedf
 800de50:	0800dedf 	.word	0x0800dedf
 800de54:	0800dedf 	.word	0x0800dedf
 800de58:	0800dedf 	.word	0x0800dedf
 800de5c:	0800dedf 	.word	0x0800dedf
 800de60:	0800dedf 	.word	0x0800dedf
 800de64:	0800dedf 	.word	0x0800dedf
 800de68:	0800dedf 	.word	0x0800dedf
 800de6c:	0800dedf 	.word	0x0800dedf
 800de70:	0800ded1 	.word	0x0800ded1
 800de74:	2b40      	cmp	r3, #64	@ 0x40
 800de76:	d02e      	beq.n	800ded6 <UART_SetConfig+0x8aa>
 800de78:	e031      	b.n	800dede <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800de7a:	f7fb f85b 	bl	8008f34 <HAL_RCC_GetPCLK1Freq>
 800de7e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800de80:	e033      	b.n	800deea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800de82:	f7fb f86d 	bl	8008f60 <HAL_RCC_GetPCLK2Freq>
 800de86:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800de88:	e02f      	b.n	800deea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800de8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800de8e:	4618      	mov	r0, r3
 800de90:	f7fd f81c 	bl	800aecc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800de94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800de98:	e027      	b.n	800deea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800de9a:	f107 0318 	add.w	r3, r7, #24
 800de9e:	4618      	mov	r0, r3
 800dea0:	f7fd f968 	bl	800b174 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dea4:	69fb      	ldr	r3, [r7, #28]
 800dea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dea8:	e01f      	b.n	800deea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800deaa:	4b2d      	ldr	r3, [pc, #180]	@ (800df60 <UART_SetConfig+0x934>)
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	f003 0320 	and.w	r3, r3, #32
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d009      	beq.n	800deca <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800deb6:	4b2a      	ldr	r3, [pc, #168]	@ (800df60 <UART_SetConfig+0x934>)
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	08db      	lsrs	r3, r3, #3
 800debc:	f003 0303 	and.w	r3, r3, #3
 800dec0:	4a24      	ldr	r2, [pc, #144]	@ (800df54 <UART_SetConfig+0x928>)
 800dec2:	fa22 f303 	lsr.w	r3, r2, r3
 800dec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dec8:	e00f      	b.n	800deea <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800deca:	4b22      	ldr	r3, [pc, #136]	@ (800df54 <UART_SetConfig+0x928>)
 800decc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dece:	e00c      	b.n	800deea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ded0:	4b21      	ldr	r3, [pc, #132]	@ (800df58 <UART_SetConfig+0x92c>)
 800ded2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ded4:	e009      	b.n	800deea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ded6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800deda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dedc:	e005      	b.n	800deea <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800dede:	2300      	movs	r3, #0
 800dee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800dee2:	2301      	movs	r3, #1
 800dee4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800dee8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800deea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800deec:	2b00      	cmp	r3, #0
 800deee:	f000 80e7 	beq.w	800e0c0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800def2:	697b      	ldr	r3, [r7, #20]
 800def4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800def6:	4a19      	ldr	r2, [pc, #100]	@ (800df5c <UART_SetConfig+0x930>)
 800def8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800defc:	461a      	mov	r2, r3
 800defe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df00:	fbb3 f3f2 	udiv	r3, r3, r2
 800df04:	005a      	lsls	r2, r3, #1
 800df06:	697b      	ldr	r3, [r7, #20]
 800df08:	685b      	ldr	r3, [r3, #4]
 800df0a:	085b      	lsrs	r3, r3, #1
 800df0c:	441a      	add	r2, r3
 800df0e:	697b      	ldr	r3, [r7, #20]
 800df10:	685b      	ldr	r3, [r3, #4]
 800df12:	fbb2 f3f3 	udiv	r3, r2, r3
 800df16:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800df18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df1a:	2b0f      	cmp	r3, #15
 800df1c:	d916      	bls.n	800df4c <UART_SetConfig+0x920>
 800df1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800df24:	d212      	bcs.n	800df4c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800df26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df28:	b29b      	uxth	r3, r3
 800df2a:	f023 030f 	bic.w	r3, r3, #15
 800df2e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800df30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df32:	085b      	lsrs	r3, r3, #1
 800df34:	b29b      	uxth	r3, r3
 800df36:	f003 0307 	and.w	r3, r3, #7
 800df3a:	b29a      	uxth	r2, r3
 800df3c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800df3e:	4313      	orrs	r3, r2
 800df40:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800df42:	697b      	ldr	r3, [r7, #20]
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800df48:	60da      	str	r2, [r3, #12]
 800df4a:	e0b9      	b.n	800e0c0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800df4c:	2301      	movs	r3, #1
 800df4e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800df52:	e0b5      	b.n	800e0c0 <UART_SetConfig+0xa94>
 800df54:	03d09000 	.word	0x03d09000
 800df58:	003d0900 	.word	0x003d0900
 800df5c:	0801063c 	.word	0x0801063c
 800df60:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800df64:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800df68:	2b20      	cmp	r3, #32
 800df6a:	dc49      	bgt.n	800e000 <UART_SetConfig+0x9d4>
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	db7c      	blt.n	800e06a <UART_SetConfig+0xa3e>
 800df70:	2b20      	cmp	r3, #32
 800df72:	d87a      	bhi.n	800e06a <UART_SetConfig+0xa3e>
 800df74:	a201      	add	r2, pc, #4	@ (adr r2, 800df7c <UART_SetConfig+0x950>)
 800df76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df7a:	bf00      	nop
 800df7c:	0800e007 	.word	0x0800e007
 800df80:	0800e00f 	.word	0x0800e00f
 800df84:	0800e06b 	.word	0x0800e06b
 800df88:	0800e06b 	.word	0x0800e06b
 800df8c:	0800e017 	.word	0x0800e017
 800df90:	0800e06b 	.word	0x0800e06b
 800df94:	0800e06b 	.word	0x0800e06b
 800df98:	0800e06b 	.word	0x0800e06b
 800df9c:	0800e027 	.word	0x0800e027
 800dfa0:	0800e06b 	.word	0x0800e06b
 800dfa4:	0800e06b 	.word	0x0800e06b
 800dfa8:	0800e06b 	.word	0x0800e06b
 800dfac:	0800e06b 	.word	0x0800e06b
 800dfb0:	0800e06b 	.word	0x0800e06b
 800dfb4:	0800e06b 	.word	0x0800e06b
 800dfb8:	0800e06b 	.word	0x0800e06b
 800dfbc:	0800e037 	.word	0x0800e037
 800dfc0:	0800e06b 	.word	0x0800e06b
 800dfc4:	0800e06b 	.word	0x0800e06b
 800dfc8:	0800e06b 	.word	0x0800e06b
 800dfcc:	0800e06b 	.word	0x0800e06b
 800dfd0:	0800e06b 	.word	0x0800e06b
 800dfd4:	0800e06b 	.word	0x0800e06b
 800dfd8:	0800e06b 	.word	0x0800e06b
 800dfdc:	0800e06b 	.word	0x0800e06b
 800dfe0:	0800e06b 	.word	0x0800e06b
 800dfe4:	0800e06b 	.word	0x0800e06b
 800dfe8:	0800e06b 	.word	0x0800e06b
 800dfec:	0800e06b 	.word	0x0800e06b
 800dff0:	0800e06b 	.word	0x0800e06b
 800dff4:	0800e06b 	.word	0x0800e06b
 800dff8:	0800e06b 	.word	0x0800e06b
 800dffc:	0800e05d 	.word	0x0800e05d
 800e000:	2b40      	cmp	r3, #64	@ 0x40
 800e002:	d02e      	beq.n	800e062 <UART_SetConfig+0xa36>
 800e004:	e031      	b.n	800e06a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e006:	f7fa ff95 	bl	8008f34 <HAL_RCC_GetPCLK1Freq>
 800e00a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e00c:	e033      	b.n	800e076 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e00e:	f7fa ffa7 	bl	8008f60 <HAL_RCC_GetPCLK2Freq>
 800e012:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e014:	e02f      	b.n	800e076 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e016:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e01a:	4618      	mov	r0, r3
 800e01c:	f7fc ff56 	bl	800aecc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e022:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e024:	e027      	b.n	800e076 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e026:	f107 0318 	add.w	r3, r7, #24
 800e02a:	4618      	mov	r0, r3
 800e02c:	f7fd f8a2 	bl	800b174 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e030:	69fb      	ldr	r3, [r7, #28]
 800e032:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e034:	e01f      	b.n	800e076 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e036:	4b2d      	ldr	r3, [pc, #180]	@ (800e0ec <UART_SetConfig+0xac0>)
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	f003 0320 	and.w	r3, r3, #32
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d009      	beq.n	800e056 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e042:	4b2a      	ldr	r3, [pc, #168]	@ (800e0ec <UART_SetConfig+0xac0>)
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	08db      	lsrs	r3, r3, #3
 800e048:	f003 0303 	and.w	r3, r3, #3
 800e04c:	4a28      	ldr	r2, [pc, #160]	@ (800e0f0 <UART_SetConfig+0xac4>)
 800e04e:	fa22 f303 	lsr.w	r3, r2, r3
 800e052:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e054:	e00f      	b.n	800e076 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800e056:	4b26      	ldr	r3, [pc, #152]	@ (800e0f0 <UART_SetConfig+0xac4>)
 800e058:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e05a:	e00c      	b.n	800e076 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e05c:	4b25      	ldr	r3, [pc, #148]	@ (800e0f4 <UART_SetConfig+0xac8>)
 800e05e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e060:	e009      	b.n	800e076 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e062:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e066:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e068:	e005      	b.n	800e076 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800e06a:	2300      	movs	r3, #0
 800e06c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800e06e:	2301      	movs	r3, #1
 800e070:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800e074:	bf00      	nop
    }

    if (pclk != 0U)
 800e076:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d021      	beq.n	800e0c0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e07c:	697b      	ldr	r3, [r7, #20]
 800e07e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e080:	4a1d      	ldr	r2, [pc, #116]	@ (800e0f8 <UART_SetConfig+0xacc>)
 800e082:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e086:	461a      	mov	r2, r3
 800e088:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e08a:	fbb3 f2f2 	udiv	r2, r3, r2
 800e08e:	697b      	ldr	r3, [r7, #20]
 800e090:	685b      	ldr	r3, [r3, #4]
 800e092:	085b      	lsrs	r3, r3, #1
 800e094:	441a      	add	r2, r3
 800e096:	697b      	ldr	r3, [r7, #20]
 800e098:	685b      	ldr	r3, [r3, #4]
 800e09a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e09e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e0a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0a2:	2b0f      	cmp	r3, #15
 800e0a4:	d909      	bls.n	800e0ba <UART_SetConfig+0xa8e>
 800e0a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e0ac:	d205      	bcs.n	800e0ba <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e0ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0b0:	b29a      	uxth	r2, r3
 800e0b2:	697b      	ldr	r3, [r7, #20]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	60da      	str	r2, [r3, #12]
 800e0b8:	e002      	b.n	800e0c0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e0ba:	2301      	movs	r3, #1
 800e0bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e0c0:	697b      	ldr	r3, [r7, #20]
 800e0c2:	2201      	movs	r2, #1
 800e0c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800e0c8:	697b      	ldr	r3, [r7, #20]
 800e0ca:	2201      	movs	r2, #1
 800e0cc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e0d0:	697b      	ldr	r3, [r7, #20]
 800e0d2:	2200      	movs	r2, #0
 800e0d4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800e0d6:	697b      	ldr	r3, [r7, #20]
 800e0d8:	2200      	movs	r2, #0
 800e0da:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800e0dc:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	3748      	adds	r7, #72	@ 0x48
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e0ea:	bf00      	nop
 800e0ec:	58024400 	.word	0x58024400
 800e0f0:	03d09000 	.word	0x03d09000
 800e0f4:	003d0900 	.word	0x003d0900
 800e0f8:	0801063c 	.word	0x0801063c

0800e0fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e0fc:	b480      	push	{r7}
 800e0fe:	b083      	sub	sp, #12
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e108:	f003 0308 	and.w	r3, r3, #8
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d00a      	beq.n	800e126 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	685b      	ldr	r3, [r3, #4]
 800e116:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	430a      	orrs	r2, r1
 800e124:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e12a:	f003 0301 	and.w	r3, r3, #1
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d00a      	beq.n	800e148 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	685b      	ldr	r3, [r3, #4]
 800e138:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	430a      	orrs	r2, r1
 800e146:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e14c:	f003 0302 	and.w	r3, r3, #2
 800e150:	2b00      	cmp	r3, #0
 800e152:	d00a      	beq.n	800e16a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	685b      	ldr	r3, [r3, #4]
 800e15a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	430a      	orrs	r2, r1
 800e168:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e16e:	f003 0304 	and.w	r3, r3, #4
 800e172:	2b00      	cmp	r3, #0
 800e174:	d00a      	beq.n	800e18c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	685b      	ldr	r3, [r3, #4]
 800e17c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	430a      	orrs	r2, r1
 800e18a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e190:	f003 0310 	and.w	r3, r3, #16
 800e194:	2b00      	cmp	r3, #0
 800e196:	d00a      	beq.n	800e1ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	689b      	ldr	r3, [r3, #8]
 800e19e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	430a      	orrs	r2, r1
 800e1ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e1b2:	f003 0320 	and.w	r3, r3, #32
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d00a      	beq.n	800e1d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	689b      	ldr	r3, [r3, #8]
 800e1c0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	430a      	orrs	r2, r1
 800e1ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e1d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d01a      	beq.n	800e212 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	685b      	ldr	r3, [r3, #4]
 800e1e2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	430a      	orrs	r2, r1
 800e1f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e1f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e1fa:	d10a      	bne.n	800e212 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	685b      	ldr	r3, [r3, #4]
 800e202:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	430a      	orrs	r2, r1
 800e210:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e216:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d00a      	beq.n	800e234 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	685b      	ldr	r3, [r3, #4]
 800e224:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	430a      	orrs	r2, r1
 800e232:	605a      	str	r2, [r3, #4]
  }
}
 800e234:	bf00      	nop
 800e236:	370c      	adds	r7, #12
 800e238:	46bd      	mov	sp, r7
 800e23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e23e:	4770      	bx	lr

0800e240 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e240:	b580      	push	{r7, lr}
 800e242:	b098      	sub	sp, #96	@ 0x60
 800e244:	af02      	add	r7, sp, #8
 800e246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	2200      	movs	r2, #0
 800e24c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e250:	f7f4 fefa 	bl	8003048 <HAL_GetTick>
 800e254:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	f003 0308 	and.w	r3, r3, #8
 800e260:	2b08      	cmp	r3, #8
 800e262:	d12f      	bne.n	800e2c4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e264:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e268:	9300      	str	r3, [sp, #0]
 800e26a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e26c:	2200      	movs	r2, #0
 800e26e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800e272:	6878      	ldr	r0, [r7, #4]
 800e274:	f000 f88e 	bl	800e394 <UART_WaitOnFlagUntilTimeout>
 800e278:	4603      	mov	r3, r0
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d022      	beq.n	800e2c4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e286:	e853 3f00 	ldrex	r3, [r3]
 800e28a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e28c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e28e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e292:	653b      	str	r3, [r7, #80]	@ 0x50
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	461a      	mov	r2, r3
 800e29a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e29c:	647b      	str	r3, [r7, #68]	@ 0x44
 800e29e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e2a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e2a4:	e841 2300 	strex	r3, r2, [r1]
 800e2a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e2aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d1e6      	bne.n	800e27e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	2220      	movs	r2, #32
 800e2b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	2200      	movs	r2, #0
 800e2bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e2c0:	2303      	movs	r3, #3
 800e2c2:	e063      	b.n	800e38c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	f003 0304 	and.w	r3, r3, #4
 800e2ce:	2b04      	cmp	r3, #4
 800e2d0:	d149      	bne.n	800e366 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e2d2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e2d6:	9300      	str	r3, [sp, #0]
 800e2d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e2da:	2200      	movs	r2, #0
 800e2dc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800e2e0:	6878      	ldr	r0, [r7, #4]
 800e2e2:	f000 f857 	bl	800e394 <UART_WaitOnFlagUntilTimeout>
 800e2e6:	4603      	mov	r3, r0
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d03c      	beq.n	800e366 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2f4:	e853 3f00 	ldrex	r3, [r3]
 800e2f8:	623b      	str	r3, [r7, #32]
   return(result);
 800e2fa:	6a3b      	ldr	r3, [r7, #32]
 800e2fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e300:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	461a      	mov	r2, r3
 800e308:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e30a:	633b      	str	r3, [r7, #48]	@ 0x30
 800e30c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e30e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e310:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e312:	e841 2300 	strex	r3, r2, [r1]
 800e316:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d1e6      	bne.n	800e2ec <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	3308      	adds	r3, #8
 800e324:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e326:	693b      	ldr	r3, [r7, #16]
 800e328:	e853 3f00 	ldrex	r3, [r3]
 800e32c:	60fb      	str	r3, [r7, #12]
   return(result);
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	f023 0301 	bic.w	r3, r3, #1
 800e334:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	3308      	adds	r3, #8
 800e33c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e33e:	61fa      	str	r2, [r7, #28]
 800e340:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e342:	69b9      	ldr	r1, [r7, #24]
 800e344:	69fa      	ldr	r2, [r7, #28]
 800e346:	e841 2300 	strex	r3, r2, [r1]
 800e34a:	617b      	str	r3, [r7, #20]
   return(result);
 800e34c:	697b      	ldr	r3, [r7, #20]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d1e5      	bne.n	800e31e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	2220      	movs	r2, #32
 800e356:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	2200      	movs	r2, #0
 800e35e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e362:	2303      	movs	r3, #3
 800e364:	e012      	b.n	800e38c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	2220      	movs	r2, #32
 800e36a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	2220      	movs	r2, #32
 800e372:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	2200      	movs	r2, #0
 800e37a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	2200      	movs	r2, #0
 800e380:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	2200      	movs	r2, #0
 800e386:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e38a:	2300      	movs	r3, #0
}
 800e38c:	4618      	mov	r0, r3
 800e38e:	3758      	adds	r7, #88	@ 0x58
 800e390:	46bd      	mov	sp, r7
 800e392:	bd80      	pop	{r7, pc}

0800e394 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e394:	b580      	push	{r7, lr}
 800e396:	b084      	sub	sp, #16
 800e398:	af00      	add	r7, sp, #0
 800e39a:	60f8      	str	r0, [r7, #12]
 800e39c:	60b9      	str	r1, [r7, #8]
 800e39e:	603b      	str	r3, [r7, #0]
 800e3a0:	4613      	mov	r3, r2
 800e3a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e3a4:	e04f      	b.n	800e446 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e3a6:	69bb      	ldr	r3, [r7, #24]
 800e3a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3ac:	d04b      	beq.n	800e446 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e3ae:	f7f4 fe4b 	bl	8003048 <HAL_GetTick>
 800e3b2:	4602      	mov	r2, r0
 800e3b4:	683b      	ldr	r3, [r7, #0]
 800e3b6:	1ad3      	subs	r3, r2, r3
 800e3b8:	69ba      	ldr	r2, [r7, #24]
 800e3ba:	429a      	cmp	r2, r3
 800e3bc:	d302      	bcc.n	800e3c4 <UART_WaitOnFlagUntilTimeout+0x30>
 800e3be:	69bb      	ldr	r3, [r7, #24]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d101      	bne.n	800e3c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e3c4:	2303      	movs	r3, #3
 800e3c6:	e04e      	b.n	800e466 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	f003 0304 	and.w	r3, r3, #4
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d037      	beq.n	800e446 <UART_WaitOnFlagUntilTimeout+0xb2>
 800e3d6:	68bb      	ldr	r3, [r7, #8]
 800e3d8:	2b80      	cmp	r3, #128	@ 0x80
 800e3da:	d034      	beq.n	800e446 <UART_WaitOnFlagUntilTimeout+0xb2>
 800e3dc:	68bb      	ldr	r3, [r7, #8]
 800e3de:	2b40      	cmp	r3, #64	@ 0x40
 800e3e0:	d031      	beq.n	800e446 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	69db      	ldr	r3, [r3, #28]
 800e3e8:	f003 0308 	and.w	r3, r3, #8
 800e3ec:	2b08      	cmp	r3, #8
 800e3ee:	d110      	bne.n	800e412 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	2208      	movs	r2, #8
 800e3f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e3f8:	68f8      	ldr	r0, [r7, #12]
 800e3fa:	f000 f95b 	bl	800e6b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	2208      	movs	r2, #8
 800e402:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	2200      	movs	r2, #0
 800e40a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800e40e:	2301      	movs	r3, #1
 800e410:	e029      	b.n	800e466 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	69db      	ldr	r3, [r3, #28]
 800e418:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e41c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e420:	d111      	bne.n	800e446 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e42a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e42c:	68f8      	ldr	r0, [r7, #12]
 800e42e:	f000 f941 	bl	800e6b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	2220      	movs	r2, #32
 800e436:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	2200      	movs	r2, #0
 800e43e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800e442:	2303      	movs	r3, #3
 800e444:	e00f      	b.n	800e466 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	69da      	ldr	r2, [r3, #28]
 800e44c:	68bb      	ldr	r3, [r7, #8]
 800e44e:	4013      	ands	r3, r2
 800e450:	68ba      	ldr	r2, [r7, #8]
 800e452:	429a      	cmp	r2, r3
 800e454:	bf0c      	ite	eq
 800e456:	2301      	moveq	r3, #1
 800e458:	2300      	movne	r3, #0
 800e45a:	b2db      	uxtb	r3, r3
 800e45c:	461a      	mov	r2, r3
 800e45e:	79fb      	ldrb	r3, [r7, #7]
 800e460:	429a      	cmp	r2, r3
 800e462:	d0a0      	beq.n	800e3a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e464:	2300      	movs	r3, #0
}
 800e466:	4618      	mov	r0, r3
 800e468:	3710      	adds	r7, #16
 800e46a:	46bd      	mov	sp, r7
 800e46c:	bd80      	pop	{r7, pc}
	...

0800e470 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e470:	b480      	push	{r7}
 800e472:	b0a3      	sub	sp, #140	@ 0x8c
 800e474:	af00      	add	r7, sp, #0
 800e476:	60f8      	str	r0, [r7, #12]
 800e478:	60b9      	str	r1, [r7, #8]
 800e47a:	4613      	mov	r3, r2
 800e47c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	68ba      	ldr	r2, [r7, #8]
 800e482:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	88fa      	ldrh	r2, [r7, #6]
 800e488:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	88fa      	ldrh	r2, [r7, #6]
 800e490:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	2200      	movs	r2, #0
 800e498:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	689b      	ldr	r3, [r3, #8]
 800e49e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e4a2:	d10e      	bne.n	800e4c2 <UART_Start_Receive_IT+0x52>
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	691b      	ldr	r3, [r3, #16]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d105      	bne.n	800e4b8 <UART_Start_Receive_IT+0x48>
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800e4b2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e4b6:	e02d      	b.n	800e514 <UART_Start_Receive_IT+0xa4>
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	22ff      	movs	r2, #255	@ 0xff
 800e4bc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e4c0:	e028      	b.n	800e514 <UART_Start_Receive_IT+0xa4>
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	689b      	ldr	r3, [r3, #8]
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d10d      	bne.n	800e4e6 <UART_Start_Receive_IT+0x76>
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	691b      	ldr	r3, [r3, #16]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d104      	bne.n	800e4dc <UART_Start_Receive_IT+0x6c>
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	22ff      	movs	r2, #255	@ 0xff
 800e4d6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e4da:	e01b      	b.n	800e514 <UART_Start_Receive_IT+0xa4>
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	227f      	movs	r2, #127	@ 0x7f
 800e4e0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e4e4:	e016      	b.n	800e514 <UART_Start_Receive_IT+0xa4>
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	689b      	ldr	r3, [r3, #8]
 800e4ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e4ee:	d10d      	bne.n	800e50c <UART_Start_Receive_IT+0x9c>
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	691b      	ldr	r3, [r3, #16]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d104      	bne.n	800e502 <UART_Start_Receive_IT+0x92>
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	227f      	movs	r2, #127	@ 0x7f
 800e4fc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e500:	e008      	b.n	800e514 <UART_Start_Receive_IT+0xa4>
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	223f      	movs	r2, #63	@ 0x3f
 800e506:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e50a:	e003      	b.n	800e514 <UART_Start_Receive_IT+0xa4>
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	2200      	movs	r2, #0
 800e510:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	2200      	movs	r2, #0
 800e518:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	2222      	movs	r2, #34	@ 0x22
 800e520:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	3308      	adds	r3, #8
 800e52a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e52c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e52e:	e853 3f00 	ldrex	r3, [r3]
 800e532:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800e534:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e536:	f043 0301 	orr.w	r3, r3, #1
 800e53a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	3308      	adds	r3, #8
 800e544:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800e548:	673a      	str	r2, [r7, #112]	@ 0x70
 800e54a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e54c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800e54e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800e550:	e841 2300 	strex	r3, r2, [r1]
 800e554:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800e556:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d1e3      	bne.n	800e524 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e560:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e564:	d14f      	bne.n	800e606 <UART_Start_Receive_IT+0x196>
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e56c:	88fa      	ldrh	r2, [r7, #6]
 800e56e:	429a      	cmp	r2, r3
 800e570:	d349      	bcc.n	800e606 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	689b      	ldr	r3, [r3, #8]
 800e576:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e57a:	d107      	bne.n	800e58c <UART_Start_Receive_IT+0x11c>
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	691b      	ldr	r3, [r3, #16]
 800e580:	2b00      	cmp	r3, #0
 800e582:	d103      	bne.n	800e58c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	4a47      	ldr	r2, [pc, #284]	@ (800e6a4 <UART_Start_Receive_IT+0x234>)
 800e588:	675a      	str	r2, [r3, #116]	@ 0x74
 800e58a:	e002      	b.n	800e592 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	4a46      	ldr	r2, [pc, #280]	@ (800e6a8 <UART_Start_Receive_IT+0x238>)
 800e590:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	691b      	ldr	r3, [r3, #16]
 800e596:	2b00      	cmp	r3, #0
 800e598:	d01a      	beq.n	800e5d0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e5a2:	e853 3f00 	ldrex	r3, [r3]
 800e5a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800e5a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e5aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e5ae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	461a      	mov	r2, r3
 800e5b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e5bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e5be:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5c0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e5c2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e5c4:	e841 2300 	strex	r3, r2, [r1]
 800e5c8:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800e5ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d1e4      	bne.n	800e59a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	3308      	adds	r3, #8
 800e5d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e5da:	e853 3f00 	ldrex	r3, [r3]
 800e5de:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e5e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e5e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	3308      	adds	r3, #8
 800e5ee:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800e5f0:	64ba      	str	r2, [r7, #72]	@ 0x48
 800e5f2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5f4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e5f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e5f8:	e841 2300 	strex	r3, r2, [r1]
 800e5fc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800e5fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e600:	2b00      	cmp	r3, #0
 800e602:	d1e5      	bne.n	800e5d0 <UART_Start_Receive_IT+0x160>
 800e604:	e046      	b.n	800e694 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	689b      	ldr	r3, [r3, #8]
 800e60a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e60e:	d107      	bne.n	800e620 <UART_Start_Receive_IT+0x1b0>
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	691b      	ldr	r3, [r3, #16]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d103      	bne.n	800e620 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	4a24      	ldr	r2, [pc, #144]	@ (800e6ac <UART_Start_Receive_IT+0x23c>)
 800e61c:	675a      	str	r2, [r3, #116]	@ 0x74
 800e61e:	e002      	b.n	800e626 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	4a23      	ldr	r2, [pc, #140]	@ (800e6b0 <UART_Start_Receive_IT+0x240>)
 800e624:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	691b      	ldr	r3, [r3, #16]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d019      	beq.n	800e662 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e636:	e853 3f00 	ldrex	r3, [r3]
 800e63a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e63c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e63e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800e642:	677b      	str	r3, [r7, #116]	@ 0x74
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	461a      	mov	r2, r3
 800e64a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e64c:	637b      	str	r3, [r7, #52]	@ 0x34
 800e64e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e650:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e652:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e654:	e841 2300 	strex	r3, r2, [r1]
 800e658:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800e65a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d1e6      	bne.n	800e62e <UART_Start_Receive_IT+0x1be>
 800e660:	e018      	b.n	800e694 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e668:	697b      	ldr	r3, [r7, #20]
 800e66a:	e853 3f00 	ldrex	r3, [r3]
 800e66e:	613b      	str	r3, [r7, #16]
   return(result);
 800e670:	693b      	ldr	r3, [r7, #16]
 800e672:	f043 0320 	orr.w	r3, r3, #32
 800e676:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	461a      	mov	r2, r3
 800e67e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e680:	623b      	str	r3, [r7, #32]
 800e682:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e684:	69f9      	ldr	r1, [r7, #28]
 800e686:	6a3a      	ldr	r2, [r7, #32]
 800e688:	e841 2300 	strex	r3, r2, [r1]
 800e68c:	61bb      	str	r3, [r7, #24]
   return(result);
 800e68e:	69bb      	ldr	r3, [r7, #24]
 800e690:	2b00      	cmp	r3, #0
 800e692:	d1e6      	bne.n	800e662 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800e694:	2300      	movs	r3, #0
}
 800e696:	4618      	mov	r0, r3
 800e698:	378c      	adds	r7, #140	@ 0x8c
 800e69a:	46bd      	mov	sp, r7
 800e69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a0:	4770      	bx	lr
 800e6a2:	bf00      	nop
 800e6a4:	0800eed1 	.word	0x0800eed1
 800e6a8:	0800eb6d 	.word	0x0800eb6d
 800e6ac:	0800e9b5 	.word	0x0800e9b5
 800e6b0:	0800e7fd 	.word	0x0800e7fd

0800e6b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e6b4:	b480      	push	{r7}
 800e6b6:	b095      	sub	sp, #84	@ 0x54
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e6c4:	e853 3f00 	ldrex	r3, [r3]
 800e6c8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e6ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e6d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	461a      	mov	r2, r3
 800e6d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e6da:	643b      	str	r3, [r7, #64]	@ 0x40
 800e6dc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6de:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e6e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e6e2:	e841 2300 	strex	r3, r2, [r1]
 800e6e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e6e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d1e6      	bne.n	800e6bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	3308      	adds	r3, #8
 800e6f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6f6:	6a3b      	ldr	r3, [r7, #32]
 800e6f8:	e853 3f00 	ldrex	r3, [r3]
 800e6fc:	61fb      	str	r3, [r7, #28]
   return(result);
 800e6fe:	69fa      	ldr	r2, [r7, #28]
 800e700:	4b1e      	ldr	r3, [pc, #120]	@ (800e77c <UART_EndRxTransfer+0xc8>)
 800e702:	4013      	ands	r3, r2
 800e704:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	3308      	adds	r3, #8
 800e70c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e70e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e710:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e712:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e714:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e716:	e841 2300 	strex	r3, r2, [r1]
 800e71a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e71c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d1e5      	bne.n	800e6ee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e726:	2b01      	cmp	r3, #1
 800e728:	d118      	bne.n	800e75c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	e853 3f00 	ldrex	r3, [r3]
 800e736:	60bb      	str	r3, [r7, #8]
   return(result);
 800e738:	68bb      	ldr	r3, [r7, #8]
 800e73a:	f023 0310 	bic.w	r3, r3, #16
 800e73e:	647b      	str	r3, [r7, #68]	@ 0x44
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	461a      	mov	r2, r3
 800e746:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e748:	61bb      	str	r3, [r7, #24]
 800e74a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e74c:	6979      	ldr	r1, [r7, #20]
 800e74e:	69ba      	ldr	r2, [r7, #24]
 800e750:	e841 2300 	strex	r3, r2, [r1]
 800e754:	613b      	str	r3, [r7, #16]
   return(result);
 800e756:	693b      	ldr	r3, [r7, #16]
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d1e6      	bne.n	800e72a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	2220      	movs	r2, #32
 800e760:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	2200      	movs	r2, #0
 800e768:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	2200      	movs	r2, #0
 800e76e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800e770:	bf00      	nop
 800e772:	3754      	adds	r7, #84	@ 0x54
 800e774:	46bd      	mov	sp, r7
 800e776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e77a:	4770      	bx	lr
 800e77c:	effffffe 	.word	0xeffffffe

0800e780 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e780:	b580      	push	{r7, lr}
 800e782:	b084      	sub	sp, #16
 800e784:	af00      	add	r7, sp, #0
 800e786:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e78c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	2200      	movs	r2, #0
 800e792:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e796:	68f8      	ldr	r0, [r7, #12]
 800e798:	f7fe ff32 	bl	800d600 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e79c:	bf00      	nop
 800e79e:	3710      	adds	r7, #16
 800e7a0:	46bd      	mov	sp, r7
 800e7a2:	bd80      	pop	{r7, pc}

0800e7a4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e7a4:	b580      	push	{r7, lr}
 800e7a6:	b088      	sub	sp, #32
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	e853 3f00 	ldrex	r3, [r3]
 800e7b8:	60bb      	str	r3, [r7, #8]
   return(result);
 800e7ba:	68bb      	ldr	r3, [r7, #8]
 800e7bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e7c0:	61fb      	str	r3, [r7, #28]
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	461a      	mov	r2, r3
 800e7c8:	69fb      	ldr	r3, [r7, #28]
 800e7ca:	61bb      	str	r3, [r7, #24]
 800e7cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7ce:	6979      	ldr	r1, [r7, #20]
 800e7d0:	69ba      	ldr	r2, [r7, #24]
 800e7d2:	e841 2300 	strex	r3, r2, [r1]
 800e7d6:	613b      	str	r3, [r7, #16]
   return(result);
 800e7d8:	693b      	ldr	r3, [r7, #16]
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d1e6      	bne.n	800e7ac <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	2220      	movs	r2, #32
 800e7e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	2200      	movs	r2, #0
 800e7ea:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e7ec:	6878      	ldr	r0, [r7, #4]
 800e7ee:	f7fe fefd 	bl	800d5ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e7f2:	bf00      	nop
 800e7f4:	3720      	adds	r7, #32
 800e7f6:	46bd      	mov	sp, r7
 800e7f8:	bd80      	pop	{r7, pc}
	...

0800e7fc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e7fc:	b580      	push	{r7, lr}
 800e7fe:	b09c      	sub	sp, #112	@ 0x70
 800e800:	af00      	add	r7, sp, #0
 800e802:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e80a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e814:	2b22      	cmp	r3, #34	@ 0x22
 800e816:	f040 80be 	bne.w	800e996 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e820:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e824:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800e828:	b2d9      	uxtb	r1, r3
 800e82a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800e82e:	b2da      	uxtb	r2, r3
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e834:	400a      	ands	r2, r1
 800e836:	b2d2      	uxtb	r2, r2
 800e838:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e83e:	1c5a      	adds	r2, r3, #1
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e84a:	b29b      	uxth	r3, r3
 800e84c:	3b01      	subs	r3, #1
 800e84e:	b29a      	uxth	r2, r3
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e85c:	b29b      	uxth	r3, r3
 800e85e:	2b00      	cmp	r3, #0
 800e860:	f040 80a1 	bne.w	800e9a6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e86a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e86c:	e853 3f00 	ldrex	r3, [r3]
 800e870:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e872:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e874:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e878:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	461a      	mov	r2, r3
 800e880:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e882:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e884:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e886:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e888:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e88a:	e841 2300 	strex	r3, r2, [r1]
 800e88e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e890:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e892:	2b00      	cmp	r3, #0
 800e894:	d1e6      	bne.n	800e864 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	3308      	adds	r3, #8
 800e89c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e89e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8a0:	e853 3f00 	ldrex	r3, [r3]
 800e8a4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e8a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e8a8:	f023 0301 	bic.w	r3, r3, #1
 800e8ac:	667b      	str	r3, [r7, #100]	@ 0x64
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	3308      	adds	r3, #8
 800e8b4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e8b6:	647a      	str	r2, [r7, #68]	@ 0x44
 800e8b8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8ba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e8bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e8be:	e841 2300 	strex	r3, r2, [r1]
 800e8c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e8c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d1e5      	bne.n	800e896 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	2220      	movs	r2, #32
 800e8ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	2200      	movs	r2, #0
 800e8d6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	2200      	movs	r2, #0
 800e8dc:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	4a33      	ldr	r2, [pc, #204]	@ (800e9b0 <UART_RxISR_8BIT+0x1b4>)
 800e8e4:	4293      	cmp	r3, r2
 800e8e6:	d01f      	beq.n	800e928 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	685b      	ldr	r3, [r3, #4]
 800e8ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d018      	beq.n	800e928 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8fe:	e853 3f00 	ldrex	r3, [r3]
 800e902:	623b      	str	r3, [r7, #32]
   return(result);
 800e904:	6a3b      	ldr	r3, [r7, #32]
 800e906:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e90a:	663b      	str	r3, [r7, #96]	@ 0x60
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	461a      	mov	r2, r3
 800e912:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e914:	633b      	str	r3, [r7, #48]	@ 0x30
 800e916:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e918:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e91a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e91c:	e841 2300 	strex	r3, r2, [r1]
 800e920:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e924:	2b00      	cmp	r3, #0
 800e926:	d1e6      	bne.n	800e8f6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e92c:	2b01      	cmp	r3, #1
 800e92e:	d12e      	bne.n	800e98e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	2200      	movs	r2, #0
 800e934:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e93c:	693b      	ldr	r3, [r7, #16]
 800e93e:	e853 3f00 	ldrex	r3, [r3]
 800e942:	60fb      	str	r3, [r7, #12]
   return(result);
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	f023 0310 	bic.w	r3, r3, #16
 800e94a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	461a      	mov	r2, r3
 800e952:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e954:	61fb      	str	r3, [r7, #28]
 800e956:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e958:	69b9      	ldr	r1, [r7, #24]
 800e95a:	69fa      	ldr	r2, [r7, #28]
 800e95c:	e841 2300 	strex	r3, r2, [r1]
 800e960:	617b      	str	r3, [r7, #20]
   return(result);
 800e962:	697b      	ldr	r3, [r7, #20]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d1e6      	bne.n	800e936 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	69db      	ldr	r3, [r3, #28]
 800e96e:	f003 0310 	and.w	r3, r3, #16
 800e972:	2b10      	cmp	r3, #16
 800e974:	d103      	bne.n	800e97e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	2210      	movs	r2, #16
 800e97c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e984:	4619      	mov	r1, r3
 800e986:	6878      	ldr	r0, [r7, #4]
 800e988:	f7fe fe44 	bl	800d614 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e98c:	e00b      	b.n	800e9a6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800e98e:	6878      	ldr	r0, [r7, #4]
 800e990:	f7f3 ffca 	bl	8002928 <HAL_UART_RxCpltCallback>
}
 800e994:	e007      	b.n	800e9a6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	699a      	ldr	r2, [r3, #24]
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	f042 0208 	orr.w	r2, r2, #8
 800e9a4:	619a      	str	r2, [r3, #24]
}
 800e9a6:	bf00      	nop
 800e9a8:	3770      	adds	r7, #112	@ 0x70
 800e9aa:	46bd      	mov	sp, r7
 800e9ac:	bd80      	pop	{r7, pc}
 800e9ae:	bf00      	nop
 800e9b0:	58000c00 	.word	0x58000c00

0800e9b4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	b09c      	sub	sp, #112	@ 0x70
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e9c2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e9cc:	2b22      	cmp	r3, #34	@ 0x22
 800e9ce:	f040 80be 	bne.w	800eb4e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e9d8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e9e0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800e9e2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800e9e6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800e9ea:	4013      	ands	r3, r2
 800e9ec:	b29a      	uxth	r2, r3
 800e9ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e9f0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e9f6:	1c9a      	adds	r2, r3, #2
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ea02:	b29b      	uxth	r3, r3
 800ea04:	3b01      	subs	r3, #1
 800ea06:	b29a      	uxth	r2, r3
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ea14:	b29b      	uxth	r3, r3
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	f040 80a1 	bne.w	800eb5e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ea24:	e853 3f00 	ldrex	r3, [r3]
 800ea28:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ea2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ea2c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ea30:	667b      	str	r3, [r7, #100]	@ 0x64
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	461a      	mov	r2, r3
 800ea38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ea3a:	657b      	str	r3, [r7, #84]	@ 0x54
 800ea3c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea3e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ea40:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ea42:	e841 2300 	strex	r3, r2, [r1]
 800ea46:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ea48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d1e6      	bne.n	800ea1c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	3308      	adds	r3, #8
 800ea54:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ea58:	e853 3f00 	ldrex	r3, [r3]
 800ea5c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ea5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea60:	f023 0301 	bic.w	r3, r3, #1
 800ea64:	663b      	str	r3, [r7, #96]	@ 0x60
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	3308      	adds	r3, #8
 800ea6c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ea6e:	643a      	str	r2, [r7, #64]	@ 0x40
 800ea70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea72:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ea74:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ea76:	e841 2300 	strex	r3, r2, [r1]
 800ea7a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ea7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d1e5      	bne.n	800ea4e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	2220      	movs	r2, #32
 800ea86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	2200      	movs	r2, #0
 800ea8e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	2200      	movs	r2, #0
 800ea94:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	4a33      	ldr	r2, [pc, #204]	@ (800eb68 <UART_RxISR_16BIT+0x1b4>)
 800ea9c:	4293      	cmp	r3, r2
 800ea9e:	d01f      	beq.n	800eae0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	685b      	ldr	r3, [r3, #4]
 800eaa6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d018      	beq.n	800eae0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eab4:	6a3b      	ldr	r3, [r7, #32]
 800eab6:	e853 3f00 	ldrex	r3, [r3]
 800eaba:	61fb      	str	r3, [r7, #28]
   return(result);
 800eabc:	69fb      	ldr	r3, [r7, #28]
 800eabe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800eac2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	461a      	mov	r2, r3
 800eaca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800eacc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800eace:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ead0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ead2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ead4:	e841 2300 	strex	r3, r2, [r1]
 800ead8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800eada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d1e6      	bne.n	800eaae <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eae4:	2b01      	cmp	r3, #1
 800eae6:	d12e      	bne.n	800eb46 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	2200      	movs	r2, #0
 800eaec:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	e853 3f00 	ldrex	r3, [r3]
 800eafa:	60bb      	str	r3, [r7, #8]
   return(result);
 800eafc:	68bb      	ldr	r3, [r7, #8]
 800eafe:	f023 0310 	bic.w	r3, r3, #16
 800eb02:	65bb      	str	r3, [r7, #88]	@ 0x58
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	461a      	mov	r2, r3
 800eb0a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800eb0c:	61bb      	str	r3, [r7, #24]
 800eb0e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb10:	6979      	ldr	r1, [r7, #20]
 800eb12:	69ba      	ldr	r2, [r7, #24]
 800eb14:	e841 2300 	strex	r3, r2, [r1]
 800eb18:	613b      	str	r3, [r7, #16]
   return(result);
 800eb1a:	693b      	ldr	r3, [r7, #16]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d1e6      	bne.n	800eaee <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	69db      	ldr	r3, [r3, #28]
 800eb26:	f003 0310 	and.w	r3, r3, #16
 800eb2a:	2b10      	cmp	r3, #16
 800eb2c:	d103      	bne.n	800eb36 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	2210      	movs	r2, #16
 800eb34:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800eb3c:	4619      	mov	r1, r3
 800eb3e:	6878      	ldr	r0, [r7, #4]
 800eb40:	f7fe fd68 	bl	800d614 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800eb44:	e00b      	b.n	800eb5e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800eb46:	6878      	ldr	r0, [r7, #4]
 800eb48:	f7f3 feee 	bl	8002928 <HAL_UART_RxCpltCallback>
}
 800eb4c:	e007      	b.n	800eb5e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	699a      	ldr	r2, [r3, #24]
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	f042 0208 	orr.w	r2, r2, #8
 800eb5c:	619a      	str	r2, [r3, #24]
}
 800eb5e:	bf00      	nop
 800eb60:	3770      	adds	r7, #112	@ 0x70
 800eb62:	46bd      	mov	sp, r7
 800eb64:	bd80      	pop	{r7, pc}
 800eb66:	bf00      	nop
 800eb68:	58000c00 	.word	0x58000c00

0800eb6c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800eb6c:	b580      	push	{r7, lr}
 800eb6e:	b0ac      	sub	sp, #176	@ 0xb0
 800eb70:	af00      	add	r7, sp, #0
 800eb72:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800eb7a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	69db      	ldr	r3, [r3, #28]
 800eb84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	689b      	ldr	r3, [r3, #8]
 800eb98:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800eba2:	2b22      	cmp	r3, #34	@ 0x22
 800eba4:	f040 8181 	bne.w	800eeaa <UART_RxISR_8BIT_FIFOEN+0x33e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ebae:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ebb2:	e124      	b.n	800edfe <UART_RxISR_8BIT_FIFOEN+0x292>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ebba:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ebbe:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800ebc2:	b2d9      	uxtb	r1, r3
 800ebc4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800ebc8:	b2da      	uxtb	r2, r3
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ebce:	400a      	ands	r2, r1
 800ebd0:	b2d2      	uxtb	r2, r2
 800ebd2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ebd8:	1c5a      	adds	r2, r3, #1
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ebe4:	b29b      	uxth	r3, r3
 800ebe6:	3b01      	subs	r3, #1
 800ebe8:	b29a      	uxth	r2, r3
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	69db      	ldr	r3, [r3, #28]
 800ebf6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ebfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ebfe:	f003 0307 	and.w	r3, r3, #7
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d053      	beq.n	800ecae <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ec06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ec0a:	f003 0301 	and.w	r3, r3, #1
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d011      	beq.n	800ec36 <UART_RxISR_8BIT_FIFOEN+0xca>
 800ec12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ec16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d00b      	beq.n	800ec36 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	2201      	movs	r2, #1
 800ec24:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ec2c:	f043 0201 	orr.w	r2, r3, #1
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ec36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ec3a:	f003 0302 	and.w	r3, r3, #2
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d011      	beq.n	800ec66 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800ec42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ec46:	f003 0301 	and.w	r3, r3, #1
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d00b      	beq.n	800ec66 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	2202      	movs	r2, #2
 800ec54:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ec5c:	f043 0204 	orr.w	r2, r3, #4
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ec66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ec6a:	f003 0304 	and.w	r3, r3, #4
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d011      	beq.n	800ec96 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800ec72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ec76:	f003 0301 	and.w	r3, r3, #1
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d00b      	beq.n	800ec96 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	2204      	movs	r2, #4
 800ec84:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ec8c:	f043 0202 	orr.w	r2, r3, #2
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d006      	beq.n	800ecae <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800eca0:	6878      	ldr	r0, [r7, #4]
 800eca2:	f7fe fcad 	bl	800d600 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	2200      	movs	r2, #0
 800ecaa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ecb4:	b29b      	uxth	r3, r3
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	f040 80a1 	bne.w	800edfe <UART_RxISR_8BIT_FIFOEN+0x292>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecc2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ecc4:	e853 3f00 	ldrex	r3, [r3]
 800ecc8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800ecca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800eccc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ecd0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	461a      	mov	r2, r3
 800ecda:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ecde:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ece0:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ece2:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800ece4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800ece6:	e841 2300 	strex	r3, r2, [r1]
 800ecea:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800ecec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d1e4      	bne.n	800ecbc <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	3308      	adds	r3, #8
 800ecf8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecfa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ecfc:	e853 3f00 	ldrex	r3, [r3]
 800ed00:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800ed02:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ed04:	4b6f      	ldr	r3, [pc, #444]	@ (800eec4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800ed06:	4013      	ands	r3, r2
 800ed08:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	3308      	adds	r3, #8
 800ed12:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ed16:	66ba      	str	r2, [r7, #104]	@ 0x68
 800ed18:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed1a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800ed1c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800ed1e:	e841 2300 	strex	r3, r2, [r1]
 800ed22:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800ed24:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d1e3      	bne.n	800ecf2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	2220      	movs	r2, #32
 800ed2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	2200      	movs	r2, #0
 800ed36:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	4a61      	ldr	r2, [pc, #388]	@ (800eec8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800ed44:	4293      	cmp	r3, r2
 800ed46:	d021      	beq.n	800ed8c <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	685b      	ldr	r3, [r3, #4]
 800ed4e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d01a      	beq.n	800ed8c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ed5e:	e853 3f00 	ldrex	r3, [r3]
 800ed62:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ed64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ed66:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ed6a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	461a      	mov	r2, r3
 800ed74:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ed78:	657b      	str	r3, [r7, #84]	@ 0x54
 800ed7a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed7c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ed7e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ed80:	e841 2300 	strex	r3, r2, [r1]
 800ed84:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ed86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d1e4      	bne.n	800ed56 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ed90:	2b01      	cmp	r3, #1
 800ed92:	d130      	bne.n	800edf6 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	2200      	movs	r2, #0
 800ed98:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eda0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eda2:	e853 3f00 	ldrex	r3, [r3]
 800eda6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800eda8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edaa:	f023 0310 	bic.w	r3, r3, #16
 800edae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	461a      	mov	r2, r3
 800edb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800edbc:	643b      	str	r3, [r7, #64]	@ 0x40
 800edbe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edc0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800edc2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800edc4:	e841 2300 	strex	r3, r2, [r1]
 800edc8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800edca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d1e4      	bne.n	800ed9a <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	69db      	ldr	r3, [r3, #28]
 800edd6:	f003 0310 	and.w	r3, r3, #16
 800edda:	2b10      	cmp	r3, #16
 800eddc:	d103      	bne.n	800ede6 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	2210      	movs	r2, #16
 800ede4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800edec:	4619      	mov	r1, r3
 800edee:	6878      	ldr	r0, [r7, #4]
 800edf0:	f7fe fc10 	bl	800d614 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800edf4:	e00e      	b.n	800ee14 <UART_RxISR_8BIT_FIFOEN+0x2a8>
          HAL_UART_RxCpltCallback(huart);
 800edf6:	6878      	ldr	r0, [r7, #4]
 800edf8:	f7f3 fd96 	bl	8002928 <HAL_UART_RxCpltCallback>
        break;
 800edfc:	e00a      	b.n	800ee14 <UART_RxISR_8BIT_FIFOEN+0x2a8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800edfe:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d006      	beq.n	800ee14 <UART_RxISR_8BIT_FIFOEN+0x2a8>
 800ee06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ee0a:	f003 0320 	and.w	r3, r3, #32
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	f47f aed0 	bne.w	800ebb4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ee1a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ee1e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d049      	beq.n	800eeba <UART_RxISR_8BIT_FIFOEN+0x34e>
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ee2c:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800ee30:	429a      	cmp	r2, r3
 800ee32:	d242      	bcs.n	800eeba <UART_RxISR_8BIT_FIFOEN+0x34e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	3308      	adds	r3, #8
 800ee3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee3c:	6a3b      	ldr	r3, [r7, #32]
 800ee3e:	e853 3f00 	ldrex	r3, [r3]
 800ee42:	61fb      	str	r3, [r7, #28]
   return(result);
 800ee44:	69fb      	ldr	r3, [r7, #28]
 800ee46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ee4a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	3308      	adds	r3, #8
 800ee54:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800ee58:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ee5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ee5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ee60:	e841 2300 	strex	r3, r2, [r1]
 800ee64:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ee66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d1e3      	bne.n	800ee34 <UART_RxISR_8BIT_FIFOEN+0x2c8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	4a17      	ldr	r2, [pc, #92]	@ (800eecc <UART_RxISR_8BIT_FIFOEN+0x360>)
 800ee70:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	e853 3f00 	ldrex	r3, [r3]
 800ee7e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ee80:	68bb      	ldr	r3, [r7, #8]
 800ee82:	f043 0320 	orr.w	r3, r3, #32
 800ee86:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	461a      	mov	r2, r3
 800ee90:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ee94:	61bb      	str	r3, [r7, #24]
 800ee96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee98:	6979      	ldr	r1, [r7, #20]
 800ee9a:	69ba      	ldr	r2, [r7, #24]
 800ee9c:	e841 2300 	strex	r3, r2, [r1]
 800eea0:	613b      	str	r3, [r7, #16]
   return(result);
 800eea2:	693b      	ldr	r3, [r7, #16]
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d1e4      	bne.n	800ee72 <UART_RxISR_8BIT_FIFOEN+0x306>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800eea8:	e007      	b.n	800eeba <UART_RxISR_8BIT_FIFOEN+0x34e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	699a      	ldr	r2, [r3, #24]
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	f042 0208 	orr.w	r2, r2, #8
 800eeb8:	619a      	str	r2, [r3, #24]
}
 800eeba:	bf00      	nop
 800eebc:	37b0      	adds	r7, #176	@ 0xb0
 800eebe:	46bd      	mov	sp, r7
 800eec0:	bd80      	pop	{r7, pc}
 800eec2:	bf00      	nop
 800eec4:	effffffe 	.word	0xeffffffe
 800eec8:	58000c00 	.word	0x58000c00
 800eecc:	0800e7fd 	.word	0x0800e7fd

0800eed0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800eed0:	b580      	push	{r7, lr}
 800eed2:	b0ae      	sub	sp, #184	@ 0xb8
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800eede:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	69db      	ldr	r3, [r3, #28]
 800eee8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	689b      	ldr	r3, [r3, #8]
 800eefc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ef06:	2b22      	cmp	r3, #34	@ 0x22
 800ef08:	f040 8185 	bne.w	800f216 <UART_RxISR_16BIT_FIFOEN+0x346>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ef12:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ef16:	e128      	b.n	800f16a <UART_RxISR_16BIT_FIFOEN+0x29a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef1e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ef26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800ef2a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800ef2e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800ef32:	4013      	ands	r3, r2
 800ef34:	b29a      	uxth	r2, r3
 800ef36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ef3a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ef40:	1c9a      	adds	r2, r3, #2
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ef4c:	b29b      	uxth	r3, r3
 800ef4e:	3b01      	subs	r3, #1
 800ef50:	b29a      	uxth	r2, r3
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	69db      	ldr	r3, [r3, #28]
 800ef5e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ef62:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ef66:	f003 0307 	and.w	r3, r3, #7
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d053      	beq.n	800f016 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ef6e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ef72:	f003 0301 	and.w	r3, r3, #1
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d011      	beq.n	800ef9e <UART_RxISR_16BIT_FIFOEN+0xce>
 800ef7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ef7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d00b      	beq.n	800ef9e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	2201      	movs	r2, #1
 800ef8c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ef94:	f043 0201 	orr.w	r2, r3, #1
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ef9e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800efa2:	f003 0302 	and.w	r3, r3, #2
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d011      	beq.n	800efce <UART_RxISR_16BIT_FIFOEN+0xfe>
 800efaa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800efae:	f003 0301 	and.w	r3, r3, #1
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d00b      	beq.n	800efce <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	2202      	movs	r2, #2
 800efbc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800efc4:	f043 0204 	orr.w	r2, r3, #4
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800efce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800efd2:	f003 0304 	and.w	r3, r3, #4
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d011      	beq.n	800effe <UART_RxISR_16BIT_FIFOEN+0x12e>
 800efda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800efde:	f003 0301 	and.w	r3, r3, #1
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d00b      	beq.n	800effe <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	2204      	movs	r2, #4
 800efec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eff4:	f043 0202 	orr.w	r2, r3, #2
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f004:	2b00      	cmp	r3, #0
 800f006:	d006      	beq.n	800f016 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f008:	6878      	ldr	r0, [r7, #4]
 800f00a:	f7fe faf9 	bl	800d600 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	2200      	movs	r2, #0
 800f012:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f01c:	b29b      	uxth	r3, r3
 800f01e:	2b00      	cmp	r3, #0
 800f020:	f040 80a3 	bne.w	800f16a <UART_RxISR_16BIT_FIFOEN+0x29a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f02a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f02c:	e853 3f00 	ldrex	r3, [r3]
 800f030:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800f032:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f034:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f038:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	461a      	mov	r2, r3
 800f042:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f046:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f04a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f04c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800f04e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f052:	e841 2300 	strex	r3, r2, [r1]
 800f056:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800f058:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d1e2      	bne.n	800f024 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	3308      	adds	r3, #8
 800f064:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f066:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f068:	e853 3f00 	ldrex	r3, [r3]
 800f06c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800f06e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800f070:	4b6f      	ldr	r3, [pc, #444]	@ (800f230 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800f072:	4013      	ands	r3, r2
 800f074:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	3308      	adds	r3, #8
 800f07e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800f082:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800f084:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f086:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800f088:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800f08a:	e841 2300 	strex	r3, r2, [r1]
 800f08e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800f090:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f092:	2b00      	cmp	r3, #0
 800f094:	d1e3      	bne.n	800f05e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	2220      	movs	r2, #32
 800f09a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	2200      	movs	r2, #0
 800f0a2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	2200      	movs	r2, #0
 800f0a8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	4a61      	ldr	r2, [pc, #388]	@ (800f234 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800f0b0:	4293      	cmp	r3, r2
 800f0b2:	d021      	beq.n	800f0f8 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	685b      	ldr	r3, [r3, #4]
 800f0ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d01a      	beq.n	800f0f8 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f0ca:	e853 3f00 	ldrex	r3, [r3]
 800f0ce:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f0d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f0d2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800f0d6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	461a      	mov	r2, r3
 800f0e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800f0e4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f0e6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0e8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f0ea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f0ec:	e841 2300 	strex	r3, r2, [r1]
 800f0f0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f0f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d1e4      	bne.n	800f0c2 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f0fc:	2b01      	cmp	r3, #1
 800f0fe:	d130      	bne.n	800f162 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	2200      	movs	r2, #0
 800f104:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f10c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f10e:	e853 3f00 	ldrex	r3, [r3]
 800f112:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f114:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f116:	f023 0310 	bic.w	r3, r3, #16
 800f11a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	461a      	mov	r2, r3
 800f124:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800f128:	647b      	str	r3, [r7, #68]	@ 0x44
 800f12a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f12c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f12e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f130:	e841 2300 	strex	r3, r2, [r1]
 800f134:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f136:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d1e4      	bne.n	800f106 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	69db      	ldr	r3, [r3, #28]
 800f142:	f003 0310 	and.w	r3, r3, #16
 800f146:	2b10      	cmp	r3, #16
 800f148:	d103      	bne.n	800f152 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	2210      	movs	r2, #16
 800f150:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f158:	4619      	mov	r1, r3
 800f15a:	6878      	ldr	r0, [r7, #4]
 800f15c:	f7fe fa5a 	bl	800d614 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800f160:	e00e      	b.n	800f180 <UART_RxISR_16BIT_FIFOEN+0x2b0>
          HAL_UART_RxCpltCallback(huart);
 800f162:	6878      	ldr	r0, [r7, #4]
 800f164:	f7f3 fbe0 	bl	8002928 <HAL_UART_RxCpltCallback>
        break;
 800f168:	e00a      	b.n	800f180 <UART_RxISR_16BIT_FIFOEN+0x2b0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f16a:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d006      	beq.n	800f180 <UART_RxISR_16BIT_FIFOEN+0x2b0>
 800f172:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f176:	f003 0320 	and.w	r3, r3, #32
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	f47f aecc 	bne.w	800ef18 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f186:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f18a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d049      	beq.n	800f226 <UART_RxISR_16BIT_FIFOEN+0x356>
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800f198:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800f19c:	429a      	cmp	r2, r3
 800f19e:	d242      	bcs.n	800f226 <UART_RxISR_16BIT_FIFOEN+0x356>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	3308      	adds	r3, #8
 800f1a6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1aa:	e853 3f00 	ldrex	r3, [r3]
 800f1ae:	623b      	str	r3, [r7, #32]
   return(result);
 800f1b0:	6a3b      	ldr	r3, [r7, #32]
 800f1b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f1b6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	3308      	adds	r3, #8
 800f1c0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800f1c4:	633a      	str	r2, [r7, #48]	@ 0x30
 800f1c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1c8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f1ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f1cc:	e841 2300 	strex	r3, r2, [r1]
 800f1d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f1d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d1e3      	bne.n	800f1a0 <UART_RxISR_16BIT_FIFOEN+0x2d0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	4a17      	ldr	r2, [pc, #92]	@ (800f238 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800f1dc:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1e4:	693b      	ldr	r3, [r7, #16]
 800f1e6:	e853 3f00 	ldrex	r3, [r3]
 800f1ea:	60fb      	str	r3, [r7, #12]
   return(result);
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	f043 0320 	orr.w	r3, r3, #32
 800f1f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	461a      	mov	r2, r3
 800f1fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f200:	61fb      	str	r3, [r7, #28]
 800f202:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f204:	69b9      	ldr	r1, [r7, #24]
 800f206:	69fa      	ldr	r2, [r7, #28]
 800f208:	e841 2300 	strex	r3, r2, [r1]
 800f20c:	617b      	str	r3, [r7, #20]
   return(result);
 800f20e:	697b      	ldr	r3, [r7, #20]
 800f210:	2b00      	cmp	r3, #0
 800f212:	d1e4      	bne.n	800f1de <UART_RxISR_16BIT_FIFOEN+0x30e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f214:	e007      	b.n	800f226 <UART_RxISR_16BIT_FIFOEN+0x356>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	699a      	ldr	r2, [r3, #24]
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	f042 0208 	orr.w	r2, r2, #8
 800f224:	619a      	str	r2, [r3, #24]
}
 800f226:	bf00      	nop
 800f228:	37b8      	adds	r7, #184	@ 0xb8
 800f22a:	46bd      	mov	sp, r7
 800f22c:	bd80      	pop	{r7, pc}
 800f22e:	bf00      	nop
 800f230:	effffffe 	.word	0xeffffffe
 800f234:	58000c00 	.word	0x58000c00
 800f238:	0800e9b5 	.word	0x0800e9b5

0800f23c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f23c:	b480      	push	{r7}
 800f23e:	b083      	sub	sp, #12
 800f240:	af00      	add	r7, sp, #0
 800f242:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f244:	bf00      	nop
 800f246:	370c      	adds	r7, #12
 800f248:	46bd      	mov	sp, r7
 800f24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f24e:	4770      	bx	lr

0800f250 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f250:	b480      	push	{r7}
 800f252:	b083      	sub	sp, #12
 800f254:	af00      	add	r7, sp, #0
 800f256:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f258:	bf00      	nop
 800f25a:	370c      	adds	r7, #12
 800f25c:	46bd      	mov	sp, r7
 800f25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f262:	4770      	bx	lr

0800f264 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f264:	b480      	push	{r7}
 800f266:	b083      	sub	sp, #12
 800f268:	af00      	add	r7, sp, #0
 800f26a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f26c:	bf00      	nop
 800f26e:	370c      	adds	r7, #12
 800f270:	46bd      	mov	sp, r7
 800f272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f276:	4770      	bx	lr

0800f278 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f278:	b480      	push	{r7}
 800f27a:	b085      	sub	sp, #20
 800f27c:	af00      	add	r7, sp, #0
 800f27e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f286:	2b01      	cmp	r3, #1
 800f288:	d101      	bne.n	800f28e <HAL_UARTEx_DisableFifoMode+0x16>
 800f28a:	2302      	movs	r3, #2
 800f28c:	e027      	b.n	800f2de <HAL_UARTEx_DisableFifoMode+0x66>
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	2201      	movs	r2, #1
 800f292:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	2224      	movs	r2, #36	@ 0x24
 800f29a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	681a      	ldr	r2, [r3, #0]
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	f022 0201 	bic.w	r2, r2, #1
 800f2b4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800f2bc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	2200      	movs	r2, #0
 800f2c2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	68fa      	ldr	r2, [r7, #12]
 800f2ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	2220      	movs	r2, #32
 800f2d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	2200      	movs	r2, #0
 800f2d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f2dc:	2300      	movs	r3, #0
}
 800f2de:	4618      	mov	r0, r3
 800f2e0:	3714      	adds	r7, #20
 800f2e2:	46bd      	mov	sp, r7
 800f2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e8:	4770      	bx	lr

0800f2ea <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f2ea:	b580      	push	{r7, lr}
 800f2ec:	b084      	sub	sp, #16
 800f2ee:	af00      	add	r7, sp, #0
 800f2f0:	6078      	str	r0, [r7, #4]
 800f2f2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f2fa:	2b01      	cmp	r3, #1
 800f2fc:	d101      	bne.n	800f302 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f2fe:	2302      	movs	r3, #2
 800f300:	e02d      	b.n	800f35e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	2201      	movs	r2, #1
 800f306:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	2224      	movs	r2, #36	@ 0x24
 800f30e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	681a      	ldr	r2, [r3, #0]
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	f022 0201 	bic.w	r2, r2, #1
 800f328:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	689b      	ldr	r3, [r3, #8]
 800f330:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	683a      	ldr	r2, [r7, #0]
 800f33a:	430a      	orrs	r2, r1
 800f33c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f33e:	6878      	ldr	r0, [r7, #4]
 800f340:	f000 f850 	bl	800f3e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	68fa      	ldr	r2, [r7, #12]
 800f34a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	2220      	movs	r2, #32
 800f350:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	2200      	movs	r2, #0
 800f358:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f35c:	2300      	movs	r3, #0
}
 800f35e:	4618      	mov	r0, r3
 800f360:	3710      	adds	r7, #16
 800f362:	46bd      	mov	sp, r7
 800f364:	bd80      	pop	{r7, pc}

0800f366 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f366:	b580      	push	{r7, lr}
 800f368:	b084      	sub	sp, #16
 800f36a:	af00      	add	r7, sp, #0
 800f36c:	6078      	str	r0, [r7, #4]
 800f36e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f376:	2b01      	cmp	r3, #1
 800f378:	d101      	bne.n	800f37e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f37a:	2302      	movs	r3, #2
 800f37c:	e02d      	b.n	800f3da <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	2201      	movs	r2, #1
 800f382:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	2224      	movs	r2, #36	@ 0x24
 800f38a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	681a      	ldr	r2, [r3, #0]
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	f022 0201 	bic.w	r2, r2, #1
 800f3a4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	689b      	ldr	r3, [r3, #8]
 800f3ac:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	683a      	ldr	r2, [r7, #0]
 800f3b6:	430a      	orrs	r2, r1
 800f3b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f3ba:	6878      	ldr	r0, [r7, #4]
 800f3bc:	f000 f812 	bl	800f3e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	68fa      	ldr	r2, [r7, #12]
 800f3c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	2220      	movs	r2, #32
 800f3cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	2200      	movs	r2, #0
 800f3d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f3d8:	2300      	movs	r3, #0
}
 800f3da:	4618      	mov	r0, r3
 800f3dc:	3710      	adds	r7, #16
 800f3de:	46bd      	mov	sp, r7
 800f3e0:	bd80      	pop	{r7, pc}
	...

0800f3e4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f3e4:	b480      	push	{r7}
 800f3e6:	b085      	sub	sp, #20
 800f3e8:	af00      	add	r7, sp, #0
 800f3ea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d108      	bne.n	800f406 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	2201      	movs	r2, #1
 800f3f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	2201      	movs	r2, #1
 800f400:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f404:	e031      	b.n	800f46a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f406:	2310      	movs	r3, #16
 800f408:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f40a:	2310      	movs	r3, #16
 800f40c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	689b      	ldr	r3, [r3, #8]
 800f414:	0e5b      	lsrs	r3, r3, #25
 800f416:	b2db      	uxtb	r3, r3
 800f418:	f003 0307 	and.w	r3, r3, #7
 800f41c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	689b      	ldr	r3, [r3, #8]
 800f424:	0f5b      	lsrs	r3, r3, #29
 800f426:	b2db      	uxtb	r3, r3
 800f428:	f003 0307 	and.w	r3, r3, #7
 800f42c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f42e:	7bbb      	ldrb	r3, [r7, #14]
 800f430:	7b3a      	ldrb	r2, [r7, #12]
 800f432:	4911      	ldr	r1, [pc, #68]	@ (800f478 <UARTEx_SetNbDataToProcess+0x94>)
 800f434:	5c8a      	ldrb	r2, [r1, r2]
 800f436:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f43a:	7b3a      	ldrb	r2, [r7, #12]
 800f43c:	490f      	ldr	r1, [pc, #60]	@ (800f47c <UARTEx_SetNbDataToProcess+0x98>)
 800f43e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f440:	fb93 f3f2 	sdiv	r3, r3, r2
 800f444:	b29a      	uxth	r2, r3
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f44c:	7bfb      	ldrb	r3, [r7, #15]
 800f44e:	7b7a      	ldrb	r2, [r7, #13]
 800f450:	4909      	ldr	r1, [pc, #36]	@ (800f478 <UARTEx_SetNbDataToProcess+0x94>)
 800f452:	5c8a      	ldrb	r2, [r1, r2]
 800f454:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f458:	7b7a      	ldrb	r2, [r7, #13]
 800f45a:	4908      	ldr	r1, [pc, #32]	@ (800f47c <UARTEx_SetNbDataToProcess+0x98>)
 800f45c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f45e:	fb93 f3f2 	sdiv	r3, r3, r2
 800f462:	b29a      	uxth	r2, r3
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800f46a:	bf00      	nop
 800f46c:	3714      	adds	r7, #20
 800f46e:	46bd      	mov	sp, r7
 800f470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f474:	4770      	bx	lr
 800f476:	bf00      	nop
 800f478:	08010654 	.word	0x08010654
 800f47c:	0801065c 	.word	0x0801065c

0800f480 <atoi>:
 800f480:	220a      	movs	r2, #10
 800f482:	2100      	movs	r1, #0
 800f484:	f000 b87a 	b.w	800f57c <strtol>

0800f488 <_strtol_l.isra.0>:
 800f488:	2b24      	cmp	r3, #36	@ 0x24
 800f48a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f48e:	4686      	mov	lr, r0
 800f490:	4690      	mov	r8, r2
 800f492:	d801      	bhi.n	800f498 <_strtol_l.isra.0+0x10>
 800f494:	2b01      	cmp	r3, #1
 800f496:	d106      	bne.n	800f4a6 <_strtol_l.isra.0+0x1e>
 800f498:	f000 fad0 	bl	800fa3c <__errno>
 800f49c:	2316      	movs	r3, #22
 800f49e:	6003      	str	r3, [r0, #0]
 800f4a0:	2000      	movs	r0, #0
 800f4a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4a6:	4834      	ldr	r0, [pc, #208]	@ (800f578 <_strtol_l.isra.0+0xf0>)
 800f4a8:	460d      	mov	r5, r1
 800f4aa:	462a      	mov	r2, r5
 800f4ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f4b0:	5d06      	ldrb	r6, [r0, r4]
 800f4b2:	f016 0608 	ands.w	r6, r6, #8
 800f4b6:	d1f8      	bne.n	800f4aa <_strtol_l.isra.0+0x22>
 800f4b8:	2c2d      	cmp	r4, #45	@ 0x2d
 800f4ba:	d110      	bne.n	800f4de <_strtol_l.isra.0+0x56>
 800f4bc:	782c      	ldrb	r4, [r5, #0]
 800f4be:	2601      	movs	r6, #1
 800f4c0:	1c95      	adds	r5, r2, #2
 800f4c2:	f033 0210 	bics.w	r2, r3, #16
 800f4c6:	d115      	bne.n	800f4f4 <_strtol_l.isra.0+0x6c>
 800f4c8:	2c30      	cmp	r4, #48	@ 0x30
 800f4ca:	d10d      	bne.n	800f4e8 <_strtol_l.isra.0+0x60>
 800f4cc:	782a      	ldrb	r2, [r5, #0]
 800f4ce:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f4d2:	2a58      	cmp	r2, #88	@ 0x58
 800f4d4:	d108      	bne.n	800f4e8 <_strtol_l.isra.0+0x60>
 800f4d6:	786c      	ldrb	r4, [r5, #1]
 800f4d8:	3502      	adds	r5, #2
 800f4da:	2310      	movs	r3, #16
 800f4dc:	e00a      	b.n	800f4f4 <_strtol_l.isra.0+0x6c>
 800f4de:	2c2b      	cmp	r4, #43	@ 0x2b
 800f4e0:	bf04      	itt	eq
 800f4e2:	782c      	ldrbeq	r4, [r5, #0]
 800f4e4:	1c95      	addeq	r5, r2, #2
 800f4e6:	e7ec      	b.n	800f4c2 <_strtol_l.isra.0+0x3a>
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d1f6      	bne.n	800f4da <_strtol_l.isra.0+0x52>
 800f4ec:	2c30      	cmp	r4, #48	@ 0x30
 800f4ee:	bf14      	ite	ne
 800f4f0:	230a      	movne	r3, #10
 800f4f2:	2308      	moveq	r3, #8
 800f4f4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800f4f8:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f4fc:	2200      	movs	r2, #0
 800f4fe:	fbbc f9f3 	udiv	r9, ip, r3
 800f502:	4610      	mov	r0, r2
 800f504:	fb03 ca19 	mls	sl, r3, r9, ip
 800f508:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800f50c:	2f09      	cmp	r7, #9
 800f50e:	d80f      	bhi.n	800f530 <_strtol_l.isra.0+0xa8>
 800f510:	463c      	mov	r4, r7
 800f512:	42a3      	cmp	r3, r4
 800f514:	dd1b      	ble.n	800f54e <_strtol_l.isra.0+0xc6>
 800f516:	1c57      	adds	r7, r2, #1
 800f518:	d007      	beq.n	800f52a <_strtol_l.isra.0+0xa2>
 800f51a:	4581      	cmp	r9, r0
 800f51c:	d314      	bcc.n	800f548 <_strtol_l.isra.0+0xc0>
 800f51e:	d101      	bne.n	800f524 <_strtol_l.isra.0+0x9c>
 800f520:	45a2      	cmp	sl, r4
 800f522:	db11      	blt.n	800f548 <_strtol_l.isra.0+0xc0>
 800f524:	fb00 4003 	mla	r0, r0, r3, r4
 800f528:	2201      	movs	r2, #1
 800f52a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f52e:	e7eb      	b.n	800f508 <_strtol_l.isra.0+0x80>
 800f530:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800f534:	2f19      	cmp	r7, #25
 800f536:	d801      	bhi.n	800f53c <_strtol_l.isra.0+0xb4>
 800f538:	3c37      	subs	r4, #55	@ 0x37
 800f53a:	e7ea      	b.n	800f512 <_strtol_l.isra.0+0x8a>
 800f53c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800f540:	2f19      	cmp	r7, #25
 800f542:	d804      	bhi.n	800f54e <_strtol_l.isra.0+0xc6>
 800f544:	3c57      	subs	r4, #87	@ 0x57
 800f546:	e7e4      	b.n	800f512 <_strtol_l.isra.0+0x8a>
 800f548:	f04f 32ff 	mov.w	r2, #4294967295
 800f54c:	e7ed      	b.n	800f52a <_strtol_l.isra.0+0xa2>
 800f54e:	1c53      	adds	r3, r2, #1
 800f550:	d108      	bne.n	800f564 <_strtol_l.isra.0+0xdc>
 800f552:	2322      	movs	r3, #34	@ 0x22
 800f554:	f8ce 3000 	str.w	r3, [lr]
 800f558:	4660      	mov	r0, ip
 800f55a:	f1b8 0f00 	cmp.w	r8, #0
 800f55e:	d0a0      	beq.n	800f4a2 <_strtol_l.isra.0+0x1a>
 800f560:	1e69      	subs	r1, r5, #1
 800f562:	e006      	b.n	800f572 <_strtol_l.isra.0+0xea>
 800f564:	b106      	cbz	r6, 800f568 <_strtol_l.isra.0+0xe0>
 800f566:	4240      	negs	r0, r0
 800f568:	f1b8 0f00 	cmp.w	r8, #0
 800f56c:	d099      	beq.n	800f4a2 <_strtol_l.isra.0+0x1a>
 800f56e:	2a00      	cmp	r2, #0
 800f570:	d1f6      	bne.n	800f560 <_strtol_l.isra.0+0xd8>
 800f572:	f8c8 1000 	str.w	r1, [r8]
 800f576:	e794      	b.n	800f4a2 <_strtol_l.isra.0+0x1a>
 800f578:	08010665 	.word	0x08010665

0800f57c <strtol>:
 800f57c:	4613      	mov	r3, r2
 800f57e:	460a      	mov	r2, r1
 800f580:	4601      	mov	r1, r0
 800f582:	4802      	ldr	r0, [pc, #8]	@ (800f58c <strtol+0x10>)
 800f584:	6800      	ldr	r0, [r0, #0]
 800f586:	f7ff bf7f 	b.w	800f488 <_strtol_l.isra.0>
 800f58a:	bf00      	nop
 800f58c:	24000038 	.word	0x24000038

0800f590 <std>:
 800f590:	2300      	movs	r3, #0
 800f592:	b510      	push	{r4, lr}
 800f594:	4604      	mov	r4, r0
 800f596:	e9c0 3300 	strd	r3, r3, [r0]
 800f59a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f59e:	6083      	str	r3, [r0, #8]
 800f5a0:	8181      	strh	r1, [r0, #12]
 800f5a2:	6643      	str	r3, [r0, #100]	@ 0x64
 800f5a4:	81c2      	strh	r2, [r0, #14]
 800f5a6:	6183      	str	r3, [r0, #24]
 800f5a8:	4619      	mov	r1, r3
 800f5aa:	2208      	movs	r2, #8
 800f5ac:	305c      	adds	r0, #92	@ 0x5c
 800f5ae:	f000 f99b 	bl	800f8e8 <memset>
 800f5b2:	4b0d      	ldr	r3, [pc, #52]	@ (800f5e8 <std+0x58>)
 800f5b4:	6263      	str	r3, [r4, #36]	@ 0x24
 800f5b6:	4b0d      	ldr	r3, [pc, #52]	@ (800f5ec <std+0x5c>)
 800f5b8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f5ba:	4b0d      	ldr	r3, [pc, #52]	@ (800f5f0 <std+0x60>)
 800f5bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f5be:	4b0d      	ldr	r3, [pc, #52]	@ (800f5f4 <std+0x64>)
 800f5c0:	6323      	str	r3, [r4, #48]	@ 0x30
 800f5c2:	4b0d      	ldr	r3, [pc, #52]	@ (800f5f8 <std+0x68>)
 800f5c4:	6224      	str	r4, [r4, #32]
 800f5c6:	429c      	cmp	r4, r3
 800f5c8:	d006      	beq.n	800f5d8 <std+0x48>
 800f5ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f5ce:	4294      	cmp	r4, r2
 800f5d0:	d002      	beq.n	800f5d8 <std+0x48>
 800f5d2:	33d0      	adds	r3, #208	@ 0xd0
 800f5d4:	429c      	cmp	r4, r3
 800f5d6:	d105      	bne.n	800f5e4 <std+0x54>
 800f5d8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f5dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f5e0:	f000 ba56 	b.w	800fa90 <__retarget_lock_init_recursive>
 800f5e4:	bd10      	pop	{r4, pc}
 800f5e6:	bf00      	nop
 800f5e8:	0800f739 	.word	0x0800f739
 800f5ec:	0800f75b 	.word	0x0800f75b
 800f5f0:	0800f793 	.word	0x0800f793
 800f5f4:	0800f7b7 	.word	0x0800f7b7
 800f5f8:	24000554 	.word	0x24000554

0800f5fc <stdio_exit_handler>:
 800f5fc:	4a02      	ldr	r2, [pc, #8]	@ (800f608 <stdio_exit_handler+0xc>)
 800f5fe:	4903      	ldr	r1, [pc, #12]	@ (800f60c <stdio_exit_handler+0x10>)
 800f600:	4803      	ldr	r0, [pc, #12]	@ (800f610 <stdio_exit_handler+0x14>)
 800f602:	f000 b869 	b.w	800f6d8 <_fwalk_sglue>
 800f606:	bf00      	nop
 800f608:	2400002c 	.word	0x2400002c
 800f60c:	08010395 	.word	0x08010395
 800f610:	2400003c 	.word	0x2400003c

0800f614 <cleanup_stdio>:
 800f614:	6841      	ldr	r1, [r0, #4]
 800f616:	4b0c      	ldr	r3, [pc, #48]	@ (800f648 <cleanup_stdio+0x34>)
 800f618:	4299      	cmp	r1, r3
 800f61a:	b510      	push	{r4, lr}
 800f61c:	4604      	mov	r4, r0
 800f61e:	d001      	beq.n	800f624 <cleanup_stdio+0x10>
 800f620:	f000 feb8 	bl	8010394 <_fflush_r>
 800f624:	68a1      	ldr	r1, [r4, #8]
 800f626:	4b09      	ldr	r3, [pc, #36]	@ (800f64c <cleanup_stdio+0x38>)
 800f628:	4299      	cmp	r1, r3
 800f62a:	d002      	beq.n	800f632 <cleanup_stdio+0x1e>
 800f62c:	4620      	mov	r0, r4
 800f62e:	f000 feb1 	bl	8010394 <_fflush_r>
 800f632:	68e1      	ldr	r1, [r4, #12]
 800f634:	4b06      	ldr	r3, [pc, #24]	@ (800f650 <cleanup_stdio+0x3c>)
 800f636:	4299      	cmp	r1, r3
 800f638:	d004      	beq.n	800f644 <cleanup_stdio+0x30>
 800f63a:	4620      	mov	r0, r4
 800f63c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f640:	f000 bea8 	b.w	8010394 <_fflush_r>
 800f644:	bd10      	pop	{r4, pc}
 800f646:	bf00      	nop
 800f648:	24000554 	.word	0x24000554
 800f64c:	240005bc 	.word	0x240005bc
 800f650:	24000624 	.word	0x24000624

0800f654 <global_stdio_init.part.0>:
 800f654:	b510      	push	{r4, lr}
 800f656:	4b0b      	ldr	r3, [pc, #44]	@ (800f684 <global_stdio_init.part.0+0x30>)
 800f658:	4c0b      	ldr	r4, [pc, #44]	@ (800f688 <global_stdio_init.part.0+0x34>)
 800f65a:	4a0c      	ldr	r2, [pc, #48]	@ (800f68c <global_stdio_init.part.0+0x38>)
 800f65c:	601a      	str	r2, [r3, #0]
 800f65e:	4620      	mov	r0, r4
 800f660:	2200      	movs	r2, #0
 800f662:	2104      	movs	r1, #4
 800f664:	f7ff ff94 	bl	800f590 <std>
 800f668:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f66c:	2201      	movs	r2, #1
 800f66e:	2109      	movs	r1, #9
 800f670:	f7ff ff8e 	bl	800f590 <std>
 800f674:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f678:	2202      	movs	r2, #2
 800f67a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f67e:	2112      	movs	r1, #18
 800f680:	f7ff bf86 	b.w	800f590 <std>
 800f684:	2400068c 	.word	0x2400068c
 800f688:	24000554 	.word	0x24000554
 800f68c:	0800f5fd 	.word	0x0800f5fd

0800f690 <__sfp_lock_acquire>:
 800f690:	4801      	ldr	r0, [pc, #4]	@ (800f698 <__sfp_lock_acquire+0x8>)
 800f692:	f000 b9fe 	b.w	800fa92 <__retarget_lock_acquire_recursive>
 800f696:	bf00      	nop
 800f698:	24000695 	.word	0x24000695

0800f69c <__sfp_lock_release>:
 800f69c:	4801      	ldr	r0, [pc, #4]	@ (800f6a4 <__sfp_lock_release+0x8>)
 800f69e:	f000 b9f9 	b.w	800fa94 <__retarget_lock_release_recursive>
 800f6a2:	bf00      	nop
 800f6a4:	24000695 	.word	0x24000695

0800f6a8 <__sinit>:
 800f6a8:	b510      	push	{r4, lr}
 800f6aa:	4604      	mov	r4, r0
 800f6ac:	f7ff fff0 	bl	800f690 <__sfp_lock_acquire>
 800f6b0:	6a23      	ldr	r3, [r4, #32]
 800f6b2:	b11b      	cbz	r3, 800f6bc <__sinit+0x14>
 800f6b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f6b8:	f7ff bff0 	b.w	800f69c <__sfp_lock_release>
 800f6bc:	4b04      	ldr	r3, [pc, #16]	@ (800f6d0 <__sinit+0x28>)
 800f6be:	6223      	str	r3, [r4, #32]
 800f6c0:	4b04      	ldr	r3, [pc, #16]	@ (800f6d4 <__sinit+0x2c>)
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d1f5      	bne.n	800f6b4 <__sinit+0xc>
 800f6c8:	f7ff ffc4 	bl	800f654 <global_stdio_init.part.0>
 800f6cc:	e7f2      	b.n	800f6b4 <__sinit+0xc>
 800f6ce:	bf00      	nop
 800f6d0:	0800f615 	.word	0x0800f615
 800f6d4:	2400068c 	.word	0x2400068c

0800f6d8 <_fwalk_sglue>:
 800f6d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f6dc:	4607      	mov	r7, r0
 800f6de:	4688      	mov	r8, r1
 800f6e0:	4614      	mov	r4, r2
 800f6e2:	2600      	movs	r6, #0
 800f6e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f6e8:	f1b9 0901 	subs.w	r9, r9, #1
 800f6ec:	d505      	bpl.n	800f6fa <_fwalk_sglue+0x22>
 800f6ee:	6824      	ldr	r4, [r4, #0]
 800f6f0:	2c00      	cmp	r4, #0
 800f6f2:	d1f7      	bne.n	800f6e4 <_fwalk_sglue+0xc>
 800f6f4:	4630      	mov	r0, r6
 800f6f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f6fa:	89ab      	ldrh	r3, [r5, #12]
 800f6fc:	2b01      	cmp	r3, #1
 800f6fe:	d907      	bls.n	800f710 <_fwalk_sglue+0x38>
 800f700:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f704:	3301      	adds	r3, #1
 800f706:	d003      	beq.n	800f710 <_fwalk_sglue+0x38>
 800f708:	4629      	mov	r1, r5
 800f70a:	4638      	mov	r0, r7
 800f70c:	47c0      	blx	r8
 800f70e:	4306      	orrs	r6, r0
 800f710:	3568      	adds	r5, #104	@ 0x68
 800f712:	e7e9      	b.n	800f6e8 <_fwalk_sglue+0x10>

0800f714 <iprintf>:
 800f714:	b40f      	push	{r0, r1, r2, r3}
 800f716:	b507      	push	{r0, r1, r2, lr}
 800f718:	4906      	ldr	r1, [pc, #24]	@ (800f734 <iprintf+0x20>)
 800f71a:	ab04      	add	r3, sp, #16
 800f71c:	6808      	ldr	r0, [r1, #0]
 800f71e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f722:	6881      	ldr	r1, [r0, #8]
 800f724:	9301      	str	r3, [sp, #4]
 800f726:	f000 fb0d 	bl	800fd44 <_vfiprintf_r>
 800f72a:	b003      	add	sp, #12
 800f72c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f730:	b004      	add	sp, #16
 800f732:	4770      	bx	lr
 800f734:	24000038 	.word	0x24000038

0800f738 <__sread>:
 800f738:	b510      	push	{r4, lr}
 800f73a:	460c      	mov	r4, r1
 800f73c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f740:	f000 f958 	bl	800f9f4 <_read_r>
 800f744:	2800      	cmp	r0, #0
 800f746:	bfab      	itete	ge
 800f748:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f74a:	89a3      	ldrhlt	r3, [r4, #12]
 800f74c:	181b      	addge	r3, r3, r0
 800f74e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f752:	bfac      	ite	ge
 800f754:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f756:	81a3      	strhlt	r3, [r4, #12]
 800f758:	bd10      	pop	{r4, pc}

0800f75a <__swrite>:
 800f75a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f75e:	461f      	mov	r7, r3
 800f760:	898b      	ldrh	r3, [r1, #12]
 800f762:	05db      	lsls	r3, r3, #23
 800f764:	4605      	mov	r5, r0
 800f766:	460c      	mov	r4, r1
 800f768:	4616      	mov	r6, r2
 800f76a:	d505      	bpl.n	800f778 <__swrite+0x1e>
 800f76c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f770:	2302      	movs	r3, #2
 800f772:	2200      	movs	r2, #0
 800f774:	f000 f92c 	bl	800f9d0 <_lseek_r>
 800f778:	89a3      	ldrh	r3, [r4, #12]
 800f77a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f77e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f782:	81a3      	strh	r3, [r4, #12]
 800f784:	4632      	mov	r2, r6
 800f786:	463b      	mov	r3, r7
 800f788:	4628      	mov	r0, r5
 800f78a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f78e:	f000 b943 	b.w	800fa18 <_write_r>

0800f792 <__sseek>:
 800f792:	b510      	push	{r4, lr}
 800f794:	460c      	mov	r4, r1
 800f796:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f79a:	f000 f919 	bl	800f9d0 <_lseek_r>
 800f79e:	1c43      	adds	r3, r0, #1
 800f7a0:	89a3      	ldrh	r3, [r4, #12]
 800f7a2:	bf15      	itete	ne
 800f7a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f7a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f7aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f7ae:	81a3      	strheq	r3, [r4, #12]
 800f7b0:	bf18      	it	ne
 800f7b2:	81a3      	strhne	r3, [r4, #12]
 800f7b4:	bd10      	pop	{r4, pc}

0800f7b6 <__sclose>:
 800f7b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f7ba:	f000 b8f9 	b.w	800f9b0 <_close_r>

0800f7be <__swbuf_r>:
 800f7be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7c0:	460e      	mov	r6, r1
 800f7c2:	4614      	mov	r4, r2
 800f7c4:	4605      	mov	r5, r0
 800f7c6:	b118      	cbz	r0, 800f7d0 <__swbuf_r+0x12>
 800f7c8:	6a03      	ldr	r3, [r0, #32]
 800f7ca:	b90b      	cbnz	r3, 800f7d0 <__swbuf_r+0x12>
 800f7cc:	f7ff ff6c 	bl	800f6a8 <__sinit>
 800f7d0:	69a3      	ldr	r3, [r4, #24]
 800f7d2:	60a3      	str	r3, [r4, #8]
 800f7d4:	89a3      	ldrh	r3, [r4, #12]
 800f7d6:	071a      	lsls	r2, r3, #28
 800f7d8:	d501      	bpl.n	800f7de <__swbuf_r+0x20>
 800f7da:	6923      	ldr	r3, [r4, #16]
 800f7dc:	b943      	cbnz	r3, 800f7f0 <__swbuf_r+0x32>
 800f7de:	4621      	mov	r1, r4
 800f7e0:	4628      	mov	r0, r5
 800f7e2:	f000 f82b 	bl	800f83c <__swsetup_r>
 800f7e6:	b118      	cbz	r0, 800f7f0 <__swbuf_r+0x32>
 800f7e8:	f04f 37ff 	mov.w	r7, #4294967295
 800f7ec:	4638      	mov	r0, r7
 800f7ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f7f0:	6823      	ldr	r3, [r4, #0]
 800f7f2:	6922      	ldr	r2, [r4, #16]
 800f7f4:	1a98      	subs	r0, r3, r2
 800f7f6:	6963      	ldr	r3, [r4, #20]
 800f7f8:	b2f6      	uxtb	r6, r6
 800f7fa:	4283      	cmp	r3, r0
 800f7fc:	4637      	mov	r7, r6
 800f7fe:	dc05      	bgt.n	800f80c <__swbuf_r+0x4e>
 800f800:	4621      	mov	r1, r4
 800f802:	4628      	mov	r0, r5
 800f804:	f000 fdc6 	bl	8010394 <_fflush_r>
 800f808:	2800      	cmp	r0, #0
 800f80a:	d1ed      	bne.n	800f7e8 <__swbuf_r+0x2a>
 800f80c:	68a3      	ldr	r3, [r4, #8]
 800f80e:	3b01      	subs	r3, #1
 800f810:	60a3      	str	r3, [r4, #8]
 800f812:	6823      	ldr	r3, [r4, #0]
 800f814:	1c5a      	adds	r2, r3, #1
 800f816:	6022      	str	r2, [r4, #0]
 800f818:	701e      	strb	r6, [r3, #0]
 800f81a:	6962      	ldr	r2, [r4, #20]
 800f81c:	1c43      	adds	r3, r0, #1
 800f81e:	429a      	cmp	r2, r3
 800f820:	d004      	beq.n	800f82c <__swbuf_r+0x6e>
 800f822:	89a3      	ldrh	r3, [r4, #12]
 800f824:	07db      	lsls	r3, r3, #31
 800f826:	d5e1      	bpl.n	800f7ec <__swbuf_r+0x2e>
 800f828:	2e0a      	cmp	r6, #10
 800f82a:	d1df      	bne.n	800f7ec <__swbuf_r+0x2e>
 800f82c:	4621      	mov	r1, r4
 800f82e:	4628      	mov	r0, r5
 800f830:	f000 fdb0 	bl	8010394 <_fflush_r>
 800f834:	2800      	cmp	r0, #0
 800f836:	d0d9      	beq.n	800f7ec <__swbuf_r+0x2e>
 800f838:	e7d6      	b.n	800f7e8 <__swbuf_r+0x2a>
	...

0800f83c <__swsetup_r>:
 800f83c:	b538      	push	{r3, r4, r5, lr}
 800f83e:	4b29      	ldr	r3, [pc, #164]	@ (800f8e4 <__swsetup_r+0xa8>)
 800f840:	4605      	mov	r5, r0
 800f842:	6818      	ldr	r0, [r3, #0]
 800f844:	460c      	mov	r4, r1
 800f846:	b118      	cbz	r0, 800f850 <__swsetup_r+0x14>
 800f848:	6a03      	ldr	r3, [r0, #32]
 800f84a:	b90b      	cbnz	r3, 800f850 <__swsetup_r+0x14>
 800f84c:	f7ff ff2c 	bl	800f6a8 <__sinit>
 800f850:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f854:	0719      	lsls	r1, r3, #28
 800f856:	d422      	bmi.n	800f89e <__swsetup_r+0x62>
 800f858:	06da      	lsls	r2, r3, #27
 800f85a:	d407      	bmi.n	800f86c <__swsetup_r+0x30>
 800f85c:	2209      	movs	r2, #9
 800f85e:	602a      	str	r2, [r5, #0]
 800f860:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f864:	81a3      	strh	r3, [r4, #12]
 800f866:	f04f 30ff 	mov.w	r0, #4294967295
 800f86a:	e033      	b.n	800f8d4 <__swsetup_r+0x98>
 800f86c:	0758      	lsls	r0, r3, #29
 800f86e:	d512      	bpl.n	800f896 <__swsetup_r+0x5a>
 800f870:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f872:	b141      	cbz	r1, 800f886 <__swsetup_r+0x4a>
 800f874:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f878:	4299      	cmp	r1, r3
 800f87a:	d002      	beq.n	800f882 <__swsetup_r+0x46>
 800f87c:	4628      	mov	r0, r5
 800f87e:	f000 f937 	bl	800faf0 <_free_r>
 800f882:	2300      	movs	r3, #0
 800f884:	6363      	str	r3, [r4, #52]	@ 0x34
 800f886:	89a3      	ldrh	r3, [r4, #12]
 800f888:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f88c:	81a3      	strh	r3, [r4, #12]
 800f88e:	2300      	movs	r3, #0
 800f890:	6063      	str	r3, [r4, #4]
 800f892:	6923      	ldr	r3, [r4, #16]
 800f894:	6023      	str	r3, [r4, #0]
 800f896:	89a3      	ldrh	r3, [r4, #12]
 800f898:	f043 0308 	orr.w	r3, r3, #8
 800f89c:	81a3      	strh	r3, [r4, #12]
 800f89e:	6923      	ldr	r3, [r4, #16]
 800f8a0:	b94b      	cbnz	r3, 800f8b6 <__swsetup_r+0x7a>
 800f8a2:	89a3      	ldrh	r3, [r4, #12]
 800f8a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f8a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f8ac:	d003      	beq.n	800f8b6 <__swsetup_r+0x7a>
 800f8ae:	4621      	mov	r1, r4
 800f8b0:	4628      	mov	r0, r5
 800f8b2:	f000 fdcf 	bl	8010454 <__smakebuf_r>
 800f8b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f8ba:	f013 0201 	ands.w	r2, r3, #1
 800f8be:	d00a      	beq.n	800f8d6 <__swsetup_r+0x9a>
 800f8c0:	2200      	movs	r2, #0
 800f8c2:	60a2      	str	r2, [r4, #8]
 800f8c4:	6962      	ldr	r2, [r4, #20]
 800f8c6:	4252      	negs	r2, r2
 800f8c8:	61a2      	str	r2, [r4, #24]
 800f8ca:	6922      	ldr	r2, [r4, #16]
 800f8cc:	b942      	cbnz	r2, 800f8e0 <__swsetup_r+0xa4>
 800f8ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f8d2:	d1c5      	bne.n	800f860 <__swsetup_r+0x24>
 800f8d4:	bd38      	pop	{r3, r4, r5, pc}
 800f8d6:	0799      	lsls	r1, r3, #30
 800f8d8:	bf58      	it	pl
 800f8da:	6962      	ldrpl	r2, [r4, #20]
 800f8dc:	60a2      	str	r2, [r4, #8]
 800f8de:	e7f4      	b.n	800f8ca <__swsetup_r+0x8e>
 800f8e0:	2000      	movs	r0, #0
 800f8e2:	e7f7      	b.n	800f8d4 <__swsetup_r+0x98>
 800f8e4:	24000038 	.word	0x24000038

0800f8e8 <memset>:
 800f8e8:	4402      	add	r2, r0
 800f8ea:	4603      	mov	r3, r0
 800f8ec:	4293      	cmp	r3, r2
 800f8ee:	d100      	bne.n	800f8f2 <memset+0xa>
 800f8f0:	4770      	bx	lr
 800f8f2:	f803 1b01 	strb.w	r1, [r3], #1
 800f8f6:	e7f9      	b.n	800f8ec <memset+0x4>

0800f8f8 <strtok>:
 800f8f8:	4b16      	ldr	r3, [pc, #88]	@ (800f954 <strtok+0x5c>)
 800f8fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8fe:	681f      	ldr	r7, [r3, #0]
 800f900:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800f902:	4605      	mov	r5, r0
 800f904:	460e      	mov	r6, r1
 800f906:	b9ec      	cbnz	r4, 800f944 <strtok+0x4c>
 800f908:	2050      	movs	r0, #80	@ 0x50
 800f90a:	f000 f93b 	bl	800fb84 <malloc>
 800f90e:	4602      	mov	r2, r0
 800f910:	6478      	str	r0, [r7, #68]	@ 0x44
 800f912:	b920      	cbnz	r0, 800f91e <strtok+0x26>
 800f914:	4b10      	ldr	r3, [pc, #64]	@ (800f958 <strtok+0x60>)
 800f916:	4811      	ldr	r0, [pc, #68]	@ (800f95c <strtok+0x64>)
 800f918:	215b      	movs	r1, #91	@ 0x5b
 800f91a:	f000 f8cb 	bl	800fab4 <__assert_func>
 800f91e:	e9c0 4400 	strd	r4, r4, [r0]
 800f922:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800f926:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800f92a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800f92e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800f932:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800f936:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800f93a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800f93e:	6184      	str	r4, [r0, #24]
 800f940:	7704      	strb	r4, [r0, #28]
 800f942:	6244      	str	r4, [r0, #36]	@ 0x24
 800f944:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f946:	4631      	mov	r1, r6
 800f948:	4628      	mov	r0, r5
 800f94a:	2301      	movs	r3, #1
 800f94c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f950:	f000 b806 	b.w	800f960 <__strtok_r>
 800f954:	24000038 	.word	0x24000038
 800f958:	08010765 	.word	0x08010765
 800f95c:	0801077c 	.word	0x0801077c

0800f960 <__strtok_r>:
 800f960:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f962:	4604      	mov	r4, r0
 800f964:	b908      	cbnz	r0, 800f96a <__strtok_r+0xa>
 800f966:	6814      	ldr	r4, [r2, #0]
 800f968:	b144      	cbz	r4, 800f97c <__strtok_r+0x1c>
 800f96a:	4620      	mov	r0, r4
 800f96c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800f970:	460f      	mov	r7, r1
 800f972:	f817 6b01 	ldrb.w	r6, [r7], #1
 800f976:	b91e      	cbnz	r6, 800f980 <__strtok_r+0x20>
 800f978:	b965      	cbnz	r5, 800f994 <__strtok_r+0x34>
 800f97a:	6015      	str	r5, [r2, #0]
 800f97c:	2000      	movs	r0, #0
 800f97e:	e005      	b.n	800f98c <__strtok_r+0x2c>
 800f980:	42b5      	cmp	r5, r6
 800f982:	d1f6      	bne.n	800f972 <__strtok_r+0x12>
 800f984:	2b00      	cmp	r3, #0
 800f986:	d1f0      	bne.n	800f96a <__strtok_r+0xa>
 800f988:	6014      	str	r4, [r2, #0]
 800f98a:	7003      	strb	r3, [r0, #0]
 800f98c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f98e:	461c      	mov	r4, r3
 800f990:	e00c      	b.n	800f9ac <__strtok_r+0x4c>
 800f992:	b91d      	cbnz	r5, 800f99c <__strtok_r+0x3c>
 800f994:	4627      	mov	r7, r4
 800f996:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f99a:	460e      	mov	r6, r1
 800f99c:	f816 5b01 	ldrb.w	r5, [r6], #1
 800f9a0:	42ab      	cmp	r3, r5
 800f9a2:	d1f6      	bne.n	800f992 <__strtok_r+0x32>
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d0f2      	beq.n	800f98e <__strtok_r+0x2e>
 800f9a8:	2300      	movs	r3, #0
 800f9aa:	703b      	strb	r3, [r7, #0]
 800f9ac:	6014      	str	r4, [r2, #0]
 800f9ae:	e7ed      	b.n	800f98c <__strtok_r+0x2c>

0800f9b0 <_close_r>:
 800f9b0:	b538      	push	{r3, r4, r5, lr}
 800f9b2:	4d06      	ldr	r5, [pc, #24]	@ (800f9cc <_close_r+0x1c>)
 800f9b4:	2300      	movs	r3, #0
 800f9b6:	4604      	mov	r4, r0
 800f9b8:	4608      	mov	r0, r1
 800f9ba:	602b      	str	r3, [r5, #0]
 800f9bc:	f7f2 f866 	bl	8001a8c <_close>
 800f9c0:	1c43      	adds	r3, r0, #1
 800f9c2:	d102      	bne.n	800f9ca <_close_r+0x1a>
 800f9c4:	682b      	ldr	r3, [r5, #0]
 800f9c6:	b103      	cbz	r3, 800f9ca <_close_r+0x1a>
 800f9c8:	6023      	str	r3, [r4, #0]
 800f9ca:	bd38      	pop	{r3, r4, r5, pc}
 800f9cc:	24000690 	.word	0x24000690

0800f9d0 <_lseek_r>:
 800f9d0:	b538      	push	{r3, r4, r5, lr}
 800f9d2:	4d07      	ldr	r5, [pc, #28]	@ (800f9f0 <_lseek_r+0x20>)
 800f9d4:	4604      	mov	r4, r0
 800f9d6:	4608      	mov	r0, r1
 800f9d8:	4611      	mov	r1, r2
 800f9da:	2200      	movs	r2, #0
 800f9dc:	602a      	str	r2, [r5, #0]
 800f9de:	461a      	mov	r2, r3
 800f9e0:	f7f2 f87b 	bl	8001ada <_lseek>
 800f9e4:	1c43      	adds	r3, r0, #1
 800f9e6:	d102      	bne.n	800f9ee <_lseek_r+0x1e>
 800f9e8:	682b      	ldr	r3, [r5, #0]
 800f9ea:	b103      	cbz	r3, 800f9ee <_lseek_r+0x1e>
 800f9ec:	6023      	str	r3, [r4, #0]
 800f9ee:	bd38      	pop	{r3, r4, r5, pc}
 800f9f0:	24000690 	.word	0x24000690

0800f9f4 <_read_r>:
 800f9f4:	b538      	push	{r3, r4, r5, lr}
 800f9f6:	4d07      	ldr	r5, [pc, #28]	@ (800fa14 <_read_r+0x20>)
 800f9f8:	4604      	mov	r4, r0
 800f9fa:	4608      	mov	r0, r1
 800f9fc:	4611      	mov	r1, r2
 800f9fe:	2200      	movs	r2, #0
 800fa00:	602a      	str	r2, [r5, #0]
 800fa02:	461a      	mov	r2, r3
 800fa04:	f7f2 f809 	bl	8001a1a <_read>
 800fa08:	1c43      	adds	r3, r0, #1
 800fa0a:	d102      	bne.n	800fa12 <_read_r+0x1e>
 800fa0c:	682b      	ldr	r3, [r5, #0]
 800fa0e:	b103      	cbz	r3, 800fa12 <_read_r+0x1e>
 800fa10:	6023      	str	r3, [r4, #0]
 800fa12:	bd38      	pop	{r3, r4, r5, pc}
 800fa14:	24000690 	.word	0x24000690

0800fa18 <_write_r>:
 800fa18:	b538      	push	{r3, r4, r5, lr}
 800fa1a:	4d07      	ldr	r5, [pc, #28]	@ (800fa38 <_write_r+0x20>)
 800fa1c:	4604      	mov	r4, r0
 800fa1e:	4608      	mov	r0, r1
 800fa20:	4611      	mov	r1, r2
 800fa22:	2200      	movs	r2, #0
 800fa24:	602a      	str	r2, [r5, #0]
 800fa26:	461a      	mov	r2, r3
 800fa28:	f7f2 f814 	bl	8001a54 <_write>
 800fa2c:	1c43      	adds	r3, r0, #1
 800fa2e:	d102      	bne.n	800fa36 <_write_r+0x1e>
 800fa30:	682b      	ldr	r3, [r5, #0]
 800fa32:	b103      	cbz	r3, 800fa36 <_write_r+0x1e>
 800fa34:	6023      	str	r3, [r4, #0]
 800fa36:	bd38      	pop	{r3, r4, r5, pc}
 800fa38:	24000690 	.word	0x24000690

0800fa3c <__errno>:
 800fa3c:	4b01      	ldr	r3, [pc, #4]	@ (800fa44 <__errno+0x8>)
 800fa3e:	6818      	ldr	r0, [r3, #0]
 800fa40:	4770      	bx	lr
 800fa42:	bf00      	nop
 800fa44:	24000038 	.word	0x24000038

0800fa48 <__libc_init_array>:
 800fa48:	b570      	push	{r4, r5, r6, lr}
 800fa4a:	4d0d      	ldr	r5, [pc, #52]	@ (800fa80 <__libc_init_array+0x38>)
 800fa4c:	4c0d      	ldr	r4, [pc, #52]	@ (800fa84 <__libc_init_array+0x3c>)
 800fa4e:	1b64      	subs	r4, r4, r5
 800fa50:	10a4      	asrs	r4, r4, #2
 800fa52:	2600      	movs	r6, #0
 800fa54:	42a6      	cmp	r6, r4
 800fa56:	d109      	bne.n	800fa6c <__libc_init_array+0x24>
 800fa58:	4d0b      	ldr	r5, [pc, #44]	@ (800fa88 <__libc_init_array+0x40>)
 800fa5a:	4c0c      	ldr	r4, [pc, #48]	@ (800fa8c <__libc_init_array+0x44>)
 800fa5c:	f000 fdb4 	bl	80105c8 <_init>
 800fa60:	1b64      	subs	r4, r4, r5
 800fa62:	10a4      	asrs	r4, r4, #2
 800fa64:	2600      	movs	r6, #0
 800fa66:	42a6      	cmp	r6, r4
 800fa68:	d105      	bne.n	800fa76 <__libc_init_array+0x2e>
 800fa6a:	bd70      	pop	{r4, r5, r6, pc}
 800fa6c:	f855 3b04 	ldr.w	r3, [r5], #4
 800fa70:	4798      	blx	r3
 800fa72:	3601      	adds	r6, #1
 800fa74:	e7ee      	b.n	800fa54 <__libc_init_array+0xc>
 800fa76:	f855 3b04 	ldr.w	r3, [r5], #4
 800fa7a:	4798      	blx	r3
 800fa7c:	3601      	adds	r6, #1
 800fa7e:	e7f2      	b.n	800fa66 <__libc_init_array+0x1e>
 800fa80:	08010850 	.word	0x08010850
 800fa84:	08010850 	.word	0x08010850
 800fa88:	08010850 	.word	0x08010850
 800fa8c:	08010854 	.word	0x08010854

0800fa90 <__retarget_lock_init_recursive>:
 800fa90:	4770      	bx	lr

0800fa92 <__retarget_lock_acquire_recursive>:
 800fa92:	4770      	bx	lr

0800fa94 <__retarget_lock_release_recursive>:
 800fa94:	4770      	bx	lr

0800fa96 <memcpy>:
 800fa96:	440a      	add	r2, r1
 800fa98:	4291      	cmp	r1, r2
 800fa9a:	f100 33ff 	add.w	r3, r0, #4294967295
 800fa9e:	d100      	bne.n	800faa2 <memcpy+0xc>
 800faa0:	4770      	bx	lr
 800faa2:	b510      	push	{r4, lr}
 800faa4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800faa8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800faac:	4291      	cmp	r1, r2
 800faae:	d1f9      	bne.n	800faa4 <memcpy+0xe>
 800fab0:	bd10      	pop	{r4, pc}
	...

0800fab4 <__assert_func>:
 800fab4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fab6:	4614      	mov	r4, r2
 800fab8:	461a      	mov	r2, r3
 800faba:	4b09      	ldr	r3, [pc, #36]	@ (800fae0 <__assert_func+0x2c>)
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	4605      	mov	r5, r0
 800fac0:	68d8      	ldr	r0, [r3, #12]
 800fac2:	b14c      	cbz	r4, 800fad8 <__assert_func+0x24>
 800fac4:	4b07      	ldr	r3, [pc, #28]	@ (800fae4 <__assert_func+0x30>)
 800fac6:	9100      	str	r1, [sp, #0]
 800fac8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800facc:	4906      	ldr	r1, [pc, #24]	@ (800fae8 <__assert_func+0x34>)
 800face:	462b      	mov	r3, r5
 800fad0:	f000 fc88 	bl	80103e4 <fiprintf>
 800fad4:	f000 fd2c 	bl	8010530 <abort>
 800fad8:	4b04      	ldr	r3, [pc, #16]	@ (800faec <__assert_func+0x38>)
 800fada:	461c      	mov	r4, r3
 800fadc:	e7f3      	b.n	800fac6 <__assert_func+0x12>
 800fade:	bf00      	nop
 800fae0:	24000038 	.word	0x24000038
 800fae4:	080107d6 	.word	0x080107d6
 800fae8:	080107e3 	.word	0x080107e3
 800faec:	08010811 	.word	0x08010811

0800faf0 <_free_r>:
 800faf0:	b538      	push	{r3, r4, r5, lr}
 800faf2:	4605      	mov	r5, r0
 800faf4:	2900      	cmp	r1, #0
 800faf6:	d041      	beq.n	800fb7c <_free_r+0x8c>
 800faf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fafc:	1f0c      	subs	r4, r1, #4
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	bfb8      	it	lt
 800fb02:	18e4      	addlt	r4, r4, r3
 800fb04:	f000 f8e8 	bl	800fcd8 <__malloc_lock>
 800fb08:	4a1d      	ldr	r2, [pc, #116]	@ (800fb80 <_free_r+0x90>)
 800fb0a:	6813      	ldr	r3, [r2, #0]
 800fb0c:	b933      	cbnz	r3, 800fb1c <_free_r+0x2c>
 800fb0e:	6063      	str	r3, [r4, #4]
 800fb10:	6014      	str	r4, [r2, #0]
 800fb12:	4628      	mov	r0, r5
 800fb14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fb18:	f000 b8e4 	b.w	800fce4 <__malloc_unlock>
 800fb1c:	42a3      	cmp	r3, r4
 800fb1e:	d908      	bls.n	800fb32 <_free_r+0x42>
 800fb20:	6820      	ldr	r0, [r4, #0]
 800fb22:	1821      	adds	r1, r4, r0
 800fb24:	428b      	cmp	r3, r1
 800fb26:	bf01      	itttt	eq
 800fb28:	6819      	ldreq	r1, [r3, #0]
 800fb2a:	685b      	ldreq	r3, [r3, #4]
 800fb2c:	1809      	addeq	r1, r1, r0
 800fb2e:	6021      	streq	r1, [r4, #0]
 800fb30:	e7ed      	b.n	800fb0e <_free_r+0x1e>
 800fb32:	461a      	mov	r2, r3
 800fb34:	685b      	ldr	r3, [r3, #4]
 800fb36:	b10b      	cbz	r3, 800fb3c <_free_r+0x4c>
 800fb38:	42a3      	cmp	r3, r4
 800fb3a:	d9fa      	bls.n	800fb32 <_free_r+0x42>
 800fb3c:	6811      	ldr	r1, [r2, #0]
 800fb3e:	1850      	adds	r0, r2, r1
 800fb40:	42a0      	cmp	r0, r4
 800fb42:	d10b      	bne.n	800fb5c <_free_r+0x6c>
 800fb44:	6820      	ldr	r0, [r4, #0]
 800fb46:	4401      	add	r1, r0
 800fb48:	1850      	adds	r0, r2, r1
 800fb4a:	4283      	cmp	r3, r0
 800fb4c:	6011      	str	r1, [r2, #0]
 800fb4e:	d1e0      	bne.n	800fb12 <_free_r+0x22>
 800fb50:	6818      	ldr	r0, [r3, #0]
 800fb52:	685b      	ldr	r3, [r3, #4]
 800fb54:	6053      	str	r3, [r2, #4]
 800fb56:	4408      	add	r0, r1
 800fb58:	6010      	str	r0, [r2, #0]
 800fb5a:	e7da      	b.n	800fb12 <_free_r+0x22>
 800fb5c:	d902      	bls.n	800fb64 <_free_r+0x74>
 800fb5e:	230c      	movs	r3, #12
 800fb60:	602b      	str	r3, [r5, #0]
 800fb62:	e7d6      	b.n	800fb12 <_free_r+0x22>
 800fb64:	6820      	ldr	r0, [r4, #0]
 800fb66:	1821      	adds	r1, r4, r0
 800fb68:	428b      	cmp	r3, r1
 800fb6a:	bf04      	itt	eq
 800fb6c:	6819      	ldreq	r1, [r3, #0]
 800fb6e:	685b      	ldreq	r3, [r3, #4]
 800fb70:	6063      	str	r3, [r4, #4]
 800fb72:	bf04      	itt	eq
 800fb74:	1809      	addeq	r1, r1, r0
 800fb76:	6021      	streq	r1, [r4, #0]
 800fb78:	6054      	str	r4, [r2, #4]
 800fb7a:	e7ca      	b.n	800fb12 <_free_r+0x22>
 800fb7c:	bd38      	pop	{r3, r4, r5, pc}
 800fb7e:	bf00      	nop
 800fb80:	2400069c 	.word	0x2400069c

0800fb84 <malloc>:
 800fb84:	4b02      	ldr	r3, [pc, #8]	@ (800fb90 <malloc+0xc>)
 800fb86:	4601      	mov	r1, r0
 800fb88:	6818      	ldr	r0, [r3, #0]
 800fb8a:	f000 b825 	b.w	800fbd8 <_malloc_r>
 800fb8e:	bf00      	nop
 800fb90:	24000038 	.word	0x24000038

0800fb94 <sbrk_aligned>:
 800fb94:	b570      	push	{r4, r5, r6, lr}
 800fb96:	4e0f      	ldr	r6, [pc, #60]	@ (800fbd4 <sbrk_aligned+0x40>)
 800fb98:	460c      	mov	r4, r1
 800fb9a:	6831      	ldr	r1, [r6, #0]
 800fb9c:	4605      	mov	r5, r0
 800fb9e:	b911      	cbnz	r1, 800fba6 <sbrk_aligned+0x12>
 800fba0:	f000 fcb6 	bl	8010510 <_sbrk_r>
 800fba4:	6030      	str	r0, [r6, #0]
 800fba6:	4621      	mov	r1, r4
 800fba8:	4628      	mov	r0, r5
 800fbaa:	f000 fcb1 	bl	8010510 <_sbrk_r>
 800fbae:	1c43      	adds	r3, r0, #1
 800fbb0:	d103      	bne.n	800fbba <sbrk_aligned+0x26>
 800fbb2:	f04f 34ff 	mov.w	r4, #4294967295
 800fbb6:	4620      	mov	r0, r4
 800fbb8:	bd70      	pop	{r4, r5, r6, pc}
 800fbba:	1cc4      	adds	r4, r0, #3
 800fbbc:	f024 0403 	bic.w	r4, r4, #3
 800fbc0:	42a0      	cmp	r0, r4
 800fbc2:	d0f8      	beq.n	800fbb6 <sbrk_aligned+0x22>
 800fbc4:	1a21      	subs	r1, r4, r0
 800fbc6:	4628      	mov	r0, r5
 800fbc8:	f000 fca2 	bl	8010510 <_sbrk_r>
 800fbcc:	3001      	adds	r0, #1
 800fbce:	d1f2      	bne.n	800fbb6 <sbrk_aligned+0x22>
 800fbd0:	e7ef      	b.n	800fbb2 <sbrk_aligned+0x1e>
 800fbd2:	bf00      	nop
 800fbd4:	24000698 	.word	0x24000698

0800fbd8 <_malloc_r>:
 800fbd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fbdc:	1ccd      	adds	r5, r1, #3
 800fbde:	f025 0503 	bic.w	r5, r5, #3
 800fbe2:	3508      	adds	r5, #8
 800fbe4:	2d0c      	cmp	r5, #12
 800fbe6:	bf38      	it	cc
 800fbe8:	250c      	movcc	r5, #12
 800fbea:	2d00      	cmp	r5, #0
 800fbec:	4606      	mov	r6, r0
 800fbee:	db01      	blt.n	800fbf4 <_malloc_r+0x1c>
 800fbf0:	42a9      	cmp	r1, r5
 800fbf2:	d904      	bls.n	800fbfe <_malloc_r+0x26>
 800fbf4:	230c      	movs	r3, #12
 800fbf6:	6033      	str	r3, [r6, #0]
 800fbf8:	2000      	movs	r0, #0
 800fbfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fbfe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fcd4 <_malloc_r+0xfc>
 800fc02:	f000 f869 	bl	800fcd8 <__malloc_lock>
 800fc06:	f8d8 3000 	ldr.w	r3, [r8]
 800fc0a:	461c      	mov	r4, r3
 800fc0c:	bb44      	cbnz	r4, 800fc60 <_malloc_r+0x88>
 800fc0e:	4629      	mov	r1, r5
 800fc10:	4630      	mov	r0, r6
 800fc12:	f7ff ffbf 	bl	800fb94 <sbrk_aligned>
 800fc16:	1c43      	adds	r3, r0, #1
 800fc18:	4604      	mov	r4, r0
 800fc1a:	d158      	bne.n	800fcce <_malloc_r+0xf6>
 800fc1c:	f8d8 4000 	ldr.w	r4, [r8]
 800fc20:	4627      	mov	r7, r4
 800fc22:	2f00      	cmp	r7, #0
 800fc24:	d143      	bne.n	800fcae <_malloc_r+0xd6>
 800fc26:	2c00      	cmp	r4, #0
 800fc28:	d04b      	beq.n	800fcc2 <_malloc_r+0xea>
 800fc2a:	6823      	ldr	r3, [r4, #0]
 800fc2c:	4639      	mov	r1, r7
 800fc2e:	4630      	mov	r0, r6
 800fc30:	eb04 0903 	add.w	r9, r4, r3
 800fc34:	f000 fc6c 	bl	8010510 <_sbrk_r>
 800fc38:	4581      	cmp	r9, r0
 800fc3a:	d142      	bne.n	800fcc2 <_malloc_r+0xea>
 800fc3c:	6821      	ldr	r1, [r4, #0]
 800fc3e:	1a6d      	subs	r5, r5, r1
 800fc40:	4629      	mov	r1, r5
 800fc42:	4630      	mov	r0, r6
 800fc44:	f7ff ffa6 	bl	800fb94 <sbrk_aligned>
 800fc48:	3001      	adds	r0, #1
 800fc4a:	d03a      	beq.n	800fcc2 <_malloc_r+0xea>
 800fc4c:	6823      	ldr	r3, [r4, #0]
 800fc4e:	442b      	add	r3, r5
 800fc50:	6023      	str	r3, [r4, #0]
 800fc52:	f8d8 3000 	ldr.w	r3, [r8]
 800fc56:	685a      	ldr	r2, [r3, #4]
 800fc58:	bb62      	cbnz	r2, 800fcb4 <_malloc_r+0xdc>
 800fc5a:	f8c8 7000 	str.w	r7, [r8]
 800fc5e:	e00f      	b.n	800fc80 <_malloc_r+0xa8>
 800fc60:	6822      	ldr	r2, [r4, #0]
 800fc62:	1b52      	subs	r2, r2, r5
 800fc64:	d420      	bmi.n	800fca8 <_malloc_r+0xd0>
 800fc66:	2a0b      	cmp	r2, #11
 800fc68:	d917      	bls.n	800fc9a <_malloc_r+0xc2>
 800fc6a:	1961      	adds	r1, r4, r5
 800fc6c:	42a3      	cmp	r3, r4
 800fc6e:	6025      	str	r5, [r4, #0]
 800fc70:	bf18      	it	ne
 800fc72:	6059      	strne	r1, [r3, #4]
 800fc74:	6863      	ldr	r3, [r4, #4]
 800fc76:	bf08      	it	eq
 800fc78:	f8c8 1000 	streq.w	r1, [r8]
 800fc7c:	5162      	str	r2, [r4, r5]
 800fc7e:	604b      	str	r3, [r1, #4]
 800fc80:	4630      	mov	r0, r6
 800fc82:	f000 f82f 	bl	800fce4 <__malloc_unlock>
 800fc86:	f104 000b 	add.w	r0, r4, #11
 800fc8a:	1d23      	adds	r3, r4, #4
 800fc8c:	f020 0007 	bic.w	r0, r0, #7
 800fc90:	1ac2      	subs	r2, r0, r3
 800fc92:	bf1c      	itt	ne
 800fc94:	1a1b      	subne	r3, r3, r0
 800fc96:	50a3      	strne	r3, [r4, r2]
 800fc98:	e7af      	b.n	800fbfa <_malloc_r+0x22>
 800fc9a:	6862      	ldr	r2, [r4, #4]
 800fc9c:	42a3      	cmp	r3, r4
 800fc9e:	bf0c      	ite	eq
 800fca0:	f8c8 2000 	streq.w	r2, [r8]
 800fca4:	605a      	strne	r2, [r3, #4]
 800fca6:	e7eb      	b.n	800fc80 <_malloc_r+0xa8>
 800fca8:	4623      	mov	r3, r4
 800fcaa:	6864      	ldr	r4, [r4, #4]
 800fcac:	e7ae      	b.n	800fc0c <_malloc_r+0x34>
 800fcae:	463c      	mov	r4, r7
 800fcb0:	687f      	ldr	r7, [r7, #4]
 800fcb2:	e7b6      	b.n	800fc22 <_malloc_r+0x4a>
 800fcb4:	461a      	mov	r2, r3
 800fcb6:	685b      	ldr	r3, [r3, #4]
 800fcb8:	42a3      	cmp	r3, r4
 800fcba:	d1fb      	bne.n	800fcb4 <_malloc_r+0xdc>
 800fcbc:	2300      	movs	r3, #0
 800fcbe:	6053      	str	r3, [r2, #4]
 800fcc0:	e7de      	b.n	800fc80 <_malloc_r+0xa8>
 800fcc2:	230c      	movs	r3, #12
 800fcc4:	6033      	str	r3, [r6, #0]
 800fcc6:	4630      	mov	r0, r6
 800fcc8:	f000 f80c 	bl	800fce4 <__malloc_unlock>
 800fccc:	e794      	b.n	800fbf8 <_malloc_r+0x20>
 800fcce:	6005      	str	r5, [r0, #0]
 800fcd0:	e7d6      	b.n	800fc80 <_malloc_r+0xa8>
 800fcd2:	bf00      	nop
 800fcd4:	2400069c 	.word	0x2400069c

0800fcd8 <__malloc_lock>:
 800fcd8:	4801      	ldr	r0, [pc, #4]	@ (800fce0 <__malloc_lock+0x8>)
 800fcda:	f7ff beda 	b.w	800fa92 <__retarget_lock_acquire_recursive>
 800fcde:	bf00      	nop
 800fce0:	24000694 	.word	0x24000694

0800fce4 <__malloc_unlock>:
 800fce4:	4801      	ldr	r0, [pc, #4]	@ (800fcec <__malloc_unlock+0x8>)
 800fce6:	f7ff bed5 	b.w	800fa94 <__retarget_lock_release_recursive>
 800fcea:	bf00      	nop
 800fcec:	24000694 	.word	0x24000694

0800fcf0 <__sfputc_r>:
 800fcf0:	6893      	ldr	r3, [r2, #8]
 800fcf2:	3b01      	subs	r3, #1
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	b410      	push	{r4}
 800fcf8:	6093      	str	r3, [r2, #8]
 800fcfa:	da08      	bge.n	800fd0e <__sfputc_r+0x1e>
 800fcfc:	6994      	ldr	r4, [r2, #24]
 800fcfe:	42a3      	cmp	r3, r4
 800fd00:	db01      	blt.n	800fd06 <__sfputc_r+0x16>
 800fd02:	290a      	cmp	r1, #10
 800fd04:	d103      	bne.n	800fd0e <__sfputc_r+0x1e>
 800fd06:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fd0a:	f7ff bd58 	b.w	800f7be <__swbuf_r>
 800fd0e:	6813      	ldr	r3, [r2, #0]
 800fd10:	1c58      	adds	r0, r3, #1
 800fd12:	6010      	str	r0, [r2, #0]
 800fd14:	7019      	strb	r1, [r3, #0]
 800fd16:	4608      	mov	r0, r1
 800fd18:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fd1c:	4770      	bx	lr

0800fd1e <__sfputs_r>:
 800fd1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd20:	4606      	mov	r6, r0
 800fd22:	460f      	mov	r7, r1
 800fd24:	4614      	mov	r4, r2
 800fd26:	18d5      	adds	r5, r2, r3
 800fd28:	42ac      	cmp	r4, r5
 800fd2a:	d101      	bne.n	800fd30 <__sfputs_r+0x12>
 800fd2c:	2000      	movs	r0, #0
 800fd2e:	e007      	b.n	800fd40 <__sfputs_r+0x22>
 800fd30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd34:	463a      	mov	r2, r7
 800fd36:	4630      	mov	r0, r6
 800fd38:	f7ff ffda 	bl	800fcf0 <__sfputc_r>
 800fd3c:	1c43      	adds	r3, r0, #1
 800fd3e:	d1f3      	bne.n	800fd28 <__sfputs_r+0xa>
 800fd40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fd44 <_vfiprintf_r>:
 800fd44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd48:	460d      	mov	r5, r1
 800fd4a:	b09d      	sub	sp, #116	@ 0x74
 800fd4c:	4614      	mov	r4, r2
 800fd4e:	4698      	mov	r8, r3
 800fd50:	4606      	mov	r6, r0
 800fd52:	b118      	cbz	r0, 800fd5c <_vfiprintf_r+0x18>
 800fd54:	6a03      	ldr	r3, [r0, #32]
 800fd56:	b90b      	cbnz	r3, 800fd5c <_vfiprintf_r+0x18>
 800fd58:	f7ff fca6 	bl	800f6a8 <__sinit>
 800fd5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fd5e:	07d9      	lsls	r1, r3, #31
 800fd60:	d405      	bmi.n	800fd6e <_vfiprintf_r+0x2a>
 800fd62:	89ab      	ldrh	r3, [r5, #12]
 800fd64:	059a      	lsls	r2, r3, #22
 800fd66:	d402      	bmi.n	800fd6e <_vfiprintf_r+0x2a>
 800fd68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fd6a:	f7ff fe92 	bl	800fa92 <__retarget_lock_acquire_recursive>
 800fd6e:	89ab      	ldrh	r3, [r5, #12]
 800fd70:	071b      	lsls	r3, r3, #28
 800fd72:	d501      	bpl.n	800fd78 <_vfiprintf_r+0x34>
 800fd74:	692b      	ldr	r3, [r5, #16]
 800fd76:	b99b      	cbnz	r3, 800fda0 <_vfiprintf_r+0x5c>
 800fd78:	4629      	mov	r1, r5
 800fd7a:	4630      	mov	r0, r6
 800fd7c:	f7ff fd5e 	bl	800f83c <__swsetup_r>
 800fd80:	b170      	cbz	r0, 800fda0 <_vfiprintf_r+0x5c>
 800fd82:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fd84:	07dc      	lsls	r4, r3, #31
 800fd86:	d504      	bpl.n	800fd92 <_vfiprintf_r+0x4e>
 800fd88:	f04f 30ff 	mov.w	r0, #4294967295
 800fd8c:	b01d      	add	sp, #116	@ 0x74
 800fd8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd92:	89ab      	ldrh	r3, [r5, #12]
 800fd94:	0598      	lsls	r0, r3, #22
 800fd96:	d4f7      	bmi.n	800fd88 <_vfiprintf_r+0x44>
 800fd98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fd9a:	f7ff fe7b 	bl	800fa94 <__retarget_lock_release_recursive>
 800fd9e:	e7f3      	b.n	800fd88 <_vfiprintf_r+0x44>
 800fda0:	2300      	movs	r3, #0
 800fda2:	9309      	str	r3, [sp, #36]	@ 0x24
 800fda4:	2320      	movs	r3, #32
 800fda6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fdaa:	f8cd 800c 	str.w	r8, [sp, #12]
 800fdae:	2330      	movs	r3, #48	@ 0x30
 800fdb0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ff60 <_vfiprintf_r+0x21c>
 800fdb4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fdb8:	f04f 0901 	mov.w	r9, #1
 800fdbc:	4623      	mov	r3, r4
 800fdbe:	469a      	mov	sl, r3
 800fdc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fdc4:	b10a      	cbz	r2, 800fdca <_vfiprintf_r+0x86>
 800fdc6:	2a25      	cmp	r2, #37	@ 0x25
 800fdc8:	d1f9      	bne.n	800fdbe <_vfiprintf_r+0x7a>
 800fdca:	ebba 0b04 	subs.w	fp, sl, r4
 800fdce:	d00b      	beq.n	800fde8 <_vfiprintf_r+0xa4>
 800fdd0:	465b      	mov	r3, fp
 800fdd2:	4622      	mov	r2, r4
 800fdd4:	4629      	mov	r1, r5
 800fdd6:	4630      	mov	r0, r6
 800fdd8:	f7ff ffa1 	bl	800fd1e <__sfputs_r>
 800fddc:	3001      	adds	r0, #1
 800fdde:	f000 80a7 	beq.w	800ff30 <_vfiprintf_r+0x1ec>
 800fde2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fde4:	445a      	add	r2, fp
 800fde6:	9209      	str	r2, [sp, #36]	@ 0x24
 800fde8:	f89a 3000 	ldrb.w	r3, [sl]
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	f000 809f 	beq.w	800ff30 <_vfiprintf_r+0x1ec>
 800fdf2:	2300      	movs	r3, #0
 800fdf4:	f04f 32ff 	mov.w	r2, #4294967295
 800fdf8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fdfc:	f10a 0a01 	add.w	sl, sl, #1
 800fe00:	9304      	str	r3, [sp, #16]
 800fe02:	9307      	str	r3, [sp, #28]
 800fe04:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fe08:	931a      	str	r3, [sp, #104]	@ 0x68
 800fe0a:	4654      	mov	r4, sl
 800fe0c:	2205      	movs	r2, #5
 800fe0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe12:	4853      	ldr	r0, [pc, #332]	@ (800ff60 <_vfiprintf_r+0x21c>)
 800fe14:	f7f0 fa7c 	bl	8000310 <memchr>
 800fe18:	9a04      	ldr	r2, [sp, #16]
 800fe1a:	b9d8      	cbnz	r0, 800fe54 <_vfiprintf_r+0x110>
 800fe1c:	06d1      	lsls	r1, r2, #27
 800fe1e:	bf44      	itt	mi
 800fe20:	2320      	movmi	r3, #32
 800fe22:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fe26:	0713      	lsls	r3, r2, #28
 800fe28:	bf44      	itt	mi
 800fe2a:	232b      	movmi	r3, #43	@ 0x2b
 800fe2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fe30:	f89a 3000 	ldrb.w	r3, [sl]
 800fe34:	2b2a      	cmp	r3, #42	@ 0x2a
 800fe36:	d015      	beq.n	800fe64 <_vfiprintf_r+0x120>
 800fe38:	9a07      	ldr	r2, [sp, #28]
 800fe3a:	4654      	mov	r4, sl
 800fe3c:	2000      	movs	r0, #0
 800fe3e:	f04f 0c0a 	mov.w	ip, #10
 800fe42:	4621      	mov	r1, r4
 800fe44:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fe48:	3b30      	subs	r3, #48	@ 0x30
 800fe4a:	2b09      	cmp	r3, #9
 800fe4c:	d94b      	bls.n	800fee6 <_vfiprintf_r+0x1a2>
 800fe4e:	b1b0      	cbz	r0, 800fe7e <_vfiprintf_r+0x13a>
 800fe50:	9207      	str	r2, [sp, #28]
 800fe52:	e014      	b.n	800fe7e <_vfiprintf_r+0x13a>
 800fe54:	eba0 0308 	sub.w	r3, r0, r8
 800fe58:	fa09 f303 	lsl.w	r3, r9, r3
 800fe5c:	4313      	orrs	r3, r2
 800fe5e:	9304      	str	r3, [sp, #16]
 800fe60:	46a2      	mov	sl, r4
 800fe62:	e7d2      	b.n	800fe0a <_vfiprintf_r+0xc6>
 800fe64:	9b03      	ldr	r3, [sp, #12]
 800fe66:	1d19      	adds	r1, r3, #4
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	9103      	str	r1, [sp, #12]
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	bfbb      	ittet	lt
 800fe70:	425b      	neglt	r3, r3
 800fe72:	f042 0202 	orrlt.w	r2, r2, #2
 800fe76:	9307      	strge	r3, [sp, #28]
 800fe78:	9307      	strlt	r3, [sp, #28]
 800fe7a:	bfb8      	it	lt
 800fe7c:	9204      	strlt	r2, [sp, #16]
 800fe7e:	7823      	ldrb	r3, [r4, #0]
 800fe80:	2b2e      	cmp	r3, #46	@ 0x2e
 800fe82:	d10a      	bne.n	800fe9a <_vfiprintf_r+0x156>
 800fe84:	7863      	ldrb	r3, [r4, #1]
 800fe86:	2b2a      	cmp	r3, #42	@ 0x2a
 800fe88:	d132      	bne.n	800fef0 <_vfiprintf_r+0x1ac>
 800fe8a:	9b03      	ldr	r3, [sp, #12]
 800fe8c:	1d1a      	adds	r2, r3, #4
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	9203      	str	r2, [sp, #12]
 800fe92:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fe96:	3402      	adds	r4, #2
 800fe98:	9305      	str	r3, [sp, #20]
 800fe9a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ff70 <_vfiprintf_r+0x22c>
 800fe9e:	7821      	ldrb	r1, [r4, #0]
 800fea0:	2203      	movs	r2, #3
 800fea2:	4650      	mov	r0, sl
 800fea4:	f7f0 fa34 	bl	8000310 <memchr>
 800fea8:	b138      	cbz	r0, 800feba <_vfiprintf_r+0x176>
 800feaa:	9b04      	ldr	r3, [sp, #16]
 800feac:	eba0 000a 	sub.w	r0, r0, sl
 800feb0:	2240      	movs	r2, #64	@ 0x40
 800feb2:	4082      	lsls	r2, r0
 800feb4:	4313      	orrs	r3, r2
 800feb6:	3401      	adds	r4, #1
 800feb8:	9304      	str	r3, [sp, #16]
 800feba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800febe:	4829      	ldr	r0, [pc, #164]	@ (800ff64 <_vfiprintf_r+0x220>)
 800fec0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fec4:	2206      	movs	r2, #6
 800fec6:	f7f0 fa23 	bl	8000310 <memchr>
 800feca:	2800      	cmp	r0, #0
 800fecc:	d03f      	beq.n	800ff4e <_vfiprintf_r+0x20a>
 800fece:	4b26      	ldr	r3, [pc, #152]	@ (800ff68 <_vfiprintf_r+0x224>)
 800fed0:	bb1b      	cbnz	r3, 800ff1a <_vfiprintf_r+0x1d6>
 800fed2:	9b03      	ldr	r3, [sp, #12]
 800fed4:	3307      	adds	r3, #7
 800fed6:	f023 0307 	bic.w	r3, r3, #7
 800feda:	3308      	adds	r3, #8
 800fedc:	9303      	str	r3, [sp, #12]
 800fede:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fee0:	443b      	add	r3, r7
 800fee2:	9309      	str	r3, [sp, #36]	@ 0x24
 800fee4:	e76a      	b.n	800fdbc <_vfiprintf_r+0x78>
 800fee6:	fb0c 3202 	mla	r2, ip, r2, r3
 800feea:	460c      	mov	r4, r1
 800feec:	2001      	movs	r0, #1
 800feee:	e7a8      	b.n	800fe42 <_vfiprintf_r+0xfe>
 800fef0:	2300      	movs	r3, #0
 800fef2:	3401      	adds	r4, #1
 800fef4:	9305      	str	r3, [sp, #20]
 800fef6:	4619      	mov	r1, r3
 800fef8:	f04f 0c0a 	mov.w	ip, #10
 800fefc:	4620      	mov	r0, r4
 800fefe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ff02:	3a30      	subs	r2, #48	@ 0x30
 800ff04:	2a09      	cmp	r2, #9
 800ff06:	d903      	bls.n	800ff10 <_vfiprintf_r+0x1cc>
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d0c6      	beq.n	800fe9a <_vfiprintf_r+0x156>
 800ff0c:	9105      	str	r1, [sp, #20]
 800ff0e:	e7c4      	b.n	800fe9a <_vfiprintf_r+0x156>
 800ff10:	fb0c 2101 	mla	r1, ip, r1, r2
 800ff14:	4604      	mov	r4, r0
 800ff16:	2301      	movs	r3, #1
 800ff18:	e7f0      	b.n	800fefc <_vfiprintf_r+0x1b8>
 800ff1a:	ab03      	add	r3, sp, #12
 800ff1c:	9300      	str	r3, [sp, #0]
 800ff1e:	462a      	mov	r2, r5
 800ff20:	4b12      	ldr	r3, [pc, #72]	@ (800ff6c <_vfiprintf_r+0x228>)
 800ff22:	a904      	add	r1, sp, #16
 800ff24:	4630      	mov	r0, r6
 800ff26:	f3af 8000 	nop.w
 800ff2a:	4607      	mov	r7, r0
 800ff2c:	1c78      	adds	r0, r7, #1
 800ff2e:	d1d6      	bne.n	800fede <_vfiprintf_r+0x19a>
 800ff30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ff32:	07d9      	lsls	r1, r3, #31
 800ff34:	d405      	bmi.n	800ff42 <_vfiprintf_r+0x1fe>
 800ff36:	89ab      	ldrh	r3, [r5, #12]
 800ff38:	059a      	lsls	r2, r3, #22
 800ff3a:	d402      	bmi.n	800ff42 <_vfiprintf_r+0x1fe>
 800ff3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ff3e:	f7ff fda9 	bl	800fa94 <__retarget_lock_release_recursive>
 800ff42:	89ab      	ldrh	r3, [r5, #12]
 800ff44:	065b      	lsls	r3, r3, #25
 800ff46:	f53f af1f 	bmi.w	800fd88 <_vfiprintf_r+0x44>
 800ff4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ff4c:	e71e      	b.n	800fd8c <_vfiprintf_r+0x48>
 800ff4e:	ab03      	add	r3, sp, #12
 800ff50:	9300      	str	r3, [sp, #0]
 800ff52:	462a      	mov	r2, r5
 800ff54:	4b05      	ldr	r3, [pc, #20]	@ (800ff6c <_vfiprintf_r+0x228>)
 800ff56:	a904      	add	r1, sp, #16
 800ff58:	4630      	mov	r0, r6
 800ff5a:	f000 f879 	bl	8010050 <_printf_i>
 800ff5e:	e7e4      	b.n	800ff2a <_vfiprintf_r+0x1e6>
 800ff60:	08010812 	.word	0x08010812
 800ff64:	0801081c 	.word	0x0801081c
 800ff68:	00000000 	.word	0x00000000
 800ff6c:	0800fd1f 	.word	0x0800fd1f
 800ff70:	08010818 	.word	0x08010818

0800ff74 <_printf_common>:
 800ff74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff78:	4616      	mov	r6, r2
 800ff7a:	4698      	mov	r8, r3
 800ff7c:	688a      	ldr	r2, [r1, #8]
 800ff7e:	690b      	ldr	r3, [r1, #16]
 800ff80:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ff84:	4293      	cmp	r3, r2
 800ff86:	bfb8      	it	lt
 800ff88:	4613      	movlt	r3, r2
 800ff8a:	6033      	str	r3, [r6, #0]
 800ff8c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ff90:	4607      	mov	r7, r0
 800ff92:	460c      	mov	r4, r1
 800ff94:	b10a      	cbz	r2, 800ff9a <_printf_common+0x26>
 800ff96:	3301      	adds	r3, #1
 800ff98:	6033      	str	r3, [r6, #0]
 800ff9a:	6823      	ldr	r3, [r4, #0]
 800ff9c:	0699      	lsls	r1, r3, #26
 800ff9e:	bf42      	ittt	mi
 800ffa0:	6833      	ldrmi	r3, [r6, #0]
 800ffa2:	3302      	addmi	r3, #2
 800ffa4:	6033      	strmi	r3, [r6, #0]
 800ffa6:	6825      	ldr	r5, [r4, #0]
 800ffa8:	f015 0506 	ands.w	r5, r5, #6
 800ffac:	d106      	bne.n	800ffbc <_printf_common+0x48>
 800ffae:	f104 0a19 	add.w	sl, r4, #25
 800ffb2:	68e3      	ldr	r3, [r4, #12]
 800ffb4:	6832      	ldr	r2, [r6, #0]
 800ffb6:	1a9b      	subs	r3, r3, r2
 800ffb8:	42ab      	cmp	r3, r5
 800ffba:	dc26      	bgt.n	801000a <_printf_common+0x96>
 800ffbc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ffc0:	6822      	ldr	r2, [r4, #0]
 800ffc2:	3b00      	subs	r3, #0
 800ffc4:	bf18      	it	ne
 800ffc6:	2301      	movne	r3, #1
 800ffc8:	0692      	lsls	r2, r2, #26
 800ffca:	d42b      	bmi.n	8010024 <_printf_common+0xb0>
 800ffcc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ffd0:	4641      	mov	r1, r8
 800ffd2:	4638      	mov	r0, r7
 800ffd4:	47c8      	blx	r9
 800ffd6:	3001      	adds	r0, #1
 800ffd8:	d01e      	beq.n	8010018 <_printf_common+0xa4>
 800ffda:	6823      	ldr	r3, [r4, #0]
 800ffdc:	6922      	ldr	r2, [r4, #16]
 800ffde:	f003 0306 	and.w	r3, r3, #6
 800ffe2:	2b04      	cmp	r3, #4
 800ffe4:	bf02      	ittt	eq
 800ffe6:	68e5      	ldreq	r5, [r4, #12]
 800ffe8:	6833      	ldreq	r3, [r6, #0]
 800ffea:	1aed      	subeq	r5, r5, r3
 800ffec:	68a3      	ldr	r3, [r4, #8]
 800ffee:	bf0c      	ite	eq
 800fff0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fff4:	2500      	movne	r5, #0
 800fff6:	4293      	cmp	r3, r2
 800fff8:	bfc4      	itt	gt
 800fffa:	1a9b      	subgt	r3, r3, r2
 800fffc:	18ed      	addgt	r5, r5, r3
 800fffe:	2600      	movs	r6, #0
 8010000:	341a      	adds	r4, #26
 8010002:	42b5      	cmp	r5, r6
 8010004:	d11a      	bne.n	801003c <_printf_common+0xc8>
 8010006:	2000      	movs	r0, #0
 8010008:	e008      	b.n	801001c <_printf_common+0xa8>
 801000a:	2301      	movs	r3, #1
 801000c:	4652      	mov	r2, sl
 801000e:	4641      	mov	r1, r8
 8010010:	4638      	mov	r0, r7
 8010012:	47c8      	blx	r9
 8010014:	3001      	adds	r0, #1
 8010016:	d103      	bne.n	8010020 <_printf_common+0xac>
 8010018:	f04f 30ff 	mov.w	r0, #4294967295
 801001c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010020:	3501      	adds	r5, #1
 8010022:	e7c6      	b.n	800ffb2 <_printf_common+0x3e>
 8010024:	18e1      	adds	r1, r4, r3
 8010026:	1c5a      	adds	r2, r3, #1
 8010028:	2030      	movs	r0, #48	@ 0x30
 801002a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801002e:	4422      	add	r2, r4
 8010030:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010034:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010038:	3302      	adds	r3, #2
 801003a:	e7c7      	b.n	800ffcc <_printf_common+0x58>
 801003c:	2301      	movs	r3, #1
 801003e:	4622      	mov	r2, r4
 8010040:	4641      	mov	r1, r8
 8010042:	4638      	mov	r0, r7
 8010044:	47c8      	blx	r9
 8010046:	3001      	adds	r0, #1
 8010048:	d0e6      	beq.n	8010018 <_printf_common+0xa4>
 801004a:	3601      	adds	r6, #1
 801004c:	e7d9      	b.n	8010002 <_printf_common+0x8e>
	...

08010050 <_printf_i>:
 8010050:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010054:	7e0f      	ldrb	r7, [r1, #24]
 8010056:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010058:	2f78      	cmp	r7, #120	@ 0x78
 801005a:	4691      	mov	r9, r2
 801005c:	4680      	mov	r8, r0
 801005e:	460c      	mov	r4, r1
 8010060:	469a      	mov	sl, r3
 8010062:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010066:	d807      	bhi.n	8010078 <_printf_i+0x28>
 8010068:	2f62      	cmp	r7, #98	@ 0x62
 801006a:	d80a      	bhi.n	8010082 <_printf_i+0x32>
 801006c:	2f00      	cmp	r7, #0
 801006e:	f000 80d1 	beq.w	8010214 <_printf_i+0x1c4>
 8010072:	2f58      	cmp	r7, #88	@ 0x58
 8010074:	f000 80b8 	beq.w	80101e8 <_printf_i+0x198>
 8010078:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801007c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010080:	e03a      	b.n	80100f8 <_printf_i+0xa8>
 8010082:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010086:	2b15      	cmp	r3, #21
 8010088:	d8f6      	bhi.n	8010078 <_printf_i+0x28>
 801008a:	a101      	add	r1, pc, #4	@ (adr r1, 8010090 <_printf_i+0x40>)
 801008c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010090:	080100e9 	.word	0x080100e9
 8010094:	080100fd 	.word	0x080100fd
 8010098:	08010079 	.word	0x08010079
 801009c:	08010079 	.word	0x08010079
 80100a0:	08010079 	.word	0x08010079
 80100a4:	08010079 	.word	0x08010079
 80100a8:	080100fd 	.word	0x080100fd
 80100ac:	08010079 	.word	0x08010079
 80100b0:	08010079 	.word	0x08010079
 80100b4:	08010079 	.word	0x08010079
 80100b8:	08010079 	.word	0x08010079
 80100bc:	080101fb 	.word	0x080101fb
 80100c0:	08010127 	.word	0x08010127
 80100c4:	080101b5 	.word	0x080101b5
 80100c8:	08010079 	.word	0x08010079
 80100cc:	08010079 	.word	0x08010079
 80100d0:	0801021d 	.word	0x0801021d
 80100d4:	08010079 	.word	0x08010079
 80100d8:	08010127 	.word	0x08010127
 80100dc:	08010079 	.word	0x08010079
 80100e0:	08010079 	.word	0x08010079
 80100e4:	080101bd 	.word	0x080101bd
 80100e8:	6833      	ldr	r3, [r6, #0]
 80100ea:	1d1a      	adds	r2, r3, #4
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	6032      	str	r2, [r6, #0]
 80100f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80100f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80100f8:	2301      	movs	r3, #1
 80100fa:	e09c      	b.n	8010236 <_printf_i+0x1e6>
 80100fc:	6833      	ldr	r3, [r6, #0]
 80100fe:	6820      	ldr	r0, [r4, #0]
 8010100:	1d19      	adds	r1, r3, #4
 8010102:	6031      	str	r1, [r6, #0]
 8010104:	0606      	lsls	r6, r0, #24
 8010106:	d501      	bpl.n	801010c <_printf_i+0xbc>
 8010108:	681d      	ldr	r5, [r3, #0]
 801010a:	e003      	b.n	8010114 <_printf_i+0xc4>
 801010c:	0645      	lsls	r5, r0, #25
 801010e:	d5fb      	bpl.n	8010108 <_printf_i+0xb8>
 8010110:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010114:	2d00      	cmp	r5, #0
 8010116:	da03      	bge.n	8010120 <_printf_i+0xd0>
 8010118:	232d      	movs	r3, #45	@ 0x2d
 801011a:	426d      	negs	r5, r5
 801011c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010120:	4858      	ldr	r0, [pc, #352]	@ (8010284 <_printf_i+0x234>)
 8010122:	230a      	movs	r3, #10
 8010124:	e011      	b.n	801014a <_printf_i+0xfa>
 8010126:	6821      	ldr	r1, [r4, #0]
 8010128:	6833      	ldr	r3, [r6, #0]
 801012a:	0608      	lsls	r0, r1, #24
 801012c:	f853 5b04 	ldr.w	r5, [r3], #4
 8010130:	d402      	bmi.n	8010138 <_printf_i+0xe8>
 8010132:	0649      	lsls	r1, r1, #25
 8010134:	bf48      	it	mi
 8010136:	b2ad      	uxthmi	r5, r5
 8010138:	2f6f      	cmp	r7, #111	@ 0x6f
 801013a:	4852      	ldr	r0, [pc, #328]	@ (8010284 <_printf_i+0x234>)
 801013c:	6033      	str	r3, [r6, #0]
 801013e:	bf14      	ite	ne
 8010140:	230a      	movne	r3, #10
 8010142:	2308      	moveq	r3, #8
 8010144:	2100      	movs	r1, #0
 8010146:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801014a:	6866      	ldr	r6, [r4, #4]
 801014c:	60a6      	str	r6, [r4, #8]
 801014e:	2e00      	cmp	r6, #0
 8010150:	db05      	blt.n	801015e <_printf_i+0x10e>
 8010152:	6821      	ldr	r1, [r4, #0]
 8010154:	432e      	orrs	r6, r5
 8010156:	f021 0104 	bic.w	r1, r1, #4
 801015a:	6021      	str	r1, [r4, #0]
 801015c:	d04b      	beq.n	80101f6 <_printf_i+0x1a6>
 801015e:	4616      	mov	r6, r2
 8010160:	fbb5 f1f3 	udiv	r1, r5, r3
 8010164:	fb03 5711 	mls	r7, r3, r1, r5
 8010168:	5dc7      	ldrb	r7, [r0, r7]
 801016a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801016e:	462f      	mov	r7, r5
 8010170:	42bb      	cmp	r3, r7
 8010172:	460d      	mov	r5, r1
 8010174:	d9f4      	bls.n	8010160 <_printf_i+0x110>
 8010176:	2b08      	cmp	r3, #8
 8010178:	d10b      	bne.n	8010192 <_printf_i+0x142>
 801017a:	6823      	ldr	r3, [r4, #0]
 801017c:	07df      	lsls	r7, r3, #31
 801017e:	d508      	bpl.n	8010192 <_printf_i+0x142>
 8010180:	6923      	ldr	r3, [r4, #16]
 8010182:	6861      	ldr	r1, [r4, #4]
 8010184:	4299      	cmp	r1, r3
 8010186:	bfde      	ittt	le
 8010188:	2330      	movle	r3, #48	@ 0x30
 801018a:	f806 3c01 	strble.w	r3, [r6, #-1]
 801018e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010192:	1b92      	subs	r2, r2, r6
 8010194:	6122      	str	r2, [r4, #16]
 8010196:	f8cd a000 	str.w	sl, [sp]
 801019a:	464b      	mov	r3, r9
 801019c:	aa03      	add	r2, sp, #12
 801019e:	4621      	mov	r1, r4
 80101a0:	4640      	mov	r0, r8
 80101a2:	f7ff fee7 	bl	800ff74 <_printf_common>
 80101a6:	3001      	adds	r0, #1
 80101a8:	d14a      	bne.n	8010240 <_printf_i+0x1f0>
 80101aa:	f04f 30ff 	mov.w	r0, #4294967295
 80101ae:	b004      	add	sp, #16
 80101b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101b4:	6823      	ldr	r3, [r4, #0]
 80101b6:	f043 0320 	orr.w	r3, r3, #32
 80101ba:	6023      	str	r3, [r4, #0]
 80101bc:	4832      	ldr	r0, [pc, #200]	@ (8010288 <_printf_i+0x238>)
 80101be:	2778      	movs	r7, #120	@ 0x78
 80101c0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80101c4:	6823      	ldr	r3, [r4, #0]
 80101c6:	6831      	ldr	r1, [r6, #0]
 80101c8:	061f      	lsls	r7, r3, #24
 80101ca:	f851 5b04 	ldr.w	r5, [r1], #4
 80101ce:	d402      	bmi.n	80101d6 <_printf_i+0x186>
 80101d0:	065f      	lsls	r7, r3, #25
 80101d2:	bf48      	it	mi
 80101d4:	b2ad      	uxthmi	r5, r5
 80101d6:	6031      	str	r1, [r6, #0]
 80101d8:	07d9      	lsls	r1, r3, #31
 80101da:	bf44      	itt	mi
 80101dc:	f043 0320 	orrmi.w	r3, r3, #32
 80101e0:	6023      	strmi	r3, [r4, #0]
 80101e2:	b11d      	cbz	r5, 80101ec <_printf_i+0x19c>
 80101e4:	2310      	movs	r3, #16
 80101e6:	e7ad      	b.n	8010144 <_printf_i+0xf4>
 80101e8:	4826      	ldr	r0, [pc, #152]	@ (8010284 <_printf_i+0x234>)
 80101ea:	e7e9      	b.n	80101c0 <_printf_i+0x170>
 80101ec:	6823      	ldr	r3, [r4, #0]
 80101ee:	f023 0320 	bic.w	r3, r3, #32
 80101f2:	6023      	str	r3, [r4, #0]
 80101f4:	e7f6      	b.n	80101e4 <_printf_i+0x194>
 80101f6:	4616      	mov	r6, r2
 80101f8:	e7bd      	b.n	8010176 <_printf_i+0x126>
 80101fa:	6833      	ldr	r3, [r6, #0]
 80101fc:	6825      	ldr	r5, [r4, #0]
 80101fe:	6961      	ldr	r1, [r4, #20]
 8010200:	1d18      	adds	r0, r3, #4
 8010202:	6030      	str	r0, [r6, #0]
 8010204:	062e      	lsls	r6, r5, #24
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	d501      	bpl.n	801020e <_printf_i+0x1be>
 801020a:	6019      	str	r1, [r3, #0]
 801020c:	e002      	b.n	8010214 <_printf_i+0x1c4>
 801020e:	0668      	lsls	r0, r5, #25
 8010210:	d5fb      	bpl.n	801020a <_printf_i+0x1ba>
 8010212:	8019      	strh	r1, [r3, #0]
 8010214:	2300      	movs	r3, #0
 8010216:	6123      	str	r3, [r4, #16]
 8010218:	4616      	mov	r6, r2
 801021a:	e7bc      	b.n	8010196 <_printf_i+0x146>
 801021c:	6833      	ldr	r3, [r6, #0]
 801021e:	1d1a      	adds	r2, r3, #4
 8010220:	6032      	str	r2, [r6, #0]
 8010222:	681e      	ldr	r6, [r3, #0]
 8010224:	6862      	ldr	r2, [r4, #4]
 8010226:	2100      	movs	r1, #0
 8010228:	4630      	mov	r0, r6
 801022a:	f7f0 f871 	bl	8000310 <memchr>
 801022e:	b108      	cbz	r0, 8010234 <_printf_i+0x1e4>
 8010230:	1b80      	subs	r0, r0, r6
 8010232:	6060      	str	r0, [r4, #4]
 8010234:	6863      	ldr	r3, [r4, #4]
 8010236:	6123      	str	r3, [r4, #16]
 8010238:	2300      	movs	r3, #0
 801023a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801023e:	e7aa      	b.n	8010196 <_printf_i+0x146>
 8010240:	6923      	ldr	r3, [r4, #16]
 8010242:	4632      	mov	r2, r6
 8010244:	4649      	mov	r1, r9
 8010246:	4640      	mov	r0, r8
 8010248:	47d0      	blx	sl
 801024a:	3001      	adds	r0, #1
 801024c:	d0ad      	beq.n	80101aa <_printf_i+0x15a>
 801024e:	6823      	ldr	r3, [r4, #0]
 8010250:	079b      	lsls	r3, r3, #30
 8010252:	d413      	bmi.n	801027c <_printf_i+0x22c>
 8010254:	68e0      	ldr	r0, [r4, #12]
 8010256:	9b03      	ldr	r3, [sp, #12]
 8010258:	4298      	cmp	r0, r3
 801025a:	bfb8      	it	lt
 801025c:	4618      	movlt	r0, r3
 801025e:	e7a6      	b.n	80101ae <_printf_i+0x15e>
 8010260:	2301      	movs	r3, #1
 8010262:	4632      	mov	r2, r6
 8010264:	4649      	mov	r1, r9
 8010266:	4640      	mov	r0, r8
 8010268:	47d0      	blx	sl
 801026a:	3001      	adds	r0, #1
 801026c:	d09d      	beq.n	80101aa <_printf_i+0x15a>
 801026e:	3501      	adds	r5, #1
 8010270:	68e3      	ldr	r3, [r4, #12]
 8010272:	9903      	ldr	r1, [sp, #12]
 8010274:	1a5b      	subs	r3, r3, r1
 8010276:	42ab      	cmp	r3, r5
 8010278:	dcf2      	bgt.n	8010260 <_printf_i+0x210>
 801027a:	e7eb      	b.n	8010254 <_printf_i+0x204>
 801027c:	2500      	movs	r5, #0
 801027e:	f104 0619 	add.w	r6, r4, #25
 8010282:	e7f5      	b.n	8010270 <_printf_i+0x220>
 8010284:	08010823 	.word	0x08010823
 8010288:	08010834 	.word	0x08010834

0801028c <__sflush_r>:
 801028c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010294:	0716      	lsls	r6, r2, #28
 8010296:	4605      	mov	r5, r0
 8010298:	460c      	mov	r4, r1
 801029a:	d454      	bmi.n	8010346 <__sflush_r+0xba>
 801029c:	684b      	ldr	r3, [r1, #4]
 801029e:	2b00      	cmp	r3, #0
 80102a0:	dc02      	bgt.n	80102a8 <__sflush_r+0x1c>
 80102a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	dd48      	ble.n	801033a <__sflush_r+0xae>
 80102a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80102aa:	2e00      	cmp	r6, #0
 80102ac:	d045      	beq.n	801033a <__sflush_r+0xae>
 80102ae:	2300      	movs	r3, #0
 80102b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80102b4:	682f      	ldr	r7, [r5, #0]
 80102b6:	6a21      	ldr	r1, [r4, #32]
 80102b8:	602b      	str	r3, [r5, #0]
 80102ba:	d030      	beq.n	801031e <__sflush_r+0x92>
 80102bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80102be:	89a3      	ldrh	r3, [r4, #12]
 80102c0:	0759      	lsls	r1, r3, #29
 80102c2:	d505      	bpl.n	80102d0 <__sflush_r+0x44>
 80102c4:	6863      	ldr	r3, [r4, #4]
 80102c6:	1ad2      	subs	r2, r2, r3
 80102c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80102ca:	b10b      	cbz	r3, 80102d0 <__sflush_r+0x44>
 80102cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80102ce:	1ad2      	subs	r2, r2, r3
 80102d0:	2300      	movs	r3, #0
 80102d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80102d4:	6a21      	ldr	r1, [r4, #32]
 80102d6:	4628      	mov	r0, r5
 80102d8:	47b0      	blx	r6
 80102da:	1c43      	adds	r3, r0, #1
 80102dc:	89a3      	ldrh	r3, [r4, #12]
 80102de:	d106      	bne.n	80102ee <__sflush_r+0x62>
 80102e0:	6829      	ldr	r1, [r5, #0]
 80102e2:	291d      	cmp	r1, #29
 80102e4:	d82b      	bhi.n	801033e <__sflush_r+0xb2>
 80102e6:	4a2a      	ldr	r2, [pc, #168]	@ (8010390 <__sflush_r+0x104>)
 80102e8:	40ca      	lsrs	r2, r1
 80102ea:	07d6      	lsls	r6, r2, #31
 80102ec:	d527      	bpl.n	801033e <__sflush_r+0xb2>
 80102ee:	2200      	movs	r2, #0
 80102f0:	6062      	str	r2, [r4, #4]
 80102f2:	04d9      	lsls	r1, r3, #19
 80102f4:	6922      	ldr	r2, [r4, #16]
 80102f6:	6022      	str	r2, [r4, #0]
 80102f8:	d504      	bpl.n	8010304 <__sflush_r+0x78>
 80102fa:	1c42      	adds	r2, r0, #1
 80102fc:	d101      	bne.n	8010302 <__sflush_r+0x76>
 80102fe:	682b      	ldr	r3, [r5, #0]
 8010300:	b903      	cbnz	r3, 8010304 <__sflush_r+0x78>
 8010302:	6560      	str	r0, [r4, #84]	@ 0x54
 8010304:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010306:	602f      	str	r7, [r5, #0]
 8010308:	b1b9      	cbz	r1, 801033a <__sflush_r+0xae>
 801030a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801030e:	4299      	cmp	r1, r3
 8010310:	d002      	beq.n	8010318 <__sflush_r+0x8c>
 8010312:	4628      	mov	r0, r5
 8010314:	f7ff fbec 	bl	800faf0 <_free_r>
 8010318:	2300      	movs	r3, #0
 801031a:	6363      	str	r3, [r4, #52]	@ 0x34
 801031c:	e00d      	b.n	801033a <__sflush_r+0xae>
 801031e:	2301      	movs	r3, #1
 8010320:	4628      	mov	r0, r5
 8010322:	47b0      	blx	r6
 8010324:	4602      	mov	r2, r0
 8010326:	1c50      	adds	r0, r2, #1
 8010328:	d1c9      	bne.n	80102be <__sflush_r+0x32>
 801032a:	682b      	ldr	r3, [r5, #0]
 801032c:	2b00      	cmp	r3, #0
 801032e:	d0c6      	beq.n	80102be <__sflush_r+0x32>
 8010330:	2b1d      	cmp	r3, #29
 8010332:	d001      	beq.n	8010338 <__sflush_r+0xac>
 8010334:	2b16      	cmp	r3, #22
 8010336:	d11e      	bne.n	8010376 <__sflush_r+0xea>
 8010338:	602f      	str	r7, [r5, #0]
 801033a:	2000      	movs	r0, #0
 801033c:	e022      	b.n	8010384 <__sflush_r+0xf8>
 801033e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010342:	b21b      	sxth	r3, r3
 8010344:	e01b      	b.n	801037e <__sflush_r+0xf2>
 8010346:	690f      	ldr	r7, [r1, #16]
 8010348:	2f00      	cmp	r7, #0
 801034a:	d0f6      	beq.n	801033a <__sflush_r+0xae>
 801034c:	0793      	lsls	r3, r2, #30
 801034e:	680e      	ldr	r6, [r1, #0]
 8010350:	bf08      	it	eq
 8010352:	694b      	ldreq	r3, [r1, #20]
 8010354:	600f      	str	r7, [r1, #0]
 8010356:	bf18      	it	ne
 8010358:	2300      	movne	r3, #0
 801035a:	eba6 0807 	sub.w	r8, r6, r7
 801035e:	608b      	str	r3, [r1, #8]
 8010360:	f1b8 0f00 	cmp.w	r8, #0
 8010364:	dde9      	ble.n	801033a <__sflush_r+0xae>
 8010366:	6a21      	ldr	r1, [r4, #32]
 8010368:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801036a:	4643      	mov	r3, r8
 801036c:	463a      	mov	r2, r7
 801036e:	4628      	mov	r0, r5
 8010370:	47b0      	blx	r6
 8010372:	2800      	cmp	r0, #0
 8010374:	dc08      	bgt.n	8010388 <__sflush_r+0xfc>
 8010376:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801037a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801037e:	81a3      	strh	r3, [r4, #12]
 8010380:	f04f 30ff 	mov.w	r0, #4294967295
 8010384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010388:	4407      	add	r7, r0
 801038a:	eba8 0800 	sub.w	r8, r8, r0
 801038e:	e7e7      	b.n	8010360 <__sflush_r+0xd4>
 8010390:	20400001 	.word	0x20400001

08010394 <_fflush_r>:
 8010394:	b538      	push	{r3, r4, r5, lr}
 8010396:	690b      	ldr	r3, [r1, #16]
 8010398:	4605      	mov	r5, r0
 801039a:	460c      	mov	r4, r1
 801039c:	b913      	cbnz	r3, 80103a4 <_fflush_r+0x10>
 801039e:	2500      	movs	r5, #0
 80103a0:	4628      	mov	r0, r5
 80103a2:	bd38      	pop	{r3, r4, r5, pc}
 80103a4:	b118      	cbz	r0, 80103ae <_fflush_r+0x1a>
 80103a6:	6a03      	ldr	r3, [r0, #32]
 80103a8:	b90b      	cbnz	r3, 80103ae <_fflush_r+0x1a>
 80103aa:	f7ff f97d 	bl	800f6a8 <__sinit>
 80103ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d0f3      	beq.n	801039e <_fflush_r+0xa>
 80103b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80103b8:	07d0      	lsls	r0, r2, #31
 80103ba:	d404      	bmi.n	80103c6 <_fflush_r+0x32>
 80103bc:	0599      	lsls	r1, r3, #22
 80103be:	d402      	bmi.n	80103c6 <_fflush_r+0x32>
 80103c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80103c2:	f7ff fb66 	bl	800fa92 <__retarget_lock_acquire_recursive>
 80103c6:	4628      	mov	r0, r5
 80103c8:	4621      	mov	r1, r4
 80103ca:	f7ff ff5f 	bl	801028c <__sflush_r>
 80103ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80103d0:	07da      	lsls	r2, r3, #31
 80103d2:	4605      	mov	r5, r0
 80103d4:	d4e4      	bmi.n	80103a0 <_fflush_r+0xc>
 80103d6:	89a3      	ldrh	r3, [r4, #12]
 80103d8:	059b      	lsls	r3, r3, #22
 80103da:	d4e1      	bmi.n	80103a0 <_fflush_r+0xc>
 80103dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80103de:	f7ff fb59 	bl	800fa94 <__retarget_lock_release_recursive>
 80103e2:	e7dd      	b.n	80103a0 <_fflush_r+0xc>

080103e4 <fiprintf>:
 80103e4:	b40e      	push	{r1, r2, r3}
 80103e6:	b503      	push	{r0, r1, lr}
 80103e8:	4601      	mov	r1, r0
 80103ea:	ab03      	add	r3, sp, #12
 80103ec:	4805      	ldr	r0, [pc, #20]	@ (8010404 <fiprintf+0x20>)
 80103ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80103f2:	6800      	ldr	r0, [r0, #0]
 80103f4:	9301      	str	r3, [sp, #4]
 80103f6:	f7ff fca5 	bl	800fd44 <_vfiprintf_r>
 80103fa:	b002      	add	sp, #8
 80103fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8010400:	b003      	add	sp, #12
 8010402:	4770      	bx	lr
 8010404:	24000038 	.word	0x24000038

08010408 <__swhatbuf_r>:
 8010408:	b570      	push	{r4, r5, r6, lr}
 801040a:	460c      	mov	r4, r1
 801040c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010410:	2900      	cmp	r1, #0
 8010412:	b096      	sub	sp, #88	@ 0x58
 8010414:	4615      	mov	r5, r2
 8010416:	461e      	mov	r6, r3
 8010418:	da0d      	bge.n	8010436 <__swhatbuf_r+0x2e>
 801041a:	89a3      	ldrh	r3, [r4, #12]
 801041c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010420:	f04f 0100 	mov.w	r1, #0
 8010424:	bf14      	ite	ne
 8010426:	2340      	movne	r3, #64	@ 0x40
 8010428:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801042c:	2000      	movs	r0, #0
 801042e:	6031      	str	r1, [r6, #0]
 8010430:	602b      	str	r3, [r5, #0]
 8010432:	b016      	add	sp, #88	@ 0x58
 8010434:	bd70      	pop	{r4, r5, r6, pc}
 8010436:	466a      	mov	r2, sp
 8010438:	f000 f848 	bl	80104cc <_fstat_r>
 801043c:	2800      	cmp	r0, #0
 801043e:	dbec      	blt.n	801041a <__swhatbuf_r+0x12>
 8010440:	9901      	ldr	r1, [sp, #4]
 8010442:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010446:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801044a:	4259      	negs	r1, r3
 801044c:	4159      	adcs	r1, r3
 801044e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010452:	e7eb      	b.n	801042c <__swhatbuf_r+0x24>

08010454 <__smakebuf_r>:
 8010454:	898b      	ldrh	r3, [r1, #12]
 8010456:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010458:	079d      	lsls	r5, r3, #30
 801045a:	4606      	mov	r6, r0
 801045c:	460c      	mov	r4, r1
 801045e:	d507      	bpl.n	8010470 <__smakebuf_r+0x1c>
 8010460:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010464:	6023      	str	r3, [r4, #0]
 8010466:	6123      	str	r3, [r4, #16]
 8010468:	2301      	movs	r3, #1
 801046a:	6163      	str	r3, [r4, #20]
 801046c:	b003      	add	sp, #12
 801046e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010470:	ab01      	add	r3, sp, #4
 8010472:	466a      	mov	r2, sp
 8010474:	f7ff ffc8 	bl	8010408 <__swhatbuf_r>
 8010478:	9f00      	ldr	r7, [sp, #0]
 801047a:	4605      	mov	r5, r0
 801047c:	4639      	mov	r1, r7
 801047e:	4630      	mov	r0, r6
 8010480:	f7ff fbaa 	bl	800fbd8 <_malloc_r>
 8010484:	b948      	cbnz	r0, 801049a <__smakebuf_r+0x46>
 8010486:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801048a:	059a      	lsls	r2, r3, #22
 801048c:	d4ee      	bmi.n	801046c <__smakebuf_r+0x18>
 801048e:	f023 0303 	bic.w	r3, r3, #3
 8010492:	f043 0302 	orr.w	r3, r3, #2
 8010496:	81a3      	strh	r3, [r4, #12]
 8010498:	e7e2      	b.n	8010460 <__smakebuf_r+0xc>
 801049a:	89a3      	ldrh	r3, [r4, #12]
 801049c:	6020      	str	r0, [r4, #0]
 801049e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80104a2:	81a3      	strh	r3, [r4, #12]
 80104a4:	9b01      	ldr	r3, [sp, #4]
 80104a6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80104aa:	b15b      	cbz	r3, 80104c4 <__smakebuf_r+0x70>
 80104ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80104b0:	4630      	mov	r0, r6
 80104b2:	f000 f81d 	bl	80104f0 <_isatty_r>
 80104b6:	b128      	cbz	r0, 80104c4 <__smakebuf_r+0x70>
 80104b8:	89a3      	ldrh	r3, [r4, #12]
 80104ba:	f023 0303 	bic.w	r3, r3, #3
 80104be:	f043 0301 	orr.w	r3, r3, #1
 80104c2:	81a3      	strh	r3, [r4, #12]
 80104c4:	89a3      	ldrh	r3, [r4, #12]
 80104c6:	431d      	orrs	r5, r3
 80104c8:	81a5      	strh	r5, [r4, #12]
 80104ca:	e7cf      	b.n	801046c <__smakebuf_r+0x18>

080104cc <_fstat_r>:
 80104cc:	b538      	push	{r3, r4, r5, lr}
 80104ce:	4d07      	ldr	r5, [pc, #28]	@ (80104ec <_fstat_r+0x20>)
 80104d0:	2300      	movs	r3, #0
 80104d2:	4604      	mov	r4, r0
 80104d4:	4608      	mov	r0, r1
 80104d6:	4611      	mov	r1, r2
 80104d8:	602b      	str	r3, [r5, #0]
 80104da:	f7f1 fae3 	bl	8001aa4 <_fstat>
 80104de:	1c43      	adds	r3, r0, #1
 80104e0:	d102      	bne.n	80104e8 <_fstat_r+0x1c>
 80104e2:	682b      	ldr	r3, [r5, #0]
 80104e4:	b103      	cbz	r3, 80104e8 <_fstat_r+0x1c>
 80104e6:	6023      	str	r3, [r4, #0]
 80104e8:	bd38      	pop	{r3, r4, r5, pc}
 80104ea:	bf00      	nop
 80104ec:	24000690 	.word	0x24000690

080104f0 <_isatty_r>:
 80104f0:	b538      	push	{r3, r4, r5, lr}
 80104f2:	4d06      	ldr	r5, [pc, #24]	@ (801050c <_isatty_r+0x1c>)
 80104f4:	2300      	movs	r3, #0
 80104f6:	4604      	mov	r4, r0
 80104f8:	4608      	mov	r0, r1
 80104fa:	602b      	str	r3, [r5, #0]
 80104fc:	f7f1 fae2 	bl	8001ac4 <_isatty>
 8010500:	1c43      	adds	r3, r0, #1
 8010502:	d102      	bne.n	801050a <_isatty_r+0x1a>
 8010504:	682b      	ldr	r3, [r5, #0]
 8010506:	b103      	cbz	r3, 801050a <_isatty_r+0x1a>
 8010508:	6023      	str	r3, [r4, #0]
 801050a:	bd38      	pop	{r3, r4, r5, pc}
 801050c:	24000690 	.word	0x24000690

08010510 <_sbrk_r>:
 8010510:	b538      	push	{r3, r4, r5, lr}
 8010512:	4d06      	ldr	r5, [pc, #24]	@ (801052c <_sbrk_r+0x1c>)
 8010514:	2300      	movs	r3, #0
 8010516:	4604      	mov	r4, r0
 8010518:	4608      	mov	r0, r1
 801051a:	602b      	str	r3, [r5, #0]
 801051c:	f7f1 faea 	bl	8001af4 <_sbrk>
 8010520:	1c43      	adds	r3, r0, #1
 8010522:	d102      	bne.n	801052a <_sbrk_r+0x1a>
 8010524:	682b      	ldr	r3, [r5, #0]
 8010526:	b103      	cbz	r3, 801052a <_sbrk_r+0x1a>
 8010528:	6023      	str	r3, [r4, #0]
 801052a:	bd38      	pop	{r3, r4, r5, pc}
 801052c:	24000690 	.word	0x24000690

08010530 <abort>:
 8010530:	b508      	push	{r3, lr}
 8010532:	2006      	movs	r0, #6
 8010534:	f000 f82c 	bl	8010590 <raise>
 8010538:	2001      	movs	r0, #1
 801053a:	f7f1 fa63 	bl	8001a04 <_exit>

0801053e <_raise_r>:
 801053e:	291f      	cmp	r1, #31
 8010540:	b538      	push	{r3, r4, r5, lr}
 8010542:	4605      	mov	r5, r0
 8010544:	460c      	mov	r4, r1
 8010546:	d904      	bls.n	8010552 <_raise_r+0x14>
 8010548:	2316      	movs	r3, #22
 801054a:	6003      	str	r3, [r0, #0]
 801054c:	f04f 30ff 	mov.w	r0, #4294967295
 8010550:	bd38      	pop	{r3, r4, r5, pc}
 8010552:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010554:	b112      	cbz	r2, 801055c <_raise_r+0x1e>
 8010556:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801055a:	b94b      	cbnz	r3, 8010570 <_raise_r+0x32>
 801055c:	4628      	mov	r0, r5
 801055e:	f000 f831 	bl	80105c4 <_getpid_r>
 8010562:	4622      	mov	r2, r4
 8010564:	4601      	mov	r1, r0
 8010566:	4628      	mov	r0, r5
 8010568:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801056c:	f000 b818 	b.w	80105a0 <_kill_r>
 8010570:	2b01      	cmp	r3, #1
 8010572:	d00a      	beq.n	801058a <_raise_r+0x4c>
 8010574:	1c59      	adds	r1, r3, #1
 8010576:	d103      	bne.n	8010580 <_raise_r+0x42>
 8010578:	2316      	movs	r3, #22
 801057a:	6003      	str	r3, [r0, #0]
 801057c:	2001      	movs	r0, #1
 801057e:	e7e7      	b.n	8010550 <_raise_r+0x12>
 8010580:	2100      	movs	r1, #0
 8010582:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010586:	4620      	mov	r0, r4
 8010588:	4798      	blx	r3
 801058a:	2000      	movs	r0, #0
 801058c:	e7e0      	b.n	8010550 <_raise_r+0x12>
	...

08010590 <raise>:
 8010590:	4b02      	ldr	r3, [pc, #8]	@ (801059c <raise+0xc>)
 8010592:	4601      	mov	r1, r0
 8010594:	6818      	ldr	r0, [r3, #0]
 8010596:	f7ff bfd2 	b.w	801053e <_raise_r>
 801059a:	bf00      	nop
 801059c:	24000038 	.word	0x24000038

080105a0 <_kill_r>:
 80105a0:	b538      	push	{r3, r4, r5, lr}
 80105a2:	4d07      	ldr	r5, [pc, #28]	@ (80105c0 <_kill_r+0x20>)
 80105a4:	2300      	movs	r3, #0
 80105a6:	4604      	mov	r4, r0
 80105a8:	4608      	mov	r0, r1
 80105aa:	4611      	mov	r1, r2
 80105ac:	602b      	str	r3, [r5, #0]
 80105ae:	f7f1 fa19 	bl	80019e4 <_kill>
 80105b2:	1c43      	adds	r3, r0, #1
 80105b4:	d102      	bne.n	80105bc <_kill_r+0x1c>
 80105b6:	682b      	ldr	r3, [r5, #0]
 80105b8:	b103      	cbz	r3, 80105bc <_kill_r+0x1c>
 80105ba:	6023      	str	r3, [r4, #0]
 80105bc:	bd38      	pop	{r3, r4, r5, pc}
 80105be:	bf00      	nop
 80105c0:	24000690 	.word	0x24000690

080105c4 <_getpid_r>:
 80105c4:	f7f1 ba06 	b.w	80019d4 <_getpid>

080105c8 <_init>:
 80105c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105ca:	bf00      	nop
 80105cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80105ce:	bc08      	pop	{r3}
 80105d0:	469e      	mov	lr, r3
 80105d2:	4770      	bx	lr

080105d4 <_fini>:
 80105d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105d6:	bf00      	nop
 80105d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80105da:	bc08      	pop	{r3}
 80105dc:	469e      	mov	lr, r3
 80105de:	4770      	bx	lr

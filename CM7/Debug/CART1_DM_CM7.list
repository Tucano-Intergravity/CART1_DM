
CART1_DM_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007dac  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  0800804c  0800804c  0000904c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080d0  080080d0  0000a088  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080080d0  080080d0  000090d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080080d8  080080d8  0000a088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080d8  080080d8  000090d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080080dc  080080dc  000090dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  24000000  080080e0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002fc  24000088  08008168  0000a088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000384  08008168  0000a384  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000a088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013b6d  00000000  00000000  0000a0b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a00  00000000  00000000  0001dc23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e58  00000000  00000000  00020628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ae8  00000000  00000000  00021480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003bdab  00000000  00000000  00021f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014217  00000000  00000000  0005dd13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001825da  00000000  00000000  00071f2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001f4504  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004200  00000000  00000000  001f4548  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  001f8748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000088 	.word	0x24000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008034 	.word	0x08008034

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400008c 	.word	0x2400008c
 80002dc:	08008034 	.word	0x08008034

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006b0:	4b49      	ldr	r3, [pc, #292]	@ (80007d8 <SystemInit+0x12c>)
 80006b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006b6:	4a48      	ldr	r2, [pc, #288]	@ (80007d8 <SystemInit+0x12c>)
 80006b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006c0:	4b45      	ldr	r3, [pc, #276]	@ (80007d8 <SystemInit+0x12c>)
 80006c2:	691b      	ldr	r3, [r3, #16]
 80006c4:	4a44      	ldr	r2, [pc, #272]	@ (80007d8 <SystemInit+0x12c>)
 80006c6:	f043 0310 	orr.w	r3, r3, #16
 80006ca:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006cc:	4b43      	ldr	r3, [pc, #268]	@ (80007dc <SystemInit+0x130>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f003 030f 	and.w	r3, r3, #15
 80006d4:	2b06      	cmp	r3, #6
 80006d6:	d807      	bhi.n	80006e8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006d8:	4b40      	ldr	r3, [pc, #256]	@ (80007dc <SystemInit+0x130>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f023 030f 	bic.w	r3, r3, #15
 80006e0:	4a3e      	ldr	r2, [pc, #248]	@ (80007dc <SystemInit+0x130>)
 80006e2:	f043 0307 	orr.w	r3, r3, #7
 80006e6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006e8:	4b3d      	ldr	r3, [pc, #244]	@ (80007e0 <SystemInit+0x134>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a3c      	ldr	r2, [pc, #240]	@ (80007e0 <SystemInit+0x134>)
 80006ee:	f043 0301 	orr.w	r3, r3, #1
 80006f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006f4:	4b3a      	ldr	r3, [pc, #232]	@ (80007e0 <SystemInit+0x134>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006fa:	4b39      	ldr	r3, [pc, #228]	@ (80007e0 <SystemInit+0x134>)
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	4938      	ldr	r1, [pc, #224]	@ (80007e0 <SystemInit+0x134>)
 8000700:	4b38      	ldr	r3, [pc, #224]	@ (80007e4 <SystemInit+0x138>)
 8000702:	4013      	ands	r3, r2
 8000704:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000706:	4b35      	ldr	r3, [pc, #212]	@ (80007dc <SystemInit+0x130>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f003 0308 	and.w	r3, r3, #8
 800070e:	2b00      	cmp	r3, #0
 8000710:	d007      	beq.n	8000722 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000712:	4b32      	ldr	r3, [pc, #200]	@ (80007dc <SystemInit+0x130>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f023 030f 	bic.w	r3, r3, #15
 800071a:	4a30      	ldr	r2, [pc, #192]	@ (80007dc <SystemInit+0x130>)
 800071c:	f043 0307 	orr.w	r3, r3, #7
 8000720:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000722:	4b2f      	ldr	r3, [pc, #188]	@ (80007e0 <SystemInit+0x134>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000728:	4b2d      	ldr	r3, [pc, #180]	@ (80007e0 <SystemInit+0x134>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800072e:	4b2c      	ldr	r3, [pc, #176]	@ (80007e0 <SystemInit+0x134>)
 8000730:	2200      	movs	r2, #0
 8000732:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000734:	4b2a      	ldr	r3, [pc, #168]	@ (80007e0 <SystemInit+0x134>)
 8000736:	4a2c      	ldr	r2, [pc, #176]	@ (80007e8 <SystemInit+0x13c>)
 8000738:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800073a:	4b29      	ldr	r3, [pc, #164]	@ (80007e0 <SystemInit+0x134>)
 800073c:	4a2b      	ldr	r2, [pc, #172]	@ (80007ec <SystemInit+0x140>)
 800073e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000740:	4b27      	ldr	r3, [pc, #156]	@ (80007e0 <SystemInit+0x134>)
 8000742:	4a2b      	ldr	r2, [pc, #172]	@ (80007f0 <SystemInit+0x144>)
 8000744:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000746:	4b26      	ldr	r3, [pc, #152]	@ (80007e0 <SystemInit+0x134>)
 8000748:	2200      	movs	r2, #0
 800074a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800074c:	4b24      	ldr	r3, [pc, #144]	@ (80007e0 <SystemInit+0x134>)
 800074e:	4a28      	ldr	r2, [pc, #160]	@ (80007f0 <SystemInit+0x144>)
 8000750:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000752:	4b23      	ldr	r3, [pc, #140]	@ (80007e0 <SystemInit+0x134>)
 8000754:	2200      	movs	r2, #0
 8000756:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000758:	4b21      	ldr	r3, [pc, #132]	@ (80007e0 <SystemInit+0x134>)
 800075a:	4a25      	ldr	r2, [pc, #148]	@ (80007f0 <SystemInit+0x144>)
 800075c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800075e:	4b20      	ldr	r3, [pc, #128]	@ (80007e0 <SystemInit+0x134>)
 8000760:	2200      	movs	r2, #0
 8000762:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000764:	4b1e      	ldr	r3, [pc, #120]	@ (80007e0 <SystemInit+0x134>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a1d      	ldr	r2, [pc, #116]	@ (80007e0 <SystemInit+0x134>)
 800076a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800076e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000770:	4b1b      	ldr	r3, [pc, #108]	@ (80007e0 <SystemInit+0x134>)
 8000772:	2200      	movs	r2, #0
 8000774:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000776:	4b1f      	ldr	r3, [pc, #124]	@ (80007f4 <SystemInit+0x148>)
 8000778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800077a:	4a1e      	ldr	r2, [pc, #120]	@ (80007f4 <SystemInit+0x148>)
 800077c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000780:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000782:	4b1d      	ldr	r3, [pc, #116]	@ (80007f8 <SystemInit+0x14c>)
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	4b1d      	ldr	r3, [pc, #116]	@ (80007fc <SystemInit+0x150>)
 8000788:	4013      	ands	r3, r2
 800078a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800078e:	d202      	bcs.n	8000796 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000790:	4b1b      	ldr	r3, [pc, #108]	@ (8000800 <SystemInit+0x154>)
 8000792:	2201      	movs	r2, #1
 8000794:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000796:	4b12      	ldr	r3, [pc, #72]	@ (80007e0 <SystemInit+0x134>)
 8000798:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800079c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d113      	bne.n	80007cc <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80007a4:	4b0e      	ldr	r3, [pc, #56]	@ (80007e0 <SystemInit+0x134>)
 80007a6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007aa:	4a0d      	ldr	r2, [pc, #52]	@ (80007e0 <SystemInit+0x134>)
 80007ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007b0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80007b4:	4b13      	ldr	r3, [pc, #76]	@ (8000804 <SystemInit+0x158>)
 80007b6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80007ba:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80007bc:	4b08      	ldr	r3, [pc, #32]	@ (80007e0 <SystemInit+0x134>)
 80007be:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007c2:	4a07      	ldr	r2, [pc, #28]	@ (80007e0 <SystemInit+0x134>)
 80007c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80007c8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	e000ed00 	.word	0xe000ed00
 80007dc:	52002000 	.word	0x52002000
 80007e0:	58024400 	.word	0x58024400
 80007e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80007e8:	02020200 	.word	0x02020200
 80007ec:	01ff0000 	.word	0x01ff0000
 80007f0:	01010280 	.word	0x01010280
 80007f4:	580000c0 	.word	0x580000c0
 80007f8:	5c001000 	.word	0x5c001000
 80007fc:	ffff0000 	.word	0xffff0000
 8000800:	51008108 	.word	0x51008108
 8000804:	52004000 	.word	0x52004000

08000808 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 800080c:	4b09      	ldr	r3, [pc, #36]	@ (8000834 <ExitRun0Mode+0x2c>)
 800080e:	68db      	ldr	r3, [r3, #12]
 8000810:	4a08      	ldr	r2, [pc, #32]	@ (8000834 <ExitRun0Mode+0x2c>)
 8000812:	f023 0302 	bic.w	r3, r3, #2
 8000816:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000818:	bf00      	nop
 800081a:	4b06      	ldr	r3, [pc, #24]	@ (8000834 <ExitRun0Mode+0x2c>)
 800081c:	685b      	ldr	r3, [r3, #4]
 800081e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000822:	2b00      	cmp	r3, #0
 8000824:	d0f9      	beq.n	800081a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000826:	bf00      	nop
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	58024800 	.word	0x58024800

08000838 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b086      	sub	sp, #24
 800083c:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800083e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000842:	617b      	str	r3, [r7, #20]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000844:	bf00      	nop
 8000846:	4b54      	ldr	r3, [pc, #336]	@ (8000998 <main+0x160>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800084e:	2b00      	cmp	r3, #0
 8000850:	d004      	beq.n	800085c <main+0x24>
 8000852:	697b      	ldr	r3, [r7, #20]
 8000854:	1e5a      	subs	r2, r3, #1
 8000856:	617a      	str	r2, [r7, #20]
 8000858:	2b00      	cmp	r3, #0
 800085a:	dcf4      	bgt.n	8000846 <main+0xe>
  if ( timeout < 0 )
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	2b00      	cmp	r3, #0
 8000860:	da01      	bge.n	8000866 <main+0x2e>
  {
  Error_Handler();
 8000862:	f000 fa3f 	bl	8000ce4 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000866:	f001 fd23 	bl	80022b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800086a:	f000 f89f 	bl	80009ac <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800086e:	4b4a      	ldr	r3, [pc, #296]	@ (8000998 <main+0x160>)
 8000870:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000874:	4a48      	ldr	r2, [pc, #288]	@ (8000998 <main+0x160>)
 8000876:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800087a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800087e:	4b46      	ldr	r3, [pc, #280]	@ (8000998 <main+0x160>)
 8000880:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000884:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000888:	613b      	str	r3, [r7, #16]
 800088a:	693b      	ldr	r3, [r7, #16]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800088c:	2000      	movs	r0, #0
 800088e:	f002 f947 	bl	8002b20 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000892:	2100      	movs	r1, #0
 8000894:	2000      	movs	r0, #0
 8000896:	f002 f95d 	bl	8002b54 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800089a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800089e:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80008a0:	bf00      	nop
 80008a2:	4b3d      	ldr	r3, [pc, #244]	@ (8000998 <main+0x160>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d104      	bne.n	80008b8 <main+0x80>
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	1e5a      	subs	r2, r3, #1
 80008b2:	617a      	str	r2, [r7, #20]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	dcf4      	bgt.n	80008a2 <main+0x6a>
if ( timeout < 0 )
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	da01      	bge.n	80008c2 <main+0x8a>
{
Error_Handler();
 80008be:	f000 fa11 	bl	8000ce4 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008c2:	f000 f947 	bl	8000b54 <MX_GPIO_Init>
  MX_SPI1_Init();
 80008c6:	f000 f8ed 	bl	8000aa4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80008ca:	2000      	movs	r0, #0
 80008cc:	f001 fac4 	bl	8001e58 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 80008d0:	2001      	movs	r0, #1
 80008d2:	f001 fac1 	bl	8001e58 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80008d6:	2002      	movs	r0, #2
 80008d8:	f001 fabe 	bl	8001e58 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80008dc:	2101      	movs	r1, #1
 80008de:	2000      	movs	r0, #0
 80008e0:	f001 fb84 	bl	8001fec <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80008e4:	4b2d      	ldr	r3, [pc, #180]	@ (800099c <main+0x164>)
 80008e6:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008ea:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80008ec:	4b2b      	ldr	r3, [pc, #172]	@ (800099c <main+0x164>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80008f2:	4b2a      	ldr	r3, [pc, #168]	@ (800099c <main+0x164>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80008f8:	4b28      	ldr	r3, [pc, #160]	@ (800099c <main+0x164>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80008fe:	4b27      	ldr	r3, [pc, #156]	@ (800099c <main+0x164>)
 8000900:	2200      	movs	r2, #0
 8000902:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000904:	4925      	ldr	r1, [pc, #148]	@ (800099c <main+0x164>)
 8000906:	2000      	movs	r0, #0
 8000908:	f001 fbf4 	bl	80020f4 <BSP_COM_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <main+0xde>
  {
    Error_Handler();
 8000912:	f000 f9e7 	bl	8000ce4 <Error_Handler>
  }

  /* USER CODE BEGIN BSP */
  /* -- Sample board code to send message over COM1 port ---- */
  printf("Welcome to STM32 world !\n\r");
 8000916:	4822      	ldr	r0, [pc, #136]	@ (80009a0 <main+0x168>)
 8000918:	f006 fd20 	bl	800735c <iprintf>
  /* -- Sample board code to switch on leds ---- */
  BSP_LED_On(LED_GREEN);
 800091c:	2000      	movs	r0, #0
 800091e:	f001 fb11 	bl	8001f44 <BSP_LED_On>
  BSP_LED_On(LED_YELLOW);
 8000922:	2001      	movs	r0, #1
 8000924:	f001 fb0e 	bl	8001f44 <BSP_LED_On>
  BSP_LED_On(LED_RED);
 8000928:	2002      	movs	r0, #2
 800092a:	f001 fb0b 	bl	8001f44 <BSP_LED_On>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* -- Sample board code for User push-button in interrupt mode ---- */
    if (BspButtonState == BUTTON_PRESSED)
 800092e:	4b1d      	ldr	r3, [pc, #116]	@ (80009a4 <main+0x16c>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	2b01      	cmp	r3, #1
 8000934:	d10b      	bne.n	800094e <main+0x116>
    {
      /* Update button state */
      BspButtonState = BUTTON_RELEASED;
 8000936:	4b1b      	ldr	r3, [pc, #108]	@ (80009a4 <main+0x16c>)
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
      /* -- Sample board code to toggle leds ---- */
      BSP_LED_Toggle(LED_GREEN);
 800093c:	2000      	movs	r0, #0
 800093e:	f001 fb2b 	bl	8001f98 <BSP_LED_Toggle>
      BSP_LED_Toggle(LED_YELLOW);
 8000942:	2001      	movs	r0, #1
 8000944:	f001 fb28 	bl	8001f98 <BSP_LED_Toggle>
      BSP_LED_Toggle(LED_RED);
 8000948:	2002      	movs	r0, #2
 800094a:	f001 fb25 	bl	8001f98 <BSP_LED_Toggle>
      /* ..... Perform your action ..... */
    }

    uint8_t ch[12] ={0};
 800094e:	1d3b      	adds	r3, r7, #4
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
    ch[0] = 1;
 8000958:	2301      	movs	r3, #1
 800095a:	713b      	strb	r3, [r7, #4]
    ch[1] = 0;
 800095c:	2300      	movs	r3, #0
 800095e:	717b      	strb	r3, [r7, #5]
    ch[2] = 0;
 8000960:	2300      	movs	r3, #0
 8000962:	71bb      	strb	r3, [r7, #6]
    ch[3] = 0;
 8000964:	2300      	movs	r3, #0
 8000966:	71fb      	strb	r3, [r7, #7]
    sv_single_con(ch);
 8000968:	1d3b      	adds	r3, r7, #4
 800096a:	4618      	mov	r0, r3
 800096c:	f000 f9c0 	bl	8000cf0 <sv_single_con>

	TC[TC_CH1] = MAX31855_GetThermocoupleTemperature(TC_CH1);
 8000970:	2000      	movs	r0, #0
 8000972:	f001 fa1f 	bl	8001db4 <MAX31855_GetThermocoupleTemperature>
 8000976:	eef0 7a40 	vmov.f32	s15, s0
 800097a:	4b0b      	ldr	r3, [pc, #44]	@ (80009a8 <main+0x170>)
 800097c:	edc3 7a00 	vstr	s15, [r3]
	TC[TC_CH2] = MAX31855_GetThermocoupleTemperature(TC_CH2);
 8000980:	2001      	movs	r0, #1
 8000982:	f001 fa17 	bl	8001db4 <MAX31855_GetThermocoupleTemperature>
 8000986:	eef0 7a40 	vmov.f32	s15, s0
 800098a:	4b07      	ldr	r3, [pc, #28]	@ (80009a8 <main+0x170>)
 800098c:	edc3 7a01 	vstr	s15, [r3, #4]

    HAL_Delay(100);
 8000990:	2064      	movs	r0, #100	@ 0x64
 8000992:	f001 fd1f 	bl	80023d4 <HAL_Delay>
  {
 8000996:	e7ca      	b.n	800092e <main+0xf6>
 8000998:	58024400 	.word	0x58024400
 800099c:	240000a4 	.word	0x240000a4
 80009a0:	0800804c 	.word	0x0800804c
 80009a4:	240000b4 	.word	0x240000b4
 80009a8:	24000140 	.word	0x24000140

080009ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b09c      	sub	sp, #112	@ 0x70
 80009b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009b6:	224c      	movs	r2, #76	@ 0x4c
 80009b8:	2100      	movs	r1, #0
 80009ba:	4618      	mov	r0, r3
 80009bc:	f006 fdb8 	bl	8007530 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c0:	1d3b      	adds	r3, r7, #4
 80009c2:	2220      	movs	r2, #32
 80009c4:	2100      	movs	r1, #0
 80009c6:	4618      	mov	r0, r3
 80009c8:	f006 fdb2 	bl	8007530 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80009cc:	2004      	movs	r0, #4
 80009ce:	f002 f8d5 	bl	8002b7c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009d2:	2300      	movs	r3, #0
 80009d4:	603b      	str	r3, [r7, #0]
 80009d6:	4b31      	ldr	r3, [pc, #196]	@ (8000a9c <SystemClock_Config+0xf0>)
 80009d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009da:	4a30      	ldr	r2, [pc, #192]	@ (8000a9c <SystemClock_Config+0xf0>)
 80009dc:	f023 0301 	bic.w	r3, r3, #1
 80009e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80009e2:	4b2e      	ldr	r3, [pc, #184]	@ (8000a9c <SystemClock_Config+0xf0>)
 80009e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	603b      	str	r3, [r7, #0]
 80009ec:	4b2c      	ldr	r3, [pc, #176]	@ (8000aa0 <SystemClock_Config+0xf4>)
 80009ee:	699b      	ldr	r3, [r3, #24]
 80009f0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80009f4:	4a2a      	ldr	r2, [pc, #168]	@ (8000aa0 <SystemClock_Config+0xf4>)
 80009f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009fa:	6193      	str	r3, [r2, #24]
 80009fc:	4b28      	ldr	r3, [pc, #160]	@ (8000aa0 <SystemClock_Config+0xf4>)
 80009fe:	699b      	ldr	r3, [r3, #24]
 8000a00:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a04:	603b      	str	r3, [r7, #0]
 8000a06:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a08:	bf00      	nop
 8000a0a:	4b25      	ldr	r3, [pc, #148]	@ (8000aa0 <SystemClock_Config+0xf4>)
 8000a0c:	699b      	ldr	r3, [r3, #24]
 8000a0e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a16:	d1f8      	bne.n	8000a0a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a20:	2340      	movs	r3, #64	@ 0x40
 8000a22:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a24:	2302      	movs	r3, #2
 8000a26:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a2c:	2304      	movs	r3, #4
 8000a2e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000a30:	230a      	movs	r3, #10
 8000a32:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a34:	2302      	movs	r3, #2
 8000a36:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a40:	230c      	movs	r3, #12
 8000a42:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000a44:	2302      	movs	r3, #2
 8000a46:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a50:	4618      	mov	r0, r3
 8000a52:	f002 f8ed 	bl	8002c30 <HAL_RCC_OscConfig>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000a5c:	f000 f942 	bl	8000ce4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a60:	233f      	movs	r3, #63	@ 0x3f
 8000a62:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a64:	2300      	movs	r3, #0
 8000a66:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000a70:	2300      	movs	r3, #0
 8000a72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000a74:	2300      	movs	r3, #0
 8000a76:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a80:	1d3b      	adds	r3, r7, #4
 8000a82:	2101      	movs	r1, #1
 8000a84:	4618      	mov	r0, r3
 8000a86:	f002 fd2d 	bl	80034e4 <HAL_RCC_ClockConfig>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000a90:	f000 f928 	bl	8000ce4 <Error_Handler>
  }
}
 8000a94:	bf00      	nop
 8000a96:	3770      	adds	r7, #112	@ 0x70
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	58000400 	.word	0x58000400
 8000aa0:	58024800 	.word	0x58024800

08000aa4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000aa8:	4b28      	ldr	r3, [pc, #160]	@ (8000b4c <MX_SPI1_Init+0xa8>)
 8000aaa:	4a29      	ldr	r2, [pc, #164]	@ (8000b50 <MX_SPI1_Init+0xac>)
 8000aac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000aae:	4b27      	ldr	r3, [pc, #156]	@ (8000b4c <MX_SPI1_Init+0xa8>)
 8000ab0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000ab4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000ab6:	4b25      	ldr	r3, [pc, #148]	@ (8000b4c <MX_SPI1_Init+0xa8>)
 8000ab8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000abc:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000abe:	4b23      	ldr	r3, [pc, #140]	@ (8000b4c <MX_SPI1_Init+0xa8>)
 8000ac0:	2207      	movs	r2, #7
 8000ac2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ac4:	4b21      	ldr	r3, [pc, #132]	@ (8000b4c <MX_SPI1_Init+0xa8>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000aca:	4b20      	ldr	r3, [pc, #128]	@ (8000b4c <MX_SPI1_Init+0xa8>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ad0:	4b1e      	ldr	r3, [pc, #120]	@ (8000b4c <MX_SPI1_Init+0xa8>)
 8000ad2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000ad6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000ad8:	4b1c      	ldr	r3, [pc, #112]	@ (8000b4c <MX_SPI1_Init+0xa8>)
 8000ada:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ade:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ae0:	4b1a      	ldr	r3, [pc, #104]	@ (8000b4c <MX_SPI1_Init+0xa8>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ae6:	4b19      	ldr	r3, [pc, #100]	@ (8000b4c <MX_SPI1_Init+0xa8>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000aec:	4b17      	ldr	r3, [pc, #92]	@ (8000b4c <MX_SPI1_Init+0xa8>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000af2:	4b16      	ldr	r3, [pc, #88]	@ (8000b4c <MX_SPI1_Init+0xa8>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000af8:	4b14      	ldr	r3, [pc, #80]	@ (8000b4c <MX_SPI1_Init+0xa8>)
 8000afa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000afe:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000b00:	4b12      	ldr	r3, [pc, #72]	@ (8000b4c <MX_SPI1_Init+0xa8>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000b06:	4b11      	ldr	r3, [pc, #68]	@ (8000b4c <MX_SPI1_Init+0xa8>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b4c <MX_SPI1_Init+0xa8>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b12:	4b0e      	ldr	r3, [pc, #56]	@ (8000b4c <MX_SPI1_Init+0xa8>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000b18:	4b0c      	ldr	r3, [pc, #48]	@ (8000b4c <MX_SPI1_Init+0xa8>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b4c <MX_SPI1_Init+0xa8>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000b24:	4b09      	ldr	r3, [pc, #36]	@ (8000b4c <MX_SPI1_Init+0xa8>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000b2a:	4b08      	ldr	r3, [pc, #32]	@ (8000b4c <MX_SPI1_Init+0xa8>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000b30:	4b06      	ldr	r3, [pc, #24]	@ (8000b4c <MX_SPI1_Init+0xa8>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b36:	4805      	ldr	r0, [pc, #20]	@ (8000b4c <MX_SPI1_Init+0xa8>)
 8000b38:	f004 fe8c 	bl	8005854 <HAL_SPI_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8000b42:	f000 f8cf 	bl	8000ce4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	240000b8 	.word	0x240000b8
 8000b50:	40013000 	.word	0x40013000

08000b54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08a      	sub	sp, #40	@ 0x28
 8000b58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5a:	f107 0314 	add.w	r3, r7, #20
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	605a      	str	r2, [r3, #4]
 8000b64:	609a      	str	r2, [r3, #8]
 8000b66:	60da      	str	r2, [r3, #12]
 8000b68:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b6a:	4b4f      	ldr	r3, [pc, #316]	@ (8000ca8 <MX_GPIO_Init+0x154>)
 8000b6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b70:	4a4d      	ldr	r2, [pc, #308]	@ (8000ca8 <MX_GPIO_Init+0x154>)
 8000b72:	f043 0310 	orr.w	r3, r3, #16
 8000b76:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b7a:	4b4b      	ldr	r3, [pc, #300]	@ (8000ca8 <MX_GPIO_Init+0x154>)
 8000b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b80:	f003 0310 	and.w	r3, r3, #16
 8000b84:	613b      	str	r3, [r7, #16]
 8000b86:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b88:	4b47      	ldr	r3, [pc, #284]	@ (8000ca8 <MX_GPIO_Init+0x154>)
 8000b8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b8e:	4a46      	ldr	r2, [pc, #280]	@ (8000ca8 <MX_GPIO_Init+0x154>)
 8000b90:	f043 0308 	orr.w	r3, r3, #8
 8000b94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b98:	4b43      	ldr	r3, [pc, #268]	@ (8000ca8 <MX_GPIO_Init+0x154>)
 8000b9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b9e:	f003 0308 	and.w	r3, r3, #8
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ba6:	4b40      	ldr	r3, [pc, #256]	@ (8000ca8 <MX_GPIO_Init+0x154>)
 8000ba8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bac:	4a3e      	ldr	r2, [pc, #248]	@ (8000ca8 <MX_GPIO_Init+0x154>)
 8000bae:	f043 0304 	orr.w	r3, r3, #4
 8000bb2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bb6:	4b3c      	ldr	r3, [pc, #240]	@ (8000ca8 <MX_GPIO_Init+0x154>)
 8000bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bbc:	f003 0304 	and.w	r3, r3, #4
 8000bc0:	60bb      	str	r3, [r7, #8]
 8000bc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc4:	4b38      	ldr	r3, [pc, #224]	@ (8000ca8 <MX_GPIO_Init+0x154>)
 8000bc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bca:	4a37      	ldr	r2, [pc, #220]	@ (8000ca8 <MX_GPIO_Init+0x154>)
 8000bcc:	f043 0301 	orr.w	r3, r3, #1
 8000bd0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bd4:	4b34      	ldr	r3, [pc, #208]	@ (8000ca8 <MX_GPIO_Init+0x154>)
 8000bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bda:	f003 0301 	and.w	r3, r3, #1
 8000bde:	607b      	str	r3, [r7, #4]
 8000be0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000be2:	4b31      	ldr	r3, [pc, #196]	@ (8000ca8 <MX_GPIO_Init+0x154>)
 8000be4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000be8:	4a2f      	ldr	r2, [pc, #188]	@ (8000ca8 <MX_GPIO_Init+0x154>)
 8000bea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bf2:	4b2d      	ldr	r3, [pc, #180]	@ (8000ca8 <MX_GPIO_Init+0x154>)
 8000bf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bfc:	603b      	str	r3, [r7, #0]
 8000bfe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000c00:	2200      	movs	r2, #0
 8000c02:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000c06:	4829      	ldr	r0, [pc, #164]	@ (8000cac <MX_GPIO_Init+0x158>)
 8000c08:	f001 ff56 	bl	8002ab8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	f647 41ff 	movw	r1, #31999	@ 0x7cff
 8000c12:	4827      	ldr	r0, [pc, #156]	@ (8000cb0 <MX_GPIO_Init+0x15c>)
 8000c14:	f001 ff50 	bl	8002ab8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 8000c1e:	4825      	ldr	r0, [pc, #148]	@ (8000cb4 <MX_GPIO_Init+0x160>)
 8000c20:	f001 ff4a 	bl	8002ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000c24:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c28:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c32:	2300      	movs	r3, #0
 8000c34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c36:	f107 0314 	add.w	r3, r7, #20
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	481b      	ldr	r0, [pc, #108]	@ (8000cac <MX_GPIO_Init+0x158>)
 8000c3e:	f001 fd8b 	bl	8002758 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin PD11 PD12 PD13
                           PD14 PD0 PD1 PD2
                           PD3 PD4 PD5 PD6
                           PD7 */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8000c42:	f647 43ff 	movw	r3, #31999	@ 0x7cff
 8000c46:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4815      	ldr	r0, [pc, #84]	@ (8000cb0 <MX_GPIO_Init+0x15c>)
 8000c5c:	f001 fd7c 	bl	8002758 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000c60:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8000c64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c66:	2301      	movs	r3, #1
 8000c68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c72:	f107 0314 	add.w	r3, r7, #20
 8000c76:	4619      	mov	r1, r3
 8000c78:	480e      	ldr	r0, [pc, #56]	@ (8000cb4 <MX_GPIO_Init+0x160>)
 8000c7a:	f001 fd6d 	bl	8002758 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000c7e:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000c82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c84:	2302      	movs	r3, #2
 8000c86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000c90:	230a      	movs	r3, #10
 8000c92:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4807      	ldr	r0, [pc, #28]	@ (8000cb8 <MX_GPIO_Init+0x164>)
 8000c9c:	f001 fd5c 	bl	8002758 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ca0:	bf00      	nop
 8000ca2:	3728      	adds	r7, #40	@ 0x28
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	58024400 	.word	0x58024400
 8000cac:	58021000 	.word	0x58021000
 8000cb0:	58020c00 	.word	0x58020c00
 8000cb4:	58020800 	.word	0x58020800
 8000cb8:	58020000 	.word	0x58020000

08000cbc <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d102      	bne.n	8000cd2 <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 8000ccc:	4b04      	ldr	r3, [pc, #16]	@ (8000ce0 <BSP_PB_Callback+0x24>)
 8000cce:	2201      	movs	r2, #1
 8000cd0:	601a      	str	r2, [r3, #0]
  }
}
 8000cd2:	bf00      	nop
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	240000b4 	.word	0x240000b4

08000ce4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce8:	b672      	cpsid	i
}
 8000cea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cec:	bf00      	nop
 8000cee:	e7fd      	b.n	8000cec <Error_Handler+0x8>

08000cf0 <sv_single_con>:

#include "solenoidvalve.h"
#include <stdint.h>

void sv_single_con(uint8_t* ch)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i<MAX_SV_NUM; i++) {
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	73fb      	strb	r3, [r7, #15]
 8000cfc:	e055      	b.n	8000daa <sv_single_con+0xba>
		switch(i) {
 8000cfe:	7bfb      	ldrb	r3, [r7, #15]
 8000d00:	2b03      	cmp	r3, #3
 8000d02:	d84e      	bhi.n	8000da2 <sv_single_con+0xb2>
 8000d04:	a201      	add	r2, pc, #4	@ (adr r2, 8000d0c <sv_single_con+0x1c>)
 8000d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d0a:	bf00      	nop
 8000d0c:	08000d1d 	.word	0x08000d1d
 8000d10:	08000d3d 	.word	0x08000d3d
 8000d14:	08000d5f 	.word	0x08000d5f
 8000d18:	08000d81 	.word	0x08000d81
		case 0: // SV CH1
			if (ch[0] == 0) {
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d105      	bne.n	8000d30 <sv_single_con+0x40>
				HAL_GPIO_WritePin(SV_CH1_PORT, SV_CH1_GPIO, GPIO_PIN_RESET);
 8000d24:	2200      	movs	r2, #0
 8000d26:	2101      	movs	r1, #1
 8000d28:	4824      	ldr	r0, [pc, #144]	@ (8000dbc <sv_single_con+0xcc>)
 8000d2a:	f001 fec5 	bl	8002ab8 <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(SV_CH1_PORT, SV_CH1_GPIO, GPIO_PIN_SET);
			}
			break;
 8000d2e:	e039      	b.n	8000da4 <sv_single_con+0xb4>
				HAL_GPIO_WritePin(SV_CH1_PORT, SV_CH1_GPIO, GPIO_PIN_SET);
 8000d30:	2201      	movs	r2, #1
 8000d32:	2101      	movs	r1, #1
 8000d34:	4821      	ldr	r0, [pc, #132]	@ (8000dbc <sv_single_con+0xcc>)
 8000d36:	f001 febf 	bl	8002ab8 <HAL_GPIO_WritePin>
			break;
 8000d3a:	e033      	b.n	8000da4 <sv_single_con+0xb4>
		case 1:
			if (ch[1] == 0) {
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	3301      	adds	r3, #1
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d105      	bne.n	8000d52 <sv_single_con+0x62>
				HAL_GPIO_WritePin(SV_CH2_PORT, SV_CH2_GPIO, GPIO_PIN_RESET);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2108      	movs	r1, #8
 8000d4a:	481c      	ldr	r0, [pc, #112]	@ (8000dbc <sv_single_con+0xcc>)
 8000d4c:	f001 feb4 	bl	8002ab8 <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(SV_CH2_PORT, SV_CH2_GPIO, GPIO_PIN_SET);
			}
			break;
 8000d50:	e028      	b.n	8000da4 <sv_single_con+0xb4>
				HAL_GPIO_WritePin(SV_CH2_PORT, SV_CH2_GPIO, GPIO_PIN_SET);
 8000d52:	2201      	movs	r2, #1
 8000d54:	2108      	movs	r1, #8
 8000d56:	4819      	ldr	r0, [pc, #100]	@ (8000dbc <sv_single_con+0xcc>)
 8000d58:	f001 feae 	bl	8002ab8 <HAL_GPIO_WritePin>
			break;
 8000d5c:	e022      	b.n	8000da4 <sv_single_con+0xb4>
		case 2:
			if (ch[2] == 0) {
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	3302      	adds	r3, #2
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d105      	bne.n	8000d74 <sv_single_con+0x84>
				HAL_GPIO_WritePin(SV_CH3_PORT, SV_CH3_GPIO, GPIO_PIN_RESET);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2110      	movs	r1, #16
 8000d6c:	4813      	ldr	r0, [pc, #76]	@ (8000dbc <sv_single_con+0xcc>)
 8000d6e:	f001 fea3 	bl	8002ab8 <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(SV_CH3_PORT, SV_CH3_GPIO, GPIO_PIN_SET);
			}
			break;
 8000d72:	e017      	b.n	8000da4 <sv_single_con+0xb4>
				HAL_GPIO_WritePin(SV_CH3_PORT, SV_CH3_GPIO, GPIO_PIN_SET);
 8000d74:	2201      	movs	r2, #1
 8000d76:	2110      	movs	r1, #16
 8000d78:	4810      	ldr	r0, [pc, #64]	@ (8000dbc <sv_single_con+0xcc>)
 8000d7a:	f001 fe9d 	bl	8002ab8 <HAL_GPIO_WritePin>
			break;
 8000d7e:	e011      	b.n	8000da4 <sv_single_con+0xb4>
		case 3:
			if (ch[3] == 0) {
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	3303      	adds	r3, #3
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d105      	bne.n	8000d96 <sv_single_con+0xa6>
				HAL_GPIO_WritePin(SV_CH4_PORT, SV_CH4_GPIO, GPIO_PIN_RESET);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2180      	movs	r1, #128	@ 0x80
 8000d8e:	480b      	ldr	r0, [pc, #44]	@ (8000dbc <sv_single_con+0xcc>)
 8000d90:	f001 fe92 	bl	8002ab8 <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(SV_CH4_PORT, SV_CH4_GPIO, GPIO_PIN_SET);
			}
			break;
 8000d94:	e006      	b.n	8000da4 <sv_single_con+0xb4>
				HAL_GPIO_WritePin(SV_CH4_PORT, SV_CH4_GPIO, GPIO_PIN_SET);
 8000d96:	2201      	movs	r2, #1
 8000d98:	2180      	movs	r1, #128	@ 0x80
 8000d9a:	4808      	ldr	r0, [pc, #32]	@ (8000dbc <sv_single_con+0xcc>)
 8000d9c:	f001 fe8c 	bl	8002ab8 <HAL_GPIO_WritePin>
			break;
 8000da0:	e000      	b.n	8000da4 <sv_single_con+0xb4>
		default:
			break;
 8000da2:	bf00      	nop
	for (uint8_t i = 0; i<MAX_SV_NUM; i++) {
 8000da4:	7bfb      	ldrb	r3, [r7, #15]
 8000da6:	3301      	adds	r3, #1
 8000da8:	73fb      	strb	r3, [r7, #15]
 8000daa:	7bfb      	ldrb	r3, [r7, #15]
 8000dac:	2b09      	cmp	r3, #9
 8000dae:	d9a6      	bls.n	8000cfe <sv_single_con+0xe>
		}
	}

}
 8000db0:	bf00      	nop
 8000db2:	bf00      	nop
 8000db4:	3710      	adds	r7, #16
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	58021000 	.word	0x58021000

08000dc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc6:	4b0a      	ldr	r3, [pc, #40]	@ (8000df0 <HAL_MspInit+0x30>)
 8000dc8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000dcc:	4a08      	ldr	r2, [pc, #32]	@ (8000df0 <HAL_MspInit+0x30>)
 8000dce:	f043 0302 	orr.w	r3, r3, #2
 8000dd2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000dd6:	4b06      	ldr	r3, [pc, #24]	@ (8000df0 <HAL_MspInit+0x30>)
 8000dd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ddc:	f003 0302 	and.w	r3, r3, #2
 8000de0:	607b      	str	r3, [r7, #4]
 8000de2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000de4:	bf00      	nop
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	58024400 	.word	0x58024400

08000df4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b0ba      	sub	sp, #232	@ 0xe8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e0c:	f107 0310 	add.w	r3, r7, #16
 8000e10:	22c0      	movs	r2, #192	@ 0xc0
 8000e12:	2100      	movs	r1, #0
 8000e14:	4618      	mov	r0, r3
 8000e16:	f006 fb8b 	bl	8007530 <memset>
  if(hspi->Instance==SPI1)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a26      	ldr	r2, [pc, #152]	@ (8000eb8 <HAL_SPI_MspInit+0xc4>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d145      	bne.n	8000eb0 <HAL_SPI_MspInit+0xbc>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000e24:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000e28:	f04f 0300 	mov.w	r3, #0
 8000e2c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e34:	f107 0310 	add.w	r3, r7, #16
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f002 fedf 	bl	8003bfc <HAL_RCCEx_PeriphCLKConfig>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8000e44:	f7ff ff4e 	bl	8000ce4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e48:	4b1c      	ldr	r3, [pc, #112]	@ (8000ebc <HAL_SPI_MspInit+0xc8>)
 8000e4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000e4e:	4a1b      	ldr	r2, [pc, #108]	@ (8000ebc <HAL_SPI_MspInit+0xc8>)
 8000e50:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e54:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000e58:	4b18      	ldr	r3, [pc, #96]	@ (8000ebc <HAL_SPI_MspInit+0xc8>)
 8000e5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000e5e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e66:	4b15      	ldr	r3, [pc, #84]	@ (8000ebc <HAL_SPI_MspInit+0xc8>)
 8000e68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e6c:	4a13      	ldr	r2, [pc, #76]	@ (8000ebc <HAL_SPI_MspInit+0xc8>)
 8000e6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e72:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e76:	4b11      	ldr	r3, [pc, #68]	@ (8000ebc <HAL_SPI_MspInit+0xc8>)
 8000e78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e80:	60bb      	str	r3, [r7, #8]
 8000e82:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PG9     ------> SPI1_MISO
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8000e84:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8000e88:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e9e:	2305      	movs	r3, #5
 8000ea0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ea4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4805      	ldr	r0, [pc, #20]	@ (8000ec0 <HAL_SPI_MspInit+0xcc>)
 8000eac:	f001 fc54 	bl	8002758 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000eb0:	bf00      	nop
 8000eb2:	37e8      	adds	r7, #232	@ 0xe8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40013000 	.word	0x40013000
 8000ebc:	58024400 	.word	0x58024400
 8000ec0:	58021800 	.word	0x58021800

08000ec4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ec8:	bf00      	nop
 8000eca:	e7fd      	b.n	8000ec8 <NMI_Handler+0x4>

08000ecc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed0:	bf00      	nop
 8000ed2:	e7fd      	b.n	8000ed0 <HardFault_Handler+0x4>

08000ed4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed8:	bf00      	nop
 8000eda:	e7fd      	b.n	8000ed8 <MemManage_Handler+0x4>

08000edc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ee0:	bf00      	nop
 8000ee2:	e7fd      	b.n	8000ee0 <BusFault_Handler+0x4>

08000ee4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee8:	bf00      	nop
 8000eea:	e7fd      	b.n	8000ee8 <UsageFault_Handler+0x4>

08000eec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f1a:	f001 fa3b 	bl	8002394 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000f26:	2000      	movs	r0, #0
 8000f28:	f001 f8d2 	bl	80020d0 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	60b9      	str	r1, [r7, #8]
 8000f3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	617b      	str	r3, [r7, #20]
 8000f40:	e00a      	b.n	8000f58 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f42:	f3af 8000 	nop.w
 8000f46:	4601      	mov	r1, r0
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	1c5a      	adds	r2, r3, #1
 8000f4c:	60ba      	str	r2, [r7, #8]
 8000f4e:	b2ca      	uxtb	r2, r1
 8000f50:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	3301      	adds	r3, #1
 8000f56:	617b      	str	r3, [r7, #20]
 8000f58:	697a      	ldr	r2, [r7, #20]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	dbf0      	blt.n	8000f42 <_read+0x12>
  }

  return len;
 8000f60:	687b      	ldr	r3, [r7, #4]
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3718      	adds	r7, #24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b086      	sub	sp, #24
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	60f8      	str	r0, [r7, #12]
 8000f72:	60b9      	str	r1, [r7, #8]
 8000f74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f76:	2300      	movs	r3, #0
 8000f78:	617b      	str	r3, [r7, #20]
 8000f7a:	e009      	b.n	8000f90 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	1c5a      	adds	r2, r3, #1
 8000f80:	60ba      	str	r2, [r7, #8]
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f001 f917 	bl	80021b8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	617b      	str	r3, [r7, #20]
 8000f90:	697a      	ldr	r2, [r7, #20]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	dbf1      	blt.n	8000f7c <_write+0x12>
  }
  return len;
 8000f98:	687b      	ldr	r3, [r7, #4]
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3718      	adds	r7, #24
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <_close>:

int _close(int file)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	b083      	sub	sp, #12
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000faa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	b083      	sub	sp, #12
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
 8000fc2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000fca:	605a      	str	r2, [r3, #4]
  return 0;
 8000fcc:	2300      	movs	r3, #0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr

08000fda <_isatty>:

int _isatty(int file)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	b083      	sub	sp, #12
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fe2:	2301      	movs	r3, #1
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3714      	adds	r7, #20
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
	...

0800100c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001014:	4a14      	ldr	r2, [pc, #80]	@ (8001068 <_sbrk+0x5c>)
 8001016:	4b15      	ldr	r3, [pc, #84]	@ (800106c <_sbrk+0x60>)
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001020:	4b13      	ldr	r3, [pc, #76]	@ (8001070 <_sbrk+0x64>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d102      	bne.n	800102e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001028:	4b11      	ldr	r3, [pc, #68]	@ (8001070 <_sbrk+0x64>)
 800102a:	4a12      	ldr	r2, [pc, #72]	@ (8001074 <_sbrk+0x68>)
 800102c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800102e:	4b10      	ldr	r3, [pc, #64]	@ (8001070 <_sbrk+0x64>)
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4413      	add	r3, r2
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	429a      	cmp	r2, r3
 800103a:	d207      	bcs.n	800104c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800103c:	f006 fac6 	bl	80075cc <__errno>
 8001040:	4603      	mov	r3, r0
 8001042:	220c      	movs	r2, #12
 8001044:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001046:	f04f 33ff 	mov.w	r3, #4294967295
 800104a:	e009      	b.n	8001060 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800104c:	4b08      	ldr	r3, [pc, #32]	@ (8001070 <_sbrk+0x64>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001052:	4b07      	ldr	r3, [pc, #28]	@ (8001070 <_sbrk+0x64>)
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4413      	add	r3, r2
 800105a:	4a05      	ldr	r2, [pc, #20]	@ (8001070 <_sbrk+0x64>)
 800105c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800105e:	68fb      	ldr	r3, [r7, #12]
}
 8001060:	4618      	mov	r0, r3
 8001062:	3718      	adds	r7, #24
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	24080000 	.word	0x24080000
 800106c:	00000400 	.word	0x00000400
 8001070:	24000190 	.word	0x24000190
 8001074:	24000388 	.word	0x24000388

08001078 <MAX31855_CS_Enable>:

extern SPI_HandleTypeDef hspi1; // SPI1 핸들러 외부 선언

// CS 핀을 Low로 설정 (SPI 통신 시작)
void MAX31855_CS_Enable(uint8_t ch)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	71fb      	strb	r3, [r7, #7]
	switch(ch) {
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	2b0b      	cmp	r3, #11
 8001086:	f200 8329 	bhi.w	80016dc <MAX31855_CS_Enable+0x664>
 800108a:	a201      	add	r2, pc, #4	@ (adr r2, 8001090 <MAX31855_CS_Enable+0x18>)
 800108c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001090:	080010c1 	.word	0x080010c1
 8001094:	08001143 	.word	0x08001143
 8001098:	080011c5 	.word	0x080011c5
 800109c:	08001247 	.word	0x08001247
 80010a0:	080012c9 	.word	0x080012c9
 80010a4:	0800134b 	.word	0x0800134b
 80010a8:	080013d1 	.word	0x080013d1
 80010ac:	08001453 	.word	0x08001453
 80010b0:	080014d5 	.word	0x080014d5
 80010b4:	08001557 	.word	0x08001557
 80010b8:	080015d9 	.word	0x080015d9
 80010bc:	0800165b 	.word	0x0800165b
	case TC_CH1:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_RESET);
 80010c0:	2200      	movs	r2, #0
 80010c2:	2101      	movs	r1, #1
 80010c4:	48c1      	ldr	r0, [pc, #772]	@ (80013cc <MAX31855_CS_Enable+0x354>)
 80010c6:	f001 fcf7 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 80010ca:	2201      	movs	r2, #1
 80010cc:	2102      	movs	r1, #2
 80010ce:	48bf      	ldr	r0, [pc, #764]	@ (80013cc <MAX31855_CS_Enable+0x354>)
 80010d0:	f001 fcf2 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 80010d4:	2201      	movs	r2, #1
 80010d6:	2104      	movs	r1, #4
 80010d8:	48bc      	ldr	r0, [pc, #752]	@ (80013cc <MAX31855_CS_Enable+0x354>)
 80010da:	f001 fced 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 80010de:	2201      	movs	r2, #1
 80010e0:	2108      	movs	r1, #8
 80010e2:	48ba      	ldr	r0, [pc, #744]	@ (80013cc <MAX31855_CS_Enable+0x354>)
 80010e4:	f001 fce8 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 80010e8:	2201      	movs	r2, #1
 80010ea:	2110      	movs	r1, #16
 80010ec:	48b7      	ldr	r0, [pc, #732]	@ (80013cc <MAX31855_CS_Enable+0x354>)
 80010ee:	f001 fce3 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 80010f2:	2201      	movs	r2, #1
 80010f4:	2120      	movs	r1, #32
 80010f6:	48b5      	ldr	r0, [pc, #724]	@ (80013cc <MAX31855_CS_Enable+0x354>)
 80010f8:	f001 fcde 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 80010fc:	2201      	movs	r2, #1
 80010fe:	2140      	movs	r1, #64	@ 0x40
 8001100:	48b2      	ldr	r0, [pc, #712]	@ (80013cc <MAX31855_CS_Enable+0x354>)
 8001102:	f001 fcd9 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8001106:	2201      	movs	r2, #1
 8001108:	2180      	movs	r1, #128	@ 0x80
 800110a:	48b0      	ldr	r0, [pc, #704]	@ (80013cc <MAX31855_CS_Enable+0x354>)
 800110c:	f001 fcd4 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8001110:	2201      	movs	r2, #1
 8001112:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001116:	48ad      	ldr	r0, [pc, #692]	@ (80013cc <MAX31855_CS_Enable+0x354>)
 8001118:	f001 fcce 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 800111c:	2201      	movs	r2, #1
 800111e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001122:	48aa      	ldr	r0, [pc, #680]	@ (80013cc <MAX31855_CS_Enable+0x354>)
 8001124:	f001 fcc8 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8001128:	2201      	movs	r2, #1
 800112a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800112e:	48a7      	ldr	r0, [pc, #668]	@ (80013cc <MAX31855_CS_Enable+0x354>)
 8001130:	f001 fcc2 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8001134:	2201      	movs	r2, #1
 8001136:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800113a:	48a4      	ldr	r0, [pc, #656]	@ (80013cc <MAX31855_CS_Enable+0x354>)
 800113c:	f001 fcbc 	bl	8002ab8 <HAL_GPIO_WritePin>
		break;
 8001140:	e2cd      	b.n	80016de <MAX31855_CS_Enable+0x666>
	case TC_CH2:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8001142:	2201      	movs	r2, #1
 8001144:	2101      	movs	r1, #1
 8001146:	48a1      	ldr	r0, [pc, #644]	@ (80013cc <MAX31855_CS_Enable+0x354>)
 8001148:	f001 fcb6 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_RESET);
 800114c:	2200      	movs	r2, #0
 800114e:	2102      	movs	r1, #2
 8001150:	489e      	ldr	r0, [pc, #632]	@ (80013cc <MAX31855_CS_Enable+0x354>)
 8001152:	f001 fcb1 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8001156:	2201      	movs	r2, #1
 8001158:	2104      	movs	r1, #4
 800115a:	489c      	ldr	r0, [pc, #624]	@ (80013cc <MAX31855_CS_Enable+0x354>)
 800115c:	f001 fcac 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8001160:	2201      	movs	r2, #1
 8001162:	2108      	movs	r1, #8
 8001164:	4899      	ldr	r0, [pc, #612]	@ (80013cc <MAX31855_CS_Enable+0x354>)
 8001166:	f001 fca7 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 800116a:	2201      	movs	r2, #1
 800116c:	2110      	movs	r1, #16
 800116e:	4897      	ldr	r0, [pc, #604]	@ (80013cc <MAX31855_CS_Enable+0x354>)
 8001170:	f001 fca2 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8001174:	2201      	movs	r2, #1
 8001176:	2120      	movs	r1, #32
 8001178:	4894      	ldr	r0, [pc, #592]	@ (80013cc <MAX31855_CS_Enable+0x354>)
 800117a:	f001 fc9d 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 800117e:	2201      	movs	r2, #1
 8001180:	2140      	movs	r1, #64	@ 0x40
 8001182:	4892      	ldr	r0, [pc, #584]	@ (80013cc <MAX31855_CS_Enable+0x354>)
 8001184:	f001 fc98 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8001188:	2201      	movs	r2, #1
 800118a:	2180      	movs	r1, #128	@ 0x80
 800118c:	488f      	ldr	r0, [pc, #572]	@ (80013cc <MAX31855_CS_Enable+0x354>)
 800118e:	f001 fc93 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8001192:	2201      	movs	r2, #1
 8001194:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001198:	488c      	ldr	r0, [pc, #560]	@ (80013cc <MAX31855_CS_Enable+0x354>)
 800119a:	f001 fc8d 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 800119e:	2201      	movs	r2, #1
 80011a0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011a4:	4889      	ldr	r0, [pc, #548]	@ (80013cc <MAX31855_CS_Enable+0x354>)
 80011a6:	f001 fc87 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 80011aa:	2201      	movs	r2, #1
 80011ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011b0:	4886      	ldr	r0, [pc, #536]	@ (80013cc <MAX31855_CS_Enable+0x354>)
 80011b2:	f001 fc81 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 80011b6:	2201      	movs	r2, #1
 80011b8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011bc:	4883      	ldr	r0, [pc, #524]	@ (80013cc <MAX31855_CS_Enable+0x354>)
 80011be:	f001 fc7b 	bl	8002ab8 <HAL_GPIO_WritePin>
		break;
 80011c2:	e28c      	b.n	80016de <MAX31855_CS_Enable+0x666>
	case TC_CH3:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 80011c4:	2201      	movs	r2, #1
 80011c6:	2101      	movs	r1, #1
 80011c8:	4880      	ldr	r0, [pc, #512]	@ (80013cc <MAX31855_CS_Enable+0x354>)
 80011ca:	f001 fc75 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 80011ce:	2201      	movs	r2, #1
 80011d0:	2102      	movs	r1, #2
 80011d2:	487e      	ldr	r0, [pc, #504]	@ (80013cc <MAX31855_CS_Enable+0x354>)
 80011d4:	f001 fc70 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U3_CS_PIN, GPIO_PIN_RESET);
 80011d8:	2200      	movs	r2, #0
 80011da:	2104      	movs	r1, #4
 80011dc:	487b      	ldr	r0, [pc, #492]	@ (80013cc <MAX31855_CS_Enable+0x354>)
 80011de:	f001 fc6b 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 80011e2:	2201      	movs	r2, #1
 80011e4:	2108      	movs	r1, #8
 80011e6:	4879      	ldr	r0, [pc, #484]	@ (80013cc <MAX31855_CS_Enable+0x354>)
 80011e8:	f001 fc66 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 80011ec:	2201      	movs	r2, #1
 80011ee:	2110      	movs	r1, #16
 80011f0:	4876      	ldr	r0, [pc, #472]	@ (80013cc <MAX31855_CS_Enable+0x354>)
 80011f2:	f001 fc61 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 80011f6:	2201      	movs	r2, #1
 80011f8:	2120      	movs	r1, #32
 80011fa:	4874      	ldr	r0, [pc, #464]	@ (80013cc <MAX31855_CS_Enable+0x354>)
 80011fc:	f001 fc5c 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8001200:	2201      	movs	r2, #1
 8001202:	2140      	movs	r1, #64	@ 0x40
 8001204:	4871      	ldr	r0, [pc, #452]	@ (80013cc <MAX31855_CS_Enable+0x354>)
 8001206:	f001 fc57 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 800120a:	2201      	movs	r2, #1
 800120c:	2180      	movs	r1, #128	@ 0x80
 800120e:	486f      	ldr	r0, [pc, #444]	@ (80013cc <MAX31855_CS_Enable+0x354>)
 8001210:	f001 fc52 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8001214:	2201      	movs	r2, #1
 8001216:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800121a:	486c      	ldr	r0, [pc, #432]	@ (80013cc <MAX31855_CS_Enable+0x354>)
 800121c:	f001 fc4c 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8001220:	2201      	movs	r2, #1
 8001222:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001226:	4869      	ldr	r0, [pc, #420]	@ (80013cc <MAX31855_CS_Enable+0x354>)
 8001228:	f001 fc46 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 800122c:	2201      	movs	r2, #1
 800122e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001232:	4866      	ldr	r0, [pc, #408]	@ (80013cc <MAX31855_CS_Enable+0x354>)
 8001234:	f001 fc40 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8001238:	2201      	movs	r2, #1
 800123a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800123e:	4863      	ldr	r0, [pc, #396]	@ (80013cc <MAX31855_CS_Enable+0x354>)
 8001240:	f001 fc3a 	bl	8002ab8 <HAL_GPIO_WritePin>
		break;
 8001244:	e24b      	b.n	80016de <MAX31855_CS_Enable+0x666>
	case TC_CH4:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8001246:	2201      	movs	r2, #1
 8001248:	2101      	movs	r1, #1
 800124a:	4860      	ldr	r0, [pc, #384]	@ (80013cc <MAX31855_CS_Enable+0x354>)
 800124c:	f001 fc34 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8001250:	2201      	movs	r2, #1
 8001252:	2102      	movs	r1, #2
 8001254:	485d      	ldr	r0, [pc, #372]	@ (80013cc <MAX31855_CS_Enable+0x354>)
 8001256:	f001 fc2f 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 800125a:	2201      	movs	r2, #1
 800125c:	2104      	movs	r1, #4
 800125e:	485b      	ldr	r0, [pc, #364]	@ (80013cc <MAX31855_CS_Enable+0x354>)
 8001260:	f001 fc2a 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U4_CS_PIN, GPIO_PIN_RESET);
 8001264:	2200      	movs	r2, #0
 8001266:	2108      	movs	r1, #8
 8001268:	4858      	ldr	r0, [pc, #352]	@ (80013cc <MAX31855_CS_Enable+0x354>)
 800126a:	f001 fc25 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 800126e:	2201      	movs	r2, #1
 8001270:	2110      	movs	r1, #16
 8001272:	4856      	ldr	r0, [pc, #344]	@ (80013cc <MAX31855_CS_Enable+0x354>)
 8001274:	f001 fc20 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8001278:	2201      	movs	r2, #1
 800127a:	2120      	movs	r1, #32
 800127c:	4853      	ldr	r0, [pc, #332]	@ (80013cc <MAX31855_CS_Enable+0x354>)
 800127e:	f001 fc1b 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8001282:	2201      	movs	r2, #1
 8001284:	2140      	movs	r1, #64	@ 0x40
 8001286:	4851      	ldr	r0, [pc, #324]	@ (80013cc <MAX31855_CS_Enable+0x354>)
 8001288:	f001 fc16 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 800128c:	2201      	movs	r2, #1
 800128e:	2180      	movs	r1, #128	@ 0x80
 8001290:	484e      	ldr	r0, [pc, #312]	@ (80013cc <MAX31855_CS_Enable+0x354>)
 8001292:	f001 fc11 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8001296:	2201      	movs	r2, #1
 8001298:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800129c:	484b      	ldr	r0, [pc, #300]	@ (80013cc <MAX31855_CS_Enable+0x354>)
 800129e:	f001 fc0b 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 80012a2:	2201      	movs	r2, #1
 80012a4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80012a8:	4848      	ldr	r0, [pc, #288]	@ (80013cc <MAX31855_CS_Enable+0x354>)
 80012aa:	f001 fc05 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 80012ae:	2201      	movs	r2, #1
 80012b0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012b4:	4845      	ldr	r0, [pc, #276]	@ (80013cc <MAX31855_CS_Enable+0x354>)
 80012b6:	f001 fbff 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 80012ba:	2201      	movs	r2, #1
 80012bc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80012c0:	4842      	ldr	r0, [pc, #264]	@ (80013cc <MAX31855_CS_Enable+0x354>)
 80012c2:	f001 fbf9 	bl	8002ab8 <HAL_GPIO_WritePin>
		break;
 80012c6:	e20a      	b.n	80016de <MAX31855_CS_Enable+0x666>
	case TC_CH5:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 80012c8:	2201      	movs	r2, #1
 80012ca:	2101      	movs	r1, #1
 80012cc:	483f      	ldr	r0, [pc, #252]	@ (80013cc <MAX31855_CS_Enable+0x354>)
 80012ce:	f001 fbf3 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 80012d2:	2201      	movs	r2, #1
 80012d4:	2102      	movs	r1, #2
 80012d6:	483d      	ldr	r0, [pc, #244]	@ (80013cc <MAX31855_CS_Enable+0x354>)
 80012d8:	f001 fbee 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 80012dc:	2201      	movs	r2, #1
 80012de:	2104      	movs	r1, #4
 80012e0:	483a      	ldr	r0, [pc, #232]	@ (80013cc <MAX31855_CS_Enable+0x354>)
 80012e2:	f001 fbe9 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 80012e6:	2201      	movs	r2, #1
 80012e8:	2108      	movs	r1, #8
 80012ea:	4838      	ldr	r0, [pc, #224]	@ (80013cc <MAX31855_CS_Enable+0x354>)
 80012ec:	f001 fbe4 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U5_CS_PIN, GPIO_PIN_RESET);
 80012f0:	2200      	movs	r2, #0
 80012f2:	2110      	movs	r1, #16
 80012f4:	4835      	ldr	r0, [pc, #212]	@ (80013cc <MAX31855_CS_Enable+0x354>)
 80012f6:	f001 fbdf 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 80012fa:	2201      	movs	r2, #1
 80012fc:	2120      	movs	r1, #32
 80012fe:	4833      	ldr	r0, [pc, #204]	@ (80013cc <MAX31855_CS_Enable+0x354>)
 8001300:	f001 fbda 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8001304:	2201      	movs	r2, #1
 8001306:	2140      	movs	r1, #64	@ 0x40
 8001308:	4830      	ldr	r0, [pc, #192]	@ (80013cc <MAX31855_CS_Enable+0x354>)
 800130a:	f001 fbd5 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 800130e:	2201      	movs	r2, #1
 8001310:	2180      	movs	r1, #128	@ 0x80
 8001312:	482e      	ldr	r0, [pc, #184]	@ (80013cc <MAX31855_CS_Enable+0x354>)
 8001314:	f001 fbd0 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8001318:	2201      	movs	r2, #1
 800131a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800131e:	482b      	ldr	r0, [pc, #172]	@ (80013cc <MAX31855_CS_Enable+0x354>)
 8001320:	f001 fbca 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8001324:	2201      	movs	r2, #1
 8001326:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800132a:	4828      	ldr	r0, [pc, #160]	@ (80013cc <MAX31855_CS_Enable+0x354>)
 800132c:	f001 fbc4 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8001330:	2201      	movs	r2, #1
 8001332:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001336:	4825      	ldr	r0, [pc, #148]	@ (80013cc <MAX31855_CS_Enable+0x354>)
 8001338:	f001 fbbe 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 800133c:	2201      	movs	r2, #1
 800133e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001342:	4822      	ldr	r0, [pc, #136]	@ (80013cc <MAX31855_CS_Enable+0x354>)
 8001344:	f001 fbb8 	bl	8002ab8 <HAL_GPIO_WritePin>
		break;
 8001348:	e1c9      	b.n	80016de <MAX31855_CS_Enable+0x666>
	case TC_CH6:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 800134a:	2201      	movs	r2, #1
 800134c:	2101      	movs	r1, #1
 800134e:	481f      	ldr	r0, [pc, #124]	@ (80013cc <MAX31855_CS_Enable+0x354>)
 8001350:	f001 fbb2 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8001354:	2201      	movs	r2, #1
 8001356:	2102      	movs	r1, #2
 8001358:	481c      	ldr	r0, [pc, #112]	@ (80013cc <MAX31855_CS_Enable+0x354>)
 800135a:	f001 fbad 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 800135e:	2201      	movs	r2, #1
 8001360:	2104      	movs	r1, #4
 8001362:	481a      	ldr	r0, [pc, #104]	@ (80013cc <MAX31855_CS_Enable+0x354>)
 8001364:	f001 fba8 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8001368:	2201      	movs	r2, #1
 800136a:	2108      	movs	r1, #8
 800136c:	4817      	ldr	r0, [pc, #92]	@ (80013cc <MAX31855_CS_Enable+0x354>)
 800136e:	f001 fba3 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8001372:	2201      	movs	r2, #1
 8001374:	2110      	movs	r1, #16
 8001376:	4815      	ldr	r0, [pc, #84]	@ (80013cc <MAX31855_CS_Enable+0x354>)
 8001378:	f001 fb9e 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U6_CS_PIN, GPIO_PIN_RESET);
 800137c:	2200      	movs	r2, #0
 800137e:	2120      	movs	r1, #32
 8001380:	4812      	ldr	r0, [pc, #72]	@ (80013cc <MAX31855_CS_Enable+0x354>)
 8001382:	f001 fb99 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8001386:	2201      	movs	r2, #1
 8001388:	2140      	movs	r1, #64	@ 0x40
 800138a:	4810      	ldr	r0, [pc, #64]	@ (80013cc <MAX31855_CS_Enable+0x354>)
 800138c:	f001 fb94 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8001390:	2201      	movs	r2, #1
 8001392:	2180      	movs	r1, #128	@ 0x80
 8001394:	480d      	ldr	r0, [pc, #52]	@ (80013cc <MAX31855_CS_Enable+0x354>)
 8001396:	f001 fb8f 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 800139a:	2201      	movs	r2, #1
 800139c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80013a0:	480a      	ldr	r0, [pc, #40]	@ (80013cc <MAX31855_CS_Enable+0x354>)
 80013a2:	f001 fb89 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 80013a6:	2201      	movs	r2, #1
 80013a8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80013ac:	4807      	ldr	r0, [pc, #28]	@ (80013cc <MAX31855_CS_Enable+0x354>)
 80013ae:	f001 fb83 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 80013b2:	2201      	movs	r2, #1
 80013b4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013b8:	4804      	ldr	r0, [pc, #16]	@ (80013cc <MAX31855_CS_Enable+0x354>)
 80013ba:	f001 fb7d 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 80013be:	2201      	movs	r2, #1
 80013c0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80013c4:	4801      	ldr	r0, [pc, #4]	@ (80013cc <MAX31855_CS_Enable+0x354>)
 80013c6:	f001 fb77 	bl	8002ab8 <HAL_GPIO_WritePin>
		break;
 80013ca:	e188      	b.n	80016de <MAX31855_CS_Enable+0x666>
 80013cc:	58020c00 	.word	0x58020c00
	case TC_CH7:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 80013d0:	2201      	movs	r2, #1
 80013d2:	2101      	movs	r1, #1
 80013d4:	48c4      	ldr	r0, [pc, #784]	@ (80016e8 <MAX31855_CS_Enable+0x670>)
 80013d6:	f001 fb6f 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 80013da:	2201      	movs	r2, #1
 80013dc:	2102      	movs	r1, #2
 80013de:	48c2      	ldr	r0, [pc, #776]	@ (80016e8 <MAX31855_CS_Enable+0x670>)
 80013e0:	f001 fb6a 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 80013e4:	2201      	movs	r2, #1
 80013e6:	2104      	movs	r1, #4
 80013e8:	48bf      	ldr	r0, [pc, #764]	@ (80016e8 <MAX31855_CS_Enable+0x670>)
 80013ea:	f001 fb65 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 80013ee:	2201      	movs	r2, #1
 80013f0:	2108      	movs	r1, #8
 80013f2:	48bd      	ldr	r0, [pc, #756]	@ (80016e8 <MAX31855_CS_Enable+0x670>)
 80013f4:	f001 fb60 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 80013f8:	2201      	movs	r2, #1
 80013fa:	2110      	movs	r1, #16
 80013fc:	48ba      	ldr	r0, [pc, #744]	@ (80016e8 <MAX31855_CS_Enable+0x670>)
 80013fe:	f001 fb5b 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8001402:	2201      	movs	r2, #1
 8001404:	2120      	movs	r1, #32
 8001406:	48b8      	ldr	r0, [pc, #736]	@ (80016e8 <MAX31855_CS_Enable+0x670>)
 8001408:	f001 fb56 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U7_CS_PIN, GPIO_PIN_RESET);
 800140c:	2200      	movs	r2, #0
 800140e:	2140      	movs	r1, #64	@ 0x40
 8001410:	48b5      	ldr	r0, [pc, #724]	@ (80016e8 <MAX31855_CS_Enable+0x670>)
 8001412:	f001 fb51 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8001416:	2201      	movs	r2, #1
 8001418:	2180      	movs	r1, #128	@ 0x80
 800141a:	48b3      	ldr	r0, [pc, #716]	@ (80016e8 <MAX31855_CS_Enable+0x670>)
 800141c:	f001 fb4c 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8001420:	2201      	movs	r2, #1
 8001422:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001426:	48b0      	ldr	r0, [pc, #704]	@ (80016e8 <MAX31855_CS_Enable+0x670>)
 8001428:	f001 fb46 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 800142c:	2201      	movs	r2, #1
 800142e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001432:	48ad      	ldr	r0, [pc, #692]	@ (80016e8 <MAX31855_CS_Enable+0x670>)
 8001434:	f001 fb40 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8001438:	2201      	movs	r2, #1
 800143a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800143e:	48aa      	ldr	r0, [pc, #680]	@ (80016e8 <MAX31855_CS_Enable+0x670>)
 8001440:	f001 fb3a 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8001444:	2201      	movs	r2, #1
 8001446:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800144a:	48a7      	ldr	r0, [pc, #668]	@ (80016e8 <MAX31855_CS_Enable+0x670>)
 800144c:	f001 fb34 	bl	8002ab8 <HAL_GPIO_WritePin>
		break;
 8001450:	e145      	b.n	80016de <MAX31855_CS_Enable+0x666>
	case TC_CH8:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8001452:	2201      	movs	r2, #1
 8001454:	2101      	movs	r1, #1
 8001456:	48a4      	ldr	r0, [pc, #656]	@ (80016e8 <MAX31855_CS_Enable+0x670>)
 8001458:	f001 fb2e 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 800145c:	2201      	movs	r2, #1
 800145e:	2102      	movs	r1, #2
 8001460:	48a1      	ldr	r0, [pc, #644]	@ (80016e8 <MAX31855_CS_Enable+0x670>)
 8001462:	f001 fb29 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8001466:	2201      	movs	r2, #1
 8001468:	2104      	movs	r1, #4
 800146a:	489f      	ldr	r0, [pc, #636]	@ (80016e8 <MAX31855_CS_Enable+0x670>)
 800146c:	f001 fb24 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8001470:	2201      	movs	r2, #1
 8001472:	2108      	movs	r1, #8
 8001474:	489c      	ldr	r0, [pc, #624]	@ (80016e8 <MAX31855_CS_Enable+0x670>)
 8001476:	f001 fb1f 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 800147a:	2201      	movs	r2, #1
 800147c:	2110      	movs	r1, #16
 800147e:	489a      	ldr	r0, [pc, #616]	@ (80016e8 <MAX31855_CS_Enable+0x670>)
 8001480:	f001 fb1a 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8001484:	2201      	movs	r2, #1
 8001486:	2120      	movs	r1, #32
 8001488:	4897      	ldr	r0, [pc, #604]	@ (80016e8 <MAX31855_CS_Enable+0x670>)
 800148a:	f001 fb15 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 800148e:	2201      	movs	r2, #1
 8001490:	2140      	movs	r1, #64	@ 0x40
 8001492:	4895      	ldr	r0, [pc, #596]	@ (80016e8 <MAX31855_CS_Enable+0x670>)
 8001494:	f001 fb10 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U8_CS_PIN, GPIO_PIN_RESET);
 8001498:	2200      	movs	r2, #0
 800149a:	2180      	movs	r1, #128	@ 0x80
 800149c:	4892      	ldr	r0, [pc, #584]	@ (80016e8 <MAX31855_CS_Enable+0x670>)
 800149e:	f001 fb0b 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 80014a2:	2201      	movs	r2, #1
 80014a4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80014a8:	488f      	ldr	r0, [pc, #572]	@ (80016e8 <MAX31855_CS_Enable+0x670>)
 80014aa:	f001 fb05 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 80014ae:	2201      	movs	r2, #1
 80014b0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014b4:	488c      	ldr	r0, [pc, #560]	@ (80016e8 <MAX31855_CS_Enable+0x670>)
 80014b6:	f001 faff 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 80014ba:	2201      	movs	r2, #1
 80014bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014c0:	4889      	ldr	r0, [pc, #548]	@ (80016e8 <MAX31855_CS_Enable+0x670>)
 80014c2:	f001 faf9 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 80014c6:	2201      	movs	r2, #1
 80014c8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80014cc:	4886      	ldr	r0, [pc, #536]	@ (80016e8 <MAX31855_CS_Enable+0x670>)
 80014ce:	f001 faf3 	bl	8002ab8 <HAL_GPIO_WritePin>
		break;
 80014d2:	e104      	b.n	80016de <MAX31855_CS_Enable+0x666>
	case TC_CH9:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 80014d4:	2201      	movs	r2, #1
 80014d6:	2101      	movs	r1, #1
 80014d8:	4883      	ldr	r0, [pc, #524]	@ (80016e8 <MAX31855_CS_Enable+0x670>)
 80014da:	f001 faed 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 80014de:	2201      	movs	r2, #1
 80014e0:	2102      	movs	r1, #2
 80014e2:	4881      	ldr	r0, [pc, #516]	@ (80016e8 <MAX31855_CS_Enable+0x670>)
 80014e4:	f001 fae8 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 80014e8:	2201      	movs	r2, #1
 80014ea:	2104      	movs	r1, #4
 80014ec:	487e      	ldr	r0, [pc, #504]	@ (80016e8 <MAX31855_CS_Enable+0x670>)
 80014ee:	f001 fae3 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 80014f2:	2201      	movs	r2, #1
 80014f4:	2108      	movs	r1, #8
 80014f6:	487c      	ldr	r0, [pc, #496]	@ (80016e8 <MAX31855_CS_Enable+0x670>)
 80014f8:	f001 fade 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 80014fc:	2201      	movs	r2, #1
 80014fe:	2110      	movs	r1, #16
 8001500:	4879      	ldr	r0, [pc, #484]	@ (80016e8 <MAX31855_CS_Enable+0x670>)
 8001502:	f001 fad9 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8001506:	2201      	movs	r2, #1
 8001508:	2120      	movs	r1, #32
 800150a:	4877      	ldr	r0, [pc, #476]	@ (80016e8 <MAX31855_CS_Enable+0x670>)
 800150c:	f001 fad4 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8001510:	2201      	movs	r2, #1
 8001512:	2140      	movs	r1, #64	@ 0x40
 8001514:	4874      	ldr	r0, [pc, #464]	@ (80016e8 <MAX31855_CS_Enable+0x670>)
 8001516:	f001 facf 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 800151a:	2201      	movs	r2, #1
 800151c:	2180      	movs	r1, #128	@ 0x80
 800151e:	4872      	ldr	r0, [pc, #456]	@ (80016e8 <MAX31855_CS_Enable+0x670>)
 8001520:	f001 faca 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U9_CS_PIN, GPIO_PIN_RESET);
 8001524:	2200      	movs	r2, #0
 8001526:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800152a:	486f      	ldr	r0, [pc, #444]	@ (80016e8 <MAX31855_CS_Enable+0x670>)
 800152c:	f001 fac4 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8001530:	2201      	movs	r2, #1
 8001532:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001536:	486c      	ldr	r0, [pc, #432]	@ (80016e8 <MAX31855_CS_Enable+0x670>)
 8001538:	f001 fabe 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 800153c:	2201      	movs	r2, #1
 800153e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001542:	4869      	ldr	r0, [pc, #420]	@ (80016e8 <MAX31855_CS_Enable+0x670>)
 8001544:	f001 fab8 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8001548:	2201      	movs	r2, #1
 800154a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800154e:	4866      	ldr	r0, [pc, #408]	@ (80016e8 <MAX31855_CS_Enable+0x670>)
 8001550:	f001 fab2 	bl	8002ab8 <HAL_GPIO_WritePin>
		break;
 8001554:	e0c3      	b.n	80016de <MAX31855_CS_Enable+0x666>
	case TC_CH10:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8001556:	2201      	movs	r2, #1
 8001558:	2101      	movs	r1, #1
 800155a:	4863      	ldr	r0, [pc, #396]	@ (80016e8 <MAX31855_CS_Enable+0x670>)
 800155c:	f001 faac 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8001560:	2201      	movs	r2, #1
 8001562:	2102      	movs	r1, #2
 8001564:	4860      	ldr	r0, [pc, #384]	@ (80016e8 <MAX31855_CS_Enable+0x670>)
 8001566:	f001 faa7 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 800156a:	2201      	movs	r2, #1
 800156c:	2104      	movs	r1, #4
 800156e:	485e      	ldr	r0, [pc, #376]	@ (80016e8 <MAX31855_CS_Enable+0x670>)
 8001570:	f001 faa2 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8001574:	2201      	movs	r2, #1
 8001576:	2108      	movs	r1, #8
 8001578:	485b      	ldr	r0, [pc, #364]	@ (80016e8 <MAX31855_CS_Enable+0x670>)
 800157a:	f001 fa9d 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 800157e:	2201      	movs	r2, #1
 8001580:	2110      	movs	r1, #16
 8001582:	4859      	ldr	r0, [pc, #356]	@ (80016e8 <MAX31855_CS_Enable+0x670>)
 8001584:	f001 fa98 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8001588:	2201      	movs	r2, #1
 800158a:	2120      	movs	r1, #32
 800158c:	4856      	ldr	r0, [pc, #344]	@ (80016e8 <MAX31855_CS_Enable+0x670>)
 800158e:	f001 fa93 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8001592:	2201      	movs	r2, #1
 8001594:	2140      	movs	r1, #64	@ 0x40
 8001596:	4854      	ldr	r0, [pc, #336]	@ (80016e8 <MAX31855_CS_Enable+0x670>)
 8001598:	f001 fa8e 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 800159c:	2201      	movs	r2, #1
 800159e:	2180      	movs	r1, #128	@ 0x80
 80015a0:	4851      	ldr	r0, [pc, #324]	@ (80016e8 <MAX31855_CS_Enable+0x670>)
 80015a2:	f001 fa89 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 80015a6:	2201      	movs	r2, #1
 80015a8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80015ac:	484e      	ldr	r0, [pc, #312]	@ (80016e8 <MAX31855_CS_Enable+0x670>)
 80015ae:	f001 fa83 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U10_CS_PIN, GPIO_PIN_RESET);
 80015b2:	2200      	movs	r2, #0
 80015b4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80015b8:	484b      	ldr	r0, [pc, #300]	@ (80016e8 <MAX31855_CS_Enable+0x670>)
 80015ba:	f001 fa7d 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 80015be:	2201      	movs	r2, #1
 80015c0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015c4:	4848      	ldr	r0, [pc, #288]	@ (80016e8 <MAX31855_CS_Enable+0x670>)
 80015c6:	f001 fa77 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 80015ca:	2201      	movs	r2, #1
 80015cc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80015d0:	4845      	ldr	r0, [pc, #276]	@ (80016e8 <MAX31855_CS_Enable+0x670>)
 80015d2:	f001 fa71 	bl	8002ab8 <HAL_GPIO_WritePin>
		break;
 80015d6:	e082      	b.n	80016de <MAX31855_CS_Enable+0x666>
	case TC_CH11:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 80015d8:	2201      	movs	r2, #1
 80015da:	2101      	movs	r1, #1
 80015dc:	4842      	ldr	r0, [pc, #264]	@ (80016e8 <MAX31855_CS_Enable+0x670>)
 80015de:	f001 fa6b 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 80015e2:	2201      	movs	r2, #1
 80015e4:	2102      	movs	r1, #2
 80015e6:	4840      	ldr	r0, [pc, #256]	@ (80016e8 <MAX31855_CS_Enable+0x670>)
 80015e8:	f001 fa66 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 80015ec:	2201      	movs	r2, #1
 80015ee:	2104      	movs	r1, #4
 80015f0:	483d      	ldr	r0, [pc, #244]	@ (80016e8 <MAX31855_CS_Enable+0x670>)
 80015f2:	f001 fa61 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 80015f6:	2201      	movs	r2, #1
 80015f8:	2108      	movs	r1, #8
 80015fa:	483b      	ldr	r0, [pc, #236]	@ (80016e8 <MAX31855_CS_Enable+0x670>)
 80015fc:	f001 fa5c 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8001600:	2201      	movs	r2, #1
 8001602:	2110      	movs	r1, #16
 8001604:	4838      	ldr	r0, [pc, #224]	@ (80016e8 <MAX31855_CS_Enable+0x670>)
 8001606:	f001 fa57 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 800160a:	2201      	movs	r2, #1
 800160c:	2120      	movs	r1, #32
 800160e:	4836      	ldr	r0, [pc, #216]	@ (80016e8 <MAX31855_CS_Enable+0x670>)
 8001610:	f001 fa52 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8001614:	2201      	movs	r2, #1
 8001616:	2140      	movs	r1, #64	@ 0x40
 8001618:	4833      	ldr	r0, [pc, #204]	@ (80016e8 <MAX31855_CS_Enable+0x670>)
 800161a:	f001 fa4d 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 800161e:	2201      	movs	r2, #1
 8001620:	2180      	movs	r1, #128	@ 0x80
 8001622:	4831      	ldr	r0, [pc, #196]	@ (80016e8 <MAX31855_CS_Enable+0x670>)
 8001624:	f001 fa48 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8001628:	2201      	movs	r2, #1
 800162a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800162e:	482e      	ldr	r0, [pc, #184]	@ (80016e8 <MAX31855_CS_Enable+0x670>)
 8001630:	f001 fa42 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8001634:	2201      	movs	r2, #1
 8001636:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800163a:	482b      	ldr	r0, [pc, #172]	@ (80016e8 <MAX31855_CS_Enable+0x670>)
 800163c:	f001 fa3c 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U11_CS_PIN, GPIO_PIN_RESET);
 8001640:	2200      	movs	r2, #0
 8001642:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001646:	4828      	ldr	r0, [pc, #160]	@ (80016e8 <MAX31855_CS_Enable+0x670>)
 8001648:	f001 fa36 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 800164c:	2201      	movs	r2, #1
 800164e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001652:	4825      	ldr	r0, [pc, #148]	@ (80016e8 <MAX31855_CS_Enable+0x670>)
 8001654:	f001 fa30 	bl	8002ab8 <HAL_GPIO_WritePin>
		break;
 8001658:	e041      	b.n	80016de <MAX31855_CS_Enable+0x666>
	case TC_CH12:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 800165a:	2201      	movs	r2, #1
 800165c:	2101      	movs	r1, #1
 800165e:	4822      	ldr	r0, [pc, #136]	@ (80016e8 <MAX31855_CS_Enable+0x670>)
 8001660:	f001 fa2a 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8001664:	2201      	movs	r2, #1
 8001666:	2102      	movs	r1, #2
 8001668:	481f      	ldr	r0, [pc, #124]	@ (80016e8 <MAX31855_CS_Enable+0x670>)
 800166a:	f001 fa25 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 800166e:	2201      	movs	r2, #1
 8001670:	2104      	movs	r1, #4
 8001672:	481d      	ldr	r0, [pc, #116]	@ (80016e8 <MAX31855_CS_Enable+0x670>)
 8001674:	f001 fa20 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8001678:	2201      	movs	r2, #1
 800167a:	2108      	movs	r1, #8
 800167c:	481a      	ldr	r0, [pc, #104]	@ (80016e8 <MAX31855_CS_Enable+0x670>)
 800167e:	f001 fa1b 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8001682:	2201      	movs	r2, #1
 8001684:	2110      	movs	r1, #16
 8001686:	4818      	ldr	r0, [pc, #96]	@ (80016e8 <MAX31855_CS_Enable+0x670>)
 8001688:	f001 fa16 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 800168c:	2201      	movs	r2, #1
 800168e:	2120      	movs	r1, #32
 8001690:	4815      	ldr	r0, [pc, #84]	@ (80016e8 <MAX31855_CS_Enable+0x670>)
 8001692:	f001 fa11 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8001696:	2201      	movs	r2, #1
 8001698:	2140      	movs	r1, #64	@ 0x40
 800169a:	4813      	ldr	r0, [pc, #76]	@ (80016e8 <MAX31855_CS_Enable+0x670>)
 800169c:	f001 fa0c 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 80016a0:	2201      	movs	r2, #1
 80016a2:	2180      	movs	r1, #128	@ 0x80
 80016a4:	4810      	ldr	r0, [pc, #64]	@ (80016e8 <MAX31855_CS_Enable+0x670>)
 80016a6:	f001 fa07 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 80016aa:	2201      	movs	r2, #1
 80016ac:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80016b0:	480d      	ldr	r0, [pc, #52]	@ (80016e8 <MAX31855_CS_Enable+0x670>)
 80016b2:	f001 fa01 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 80016b6:	2201      	movs	r2, #1
 80016b8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80016bc:	480a      	ldr	r0, [pc, #40]	@ (80016e8 <MAX31855_CS_Enable+0x670>)
 80016be:	f001 f9fb 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 80016c2:	2201      	movs	r2, #1
 80016c4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80016c8:	4807      	ldr	r0, [pc, #28]	@ (80016e8 <MAX31855_CS_Enable+0x670>)
 80016ca:	f001 f9f5 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U12_CS_PIN, GPIO_PIN_RESET);
 80016ce:	2200      	movs	r2, #0
 80016d0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80016d4:	4804      	ldr	r0, [pc, #16]	@ (80016e8 <MAX31855_CS_Enable+0x670>)
 80016d6:	f001 f9ef 	bl	8002ab8 <HAL_GPIO_WritePin>
		break;
 80016da:	e000      	b.n	80016de <MAX31855_CS_Enable+0x666>
	default:
		break;
 80016dc:	bf00      	nop
	}
}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	58020c00 	.word	0x58020c00

080016ec <MAX31855_CS_Disable>:

// CS 핀을 High로 설정 (SPI 통신 종료)
void MAX31855_CS_Disable(uint8_t ch)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	71fb      	strb	r3, [r7, #7]
	switch(ch) {
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	2b0b      	cmp	r3, #11
 80016fa:	f200 8329 	bhi.w	8001d50 <MAX31855_CS_Disable+0x664>
 80016fe:	a201      	add	r2, pc, #4	@ (adr r2, 8001704 <MAX31855_CS_Disable+0x18>)
 8001700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001704:	08001735 	.word	0x08001735
 8001708:	080017b7 	.word	0x080017b7
 800170c:	08001839 	.word	0x08001839
 8001710:	080018bb 	.word	0x080018bb
 8001714:	0800193d 	.word	0x0800193d
 8001718:	080019bf 	.word	0x080019bf
 800171c:	08001a45 	.word	0x08001a45
 8001720:	08001ac7 	.word	0x08001ac7
 8001724:	08001b49 	.word	0x08001b49
 8001728:	08001bcb 	.word	0x08001bcb
 800172c:	08001c4d 	.word	0x08001c4d
 8001730:	08001ccf 	.word	0x08001ccf
	case TC_CH1:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8001734:	2201      	movs	r2, #1
 8001736:	2101      	movs	r1, #1
 8001738:	48c1      	ldr	r0, [pc, #772]	@ (8001a40 <MAX31855_CS_Disable+0x354>)
 800173a:	f001 f9bd 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 800173e:	2201      	movs	r2, #1
 8001740:	2102      	movs	r1, #2
 8001742:	48bf      	ldr	r0, [pc, #764]	@ (8001a40 <MAX31855_CS_Disable+0x354>)
 8001744:	f001 f9b8 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8001748:	2201      	movs	r2, #1
 800174a:	2104      	movs	r1, #4
 800174c:	48bc      	ldr	r0, [pc, #752]	@ (8001a40 <MAX31855_CS_Disable+0x354>)
 800174e:	f001 f9b3 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8001752:	2201      	movs	r2, #1
 8001754:	2108      	movs	r1, #8
 8001756:	48ba      	ldr	r0, [pc, #744]	@ (8001a40 <MAX31855_CS_Disable+0x354>)
 8001758:	f001 f9ae 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 800175c:	2201      	movs	r2, #1
 800175e:	2110      	movs	r1, #16
 8001760:	48b7      	ldr	r0, [pc, #732]	@ (8001a40 <MAX31855_CS_Disable+0x354>)
 8001762:	f001 f9a9 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8001766:	2201      	movs	r2, #1
 8001768:	2120      	movs	r1, #32
 800176a:	48b5      	ldr	r0, [pc, #724]	@ (8001a40 <MAX31855_CS_Disable+0x354>)
 800176c:	f001 f9a4 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8001770:	2201      	movs	r2, #1
 8001772:	2140      	movs	r1, #64	@ 0x40
 8001774:	48b2      	ldr	r0, [pc, #712]	@ (8001a40 <MAX31855_CS_Disable+0x354>)
 8001776:	f001 f99f 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 800177a:	2201      	movs	r2, #1
 800177c:	2180      	movs	r1, #128	@ 0x80
 800177e:	48b0      	ldr	r0, [pc, #704]	@ (8001a40 <MAX31855_CS_Disable+0x354>)
 8001780:	f001 f99a 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8001784:	2201      	movs	r2, #1
 8001786:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800178a:	48ad      	ldr	r0, [pc, #692]	@ (8001a40 <MAX31855_CS_Disable+0x354>)
 800178c:	f001 f994 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8001790:	2201      	movs	r2, #1
 8001792:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001796:	48aa      	ldr	r0, [pc, #680]	@ (8001a40 <MAX31855_CS_Disable+0x354>)
 8001798:	f001 f98e 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 800179c:	2201      	movs	r2, #1
 800179e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80017a2:	48a7      	ldr	r0, [pc, #668]	@ (8001a40 <MAX31855_CS_Disable+0x354>)
 80017a4:	f001 f988 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 80017a8:	2201      	movs	r2, #1
 80017aa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80017ae:	48a4      	ldr	r0, [pc, #656]	@ (8001a40 <MAX31855_CS_Disable+0x354>)
 80017b0:	f001 f982 	bl	8002ab8 <HAL_GPIO_WritePin>
		break;
 80017b4:	e2cd      	b.n	8001d52 <MAX31855_CS_Disable+0x666>
	case TC_CH2:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 80017b6:	2201      	movs	r2, #1
 80017b8:	2101      	movs	r1, #1
 80017ba:	48a1      	ldr	r0, [pc, #644]	@ (8001a40 <MAX31855_CS_Disable+0x354>)
 80017bc:	f001 f97c 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 80017c0:	2201      	movs	r2, #1
 80017c2:	2102      	movs	r1, #2
 80017c4:	489e      	ldr	r0, [pc, #632]	@ (8001a40 <MAX31855_CS_Disable+0x354>)
 80017c6:	f001 f977 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 80017ca:	2201      	movs	r2, #1
 80017cc:	2104      	movs	r1, #4
 80017ce:	489c      	ldr	r0, [pc, #624]	@ (8001a40 <MAX31855_CS_Disable+0x354>)
 80017d0:	f001 f972 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 80017d4:	2201      	movs	r2, #1
 80017d6:	2108      	movs	r1, #8
 80017d8:	4899      	ldr	r0, [pc, #612]	@ (8001a40 <MAX31855_CS_Disable+0x354>)
 80017da:	f001 f96d 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 80017de:	2201      	movs	r2, #1
 80017e0:	2110      	movs	r1, #16
 80017e2:	4897      	ldr	r0, [pc, #604]	@ (8001a40 <MAX31855_CS_Disable+0x354>)
 80017e4:	f001 f968 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 80017e8:	2201      	movs	r2, #1
 80017ea:	2120      	movs	r1, #32
 80017ec:	4894      	ldr	r0, [pc, #592]	@ (8001a40 <MAX31855_CS_Disable+0x354>)
 80017ee:	f001 f963 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 80017f2:	2201      	movs	r2, #1
 80017f4:	2140      	movs	r1, #64	@ 0x40
 80017f6:	4892      	ldr	r0, [pc, #584]	@ (8001a40 <MAX31855_CS_Disable+0x354>)
 80017f8:	f001 f95e 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 80017fc:	2201      	movs	r2, #1
 80017fe:	2180      	movs	r1, #128	@ 0x80
 8001800:	488f      	ldr	r0, [pc, #572]	@ (8001a40 <MAX31855_CS_Disable+0x354>)
 8001802:	f001 f959 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8001806:	2201      	movs	r2, #1
 8001808:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800180c:	488c      	ldr	r0, [pc, #560]	@ (8001a40 <MAX31855_CS_Disable+0x354>)
 800180e:	f001 f953 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8001812:	2201      	movs	r2, #1
 8001814:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001818:	4889      	ldr	r0, [pc, #548]	@ (8001a40 <MAX31855_CS_Disable+0x354>)
 800181a:	f001 f94d 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 800181e:	2201      	movs	r2, #1
 8001820:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001824:	4886      	ldr	r0, [pc, #536]	@ (8001a40 <MAX31855_CS_Disable+0x354>)
 8001826:	f001 f947 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 800182a:	2201      	movs	r2, #1
 800182c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001830:	4883      	ldr	r0, [pc, #524]	@ (8001a40 <MAX31855_CS_Disable+0x354>)
 8001832:	f001 f941 	bl	8002ab8 <HAL_GPIO_WritePin>
		break;
 8001836:	e28c      	b.n	8001d52 <MAX31855_CS_Disable+0x666>
	case TC_CH3:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8001838:	2201      	movs	r2, #1
 800183a:	2101      	movs	r1, #1
 800183c:	4880      	ldr	r0, [pc, #512]	@ (8001a40 <MAX31855_CS_Disable+0x354>)
 800183e:	f001 f93b 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8001842:	2201      	movs	r2, #1
 8001844:	2102      	movs	r1, #2
 8001846:	487e      	ldr	r0, [pc, #504]	@ (8001a40 <MAX31855_CS_Disable+0x354>)
 8001848:	f001 f936 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 800184c:	2201      	movs	r2, #1
 800184e:	2104      	movs	r1, #4
 8001850:	487b      	ldr	r0, [pc, #492]	@ (8001a40 <MAX31855_CS_Disable+0x354>)
 8001852:	f001 f931 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8001856:	2201      	movs	r2, #1
 8001858:	2108      	movs	r1, #8
 800185a:	4879      	ldr	r0, [pc, #484]	@ (8001a40 <MAX31855_CS_Disable+0x354>)
 800185c:	f001 f92c 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8001860:	2201      	movs	r2, #1
 8001862:	2110      	movs	r1, #16
 8001864:	4876      	ldr	r0, [pc, #472]	@ (8001a40 <MAX31855_CS_Disable+0x354>)
 8001866:	f001 f927 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 800186a:	2201      	movs	r2, #1
 800186c:	2120      	movs	r1, #32
 800186e:	4874      	ldr	r0, [pc, #464]	@ (8001a40 <MAX31855_CS_Disable+0x354>)
 8001870:	f001 f922 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8001874:	2201      	movs	r2, #1
 8001876:	2140      	movs	r1, #64	@ 0x40
 8001878:	4871      	ldr	r0, [pc, #452]	@ (8001a40 <MAX31855_CS_Disable+0x354>)
 800187a:	f001 f91d 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 800187e:	2201      	movs	r2, #1
 8001880:	2180      	movs	r1, #128	@ 0x80
 8001882:	486f      	ldr	r0, [pc, #444]	@ (8001a40 <MAX31855_CS_Disable+0x354>)
 8001884:	f001 f918 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8001888:	2201      	movs	r2, #1
 800188a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800188e:	486c      	ldr	r0, [pc, #432]	@ (8001a40 <MAX31855_CS_Disable+0x354>)
 8001890:	f001 f912 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8001894:	2201      	movs	r2, #1
 8001896:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800189a:	4869      	ldr	r0, [pc, #420]	@ (8001a40 <MAX31855_CS_Disable+0x354>)
 800189c:	f001 f90c 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 80018a0:	2201      	movs	r2, #1
 80018a2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80018a6:	4866      	ldr	r0, [pc, #408]	@ (8001a40 <MAX31855_CS_Disable+0x354>)
 80018a8:	f001 f906 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 80018ac:	2201      	movs	r2, #1
 80018ae:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80018b2:	4863      	ldr	r0, [pc, #396]	@ (8001a40 <MAX31855_CS_Disable+0x354>)
 80018b4:	f001 f900 	bl	8002ab8 <HAL_GPIO_WritePin>
		break;
 80018b8:	e24b      	b.n	8001d52 <MAX31855_CS_Disable+0x666>
	case TC_CH4:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 80018ba:	2201      	movs	r2, #1
 80018bc:	2101      	movs	r1, #1
 80018be:	4860      	ldr	r0, [pc, #384]	@ (8001a40 <MAX31855_CS_Disable+0x354>)
 80018c0:	f001 f8fa 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 80018c4:	2201      	movs	r2, #1
 80018c6:	2102      	movs	r1, #2
 80018c8:	485d      	ldr	r0, [pc, #372]	@ (8001a40 <MAX31855_CS_Disable+0x354>)
 80018ca:	f001 f8f5 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 80018ce:	2201      	movs	r2, #1
 80018d0:	2104      	movs	r1, #4
 80018d2:	485b      	ldr	r0, [pc, #364]	@ (8001a40 <MAX31855_CS_Disable+0x354>)
 80018d4:	f001 f8f0 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 80018d8:	2201      	movs	r2, #1
 80018da:	2108      	movs	r1, #8
 80018dc:	4858      	ldr	r0, [pc, #352]	@ (8001a40 <MAX31855_CS_Disable+0x354>)
 80018de:	f001 f8eb 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 80018e2:	2201      	movs	r2, #1
 80018e4:	2110      	movs	r1, #16
 80018e6:	4856      	ldr	r0, [pc, #344]	@ (8001a40 <MAX31855_CS_Disable+0x354>)
 80018e8:	f001 f8e6 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 80018ec:	2201      	movs	r2, #1
 80018ee:	2120      	movs	r1, #32
 80018f0:	4853      	ldr	r0, [pc, #332]	@ (8001a40 <MAX31855_CS_Disable+0x354>)
 80018f2:	f001 f8e1 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 80018f6:	2201      	movs	r2, #1
 80018f8:	2140      	movs	r1, #64	@ 0x40
 80018fa:	4851      	ldr	r0, [pc, #324]	@ (8001a40 <MAX31855_CS_Disable+0x354>)
 80018fc:	f001 f8dc 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8001900:	2201      	movs	r2, #1
 8001902:	2180      	movs	r1, #128	@ 0x80
 8001904:	484e      	ldr	r0, [pc, #312]	@ (8001a40 <MAX31855_CS_Disable+0x354>)
 8001906:	f001 f8d7 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 800190a:	2201      	movs	r2, #1
 800190c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001910:	484b      	ldr	r0, [pc, #300]	@ (8001a40 <MAX31855_CS_Disable+0x354>)
 8001912:	f001 f8d1 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8001916:	2201      	movs	r2, #1
 8001918:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800191c:	4848      	ldr	r0, [pc, #288]	@ (8001a40 <MAX31855_CS_Disable+0x354>)
 800191e:	f001 f8cb 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8001922:	2201      	movs	r2, #1
 8001924:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001928:	4845      	ldr	r0, [pc, #276]	@ (8001a40 <MAX31855_CS_Disable+0x354>)
 800192a:	f001 f8c5 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 800192e:	2201      	movs	r2, #1
 8001930:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001934:	4842      	ldr	r0, [pc, #264]	@ (8001a40 <MAX31855_CS_Disable+0x354>)
 8001936:	f001 f8bf 	bl	8002ab8 <HAL_GPIO_WritePin>
		break;
 800193a:	e20a      	b.n	8001d52 <MAX31855_CS_Disable+0x666>
	case TC_CH5:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 800193c:	2201      	movs	r2, #1
 800193e:	2101      	movs	r1, #1
 8001940:	483f      	ldr	r0, [pc, #252]	@ (8001a40 <MAX31855_CS_Disable+0x354>)
 8001942:	f001 f8b9 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8001946:	2201      	movs	r2, #1
 8001948:	2102      	movs	r1, #2
 800194a:	483d      	ldr	r0, [pc, #244]	@ (8001a40 <MAX31855_CS_Disable+0x354>)
 800194c:	f001 f8b4 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8001950:	2201      	movs	r2, #1
 8001952:	2104      	movs	r1, #4
 8001954:	483a      	ldr	r0, [pc, #232]	@ (8001a40 <MAX31855_CS_Disable+0x354>)
 8001956:	f001 f8af 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 800195a:	2201      	movs	r2, #1
 800195c:	2108      	movs	r1, #8
 800195e:	4838      	ldr	r0, [pc, #224]	@ (8001a40 <MAX31855_CS_Disable+0x354>)
 8001960:	f001 f8aa 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8001964:	2201      	movs	r2, #1
 8001966:	2110      	movs	r1, #16
 8001968:	4835      	ldr	r0, [pc, #212]	@ (8001a40 <MAX31855_CS_Disable+0x354>)
 800196a:	f001 f8a5 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 800196e:	2201      	movs	r2, #1
 8001970:	2120      	movs	r1, #32
 8001972:	4833      	ldr	r0, [pc, #204]	@ (8001a40 <MAX31855_CS_Disable+0x354>)
 8001974:	f001 f8a0 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8001978:	2201      	movs	r2, #1
 800197a:	2140      	movs	r1, #64	@ 0x40
 800197c:	4830      	ldr	r0, [pc, #192]	@ (8001a40 <MAX31855_CS_Disable+0x354>)
 800197e:	f001 f89b 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8001982:	2201      	movs	r2, #1
 8001984:	2180      	movs	r1, #128	@ 0x80
 8001986:	482e      	ldr	r0, [pc, #184]	@ (8001a40 <MAX31855_CS_Disable+0x354>)
 8001988:	f001 f896 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 800198c:	2201      	movs	r2, #1
 800198e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001992:	482b      	ldr	r0, [pc, #172]	@ (8001a40 <MAX31855_CS_Disable+0x354>)
 8001994:	f001 f890 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8001998:	2201      	movs	r2, #1
 800199a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800199e:	4828      	ldr	r0, [pc, #160]	@ (8001a40 <MAX31855_CS_Disable+0x354>)
 80019a0:	f001 f88a 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 80019a4:	2201      	movs	r2, #1
 80019a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80019aa:	4825      	ldr	r0, [pc, #148]	@ (8001a40 <MAX31855_CS_Disable+0x354>)
 80019ac:	f001 f884 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 80019b0:	2201      	movs	r2, #1
 80019b2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80019b6:	4822      	ldr	r0, [pc, #136]	@ (8001a40 <MAX31855_CS_Disable+0x354>)
 80019b8:	f001 f87e 	bl	8002ab8 <HAL_GPIO_WritePin>
		break;
 80019bc:	e1c9      	b.n	8001d52 <MAX31855_CS_Disable+0x666>
	case TC_CH6:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 80019be:	2201      	movs	r2, #1
 80019c0:	2101      	movs	r1, #1
 80019c2:	481f      	ldr	r0, [pc, #124]	@ (8001a40 <MAX31855_CS_Disable+0x354>)
 80019c4:	f001 f878 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 80019c8:	2201      	movs	r2, #1
 80019ca:	2102      	movs	r1, #2
 80019cc:	481c      	ldr	r0, [pc, #112]	@ (8001a40 <MAX31855_CS_Disable+0x354>)
 80019ce:	f001 f873 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 80019d2:	2201      	movs	r2, #1
 80019d4:	2104      	movs	r1, #4
 80019d6:	481a      	ldr	r0, [pc, #104]	@ (8001a40 <MAX31855_CS_Disable+0x354>)
 80019d8:	f001 f86e 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 80019dc:	2201      	movs	r2, #1
 80019de:	2108      	movs	r1, #8
 80019e0:	4817      	ldr	r0, [pc, #92]	@ (8001a40 <MAX31855_CS_Disable+0x354>)
 80019e2:	f001 f869 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 80019e6:	2201      	movs	r2, #1
 80019e8:	2110      	movs	r1, #16
 80019ea:	4815      	ldr	r0, [pc, #84]	@ (8001a40 <MAX31855_CS_Disable+0x354>)
 80019ec:	f001 f864 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 80019f0:	2201      	movs	r2, #1
 80019f2:	2120      	movs	r1, #32
 80019f4:	4812      	ldr	r0, [pc, #72]	@ (8001a40 <MAX31855_CS_Disable+0x354>)
 80019f6:	f001 f85f 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 80019fa:	2201      	movs	r2, #1
 80019fc:	2140      	movs	r1, #64	@ 0x40
 80019fe:	4810      	ldr	r0, [pc, #64]	@ (8001a40 <MAX31855_CS_Disable+0x354>)
 8001a00:	f001 f85a 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8001a04:	2201      	movs	r2, #1
 8001a06:	2180      	movs	r1, #128	@ 0x80
 8001a08:	480d      	ldr	r0, [pc, #52]	@ (8001a40 <MAX31855_CS_Disable+0x354>)
 8001a0a:	f001 f855 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a14:	480a      	ldr	r0, [pc, #40]	@ (8001a40 <MAX31855_CS_Disable+0x354>)
 8001a16:	f001 f84f 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a20:	4807      	ldr	r0, [pc, #28]	@ (8001a40 <MAX31855_CS_Disable+0x354>)
 8001a22:	f001 f849 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8001a26:	2201      	movs	r2, #1
 8001a28:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a2c:	4804      	ldr	r0, [pc, #16]	@ (8001a40 <MAX31855_CS_Disable+0x354>)
 8001a2e:	f001 f843 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8001a32:	2201      	movs	r2, #1
 8001a34:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001a38:	4801      	ldr	r0, [pc, #4]	@ (8001a40 <MAX31855_CS_Disable+0x354>)
 8001a3a:	f001 f83d 	bl	8002ab8 <HAL_GPIO_WritePin>
		break;
 8001a3e:	e188      	b.n	8001d52 <MAX31855_CS_Disable+0x666>
 8001a40:	58020c00 	.word	0x58020c00
	case TC_CH7:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8001a44:	2201      	movs	r2, #1
 8001a46:	2101      	movs	r1, #1
 8001a48:	48c4      	ldr	r0, [pc, #784]	@ (8001d5c <MAX31855_CS_Disable+0x670>)
 8001a4a:	f001 f835 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8001a4e:	2201      	movs	r2, #1
 8001a50:	2102      	movs	r1, #2
 8001a52:	48c2      	ldr	r0, [pc, #776]	@ (8001d5c <MAX31855_CS_Disable+0x670>)
 8001a54:	f001 f830 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8001a58:	2201      	movs	r2, #1
 8001a5a:	2104      	movs	r1, #4
 8001a5c:	48bf      	ldr	r0, [pc, #764]	@ (8001d5c <MAX31855_CS_Disable+0x670>)
 8001a5e:	f001 f82b 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8001a62:	2201      	movs	r2, #1
 8001a64:	2108      	movs	r1, #8
 8001a66:	48bd      	ldr	r0, [pc, #756]	@ (8001d5c <MAX31855_CS_Disable+0x670>)
 8001a68:	f001 f826 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	2110      	movs	r1, #16
 8001a70:	48ba      	ldr	r0, [pc, #744]	@ (8001d5c <MAX31855_CS_Disable+0x670>)
 8001a72:	f001 f821 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8001a76:	2201      	movs	r2, #1
 8001a78:	2120      	movs	r1, #32
 8001a7a:	48b8      	ldr	r0, [pc, #736]	@ (8001d5c <MAX31855_CS_Disable+0x670>)
 8001a7c:	f001 f81c 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8001a80:	2201      	movs	r2, #1
 8001a82:	2140      	movs	r1, #64	@ 0x40
 8001a84:	48b5      	ldr	r0, [pc, #724]	@ (8001d5c <MAX31855_CS_Disable+0x670>)
 8001a86:	f001 f817 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	2180      	movs	r1, #128	@ 0x80
 8001a8e:	48b3      	ldr	r0, [pc, #716]	@ (8001d5c <MAX31855_CS_Disable+0x670>)
 8001a90:	f001 f812 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8001a94:	2201      	movs	r2, #1
 8001a96:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a9a:	48b0      	ldr	r0, [pc, #704]	@ (8001d5c <MAX31855_CS_Disable+0x670>)
 8001a9c:	f001 f80c 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001aa6:	48ad      	ldr	r0, [pc, #692]	@ (8001d5c <MAX31855_CS_Disable+0x670>)
 8001aa8:	f001 f806 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8001aac:	2201      	movs	r2, #1
 8001aae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001ab2:	48aa      	ldr	r0, [pc, #680]	@ (8001d5c <MAX31855_CS_Disable+0x670>)
 8001ab4:	f001 f800 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8001ab8:	2201      	movs	r2, #1
 8001aba:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001abe:	48a7      	ldr	r0, [pc, #668]	@ (8001d5c <MAX31855_CS_Disable+0x670>)
 8001ac0:	f000 fffa 	bl	8002ab8 <HAL_GPIO_WritePin>
		break;
 8001ac4:	e145      	b.n	8001d52 <MAX31855_CS_Disable+0x666>
	case TC_CH8:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	2101      	movs	r1, #1
 8001aca:	48a4      	ldr	r0, [pc, #656]	@ (8001d5c <MAX31855_CS_Disable+0x670>)
 8001acc:	f000 fff4 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	2102      	movs	r1, #2
 8001ad4:	48a1      	ldr	r0, [pc, #644]	@ (8001d5c <MAX31855_CS_Disable+0x670>)
 8001ad6:	f000 ffef 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8001ada:	2201      	movs	r2, #1
 8001adc:	2104      	movs	r1, #4
 8001ade:	489f      	ldr	r0, [pc, #636]	@ (8001d5c <MAX31855_CS_Disable+0x670>)
 8001ae0:	f000 ffea 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	2108      	movs	r1, #8
 8001ae8:	489c      	ldr	r0, [pc, #624]	@ (8001d5c <MAX31855_CS_Disable+0x670>)
 8001aea:	f000 ffe5 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8001aee:	2201      	movs	r2, #1
 8001af0:	2110      	movs	r1, #16
 8001af2:	489a      	ldr	r0, [pc, #616]	@ (8001d5c <MAX31855_CS_Disable+0x670>)
 8001af4:	f000 ffe0 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8001af8:	2201      	movs	r2, #1
 8001afa:	2120      	movs	r1, #32
 8001afc:	4897      	ldr	r0, [pc, #604]	@ (8001d5c <MAX31855_CS_Disable+0x670>)
 8001afe:	f000 ffdb 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8001b02:	2201      	movs	r2, #1
 8001b04:	2140      	movs	r1, #64	@ 0x40
 8001b06:	4895      	ldr	r0, [pc, #596]	@ (8001d5c <MAX31855_CS_Disable+0x670>)
 8001b08:	f000 ffd6 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	2180      	movs	r1, #128	@ 0x80
 8001b10:	4892      	ldr	r0, [pc, #584]	@ (8001d5c <MAX31855_CS_Disable+0x670>)
 8001b12:	f000 ffd1 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8001b16:	2201      	movs	r2, #1
 8001b18:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001b1c:	488f      	ldr	r0, [pc, #572]	@ (8001d5c <MAX31855_CS_Disable+0x670>)
 8001b1e:	f000 ffcb 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8001b22:	2201      	movs	r2, #1
 8001b24:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b28:	488c      	ldr	r0, [pc, #560]	@ (8001d5c <MAX31855_CS_Disable+0x670>)
 8001b2a:	f000 ffc5 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b34:	4889      	ldr	r0, [pc, #548]	@ (8001d5c <MAX31855_CS_Disable+0x670>)
 8001b36:	f000 ffbf 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001b40:	4886      	ldr	r0, [pc, #536]	@ (8001d5c <MAX31855_CS_Disable+0x670>)
 8001b42:	f000 ffb9 	bl	8002ab8 <HAL_GPIO_WritePin>
		break;
 8001b46:	e104      	b.n	8001d52 <MAX31855_CS_Disable+0x666>
	case TC_CH9:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8001b48:	2201      	movs	r2, #1
 8001b4a:	2101      	movs	r1, #1
 8001b4c:	4883      	ldr	r0, [pc, #524]	@ (8001d5c <MAX31855_CS_Disable+0x670>)
 8001b4e:	f000 ffb3 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8001b52:	2201      	movs	r2, #1
 8001b54:	2102      	movs	r1, #2
 8001b56:	4881      	ldr	r0, [pc, #516]	@ (8001d5c <MAX31855_CS_Disable+0x670>)
 8001b58:	f000 ffae 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	2104      	movs	r1, #4
 8001b60:	487e      	ldr	r0, [pc, #504]	@ (8001d5c <MAX31855_CS_Disable+0x670>)
 8001b62:	f000 ffa9 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8001b66:	2201      	movs	r2, #1
 8001b68:	2108      	movs	r1, #8
 8001b6a:	487c      	ldr	r0, [pc, #496]	@ (8001d5c <MAX31855_CS_Disable+0x670>)
 8001b6c:	f000 ffa4 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8001b70:	2201      	movs	r2, #1
 8001b72:	2110      	movs	r1, #16
 8001b74:	4879      	ldr	r0, [pc, #484]	@ (8001d5c <MAX31855_CS_Disable+0x670>)
 8001b76:	f000 ff9f 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	2120      	movs	r1, #32
 8001b7e:	4877      	ldr	r0, [pc, #476]	@ (8001d5c <MAX31855_CS_Disable+0x670>)
 8001b80:	f000 ff9a 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8001b84:	2201      	movs	r2, #1
 8001b86:	2140      	movs	r1, #64	@ 0x40
 8001b88:	4874      	ldr	r0, [pc, #464]	@ (8001d5c <MAX31855_CS_Disable+0x670>)
 8001b8a:	f000 ff95 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8001b8e:	2201      	movs	r2, #1
 8001b90:	2180      	movs	r1, #128	@ 0x80
 8001b92:	4872      	ldr	r0, [pc, #456]	@ (8001d5c <MAX31855_CS_Disable+0x670>)
 8001b94:	f000 ff90 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8001b98:	2201      	movs	r2, #1
 8001b9a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001b9e:	486f      	ldr	r0, [pc, #444]	@ (8001d5c <MAX31855_CS_Disable+0x670>)
 8001ba0:	f000 ff8a 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001baa:	486c      	ldr	r0, [pc, #432]	@ (8001d5c <MAX31855_CS_Disable+0x670>)
 8001bac:	f000 ff84 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001bb6:	4869      	ldr	r0, [pc, #420]	@ (8001d5c <MAX31855_CS_Disable+0x670>)
 8001bb8:	f000 ff7e 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001bc2:	4866      	ldr	r0, [pc, #408]	@ (8001d5c <MAX31855_CS_Disable+0x670>)
 8001bc4:	f000 ff78 	bl	8002ab8 <HAL_GPIO_WritePin>
		break;
 8001bc8:	e0c3      	b.n	8001d52 <MAX31855_CS_Disable+0x666>
	case TC_CH10:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8001bca:	2201      	movs	r2, #1
 8001bcc:	2101      	movs	r1, #1
 8001bce:	4863      	ldr	r0, [pc, #396]	@ (8001d5c <MAX31855_CS_Disable+0x670>)
 8001bd0:	f000 ff72 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	2102      	movs	r1, #2
 8001bd8:	4860      	ldr	r0, [pc, #384]	@ (8001d5c <MAX31855_CS_Disable+0x670>)
 8001bda:	f000 ff6d 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8001bde:	2201      	movs	r2, #1
 8001be0:	2104      	movs	r1, #4
 8001be2:	485e      	ldr	r0, [pc, #376]	@ (8001d5c <MAX31855_CS_Disable+0x670>)
 8001be4:	f000 ff68 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8001be8:	2201      	movs	r2, #1
 8001bea:	2108      	movs	r1, #8
 8001bec:	485b      	ldr	r0, [pc, #364]	@ (8001d5c <MAX31855_CS_Disable+0x670>)
 8001bee:	f000 ff63 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	2110      	movs	r1, #16
 8001bf6:	4859      	ldr	r0, [pc, #356]	@ (8001d5c <MAX31855_CS_Disable+0x670>)
 8001bf8:	f000 ff5e 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	2120      	movs	r1, #32
 8001c00:	4856      	ldr	r0, [pc, #344]	@ (8001d5c <MAX31855_CS_Disable+0x670>)
 8001c02:	f000 ff59 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8001c06:	2201      	movs	r2, #1
 8001c08:	2140      	movs	r1, #64	@ 0x40
 8001c0a:	4854      	ldr	r0, [pc, #336]	@ (8001d5c <MAX31855_CS_Disable+0x670>)
 8001c0c:	f000 ff54 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8001c10:	2201      	movs	r2, #1
 8001c12:	2180      	movs	r1, #128	@ 0x80
 8001c14:	4851      	ldr	r0, [pc, #324]	@ (8001d5c <MAX31855_CS_Disable+0x670>)
 8001c16:	f000 ff4f 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001c20:	484e      	ldr	r0, [pc, #312]	@ (8001d5c <MAX31855_CS_Disable+0x670>)
 8001c22:	f000 ff49 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8001c26:	2201      	movs	r2, #1
 8001c28:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001c2c:	484b      	ldr	r0, [pc, #300]	@ (8001d5c <MAX31855_CS_Disable+0x670>)
 8001c2e:	f000 ff43 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8001c32:	2201      	movs	r2, #1
 8001c34:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c38:	4848      	ldr	r0, [pc, #288]	@ (8001d5c <MAX31855_CS_Disable+0x670>)
 8001c3a:	f000 ff3d 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001c44:	4845      	ldr	r0, [pc, #276]	@ (8001d5c <MAX31855_CS_Disable+0x670>)
 8001c46:	f000 ff37 	bl	8002ab8 <HAL_GPIO_WritePin>
		break;
 8001c4a:	e082      	b.n	8001d52 <MAX31855_CS_Disable+0x666>
	case TC_CH11:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	2101      	movs	r1, #1
 8001c50:	4842      	ldr	r0, [pc, #264]	@ (8001d5c <MAX31855_CS_Disable+0x670>)
 8001c52:	f000 ff31 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8001c56:	2201      	movs	r2, #1
 8001c58:	2102      	movs	r1, #2
 8001c5a:	4840      	ldr	r0, [pc, #256]	@ (8001d5c <MAX31855_CS_Disable+0x670>)
 8001c5c:	f000 ff2c 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8001c60:	2201      	movs	r2, #1
 8001c62:	2104      	movs	r1, #4
 8001c64:	483d      	ldr	r0, [pc, #244]	@ (8001d5c <MAX31855_CS_Disable+0x670>)
 8001c66:	f000 ff27 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	2108      	movs	r1, #8
 8001c6e:	483b      	ldr	r0, [pc, #236]	@ (8001d5c <MAX31855_CS_Disable+0x670>)
 8001c70:	f000 ff22 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8001c74:	2201      	movs	r2, #1
 8001c76:	2110      	movs	r1, #16
 8001c78:	4838      	ldr	r0, [pc, #224]	@ (8001d5c <MAX31855_CS_Disable+0x670>)
 8001c7a:	f000 ff1d 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8001c7e:	2201      	movs	r2, #1
 8001c80:	2120      	movs	r1, #32
 8001c82:	4836      	ldr	r0, [pc, #216]	@ (8001d5c <MAX31855_CS_Disable+0x670>)
 8001c84:	f000 ff18 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8001c88:	2201      	movs	r2, #1
 8001c8a:	2140      	movs	r1, #64	@ 0x40
 8001c8c:	4833      	ldr	r0, [pc, #204]	@ (8001d5c <MAX31855_CS_Disable+0x670>)
 8001c8e:	f000 ff13 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8001c92:	2201      	movs	r2, #1
 8001c94:	2180      	movs	r1, #128	@ 0x80
 8001c96:	4831      	ldr	r0, [pc, #196]	@ (8001d5c <MAX31855_CS_Disable+0x670>)
 8001c98:	f000 ff0e 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001ca2:	482e      	ldr	r0, [pc, #184]	@ (8001d5c <MAX31855_CS_Disable+0x670>)
 8001ca4:	f000 ff08 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8001ca8:	2201      	movs	r2, #1
 8001caa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001cae:	482b      	ldr	r0, [pc, #172]	@ (8001d5c <MAX31855_CS_Disable+0x670>)
 8001cb0:	f000 ff02 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001cba:	4828      	ldr	r0, [pc, #160]	@ (8001d5c <MAX31855_CS_Disable+0x670>)
 8001cbc:	f000 fefc 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001cc6:	4825      	ldr	r0, [pc, #148]	@ (8001d5c <MAX31855_CS_Disable+0x670>)
 8001cc8:	f000 fef6 	bl	8002ab8 <HAL_GPIO_WritePin>
		break;
 8001ccc:	e041      	b.n	8001d52 <MAX31855_CS_Disable+0x666>
	case TC_CH12:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8001cce:	2201      	movs	r2, #1
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	4822      	ldr	r0, [pc, #136]	@ (8001d5c <MAX31855_CS_Disable+0x670>)
 8001cd4:	f000 fef0 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8001cd8:	2201      	movs	r2, #1
 8001cda:	2102      	movs	r1, #2
 8001cdc:	481f      	ldr	r0, [pc, #124]	@ (8001d5c <MAX31855_CS_Disable+0x670>)
 8001cde:	f000 feeb 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	2104      	movs	r1, #4
 8001ce6:	481d      	ldr	r0, [pc, #116]	@ (8001d5c <MAX31855_CS_Disable+0x670>)
 8001ce8:	f000 fee6 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8001cec:	2201      	movs	r2, #1
 8001cee:	2108      	movs	r1, #8
 8001cf0:	481a      	ldr	r0, [pc, #104]	@ (8001d5c <MAX31855_CS_Disable+0x670>)
 8001cf2:	f000 fee1 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	2110      	movs	r1, #16
 8001cfa:	4818      	ldr	r0, [pc, #96]	@ (8001d5c <MAX31855_CS_Disable+0x670>)
 8001cfc:	f000 fedc 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8001d00:	2201      	movs	r2, #1
 8001d02:	2120      	movs	r1, #32
 8001d04:	4815      	ldr	r0, [pc, #84]	@ (8001d5c <MAX31855_CS_Disable+0x670>)
 8001d06:	f000 fed7 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	2140      	movs	r1, #64	@ 0x40
 8001d0e:	4813      	ldr	r0, [pc, #76]	@ (8001d5c <MAX31855_CS_Disable+0x670>)
 8001d10:	f000 fed2 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8001d14:	2201      	movs	r2, #1
 8001d16:	2180      	movs	r1, #128	@ 0x80
 8001d18:	4810      	ldr	r0, [pc, #64]	@ (8001d5c <MAX31855_CS_Disable+0x670>)
 8001d1a:	f000 fecd 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001d24:	480d      	ldr	r0, [pc, #52]	@ (8001d5c <MAX31855_CS_Disable+0x670>)
 8001d26:	f000 fec7 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001d30:	480a      	ldr	r0, [pc, #40]	@ (8001d5c <MAX31855_CS_Disable+0x670>)
 8001d32:	f000 fec1 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8001d36:	2201      	movs	r2, #1
 8001d38:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d3c:	4807      	ldr	r0, [pc, #28]	@ (8001d5c <MAX31855_CS_Disable+0x670>)
 8001d3e:	f000 febb 	bl	8002ab8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8001d42:	2201      	movs	r2, #1
 8001d44:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001d48:	4804      	ldr	r0, [pc, #16]	@ (8001d5c <MAX31855_CS_Disable+0x670>)
 8001d4a:	f000 feb5 	bl	8002ab8 <HAL_GPIO_WritePin>
		break;
 8001d4e:	e000      	b.n	8001d52 <MAX31855_CS_Disable+0x666>
	default:
		break;
 8001d50:	bf00      	nop
	}
}
 8001d52:	bf00      	nop
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	58020c00 	.word	0x58020c00

08001d60 <MAX31855_ReadData>:

// SPI를 통해 MAX31855에서 32비트 데이터 읽기
uint32_t MAX31855_ReadData(uint8_t ch)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	4603      	mov	r3, r0
 8001d68:	71fb      	strb	r3, [r7, #7]
	uint8_t rxBuffer[4] = {0}; // 4바이트(32비트) 데이터 버퍼
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60bb      	str	r3, [r7, #8]
	uint32_t rawData = 0;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60fb      	str	r3, [r7, #12]

	MAX31855_CS_Enable(ch); // CS Low → SPI 시작
 8001d72:	79fb      	ldrb	r3, [r7, #7]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff f97f 	bl	8001078 <MAX31855_CS_Enable>
	HAL_SPI_Receive(&hspi1, rxBuffer, 4, SPI_TIMEOUT); // 32비트(4바이트) 데이터 수신
 8001d7a:	f107 0108 	add.w	r1, r7, #8
 8001d7e:	2364      	movs	r3, #100	@ 0x64
 8001d80:	2204      	movs	r2, #4
 8001d82:	480b      	ldr	r0, [pc, #44]	@ (8001db0 <MAX31855_ReadData+0x50>)
 8001d84:	f003 fe8a 	bl	8005a9c <HAL_SPI_Receive>
	MAX31855_CS_Disable(ch); // CS High → SPI 종료
 8001d88:	79fb      	ldrb	r3, [r7, #7]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff fcae 	bl	80016ec <MAX31855_CS_Disable>

	// 4바이트 데이터를 32비트 정수로 변환
	rawData = ((uint32_t)rxBuffer[0] << 24) |
 8001d90:	7a3b      	ldrb	r3, [r7, #8]
 8001d92:	061a      	lsls	r2, r3, #24
			((uint32_t)rxBuffer[1] << 16) |
 8001d94:	7a7b      	ldrb	r3, [r7, #9]
 8001d96:	041b      	lsls	r3, r3, #16
	rawData = ((uint32_t)rxBuffer[0] << 24) |
 8001d98:	431a      	orrs	r2, r3
			((uint32_t)rxBuffer[2] << 8) |
 8001d9a:	7abb      	ldrb	r3, [r7, #10]
 8001d9c:	021b      	lsls	r3, r3, #8
			((uint32_t)rxBuffer[1] << 16) |
 8001d9e:	4313      	orrs	r3, r2
			((uint32_t)rxBuffer[3]);
 8001da0:	7afa      	ldrb	r2, [r7, #11]
	rawData = ((uint32_t)rxBuffer[0] << 24) |
 8001da2:	4313      	orrs	r3, r2
 8001da4:	60fb      	str	r3, [r7, #12]

	return rawData;
 8001da6:	68fb      	ldr	r3, [r7, #12]
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3710      	adds	r7, #16
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	240000b8 	.word	0x240000b8

08001db4 <MAX31855_GetThermocoupleTemperature>:

// 열전대(Hot Junction) 온도 변환 함수
float MAX31855_GetThermocoupleTemperature(uint8_t ch)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	71fb      	strb	r3, [r7, #7]
	uint32_t rawData = MAX31855_ReadData(ch);
 8001dbe:	79fb      	ldrb	r3, [r7, #7]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff ffcd 	bl	8001d60 <MAX31855_ReadData>
 8001dc6:	60b8      	str	r0, [r7, #8]
	int16_t tempData = (rawData >> 18) & 0x3FFF; // 상위 14비트 추출
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	0c9b      	lsrs	r3, r3, #18
 8001dcc:	81fb      	strh	r3, [r7, #14]

	// 음수 보정 (2의 보수 변환)
	if (rawData & 0x80000000)
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	da05      	bge.n	8001de0 <MAX31855_GetThermocoupleTemperature+0x2c>
	{
		tempData |= 0xC000; // 부호 확장
 8001dd4:	89fb      	ldrh	r3, [r7, #14]
 8001dd6:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 8001dda:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 8001dde:	81fb      	strh	r3, [r7, #14]
	}

	return (float)tempData * 0.25; // 해상도 0.25°C 변환
 8001de0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001de4:	ee07 3a90 	vmov	s15, r3
 8001de8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dec:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 8001df0:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001df4:	eeb0 0a67 	vmov.f32	s0, s15
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
	...

08001e00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001e00:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001e3c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001e04:	f7fe fd00 	bl	8000808 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e08:	f7fe fc50 	bl	80006ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e0c:	480c      	ldr	r0, [pc, #48]	@ (8001e40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e0e:	490d      	ldr	r1, [pc, #52]	@ (8001e44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e10:	4a0d      	ldr	r2, [pc, #52]	@ (8001e48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e14:	e002      	b.n	8001e1c <LoopCopyDataInit>

08001e16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e1a:	3304      	adds	r3, #4

08001e1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e20:	d3f9      	bcc.n	8001e16 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e22:	4a0a      	ldr	r2, [pc, #40]	@ (8001e4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e24:	4c0a      	ldr	r4, [pc, #40]	@ (8001e50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e28:	e001      	b.n	8001e2e <LoopFillZerobss>

08001e2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e2c:	3204      	adds	r2, #4

08001e2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e30:	d3fb      	bcc.n	8001e2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e32:	f005 fbd1 	bl	80075d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e36:	f7fe fcff 	bl	8000838 <main>
  bx  lr
 8001e3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e3c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001e40:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001e44:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 8001e48:	080080e0 	.word	0x080080e0
  ldr r2, =_sbss
 8001e4c:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 8001e50:	24000384 	.word	0x24000384

08001e54 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e54:	e7fe      	b.n	8001e54 <ADC3_IRQHandler>
	...

08001e58 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b08c      	sub	sp, #48	@ 0x30
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001e62:	2300      	movs	r3, #0
 8001e64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001e66:	79fb      	ldrb	r3, [r7, #7]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d009      	beq.n	8001e80 <BSP_LED_Init+0x28>
 8001e6c:	79fb      	ldrb	r3, [r7, #7]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d006      	beq.n	8001e80 <BSP_LED_Init+0x28>
 8001e72:	79fb      	ldrb	r3, [r7, #7]
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d003      	beq.n	8001e80 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001e78:	f06f 0301 	mvn.w	r3, #1
 8001e7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e7e:	e055      	b.n	8001f2c <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8001e80:	79fb      	ldrb	r3, [r7, #7]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d10f      	bne.n	8001ea6 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8001e86:	4b2c      	ldr	r3, [pc, #176]	@ (8001f38 <BSP_LED_Init+0xe0>)
 8001e88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e8c:	4a2a      	ldr	r2, [pc, #168]	@ (8001f38 <BSP_LED_Init+0xe0>)
 8001e8e:	f043 0302 	orr.w	r3, r3, #2
 8001e92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e96:	4b28      	ldr	r3, [pc, #160]	@ (8001f38 <BSP_LED_Init+0xe0>)
 8001e98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	617b      	str	r3, [r7, #20]
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	e021      	b.n	8001eea <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8001ea6:	79fb      	ldrb	r3, [r7, #7]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d10f      	bne.n	8001ecc <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8001eac:	4b22      	ldr	r3, [pc, #136]	@ (8001f38 <BSP_LED_Init+0xe0>)
 8001eae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eb2:	4a21      	ldr	r2, [pc, #132]	@ (8001f38 <BSP_LED_Init+0xe0>)
 8001eb4:	f043 0310 	orr.w	r3, r3, #16
 8001eb8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ebc:	4b1e      	ldr	r3, [pc, #120]	@ (8001f38 <BSP_LED_Init+0xe0>)
 8001ebe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ec2:	f003 0310 	and.w	r3, r3, #16
 8001ec6:	613b      	str	r3, [r7, #16]
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	e00e      	b.n	8001eea <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8001ecc:	4b1a      	ldr	r3, [pc, #104]	@ (8001f38 <BSP_LED_Init+0xe0>)
 8001ece:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ed2:	4a19      	ldr	r2, [pc, #100]	@ (8001f38 <BSP_LED_Init+0xe0>)
 8001ed4:	f043 0302 	orr.w	r3, r3, #2
 8001ed8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001edc:	4b16      	ldr	r3, [pc, #88]	@ (8001f38 <BSP_LED_Init+0xe0>)
 8001ede:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001eea:	79fb      	ldrb	r3, [r7, #7]
 8001eec:	4a13      	ldr	r2, [pc, #76]	@ (8001f3c <BSP_LED_Init+0xe4>)
 8001eee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ef2:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001efc:	2303      	movs	r3, #3
 8001efe:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001f00:	79fb      	ldrb	r3, [r7, #7]
 8001f02:	4a0f      	ldr	r2, [pc, #60]	@ (8001f40 <BSP_LED_Init+0xe8>)
 8001f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f08:	f107 0218 	add.w	r2, r7, #24
 8001f0c:	4611      	mov	r1, r2
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f000 fc22 	bl	8002758 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001f14:	79fb      	ldrb	r3, [r7, #7]
 8001f16:	4a0a      	ldr	r2, [pc, #40]	@ (8001f40 <BSP_LED_Init+0xe8>)
 8001f18:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001f1c:	79fb      	ldrb	r3, [r7, #7]
 8001f1e:	4a07      	ldr	r2, [pc, #28]	@ (8001f3c <BSP_LED_Init+0xe4>)
 8001f20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f24:	2200      	movs	r2, #0
 8001f26:	4619      	mov	r1, r3
 8001f28:	f000 fdc6 	bl	8002ab8 <HAL_GPIO_WritePin>
  }

  return ret;
 8001f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3730      	adds	r7, #48	@ 0x30
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	58024400 	.word	0x58024400
 8001f3c:	08008078 	.word	0x08008078
 8001f40:	2400000c 	.word	0x2400000c

08001f44 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001f52:	79fb      	ldrb	r3, [r7, #7]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d009      	beq.n	8001f6c <BSP_LED_On+0x28>
 8001f58:	79fb      	ldrb	r3, [r7, #7]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d006      	beq.n	8001f6c <BSP_LED_On+0x28>
 8001f5e:	79fb      	ldrb	r3, [r7, #7]
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d003      	beq.n	8001f6c <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001f64:	f06f 0301 	mvn.w	r3, #1
 8001f68:	60fb      	str	r3, [r7, #12]
 8001f6a:	e00b      	b.n	8001f84 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8001f6c:	79fb      	ldrb	r3, [r7, #7]
 8001f6e:	4a08      	ldr	r2, [pc, #32]	@ (8001f90 <BSP_LED_On+0x4c>)
 8001f70:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001f74:	79fb      	ldrb	r3, [r7, #7]
 8001f76:	4a07      	ldr	r2, [pc, #28]	@ (8001f94 <BSP_LED_On+0x50>)
 8001f78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	4619      	mov	r1, r3
 8001f80:	f000 fd9a 	bl	8002ab8 <HAL_GPIO_WritePin>
  }

  return ret;
 8001f84:	68fb      	ldr	r3, [r7, #12]
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3710      	adds	r7, #16
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	2400000c 	.word	0x2400000c
 8001f94:	08008078 	.word	0x08008078

08001f98 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001fa6:	79fb      	ldrb	r3, [r7, #7]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d009      	beq.n	8001fc0 <BSP_LED_Toggle+0x28>
 8001fac:	79fb      	ldrb	r3, [r7, #7]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d006      	beq.n	8001fc0 <BSP_LED_Toggle+0x28>
 8001fb2:	79fb      	ldrb	r3, [r7, #7]
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d003      	beq.n	8001fc0 <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001fb8:	f06f 0301 	mvn.w	r3, #1
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	e00b      	b.n	8001fd8 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001fc0:	79fb      	ldrb	r3, [r7, #7]
 8001fc2:	4a08      	ldr	r2, [pc, #32]	@ (8001fe4 <BSP_LED_Toggle+0x4c>)
 8001fc4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001fc8:	79fb      	ldrb	r3, [r7, #7]
 8001fca:	4907      	ldr	r1, [pc, #28]	@ (8001fe8 <BSP_LED_Toggle+0x50>)
 8001fcc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4610      	mov	r0, r2
 8001fd4:	f000 fd89 	bl	8002aea <HAL_GPIO_TogglePin>
  }

  return ret;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	2400000c 	.word	0x2400000c
 8001fe8:	08008078 	.word	0x08008078

08001fec <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b088      	sub	sp, #32
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	460a      	mov	r2, r1
 8001ff6:	71fb      	strb	r3, [r7, #7]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001ffc:	4b2e      	ldr	r3, [pc, #184]	@ (80020b8 <BSP_PB_Init+0xcc>)
 8001ffe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002002:	4a2d      	ldr	r2, [pc, #180]	@ (80020b8 <BSP_PB_Init+0xcc>)
 8002004:	f043 0304 	orr.w	r3, r3, #4
 8002008:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800200c:	4b2a      	ldr	r3, [pc, #168]	@ (80020b8 <BSP_PB_Init+0xcc>)
 800200e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002012:	f003 0304 	and.w	r3, r3, #4
 8002016:	60bb      	str	r3, [r7, #8]
 8002018:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 800201a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800201e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8002020:	2302      	movs	r3, #2
 8002022:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002024:	2302      	movs	r3, #2
 8002026:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8002028:	79bb      	ldrb	r3, [r7, #6]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d10c      	bne.n	8002048 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800202e:	2300      	movs	r3, #0
 8002030:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8002032:	79fb      	ldrb	r3, [r7, #7]
 8002034:	4a21      	ldr	r2, [pc, #132]	@ (80020bc <BSP_PB_Init+0xd0>)
 8002036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800203a:	f107 020c 	add.w	r2, r7, #12
 800203e:	4611      	mov	r1, r2
 8002040:	4618      	mov	r0, r3
 8002042:	f000 fb89 	bl	8002758 <HAL_GPIO_Init>
 8002046:	e031      	b.n	80020ac <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8002048:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800204c:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800204e:	79fb      	ldrb	r3, [r7, #7]
 8002050:	4a1a      	ldr	r2, [pc, #104]	@ (80020bc <BSP_PB_Init+0xd0>)
 8002052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002056:	f107 020c 	add.w	r2, r7, #12
 800205a:	4611      	mov	r1, r2
 800205c:	4618      	mov	r0, r3
 800205e:	f000 fb7b 	bl	8002758 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8002062:	79fb      	ldrb	r3, [r7, #7]
 8002064:	00db      	lsls	r3, r3, #3
 8002066:	4a16      	ldr	r2, [pc, #88]	@ (80020c0 <BSP_PB_Init+0xd4>)
 8002068:	441a      	add	r2, r3
 800206a:	79fb      	ldrb	r3, [r7, #7]
 800206c:	4915      	ldr	r1, [pc, #84]	@ (80020c4 <BSP_PB_Init+0xd8>)
 800206e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002072:	4619      	mov	r1, r3
 8002074:	4610      	mov	r0, r2
 8002076:	f000 fb1e 	bl	80026b6 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 800207a:	79fb      	ldrb	r3, [r7, #7]
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	4a10      	ldr	r2, [pc, #64]	@ (80020c0 <BSP_PB_Init+0xd4>)
 8002080:	1898      	adds	r0, r3, r2
 8002082:	79fb      	ldrb	r3, [r7, #7]
 8002084:	4a10      	ldr	r2, [pc, #64]	@ (80020c8 <BSP_PB_Init+0xdc>)
 8002086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800208a:	461a      	mov	r2, r3
 800208c:	2100      	movs	r1, #0
 800208e:	f000 faf3 	bl	8002678 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8002092:	2028      	movs	r0, #40	@ 0x28
 8002094:	79fb      	ldrb	r3, [r7, #7]
 8002096:	4a0d      	ldr	r2, [pc, #52]	@ (80020cc <BSP_PB_Init+0xe0>)
 8002098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800209c:	2200      	movs	r2, #0
 800209e:	4619      	mov	r1, r3
 80020a0:	f000 faa3 	bl	80025ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80020a4:	2328      	movs	r3, #40	@ 0x28
 80020a6:	4618      	mov	r0, r3
 80020a8:	f000 fab9 	bl	800261e <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3720      	adds	r7, #32
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	58024400 	.word	0x58024400
 80020bc:	24000018 	.word	0x24000018
 80020c0:	24000194 	.word	0x24000194
 80020c4:	08008080 	.word	0x08008080
 80020c8:	2400001c 	.word	0x2400001c
 80020cc:	24000020 	.word	0x24000020

080020d0 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 80020da:	79fb      	ldrb	r3, [r7, #7]
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	4a04      	ldr	r2, [pc, #16]	@ (80020f0 <BSP_PB_IRQHandler+0x20>)
 80020e0:	4413      	add	r3, r2
 80020e2:	4618      	mov	r0, r3
 80020e4:	f000 fafc 	bl	80026e0 <HAL_EXTI_IRQHandler>
}
 80020e8:	bf00      	nop
 80020ea:	3708      	adds	r7, #8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	24000194 	.word	0x24000194

080020f4 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4603      	mov	r3, r0
 80020fc:	6039      	str	r1, [r7, #0]
 80020fe:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002100:	2300      	movs	r3, #0
 8002102:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8002104:	79fb      	ldrb	r3, [r7, #7]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d003      	beq.n	8002112 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800210a:	f06f 0301 	mvn.w	r3, #1
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	e018      	b.n	8002144 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8002112:	79fb      	ldrb	r3, [r7, #7]
 8002114:	2294      	movs	r2, #148	@ 0x94
 8002116:	fb02 f303 	mul.w	r3, r2, r3
 800211a:	4a0d      	ldr	r2, [pc, #52]	@ (8002150 <BSP_COM_Init+0x5c>)
 800211c:	4413      	add	r3, r2
 800211e:	4618      	mov	r0, r3
 8002120:	f000 f86e 	bl	8002200 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8002124:	79fb      	ldrb	r3, [r7, #7]
 8002126:	2294      	movs	r2, #148	@ 0x94
 8002128:	fb02 f303 	mul.w	r3, r2, r3
 800212c:	4a08      	ldr	r2, [pc, #32]	@ (8002150 <BSP_COM_Init+0x5c>)
 800212e:	4413      	add	r3, r2
 8002130:	6839      	ldr	r1, [r7, #0]
 8002132:	4618      	mov	r0, r3
 8002134:	f000 f80e 	bl	8002154 <MX_USART3_Init>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d002      	beq.n	8002144 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800213e:	f06f 0303 	mvn.w	r3, #3
 8002142:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002144:	68fb      	ldr	r3, [r7, #12]
}
 8002146:	4618      	mov	r0, r3
 8002148:	3710      	adds	r7, #16
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	2400019c 	.word	0x2400019c

08002154 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 800215e:	4b15      	ldr	r3, [pc, #84]	@ (80021b4 <MX_USART3_Init+0x60>)
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	220c      	movs	r2, #12
 8002172:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	895b      	ldrh	r3, [r3, #10]
 8002178:	461a      	mov	r2, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685a      	ldr	r2, [r3, #4]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	891b      	ldrh	r3, [r3, #8]
 800218a:	461a      	mov	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	899b      	ldrh	r3, [r3, #12]
 8002194:	461a      	mov	r2, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80021a0:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f003 ffa7 	bl	80060f6 <HAL_UART_Init>
 80021a8:	4603      	mov	r3, r0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	24000008 	.word	0x24000008

080021b8 <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 80021c0:	4b09      	ldr	r3, [pc, #36]	@ (80021e8 <__io_putchar+0x30>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	461a      	mov	r2, r3
 80021c6:	2394      	movs	r3, #148	@ 0x94
 80021c8:	fb02 f303 	mul.w	r3, r2, r3
 80021cc:	4a07      	ldr	r2, [pc, #28]	@ (80021ec <__io_putchar+0x34>)
 80021ce:	1898      	adds	r0, r3, r2
 80021d0:	1d39      	adds	r1, r7, #4
 80021d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021d6:	2201      	movs	r2, #1
 80021d8:	f003 ffe7 	bl	80061aa <HAL_UART_Transmit>
  return ch;
 80021dc:	687b      	ldr	r3, [r7, #4]
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	24000230 	.word	0x24000230
 80021ec:	2400019c 	.word	0x2400019c

080021f0 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80021f4:	2000      	movs	r0, #0
 80021f6:	f7fe fd61 	bl	8000cbc <BSP_PB_Callback>
}
 80021fa:	bf00      	nop
 80021fc:	bd80      	pop	{r7, pc}
	...

08002200 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b08a      	sub	sp, #40	@ 0x28
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8002208:	4b27      	ldr	r3, [pc, #156]	@ (80022a8 <COM1_MspInit+0xa8>)
 800220a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800220e:	4a26      	ldr	r2, [pc, #152]	@ (80022a8 <COM1_MspInit+0xa8>)
 8002210:	f043 0308 	orr.w	r3, r3, #8
 8002214:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002218:	4b23      	ldr	r3, [pc, #140]	@ (80022a8 <COM1_MspInit+0xa8>)
 800221a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800221e:	f003 0308 	and.w	r3, r3, #8
 8002222:	613b      	str	r3, [r7, #16]
 8002224:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8002226:	4b20      	ldr	r3, [pc, #128]	@ (80022a8 <COM1_MspInit+0xa8>)
 8002228:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800222c:	4a1e      	ldr	r2, [pc, #120]	@ (80022a8 <COM1_MspInit+0xa8>)
 800222e:	f043 0308 	orr.w	r3, r3, #8
 8002232:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002236:	4b1c      	ldr	r3, [pc, #112]	@ (80022a8 <COM1_MspInit+0xa8>)
 8002238:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800223c:	f003 0308 	and.w	r3, r3, #8
 8002240:	60fb      	str	r3, [r7, #12]
 8002242:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8002244:	4b18      	ldr	r3, [pc, #96]	@ (80022a8 <COM1_MspInit+0xa8>)
 8002246:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800224a:	4a17      	ldr	r2, [pc, #92]	@ (80022a8 <COM1_MspInit+0xa8>)
 800224c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002250:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002254:	4b14      	ldr	r3, [pc, #80]	@ (80022a8 <COM1_MspInit+0xa8>)
 8002256:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800225a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800225e:	60bb      	str	r3, [r7, #8]
 8002260:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 8002262:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002266:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002268:	2302      	movs	r3, #2
 800226a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800226c:	2302      	movs	r3, #2
 800226e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002270:	2301      	movs	r3, #1
 8002272:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8002274:	2307      	movs	r3, #7
 8002276:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8002278:	f107 0314 	add.w	r3, r7, #20
 800227c:	4619      	mov	r1, r3
 800227e:	480b      	ldr	r0, [pc, #44]	@ (80022ac <COM1_MspInit+0xac>)
 8002280:	f000 fa6a 	bl	8002758 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8002284:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002288:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800228a:	2302      	movs	r3, #2
 800228c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800228e:	2307      	movs	r3, #7
 8002290:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8002292:	f107 0314 	add.w	r3, r7, #20
 8002296:	4619      	mov	r1, r3
 8002298:	4804      	ldr	r0, [pc, #16]	@ (80022ac <COM1_MspInit+0xac>)
 800229a:	f000 fa5d 	bl	8002758 <HAL_GPIO_Init>
}
 800229e:	bf00      	nop
 80022a0:	3728      	adds	r7, #40	@ 0x28
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	58024400 	.word	0x58024400
 80022ac:	58020c00 	.word	0x58020c00

080022b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022b6:	2003      	movs	r0, #3
 80022b8:	f000 f98c 	bl	80025d4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80022bc:	f001 fac8 	bl	8003850 <HAL_RCC_GetSysClockFreq>
 80022c0:	4602      	mov	r2, r0
 80022c2:	4b15      	ldr	r3, [pc, #84]	@ (8002318 <HAL_Init+0x68>)
 80022c4:	699b      	ldr	r3, [r3, #24]
 80022c6:	0a1b      	lsrs	r3, r3, #8
 80022c8:	f003 030f 	and.w	r3, r3, #15
 80022cc:	4913      	ldr	r1, [pc, #76]	@ (800231c <HAL_Init+0x6c>)
 80022ce:	5ccb      	ldrb	r3, [r1, r3]
 80022d0:	f003 031f 	and.w	r3, r3, #31
 80022d4:	fa22 f303 	lsr.w	r3, r2, r3
 80022d8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80022da:	4b0f      	ldr	r3, [pc, #60]	@ (8002318 <HAL_Init+0x68>)
 80022dc:	699b      	ldr	r3, [r3, #24]
 80022de:	f003 030f 	and.w	r3, r3, #15
 80022e2:	4a0e      	ldr	r2, [pc, #56]	@ (800231c <HAL_Init+0x6c>)
 80022e4:	5cd3      	ldrb	r3, [r2, r3]
 80022e6:	f003 031f 	and.w	r3, r3, #31
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	fa22 f303 	lsr.w	r3, r2, r3
 80022f0:	4a0b      	ldr	r2, [pc, #44]	@ (8002320 <HAL_Init+0x70>)
 80022f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80022f4:	4a0b      	ldr	r2, [pc, #44]	@ (8002324 <HAL_Init+0x74>)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022fa:	2000      	movs	r0, #0
 80022fc:	f000 f814 	bl	8002328 <HAL_InitTick>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e002      	b.n	8002310 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800230a:	f7fe fd59 	bl	8000dc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	58024400 	.word	0x58024400
 800231c:	08008068 	.word	0x08008068
 8002320:	24000004 	.word	0x24000004
 8002324:	24000000 	.word	0x24000000

08002328 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002330:	4b15      	ldr	r3, [pc, #84]	@ (8002388 <HAL_InitTick+0x60>)
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d101      	bne.n	800233c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e021      	b.n	8002380 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800233c:	4b13      	ldr	r3, [pc, #76]	@ (800238c <HAL_InitTick+0x64>)
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	4b11      	ldr	r3, [pc, #68]	@ (8002388 <HAL_InitTick+0x60>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	4619      	mov	r1, r3
 8002346:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800234a:	fbb3 f3f1 	udiv	r3, r3, r1
 800234e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002352:	4618      	mov	r0, r3
 8002354:	f000 f971 	bl	800263a <HAL_SYSTICK_Config>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e00e      	b.n	8002380 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2b0f      	cmp	r3, #15
 8002366:	d80a      	bhi.n	800237e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002368:	2200      	movs	r2, #0
 800236a:	6879      	ldr	r1, [r7, #4]
 800236c:	f04f 30ff 	mov.w	r0, #4294967295
 8002370:	f000 f93b 	bl	80025ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002374:	4a06      	ldr	r2, [pc, #24]	@ (8002390 <HAL_InitTick+0x68>)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800237a:	2300      	movs	r3, #0
 800237c:	e000      	b.n	8002380 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
}
 8002380:	4618      	mov	r0, r3
 8002382:	3708      	adds	r7, #8
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	24000028 	.word	0x24000028
 800238c:	24000000 	.word	0x24000000
 8002390:	24000024 	.word	0x24000024

08002394 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002398:	4b06      	ldr	r3, [pc, #24]	@ (80023b4 <HAL_IncTick+0x20>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	461a      	mov	r2, r3
 800239e:	4b06      	ldr	r3, [pc, #24]	@ (80023b8 <HAL_IncTick+0x24>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4413      	add	r3, r2
 80023a4:	4a04      	ldr	r2, [pc, #16]	@ (80023b8 <HAL_IncTick+0x24>)
 80023a6:	6013      	str	r3, [r2, #0]
}
 80023a8:	bf00      	nop
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	24000028 	.word	0x24000028
 80023b8:	24000234 	.word	0x24000234

080023bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  return uwTick;
 80023c0:	4b03      	ldr	r3, [pc, #12]	@ (80023d0 <HAL_GetTick+0x14>)
 80023c2:	681b      	ldr	r3, [r3, #0]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	24000234 	.word	0x24000234

080023d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023dc:	f7ff ffee 	bl	80023bc <HAL_GetTick>
 80023e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ec:	d005      	beq.n	80023fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002418 <HAL_Delay+0x44>)
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	461a      	mov	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	4413      	add	r3, r2
 80023f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023fa:	bf00      	nop
 80023fc:	f7ff ffde 	bl	80023bc <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	68fa      	ldr	r2, [r7, #12]
 8002408:	429a      	cmp	r2, r3
 800240a:	d8f7      	bhi.n	80023fc <HAL_Delay+0x28>
  {
  }
}
 800240c:	bf00      	nop
 800240e:	bf00      	nop
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	24000028 	.word	0x24000028

0800241c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002420:	4b03      	ldr	r3, [pc, #12]	@ (8002430 <HAL_GetREVID+0x14>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	0c1b      	lsrs	r3, r3, #16
}
 8002426:	4618      	mov	r0, r3
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr
 8002430:	5c001000 	.word	0x5c001000

08002434 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f003 0307 	and.w	r3, r3, #7
 8002442:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002444:	4b0b      	ldr	r3, [pc, #44]	@ (8002474 <__NVIC_SetPriorityGrouping+0x40>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800244a:	68ba      	ldr	r2, [r7, #8]
 800244c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002450:	4013      	ands	r3, r2
 8002452:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800245c:	4b06      	ldr	r3, [pc, #24]	@ (8002478 <__NVIC_SetPriorityGrouping+0x44>)
 800245e:	4313      	orrs	r3, r2
 8002460:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002462:	4a04      	ldr	r2, [pc, #16]	@ (8002474 <__NVIC_SetPriorityGrouping+0x40>)
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	60d3      	str	r3, [r2, #12]
}
 8002468:	bf00      	nop
 800246a:	3714      	adds	r7, #20
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr
 8002474:	e000ed00 	.word	0xe000ed00
 8002478:	05fa0000 	.word	0x05fa0000

0800247c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002480:	4b04      	ldr	r3, [pc, #16]	@ (8002494 <__NVIC_GetPriorityGrouping+0x18>)
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	0a1b      	lsrs	r3, r3, #8
 8002486:	f003 0307 	and.w	r3, r3, #7
}
 800248a:	4618      	mov	r0, r3
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	e000ed00 	.word	0xe000ed00

08002498 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	4603      	mov	r3, r0
 80024a0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80024a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	db0b      	blt.n	80024c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024aa:	88fb      	ldrh	r3, [r7, #6]
 80024ac:	f003 021f 	and.w	r2, r3, #31
 80024b0:	4907      	ldr	r1, [pc, #28]	@ (80024d0 <__NVIC_EnableIRQ+0x38>)
 80024b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024b6:	095b      	lsrs	r3, r3, #5
 80024b8:	2001      	movs	r0, #1
 80024ba:	fa00 f202 	lsl.w	r2, r0, r2
 80024be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80024c2:	bf00      	nop
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	e000e100 	.word	0xe000e100

080024d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	4603      	mov	r3, r0
 80024dc:	6039      	str	r1, [r7, #0]
 80024de:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80024e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	db0a      	blt.n	80024fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	b2da      	uxtb	r2, r3
 80024ec:	490c      	ldr	r1, [pc, #48]	@ (8002520 <__NVIC_SetPriority+0x4c>)
 80024ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024f2:	0112      	lsls	r2, r2, #4
 80024f4:	b2d2      	uxtb	r2, r2
 80024f6:	440b      	add	r3, r1
 80024f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024fc:	e00a      	b.n	8002514 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	b2da      	uxtb	r2, r3
 8002502:	4908      	ldr	r1, [pc, #32]	@ (8002524 <__NVIC_SetPriority+0x50>)
 8002504:	88fb      	ldrh	r3, [r7, #6]
 8002506:	f003 030f 	and.w	r3, r3, #15
 800250a:	3b04      	subs	r3, #4
 800250c:	0112      	lsls	r2, r2, #4
 800250e:	b2d2      	uxtb	r2, r2
 8002510:	440b      	add	r3, r1
 8002512:	761a      	strb	r2, [r3, #24]
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	e000e100 	.word	0xe000e100
 8002524:	e000ed00 	.word	0xe000ed00

08002528 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002528:	b480      	push	{r7}
 800252a:	b089      	sub	sp, #36	@ 0x24
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f003 0307 	and.w	r3, r3, #7
 800253a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	f1c3 0307 	rsb	r3, r3, #7
 8002542:	2b04      	cmp	r3, #4
 8002544:	bf28      	it	cs
 8002546:	2304      	movcs	r3, #4
 8002548:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	3304      	adds	r3, #4
 800254e:	2b06      	cmp	r3, #6
 8002550:	d902      	bls.n	8002558 <NVIC_EncodePriority+0x30>
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	3b03      	subs	r3, #3
 8002556:	e000      	b.n	800255a <NVIC_EncodePriority+0x32>
 8002558:	2300      	movs	r3, #0
 800255a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800255c:	f04f 32ff 	mov.w	r2, #4294967295
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	fa02 f303 	lsl.w	r3, r2, r3
 8002566:	43da      	mvns	r2, r3
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	401a      	ands	r2, r3
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002570:	f04f 31ff 	mov.w	r1, #4294967295
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	fa01 f303 	lsl.w	r3, r1, r3
 800257a:	43d9      	mvns	r1, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002580:	4313      	orrs	r3, r2
         );
}
 8002582:	4618      	mov	r0, r3
 8002584:	3724      	adds	r7, #36	@ 0x24
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
	...

08002590 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	3b01      	subs	r3, #1
 800259c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025a0:	d301      	bcc.n	80025a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025a2:	2301      	movs	r3, #1
 80025a4:	e00f      	b.n	80025c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025a6:	4a0a      	ldr	r2, [pc, #40]	@ (80025d0 <SysTick_Config+0x40>)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	3b01      	subs	r3, #1
 80025ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025ae:	210f      	movs	r1, #15
 80025b0:	f04f 30ff 	mov.w	r0, #4294967295
 80025b4:	f7ff ff8e 	bl	80024d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025b8:	4b05      	ldr	r3, [pc, #20]	@ (80025d0 <SysTick_Config+0x40>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025be:	4b04      	ldr	r3, [pc, #16]	@ (80025d0 <SysTick_Config+0x40>)
 80025c0:	2207      	movs	r2, #7
 80025c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	e000e010 	.word	0xe000e010

080025d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f7ff ff29 	bl	8002434 <__NVIC_SetPriorityGrouping>
}
 80025e2:	bf00      	nop
 80025e4:	3708      	adds	r7, #8
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b086      	sub	sp, #24
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	4603      	mov	r3, r0
 80025f2:	60b9      	str	r1, [r7, #8]
 80025f4:	607a      	str	r2, [r7, #4]
 80025f6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80025f8:	f7ff ff40 	bl	800247c <__NVIC_GetPriorityGrouping>
 80025fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	68b9      	ldr	r1, [r7, #8]
 8002602:	6978      	ldr	r0, [r7, #20]
 8002604:	f7ff ff90 	bl	8002528 <NVIC_EncodePriority>
 8002608:	4602      	mov	r2, r0
 800260a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800260e:	4611      	mov	r1, r2
 8002610:	4618      	mov	r0, r3
 8002612:	f7ff ff5f 	bl	80024d4 <__NVIC_SetPriority>
}
 8002616:	bf00      	nop
 8002618:	3718      	adds	r7, #24
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800261e:	b580      	push	{r7, lr}
 8002620:	b082      	sub	sp, #8
 8002622:	af00      	add	r7, sp, #0
 8002624:	4603      	mov	r3, r0
 8002626:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002628:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff ff33 	bl	8002498 <__NVIC_EnableIRQ>
}
 8002632:	bf00      	nop
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b082      	sub	sp, #8
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f7ff ffa4 	bl	8002590 <SysTick_Config>
 8002648:	4603      	mov	r3, r0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
	...

08002654 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8002658:	4b06      	ldr	r3, [pc, #24]	@ (8002674 <HAL_GetCurrentCPUID+0x20>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002660:	2b70      	cmp	r3, #112	@ 0x70
 8002662:	d101      	bne.n	8002668 <HAL_GetCurrentCPUID+0x14>
  {
    return  CM7_CPUID;
 8002664:	2303      	movs	r3, #3
 8002666:	e000      	b.n	800266a <HAL_GetCurrentCPUID+0x16>
  }
  else
  {
    return CM4_CPUID;
 8002668:	2301      	movs	r3, #1
  }
}
 800266a:	4618      	mov	r0, r3
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr
 8002674:	e000ed00 	.word	0xe000ed00

08002678 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8002678:	b480      	push	{r7}
 800267a:	b087      	sub	sp, #28
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	460b      	mov	r3, r1
 8002682:	607a      	str	r2, [r7, #4]
 8002684:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8002686:	2300      	movs	r3, #0
 8002688:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d101      	bne.n	8002694 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e00a      	b.n	80026aa <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8002694:	7afb      	ldrb	r3, [r7, #11]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d103      	bne.n	80026a2 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	605a      	str	r2, [r3, #4]
      break;
 80026a0:	e002      	b.n	80026a8 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	75fb      	strb	r3, [r7, #23]
      break;
 80026a6:	bf00      	nop
  }

  return status;
 80026a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	371c      	adds	r7, #28
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr

080026b6 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80026b6:	b480      	push	{r7}
 80026b8:	b083      	sub	sp, #12
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
 80026be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e003      	b.n	80026d2 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80026d0:	2300      	movs	r3, #0
  }
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
	...

080026e0 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b086      	sub	sp, #24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	0c1b      	lsrs	r3, r3, #16
 80026ee:	f003 0303 	and.w	r3, r3, #3
 80026f2:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 031f 	and.w	r3, r3, #31
 80026fc:	2201      	movs	r2, #1
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8002704:	f7ff ffa6 	bl	8002654 <HAL_GetCurrentCPUID>
 8002708:	4603      	mov	r3, r0
 800270a:	2b03      	cmp	r3, #3
 800270c:	d105      	bne.n	800271a <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	011a      	lsls	r2, r3, #4
 8002712:	4b0f      	ldr	r3, [pc, #60]	@ (8002750 <HAL_EXTI_IRQHandler+0x70>)
 8002714:	4413      	add	r3, r2
 8002716:	617b      	str	r3, [r7, #20]
 8002718:	e004      	b.n	8002724 <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	011a      	lsls	r2, r3, #4
 800271e:	4b0d      	ldr	r3, [pc, #52]	@ (8002754 <HAL_EXTI_IRQHandler+0x74>)
 8002720:	4413      	add	r3, r2
 8002722:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	4013      	ands	r3, r2
 800272c:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d009      	beq.n	8002748 <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d002      	beq.n	8002748 <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	4798      	blx	r3
    }
  }
}
 8002748:	bf00      	nop
 800274a:	3718      	adds	r7, #24
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	58000088 	.word	0x58000088
 8002754:	580000c8 	.word	0x580000c8

08002758 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8002758:	b480      	push	{r7}
 800275a:	b089      	sub	sp, #36	@ 0x24
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002762:	2300      	movs	r3, #0
 8002764:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002766:	4b89      	ldr	r3, [pc, #548]	@ (800298c <HAL_GPIO_Init+0x234>)
 8002768:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800276a:	e194      	b.n	8002a96 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	2101      	movs	r1, #1
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	fa01 f303 	lsl.w	r3, r1, r3
 8002778:	4013      	ands	r3, r2
 800277a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	2b00      	cmp	r3, #0
 8002780:	f000 8186 	beq.w	8002a90 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f003 0303 	and.w	r3, r3, #3
 800278c:	2b01      	cmp	r3, #1
 800278e:	d005      	beq.n	800279c <HAL_GPIO_Init+0x44>
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f003 0303 	and.w	r3, r3, #3
 8002798:	2b02      	cmp	r3, #2
 800279a:	d130      	bne.n	80027fe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	2203      	movs	r2, #3
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	43db      	mvns	r3, r3
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	4013      	ands	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	68da      	ldr	r2, [r3, #12]
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027d2:	2201      	movs	r2, #1
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	fa02 f303 	lsl.w	r3, r2, r3
 80027da:	43db      	mvns	r3, r3
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	4013      	ands	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	091b      	lsrs	r3, r3, #4
 80027e8:	f003 0201 	and.w	r2, r3, #1
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f003 0303 	and.w	r3, r3, #3
 8002806:	2b03      	cmp	r3, #3
 8002808:	d017      	beq.n	800283a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	2203      	movs	r2, #3
 8002816:	fa02 f303 	lsl.w	r3, r2, r3
 800281a:	43db      	mvns	r3, r3
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	4013      	ands	r3, r2
 8002820:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	689a      	ldr	r2, [r3, #8]
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	fa02 f303 	lsl.w	r3, r2, r3
 800282e:	69ba      	ldr	r2, [r7, #24]
 8002830:	4313      	orrs	r3, r2
 8002832:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f003 0303 	and.w	r3, r3, #3
 8002842:	2b02      	cmp	r3, #2
 8002844:	d123      	bne.n	800288e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	08da      	lsrs	r2, r3, #3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	3208      	adds	r2, #8
 800284e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002852:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	220f      	movs	r2, #15
 800285e:	fa02 f303 	lsl.w	r3, r2, r3
 8002862:	43db      	mvns	r3, r3
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	4013      	ands	r3, r2
 8002868:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	691a      	ldr	r2, [r3, #16]
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	f003 0307 	and.w	r3, r3, #7
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	fa02 f303 	lsl.w	r3, r2, r3
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	4313      	orrs	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	08da      	lsrs	r2, r3, #3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	3208      	adds	r2, #8
 8002888:	69b9      	ldr	r1, [r7, #24]
 800288a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	2203      	movs	r2, #3
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	43db      	mvns	r3, r3
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	4013      	ands	r3, r2
 80028a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f003 0203 	and.w	r2, r3, #3
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	fa02 f303 	lsl.w	r3, r2, r3
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f000 80e0 	beq.w	8002a90 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028d0:	4b2f      	ldr	r3, [pc, #188]	@ (8002990 <HAL_GPIO_Init+0x238>)
 80028d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80028d6:	4a2e      	ldr	r2, [pc, #184]	@ (8002990 <HAL_GPIO_Init+0x238>)
 80028d8:	f043 0302 	orr.w	r3, r3, #2
 80028dc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80028e0:	4b2b      	ldr	r3, [pc, #172]	@ (8002990 <HAL_GPIO_Init+0x238>)
 80028e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	60fb      	str	r3, [r7, #12]
 80028ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028ee:	4a29      	ldr	r2, [pc, #164]	@ (8002994 <HAL_GPIO_Init+0x23c>)
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	089b      	lsrs	r3, r3, #2
 80028f4:	3302      	adds	r3, #2
 80028f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	f003 0303 	and.w	r3, r3, #3
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	220f      	movs	r2, #15
 8002906:	fa02 f303 	lsl.w	r3, r2, r3
 800290a:	43db      	mvns	r3, r3
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	4013      	ands	r3, r2
 8002910:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a20      	ldr	r2, [pc, #128]	@ (8002998 <HAL_GPIO_Init+0x240>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d052      	beq.n	80029c0 <HAL_GPIO_Init+0x268>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a1f      	ldr	r2, [pc, #124]	@ (800299c <HAL_GPIO_Init+0x244>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d031      	beq.n	8002986 <HAL_GPIO_Init+0x22e>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a1e      	ldr	r2, [pc, #120]	@ (80029a0 <HAL_GPIO_Init+0x248>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d02b      	beq.n	8002982 <HAL_GPIO_Init+0x22a>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a1d      	ldr	r2, [pc, #116]	@ (80029a4 <HAL_GPIO_Init+0x24c>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d025      	beq.n	800297e <HAL_GPIO_Init+0x226>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a1c      	ldr	r2, [pc, #112]	@ (80029a8 <HAL_GPIO_Init+0x250>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d01f      	beq.n	800297a <HAL_GPIO_Init+0x222>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a1b      	ldr	r2, [pc, #108]	@ (80029ac <HAL_GPIO_Init+0x254>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d019      	beq.n	8002976 <HAL_GPIO_Init+0x21e>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a1a      	ldr	r2, [pc, #104]	@ (80029b0 <HAL_GPIO_Init+0x258>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d013      	beq.n	8002972 <HAL_GPIO_Init+0x21a>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a19      	ldr	r2, [pc, #100]	@ (80029b4 <HAL_GPIO_Init+0x25c>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d00d      	beq.n	800296e <HAL_GPIO_Init+0x216>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a18      	ldr	r2, [pc, #96]	@ (80029b8 <HAL_GPIO_Init+0x260>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d007      	beq.n	800296a <HAL_GPIO_Init+0x212>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a17      	ldr	r2, [pc, #92]	@ (80029bc <HAL_GPIO_Init+0x264>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d101      	bne.n	8002966 <HAL_GPIO_Init+0x20e>
 8002962:	2309      	movs	r3, #9
 8002964:	e02d      	b.n	80029c2 <HAL_GPIO_Init+0x26a>
 8002966:	230a      	movs	r3, #10
 8002968:	e02b      	b.n	80029c2 <HAL_GPIO_Init+0x26a>
 800296a:	2308      	movs	r3, #8
 800296c:	e029      	b.n	80029c2 <HAL_GPIO_Init+0x26a>
 800296e:	2307      	movs	r3, #7
 8002970:	e027      	b.n	80029c2 <HAL_GPIO_Init+0x26a>
 8002972:	2306      	movs	r3, #6
 8002974:	e025      	b.n	80029c2 <HAL_GPIO_Init+0x26a>
 8002976:	2305      	movs	r3, #5
 8002978:	e023      	b.n	80029c2 <HAL_GPIO_Init+0x26a>
 800297a:	2304      	movs	r3, #4
 800297c:	e021      	b.n	80029c2 <HAL_GPIO_Init+0x26a>
 800297e:	2303      	movs	r3, #3
 8002980:	e01f      	b.n	80029c2 <HAL_GPIO_Init+0x26a>
 8002982:	2302      	movs	r3, #2
 8002984:	e01d      	b.n	80029c2 <HAL_GPIO_Init+0x26a>
 8002986:	2301      	movs	r3, #1
 8002988:	e01b      	b.n	80029c2 <HAL_GPIO_Init+0x26a>
 800298a:	bf00      	nop
 800298c:	58000080 	.word	0x58000080
 8002990:	58024400 	.word	0x58024400
 8002994:	58000400 	.word	0x58000400
 8002998:	58020000 	.word	0x58020000
 800299c:	58020400 	.word	0x58020400
 80029a0:	58020800 	.word	0x58020800
 80029a4:	58020c00 	.word	0x58020c00
 80029a8:	58021000 	.word	0x58021000
 80029ac:	58021400 	.word	0x58021400
 80029b0:	58021800 	.word	0x58021800
 80029b4:	58021c00 	.word	0x58021c00
 80029b8:	58022000 	.word	0x58022000
 80029bc:	58022400 	.word	0x58022400
 80029c0:	2300      	movs	r3, #0
 80029c2:	69fa      	ldr	r2, [r7, #28]
 80029c4:	f002 0203 	and.w	r2, r2, #3
 80029c8:	0092      	lsls	r2, r2, #2
 80029ca:	4093      	lsls	r3, r2
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029d2:	4938      	ldr	r1, [pc, #224]	@ (8002ab4 <HAL_GPIO_Init+0x35c>)
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	089b      	lsrs	r3, r3, #2
 80029d8:	3302      	adds	r3, #2
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	43db      	mvns	r3, r3
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	4013      	ands	r3, r2
 80029f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d003      	beq.n	8002a06 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002a06:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002a0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d003      	beq.n	8002a34 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002a34:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	43db      	mvns	r3, r3
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	4013      	ands	r3, r2
 8002a4a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d003      	beq.n	8002a60 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	43db      	mvns	r3, r3
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	4013      	ands	r3, r2
 8002a74:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d003      	beq.n	8002a8a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	3301      	adds	r3, #1
 8002a94:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	f47f ae63 	bne.w	800276c <HAL_GPIO_Init+0x14>
  }
}
 8002aa6:	bf00      	nop
 8002aa8:	bf00      	nop
 8002aaa:	3724      	adds	r7, #36	@ 0x24
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr
 8002ab4:	58000400 	.word	0x58000400

08002ab8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	807b      	strh	r3, [r7, #2]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ac8:	787b      	ldrb	r3, [r7, #1]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d003      	beq.n	8002ad6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ace:	887a      	ldrh	r2, [r7, #2]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002ad4:	e003      	b.n	8002ade <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002ad6:	887b      	ldrh	r3, [r7, #2]
 8002ad8:	041a      	lsls	r2, r3, #16
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	619a      	str	r2, [r3, #24]
}
 8002ade:	bf00      	nop
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr

08002aea <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002aea:	b480      	push	{r7}
 8002aec:	b085      	sub	sp, #20
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
 8002af2:	460b      	mov	r3, r1
 8002af4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002afc:	887a      	ldrh	r2, [r7, #2]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	4013      	ands	r3, r2
 8002b02:	041a      	lsls	r2, r3, #16
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	43d9      	mvns	r1, r3
 8002b08:	887b      	ldrh	r3, [r7, #2]
 8002b0a:	400b      	ands	r3, r1
 8002b0c:	431a      	orrs	r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	619a      	str	r2, [r3, #24]
}
 8002b12:	bf00      	nop
 8002b14:	3714      	adds	r7, #20
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
	...

08002b20 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002b28:	4a08      	ldr	r2, [pc, #32]	@ (8002b4c <HAL_HSEM_FastTake+0x2c>)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	3320      	adds	r3, #32
 8002b2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b32:	4a07      	ldr	r2, [pc, #28]	@ (8002b50 <HAL_HSEM_FastTake+0x30>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d101      	bne.n	8002b3c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	e000      	b.n	8002b3e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	58026400 	.word	0x58026400
 8002b50:	80000300 	.word	0x80000300

08002b54 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002b5e:	4906      	ldr	r1, [pc, #24]	@ (8002b78 <HAL_HSEM_Release+0x24>)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr
 8002b78:	58026400 	.word	0x58026400

08002b7c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002b84:	4b29      	ldr	r3, [pc, #164]	@ (8002c2c <HAL_PWREx_ConfigSupply+0xb0>)
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	f003 0307 	and.w	r3, r3, #7
 8002b8c:	2b06      	cmp	r3, #6
 8002b8e:	d00a      	beq.n	8002ba6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002b90:	4b26      	ldr	r3, [pc, #152]	@ (8002c2c <HAL_PWREx_ConfigSupply+0xb0>)
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d001      	beq.n	8002ba2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e040      	b.n	8002c24 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	e03e      	b.n	8002c24 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002ba6:	4b21      	ldr	r3, [pc, #132]	@ (8002c2c <HAL_PWREx_ConfigSupply+0xb0>)
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8002bae:	491f      	ldr	r1, [pc, #124]	@ (8002c2c <HAL_PWREx_ConfigSupply+0xb0>)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002bb6:	f7ff fc01 	bl	80023bc <HAL_GetTick>
 8002bba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002bbc:	e009      	b.n	8002bd2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002bbe:	f7ff fbfd 	bl	80023bc <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002bcc:	d901      	bls.n	8002bd2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e028      	b.n	8002c24 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002bd2:	4b16      	ldr	r3, [pc, #88]	@ (8002c2c <HAL_PWREx_ConfigSupply+0xb0>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002bda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002bde:	d1ee      	bne.n	8002bbe <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2b1e      	cmp	r3, #30
 8002be4:	d008      	beq.n	8002bf8 <HAL_PWREx_ConfigSupply+0x7c>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2b2e      	cmp	r3, #46	@ 0x2e
 8002bea:	d005      	beq.n	8002bf8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2b1d      	cmp	r3, #29
 8002bf0:	d002      	beq.n	8002bf8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b2d      	cmp	r3, #45	@ 0x2d
 8002bf6:	d114      	bne.n	8002c22 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002bf8:	f7ff fbe0 	bl	80023bc <HAL_GetTick>
 8002bfc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002bfe:	e009      	b.n	8002c14 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002c00:	f7ff fbdc 	bl	80023bc <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002c0e:	d901      	bls.n	8002c14 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e007      	b.n	8002c24 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002c14:	4b05      	ldr	r3, [pc, #20]	@ (8002c2c <HAL_PWREx_ConfigSupply+0xb0>)
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c20:	d1ee      	bne.n	8002c00 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3710      	adds	r7, #16
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	58024800 	.word	0x58024800

08002c30 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b08c      	sub	sp, #48	@ 0x30
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d102      	bne.n	8002c44 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	f000 bc48 	b.w	80034d4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0301 	and.w	r3, r3, #1
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	f000 8088 	beq.w	8002d62 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c52:	4b99      	ldr	r3, [pc, #612]	@ (8002eb8 <HAL_RCC_OscConfig+0x288>)
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c5c:	4b96      	ldr	r3, [pc, #600]	@ (8002eb8 <HAL_RCC_OscConfig+0x288>)
 8002c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c60:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002c62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c64:	2b10      	cmp	r3, #16
 8002c66:	d007      	beq.n	8002c78 <HAL_RCC_OscConfig+0x48>
 8002c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c6a:	2b18      	cmp	r3, #24
 8002c6c:	d111      	bne.n	8002c92 <HAL_RCC_OscConfig+0x62>
 8002c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c70:	f003 0303 	and.w	r3, r3, #3
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d10c      	bne.n	8002c92 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c78:	4b8f      	ldr	r3, [pc, #572]	@ (8002eb8 <HAL_RCC_OscConfig+0x288>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d06d      	beq.n	8002d60 <HAL_RCC_OscConfig+0x130>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d169      	bne.n	8002d60 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	f000 bc21 	b.w	80034d4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c9a:	d106      	bne.n	8002caa <HAL_RCC_OscConfig+0x7a>
 8002c9c:	4b86      	ldr	r3, [pc, #536]	@ (8002eb8 <HAL_RCC_OscConfig+0x288>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a85      	ldr	r2, [pc, #532]	@ (8002eb8 <HAL_RCC_OscConfig+0x288>)
 8002ca2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ca6:	6013      	str	r3, [r2, #0]
 8002ca8:	e02e      	b.n	8002d08 <HAL_RCC_OscConfig+0xd8>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d10c      	bne.n	8002ccc <HAL_RCC_OscConfig+0x9c>
 8002cb2:	4b81      	ldr	r3, [pc, #516]	@ (8002eb8 <HAL_RCC_OscConfig+0x288>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a80      	ldr	r2, [pc, #512]	@ (8002eb8 <HAL_RCC_OscConfig+0x288>)
 8002cb8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cbc:	6013      	str	r3, [r2, #0]
 8002cbe:	4b7e      	ldr	r3, [pc, #504]	@ (8002eb8 <HAL_RCC_OscConfig+0x288>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a7d      	ldr	r2, [pc, #500]	@ (8002eb8 <HAL_RCC_OscConfig+0x288>)
 8002cc4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cc8:	6013      	str	r3, [r2, #0]
 8002cca:	e01d      	b.n	8002d08 <HAL_RCC_OscConfig+0xd8>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002cd4:	d10c      	bne.n	8002cf0 <HAL_RCC_OscConfig+0xc0>
 8002cd6:	4b78      	ldr	r3, [pc, #480]	@ (8002eb8 <HAL_RCC_OscConfig+0x288>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a77      	ldr	r2, [pc, #476]	@ (8002eb8 <HAL_RCC_OscConfig+0x288>)
 8002cdc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ce0:	6013      	str	r3, [r2, #0]
 8002ce2:	4b75      	ldr	r3, [pc, #468]	@ (8002eb8 <HAL_RCC_OscConfig+0x288>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a74      	ldr	r2, [pc, #464]	@ (8002eb8 <HAL_RCC_OscConfig+0x288>)
 8002ce8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cec:	6013      	str	r3, [r2, #0]
 8002cee:	e00b      	b.n	8002d08 <HAL_RCC_OscConfig+0xd8>
 8002cf0:	4b71      	ldr	r3, [pc, #452]	@ (8002eb8 <HAL_RCC_OscConfig+0x288>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a70      	ldr	r2, [pc, #448]	@ (8002eb8 <HAL_RCC_OscConfig+0x288>)
 8002cf6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cfa:	6013      	str	r3, [r2, #0]
 8002cfc:	4b6e      	ldr	r3, [pc, #440]	@ (8002eb8 <HAL_RCC_OscConfig+0x288>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a6d      	ldr	r2, [pc, #436]	@ (8002eb8 <HAL_RCC_OscConfig+0x288>)
 8002d02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d013      	beq.n	8002d38 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d10:	f7ff fb54 	bl	80023bc <HAL_GetTick>
 8002d14:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d16:	e008      	b.n	8002d2a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d18:	f7ff fb50 	bl	80023bc <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b64      	cmp	r3, #100	@ 0x64
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e3d4      	b.n	80034d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d2a:	4b63      	ldr	r3, [pc, #396]	@ (8002eb8 <HAL_RCC_OscConfig+0x288>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d0f0      	beq.n	8002d18 <HAL_RCC_OscConfig+0xe8>
 8002d36:	e014      	b.n	8002d62 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d38:	f7ff fb40 	bl	80023bc <HAL_GetTick>
 8002d3c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d3e:	e008      	b.n	8002d52 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d40:	f7ff fb3c 	bl	80023bc <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b64      	cmp	r3, #100	@ 0x64
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e3c0      	b.n	80034d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d52:	4b59      	ldr	r3, [pc, #356]	@ (8002eb8 <HAL_RCC_OscConfig+0x288>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d1f0      	bne.n	8002d40 <HAL_RCC_OscConfig+0x110>
 8002d5e:	e000      	b.n	8002d62 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f000 80ca 	beq.w	8002f04 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d70:	4b51      	ldr	r3, [pc, #324]	@ (8002eb8 <HAL_RCC_OscConfig+0x288>)
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d78:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d7a:	4b4f      	ldr	r3, [pc, #316]	@ (8002eb8 <HAL_RCC_OscConfig+0x288>)
 8002d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d7e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002d80:	6a3b      	ldr	r3, [r7, #32]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d007      	beq.n	8002d96 <HAL_RCC_OscConfig+0x166>
 8002d86:	6a3b      	ldr	r3, [r7, #32]
 8002d88:	2b18      	cmp	r3, #24
 8002d8a:	d156      	bne.n	8002e3a <HAL_RCC_OscConfig+0x20a>
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	f003 0303 	and.w	r3, r3, #3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d151      	bne.n	8002e3a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d96:	4b48      	ldr	r3, [pc, #288]	@ (8002eb8 <HAL_RCC_OscConfig+0x288>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0304 	and.w	r3, r3, #4
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d005      	beq.n	8002dae <HAL_RCC_OscConfig+0x17e>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d101      	bne.n	8002dae <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e392      	b.n	80034d4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002dae:	4b42      	ldr	r3, [pc, #264]	@ (8002eb8 <HAL_RCC_OscConfig+0x288>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f023 0219 	bic.w	r2, r3, #25
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	493f      	ldr	r1, [pc, #252]	@ (8002eb8 <HAL_RCC_OscConfig+0x288>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc0:	f7ff fafc 	bl	80023bc <HAL_GetTick>
 8002dc4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dc8:	f7ff faf8 	bl	80023bc <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e37c      	b.n	80034d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002dda:	4b37      	ldr	r3, [pc, #220]	@ (8002eb8 <HAL_RCC_OscConfig+0x288>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0304 	and.w	r3, r3, #4
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d0f0      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002de6:	f7ff fb19 	bl	800241c <HAL_GetREVID>
 8002dea:	4603      	mov	r3, r0
 8002dec:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d817      	bhi.n	8002e24 <HAL_RCC_OscConfig+0x1f4>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	691b      	ldr	r3, [r3, #16]
 8002df8:	2b40      	cmp	r3, #64	@ 0x40
 8002dfa:	d108      	bne.n	8002e0e <HAL_RCC_OscConfig+0x1de>
 8002dfc:	4b2e      	ldr	r3, [pc, #184]	@ (8002eb8 <HAL_RCC_OscConfig+0x288>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002e04:	4a2c      	ldr	r2, [pc, #176]	@ (8002eb8 <HAL_RCC_OscConfig+0x288>)
 8002e06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e0a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e0c:	e07a      	b.n	8002f04 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e0e:	4b2a      	ldr	r3, [pc, #168]	@ (8002eb8 <HAL_RCC_OscConfig+0x288>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	031b      	lsls	r3, r3, #12
 8002e1c:	4926      	ldr	r1, [pc, #152]	@ (8002eb8 <HAL_RCC_OscConfig+0x288>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e22:	e06f      	b.n	8002f04 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e24:	4b24      	ldr	r3, [pc, #144]	@ (8002eb8 <HAL_RCC_OscConfig+0x288>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	061b      	lsls	r3, r3, #24
 8002e32:	4921      	ldr	r1, [pc, #132]	@ (8002eb8 <HAL_RCC_OscConfig+0x288>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e38:	e064      	b.n	8002f04 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d047      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002e42:	4b1d      	ldr	r3, [pc, #116]	@ (8002eb8 <HAL_RCC_OscConfig+0x288>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f023 0219 	bic.w	r2, r3, #25
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	491a      	ldr	r1, [pc, #104]	@ (8002eb8 <HAL_RCC_OscConfig+0x288>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e54:	f7ff fab2 	bl	80023bc <HAL_GetTick>
 8002e58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e5a:	e008      	b.n	8002e6e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e5c:	f7ff faae 	bl	80023bc <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e332      	b.n	80034d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e6e:	4b12      	ldr	r3, [pc, #72]	@ (8002eb8 <HAL_RCC_OscConfig+0x288>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0304 	and.w	r3, r3, #4
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d0f0      	beq.n	8002e5c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e7a:	f7ff facf 	bl	800241c <HAL_GetREVID>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d819      	bhi.n	8002ebc <HAL_RCC_OscConfig+0x28c>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	691b      	ldr	r3, [r3, #16]
 8002e8c:	2b40      	cmp	r3, #64	@ 0x40
 8002e8e:	d108      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x272>
 8002e90:	4b09      	ldr	r3, [pc, #36]	@ (8002eb8 <HAL_RCC_OscConfig+0x288>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002e98:	4a07      	ldr	r2, [pc, #28]	@ (8002eb8 <HAL_RCC_OscConfig+0x288>)
 8002e9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e9e:	6053      	str	r3, [r2, #4]
 8002ea0:	e030      	b.n	8002f04 <HAL_RCC_OscConfig+0x2d4>
 8002ea2:	4b05      	ldr	r3, [pc, #20]	@ (8002eb8 <HAL_RCC_OscConfig+0x288>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	031b      	lsls	r3, r3, #12
 8002eb0:	4901      	ldr	r1, [pc, #4]	@ (8002eb8 <HAL_RCC_OscConfig+0x288>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	604b      	str	r3, [r1, #4]
 8002eb6:	e025      	b.n	8002f04 <HAL_RCC_OscConfig+0x2d4>
 8002eb8:	58024400 	.word	0x58024400
 8002ebc:	4b9a      	ldr	r3, [pc, #616]	@ (8003128 <HAL_RCC_OscConfig+0x4f8>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	061b      	lsls	r3, r3, #24
 8002eca:	4997      	ldr	r1, [pc, #604]	@ (8003128 <HAL_RCC_OscConfig+0x4f8>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	604b      	str	r3, [r1, #4]
 8002ed0:	e018      	b.n	8002f04 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ed2:	4b95      	ldr	r3, [pc, #596]	@ (8003128 <HAL_RCC_OscConfig+0x4f8>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a94      	ldr	r2, [pc, #592]	@ (8003128 <HAL_RCC_OscConfig+0x4f8>)
 8002ed8:	f023 0301 	bic.w	r3, r3, #1
 8002edc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ede:	f7ff fa6d 	bl	80023bc <HAL_GetTick>
 8002ee2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002ee4:	e008      	b.n	8002ef8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ee6:	f7ff fa69 	bl	80023bc <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d901      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e2ed      	b.n	80034d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002ef8:	4b8b      	ldr	r3, [pc, #556]	@ (8003128 <HAL_RCC_OscConfig+0x4f8>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0304 	and.w	r3, r3, #4
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1f0      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0310 	and.w	r3, r3, #16
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	f000 80a9 	beq.w	8003064 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f12:	4b85      	ldr	r3, [pc, #532]	@ (8003128 <HAL_RCC_OscConfig+0x4f8>)
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f1a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002f1c:	4b82      	ldr	r3, [pc, #520]	@ (8003128 <HAL_RCC_OscConfig+0x4f8>)
 8002f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f20:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	2b08      	cmp	r3, #8
 8002f26:	d007      	beq.n	8002f38 <HAL_RCC_OscConfig+0x308>
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	2b18      	cmp	r3, #24
 8002f2c:	d13a      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x374>
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	f003 0303 	and.w	r3, r3, #3
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d135      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002f38:	4b7b      	ldr	r3, [pc, #492]	@ (8003128 <HAL_RCC_OscConfig+0x4f8>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d005      	beq.n	8002f50 <HAL_RCC_OscConfig+0x320>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	69db      	ldr	r3, [r3, #28]
 8002f48:	2b80      	cmp	r3, #128	@ 0x80
 8002f4a:	d001      	beq.n	8002f50 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e2c1      	b.n	80034d4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f50:	f7ff fa64 	bl	800241c <HAL_GetREVID>
 8002f54:	4603      	mov	r3, r0
 8002f56:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d817      	bhi.n	8002f8e <HAL_RCC_OscConfig+0x35e>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a1b      	ldr	r3, [r3, #32]
 8002f62:	2b20      	cmp	r3, #32
 8002f64:	d108      	bne.n	8002f78 <HAL_RCC_OscConfig+0x348>
 8002f66:	4b70      	ldr	r3, [pc, #448]	@ (8003128 <HAL_RCC_OscConfig+0x4f8>)
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002f6e:	4a6e      	ldr	r2, [pc, #440]	@ (8003128 <HAL_RCC_OscConfig+0x4f8>)
 8002f70:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002f74:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002f76:	e075      	b.n	8003064 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f78:	4b6b      	ldr	r3, [pc, #428]	@ (8003128 <HAL_RCC_OscConfig+0x4f8>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a1b      	ldr	r3, [r3, #32]
 8002f84:	069b      	lsls	r3, r3, #26
 8002f86:	4968      	ldr	r1, [pc, #416]	@ (8003128 <HAL_RCC_OscConfig+0x4f8>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002f8c:	e06a      	b.n	8003064 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f8e:	4b66      	ldr	r3, [pc, #408]	@ (8003128 <HAL_RCC_OscConfig+0x4f8>)
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a1b      	ldr	r3, [r3, #32]
 8002f9a:	061b      	lsls	r3, r3, #24
 8002f9c:	4962      	ldr	r1, [pc, #392]	@ (8003128 <HAL_RCC_OscConfig+0x4f8>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002fa2:	e05f      	b.n	8003064 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	69db      	ldr	r3, [r3, #28]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d042      	beq.n	8003032 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002fac:	4b5e      	ldr	r3, [pc, #376]	@ (8003128 <HAL_RCC_OscConfig+0x4f8>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a5d      	ldr	r2, [pc, #372]	@ (8003128 <HAL_RCC_OscConfig+0x4f8>)
 8002fb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002fb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb8:	f7ff fa00 	bl	80023bc <HAL_GetTick>
 8002fbc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002fbe:	e008      	b.n	8002fd2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002fc0:	f7ff f9fc 	bl	80023bc <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d901      	bls.n	8002fd2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e280      	b.n	80034d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002fd2:	4b55      	ldr	r3, [pc, #340]	@ (8003128 <HAL_RCC_OscConfig+0x4f8>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d0f0      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002fde:	f7ff fa1d 	bl	800241c <HAL_GetREVID>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d817      	bhi.n	800301c <HAL_RCC_OscConfig+0x3ec>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a1b      	ldr	r3, [r3, #32]
 8002ff0:	2b20      	cmp	r3, #32
 8002ff2:	d108      	bne.n	8003006 <HAL_RCC_OscConfig+0x3d6>
 8002ff4:	4b4c      	ldr	r3, [pc, #304]	@ (8003128 <HAL_RCC_OscConfig+0x4f8>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002ffc:	4a4a      	ldr	r2, [pc, #296]	@ (8003128 <HAL_RCC_OscConfig+0x4f8>)
 8002ffe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003002:	6053      	str	r3, [r2, #4]
 8003004:	e02e      	b.n	8003064 <HAL_RCC_OscConfig+0x434>
 8003006:	4b48      	ldr	r3, [pc, #288]	@ (8003128 <HAL_RCC_OscConfig+0x4f8>)
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a1b      	ldr	r3, [r3, #32]
 8003012:	069b      	lsls	r3, r3, #26
 8003014:	4944      	ldr	r1, [pc, #272]	@ (8003128 <HAL_RCC_OscConfig+0x4f8>)
 8003016:	4313      	orrs	r3, r2
 8003018:	604b      	str	r3, [r1, #4]
 800301a:	e023      	b.n	8003064 <HAL_RCC_OscConfig+0x434>
 800301c:	4b42      	ldr	r3, [pc, #264]	@ (8003128 <HAL_RCC_OscConfig+0x4f8>)
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a1b      	ldr	r3, [r3, #32]
 8003028:	061b      	lsls	r3, r3, #24
 800302a:	493f      	ldr	r1, [pc, #252]	@ (8003128 <HAL_RCC_OscConfig+0x4f8>)
 800302c:	4313      	orrs	r3, r2
 800302e:	60cb      	str	r3, [r1, #12]
 8003030:	e018      	b.n	8003064 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003032:	4b3d      	ldr	r3, [pc, #244]	@ (8003128 <HAL_RCC_OscConfig+0x4f8>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a3c      	ldr	r2, [pc, #240]	@ (8003128 <HAL_RCC_OscConfig+0x4f8>)
 8003038:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800303c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800303e:	f7ff f9bd 	bl	80023bc <HAL_GetTick>
 8003042:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003044:	e008      	b.n	8003058 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003046:	f7ff f9b9 	bl	80023bc <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	2b02      	cmp	r3, #2
 8003052:	d901      	bls.n	8003058 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e23d      	b.n	80034d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003058:	4b33      	ldr	r3, [pc, #204]	@ (8003128 <HAL_RCC_OscConfig+0x4f8>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003060:	2b00      	cmp	r3, #0
 8003062:	d1f0      	bne.n	8003046 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0308 	and.w	r3, r3, #8
 800306c:	2b00      	cmp	r3, #0
 800306e:	d036      	beq.n	80030de <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	695b      	ldr	r3, [r3, #20]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d019      	beq.n	80030ac <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003078:	4b2b      	ldr	r3, [pc, #172]	@ (8003128 <HAL_RCC_OscConfig+0x4f8>)
 800307a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800307c:	4a2a      	ldr	r2, [pc, #168]	@ (8003128 <HAL_RCC_OscConfig+0x4f8>)
 800307e:	f043 0301 	orr.w	r3, r3, #1
 8003082:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003084:	f7ff f99a 	bl	80023bc <HAL_GetTick>
 8003088:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800308a:	e008      	b.n	800309e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800308c:	f7ff f996 	bl	80023bc <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b02      	cmp	r3, #2
 8003098:	d901      	bls.n	800309e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e21a      	b.n	80034d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800309e:	4b22      	ldr	r3, [pc, #136]	@ (8003128 <HAL_RCC_OscConfig+0x4f8>)
 80030a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d0f0      	beq.n	800308c <HAL_RCC_OscConfig+0x45c>
 80030aa:	e018      	b.n	80030de <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030ac:	4b1e      	ldr	r3, [pc, #120]	@ (8003128 <HAL_RCC_OscConfig+0x4f8>)
 80030ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030b0:	4a1d      	ldr	r2, [pc, #116]	@ (8003128 <HAL_RCC_OscConfig+0x4f8>)
 80030b2:	f023 0301 	bic.w	r3, r3, #1
 80030b6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b8:	f7ff f980 	bl	80023bc <HAL_GetTick>
 80030bc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80030be:	e008      	b.n	80030d2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030c0:	f7ff f97c 	bl	80023bc <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e200      	b.n	80034d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80030d2:	4b15      	ldr	r3, [pc, #84]	@ (8003128 <HAL_RCC_OscConfig+0x4f8>)
 80030d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1f0      	bne.n	80030c0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0320 	and.w	r3, r3, #32
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d039      	beq.n	800315e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d01c      	beq.n	800312c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80030f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003128 <HAL_RCC_OscConfig+0x4f8>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a0c      	ldr	r2, [pc, #48]	@ (8003128 <HAL_RCC_OscConfig+0x4f8>)
 80030f8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80030fc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80030fe:	f7ff f95d 	bl	80023bc <HAL_GetTick>
 8003102:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003104:	e008      	b.n	8003118 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003106:	f7ff f959 	bl	80023bc <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	2b02      	cmp	r3, #2
 8003112:	d901      	bls.n	8003118 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e1dd      	b.n	80034d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003118:	4b03      	ldr	r3, [pc, #12]	@ (8003128 <HAL_RCC_OscConfig+0x4f8>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d0f0      	beq.n	8003106 <HAL_RCC_OscConfig+0x4d6>
 8003124:	e01b      	b.n	800315e <HAL_RCC_OscConfig+0x52e>
 8003126:	bf00      	nop
 8003128:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800312c:	4b9b      	ldr	r3, [pc, #620]	@ (800339c <HAL_RCC_OscConfig+0x76c>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a9a      	ldr	r2, [pc, #616]	@ (800339c <HAL_RCC_OscConfig+0x76c>)
 8003132:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003136:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003138:	f7ff f940 	bl	80023bc <HAL_GetTick>
 800313c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800313e:	e008      	b.n	8003152 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003140:	f7ff f93c 	bl	80023bc <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b02      	cmp	r3, #2
 800314c:	d901      	bls.n	8003152 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e1c0      	b.n	80034d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003152:	4b92      	ldr	r3, [pc, #584]	@ (800339c <HAL_RCC_OscConfig+0x76c>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1f0      	bne.n	8003140 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0304 	and.w	r3, r3, #4
 8003166:	2b00      	cmp	r3, #0
 8003168:	f000 8081 	beq.w	800326e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800316c:	4b8c      	ldr	r3, [pc, #560]	@ (80033a0 <HAL_RCC_OscConfig+0x770>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a8b      	ldr	r2, [pc, #556]	@ (80033a0 <HAL_RCC_OscConfig+0x770>)
 8003172:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003176:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003178:	f7ff f920 	bl	80023bc <HAL_GetTick>
 800317c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800317e:	e008      	b.n	8003192 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003180:	f7ff f91c 	bl	80023bc <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b64      	cmp	r3, #100	@ 0x64
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e1a0      	b.n	80034d4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003192:	4b83      	ldr	r3, [pc, #524]	@ (80033a0 <HAL_RCC_OscConfig+0x770>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800319a:	2b00      	cmp	r3, #0
 800319c:	d0f0      	beq.n	8003180 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d106      	bne.n	80031b4 <HAL_RCC_OscConfig+0x584>
 80031a6:	4b7d      	ldr	r3, [pc, #500]	@ (800339c <HAL_RCC_OscConfig+0x76c>)
 80031a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031aa:	4a7c      	ldr	r2, [pc, #496]	@ (800339c <HAL_RCC_OscConfig+0x76c>)
 80031ac:	f043 0301 	orr.w	r3, r3, #1
 80031b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80031b2:	e02d      	b.n	8003210 <HAL_RCC_OscConfig+0x5e0>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d10c      	bne.n	80031d6 <HAL_RCC_OscConfig+0x5a6>
 80031bc:	4b77      	ldr	r3, [pc, #476]	@ (800339c <HAL_RCC_OscConfig+0x76c>)
 80031be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031c0:	4a76      	ldr	r2, [pc, #472]	@ (800339c <HAL_RCC_OscConfig+0x76c>)
 80031c2:	f023 0301 	bic.w	r3, r3, #1
 80031c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80031c8:	4b74      	ldr	r3, [pc, #464]	@ (800339c <HAL_RCC_OscConfig+0x76c>)
 80031ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031cc:	4a73      	ldr	r2, [pc, #460]	@ (800339c <HAL_RCC_OscConfig+0x76c>)
 80031ce:	f023 0304 	bic.w	r3, r3, #4
 80031d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80031d4:	e01c      	b.n	8003210 <HAL_RCC_OscConfig+0x5e0>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	2b05      	cmp	r3, #5
 80031dc:	d10c      	bne.n	80031f8 <HAL_RCC_OscConfig+0x5c8>
 80031de:	4b6f      	ldr	r3, [pc, #444]	@ (800339c <HAL_RCC_OscConfig+0x76c>)
 80031e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031e2:	4a6e      	ldr	r2, [pc, #440]	@ (800339c <HAL_RCC_OscConfig+0x76c>)
 80031e4:	f043 0304 	orr.w	r3, r3, #4
 80031e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80031ea:	4b6c      	ldr	r3, [pc, #432]	@ (800339c <HAL_RCC_OscConfig+0x76c>)
 80031ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ee:	4a6b      	ldr	r2, [pc, #428]	@ (800339c <HAL_RCC_OscConfig+0x76c>)
 80031f0:	f043 0301 	orr.w	r3, r3, #1
 80031f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80031f6:	e00b      	b.n	8003210 <HAL_RCC_OscConfig+0x5e0>
 80031f8:	4b68      	ldr	r3, [pc, #416]	@ (800339c <HAL_RCC_OscConfig+0x76c>)
 80031fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031fc:	4a67      	ldr	r2, [pc, #412]	@ (800339c <HAL_RCC_OscConfig+0x76c>)
 80031fe:	f023 0301 	bic.w	r3, r3, #1
 8003202:	6713      	str	r3, [r2, #112]	@ 0x70
 8003204:	4b65      	ldr	r3, [pc, #404]	@ (800339c <HAL_RCC_OscConfig+0x76c>)
 8003206:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003208:	4a64      	ldr	r2, [pc, #400]	@ (800339c <HAL_RCC_OscConfig+0x76c>)
 800320a:	f023 0304 	bic.w	r3, r3, #4
 800320e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d015      	beq.n	8003244 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003218:	f7ff f8d0 	bl	80023bc <HAL_GetTick>
 800321c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800321e:	e00a      	b.n	8003236 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003220:	f7ff f8cc 	bl	80023bc <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800322e:	4293      	cmp	r3, r2
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e14e      	b.n	80034d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003236:	4b59      	ldr	r3, [pc, #356]	@ (800339c <HAL_RCC_OscConfig+0x76c>)
 8003238:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d0ee      	beq.n	8003220 <HAL_RCC_OscConfig+0x5f0>
 8003242:	e014      	b.n	800326e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003244:	f7ff f8ba 	bl	80023bc <HAL_GetTick>
 8003248:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800324a:	e00a      	b.n	8003262 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800324c:	f7ff f8b6 	bl	80023bc <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	f241 3288 	movw	r2, #5000	@ 0x1388
 800325a:	4293      	cmp	r3, r2
 800325c:	d901      	bls.n	8003262 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e138      	b.n	80034d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003262:	4b4e      	ldr	r3, [pc, #312]	@ (800339c <HAL_RCC_OscConfig+0x76c>)
 8003264:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1ee      	bne.n	800324c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003272:	2b00      	cmp	r3, #0
 8003274:	f000 812d 	beq.w	80034d2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003278:	4b48      	ldr	r3, [pc, #288]	@ (800339c <HAL_RCC_OscConfig+0x76c>)
 800327a:	691b      	ldr	r3, [r3, #16]
 800327c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003280:	2b18      	cmp	r3, #24
 8003282:	f000 80bd 	beq.w	8003400 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800328a:	2b02      	cmp	r3, #2
 800328c:	f040 809e 	bne.w	80033cc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003290:	4b42      	ldr	r3, [pc, #264]	@ (800339c <HAL_RCC_OscConfig+0x76c>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a41      	ldr	r2, [pc, #260]	@ (800339c <HAL_RCC_OscConfig+0x76c>)
 8003296:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800329a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800329c:	f7ff f88e 	bl	80023bc <HAL_GetTick>
 80032a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80032a2:	e008      	b.n	80032b6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032a4:	f7ff f88a 	bl	80023bc <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e10e      	b.n	80034d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80032b6:	4b39      	ldr	r3, [pc, #228]	@ (800339c <HAL_RCC_OscConfig+0x76c>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1f0      	bne.n	80032a4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032c2:	4b36      	ldr	r3, [pc, #216]	@ (800339c <HAL_RCC_OscConfig+0x76c>)
 80032c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80032c6:	4b37      	ldr	r3, [pc, #220]	@ (80033a4 <HAL_RCC_OscConfig+0x774>)
 80032c8:	4013      	ands	r3, r2
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80032d2:	0112      	lsls	r2, r2, #4
 80032d4:	430a      	orrs	r2, r1
 80032d6:	4931      	ldr	r1, [pc, #196]	@ (800339c <HAL_RCC_OscConfig+0x76c>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	628b      	str	r3, [r1, #40]	@ 0x28
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e0:	3b01      	subs	r3, #1
 80032e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032ea:	3b01      	subs	r3, #1
 80032ec:	025b      	lsls	r3, r3, #9
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	431a      	orrs	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032f6:	3b01      	subs	r3, #1
 80032f8:	041b      	lsls	r3, r3, #16
 80032fa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80032fe:	431a      	orrs	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003304:	3b01      	subs	r3, #1
 8003306:	061b      	lsls	r3, r3, #24
 8003308:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800330c:	4923      	ldr	r1, [pc, #140]	@ (800339c <HAL_RCC_OscConfig+0x76c>)
 800330e:	4313      	orrs	r3, r2
 8003310:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003312:	4b22      	ldr	r3, [pc, #136]	@ (800339c <HAL_RCC_OscConfig+0x76c>)
 8003314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003316:	4a21      	ldr	r2, [pc, #132]	@ (800339c <HAL_RCC_OscConfig+0x76c>)
 8003318:	f023 0301 	bic.w	r3, r3, #1
 800331c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800331e:	4b1f      	ldr	r3, [pc, #124]	@ (800339c <HAL_RCC_OscConfig+0x76c>)
 8003320:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003322:	4b21      	ldr	r3, [pc, #132]	@ (80033a8 <HAL_RCC_OscConfig+0x778>)
 8003324:	4013      	ands	r3, r2
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800332a:	00d2      	lsls	r2, r2, #3
 800332c:	491b      	ldr	r1, [pc, #108]	@ (800339c <HAL_RCC_OscConfig+0x76c>)
 800332e:	4313      	orrs	r3, r2
 8003330:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003332:	4b1a      	ldr	r3, [pc, #104]	@ (800339c <HAL_RCC_OscConfig+0x76c>)
 8003334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003336:	f023 020c 	bic.w	r2, r3, #12
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333e:	4917      	ldr	r1, [pc, #92]	@ (800339c <HAL_RCC_OscConfig+0x76c>)
 8003340:	4313      	orrs	r3, r2
 8003342:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003344:	4b15      	ldr	r3, [pc, #84]	@ (800339c <HAL_RCC_OscConfig+0x76c>)
 8003346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003348:	f023 0202 	bic.w	r2, r3, #2
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003350:	4912      	ldr	r1, [pc, #72]	@ (800339c <HAL_RCC_OscConfig+0x76c>)
 8003352:	4313      	orrs	r3, r2
 8003354:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003356:	4b11      	ldr	r3, [pc, #68]	@ (800339c <HAL_RCC_OscConfig+0x76c>)
 8003358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800335a:	4a10      	ldr	r2, [pc, #64]	@ (800339c <HAL_RCC_OscConfig+0x76c>)
 800335c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003360:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003362:	4b0e      	ldr	r3, [pc, #56]	@ (800339c <HAL_RCC_OscConfig+0x76c>)
 8003364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003366:	4a0d      	ldr	r2, [pc, #52]	@ (800339c <HAL_RCC_OscConfig+0x76c>)
 8003368:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800336c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800336e:	4b0b      	ldr	r3, [pc, #44]	@ (800339c <HAL_RCC_OscConfig+0x76c>)
 8003370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003372:	4a0a      	ldr	r2, [pc, #40]	@ (800339c <HAL_RCC_OscConfig+0x76c>)
 8003374:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003378:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800337a:	4b08      	ldr	r3, [pc, #32]	@ (800339c <HAL_RCC_OscConfig+0x76c>)
 800337c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800337e:	4a07      	ldr	r2, [pc, #28]	@ (800339c <HAL_RCC_OscConfig+0x76c>)
 8003380:	f043 0301 	orr.w	r3, r3, #1
 8003384:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003386:	4b05      	ldr	r3, [pc, #20]	@ (800339c <HAL_RCC_OscConfig+0x76c>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a04      	ldr	r2, [pc, #16]	@ (800339c <HAL_RCC_OscConfig+0x76c>)
 800338c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003390:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003392:	f7ff f813 	bl	80023bc <HAL_GetTick>
 8003396:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003398:	e011      	b.n	80033be <HAL_RCC_OscConfig+0x78e>
 800339a:	bf00      	nop
 800339c:	58024400 	.word	0x58024400
 80033a0:	58024800 	.word	0x58024800
 80033a4:	fffffc0c 	.word	0xfffffc0c
 80033a8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033ac:	f7ff f806 	bl	80023bc <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e08a      	b.n	80034d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80033be:	4b47      	ldr	r3, [pc, #284]	@ (80034dc <HAL_RCC_OscConfig+0x8ac>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d0f0      	beq.n	80033ac <HAL_RCC_OscConfig+0x77c>
 80033ca:	e082      	b.n	80034d2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033cc:	4b43      	ldr	r3, [pc, #268]	@ (80034dc <HAL_RCC_OscConfig+0x8ac>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a42      	ldr	r2, [pc, #264]	@ (80034dc <HAL_RCC_OscConfig+0x8ac>)
 80033d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80033d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d8:	f7fe fff0 	bl	80023bc <HAL_GetTick>
 80033dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80033de:	e008      	b.n	80033f2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033e0:	f7fe ffec 	bl	80023bc <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e070      	b.n	80034d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80033f2:	4b3a      	ldr	r3, [pc, #232]	@ (80034dc <HAL_RCC_OscConfig+0x8ac>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d1f0      	bne.n	80033e0 <HAL_RCC_OscConfig+0x7b0>
 80033fe:	e068      	b.n	80034d2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003400:	4b36      	ldr	r3, [pc, #216]	@ (80034dc <HAL_RCC_OscConfig+0x8ac>)
 8003402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003404:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003406:	4b35      	ldr	r3, [pc, #212]	@ (80034dc <HAL_RCC_OscConfig+0x8ac>)
 8003408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800340a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003410:	2b01      	cmp	r3, #1
 8003412:	d031      	beq.n	8003478 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	f003 0203 	and.w	r2, r3, #3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800341e:	429a      	cmp	r2, r3
 8003420:	d12a      	bne.n	8003478 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	091b      	lsrs	r3, r3, #4
 8003426:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800342e:	429a      	cmp	r2, r3
 8003430:	d122      	bne.n	8003478 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800343c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800343e:	429a      	cmp	r2, r3
 8003440:	d11a      	bne.n	8003478 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	0a5b      	lsrs	r3, r3, #9
 8003446:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800344e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003450:	429a      	cmp	r2, r3
 8003452:	d111      	bne.n	8003478 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	0c1b      	lsrs	r3, r3, #16
 8003458:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003460:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003462:	429a      	cmp	r2, r3
 8003464:	d108      	bne.n	8003478 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	0e1b      	lsrs	r3, r3, #24
 800346a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003472:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003474:	429a      	cmp	r2, r3
 8003476:	d001      	beq.n	800347c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e02b      	b.n	80034d4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800347c:	4b17      	ldr	r3, [pc, #92]	@ (80034dc <HAL_RCC_OscConfig+0x8ac>)
 800347e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003480:	08db      	lsrs	r3, r3, #3
 8003482:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003486:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800348c:	693a      	ldr	r2, [r7, #16]
 800348e:	429a      	cmp	r2, r3
 8003490:	d01f      	beq.n	80034d2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003492:	4b12      	ldr	r3, [pc, #72]	@ (80034dc <HAL_RCC_OscConfig+0x8ac>)
 8003494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003496:	4a11      	ldr	r2, [pc, #68]	@ (80034dc <HAL_RCC_OscConfig+0x8ac>)
 8003498:	f023 0301 	bic.w	r3, r3, #1
 800349c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800349e:	f7fe ff8d 	bl	80023bc <HAL_GetTick>
 80034a2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80034a4:	bf00      	nop
 80034a6:	f7fe ff89 	bl	80023bc <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d0f9      	beq.n	80034a6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80034b2:	4b0a      	ldr	r3, [pc, #40]	@ (80034dc <HAL_RCC_OscConfig+0x8ac>)
 80034b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034b6:	4b0a      	ldr	r3, [pc, #40]	@ (80034e0 <HAL_RCC_OscConfig+0x8b0>)
 80034b8:	4013      	ands	r3, r2
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80034be:	00d2      	lsls	r2, r2, #3
 80034c0:	4906      	ldr	r1, [pc, #24]	@ (80034dc <HAL_RCC_OscConfig+0x8ac>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80034c6:	4b05      	ldr	r3, [pc, #20]	@ (80034dc <HAL_RCC_OscConfig+0x8ac>)
 80034c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ca:	4a04      	ldr	r2, [pc, #16]	@ (80034dc <HAL_RCC_OscConfig+0x8ac>)
 80034cc:	f043 0301 	orr.w	r3, r3, #1
 80034d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3730      	adds	r7, #48	@ 0x30
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	58024400 	.word	0x58024400
 80034e0:	ffff0007 	.word	0xffff0007

080034e4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b086      	sub	sp, #24
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d101      	bne.n	80034f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e19c      	b.n	8003832 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034f8:	4b8a      	ldr	r3, [pc, #552]	@ (8003724 <HAL_RCC_ClockConfig+0x240>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 030f 	and.w	r3, r3, #15
 8003500:	683a      	ldr	r2, [r7, #0]
 8003502:	429a      	cmp	r2, r3
 8003504:	d910      	bls.n	8003528 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003506:	4b87      	ldr	r3, [pc, #540]	@ (8003724 <HAL_RCC_ClockConfig+0x240>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f023 020f 	bic.w	r2, r3, #15
 800350e:	4985      	ldr	r1, [pc, #532]	@ (8003724 <HAL_RCC_ClockConfig+0x240>)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	4313      	orrs	r3, r2
 8003514:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003516:	4b83      	ldr	r3, [pc, #524]	@ (8003724 <HAL_RCC_ClockConfig+0x240>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 030f 	and.w	r3, r3, #15
 800351e:	683a      	ldr	r2, [r7, #0]
 8003520:	429a      	cmp	r2, r3
 8003522:	d001      	beq.n	8003528 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e184      	b.n	8003832 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0304 	and.w	r3, r3, #4
 8003530:	2b00      	cmp	r3, #0
 8003532:	d010      	beq.n	8003556 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	691a      	ldr	r2, [r3, #16]
 8003538:	4b7b      	ldr	r3, [pc, #492]	@ (8003728 <HAL_RCC_ClockConfig+0x244>)
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003540:	429a      	cmp	r2, r3
 8003542:	d908      	bls.n	8003556 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003544:	4b78      	ldr	r3, [pc, #480]	@ (8003728 <HAL_RCC_ClockConfig+0x244>)
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	4975      	ldr	r1, [pc, #468]	@ (8003728 <HAL_RCC_ClockConfig+0x244>)
 8003552:	4313      	orrs	r3, r2
 8003554:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0308 	and.w	r3, r3, #8
 800355e:	2b00      	cmp	r3, #0
 8003560:	d010      	beq.n	8003584 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	695a      	ldr	r2, [r3, #20]
 8003566:	4b70      	ldr	r3, [pc, #448]	@ (8003728 <HAL_RCC_ClockConfig+0x244>)
 8003568:	69db      	ldr	r3, [r3, #28]
 800356a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800356e:	429a      	cmp	r2, r3
 8003570:	d908      	bls.n	8003584 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003572:	4b6d      	ldr	r3, [pc, #436]	@ (8003728 <HAL_RCC_ClockConfig+0x244>)
 8003574:	69db      	ldr	r3, [r3, #28]
 8003576:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	695b      	ldr	r3, [r3, #20]
 800357e:	496a      	ldr	r1, [pc, #424]	@ (8003728 <HAL_RCC_ClockConfig+0x244>)
 8003580:	4313      	orrs	r3, r2
 8003582:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0310 	and.w	r3, r3, #16
 800358c:	2b00      	cmp	r3, #0
 800358e:	d010      	beq.n	80035b2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	699a      	ldr	r2, [r3, #24]
 8003594:	4b64      	ldr	r3, [pc, #400]	@ (8003728 <HAL_RCC_ClockConfig+0x244>)
 8003596:	69db      	ldr	r3, [r3, #28]
 8003598:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800359c:	429a      	cmp	r2, r3
 800359e:	d908      	bls.n	80035b2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80035a0:	4b61      	ldr	r3, [pc, #388]	@ (8003728 <HAL_RCC_ClockConfig+0x244>)
 80035a2:	69db      	ldr	r3, [r3, #28]
 80035a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	495e      	ldr	r1, [pc, #376]	@ (8003728 <HAL_RCC_ClockConfig+0x244>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0320 	and.w	r3, r3, #32
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d010      	beq.n	80035e0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	69da      	ldr	r2, [r3, #28]
 80035c2:	4b59      	ldr	r3, [pc, #356]	@ (8003728 <HAL_RCC_ClockConfig+0x244>)
 80035c4:	6a1b      	ldr	r3, [r3, #32]
 80035c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d908      	bls.n	80035e0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80035ce:	4b56      	ldr	r3, [pc, #344]	@ (8003728 <HAL_RCC_ClockConfig+0x244>)
 80035d0:	6a1b      	ldr	r3, [r3, #32]
 80035d2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	69db      	ldr	r3, [r3, #28]
 80035da:	4953      	ldr	r1, [pc, #332]	@ (8003728 <HAL_RCC_ClockConfig+0x244>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0302 	and.w	r3, r3, #2
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d010      	beq.n	800360e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	68da      	ldr	r2, [r3, #12]
 80035f0:	4b4d      	ldr	r3, [pc, #308]	@ (8003728 <HAL_RCC_ClockConfig+0x244>)
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	f003 030f 	and.w	r3, r3, #15
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d908      	bls.n	800360e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035fc:	4b4a      	ldr	r3, [pc, #296]	@ (8003728 <HAL_RCC_ClockConfig+0x244>)
 80035fe:	699b      	ldr	r3, [r3, #24]
 8003600:	f023 020f 	bic.w	r2, r3, #15
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	4947      	ldr	r1, [pc, #284]	@ (8003728 <HAL_RCC_ClockConfig+0x244>)
 800360a:	4313      	orrs	r3, r2
 800360c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	2b00      	cmp	r3, #0
 8003618:	d055      	beq.n	80036c6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800361a:	4b43      	ldr	r3, [pc, #268]	@ (8003728 <HAL_RCC_ClockConfig+0x244>)
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	4940      	ldr	r1, [pc, #256]	@ (8003728 <HAL_RCC_ClockConfig+0x244>)
 8003628:	4313      	orrs	r3, r2
 800362a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	2b02      	cmp	r3, #2
 8003632:	d107      	bne.n	8003644 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003634:	4b3c      	ldr	r3, [pc, #240]	@ (8003728 <HAL_RCC_ClockConfig+0x244>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d121      	bne.n	8003684 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e0f6      	b.n	8003832 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	2b03      	cmp	r3, #3
 800364a:	d107      	bne.n	800365c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800364c:	4b36      	ldr	r3, [pc, #216]	@ (8003728 <HAL_RCC_ClockConfig+0x244>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d115      	bne.n	8003684 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e0ea      	b.n	8003832 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d107      	bne.n	8003674 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003664:	4b30      	ldr	r3, [pc, #192]	@ (8003728 <HAL_RCC_ClockConfig+0x244>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800366c:	2b00      	cmp	r3, #0
 800366e:	d109      	bne.n	8003684 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e0de      	b.n	8003832 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003674:	4b2c      	ldr	r3, [pc, #176]	@ (8003728 <HAL_RCC_ClockConfig+0x244>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0304 	and.w	r3, r3, #4
 800367c:	2b00      	cmp	r3, #0
 800367e:	d101      	bne.n	8003684 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e0d6      	b.n	8003832 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003684:	4b28      	ldr	r3, [pc, #160]	@ (8003728 <HAL_RCC_ClockConfig+0x244>)
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	f023 0207 	bic.w	r2, r3, #7
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	4925      	ldr	r1, [pc, #148]	@ (8003728 <HAL_RCC_ClockConfig+0x244>)
 8003692:	4313      	orrs	r3, r2
 8003694:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003696:	f7fe fe91 	bl	80023bc <HAL_GetTick>
 800369a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800369c:	e00a      	b.n	80036b4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800369e:	f7fe fe8d 	bl	80023bc <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d901      	bls.n	80036b4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e0be      	b.n	8003832 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036b4:	4b1c      	ldr	r3, [pc, #112]	@ (8003728 <HAL_RCC_ClockConfig+0x244>)
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	00db      	lsls	r3, r3, #3
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d1eb      	bne.n	800369e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d010      	beq.n	80036f4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	68da      	ldr	r2, [r3, #12]
 80036d6:	4b14      	ldr	r3, [pc, #80]	@ (8003728 <HAL_RCC_ClockConfig+0x244>)
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	f003 030f 	and.w	r3, r3, #15
 80036de:	429a      	cmp	r2, r3
 80036e0:	d208      	bcs.n	80036f4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036e2:	4b11      	ldr	r3, [pc, #68]	@ (8003728 <HAL_RCC_ClockConfig+0x244>)
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	f023 020f 	bic.w	r2, r3, #15
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	490e      	ldr	r1, [pc, #56]	@ (8003728 <HAL_RCC_ClockConfig+0x244>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003724 <HAL_RCC_ClockConfig+0x240>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 030f 	and.w	r3, r3, #15
 80036fc:	683a      	ldr	r2, [r7, #0]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d214      	bcs.n	800372c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003702:	4b08      	ldr	r3, [pc, #32]	@ (8003724 <HAL_RCC_ClockConfig+0x240>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f023 020f 	bic.w	r2, r3, #15
 800370a:	4906      	ldr	r1, [pc, #24]	@ (8003724 <HAL_RCC_ClockConfig+0x240>)
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	4313      	orrs	r3, r2
 8003710:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003712:	4b04      	ldr	r3, [pc, #16]	@ (8003724 <HAL_RCC_ClockConfig+0x240>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 030f 	and.w	r3, r3, #15
 800371a:	683a      	ldr	r2, [r7, #0]
 800371c:	429a      	cmp	r2, r3
 800371e:	d005      	beq.n	800372c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e086      	b.n	8003832 <HAL_RCC_ClockConfig+0x34e>
 8003724:	52002000 	.word	0x52002000
 8003728:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0304 	and.w	r3, r3, #4
 8003734:	2b00      	cmp	r3, #0
 8003736:	d010      	beq.n	800375a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	691a      	ldr	r2, [r3, #16]
 800373c:	4b3f      	ldr	r3, [pc, #252]	@ (800383c <HAL_RCC_ClockConfig+0x358>)
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003744:	429a      	cmp	r2, r3
 8003746:	d208      	bcs.n	800375a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003748:	4b3c      	ldr	r3, [pc, #240]	@ (800383c <HAL_RCC_ClockConfig+0x358>)
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	4939      	ldr	r1, [pc, #228]	@ (800383c <HAL_RCC_ClockConfig+0x358>)
 8003756:	4313      	orrs	r3, r2
 8003758:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0308 	and.w	r3, r3, #8
 8003762:	2b00      	cmp	r3, #0
 8003764:	d010      	beq.n	8003788 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	695a      	ldr	r2, [r3, #20]
 800376a:	4b34      	ldr	r3, [pc, #208]	@ (800383c <HAL_RCC_ClockConfig+0x358>)
 800376c:	69db      	ldr	r3, [r3, #28]
 800376e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003772:	429a      	cmp	r2, r3
 8003774:	d208      	bcs.n	8003788 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003776:	4b31      	ldr	r3, [pc, #196]	@ (800383c <HAL_RCC_ClockConfig+0x358>)
 8003778:	69db      	ldr	r3, [r3, #28]
 800377a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	492e      	ldr	r1, [pc, #184]	@ (800383c <HAL_RCC_ClockConfig+0x358>)
 8003784:	4313      	orrs	r3, r2
 8003786:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0310 	and.w	r3, r3, #16
 8003790:	2b00      	cmp	r3, #0
 8003792:	d010      	beq.n	80037b6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	699a      	ldr	r2, [r3, #24]
 8003798:	4b28      	ldr	r3, [pc, #160]	@ (800383c <HAL_RCC_ClockConfig+0x358>)
 800379a:	69db      	ldr	r3, [r3, #28]
 800379c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d208      	bcs.n	80037b6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80037a4:	4b25      	ldr	r3, [pc, #148]	@ (800383c <HAL_RCC_ClockConfig+0x358>)
 80037a6:	69db      	ldr	r3, [r3, #28]
 80037a8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	699b      	ldr	r3, [r3, #24]
 80037b0:	4922      	ldr	r1, [pc, #136]	@ (800383c <HAL_RCC_ClockConfig+0x358>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0320 	and.w	r3, r3, #32
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d010      	beq.n	80037e4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	69da      	ldr	r2, [r3, #28]
 80037c6:	4b1d      	ldr	r3, [pc, #116]	@ (800383c <HAL_RCC_ClockConfig+0x358>)
 80037c8:	6a1b      	ldr	r3, [r3, #32]
 80037ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d208      	bcs.n	80037e4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80037d2:	4b1a      	ldr	r3, [pc, #104]	@ (800383c <HAL_RCC_ClockConfig+0x358>)
 80037d4:	6a1b      	ldr	r3, [r3, #32]
 80037d6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	69db      	ldr	r3, [r3, #28]
 80037de:	4917      	ldr	r1, [pc, #92]	@ (800383c <HAL_RCC_ClockConfig+0x358>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80037e4:	f000 f834 	bl	8003850 <HAL_RCC_GetSysClockFreq>
 80037e8:	4602      	mov	r2, r0
 80037ea:	4b14      	ldr	r3, [pc, #80]	@ (800383c <HAL_RCC_ClockConfig+0x358>)
 80037ec:	699b      	ldr	r3, [r3, #24]
 80037ee:	0a1b      	lsrs	r3, r3, #8
 80037f0:	f003 030f 	and.w	r3, r3, #15
 80037f4:	4912      	ldr	r1, [pc, #72]	@ (8003840 <HAL_RCC_ClockConfig+0x35c>)
 80037f6:	5ccb      	ldrb	r3, [r1, r3]
 80037f8:	f003 031f 	and.w	r3, r3, #31
 80037fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003800:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003802:	4b0e      	ldr	r3, [pc, #56]	@ (800383c <HAL_RCC_ClockConfig+0x358>)
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	f003 030f 	and.w	r3, r3, #15
 800380a:	4a0d      	ldr	r2, [pc, #52]	@ (8003840 <HAL_RCC_ClockConfig+0x35c>)
 800380c:	5cd3      	ldrb	r3, [r2, r3]
 800380e:	f003 031f 	and.w	r3, r3, #31
 8003812:	693a      	ldr	r2, [r7, #16]
 8003814:	fa22 f303 	lsr.w	r3, r2, r3
 8003818:	4a0a      	ldr	r2, [pc, #40]	@ (8003844 <HAL_RCC_ClockConfig+0x360>)
 800381a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800381c:	4a0a      	ldr	r2, [pc, #40]	@ (8003848 <HAL_RCC_ClockConfig+0x364>)
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003822:	4b0a      	ldr	r3, [pc, #40]	@ (800384c <HAL_RCC_ClockConfig+0x368>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4618      	mov	r0, r3
 8003828:	f7fe fd7e 	bl	8002328 <HAL_InitTick>
 800382c:	4603      	mov	r3, r0
 800382e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003830:	7bfb      	ldrb	r3, [r7, #15]
}
 8003832:	4618      	mov	r0, r3
 8003834:	3718      	adds	r7, #24
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	58024400 	.word	0x58024400
 8003840:	08008068 	.word	0x08008068
 8003844:	24000004 	.word	0x24000004
 8003848:	24000000 	.word	0x24000000
 800384c:	24000024 	.word	0x24000024

08003850 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003850:	b480      	push	{r7}
 8003852:	b089      	sub	sp, #36	@ 0x24
 8003854:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003856:	4bb3      	ldr	r3, [pc, #716]	@ (8003b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800385e:	2b18      	cmp	r3, #24
 8003860:	f200 8155 	bhi.w	8003b0e <HAL_RCC_GetSysClockFreq+0x2be>
 8003864:	a201      	add	r2, pc, #4	@ (adr r2, 800386c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800386a:	bf00      	nop
 800386c:	080038d1 	.word	0x080038d1
 8003870:	08003b0f 	.word	0x08003b0f
 8003874:	08003b0f 	.word	0x08003b0f
 8003878:	08003b0f 	.word	0x08003b0f
 800387c:	08003b0f 	.word	0x08003b0f
 8003880:	08003b0f 	.word	0x08003b0f
 8003884:	08003b0f 	.word	0x08003b0f
 8003888:	08003b0f 	.word	0x08003b0f
 800388c:	080038f7 	.word	0x080038f7
 8003890:	08003b0f 	.word	0x08003b0f
 8003894:	08003b0f 	.word	0x08003b0f
 8003898:	08003b0f 	.word	0x08003b0f
 800389c:	08003b0f 	.word	0x08003b0f
 80038a0:	08003b0f 	.word	0x08003b0f
 80038a4:	08003b0f 	.word	0x08003b0f
 80038a8:	08003b0f 	.word	0x08003b0f
 80038ac:	080038fd 	.word	0x080038fd
 80038b0:	08003b0f 	.word	0x08003b0f
 80038b4:	08003b0f 	.word	0x08003b0f
 80038b8:	08003b0f 	.word	0x08003b0f
 80038bc:	08003b0f 	.word	0x08003b0f
 80038c0:	08003b0f 	.word	0x08003b0f
 80038c4:	08003b0f 	.word	0x08003b0f
 80038c8:	08003b0f 	.word	0x08003b0f
 80038cc:	08003903 	.word	0x08003903
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038d0:	4b94      	ldr	r3, [pc, #592]	@ (8003b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0320 	and.w	r3, r3, #32
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d009      	beq.n	80038f0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80038dc:	4b91      	ldr	r3, [pc, #580]	@ (8003b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	08db      	lsrs	r3, r3, #3
 80038e2:	f003 0303 	and.w	r3, r3, #3
 80038e6:	4a90      	ldr	r2, [pc, #576]	@ (8003b28 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80038e8:	fa22 f303 	lsr.w	r3, r2, r3
 80038ec:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80038ee:	e111      	b.n	8003b14 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80038f0:	4b8d      	ldr	r3, [pc, #564]	@ (8003b28 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80038f2:	61bb      	str	r3, [r7, #24]
      break;
 80038f4:	e10e      	b.n	8003b14 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80038f6:	4b8d      	ldr	r3, [pc, #564]	@ (8003b2c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80038f8:	61bb      	str	r3, [r7, #24]
      break;
 80038fa:	e10b      	b.n	8003b14 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80038fc:	4b8c      	ldr	r3, [pc, #560]	@ (8003b30 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80038fe:	61bb      	str	r3, [r7, #24]
      break;
 8003900:	e108      	b.n	8003b14 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003902:	4b88      	ldr	r3, [pc, #544]	@ (8003b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003906:	f003 0303 	and.w	r3, r3, #3
 800390a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800390c:	4b85      	ldr	r3, [pc, #532]	@ (8003b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800390e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003910:	091b      	lsrs	r3, r3, #4
 8003912:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003916:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003918:	4b82      	ldr	r3, [pc, #520]	@ (8003b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800391a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800391c:	f003 0301 	and.w	r3, r3, #1
 8003920:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003922:	4b80      	ldr	r3, [pc, #512]	@ (8003b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003924:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003926:	08db      	lsrs	r3, r3, #3
 8003928:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	fb02 f303 	mul.w	r3, r2, r3
 8003932:	ee07 3a90 	vmov	s15, r3
 8003936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800393a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	2b00      	cmp	r3, #0
 8003942:	f000 80e1 	beq.w	8003b08 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	2b02      	cmp	r3, #2
 800394a:	f000 8083 	beq.w	8003a54 <HAL_RCC_GetSysClockFreq+0x204>
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	2b02      	cmp	r3, #2
 8003952:	f200 80a1 	bhi.w	8003a98 <HAL_RCC_GetSysClockFreq+0x248>
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d003      	beq.n	8003964 <HAL_RCC_GetSysClockFreq+0x114>
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d056      	beq.n	8003a10 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003962:	e099      	b.n	8003a98 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003964:	4b6f      	ldr	r3, [pc, #444]	@ (8003b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0320 	and.w	r3, r3, #32
 800396c:	2b00      	cmp	r3, #0
 800396e:	d02d      	beq.n	80039cc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003970:	4b6c      	ldr	r3, [pc, #432]	@ (8003b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	08db      	lsrs	r3, r3, #3
 8003976:	f003 0303 	and.w	r3, r3, #3
 800397a:	4a6b      	ldr	r2, [pc, #428]	@ (8003b28 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800397c:	fa22 f303 	lsr.w	r3, r2, r3
 8003980:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	ee07 3a90 	vmov	s15, r3
 8003988:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	ee07 3a90 	vmov	s15, r3
 8003992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003996:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800399a:	4b62      	ldr	r3, [pc, #392]	@ (8003b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800399c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800399e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039a2:	ee07 3a90 	vmov	s15, r3
 80039a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80039ae:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003b34 <HAL_RCC_GetSysClockFreq+0x2e4>
 80039b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80039be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039c6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80039ca:	e087      	b.n	8003adc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	ee07 3a90 	vmov	s15, r3
 80039d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039d6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003b38 <HAL_RCC_GetSysClockFreq+0x2e8>
 80039da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039de:	4b51      	ldr	r3, [pc, #324]	@ (8003b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039e6:	ee07 3a90 	vmov	s15, r3
 80039ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80039f2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003b34 <HAL_RCC_GetSysClockFreq+0x2e4>
 80039f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a0a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003a0e:	e065      	b.n	8003adc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	ee07 3a90 	vmov	s15, r3
 8003a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a1a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003b3c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003a1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a22:	4b40      	ldr	r3, [pc, #256]	@ (8003b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a2a:	ee07 3a90 	vmov	s15, r3
 8003a2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a32:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a36:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003b34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a4e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003a52:	e043      	b.n	8003adc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	ee07 3a90 	vmov	s15, r3
 8003a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a5e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003b40 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003a62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a66:	4b2f      	ldr	r3, [pc, #188]	@ (8003b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a6e:	ee07 3a90 	vmov	s15, r3
 8003a72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a76:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a7a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003b34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a92:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003a96:	e021      	b.n	8003adc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	ee07 3a90 	vmov	s15, r3
 8003a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aa2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003b3c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003aa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003aaa:	4b1e      	ldr	r3, [pc, #120]	@ (8003b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ab2:	ee07 3a90 	vmov	s15, r3
 8003ab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003aba:	ed97 6a02 	vldr	s12, [r7, #8]
 8003abe:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003b34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ac2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ac6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003aca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ace:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ad6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003ada:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003adc:	4b11      	ldr	r3, [pc, #68]	@ (8003b24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ae0:	0a5b      	lsrs	r3, r3, #9
 8003ae2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	ee07 3a90 	vmov	s15, r3
 8003af0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003af4:	edd7 6a07 	vldr	s13, [r7, #28]
 8003af8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003afc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b00:	ee17 3a90 	vmov	r3, s15
 8003b04:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003b06:	e005      	b.n	8003b14 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	61bb      	str	r3, [r7, #24]
      break;
 8003b0c:	e002      	b.n	8003b14 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003b0e:	4b07      	ldr	r3, [pc, #28]	@ (8003b2c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003b10:	61bb      	str	r3, [r7, #24]
      break;
 8003b12:	bf00      	nop
  }

  return sysclockfreq;
 8003b14:	69bb      	ldr	r3, [r7, #24]
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3724      	adds	r7, #36	@ 0x24
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	58024400 	.word	0x58024400
 8003b28:	03d09000 	.word	0x03d09000
 8003b2c:	003d0900 	.word	0x003d0900
 8003b30:	017d7840 	.word	0x017d7840
 8003b34:	46000000 	.word	0x46000000
 8003b38:	4c742400 	.word	0x4c742400
 8003b3c:	4a742400 	.word	0x4a742400
 8003b40:	4bbebc20 	.word	0x4bbebc20

08003b44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003b4a:	f7ff fe81 	bl	8003850 <HAL_RCC_GetSysClockFreq>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	4b10      	ldr	r3, [pc, #64]	@ (8003b94 <HAL_RCC_GetHCLKFreq+0x50>)
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	0a1b      	lsrs	r3, r3, #8
 8003b56:	f003 030f 	and.w	r3, r3, #15
 8003b5a:	490f      	ldr	r1, [pc, #60]	@ (8003b98 <HAL_RCC_GetHCLKFreq+0x54>)
 8003b5c:	5ccb      	ldrb	r3, [r1, r3]
 8003b5e:	f003 031f 	and.w	r3, r3, #31
 8003b62:	fa22 f303 	lsr.w	r3, r2, r3
 8003b66:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003b68:	4b0a      	ldr	r3, [pc, #40]	@ (8003b94 <HAL_RCC_GetHCLKFreq+0x50>)
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	f003 030f 	and.w	r3, r3, #15
 8003b70:	4a09      	ldr	r2, [pc, #36]	@ (8003b98 <HAL_RCC_GetHCLKFreq+0x54>)
 8003b72:	5cd3      	ldrb	r3, [r2, r3]
 8003b74:	f003 031f 	and.w	r3, r3, #31
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b7e:	4a07      	ldr	r2, [pc, #28]	@ (8003b9c <HAL_RCC_GetHCLKFreq+0x58>)
 8003b80:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003b82:	4a07      	ldr	r2, [pc, #28]	@ (8003ba0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003b88:	4b04      	ldr	r3, [pc, #16]	@ (8003b9c <HAL_RCC_GetHCLKFreq+0x58>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3708      	adds	r7, #8
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	58024400 	.word	0x58024400
 8003b98:	08008068 	.word	0x08008068
 8003b9c:	24000004 	.word	0x24000004
 8003ba0:	24000000 	.word	0x24000000

08003ba4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003ba8:	f7ff ffcc 	bl	8003b44 <HAL_RCC_GetHCLKFreq>
 8003bac:	4602      	mov	r2, r0
 8003bae:	4b06      	ldr	r3, [pc, #24]	@ (8003bc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bb0:	69db      	ldr	r3, [r3, #28]
 8003bb2:	091b      	lsrs	r3, r3, #4
 8003bb4:	f003 0307 	and.w	r3, r3, #7
 8003bb8:	4904      	ldr	r1, [pc, #16]	@ (8003bcc <HAL_RCC_GetPCLK1Freq+0x28>)
 8003bba:	5ccb      	ldrb	r3, [r1, r3]
 8003bbc:	f003 031f 	and.w	r3, r3, #31
 8003bc0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	58024400 	.word	0x58024400
 8003bcc:	08008068 	.word	0x08008068

08003bd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003bd4:	f7ff ffb6 	bl	8003b44 <HAL_RCC_GetHCLKFreq>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	4b06      	ldr	r3, [pc, #24]	@ (8003bf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bdc:	69db      	ldr	r3, [r3, #28]
 8003bde:	0a1b      	lsrs	r3, r3, #8
 8003be0:	f003 0307 	and.w	r3, r3, #7
 8003be4:	4904      	ldr	r1, [pc, #16]	@ (8003bf8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003be6:	5ccb      	ldrb	r3, [r1, r3]
 8003be8:	f003 031f 	and.w	r3, r3, #31
 8003bec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	58024400 	.word	0x58024400
 8003bf8:	08008068 	.word	0x08008068

08003bfc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c00:	b0ca      	sub	sp, #296	@ 0x128
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c08:	2300      	movs	r3, #0
 8003c0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c0e:	2300      	movs	r3, #0
 8003c10:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c1c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003c20:	2500      	movs	r5, #0
 8003c22:	ea54 0305 	orrs.w	r3, r4, r5
 8003c26:	d049      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c2e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003c32:	d02f      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003c34:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003c38:	d828      	bhi.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003c3a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003c3e:	d01a      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003c40:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003c44:	d822      	bhi.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d003      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003c4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c4e:	d007      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003c50:	e01c      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c52:	4bb8      	ldr	r3, [pc, #736]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c56:	4ab7      	ldr	r2, [pc, #732]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003c5e:	e01a      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c64:	3308      	adds	r3, #8
 8003c66:	2102      	movs	r1, #2
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f001 fc8f 	bl	800558c <RCCEx_PLL2_Config>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003c74:	e00f      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003c76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c7a:	3328      	adds	r3, #40	@ 0x28
 8003c7c:	2102      	movs	r1, #2
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f001 fd36 	bl	80056f0 <RCCEx_PLL3_Config>
 8003c84:	4603      	mov	r3, r0
 8003c86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003c8a:	e004      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c92:	e000      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003c94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d10a      	bne.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003c9e:	4ba5      	ldr	r3, [pc, #660]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ca0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ca2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003caa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003cac:	4aa1      	ldr	r2, [pc, #644]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003cae:	430b      	orrs	r3, r1
 8003cb0:	6513      	str	r3, [r2, #80]	@ 0x50
 8003cb2:	e003      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cb8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003cbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003cc8:	f04f 0900 	mov.w	r9, #0
 8003ccc:	ea58 0309 	orrs.w	r3, r8, r9
 8003cd0:	d047      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cd8:	2b04      	cmp	r3, #4
 8003cda:	d82a      	bhi.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003cdc:	a201      	add	r2, pc, #4	@ (adr r2, 8003ce4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ce2:	bf00      	nop
 8003ce4:	08003cf9 	.word	0x08003cf9
 8003ce8:	08003d07 	.word	0x08003d07
 8003cec:	08003d1d 	.word	0x08003d1d
 8003cf0:	08003d3b 	.word	0x08003d3b
 8003cf4:	08003d3b 	.word	0x08003d3b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cf8:	4b8e      	ldr	r3, [pc, #568]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cfc:	4a8d      	ldr	r2, [pc, #564]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003cfe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d04:	e01a      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d0a:	3308      	adds	r3, #8
 8003d0c:	2100      	movs	r1, #0
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f001 fc3c 	bl	800558c <RCCEx_PLL2_Config>
 8003d14:	4603      	mov	r3, r0
 8003d16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d1a:	e00f      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d20:	3328      	adds	r3, #40	@ 0x28
 8003d22:	2100      	movs	r1, #0
 8003d24:	4618      	mov	r0, r3
 8003d26:	f001 fce3 	bl	80056f0 <RCCEx_PLL3_Config>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d30:	e004      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d38:	e000      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003d3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d10a      	bne.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d44:	4b7b      	ldr	r3, [pc, #492]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d48:	f023 0107 	bic.w	r1, r3, #7
 8003d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d52:	4a78      	ldr	r2, [pc, #480]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d54:	430b      	orrs	r3, r1
 8003d56:	6513      	str	r3, [r2, #80]	@ 0x50
 8003d58:	e003      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d6a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003d6e:	f04f 0b00 	mov.w	fp, #0
 8003d72:	ea5a 030b 	orrs.w	r3, sl, fp
 8003d76:	d04c      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d82:	d030      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003d84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d88:	d829      	bhi.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003d8a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003d8c:	d02d      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003d8e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003d90:	d825      	bhi.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003d92:	2b80      	cmp	r3, #128	@ 0x80
 8003d94:	d018      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003d96:	2b80      	cmp	r3, #128	@ 0x80
 8003d98:	d821      	bhi.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d002      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003d9e:	2b40      	cmp	r3, #64	@ 0x40
 8003da0:	d007      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003da2:	e01c      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003da4:	4b63      	ldr	r3, [pc, #396]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da8:	4a62      	ldr	r2, [pc, #392]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003daa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003dae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003db0:	e01c      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003db6:	3308      	adds	r3, #8
 8003db8:	2100      	movs	r1, #0
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f001 fbe6 	bl	800558c <RCCEx_PLL2_Config>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003dc6:	e011      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dcc:	3328      	adds	r3, #40	@ 0x28
 8003dce:	2100      	movs	r1, #0
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f001 fc8d 	bl	80056f0 <RCCEx_PLL3_Config>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003ddc:	e006      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003de4:	e002      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003de6:	bf00      	nop
 8003de8:	e000      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003dea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d10a      	bne.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003df4:	4b4f      	ldr	r3, [pc, #316]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003df6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003df8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e02:	4a4c      	ldr	r2, [pc, #304]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e04:	430b      	orrs	r3, r1
 8003e06:	6513      	str	r3, [r2, #80]	@ 0x50
 8003e08:	e003      	b.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e1a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003e1e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003e22:	2300      	movs	r3, #0
 8003e24:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003e28:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	d053      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e36:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003e3a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003e3e:	d035      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003e40:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003e44:	d82e      	bhi.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003e46:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003e4a:	d031      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003e4c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003e50:	d828      	bhi.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003e52:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e56:	d01a      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003e58:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e5c:	d822      	bhi.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d003      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003e62:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e66:	d007      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003e68:	e01c      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e6a:	4b32      	ldr	r3, [pc, #200]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e6e:	4a31      	ldr	r2, [pc, #196]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e74:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e76:	e01c      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e7c:	3308      	adds	r3, #8
 8003e7e:	2100      	movs	r1, #0
 8003e80:	4618      	mov	r0, r3
 8003e82:	f001 fb83 	bl	800558c <RCCEx_PLL2_Config>
 8003e86:	4603      	mov	r3, r0
 8003e88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003e8c:	e011      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e92:	3328      	adds	r3, #40	@ 0x28
 8003e94:	2100      	movs	r1, #0
 8003e96:	4618      	mov	r0, r3
 8003e98:	f001 fc2a 	bl	80056f0 <RCCEx_PLL3_Config>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ea2:	e006      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003eaa:	e002      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003eac:	bf00      	nop
 8003eae:	e000      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003eb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003eb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10b      	bne.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003eba:	4b1e      	ldr	r3, [pc, #120]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ebe:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ec6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003eca:	4a1a      	ldr	r2, [pc, #104]	@ (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ecc:	430b      	orrs	r3, r1
 8003ece:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ed0:	e003      	b.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ed2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ed6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003ee6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003eea:	2300      	movs	r3, #0
 8003eec:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003ef0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	d056      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003efe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003f02:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003f06:	d038      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003f08:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003f0c:	d831      	bhi.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003f0e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003f12:	d034      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003f14:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003f18:	d82b      	bhi.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003f1a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003f1e:	d01d      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003f20:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003f24:	d825      	bhi.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d006      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003f2a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f2e:	d00a      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003f30:	e01f      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003f32:	bf00      	nop
 8003f34:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f38:	4ba2      	ldr	r3, [pc, #648]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f3c:	4aa1      	ldr	r2, [pc, #644]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003f44:	e01c      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f4a:	3308      	adds	r3, #8
 8003f4c:	2100      	movs	r1, #0
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f001 fb1c 	bl	800558c <RCCEx_PLL2_Config>
 8003f54:	4603      	mov	r3, r0
 8003f56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003f5a:	e011      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f60:	3328      	adds	r3, #40	@ 0x28
 8003f62:	2100      	movs	r1, #0
 8003f64:	4618      	mov	r0, r3
 8003f66:	f001 fbc3 	bl	80056f0 <RCCEx_PLL3_Config>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003f70:	e006      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f78:	e002      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003f7a:	bf00      	nop
 8003f7c:	e000      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003f7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d10b      	bne.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003f88:	4b8e      	ldr	r3, [pc, #568]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f8c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f94:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003f98:	4a8a      	ldr	r2, [pc, #552]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f9a:	430b      	orrs	r3, r1
 8003f9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f9e:	e003      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fa0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fa4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003fb4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003fb8:	2300      	movs	r3, #0
 8003fba:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003fbe:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003fc2:	460b      	mov	r3, r1
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	d03a      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fce:	2b30      	cmp	r3, #48	@ 0x30
 8003fd0:	d01f      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003fd2:	2b30      	cmp	r3, #48	@ 0x30
 8003fd4:	d819      	bhi.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003fd6:	2b20      	cmp	r3, #32
 8003fd8:	d00c      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003fda:	2b20      	cmp	r3, #32
 8003fdc:	d815      	bhi.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d019      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003fe2:	2b10      	cmp	r3, #16
 8003fe4:	d111      	bne.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fe6:	4b77      	ldr	r3, [pc, #476]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fea:	4a76      	ldr	r2, [pc, #472]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003fec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ff0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003ff2:	e011      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ff8:	3308      	adds	r3, #8
 8003ffa:	2102      	movs	r1, #2
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f001 fac5 	bl	800558c <RCCEx_PLL2_Config>
 8004002:	4603      	mov	r3, r0
 8004004:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004008:	e006      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004010:	e002      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004012:	bf00      	nop
 8004014:	e000      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004016:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004018:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800401c:	2b00      	cmp	r3, #0
 800401e:	d10a      	bne.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004020:	4b68      	ldr	r3, [pc, #416]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004022:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004024:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004028:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800402c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800402e:	4a65      	ldr	r2, [pc, #404]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004030:	430b      	orrs	r3, r1
 8004032:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004034:	e003      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004036:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800403a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800403e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004046:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800404a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800404e:	2300      	movs	r3, #0
 8004050:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004054:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004058:	460b      	mov	r3, r1
 800405a:	4313      	orrs	r3, r2
 800405c:	d051      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800405e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004062:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004064:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004068:	d035      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800406a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800406e:	d82e      	bhi.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004070:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004074:	d031      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004076:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800407a:	d828      	bhi.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800407c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004080:	d01a      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004082:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004086:	d822      	bhi.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004088:	2b00      	cmp	r3, #0
 800408a:	d003      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800408c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004090:	d007      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004092:	e01c      	b.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004094:	4b4b      	ldr	r3, [pc, #300]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004098:	4a4a      	ldr	r2, [pc, #296]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800409a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800409e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80040a0:	e01c      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040a6:	3308      	adds	r3, #8
 80040a8:	2100      	movs	r1, #0
 80040aa:	4618      	mov	r0, r3
 80040ac:	f001 fa6e 	bl	800558c <RCCEx_PLL2_Config>
 80040b0:	4603      	mov	r3, r0
 80040b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80040b6:	e011      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80040b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040bc:	3328      	adds	r3, #40	@ 0x28
 80040be:	2100      	movs	r1, #0
 80040c0:	4618      	mov	r0, r3
 80040c2:	f001 fb15 	bl	80056f0 <RCCEx_PLL3_Config>
 80040c6:	4603      	mov	r3, r0
 80040c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80040cc:	e006      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80040d4:	e002      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80040d6:	bf00      	nop
 80040d8:	e000      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80040da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d10a      	bne.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80040e4:	4b37      	ldr	r3, [pc, #220]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80040e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040e8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80040ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040f2:	4a34      	ldr	r2, [pc, #208]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80040f4:	430b      	orrs	r3, r1
 80040f6:	6513      	str	r3, [r2, #80]	@ 0x50
 80040f8:	e003      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004102:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800410a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800410e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004112:	2300      	movs	r3, #0
 8004114:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004118:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800411c:	460b      	mov	r3, r1
 800411e:	4313      	orrs	r3, r2
 8004120:	d056      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004122:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004126:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004128:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800412c:	d033      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800412e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004132:	d82c      	bhi.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004134:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004138:	d02f      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800413a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800413e:	d826      	bhi.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004140:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004144:	d02b      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004146:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800414a:	d820      	bhi.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800414c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004150:	d012      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004152:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004156:	d81a      	bhi.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004158:	2b00      	cmp	r3, #0
 800415a:	d022      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800415c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004160:	d115      	bne.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004162:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004166:	3308      	adds	r3, #8
 8004168:	2101      	movs	r1, #1
 800416a:	4618      	mov	r0, r3
 800416c:	f001 fa0e 	bl	800558c <RCCEx_PLL2_Config>
 8004170:	4603      	mov	r3, r0
 8004172:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004176:	e015      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004178:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800417c:	3328      	adds	r3, #40	@ 0x28
 800417e:	2101      	movs	r1, #1
 8004180:	4618      	mov	r0, r3
 8004182:	f001 fab5 	bl	80056f0 <RCCEx_PLL3_Config>
 8004186:	4603      	mov	r3, r0
 8004188:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800418c:	e00a      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004194:	e006      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004196:	bf00      	nop
 8004198:	e004      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800419a:	bf00      	nop
 800419c:	e002      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800419e:	bf00      	nop
 80041a0:	e000      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80041a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d10d      	bne.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80041ac:	4b05      	ldr	r3, [pc, #20]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041b0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80041b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80041ba:	4a02      	ldr	r2, [pc, #8]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041bc:	430b      	orrs	r3, r1
 80041be:	6513      	str	r3, [r2, #80]	@ 0x50
 80041c0:	e006      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80041c2:	bf00      	nop
 80041c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80041d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80041dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80041e0:	2300      	movs	r3, #0
 80041e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80041e6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80041ea:	460b      	mov	r3, r1
 80041ec:	4313      	orrs	r3, r2
 80041ee:	d055      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80041f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80041f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80041fc:	d033      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80041fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004202:	d82c      	bhi.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004204:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004208:	d02f      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800420a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800420e:	d826      	bhi.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004210:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004214:	d02b      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004216:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800421a:	d820      	bhi.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800421c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004220:	d012      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004222:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004226:	d81a      	bhi.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004228:	2b00      	cmp	r3, #0
 800422a:	d022      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800422c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004230:	d115      	bne.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004232:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004236:	3308      	adds	r3, #8
 8004238:	2101      	movs	r1, #1
 800423a:	4618      	mov	r0, r3
 800423c:	f001 f9a6 	bl	800558c <RCCEx_PLL2_Config>
 8004240:	4603      	mov	r3, r0
 8004242:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004246:	e015      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004248:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800424c:	3328      	adds	r3, #40	@ 0x28
 800424e:	2101      	movs	r1, #1
 8004250:	4618      	mov	r0, r3
 8004252:	f001 fa4d 	bl	80056f0 <RCCEx_PLL3_Config>
 8004256:	4603      	mov	r3, r0
 8004258:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800425c:	e00a      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004264:	e006      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004266:	bf00      	nop
 8004268:	e004      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800426a:	bf00      	nop
 800426c:	e002      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800426e:	bf00      	nop
 8004270:	e000      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004272:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004274:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004278:	2b00      	cmp	r3, #0
 800427a:	d10b      	bne.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800427c:	4ba3      	ldr	r3, [pc, #652]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800427e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004280:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004284:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004288:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800428c:	4a9f      	ldr	r2, [pc, #636]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800428e:	430b      	orrs	r3, r1
 8004290:	6593      	str	r3, [r2, #88]	@ 0x58
 8004292:	e003      	b.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004294:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004298:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800429c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80042a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80042ac:	2300      	movs	r3, #0
 80042ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80042b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80042b6:	460b      	mov	r3, r1
 80042b8:	4313      	orrs	r3, r2
 80042ba:	d037      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80042bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80042c6:	d00e      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80042c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80042cc:	d816      	bhi.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x700>
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d018      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80042d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80042d6:	d111      	bne.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042d8:	4b8c      	ldr	r3, [pc, #560]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042dc:	4a8b      	ldr	r2, [pc, #556]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80042e4:	e00f      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80042e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ea:	3308      	adds	r3, #8
 80042ec:	2101      	movs	r1, #1
 80042ee:	4618      	mov	r0, r3
 80042f0:	f001 f94c 	bl	800558c <RCCEx_PLL2_Config>
 80042f4:	4603      	mov	r3, r0
 80042f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80042fa:	e004      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004302:	e000      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004304:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004306:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800430a:	2b00      	cmp	r3, #0
 800430c:	d10a      	bne.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800430e:	4b7f      	ldr	r3, [pc, #508]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004310:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004312:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800431a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800431c:	4a7b      	ldr	r2, [pc, #492]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800431e:	430b      	orrs	r3, r1
 8004320:	6513      	str	r3, [r2, #80]	@ 0x50
 8004322:	e003      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004324:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004328:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800432c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004334:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004338:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800433c:	2300      	movs	r3, #0
 800433e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004342:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004346:	460b      	mov	r3, r1
 8004348:	4313      	orrs	r3, r2
 800434a:	d039      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800434c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004350:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004352:	2b03      	cmp	r3, #3
 8004354:	d81c      	bhi.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004356:	a201      	add	r2, pc, #4	@ (adr r2, 800435c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800435c:	08004399 	.word	0x08004399
 8004360:	0800436d 	.word	0x0800436d
 8004364:	0800437b 	.word	0x0800437b
 8004368:	08004399 	.word	0x08004399
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800436c:	4b67      	ldr	r3, [pc, #412]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800436e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004370:	4a66      	ldr	r2, [pc, #408]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004372:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004376:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004378:	e00f      	b.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800437a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800437e:	3308      	adds	r3, #8
 8004380:	2102      	movs	r1, #2
 8004382:	4618      	mov	r0, r3
 8004384:	f001 f902 	bl	800558c <RCCEx_PLL2_Config>
 8004388:	4603      	mov	r3, r0
 800438a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800438e:	e004      	b.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004396:	e000      	b.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004398:	bf00      	nop
    }

    if (ret == HAL_OK)
 800439a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d10a      	bne.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80043a2:	4b5a      	ldr	r3, [pc, #360]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043a6:	f023 0103 	bic.w	r1, r3, #3
 80043aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043b0:	4a56      	ldr	r2, [pc, #344]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043b2:	430b      	orrs	r3, r1
 80043b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80043b6:	e003      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80043cc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80043d0:	2300      	movs	r3, #0
 80043d2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80043d6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80043da:	460b      	mov	r3, r1
 80043dc:	4313      	orrs	r3, r2
 80043de:	f000 809f 	beq.w	8004520 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043e2:	4b4b      	ldr	r3, [pc, #300]	@ (8004510 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a4a      	ldr	r2, [pc, #296]	@ (8004510 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80043e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043ee:	f7fd ffe5 	bl	80023bc <HAL_GetTick>
 80043f2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043f6:	e00b      	b.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043f8:	f7fd ffe0 	bl	80023bc <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	2b64      	cmp	r3, #100	@ 0x64
 8004406:	d903      	bls.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800440e:	e005      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004410:	4b3f      	ldr	r3, [pc, #252]	@ (8004510 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004418:	2b00      	cmp	r3, #0
 800441a:	d0ed      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800441c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004420:	2b00      	cmp	r3, #0
 8004422:	d179      	bne.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004424:	4b39      	ldr	r3, [pc, #228]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004426:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004428:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800442c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004430:	4053      	eors	r3, r2
 8004432:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004436:	2b00      	cmp	r3, #0
 8004438:	d015      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800443a:	4b34      	ldr	r3, [pc, #208]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800443c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800443e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004442:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004446:	4b31      	ldr	r3, [pc, #196]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004448:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800444a:	4a30      	ldr	r2, [pc, #192]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800444c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004450:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004452:	4b2e      	ldr	r3, [pc, #184]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004456:	4a2d      	ldr	r2, [pc, #180]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004458:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800445c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800445e:	4a2b      	ldr	r2, [pc, #172]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004460:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004464:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004466:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800446a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800446e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004472:	d118      	bne.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004474:	f7fd ffa2 	bl	80023bc <HAL_GetTick>
 8004478:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800447c:	e00d      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800447e:	f7fd ff9d 	bl	80023bc <HAL_GetTick>
 8004482:	4602      	mov	r2, r0
 8004484:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004488:	1ad2      	subs	r2, r2, r3
 800448a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800448e:	429a      	cmp	r2, r3
 8004490:	d903      	bls.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004498:	e005      	b.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800449a:	4b1c      	ldr	r3, [pc, #112]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800449c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800449e:	f003 0302 	and.w	r3, r3, #2
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d0eb      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80044a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d129      	bne.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044b2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80044b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044be:	d10e      	bne.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80044c0:	4b12      	ldr	r3, [pc, #72]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044c2:	691b      	ldr	r3, [r3, #16]
 80044c4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80044c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044cc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80044d0:	091a      	lsrs	r2, r3, #4
 80044d2:	4b10      	ldr	r3, [pc, #64]	@ (8004514 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80044d4:	4013      	ands	r3, r2
 80044d6:	4a0d      	ldr	r2, [pc, #52]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044d8:	430b      	orrs	r3, r1
 80044da:	6113      	str	r3, [r2, #16]
 80044dc:	e005      	b.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80044de:	4b0b      	ldr	r3, [pc, #44]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	4a0a      	ldr	r2, [pc, #40]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044e4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80044e8:	6113      	str	r3, [r2, #16]
 80044ea:	4b08      	ldr	r3, [pc, #32]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044ec:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80044ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80044f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044fa:	4a04      	ldr	r2, [pc, #16]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044fc:	430b      	orrs	r3, r1
 80044fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8004500:	e00e      	b.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004502:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004506:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800450a:	e009      	b.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800450c:	58024400 	.word	0x58024400
 8004510:	58024800 	.word	0x58024800
 8004514:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004518:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800451c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004520:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004528:	f002 0301 	and.w	r3, r2, #1
 800452c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004530:	2300      	movs	r3, #0
 8004532:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004536:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800453a:	460b      	mov	r3, r1
 800453c:	4313      	orrs	r3, r2
 800453e:	f000 8089 	beq.w	8004654 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004542:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004546:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004548:	2b28      	cmp	r3, #40	@ 0x28
 800454a:	d86b      	bhi.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800454c:	a201      	add	r2, pc, #4	@ (adr r2, 8004554 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800454e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004552:	bf00      	nop
 8004554:	0800462d 	.word	0x0800462d
 8004558:	08004625 	.word	0x08004625
 800455c:	08004625 	.word	0x08004625
 8004560:	08004625 	.word	0x08004625
 8004564:	08004625 	.word	0x08004625
 8004568:	08004625 	.word	0x08004625
 800456c:	08004625 	.word	0x08004625
 8004570:	08004625 	.word	0x08004625
 8004574:	080045f9 	.word	0x080045f9
 8004578:	08004625 	.word	0x08004625
 800457c:	08004625 	.word	0x08004625
 8004580:	08004625 	.word	0x08004625
 8004584:	08004625 	.word	0x08004625
 8004588:	08004625 	.word	0x08004625
 800458c:	08004625 	.word	0x08004625
 8004590:	08004625 	.word	0x08004625
 8004594:	0800460f 	.word	0x0800460f
 8004598:	08004625 	.word	0x08004625
 800459c:	08004625 	.word	0x08004625
 80045a0:	08004625 	.word	0x08004625
 80045a4:	08004625 	.word	0x08004625
 80045a8:	08004625 	.word	0x08004625
 80045ac:	08004625 	.word	0x08004625
 80045b0:	08004625 	.word	0x08004625
 80045b4:	0800462d 	.word	0x0800462d
 80045b8:	08004625 	.word	0x08004625
 80045bc:	08004625 	.word	0x08004625
 80045c0:	08004625 	.word	0x08004625
 80045c4:	08004625 	.word	0x08004625
 80045c8:	08004625 	.word	0x08004625
 80045cc:	08004625 	.word	0x08004625
 80045d0:	08004625 	.word	0x08004625
 80045d4:	0800462d 	.word	0x0800462d
 80045d8:	08004625 	.word	0x08004625
 80045dc:	08004625 	.word	0x08004625
 80045e0:	08004625 	.word	0x08004625
 80045e4:	08004625 	.word	0x08004625
 80045e8:	08004625 	.word	0x08004625
 80045ec:	08004625 	.word	0x08004625
 80045f0:	08004625 	.word	0x08004625
 80045f4:	0800462d 	.word	0x0800462d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80045f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045fc:	3308      	adds	r3, #8
 80045fe:	2101      	movs	r1, #1
 8004600:	4618      	mov	r0, r3
 8004602:	f000 ffc3 	bl	800558c <RCCEx_PLL2_Config>
 8004606:	4603      	mov	r3, r0
 8004608:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800460c:	e00f      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800460e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004612:	3328      	adds	r3, #40	@ 0x28
 8004614:	2101      	movs	r1, #1
 8004616:	4618      	mov	r0, r3
 8004618:	f001 f86a 	bl	80056f0 <RCCEx_PLL3_Config>
 800461c:	4603      	mov	r3, r0
 800461e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004622:	e004      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800462a:	e000      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800462c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800462e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004632:	2b00      	cmp	r3, #0
 8004634:	d10a      	bne.n	800464c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004636:	4bbf      	ldr	r3, [pc, #764]	@ (8004934 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800463a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800463e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004642:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004644:	4abb      	ldr	r2, [pc, #748]	@ (8004934 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004646:	430b      	orrs	r3, r1
 8004648:	6553      	str	r3, [r2, #84]	@ 0x54
 800464a:	e003      	b.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800464c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004650:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004654:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800465c:	f002 0302 	and.w	r3, r2, #2
 8004660:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004664:	2300      	movs	r3, #0
 8004666:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800466a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800466e:	460b      	mov	r3, r1
 8004670:	4313      	orrs	r3, r2
 8004672:	d041      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004674:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004678:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800467a:	2b05      	cmp	r3, #5
 800467c:	d824      	bhi.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800467e:	a201      	add	r2, pc, #4	@ (adr r2, 8004684 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004684:	080046d1 	.word	0x080046d1
 8004688:	0800469d 	.word	0x0800469d
 800468c:	080046b3 	.word	0x080046b3
 8004690:	080046d1 	.word	0x080046d1
 8004694:	080046d1 	.word	0x080046d1
 8004698:	080046d1 	.word	0x080046d1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800469c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046a0:	3308      	adds	r3, #8
 80046a2:	2101      	movs	r1, #1
 80046a4:	4618      	mov	r0, r3
 80046a6:	f000 ff71 	bl	800558c <RCCEx_PLL2_Config>
 80046aa:	4603      	mov	r3, r0
 80046ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80046b0:	e00f      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80046b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046b6:	3328      	adds	r3, #40	@ 0x28
 80046b8:	2101      	movs	r1, #1
 80046ba:	4618      	mov	r0, r3
 80046bc:	f001 f818 	bl	80056f0 <RCCEx_PLL3_Config>
 80046c0:	4603      	mov	r3, r0
 80046c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80046c6:	e004      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80046ce:	e000      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80046d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d10a      	bne.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80046da:	4b96      	ldr	r3, [pc, #600]	@ (8004934 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80046dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046de:	f023 0107 	bic.w	r1, r3, #7
 80046e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046e6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80046e8:	4a92      	ldr	r2, [pc, #584]	@ (8004934 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80046ea:	430b      	orrs	r3, r1
 80046ec:	6553      	str	r3, [r2, #84]	@ 0x54
 80046ee:	e003      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80046f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004700:	f002 0304 	and.w	r3, r2, #4
 8004704:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004708:	2300      	movs	r3, #0
 800470a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800470e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004712:	460b      	mov	r3, r1
 8004714:	4313      	orrs	r3, r2
 8004716:	d044      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004718:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800471c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004720:	2b05      	cmp	r3, #5
 8004722:	d825      	bhi.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004724:	a201      	add	r2, pc, #4	@ (adr r2, 800472c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800472a:	bf00      	nop
 800472c:	08004779 	.word	0x08004779
 8004730:	08004745 	.word	0x08004745
 8004734:	0800475b 	.word	0x0800475b
 8004738:	08004779 	.word	0x08004779
 800473c:	08004779 	.word	0x08004779
 8004740:	08004779 	.word	0x08004779
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004744:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004748:	3308      	adds	r3, #8
 800474a:	2101      	movs	r1, #1
 800474c:	4618      	mov	r0, r3
 800474e:	f000 ff1d 	bl	800558c <RCCEx_PLL2_Config>
 8004752:	4603      	mov	r3, r0
 8004754:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004758:	e00f      	b.n	800477a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800475a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800475e:	3328      	adds	r3, #40	@ 0x28
 8004760:	2101      	movs	r1, #1
 8004762:	4618      	mov	r0, r3
 8004764:	f000 ffc4 	bl	80056f0 <RCCEx_PLL3_Config>
 8004768:	4603      	mov	r3, r0
 800476a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800476e:	e004      	b.n	800477a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004776:	e000      	b.n	800477a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004778:	bf00      	nop
    }

    if (ret == HAL_OK)
 800477a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800477e:	2b00      	cmp	r3, #0
 8004780:	d10b      	bne.n	800479a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004782:	4b6c      	ldr	r3, [pc, #432]	@ (8004934 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004784:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004786:	f023 0107 	bic.w	r1, r3, #7
 800478a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800478e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004792:	4a68      	ldr	r2, [pc, #416]	@ (8004934 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004794:	430b      	orrs	r3, r1
 8004796:	6593      	str	r3, [r2, #88]	@ 0x58
 8004798:	e003      	b.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800479a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800479e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80047a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047aa:	f002 0320 	and.w	r3, r2, #32
 80047ae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80047b2:	2300      	movs	r3, #0
 80047b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80047b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80047bc:	460b      	mov	r3, r1
 80047be:	4313      	orrs	r3, r2
 80047c0:	d055      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80047c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80047ce:	d033      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80047d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80047d4:	d82c      	bhi.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80047d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047da:	d02f      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80047dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047e0:	d826      	bhi.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80047e2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80047e6:	d02b      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80047e8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80047ec:	d820      	bhi.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80047ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80047f2:	d012      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80047f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80047f8:	d81a      	bhi.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d022      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80047fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004802:	d115      	bne.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004804:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004808:	3308      	adds	r3, #8
 800480a:	2100      	movs	r1, #0
 800480c:	4618      	mov	r0, r3
 800480e:	f000 febd 	bl	800558c <RCCEx_PLL2_Config>
 8004812:	4603      	mov	r3, r0
 8004814:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004818:	e015      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800481a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800481e:	3328      	adds	r3, #40	@ 0x28
 8004820:	2102      	movs	r1, #2
 8004822:	4618      	mov	r0, r3
 8004824:	f000 ff64 	bl	80056f0 <RCCEx_PLL3_Config>
 8004828:	4603      	mov	r3, r0
 800482a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800482e:	e00a      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004836:	e006      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004838:	bf00      	nop
 800483a:	e004      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800483c:	bf00      	nop
 800483e:	e002      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004840:	bf00      	nop
 8004842:	e000      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004844:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004846:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800484a:	2b00      	cmp	r3, #0
 800484c:	d10b      	bne.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800484e:	4b39      	ldr	r3, [pc, #228]	@ (8004934 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004850:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004852:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800485a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800485e:	4a35      	ldr	r2, [pc, #212]	@ (8004934 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004860:	430b      	orrs	r3, r1
 8004862:	6553      	str	r3, [r2, #84]	@ 0x54
 8004864:	e003      	b.n	800486e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004866:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800486a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800486e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004876:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800487a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800487e:	2300      	movs	r3, #0
 8004880:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004884:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004888:	460b      	mov	r3, r1
 800488a:	4313      	orrs	r3, r2
 800488c:	d058      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800488e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004892:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004896:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800489a:	d033      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800489c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80048a0:	d82c      	bhi.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80048a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048a6:	d02f      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80048a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048ac:	d826      	bhi.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80048ae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80048b2:	d02b      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80048b4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80048b8:	d820      	bhi.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80048ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048be:	d012      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80048c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048c4:	d81a      	bhi.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d022      	beq.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80048ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048ce:	d115      	bne.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80048d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048d4:	3308      	adds	r3, #8
 80048d6:	2100      	movs	r1, #0
 80048d8:	4618      	mov	r0, r3
 80048da:	f000 fe57 	bl	800558c <RCCEx_PLL2_Config>
 80048de:	4603      	mov	r3, r0
 80048e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80048e4:	e015      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80048e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ea:	3328      	adds	r3, #40	@ 0x28
 80048ec:	2102      	movs	r1, #2
 80048ee:	4618      	mov	r0, r3
 80048f0:	f000 fefe 	bl	80056f0 <RCCEx_PLL3_Config>
 80048f4:	4603      	mov	r3, r0
 80048f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80048fa:	e00a      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004902:	e006      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004904:	bf00      	nop
 8004906:	e004      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004908:	bf00      	nop
 800490a:	e002      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800490c:	bf00      	nop
 800490e:	e000      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004910:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004912:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004916:	2b00      	cmp	r3, #0
 8004918:	d10e      	bne.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800491a:	4b06      	ldr	r3, [pc, #24]	@ (8004934 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800491c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800491e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004922:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004926:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800492a:	4a02      	ldr	r2, [pc, #8]	@ (8004934 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800492c:	430b      	orrs	r3, r1
 800492e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004930:	e006      	b.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004932:	bf00      	nop
 8004934:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004938:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800493c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004940:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004948:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800494c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004950:	2300      	movs	r3, #0
 8004952:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004956:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800495a:	460b      	mov	r3, r1
 800495c:	4313      	orrs	r3, r2
 800495e:	d055      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004960:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004964:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004968:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800496c:	d033      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800496e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004972:	d82c      	bhi.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004974:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004978:	d02f      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800497a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800497e:	d826      	bhi.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004980:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004984:	d02b      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004986:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800498a:	d820      	bhi.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800498c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004990:	d012      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004992:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004996:	d81a      	bhi.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004998:	2b00      	cmp	r3, #0
 800499a:	d022      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800499c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049a0:	d115      	bne.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80049a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049a6:	3308      	adds	r3, #8
 80049a8:	2100      	movs	r1, #0
 80049aa:	4618      	mov	r0, r3
 80049ac:	f000 fdee 	bl	800558c <RCCEx_PLL2_Config>
 80049b0:	4603      	mov	r3, r0
 80049b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80049b6:	e015      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80049b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049bc:	3328      	adds	r3, #40	@ 0x28
 80049be:	2102      	movs	r1, #2
 80049c0:	4618      	mov	r0, r3
 80049c2:	f000 fe95 	bl	80056f0 <RCCEx_PLL3_Config>
 80049c6:	4603      	mov	r3, r0
 80049c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80049cc:	e00a      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80049d4:	e006      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80049d6:	bf00      	nop
 80049d8:	e004      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80049da:	bf00      	nop
 80049dc:	e002      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80049de:	bf00      	nop
 80049e0:	e000      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80049e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d10b      	bne.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80049ec:	4ba1      	ldr	r3, [pc, #644]	@ (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049f0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80049f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80049fc:	4a9d      	ldr	r2, [pc, #628]	@ (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049fe:	430b      	orrs	r3, r1
 8004a00:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a02:	e003      	b.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a14:	f002 0308 	and.w	r3, r2, #8
 8004a18:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004a22:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004a26:	460b      	mov	r3, r1
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	d01e      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a38:	d10c      	bne.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a3e:	3328      	adds	r3, #40	@ 0x28
 8004a40:	2102      	movs	r1, #2
 8004a42:	4618      	mov	r0, r3
 8004a44:	f000 fe54 	bl	80056f0 <RCCEx_PLL3_Config>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d002      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004a54:	4b87      	ldr	r3, [pc, #540]	@ (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a58:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a64:	4a83      	ldr	r2, [pc, #524]	@ (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a66:	430b      	orrs	r3, r1
 8004a68:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a72:	f002 0310 	and.w	r3, r2, #16
 8004a76:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004a80:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004a84:	460b      	mov	r3, r1
 8004a86:	4313      	orrs	r3, r2
 8004a88:	d01e      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a96:	d10c      	bne.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a9c:	3328      	adds	r3, #40	@ 0x28
 8004a9e:	2102      	movs	r1, #2
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f000 fe25 	bl	80056f0 <RCCEx_PLL3_Config>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d002      	beq.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004ab2:	4b70      	ldr	r3, [pc, #448]	@ (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ab6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004abe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ac2:	4a6c      	ldr	r2, [pc, #432]	@ (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ac4:	430b      	orrs	r3, r1
 8004ac6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004ad4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004ad8:	2300      	movs	r3, #0
 8004ada:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004ade:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	d03e      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004af0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004af4:	d022      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004af6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004afa:	d81b      	bhi.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d003      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004b00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b04:	d00b      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004b06:	e015      	b.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b0c:	3308      	adds	r3, #8
 8004b0e:	2100      	movs	r1, #0
 8004b10:	4618      	mov	r0, r3
 8004b12:	f000 fd3b 	bl	800558c <RCCEx_PLL2_Config>
 8004b16:	4603      	mov	r3, r0
 8004b18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004b1c:	e00f      	b.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b22:	3328      	adds	r3, #40	@ 0x28
 8004b24:	2102      	movs	r1, #2
 8004b26:	4618      	mov	r0, r3
 8004b28:	f000 fde2 	bl	80056f0 <RCCEx_PLL3_Config>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004b32:	e004      	b.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b3a:	e000      	b.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004b3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d10b      	bne.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b46:	4b4b      	ldr	r3, [pc, #300]	@ (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b4a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b52:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004b56:	4a47      	ldr	r2, [pc, #284]	@ (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b58:	430b      	orrs	r3, r1
 8004b5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b5c:	e003      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b6e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004b72:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004b74:	2300      	movs	r3, #0
 8004b76:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004b78:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	d03b      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b8a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004b8e:	d01f      	beq.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004b90:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004b94:	d818      	bhi.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004b96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b9a:	d003      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004b9c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004ba0:	d007      	beq.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004ba2:	e011      	b.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ba4:	4b33      	ldr	r3, [pc, #204]	@ (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ba8:	4a32      	ldr	r2, [pc, #200]	@ (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004baa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004bb0:	e00f      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bb6:	3328      	adds	r3, #40	@ 0x28
 8004bb8:	2101      	movs	r1, #1
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f000 fd98 	bl	80056f0 <RCCEx_PLL3_Config>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004bc6:	e004      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004bce:	e000      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004bd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d10b      	bne.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004bda:	4b26      	ldr	r3, [pc, #152]	@ (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004bdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bde:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bea:	4a22      	ldr	r2, [pc, #136]	@ (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004bec:	430b      	orrs	r3, r1
 8004bee:	6553      	str	r3, [r2, #84]	@ 0x54
 8004bf0:	e003      	b.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bf2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bf6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c02:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004c06:	673b      	str	r3, [r7, #112]	@ 0x70
 8004c08:	2300      	movs	r3, #0
 8004c0a:	677b      	str	r3, [r7, #116]	@ 0x74
 8004c0c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004c10:	460b      	mov	r3, r1
 8004c12:	4313      	orrs	r3, r2
 8004c14:	d034      	beq.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d003      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004c20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c24:	d007      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004c26:	e011      	b.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c28:	4b12      	ldr	r3, [pc, #72]	@ (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c2c:	4a11      	ldr	r2, [pc, #68]	@ (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004c34:	e00e      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c3a:	3308      	adds	r3, #8
 8004c3c:	2102      	movs	r1, #2
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f000 fca4 	bl	800558c <RCCEx_PLL2_Config>
 8004c44:	4603      	mov	r3, r0
 8004c46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004c4a:	e003      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d10d      	bne.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004c5c:	4b05      	ldr	r3, [pc, #20]	@ (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c60:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c6a:	4a02      	ldr	r2, [pc, #8]	@ (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c6c:	430b      	orrs	r3, r1
 8004c6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004c70:	e006      	b.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004c72:	bf00      	nop
 8004c74:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004c80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c88:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004c8c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c8e:	2300      	movs	r3, #0
 8004c90:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004c92:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004c96:	460b      	mov	r3, r1
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	d00c      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ca0:	3328      	adds	r3, #40	@ 0x28
 8004ca2:	2102      	movs	r1, #2
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f000 fd23 	bl	80056f0 <RCCEx_PLL3_Config>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d002      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cbe:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004cc2:	663b      	str	r3, [r7, #96]	@ 0x60
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	667b      	str	r3, [r7, #100]	@ 0x64
 8004cc8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004ccc:	460b      	mov	r3, r1
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	d038      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004cda:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004cde:	d018      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004ce0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ce4:	d811      	bhi.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004ce6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cea:	d014      	beq.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004cec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cf0:	d80b      	bhi.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d011      	beq.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004cf6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cfa:	d106      	bne.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cfc:	4bc3      	ldr	r3, [pc, #780]	@ (800500c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d00:	4ac2      	ldr	r2, [pc, #776]	@ (800500c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004d08:	e008      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d10:	e004      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004d12:	bf00      	nop
 8004d14:	e002      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004d16:	bf00      	nop
 8004d18:	e000      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004d1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d10b      	bne.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d24:	4bb9      	ldr	r3, [pc, #740]	@ (800500c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d28:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004d2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d34:	4ab5      	ldr	r2, [pc, #724]	@ (800500c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d36:	430b      	orrs	r3, r1
 8004d38:	6553      	str	r3, [r2, #84]	@ 0x54
 8004d3a:	e003      	b.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004d44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d4c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004d50:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004d52:	2300      	movs	r3, #0
 8004d54:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d56:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004d5a:	460b      	mov	r3, r1
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	d009      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004d60:	4baa      	ldr	r3, [pc, #680]	@ (800500c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d64:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d6e:	4aa7      	ldr	r2, [pc, #668]	@ (800500c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d70:	430b      	orrs	r3, r1
 8004d72:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d7c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004d80:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d82:	2300      	movs	r3, #0
 8004d84:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d86:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	d00a      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004d90:	4b9e      	ldr	r3, [pc, #632]	@ (800500c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d9c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004da0:	4a9a      	ldr	r2, [pc, #616]	@ (800500c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004da2:	430b      	orrs	r3, r1
 8004da4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dae:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004db2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004db4:	2300      	movs	r3, #0
 8004db6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004db8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	d009      	beq.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004dc2:	4b92      	ldr	r3, [pc, #584]	@ (800500c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004dc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dc6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004dd0:	4a8e      	ldr	r2, [pc, #568]	@ (800500c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004dd2:	430b      	orrs	r3, r1
 8004dd4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dde:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004de2:	643b      	str	r3, [r7, #64]	@ 0x40
 8004de4:	2300      	movs	r3, #0
 8004de6:	647b      	str	r3, [r7, #68]	@ 0x44
 8004de8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004dec:	460b      	mov	r3, r1
 8004dee:	4313      	orrs	r3, r2
 8004df0:	d00e      	beq.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004df2:	4b86      	ldr	r3, [pc, #536]	@ (800500c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	4a85      	ldr	r2, [pc, #532]	@ (800500c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004df8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004dfc:	6113      	str	r3, [r2, #16]
 8004dfe:	4b83      	ldr	r3, [pc, #524]	@ (800500c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e00:	6919      	ldr	r1, [r3, #16]
 8004e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e06:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004e0a:	4a80      	ldr	r2, [pc, #512]	@ (800500c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e0c:	430b      	orrs	r3, r1
 8004e0e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004e10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e18:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004e1c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004e1e:	2300      	movs	r3, #0
 8004e20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e22:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004e26:	460b      	mov	r3, r1
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	d009      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004e2c:	4b77      	ldr	r3, [pc, #476]	@ (800500c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e30:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004e34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e3a:	4a74      	ldr	r2, [pc, #464]	@ (800500c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e3c:	430b      	orrs	r3, r1
 8004e3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e48:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004e4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e4e:	2300      	movs	r3, #0
 8004e50:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e52:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004e56:	460b      	mov	r3, r1
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	d00a      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004e5c:	4b6b      	ldr	r3, [pc, #428]	@ (800500c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e60:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e6c:	4a67      	ldr	r2, [pc, #412]	@ (800500c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e6e:	430b      	orrs	r3, r1
 8004e70:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e7a:	2100      	movs	r1, #0
 8004e7c:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004e7e:	f003 0301 	and.w	r3, r3, #1
 8004e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e84:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004e88:	460b      	mov	r3, r1
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	d011      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e92:	3308      	adds	r3, #8
 8004e94:	2100      	movs	r1, #0
 8004e96:	4618      	mov	r0, r3
 8004e98:	f000 fb78 	bl	800558c <RCCEx_PLL2_Config>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004ea2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d003      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eaa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004eae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eba:	2100      	movs	r1, #0
 8004ebc:	6239      	str	r1, [r7, #32]
 8004ebe:	f003 0302 	and.w	r3, r3, #2
 8004ec2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ec4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004ec8:	460b      	mov	r3, r1
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	d011      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ed2:	3308      	adds	r3, #8
 8004ed4:	2101      	movs	r1, #1
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f000 fb58 	bl	800558c <RCCEx_PLL2_Config>
 8004edc:	4603      	mov	r3, r0
 8004ede:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004ee2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d003      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004eee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004efa:	2100      	movs	r1, #0
 8004efc:	61b9      	str	r1, [r7, #24]
 8004efe:	f003 0304 	and.w	r3, r3, #4
 8004f02:	61fb      	str	r3, [r7, #28]
 8004f04:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004f08:	460b      	mov	r3, r1
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	d011      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f12:	3308      	adds	r3, #8
 8004f14:	2102      	movs	r1, #2
 8004f16:	4618      	mov	r0, r3
 8004f18:	f000 fb38 	bl	800558c <RCCEx_PLL2_Config>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004f22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d003      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f3a:	2100      	movs	r1, #0
 8004f3c:	6139      	str	r1, [r7, #16]
 8004f3e:	f003 0308 	and.w	r3, r3, #8
 8004f42:	617b      	str	r3, [r7, #20]
 8004f44:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004f48:	460b      	mov	r3, r1
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	d011      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004f4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f52:	3328      	adds	r3, #40	@ 0x28
 8004f54:	2100      	movs	r1, #0
 8004f56:	4618      	mov	r0, r3
 8004f58:	f000 fbca 	bl	80056f0 <RCCEx_PLL3_Config>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004f62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d003      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f7a:	2100      	movs	r1, #0
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	f003 0310 	and.w	r3, r3, #16
 8004f82:	60fb      	str	r3, [r7, #12]
 8004f84:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004f88:	460b      	mov	r3, r1
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	d011      	beq.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f92:	3328      	adds	r3, #40	@ 0x28
 8004f94:	2101      	movs	r1, #1
 8004f96:	4618      	mov	r0, r3
 8004f98:	f000 fbaa 	bl	80056f0 <RCCEx_PLL3_Config>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004fa2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d003      	beq.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004faa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fba:	2100      	movs	r1, #0
 8004fbc:	6039      	str	r1, [r7, #0]
 8004fbe:	f003 0320 	and.w	r3, r3, #32
 8004fc2:	607b      	str	r3, [r7, #4]
 8004fc4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004fc8:	460b      	mov	r3, r1
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	d011      	beq.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004fce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fd2:	3328      	adds	r3, #40	@ 0x28
 8004fd4:	2102      	movs	r1, #2
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f000 fb8a 	bl	80056f0 <RCCEx_PLL3_Config>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004fe2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d003      	beq.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004ff2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d101      	bne.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	e000      	b.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
}
 8005000:	4618      	mov	r0, r3
 8005002:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8005006:	46bd      	mov	sp, r7
 8005008:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800500c:	58024400 	.word	0x58024400

08005010 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005014:	f7fe fd96 	bl	8003b44 <HAL_RCC_GetHCLKFreq>
 8005018:	4602      	mov	r2, r0
 800501a:	4b06      	ldr	r3, [pc, #24]	@ (8005034 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800501c:	6a1b      	ldr	r3, [r3, #32]
 800501e:	091b      	lsrs	r3, r3, #4
 8005020:	f003 0307 	and.w	r3, r3, #7
 8005024:	4904      	ldr	r1, [pc, #16]	@ (8005038 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005026:	5ccb      	ldrb	r3, [r1, r3]
 8005028:	f003 031f 	and.w	r3, r3, #31
 800502c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005030:	4618      	mov	r0, r3
 8005032:	bd80      	pop	{r7, pc}
 8005034:	58024400 	.word	0x58024400
 8005038:	08008068 	.word	0x08008068

0800503c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800503c:	b480      	push	{r7}
 800503e:	b089      	sub	sp, #36	@ 0x24
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005044:	4ba1      	ldr	r3, [pc, #644]	@ (80052cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005048:	f003 0303 	and.w	r3, r3, #3
 800504c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800504e:	4b9f      	ldr	r3, [pc, #636]	@ (80052cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005052:	0b1b      	lsrs	r3, r3, #12
 8005054:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005058:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800505a:	4b9c      	ldr	r3, [pc, #624]	@ (80052cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800505c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800505e:	091b      	lsrs	r3, r3, #4
 8005060:	f003 0301 	and.w	r3, r3, #1
 8005064:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005066:	4b99      	ldr	r3, [pc, #612]	@ (80052cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005068:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800506a:	08db      	lsrs	r3, r3, #3
 800506c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005070:	693a      	ldr	r2, [r7, #16]
 8005072:	fb02 f303 	mul.w	r3, r2, r3
 8005076:	ee07 3a90 	vmov	s15, r3
 800507a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800507e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	2b00      	cmp	r3, #0
 8005086:	f000 8111 	beq.w	80052ac <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	2b02      	cmp	r3, #2
 800508e:	f000 8083 	beq.w	8005198 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	2b02      	cmp	r3, #2
 8005096:	f200 80a1 	bhi.w	80051dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d003      	beq.n	80050a8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d056      	beq.n	8005154 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80050a6:	e099      	b.n	80051dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050a8:	4b88      	ldr	r3, [pc, #544]	@ (80052cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 0320 	and.w	r3, r3, #32
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d02d      	beq.n	8005110 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80050b4:	4b85      	ldr	r3, [pc, #532]	@ (80052cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	08db      	lsrs	r3, r3, #3
 80050ba:	f003 0303 	and.w	r3, r3, #3
 80050be:	4a84      	ldr	r2, [pc, #528]	@ (80052d0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80050c0:	fa22 f303 	lsr.w	r3, r2, r3
 80050c4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	ee07 3a90 	vmov	s15, r3
 80050cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	ee07 3a90 	vmov	s15, r3
 80050d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050de:	4b7b      	ldr	r3, [pc, #492]	@ (80052cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050e6:	ee07 3a90 	vmov	s15, r3
 80050ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80050f2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80052d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80050f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800510a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800510e:	e087      	b.n	8005220 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	ee07 3a90 	vmov	s15, r3
 8005116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800511a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80052d8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800511e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005122:	4b6a      	ldr	r3, [pc, #424]	@ (80052cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800512a:	ee07 3a90 	vmov	s15, r3
 800512e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005132:	ed97 6a03 	vldr	s12, [r7, #12]
 8005136:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80052d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800513a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800513e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005142:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005146:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800514a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800514e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005152:	e065      	b.n	8005220 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	ee07 3a90 	vmov	s15, r3
 800515a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800515e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80052dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005162:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005166:	4b59      	ldr	r3, [pc, #356]	@ (80052cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005168:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800516a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800516e:	ee07 3a90 	vmov	s15, r3
 8005172:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005176:	ed97 6a03 	vldr	s12, [r7, #12]
 800517a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80052d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800517e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005182:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005186:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800518a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800518e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005192:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005196:	e043      	b.n	8005220 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	ee07 3a90 	vmov	s15, r3
 800519e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051a2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80052e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80051a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051aa:	4b48      	ldr	r3, [pc, #288]	@ (80052cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051b2:	ee07 3a90 	vmov	s15, r3
 80051b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80051be:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80052d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80051c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051da:	e021      	b.n	8005220 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	ee07 3a90 	vmov	s15, r3
 80051e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051e6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80052dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80051ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051ee:	4b37      	ldr	r3, [pc, #220]	@ (80052cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051f6:	ee07 3a90 	vmov	s15, r3
 80051fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005202:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80052d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005206:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800520a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800520e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005212:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800521a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800521e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005220:	4b2a      	ldr	r3, [pc, #168]	@ (80052cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005224:	0a5b      	lsrs	r3, r3, #9
 8005226:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800522a:	ee07 3a90 	vmov	s15, r3
 800522e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005232:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005236:	ee37 7a87 	vadd.f32	s14, s15, s14
 800523a:	edd7 6a07 	vldr	s13, [r7, #28]
 800523e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005242:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005246:	ee17 2a90 	vmov	r2, s15
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800524e:	4b1f      	ldr	r3, [pc, #124]	@ (80052cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005250:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005252:	0c1b      	lsrs	r3, r3, #16
 8005254:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005258:	ee07 3a90 	vmov	s15, r3
 800525c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005260:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005264:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005268:	edd7 6a07 	vldr	s13, [r7, #28]
 800526c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005270:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005274:	ee17 2a90 	vmov	r2, s15
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800527c:	4b13      	ldr	r3, [pc, #76]	@ (80052cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800527e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005280:	0e1b      	lsrs	r3, r3, #24
 8005282:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005286:	ee07 3a90 	vmov	s15, r3
 800528a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800528e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005292:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005296:	edd7 6a07 	vldr	s13, [r7, #28]
 800529a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800529e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052a2:	ee17 2a90 	vmov	r2, s15
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80052aa:	e008      	b.n	80052be <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	609a      	str	r2, [r3, #8]
}
 80052be:	bf00      	nop
 80052c0:	3724      	adds	r7, #36	@ 0x24
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop
 80052cc:	58024400 	.word	0x58024400
 80052d0:	03d09000 	.word	0x03d09000
 80052d4:	46000000 	.word	0x46000000
 80052d8:	4c742400 	.word	0x4c742400
 80052dc:	4a742400 	.word	0x4a742400
 80052e0:	4bbebc20 	.word	0x4bbebc20

080052e4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b089      	sub	sp, #36	@ 0x24
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80052ec:	4ba1      	ldr	r3, [pc, #644]	@ (8005574 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052f0:	f003 0303 	and.w	r3, r3, #3
 80052f4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80052f6:	4b9f      	ldr	r3, [pc, #636]	@ (8005574 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052fa:	0d1b      	lsrs	r3, r3, #20
 80052fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005300:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005302:	4b9c      	ldr	r3, [pc, #624]	@ (8005574 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005306:	0a1b      	lsrs	r3, r3, #8
 8005308:	f003 0301 	and.w	r3, r3, #1
 800530c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800530e:	4b99      	ldr	r3, [pc, #612]	@ (8005574 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005312:	08db      	lsrs	r3, r3, #3
 8005314:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005318:	693a      	ldr	r2, [r7, #16]
 800531a:	fb02 f303 	mul.w	r3, r2, r3
 800531e:	ee07 3a90 	vmov	s15, r3
 8005322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005326:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	2b00      	cmp	r3, #0
 800532e:	f000 8111 	beq.w	8005554 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005332:	69bb      	ldr	r3, [r7, #24]
 8005334:	2b02      	cmp	r3, #2
 8005336:	f000 8083 	beq.w	8005440 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	2b02      	cmp	r3, #2
 800533e:	f200 80a1 	bhi.w	8005484 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005342:	69bb      	ldr	r3, [r7, #24]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d003      	beq.n	8005350 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	2b01      	cmp	r3, #1
 800534c:	d056      	beq.n	80053fc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800534e:	e099      	b.n	8005484 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005350:	4b88      	ldr	r3, [pc, #544]	@ (8005574 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0320 	and.w	r3, r3, #32
 8005358:	2b00      	cmp	r3, #0
 800535a:	d02d      	beq.n	80053b8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800535c:	4b85      	ldr	r3, [pc, #532]	@ (8005574 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	08db      	lsrs	r3, r3, #3
 8005362:	f003 0303 	and.w	r3, r3, #3
 8005366:	4a84      	ldr	r2, [pc, #528]	@ (8005578 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005368:	fa22 f303 	lsr.w	r3, r2, r3
 800536c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	ee07 3a90 	vmov	s15, r3
 8005374:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	ee07 3a90 	vmov	s15, r3
 800537e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005382:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005386:	4b7b      	ldr	r3, [pc, #492]	@ (8005574 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800538a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800538e:	ee07 3a90 	vmov	s15, r3
 8005392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005396:	ed97 6a03 	vldr	s12, [r7, #12]
 800539a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800557c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800539e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053b2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80053b6:	e087      	b.n	80054c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	ee07 3a90 	vmov	s15, r3
 80053be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053c2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005580 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80053c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053ca:	4b6a      	ldr	r3, [pc, #424]	@ (8005574 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053d2:	ee07 3a90 	vmov	s15, r3
 80053d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053da:	ed97 6a03 	vldr	s12, [r7, #12]
 80053de:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800557c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80053e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053fa:	e065      	b.n	80054c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	ee07 3a90 	vmov	s15, r3
 8005402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005406:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005584 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800540a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800540e:	4b59      	ldr	r3, [pc, #356]	@ (8005574 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005416:	ee07 3a90 	vmov	s15, r3
 800541a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800541e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005422:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800557c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005426:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800542a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800542e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005432:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800543a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800543e:	e043      	b.n	80054c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	ee07 3a90 	vmov	s15, r3
 8005446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800544a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005588 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800544e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005452:	4b48      	ldr	r3, [pc, #288]	@ (8005574 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800545a:	ee07 3a90 	vmov	s15, r3
 800545e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005462:	ed97 6a03 	vldr	s12, [r7, #12]
 8005466:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800557c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800546a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800546e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005472:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005476:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800547a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800547e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005482:	e021      	b.n	80054c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	ee07 3a90 	vmov	s15, r3
 800548a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800548e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005584 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005492:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005496:	4b37      	ldr	r3, [pc, #220]	@ (8005574 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800549a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800549e:	ee07 3a90 	vmov	s15, r3
 80054a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80054aa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800557c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80054ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80054c6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80054c8:	4b2a      	ldr	r3, [pc, #168]	@ (8005574 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054cc:	0a5b      	lsrs	r3, r3, #9
 80054ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054d2:	ee07 3a90 	vmov	s15, r3
 80054d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80054de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80054e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054ee:	ee17 2a90 	vmov	r2, s15
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80054f6:	4b1f      	ldr	r3, [pc, #124]	@ (8005574 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054fa:	0c1b      	lsrs	r3, r3, #16
 80054fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005500:	ee07 3a90 	vmov	s15, r3
 8005504:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005508:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800550c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005510:	edd7 6a07 	vldr	s13, [r7, #28]
 8005514:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005518:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800551c:	ee17 2a90 	vmov	r2, s15
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005524:	4b13      	ldr	r3, [pc, #76]	@ (8005574 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005528:	0e1b      	lsrs	r3, r3, #24
 800552a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800552e:	ee07 3a90 	vmov	s15, r3
 8005532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005536:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800553a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800553e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005542:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005546:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800554a:	ee17 2a90 	vmov	r2, s15
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005552:	e008      	b.n	8005566 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	609a      	str	r2, [r3, #8]
}
 8005566:	bf00      	nop
 8005568:	3724      	adds	r7, #36	@ 0x24
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop
 8005574:	58024400 	.word	0x58024400
 8005578:	03d09000 	.word	0x03d09000
 800557c:	46000000 	.word	0x46000000
 8005580:	4c742400 	.word	0x4c742400
 8005584:	4a742400 	.word	0x4a742400
 8005588:	4bbebc20 	.word	0x4bbebc20

0800558c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005596:	2300      	movs	r3, #0
 8005598:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800559a:	4b53      	ldr	r3, [pc, #332]	@ (80056e8 <RCCEx_PLL2_Config+0x15c>)
 800559c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800559e:	f003 0303 	and.w	r3, r3, #3
 80055a2:	2b03      	cmp	r3, #3
 80055a4:	d101      	bne.n	80055aa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e099      	b.n	80056de <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80055aa:	4b4f      	ldr	r3, [pc, #316]	@ (80056e8 <RCCEx_PLL2_Config+0x15c>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a4e      	ldr	r2, [pc, #312]	@ (80056e8 <RCCEx_PLL2_Config+0x15c>)
 80055b0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80055b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055b6:	f7fc ff01 	bl	80023bc <HAL_GetTick>
 80055ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80055bc:	e008      	b.n	80055d0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80055be:	f7fc fefd 	bl	80023bc <HAL_GetTick>
 80055c2:	4602      	mov	r2, r0
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	d901      	bls.n	80055d0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80055cc:	2303      	movs	r3, #3
 80055ce:	e086      	b.n	80056de <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80055d0:	4b45      	ldr	r3, [pc, #276]	@ (80056e8 <RCCEx_PLL2_Config+0x15c>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d1f0      	bne.n	80055be <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80055dc:	4b42      	ldr	r3, [pc, #264]	@ (80056e8 <RCCEx_PLL2_Config+0x15c>)
 80055de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055e0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	031b      	lsls	r3, r3, #12
 80055ea:	493f      	ldr	r1, [pc, #252]	@ (80056e8 <RCCEx_PLL2_Config+0x15c>)
 80055ec:	4313      	orrs	r3, r2
 80055ee:	628b      	str	r3, [r1, #40]	@ 0x28
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	3b01      	subs	r3, #1
 80055f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	3b01      	subs	r3, #1
 8005600:	025b      	lsls	r3, r3, #9
 8005602:	b29b      	uxth	r3, r3
 8005604:	431a      	orrs	r2, r3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	3b01      	subs	r3, #1
 800560c:	041b      	lsls	r3, r3, #16
 800560e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005612:	431a      	orrs	r2, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	691b      	ldr	r3, [r3, #16]
 8005618:	3b01      	subs	r3, #1
 800561a:	061b      	lsls	r3, r3, #24
 800561c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005620:	4931      	ldr	r1, [pc, #196]	@ (80056e8 <RCCEx_PLL2_Config+0x15c>)
 8005622:	4313      	orrs	r3, r2
 8005624:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005626:	4b30      	ldr	r3, [pc, #192]	@ (80056e8 <RCCEx_PLL2_Config+0x15c>)
 8005628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800562a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	492d      	ldr	r1, [pc, #180]	@ (80056e8 <RCCEx_PLL2_Config+0x15c>)
 8005634:	4313      	orrs	r3, r2
 8005636:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005638:	4b2b      	ldr	r3, [pc, #172]	@ (80056e8 <RCCEx_PLL2_Config+0x15c>)
 800563a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800563c:	f023 0220 	bic.w	r2, r3, #32
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	699b      	ldr	r3, [r3, #24]
 8005644:	4928      	ldr	r1, [pc, #160]	@ (80056e8 <RCCEx_PLL2_Config+0x15c>)
 8005646:	4313      	orrs	r3, r2
 8005648:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800564a:	4b27      	ldr	r3, [pc, #156]	@ (80056e8 <RCCEx_PLL2_Config+0x15c>)
 800564c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800564e:	4a26      	ldr	r2, [pc, #152]	@ (80056e8 <RCCEx_PLL2_Config+0x15c>)
 8005650:	f023 0310 	bic.w	r3, r3, #16
 8005654:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005656:	4b24      	ldr	r3, [pc, #144]	@ (80056e8 <RCCEx_PLL2_Config+0x15c>)
 8005658:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800565a:	4b24      	ldr	r3, [pc, #144]	@ (80056ec <RCCEx_PLL2_Config+0x160>)
 800565c:	4013      	ands	r3, r2
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	69d2      	ldr	r2, [r2, #28]
 8005662:	00d2      	lsls	r2, r2, #3
 8005664:	4920      	ldr	r1, [pc, #128]	@ (80056e8 <RCCEx_PLL2_Config+0x15c>)
 8005666:	4313      	orrs	r3, r2
 8005668:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800566a:	4b1f      	ldr	r3, [pc, #124]	@ (80056e8 <RCCEx_PLL2_Config+0x15c>)
 800566c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800566e:	4a1e      	ldr	r2, [pc, #120]	@ (80056e8 <RCCEx_PLL2_Config+0x15c>)
 8005670:	f043 0310 	orr.w	r3, r3, #16
 8005674:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d106      	bne.n	800568a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800567c:	4b1a      	ldr	r3, [pc, #104]	@ (80056e8 <RCCEx_PLL2_Config+0x15c>)
 800567e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005680:	4a19      	ldr	r2, [pc, #100]	@ (80056e8 <RCCEx_PLL2_Config+0x15c>)
 8005682:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005686:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005688:	e00f      	b.n	80056aa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	2b01      	cmp	r3, #1
 800568e:	d106      	bne.n	800569e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005690:	4b15      	ldr	r3, [pc, #84]	@ (80056e8 <RCCEx_PLL2_Config+0x15c>)
 8005692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005694:	4a14      	ldr	r2, [pc, #80]	@ (80056e8 <RCCEx_PLL2_Config+0x15c>)
 8005696:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800569a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800569c:	e005      	b.n	80056aa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800569e:	4b12      	ldr	r3, [pc, #72]	@ (80056e8 <RCCEx_PLL2_Config+0x15c>)
 80056a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056a2:	4a11      	ldr	r2, [pc, #68]	@ (80056e8 <RCCEx_PLL2_Config+0x15c>)
 80056a4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80056a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80056aa:	4b0f      	ldr	r3, [pc, #60]	@ (80056e8 <RCCEx_PLL2_Config+0x15c>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a0e      	ldr	r2, [pc, #56]	@ (80056e8 <RCCEx_PLL2_Config+0x15c>)
 80056b0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80056b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056b6:	f7fc fe81 	bl	80023bc <HAL_GetTick>
 80056ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80056bc:	e008      	b.n	80056d0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80056be:	f7fc fe7d 	bl	80023bc <HAL_GetTick>
 80056c2:	4602      	mov	r2, r0
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	d901      	bls.n	80056d0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80056cc:	2303      	movs	r3, #3
 80056ce:	e006      	b.n	80056de <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80056d0:	4b05      	ldr	r3, [pc, #20]	@ (80056e8 <RCCEx_PLL2_Config+0x15c>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d0f0      	beq.n	80056be <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80056dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3710      	adds	r7, #16
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	58024400 	.word	0x58024400
 80056ec:	ffff0007 	.word	0xffff0007

080056f0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056fa:	2300      	movs	r3, #0
 80056fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80056fe:	4b53      	ldr	r3, [pc, #332]	@ (800584c <RCCEx_PLL3_Config+0x15c>)
 8005700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005702:	f003 0303 	and.w	r3, r3, #3
 8005706:	2b03      	cmp	r3, #3
 8005708:	d101      	bne.n	800570e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e099      	b.n	8005842 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800570e:	4b4f      	ldr	r3, [pc, #316]	@ (800584c <RCCEx_PLL3_Config+0x15c>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a4e      	ldr	r2, [pc, #312]	@ (800584c <RCCEx_PLL3_Config+0x15c>)
 8005714:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005718:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800571a:	f7fc fe4f 	bl	80023bc <HAL_GetTick>
 800571e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005720:	e008      	b.n	8005734 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005722:	f7fc fe4b 	bl	80023bc <HAL_GetTick>
 8005726:	4602      	mov	r2, r0
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	2b02      	cmp	r3, #2
 800572e:	d901      	bls.n	8005734 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005730:	2303      	movs	r3, #3
 8005732:	e086      	b.n	8005842 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005734:	4b45      	ldr	r3, [pc, #276]	@ (800584c <RCCEx_PLL3_Config+0x15c>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800573c:	2b00      	cmp	r3, #0
 800573e:	d1f0      	bne.n	8005722 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005740:	4b42      	ldr	r3, [pc, #264]	@ (800584c <RCCEx_PLL3_Config+0x15c>)
 8005742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005744:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	051b      	lsls	r3, r3, #20
 800574e:	493f      	ldr	r1, [pc, #252]	@ (800584c <RCCEx_PLL3_Config+0x15c>)
 8005750:	4313      	orrs	r3, r2
 8005752:	628b      	str	r3, [r1, #40]	@ 0x28
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	3b01      	subs	r3, #1
 800575a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	3b01      	subs	r3, #1
 8005764:	025b      	lsls	r3, r3, #9
 8005766:	b29b      	uxth	r3, r3
 8005768:	431a      	orrs	r2, r3
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	3b01      	subs	r3, #1
 8005770:	041b      	lsls	r3, r3, #16
 8005772:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005776:	431a      	orrs	r2, r3
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	691b      	ldr	r3, [r3, #16]
 800577c:	3b01      	subs	r3, #1
 800577e:	061b      	lsls	r3, r3, #24
 8005780:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005784:	4931      	ldr	r1, [pc, #196]	@ (800584c <RCCEx_PLL3_Config+0x15c>)
 8005786:	4313      	orrs	r3, r2
 8005788:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800578a:	4b30      	ldr	r3, [pc, #192]	@ (800584c <RCCEx_PLL3_Config+0x15c>)
 800578c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800578e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	695b      	ldr	r3, [r3, #20]
 8005796:	492d      	ldr	r1, [pc, #180]	@ (800584c <RCCEx_PLL3_Config+0x15c>)
 8005798:	4313      	orrs	r3, r2
 800579a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800579c:	4b2b      	ldr	r3, [pc, #172]	@ (800584c <RCCEx_PLL3_Config+0x15c>)
 800579e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057a0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	699b      	ldr	r3, [r3, #24]
 80057a8:	4928      	ldr	r1, [pc, #160]	@ (800584c <RCCEx_PLL3_Config+0x15c>)
 80057aa:	4313      	orrs	r3, r2
 80057ac:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80057ae:	4b27      	ldr	r3, [pc, #156]	@ (800584c <RCCEx_PLL3_Config+0x15c>)
 80057b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057b2:	4a26      	ldr	r2, [pc, #152]	@ (800584c <RCCEx_PLL3_Config+0x15c>)
 80057b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80057ba:	4b24      	ldr	r3, [pc, #144]	@ (800584c <RCCEx_PLL3_Config+0x15c>)
 80057bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80057be:	4b24      	ldr	r3, [pc, #144]	@ (8005850 <RCCEx_PLL3_Config+0x160>)
 80057c0:	4013      	ands	r3, r2
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	69d2      	ldr	r2, [r2, #28]
 80057c6:	00d2      	lsls	r2, r2, #3
 80057c8:	4920      	ldr	r1, [pc, #128]	@ (800584c <RCCEx_PLL3_Config+0x15c>)
 80057ca:	4313      	orrs	r3, r2
 80057cc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80057ce:	4b1f      	ldr	r3, [pc, #124]	@ (800584c <RCCEx_PLL3_Config+0x15c>)
 80057d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057d2:	4a1e      	ldr	r2, [pc, #120]	@ (800584c <RCCEx_PLL3_Config+0x15c>)
 80057d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d106      	bne.n	80057ee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80057e0:	4b1a      	ldr	r3, [pc, #104]	@ (800584c <RCCEx_PLL3_Config+0x15c>)
 80057e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057e4:	4a19      	ldr	r2, [pc, #100]	@ (800584c <RCCEx_PLL3_Config+0x15c>)
 80057e6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80057ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80057ec:	e00f      	b.n	800580e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d106      	bne.n	8005802 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80057f4:	4b15      	ldr	r3, [pc, #84]	@ (800584c <RCCEx_PLL3_Config+0x15c>)
 80057f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057f8:	4a14      	ldr	r2, [pc, #80]	@ (800584c <RCCEx_PLL3_Config+0x15c>)
 80057fa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80057fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005800:	e005      	b.n	800580e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005802:	4b12      	ldr	r3, [pc, #72]	@ (800584c <RCCEx_PLL3_Config+0x15c>)
 8005804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005806:	4a11      	ldr	r2, [pc, #68]	@ (800584c <RCCEx_PLL3_Config+0x15c>)
 8005808:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800580c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800580e:	4b0f      	ldr	r3, [pc, #60]	@ (800584c <RCCEx_PLL3_Config+0x15c>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a0e      	ldr	r2, [pc, #56]	@ (800584c <RCCEx_PLL3_Config+0x15c>)
 8005814:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005818:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800581a:	f7fc fdcf 	bl	80023bc <HAL_GetTick>
 800581e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005820:	e008      	b.n	8005834 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005822:	f7fc fdcb 	bl	80023bc <HAL_GetTick>
 8005826:	4602      	mov	r2, r0
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	1ad3      	subs	r3, r2, r3
 800582c:	2b02      	cmp	r3, #2
 800582e:	d901      	bls.n	8005834 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005830:	2303      	movs	r3, #3
 8005832:	e006      	b.n	8005842 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005834:	4b05      	ldr	r3, [pc, #20]	@ (800584c <RCCEx_PLL3_Config+0x15c>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800583c:	2b00      	cmp	r3, #0
 800583e:	d0f0      	beq.n	8005822 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005840:	7bfb      	ldrb	r3, [r7, #15]
}
 8005842:	4618      	mov	r0, r3
 8005844:	3710      	adds	r7, #16
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
 800584a:	bf00      	nop
 800584c:	58024400 	.word	0x58024400
 8005850:	ffff0007 	.word	0xffff0007

08005854 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d101      	bne.n	8005866 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e10f      	b.n	8005a86 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a87      	ldr	r2, [pc, #540]	@ (8005a90 <HAL_SPI_Init+0x23c>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d00f      	beq.n	8005896 <HAL_SPI_Init+0x42>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a86      	ldr	r2, [pc, #536]	@ (8005a94 <HAL_SPI_Init+0x240>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d00a      	beq.n	8005896 <HAL_SPI_Init+0x42>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a84      	ldr	r2, [pc, #528]	@ (8005a98 <HAL_SPI_Init+0x244>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d005      	beq.n	8005896 <HAL_SPI_Init+0x42>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	2b0f      	cmp	r3, #15
 8005890:	d901      	bls.n	8005896 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e0f7      	b.n	8005a86 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 fc12 	bl	80060c0 <SPI_GetPacketSize>
 800589c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a7b      	ldr	r2, [pc, #492]	@ (8005a90 <HAL_SPI_Init+0x23c>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d00c      	beq.n	80058c2 <HAL_SPI_Init+0x6e>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a79      	ldr	r2, [pc, #484]	@ (8005a94 <HAL_SPI_Init+0x240>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d007      	beq.n	80058c2 <HAL_SPI_Init+0x6e>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a78      	ldr	r2, [pc, #480]	@ (8005a98 <HAL_SPI_Init+0x244>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d002      	beq.n	80058c2 <HAL_SPI_Init+0x6e>
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2b08      	cmp	r3, #8
 80058c0:	d811      	bhi.n	80058e6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80058c6:	4a72      	ldr	r2, [pc, #456]	@ (8005a90 <HAL_SPI_Init+0x23c>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d009      	beq.n	80058e0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a70      	ldr	r2, [pc, #448]	@ (8005a94 <HAL_SPI_Init+0x240>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d004      	beq.n	80058e0 <HAL_SPI_Init+0x8c>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a6f      	ldr	r2, [pc, #444]	@ (8005a98 <HAL_SPI_Init+0x244>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d104      	bne.n	80058ea <HAL_SPI_Init+0x96>
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2b10      	cmp	r3, #16
 80058e4:	d901      	bls.n	80058ea <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e0cd      	b.n	8005a86 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d106      	bne.n	8005904 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f7fb fa78 	bl	8000df4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2202      	movs	r2, #2
 8005908:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f022 0201 	bic.w	r2, r2, #1
 800591a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8005926:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	699b      	ldr	r3, [r3, #24]
 800592c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005930:	d119      	bne.n	8005966 <HAL_SPI_Init+0x112>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800593a:	d103      	bne.n	8005944 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005940:	2b00      	cmp	r3, #0
 8005942:	d008      	beq.n	8005956 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005948:	2b00      	cmp	r3, #0
 800594a:	d10c      	bne.n	8005966 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005950:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005954:	d107      	bne.n	8005966 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005964:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800596e:	2b00      	cmp	r3, #0
 8005970:	d00f      	beq.n	8005992 <HAL_SPI_Init+0x13e>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	2b06      	cmp	r3, #6
 8005978:	d90b      	bls.n	8005992 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	430a      	orrs	r2, r1
 800598e:	601a      	str	r2, [r3, #0]
 8005990:	e007      	b.n	80059a2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80059a0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	69da      	ldr	r2, [r3, #28]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059aa:	431a      	orrs	r2, r3
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	431a      	orrs	r2, r3
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059b4:	ea42 0103 	orr.w	r1, r2, r3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	68da      	ldr	r2, [r3, #12]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	430a      	orrs	r2, r1
 80059c2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059cc:	431a      	orrs	r2, r3
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059d2:	431a      	orrs	r2, r3
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	699b      	ldr	r3, [r3, #24]
 80059d8:	431a      	orrs	r2, r3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	431a      	orrs	r2, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	695b      	ldr	r3, [r3, #20]
 80059e4:	431a      	orrs	r2, r3
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a1b      	ldr	r3, [r3, #32]
 80059ea:	431a      	orrs	r2, r3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	431a      	orrs	r2, r3
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059f6:	431a      	orrs	r2, r3
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	431a      	orrs	r2, r3
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a02:	ea42 0103 	orr.w	r1, r2, r3
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	430a      	orrs	r2, r1
 8005a10:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d113      	bne.n	8005a42 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a2c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005a40:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f022 0201 	bic.w	r2, r2, #1
 8005a50:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00a      	beq.n	8005a74 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	430a      	orrs	r2, r1
 8005a72:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3710      	adds	r7, #16
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	40013000 	.word	0x40013000
 8005a94:	40003800 	.word	0x40003800
 8005a98:	40003c00 	.word	0x40003c00

08005a9c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b088      	sub	sp, #32
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	603b      	str	r3, [r7, #0]
 8005aa8:	4613      	mov	r3, r2
 8005aaa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ab0:	095b      	lsrs	r3, r3, #5
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	3330      	adds	r3, #48	@ 0x30
 8005abe:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ac0:	f7fc fc7c 	bl	80023bc <HAL_GetTick>
 8005ac4:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d001      	beq.n	8005ad6 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8005ad2:	2302      	movs	r3, #2
 8005ad4:	e250      	b.n	8005f78 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d002      	beq.n	8005ae2 <HAL_SPI_Receive+0x46>
 8005adc:	88fb      	ldrh	r3, [r7, #6]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d101      	bne.n	8005ae6 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e248      	b.n	8005f78 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d101      	bne.n	8005af4 <HAL_SPI_Receive+0x58>
 8005af0:	2302      	movs	r3, #2
 8005af2:	e241      	b.n	8005f78 <HAL_SPI_Receive+0x4dc>
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2204      	movs	r2, #4
 8005b00:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	68ba      	ldr	r2, [r7, #8]
 8005b10:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	88fa      	ldrh	r2, [r7, #6]
 8005b16:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	88fa      	ldrh	r2, [r7, #6]
 8005b1e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2200      	movs	r2, #0
 8005b26:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2200      	movs	r2, #0
 8005b34:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2200      	movs	r2, #0
 8005b42:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8005b4c:	d108      	bne.n	8005b60 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b5c:	601a      	str	r2, [r3, #0]
 8005b5e:	e009      	b.n	8005b74 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8005b72:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	685a      	ldr	r2, [r3, #4]
 8005b7a:	4b95      	ldr	r3, [pc, #596]	@ (8005dd0 <HAL_SPI_Receive+0x334>)
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	88f9      	ldrh	r1, [r7, #6]
 8005b80:	68fa      	ldr	r2, [r7, #12]
 8005b82:	6812      	ldr	r2, [r2, #0]
 8005b84:	430b      	orrs	r3, r1
 8005b86:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f042 0201 	orr.w	r2, r2, #1
 8005b96:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ba0:	d107      	bne.n	8005bb2 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005bb0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	2b0f      	cmp	r3, #15
 8005bb8:	d96c      	bls.n	8005c94 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8005bba:	e064      	b.n	8005c86 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	695b      	ldr	r3, [r3, #20]
 8005bc2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	695b      	ldr	r3, [r3, #20]
 8005bca:	f003 0301 	and.w	r3, r3, #1
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d114      	bne.n	8005bfc <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005bda:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005bdc:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005be2:	1d1a      	adds	r2, r3, #4
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	3b01      	subs	r3, #1
 8005bf2:	b29a      	uxth	r2, r3
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005bfa:	e044      	b.n	8005c86 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	8bfa      	ldrh	r2, [r7, #30]
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d919      	bls.n	8005c3e <HAL_SPI_Receive+0x1a2>
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d014      	beq.n	8005c3e <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c1c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005c1e:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c24:	1d1a      	adds	r2, r3, #4
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	3b01      	subs	r3, #1
 8005c34:	b29a      	uxth	r2, r3
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005c3c:	e023      	b.n	8005c86 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c3e:	f7fc fbbd 	bl	80023bc <HAL_GetTick>
 8005c42:	4602      	mov	r2, r0
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	1ad3      	subs	r3, r2, r3
 8005c48:	683a      	ldr	r2, [r7, #0]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d803      	bhi.n	8005c56 <HAL_SPI_Receive+0x1ba>
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c54:	d102      	bne.n	8005c5c <HAL_SPI_Receive+0x1c0>
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d114      	bne.n	8005c86 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005c5c:	68f8      	ldr	r0, [r7, #12]
 8005c5e:	f000 f98f 	bl	8005f80 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c68:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2201      	movs	r2, #1
 8005c76:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005c82:	2303      	movs	r3, #3
 8005c84:	e178      	b.n	8005f78 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d194      	bne.n	8005bbc <HAL_SPI_Receive+0x120>
 8005c92:	e15e      	b.n	8005f52 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	2b07      	cmp	r3, #7
 8005c9a:	f240 8153 	bls.w	8005f44 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8005c9e:	e08f      	b.n	8005dc0 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	695b      	ldr	r3, [r3, #20]
 8005ca6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	695b      	ldr	r3, [r3, #20]
 8005cae:	f003 0301 	and.w	r3, r3, #1
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d114      	bne.n	8005ce0 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cba:	69ba      	ldr	r2, [r7, #24]
 8005cbc:	8812      	ldrh	r2, [r2, #0]
 8005cbe:	b292      	uxth	r2, r2
 8005cc0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cc6:	1c9a      	adds	r2, r3, #2
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	3b01      	subs	r3, #1
 8005cd6:	b29a      	uxth	r2, r3
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005cde:	e06f      	b.n	8005dc0 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	8bfa      	ldrh	r2, [r7, #30]
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d924      	bls.n	8005d38 <HAL_SPI_Receive+0x29c>
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d01f      	beq.n	8005d38 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cfc:	69ba      	ldr	r2, [r7, #24]
 8005cfe:	8812      	ldrh	r2, [r2, #0]
 8005d00:	b292      	uxth	r2, r2
 8005d02:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d08:	1c9a      	adds	r2, r3, #2
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d12:	69ba      	ldr	r2, [r7, #24]
 8005d14:	8812      	ldrh	r2, [r2, #0]
 8005d16:	b292      	uxth	r2, r2
 8005d18:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d1e:	1c9a      	adds	r2, r3, #2
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	3b02      	subs	r3, #2
 8005d2e:	b29a      	uxth	r2, r3
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005d36:	e043      	b.n	8005dc0 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d119      	bne.n	8005d78 <HAL_SPI_Receive+0x2dc>
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d014      	beq.n	8005d78 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d52:	69ba      	ldr	r2, [r7, #24]
 8005d54:	8812      	ldrh	r2, [r2, #0]
 8005d56:	b292      	uxth	r2, r2
 8005d58:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d5e:	1c9a      	adds	r2, r3, #2
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	3b01      	subs	r3, #1
 8005d6e:	b29a      	uxth	r2, r3
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005d76:	e023      	b.n	8005dc0 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d78:	f7fc fb20 	bl	80023bc <HAL_GetTick>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	683a      	ldr	r2, [r7, #0]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d803      	bhi.n	8005d90 <HAL_SPI_Receive+0x2f4>
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d8e:	d102      	bne.n	8005d96 <HAL_SPI_Receive+0x2fa>
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d114      	bne.n	8005dc0 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005d96:	68f8      	ldr	r0, [r7, #12]
 8005d98:	f000 f8f2 	bl	8005f80 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005da2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005dbc:	2303      	movs	r3, #3
 8005dbe:	e0db      	b.n	8005f78 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	f47f af69 	bne.w	8005ca0 <HAL_SPI_Receive+0x204>
 8005dce:	e0c0      	b.n	8005f52 <HAL_SPI_Receive+0x4b6>
 8005dd0:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	695b      	ldr	r3, [r3, #20]
 8005dda:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	695b      	ldr	r3, [r3, #20]
 8005de2:	f003 0301 	and.w	r3, r3, #1
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d117      	bne.n	8005e1a <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005df6:	7812      	ldrb	r2, [r2, #0]
 8005df8:	b2d2      	uxtb	r2, r2
 8005dfa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e00:	1c5a      	adds	r2, r3, #1
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	b29a      	uxth	r2, r3
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005e18:	e094      	b.n	8005f44 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	8bfa      	ldrh	r2, [r7, #30]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d946      	bls.n	8005eb6 <HAL_SPI_Receive+0x41a>
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d041      	beq.n	8005eb6 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e3e:	7812      	ldrb	r2, [r2, #0]
 8005e40:	b2d2      	uxtb	r2, r2
 8005e42:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e48:	1c5a      	adds	r2, r3, #1
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e5a:	7812      	ldrb	r2, [r2, #0]
 8005e5c:	b2d2      	uxtb	r2, r2
 8005e5e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e64:	1c5a      	adds	r2, r3, #1
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e76:	7812      	ldrb	r2, [r2, #0]
 8005e78:	b2d2      	uxtb	r2, r2
 8005e7a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e80:	1c5a      	adds	r2, r3, #1
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e92:	7812      	ldrb	r2, [r2, #0]
 8005e94:	b2d2      	uxtb	r2, r2
 8005e96:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e9c:	1c5a      	adds	r2, r3, #1
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	3b04      	subs	r3, #4
 8005eac:	b29a      	uxth	r2, r3
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005eb4:	e046      	b.n	8005f44 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	2b03      	cmp	r3, #3
 8005ec0:	d81c      	bhi.n	8005efc <HAL_SPI_Receive+0x460>
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d017      	beq.n	8005efc <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ed8:	7812      	ldrb	r2, [r2, #0]
 8005eda:	b2d2      	uxtb	r2, r2
 8005edc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ee2:	1c5a      	adds	r2, r3, #1
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	3b01      	subs	r3, #1
 8005ef2:	b29a      	uxth	r2, r3
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005efa:	e023      	b.n	8005f44 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005efc:	f7fc fa5e 	bl	80023bc <HAL_GetTick>
 8005f00:	4602      	mov	r2, r0
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	683a      	ldr	r2, [r7, #0]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d803      	bhi.n	8005f14 <HAL_SPI_Receive+0x478>
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f12:	d102      	bne.n	8005f1a <HAL_SPI_Receive+0x47e>
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d114      	bne.n	8005f44 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005f1a:	68f8      	ldr	r0, [r7, #12]
 8005f1c:	f000 f830 	bl	8005f80 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f26:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005f40:	2303      	movs	r3, #3
 8005f42:	e019      	b.n	8005f78 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	f47f af41 	bne.w	8005dd4 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005f52:	68f8      	ldr	r0, [r7, #12]
 8005f54:	f000 f814 	bl	8005f80 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d001      	beq.n	8005f76 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e000      	b.n	8005f78 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8005f76:	2300      	movs	r3, #0
  }
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3720      	adds	r7, #32
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b085      	sub	sp, #20
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	695b      	ldr	r3, [r3, #20]
 8005f8e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	699a      	ldr	r2, [r3, #24]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f042 0208 	orr.w	r2, r2, #8
 8005f9e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	699a      	ldr	r2, [r3, #24]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f042 0210 	orr.w	r2, r2, #16
 8005fae:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f022 0201 	bic.w	r2, r2, #1
 8005fbe:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	6919      	ldr	r1, [r3, #16]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	4b3c      	ldr	r3, [pc, #240]	@ (80060bc <SPI_CloseTransfer+0x13c>)
 8005fcc:	400b      	ands	r3, r1
 8005fce:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	689a      	ldr	r2, [r3, #8]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8005fde:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	2b04      	cmp	r3, #4
 8005fea:	d014      	beq.n	8006016 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f003 0320 	and.w	r3, r3, #32
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00f      	beq.n	8006016 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ffc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	699a      	ldr	r2, [r3, #24]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f042 0220 	orr.w	r2, r2, #32
 8006014:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800601c:	b2db      	uxtb	r3, r3
 800601e:	2b03      	cmp	r3, #3
 8006020:	d014      	beq.n	800604c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006028:	2b00      	cmp	r3, #0
 800602a:	d00f      	beq.n	800604c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006032:	f043 0204 	orr.w	r2, r3, #4
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	699a      	ldr	r2, [r3, #24]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800604a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006052:	2b00      	cmp	r3, #0
 8006054:	d00f      	beq.n	8006076 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800605c:	f043 0201 	orr.w	r2, r3, #1
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	699a      	ldr	r2, [r3, #24]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006074:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800607c:	2b00      	cmp	r3, #0
 800607e:	d00f      	beq.n	80060a0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006086:	f043 0208 	orr.w	r2, r3, #8
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	699a      	ldr	r2, [r3, #24]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800609e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80060b0:	bf00      	nop
 80060b2:	3714      	adds	r7, #20
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr
 80060bc:	fffffc90 	.word	0xfffffc90

080060c0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b085      	sub	sp, #20
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060cc:	095b      	lsrs	r3, r3, #5
 80060ce:	3301      	adds	r3, #1
 80060d0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	68db      	ldr	r3, [r3, #12]
 80060d6:	3301      	adds	r3, #1
 80060d8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	3307      	adds	r3, #7
 80060de:	08db      	lsrs	r3, r3, #3
 80060e0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	68fa      	ldr	r2, [r7, #12]
 80060e6:	fb02 f303 	mul.w	r3, r2, r3
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3714      	adds	r7, #20
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr

080060f6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060f6:	b580      	push	{r7, lr}
 80060f8:	b082      	sub	sp, #8
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d101      	bne.n	8006108 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	e042      	b.n	800618e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800610e:	2b00      	cmp	r3, #0
 8006110:	d106      	bne.n	8006120 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 f83b 	bl	8006196 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2224      	movs	r2, #36	@ 0x24
 8006124:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f022 0201 	bic.w	r2, r2, #1
 8006136:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800613c:	2b00      	cmp	r3, #0
 800613e:	d002      	beq.n	8006146 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f000 fe29 	bl	8006d98 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 f8be 	bl	80062c8 <UART_SetConfig>
 800614c:	4603      	mov	r3, r0
 800614e:	2b01      	cmp	r3, #1
 8006150:	d101      	bne.n	8006156 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e01b      	b.n	800618e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	685a      	ldr	r2, [r3, #4]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006164:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	689a      	ldr	r2, [r3, #8]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006174:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f042 0201 	orr.w	r2, r2, #1
 8006184:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f000 fea8 	bl	8006edc <UART_CheckIdleState>
 800618c:	4603      	mov	r3, r0
}
 800618e:	4618      	mov	r0, r3
 8006190:	3708      	adds	r7, #8
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}

08006196 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8006196:	b480      	push	{r7}
 8006198:	b083      	sub	sp, #12
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800619e:	bf00      	nop
 80061a0:	370c      	adds	r7, #12
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr

080061aa <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061aa:	b580      	push	{r7, lr}
 80061ac:	b08a      	sub	sp, #40	@ 0x28
 80061ae:	af02      	add	r7, sp, #8
 80061b0:	60f8      	str	r0, [r7, #12]
 80061b2:	60b9      	str	r1, [r7, #8]
 80061b4:	603b      	str	r3, [r7, #0]
 80061b6:	4613      	mov	r3, r2
 80061b8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061c0:	2b20      	cmp	r3, #32
 80061c2:	d17b      	bne.n	80062bc <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d002      	beq.n	80061d0 <HAL_UART_Transmit+0x26>
 80061ca:	88fb      	ldrh	r3, [r7, #6]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d101      	bne.n	80061d4 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	e074      	b.n	80062be <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2200      	movs	r2, #0
 80061d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2221      	movs	r2, #33	@ 0x21
 80061e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80061e4:	f7fc f8ea 	bl	80023bc <HAL_GetTick>
 80061e8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	88fa      	ldrh	r2, [r7, #6]
 80061ee:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	88fa      	ldrh	r2, [r7, #6]
 80061f6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006202:	d108      	bne.n	8006216 <HAL_UART_Transmit+0x6c>
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	691b      	ldr	r3, [r3, #16]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d104      	bne.n	8006216 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800620c:	2300      	movs	r3, #0
 800620e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	61bb      	str	r3, [r7, #24]
 8006214:	e003      	b.n	800621e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800621a:	2300      	movs	r3, #0
 800621c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800621e:	e030      	b.n	8006282 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	9300      	str	r3, [sp, #0]
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	2200      	movs	r2, #0
 8006228:	2180      	movs	r1, #128	@ 0x80
 800622a:	68f8      	ldr	r0, [r7, #12]
 800622c:	f000 ff00 	bl	8007030 <UART_WaitOnFlagUntilTimeout>
 8006230:	4603      	mov	r3, r0
 8006232:	2b00      	cmp	r3, #0
 8006234:	d005      	beq.n	8006242 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2220      	movs	r2, #32
 800623a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800623e:	2303      	movs	r3, #3
 8006240:	e03d      	b.n	80062be <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d10b      	bne.n	8006260 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006248:	69bb      	ldr	r3, [r7, #24]
 800624a:	881b      	ldrh	r3, [r3, #0]
 800624c:	461a      	mov	r2, r3
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006256:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006258:	69bb      	ldr	r3, [r7, #24]
 800625a:	3302      	adds	r3, #2
 800625c:	61bb      	str	r3, [r7, #24]
 800625e:	e007      	b.n	8006270 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	781a      	ldrb	r2, [r3, #0]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	3301      	adds	r3, #1
 800626e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006276:	b29b      	uxth	r3, r3
 8006278:	3b01      	subs	r3, #1
 800627a:	b29a      	uxth	r2, r3
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006288:	b29b      	uxth	r3, r3
 800628a:	2b00      	cmp	r3, #0
 800628c:	d1c8      	bne.n	8006220 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	9300      	str	r3, [sp, #0]
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	2200      	movs	r2, #0
 8006296:	2140      	movs	r1, #64	@ 0x40
 8006298:	68f8      	ldr	r0, [r7, #12]
 800629a:	f000 fec9 	bl	8007030 <UART_WaitOnFlagUntilTimeout>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d005      	beq.n	80062b0 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2220      	movs	r2, #32
 80062a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80062ac:	2303      	movs	r3, #3
 80062ae:	e006      	b.n	80062be <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2220      	movs	r2, #32
 80062b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80062b8:	2300      	movs	r3, #0
 80062ba:	e000      	b.n	80062be <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80062bc:	2302      	movs	r3, #2
  }
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3720      	adds	r7, #32
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
	...

080062c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062cc:	b092      	sub	sp, #72	@ 0x48
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80062d2:	2300      	movs	r3, #0
 80062d4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	689a      	ldr	r2, [r3, #8]
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	431a      	orrs	r2, r3
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	695b      	ldr	r3, [r3, #20]
 80062e6:	431a      	orrs	r2, r3
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	69db      	ldr	r3, [r3, #28]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	4bbe      	ldr	r3, [pc, #760]	@ (80065f0 <UART_SetConfig+0x328>)
 80062f8:	4013      	ands	r3, r2
 80062fa:	697a      	ldr	r2, [r7, #20]
 80062fc:	6812      	ldr	r2, [r2, #0]
 80062fe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006300:	430b      	orrs	r3, r1
 8006302:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	68da      	ldr	r2, [r3, #12]
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	430a      	orrs	r2, r1
 8006318:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	699b      	ldr	r3, [r3, #24]
 800631e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4ab3      	ldr	r2, [pc, #716]	@ (80065f4 <UART_SetConfig+0x32c>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d004      	beq.n	8006334 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	6a1b      	ldr	r3, [r3, #32]
 800632e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006330:	4313      	orrs	r3, r2
 8006332:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	689a      	ldr	r2, [r3, #8]
 800633a:	4baf      	ldr	r3, [pc, #700]	@ (80065f8 <UART_SetConfig+0x330>)
 800633c:	4013      	ands	r3, r2
 800633e:	697a      	ldr	r2, [r7, #20]
 8006340:	6812      	ldr	r2, [r2, #0]
 8006342:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006344:	430b      	orrs	r3, r1
 8006346:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800634e:	f023 010f 	bic.w	r1, r3, #15
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	430a      	orrs	r2, r1
 800635c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4aa6      	ldr	r2, [pc, #664]	@ (80065fc <UART_SetConfig+0x334>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d177      	bne.n	8006458 <UART_SetConfig+0x190>
 8006368:	4ba5      	ldr	r3, [pc, #660]	@ (8006600 <UART_SetConfig+0x338>)
 800636a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800636c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006370:	2b28      	cmp	r3, #40	@ 0x28
 8006372:	d86d      	bhi.n	8006450 <UART_SetConfig+0x188>
 8006374:	a201      	add	r2, pc, #4	@ (adr r2, 800637c <UART_SetConfig+0xb4>)
 8006376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800637a:	bf00      	nop
 800637c:	08006421 	.word	0x08006421
 8006380:	08006451 	.word	0x08006451
 8006384:	08006451 	.word	0x08006451
 8006388:	08006451 	.word	0x08006451
 800638c:	08006451 	.word	0x08006451
 8006390:	08006451 	.word	0x08006451
 8006394:	08006451 	.word	0x08006451
 8006398:	08006451 	.word	0x08006451
 800639c:	08006429 	.word	0x08006429
 80063a0:	08006451 	.word	0x08006451
 80063a4:	08006451 	.word	0x08006451
 80063a8:	08006451 	.word	0x08006451
 80063ac:	08006451 	.word	0x08006451
 80063b0:	08006451 	.word	0x08006451
 80063b4:	08006451 	.word	0x08006451
 80063b8:	08006451 	.word	0x08006451
 80063bc:	08006431 	.word	0x08006431
 80063c0:	08006451 	.word	0x08006451
 80063c4:	08006451 	.word	0x08006451
 80063c8:	08006451 	.word	0x08006451
 80063cc:	08006451 	.word	0x08006451
 80063d0:	08006451 	.word	0x08006451
 80063d4:	08006451 	.word	0x08006451
 80063d8:	08006451 	.word	0x08006451
 80063dc:	08006439 	.word	0x08006439
 80063e0:	08006451 	.word	0x08006451
 80063e4:	08006451 	.word	0x08006451
 80063e8:	08006451 	.word	0x08006451
 80063ec:	08006451 	.word	0x08006451
 80063f0:	08006451 	.word	0x08006451
 80063f4:	08006451 	.word	0x08006451
 80063f8:	08006451 	.word	0x08006451
 80063fc:	08006441 	.word	0x08006441
 8006400:	08006451 	.word	0x08006451
 8006404:	08006451 	.word	0x08006451
 8006408:	08006451 	.word	0x08006451
 800640c:	08006451 	.word	0x08006451
 8006410:	08006451 	.word	0x08006451
 8006414:	08006451 	.word	0x08006451
 8006418:	08006451 	.word	0x08006451
 800641c:	08006449 	.word	0x08006449
 8006420:	2301      	movs	r3, #1
 8006422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006426:	e222      	b.n	800686e <UART_SetConfig+0x5a6>
 8006428:	2304      	movs	r3, #4
 800642a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800642e:	e21e      	b.n	800686e <UART_SetConfig+0x5a6>
 8006430:	2308      	movs	r3, #8
 8006432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006436:	e21a      	b.n	800686e <UART_SetConfig+0x5a6>
 8006438:	2310      	movs	r3, #16
 800643a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800643e:	e216      	b.n	800686e <UART_SetConfig+0x5a6>
 8006440:	2320      	movs	r3, #32
 8006442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006446:	e212      	b.n	800686e <UART_SetConfig+0x5a6>
 8006448:	2340      	movs	r3, #64	@ 0x40
 800644a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800644e:	e20e      	b.n	800686e <UART_SetConfig+0x5a6>
 8006450:	2380      	movs	r3, #128	@ 0x80
 8006452:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006456:	e20a      	b.n	800686e <UART_SetConfig+0x5a6>
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a69      	ldr	r2, [pc, #420]	@ (8006604 <UART_SetConfig+0x33c>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d130      	bne.n	80064c4 <UART_SetConfig+0x1fc>
 8006462:	4b67      	ldr	r3, [pc, #412]	@ (8006600 <UART_SetConfig+0x338>)
 8006464:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006466:	f003 0307 	and.w	r3, r3, #7
 800646a:	2b05      	cmp	r3, #5
 800646c:	d826      	bhi.n	80064bc <UART_SetConfig+0x1f4>
 800646e:	a201      	add	r2, pc, #4	@ (adr r2, 8006474 <UART_SetConfig+0x1ac>)
 8006470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006474:	0800648d 	.word	0x0800648d
 8006478:	08006495 	.word	0x08006495
 800647c:	0800649d 	.word	0x0800649d
 8006480:	080064a5 	.word	0x080064a5
 8006484:	080064ad 	.word	0x080064ad
 8006488:	080064b5 	.word	0x080064b5
 800648c:	2300      	movs	r3, #0
 800648e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006492:	e1ec      	b.n	800686e <UART_SetConfig+0x5a6>
 8006494:	2304      	movs	r3, #4
 8006496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800649a:	e1e8      	b.n	800686e <UART_SetConfig+0x5a6>
 800649c:	2308      	movs	r3, #8
 800649e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064a2:	e1e4      	b.n	800686e <UART_SetConfig+0x5a6>
 80064a4:	2310      	movs	r3, #16
 80064a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064aa:	e1e0      	b.n	800686e <UART_SetConfig+0x5a6>
 80064ac:	2320      	movs	r3, #32
 80064ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064b2:	e1dc      	b.n	800686e <UART_SetConfig+0x5a6>
 80064b4:	2340      	movs	r3, #64	@ 0x40
 80064b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064ba:	e1d8      	b.n	800686e <UART_SetConfig+0x5a6>
 80064bc:	2380      	movs	r3, #128	@ 0x80
 80064be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064c2:	e1d4      	b.n	800686e <UART_SetConfig+0x5a6>
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a4f      	ldr	r2, [pc, #316]	@ (8006608 <UART_SetConfig+0x340>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d130      	bne.n	8006530 <UART_SetConfig+0x268>
 80064ce:	4b4c      	ldr	r3, [pc, #304]	@ (8006600 <UART_SetConfig+0x338>)
 80064d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064d2:	f003 0307 	and.w	r3, r3, #7
 80064d6:	2b05      	cmp	r3, #5
 80064d8:	d826      	bhi.n	8006528 <UART_SetConfig+0x260>
 80064da:	a201      	add	r2, pc, #4	@ (adr r2, 80064e0 <UART_SetConfig+0x218>)
 80064dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e0:	080064f9 	.word	0x080064f9
 80064e4:	08006501 	.word	0x08006501
 80064e8:	08006509 	.word	0x08006509
 80064ec:	08006511 	.word	0x08006511
 80064f0:	08006519 	.word	0x08006519
 80064f4:	08006521 	.word	0x08006521
 80064f8:	2300      	movs	r3, #0
 80064fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064fe:	e1b6      	b.n	800686e <UART_SetConfig+0x5a6>
 8006500:	2304      	movs	r3, #4
 8006502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006506:	e1b2      	b.n	800686e <UART_SetConfig+0x5a6>
 8006508:	2308      	movs	r3, #8
 800650a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800650e:	e1ae      	b.n	800686e <UART_SetConfig+0x5a6>
 8006510:	2310      	movs	r3, #16
 8006512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006516:	e1aa      	b.n	800686e <UART_SetConfig+0x5a6>
 8006518:	2320      	movs	r3, #32
 800651a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800651e:	e1a6      	b.n	800686e <UART_SetConfig+0x5a6>
 8006520:	2340      	movs	r3, #64	@ 0x40
 8006522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006526:	e1a2      	b.n	800686e <UART_SetConfig+0x5a6>
 8006528:	2380      	movs	r3, #128	@ 0x80
 800652a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800652e:	e19e      	b.n	800686e <UART_SetConfig+0x5a6>
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a35      	ldr	r2, [pc, #212]	@ (800660c <UART_SetConfig+0x344>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d130      	bne.n	800659c <UART_SetConfig+0x2d4>
 800653a:	4b31      	ldr	r3, [pc, #196]	@ (8006600 <UART_SetConfig+0x338>)
 800653c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800653e:	f003 0307 	and.w	r3, r3, #7
 8006542:	2b05      	cmp	r3, #5
 8006544:	d826      	bhi.n	8006594 <UART_SetConfig+0x2cc>
 8006546:	a201      	add	r2, pc, #4	@ (adr r2, 800654c <UART_SetConfig+0x284>)
 8006548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800654c:	08006565 	.word	0x08006565
 8006550:	0800656d 	.word	0x0800656d
 8006554:	08006575 	.word	0x08006575
 8006558:	0800657d 	.word	0x0800657d
 800655c:	08006585 	.word	0x08006585
 8006560:	0800658d 	.word	0x0800658d
 8006564:	2300      	movs	r3, #0
 8006566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800656a:	e180      	b.n	800686e <UART_SetConfig+0x5a6>
 800656c:	2304      	movs	r3, #4
 800656e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006572:	e17c      	b.n	800686e <UART_SetConfig+0x5a6>
 8006574:	2308      	movs	r3, #8
 8006576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800657a:	e178      	b.n	800686e <UART_SetConfig+0x5a6>
 800657c:	2310      	movs	r3, #16
 800657e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006582:	e174      	b.n	800686e <UART_SetConfig+0x5a6>
 8006584:	2320      	movs	r3, #32
 8006586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800658a:	e170      	b.n	800686e <UART_SetConfig+0x5a6>
 800658c:	2340      	movs	r3, #64	@ 0x40
 800658e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006592:	e16c      	b.n	800686e <UART_SetConfig+0x5a6>
 8006594:	2380      	movs	r3, #128	@ 0x80
 8006596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800659a:	e168      	b.n	800686e <UART_SetConfig+0x5a6>
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a1b      	ldr	r2, [pc, #108]	@ (8006610 <UART_SetConfig+0x348>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d142      	bne.n	800662c <UART_SetConfig+0x364>
 80065a6:	4b16      	ldr	r3, [pc, #88]	@ (8006600 <UART_SetConfig+0x338>)
 80065a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065aa:	f003 0307 	and.w	r3, r3, #7
 80065ae:	2b05      	cmp	r3, #5
 80065b0:	d838      	bhi.n	8006624 <UART_SetConfig+0x35c>
 80065b2:	a201      	add	r2, pc, #4	@ (adr r2, 80065b8 <UART_SetConfig+0x2f0>)
 80065b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065b8:	080065d1 	.word	0x080065d1
 80065bc:	080065d9 	.word	0x080065d9
 80065c0:	080065e1 	.word	0x080065e1
 80065c4:	080065e9 	.word	0x080065e9
 80065c8:	08006615 	.word	0x08006615
 80065cc:	0800661d 	.word	0x0800661d
 80065d0:	2300      	movs	r3, #0
 80065d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065d6:	e14a      	b.n	800686e <UART_SetConfig+0x5a6>
 80065d8:	2304      	movs	r3, #4
 80065da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065de:	e146      	b.n	800686e <UART_SetConfig+0x5a6>
 80065e0:	2308      	movs	r3, #8
 80065e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065e6:	e142      	b.n	800686e <UART_SetConfig+0x5a6>
 80065e8:	2310      	movs	r3, #16
 80065ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065ee:	e13e      	b.n	800686e <UART_SetConfig+0x5a6>
 80065f0:	cfff69f3 	.word	0xcfff69f3
 80065f4:	58000c00 	.word	0x58000c00
 80065f8:	11fff4ff 	.word	0x11fff4ff
 80065fc:	40011000 	.word	0x40011000
 8006600:	58024400 	.word	0x58024400
 8006604:	40004400 	.word	0x40004400
 8006608:	40004800 	.word	0x40004800
 800660c:	40004c00 	.word	0x40004c00
 8006610:	40005000 	.word	0x40005000
 8006614:	2320      	movs	r3, #32
 8006616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800661a:	e128      	b.n	800686e <UART_SetConfig+0x5a6>
 800661c:	2340      	movs	r3, #64	@ 0x40
 800661e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006622:	e124      	b.n	800686e <UART_SetConfig+0x5a6>
 8006624:	2380      	movs	r3, #128	@ 0x80
 8006626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800662a:	e120      	b.n	800686e <UART_SetConfig+0x5a6>
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4acb      	ldr	r2, [pc, #812]	@ (8006960 <UART_SetConfig+0x698>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d176      	bne.n	8006724 <UART_SetConfig+0x45c>
 8006636:	4bcb      	ldr	r3, [pc, #812]	@ (8006964 <UART_SetConfig+0x69c>)
 8006638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800663a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800663e:	2b28      	cmp	r3, #40	@ 0x28
 8006640:	d86c      	bhi.n	800671c <UART_SetConfig+0x454>
 8006642:	a201      	add	r2, pc, #4	@ (adr r2, 8006648 <UART_SetConfig+0x380>)
 8006644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006648:	080066ed 	.word	0x080066ed
 800664c:	0800671d 	.word	0x0800671d
 8006650:	0800671d 	.word	0x0800671d
 8006654:	0800671d 	.word	0x0800671d
 8006658:	0800671d 	.word	0x0800671d
 800665c:	0800671d 	.word	0x0800671d
 8006660:	0800671d 	.word	0x0800671d
 8006664:	0800671d 	.word	0x0800671d
 8006668:	080066f5 	.word	0x080066f5
 800666c:	0800671d 	.word	0x0800671d
 8006670:	0800671d 	.word	0x0800671d
 8006674:	0800671d 	.word	0x0800671d
 8006678:	0800671d 	.word	0x0800671d
 800667c:	0800671d 	.word	0x0800671d
 8006680:	0800671d 	.word	0x0800671d
 8006684:	0800671d 	.word	0x0800671d
 8006688:	080066fd 	.word	0x080066fd
 800668c:	0800671d 	.word	0x0800671d
 8006690:	0800671d 	.word	0x0800671d
 8006694:	0800671d 	.word	0x0800671d
 8006698:	0800671d 	.word	0x0800671d
 800669c:	0800671d 	.word	0x0800671d
 80066a0:	0800671d 	.word	0x0800671d
 80066a4:	0800671d 	.word	0x0800671d
 80066a8:	08006705 	.word	0x08006705
 80066ac:	0800671d 	.word	0x0800671d
 80066b0:	0800671d 	.word	0x0800671d
 80066b4:	0800671d 	.word	0x0800671d
 80066b8:	0800671d 	.word	0x0800671d
 80066bc:	0800671d 	.word	0x0800671d
 80066c0:	0800671d 	.word	0x0800671d
 80066c4:	0800671d 	.word	0x0800671d
 80066c8:	0800670d 	.word	0x0800670d
 80066cc:	0800671d 	.word	0x0800671d
 80066d0:	0800671d 	.word	0x0800671d
 80066d4:	0800671d 	.word	0x0800671d
 80066d8:	0800671d 	.word	0x0800671d
 80066dc:	0800671d 	.word	0x0800671d
 80066e0:	0800671d 	.word	0x0800671d
 80066e4:	0800671d 	.word	0x0800671d
 80066e8:	08006715 	.word	0x08006715
 80066ec:	2301      	movs	r3, #1
 80066ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066f2:	e0bc      	b.n	800686e <UART_SetConfig+0x5a6>
 80066f4:	2304      	movs	r3, #4
 80066f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066fa:	e0b8      	b.n	800686e <UART_SetConfig+0x5a6>
 80066fc:	2308      	movs	r3, #8
 80066fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006702:	e0b4      	b.n	800686e <UART_SetConfig+0x5a6>
 8006704:	2310      	movs	r3, #16
 8006706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800670a:	e0b0      	b.n	800686e <UART_SetConfig+0x5a6>
 800670c:	2320      	movs	r3, #32
 800670e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006712:	e0ac      	b.n	800686e <UART_SetConfig+0x5a6>
 8006714:	2340      	movs	r3, #64	@ 0x40
 8006716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800671a:	e0a8      	b.n	800686e <UART_SetConfig+0x5a6>
 800671c:	2380      	movs	r3, #128	@ 0x80
 800671e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006722:	e0a4      	b.n	800686e <UART_SetConfig+0x5a6>
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a8f      	ldr	r2, [pc, #572]	@ (8006968 <UART_SetConfig+0x6a0>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d130      	bne.n	8006790 <UART_SetConfig+0x4c8>
 800672e:	4b8d      	ldr	r3, [pc, #564]	@ (8006964 <UART_SetConfig+0x69c>)
 8006730:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006732:	f003 0307 	and.w	r3, r3, #7
 8006736:	2b05      	cmp	r3, #5
 8006738:	d826      	bhi.n	8006788 <UART_SetConfig+0x4c0>
 800673a:	a201      	add	r2, pc, #4	@ (adr r2, 8006740 <UART_SetConfig+0x478>)
 800673c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006740:	08006759 	.word	0x08006759
 8006744:	08006761 	.word	0x08006761
 8006748:	08006769 	.word	0x08006769
 800674c:	08006771 	.word	0x08006771
 8006750:	08006779 	.word	0x08006779
 8006754:	08006781 	.word	0x08006781
 8006758:	2300      	movs	r3, #0
 800675a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800675e:	e086      	b.n	800686e <UART_SetConfig+0x5a6>
 8006760:	2304      	movs	r3, #4
 8006762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006766:	e082      	b.n	800686e <UART_SetConfig+0x5a6>
 8006768:	2308      	movs	r3, #8
 800676a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800676e:	e07e      	b.n	800686e <UART_SetConfig+0x5a6>
 8006770:	2310      	movs	r3, #16
 8006772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006776:	e07a      	b.n	800686e <UART_SetConfig+0x5a6>
 8006778:	2320      	movs	r3, #32
 800677a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800677e:	e076      	b.n	800686e <UART_SetConfig+0x5a6>
 8006780:	2340      	movs	r3, #64	@ 0x40
 8006782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006786:	e072      	b.n	800686e <UART_SetConfig+0x5a6>
 8006788:	2380      	movs	r3, #128	@ 0x80
 800678a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800678e:	e06e      	b.n	800686e <UART_SetConfig+0x5a6>
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a75      	ldr	r2, [pc, #468]	@ (800696c <UART_SetConfig+0x6a4>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d130      	bne.n	80067fc <UART_SetConfig+0x534>
 800679a:	4b72      	ldr	r3, [pc, #456]	@ (8006964 <UART_SetConfig+0x69c>)
 800679c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800679e:	f003 0307 	and.w	r3, r3, #7
 80067a2:	2b05      	cmp	r3, #5
 80067a4:	d826      	bhi.n	80067f4 <UART_SetConfig+0x52c>
 80067a6:	a201      	add	r2, pc, #4	@ (adr r2, 80067ac <UART_SetConfig+0x4e4>)
 80067a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ac:	080067c5 	.word	0x080067c5
 80067b0:	080067cd 	.word	0x080067cd
 80067b4:	080067d5 	.word	0x080067d5
 80067b8:	080067dd 	.word	0x080067dd
 80067bc:	080067e5 	.word	0x080067e5
 80067c0:	080067ed 	.word	0x080067ed
 80067c4:	2300      	movs	r3, #0
 80067c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067ca:	e050      	b.n	800686e <UART_SetConfig+0x5a6>
 80067cc:	2304      	movs	r3, #4
 80067ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067d2:	e04c      	b.n	800686e <UART_SetConfig+0x5a6>
 80067d4:	2308      	movs	r3, #8
 80067d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067da:	e048      	b.n	800686e <UART_SetConfig+0x5a6>
 80067dc:	2310      	movs	r3, #16
 80067de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067e2:	e044      	b.n	800686e <UART_SetConfig+0x5a6>
 80067e4:	2320      	movs	r3, #32
 80067e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067ea:	e040      	b.n	800686e <UART_SetConfig+0x5a6>
 80067ec:	2340      	movs	r3, #64	@ 0x40
 80067ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067f2:	e03c      	b.n	800686e <UART_SetConfig+0x5a6>
 80067f4:	2380      	movs	r3, #128	@ 0x80
 80067f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067fa:	e038      	b.n	800686e <UART_SetConfig+0x5a6>
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a5b      	ldr	r2, [pc, #364]	@ (8006970 <UART_SetConfig+0x6a8>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d130      	bne.n	8006868 <UART_SetConfig+0x5a0>
 8006806:	4b57      	ldr	r3, [pc, #348]	@ (8006964 <UART_SetConfig+0x69c>)
 8006808:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800680a:	f003 0307 	and.w	r3, r3, #7
 800680e:	2b05      	cmp	r3, #5
 8006810:	d826      	bhi.n	8006860 <UART_SetConfig+0x598>
 8006812:	a201      	add	r2, pc, #4	@ (adr r2, 8006818 <UART_SetConfig+0x550>)
 8006814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006818:	08006831 	.word	0x08006831
 800681c:	08006839 	.word	0x08006839
 8006820:	08006841 	.word	0x08006841
 8006824:	08006849 	.word	0x08006849
 8006828:	08006851 	.word	0x08006851
 800682c:	08006859 	.word	0x08006859
 8006830:	2302      	movs	r3, #2
 8006832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006836:	e01a      	b.n	800686e <UART_SetConfig+0x5a6>
 8006838:	2304      	movs	r3, #4
 800683a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800683e:	e016      	b.n	800686e <UART_SetConfig+0x5a6>
 8006840:	2308      	movs	r3, #8
 8006842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006846:	e012      	b.n	800686e <UART_SetConfig+0x5a6>
 8006848:	2310      	movs	r3, #16
 800684a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800684e:	e00e      	b.n	800686e <UART_SetConfig+0x5a6>
 8006850:	2320      	movs	r3, #32
 8006852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006856:	e00a      	b.n	800686e <UART_SetConfig+0x5a6>
 8006858:	2340      	movs	r3, #64	@ 0x40
 800685a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800685e:	e006      	b.n	800686e <UART_SetConfig+0x5a6>
 8006860:	2380      	movs	r3, #128	@ 0x80
 8006862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006866:	e002      	b.n	800686e <UART_SetConfig+0x5a6>
 8006868:	2380      	movs	r3, #128	@ 0x80
 800686a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a3f      	ldr	r2, [pc, #252]	@ (8006970 <UART_SetConfig+0x6a8>)
 8006874:	4293      	cmp	r3, r2
 8006876:	f040 80f8 	bne.w	8006a6a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800687a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800687e:	2b20      	cmp	r3, #32
 8006880:	dc46      	bgt.n	8006910 <UART_SetConfig+0x648>
 8006882:	2b02      	cmp	r3, #2
 8006884:	f2c0 8082 	blt.w	800698c <UART_SetConfig+0x6c4>
 8006888:	3b02      	subs	r3, #2
 800688a:	2b1e      	cmp	r3, #30
 800688c:	d87e      	bhi.n	800698c <UART_SetConfig+0x6c4>
 800688e:	a201      	add	r2, pc, #4	@ (adr r2, 8006894 <UART_SetConfig+0x5cc>)
 8006890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006894:	08006917 	.word	0x08006917
 8006898:	0800698d 	.word	0x0800698d
 800689c:	0800691f 	.word	0x0800691f
 80068a0:	0800698d 	.word	0x0800698d
 80068a4:	0800698d 	.word	0x0800698d
 80068a8:	0800698d 	.word	0x0800698d
 80068ac:	0800692f 	.word	0x0800692f
 80068b0:	0800698d 	.word	0x0800698d
 80068b4:	0800698d 	.word	0x0800698d
 80068b8:	0800698d 	.word	0x0800698d
 80068bc:	0800698d 	.word	0x0800698d
 80068c0:	0800698d 	.word	0x0800698d
 80068c4:	0800698d 	.word	0x0800698d
 80068c8:	0800698d 	.word	0x0800698d
 80068cc:	0800693f 	.word	0x0800693f
 80068d0:	0800698d 	.word	0x0800698d
 80068d4:	0800698d 	.word	0x0800698d
 80068d8:	0800698d 	.word	0x0800698d
 80068dc:	0800698d 	.word	0x0800698d
 80068e0:	0800698d 	.word	0x0800698d
 80068e4:	0800698d 	.word	0x0800698d
 80068e8:	0800698d 	.word	0x0800698d
 80068ec:	0800698d 	.word	0x0800698d
 80068f0:	0800698d 	.word	0x0800698d
 80068f4:	0800698d 	.word	0x0800698d
 80068f8:	0800698d 	.word	0x0800698d
 80068fc:	0800698d 	.word	0x0800698d
 8006900:	0800698d 	.word	0x0800698d
 8006904:	0800698d 	.word	0x0800698d
 8006908:	0800698d 	.word	0x0800698d
 800690c:	0800697f 	.word	0x0800697f
 8006910:	2b40      	cmp	r3, #64	@ 0x40
 8006912:	d037      	beq.n	8006984 <UART_SetConfig+0x6bc>
 8006914:	e03a      	b.n	800698c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006916:	f7fe fb7b 	bl	8005010 <HAL_RCCEx_GetD3PCLK1Freq>
 800691a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800691c:	e03c      	b.n	8006998 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800691e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006922:	4618      	mov	r0, r3
 8006924:	f7fe fb8a 	bl	800503c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800692a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800692c:	e034      	b.n	8006998 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800692e:	f107 0318 	add.w	r3, r7, #24
 8006932:	4618      	mov	r0, r3
 8006934:	f7fe fcd6 	bl	80052e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006938:	69fb      	ldr	r3, [r7, #28]
 800693a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800693c:	e02c      	b.n	8006998 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800693e:	4b09      	ldr	r3, [pc, #36]	@ (8006964 <UART_SetConfig+0x69c>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f003 0320 	and.w	r3, r3, #32
 8006946:	2b00      	cmp	r3, #0
 8006948:	d016      	beq.n	8006978 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800694a:	4b06      	ldr	r3, [pc, #24]	@ (8006964 <UART_SetConfig+0x69c>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	08db      	lsrs	r3, r3, #3
 8006950:	f003 0303 	and.w	r3, r3, #3
 8006954:	4a07      	ldr	r2, [pc, #28]	@ (8006974 <UART_SetConfig+0x6ac>)
 8006956:	fa22 f303 	lsr.w	r3, r2, r3
 800695a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800695c:	e01c      	b.n	8006998 <UART_SetConfig+0x6d0>
 800695e:	bf00      	nop
 8006960:	40011400 	.word	0x40011400
 8006964:	58024400 	.word	0x58024400
 8006968:	40007800 	.word	0x40007800
 800696c:	40007c00 	.word	0x40007c00
 8006970:	58000c00 	.word	0x58000c00
 8006974:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006978:	4b9d      	ldr	r3, [pc, #628]	@ (8006bf0 <UART_SetConfig+0x928>)
 800697a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800697c:	e00c      	b.n	8006998 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800697e:	4b9d      	ldr	r3, [pc, #628]	@ (8006bf4 <UART_SetConfig+0x92c>)
 8006980:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006982:	e009      	b.n	8006998 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006984:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006988:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800698a:	e005      	b.n	8006998 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800698c:	2300      	movs	r3, #0
 800698e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006996:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006998:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800699a:	2b00      	cmp	r3, #0
 800699c:	f000 81de 	beq.w	8006d5c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069a4:	4a94      	ldr	r2, [pc, #592]	@ (8006bf8 <UART_SetConfig+0x930>)
 80069a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069aa:	461a      	mov	r2, r3
 80069ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80069b2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	685a      	ldr	r2, [r3, #4]
 80069b8:	4613      	mov	r3, r2
 80069ba:	005b      	lsls	r3, r3, #1
 80069bc:	4413      	add	r3, r2
 80069be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d305      	bcc.n	80069d0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80069ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d903      	bls.n	80069d8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80069d6:	e1c1      	b.n	8006d5c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069da:	2200      	movs	r2, #0
 80069dc:	60bb      	str	r3, [r7, #8]
 80069de:	60fa      	str	r2, [r7, #12]
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069e4:	4a84      	ldr	r2, [pc, #528]	@ (8006bf8 <UART_SetConfig+0x930>)
 80069e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	2200      	movs	r2, #0
 80069ee:	603b      	str	r3, [r7, #0]
 80069f0:	607a      	str	r2, [r7, #4]
 80069f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80069fa:	f7f9 fcc1 	bl	8000380 <__aeabi_uldivmod>
 80069fe:	4602      	mov	r2, r0
 8006a00:	460b      	mov	r3, r1
 8006a02:	4610      	mov	r0, r2
 8006a04:	4619      	mov	r1, r3
 8006a06:	f04f 0200 	mov.w	r2, #0
 8006a0a:	f04f 0300 	mov.w	r3, #0
 8006a0e:	020b      	lsls	r3, r1, #8
 8006a10:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006a14:	0202      	lsls	r2, r0, #8
 8006a16:	6979      	ldr	r1, [r7, #20]
 8006a18:	6849      	ldr	r1, [r1, #4]
 8006a1a:	0849      	lsrs	r1, r1, #1
 8006a1c:	2000      	movs	r0, #0
 8006a1e:	460c      	mov	r4, r1
 8006a20:	4605      	mov	r5, r0
 8006a22:	eb12 0804 	adds.w	r8, r2, r4
 8006a26:	eb43 0905 	adc.w	r9, r3, r5
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	469a      	mov	sl, r3
 8006a32:	4693      	mov	fp, r2
 8006a34:	4652      	mov	r2, sl
 8006a36:	465b      	mov	r3, fp
 8006a38:	4640      	mov	r0, r8
 8006a3a:	4649      	mov	r1, r9
 8006a3c:	f7f9 fca0 	bl	8000380 <__aeabi_uldivmod>
 8006a40:	4602      	mov	r2, r0
 8006a42:	460b      	mov	r3, r1
 8006a44:	4613      	mov	r3, r2
 8006a46:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006a48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a4a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a4e:	d308      	bcc.n	8006a62 <UART_SetConfig+0x79a>
 8006a50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a56:	d204      	bcs.n	8006a62 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006a5e:	60da      	str	r2, [r3, #12]
 8006a60:	e17c      	b.n	8006d5c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006a62:	2301      	movs	r3, #1
 8006a64:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006a68:	e178      	b.n	8006d5c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	69db      	ldr	r3, [r3, #28]
 8006a6e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a72:	f040 80c5 	bne.w	8006c00 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006a76:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006a7a:	2b20      	cmp	r3, #32
 8006a7c:	dc48      	bgt.n	8006b10 <UART_SetConfig+0x848>
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	db7b      	blt.n	8006b7a <UART_SetConfig+0x8b2>
 8006a82:	2b20      	cmp	r3, #32
 8006a84:	d879      	bhi.n	8006b7a <UART_SetConfig+0x8b2>
 8006a86:	a201      	add	r2, pc, #4	@ (adr r2, 8006a8c <UART_SetConfig+0x7c4>)
 8006a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a8c:	08006b17 	.word	0x08006b17
 8006a90:	08006b1f 	.word	0x08006b1f
 8006a94:	08006b7b 	.word	0x08006b7b
 8006a98:	08006b7b 	.word	0x08006b7b
 8006a9c:	08006b27 	.word	0x08006b27
 8006aa0:	08006b7b 	.word	0x08006b7b
 8006aa4:	08006b7b 	.word	0x08006b7b
 8006aa8:	08006b7b 	.word	0x08006b7b
 8006aac:	08006b37 	.word	0x08006b37
 8006ab0:	08006b7b 	.word	0x08006b7b
 8006ab4:	08006b7b 	.word	0x08006b7b
 8006ab8:	08006b7b 	.word	0x08006b7b
 8006abc:	08006b7b 	.word	0x08006b7b
 8006ac0:	08006b7b 	.word	0x08006b7b
 8006ac4:	08006b7b 	.word	0x08006b7b
 8006ac8:	08006b7b 	.word	0x08006b7b
 8006acc:	08006b47 	.word	0x08006b47
 8006ad0:	08006b7b 	.word	0x08006b7b
 8006ad4:	08006b7b 	.word	0x08006b7b
 8006ad8:	08006b7b 	.word	0x08006b7b
 8006adc:	08006b7b 	.word	0x08006b7b
 8006ae0:	08006b7b 	.word	0x08006b7b
 8006ae4:	08006b7b 	.word	0x08006b7b
 8006ae8:	08006b7b 	.word	0x08006b7b
 8006aec:	08006b7b 	.word	0x08006b7b
 8006af0:	08006b7b 	.word	0x08006b7b
 8006af4:	08006b7b 	.word	0x08006b7b
 8006af8:	08006b7b 	.word	0x08006b7b
 8006afc:	08006b7b 	.word	0x08006b7b
 8006b00:	08006b7b 	.word	0x08006b7b
 8006b04:	08006b7b 	.word	0x08006b7b
 8006b08:	08006b7b 	.word	0x08006b7b
 8006b0c:	08006b6d 	.word	0x08006b6d
 8006b10:	2b40      	cmp	r3, #64	@ 0x40
 8006b12:	d02e      	beq.n	8006b72 <UART_SetConfig+0x8aa>
 8006b14:	e031      	b.n	8006b7a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b16:	f7fd f845 	bl	8003ba4 <HAL_RCC_GetPCLK1Freq>
 8006b1a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006b1c:	e033      	b.n	8006b86 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b1e:	f7fd f857 	bl	8003bd0 <HAL_RCC_GetPCLK2Freq>
 8006b22:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006b24:	e02f      	b.n	8006b86 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f7fe fa86 	bl	800503c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006b30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b34:	e027      	b.n	8006b86 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b36:	f107 0318 	add.w	r3, r7, #24
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f7fe fbd2 	bl	80052e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b44:	e01f      	b.n	8006b86 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b46:	4b2d      	ldr	r3, [pc, #180]	@ (8006bfc <UART_SetConfig+0x934>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f003 0320 	and.w	r3, r3, #32
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d009      	beq.n	8006b66 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006b52:	4b2a      	ldr	r3, [pc, #168]	@ (8006bfc <UART_SetConfig+0x934>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	08db      	lsrs	r3, r3, #3
 8006b58:	f003 0303 	and.w	r3, r3, #3
 8006b5c:	4a24      	ldr	r2, [pc, #144]	@ (8006bf0 <UART_SetConfig+0x928>)
 8006b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8006b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006b64:	e00f      	b.n	8006b86 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006b66:	4b22      	ldr	r3, [pc, #136]	@ (8006bf0 <UART_SetConfig+0x928>)
 8006b68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b6a:	e00c      	b.n	8006b86 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006b6c:	4b21      	ldr	r3, [pc, #132]	@ (8006bf4 <UART_SetConfig+0x92c>)
 8006b6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b70:	e009      	b.n	8006b86 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b78:	e005      	b.n	8006b86 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006b84:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	f000 80e7 	beq.w	8006d5c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b92:	4a19      	ldr	r2, [pc, #100]	@ (8006bf8 <UART_SetConfig+0x930>)
 8006b94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b98:	461a      	mov	r2, r3
 8006b9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ba0:	005a      	lsls	r2, r3, #1
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	085b      	lsrs	r3, r3, #1
 8006ba8:	441a      	add	r2, r3
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bb2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bb6:	2b0f      	cmp	r3, #15
 8006bb8:	d916      	bls.n	8006be8 <UART_SetConfig+0x920>
 8006bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bc0:	d212      	bcs.n	8006be8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	f023 030f 	bic.w	r3, r3, #15
 8006bca:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006bcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bce:	085b      	lsrs	r3, r3, #1
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	f003 0307 	and.w	r3, r3, #7
 8006bd6:	b29a      	uxth	r2, r3
 8006bd8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006be4:	60da      	str	r2, [r3, #12]
 8006be6:	e0b9      	b.n	8006d5c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006bee:	e0b5      	b.n	8006d5c <UART_SetConfig+0xa94>
 8006bf0:	03d09000 	.word	0x03d09000
 8006bf4:	003d0900 	.word	0x003d0900
 8006bf8:	08008084 	.word	0x08008084
 8006bfc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c00:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006c04:	2b20      	cmp	r3, #32
 8006c06:	dc49      	bgt.n	8006c9c <UART_SetConfig+0x9d4>
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	db7c      	blt.n	8006d06 <UART_SetConfig+0xa3e>
 8006c0c:	2b20      	cmp	r3, #32
 8006c0e:	d87a      	bhi.n	8006d06 <UART_SetConfig+0xa3e>
 8006c10:	a201      	add	r2, pc, #4	@ (adr r2, 8006c18 <UART_SetConfig+0x950>)
 8006c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c16:	bf00      	nop
 8006c18:	08006ca3 	.word	0x08006ca3
 8006c1c:	08006cab 	.word	0x08006cab
 8006c20:	08006d07 	.word	0x08006d07
 8006c24:	08006d07 	.word	0x08006d07
 8006c28:	08006cb3 	.word	0x08006cb3
 8006c2c:	08006d07 	.word	0x08006d07
 8006c30:	08006d07 	.word	0x08006d07
 8006c34:	08006d07 	.word	0x08006d07
 8006c38:	08006cc3 	.word	0x08006cc3
 8006c3c:	08006d07 	.word	0x08006d07
 8006c40:	08006d07 	.word	0x08006d07
 8006c44:	08006d07 	.word	0x08006d07
 8006c48:	08006d07 	.word	0x08006d07
 8006c4c:	08006d07 	.word	0x08006d07
 8006c50:	08006d07 	.word	0x08006d07
 8006c54:	08006d07 	.word	0x08006d07
 8006c58:	08006cd3 	.word	0x08006cd3
 8006c5c:	08006d07 	.word	0x08006d07
 8006c60:	08006d07 	.word	0x08006d07
 8006c64:	08006d07 	.word	0x08006d07
 8006c68:	08006d07 	.word	0x08006d07
 8006c6c:	08006d07 	.word	0x08006d07
 8006c70:	08006d07 	.word	0x08006d07
 8006c74:	08006d07 	.word	0x08006d07
 8006c78:	08006d07 	.word	0x08006d07
 8006c7c:	08006d07 	.word	0x08006d07
 8006c80:	08006d07 	.word	0x08006d07
 8006c84:	08006d07 	.word	0x08006d07
 8006c88:	08006d07 	.word	0x08006d07
 8006c8c:	08006d07 	.word	0x08006d07
 8006c90:	08006d07 	.word	0x08006d07
 8006c94:	08006d07 	.word	0x08006d07
 8006c98:	08006cf9 	.word	0x08006cf9
 8006c9c:	2b40      	cmp	r3, #64	@ 0x40
 8006c9e:	d02e      	beq.n	8006cfe <UART_SetConfig+0xa36>
 8006ca0:	e031      	b.n	8006d06 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ca2:	f7fc ff7f 	bl	8003ba4 <HAL_RCC_GetPCLK1Freq>
 8006ca6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006ca8:	e033      	b.n	8006d12 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006caa:	f7fc ff91 	bl	8003bd0 <HAL_RCC_GetPCLK2Freq>
 8006cae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006cb0:	e02f      	b.n	8006d12 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f7fe f9c0 	bl	800503c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cc0:	e027      	b.n	8006d12 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006cc2:	f107 0318 	add.w	r3, r7, #24
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f7fe fb0c 	bl	80052e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006ccc:	69fb      	ldr	r3, [r7, #28]
 8006cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cd0:	e01f      	b.n	8006d12 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006cd2:	4b2d      	ldr	r3, [pc, #180]	@ (8006d88 <UART_SetConfig+0xac0>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f003 0320 	and.w	r3, r3, #32
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d009      	beq.n	8006cf2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006cde:	4b2a      	ldr	r3, [pc, #168]	@ (8006d88 <UART_SetConfig+0xac0>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	08db      	lsrs	r3, r3, #3
 8006ce4:	f003 0303 	and.w	r3, r3, #3
 8006ce8:	4a28      	ldr	r2, [pc, #160]	@ (8006d8c <UART_SetConfig+0xac4>)
 8006cea:	fa22 f303 	lsr.w	r3, r2, r3
 8006cee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006cf0:	e00f      	b.n	8006d12 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006cf2:	4b26      	ldr	r3, [pc, #152]	@ (8006d8c <UART_SetConfig+0xac4>)
 8006cf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cf6:	e00c      	b.n	8006d12 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006cf8:	4b25      	ldr	r3, [pc, #148]	@ (8006d90 <UART_SetConfig+0xac8>)
 8006cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cfc:	e009      	b.n	8006d12 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cfe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d04:	e005      	b.n	8006d12 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006d06:	2300      	movs	r3, #0
 8006d08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006d10:	bf00      	nop
    }

    if (pclk != 0U)
 8006d12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d021      	beq.n	8006d5c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d1c:	4a1d      	ldr	r2, [pc, #116]	@ (8006d94 <UART_SetConfig+0xacc>)
 8006d1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d22:	461a      	mov	r2, r3
 8006d24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d26:	fbb3 f2f2 	udiv	r2, r3, r2
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	085b      	lsrs	r3, r3, #1
 8006d30:	441a      	add	r2, r3
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d3a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d3e:	2b0f      	cmp	r3, #15
 8006d40:	d909      	bls.n	8006d56 <UART_SetConfig+0xa8e>
 8006d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d48:	d205      	bcs.n	8006d56 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d4c:	b29a      	uxth	r2, r3
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	60da      	str	r2, [r3, #12]
 8006d54:	e002      	b.n	8006d5c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006d56:	2301      	movs	r3, #1
 8006d58:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	2201      	movs	r2, #1
 8006d68:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	2200      	movs	r2, #0
 8006d76:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006d78:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3748      	adds	r7, #72	@ 0x48
 8006d80:	46bd      	mov	sp, r7
 8006d82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d86:	bf00      	nop
 8006d88:	58024400 	.word	0x58024400
 8006d8c:	03d09000 	.word	0x03d09000
 8006d90:	003d0900 	.word	0x003d0900
 8006d94:	08008084 	.word	0x08008084

08006d98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b083      	sub	sp, #12
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006da4:	f003 0308 	and.w	r3, r3, #8
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d00a      	beq.n	8006dc2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	430a      	orrs	r2, r1
 8006dc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dc6:	f003 0301 	and.w	r3, r3, #1
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d00a      	beq.n	8006de4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	430a      	orrs	r2, r1
 8006de2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006de8:	f003 0302 	and.w	r3, r3, #2
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d00a      	beq.n	8006e06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	430a      	orrs	r2, r1
 8006e04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e0a:	f003 0304 	and.w	r3, r3, #4
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d00a      	beq.n	8006e28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	430a      	orrs	r2, r1
 8006e26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e2c:	f003 0310 	and.w	r3, r3, #16
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d00a      	beq.n	8006e4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	430a      	orrs	r2, r1
 8006e48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e4e:	f003 0320 	and.w	r3, r3, #32
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d00a      	beq.n	8006e6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	430a      	orrs	r2, r1
 8006e6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d01a      	beq.n	8006eae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	430a      	orrs	r2, r1
 8006e8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e96:	d10a      	bne.n	8006eae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	430a      	orrs	r2, r1
 8006eac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d00a      	beq.n	8006ed0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	430a      	orrs	r2, r1
 8006ece:	605a      	str	r2, [r3, #4]
  }
}
 8006ed0:	bf00      	nop
 8006ed2:	370c      	adds	r7, #12
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr

08006edc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b098      	sub	sp, #96	@ 0x60
 8006ee0:	af02      	add	r7, sp, #8
 8006ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006eec:	f7fb fa66 	bl	80023bc <HAL_GetTick>
 8006ef0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f003 0308 	and.w	r3, r3, #8
 8006efc:	2b08      	cmp	r3, #8
 8006efe:	d12f      	bne.n	8006f60 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f00:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006f04:	9300      	str	r3, [sp, #0]
 8006f06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 f88e 	bl	8007030 <UART_WaitOnFlagUntilTimeout>
 8006f14:	4603      	mov	r3, r0
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d022      	beq.n	8006f60 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f22:	e853 3f00 	ldrex	r3, [r3]
 8006f26:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006f28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f2e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	461a      	mov	r2, r3
 8006f36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f38:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f3a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f3c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006f3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f40:	e841 2300 	strex	r3, r2, [r1]
 8006f44:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d1e6      	bne.n	8006f1a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2220      	movs	r2, #32
 8006f50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2200      	movs	r2, #0
 8006f58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f5c:	2303      	movs	r3, #3
 8006f5e:	e063      	b.n	8007028 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f003 0304 	and.w	r3, r3, #4
 8006f6a:	2b04      	cmp	r3, #4
 8006f6c:	d149      	bne.n	8007002 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f6e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006f72:	9300      	str	r3, [sp, #0]
 8006f74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f76:	2200      	movs	r2, #0
 8006f78:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f000 f857 	bl	8007030 <UART_WaitOnFlagUntilTimeout>
 8006f82:	4603      	mov	r3, r0
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d03c      	beq.n	8007002 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f90:	e853 3f00 	ldrex	r3, [r3]
 8006f94:	623b      	str	r3, [r7, #32]
   return(result);
 8006f96:	6a3b      	ldr	r3, [r7, #32]
 8006f98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006fa6:	633b      	str	r3, [r7, #48]	@ 0x30
 8006fa8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006faa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006fac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006fae:	e841 2300 	strex	r3, r2, [r1]
 8006fb2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006fb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d1e6      	bne.n	8006f88 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	3308      	adds	r3, #8
 8006fc0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	e853 3f00 	ldrex	r3, [r3]
 8006fc8:	60fb      	str	r3, [r7, #12]
   return(result);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	f023 0301 	bic.w	r3, r3, #1
 8006fd0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	3308      	adds	r3, #8
 8006fd8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006fda:	61fa      	str	r2, [r7, #28]
 8006fdc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fde:	69b9      	ldr	r1, [r7, #24]
 8006fe0:	69fa      	ldr	r2, [r7, #28]
 8006fe2:	e841 2300 	strex	r3, r2, [r1]
 8006fe6:	617b      	str	r3, [r7, #20]
   return(result);
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d1e5      	bne.n	8006fba <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2220      	movs	r2, #32
 8006ff2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ffe:	2303      	movs	r3, #3
 8007000:	e012      	b.n	8007028 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2220      	movs	r2, #32
 8007006:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2220      	movs	r2, #32
 800700e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2200      	movs	r2, #0
 8007016:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2200      	movs	r2, #0
 8007022:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007026:	2300      	movs	r3, #0
}
 8007028:	4618      	mov	r0, r3
 800702a:	3758      	adds	r7, #88	@ 0x58
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}

08007030 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b084      	sub	sp, #16
 8007034:	af00      	add	r7, sp, #0
 8007036:	60f8      	str	r0, [r7, #12]
 8007038:	60b9      	str	r1, [r7, #8]
 800703a:	603b      	str	r3, [r7, #0]
 800703c:	4613      	mov	r3, r2
 800703e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007040:	e04f      	b.n	80070e2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007042:	69bb      	ldr	r3, [r7, #24]
 8007044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007048:	d04b      	beq.n	80070e2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800704a:	f7fb f9b7 	bl	80023bc <HAL_GetTick>
 800704e:	4602      	mov	r2, r0
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	1ad3      	subs	r3, r2, r3
 8007054:	69ba      	ldr	r2, [r7, #24]
 8007056:	429a      	cmp	r2, r3
 8007058:	d302      	bcc.n	8007060 <UART_WaitOnFlagUntilTimeout+0x30>
 800705a:	69bb      	ldr	r3, [r7, #24]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d101      	bne.n	8007064 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007060:	2303      	movs	r3, #3
 8007062:	e04e      	b.n	8007102 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f003 0304 	and.w	r3, r3, #4
 800706e:	2b00      	cmp	r3, #0
 8007070:	d037      	beq.n	80070e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	2b80      	cmp	r3, #128	@ 0x80
 8007076:	d034      	beq.n	80070e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	2b40      	cmp	r3, #64	@ 0x40
 800707c:	d031      	beq.n	80070e2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	69db      	ldr	r3, [r3, #28]
 8007084:	f003 0308 	and.w	r3, r3, #8
 8007088:	2b08      	cmp	r3, #8
 800708a:	d110      	bne.n	80070ae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	2208      	movs	r2, #8
 8007092:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007094:	68f8      	ldr	r0, [r7, #12]
 8007096:	f000 f839 	bl	800710c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2208      	movs	r2, #8
 800709e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2200      	movs	r2, #0
 80070a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	e029      	b.n	8007102 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	69db      	ldr	r3, [r3, #28]
 80070b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80070b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80070bc:	d111      	bne.n	80070e2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80070c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80070c8:	68f8      	ldr	r0, [r7, #12]
 80070ca:	f000 f81f 	bl	800710c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2220      	movs	r2, #32
 80070d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2200      	movs	r2, #0
 80070da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80070de:	2303      	movs	r3, #3
 80070e0:	e00f      	b.n	8007102 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	69da      	ldr	r2, [r3, #28]
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	4013      	ands	r3, r2
 80070ec:	68ba      	ldr	r2, [r7, #8]
 80070ee:	429a      	cmp	r2, r3
 80070f0:	bf0c      	ite	eq
 80070f2:	2301      	moveq	r3, #1
 80070f4:	2300      	movne	r3, #0
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	461a      	mov	r2, r3
 80070fa:	79fb      	ldrb	r3, [r7, #7]
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d0a0      	beq.n	8007042 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007100:	2300      	movs	r3, #0
}
 8007102:	4618      	mov	r0, r3
 8007104:	3710      	adds	r7, #16
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}
	...

0800710c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800710c:	b480      	push	{r7}
 800710e:	b095      	sub	sp, #84	@ 0x54
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800711a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800711c:	e853 3f00 	ldrex	r3, [r3]
 8007120:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007124:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007128:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	461a      	mov	r2, r3
 8007130:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007132:	643b      	str	r3, [r7, #64]	@ 0x40
 8007134:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007136:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007138:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800713a:	e841 2300 	strex	r3, r2, [r1]
 800713e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007142:	2b00      	cmp	r3, #0
 8007144:	d1e6      	bne.n	8007114 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	3308      	adds	r3, #8
 800714c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800714e:	6a3b      	ldr	r3, [r7, #32]
 8007150:	e853 3f00 	ldrex	r3, [r3]
 8007154:	61fb      	str	r3, [r7, #28]
   return(result);
 8007156:	69fa      	ldr	r2, [r7, #28]
 8007158:	4b1e      	ldr	r3, [pc, #120]	@ (80071d4 <UART_EndRxTransfer+0xc8>)
 800715a:	4013      	ands	r3, r2
 800715c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	3308      	adds	r3, #8
 8007164:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007166:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007168:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800716a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800716c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800716e:	e841 2300 	strex	r3, r2, [r1]
 8007172:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007176:	2b00      	cmp	r3, #0
 8007178:	d1e5      	bne.n	8007146 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800717e:	2b01      	cmp	r3, #1
 8007180:	d118      	bne.n	80071b4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	e853 3f00 	ldrex	r3, [r3]
 800718e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	f023 0310 	bic.w	r3, r3, #16
 8007196:	647b      	str	r3, [r7, #68]	@ 0x44
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	461a      	mov	r2, r3
 800719e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071a0:	61bb      	str	r3, [r7, #24]
 80071a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a4:	6979      	ldr	r1, [r7, #20]
 80071a6:	69ba      	ldr	r2, [r7, #24]
 80071a8:	e841 2300 	strex	r3, r2, [r1]
 80071ac:	613b      	str	r3, [r7, #16]
   return(result);
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d1e6      	bne.n	8007182 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2220      	movs	r2, #32
 80071b8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2200      	movs	r2, #0
 80071c0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80071c8:	bf00      	nop
 80071ca:	3754      	adds	r7, #84	@ 0x54
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr
 80071d4:	effffffe 	.word	0xeffffffe

080071d8 <std>:
 80071d8:	2300      	movs	r3, #0
 80071da:	b510      	push	{r4, lr}
 80071dc:	4604      	mov	r4, r0
 80071de:	e9c0 3300 	strd	r3, r3, [r0]
 80071e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80071e6:	6083      	str	r3, [r0, #8]
 80071e8:	8181      	strh	r1, [r0, #12]
 80071ea:	6643      	str	r3, [r0, #100]	@ 0x64
 80071ec:	81c2      	strh	r2, [r0, #14]
 80071ee:	6183      	str	r3, [r0, #24]
 80071f0:	4619      	mov	r1, r3
 80071f2:	2208      	movs	r2, #8
 80071f4:	305c      	adds	r0, #92	@ 0x5c
 80071f6:	f000 f99b 	bl	8007530 <memset>
 80071fa:	4b0d      	ldr	r3, [pc, #52]	@ (8007230 <std+0x58>)
 80071fc:	6263      	str	r3, [r4, #36]	@ 0x24
 80071fe:	4b0d      	ldr	r3, [pc, #52]	@ (8007234 <std+0x5c>)
 8007200:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007202:	4b0d      	ldr	r3, [pc, #52]	@ (8007238 <std+0x60>)
 8007204:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007206:	4b0d      	ldr	r3, [pc, #52]	@ (800723c <std+0x64>)
 8007208:	6323      	str	r3, [r4, #48]	@ 0x30
 800720a:	4b0d      	ldr	r3, [pc, #52]	@ (8007240 <std+0x68>)
 800720c:	6224      	str	r4, [r4, #32]
 800720e:	429c      	cmp	r4, r3
 8007210:	d006      	beq.n	8007220 <std+0x48>
 8007212:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007216:	4294      	cmp	r4, r2
 8007218:	d002      	beq.n	8007220 <std+0x48>
 800721a:	33d0      	adds	r3, #208	@ 0xd0
 800721c:	429c      	cmp	r4, r3
 800721e:	d105      	bne.n	800722c <std+0x54>
 8007220:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007228:	f000 b9fa 	b.w	8007620 <__retarget_lock_init_recursive>
 800722c:	bd10      	pop	{r4, pc}
 800722e:	bf00      	nop
 8007230:	08007381 	.word	0x08007381
 8007234:	080073a3 	.word	0x080073a3
 8007238:	080073db 	.word	0x080073db
 800723c:	080073ff 	.word	0x080073ff
 8007240:	24000238 	.word	0x24000238

08007244 <stdio_exit_handler>:
 8007244:	4a02      	ldr	r2, [pc, #8]	@ (8007250 <stdio_exit_handler+0xc>)
 8007246:	4903      	ldr	r1, [pc, #12]	@ (8007254 <stdio_exit_handler+0x10>)
 8007248:	4803      	ldr	r0, [pc, #12]	@ (8007258 <stdio_exit_handler+0x14>)
 800724a:	f000 b869 	b.w	8007320 <_fwalk_sglue>
 800724e:	bf00      	nop
 8007250:	2400002c 	.word	0x2400002c
 8007254:	08007ebd 	.word	0x08007ebd
 8007258:	2400003c 	.word	0x2400003c

0800725c <cleanup_stdio>:
 800725c:	6841      	ldr	r1, [r0, #4]
 800725e:	4b0c      	ldr	r3, [pc, #48]	@ (8007290 <cleanup_stdio+0x34>)
 8007260:	4299      	cmp	r1, r3
 8007262:	b510      	push	{r4, lr}
 8007264:	4604      	mov	r4, r0
 8007266:	d001      	beq.n	800726c <cleanup_stdio+0x10>
 8007268:	f000 fe28 	bl	8007ebc <_fflush_r>
 800726c:	68a1      	ldr	r1, [r4, #8]
 800726e:	4b09      	ldr	r3, [pc, #36]	@ (8007294 <cleanup_stdio+0x38>)
 8007270:	4299      	cmp	r1, r3
 8007272:	d002      	beq.n	800727a <cleanup_stdio+0x1e>
 8007274:	4620      	mov	r0, r4
 8007276:	f000 fe21 	bl	8007ebc <_fflush_r>
 800727a:	68e1      	ldr	r1, [r4, #12]
 800727c:	4b06      	ldr	r3, [pc, #24]	@ (8007298 <cleanup_stdio+0x3c>)
 800727e:	4299      	cmp	r1, r3
 8007280:	d004      	beq.n	800728c <cleanup_stdio+0x30>
 8007282:	4620      	mov	r0, r4
 8007284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007288:	f000 be18 	b.w	8007ebc <_fflush_r>
 800728c:	bd10      	pop	{r4, pc}
 800728e:	bf00      	nop
 8007290:	24000238 	.word	0x24000238
 8007294:	240002a0 	.word	0x240002a0
 8007298:	24000308 	.word	0x24000308

0800729c <global_stdio_init.part.0>:
 800729c:	b510      	push	{r4, lr}
 800729e:	4b0b      	ldr	r3, [pc, #44]	@ (80072cc <global_stdio_init.part.0+0x30>)
 80072a0:	4c0b      	ldr	r4, [pc, #44]	@ (80072d0 <global_stdio_init.part.0+0x34>)
 80072a2:	4a0c      	ldr	r2, [pc, #48]	@ (80072d4 <global_stdio_init.part.0+0x38>)
 80072a4:	601a      	str	r2, [r3, #0]
 80072a6:	4620      	mov	r0, r4
 80072a8:	2200      	movs	r2, #0
 80072aa:	2104      	movs	r1, #4
 80072ac:	f7ff ff94 	bl	80071d8 <std>
 80072b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80072b4:	2201      	movs	r2, #1
 80072b6:	2109      	movs	r1, #9
 80072b8:	f7ff ff8e 	bl	80071d8 <std>
 80072bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80072c0:	2202      	movs	r2, #2
 80072c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072c6:	2112      	movs	r1, #18
 80072c8:	f7ff bf86 	b.w	80071d8 <std>
 80072cc:	24000370 	.word	0x24000370
 80072d0:	24000238 	.word	0x24000238
 80072d4:	08007245 	.word	0x08007245

080072d8 <__sfp_lock_acquire>:
 80072d8:	4801      	ldr	r0, [pc, #4]	@ (80072e0 <__sfp_lock_acquire+0x8>)
 80072da:	f000 b9a2 	b.w	8007622 <__retarget_lock_acquire_recursive>
 80072de:	bf00      	nop
 80072e0:	24000379 	.word	0x24000379

080072e4 <__sfp_lock_release>:
 80072e4:	4801      	ldr	r0, [pc, #4]	@ (80072ec <__sfp_lock_release+0x8>)
 80072e6:	f000 b99d 	b.w	8007624 <__retarget_lock_release_recursive>
 80072ea:	bf00      	nop
 80072ec:	24000379 	.word	0x24000379

080072f0 <__sinit>:
 80072f0:	b510      	push	{r4, lr}
 80072f2:	4604      	mov	r4, r0
 80072f4:	f7ff fff0 	bl	80072d8 <__sfp_lock_acquire>
 80072f8:	6a23      	ldr	r3, [r4, #32]
 80072fa:	b11b      	cbz	r3, 8007304 <__sinit+0x14>
 80072fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007300:	f7ff bff0 	b.w	80072e4 <__sfp_lock_release>
 8007304:	4b04      	ldr	r3, [pc, #16]	@ (8007318 <__sinit+0x28>)
 8007306:	6223      	str	r3, [r4, #32]
 8007308:	4b04      	ldr	r3, [pc, #16]	@ (800731c <__sinit+0x2c>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d1f5      	bne.n	80072fc <__sinit+0xc>
 8007310:	f7ff ffc4 	bl	800729c <global_stdio_init.part.0>
 8007314:	e7f2      	b.n	80072fc <__sinit+0xc>
 8007316:	bf00      	nop
 8007318:	0800725d 	.word	0x0800725d
 800731c:	24000370 	.word	0x24000370

08007320 <_fwalk_sglue>:
 8007320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007324:	4607      	mov	r7, r0
 8007326:	4688      	mov	r8, r1
 8007328:	4614      	mov	r4, r2
 800732a:	2600      	movs	r6, #0
 800732c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007330:	f1b9 0901 	subs.w	r9, r9, #1
 8007334:	d505      	bpl.n	8007342 <_fwalk_sglue+0x22>
 8007336:	6824      	ldr	r4, [r4, #0]
 8007338:	2c00      	cmp	r4, #0
 800733a:	d1f7      	bne.n	800732c <_fwalk_sglue+0xc>
 800733c:	4630      	mov	r0, r6
 800733e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007342:	89ab      	ldrh	r3, [r5, #12]
 8007344:	2b01      	cmp	r3, #1
 8007346:	d907      	bls.n	8007358 <_fwalk_sglue+0x38>
 8007348:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800734c:	3301      	adds	r3, #1
 800734e:	d003      	beq.n	8007358 <_fwalk_sglue+0x38>
 8007350:	4629      	mov	r1, r5
 8007352:	4638      	mov	r0, r7
 8007354:	47c0      	blx	r8
 8007356:	4306      	orrs	r6, r0
 8007358:	3568      	adds	r5, #104	@ 0x68
 800735a:	e7e9      	b.n	8007330 <_fwalk_sglue+0x10>

0800735c <iprintf>:
 800735c:	b40f      	push	{r0, r1, r2, r3}
 800735e:	b507      	push	{r0, r1, r2, lr}
 8007360:	4906      	ldr	r1, [pc, #24]	@ (800737c <iprintf+0x20>)
 8007362:	ab04      	add	r3, sp, #16
 8007364:	6808      	ldr	r0, [r1, #0]
 8007366:	f853 2b04 	ldr.w	r2, [r3], #4
 800736a:	6881      	ldr	r1, [r0, #8]
 800736c:	9301      	str	r3, [sp, #4]
 800736e:	f000 fa7d 	bl	800786c <_vfiprintf_r>
 8007372:	b003      	add	sp, #12
 8007374:	f85d eb04 	ldr.w	lr, [sp], #4
 8007378:	b004      	add	sp, #16
 800737a:	4770      	bx	lr
 800737c:	24000038 	.word	0x24000038

08007380 <__sread>:
 8007380:	b510      	push	{r4, lr}
 8007382:	460c      	mov	r4, r1
 8007384:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007388:	f000 f8fc 	bl	8007584 <_read_r>
 800738c:	2800      	cmp	r0, #0
 800738e:	bfab      	itete	ge
 8007390:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007392:	89a3      	ldrhlt	r3, [r4, #12]
 8007394:	181b      	addge	r3, r3, r0
 8007396:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800739a:	bfac      	ite	ge
 800739c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800739e:	81a3      	strhlt	r3, [r4, #12]
 80073a0:	bd10      	pop	{r4, pc}

080073a2 <__swrite>:
 80073a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073a6:	461f      	mov	r7, r3
 80073a8:	898b      	ldrh	r3, [r1, #12]
 80073aa:	05db      	lsls	r3, r3, #23
 80073ac:	4605      	mov	r5, r0
 80073ae:	460c      	mov	r4, r1
 80073b0:	4616      	mov	r6, r2
 80073b2:	d505      	bpl.n	80073c0 <__swrite+0x1e>
 80073b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073b8:	2302      	movs	r3, #2
 80073ba:	2200      	movs	r2, #0
 80073bc:	f000 f8d0 	bl	8007560 <_lseek_r>
 80073c0:	89a3      	ldrh	r3, [r4, #12]
 80073c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80073ca:	81a3      	strh	r3, [r4, #12]
 80073cc:	4632      	mov	r2, r6
 80073ce:	463b      	mov	r3, r7
 80073d0:	4628      	mov	r0, r5
 80073d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073d6:	f000 b8e7 	b.w	80075a8 <_write_r>

080073da <__sseek>:
 80073da:	b510      	push	{r4, lr}
 80073dc:	460c      	mov	r4, r1
 80073de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073e2:	f000 f8bd 	bl	8007560 <_lseek_r>
 80073e6:	1c43      	adds	r3, r0, #1
 80073e8:	89a3      	ldrh	r3, [r4, #12]
 80073ea:	bf15      	itete	ne
 80073ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 80073ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80073f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80073f6:	81a3      	strheq	r3, [r4, #12]
 80073f8:	bf18      	it	ne
 80073fa:	81a3      	strhne	r3, [r4, #12]
 80073fc:	bd10      	pop	{r4, pc}

080073fe <__sclose>:
 80073fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007402:	f000 b89d 	b.w	8007540 <_close_r>

08007406 <__swbuf_r>:
 8007406:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007408:	460e      	mov	r6, r1
 800740a:	4614      	mov	r4, r2
 800740c:	4605      	mov	r5, r0
 800740e:	b118      	cbz	r0, 8007418 <__swbuf_r+0x12>
 8007410:	6a03      	ldr	r3, [r0, #32]
 8007412:	b90b      	cbnz	r3, 8007418 <__swbuf_r+0x12>
 8007414:	f7ff ff6c 	bl	80072f0 <__sinit>
 8007418:	69a3      	ldr	r3, [r4, #24]
 800741a:	60a3      	str	r3, [r4, #8]
 800741c:	89a3      	ldrh	r3, [r4, #12]
 800741e:	071a      	lsls	r2, r3, #28
 8007420:	d501      	bpl.n	8007426 <__swbuf_r+0x20>
 8007422:	6923      	ldr	r3, [r4, #16]
 8007424:	b943      	cbnz	r3, 8007438 <__swbuf_r+0x32>
 8007426:	4621      	mov	r1, r4
 8007428:	4628      	mov	r0, r5
 800742a:	f000 f82b 	bl	8007484 <__swsetup_r>
 800742e:	b118      	cbz	r0, 8007438 <__swbuf_r+0x32>
 8007430:	f04f 37ff 	mov.w	r7, #4294967295
 8007434:	4638      	mov	r0, r7
 8007436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007438:	6823      	ldr	r3, [r4, #0]
 800743a:	6922      	ldr	r2, [r4, #16]
 800743c:	1a98      	subs	r0, r3, r2
 800743e:	6963      	ldr	r3, [r4, #20]
 8007440:	b2f6      	uxtb	r6, r6
 8007442:	4283      	cmp	r3, r0
 8007444:	4637      	mov	r7, r6
 8007446:	dc05      	bgt.n	8007454 <__swbuf_r+0x4e>
 8007448:	4621      	mov	r1, r4
 800744a:	4628      	mov	r0, r5
 800744c:	f000 fd36 	bl	8007ebc <_fflush_r>
 8007450:	2800      	cmp	r0, #0
 8007452:	d1ed      	bne.n	8007430 <__swbuf_r+0x2a>
 8007454:	68a3      	ldr	r3, [r4, #8]
 8007456:	3b01      	subs	r3, #1
 8007458:	60a3      	str	r3, [r4, #8]
 800745a:	6823      	ldr	r3, [r4, #0]
 800745c:	1c5a      	adds	r2, r3, #1
 800745e:	6022      	str	r2, [r4, #0]
 8007460:	701e      	strb	r6, [r3, #0]
 8007462:	6962      	ldr	r2, [r4, #20]
 8007464:	1c43      	adds	r3, r0, #1
 8007466:	429a      	cmp	r2, r3
 8007468:	d004      	beq.n	8007474 <__swbuf_r+0x6e>
 800746a:	89a3      	ldrh	r3, [r4, #12]
 800746c:	07db      	lsls	r3, r3, #31
 800746e:	d5e1      	bpl.n	8007434 <__swbuf_r+0x2e>
 8007470:	2e0a      	cmp	r6, #10
 8007472:	d1df      	bne.n	8007434 <__swbuf_r+0x2e>
 8007474:	4621      	mov	r1, r4
 8007476:	4628      	mov	r0, r5
 8007478:	f000 fd20 	bl	8007ebc <_fflush_r>
 800747c:	2800      	cmp	r0, #0
 800747e:	d0d9      	beq.n	8007434 <__swbuf_r+0x2e>
 8007480:	e7d6      	b.n	8007430 <__swbuf_r+0x2a>
	...

08007484 <__swsetup_r>:
 8007484:	b538      	push	{r3, r4, r5, lr}
 8007486:	4b29      	ldr	r3, [pc, #164]	@ (800752c <__swsetup_r+0xa8>)
 8007488:	4605      	mov	r5, r0
 800748a:	6818      	ldr	r0, [r3, #0]
 800748c:	460c      	mov	r4, r1
 800748e:	b118      	cbz	r0, 8007498 <__swsetup_r+0x14>
 8007490:	6a03      	ldr	r3, [r0, #32]
 8007492:	b90b      	cbnz	r3, 8007498 <__swsetup_r+0x14>
 8007494:	f7ff ff2c 	bl	80072f0 <__sinit>
 8007498:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800749c:	0719      	lsls	r1, r3, #28
 800749e:	d422      	bmi.n	80074e6 <__swsetup_r+0x62>
 80074a0:	06da      	lsls	r2, r3, #27
 80074a2:	d407      	bmi.n	80074b4 <__swsetup_r+0x30>
 80074a4:	2209      	movs	r2, #9
 80074a6:	602a      	str	r2, [r5, #0]
 80074a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80074ac:	81a3      	strh	r3, [r4, #12]
 80074ae:	f04f 30ff 	mov.w	r0, #4294967295
 80074b2:	e033      	b.n	800751c <__swsetup_r+0x98>
 80074b4:	0758      	lsls	r0, r3, #29
 80074b6:	d512      	bpl.n	80074de <__swsetup_r+0x5a>
 80074b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80074ba:	b141      	cbz	r1, 80074ce <__swsetup_r+0x4a>
 80074bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80074c0:	4299      	cmp	r1, r3
 80074c2:	d002      	beq.n	80074ca <__swsetup_r+0x46>
 80074c4:	4628      	mov	r0, r5
 80074c6:	f000 f8af 	bl	8007628 <_free_r>
 80074ca:	2300      	movs	r3, #0
 80074cc:	6363      	str	r3, [r4, #52]	@ 0x34
 80074ce:	89a3      	ldrh	r3, [r4, #12]
 80074d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80074d4:	81a3      	strh	r3, [r4, #12]
 80074d6:	2300      	movs	r3, #0
 80074d8:	6063      	str	r3, [r4, #4]
 80074da:	6923      	ldr	r3, [r4, #16]
 80074dc:	6023      	str	r3, [r4, #0]
 80074de:	89a3      	ldrh	r3, [r4, #12]
 80074e0:	f043 0308 	orr.w	r3, r3, #8
 80074e4:	81a3      	strh	r3, [r4, #12]
 80074e6:	6923      	ldr	r3, [r4, #16]
 80074e8:	b94b      	cbnz	r3, 80074fe <__swsetup_r+0x7a>
 80074ea:	89a3      	ldrh	r3, [r4, #12]
 80074ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80074f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074f4:	d003      	beq.n	80074fe <__swsetup_r+0x7a>
 80074f6:	4621      	mov	r1, r4
 80074f8:	4628      	mov	r0, r5
 80074fa:	f000 fd2d 	bl	8007f58 <__smakebuf_r>
 80074fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007502:	f013 0201 	ands.w	r2, r3, #1
 8007506:	d00a      	beq.n	800751e <__swsetup_r+0x9a>
 8007508:	2200      	movs	r2, #0
 800750a:	60a2      	str	r2, [r4, #8]
 800750c:	6962      	ldr	r2, [r4, #20]
 800750e:	4252      	negs	r2, r2
 8007510:	61a2      	str	r2, [r4, #24]
 8007512:	6922      	ldr	r2, [r4, #16]
 8007514:	b942      	cbnz	r2, 8007528 <__swsetup_r+0xa4>
 8007516:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800751a:	d1c5      	bne.n	80074a8 <__swsetup_r+0x24>
 800751c:	bd38      	pop	{r3, r4, r5, pc}
 800751e:	0799      	lsls	r1, r3, #30
 8007520:	bf58      	it	pl
 8007522:	6962      	ldrpl	r2, [r4, #20]
 8007524:	60a2      	str	r2, [r4, #8]
 8007526:	e7f4      	b.n	8007512 <__swsetup_r+0x8e>
 8007528:	2000      	movs	r0, #0
 800752a:	e7f7      	b.n	800751c <__swsetup_r+0x98>
 800752c:	24000038 	.word	0x24000038

08007530 <memset>:
 8007530:	4402      	add	r2, r0
 8007532:	4603      	mov	r3, r0
 8007534:	4293      	cmp	r3, r2
 8007536:	d100      	bne.n	800753a <memset+0xa>
 8007538:	4770      	bx	lr
 800753a:	f803 1b01 	strb.w	r1, [r3], #1
 800753e:	e7f9      	b.n	8007534 <memset+0x4>

08007540 <_close_r>:
 8007540:	b538      	push	{r3, r4, r5, lr}
 8007542:	4d06      	ldr	r5, [pc, #24]	@ (800755c <_close_r+0x1c>)
 8007544:	2300      	movs	r3, #0
 8007546:	4604      	mov	r4, r0
 8007548:	4608      	mov	r0, r1
 800754a:	602b      	str	r3, [r5, #0]
 800754c:	f7f9 fd29 	bl	8000fa2 <_close>
 8007550:	1c43      	adds	r3, r0, #1
 8007552:	d102      	bne.n	800755a <_close_r+0x1a>
 8007554:	682b      	ldr	r3, [r5, #0]
 8007556:	b103      	cbz	r3, 800755a <_close_r+0x1a>
 8007558:	6023      	str	r3, [r4, #0]
 800755a:	bd38      	pop	{r3, r4, r5, pc}
 800755c:	24000374 	.word	0x24000374

08007560 <_lseek_r>:
 8007560:	b538      	push	{r3, r4, r5, lr}
 8007562:	4d07      	ldr	r5, [pc, #28]	@ (8007580 <_lseek_r+0x20>)
 8007564:	4604      	mov	r4, r0
 8007566:	4608      	mov	r0, r1
 8007568:	4611      	mov	r1, r2
 800756a:	2200      	movs	r2, #0
 800756c:	602a      	str	r2, [r5, #0]
 800756e:	461a      	mov	r2, r3
 8007570:	f7f9 fd3e 	bl	8000ff0 <_lseek>
 8007574:	1c43      	adds	r3, r0, #1
 8007576:	d102      	bne.n	800757e <_lseek_r+0x1e>
 8007578:	682b      	ldr	r3, [r5, #0]
 800757a:	b103      	cbz	r3, 800757e <_lseek_r+0x1e>
 800757c:	6023      	str	r3, [r4, #0]
 800757e:	bd38      	pop	{r3, r4, r5, pc}
 8007580:	24000374 	.word	0x24000374

08007584 <_read_r>:
 8007584:	b538      	push	{r3, r4, r5, lr}
 8007586:	4d07      	ldr	r5, [pc, #28]	@ (80075a4 <_read_r+0x20>)
 8007588:	4604      	mov	r4, r0
 800758a:	4608      	mov	r0, r1
 800758c:	4611      	mov	r1, r2
 800758e:	2200      	movs	r2, #0
 8007590:	602a      	str	r2, [r5, #0]
 8007592:	461a      	mov	r2, r3
 8007594:	f7f9 fccc 	bl	8000f30 <_read>
 8007598:	1c43      	adds	r3, r0, #1
 800759a:	d102      	bne.n	80075a2 <_read_r+0x1e>
 800759c:	682b      	ldr	r3, [r5, #0]
 800759e:	b103      	cbz	r3, 80075a2 <_read_r+0x1e>
 80075a0:	6023      	str	r3, [r4, #0]
 80075a2:	bd38      	pop	{r3, r4, r5, pc}
 80075a4:	24000374 	.word	0x24000374

080075a8 <_write_r>:
 80075a8:	b538      	push	{r3, r4, r5, lr}
 80075aa:	4d07      	ldr	r5, [pc, #28]	@ (80075c8 <_write_r+0x20>)
 80075ac:	4604      	mov	r4, r0
 80075ae:	4608      	mov	r0, r1
 80075b0:	4611      	mov	r1, r2
 80075b2:	2200      	movs	r2, #0
 80075b4:	602a      	str	r2, [r5, #0]
 80075b6:	461a      	mov	r2, r3
 80075b8:	f7f9 fcd7 	bl	8000f6a <_write>
 80075bc:	1c43      	adds	r3, r0, #1
 80075be:	d102      	bne.n	80075c6 <_write_r+0x1e>
 80075c0:	682b      	ldr	r3, [r5, #0]
 80075c2:	b103      	cbz	r3, 80075c6 <_write_r+0x1e>
 80075c4:	6023      	str	r3, [r4, #0]
 80075c6:	bd38      	pop	{r3, r4, r5, pc}
 80075c8:	24000374 	.word	0x24000374

080075cc <__errno>:
 80075cc:	4b01      	ldr	r3, [pc, #4]	@ (80075d4 <__errno+0x8>)
 80075ce:	6818      	ldr	r0, [r3, #0]
 80075d0:	4770      	bx	lr
 80075d2:	bf00      	nop
 80075d4:	24000038 	.word	0x24000038

080075d8 <__libc_init_array>:
 80075d8:	b570      	push	{r4, r5, r6, lr}
 80075da:	4d0d      	ldr	r5, [pc, #52]	@ (8007610 <__libc_init_array+0x38>)
 80075dc:	4c0d      	ldr	r4, [pc, #52]	@ (8007614 <__libc_init_array+0x3c>)
 80075de:	1b64      	subs	r4, r4, r5
 80075e0:	10a4      	asrs	r4, r4, #2
 80075e2:	2600      	movs	r6, #0
 80075e4:	42a6      	cmp	r6, r4
 80075e6:	d109      	bne.n	80075fc <__libc_init_array+0x24>
 80075e8:	4d0b      	ldr	r5, [pc, #44]	@ (8007618 <__libc_init_array+0x40>)
 80075ea:	4c0c      	ldr	r4, [pc, #48]	@ (800761c <__libc_init_array+0x44>)
 80075ec:	f000 fd22 	bl	8008034 <_init>
 80075f0:	1b64      	subs	r4, r4, r5
 80075f2:	10a4      	asrs	r4, r4, #2
 80075f4:	2600      	movs	r6, #0
 80075f6:	42a6      	cmp	r6, r4
 80075f8:	d105      	bne.n	8007606 <__libc_init_array+0x2e>
 80075fa:	bd70      	pop	{r4, r5, r6, pc}
 80075fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007600:	4798      	blx	r3
 8007602:	3601      	adds	r6, #1
 8007604:	e7ee      	b.n	80075e4 <__libc_init_array+0xc>
 8007606:	f855 3b04 	ldr.w	r3, [r5], #4
 800760a:	4798      	blx	r3
 800760c:	3601      	adds	r6, #1
 800760e:	e7f2      	b.n	80075f6 <__libc_init_array+0x1e>
 8007610:	080080d8 	.word	0x080080d8
 8007614:	080080d8 	.word	0x080080d8
 8007618:	080080d8 	.word	0x080080d8
 800761c:	080080dc 	.word	0x080080dc

08007620 <__retarget_lock_init_recursive>:
 8007620:	4770      	bx	lr

08007622 <__retarget_lock_acquire_recursive>:
 8007622:	4770      	bx	lr

08007624 <__retarget_lock_release_recursive>:
 8007624:	4770      	bx	lr
	...

08007628 <_free_r>:
 8007628:	b538      	push	{r3, r4, r5, lr}
 800762a:	4605      	mov	r5, r0
 800762c:	2900      	cmp	r1, #0
 800762e:	d041      	beq.n	80076b4 <_free_r+0x8c>
 8007630:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007634:	1f0c      	subs	r4, r1, #4
 8007636:	2b00      	cmp	r3, #0
 8007638:	bfb8      	it	lt
 800763a:	18e4      	addlt	r4, r4, r3
 800763c:	f000 f8e0 	bl	8007800 <__malloc_lock>
 8007640:	4a1d      	ldr	r2, [pc, #116]	@ (80076b8 <_free_r+0x90>)
 8007642:	6813      	ldr	r3, [r2, #0]
 8007644:	b933      	cbnz	r3, 8007654 <_free_r+0x2c>
 8007646:	6063      	str	r3, [r4, #4]
 8007648:	6014      	str	r4, [r2, #0]
 800764a:	4628      	mov	r0, r5
 800764c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007650:	f000 b8dc 	b.w	800780c <__malloc_unlock>
 8007654:	42a3      	cmp	r3, r4
 8007656:	d908      	bls.n	800766a <_free_r+0x42>
 8007658:	6820      	ldr	r0, [r4, #0]
 800765a:	1821      	adds	r1, r4, r0
 800765c:	428b      	cmp	r3, r1
 800765e:	bf01      	itttt	eq
 8007660:	6819      	ldreq	r1, [r3, #0]
 8007662:	685b      	ldreq	r3, [r3, #4]
 8007664:	1809      	addeq	r1, r1, r0
 8007666:	6021      	streq	r1, [r4, #0]
 8007668:	e7ed      	b.n	8007646 <_free_r+0x1e>
 800766a:	461a      	mov	r2, r3
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	b10b      	cbz	r3, 8007674 <_free_r+0x4c>
 8007670:	42a3      	cmp	r3, r4
 8007672:	d9fa      	bls.n	800766a <_free_r+0x42>
 8007674:	6811      	ldr	r1, [r2, #0]
 8007676:	1850      	adds	r0, r2, r1
 8007678:	42a0      	cmp	r0, r4
 800767a:	d10b      	bne.n	8007694 <_free_r+0x6c>
 800767c:	6820      	ldr	r0, [r4, #0]
 800767e:	4401      	add	r1, r0
 8007680:	1850      	adds	r0, r2, r1
 8007682:	4283      	cmp	r3, r0
 8007684:	6011      	str	r1, [r2, #0]
 8007686:	d1e0      	bne.n	800764a <_free_r+0x22>
 8007688:	6818      	ldr	r0, [r3, #0]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	6053      	str	r3, [r2, #4]
 800768e:	4408      	add	r0, r1
 8007690:	6010      	str	r0, [r2, #0]
 8007692:	e7da      	b.n	800764a <_free_r+0x22>
 8007694:	d902      	bls.n	800769c <_free_r+0x74>
 8007696:	230c      	movs	r3, #12
 8007698:	602b      	str	r3, [r5, #0]
 800769a:	e7d6      	b.n	800764a <_free_r+0x22>
 800769c:	6820      	ldr	r0, [r4, #0]
 800769e:	1821      	adds	r1, r4, r0
 80076a0:	428b      	cmp	r3, r1
 80076a2:	bf04      	itt	eq
 80076a4:	6819      	ldreq	r1, [r3, #0]
 80076a6:	685b      	ldreq	r3, [r3, #4]
 80076a8:	6063      	str	r3, [r4, #4]
 80076aa:	bf04      	itt	eq
 80076ac:	1809      	addeq	r1, r1, r0
 80076ae:	6021      	streq	r1, [r4, #0]
 80076b0:	6054      	str	r4, [r2, #4]
 80076b2:	e7ca      	b.n	800764a <_free_r+0x22>
 80076b4:	bd38      	pop	{r3, r4, r5, pc}
 80076b6:	bf00      	nop
 80076b8:	24000380 	.word	0x24000380

080076bc <sbrk_aligned>:
 80076bc:	b570      	push	{r4, r5, r6, lr}
 80076be:	4e0f      	ldr	r6, [pc, #60]	@ (80076fc <sbrk_aligned+0x40>)
 80076c0:	460c      	mov	r4, r1
 80076c2:	6831      	ldr	r1, [r6, #0]
 80076c4:	4605      	mov	r5, r0
 80076c6:	b911      	cbnz	r1, 80076ce <sbrk_aligned+0x12>
 80076c8:	f000 fca4 	bl	8008014 <_sbrk_r>
 80076cc:	6030      	str	r0, [r6, #0]
 80076ce:	4621      	mov	r1, r4
 80076d0:	4628      	mov	r0, r5
 80076d2:	f000 fc9f 	bl	8008014 <_sbrk_r>
 80076d6:	1c43      	adds	r3, r0, #1
 80076d8:	d103      	bne.n	80076e2 <sbrk_aligned+0x26>
 80076da:	f04f 34ff 	mov.w	r4, #4294967295
 80076de:	4620      	mov	r0, r4
 80076e0:	bd70      	pop	{r4, r5, r6, pc}
 80076e2:	1cc4      	adds	r4, r0, #3
 80076e4:	f024 0403 	bic.w	r4, r4, #3
 80076e8:	42a0      	cmp	r0, r4
 80076ea:	d0f8      	beq.n	80076de <sbrk_aligned+0x22>
 80076ec:	1a21      	subs	r1, r4, r0
 80076ee:	4628      	mov	r0, r5
 80076f0:	f000 fc90 	bl	8008014 <_sbrk_r>
 80076f4:	3001      	adds	r0, #1
 80076f6:	d1f2      	bne.n	80076de <sbrk_aligned+0x22>
 80076f8:	e7ef      	b.n	80076da <sbrk_aligned+0x1e>
 80076fa:	bf00      	nop
 80076fc:	2400037c 	.word	0x2400037c

08007700 <_malloc_r>:
 8007700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007704:	1ccd      	adds	r5, r1, #3
 8007706:	f025 0503 	bic.w	r5, r5, #3
 800770a:	3508      	adds	r5, #8
 800770c:	2d0c      	cmp	r5, #12
 800770e:	bf38      	it	cc
 8007710:	250c      	movcc	r5, #12
 8007712:	2d00      	cmp	r5, #0
 8007714:	4606      	mov	r6, r0
 8007716:	db01      	blt.n	800771c <_malloc_r+0x1c>
 8007718:	42a9      	cmp	r1, r5
 800771a:	d904      	bls.n	8007726 <_malloc_r+0x26>
 800771c:	230c      	movs	r3, #12
 800771e:	6033      	str	r3, [r6, #0]
 8007720:	2000      	movs	r0, #0
 8007722:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007726:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80077fc <_malloc_r+0xfc>
 800772a:	f000 f869 	bl	8007800 <__malloc_lock>
 800772e:	f8d8 3000 	ldr.w	r3, [r8]
 8007732:	461c      	mov	r4, r3
 8007734:	bb44      	cbnz	r4, 8007788 <_malloc_r+0x88>
 8007736:	4629      	mov	r1, r5
 8007738:	4630      	mov	r0, r6
 800773a:	f7ff ffbf 	bl	80076bc <sbrk_aligned>
 800773e:	1c43      	adds	r3, r0, #1
 8007740:	4604      	mov	r4, r0
 8007742:	d158      	bne.n	80077f6 <_malloc_r+0xf6>
 8007744:	f8d8 4000 	ldr.w	r4, [r8]
 8007748:	4627      	mov	r7, r4
 800774a:	2f00      	cmp	r7, #0
 800774c:	d143      	bne.n	80077d6 <_malloc_r+0xd6>
 800774e:	2c00      	cmp	r4, #0
 8007750:	d04b      	beq.n	80077ea <_malloc_r+0xea>
 8007752:	6823      	ldr	r3, [r4, #0]
 8007754:	4639      	mov	r1, r7
 8007756:	4630      	mov	r0, r6
 8007758:	eb04 0903 	add.w	r9, r4, r3
 800775c:	f000 fc5a 	bl	8008014 <_sbrk_r>
 8007760:	4581      	cmp	r9, r0
 8007762:	d142      	bne.n	80077ea <_malloc_r+0xea>
 8007764:	6821      	ldr	r1, [r4, #0]
 8007766:	1a6d      	subs	r5, r5, r1
 8007768:	4629      	mov	r1, r5
 800776a:	4630      	mov	r0, r6
 800776c:	f7ff ffa6 	bl	80076bc <sbrk_aligned>
 8007770:	3001      	adds	r0, #1
 8007772:	d03a      	beq.n	80077ea <_malloc_r+0xea>
 8007774:	6823      	ldr	r3, [r4, #0]
 8007776:	442b      	add	r3, r5
 8007778:	6023      	str	r3, [r4, #0]
 800777a:	f8d8 3000 	ldr.w	r3, [r8]
 800777e:	685a      	ldr	r2, [r3, #4]
 8007780:	bb62      	cbnz	r2, 80077dc <_malloc_r+0xdc>
 8007782:	f8c8 7000 	str.w	r7, [r8]
 8007786:	e00f      	b.n	80077a8 <_malloc_r+0xa8>
 8007788:	6822      	ldr	r2, [r4, #0]
 800778a:	1b52      	subs	r2, r2, r5
 800778c:	d420      	bmi.n	80077d0 <_malloc_r+0xd0>
 800778e:	2a0b      	cmp	r2, #11
 8007790:	d917      	bls.n	80077c2 <_malloc_r+0xc2>
 8007792:	1961      	adds	r1, r4, r5
 8007794:	42a3      	cmp	r3, r4
 8007796:	6025      	str	r5, [r4, #0]
 8007798:	bf18      	it	ne
 800779a:	6059      	strne	r1, [r3, #4]
 800779c:	6863      	ldr	r3, [r4, #4]
 800779e:	bf08      	it	eq
 80077a0:	f8c8 1000 	streq.w	r1, [r8]
 80077a4:	5162      	str	r2, [r4, r5]
 80077a6:	604b      	str	r3, [r1, #4]
 80077a8:	4630      	mov	r0, r6
 80077aa:	f000 f82f 	bl	800780c <__malloc_unlock>
 80077ae:	f104 000b 	add.w	r0, r4, #11
 80077b2:	1d23      	adds	r3, r4, #4
 80077b4:	f020 0007 	bic.w	r0, r0, #7
 80077b8:	1ac2      	subs	r2, r0, r3
 80077ba:	bf1c      	itt	ne
 80077bc:	1a1b      	subne	r3, r3, r0
 80077be:	50a3      	strne	r3, [r4, r2]
 80077c0:	e7af      	b.n	8007722 <_malloc_r+0x22>
 80077c2:	6862      	ldr	r2, [r4, #4]
 80077c4:	42a3      	cmp	r3, r4
 80077c6:	bf0c      	ite	eq
 80077c8:	f8c8 2000 	streq.w	r2, [r8]
 80077cc:	605a      	strne	r2, [r3, #4]
 80077ce:	e7eb      	b.n	80077a8 <_malloc_r+0xa8>
 80077d0:	4623      	mov	r3, r4
 80077d2:	6864      	ldr	r4, [r4, #4]
 80077d4:	e7ae      	b.n	8007734 <_malloc_r+0x34>
 80077d6:	463c      	mov	r4, r7
 80077d8:	687f      	ldr	r7, [r7, #4]
 80077da:	e7b6      	b.n	800774a <_malloc_r+0x4a>
 80077dc:	461a      	mov	r2, r3
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	42a3      	cmp	r3, r4
 80077e2:	d1fb      	bne.n	80077dc <_malloc_r+0xdc>
 80077e4:	2300      	movs	r3, #0
 80077e6:	6053      	str	r3, [r2, #4]
 80077e8:	e7de      	b.n	80077a8 <_malloc_r+0xa8>
 80077ea:	230c      	movs	r3, #12
 80077ec:	6033      	str	r3, [r6, #0]
 80077ee:	4630      	mov	r0, r6
 80077f0:	f000 f80c 	bl	800780c <__malloc_unlock>
 80077f4:	e794      	b.n	8007720 <_malloc_r+0x20>
 80077f6:	6005      	str	r5, [r0, #0]
 80077f8:	e7d6      	b.n	80077a8 <_malloc_r+0xa8>
 80077fa:	bf00      	nop
 80077fc:	24000380 	.word	0x24000380

08007800 <__malloc_lock>:
 8007800:	4801      	ldr	r0, [pc, #4]	@ (8007808 <__malloc_lock+0x8>)
 8007802:	f7ff bf0e 	b.w	8007622 <__retarget_lock_acquire_recursive>
 8007806:	bf00      	nop
 8007808:	24000378 	.word	0x24000378

0800780c <__malloc_unlock>:
 800780c:	4801      	ldr	r0, [pc, #4]	@ (8007814 <__malloc_unlock+0x8>)
 800780e:	f7ff bf09 	b.w	8007624 <__retarget_lock_release_recursive>
 8007812:	bf00      	nop
 8007814:	24000378 	.word	0x24000378

08007818 <__sfputc_r>:
 8007818:	6893      	ldr	r3, [r2, #8]
 800781a:	3b01      	subs	r3, #1
 800781c:	2b00      	cmp	r3, #0
 800781e:	b410      	push	{r4}
 8007820:	6093      	str	r3, [r2, #8]
 8007822:	da08      	bge.n	8007836 <__sfputc_r+0x1e>
 8007824:	6994      	ldr	r4, [r2, #24]
 8007826:	42a3      	cmp	r3, r4
 8007828:	db01      	blt.n	800782e <__sfputc_r+0x16>
 800782a:	290a      	cmp	r1, #10
 800782c:	d103      	bne.n	8007836 <__sfputc_r+0x1e>
 800782e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007832:	f7ff bde8 	b.w	8007406 <__swbuf_r>
 8007836:	6813      	ldr	r3, [r2, #0]
 8007838:	1c58      	adds	r0, r3, #1
 800783a:	6010      	str	r0, [r2, #0]
 800783c:	7019      	strb	r1, [r3, #0]
 800783e:	4608      	mov	r0, r1
 8007840:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007844:	4770      	bx	lr

08007846 <__sfputs_r>:
 8007846:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007848:	4606      	mov	r6, r0
 800784a:	460f      	mov	r7, r1
 800784c:	4614      	mov	r4, r2
 800784e:	18d5      	adds	r5, r2, r3
 8007850:	42ac      	cmp	r4, r5
 8007852:	d101      	bne.n	8007858 <__sfputs_r+0x12>
 8007854:	2000      	movs	r0, #0
 8007856:	e007      	b.n	8007868 <__sfputs_r+0x22>
 8007858:	f814 1b01 	ldrb.w	r1, [r4], #1
 800785c:	463a      	mov	r2, r7
 800785e:	4630      	mov	r0, r6
 8007860:	f7ff ffda 	bl	8007818 <__sfputc_r>
 8007864:	1c43      	adds	r3, r0, #1
 8007866:	d1f3      	bne.n	8007850 <__sfputs_r+0xa>
 8007868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800786c <_vfiprintf_r>:
 800786c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007870:	460d      	mov	r5, r1
 8007872:	b09d      	sub	sp, #116	@ 0x74
 8007874:	4614      	mov	r4, r2
 8007876:	4698      	mov	r8, r3
 8007878:	4606      	mov	r6, r0
 800787a:	b118      	cbz	r0, 8007884 <_vfiprintf_r+0x18>
 800787c:	6a03      	ldr	r3, [r0, #32]
 800787e:	b90b      	cbnz	r3, 8007884 <_vfiprintf_r+0x18>
 8007880:	f7ff fd36 	bl	80072f0 <__sinit>
 8007884:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007886:	07d9      	lsls	r1, r3, #31
 8007888:	d405      	bmi.n	8007896 <_vfiprintf_r+0x2a>
 800788a:	89ab      	ldrh	r3, [r5, #12]
 800788c:	059a      	lsls	r2, r3, #22
 800788e:	d402      	bmi.n	8007896 <_vfiprintf_r+0x2a>
 8007890:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007892:	f7ff fec6 	bl	8007622 <__retarget_lock_acquire_recursive>
 8007896:	89ab      	ldrh	r3, [r5, #12]
 8007898:	071b      	lsls	r3, r3, #28
 800789a:	d501      	bpl.n	80078a0 <_vfiprintf_r+0x34>
 800789c:	692b      	ldr	r3, [r5, #16]
 800789e:	b99b      	cbnz	r3, 80078c8 <_vfiprintf_r+0x5c>
 80078a0:	4629      	mov	r1, r5
 80078a2:	4630      	mov	r0, r6
 80078a4:	f7ff fdee 	bl	8007484 <__swsetup_r>
 80078a8:	b170      	cbz	r0, 80078c8 <_vfiprintf_r+0x5c>
 80078aa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80078ac:	07dc      	lsls	r4, r3, #31
 80078ae:	d504      	bpl.n	80078ba <_vfiprintf_r+0x4e>
 80078b0:	f04f 30ff 	mov.w	r0, #4294967295
 80078b4:	b01d      	add	sp, #116	@ 0x74
 80078b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078ba:	89ab      	ldrh	r3, [r5, #12]
 80078bc:	0598      	lsls	r0, r3, #22
 80078be:	d4f7      	bmi.n	80078b0 <_vfiprintf_r+0x44>
 80078c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80078c2:	f7ff feaf 	bl	8007624 <__retarget_lock_release_recursive>
 80078c6:	e7f3      	b.n	80078b0 <_vfiprintf_r+0x44>
 80078c8:	2300      	movs	r3, #0
 80078ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80078cc:	2320      	movs	r3, #32
 80078ce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80078d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80078d6:	2330      	movs	r3, #48	@ 0x30
 80078d8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007a88 <_vfiprintf_r+0x21c>
 80078dc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80078e0:	f04f 0901 	mov.w	r9, #1
 80078e4:	4623      	mov	r3, r4
 80078e6:	469a      	mov	sl, r3
 80078e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078ec:	b10a      	cbz	r2, 80078f2 <_vfiprintf_r+0x86>
 80078ee:	2a25      	cmp	r2, #37	@ 0x25
 80078f0:	d1f9      	bne.n	80078e6 <_vfiprintf_r+0x7a>
 80078f2:	ebba 0b04 	subs.w	fp, sl, r4
 80078f6:	d00b      	beq.n	8007910 <_vfiprintf_r+0xa4>
 80078f8:	465b      	mov	r3, fp
 80078fa:	4622      	mov	r2, r4
 80078fc:	4629      	mov	r1, r5
 80078fe:	4630      	mov	r0, r6
 8007900:	f7ff ffa1 	bl	8007846 <__sfputs_r>
 8007904:	3001      	adds	r0, #1
 8007906:	f000 80a7 	beq.w	8007a58 <_vfiprintf_r+0x1ec>
 800790a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800790c:	445a      	add	r2, fp
 800790e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007910:	f89a 3000 	ldrb.w	r3, [sl]
 8007914:	2b00      	cmp	r3, #0
 8007916:	f000 809f 	beq.w	8007a58 <_vfiprintf_r+0x1ec>
 800791a:	2300      	movs	r3, #0
 800791c:	f04f 32ff 	mov.w	r2, #4294967295
 8007920:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007924:	f10a 0a01 	add.w	sl, sl, #1
 8007928:	9304      	str	r3, [sp, #16]
 800792a:	9307      	str	r3, [sp, #28]
 800792c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007930:	931a      	str	r3, [sp, #104]	@ 0x68
 8007932:	4654      	mov	r4, sl
 8007934:	2205      	movs	r2, #5
 8007936:	f814 1b01 	ldrb.w	r1, [r4], #1
 800793a:	4853      	ldr	r0, [pc, #332]	@ (8007a88 <_vfiprintf_r+0x21c>)
 800793c:	f7f8 fcd0 	bl	80002e0 <memchr>
 8007940:	9a04      	ldr	r2, [sp, #16]
 8007942:	b9d8      	cbnz	r0, 800797c <_vfiprintf_r+0x110>
 8007944:	06d1      	lsls	r1, r2, #27
 8007946:	bf44      	itt	mi
 8007948:	2320      	movmi	r3, #32
 800794a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800794e:	0713      	lsls	r3, r2, #28
 8007950:	bf44      	itt	mi
 8007952:	232b      	movmi	r3, #43	@ 0x2b
 8007954:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007958:	f89a 3000 	ldrb.w	r3, [sl]
 800795c:	2b2a      	cmp	r3, #42	@ 0x2a
 800795e:	d015      	beq.n	800798c <_vfiprintf_r+0x120>
 8007960:	9a07      	ldr	r2, [sp, #28]
 8007962:	4654      	mov	r4, sl
 8007964:	2000      	movs	r0, #0
 8007966:	f04f 0c0a 	mov.w	ip, #10
 800796a:	4621      	mov	r1, r4
 800796c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007970:	3b30      	subs	r3, #48	@ 0x30
 8007972:	2b09      	cmp	r3, #9
 8007974:	d94b      	bls.n	8007a0e <_vfiprintf_r+0x1a2>
 8007976:	b1b0      	cbz	r0, 80079a6 <_vfiprintf_r+0x13a>
 8007978:	9207      	str	r2, [sp, #28]
 800797a:	e014      	b.n	80079a6 <_vfiprintf_r+0x13a>
 800797c:	eba0 0308 	sub.w	r3, r0, r8
 8007980:	fa09 f303 	lsl.w	r3, r9, r3
 8007984:	4313      	orrs	r3, r2
 8007986:	9304      	str	r3, [sp, #16]
 8007988:	46a2      	mov	sl, r4
 800798a:	e7d2      	b.n	8007932 <_vfiprintf_r+0xc6>
 800798c:	9b03      	ldr	r3, [sp, #12]
 800798e:	1d19      	adds	r1, r3, #4
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	9103      	str	r1, [sp, #12]
 8007994:	2b00      	cmp	r3, #0
 8007996:	bfbb      	ittet	lt
 8007998:	425b      	neglt	r3, r3
 800799a:	f042 0202 	orrlt.w	r2, r2, #2
 800799e:	9307      	strge	r3, [sp, #28]
 80079a0:	9307      	strlt	r3, [sp, #28]
 80079a2:	bfb8      	it	lt
 80079a4:	9204      	strlt	r2, [sp, #16]
 80079a6:	7823      	ldrb	r3, [r4, #0]
 80079a8:	2b2e      	cmp	r3, #46	@ 0x2e
 80079aa:	d10a      	bne.n	80079c2 <_vfiprintf_r+0x156>
 80079ac:	7863      	ldrb	r3, [r4, #1]
 80079ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80079b0:	d132      	bne.n	8007a18 <_vfiprintf_r+0x1ac>
 80079b2:	9b03      	ldr	r3, [sp, #12]
 80079b4:	1d1a      	adds	r2, r3, #4
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	9203      	str	r2, [sp, #12]
 80079ba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80079be:	3402      	adds	r4, #2
 80079c0:	9305      	str	r3, [sp, #20]
 80079c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007a98 <_vfiprintf_r+0x22c>
 80079c6:	7821      	ldrb	r1, [r4, #0]
 80079c8:	2203      	movs	r2, #3
 80079ca:	4650      	mov	r0, sl
 80079cc:	f7f8 fc88 	bl	80002e0 <memchr>
 80079d0:	b138      	cbz	r0, 80079e2 <_vfiprintf_r+0x176>
 80079d2:	9b04      	ldr	r3, [sp, #16]
 80079d4:	eba0 000a 	sub.w	r0, r0, sl
 80079d8:	2240      	movs	r2, #64	@ 0x40
 80079da:	4082      	lsls	r2, r0
 80079dc:	4313      	orrs	r3, r2
 80079de:	3401      	adds	r4, #1
 80079e0:	9304      	str	r3, [sp, #16]
 80079e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079e6:	4829      	ldr	r0, [pc, #164]	@ (8007a8c <_vfiprintf_r+0x220>)
 80079e8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80079ec:	2206      	movs	r2, #6
 80079ee:	f7f8 fc77 	bl	80002e0 <memchr>
 80079f2:	2800      	cmp	r0, #0
 80079f4:	d03f      	beq.n	8007a76 <_vfiprintf_r+0x20a>
 80079f6:	4b26      	ldr	r3, [pc, #152]	@ (8007a90 <_vfiprintf_r+0x224>)
 80079f8:	bb1b      	cbnz	r3, 8007a42 <_vfiprintf_r+0x1d6>
 80079fa:	9b03      	ldr	r3, [sp, #12]
 80079fc:	3307      	adds	r3, #7
 80079fe:	f023 0307 	bic.w	r3, r3, #7
 8007a02:	3308      	adds	r3, #8
 8007a04:	9303      	str	r3, [sp, #12]
 8007a06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a08:	443b      	add	r3, r7
 8007a0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a0c:	e76a      	b.n	80078e4 <_vfiprintf_r+0x78>
 8007a0e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a12:	460c      	mov	r4, r1
 8007a14:	2001      	movs	r0, #1
 8007a16:	e7a8      	b.n	800796a <_vfiprintf_r+0xfe>
 8007a18:	2300      	movs	r3, #0
 8007a1a:	3401      	adds	r4, #1
 8007a1c:	9305      	str	r3, [sp, #20]
 8007a1e:	4619      	mov	r1, r3
 8007a20:	f04f 0c0a 	mov.w	ip, #10
 8007a24:	4620      	mov	r0, r4
 8007a26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a2a:	3a30      	subs	r2, #48	@ 0x30
 8007a2c:	2a09      	cmp	r2, #9
 8007a2e:	d903      	bls.n	8007a38 <_vfiprintf_r+0x1cc>
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d0c6      	beq.n	80079c2 <_vfiprintf_r+0x156>
 8007a34:	9105      	str	r1, [sp, #20]
 8007a36:	e7c4      	b.n	80079c2 <_vfiprintf_r+0x156>
 8007a38:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a3c:	4604      	mov	r4, r0
 8007a3e:	2301      	movs	r3, #1
 8007a40:	e7f0      	b.n	8007a24 <_vfiprintf_r+0x1b8>
 8007a42:	ab03      	add	r3, sp, #12
 8007a44:	9300      	str	r3, [sp, #0]
 8007a46:	462a      	mov	r2, r5
 8007a48:	4b12      	ldr	r3, [pc, #72]	@ (8007a94 <_vfiprintf_r+0x228>)
 8007a4a:	a904      	add	r1, sp, #16
 8007a4c:	4630      	mov	r0, r6
 8007a4e:	f3af 8000 	nop.w
 8007a52:	4607      	mov	r7, r0
 8007a54:	1c78      	adds	r0, r7, #1
 8007a56:	d1d6      	bne.n	8007a06 <_vfiprintf_r+0x19a>
 8007a58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007a5a:	07d9      	lsls	r1, r3, #31
 8007a5c:	d405      	bmi.n	8007a6a <_vfiprintf_r+0x1fe>
 8007a5e:	89ab      	ldrh	r3, [r5, #12]
 8007a60:	059a      	lsls	r2, r3, #22
 8007a62:	d402      	bmi.n	8007a6a <_vfiprintf_r+0x1fe>
 8007a64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007a66:	f7ff fddd 	bl	8007624 <__retarget_lock_release_recursive>
 8007a6a:	89ab      	ldrh	r3, [r5, #12]
 8007a6c:	065b      	lsls	r3, r3, #25
 8007a6e:	f53f af1f 	bmi.w	80078b0 <_vfiprintf_r+0x44>
 8007a72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007a74:	e71e      	b.n	80078b4 <_vfiprintf_r+0x48>
 8007a76:	ab03      	add	r3, sp, #12
 8007a78:	9300      	str	r3, [sp, #0]
 8007a7a:	462a      	mov	r2, r5
 8007a7c:	4b05      	ldr	r3, [pc, #20]	@ (8007a94 <_vfiprintf_r+0x228>)
 8007a7e:	a904      	add	r1, sp, #16
 8007a80:	4630      	mov	r0, r6
 8007a82:	f000 f879 	bl	8007b78 <_printf_i>
 8007a86:	e7e4      	b.n	8007a52 <_vfiprintf_r+0x1e6>
 8007a88:	0800809c 	.word	0x0800809c
 8007a8c:	080080a6 	.word	0x080080a6
 8007a90:	00000000 	.word	0x00000000
 8007a94:	08007847 	.word	0x08007847
 8007a98:	080080a2 	.word	0x080080a2

08007a9c <_printf_common>:
 8007a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007aa0:	4616      	mov	r6, r2
 8007aa2:	4698      	mov	r8, r3
 8007aa4:	688a      	ldr	r2, [r1, #8]
 8007aa6:	690b      	ldr	r3, [r1, #16]
 8007aa8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007aac:	4293      	cmp	r3, r2
 8007aae:	bfb8      	it	lt
 8007ab0:	4613      	movlt	r3, r2
 8007ab2:	6033      	str	r3, [r6, #0]
 8007ab4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007ab8:	4607      	mov	r7, r0
 8007aba:	460c      	mov	r4, r1
 8007abc:	b10a      	cbz	r2, 8007ac2 <_printf_common+0x26>
 8007abe:	3301      	adds	r3, #1
 8007ac0:	6033      	str	r3, [r6, #0]
 8007ac2:	6823      	ldr	r3, [r4, #0]
 8007ac4:	0699      	lsls	r1, r3, #26
 8007ac6:	bf42      	ittt	mi
 8007ac8:	6833      	ldrmi	r3, [r6, #0]
 8007aca:	3302      	addmi	r3, #2
 8007acc:	6033      	strmi	r3, [r6, #0]
 8007ace:	6825      	ldr	r5, [r4, #0]
 8007ad0:	f015 0506 	ands.w	r5, r5, #6
 8007ad4:	d106      	bne.n	8007ae4 <_printf_common+0x48>
 8007ad6:	f104 0a19 	add.w	sl, r4, #25
 8007ada:	68e3      	ldr	r3, [r4, #12]
 8007adc:	6832      	ldr	r2, [r6, #0]
 8007ade:	1a9b      	subs	r3, r3, r2
 8007ae0:	42ab      	cmp	r3, r5
 8007ae2:	dc26      	bgt.n	8007b32 <_printf_common+0x96>
 8007ae4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007ae8:	6822      	ldr	r2, [r4, #0]
 8007aea:	3b00      	subs	r3, #0
 8007aec:	bf18      	it	ne
 8007aee:	2301      	movne	r3, #1
 8007af0:	0692      	lsls	r2, r2, #26
 8007af2:	d42b      	bmi.n	8007b4c <_printf_common+0xb0>
 8007af4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007af8:	4641      	mov	r1, r8
 8007afa:	4638      	mov	r0, r7
 8007afc:	47c8      	blx	r9
 8007afe:	3001      	adds	r0, #1
 8007b00:	d01e      	beq.n	8007b40 <_printf_common+0xa4>
 8007b02:	6823      	ldr	r3, [r4, #0]
 8007b04:	6922      	ldr	r2, [r4, #16]
 8007b06:	f003 0306 	and.w	r3, r3, #6
 8007b0a:	2b04      	cmp	r3, #4
 8007b0c:	bf02      	ittt	eq
 8007b0e:	68e5      	ldreq	r5, [r4, #12]
 8007b10:	6833      	ldreq	r3, [r6, #0]
 8007b12:	1aed      	subeq	r5, r5, r3
 8007b14:	68a3      	ldr	r3, [r4, #8]
 8007b16:	bf0c      	ite	eq
 8007b18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b1c:	2500      	movne	r5, #0
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	bfc4      	itt	gt
 8007b22:	1a9b      	subgt	r3, r3, r2
 8007b24:	18ed      	addgt	r5, r5, r3
 8007b26:	2600      	movs	r6, #0
 8007b28:	341a      	adds	r4, #26
 8007b2a:	42b5      	cmp	r5, r6
 8007b2c:	d11a      	bne.n	8007b64 <_printf_common+0xc8>
 8007b2e:	2000      	movs	r0, #0
 8007b30:	e008      	b.n	8007b44 <_printf_common+0xa8>
 8007b32:	2301      	movs	r3, #1
 8007b34:	4652      	mov	r2, sl
 8007b36:	4641      	mov	r1, r8
 8007b38:	4638      	mov	r0, r7
 8007b3a:	47c8      	blx	r9
 8007b3c:	3001      	adds	r0, #1
 8007b3e:	d103      	bne.n	8007b48 <_printf_common+0xac>
 8007b40:	f04f 30ff 	mov.w	r0, #4294967295
 8007b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b48:	3501      	adds	r5, #1
 8007b4a:	e7c6      	b.n	8007ada <_printf_common+0x3e>
 8007b4c:	18e1      	adds	r1, r4, r3
 8007b4e:	1c5a      	adds	r2, r3, #1
 8007b50:	2030      	movs	r0, #48	@ 0x30
 8007b52:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007b56:	4422      	add	r2, r4
 8007b58:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007b5c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007b60:	3302      	adds	r3, #2
 8007b62:	e7c7      	b.n	8007af4 <_printf_common+0x58>
 8007b64:	2301      	movs	r3, #1
 8007b66:	4622      	mov	r2, r4
 8007b68:	4641      	mov	r1, r8
 8007b6a:	4638      	mov	r0, r7
 8007b6c:	47c8      	blx	r9
 8007b6e:	3001      	adds	r0, #1
 8007b70:	d0e6      	beq.n	8007b40 <_printf_common+0xa4>
 8007b72:	3601      	adds	r6, #1
 8007b74:	e7d9      	b.n	8007b2a <_printf_common+0x8e>
	...

08007b78 <_printf_i>:
 8007b78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b7c:	7e0f      	ldrb	r7, [r1, #24]
 8007b7e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007b80:	2f78      	cmp	r7, #120	@ 0x78
 8007b82:	4691      	mov	r9, r2
 8007b84:	4680      	mov	r8, r0
 8007b86:	460c      	mov	r4, r1
 8007b88:	469a      	mov	sl, r3
 8007b8a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007b8e:	d807      	bhi.n	8007ba0 <_printf_i+0x28>
 8007b90:	2f62      	cmp	r7, #98	@ 0x62
 8007b92:	d80a      	bhi.n	8007baa <_printf_i+0x32>
 8007b94:	2f00      	cmp	r7, #0
 8007b96:	f000 80d1 	beq.w	8007d3c <_printf_i+0x1c4>
 8007b9a:	2f58      	cmp	r7, #88	@ 0x58
 8007b9c:	f000 80b8 	beq.w	8007d10 <_printf_i+0x198>
 8007ba0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ba4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007ba8:	e03a      	b.n	8007c20 <_printf_i+0xa8>
 8007baa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007bae:	2b15      	cmp	r3, #21
 8007bb0:	d8f6      	bhi.n	8007ba0 <_printf_i+0x28>
 8007bb2:	a101      	add	r1, pc, #4	@ (adr r1, 8007bb8 <_printf_i+0x40>)
 8007bb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007bb8:	08007c11 	.word	0x08007c11
 8007bbc:	08007c25 	.word	0x08007c25
 8007bc0:	08007ba1 	.word	0x08007ba1
 8007bc4:	08007ba1 	.word	0x08007ba1
 8007bc8:	08007ba1 	.word	0x08007ba1
 8007bcc:	08007ba1 	.word	0x08007ba1
 8007bd0:	08007c25 	.word	0x08007c25
 8007bd4:	08007ba1 	.word	0x08007ba1
 8007bd8:	08007ba1 	.word	0x08007ba1
 8007bdc:	08007ba1 	.word	0x08007ba1
 8007be0:	08007ba1 	.word	0x08007ba1
 8007be4:	08007d23 	.word	0x08007d23
 8007be8:	08007c4f 	.word	0x08007c4f
 8007bec:	08007cdd 	.word	0x08007cdd
 8007bf0:	08007ba1 	.word	0x08007ba1
 8007bf4:	08007ba1 	.word	0x08007ba1
 8007bf8:	08007d45 	.word	0x08007d45
 8007bfc:	08007ba1 	.word	0x08007ba1
 8007c00:	08007c4f 	.word	0x08007c4f
 8007c04:	08007ba1 	.word	0x08007ba1
 8007c08:	08007ba1 	.word	0x08007ba1
 8007c0c:	08007ce5 	.word	0x08007ce5
 8007c10:	6833      	ldr	r3, [r6, #0]
 8007c12:	1d1a      	adds	r2, r3, #4
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	6032      	str	r2, [r6, #0]
 8007c18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007c1c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007c20:	2301      	movs	r3, #1
 8007c22:	e09c      	b.n	8007d5e <_printf_i+0x1e6>
 8007c24:	6833      	ldr	r3, [r6, #0]
 8007c26:	6820      	ldr	r0, [r4, #0]
 8007c28:	1d19      	adds	r1, r3, #4
 8007c2a:	6031      	str	r1, [r6, #0]
 8007c2c:	0606      	lsls	r6, r0, #24
 8007c2e:	d501      	bpl.n	8007c34 <_printf_i+0xbc>
 8007c30:	681d      	ldr	r5, [r3, #0]
 8007c32:	e003      	b.n	8007c3c <_printf_i+0xc4>
 8007c34:	0645      	lsls	r5, r0, #25
 8007c36:	d5fb      	bpl.n	8007c30 <_printf_i+0xb8>
 8007c38:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007c3c:	2d00      	cmp	r5, #0
 8007c3e:	da03      	bge.n	8007c48 <_printf_i+0xd0>
 8007c40:	232d      	movs	r3, #45	@ 0x2d
 8007c42:	426d      	negs	r5, r5
 8007c44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c48:	4858      	ldr	r0, [pc, #352]	@ (8007dac <_printf_i+0x234>)
 8007c4a:	230a      	movs	r3, #10
 8007c4c:	e011      	b.n	8007c72 <_printf_i+0xfa>
 8007c4e:	6821      	ldr	r1, [r4, #0]
 8007c50:	6833      	ldr	r3, [r6, #0]
 8007c52:	0608      	lsls	r0, r1, #24
 8007c54:	f853 5b04 	ldr.w	r5, [r3], #4
 8007c58:	d402      	bmi.n	8007c60 <_printf_i+0xe8>
 8007c5a:	0649      	lsls	r1, r1, #25
 8007c5c:	bf48      	it	mi
 8007c5e:	b2ad      	uxthmi	r5, r5
 8007c60:	2f6f      	cmp	r7, #111	@ 0x6f
 8007c62:	4852      	ldr	r0, [pc, #328]	@ (8007dac <_printf_i+0x234>)
 8007c64:	6033      	str	r3, [r6, #0]
 8007c66:	bf14      	ite	ne
 8007c68:	230a      	movne	r3, #10
 8007c6a:	2308      	moveq	r3, #8
 8007c6c:	2100      	movs	r1, #0
 8007c6e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007c72:	6866      	ldr	r6, [r4, #4]
 8007c74:	60a6      	str	r6, [r4, #8]
 8007c76:	2e00      	cmp	r6, #0
 8007c78:	db05      	blt.n	8007c86 <_printf_i+0x10e>
 8007c7a:	6821      	ldr	r1, [r4, #0]
 8007c7c:	432e      	orrs	r6, r5
 8007c7e:	f021 0104 	bic.w	r1, r1, #4
 8007c82:	6021      	str	r1, [r4, #0]
 8007c84:	d04b      	beq.n	8007d1e <_printf_i+0x1a6>
 8007c86:	4616      	mov	r6, r2
 8007c88:	fbb5 f1f3 	udiv	r1, r5, r3
 8007c8c:	fb03 5711 	mls	r7, r3, r1, r5
 8007c90:	5dc7      	ldrb	r7, [r0, r7]
 8007c92:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007c96:	462f      	mov	r7, r5
 8007c98:	42bb      	cmp	r3, r7
 8007c9a:	460d      	mov	r5, r1
 8007c9c:	d9f4      	bls.n	8007c88 <_printf_i+0x110>
 8007c9e:	2b08      	cmp	r3, #8
 8007ca0:	d10b      	bne.n	8007cba <_printf_i+0x142>
 8007ca2:	6823      	ldr	r3, [r4, #0]
 8007ca4:	07df      	lsls	r7, r3, #31
 8007ca6:	d508      	bpl.n	8007cba <_printf_i+0x142>
 8007ca8:	6923      	ldr	r3, [r4, #16]
 8007caa:	6861      	ldr	r1, [r4, #4]
 8007cac:	4299      	cmp	r1, r3
 8007cae:	bfde      	ittt	le
 8007cb0:	2330      	movle	r3, #48	@ 0x30
 8007cb2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007cb6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007cba:	1b92      	subs	r2, r2, r6
 8007cbc:	6122      	str	r2, [r4, #16]
 8007cbe:	f8cd a000 	str.w	sl, [sp]
 8007cc2:	464b      	mov	r3, r9
 8007cc4:	aa03      	add	r2, sp, #12
 8007cc6:	4621      	mov	r1, r4
 8007cc8:	4640      	mov	r0, r8
 8007cca:	f7ff fee7 	bl	8007a9c <_printf_common>
 8007cce:	3001      	adds	r0, #1
 8007cd0:	d14a      	bne.n	8007d68 <_printf_i+0x1f0>
 8007cd2:	f04f 30ff 	mov.w	r0, #4294967295
 8007cd6:	b004      	add	sp, #16
 8007cd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cdc:	6823      	ldr	r3, [r4, #0]
 8007cde:	f043 0320 	orr.w	r3, r3, #32
 8007ce2:	6023      	str	r3, [r4, #0]
 8007ce4:	4832      	ldr	r0, [pc, #200]	@ (8007db0 <_printf_i+0x238>)
 8007ce6:	2778      	movs	r7, #120	@ 0x78
 8007ce8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007cec:	6823      	ldr	r3, [r4, #0]
 8007cee:	6831      	ldr	r1, [r6, #0]
 8007cf0:	061f      	lsls	r7, r3, #24
 8007cf2:	f851 5b04 	ldr.w	r5, [r1], #4
 8007cf6:	d402      	bmi.n	8007cfe <_printf_i+0x186>
 8007cf8:	065f      	lsls	r7, r3, #25
 8007cfa:	bf48      	it	mi
 8007cfc:	b2ad      	uxthmi	r5, r5
 8007cfe:	6031      	str	r1, [r6, #0]
 8007d00:	07d9      	lsls	r1, r3, #31
 8007d02:	bf44      	itt	mi
 8007d04:	f043 0320 	orrmi.w	r3, r3, #32
 8007d08:	6023      	strmi	r3, [r4, #0]
 8007d0a:	b11d      	cbz	r5, 8007d14 <_printf_i+0x19c>
 8007d0c:	2310      	movs	r3, #16
 8007d0e:	e7ad      	b.n	8007c6c <_printf_i+0xf4>
 8007d10:	4826      	ldr	r0, [pc, #152]	@ (8007dac <_printf_i+0x234>)
 8007d12:	e7e9      	b.n	8007ce8 <_printf_i+0x170>
 8007d14:	6823      	ldr	r3, [r4, #0]
 8007d16:	f023 0320 	bic.w	r3, r3, #32
 8007d1a:	6023      	str	r3, [r4, #0]
 8007d1c:	e7f6      	b.n	8007d0c <_printf_i+0x194>
 8007d1e:	4616      	mov	r6, r2
 8007d20:	e7bd      	b.n	8007c9e <_printf_i+0x126>
 8007d22:	6833      	ldr	r3, [r6, #0]
 8007d24:	6825      	ldr	r5, [r4, #0]
 8007d26:	6961      	ldr	r1, [r4, #20]
 8007d28:	1d18      	adds	r0, r3, #4
 8007d2a:	6030      	str	r0, [r6, #0]
 8007d2c:	062e      	lsls	r6, r5, #24
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	d501      	bpl.n	8007d36 <_printf_i+0x1be>
 8007d32:	6019      	str	r1, [r3, #0]
 8007d34:	e002      	b.n	8007d3c <_printf_i+0x1c4>
 8007d36:	0668      	lsls	r0, r5, #25
 8007d38:	d5fb      	bpl.n	8007d32 <_printf_i+0x1ba>
 8007d3a:	8019      	strh	r1, [r3, #0]
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	6123      	str	r3, [r4, #16]
 8007d40:	4616      	mov	r6, r2
 8007d42:	e7bc      	b.n	8007cbe <_printf_i+0x146>
 8007d44:	6833      	ldr	r3, [r6, #0]
 8007d46:	1d1a      	adds	r2, r3, #4
 8007d48:	6032      	str	r2, [r6, #0]
 8007d4a:	681e      	ldr	r6, [r3, #0]
 8007d4c:	6862      	ldr	r2, [r4, #4]
 8007d4e:	2100      	movs	r1, #0
 8007d50:	4630      	mov	r0, r6
 8007d52:	f7f8 fac5 	bl	80002e0 <memchr>
 8007d56:	b108      	cbz	r0, 8007d5c <_printf_i+0x1e4>
 8007d58:	1b80      	subs	r0, r0, r6
 8007d5a:	6060      	str	r0, [r4, #4]
 8007d5c:	6863      	ldr	r3, [r4, #4]
 8007d5e:	6123      	str	r3, [r4, #16]
 8007d60:	2300      	movs	r3, #0
 8007d62:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d66:	e7aa      	b.n	8007cbe <_printf_i+0x146>
 8007d68:	6923      	ldr	r3, [r4, #16]
 8007d6a:	4632      	mov	r2, r6
 8007d6c:	4649      	mov	r1, r9
 8007d6e:	4640      	mov	r0, r8
 8007d70:	47d0      	blx	sl
 8007d72:	3001      	adds	r0, #1
 8007d74:	d0ad      	beq.n	8007cd2 <_printf_i+0x15a>
 8007d76:	6823      	ldr	r3, [r4, #0]
 8007d78:	079b      	lsls	r3, r3, #30
 8007d7a:	d413      	bmi.n	8007da4 <_printf_i+0x22c>
 8007d7c:	68e0      	ldr	r0, [r4, #12]
 8007d7e:	9b03      	ldr	r3, [sp, #12]
 8007d80:	4298      	cmp	r0, r3
 8007d82:	bfb8      	it	lt
 8007d84:	4618      	movlt	r0, r3
 8007d86:	e7a6      	b.n	8007cd6 <_printf_i+0x15e>
 8007d88:	2301      	movs	r3, #1
 8007d8a:	4632      	mov	r2, r6
 8007d8c:	4649      	mov	r1, r9
 8007d8e:	4640      	mov	r0, r8
 8007d90:	47d0      	blx	sl
 8007d92:	3001      	adds	r0, #1
 8007d94:	d09d      	beq.n	8007cd2 <_printf_i+0x15a>
 8007d96:	3501      	adds	r5, #1
 8007d98:	68e3      	ldr	r3, [r4, #12]
 8007d9a:	9903      	ldr	r1, [sp, #12]
 8007d9c:	1a5b      	subs	r3, r3, r1
 8007d9e:	42ab      	cmp	r3, r5
 8007da0:	dcf2      	bgt.n	8007d88 <_printf_i+0x210>
 8007da2:	e7eb      	b.n	8007d7c <_printf_i+0x204>
 8007da4:	2500      	movs	r5, #0
 8007da6:	f104 0619 	add.w	r6, r4, #25
 8007daa:	e7f5      	b.n	8007d98 <_printf_i+0x220>
 8007dac:	080080ad 	.word	0x080080ad
 8007db0:	080080be 	.word	0x080080be

08007db4 <__sflush_r>:
 8007db4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dbc:	0716      	lsls	r6, r2, #28
 8007dbe:	4605      	mov	r5, r0
 8007dc0:	460c      	mov	r4, r1
 8007dc2:	d454      	bmi.n	8007e6e <__sflush_r+0xba>
 8007dc4:	684b      	ldr	r3, [r1, #4]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	dc02      	bgt.n	8007dd0 <__sflush_r+0x1c>
 8007dca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	dd48      	ble.n	8007e62 <__sflush_r+0xae>
 8007dd0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007dd2:	2e00      	cmp	r6, #0
 8007dd4:	d045      	beq.n	8007e62 <__sflush_r+0xae>
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007ddc:	682f      	ldr	r7, [r5, #0]
 8007dde:	6a21      	ldr	r1, [r4, #32]
 8007de0:	602b      	str	r3, [r5, #0]
 8007de2:	d030      	beq.n	8007e46 <__sflush_r+0x92>
 8007de4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007de6:	89a3      	ldrh	r3, [r4, #12]
 8007de8:	0759      	lsls	r1, r3, #29
 8007dea:	d505      	bpl.n	8007df8 <__sflush_r+0x44>
 8007dec:	6863      	ldr	r3, [r4, #4]
 8007dee:	1ad2      	subs	r2, r2, r3
 8007df0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007df2:	b10b      	cbz	r3, 8007df8 <__sflush_r+0x44>
 8007df4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007df6:	1ad2      	subs	r2, r2, r3
 8007df8:	2300      	movs	r3, #0
 8007dfa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007dfc:	6a21      	ldr	r1, [r4, #32]
 8007dfe:	4628      	mov	r0, r5
 8007e00:	47b0      	blx	r6
 8007e02:	1c43      	adds	r3, r0, #1
 8007e04:	89a3      	ldrh	r3, [r4, #12]
 8007e06:	d106      	bne.n	8007e16 <__sflush_r+0x62>
 8007e08:	6829      	ldr	r1, [r5, #0]
 8007e0a:	291d      	cmp	r1, #29
 8007e0c:	d82b      	bhi.n	8007e66 <__sflush_r+0xb2>
 8007e0e:	4a2a      	ldr	r2, [pc, #168]	@ (8007eb8 <__sflush_r+0x104>)
 8007e10:	40ca      	lsrs	r2, r1
 8007e12:	07d6      	lsls	r6, r2, #31
 8007e14:	d527      	bpl.n	8007e66 <__sflush_r+0xb2>
 8007e16:	2200      	movs	r2, #0
 8007e18:	6062      	str	r2, [r4, #4]
 8007e1a:	04d9      	lsls	r1, r3, #19
 8007e1c:	6922      	ldr	r2, [r4, #16]
 8007e1e:	6022      	str	r2, [r4, #0]
 8007e20:	d504      	bpl.n	8007e2c <__sflush_r+0x78>
 8007e22:	1c42      	adds	r2, r0, #1
 8007e24:	d101      	bne.n	8007e2a <__sflush_r+0x76>
 8007e26:	682b      	ldr	r3, [r5, #0]
 8007e28:	b903      	cbnz	r3, 8007e2c <__sflush_r+0x78>
 8007e2a:	6560      	str	r0, [r4, #84]	@ 0x54
 8007e2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007e2e:	602f      	str	r7, [r5, #0]
 8007e30:	b1b9      	cbz	r1, 8007e62 <__sflush_r+0xae>
 8007e32:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007e36:	4299      	cmp	r1, r3
 8007e38:	d002      	beq.n	8007e40 <__sflush_r+0x8c>
 8007e3a:	4628      	mov	r0, r5
 8007e3c:	f7ff fbf4 	bl	8007628 <_free_r>
 8007e40:	2300      	movs	r3, #0
 8007e42:	6363      	str	r3, [r4, #52]	@ 0x34
 8007e44:	e00d      	b.n	8007e62 <__sflush_r+0xae>
 8007e46:	2301      	movs	r3, #1
 8007e48:	4628      	mov	r0, r5
 8007e4a:	47b0      	blx	r6
 8007e4c:	4602      	mov	r2, r0
 8007e4e:	1c50      	adds	r0, r2, #1
 8007e50:	d1c9      	bne.n	8007de6 <__sflush_r+0x32>
 8007e52:	682b      	ldr	r3, [r5, #0]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d0c6      	beq.n	8007de6 <__sflush_r+0x32>
 8007e58:	2b1d      	cmp	r3, #29
 8007e5a:	d001      	beq.n	8007e60 <__sflush_r+0xac>
 8007e5c:	2b16      	cmp	r3, #22
 8007e5e:	d11e      	bne.n	8007e9e <__sflush_r+0xea>
 8007e60:	602f      	str	r7, [r5, #0]
 8007e62:	2000      	movs	r0, #0
 8007e64:	e022      	b.n	8007eac <__sflush_r+0xf8>
 8007e66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e6a:	b21b      	sxth	r3, r3
 8007e6c:	e01b      	b.n	8007ea6 <__sflush_r+0xf2>
 8007e6e:	690f      	ldr	r7, [r1, #16]
 8007e70:	2f00      	cmp	r7, #0
 8007e72:	d0f6      	beq.n	8007e62 <__sflush_r+0xae>
 8007e74:	0793      	lsls	r3, r2, #30
 8007e76:	680e      	ldr	r6, [r1, #0]
 8007e78:	bf08      	it	eq
 8007e7a:	694b      	ldreq	r3, [r1, #20]
 8007e7c:	600f      	str	r7, [r1, #0]
 8007e7e:	bf18      	it	ne
 8007e80:	2300      	movne	r3, #0
 8007e82:	eba6 0807 	sub.w	r8, r6, r7
 8007e86:	608b      	str	r3, [r1, #8]
 8007e88:	f1b8 0f00 	cmp.w	r8, #0
 8007e8c:	dde9      	ble.n	8007e62 <__sflush_r+0xae>
 8007e8e:	6a21      	ldr	r1, [r4, #32]
 8007e90:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007e92:	4643      	mov	r3, r8
 8007e94:	463a      	mov	r2, r7
 8007e96:	4628      	mov	r0, r5
 8007e98:	47b0      	blx	r6
 8007e9a:	2800      	cmp	r0, #0
 8007e9c:	dc08      	bgt.n	8007eb0 <__sflush_r+0xfc>
 8007e9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ea2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ea6:	81a3      	strh	r3, [r4, #12]
 8007ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8007eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007eb0:	4407      	add	r7, r0
 8007eb2:	eba8 0800 	sub.w	r8, r8, r0
 8007eb6:	e7e7      	b.n	8007e88 <__sflush_r+0xd4>
 8007eb8:	20400001 	.word	0x20400001

08007ebc <_fflush_r>:
 8007ebc:	b538      	push	{r3, r4, r5, lr}
 8007ebe:	690b      	ldr	r3, [r1, #16]
 8007ec0:	4605      	mov	r5, r0
 8007ec2:	460c      	mov	r4, r1
 8007ec4:	b913      	cbnz	r3, 8007ecc <_fflush_r+0x10>
 8007ec6:	2500      	movs	r5, #0
 8007ec8:	4628      	mov	r0, r5
 8007eca:	bd38      	pop	{r3, r4, r5, pc}
 8007ecc:	b118      	cbz	r0, 8007ed6 <_fflush_r+0x1a>
 8007ece:	6a03      	ldr	r3, [r0, #32]
 8007ed0:	b90b      	cbnz	r3, 8007ed6 <_fflush_r+0x1a>
 8007ed2:	f7ff fa0d 	bl	80072f0 <__sinit>
 8007ed6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d0f3      	beq.n	8007ec6 <_fflush_r+0xa>
 8007ede:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007ee0:	07d0      	lsls	r0, r2, #31
 8007ee2:	d404      	bmi.n	8007eee <_fflush_r+0x32>
 8007ee4:	0599      	lsls	r1, r3, #22
 8007ee6:	d402      	bmi.n	8007eee <_fflush_r+0x32>
 8007ee8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007eea:	f7ff fb9a 	bl	8007622 <__retarget_lock_acquire_recursive>
 8007eee:	4628      	mov	r0, r5
 8007ef0:	4621      	mov	r1, r4
 8007ef2:	f7ff ff5f 	bl	8007db4 <__sflush_r>
 8007ef6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007ef8:	07da      	lsls	r2, r3, #31
 8007efa:	4605      	mov	r5, r0
 8007efc:	d4e4      	bmi.n	8007ec8 <_fflush_r+0xc>
 8007efe:	89a3      	ldrh	r3, [r4, #12]
 8007f00:	059b      	lsls	r3, r3, #22
 8007f02:	d4e1      	bmi.n	8007ec8 <_fflush_r+0xc>
 8007f04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007f06:	f7ff fb8d 	bl	8007624 <__retarget_lock_release_recursive>
 8007f0a:	e7dd      	b.n	8007ec8 <_fflush_r+0xc>

08007f0c <__swhatbuf_r>:
 8007f0c:	b570      	push	{r4, r5, r6, lr}
 8007f0e:	460c      	mov	r4, r1
 8007f10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f14:	2900      	cmp	r1, #0
 8007f16:	b096      	sub	sp, #88	@ 0x58
 8007f18:	4615      	mov	r5, r2
 8007f1a:	461e      	mov	r6, r3
 8007f1c:	da0d      	bge.n	8007f3a <__swhatbuf_r+0x2e>
 8007f1e:	89a3      	ldrh	r3, [r4, #12]
 8007f20:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007f24:	f04f 0100 	mov.w	r1, #0
 8007f28:	bf14      	ite	ne
 8007f2a:	2340      	movne	r3, #64	@ 0x40
 8007f2c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007f30:	2000      	movs	r0, #0
 8007f32:	6031      	str	r1, [r6, #0]
 8007f34:	602b      	str	r3, [r5, #0]
 8007f36:	b016      	add	sp, #88	@ 0x58
 8007f38:	bd70      	pop	{r4, r5, r6, pc}
 8007f3a:	466a      	mov	r2, sp
 8007f3c:	f000 f848 	bl	8007fd0 <_fstat_r>
 8007f40:	2800      	cmp	r0, #0
 8007f42:	dbec      	blt.n	8007f1e <__swhatbuf_r+0x12>
 8007f44:	9901      	ldr	r1, [sp, #4]
 8007f46:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007f4a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007f4e:	4259      	negs	r1, r3
 8007f50:	4159      	adcs	r1, r3
 8007f52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007f56:	e7eb      	b.n	8007f30 <__swhatbuf_r+0x24>

08007f58 <__smakebuf_r>:
 8007f58:	898b      	ldrh	r3, [r1, #12]
 8007f5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f5c:	079d      	lsls	r5, r3, #30
 8007f5e:	4606      	mov	r6, r0
 8007f60:	460c      	mov	r4, r1
 8007f62:	d507      	bpl.n	8007f74 <__smakebuf_r+0x1c>
 8007f64:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007f68:	6023      	str	r3, [r4, #0]
 8007f6a:	6123      	str	r3, [r4, #16]
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	6163      	str	r3, [r4, #20]
 8007f70:	b003      	add	sp, #12
 8007f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f74:	ab01      	add	r3, sp, #4
 8007f76:	466a      	mov	r2, sp
 8007f78:	f7ff ffc8 	bl	8007f0c <__swhatbuf_r>
 8007f7c:	9f00      	ldr	r7, [sp, #0]
 8007f7e:	4605      	mov	r5, r0
 8007f80:	4639      	mov	r1, r7
 8007f82:	4630      	mov	r0, r6
 8007f84:	f7ff fbbc 	bl	8007700 <_malloc_r>
 8007f88:	b948      	cbnz	r0, 8007f9e <__smakebuf_r+0x46>
 8007f8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f8e:	059a      	lsls	r2, r3, #22
 8007f90:	d4ee      	bmi.n	8007f70 <__smakebuf_r+0x18>
 8007f92:	f023 0303 	bic.w	r3, r3, #3
 8007f96:	f043 0302 	orr.w	r3, r3, #2
 8007f9a:	81a3      	strh	r3, [r4, #12]
 8007f9c:	e7e2      	b.n	8007f64 <__smakebuf_r+0xc>
 8007f9e:	89a3      	ldrh	r3, [r4, #12]
 8007fa0:	6020      	str	r0, [r4, #0]
 8007fa2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fa6:	81a3      	strh	r3, [r4, #12]
 8007fa8:	9b01      	ldr	r3, [sp, #4]
 8007faa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007fae:	b15b      	cbz	r3, 8007fc8 <__smakebuf_r+0x70>
 8007fb0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007fb4:	4630      	mov	r0, r6
 8007fb6:	f000 f81d 	bl	8007ff4 <_isatty_r>
 8007fba:	b128      	cbz	r0, 8007fc8 <__smakebuf_r+0x70>
 8007fbc:	89a3      	ldrh	r3, [r4, #12]
 8007fbe:	f023 0303 	bic.w	r3, r3, #3
 8007fc2:	f043 0301 	orr.w	r3, r3, #1
 8007fc6:	81a3      	strh	r3, [r4, #12]
 8007fc8:	89a3      	ldrh	r3, [r4, #12]
 8007fca:	431d      	orrs	r5, r3
 8007fcc:	81a5      	strh	r5, [r4, #12]
 8007fce:	e7cf      	b.n	8007f70 <__smakebuf_r+0x18>

08007fd0 <_fstat_r>:
 8007fd0:	b538      	push	{r3, r4, r5, lr}
 8007fd2:	4d07      	ldr	r5, [pc, #28]	@ (8007ff0 <_fstat_r+0x20>)
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	4604      	mov	r4, r0
 8007fd8:	4608      	mov	r0, r1
 8007fda:	4611      	mov	r1, r2
 8007fdc:	602b      	str	r3, [r5, #0]
 8007fde:	f7f8 ffec 	bl	8000fba <_fstat>
 8007fe2:	1c43      	adds	r3, r0, #1
 8007fe4:	d102      	bne.n	8007fec <_fstat_r+0x1c>
 8007fe6:	682b      	ldr	r3, [r5, #0]
 8007fe8:	b103      	cbz	r3, 8007fec <_fstat_r+0x1c>
 8007fea:	6023      	str	r3, [r4, #0]
 8007fec:	bd38      	pop	{r3, r4, r5, pc}
 8007fee:	bf00      	nop
 8007ff0:	24000374 	.word	0x24000374

08007ff4 <_isatty_r>:
 8007ff4:	b538      	push	{r3, r4, r5, lr}
 8007ff6:	4d06      	ldr	r5, [pc, #24]	@ (8008010 <_isatty_r+0x1c>)
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	4604      	mov	r4, r0
 8007ffc:	4608      	mov	r0, r1
 8007ffe:	602b      	str	r3, [r5, #0]
 8008000:	f7f8 ffeb 	bl	8000fda <_isatty>
 8008004:	1c43      	adds	r3, r0, #1
 8008006:	d102      	bne.n	800800e <_isatty_r+0x1a>
 8008008:	682b      	ldr	r3, [r5, #0]
 800800a:	b103      	cbz	r3, 800800e <_isatty_r+0x1a>
 800800c:	6023      	str	r3, [r4, #0]
 800800e:	bd38      	pop	{r3, r4, r5, pc}
 8008010:	24000374 	.word	0x24000374

08008014 <_sbrk_r>:
 8008014:	b538      	push	{r3, r4, r5, lr}
 8008016:	4d06      	ldr	r5, [pc, #24]	@ (8008030 <_sbrk_r+0x1c>)
 8008018:	2300      	movs	r3, #0
 800801a:	4604      	mov	r4, r0
 800801c:	4608      	mov	r0, r1
 800801e:	602b      	str	r3, [r5, #0]
 8008020:	f7f8 fff4 	bl	800100c <_sbrk>
 8008024:	1c43      	adds	r3, r0, #1
 8008026:	d102      	bne.n	800802e <_sbrk_r+0x1a>
 8008028:	682b      	ldr	r3, [r5, #0]
 800802a:	b103      	cbz	r3, 800802e <_sbrk_r+0x1a>
 800802c:	6023      	str	r3, [r4, #0]
 800802e:	bd38      	pop	{r3, r4, r5, pc}
 8008030:	24000374 	.word	0x24000374

08008034 <_init>:
 8008034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008036:	bf00      	nop
 8008038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800803a:	bc08      	pop	{r3}
 800803c:	469e      	mov	lr, r3
 800803e:	4770      	bx	lr

08008040 <_fini>:
 8008040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008042:	bf00      	nop
 8008044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008046:	bc08      	pop	{r3}
 8008048:	469e      	mov	lr, r3
 800804a:	4770      	bx	lr

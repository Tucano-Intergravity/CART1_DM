
CART1_DM_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000124ac  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000460  08012750  08012750  00013750  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012bb0  08012bb0  000141f4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08012bb0  08012bb0  00013bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012bb8  08012bb8  000141f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012bb8  08012bb8  00013bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012bbc  08012bbc  00013bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  24000000  08012bc0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000060c  240001f8  08012db4  000141f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  24000804  08012db4  00014804  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000141f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000227f8  00000000  00000000  00014222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004106  00000000  00000000  00036a1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a38  00000000  00000000  0003ab20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001467  00000000  00000000  0003c558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00040372  00000000  00000000  0003d9bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000240e4  00000000  00000000  0007dd31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a4490  00000000  00000000  000a1e15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  002462a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008130  00000000  00000000  002462e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  0024e418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001f8 	.word	0x240001f8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08012734 	.word	0x08012734

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001fc 	.word	0x240001fc
 80002dc:	08012734 	.word	0x08012734

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr
	...

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <strlen>:
 80003a0:	4603      	mov	r3, r0
 80003a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003a6:	2a00      	cmp	r2, #0
 80003a8:	d1fb      	bne.n	80003a2 <strlen+0x2>
 80003aa:	1a18      	subs	r0, r3, r0
 80003ac:	3801      	subs	r0, #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b988 	b.w	80006d8 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	468e      	mov	lr, r1
 80003e8:	4604      	mov	r4, r0
 80003ea:	4688      	mov	r8, r1
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d14a      	bne.n	8000486 <__udivmoddi4+0xa6>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4617      	mov	r7, r2
 80003f4:	d962      	bls.n	80004bc <__udivmoddi4+0xdc>
 80003f6:	fab2 f682 	clz	r6, r2
 80003fa:	b14e      	cbz	r6, 8000410 <__udivmoddi4+0x30>
 80003fc:	f1c6 0320 	rsb	r3, r6, #32
 8000400:	fa01 f806 	lsl.w	r8, r1, r6
 8000404:	fa20 f303 	lsr.w	r3, r0, r3
 8000408:	40b7      	lsls	r7, r6
 800040a:	ea43 0808 	orr.w	r8, r3, r8
 800040e:	40b4      	lsls	r4, r6
 8000410:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000414:	fa1f fc87 	uxth.w	ip, r7
 8000418:	fbb8 f1fe 	udiv	r1, r8, lr
 800041c:	0c23      	lsrs	r3, r4, #16
 800041e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fb01 f20c 	mul.w	r2, r1, ip
 800042a:	429a      	cmp	r2, r3
 800042c:	d909      	bls.n	8000442 <__udivmoddi4+0x62>
 800042e:	18fb      	adds	r3, r7, r3
 8000430:	f101 30ff 	add.w	r0, r1, #4294967295
 8000434:	f080 80ea 	bcs.w	800060c <__udivmoddi4+0x22c>
 8000438:	429a      	cmp	r2, r3
 800043a:	f240 80e7 	bls.w	800060c <__udivmoddi4+0x22c>
 800043e:	3902      	subs	r1, #2
 8000440:	443b      	add	r3, r7
 8000442:	1a9a      	subs	r2, r3, r2
 8000444:	b2a3      	uxth	r3, r4
 8000446:	fbb2 f0fe 	udiv	r0, r2, lr
 800044a:	fb0e 2210 	mls	r2, lr, r0, r2
 800044e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000452:	fb00 fc0c 	mul.w	ip, r0, ip
 8000456:	459c      	cmp	ip, r3
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0x8e>
 800045a:	18fb      	adds	r3, r7, r3
 800045c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000460:	f080 80d6 	bcs.w	8000610 <__udivmoddi4+0x230>
 8000464:	459c      	cmp	ip, r3
 8000466:	f240 80d3 	bls.w	8000610 <__udivmoddi4+0x230>
 800046a:	443b      	add	r3, r7
 800046c:	3802      	subs	r0, #2
 800046e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000472:	eba3 030c 	sub.w	r3, r3, ip
 8000476:	2100      	movs	r1, #0
 8000478:	b11d      	cbz	r5, 8000482 <__udivmoddi4+0xa2>
 800047a:	40f3      	lsrs	r3, r6
 800047c:	2200      	movs	r2, #0
 800047e:	e9c5 3200 	strd	r3, r2, [r5]
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	428b      	cmp	r3, r1
 8000488:	d905      	bls.n	8000496 <__udivmoddi4+0xb6>
 800048a:	b10d      	cbz	r5, 8000490 <__udivmoddi4+0xb0>
 800048c:	e9c5 0100 	strd	r0, r1, [r5]
 8000490:	2100      	movs	r1, #0
 8000492:	4608      	mov	r0, r1
 8000494:	e7f5      	b.n	8000482 <__udivmoddi4+0xa2>
 8000496:	fab3 f183 	clz	r1, r3
 800049a:	2900      	cmp	r1, #0
 800049c:	d146      	bne.n	800052c <__udivmoddi4+0x14c>
 800049e:	4573      	cmp	r3, lr
 80004a0:	d302      	bcc.n	80004a8 <__udivmoddi4+0xc8>
 80004a2:	4282      	cmp	r2, r0
 80004a4:	f200 8105 	bhi.w	80006b2 <__udivmoddi4+0x2d2>
 80004a8:	1a84      	subs	r4, r0, r2
 80004aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80004ae:	2001      	movs	r0, #1
 80004b0:	4690      	mov	r8, r2
 80004b2:	2d00      	cmp	r5, #0
 80004b4:	d0e5      	beq.n	8000482 <__udivmoddi4+0xa2>
 80004b6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ba:	e7e2      	b.n	8000482 <__udivmoddi4+0xa2>
 80004bc:	2a00      	cmp	r2, #0
 80004be:	f000 8090 	beq.w	80005e2 <__udivmoddi4+0x202>
 80004c2:	fab2 f682 	clz	r6, r2
 80004c6:	2e00      	cmp	r6, #0
 80004c8:	f040 80a4 	bne.w	8000614 <__udivmoddi4+0x234>
 80004cc:	1a8a      	subs	r2, r1, r2
 80004ce:	0c03      	lsrs	r3, r0, #16
 80004d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004d4:	b280      	uxth	r0, r0
 80004d6:	b2bc      	uxth	r4, r7
 80004d8:	2101      	movs	r1, #1
 80004da:	fbb2 fcfe 	udiv	ip, r2, lr
 80004de:	fb0e 221c 	mls	r2, lr, ip, r2
 80004e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004e6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ea:	429a      	cmp	r2, r3
 80004ec:	d907      	bls.n	80004fe <__udivmoddi4+0x11e>
 80004ee:	18fb      	adds	r3, r7, r3
 80004f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004f4:	d202      	bcs.n	80004fc <__udivmoddi4+0x11c>
 80004f6:	429a      	cmp	r2, r3
 80004f8:	f200 80e0 	bhi.w	80006bc <__udivmoddi4+0x2dc>
 80004fc:	46c4      	mov	ip, r8
 80004fe:	1a9b      	subs	r3, r3, r2
 8000500:	fbb3 f2fe 	udiv	r2, r3, lr
 8000504:	fb0e 3312 	mls	r3, lr, r2, r3
 8000508:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800050c:	fb02 f404 	mul.w	r4, r2, r4
 8000510:	429c      	cmp	r4, r3
 8000512:	d907      	bls.n	8000524 <__udivmoddi4+0x144>
 8000514:	18fb      	adds	r3, r7, r3
 8000516:	f102 30ff 	add.w	r0, r2, #4294967295
 800051a:	d202      	bcs.n	8000522 <__udivmoddi4+0x142>
 800051c:	429c      	cmp	r4, r3
 800051e:	f200 80ca 	bhi.w	80006b6 <__udivmoddi4+0x2d6>
 8000522:	4602      	mov	r2, r0
 8000524:	1b1b      	subs	r3, r3, r4
 8000526:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800052a:	e7a5      	b.n	8000478 <__udivmoddi4+0x98>
 800052c:	f1c1 0620 	rsb	r6, r1, #32
 8000530:	408b      	lsls	r3, r1
 8000532:	fa22 f706 	lsr.w	r7, r2, r6
 8000536:	431f      	orrs	r7, r3
 8000538:	fa0e f401 	lsl.w	r4, lr, r1
 800053c:	fa20 f306 	lsr.w	r3, r0, r6
 8000540:	fa2e fe06 	lsr.w	lr, lr, r6
 8000544:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000548:	4323      	orrs	r3, r4
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	fa1f fc87 	uxth.w	ip, r7
 8000552:	fbbe f0f9 	udiv	r0, lr, r9
 8000556:	0c1c      	lsrs	r4, r3, #16
 8000558:	fb09 ee10 	mls	lr, r9, r0, lr
 800055c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000560:	fb00 fe0c 	mul.w	lr, r0, ip
 8000564:	45a6      	cmp	lr, r4
 8000566:	fa02 f201 	lsl.w	r2, r2, r1
 800056a:	d909      	bls.n	8000580 <__udivmoddi4+0x1a0>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000572:	f080 809c 	bcs.w	80006ae <__udivmoddi4+0x2ce>
 8000576:	45a6      	cmp	lr, r4
 8000578:	f240 8099 	bls.w	80006ae <__udivmoddi4+0x2ce>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	eba4 040e 	sub.w	r4, r4, lr
 8000584:	fa1f fe83 	uxth.w	lr, r3
 8000588:	fbb4 f3f9 	udiv	r3, r4, r9
 800058c:	fb09 4413 	mls	r4, r9, r3, r4
 8000590:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000594:	fb03 fc0c 	mul.w	ip, r3, ip
 8000598:	45a4      	cmp	ip, r4
 800059a:	d908      	bls.n	80005ae <__udivmoddi4+0x1ce>
 800059c:	193c      	adds	r4, r7, r4
 800059e:	f103 3eff 	add.w	lr, r3, #4294967295
 80005a2:	f080 8082 	bcs.w	80006aa <__udivmoddi4+0x2ca>
 80005a6:	45a4      	cmp	ip, r4
 80005a8:	d97f      	bls.n	80006aa <__udivmoddi4+0x2ca>
 80005aa:	3b02      	subs	r3, #2
 80005ac:	443c      	add	r4, r7
 80005ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005b2:	eba4 040c 	sub.w	r4, r4, ip
 80005b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ba:	4564      	cmp	r4, ip
 80005bc:	4673      	mov	r3, lr
 80005be:	46e1      	mov	r9, ip
 80005c0:	d362      	bcc.n	8000688 <__udivmoddi4+0x2a8>
 80005c2:	d05f      	beq.n	8000684 <__udivmoddi4+0x2a4>
 80005c4:	b15d      	cbz	r5, 80005de <__udivmoddi4+0x1fe>
 80005c6:	ebb8 0203 	subs.w	r2, r8, r3
 80005ca:	eb64 0409 	sbc.w	r4, r4, r9
 80005ce:	fa04 f606 	lsl.w	r6, r4, r6
 80005d2:	fa22 f301 	lsr.w	r3, r2, r1
 80005d6:	431e      	orrs	r6, r3
 80005d8:	40cc      	lsrs	r4, r1
 80005da:	e9c5 6400 	strd	r6, r4, [r5]
 80005de:	2100      	movs	r1, #0
 80005e0:	e74f      	b.n	8000482 <__udivmoddi4+0xa2>
 80005e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005e6:	0c01      	lsrs	r1, r0, #16
 80005e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005ec:	b280      	uxth	r0, r0
 80005ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005f2:	463b      	mov	r3, r7
 80005f4:	4638      	mov	r0, r7
 80005f6:	463c      	mov	r4, r7
 80005f8:	46b8      	mov	r8, r7
 80005fa:	46be      	mov	lr, r7
 80005fc:	2620      	movs	r6, #32
 80005fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000602:	eba2 0208 	sub.w	r2, r2, r8
 8000606:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800060a:	e766      	b.n	80004da <__udivmoddi4+0xfa>
 800060c:	4601      	mov	r1, r0
 800060e:	e718      	b.n	8000442 <__udivmoddi4+0x62>
 8000610:	4610      	mov	r0, r2
 8000612:	e72c      	b.n	800046e <__udivmoddi4+0x8e>
 8000614:	f1c6 0220 	rsb	r2, r6, #32
 8000618:	fa2e f302 	lsr.w	r3, lr, r2
 800061c:	40b7      	lsls	r7, r6
 800061e:	40b1      	lsls	r1, r6
 8000620:	fa20 f202 	lsr.w	r2, r0, r2
 8000624:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000628:	430a      	orrs	r2, r1
 800062a:	fbb3 f8fe 	udiv	r8, r3, lr
 800062e:	b2bc      	uxth	r4, r7
 8000630:	fb0e 3318 	mls	r3, lr, r8, r3
 8000634:	0c11      	lsrs	r1, r2, #16
 8000636:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800063a:	fb08 f904 	mul.w	r9, r8, r4
 800063e:	40b0      	lsls	r0, r6
 8000640:	4589      	cmp	r9, r1
 8000642:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000646:	b280      	uxth	r0, r0
 8000648:	d93e      	bls.n	80006c8 <__udivmoddi4+0x2e8>
 800064a:	1879      	adds	r1, r7, r1
 800064c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000650:	d201      	bcs.n	8000656 <__udivmoddi4+0x276>
 8000652:	4589      	cmp	r9, r1
 8000654:	d81f      	bhi.n	8000696 <__udivmoddi4+0x2b6>
 8000656:	eba1 0109 	sub.w	r1, r1, r9
 800065a:	fbb1 f9fe 	udiv	r9, r1, lr
 800065e:	fb09 f804 	mul.w	r8, r9, r4
 8000662:	fb0e 1119 	mls	r1, lr, r9, r1
 8000666:	b292      	uxth	r2, r2
 8000668:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800066c:	4542      	cmp	r2, r8
 800066e:	d229      	bcs.n	80006c4 <__udivmoddi4+0x2e4>
 8000670:	18ba      	adds	r2, r7, r2
 8000672:	f109 31ff 	add.w	r1, r9, #4294967295
 8000676:	d2c4      	bcs.n	8000602 <__udivmoddi4+0x222>
 8000678:	4542      	cmp	r2, r8
 800067a:	d2c2      	bcs.n	8000602 <__udivmoddi4+0x222>
 800067c:	f1a9 0102 	sub.w	r1, r9, #2
 8000680:	443a      	add	r2, r7
 8000682:	e7be      	b.n	8000602 <__udivmoddi4+0x222>
 8000684:	45f0      	cmp	r8, lr
 8000686:	d29d      	bcs.n	80005c4 <__udivmoddi4+0x1e4>
 8000688:	ebbe 0302 	subs.w	r3, lr, r2
 800068c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000690:	3801      	subs	r0, #1
 8000692:	46e1      	mov	r9, ip
 8000694:	e796      	b.n	80005c4 <__udivmoddi4+0x1e4>
 8000696:	eba7 0909 	sub.w	r9, r7, r9
 800069a:	4449      	add	r1, r9
 800069c:	f1a8 0c02 	sub.w	ip, r8, #2
 80006a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a4:	fb09 f804 	mul.w	r8, r9, r4
 80006a8:	e7db      	b.n	8000662 <__udivmoddi4+0x282>
 80006aa:	4673      	mov	r3, lr
 80006ac:	e77f      	b.n	80005ae <__udivmoddi4+0x1ce>
 80006ae:	4650      	mov	r0, sl
 80006b0:	e766      	b.n	8000580 <__udivmoddi4+0x1a0>
 80006b2:	4608      	mov	r0, r1
 80006b4:	e6fd      	b.n	80004b2 <__udivmoddi4+0xd2>
 80006b6:	443b      	add	r3, r7
 80006b8:	3a02      	subs	r2, #2
 80006ba:	e733      	b.n	8000524 <__udivmoddi4+0x144>
 80006bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80006c0:	443b      	add	r3, r7
 80006c2:	e71c      	b.n	80004fe <__udivmoddi4+0x11e>
 80006c4:	4649      	mov	r1, r9
 80006c6:	e79c      	b.n	8000602 <__udivmoddi4+0x222>
 80006c8:	eba1 0109 	sub.w	r1, r1, r9
 80006cc:	46c4      	mov	ip, r8
 80006ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80006d2:	fb09 f804 	mul.w	r8, r9, r4
 80006d6:	e7c4      	b.n	8000662 <__udivmoddi4+0x282>

080006d8 <__aeabi_idiv0>:
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop

080006dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006e0:	4b49      	ldr	r3, [pc, #292]	@ (8000808 <SystemInit+0x12c>)
 80006e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006e6:	4a48      	ldr	r2, [pc, #288]	@ (8000808 <SystemInit+0x12c>)
 80006e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006f0:	4b45      	ldr	r3, [pc, #276]	@ (8000808 <SystemInit+0x12c>)
 80006f2:	691b      	ldr	r3, [r3, #16]
 80006f4:	4a44      	ldr	r2, [pc, #272]	@ (8000808 <SystemInit+0x12c>)
 80006f6:	f043 0310 	orr.w	r3, r3, #16
 80006fa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006fc:	4b43      	ldr	r3, [pc, #268]	@ (800080c <SystemInit+0x130>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f003 030f 	and.w	r3, r3, #15
 8000704:	2b06      	cmp	r3, #6
 8000706:	d807      	bhi.n	8000718 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000708:	4b40      	ldr	r3, [pc, #256]	@ (800080c <SystemInit+0x130>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f023 030f 	bic.w	r3, r3, #15
 8000710:	4a3e      	ldr	r2, [pc, #248]	@ (800080c <SystemInit+0x130>)
 8000712:	f043 0307 	orr.w	r3, r3, #7
 8000716:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000718:	4b3d      	ldr	r3, [pc, #244]	@ (8000810 <SystemInit+0x134>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a3c      	ldr	r2, [pc, #240]	@ (8000810 <SystemInit+0x134>)
 800071e:	f043 0301 	orr.w	r3, r3, #1
 8000722:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000724:	4b3a      	ldr	r3, [pc, #232]	@ (8000810 <SystemInit+0x134>)
 8000726:	2200      	movs	r2, #0
 8000728:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800072a:	4b39      	ldr	r3, [pc, #228]	@ (8000810 <SystemInit+0x134>)
 800072c:	681a      	ldr	r2, [r3, #0]
 800072e:	4938      	ldr	r1, [pc, #224]	@ (8000810 <SystemInit+0x134>)
 8000730:	4b38      	ldr	r3, [pc, #224]	@ (8000814 <SystemInit+0x138>)
 8000732:	4013      	ands	r3, r2
 8000734:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000736:	4b35      	ldr	r3, [pc, #212]	@ (800080c <SystemInit+0x130>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	f003 0308 	and.w	r3, r3, #8
 800073e:	2b00      	cmp	r3, #0
 8000740:	d007      	beq.n	8000752 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000742:	4b32      	ldr	r3, [pc, #200]	@ (800080c <SystemInit+0x130>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f023 030f 	bic.w	r3, r3, #15
 800074a:	4a30      	ldr	r2, [pc, #192]	@ (800080c <SystemInit+0x130>)
 800074c:	f043 0307 	orr.w	r3, r3, #7
 8000750:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000752:	4b2f      	ldr	r3, [pc, #188]	@ (8000810 <SystemInit+0x134>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000758:	4b2d      	ldr	r3, [pc, #180]	@ (8000810 <SystemInit+0x134>)
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800075e:	4b2c      	ldr	r3, [pc, #176]	@ (8000810 <SystemInit+0x134>)
 8000760:	2200      	movs	r2, #0
 8000762:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000764:	4b2a      	ldr	r3, [pc, #168]	@ (8000810 <SystemInit+0x134>)
 8000766:	4a2c      	ldr	r2, [pc, #176]	@ (8000818 <SystemInit+0x13c>)
 8000768:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800076a:	4b29      	ldr	r3, [pc, #164]	@ (8000810 <SystemInit+0x134>)
 800076c:	4a2b      	ldr	r2, [pc, #172]	@ (800081c <SystemInit+0x140>)
 800076e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000770:	4b27      	ldr	r3, [pc, #156]	@ (8000810 <SystemInit+0x134>)
 8000772:	4a2b      	ldr	r2, [pc, #172]	@ (8000820 <SystemInit+0x144>)
 8000774:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000776:	4b26      	ldr	r3, [pc, #152]	@ (8000810 <SystemInit+0x134>)
 8000778:	2200      	movs	r2, #0
 800077a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800077c:	4b24      	ldr	r3, [pc, #144]	@ (8000810 <SystemInit+0x134>)
 800077e:	4a28      	ldr	r2, [pc, #160]	@ (8000820 <SystemInit+0x144>)
 8000780:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000782:	4b23      	ldr	r3, [pc, #140]	@ (8000810 <SystemInit+0x134>)
 8000784:	2200      	movs	r2, #0
 8000786:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000788:	4b21      	ldr	r3, [pc, #132]	@ (8000810 <SystemInit+0x134>)
 800078a:	4a25      	ldr	r2, [pc, #148]	@ (8000820 <SystemInit+0x144>)
 800078c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800078e:	4b20      	ldr	r3, [pc, #128]	@ (8000810 <SystemInit+0x134>)
 8000790:	2200      	movs	r2, #0
 8000792:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000794:	4b1e      	ldr	r3, [pc, #120]	@ (8000810 <SystemInit+0x134>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a1d      	ldr	r2, [pc, #116]	@ (8000810 <SystemInit+0x134>)
 800079a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800079e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80007a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000810 <SystemInit+0x134>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80007a6:	4b1f      	ldr	r3, [pc, #124]	@ (8000824 <SystemInit+0x148>)
 80007a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007aa:	4a1e      	ldr	r2, [pc, #120]	@ (8000824 <SystemInit+0x148>)
 80007ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007b0:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80007b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000828 <SystemInit+0x14c>)
 80007b4:	681a      	ldr	r2, [r3, #0]
 80007b6:	4b1d      	ldr	r3, [pc, #116]	@ (800082c <SystemInit+0x150>)
 80007b8:	4013      	ands	r3, r2
 80007ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80007be:	d202      	bcs.n	80007c6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80007c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000830 <SystemInit+0x154>)
 80007c2:	2201      	movs	r2, #1
 80007c4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80007c6:	4b12      	ldr	r3, [pc, #72]	@ (8000810 <SystemInit+0x134>)
 80007c8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d113      	bne.n	80007fc <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80007d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000810 <SystemInit+0x134>)
 80007d6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007da:	4a0d      	ldr	r2, [pc, #52]	@ (8000810 <SystemInit+0x134>)
 80007dc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007e0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80007e4:	4b13      	ldr	r3, [pc, #76]	@ (8000834 <SystemInit+0x158>)
 80007e6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80007ea:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80007ec:	4b08      	ldr	r3, [pc, #32]	@ (8000810 <SystemInit+0x134>)
 80007ee:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007f2:	4a07      	ldr	r2, [pc, #28]	@ (8000810 <SystemInit+0x134>)
 80007f4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80007f8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80007fc:	bf00      	nop
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	e000ed00 	.word	0xe000ed00
 800080c:	52002000 	.word	0x52002000
 8000810:	58024400 	.word	0x58024400
 8000814:	eaf6ed7f 	.word	0xeaf6ed7f
 8000818:	02020200 	.word	0x02020200
 800081c:	01ff0000 	.word	0x01ff0000
 8000820:	01010280 	.word	0x01010280
 8000824:	580000c0 	.word	0x580000c0
 8000828:	5c001000 	.word	0x5c001000
 800082c:	ffff0000 	.word	0xffff0000
 8000830:	51008108 	.word	0x51008108
 8000834:	52004000 	.word	0x52004000

08000838 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 800083c:	4b09      	ldr	r3, [pc, #36]	@ (8000864 <ExitRun0Mode+0x2c>)
 800083e:	68db      	ldr	r3, [r3, #12]
 8000840:	4a08      	ldr	r2, [pc, #32]	@ (8000864 <ExitRun0Mode+0x2c>)
 8000842:	f023 0302 	bic.w	r3, r3, #2
 8000846:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000848:	bf00      	nop
 800084a:	4b06      	ldr	r3, [pc, #24]	@ (8000864 <ExitRun0Mode+0x2c>)
 800084c:	685b      	ldr	r3, [r3, #4]
 800084e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000852:	2b00      	cmp	r3, #0
 8000854:	d0f9      	beq.n	800084a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000856:	bf00      	nop
 8000858:	bf00      	nop
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	58024800 	.word	0x58024800

08000868 <HAL_TIM_PeriodElapsedCallback>:

double TC[MAX_TC_CH] = {0};
uint8_t sv[MAX_SV_NUM] = {0};

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000878:	d13d      	bne.n	80008f6 <HAL_TIM_PeriodElapsedCallback+0x8e>
	{
		// 1ms마다 실행되는 코드
		f1ms = true;
 800087a:	4b21      	ldr	r3, [pc, #132]	@ (8000900 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800087c:	2201      	movs	r2, #1
 800087e:	701a      	strb	r2, [r3, #0]
		cnt1ms++;
 8000880:	4b20      	ldr	r3, [pc, #128]	@ (8000904 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	3301      	adds	r3, #1
 8000886:	4a1f      	ldr	r2, [pc, #124]	@ (8000904 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000888:	6013      	str	r3, [r2, #0]
		systemtick++;
 800088a:	4b1f      	ldr	r3, [pc, #124]	@ (8000908 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	3301      	adds	r3, #1
 8000890:	4a1d      	ldr	r2, [pc, #116]	@ (8000908 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000892:	6013      	str	r3, [r2, #0]

		if (cnt1ms%10 == 0)
 8000894:	4b1b      	ldr	r3, [pc, #108]	@ (8000904 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000896:	6819      	ldr	r1, [r3, #0]
 8000898:	4b1c      	ldr	r3, [pc, #112]	@ (800090c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800089a:	fba3 2301 	umull	r2, r3, r3, r1
 800089e:	08da      	lsrs	r2, r3, #3
 80008a0:	4613      	mov	r3, r2
 80008a2:	009b      	lsls	r3, r3, #2
 80008a4:	4413      	add	r3, r2
 80008a6:	005b      	lsls	r3, r3, #1
 80008a8:	1aca      	subs	r2, r1, r3
 80008aa:	2a00      	cmp	r2, #0
 80008ac:	d104      	bne.n	80008b8 <HAL_TIM_PeriodElapsedCallback+0x50>
		{
			IgnitorSwitching();
 80008ae:	f000 fddf 	bl	8001470 <IgnitorSwitching>
			f10ms = true;
 80008b2:	4b17      	ldr	r3, [pc, #92]	@ (8000910 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80008b4:	2201      	movs	r2, #1
 80008b6:	701a      	strb	r2, [r3, #0]
		}

		if (cnt1ms%100 == 0)
 80008b8:	4b12      	ldr	r3, [pc, #72]	@ (8000904 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	4b15      	ldr	r3, [pc, #84]	@ (8000914 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80008be:	fba3 1302 	umull	r1, r3, r3, r2
 80008c2:	095b      	lsrs	r3, r3, #5
 80008c4:	2164      	movs	r1, #100	@ 0x64
 80008c6:	fb01 f303 	mul.w	r3, r1, r3
 80008ca:	1ad3      	subs	r3, r2, r3
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d102      	bne.n	80008d6 <HAL_TIM_PeriodElapsedCallback+0x6e>
		{
			f100ms = true;
 80008d0:	4b11      	ldr	r3, [pc, #68]	@ (8000918 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80008d2:	2201      	movs	r2, #1
 80008d4:	701a      	strb	r2, [r3, #0]
		}

		if (cnt1ms%1000 == 0)
 80008d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000904 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	4b10      	ldr	r3, [pc, #64]	@ (800091c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80008dc:	fba3 1302 	umull	r1, r3, r3, r2
 80008e0:	099b      	lsrs	r3, r3, #6
 80008e2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80008e6:	fb01 f303 	mul.w	r3, r1, r3
 80008ea:	1ad3      	subs	r3, r2, r3
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d102      	bne.n	80008f6 <HAL_TIM_PeriodElapsedCallback+0x8e>
		{
			f1000ms = true;
 80008f0:	4b0b      	ldr	r3, [pc, #44]	@ (8000920 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80008f2:	2201      	movs	r2, #1
 80008f4:	701a      	strb	r2, [r3, #0]
		}


	}
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	24000470 	.word	0x24000470
 8000904:	24000474 	.word	0x24000474
 8000908:	2400046c 	.word	0x2400046c
 800090c:	cccccccd 	.word	0xcccccccd
 8000910:	24000471 	.word	0x24000471
 8000914:	51eb851f 	.word	0x51eb851f
 8000918:	24000472 	.word	0x24000472
 800091c:	10624dd3 	.word	0x10624dd3
 8000920:	24000473 	.word	0x24000473

08000924 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	f5ad 7d0c 	sub.w	sp, sp, #560	@ 0x230
 800092a:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800092c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000930:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000934:	bf00      	nop
 8000936:	4bac      	ldr	r3, [pc, #688]	@ (8000be8 <main+0x2c4>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800093e:	2b00      	cmp	r3, #0
 8000940:	d006      	beq.n	8000950 <main+0x2c>
 8000942:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 8000946:	1e5a      	subs	r2, r3, #1
 8000948:	f8c7 222c 	str.w	r2, [r7, #556]	@ 0x22c
 800094c:	2b00      	cmp	r3, #0
 800094e:	dcf2      	bgt.n	8000936 <main+0x12>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000950:	f002 fc96 	bl	8003280 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000954:	f000 f96a 	bl	8000c2c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000958:	4ba3      	ldr	r3, [pc, #652]	@ (8000be8 <main+0x2c4>)
 800095a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800095e:	4aa2      	ldr	r2, [pc, #648]	@ (8000be8 <main+0x2c4>)
 8000960:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000964:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000968:	4b9f      	ldr	r3, [pc, #636]	@ (8000be8 <main+0x2c4>)
 800096a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800096e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000972:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
 8000976:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800097a:	2000      	movs	r0, #0
 800097c:	f007 fc5e 	bl	800823c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000980:	2100      	movs	r1, #0
 8000982:	2000      	movs	r0, #0
 8000984:	f007 fc74 	bl	8008270 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000988:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800098c:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000990:	bf00      	nop
 8000992:	4b95      	ldr	r3, [pc, #596]	@ (8000be8 <main+0x2c4>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800099a:	2b00      	cmp	r3, #0
 800099c:	d106      	bne.n	80009ac <main+0x88>
 800099e:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 80009a2:	1e5a      	subs	r2, r3, #1
 80009a4:	f8c7 222c 	str.w	r2, [r7, #556]	@ 0x22c
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	dcf2      	bgt.n	8000992 <main+0x6e>
if ( timeout < 0 )
 80009ac:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	da01      	bge.n	80009b8 <main+0x94>
{
Error_Handler();
 80009b4:	f000 fd1a 	bl	80013ec <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009b8:	f000 fc0a 	bl	80011d0 <MX_GPIO_Init>
  MX_DMA_Init();
 80009bc:	f000 fbe8 	bl	8001190 <MX_DMA_Init>
  MX_SPI1_Init();
 80009c0:	f000 faf6 	bl	8000fb0 <MX_SPI1_Init>
  MX_TIM2_Init();
 80009c4:	f000 fb4a 	bl	800105c <MX_TIM2_Init>
  MX_ADC1_Init();
 80009c8:	f000 f9ac 	bl	8000d24 <MX_ADC1_Init>
  MX_UART4_Init();
 80009cc:	f000 fb94 	bl	80010f8 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */


  HAL_TIM_Base_Start_IT(&htim2);
 80009d0:	4886      	ldr	r0, [pc, #536]	@ (8000bec <main+0x2c8>)
 80009d2:	f00b ff1b 	bl	800c80c <HAL_TIM_Base_Start_IT>

  InitPT();
 80009d6:	f000 fd0f 	bl	80013f8 <InitPT>
  InitTMTC();
 80009da:	f002 f93b 	bl	8002c54 <InitTMTC>


  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80009de:	2000      	movs	r0, #0
 80009e0:	f002 f9f8 	bl	8002dd4 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 80009e4:	2001      	movs	r0, #1
 80009e6:	f002 f9f5 	bl	8002dd4 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80009ea:	2002      	movs	r0, #2
 80009ec:	f002 f9f2 	bl	8002dd4 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80009f0:	2101      	movs	r1, #1
 80009f2:	2000      	movs	r0, #0
 80009f4:	f002 fae2 	bl	8002fbc <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80009f8:	4b7d      	ldr	r3, [pc, #500]	@ (8000bf0 <main+0x2cc>)
 80009fa:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009fe:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000a00:	4b7b      	ldr	r3, [pc, #492]	@ (8000bf0 <main+0x2cc>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000a06:	4b7a      	ldr	r3, [pc, #488]	@ (8000bf0 <main+0x2cc>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000a0c:	4b78      	ldr	r3, [pc, #480]	@ (8000bf0 <main+0x2cc>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000a12:	4b77      	ldr	r3, [pc, #476]	@ (8000bf0 <main+0x2cc>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000a18:	4975      	ldr	r1, [pc, #468]	@ (8000bf0 <main+0x2cc>)
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	f002 fb52 	bl	80030c4 <BSP_COM_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <main+0x106>
  {
    Error_Handler();
 8000a26:	f000 fce1 	bl	80013ec <Error_Handler>
  }

  /* USER CODE BEGIN BSP */
  /* -- Sample board code to send message over COM1 port ---- */
  printf("Welcome to STM32 world !\n\r");
 8000a2a:	4872      	ldr	r0, [pc, #456]	@ (8000bf4 <main+0x2d0>)
 8000a2c:	f00f fd44 	bl	80104b8 <iprintf>
  /* -- Sample board code to switch on leds ---- */
  BSP_LED_On(LED_GREEN);
 8000a30:	2000      	movs	r0, #0
 8000a32:	f002 fa45 	bl	8002ec0 <BSP_LED_On>
  BSP_LED_On(LED_YELLOW);
 8000a36:	2001      	movs	r0, #1
 8000a38:	f002 fa42 	bl	8002ec0 <BSP_LED_On>
  BSP_LED_Off(LED_RED);
 8000a3c:	2002      	movs	r0, #2
 8000a3e:	f002 fa69 	bl	8002f14 <BSP_LED_Off>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (fTC == true)
 8000a42:	4b6d      	ldr	r3, [pc, #436]	@ (8000bf8 <main+0x2d4>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	2b01      	cmp	r3, #1
 8000a48:	d105      	bne.n	8000a56 <main+0x132>
	  {
		  fTC = false;
 8000a4a:	4b6b      	ldr	r3, [pc, #428]	@ (8000bf8 <main+0x2d4>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	701a      	strb	r2, [r3, #0]

		  SVCmdDecoding(sv);
 8000a50:	486a      	ldr	r0, [pc, #424]	@ (8000bfc <main+0x2d8>)
 8000a52:	f002 f93d 	bl	8002cd0 <SVCmdDecoding>

	  } // if (fTC == true)

	  if (fTemp == true)
 8000a56:	4b6a      	ldr	r3, [pc, #424]	@ (8000c00 <main+0x2dc>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d105      	bne.n	8000a6a <main+0x146>
	  {
		  fTemp = false;
 8000a5e:	4b68      	ldr	r3, [pc, #416]	@ (8000c00 <main+0x2dc>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	701a      	strb	r2, [r3, #0]
		  GetTemp(TC);
 8000a64:	4867      	ldr	r0, [pc, #412]	@ (8000c04 <main+0x2e0>)
 8000a66:	f002 f889 	bl	8002b7c <GetTemp>
	  }

	  if (f10ms == true)
 8000a6a:	4b67      	ldr	r3, [pc, #412]	@ (8000c08 <main+0x2e4>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	2b01      	cmp	r3, #1
 8000a70:	f040 80ad 	bne.w	8000bce <main+0x2aa>
	  {
		  f10ms = false;
 8000a74:	4b64      	ldr	r3, [pc, #400]	@ (8000c08 <main+0x2e4>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	701a      	strb	r2, [r3, #0]

		  uint8_t tx_buf[512]={0};
 8000a7a:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8000a7e:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000a82:	4618      	mov	r0, r3
 8000a84:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a88:	461a      	mov	r2, r3
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	f00f fe20 	bl	80106d0 <memset>
		  uint8_t temp_buf[32]={0};
 8000a90:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8000a94:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8000a98:	4618      	mov	r0, r3
 8000a9a:	2320      	movs	r3, #32
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	f00f fe16 	bl	80106d0 <memset>

		  SVUpdate(sv);
 8000aa4:	4855      	ldr	r0, [pc, #340]	@ (8000bfc <main+0x2d8>)
 8000aa6:	f000 fd09 	bl	80014bc <SVUpdate>
		  MAX3188_StartRead();
 8000aaa:	f001 fff3 	bl	8002a94 <MAX3188_StartRead>
		  GetADCRaw(ADC_results);
 8000aae:	4857      	ldr	r0, [pc, #348]	@ (8000c0c <main+0x2e8>)
 8000ab0:	f000 fcb4 	bl	800141c <GetADCRaw>

		  sprintf((char*)tx_buf,"IGRVT,%lu",systemtick);
 8000ab4:	4b56      	ldr	r3, [pc, #344]	@ (8000c10 <main+0x2ec>)
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000abc:	4955      	ldr	r1, [pc, #340]	@ (8000c14 <main+0x2f0>)
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f00f fd0c 	bl	80104dc <siprintf>
		  for (uint8_t i = 0; i < MAX_SV_NUM; i++)
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
 8000aca:	e015      	b.n	8000af8 <main+0x1d4>
		  {
			  sprintf((char*)temp_buf,",%u",sv[i]);
 8000acc:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
 8000ad0:	4a4a      	ldr	r2, [pc, #296]	@ (8000bfc <main+0x2d8>)
 8000ad2:	5cd3      	ldrb	r3, [r2, r3]
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	1d3b      	adds	r3, r7, #4
 8000ad8:	494f      	ldr	r1, [pc, #316]	@ (8000c18 <main+0x2f4>)
 8000ada:	4618      	mov	r0, r3
 8000adc:	f00f fcfe 	bl	80104dc <siprintf>
			  strcat((char*)tx_buf,(char*)temp_buf);
 8000ae0:	1d3a      	adds	r2, r7, #4
 8000ae2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ae6:	4611      	mov	r1, r2
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f00f fdf9 	bl	80106e0 <strcat>
		  for (uint8_t i = 0; i < MAX_SV_NUM; i++)
 8000aee:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
 8000af2:	3301      	adds	r3, #1
 8000af4:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
 8000af8:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
 8000afc:	2b05      	cmp	r3, #5
 8000afe:	d9e5      	bls.n	8000acc <main+0x1a8>

		  //sprintf((char*)temp_buf,";");
		  //strcat((char*)tx_buf,(char*)temp_buf);
		  //sprintf((char*)temp_buf,"%d",(int)(TC[0]*10.0));
		  //strcat((char*)tx_buf,(char*)temp_buf);
		  for (uint8_t i = 0; i < MAX_TC_CH; i++)
 8000b00:	2300      	movs	r3, #0
 8000b02:	f887 322a 	strb.w	r3, [r7, #554]	@ 0x22a
 8000b06:	e01f      	b.n	8000b48 <main+0x224>
		  {
			  sprintf((char*)temp_buf,",%d",(int)(TC[i]*10.0));
 8000b08:	f897 322a 	ldrb.w	r3, [r7, #554]	@ 0x22a
 8000b0c:	4a3d      	ldr	r2, [pc, #244]	@ (8000c04 <main+0x2e0>)
 8000b0e:	00db      	lsls	r3, r3, #3
 8000b10:	4413      	add	r3, r2
 8000b12:	ed93 7b00 	vldr	d7, [r3]
 8000b16:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8000b1a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000b1e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000b22:	1d3b      	adds	r3, r7, #4
 8000b24:	ee17 2a90 	vmov	r2, s15
 8000b28:	493c      	ldr	r1, [pc, #240]	@ (8000c1c <main+0x2f8>)
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f00f fcd6 	bl	80104dc <siprintf>
			  strcat((char*)tx_buf,(char*)temp_buf);
 8000b30:	1d3a      	adds	r2, r7, #4
 8000b32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b36:	4611      	mov	r1, r2
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f00f fdd1 	bl	80106e0 <strcat>
		  for (uint8_t i = 0; i < MAX_TC_CH; i++)
 8000b3e:	f897 322a 	ldrb.w	r3, [r7, #554]	@ 0x22a
 8000b42:	3301      	adds	r3, #1
 8000b44:	f887 322a 	strb.w	r3, [r7, #554]	@ 0x22a
 8000b48:	f897 322a 	ldrb.w	r3, [r7, #554]	@ 0x22a
 8000b4c:	2b03      	cmp	r3, #3
 8000b4e:	d9db      	bls.n	8000b08 <main+0x1e4>
//
//		  sprintf((char*)temp_buf,";");
//		  strcat((char*)tx_buf,(char*)temp_buf);
//		  sprintf((char*)temp_buf,"%u",ADC_results[0]);
//		  strcat((char*)tx_buf,(char*)temp_buf);
		  for (uint8_t i = 0; i < N_ADC_CH; i++)
 8000b50:	2300      	movs	r3, #0
 8000b52:	f887 3229 	strb.w	r3, [r7, #553]	@ 0x229
 8000b56:	e016      	b.n	8000b86 <main+0x262>
		  {
			  sprintf((char*)temp_buf,",%u",ADC_results[i]);
 8000b58:	f897 3229 	ldrb.w	r3, [r7, #553]	@ 0x229
 8000b5c:	4a2b      	ldr	r2, [pc, #172]	@ (8000c0c <main+0x2e8>)
 8000b5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b62:	461a      	mov	r2, r3
 8000b64:	1d3b      	adds	r3, r7, #4
 8000b66:	492c      	ldr	r1, [pc, #176]	@ (8000c18 <main+0x2f4>)
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f00f fcb7 	bl	80104dc <siprintf>
			  strcat((char*)tx_buf,(char*)temp_buf);
 8000b6e:	1d3a      	adds	r2, r7, #4
 8000b70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b74:	4611      	mov	r1, r2
 8000b76:	4618      	mov	r0, r3
 8000b78:	f00f fdb2 	bl	80106e0 <strcat>
		  for (uint8_t i = 0; i < N_ADC_CH; i++)
 8000b7c:	f897 3229 	ldrb.w	r3, [r7, #553]	@ 0x229
 8000b80:	3301      	adds	r3, #1
 8000b82:	f887 3229 	strb.w	r3, [r7, #553]	@ 0x229
 8000b86:	f897 3229 	ldrb.w	r3, [r7, #553]	@ 0x229
 8000b8a:	2b0c      	cmp	r3, #12
 8000b8c:	d9e4      	bls.n	8000b58 <main+0x234>
		  }
		  sprintf((char*)temp_buf,",EOD");
 8000b8e:	1d3b      	adds	r3, r7, #4
 8000b90:	4923      	ldr	r1, [pc, #140]	@ (8000c20 <main+0x2fc>)
 8000b92:	4618      	mov	r0, r3
 8000b94:	f00f fca2 	bl	80104dc <siprintf>
		  strcat((char*)tx_buf,(char*)temp_buf);
 8000b98:	1d3a      	adds	r2, r7, #4
 8000b9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b9e:	4611      	mov	r1, r2
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f00f fd9d 	bl	80106e0 <strcat>
		  sprintf((char*)temp_buf,"\r\n");
 8000ba6:	1d3b      	adds	r3, r7, #4
 8000ba8:	491e      	ldr	r1, [pc, #120]	@ (8000c24 <main+0x300>)
 8000baa:	4618      	mov	r0, r3
 8000bac:	f00f fc96 	bl	80104dc <siprintf>
		  strcat((char*)tx_buf,(char*)temp_buf);
 8000bb0:	1d3a      	adds	r2, r7, #4
 8000bb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bb6:	4611      	mov	r1, r2
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f00f fd91 	bl	80106e0 <strcat>

		  SendTM(tx_buf);
 8000bbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f002 f86c 	bl	8002ca0 <SendTM>

		  BSP_LED_Toggle(LED_YELLOW);
 8000bc8:	2001      	movs	r0, #1
 8000bca:	f002 f9cd 	bl	8002f68 <BSP_LED_Toggle>
	  } //if (f10ms == true)

	  if (f1000ms == true)
 8000bce:	4b16      	ldr	r3, [pc, #88]	@ (8000c28 <main+0x304>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	f47f af35 	bne.w	8000a42 <main+0x11e>
	  {
		  f1000ms = false;//
 8000bd8:	4b13      	ldr	r3, [pc, #76]	@ (8000c28 <main+0x304>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	701a      	strb	r2, [r3, #0]
		  BSP_LED_Toggle(LED_RED);
 8000bde:	2002      	movs	r0, #2
 8000be0:	f002 f9c2 	bl	8002f68 <BSP_LED_Toggle>
	  if (fTC == true)
 8000be4:	e72d      	b.n	8000a42 <main+0x11e>
 8000be6:	bf00      	nop
 8000be8:	58024400 	.word	0x58024400
 8000bec:	2400038c 	.word	0x2400038c
 8000bf0:	24000214 	.word	0x24000214
 8000bf4:	08012750 	.word	0x08012750
 8000bf8:	24000508 	.word	0x24000508
 8000bfc:	24000498 	.word	0x24000498
 8000c00:	240004dc 	.word	0x240004dc
 8000c04:	24000478 	.word	0x24000478
 8000c08:	24000471 	.word	0x24000471
 8000c0c:	240004a0 	.word	0x240004a0
 8000c10:	2400046c 	.word	0x2400046c
 8000c14:	0801276c 	.word	0x0801276c
 8000c18:	08012778 	.word	0x08012778
 8000c1c:	0801277c 	.word	0x0801277c
 8000c20:	08012780 	.word	0x08012780
 8000c24:	08012788 	.word	0x08012788
 8000c28:	24000473 	.word	0x24000473

08000c2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b09c      	sub	sp, #112	@ 0x70
 8000c30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c36:	224c      	movs	r2, #76	@ 0x4c
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f00f fd48 	bl	80106d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c40:	1d3b      	adds	r3, r7, #4
 8000c42:	2220      	movs	r2, #32
 8000c44:	2100      	movs	r1, #0
 8000c46:	4618      	mov	r0, r3
 8000c48:	f00f fd42 	bl	80106d0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000c4c:	2004      	movs	r0, #4
 8000c4e:	f007 fb23 	bl	8008298 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c52:	2300      	movs	r3, #0
 8000c54:	603b      	str	r3, [r7, #0]
 8000c56:	4b31      	ldr	r3, [pc, #196]	@ (8000d1c <SystemClock_Config+0xf0>)
 8000c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c5a:	4a30      	ldr	r2, [pc, #192]	@ (8000d1c <SystemClock_Config+0xf0>)
 8000c5c:	f023 0301 	bic.w	r3, r3, #1
 8000c60:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000c62:	4b2e      	ldr	r3, [pc, #184]	@ (8000d1c <SystemClock_Config+0xf0>)
 8000c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	603b      	str	r3, [r7, #0]
 8000c6c:	4b2c      	ldr	r3, [pc, #176]	@ (8000d20 <SystemClock_Config+0xf4>)
 8000c6e:	699b      	ldr	r3, [r3, #24]
 8000c70:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000c74:	4a2a      	ldr	r2, [pc, #168]	@ (8000d20 <SystemClock_Config+0xf4>)
 8000c76:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c7a:	6193      	str	r3, [r2, #24]
 8000c7c:	4b28      	ldr	r3, [pc, #160]	@ (8000d20 <SystemClock_Config+0xf4>)
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c84:	603b      	str	r3, [r7, #0]
 8000c86:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c88:	bf00      	nop
 8000c8a:	4b25      	ldr	r3, [pc, #148]	@ (8000d20 <SystemClock_Config+0xf4>)
 8000c8c:	699b      	ldr	r3, [r3, #24]
 8000c8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c96:	d1f8      	bne.n	8000c8a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ca0:	2340      	movs	r3, #64	@ 0x40
 8000ca2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000cac:	2304      	movs	r3, #4
 8000cae:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000cb0:	230a      	movs	r3, #10
 8000cb2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000cc0:	230c      	movs	r3, #12
 8000cc2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ccc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f007 fb3b 	bl	800834c <HAL_RCC_OscConfig>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000cdc:	f000 fb86 	bl	80013ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ce0:	233f      	movs	r3, #63	@ 0x3f
 8000ce2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000cec:	2300      	movs	r3, #0
 8000cee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000cf4:	2340      	movs	r3, #64	@ 0x40
 8000cf6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d00:	1d3b      	adds	r3, r7, #4
 8000d02:	2101      	movs	r1, #1
 8000d04:	4618      	mov	r0, r3
 8000d06:	f007 ff7b 	bl	8008c00 <HAL_RCC_ClockConfig>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000d10:	f000 fb6c 	bl	80013ec <Error_Handler>
  }
}
 8000d14:	bf00      	nop
 8000d16:	3770      	adds	r7, #112	@ 0x70
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	58000400 	.word	0x58000400
 8000d20:	58024800 	.word	0x58024800

08000d24 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b08a      	sub	sp, #40	@ 0x28
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000d2a:	f107 031c 	add.w	r3, r7, #28
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	605a      	str	r2, [r3, #4]
 8000d34:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d36:	463b      	mov	r3, r7
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]
 8000d44:	615a      	str	r2, [r3, #20]
 8000d46:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d48:	4b8a      	ldr	r3, [pc, #552]	@ (8000f74 <MX_ADC1_Init+0x250>)
 8000d4a:	4a8b      	ldr	r2, [pc, #556]	@ (8000f78 <MX_ADC1_Init+0x254>)
 8000d4c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV64;
 8000d4e:	4b89      	ldr	r3, [pc, #548]	@ (8000f74 <MX_ADC1_Init+0x250>)
 8000d50:	f44f 1210 	mov.w	r2, #2359296	@ 0x240000
 8000d54:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d56:	4b87      	ldr	r3, [pc, #540]	@ (8000f74 <MX_ADC1_Init+0x250>)
 8000d58:	2208      	movs	r2, #8
 8000d5a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000d5c:	4b85      	ldr	r3, [pc, #532]	@ (8000f74 <MX_ADC1_Init+0x250>)
 8000d5e:	2201      	movs	r2, #1
 8000d60:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000d62:	4b84      	ldr	r3, [pc, #528]	@ (8000f74 <MX_ADC1_Init+0x250>)
 8000d64:	2208      	movs	r2, #8
 8000d66:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d68:	4b82      	ldr	r3, [pc, #520]	@ (8000f74 <MX_ADC1_Init+0x250>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d6e:	4b81      	ldr	r3, [pc, #516]	@ (8000f74 <MX_ADC1_Init+0x250>)
 8000d70:	2201      	movs	r2, #1
 8000d72:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 13;
 8000d74:	4b7f      	ldr	r3, [pc, #508]	@ (8000f74 <MX_ADC1_Init+0x250>)
 8000d76:	220d      	movs	r2, #13
 8000d78:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d7a:	4b7e      	ldr	r3, [pc, #504]	@ (8000f74 <MX_ADC1_Init+0x250>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d80:	4b7c      	ldr	r3, [pc, #496]	@ (8000f74 <MX_ADC1_Init+0x250>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d86:	4b7b      	ldr	r3, [pc, #492]	@ (8000f74 <MX_ADC1_Init+0x250>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000d8c:	4b79      	ldr	r3, [pc, #484]	@ (8000f74 <MX_ADC1_Init+0x250>)
 8000d8e:	2203      	movs	r2, #3
 8000d90:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d92:	4b78      	ldr	r3, [pc, #480]	@ (8000f74 <MX_ADC1_Init+0x250>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000d98:	4b76      	ldr	r3, [pc, #472]	@ (8000f74 <MX_ADC1_Init+0x250>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000d9e:	4b75      	ldr	r3, [pc, #468]	@ (8000f74 <MX_ADC1_Init+0x250>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8000da6:	4b73      	ldr	r3, [pc, #460]	@ (8000f74 <MX_ADC1_Init+0x250>)
 8000da8:	2201      	movs	r2, #1
 8000daa:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dac:	4871      	ldr	r0, [pc, #452]	@ (8000f74 <MX_ADC1_Init+0x250>)
 8000dae:	f002 fd7b 	bl	80038a8 <HAL_ADC_Init>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000db8:	f000 fb18 	bl	80013ec <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000dc0:	f107 031c 	add.w	r3, r7, #28
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	486b      	ldr	r0, [pc, #428]	@ (8000f74 <MX_ADC1_Init+0x250>)
 8000dc8:	f003 ffa8 	bl	8004d1c <HAL_ADCEx_MultiModeConfigChannel>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000dd2:	f000 fb0b 	bl	80013ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000dd6:	4b69      	ldr	r3, [pc, #420]	@ (8000f7c <MX_ADC1_Init+0x258>)
 8000dd8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dda:	2306      	movs	r3, #6
 8000ddc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8000dde:	2303      	movs	r3, #3
 8000de0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000de2:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000de6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000de8:	2304      	movs	r3, #4
 8000dea:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000df0:	2300      	movs	r3, #0
 8000df2:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000df4:	463b      	mov	r3, r7
 8000df6:	4619      	mov	r1, r3
 8000df8:	485e      	ldr	r0, [pc, #376]	@ (8000f74 <MX_ADC1_Init+0x250>)
 8000dfa:	f003 fa1d 	bl	8004238 <HAL_ADC_ConfigChannel>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000e04:	f000 faf2 	bl	80013ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000e08:	4b5d      	ldr	r3, [pc, #372]	@ (8000f80 <MX_ADC1_Init+0x25c>)
 8000e0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000e0c:	230c      	movs	r3, #12
 8000e0e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e10:	463b      	mov	r3, r7
 8000e12:	4619      	mov	r1, r3
 8000e14:	4857      	ldr	r0, [pc, #348]	@ (8000f74 <MX_ADC1_Init+0x250>)
 8000e16:	f003 fa0f 	bl	8004238 <HAL_ADC_ConfigChannel>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000e20:	f000 fae4 	bl	80013ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000e24:	4b57      	ldr	r3, [pc, #348]	@ (8000f84 <MX_ADC1_Init+0x260>)
 8000e26:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000e28:	2312      	movs	r3, #18
 8000e2a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e2c:	463b      	mov	r3, r7
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4850      	ldr	r0, [pc, #320]	@ (8000f74 <MX_ADC1_Init+0x250>)
 8000e32:	f003 fa01 	bl	8004238 <HAL_ADC_ConfigChannel>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000e3c:	f000 fad6 	bl	80013ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000e40:	4b51      	ldr	r3, [pc, #324]	@ (8000f88 <MX_ADC1_Init+0x264>)
 8000e42:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000e44:	2318      	movs	r3, #24
 8000e46:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e48:	463b      	mov	r3, r7
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4849      	ldr	r0, [pc, #292]	@ (8000f74 <MX_ADC1_Init+0x250>)
 8000e4e:	f003 f9f3 	bl	8004238 <HAL_ADC_ConfigChannel>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8000e58:	f000 fac8 	bl	80013ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000e5c:	4b4b      	ldr	r3, [pc, #300]	@ (8000f8c <MX_ADC1_Init+0x268>)
 8000e5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000e60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e64:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e66:	463b      	mov	r3, r7
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4842      	ldr	r0, [pc, #264]	@ (8000f74 <MX_ADC1_Init+0x250>)
 8000e6c:	f003 f9e4 	bl	8004238 <HAL_ADC_ConfigChannel>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_ADC1_Init+0x156>
  {
    Error_Handler();
 8000e76:	f000 fab9 	bl	80013ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000e7a:	4b45      	ldr	r3, [pc, #276]	@ (8000f90 <MX_ADC1_Init+0x26c>)
 8000e7c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000e7e:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8000e82:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e84:	463b      	mov	r3, r7
 8000e86:	4619      	mov	r1, r3
 8000e88:	483a      	ldr	r0, [pc, #232]	@ (8000f74 <MX_ADC1_Init+0x250>)
 8000e8a:	f003 f9d5 	bl	8004238 <HAL_ADC_ConfigChannel>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_ADC1_Init+0x174>
  {
    Error_Handler();
 8000e94:	f000 faaa 	bl	80013ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000e98:	4b3e      	ldr	r3, [pc, #248]	@ (8000f94 <MX_ADC1_Init+0x270>)
 8000e9a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000e9c:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 8000ea0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ea2:	463b      	mov	r3, r7
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4833      	ldr	r0, [pc, #204]	@ (8000f74 <MX_ADC1_Init+0x250>)
 8000ea8:	f003 f9c6 	bl	8004238 <HAL_ADC_ConfigChannel>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_ADC1_Init+0x192>
  {
    Error_Handler();
 8000eb2:	f000 fa9b 	bl	80013ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000eb6:	4b38      	ldr	r3, [pc, #224]	@ (8000f98 <MX_ADC1_Init+0x274>)
 8000eb8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000eba:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8000ebe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ec0:	463b      	mov	r3, r7
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	482b      	ldr	r0, [pc, #172]	@ (8000f74 <MX_ADC1_Init+0x250>)
 8000ec6:	f003 f9b7 	bl	8004238 <HAL_ADC_ConfigChannel>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_ADC1_Init+0x1b0>
  {
    Error_Handler();
 8000ed0:	f000 fa8c 	bl	80013ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000ed4:	4b31      	ldr	r3, [pc, #196]	@ (8000f9c <MX_ADC1_Init+0x278>)
 8000ed6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000ed8:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8000edc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ede:	463b      	mov	r3, r7
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4824      	ldr	r0, [pc, #144]	@ (8000f74 <MX_ADC1_Init+0x250>)
 8000ee4:	f003 f9a8 	bl	8004238 <HAL_ADC_ConfigChannel>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_ADC1_Init+0x1ce>
  {
    Error_Handler();
 8000eee:	f000 fa7d 	bl	80013ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000ef2:	4b2b      	ldr	r3, [pc, #172]	@ (8000fa0 <MX_ADC1_Init+0x27c>)
 8000ef4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000ef6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000efa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000efc:	463b      	mov	r3, r7
 8000efe:	4619      	mov	r1, r3
 8000f00:	481c      	ldr	r0, [pc, #112]	@ (8000f74 <MX_ADC1_Init+0x250>)
 8000f02:	f003 f999 	bl	8004238 <HAL_ADC_ConfigChannel>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_ADC1_Init+0x1ec>
  {
    Error_Handler();
 8000f0c:	f000 fa6e 	bl	80013ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8000f10:	4b24      	ldr	r3, [pc, #144]	@ (8000fa4 <MX_ADC1_Init+0x280>)
 8000f12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8000f14:	f240 2306 	movw	r3, #518	@ 0x206
 8000f18:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f1a:	463b      	mov	r3, r7
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4815      	ldr	r0, [pc, #84]	@ (8000f74 <MX_ADC1_Init+0x250>)
 8000f20:	f003 f98a 	bl	8004238 <HAL_ADC_ConfigChannel>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_ADC1_Init+0x20a>
  {
    Error_Handler();
 8000f2a:	f000 fa5f 	bl	80013ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 8000f2e:	4b1e      	ldr	r3, [pc, #120]	@ (8000fa8 <MX_ADC1_Init+0x284>)
 8000f30:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8000f32:	f44f 7303 	mov.w	r3, #524	@ 0x20c
 8000f36:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f38:	463b      	mov	r3, r7
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	480d      	ldr	r0, [pc, #52]	@ (8000f74 <MX_ADC1_Init+0x250>)
 8000f3e:	f003 f97b 	bl	8004238 <HAL_ADC_ConfigChannel>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_ADC1_Init+0x228>
  {
    Error_Handler();
 8000f48:	f000 fa50 	bl	80013ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 8000f4c:	4b17      	ldr	r3, [pc, #92]	@ (8000fac <MX_ADC1_Init+0x288>)
 8000f4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8000f50:	f240 2312 	movw	r3, #530	@ 0x212
 8000f54:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f56:	463b      	mov	r3, r7
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4806      	ldr	r0, [pc, #24]	@ (8000f74 <MX_ADC1_Init+0x250>)
 8000f5c:	f003 f96c 	bl	8004238 <HAL_ADC_ConfigChannel>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_ADC1_Init+0x246>
  {
    Error_Handler();
 8000f66:	f000 fa41 	bl	80013ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f6a:	bf00      	nop
 8000f6c:	3728      	adds	r7, #40	@ 0x28
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	24000228 	.word	0x24000228
 8000f78:	40022000 	.word	0x40022000
 8000f7c:	08600004 	.word	0x08600004
 8000f80:	0c900008 	.word	0x0c900008
 8000f84:	10c00010 	.word	0x10c00010
 8000f88:	1d500080 	.word	0x1d500080
 8000f8c:	21800100 	.word	0x21800100
 8000f90:	2a000400 	.word	0x2a000400
 8000f94:	2e300800 	.word	0x2e300800
 8000f98:	3ac04000 	.word	0x3ac04000
 8000f9c:	3ef08000 	.word	0x3ef08000
 8000fa0:	43210000 	.word	0x43210000
 8000fa4:	47520000 	.word	0x47520000
 8000fa8:	4b840000 	.word	0x4b840000
 8000fac:	4fb80000 	.word	0x4fb80000

08000fb0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fb4:	4b27      	ldr	r3, [pc, #156]	@ (8001054 <MX_SPI1_Init+0xa4>)
 8000fb6:	4a28      	ldr	r2, [pc, #160]	@ (8001058 <MX_SPI1_Init+0xa8>)
 8000fb8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fba:	4b26      	ldr	r3, [pc, #152]	@ (8001054 <MX_SPI1_Init+0xa4>)
 8000fbc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000fc0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fc2:	4b24      	ldr	r3, [pc, #144]	@ (8001054 <MX_SPI1_Init+0xa4>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fc8:	4b22      	ldr	r3, [pc, #136]	@ (8001054 <MX_SPI1_Init+0xa4>)
 8000fca:	2207      	movs	r2, #7
 8000fcc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fce:	4b21      	ldr	r3, [pc, #132]	@ (8001054 <MX_SPI1_Init+0xa4>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fd4:	4b1f      	ldr	r3, [pc, #124]	@ (8001054 <MX_SPI1_Init+0xa4>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fda:	4b1e      	ldr	r3, [pc, #120]	@ (8001054 <MX_SPI1_Init+0xa4>)
 8000fdc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000fe0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000fe2:	4b1c      	ldr	r3, [pc, #112]	@ (8001054 <MX_SPI1_Init+0xa4>)
 8000fe4:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8000fe8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fea:	4b1a      	ldr	r3, [pc, #104]	@ (8001054 <MX_SPI1_Init+0xa4>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ff0:	4b18      	ldr	r3, [pc, #96]	@ (8001054 <MX_SPI1_Init+0xa4>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ff6:	4b17      	ldr	r3, [pc, #92]	@ (8001054 <MX_SPI1_Init+0xa4>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000ffc:	4b15      	ldr	r3, [pc, #84]	@ (8001054 <MX_SPI1_Init+0xa4>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001002:	4b14      	ldr	r3, [pc, #80]	@ (8001054 <MX_SPI1_Init+0xa4>)
 8001004:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001008:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800100a:	4b12      	ldr	r3, [pc, #72]	@ (8001054 <MX_SPI1_Init+0xa4>)
 800100c:	2200      	movs	r2, #0
 800100e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001010:	4b10      	ldr	r3, [pc, #64]	@ (8001054 <MX_SPI1_Init+0xa4>)
 8001012:	2200      	movs	r2, #0
 8001014:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001016:	4b0f      	ldr	r3, [pc, #60]	@ (8001054 <MX_SPI1_Init+0xa4>)
 8001018:	2200      	movs	r2, #0
 800101a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800101c:	4b0d      	ldr	r3, [pc, #52]	@ (8001054 <MX_SPI1_Init+0xa4>)
 800101e:	2200      	movs	r2, #0
 8001020:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001022:	4b0c      	ldr	r3, [pc, #48]	@ (8001054 <MX_SPI1_Init+0xa4>)
 8001024:	2200      	movs	r2, #0
 8001026:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001028:	4b0a      	ldr	r3, [pc, #40]	@ (8001054 <MX_SPI1_Init+0xa4>)
 800102a:	2200      	movs	r2, #0
 800102c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800102e:	4b09      	ldr	r3, [pc, #36]	@ (8001054 <MX_SPI1_Init+0xa4>)
 8001030:	2200      	movs	r2, #0
 8001032:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001034:	4b07      	ldr	r3, [pc, #28]	@ (8001054 <MX_SPI1_Init+0xa4>)
 8001036:	2200      	movs	r2, #0
 8001038:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800103a:	4b06      	ldr	r3, [pc, #24]	@ (8001054 <MX_SPI1_Init+0xa4>)
 800103c:	2200      	movs	r2, #0
 800103e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001040:	4804      	ldr	r0, [pc, #16]	@ (8001054 <MX_SPI1_Init+0xa4>)
 8001042:	f00a fe67 	bl	800bd14 <HAL_SPI_Init>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 800104c:	f000 f9ce 	bl	80013ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}
 8001054:	24000304 	.word	0x24000304
 8001058:	40013000 	.word	0x40013000

0800105c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b088      	sub	sp, #32
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001062:	f107 0310 	add.w	r3, r7, #16
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	605a      	str	r2, [r3, #4]
 800106c:	609a      	str	r2, [r3, #8]
 800106e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001070:	1d3b      	adds	r3, r7, #4
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800107a:	4b1e      	ldr	r3, [pc, #120]	@ (80010f4 <MX_TIM2_Init+0x98>)
 800107c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001080:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 8001082:	4b1c      	ldr	r3, [pc, #112]	@ (80010f4 <MX_TIM2_Init+0x98>)
 8001084:	223f      	movs	r2, #63	@ 0x3f
 8001086:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001088:	4b1a      	ldr	r3, [pc, #104]	@ (80010f4 <MX_TIM2_Init+0x98>)
 800108a:	2200      	movs	r2, #0
 800108c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800108e:	4b19      	ldr	r3, [pc, #100]	@ (80010f4 <MX_TIM2_Init+0x98>)
 8001090:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001094:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001096:	4b17      	ldr	r3, [pc, #92]	@ (80010f4 <MX_TIM2_Init+0x98>)
 8001098:	2200      	movs	r2, #0
 800109a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800109c:	4b15      	ldr	r3, [pc, #84]	@ (80010f4 <MX_TIM2_Init+0x98>)
 800109e:	2200      	movs	r2, #0
 80010a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010a2:	4814      	ldr	r0, [pc, #80]	@ (80010f4 <MX_TIM2_Init+0x98>)
 80010a4:	f00b fb5b 	bl	800c75e <HAL_TIM_Base_Init>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80010ae:	f000 f99d 	bl	80013ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010b8:	f107 0310 	add.w	r3, r7, #16
 80010bc:	4619      	mov	r1, r3
 80010be:	480d      	ldr	r0, [pc, #52]	@ (80010f4 <MX_TIM2_Init+0x98>)
 80010c0:	f00b fd24 	bl	800cb0c <HAL_TIM_ConfigClockSource>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80010ca:	f000 f98f 	bl	80013ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ce:	2300      	movs	r3, #0
 80010d0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010d2:	2300      	movs	r3, #0
 80010d4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010d6:	1d3b      	adds	r3, r7, #4
 80010d8:	4619      	mov	r1, r3
 80010da:	4806      	ldr	r0, [pc, #24]	@ (80010f4 <MX_TIM2_Init+0x98>)
 80010dc:	f00b ff74 	bl	800cfc8 <HAL_TIMEx_MasterConfigSynchronization>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80010e6:	f000 f981 	bl	80013ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010ea:	bf00      	nop
 80010ec:	3720      	adds	r7, #32
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	2400038c 	.word	0x2400038c

080010f8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80010fc:	4b22      	ldr	r3, [pc, #136]	@ (8001188 <MX_UART4_Init+0x90>)
 80010fe:	4a23      	ldr	r2, [pc, #140]	@ (800118c <MX_UART4_Init+0x94>)
 8001100:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 921600;
 8001102:	4b21      	ldr	r3, [pc, #132]	@ (8001188 <MX_UART4_Init+0x90>)
 8001104:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8001108:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800110a:	4b1f      	ldr	r3, [pc, #124]	@ (8001188 <MX_UART4_Init+0x90>)
 800110c:	2200      	movs	r2, #0
 800110e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001110:	4b1d      	ldr	r3, [pc, #116]	@ (8001188 <MX_UART4_Init+0x90>)
 8001112:	2200      	movs	r2, #0
 8001114:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001116:	4b1c      	ldr	r3, [pc, #112]	@ (8001188 <MX_UART4_Init+0x90>)
 8001118:	2200      	movs	r2, #0
 800111a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800111c:	4b1a      	ldr	r3, [pc, #104]	@ (8001188 <MX_UART4_Init+0x90>)
 800111e:	220c      	movs	r2, #12
 8001120:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001122:	4b19      	ldr	r3, [pc, #100]	@ (8001188 <MX_UART4_Init+0x90>)
 8001124:	2200      	movs	r2, #0
 8001126:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001128:	4b17      	ldr	r3, [pc, #92]	@ (8001188 <MX_UART4_Init+0x90>)
 800112a:	2200      	movs	r2, #0
 800112c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800112e:	4b16      	ldr	r3, [pc, #88]	@ (8001188 <MX_UART4_Init+0x90>)
 8001130:	2200      	movs	r2, #0
 8001132:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001134:	4b14      	ldr	r3, [pc, #80]	@ (8001188 <MX_UART4_Init+0x90>)
 8001136:	2200      	movs	r2, #0
 8001138:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800113a:	4b13      	ldr	r3, [pc, #76]	@ (8001188 <MX_UART4_Init+0x90>)
 800113c:	2200      	movs	r2, #0
 800113e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001140:	4811      	ldr	r0, [pc, #68]	@ (8001188 <MX_UART4_Init+0x90>)
 8001142:	f00b ffed 	bl	800d120 <HAL_UART_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 800114c:	f000 f94e 	bl	80013ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001150:	2100      	movs	r1, #0
 8001152:	480d      	ldr	r0, [pc, #52]	@ (8001188 <MX_UART4_Init+0x90>)
 8001154:	f00e fb65 	bl	800f822 <HAL_UARTEx_SetTxFifoThreshold>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800115e:	f000 f945 	bl	80013ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001162:	2100      	movs	r1, #0
 8001164:	4808      	ldr	r0, [pc, #32]	@ (8001188 <MX_UART4_Init+0x90>)
 8001166:	f00e fb9a 	bl	800f89e <HAL_UARTEx_SetRxFifoThreshold>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001170:	f000 f93c 	bl	80013ec <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart4) != HAL_OK)
 8001174:	4804      	ldr	r0, [pc, #16]	@ (8001188 <MX_UART4_Init+0x90>)
 8001176:	f00e fb19 	bl	800f7ac <HAL_UARTEx_EnableFifoMode>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001180:	f000 f934 	bl	80013ec <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}
 8001188:	240003d8 	.word	0x240003d8
 800118c:	40004c00 	.word	0x40004c00

08001190 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001196:	4b0d      	ldr	r3, [pc, #52]	@ (80011cc <MX_DMA_Init+0x3c>)
 8001198:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800119c:	4a0b      	ldr	r2, [pc, #44]	@ (80011cc <MX_DMA_Init+0x3c>)
 800119e:	f043 0301 	orr.w	r3, r3, #1
 80011a2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80011a6:	4b09      	ldr	r3, [pc, #36]	@ (80011cc <MX_DMA_Init+0x3c>)
 80011a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80011ac:	f003 0301 	and.w	r3, r3, #1
 80011b0:	607b      	str	r3, [r7, #4]
 80011b2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80011b4:	2200      	movs	r2, #0
 80011b6:	2100      	movs	r1, #0
 80011b8:	200b      	movs	r0, #11
 80011ba:	f003 ff68 	bl	800508e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80011be:	200b      	movs	r0, #11
 80011c0:	f003 ff7f 	bl	80050c2 <HAL_NVIC_EnableIRQ>

}
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	58024400 	.word	0x58024400

080011d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08c      	sub	sp, #48	@ 0x30
 80011d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d6:	f107 031c 	add.w	r3, r7, #28
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	605a      	str	r2, [r3, #4]
 80011e0:	609a      	str	r2, [r3, #8]
 80011e2:	60da      	str	r2, [r3, #12]
 80011e4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011e6:	4b71      	ldr	r3, [pc, #452]	@ (80013ac <MX_GPIO_Init+0x1dc>)
 80011e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011ec:	4a6f      	ldr	r2, [pc, #444]	@ (80013ac <MX_GPIO_Init+0x1dc>)
 80011ee:	f043 0310 	orr.w	r3, r3, #16
 80011f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011f6:	4b6d      	ldr	r3, [pc, #436]	@ (80013ac <MX_GPIO_Init+0x1dc>)
 80011f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011fc:	f003 0310 	and.w	r3, r3, #16
 8001200:	61bb      	str	r3, [r7, #24]
 8001202:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001204:	4b69      	ldr	r3, [pc, #420]	@ (80013ac <MX_GPIO_Init+0x1dc>)
 8001206:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800120a:	4a68      	ldr	r2, [pc, #416]	@ (80013ac <MX_GPIO_Init+0x1dc>)
 800120c:	f043 0320 	orr.w	r3, r3, #32
 8001210:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001214:	4b65      	ldr	r3, [pc, #404]	@ (80013ac <MX_GPIO_Init+0x1dc>)
 8001216:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800121a:	f003 0320 	and.w	r3, r3, #32
 800121e:	617b      	str	r3, [r7, #20]
 8001220:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001222:	4b62      	ldr	r3, [pc, #392]	@ (80013ac <MX_GPIO_Init+0x1dc>)
 8001224:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001228:	4a60      	ldr	r2, [pc, #384]	@ (80013ac <MX_GPIO_Init+0x1dc>)
 800122a:	f043 0304 	orr.w	r3, r3, #4
 800122e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001232:	4b5e      	ldr	r3, [pc, #376]	@ (80013ac <MX_GPIO_Init+0x1dc>)
 8001234:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001238:	f003 0304 	and.w	r3, r3, #4
 800123c:	613b      	str	r3, [r7, #16]
 800123e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001240:	4b5a      	ldr	r3, [pc, #360]	@ (80013ac <MX_GPIO_Init+0x1dc>)
 8001242:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001246:	4a59      	ldr	r2, [pc, #356]	@ (80013ac <MX_GPIO_Init+0x1dc>)
 8001248:	f043 0301 	orr.w	r3, r3, #1
 800124c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001250:	4b56      	ldr	r3, [pc, #344]	@ (80013ac <MX_GPIO_Init+0x1dc>)
 8001252:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800125e:	4b53      	ldr	r3, [pc, #332]	@ (80013ac <MX_GPIO_Init+0x1dc>)
 8001260:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001264:	4a51      	ldr	r2, [pc, #324]	@ (80013ac <MX_GPIO_Init+0x1dc>)
 8001266:	f043 0308 	orr.w	r3, r3, #8
 800126a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800126e:	4b4f      	ldr	r3, [pc, #316]	@ (80013ac <MX_GPIO_Init+0x1dc>)
 8001270:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001274:	f003 0308 	and.w	r3, r3, #8
 8001278:	60bb      	str	r3, [r7, #8]
 800127a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800127c:	4b4b      	ldr	r3, [pc, #300]	@ (80013ac <MX_GPIO_Init+0x1dc>)
 800127e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001282:	4a4a      	ldr	r2, [pc, #296]	@ (80013ac <MX_GPIO_Init+0x1dc>)
 8001284:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001288:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800128c:	4b47      	ldr	r3, [pc, #284]	@ (80013ac <MX_GPIO_Init+0x1dc>)
 800128e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001292:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001296:	607b      	str	r3, [r7, #4]
 8001298:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800129a:	4b44      	ldr	r3, [pc, #272]	@ (80013ac <MX_GPIO_Init+0x1dc>)
 800129c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012a0:	4a42      	ldr	r2, [pc, #264]	@ (80013ac <MX_GPIO_Init+0x1dc>)
 80012a2:	f043 0302 	orr.w	r3, r3, #2
 80012a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012aa:	4b40      	ldr	r3, [pc, #256]	@ (80013ac <MX_GPIO_Init+0x1dc>)
 80012ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012b0:	f003 0302 	and.w	r3, r3, #2
 80012b4:	603b      	str	r3, [r7, #0]
 80012b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80012b8:	2200      	movs	r2, #0
 80012ba:	f64f 71fd 	movw	r1, #65533	@ 0xfffd
 80012be:	483c      	ldr	r0, [pc, #240]	@ (80013b0 <MX_GPIO_Init+0x1e0>)
 80012c0:	f006 ff88 	bl	80081d4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80012c4:	2200      	movs	r2, #0
 80012c6:	f44f 7172 	mov.w	r1, #968	@ 0x3c8
 80012ca:	483a      	ldr	r0, [pc, #232]	@ (80013b4 <MX_GPIO_Init+0x1e4>)
 80012cc:	f006 ff82 	bl	80081d4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80012d0:	2200      	movs	r2, #0
 80012d2:	f647 41ff 	movw	r1, #31999	@ 0x7cff
 80012d6:	4838      	ldr	r0, [pc, #224]	@ (80013b8 <MX_GPIO_Init+0x1e8>)
 80012d8:	f006 ff7c 	bl	80081d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80012dc:	f64f 73fd 	movw	r3, #65533	@ 0xfffd
 80012e0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e2:	2301      	movs	r3, #1
 80012e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ea:	2300      	movs	r3, #0
 80012ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012ee:	f107 031c 	add.w	r3, r7, #28
 80012f2:	4619      	mov	r1, r3
 80012f4:	482e      	ldr	r0, [pc, #184]	@ (80013b0 <MX_GPIO_Init+0x1e0>)
 80012f6:	f006 fdbd 	bl	8007e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 80012fa:	f44f 7320 	mov.w	r3, #640	@ 0x280
 80012fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001300:	2303      	movs	r3, #3
 8001302:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001308:	f107 031c 	add.w	r3, r7, #28
 800130c:	4619      	mov	r1, r3
 800130e:	482b      	ldr	r0, [pc, #172]	@ (80013bc <MX_GPIO_Init+0x1ec>)
 8001310:	f006 fdb0 	bl	8007e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001314:	2308      	movs	r3, #8
 8001316:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001318:	2301      	movs	r3, #1
 800131a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800131c:	2302      	movs	r3, #2
 800131e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001320:	2300      	movs	r3, #0
 8001322:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001324:	f107 031c 	add.w	r3, r7, #28
 8001328:	4619      	mov	r1, r3
 800132a:	4822      	ldr	r0, [pc, #136]	@ (80013b4 <MX_GPIO_Init+0x1e4>)
 800132c:	f006 fda2 	bl	8007e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin PD11 PD12 PD13
                           PD14 PD0 PD1 PD2
                           PD3 PD4 PD5 PD6
                           PD7 */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001330:	f647 43ff 	movw	r3, #31999	@ 0x7cff
 8001334:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001336:	2301      	movs	r3, #1
 8001338:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133e:	2300      	movs	r3, #0
 8001340:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001342:	f107 031c 	add.w	r3, r7, #28
 8001346:	4619      	mov	r1, r3
 8001348:	481b      	ldr	r0, [pc, #108]	@ (80013b8 <MX_GPIO_Init+0x1e8>)
 800134a:	f006 fd93 	bl	8007e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800134e:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001352:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001354:	2301      	movs	r3, #1
 8001356:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135c:	2300      	movs	r3, #0
 800135e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001360:	f107 031c 	add.w	r3, r7, #28
 8001364:	4619      	mov	r1, r3
 8001366:	4813      	ldr	r0, [pc, #76]	@ (80013b4 <MX_GPIO_Init+0x1e4>)
 8001368:	f006 fd84 	bl	8007e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800136c:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8001370:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001372:	2302      	movs	r3, #2
 8001374:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137a:	2300      	movs	r3, #0
 800137c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800137e:	230a      	movs	r3, #10
 8001380:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001382:	f107 031c 	add.w	r3, r7, #28
 8001386:	4619      	mov	r1, r3
 8001388:	480d      	ldr	r0, [pc, #52]	@ (80013c0 <MX_GPIO_Init+0x1f0>)
 800138a:	f006 fd73 	bl	8007e74 <HAL_GPIO_Init>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 800138e:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 8001392:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8001396:	f002 f835 	bl	8003404 <HAL_SYSCFG_AnalogSwitchConfig>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_CLOSE);
 800139a:	2100      	movs	r1, #0
 800139c:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 80013a0:	f002 f830 	bl	8003404 <HAL_SYSCFG_AnalogSwitchConfig>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80013a4:	bf00      	nop
 80013a6:	3730      	adds	r7, #48	@ 0x30
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	58024400 	.word	0x58024400
 80013b0:	58021000 	.word	0x58021000
 80013b4:	58020800 	.word	0x58020800
 80013b8:	58020c00 	.word	0x58020c00
 80013bc:	58021400 	.word	0x58021400
 80013c0:	58020000 	.word	0x58020000

080013c4 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 80013ce:	79fb      	ldrb	r3, [r7, #7]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d102      	bne.n	80013da <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 80013d4:	4b04      	ldr	r3, [pc, #16]	@ (80013e8 <BSP_PB_Callback+0x24>)
 80013d6:	2201      	movs	r2, #1
 80013d8:	601a      	str	r2, [r3, #0]
  }
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	24000224 	.word	0x24000224

080013ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013f0:	b672      	cpsid	i
}
 80013f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013f4:	bf00      	nop
 80013f6:	e7fd      	b.n	80013f4 <Error_Handler+0x8>

080013f8 <InitPT>:

extern void Error_Handler(void);


void InitPT(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
    if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, N_ADC_CH) != HAL_OK)
 80013fc:	220d      	movs	r2, #13
 80013fe:	4905      	ldr	r1, [pc, #20]	@ (8001414 <InitPT+0x1c>)
 8001400:	4805      	ldr	r0, [pc, #20]	@ (8001418 <InitPT+0x20>)
 8001402:	f002 fbf3 	bl	8003bec <HAL_ADC_Start_DMA>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <InitPT+0x18>
    {
        Error_Handler();
 800140c:	f7ff ffee 	bl	80013ec <Error_Handler>
    }
}
 8001410:	bf00      	nop
 8001412:	bd80      	pop	{r7, pc}
 8001414:	240004bc 	.word	0x240004bc
 8001418:	24000228 	.word	0x24000228

0800141c <GetADCRaw>:

void GetADCRaw(uint16_t* buf)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
	memcpy((void*)buf, (void*)adc_buffer, sizeof(uint16_t)*N_ADC_CH);
 8001424:	221a      	movs	r2, #26
 8001426:	4904      	ldr	r1, [pc, #16]	@ (8001438 <GetADCRaw+0x1c>)
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f00f fa3c 	bl	80108a6 <memcpy>
}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	240004bc 	.word	0x240004bc

0800143c <IgnitorOn>:

uint8_t fIgnitor = false;
uint8_t fIgnitorON = false;

void IgnitorOn(bool flag)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	71fb      	strb	r3, [r7, #7]
	if (flag == true)
 8001446:	79fb      	ldrb	r3, [r7, #7]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d005      	beq.n	8001458 <IgnitorOn+0x1c>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 800144c:	2201      	movs	r2, #1
 800144e:	2108      	movs	r1, #8
 8001450:	4806      	ldr	r0, [pc, #24]	@ (800146c <IgnitorOn+0x30>)
 8001452:	f006 febf 	bl	80081d4 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
	}
}
 8001456:	e004      	b.n	8001462 <IgnitorOn+0x26>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8001458:	2200      	movs	r2, #0
 800145a:	2108      	movs	r1, #8
 800145c:	4803      	ldr	r0, [pc, #12]	@ (800146c <IgnitorOn+0x30>)
 800145e:	f006 feb9 	bl	80081d4 <HAL_GPIO_WritePin>
}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	58020800 	.word	0x58020800

08001470 <IgnitorSwitching>:

void IgnitorSwitching()
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
	if (fIgnitor == true)
 8001474:	4b0f      	ldr	r3, [pc, #60]	@ (80014b4 <IgnitorSwitching+0x44>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d115      	bne.n	80014a8 <IgnitorSwitching+0x38>
	{
		if (fIgnitorON == true)
 800147c:	4b0e      	ldr	r3, [pc, #56]	@ (80014b8 <IgnitorSwitching+0x48>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d103      	bne.n	800148c <IgnitorSwitching+0x1c>
		{
			fIgnitorON = false;
 8001484:	4b0c      	ldr	r3, [pc, #48]	@ (80014b8 <IgnitorSwitching+0x48>)
 8001486:	2200      	movs	r2, #0
 8001488:	701a      	strb	r2, [r3, #0]
 800148a:	e002      	b.n	8001492 <IgnitorSwitching+0x22>
		}
		else
		{
			fIgnitorON = true;
 800148c:	4b0a      	ldr	r3, [pc, #40]	@ (80014b8 <IgnitorSwitching+0x48>)
 800148e:	2201      	movs	r2, #1
 8001490:	701a      	strb	r2, [r3, #0]
		}
		IgnitorOn(fIgnitorON);
 8001492:	4b09      	ldr	r3, [pc, #36]	@ (80014b8 <IgnitorSwitching+0x48>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	2b00      	cmp	r3, #0
 8001498:	bf14      	ite	ne
 800149a:	2301      	movne	r3, #1
 800149c:	2300      	moveq	r3, #0
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff ffcb 	bl	800143c <IgnitorOn>
	}
	else
	{
		IgnitorOn(false);
	}
}
 80014a6:	e002      	b.n	80014ae <IgnitorSwitching+0x3e>
		IgnitorOn(false);
 80014a8:	2000      	movs	r0, #0
 80014aa:	f7ff ffc7 	bl	800143c <IgnitorOn>
}
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	240004d6 	.word	0x240004d6
 80014b8:	240004d7 	.word	0x240004d7

080014bc <SVUpdate>:


void SVUpdate(uint8_t* ch)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i<MAX_SV_NUM; i++) {
 80014c4:	2300      	movs	r3, #0
 80014c6:	73fb      	strb	r3, [r7, #15]
 80014c8:	e0cb      	b.n	8001662 <SVUpdate+0x1a6>
		switch(i) {
 80014ca:	7bfb      	ldrb	r3, [r7, #15]
 80014cc:	2b09      	cmp	r3, #9
 80014ce:	f200 80c4 	bhi.w	800165a <SVUpdate+0x19e>
 80014d2:	a201      	add	r2, pc, #4	@ (adr r2, 80014d8 <SVUpdate+0x1c>)
 80014d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014d8:	08001501 	.word	0x08001501
 80014dc:	08001521 	.word	0x08001521
 80014e0:	08001543 	.word	0x08001543
 80014e4:	08001565 	.word	0x08001565
 80014e8:	08001587 	.word	0x08001587
 80014ec:	080015ad 	.word	0x080015ad
 80014f0:	080015c7 	.word	0x080015c7
 80014f4:	080015ed 	.word	0x080015ed
 80014f8:	08001613 	.word	0x08001613
 80014fc:	08001635 	.word	0x08001635
		case 0: // SV CH1
			if (ch[0] == 0) {
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d105      	bne.n	8001514 <SVUpdate+0x58>
				HAL_GPIO_WritePin(SV_CH1_PORT, SV_CH1_GPIO, GPIO_PIN_RESET);
 8001508:	2200      	movs	r2, #0
 800150a:	2101      	movs	r1, #1
 800150c:	4859      	ldr	r0, [pc, #356]	@ (8001674 <SVUpdate+0x1b8>)
 800150e:	f006 fe61 	bl	80081d4 <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(SV_CH1_PORT, SV_CH1_GPIO, GPIO_PIN_SET);
			}
			break;
 8001512:	e0a3      	b.n	800165c <SVUpdate+0x1a0>
				HAL_GPIO_WritePin(SV_CH1_PORT, SV_CH1_GPIO, GPIO_PIN_SET);
 8001514:	2201      	movs	r2, #1
 8001516:	2101      	movs	r1, #1
 8001518:	4856      	ldr	r0, [pc, #344]	@ (8001674 <SVUpdate+0x1b8>)
 800151a:	f006 fe5b 	bl	80081d4 <HAL_GPIO_WritePin>
			break;
 800151e:	e09d      	b.n	800165c <SVUpdate+0x1a0>
		case 1:
			if (ch[1] == 0) {
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	3301      	adds	r3, #1
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d105      	bne.n	8001536 <SVUpdate+0x7a>
				HAL_GPIO_WritePin(SV_CH2_PORT, SV_CH2_GPIO, GPIO_PIN_RESET);
 800152a:	2200      	movs	r2, #0
 800152c:	2108      	movs	r1, #8
 800152e:	4851      	ldr	r0, [pc, #324]	@ (8001674 <SVUpdate+0x1b8>)
 8001530:	f006 fe50 	bl	80081d4 <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(SV_CH2_PORT, SV_CH2_GPIO, GPIO_PIN_SET);
			}
			break;
 8001534:	e092      	b.n	800165c <SVUpdate+0x1a0>
				HAL_GPIO_WritePin(SV_CH2_PORT, SV_CH2_GPIO, GPIO_PIN_SET);
 8001536:	2201      	movs	r2, #1
 8001538:	2108      	movs	r1, #8
 800153a:	484e      	ldr	r0, [pc, #312]	@ (8001674 <SVUpdate+0x1b8>)
 800153c:	f006 fe4a 	bl	80081d4 <HAL_GPIO_WritePin>
			break;
 8001540:	e08c      	b.n	800165c <SVUpdate+0x1a0>
		case 2:
			if (ch[2] == 0) {
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	3302      	adds	r3, #2
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d105      	bne.n	8001558 <SVUpdate+0x9c>
				HAL_GPIO_WritePin(SV_CH3_PORT, SV_CH3_GPIO, GPIO_PIN_RESET);
 800154c:	2200      	movs	r2, #0
 800154e:	2110      	movs	r1, #16
 8001550:	4848      	ldr	r0, [pc, #288]	@ (8001674 <SVUpdate+0x1b8>)
 8001552:	f006 fe3f 	bl	80081d4 <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(SV_CH3_PORT, SV_CH3_GPIO, GPIO_PIN_SET);
			}
			break;
 8001556:	e081      	b.n	800165c <SVUpdate+0x1a0>
				HAL_GPIO_WritePin(SV_CH3_PORT, SV_CH3_GPIO, GPIO_PIN_SET);
 8001558:	2201      	movs	r2, #1
 800155a:	2110      	movs	r1, #16
 800155c:	4845      	ldr	r0, [pc, #276]	@ (8001674 <SVUpdate+0x1b8>)
 800155e:	f006 fe39 	bl	80081d4 <HAL_GPIO_WritePin>
			break;
 8001562:	e07b      	b.n	800165c <SVUpdate+0x1a0>
		case 3:
			if (ch[3] == 0) {
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	3303      	adds	r3, #3
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d105      	bne.n	800157a <SVUpdate+0xbe>
				HAL_GPIO_WritePin(SV_CH4_PORT, SV_CH4_GPIO, GPIO_PIN_RESET);
 800156e:	2200      	movs	r2, #0
 8001570:	2180      	movs	r1, #128	@ 0x80
 8001572:	4840      	ldr	r0, [pc, #256]	@ (8001674 <SVUpdate+0x1b8>)
 8001574:	f006 fe2e 	bl	80081d4 <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(SV_CH4_PORT, SV_CH4_GPIO, GPIO_PIN_SET);
			}
			break;
 8001578:	e070      	b.n	800165c <SVUpdate+0x1a0>
				HAL_GPIO_WritePin(SV_CH4_PORT, SV_CH4_GPIO, GPIO_PIN_SET);
 800157a:	2201      	movs	r2, #1
 800157c:	2180      	movs	r1, #128	@ 0x80
 800157e:	483d      	ldr	r0, [pc, #244]	@ (8001674 <SVUpdate+0x1b8>)
 8001580:	f006 fe28 	bl	80081d4 <HAL_GPIO_WritePin>
			break;
 8001584:	e06a      	b.n	800165c <SVUpdate+0x1a0>
		case 4:
			if (ch[4] == 0) { // ignitor Power
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	3304      	adds	r3, #4
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d106      	bne.n	800159e <SVUpdate+0xe2>
				HAL_GPIO_WritePin(SV_CH5_PORT, SV_CH5_GPIO, GPIO_PIN_RESET);
 8001590:	2200      	movs	r2, #0
 8001592:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001596:	4837      	ldr	r0, [pc, #220]	@ (8001674 <SVUpdate+0x1b8>)
 8001598:	f006 fe1c 	bl	80081d4 <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(SV_CH5_PORT, SV_CH5_GPIO, GPIO_PIN_SET);
			}
			break;
 800159c:	e05e      	b.n	800165c <SVUpdate+0x1a0>
				HAL_GPIO_WritePin(SV_CH5_PORT, SV_CH5_GPIO, GPIO_PIN_SET);
 800159e:	2201      	movs	r2, #1
 80015a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015a4:	4833      	ldr	r0, [pc, #204]	@ (8001674 <SVUpdate+0x1b8>)
 80015a6:	f006 fe15 	bl	80081d4 <HAL_GPIO_WritePin>
			break;
 80015aa:	e057      	b.n	800165c <SVUpdate+0x1a0>
		case 5:
			if (ch[5] == 0) { // Ignitor signal
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	3305      	adds	r3, #5
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d103      	bne.n	80015be <SVUpdate+0x102>
				//HAL_GPIO_WritePin(SV_CH6_PORT, SV_CH6_GPIO, GPIO_PIN_RESET);
				fIgnitor = false;
 80015b6:	4b30      	ldr	r3, [pc, #192]	@ (8001678 <SVUpdate+0x1bc>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	701a      	strb	r2, [r3, #0]
			}
			else {
				//HAL_GPIO_WritePin(SV_CH6_PORT, SV_CH6_GPIO, GPIO_PIN_SET);
				fIgnitor = true;
			}
			break;
 80015bc:	e04e      	b.n	800165c <SVUpdate+0x1a0>
				fIgnitor = true;
 80015be:	4b2e      	ldr	r3, [pc, #184]	@ (8001678 <SVUpdate+0x1bc>)
 80015c0:	2201      	movs	r2, #1
 80015c2:	701a      	strb	r2, [r3, #0]
			break;
 80015c4:	e04a      	b.n	800165c <SVUpdate+0x1a0>
		case 6:
			if (ch[6] == 0) {
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	3306      	adds	r3, #6
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d106      	bne.n	80015de <SVUpdate+0x122>
				HAL_GPIO_WritePin(SV_CH7_PORT, SV_CH7_GPIO, GPIO_PIN_RESET);
 80015d0:	2200      	movs	r2, #0
 80015d2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80015d6:	4827      	ldr	r0, [pc, #156]	@ (8001674 <SVUpdate+0x1b8>)
 80015d8:	f006 fdfc 	bl	80081d4 <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(SV_CH7_PORT, SV_CH7_GPIO, GPIO_PIN_SET);
			}
			break;
 80015dc:	e03e      	b.n	800165c <SVUpdate+0x1a0>
				HAL_GPIO_WritePin(SV_CH7_PORT, SV_CH7_GPIO, GPIO_PIN_SET);
 80015de:	2201      	movs	r2, #1
 80015e0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80015e4:	4823      	ldr	r0, [pc, #140]	@ (8001674 <SVUpdate+0x1b8>)
 80015e6:	f006 fdf5 	bl	80081d4 <HAL_GPIO_WritePin>
			break;
 80015ea:	e037      	b.n	800165c <SVUpdate+0x1a0>
		case 7:
			if (ch[7] == 0) {
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	3307      	adds	r3, #7
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d106      	bne.n	8001604 <SVUpdate+0x148>
				HAL_GPIO_WritePin(SV_CH8_PORT, SV_CH8_GPIO, GPIO_PIN_RESET);
 80015f6:	2200      	movs	r2, #0
 80015f8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80015fc:	481d      	ldr	r0, [pc, #116]	@ (8001674 <SVUpdate+0x1b8>)
 80015fe:	f006 fde9 	bl	80081d4 <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(SV_CH8_PORT, SV_CH8_GPIO, GPIO_PIN_SET);
			}
			break;
 8001602:	e02b      	b.n	800165c <SVUpdate+0x1a0>
				HAL_GPIO_WritePin(SV_CH8_PORT, SV_CH8_GPIO, GPIO_PIN_SET);
 8001604:	2201      	movs	r2, #1
 8001606:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800160a:	481a      	ldr	r0, [pc, #104]	@ (8001674 <SVUpdate+0x1b8>)
 800160c:	f006 fde2 	bl	80081d4 <HAL_GPIO_WritePin>
			break;
 8001610:	e024      	b.n	800165c <SVUpdate+0x1a0>
		case 8:
			if (ch[8] == 0) {
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	3308      	adds	r3, #8
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d105      	bne.n	8001628 <SVUpdate+0x16c>
				HAL_GPIO_WritePin(SV_CH9_PORT, SV_CH9_GPIO, GPIO_PIN_RESET);
 800161c:	2200      	movs	r2, #0
 800161e:	2140      	movs	r1, #64	@ 0x40
 8001620:	4816      	ldr	r0, [pc, #88]	@ (800167c <SVUpdate+0x1c0>)
 8001622:	f006 fdd7 	bl	80081d4 <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(SV_CH9_PORT, SV_CH9_GPIO, GPIO_PIN_SET);
			}
			break;
 8001626:	e019      	b.n	800165c <SVUpdate+0x1a0>
				HAL_GPIO_WritePin(SV_CH9_PORT, SV_CH9_GPIO, GPIO_PIN_SET);
 8001628:	2201      	movs	r2, #1
 800162a:	2140      	movs	r1, #64	@ 0x40
 800162c:	4813      	ldr	r0, [pc, #76]	@ (800167c <SVUpdate+0x1c0>)
 800162e:	f006 fdd1 	bl	80081d4 <HAL_GPIO_WritePin>
			break;
 8001632:	e013      	b.n	800165c <SVUpdate+0x1a0>
		case 9:
			if (ch[9] == 0) {
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	3309      	adds	r3, #9
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d106      	bne.n	800164c <SVUpdate+0x190>
				HAL_GPIO_WritePin(SV_CH10_PORT, SV_CH10_GPIO, GPIO_PIN_RESET);
 800163e:	2200      	movs	r2, #0
 8001640:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001644:	480d      	ldr	r0, [pc, #52]	@ (800167c <SVUpdate+0x1c0>)
 8001646:	f006 fdc5 	bl	80081d4 <HAL_GPIO_WritePin>
			}
			else {
				HAL_GPIO_WritePin(SV_CH10_PORT, SV_CH10_GPIO, GPIO_PIN_SET);
			}
			break;
 800164a:	e007      	b.n	800165c <SVUpdate+0x1a0>
				HAL_GPIO_WritePin(SV_CH10_PORT, SV_CH10_GPIO, GPIO_PIN_SET);
 800164c:	2201      	movs	r2, #1
 800164e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001652:	480a      	ldr	r0, [pc, #40]	@ (800167c <SVUpdate+0x1c0>)
 8001654:	f006 fdbe 	bl	80081d4 <HAL_GPIO_WritePin>
			break;
 8001658:	e000      	b.n	800165c <SVUpdate+0x1a0>
		default:
			break;
 800165a:	bf00      	nop
	for (uint8_t i = 0; i<MAX_SV_NUM; i++) {
 800165c:	7bfb      	ldrb	r3, [r7, #15]
 800165e:	3301      	adds	r3, #1
 8001660:	73fb      	strb	r3, [r7, #15]
 8001662:	7bfb      	ldrb	r3, [r7, #15]
 8001664:	2b05      	cmp	r3, #5
 8001666:	f67f af30 	bls.w	80014ca <SVUpdate+0xe>
		}
	}

}
 800166a:	bf00      	nop
 800166c:	bf00      	nop
 800166e:	3710      	adds	r7, #16
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	58021000 	.word	0x58021000
 8001678:	240004d6 	.word	0x240004d6
 800167c:	58020800 	.word	0x58020800

08001680 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001686:	4b13      	ldr	r3, [pc, #76]	@ (80016d4 <HAL_MspInit+0x54>)
 8001688:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800168c:	4a11      	ldr	r2, [pc, #68]	@ (80016d4 <HAL_MspInit+0x54>)
 800168e:	f043 0302 	orr.w	r3, r3, #2
 8001692:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001696:	4b0f      	ldr	r3, [pc, #60]	@ (80016d4 <HAL_MspInit+0x54>)
 8001698:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800169c:	f003 0302 	and.w	r3, r3, #2
 80016a0:	607b      	str	r3, [r7, #4]
 80016a2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 80016a4:	4b0b      	ldr	r3, [pc, #44]	@ (80016d4 <HAL_MspInit+0x54>)
 80016a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80016aa:	4a0a      	ldr	r2, [pc, #40]	@ (80016d4 <HAL_MspInit+0x54>)
 80016ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80016b0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80016b4:	4b07      	ldr	r3, [pc, #28]	@ (80016d4 <HAL_MspInit+0x54>)
 80016b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80016ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80016be:	603b      	str	r3, [r7, #0]
 80016c0:	683b      	ldr	r3, [r7, #0]

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 80016c2:	f001 fe8f 	bl	80033e4 <HAL_SYSCFG_DisableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 80016c6:	2002      	movs	r0, #2
 80016c8:	f001 fe78 	bl	80033bc <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016cc:	bf00      	nop
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	58024400 	.word	0x58024400

080016d8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b0bc      	sub	sp, #240	@ 0xf0
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016f0:	f107 0318 	add.w	r3, r7, #24
 80016f4:	22c0      	movs	r2, #192	@ 0xc0
 80016f6:	2100      	movs	r1, #0
 80016f8:	4618      	mov	r0, r3
 80016fa:	f00e ffe9 	bl	80106d0 <memset>
  if(hadc->Instance==ADC1)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a67      	ldr	r2, [pc, #412]	@ (80018a0 <HAL_ADC_MspInit+0x1c8>)
 8001704:	4293      	cmp	r3, r2
 8001706:	f040 80c6 	bne.w	8001896 <HAL_ADC_MspInit+0x1be>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800170a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800170e:	f04f 0300 	mov.w	r3, #0
 8001712:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001716:	2304      	movs	r3, #4
 8001718:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 800171a:	230a      	movs	r3, #10
 800171c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 800171e:	2302      	movs	r3, #2
 8001720:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001722:	2302      	movs	r3, #2
 8001724:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001726:	2302      	movs	r3, #2
 8001728:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800172a:	23c0      	movs	r3, #192	@ 0xc0
 800172c:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800172e:	2320      	movs	r3, #32
 8001730:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001732:	2300      	movs	r3, #0
 8001734:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001736:	2300      	movs	r3, #0
 8001738:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800173c:	f107 0318 	add.w	r3, r7, #24
 8001740:	4618      	mov	r0, r3
 8001742:	f007 fde9 	bl	8009318 <HAL_RCCEx_PeriphCLKConfig>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 800174c:	f7ff fe4e 	bl	80013ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001750:	4b54      	ldr	r3, [pc, #336]	@ (80018a4 <HAL_ADC_MspInit+0x1cc>)
 8001752:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001756:	4a53      	ldr	r2, [pc, #332]	@ (80018a4 <HAL_ADC_MspInit+0x1cc>)
 8001758:	f043 0320 	orr.w	r3, r3, #32
 800175c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001760:	4b50      	ldr	r3, [pc, #320]	@ (80018a4 <HAL_ADC_MspInit+0x1cc>)
 8001762:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001766:	f003 0320 	and.w	r3, r3, #32
 800176a:	617b      	str	r3, [r7, #20]
 800176c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800176e:	4b4d      	ldr	r3, [pc, #308]	@ (80018a4 <HAL_ADC_MspInit+0x1cc>)
 8001770:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001774:	4a4b      	ldr	r2, [pc, #300]	@ (80018a4 <HAL_ADC_MspInit+0x1cc>)
 8001776:	f043 0304 	orr.w	r3, r3, #4
 800177a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800177e:	4b49      	ldr	r3, [pc, #292]	@ (80018a4 <HAL_ADC_MspInit+0x1cc>)
 8001780:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001784:	f003 0304 	and.w	r3, r3, #4
 8001788:	613b      	str	r3, [r7, #16]
 800178a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800178c:	4b45      	ldr	r3, [pc, #276]	@ (80018a4 <HAL_ADC_MspInit+0x1cc>)
 800178e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001792:	4a44      	ldr	r2, [pc, #272]	@ (80018a4 <HAL_ADC_MspInit+0x1cc>)
 8001794:	f043 0301 	orr.w	r3, r3, #1
 8001798:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800179c:	4b41      	ldr	r3, [pc, #260]	@ (80018a4 <HAL_ADC_MspInit+0x1cc>)
 800179e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80017aa:	4b3e      	ldr	r3, [pc, #248]	@ (80018a4 <HAL_ADC_MspInit+0x1cc>)
 80017ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017b0:	4a3c      	ldr	r2, [pc, #240]	@ (80018a4 <HAL_ADC_MspInit+0x1cc>)
 80017b2:	f043 0320 	orr.w	r3, r3, #32
 80017b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017ba:	4b3a      	ldr	r3, [pc, #232]	@ (80018a4 <HAL_ADC_MspInit+0x1cc>)
 80017bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017c0:	f003 0320 	and.w	r3, r3, #32
 80017c4:	60bb      	str	r3, [r7, #8]
 80017c6:	68bb      	ldr	r3, [r7, #8]
    PA7     ------> ADC1_INP7
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80017c8:	2333      	movs	r3, #51	@ 0x33
 80017ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017ce:	2303      	movs	r3, #3
 80017d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d4:	2300      	movs	r3, #0
 80017d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017da:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80017de:	4619      	mov	r1, r3
 80017e0:	4831      	ldr	r0, [pc, #196]	@ (80018a8 <HAL_ADC_MspInit+0x1d0>)
 80017e2:	f006 fb47 	bl	8007e74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80017e6:	23ff      	movs	r3, #255	@ 0xff
 80017e8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017ec:	2303      	movs	r3, #3
 80017ee:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80017fc:	4619      	mov	r1, r3
 80017fe:	482b      	ldr	r0, [pc, #172]	@ (80018ac <HAL_ADC_MspInit+0x1d4>)
 8001800:	f006 fb38 	bl	8007e74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001804:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001808:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800180c:	2303      	movs	r3, #3
 800180e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001812:	2300      	movs	r3, #0
 8001814:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001818:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800181c:	4619      	mov	r1, r3
 800181e:	4824      	ldr	r0, [pc, #144]	@ (80018b0 <HAL_ADC_MspInit+0x1d8>)
 8001820:	f006 fb28 	bl	8007e74 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001824:	4b23      	ldr	r3, [pc, #140]	@ (80018b4 <HAL_ADC_MspInit+0x1dc>)
 8001826:	4a24      	ldr	r2, [pc, #144]	@ (80018b8 <HAL_ADC_MspInit+0x1e0>)
 8001828:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800182a:	4b22      	ldr	r3, [pc, #136]	@ (80018b4 <HAL_ADC_MspInit+0x1dc>)
 800182c:	2209      	movs	r2, #9
 800182e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001830:	4b20      	ldr	r3, [pc, #128]	@ (80018b4 <HAL_ADC_MspInit+0x1dc>)
 8001832:	2200      	movs	r2, #0
 8001834:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001836:	4b1f      	ldr	r3, [pc, #124]	@ (80018b4 <HAL_ADC_MspInit+0x1dc>)
 8001838:	2200      	movs	r2, #0
 800183a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800183c:	4b1d      	ldr	r3, [pc, #116]	@ (80018b4 <HAL_ADC_MspInit+0x1dc>)
 800183e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001842:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001844:	4b1b      	ldr	r3, [pc, #108]	@ (80018b4 <HAL_ADC_MspInit+0x1dc>)
 8001846:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800184a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800184c:	4b19      	ldr	r3, [pc, #100]	@ (80018b4 <HAL_ADC_MspInit+0x1dc>)
 800184e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001852:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001854:	4b17      	ldr	r3, [pc, #92]	@ (80018b4 <HAL_ADC_MspInit+0x1dc>)
 8001856:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800185a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800185c:	4b15      	ldr	r3, [pc, #84]	@ (80018b4 <HAL_ADC_MspInit+0x1dc>)
 800185e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001862:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001864:	4b13      	ldr	r3, [pc, #76]	@ (80018b4 <HAL_ADC_MspInit+0x1dc>)
 8001866:	2200      	movs	r2, #0
 8001868:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800186a:	4812      	ldr	r0, [pc, #72]	@ (80018b4 <HAL_ADC_MspInit+0x1dc>)
 800186c:	f003 fc56 	bl	800511c <HAL_DMA_Init>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <HAL_ADC_MspInit+0x1a2>
    {
      Error_Handler();
 8001876:	f7ff fdb9 	bl	80013ec <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a0d      	ldr	r2, [pc, #52]	@ (80018b4 <HAL_ADC_MspInit+0x1dc>)
 800187e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001880:	4a0c      	ldr	r2, [pc, #48]	@ (80018b4 <HAL_ADC_MspInit+0x1dc>)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001886:	2200      	movs	r2, #0
 8001888:	2100      	movs	r1, #0
 800188a:	2012      	movs	r0, #18
 800188c:	f003 fbff 	bl	800508e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001890:	2012      	movs	r0, #18
 8001892:	f003 fc16 	bl	80050c2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001896:	bf00      	nop
 8001898:	37f0      	adds	r7, #240	@ 0xf0
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40022000 	.word	0x40022000
 80018a4:	58024400 	.word	0x58024400
 80018a8:	58020800 	.word	0x58020800
 80018ac:	58020000 	.word	0x58020000
 80018b0:	58021400 	.word	0x58021400
 80018b4:	2400028c 	.word	0x2400028c
 80018b8:	40020010 	.word	0x40020010

080018bc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b0bc      	sub	sp, #240	@ 0xf0
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	60da      	str	r2, [r3, #12]
 80018d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018d4:	f107 0318 	add.w	r3, r7, #24
 80018d8:	22c0      	movs	r2, #192	@ 0xc0
 80018da:	2100      	movs	r1, #0
 80018dc:	4618      	mov	r0, r3
 80018de:	f00e fef7 	bl	80106d0 <memset>
  if(hspi->Instance==SPI1)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a3c      	ldr	r2, [pc, #240]	@ (80019d8 <HAL_SPI_MspInit+0x11c>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d171      	bne.n	80019d0 <HAL_SPI_MspInit+0x114>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80018ec:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80018f0:	f04f 0300 	mov.w	r3, #0
 80018f4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018fc:	f107 0318 	add.w	r3, r7, #24
 8001900:	4618      	mov	r0, r3
 8001902:	f007 fd09 	bl	8009318 <HAL_RCCEx_PeriphCLKConfig>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 800190c:	f7ff fd6e 	bl	80013ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001910:	4b32      	ldr	r3, [pc, #200]	@ (80019dc <HAL_SPI_MspInit+0x120>)
 8001912:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001916:	4a31      	ldr	r2, [pc, #196]	@ (80019dc <HAL_SPI_MspInit+0x120>)
 8001918:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800191c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001920:	4b2e      	ldr	r3, [pc, #184]	@ (80019dc <HAL_SPI_MspInit+0x120>)
 8001922:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001926:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800192a:	617b      	str	r3, [r7, #20]
 800192c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800192e:	4b2b      	ldr	r3, [pc, #172]	@ (80019dc <HAL_SPI_MspInit+0x120>)
 8001930:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001934:	4a29      	ldr	r2, [pc, #164]	@ (80019dc <HAL_SPI_MspInit+0x120>)
 8001936:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800193a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800193e:	4b27      	ldr	r3, [pc, #156]	@ (80019dc <HAL_SPI_MspInit+0x120>)
 8001940:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001944:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001948:	613b      	str	r3, [r7, #16]
 800194a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800194c:	4b23      	ldr	r3, [pc, #140]	@ (80019dc <HAL_SPI_MspInit+0x120>)
 800194e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001952:	4a22      	ldr	r2, [pc, #136]	@ (80019dc <HAL_SPI_MspInit+0x120>)
 8001954:	f043 0302 	orr.w	r3, r3, #2
 8001958:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800195c:	4b1f      	ldr	r3, [pc, #124]	@ (80019dc <HAL_SPI_MspInit+0x120>)
 800195e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PG9     ------> SPI1_MISO
    PG11     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800196a:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 800196e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001972:	2302      	movs	r3, #2
 8001974:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197e:	2300      	movs	r3, #0
 8001980:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001984:	2305      	movs	r3, #5
 8001986:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800198a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800198e:	4619      	mov	r1, r3
 8001990:	4813      	ldr	r0, [pc, #76]	@ (80019e0 <HAL_SPI_MspInit+0x124>)
 8001992:	f006 fa6f 	bl	8007e74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001996:	2320      	movs	r3, #32
 8001998:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199c:	2302      	movs	r3, #2
 800199e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a8:	2300      	movs	r3, #0
 80019aa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019ae:	2305      	movs	r3, #5
 80019b0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80019b8:	4619      	mov	r1, r3
 80019ba:	480a      	ldr	r0, [pc, #40]	@ (80019e4 <HAL_SPI_MspInit+0x128>)
 80019bc:	f006 fa5a 	bl	8007e74 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80019c0:	2200      	movs	r2, #0
 80019c2:	2100      	movs	r1, #0
 80019c4:	2023      	movs	r0, #35	@ 0x23
 80019c6:	f003 fb62 	bl	800508e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80019ca:	2023      	movs	r0, #35	@ 0x23
 80019cc:	f003 fb79 	bl	80050c2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80019d0:	bf00      	nop
 80019d2:	37f0      	adds	r7, #240	@ 0xf0
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40013000 	.word	0x40013000
 80019dc:	58024400 	.word	0x58024400
 80019e0:	58021800 	.word	0x58021800
 80019e4:	58020400 	.word	0x58020400

080019e8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019f8:	d116      	bne.n	8001a28 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001a30 <HAL_TIM_Base_MspInit+0x48>)
 80019fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a00:	4a0b      	ldr	r2, [pc, #44]	@ (8001a30 <HAL_TIM_Base_MspInit+0x48>)
 8001a02:	f043 0301 	orr.w	r3, r3, #1
 8001a06:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001a0a:	4b09      	ldr	r3, [pc, #36]	@ (8001a30 <HAL_TIM_Base_MspInit+0x48>)
 8001a0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a10:	f003 0301 	and.w	r3, r3, #1
 8001a14:	60fb      	str	r3, [r7, #12]
 8001a16:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a18:	2200      	movs	r2, #0
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	201c      	movs	r0, #28
 8001a1e:	f003 fb36 	bl	800508e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a22:	201c      	movs	r0, #28
 8001a24:	f003 fb4d 	bl	80050c2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001a28:	bf00      	nop
 8001a2a:	3710      	adds	r7, #16
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	58024400 	.word	0x58024400

08001a34 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b0ba      	sub	sp, #232	@ 0xe8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	605a      	str	r2, [r3, #4]
 8001a46:	609a      	str	r2, [r3, #8]
 8001a48:	60da      	str	r2, [r3, #12]
 8001a4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a4c:	f107 0310 	add.w	r3, r7, #16
 8001a50:	22c0      	movs	r2, #192	@ 0xc0
 8001a52:	2100      	movs	r1, #0
 8001a54:	4618      	mov	r0, r3
 8001a56:	f00e fe3b 	bl	80106d0 <memset>
  if(huart->Instance==UART4)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a2b      	ldr	r2, [pc, #172]	@ (8001b0c <HAL_UART_MspInit+0xd8>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d14e      	bne.n	8001b02 <HAL_UART_MspInit+0xce>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001a64:	f04f 0202 	mov.w	r2, #2
 8001a68:	f04f 0300 	mov.w	r3, #0
 8001a6c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001a70:	2300      	movs	r3, #0
 8001a72:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a76:	f107 0310 	add.w	r3, r7, #16
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f007 fc4c 	bl	8009318 <HAL_RCCEx_PeriphCLKConfig>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001a86:	f7ff fcb1 	bl	80013ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001a8a:	4b21      	ldr	r3, [pc, #132]	@ (8001b10 <HAL_UART_MspInit+0xdc>)
 8001a8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a90:	4a1f      	ldr	r2, [pc, #124]	@ (8001b10 <HAL_UART_MspInit+0xdc>)
 8001a92:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001a96:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001a9a:	4b1d      	ldr	r3, [pc, #116]	@ (8001b10 <HAL_UART_MspInit+0xdc>)
 8001a9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001aa0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aa8:	4b19      	ldr	r3, [pc, #100]	@ (8001b10 <HAL_UART_MspInit+0xdc>)
 8001aaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001aae:	4a18      	ldr	r2, [pc, #96]	@ (8001b10 <HAL_UART_MspInit+0xdc>)
 8001ab0:	f043 0304 	orr.w	r3, r3, #4
 8001ab4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ab8:	4b15      	ldr	r3, [pc, #84]	@ (8001b10 <HAL_UART_MspInit+0xdc>)
 8001aba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001abe:	f003 0304 	and.w	r3, r3, #4
 8001ac2:	60bb      	str	r3, [r7, #8]
 8001ac4:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001ac6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001aca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ada:	2300      	movs	r3, #0
 8001adc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001ae0:	2308      	movs	r3, #8
 8001ae2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ae6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001aea:	4619      	mov	r1, r3
 8001aec:	4809      	ldr	r0, [pc, #36]	@ (8001b14 <HAL_UART_MspInit+0xe0>)
 8001aee:	f006 f9c1 	bl	8007e74 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001af2:	2200      	movs	r2, #0
 8001af4:	2100      	movs	r1, #0
 8001af6:	2034      	movs	r0, #52	@ 0x34
 8001af8:	f003 fac9 	bl	800508e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001afc:	2034      	movs	r0, #52	@ 0x34
 8001afe:	f003 fae0 	bl	80050c2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END UART4_MspInit 1 */

  }

}
 8001b02:	bf00      	nop
 8001b04:	37e8      	adds	r7, #232	@ 0xe8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40004c00 	.word	0x40004c00
 8001b10:	58024400 	.word	0x58024400
 8001b14:	58020800 	.word	0x58020800

08001b18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b1c:	bf00      	nop
 8001b1e:	e7fd      	b.n	8001b1c <NMI_Handler+0x4>

08001b20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b24:	bf00      	nop
 8001b26:	e7fd      	b.n	8001b24 <HardFault_Handler+0x4>

08001b28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b2c:	bf00      	nop
 8001b2e:	e7fd      	b.n	8001b2c <MemManage_Handler+0x4>

08001b30 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b34:	bf00      	nop
 8001b36:	e7fd      	b.n	8001b34 <BusFault_Handler+0x4>

08001b38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b3c:	bf00      	nop
 8001b3e:	e7fd      	b.n	8001b3c <UsageFault_Handler+0x4>

08001b40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b44:	bf00      	nop
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr

08001b4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b52:	bf00      	nop
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b60:	bf00      	nop
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr

08001b6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b6e:	f001 fbf9 	bl	8003364 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
	...

08001b78 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001b7c:	4802      	ldr	r0, [pc, #8]	@ (8001b88 <DMA1_Stream0_IRQHandler+0x10>)
 8001b7e:	f004 fdf7 	bl	8006770 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	2400028c 	.word	0x2400028c

08001b8c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001b90:	4802      	ldr	r0, [pc, #8]	@ (8001b9c <ADC_IRQHandler+0x10>)
 8001b92:	f002 f8ef 	bl	8003d74 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	24000228 	.word	0x24000228

08001ba0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ba4:	4802      	ldr	r0, [pc, #8]	@ (8001bb0 <TIM2_IRQHandler+0x10>)
 8001ba6:	f00a fea9 	bl	800c8fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001baa:	bf00      	nop
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	2400038c 	.word	0x2400038c

08001bb4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001bb8:	4802      	ldr	r0, [pc, #8]	@ (8001bc4 <SPI1_IRQHandler+0x10>)
 8001bba:	f00a fa79 	bl	800c0b0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	24000304 	.word	0x24000304

08001bc8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8001bcc:	2000      	movs	r0, #0
 8001bce:	f001 fa67 	bl	80030a0 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
	...

08001bd8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001bdc:	4802      	ldr	r0, [pc, #8]	@ (8001be8 <UART4_IRQHandler+0x10>)
 8001bde:	f00b fbc9 	bl	800d374 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	240003d8 	.word	0x240003d8

08001bec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  return 1;
 8001bf0:	2301      	movs	r3, #1
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <_kill>:

int _kill(int pid, int sig)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c06:	f00e fe21 	bl	801084c <__errno>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2216      	movs	r2, #22
 8001c0e:	601a      	str	r2, [r3, #0]
  return -1;
 8001c10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <_exit>:

void _exit (int status)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c24:	f04f 31ff 	mov.w	r1, #4294967295
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f7ff ffe7 	bl	8001bfc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c2e:	bf00      	nop
 8001c30:	e7fd      	b.n	8001c2e <_exit+0x12>

08001c32 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b086      	sub	sp, #24
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	60f8      	str	r0, [r7, #12]
 8001c3a:	60b9      	str	r1, [r7, #8]
 8001c3c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c3e:	2300      	movs	r3, #0
 8001c40:	617b      	str	r3, [r7, #20]
 8001c42:	e00a      	b.n	8001c5a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c44:	f3af 8000 	nop.w
 8001c48:	4601      	mov	r1, r0
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	1c5a      	adds	r2, r3, #1
 8001c4e:	60ba      	str	r2, [r7, #8]
 8001c50:	b2ca      	uxtb	r2, r1
 8001c52:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	3301      	adds	r3, #1
 8001c58:	617b      	str	r3, [r7, #20]
 8001c5a:	697a      	ldr	r2, [r7, #20]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	dbf0      	blt.n	8001c44 <_read+0x12>
  }

  return len;
 8001c62:	687b      	ldr	r3, [r7, #4]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3718      	adds	r7, #24
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c78:	2300      	movs	r3, #0
 8001c7a:	617b      	str	r3, [r7, #20]
 8001c7c:	e009      	b.n	8001c92 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	1c5a      	adds	r2, r3, #1
 8001c82:	60ba      	str	r2, [r7, #8]
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f001 fa7e 	bl	8003188 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	617b      	str	r3, [r7, #20]
 8001c92:	697a      	ldr	r2, [r7, #20]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	dbf1      	blt.n	8001c7e <_write+0x12>
  }
  return len;
 8001c9a:	687b      	ldr	r3, [r7, #4]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3718      	adds	r7, #24
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <_close>:

int _close(int file)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ccc:	605a      	str	r2, [r3, #4]
  return 0;
 8001cce:	2300      	movs	r3, #0
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <_isatty>:

int _isatty(int file)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ce4:	2301      	movs	r3, #1
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b085      	sub	sp, #20
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	60f8      	str	r0, [r7, #12]
 8001cfa:	60b9      	str	r1, [r7, #8]
 8001cfc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cfe:	2300      	movs	r3, #0
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3714      	adds	r7, #20
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d14:	4a14      	ldr	r2, [pc, #80]	@ (8001d68 <_sbrk+0x5c>)
 8001d16:	4b15      	ldr	r3, [pc, #84]	@ (8001d6c <_sbrk+0x60>)
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d20:	4b13      	ldr	r3, [pc, #76]	@ (8001d70 <_sbrk+0x64>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d102      	bne.n	8001d2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d28:	4b11      	ldr	r3, [pc, #68]	@ (8001d70 <_sbrk+0x64>)
 8001d2a:	4a12      	ldr	r2, [pc, #72]	@ (8001d74 <_sbrk+0x68>)
 8001d2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d2e:	4b10      	ldr	r3, [pc, #64]	@ (8001d70 <_sbrk+0x64>)
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4413      	add	r3, r2
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d207      	bcs.n	8001d4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d3c:	f00e fd86 	bl	801084c <__errno>
 8001d40:	4603      	mov	r3, r0
 8001d42:	220c      	movs	r2, #12
 8001d44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d46:	f04f 33ff 	mov.w	r3, #4294967295
 8001d4a:	e009      	b.n	8001d60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d4c:	4b08      	ldr	r3, [pc, #32]	@ (8001d70 <_sbrk+0x64>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d52:	4b07      	ldr	r3, [pc, #28]	@ (8001d70 <_sbrk+0x64>)
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4413      	add	r3, r2
 8001d5a:	4a05      	ldr	r2, [pc, #20]	@ (8001d70 <_sbrk+0x64>)
 8001d5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3718      	adds	r7, #24
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	24080000 	.word	0x24080000
 8001d6c:	00000400 	.word	0x00000400
 8001d70:	240004d8 	.word	0x240004d8
 8001d74:	24000808 	.word	0x24000808

08001d78 <MAX31855_CS_Enable>:

extern SPI_HandleTypeDef hspi1; // SPI1 핸들러 외부 선언

// CS 핀을 Low로 설정 (SPI 통신 시작)
void MAX31855_CS_Enable(uint8_t ch)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	4603      	mov	r3, r0
 8001d80:	71fb      	strb	r3, [r7, #7]
	switch(ch) {
 8001d82:	79fb      	ldrb	r3, [r7, #7]
 8001d84:	2b0b      	cmp	r3, #11
 8001d86:	f200 8329 	bhi.w	80023dc <MAX31855_CS_Enable+0x664>
 8001d8a:	a201      	add	r2, pc, #4	@ (adr r2, 8001d90 <MAX31855_CS_Enable+0x18>)
 8001d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d90:	08001dc1 	.word	0x08001dc1
 8001d94:	08001e43 	.word	0x08001e43
 8001d98:	08001ec5 	.word	0x08001ec5
 8001d9c:	08001f47 	.word	0x08001f47
 8001da0:	08001fc9 	.word	0x08001fc9
 8001da4:	0800204b 	.word	0x0800204b
 8001da8:	080020d1 	.word	0x080020d1
 8001dac:	08002153 	.word	0x08002153
 8001db0:	080021d5 	.word	0x080021d5
 8001db4:	08002257 	.word	0x08002257
 8001db8:	080022d9 	.word	0x080022d9
 8001dbc:	0800235b 	.word	0x0800235b
	case TC_CH1:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_RESET);
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	2101      	movs	r1, #1
 8001dc4:	48c1      	ldr	r0, [pc, #772]	@ (80020cc <MAX31855_CS_Enable+0x354>)
 8001dc6:	f006 fa05 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8001dca:	2201      	movs	r2, #1
 8001dcc:	2102      	movs	r1, #2
 8001dce:	48bf      	ldr	r0, [pc, #764]	@ (80020cc <MAX31855_CS_Enable+0x354>)
 8001dd0:	f006 fa00 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	2104      	movs	r1, #4
 8001dd8:	48bc      	ldr	r0, [pc, #752]	@ (80020cc <MAX31855_CS_Enable+0x354>)
 8001dda:	f006 f9fb 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8001dde:	2201      	movs	r2, #1
 8001de0:	2108      	movs	r1, #8
 8001de2:	48ba      	ldr	r0, [pc, #744]	@ (80020cc <MAX31855_CS_Enable+0x354>)
 8001de4:	f006 f9f6 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8001de8:	2201      	movs	r2, #1
 8001dea:	2110      	movs	r1, #16
 8001dec:	48b7      	ldr	r0, [pc, #732]	@ (80020cc <MAX31855_CS_Enable+0x354>)
 8001dee:	f006 f9f1 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8001df2:	2201      	movs	r2, #1
 8001df4:	2120      	movs	r1, #32
 8001df6:	48b5      	ldr	r0, [pc, #724]	@ (80020cc <MAX31855_CS_Enable+0x354>)
 8001df8:	f006 f9ec 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	2140      	movs	r1, #64	@ 0x40
 8001e00:	48b2      	ldr	r0, [pc, #712]	@ (80020cc <MAX31855_CS_Enable+0x354>)
 8001e02:	f006 f9e7 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8001e06:	2201      	movs	r2, #1
 8001e08:	2180      	movs	r1, #128	@ 0x80
 8001e0a:	48b0      	ldr	r0, [pc, #704]	@ (80020cc <MAX31855_CS_Enable+0x354>)
 8001e0c:	f006 f9e2 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8001e10:	2201      	movs	r2, #1
 8001e12:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001e16:	48ad      	ldr	r0, [pc, #692]	@ (80020cc <MAX31855_CS_Enable+0x354>)
 8001e18:	f006 f9dc 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001e22:	48aa      	ldr	r0, [pc, #680]	@ (80020cc <MAX31855_CS_Enable+0x354>)
 8001e24:	f006 f9d6 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8001e28:	2201      	movs	r2, #1
 8001e2a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e2e:	48a7      	ldr	r0, [pc, #668]	@ (80020cc <MAX31855_CS_Enable+0x354>)
 8001e30:	f006 f9d0 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8001e34:	2201      	movs	r2, #1
 8001e36:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001e3a:	48a4      	ldr	r0, [pc, #656]	@ (80020cc <MAX31855_CS_Enable+0x354>)
 8001e3c:	f006 f9ca 	bl	80081d4 <HAL_GPIO_WritePin>
		break;
 8001e40:	e2cd      	b.n	80023de <MAX31855_CS_Enable+0x666>
	case TC_CH2:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8001e42:	2201      	movs	r2, #1
 8001e44:	2101      	movs	r1, #1
 8001e46:	48a1      	ldr	r0, [pc, #644]	@ (80020cc <MAX31855_CS_Enable+0x354>)
 8001e48:	f006 f9c4 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_RESET);
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	2102      	movs	r1, #2
 8001e50:	489e      	ldr	r0, [pc, #632]	@ (80020cc <MAX31855_CS_Enable+0x354>)
 8001e52:	f006 f9bf 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8001e56:	2201      	movs	r2, #1
 8001e58:	2104      	movs	r1, #4
 8001e5a:	489c      	ldr	r0, [pc, #624]	@ (80020cc <MAX31855_CS_Enable+0x354>)
 8001e5c:	f006 f9ba 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8001e60:	2201      	movs	r2, #1
 8001e62:	2108      	movs	r1, #8
 8001e64:	4899      	ldr	r0, [pc, #612]	@ (80020cc <MAX31855_CS_Enable+0x354>)
 8001e66:	f006 f9b5 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	2110      	movs	r1, #16
 8001e6e:	4897      	ldr	r0, [pc, #604]	@ (80020cc <MAX31855_CS_Enable+0x354>)
 8001e70:	f006 f9b0 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8001e74:	2201      	movs	r2, #1
 8001e76:	2120      	movs	r1, #32
 8001e78:	4894      	ldr	r0, [pc, #592]	@ (80020cc <MAX31855_CS_Enable+0x354>)
 8001e7a:	f006 f9ab 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8001e7e:	2201      	movs	r2, #1
 8001e80:	2140      	movs	r1, #64	@ 0x40
 8001e82:	4892      	ldr	r0, [pc, #584]	@ (80020cc <MAX31855_CS_Enable+0x354>)
 8001e84:	f006 f9a6 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8001e88:	2201      	movs	r2, #1
 8001e8a:	2180      	movs	r1, #128	@ 0x80
 8001e8c:	488f      	ldr	r0, [pc, #572]	@ (80020cc <MAX31855_CS_Enable+0x354>)
 8001e8e:	f006 f9a1 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8001e92:	2201      	movs	r2, #1
 8001e94:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001e98:	488c      	ldr	r0, [pc, #560]	@ (80020cc <MAX31855_CS_Enable+0x354>)
 8001e9a:	f006 f99b 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001ea4:	4889      	ldr	r0, [pc, #548]	@ (80020cc <MAX31855_CS_Enable+0x354>)
 8001ea6:	f006 f995 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001eb0:	4886      	ldr	r0, [pc, #536]	@ (80020cc <MAX31855_CS_Enable+0x354>)
 8001eb2:	f006 f98f 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001ebc:	4883      	ldr	r0, [pc, #524]	@ (80020cc <MAX31855_CS_Enable+0x354>)
 8001ebe:	f006 f989 	bl	80081d4 <HAL_GPIO_WritePin>
		break;
 8001ec2:	e28c      	b.n	80023de <MAX31855_CS_Enable+0x666>
	case TC_CH3:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	4880      	ldr	r0, [pc, #512]	@ (80020cc <MAX31855_CS_Enable+0x354>)
 8001eca:	f006 f983 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8001ece:	2201      	movs	r2, #1
 8001ed0:	2102      	movs	r1, #2
 8001ed2:	487e      	ldr	r0, [pc, #504]	@ (80020cc <MAX31855_CS_Enable+0x354>)
 8001ed4:	f006 f97e 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_RESET);
 8001ed8:	2200      	movs	r2, #0
 8001eda:	2104      	movs	r1, #4
 8001edc:	487b      	ldr	r0, [pc, #492]	@ (80020cc <MAX31855_CS_Enable+0x354>)
 8001ede:	f006 f979 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	2108      	movs	r1, #8
 8001ee6:	4879      	ldr	r0, [pc, #484]	@ (80020cc <MAX31855_CS_Enable+0x354>)
 8001ee8:	f006 f974 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8001eec:	2201      	movs	r2, #1
 8001eee:	2110      	movs	r1, #16
 8001ef0:	4876      	ldr	r0, [pc, #472]	@ (80020cc <MAX31855_CS_Enable+0x354>)
 8001ef2:	f006 f96f 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	2120      	movs	r1, #32
 8001efa:	4874      	ldr	r0, [pc, #464]	@ (80020cc <MAX31855_CS_Enable+0x354>)
 8001efc:	f006 f96a 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8001f00:	2201      	movs	r2, #1
 8001f02:	2140      	movs	r1, #64	@ 0x40
 8001f04:	4871      	ldr	r0, [pc, #452]	@ (80020cc <MAX31855_CS_Enable+0x354>)
 8001f06:	f006 f965 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	2180      	movs	r1, #128	@ 0x80
 8001f0e:	486f      	ldr	r0, [pc, #444]	@ (80020cc <MAX31855_CS_Enable+0x354>)
 8001f10:	f006 f960 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8001f14:	2201      	movs	r2, #1
 8001f16:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001f1a:	486c      	ldr	r0, [pc, #432]	@ (80020cc <MAX31855_CS_Enable+0x354>)
 8001f1c:	f006 f95a 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8001f20:	2201      	movs	r2, #1
 8001f22:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f26:	4869      	ldr	r0, [pc, #420]	@ (80020cc <MAX31855_CS_Enable+0x354>)
 8001f28:	f006 f954 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f32:	4866      	ldr	r0, [pc, #408]	@ (80020cc <MAX31855_CS_Enable+0x354>)
 8001f34:	f006 f94e 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8001f38:	2201      	movs	r2, #1
 8001f3a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001f3e:	4863      	ldr	r0, [pc, #396]	@ (80020cc <MAX31855_CS_Enable+0x354>)
 8001f40:	f006 f948 	bl	80081d4 <HAL_GPIO_WritePin>
		break;
 8001f44:	e24b      	b.n	80023de <MAX31855_CS_Enable+0x666>
	case TC_CH4:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8001f46:	2201      	movs	r2, #1
 8001f48:	2101      	movs	r1, #1
 8001f4a:	4860      	ldr	r0, [pc, #384]	@ (80020cc <MAX31855_CS_Enable+0x354>)
 8001f4c:	f006 f942 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8001f50:	2201      	movs	r2, #1
 8001f52:	2102      	movs	r1, #2
 8001f54:	485d      	ldr	r0, [pc, #372]	@ (80020cc <MAX31855_CS_Enable+0x354>)
 8001f56:	f006 f93d 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	2104      	movs	r1, #4
 8001f5e:	485b      	ldr	r0, [pc, #364]	@ (80020cc <MAX31855_CS_Enable+0x354>)
 8001f60:	f006 f938 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_RESET);
 8001f64:	2200      	movs	r2, #0
 8001f66:	2108      	movs	r1, #8
 8001f68:	4858      	ldr	r0, [pc, #352]	@ (80020cc <MAX31855_CS_Enable+0x354>)
 8001f6a:	f006 f933 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8001f6e:	2201      	movs	r2, #1
 8001f70:	2110      	movs	r1, #16
 8001f72:	4856      	ldr	r0, [pc, #344]	@ (80020cc <MAX31855_CS_Enable+0x354>)
 8001f74:	f006 f92e 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8001f78:	2201      	movs	r2, #1
 8001f7a:	2120      	movs	r1, #32
 8001f7c:	4853      	ldr	r0, [pc, #332]	@ (80020cc <MAX31855_CS_Enable+0x354>)
 8001f7e:	f006 f929 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8001f82:	2201      	movs	r2, #1
 8001f84:	2140      	movs	r1, #64	@ 0x40
 8001f86:	4851      	ldr	r0, [pc, #324]	@ (80020cc <MAX31855_CS_Enable+0x354>)
 8001f88:	f006 f924 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	2180      	movs	r1, #128	@ 0x80
 8001f90:	484e      	ldr	r0, [pc, #312]	@ (80020cc <MAX31855_CS_Enable+0x354>)
 8001f92:	f006 f91f 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8001f96:	2201      	movs	r2, #1
 8001f98:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001f9c:	484b      	ldr	r0, [pc, #300]	@ (80020cc <MAX31855_CS_Enable+0x354>)
 8001f9e:	f006 f919 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001fa8:	4848      	ldr	r0, [pc, #288]	@ (80020cc <MAX31855_CS_Enable+0x354>)
 8001faa:	f006 f913 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001fb4:	4845      	ldr	r0, [pc, #276]	@ (80020cc <MAX31855_CS_Enable+0x354>)
 8001fb6:	f006 f90d 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001fc0:	4842      	ldr	r0, [pc, #264]	@ (80020cc <MAX31855_CS_Enable+0x354>)
 8001fc2:	f006 f907 	bl	80081d4 <HAL_GPIO_WritePin>
		break;
 8001fc6:	e20a      	b.n	80023de <MAX31855_CS_Enable+0x666>
	case TC_CH5:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8001fc8:	2201      	movs	r2, #1
 8001fca:	2101      	movs	r1, #1
 8001fcc:	483f      	ldr	r0, [pc, #252]	@ (80020cc <MAX31855_CS_Enable+0x354>)
 8001fce:	f006 f901 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	2102      	movs	r1, #2
 8001fd6:	483d      	ldr	r0, [pc, #244]	@ (80020cc <MAX31855_CS_Enable+0x354>)
 8001fd8:	f006 f8fc 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8001fdc:	2201      	movs	r2, #1
 8001fde:	2104      	movs	r1, #4
 8001fe0:	483a      	ldr	r0, [pc, #232]	@ (80020cc <MAX31855_CS_Enable+0x354>)
 8001fe2:	f006 f8f7 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	2108      	movs	r1, #8
 8001fea:	4838      	ldr	r0, [pc, #224]	@ (80020cc <MAX31855_CS_Enable+0x354>)
 8001fec:	f006 f8f2 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_RESET);
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	2110      	movs	r1, #16
 8001ff4:	4835      	ldr	r0, [pc, #212]	@ (80020cc <MAX31855_CS_Enable+0x354>)
 8001ff6:	f006 f8ed 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	2120      	movs	r1, #32
 8001ffe:	4833      	ldr	r0, [pc, #204]	@ (80020cc <MAX31855_CS_Enable+0x354>)
 8002000:	f006 f8e8 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8002004:	2201      	movs	r2, #1
 8002006:	2140      	movs	r1, #64	@ 0x40
 8002008:	4830      	ldr	r0, [pc, #192]	@ (80020cc <MAX31855_CS_Enable+0x354>)
 800200a:	f006 f8e3 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 800200e:	2201      	movs	r2, #1
 8002010:	2180      	movs	r1, #128	@ 0x80
 8002012:	482e      	ldr	r0, [pc, #184]	@ (80020cc <MAX31855_CS_Enable+0x354>)
 8002014:	f006 f8de 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8002018:	2201      	movs	r2, #1
 800201a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800201e:	482b      	ldr	r0, [pc, #172]	@ (80020cc <MAX31855_CS_Enable+0x354>)
 8002020:	f006 f8d8 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8002024:	2201      	movs	r2, #1
 8002026:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800202a:	4828      	ldr	r0, [pc, #160]	@ (80020cc <MAX31855_CS_Enable+0x354>)
 800202c:	f006 f8d2 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8002030:	2201      	movs	r2, #1
 8002032:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002036:	4825      	ldr	r0, [pc, #148]	@ (80020cc <MAX31855_CS_Enable+0x354>)
 8002038:	f006 f8cc 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 800203c:	2201      	movs	r2, #1
 800203e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002042:	4822      	ldr	r0, [pc, #136]	@ (80020cc <MAX31855_CS_Enable+0x354>)
 8002044:	f006 f8c6 	bl	80081d4 <HAL_GPIO_WritePin>
		break;
 8002048:	e1c9      	b.n	80023de <MAX31855_CS_Enable+0x666>
	case TC_CH6:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 800204a:	2201      	movs	r2, #1
 800204c:	2101      	movs	r1, #1
 800204e:	481f      	ldr	r0, [pc, #124]	@ (80020cc <MAX31855_CS_Enable+0x354>)
 8002050:	f006 f8c0 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8002054:	2201      	movs	r2, #1
 8002056:	2102      	movs	r1, #2
 8002058:	481c      	ldr	r0, [pc, #112]	@ (80020cc <MAX31855_CS_Enable+0x354>)
 800205a:	f006 f8bb 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 800205e:	2201      	movs	r2, #1
 8002060:	2104      	movs	r1, #4
 8002062:	481a      	ldr	r0, [pc, #104]	@ (80020cc <MAX31855_CS_Enable+0x354>)
 8002064:	f006 f8b6 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8002068:	2201      	movs	r2, #1
 800206a:	2108      	movs	r1, #8
 800206c:	4817      	ldr	r0, [pc, #92]	@ (80020cc <MAX31855_CS_Enable+0x354>)
 800206e:	f006 f8b1 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8002072:	2201      	movs	r2, #1
 8002074:	2110      	movs	r1, #16
 8002076:	4815      	ldr	r0, [pc, #84]	@ (80020cc <MAX31855_CS_Enable+0x354>)
 8002078:	f006 f8ac 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_RESET);
 800207c:	2200      	movs	r2, #0
 800207e:	2120      	movs	r1, #32
 8002080:	4812      	ldr	r0, [pc, #72]	@ (80020cc <MAX31855_CS_Enable+0x354>)
 8002082:	f006 f8a7 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8002086:	2201      	movs	r2, #1
 8002088:	2140      	movs	r1, #64	@ 0x40
 800208a:	4810      	ldr	r0, [pc, #64]	@ (80020cc <MAX31855_CS_Enable+0x354>)
 800208c:	f006 f8a2 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8002090:	2201      	movs	r2, #1
 8002092:	2180      	movs	r1, #128	@ 0x80
 8002094:	480d      	ldr	r0, [pc, #52]	@ (80020cc <MAX31855_CS_Enable+0x354>)
 8002096:	f006 f89d 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 800209a:	2201      	movs	r2, #1
 800209c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80020a0:	480a      	ldr	r0, [pc, #40]	@ (80020cc <MAX31855_CS_Enable+0x354>)
 80020a2:	f006 f897 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 80020a6:	2201      	movs	r2, #1
 80020a8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80020ac:	4807      	ldr	r0, [pc, #28]	@ (80020cc <MAX31855_CS_Enable+0x354>)
 80020ae:	f006 f891 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 80020b2:	2201      	movs	r2, #1
 80020b4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80020b8:	4804      	ldr	r0, [pc, #16]	@ (80020cc <MAX31855_CS_Enable+0x354>)
 80020ba:	f006 f88b 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 80020be:	2201      	movs	r2, #1
 80020c0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80020c4:	4801      	ldr	r0, [pc, #4]	@ (80020cc <MAX31855_CS_Enable+0x354>)
 80020c6:	f006 f885 	bl	80081d4 <HAL_GPIO_WritePin>
		break;
 80020ca:	e188      	b.n	80023de <MAX31855_CS_Enable+0x666>
 80020cc:	58020c00 	.word	0x58020c00
	case TC_CH7:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 80020d0:	2201      	movs	r2, #1
 80020d2:	2101      	movs	r1, #1
 80020d4:	48c4      	ldr	r0, [pc, #784]	@ (80023e8 <MAX31855_CS_Enable+0x670>)
 80020d6:	f006 f87d 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 80020da:	2201      	movs	r2, #1
 80020dc:	2102      	movs	r1, #2
 80020de:	48c2      	ldr	r0, [pc, #776]	@ (80023e8 <MAX31855_CS_Enable+0x670>)
 80020e0:	f006 f878 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 80020e4:	2201      	movs	r2, #1
 80020e6:	2104      	movs	r1, #4
 80020e8:	48bf      	ldr	r0, [pc, #764]	@ (80023e8 <MAX31855_CS_Enable+0x670>)
 80020ea:	f006 f873 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 80020ee:	2201      	movs	r2, #1
 80020f0:	2108      	movs	r1, #8
 80020f2:	48bd      	ldr	r0, [pc, #756]	@ (80023e8 <MAX31855_CS_Enable+0x670>)
 80020f4:	f006 f86e 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 80020f8:	2201      	movs	r2, #1
 80020fa:	2110      	movs	r1, #16
 80020fc:	48ba      	ldr	r0, [pc, #744]	@ (80023e8 <MAX31855_CS_Enable+0x670>)
 80020fe:	f006 f869 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8002102:	2201      	movs	r2, #1
 8002104:	2120      	movs	r1, #32
 8002106:	48b8      	ldr	r0, [pc, #736]	@ (80023e8 <MAX31855_CS_Enable+0x670>)
 8002108:	f006 f864 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_RESET);
 800210c:	2200      	movs	r2, #0
 800210e:	2140      	movs	r1, #64	@ 0x40
 8002110:	48b5      	ldr	r0, [pc, #724]	@ (80023e8 <MAX31855_CS_Enable+0x670>)
 8002112:	f006 f85f 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8002116:	2201      	movs	r2, #1
 8002118:	2180      	movs	r1, #128	@ 0x80
 800211a:	48b3      	ldr	r0, [pc, #716]	@ (80023e8 <MAX31855_CS_Enable+0x670>)
 800211c:	f006 f85a 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8002120:	2201      	movs	r2, #1
 8002122:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002126:	48b0      	ldr	r0, [pc, #704]	@ (80023e8 <MAX31855_CS_Enable+0x670>)
 8002128:	f006 f854 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 800212c:	2201      	movs	r2, #1
 800212e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002132:	48ad      	ldr	r0, [pc, #692]	@ (80023e8 <MAX31855_CS_Enable+0x670>)
 8002134:	f006 f84e 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8002138:	2201      	movs	r2, #1
 800213a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800213e:	48aa      	ldr	r0, [pc, #680]	@ (80023e8 <MAX31855_CS_Enable+0x670>)
 8002140:	f006 f848 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8002144:	2201      	movs	r2, #1
 8002146:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800214a:	48a7      	ldr	r0, [pc, #668]	@ (80023e8 <MAX31855_CS_Enable+0x670>)
 800214c:	f006 f842 	bl	80081d4 <HAL_GPIO_WritePin>
		break;
 8002150:	e145      	b.n	80023de <MAX31855_CS_Enable+0x666>
	case TC_CH8:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8002152:	2201      	movs	r2, #1
 8002154:	2101      	movs	r1, #1
 8002156:	48a4      	ldr	r0, [pc, #656]	@ (80023e8 <MAX31855_CS_Enable+0x670>)
 8002158:	f006 f83c 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 800215c:	2201      	movs	r2, #1
 800215e:	2102      	movs	r1, #2
 8002160:	48a1      	ldr	r0, [pc, #644]	@ (80023e8 <MAX31855_CS_Enable+0x670>)
 8002162:	f006 f837 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8002166:	2201      	movs	r2, #1
 8002168:	2104      	movs	r1, #4
 800216a:	489f      	ldr	r0, [pc, #636]	@ (80023e8 <MAX31855_CS_Enable+0x670>)
 800216c:	f006 f832 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8002170:	2201      	movs	r2, #1
 8002172:	2108      	movs	r1, #8
 8002174:	489c      	ldr	r0, [pc, #624]	@ (80023e8 <MAX31855_CS_Enable+0x670>)
 8002176:	f006 f82d 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 800217a:	2201      	movs	r2, #1
 800217c:	2110      	movs	r1, #16
 800217e:	489a      	ldr	r0, [pc, #616]	@ (80023e8 <MAX31855_CS_Enable+0x670>)
 8002180:	f006 f828 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8002184:	2201      	movs	r2, #1
 8002186:	2120      	movs	r1, #32
 8002188:	4897      	ldr	r0, [pc, #604]	@ (80023e8 <MAX31855_CS_Enable+0x670>)
 800218a:	f006 f823 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 800218e:	2201      	movs	r2, #1
 8002190:	2140      	movs	r1, #64	@ 0x40
 8002192:	4895      	ldr	r0, [pc, #596]	@ (80023e8 <MAX31855_CS_Enable+0x670>)
 8002194:	f006 f81e 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_RESET);
 8002198:	2200      	movs	r2, #0
 800219a:	2180      	movs	r1, #128	@ 0x80
 800219c:	4892      	ldr	r0, [pc, #584]	@ (80023e8 <MAX31855_CS_Enable+0x670>)
 800219e:	f006 f819 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 80021a2:	2201      	movs	r2, #1
 80021a4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80021a8:	488f      	ldr	r0, [pc, #572]	@ (80023e8 <MAX31855_CS_Enable+0x670>)
 80021aa:	f006 f813 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 80021ae:	2201      	movs	r2, #1
 80021b0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80021b4:	488c      	ldr	r0, [pc, #560]	@ (80023e8 <MAX31855_CS_Enable+0x670>)
 80021b6:	f006 f80d 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 80021ba:	2201      	movs	r2, #1
 80021bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80021c0:	4889      	ldr	r0, [pc, #548]	@ (80023e8 <MAX31855_CS_Enable+0x670>)
 80021c2:	f006 f807 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 80021c6:	2201      	movs	r2, #1
 80021c8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80021cc:	4886      	ldr	r0, [pc, #536]	@ (80023e8 <MAX31855_CS_Enable+0x670>)
 80021ce:	f006 f801 	bl	80081d4 <HAL_GPIO_WritePin>
		break;
 80021d2:	e104      	b.n	80023de <MAX31855_CS_Enable+0x666>
	case TC_CH9:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 80021d4:	2201      	movs	r2, #1
 80021d6:	2101      	movs	r1, #1
 80021d8:	4883      	ldr	r0, [pc, #524]	@ (80023e8 <MAX31855_CS_Enable+0x670>)
 80021da:	f005 fffb 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 80021de:	2201      	movs	r2, #1
 80021e0:	2102      	movs	r1, #2
 80021e2:	4881      	ldr	r0, [pc, #516]	@ (80023e8 <MAX31855_CS_Enable+0x670>)
 80021e4:	f005 fff6 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 80021e8:	2201      	movs	r2, #1
 80021ea:	2104      	movs	r1, #4
 80021ec:	487e      	ldr	r0, [pc, #504]	@ (80023e8 <MAX31855_CS_Enable+0x670>)
 80021ee:	f005 fff1 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 80021f2:	2201      	movs	r2, #1
 80021f4:	2108      	movs	r1, #8
 80021f6:	487c      	ldr	r0, [pc, #496]	@ (80023e8 <MAX31855_CS_Enable+0x670>)
 80021f8:	f005 ffec 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 80021fc:	2201      	movs	r2, #1
 80021fe:	2110      	movs	r1, #16
 8002200:	4879      	ldr	r0, [pc, #484]	@ (80023e8 <MAX31855_CS_Enable+0x670>)
 8002202:	f005 ffe7 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8002206:	2201      	movs	r2, #1
 8002208:	2120      	movs	r1, #32
 800220a:	4877      	ldr	r0, [pc, #476]	@ (80023e8 <MAX31855_CS_Enable+0x670>)
 800220c:	f005 ffe2 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8002210:	2201      	movs	r2, #1
 8002212:	2140      	movs	r1, #64	@ 0x40
 8002214:	4874      	ldr	r0, [pc, #464]	@ (80023e8 <MAX31855_CS_Enable+0x670>)
 8002216:	f005 ffdd 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 800221a:	2201      	movs	r2, #1
 800221c:	2180      	movs	r1, #128	@ 0x80
 800221e:	4872      	ldr	r0, [pc, #456]	@ (80023e8 <MAX31855_CS_Enable+0x670>)
 8002220:	f005 ffd8 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_RESET);
 8002224:	2200      	movs	r2, #0
 8002226:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800222a:	486f      	ldr	r0, [pc, #444]	@ (80023e8 <MAX31855_CS_Enable+0x670>)
 800222c:	f005 ffd2 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8002230:	2201      	movs	r2, #1
 8002232:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002236:	486c      	ldr	r0, [pc, #432]	@ (80023e8 <MAX31855_CS_Enable+0x670>)
 8002238:	f005 ffcc 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 800223c:	2201      	movs	r2, #1
 800223e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002242:	4869      	ldr	r0, [pc, #420]	@ (80023e8 <MAX31855_CS_Enable+0x670>)
 8002244:	f005 ffc6 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8002248:	2201      	movs	r2, #1
 800224a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800224e:	4866      	ldr	r0, [pc, #408]	@ (80023e8 <MAX31855_CS_Enable+0x670>)
 8002250:	f005 ffc0 	bl	80081d4 <HAL_GPIO_WritePin>
		break;
 8002254:	e0c3      	b.n	80023de <MAX31855_CS_Enable+0x666>
	case TC_CH10:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8002256:	2201      	movs	r2, #1
 8002258:	2101      	movs	r1, #1
 800225a:	4863      	ldr	r0, [pc, #396]	@ (80023e8 <MAX31855_CS_Enable+0x670>)
 800225c:	f005 ffba 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8002260:	2201      	movs	r2, #1
 8002262:	2102      	movs	r1, #2
 8002264:	4860      	ldr	r0, [pc, #384]	@ (80023e8 <MAX31855_CS_Enable+0x670>)
 8002266:	f005 ffb5 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 800226a:	2201      	movs	r2, #1
 800226c:	2104      	movs	r1, #4
 800226e:	485e      	ldr	r0, [pc, #376]	@ (80023e8 <MAX31855_CS_Enable+0x670>)
 8002270:	f005 ffb0 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8002274:	2201      	movs	r2, #1
 8002276:	2108      	movs	r1, #8
 8002278:	485b      	ldr	r0, [pc, #364]	@ (80023e8 <MAX31855_CS_Enable+0x670>)
 800227a:	f005 ffab 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 800227e:	2201      	movs	r2, #1
 8002280:	2110      	movs	r1, #16
 8002282:	4859      	ldr	r0, [pc, #356]	@ (80023e8 <MAX31855_CS_Enable+0x670>)
 8002284:	f005 ffa6 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8002288:	2201      	movs	r2, #1
 800228a:	2120      	movs	r1, #32
 800228c:	4856      	ldr	r0, [pc, #344]	@ (80023e8 <MAX31855_CS_Enable+0x670>)
 800228e:	f005 ffa1 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8002292:	2201      	movs	r2, #1
 8002294:	2140      	movs	r1, #64	@ 0x40
 8002296:	4854      	ldr	r0, [pc, #336]	@ (80023e8 <MAX31855_CS_Enable+0x670>)
 8002298:	f005 ff9c 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 800229c:	2201      	movs	r2, #1
 800229e:	2180      	movs	r1, #128	@ 0x80
 80022a0:	4851      	ldr	r0, [pc, #324]	@ (80023e8 <MAX31855_CS_Enable+0x670>)
 80022a2:	f005 ff97 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 80022a6:	2201      	movs	r2, #1
 80022a8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80022ac:	484e      	ldr	r0, [pc, #312]	@ (80023e8 <MAX31855_CS_Enable+0x670>)
 80022ae:	f005 ff91 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_RESET);
 80022b2:	2200      	movs	r2, #0
 80022b4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80022b8:	484b      	ldr	r0, [pc, #300]	@ (80023e8 <MAX31855_CS_Enable+0x670>)
 80022ba:	f005 ff8b 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 80022be:	2201      	movs	r2, #1
 80022c0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80022c4:	4848      	ldr	r0, [pc, #288]	@ (80023e8 <MAX31855_CS_Enable+0x670>)
 80022c6:	f005 ff85 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 80022ca:	2201      	movs	r2, #1
 80022cc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80022d0:	4845      	ldr	r0, [pc, #276]	@ (80023e8 <MAX31855_CS_Enable+0x670>)
 80022d2:	f005 ff7f 	bl	80081d4 <HAL_GPIO_WritePin>
		break;
 80022d6:	e082      	b.n	80023de <MAX31855_CS_Enable+0x666>
	case TC_CH11:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 80022d8:	2201      	movs	r2, #1
 80022da:	2101      	movs	r1, #1
 80022dc:	4842      	ldr	r0, [pc, #264]	@ (80023e8 <MAX31855_CS_Enable+0x670>)
 80022de:	f005 ff79 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 80022e2:	2201      	movs	r2, #1
 80022e4:	2102      	movs	r1, #2
 80022e6:	4840      	ldr	r0, [pc, #256]	@ (80023e8 <MAX31855_CS_Enable+0x670>)
 80022e8:	f005 ff74 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 80022ec:	2201      	movs	r2, #1
 80022ee:	2104      	movs	r1, #4
 80022f0:	483d      	ldr	r0, [pc, #244]	@ (80023e8 <MAX31855_CS_Enable+0x670>)
 80022f2:	f005 ff6f 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 80022f6:	2201      	movs	r2, #1
 80022f8:	2108      	movs	r1, #8
 80022fa:	483b      	ldr	r0, [pc, #236]	@ (80023e8 <MAX31855_CS_Enable+0x670>)
 80022fc:	f005 ff6a 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8002300:	2201      	movs	r2, #1
 8002302:	2110      	movs	r1, #16
 8002304:	4838      	ldr	r0, [pc, #224]	@ (80023e8 <MAX31855_CS_Enable+0x670>)
 8002306:	f005 ff65 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 800230a:	2201      	movs	r2, #1
 800230c:	2120      	movs	r1, #32
 800230e:	4836      	ldr	r0, [pc, #216]	@ (80023e8 <MAX31855_CS_Enable+0x670>)
 8002310:	f005 ff60 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8002314:	2201      	movs	r2, #1
 8002316:	2140      	movs	r1, #64	@ 0x40
 8002318:	4833      	ldr	r0, [pc, #204]	@ (80023e8 <MAX31855_CS_Enable+0x670>)
 800231a:	f005 ff5b 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 800231e:	2201      	movs	r2, #1
 8002320:	2180      	movs	r1, #128	@ 0x80
 8002322:	4831      	ldr	r0, [pc, #196]	@ (80023e8 <MAX31855_CS_Enable+0x670>)
 8002324:	f005 ff56 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8002328:	2201      	movs	r2, #1
 800232a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800232e:	482e      	ldr	r0, [pc, #184]	@ (80023e8 <MAX31855_CS_Enable+0x670>)
 8002330:	f005 ff50 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8002334:	2201      	movs	r2, #1
 8002336:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800233a:	482b      	ldr	r0, [pc, #172]	@ (80023e8 <MAX31855_CS_Enable+0x670>)
 800233c:	f005 ff4a 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_RESET);
 8002340:	2200      	movs	r2, #0
 8002342:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002346:	4828      	ldr	r0, [pc, #160]	@ (80023e8 <MAX31855_CS_Enable+0x670>)
 8002348:	f005 ff44 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 800234c:	2201      	movs	r2, #1
 800234e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002352:	4825      	ldr	r0, [pc, #148]	@ (80023e8 <MAX31855_CS_Enable+0x670>)
 8002354:	f005 ff3e 	bl	80081d4 <HAL_GPIO_WritePin>
		break;
 8002358:	e041      	b.n	80023de <MAX31855_CS_Enable+0x666>
	case TC_CH12:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 800235a:	2201      	movs	r2, #1
 800235c:	2101      	movs	r1, #1
 800235e:	4822      	ldr	r0, [pc, #136]	@ (80023e8 <MAX31855_CS_Enable+0x670>)
 8002360:	f005 ff38 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8002364:	2201      	movs	r2, #1
 8002366:	2102      	movs	r1, #2
 8002368:	481f      	ldr	r0, [pc, #124]	@ (80023e8 <MAX31855_CS_Enable+0x670>)
 800236a:	f005 ff33 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 800236e:	2201      	movs	r2, #1
 8002370:	2104      	movs	r1, #4
 8002372:	481d      	ldr	r0, [pc, #116]	@ (80023e8 <MAX31855_CS_Enable+0x670>)
 8002374:	f005 ff2e 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8002378:	2201      	movs	r2, #1
 800237a:	2108      	movs	r1, #8
 800237c:	481a      	ldr	r0, [pc, #104]	@ (80023e8 <MAX31855_CS_Enable+0x670>)
 800237e:	f005 ff29 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8002382:	2201      	movs	r2, #1
 8002384:	2110      	movs	r1, #16
 8002386:	4818      	ldr	r0, [pc, #96]	@ (80023e8 <MAX31855_CS_Enable+0x670>)
 8002388:	f005 ff24 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 800238c:	2201      	movs	r2, #1
 800238e:	2120      	movs	r1, #32
 8002390:	4815      	ldr	r0, [pc, #84]	@ (80023e8 <MAX31855_CS_Enable+0x670>)
 8002392:	f005 ff1f 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8002396:	2201      	movs	r2, #1
 8002398:	2140      	movs	r1, #64	@ 0x40
 800239a:	4813      	ldr	r0, [pc, #76]	@ (80023e8 <MAX31855_CS_Enable+0x670>)
 800239c:	f005 ff1a 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 80023a0:	2201      	movs	r2, #1
 80023a2:	2180      	movs	r1, #128	@ 0x80
 80023a4:	4810      	ldr	r0, [pc, #64]	@ (80023e8 <MAX31855_CS_Enable+0x670>)
 80023a6:	f005 ff15 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 80023aa:	2201      	movs	r2, #1
 80023ac:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80023b0:	480d      	ldr	r0, [pc, #52]	@ (80023e8 <MAX31855_CS_Enable+0x670>)
 80023b2:	f005 ff0f 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 80023b6:	2201      	movs	r2, #1
 80023b8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80023bc:	480a      	ldr	r0, [pc, #40]	@ (80023e8 <MAX31855_CS_Enable+0x670>)
 80023be:	f005 ff09 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 80023c2:	2201      	movs	r2, #1
 80023c4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80023c8:	4807      	ldr	r0, [pc, #28]	@ (80023e8 <MAX31855_CS_Enable+0x670>)
 80023ca:	f005 ff03 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_RESET);
 80023ce:	2200      	movs	r2, #0
 80023d0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80023d4:	4804      	ldr	r0, [pc, #16]	@ (80023e8 <MAX31855_CS_Enable+0x670>)
 80023d6:	f005 fefd 	bl	80081d4 <HAL_GPIO_WritePin>
		break;
 80023da:	e000      	b.n	80023de <MAX31855_CS_Enable+0x666>
	default:
		break;
 80023dc:	bf00      	nop
	}
}
 80023de:	bf00      	nop
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	58020c00 	.word	0x58020c00

080023ec <MAX31855_CS_Disable>:

// CS 핀을 High로 설정 (SPI 통신 종료)
void MAX31855_CS_Disable(uint8_t ch)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	4603      	mov	r3, r0
 80023f4:	71fb      	strb	r3, [r7, #7]
	switch(ch) {
 80023f6:	79fb      	ldrb	r3, [r7, #7]
 80023f8:	2b0b      	cmp	r3, #11
 80023fa:	f200 8329 	bhi.w	8002a50 <MAX31855_CS_Disable+0x664>
 80023fe:	a201      	add	r2, pc, #4	@ (adr r2, 8002404 <MAX31855_CS_Disable+0x18>)
 8002400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002404:	08002435 	.word	0x08002435
 8002408:	080024b7 	.word	0x080024b7
 800240c:	08002539 	.word	0x08002539
 8002410:	080025bb 	.word	0x080025bb
 8002414:	0800263d 	.word	0x0800263d
 8002418:	080026bf 	.word	0x080026bf
 800241c:	08002745 	.word	0x08002745
 8002420:	080027c7 	.word	0x080027c7
 8002424:	08002849 	.word	0x08002849
 8002428:	080028cb 	.word	0x080028cb
 800242c:	0800294d 	.word	0x0800294d
 8002430:	080029cf 	.word	0x080029cf
	case TC_CH1:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8002434:	2201      	movs	r2, #1
 8002436:	2101      	movs	r1, #1
 8002438:	48c1      	ldr	r0, [pc, #772]	@ (8002740 <MAX31855_CS_Disable+0x354>)
 800243a:	f005 fecb 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 800243e:	2201      	movs	r2, #1
 8002440:	2102      	movs	r1, #2
 8002442:	48bf      	ldr	r0, [pc, #764]	@ (8002740 <MAX31855_CS_Disable+0x354>)
 8002444:	f005 fec6 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8002448:	2201      	movs	r2, #1
 800244a:	2104      	movs	r1, #4
 800244c:	48bc      	ldr	r0, [pc, #752]	@ (8002740 <MAX31855_CS_Disable+0x354>)
 800244e:	f005 fec1 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8002452:	2201      	movs	r2, #1
 8002454:	2108      	movs	r1, #8
 8002456:	48ba      	ldr	r0, [pc, #744]	@ (8002740 <MAX31855_CS_Disable+0x354>)
 8002458:	f005 febc 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 800245c:	2201      	movs	r2, #1
 800245e:	2110      	movs	r1, #16
 8002460:	48b7      	ldr	r0, [pc, #732]	@ (8002740 <MAX31855_CS_Disable+0x354>)
 8002462:	f005 feb7 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8002466:	2201      	movs	r2, #1
 8002468:	2120      	movs	r1, #32
 800246a:	48b5      	ldr	r0, [pc, #724]	@ (8002740 <MAX31855_CS_Disable+0x354>)
 800246c:	f005 feb2 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8002470:	2201      	movs	r2, #1
 8002472:	2140      	movs	r1, #64	@ 0x40
 8002474:	48b2      	ldr	r0, [pc, #712]	@ (8002740 <MAX31855_CS_Disable+0x354>)
 8002476:	f005 fead 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 800247a:	2201      	movs	r2, #1
 800247c:	2180      	movs	r1, #128	@ 0x80
 800247e:	48b0      	ldr	r0, [pc, #704]	@ (8002740 <MAX31855_CS_Disable+0x354>)
 8002480:	f005 fea8 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8002484:	2201      	movs	r2, #1
 8002486:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800248a:	48ad      	ldr	r0, [pc, #692]	@ (8002740 <MAX31855_CS_Disable+0x354>)
 800248c:	f005 fea2 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8002490:	2201      	movs	r2, #1
 8002492:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002496:	48aa      	ldr	r0, [pc, #680]	@ (8002740 <MAX31855_CS_Disable+0x354>)
 8002498:	f005 fe9c 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 800249c:	2201      	movs	r2, #1
 800249e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80024a2:	48a7      	ldr	r0, [pc, #668]	@ (8002740 <MAX31855_CS_Disable+0x354>)
 80024a4:	f005 fe96 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 80024a8:	2201      	movs	r2, #1
 80024aa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80024ae:	48a4      	ldr	r0, [pc, #656]	@ (8002740 <MAX31855_CS_Disable+0x354>)
 80024b0:	f005 fe90 	bl	80081d4 <HAL_GPIO_WritePin>
		break;
 80024b4:	e2cd      	b.n	8002a52 <MAX31855_CS_Disable+0x666>
	case TC_CH2:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 80024b6:	2201      	movs	r2, #1
 80024b8:	2101      	movs	r1, #1
 80024ba:	48a1      	ldr	r0, [pc, #644]	@ (8002740 <MAX31855_CS_Disable+0x354>)
 80024bc:	f005 fe8a 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 80024c0:	2201      	movs	r2, #1
 80024c2:	2102      	movs	r1, #2
 80024c4:	489e      	ldr	r0, [pc, #632]	@ (8002740 <MAX31855_CS_Disable+0x354>)
 80024c6:	f005 fe85 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 80024ca:	2201      	movs	r2, #1
 80024cc:	2104      	movs	r1, #4
 80024ce:	489c      	ldr	r0, [pc, #624]	@ (8002740 <MAX31855_CS_Disable+0x354>)
 80024d0:	f005 fe80 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 80024d4:	2201      	movs	r2, #1
 80024d6:	2108      	movs	r1, #8
 80024d8:	4899      	ldr	r0, [pc, #612]	@ (8002740 <MAX31855_CS_Disable+0x354>)
 80024da:	f005 fe7b 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 80024de:	2201      	movs	r2, #1
 80024e0:	2110      	movs	r1, #16
 80024e2:	4897      	ldr	r0, [pc, #604]	@ (8002740 <MAX31855_CS_Disable+0x354>)
 80024e4:	f005 fe76 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 80024e8:	2201      	movs	r2, #1
 80024ea:	2120      	movs	r1, #32
 80024ec:	4894      	ldr	r0, [pc, #592]	@ (8002740 <MAX31855_CS_Disable+0x354>)
 80024ee:	f005 fe71 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 80024f2:	2201      	movs	r2, #1
 80024f4:	2140      	movs	r1, #64	@ 0x40
 80024f6:	4892      	ldr	r0, [pc, #584]	@ (8002740 <MAX31855_CS_Disable+0x354>)
 80024f8:	f005 fe6c 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 80024fc:	2201      	movs	r2, #1
 80024fe:	2180      	movs	r1, #128	@ 0x80
 8002500:	488f      	ldr	r0, [pc, #572]	@ (8002740 <MAX31855_CS_Disable+0x354>)
 8002502:	f005 fe67 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8002506:	2201      	movs	r2, #1
 8002508:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800250c:	488c      	ldr	r0, [pc, #560]	@ (8002740 <MAX31855_CS_Disable+0x354>)
 800250e:	f005 fe61 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8002512:	2201      	movs	r2, #1
 8002514:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002518:	4889      	ldr	r0, [pc, #548]	@ (8002740 <MAX31855_CS_Disable+0x354>)
 800251a:	f005 fe5b 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 800251e:	2201      	movs	r2, #1
 8002520:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002524:	4886      	ldr	r0, [pc, #536]	@ (8002740 <MAX31855_CS_Disable+0x354>)
 8002526:	f005 fe55 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 800252a:	2201      	movs	r2, #1
 800252c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002530:	4883      	ldr	r0, [pc, #524]	@ (8002740 <MAX31855_CS_Disable+0x354>)
 8002532:	f005 fe4f 	bl	80081d4 <HAL_GPIO_WritePin>
		break;
 8002536:	e28c      	b.n	8002a52 <MAX31855_CS_Disable+0x666>
	case TC_CH3:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8002538:	2201      	movs	r2, #1
 800253a:	2101      	movs	r1, #1
 800253c:	4880      	ldr	r0, [pc, #512]	@ (8002740 <MAX31855_CS_Disable+0x354>)
 800253e:	f005 fe49 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8002542:	2201      	movs	r2, #1
 8002544:	2102      	movs	r1, #2
 8002546:	487e      	ldr	r0, [pc, #504]	@ (8002740 <MAX31855_CS_Disable+0x354>)
 8002548:	f005 fe44 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 800254c:	2201      	movs	r2, #1
 800254e:	2104      	movs	r1, #4
 8002550:	487b      	ldr	r0, [pc, #492]	@ (8002740 <MAX31855_CS_Disable+0x354>)
 8002552:	f005 fe3f 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8002556:	2201      	movs	r2, #1
 8002558:	2108      	movs	r1, #8
 800255a:	4879      	ldr	r0, [pc, #484]	@ (8002740 <MAX31855_CS_Disable+0x354>)
 800255c:	f005 fe3a 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8002560:	2201      	movs	r2, #1
 8002562:	2110      	movs	r1, #16
 8002564:	4876      	ldr	r0, [pc, #472]	@ (8002740 <MAX31855_CS_Disable+0x354>)
 8002566:	f005 fe35 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 800256a:	2201      	movs	r2, #1
 800256c:	2120      	movs	r1, #32
 800256e:	4874      	ldr	r0, [pc, #464]	@ (8002740 <MAX31855_CS_Disable+0x354>)
 8002570:	f005 fe30 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8002574:	2201      	movs	r2, #1
 8002576:	2140      	movs	r1, #64	@ 0x40
 8002578:	4871      	ldr	r0, [pc, #452]	@ (8002740 <MAX31855_CS_Disable+0x354>)
 800257a:	f005 fe2b 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 800257e:	2201      	movs	r2, #1
 8002580:	2180      	movs	r1, #128	@ 0x80
 8002582:	486f      	ldr	r0, [pc, #444]	@ (8002740 <MAX31855_CS_Disable+0x354>)
 8002584:	f005 fe26 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8002588:	2201      	movs	r2, #1
 800258a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800258e:	486c      	ldr	r0, [pc, #432]	@ (8002740 <MAX31855_CS_Disable+0x354>)
 8002590:	f005 fe20 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8002594:	2201      	movs	r2, #1
 8002596:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800259a:	4869      	ldr	r0, [pc, #420]	@ (8002740 <MAX31855_CS_Disable+0x354>)
 800259c:	f005 fe1a 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 80025a0:	2201      	movs	r2, #1
 80025a2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80025a6:	4866      	ldr	r0, [pc, #408]	@ (8002740 <MAX31855_CS_Disable+0x354>)
 80025a8:	f005 fe14 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 80025ac:	2201      	movs	r2, #1
 80025ae:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80025b2:	4863      	ldr	r0, [pc, #396]	@ (8002740 <MAX31855_CS_Disable+0x354>)
 80025b4:	f005 fe0e 	bl	80081d4 <HAL_GPIO_WritePin>
		break;
 80025b8:	e24b      	b.n	8002a52 <MAX31855_CS_Disable+0x666>
	case TC_CH4:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 80025ba:	2201      	movs	r2, #1
 80025bc:	2101      	movs	r1, #1
 80025be:	4860      	ldr	r0, [pc, #384]	@ (8002740 <MAX31855_CS_Disable+0x354>)
 80025c0:	f005 fe08 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 80025c4:	2201      	movs	r2, #1
 80025c6:	2102      	movs	r1, #2
 80025c8:	485d      	ldr	r0, [pc, #372]	@ (8002740 <MAX31855_CS_Disable+0x354>)
 80025ca:	f005 fe03 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 80025ce:	2201      	movs	r2, #1
 80025d0:	2104      	movs	r1, #4
 80025d2:	485b      	ldr	r0, [pc, #364]	@ (8002740 <MAX31855_CS_Disable+0x354>)
 80025d4:	f005 fdfe 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 80025d8:	2201      	movs	r2, #1
 80025da:	2108      	movs	r1, #8
 80025dc:	4858      	ldr	r0, [pc, #352]	@ (8002740 <MAX31855_CS_Disable+0x354>)
 80025de:	f005 fdf9 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 80025e2:	2201      	movs	r2, #1
 80025e4:	2110      	movs	r1, #16
 80025e6:	4856      	ldr	r0, [pc, #344]	@ (8002740 <MAX31855_CS_Disable+0x354>)
 80025e8:	f005 fdf4 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 80025ec:	2201      	movs	r2, #1
 80025ee:	2120      	movs	r1, #32
 80025f0:	4853      	ldr	r0, [pc, #332]	@ (8002740 <MAX31855_CS_Disable+0x354>)
 80025f2:	f005 fdef 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 80025f6:	2201      	movs	r2, #1
 80025f8:	2140      	movs	r1, #64	@ 0x40
 80025fa:	4851      	ldr	r0, [pc, #324]	@ (8002740 <MAX31855_CS_Disable+0x354>)
 80025fc:	f005 fdea 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8002600:	2201      	movs	r2, #1
 8002602:	2180      	movs	r1, #128	@ 0x80
 8002604:	484e      	ldr	r0, [pc, #312]	@ (8002740 <MAX31855_CS_Disable+0x354>)
 8002606:	f005 fde5 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 800260a:	2201      	movs	r2, #1
 800260c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002610:	484b      	ldr	r0, [pc, #300]	@ (8002740 <MAX31855_CS_Disable+0x354>)
 8002612:	f005 fddf 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8002616:	2201      	movs	r2, #1
 8002618:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800261c:	4848      	ldr	r0, [pc, #288]	@ (8002740 <MAX31855_CS_Disable+0x354>)
 800261e:	f005 fdd9 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8002622:	2201      	movs	r2, #1
 8002624:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002628:	4845      	ldr	r0, [pc, #276]	@ (8002740 <MAX31855_CS_Disable+0x354>)
 800262a:	f005 fdd3 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 800262e:	2201      	movs	r2, #1
 8002630:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002634:	4842      	ldr	r0, [pc, #264]	@ (8002740 <MAX31855_CS_Disable+0x354>)
 8002636:	f005 fdcd 	bl	80081d4 <HAL_GPIO_WritePin>
		break;
 800263a:	e20a      	b.n	8002a52 <MAX31855_CS_Disable+0x666>
	case TC_CH5:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 800263c:	2201      	movs	r2, #1
 800263e:	2101      	movs	r1, #1
 8002640:	483f      	ldr	r0, [pc, #252]	@ (8002740 <MAX31855_CS_Disable+0x354>)
 8002642:	f005 fdc7 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8002646:	2201      	movs	r2, #1
 8002648:	2102      	movs	r1, #2
 800264a:	483d      	ldr	r0, [pc, #244]	@ (8002740 <MAX31855_CS_Disable+0x354>)
 800264c:	f005 fdc2 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8002650:	2201      	movs	r2, #1
 8002652:	2104      	movs	r1, #4
 8002654:	483a      	ldr	r0, [pc, #232]	@ (8002740 <MAX31855_CS_Disable+0x354>)
 8002656:	f005 fdbd 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 800265a:	2201      	movs	r2, #1
 800265c:	2108      	movs	r1, #8
 800265e:	4838      	ldr	r0, [pc, #224]	@ (8002740 <MAX31855_CS_Disable+0x354>)
 8002660:	f005 fdb8 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8002664:	2201      	movs	r2, #1
 8002666:	2110      	movs	r1, #16
 8002668:	4835      	ldr	r0, [pc, #212]	@ (8002740 <MAX31855_CS_Disable+0x354>)
 800266a:	f005 fdb3 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 800266e:	2201      	movs	r2, #1
 8002670:	2120      	movs	r1, #32
 8002672:	4833      	ldr	r0, [pc, #204]	@ (8002740 <MAX31855_CS_Disable+0x354>)
 8002674:	f005 fdae 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8002678:	2201      	movs	r2, #1
 800267a:	2140      	movs	r1, #64	@ 0x40
 800267c:	4830      	ldr	r0, [pc, #192]	@ (8002740 <MAX31855_CS_Disable+0x354>)
 800267e:	f005 fda9 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8002682:	2201      	movs	r2, #1
 8002684:	2180      	movs	r1, #128	@ 0x80
 8002686:	482e      	ldr	r0, [pc, #184]	@ (8002740 <MAX31855_CS_Disable+0x354>)
 8002688:	f005 fda4 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 800268c:	2201      	movs	r2, #1
 800268e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002692:	482b      	ldr	r0, [pc, #172]	@ (8002740 <MAX31855_CS_Disable+0x354>)
 8002694:	f005 fd9e 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8002698:	2201      	movs	r2, #1
 800269a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800269e:	4828      	ldr	r0, [pc, #160]	@ (8002740 <MAX31855_CS_Disable+0x354>)
 80026a0:	f005 fd98 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 80026a4:	2201      	movs	r2, #1
 80026a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80026aa:	4825      	ldr	r0, [pc, #148]	@ (8002740 <MAX31855_CS_Disable+0x354>)
 80026ac:	f005 fd92 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 80026b0:	2201      	movs	r2, #1
 80026b2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80026b6:	4822      	ldr	r0, [pc, #136]	@ (8002740 <MAX31855_CS_Disable+0x354>)
 80026b8:	f005 fd8c 	bl	80081d4 <HAL_GPIO_WritePin>
		break;
 80026bc:	e1c9      	b.n	8002a52 <MAX31855_CS_Disable+0x666>
	case TC_CH6:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 80026be:	2201      	movs	r2, #1
 80026c0:	2101      	movs	r1, #1
 80026c2:	481f      	ldr	r0, [pc, #124]	@ (8002740 <MAX31855_CS_Disable+0x354>)
 80026c4:	f005 fd86 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 80026c8:	2201      	movs	r2, #1
 80026ca:	2102      	movs	r1, #2
 80026cc:	481c      	ldr	r0, [pc, #112]	@ (8002740 <MAX31855_CS_Disable+0x354>)
 80026ce:	f005 fd81 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 80026d2:	2201      	movs	r2, #1
 80026d4:	2104      	movs	r1, #4
 80026d6:	481a      	ldr	r0, [pc, #104]	@ (8002740 <MAX31855_CS_Disable+0x354>)
 80026d8:	f005 fd7c 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 80026dc:	2201      	movs	r2, #1
 80026de:	2108      	movs	r1, #8
 80026e0:	4817      	ldr	r0, [pc, #92]	@ (8002740 <MAX31855_CS_Disable+0x354>)
 80026e2:	f005 fd77 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 80026e6:	2201      	movs	r2, #1
 80026e8:	2110      	movs	r1, #16
 80026ea:	4815      	ldr	r0, [pc, #84]	@ (8002740 <MAX31855_CS_Disable+0x354>)
 80026ec:	f005 fd72 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 80026f0:	2201      	movs	r2, #1
 80026f2:	2120      	movs	r1, #32
 80026f4:	4812      	ldr	r0, [pc, #72]	@ (8002740 <MAX31855_CS_Disable+0x354>)
 80026f6:	f005 fd6d 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 80026fa:	2201      	movs	r2, #1
 80026fc:	2140      	movs	r1, #64	@ 0x40
 80026fe:	4810      	ldr	r0, [pc, #64]	@ (8002740 <MAX31855_CS_Disable+0x354>)
 8002700:	f005 fd68 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8002704:	2201      	movs	r2, #1
 8002706:	2180      	movs	r1, #128	@ 0x80
 8002708:	480d      	ldr	r0, [pc, #52]	@ (8002740 <MAX31855_CS_Disable+0x354>)
 800270a:	f005 fd63 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 800270e:	2201      	movs	r2, #1
 8002710:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002714:	480a      	ldr	r0, [pc, #40]	@ (8002740 <MAX31855_CS_Disable+0x354>)
 8002716:	f005 fd5d 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 800271a:	2201      	movs	r2, #1
 800271c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002720:	4807      	ldr	r0, [pc, #28]	@ (8002740 <MAX31855_CS_Disable+0x354>)
 8002722:	f005 fd57 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8002726:	2201      	movs	r2, #1
 8002728:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800272c:	4804      	ldr	r0, [pc, #16]	@ (8002740 <MAX31855_CS_Disable+0x354>)
 800272e:	f005 fd51 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8002732:	2201      	movs	r2, #1
 8002734:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002738:	4801      	ldr	r0, [pc, #4]	@ (8002740 <MAX31855_CS_Disable+0x354>)
 800273a:	f005 fd4b 	bl	80081d4 <HAL_GPIO_WritePin>
		break;
 800273e:	e188      	b.n	8002a52 <MAX31855_CS_Disable+0x666>
 8002740:	58020c00 	.word	0x58020c00
	case TC_CH7:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8002744:	2201      	movs	r2, #1
 8002746:	2101      	movs	r1, #1
 8002748:	48c4      	ldr	r0, [pc, #784]	@ (8002a5c <MAX31855_CS_Disable+0x670>)
 800274a:	f005 fd43 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 800274e:	2201      	movs	r2, #1
 8002750:	2102      	movs	r1, #2
 8002752:	48c2      	ldr	r0, [pc, #776]	@ (8002a5c <MAX31855_CS_Disable+0x670>)
 8002754:	f005 fd3e 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8002758:	2201      	movs	r2, #1
 800275a:	2104      	movs	r1, #4
 800275c:	48bf      	ldr	r0, [pc, #764]	@ (8002a5c <MAX31855_CS_Disable+0x670>)
 800275e:	f005 fd39 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8002762:	2201      	movs	r2, #1
 8002764:	2108      	movs	r1, #8
 8002766:	48bd      	ldr	r0, [pc, #756]	@ (8002a5c <MAX31855_CS_Disable+0x670>)
 8002768:	f005 fd34 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 800276c:	2201      	movs	r2, #1
 800276e:	2110      	movs	r1, #16
 8002770:	48ba      	ldr	r0, [pc, #744]	@ (8002a5c <MAX31855_CS_Disable+0x670>)
 8002772:	f005 fd2f 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8002776:	2201      	movs	r2, #1
 8002778:	2120      	movs	r1, #32
 800277a:	48b8      	ldr	r0, [pc, #736]	@ (8002a5c <MAX31855_CS_Disable+0x670>)
 800277c:	f005 fd2a 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8002780:	2201      	movs	r2, #1
 8002782:	2140      	movs	r1, #64	@ 0x40
 8002784:	48b5      	ldr	r0, [pc, #724]	@ (8002a5c <MAX31855_CS_Disable+0x670>)
 8002786:	f005 fd25 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 800278a:	2201      	movs	r2, #1
 800278c:	2180      	movs	r1, #128	@ 0x80
 800278e:	48b3      	ldr	r0, [pc, #716]	@ (8002a5c <MAX31855_CS_Disable+0x670>)
 8002790:	f005 fd20 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8002794:	2201      	movs	r2, #1
 8002796:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800279a:	48b0      	ldr	r0, [pc, #704]	@ (8002a5c <MAX31855_CS_Disable+0x670>)
 800279c:	f005 fd1a 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 80027a0:	2201      	movs	r2, #1
 80027a2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80027a6:	48ad      	ldr	r0, [pc, #692]	@ (8002a5c <MAX31855_CS_Disable+0x670>)
 80027a8:	f005 fd14 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 80027ac:	2201      	movs	r2, #1
 80027ae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80027b2:	48aa      	ldr	r0, [pc, #680]	@ (8002a5c <MAX31855_CS_Disable+0x670>)
 80027b4:	f005 fd0e 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 80027b8:	2201      	movs	r2, #1
 80027ba:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80027be:	48a7      	ldr	r0, [pc, #668]	@ (8002a5c <MAX31855_CS_Disable+0x670>)
 80027c0:	f005 fd08 	bl	80081d4 <HAL_GPIO_WritePin>
		break;
 80027c4:	e145      	b.n	8002a52 <MAX31855_CS_Disable+0x666>
	case TC_CH8:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 80027c6:	2201      	movs	r2, #1
 80027c8:	2101      	movs	r1, #1
 80027ca:	48a4      	ldr	r0, [pc, #656]	@ (8002a5c <MAX31855_CS_Disable+0x670>)
 80027cc:	f005 fd02 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 80027d0:	2201      	movs	r2, #1
 80027d2:	2102      	movs	r1, #2
 80027d4:	48a1      	ldr	r0, [pc, #644]	@ (8002a5c <MAX31855_CS_Disable+0x670>)
 80027d6:	f005 fcfd 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 80027da:	2201      	movs	r2, #1
 80027dc:	2104      	movs	r1, #4
 80027de:	489f      	ldr	r0, [pc, #636]	@ (8002a5c <MAX31855_CS_Disable+0x670>)
 80027e0:	f005 fcf8 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 80027e4:	2201      	movs	r2, #1
 80027e6:	2108      	movs	r1, #8
 80027e8:	489c      	ldr	r0, [pc, #624]	@ (8002a5c <MAX31855_CS_Disable+0x670>)
 80027ea:	f005 fcf3 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 80027ee:	2201      	movs	r2, #1
 80027f0:	2110      	movs	r1, #16
 80027f2:	489a      	ldr	r0, [pc, #616]	@ (8002a5c <MAX31855_CS_Disable+0x670>)
 80027f4:	f005 fcee 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 80027f8:	2201      	movs	r2, #1
 80027fa:	2120      	movs	r1, #32
 80027fc:	4897      	ldr	r0, [pc, #604]	@ (8002a5c <MAX31855_CS_Disable+0x670>)
 80027fe:	f005 fce9 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8002802:	2201      	movs	r2, #1
 8002804:	2140      	movs	r1, #64	@ 0x40
 8002806:	4895      	ldr	r0, [pc, #596]	@ (8002a5c <MAX31855_CS_Disable+0x670>)
 8002808:	f005 fce4 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 800280c:	2201      	movs	r2, #1
 800280e:	2180      	movs	r1, #128	@ 0x80
 8002810:	4892      	ldr	r0, [pc, #584]	@ (8002a5c <MAX31855_CS_Disable+0x670>)
 8002812:	f005 fcdf 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8002816:	2201      	movs	r2, #1
 8002818:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800281c:	488f      	ldr	r0, [pc, #572]	@ (8002a5c <MAX31855_CS_Disable+0x670>)
 800281e:	f005 fcd9 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8002822:	2201      	movs	r2, #1
 8002824:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002828:	488c      	ldr	r0, [pc, #560]	@ (8002a5c <MAX31855_CS_Disable+0x670>)
 800282a:	f005 fcd3 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 800282e:	2201      	movs	r2, #1
 8002830:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002834:	4889      	ldr	r0, [pc, #548]	@ (8002a5c <MAX31855_CS_Disable+0x670>)
 8002836:	f005 fccd 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 800283a:	2201      	movs	r2, #1
 800283c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002840:	4886      	ldr	r0, [pc, #536]	@ (8002a5c <MAX31855_CS_Disable+0x670>)
 8002842:	f005 fcc7 	bl	80081d4 <HAL_GPIO_WritePin>
		break;
 8002846:	e104      	b.n	8002a52 <MAX31855_CS_Disable+0x666>
	case TC_CH9:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 8002848:	2201      	movs	r2, #1
 800284a:	2101      	movs	r1, #1
 800284c:	4883      	ldr	r0, [pc, #524]	@ (8002a5c <MAX31855_CS_Disable+0x670>)
 800284e:	f005 fcc1 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8002852:	2201      	movs	r2, #1
 8002854:	2102      	movs	r1, #2
 8002856:	4881      	ldr	r0, [pc, #516]	@ (8002a5c <MAX31855_CS_Disable+0x670>)
 8002858:	f005 fcbc 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 800285c:	2201      	movs	r2, #1
 800285e:	2104      	movs	r1, #4
 8002860:	487e      	ldr	r0, [pc, #504]	@ (8002a5c <MAX31855_CS_Disable+0x670>)
 8002862:	f005 fcb7 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 8002866:	2201      	movs	r2, #1
 8002868:	2108      	movs	r1, #8
 800286a:	487c      	ldr	r0, [pc, #496]	@ (8002a5c <MAX31855_CS_Disable+0x670>)
 800286c:	f005 fcb2 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8002870:	2201      	movs	r2, #1
 8002872:	2110      	movs	r1, #16
 8002874:	4879      	ldr	r0, [pc, #484]	@ (8002a5c <MAX31855_CS_Disable+0x670>)
 8002876:	f005 fcad 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 800287a:	2201      	movs	r2, #1
 800287c:	2120      	movs	r1, #32
 800287e:	4877      	ldr	r0, [pc, #476]	@ (8002a5c <MAX31855_CS_Disable+0x670>)
 8002880:	f005 fca8 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8002884:	2201      	movs	r2, #1
 8002886:	2140      	movs	r1, #64	@ 0x40
 8002888:	4874      	ldr	r0, [pc, #464]	@ (8002a5c <MAX31855_CS_Disable+0x670>)
 800288a:	f005 fca3 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 800288e:	2201      	movs	r2, #1
 8002890:	2180      	movs	r1, #128	@ 0x80
 8002892:	4872      	ldr	r0, [pc, #456]	@ (8002a5c <MAX31855_CS_Disable+0x670>)
 8002894:	f005 fc9e 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8002898:	2201      	movs	r2, #1
 800289a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800289e:	486f      	ldr	r0, [pc, #444]	@ (8002a5c <MAX31855_CS_Disable+0x670>)
 80028a0:	f005 fc98 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 80028a4:	2201      	movs	r2, #1
 80028a6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80028aa:	486c      	ldr	r0, [pc, #432]	@ (8002a5c <MAX31855_CS_Disable+0x670>)
 80028ac:	f005 fc92 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 80028b0:	2201      	movs	r2, #1
 80028b2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80028b6:	4869      	ldr	r0, [pc, #420]	@ (8002a5c <MAX31855_CS_Disable+0x670>)
 80028b8:	f005 fc8c 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 80028bc:	2201      	movs	r2, #1
 80028be:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80028c2:	4866      	ldr	r0, [pc, #408]	@ (8002a5c <MAX31855_CS_Disable+0x670>)
 80028c4:	f005 fc86 	bl	80081d4 <HAL_GPIO_WritePin>
		break;
 80028c8:	e0c3      	b.n	8002a52 <MAX31855_CS_Disable+0x666>
	case TC_CH10:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 80028ca:	2201      	movs	r2, #1
 80028cc:	2101      	movs	r1, #1
 80028ce:	4863      	ldr	r0, [pc, #396]	@ (8002a5c <MAX31855_CS_Disable+0x670>)
 80028d0:	f005 fc80 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 80028d4:	2201      	movs	r2, #1
 80028d6:	2102      	movs	r1, #2
 80028d8:	4860      	ldr	r0, [pc, #384]	@ (8002a5c <MAX31855_CS_Disable+0x670>)
 80028da:	f005 fc7b 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 80028de:	2201      	movs	r2, #1
 80028e0:	2104      	movs	r1, #4
 80028e2:	485e      	ldr	r0, [pc, #376]	@ (8002a5c <MAX31855_CS_Disable+0x670>)
 80028e4:	f005 fc76 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 80028e8:	2201      	movs	r2, #1
 80028ea:	2108      	movs	r1, #8
 80028ec:	485b      	ldr	r0, [pc, #364]	@ (8002a5c <MAX31855_CS_Disable+0x670>)
 80028ee:	f005 fc71 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 80028f2:	2201      	movs	r2, #1
 80028f4:	2110      	movs	r1, #16
 80028f6:	4859      	ldr	r0, [pc, #356]	@ (8002a5c <MAX31855_CS_Disable+0x670>)
 80028f8:	f005 fc6c 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 80028fc:	2201      	movs	r2, #1
 80028fe:	2120      	movs	r1, #32
 8002900:	4856      	ldr	r0, [pc, #344]	@ (8002a5c <MAX31855_CS_Disable+0x670>)
 8002902:	f005 fc67 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8002906:	2201      	movs	r2, #1
 8002908:	2140      	movs	r1, #64	@ 0x40
 800290a:	4854      	ldr	r0, [pc, #336]	@ (8002a5c <MAX31855_CS_Disable+0x670>)
 800290c:	f005 fc62 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8002910:	2201      	movs	r2, #1
 8002912:	2180      	movs	r1, #128	@ 0x80
 8002914:	4851      	ldr	r0, [pc, #324]	@ (8002a5c <MAX31855_CS_Disable+0x670>)
 8002916:	f005 fc5d 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 800291a:	2201      	movs	r2, #1
 800291c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002920:	484e      	ldr	r0, [pc, #312]	@ (8002a5c <MAX31855_CS_Disable+0x670>)
 8002922:	f005 fc57 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8002926:	2201      	movs	r2, #1
 8002928:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800292c:	484b      	ldr	r0, [pc, #300]	@ (8002a5c <MAX31855_CS_Disable+0x670>)
 800292e:	f005 fc51 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8002932:	2201      	movs	r2, #1
 8002934:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002938:	4848      	ldr	r0, [pc, #288]	@ (8002a5c <MAX31855_CS_Disable+0x670>)
 800293a:	f005 fc4b 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 800293e:	2201      	movs	r2, #1
 8002940:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002944:	4845      	ldr	r0, [pc, #276]	@ (8002a5c <MAX31855_CS_Disable+0x670>)
 8002946:	f005 fc45 	bl	80081d4 <HAL_GPIO_WritePin>
		break;
 800294a:	e082      	b.n	8002a52 <MAX31855_CS_Disable+0x666>
	case TC_CH11:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 800294c:	2201      	movs	r2, #1
 800294e:	2101      	movs	r1, #1
 8002950:	4842      	ldr	r0, [pc, #264]	@ (8002a5c <MAX31855_CS_Disable+0x670>)
 8002952:	f005 fc3f 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 8002956:	2201      	movs	r2, #1
 8002958:	2102      	movs	r1, #2
 800295a:	4840      	ldr	r0, [pc, #256]	@ (8002a5c <MAX31855_CS_Disable+0x670>)
 800295c:	f005 fc3a 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 8002960:	2201      	movs	r2, #1
 8002962:	2104      	movs	r1, #4
 8002964:	483d      	ldr	r0, [pc, #244]	@ (8002a5c <MAX31855_CS_Disable+0x670>)
 8002966:	f005 fc35 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 800296a:	2201      	movs	r2, #1
 800296c:	2108      	movs	r1, #8
 800296e:	483b      	ldr	r0, [pc, #236]	@ (8002a5c <MAX31855_CS_Disable+0x670>)
 8002970:	f005 fc30 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 8002974:	2201      	movs	r2, #1
 8002976:	2110      	movs	r1, #16
 8002978:	4838      	ldr	r0, [pc, #224]	@ (8002a5c <MAX31855_CS_Disable+0x670>)
 800297a:	f005 fc2b 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 800297e:	2201      	movs	r2, #1
 8002980:	2120      	movs	r1, #32
 8002982:	4836      	ldr	r0, [pc, #216]	@ (8002a5c <MAX31855_CS_Disable+0x670>)
 8002984:	f005 fc26 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8002988:	2201      	movs	r2, #1
 800298a:	2140      	movs	r1, #64	@ 0x40
 800298c:	4833      	ldr	r0, [pc, #204]	@ (8002a5c <MAX31855_CS_Disable+0x670>)
 800298e:	f005 fc21 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8002992:	2201      	movs	r2, #1
 8002994:	2180      	movs	r1, #128	@ 0x80
 8002996:	4831      	ldr	r0, [pc, #196]	@ (8002a5c <MAX31855_CS_Disable+0x670>)
 8002998:	f005 fc1c 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 800299c:	2201      	movs	r2, #1
 800299e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80029a2:	482e      	ldr	r0, [pc, #184]	@ (8002a5c <MAX31855_CS_Disable+0x670>)
 80029a4:	f005 fc16 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 80029a8:	2201      	movs	r2, #1
 80029aa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80029ae:	482b      	ldr	r0, [pc, #172]	@ (8002a5c <MAX31855_CS_Disable+0x670>)
 80029b0:	f005 fc10 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 80029b4:	2201      	movs	r2, #1
 80029b6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80029ba:	4828      	ldr	r0, [pc, #160]	@ (8002a5c <MAX31855_CS_Disable+0x670>)
 80029bc:	f005 fc0a 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 80029c0:	2201      	movs	r2, #1
 80029c2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80029c6:	4825      	ldr	r0, [pc, #148]	@ (8002a5c <MAX31855_CS_Disable+0x670>)
 80029c8:	f005 fc04 	bl	80081d4 <HAL_GPIO_WritePin>
		break;
 80029cc:	e041      	b.n	8002a52 <MAX31855_CS_Disable+0x666>
	case TC_CH12:
		HAL_GPIO_WritePin(U1_CS_PORT, U1_CS_PIN, GPIO_PIN_SET);
 80029ce:	2201      	movs	r2, #1
 80029d0:	2101      	movs	r1, #1
 80029d2:	4822      	ldr	r0, [pc, #136]	@ (8002a5c <MAX31855_CS_Disable+0x670>)
 80029d4:	f005 fbfe 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U2_CS_PORT, U2_CS_PIN, GPIO_PIN_SET);
 80029d8:	2201      	movs	r2, #1
 80029da:	2102      	movs	r1, #2
 80029dc:	481f      	ldr	r0, [pc, #124]	@ (8002a5c <MAX31855_CS_Disable+0x670>)
 80029de:	f005 fbf9 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U3_CS_PORT, U3_CS_PIN, GPIO_PIN_SET);
 80029e2:	2201      	movs	r2, #1
 80029e4:	2104      	movs	r1, #4
 80029e6:	481d      	ldr	r0, [pc, #116]	@ (8002a5c <MAX31855_CS_Disable+0x670>)
 80029e8:	f005 fbf4 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U4_CS_PORT, U4_CS_PIN, GPIO_PIN_SET);
 80029ec:	2201      	movs	r2, #1
 80029ee:	2108      	movs	r1, #8
 80029f0:	481a      	ldr	r0, [pc, #104]	@ (8002a5c <MAX31855_CS_Disable+0x670>)
 80029f2:	f005 fbef 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U5_CS_PORT, U5_CS_PIN, GPIO_PIN_SET);
 80029f6:	2201      	movs	r2, #1
 80029f8:	2110      	movs	r1, #16
 80029fa:	4818      	ldr	r0, [pc, #96]	@ (8002a5c <MAX31855_CS_Disable+0x670>)
 80029fc:	f005 fbea 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U6_CS_PORT, U6_CS_PIN, GPIO_PIN_SET);
 8002a00:	2201      	movs	r2, #1
 8002a02:	2120      	movs	r1, #32
 8002a04:	4815      	ldr	r0, [pc, #84]	@ (8002a5c <MAX31855_CS_Disable+0x670>)
 8002a06:	f005 fbe5 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U7_CS_PORT, U7_CS_PIN, GPIO_PIN_SET);
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	2140      	movs	r1, #64	@ 0x40
 8002a0e:	4813      	ldr	r0, [pc, #76]	@ (8002a5c <MAX31855_CS_Disable+0x670>)
 8002a10:	f005 fbe0 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U8_CS_PORT, U8_CS_PIN, GPIO_PIN_SET);
 8002a14:	2201      	movs	r2, #1
 8002a16:	2180      	movs	r1, #128	@ 0x80
 8002a18:	4810      	ldr	r0, [pc, #64]	@ (8002a5c <MAX31855_CS_Disable+0x670>)
 8002a1a:	f005 fbdb 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U9_CS_PORT, U9_CS_PIN, GPIO_PIN_SET);
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002a24:	480d      	ldr	r0, [pc, #52]	@ (8002a5c <MAX31855_CS_Disable+0x670>)
 8002a26:	f005 fbd5 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U10_CS_PORT, U10_CS_PIN, GPIO_PIN_SET);
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002a30:	480a      	ldr	r0, [pc, #40]	@ (8002a5c <MAX31855_CS_Disable+0x670>)
 8002a32:	f005 fbcf 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U11_CS_PORT, U11_CS_PIN, GPIO_PIN_SET);
 8002a36:	2201      	movs	r2, #1
 8002a38:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002a3c:	4807      	ldr	r0, [pc, #28]	@ (8002a5c <MAX31855_CS_Disable+0x670>)
 8002a3e:	f005 fbc9 	bl	80081d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(U12_CS_PORT, U12_CS_PIN, GPIO_PIN_SET);
 8002a42:	2201      	movs	r2, #1
 8002a44:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002a48:	4804      	ldr	r0, [pc, #16]	@ (8002a5c <MAX31855_CS_Disable+0x670>)
 8002a4a:	f005 fbc3 	bl	80081d4 <HAL_GPIO_WritePin>
		break;
 8002a4e:	e000      	b.n	8002a52 <MAX31855_CS_Disable+0x666>
	default:
		break;
 8002a50:	bf00      	nop
	}
}
 8002a52:	bf00      	nop
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	58020c00 	.word	0x58020c00

08002a60 <MAX31855_ReadTemp_IT>:
uint8_t dummy_tx[4] = {0xFF, 0xFF, 0xFF, 0xFF};
uint8_t spi_rx_buffer[4];
double tc[MAX_TC_CH] = {0};

void MAX31855_ReadTemp_IT(uint8_t ch)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	4603      	mov	r3, r0
 8002a68:	71fb      	strb	r3, [r7, #7]
	MAX31855_CS_Enable(idx_tc);
 8002a6a:	4b07      	ldr	r3, [pc, #28]	@ (8002a88 <MAX31855_ReadTemp_IT+0x28>)
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7ff f982 	bl	8001d78 <MAX31855_CS_Enable>
    //HAL_SPI_TransmitReceive_IT(&hspi1, dummy_tx, spi_rx_buffer, 4);
    HAL_SPI_Receive_IT(&hspi1, spi_rx_buffer, 4);
 8002a74:	2204      	movs	r2, #4
 8002a76:	4905      	ldr	r1, [pc, #20]	@ (8002a8c <MAX31855_ReadTemp_IT+0x2c>)
 8002a78:	4805      	ldr	r0, [pc, #20]	@ (8002a90 <MAX31855_ReadTemp_IT+0x30>)
 8002a7a:	f009 fa6f 	bl	800bf5c <HAL_SPI_Receive_IT>

}
 8002a7e:	bf00      	nop
 8002a80:	3708      	adds	r7, #8
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	240004dd 	.word	0x240004dd
 8002a8c:	240004e0 	.word	0x240004e0
 8002a90:	24000304 	.word	0x24000304

08002a94 <MAX3188_StartRead>:

void MAX3188_StartRead()
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
	idx_tc = 0;
 8002a98:	4b06      	ldr	r3, [pc, #24]	@ (8002ab4 <MAX3188_StartRead+0x20>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	701a      	strb	r2, [r3, #0]
	fTemp = false;
 8002a9e:	4b06      	ldr	r3, [pc, #24]	@ (8002ab8 <MAX3188_StartRead+0x24>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	701a      	strb	r2, [r3, #0]

	MAX31855_ReadTemp_IT(idx_tc);
 8002aa4:	4b03      	ldr	r3, [pc, #12]	@ (8002ab4 <MAX3188_StartRead+0x20>)
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7ff ffd9 	bl	8002a60 <MAX31855_ReadTemp_IT>
}
 8002aae:	bf00      	nop
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	240004dd 	.word	0x240004dd
 8002ab8:	240004dc 	.word	0x240004dc

08002abc <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b086      	sub	sp, #24
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
    if (hspi->Instance == SPI1)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a27      	ldr	r2, [pc, #156]	@ (8002b68 <HAL_SPI_RxCpltCallback+0xac>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d147      	bne.n	8002b5e <HAL_SPI_RxCpltCallback+0xa2>
    {
    	MAX31855_CS_Disable(idx_tc);
 8002ace:	4b27      	ldr	r3, [pc, #156]	@ (8002b6c <HAL_SPI_RxCpltCallback+0xb0>)
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7ff fc8a 	bl	80023ec <MAX31855_CS_Disable>

    	uint8_t data[4];
    	memcpy((void*)data,(void*)spi_rx_buffer,sizeof(uint8_t)*4);
 8002ad8:	4b25      	ldr	r3, [pc, #148]	@ (8002b70 <HAL_SPI_RxCpltCallback+0xb4>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	60fb      	str	r3, [r7, #12]

        int32_t value = ((int32_t)data[0] << 24) | ((int32_t)data[1] << 16) |
 8002ade:	7b3b      	ldrb	r3, [r7, #12]
 8002ae0:	061a      	lsls	r2, r3, #24
 8002ae2:	7b7b      	ldrb	r3, [r7, #13]
 8002ae4:	041b      	lsls	r3, r3, #16
 8002ae6:	431a      	orrs	r2, r3
                        ((int32_t)data[2] << 8)  | ((int32_t)data[3]);
 8002ae8:	7bbb      	ldrb	r3, [r7, #14]
 8002aea:	021b      	lsls	r3, r3, #8
        int32_t value = ((int32_t)data[0] << 24) | ((int32_t)data[1] << 16) |
 8002aec:	4313      	orrs	r3, r2
                        ((int32_t)data[2] << 8)  | ((int32_t)data[3]);
 8002aee:	7bfa      	ldrb	r2, [r7, #15]
        int32_t value = ((int32_t)data[0] << 24) | ((int32_t)data[1] << 16) |
 8002af0:	4313      	orrs	r3, r2
 8002af2:	613b      	str	r3, [r7, #16]

        int16_t temp_data = (value >> 18) & 0x3FFF; // 14비트 Thermocouple data는 bit[31:18]에 위치
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	0c9b      	lsrs	r3, r3, #18
 8002af8:	82fb      	strh	r3, [r7, #22]

        if (temp_data & 0x2000)
 8002afa:	8afb      	ldrh	r3, [r7, #22]
 8002afc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d005      	beq.n	8002b10 <HAL_SPI_RxCpltCallback+0x54>
        {
            temp_data |= 0xC000; // Sign 확장
 8002b04:	8afb      	ldrh	r3, [r7, #22]
 8002b06:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 8002b0a:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 8002b0e:	82fb      	strh	r3, [r7, #22]
        }

        tc[idx_tc] = (double)temp_data * 0.25f;
 8002b10:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002b14:	ee07 3a90 	vmov	s15, r3
 8002b18:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002b1c:	4b13      	ldr	r3, [pc, #76]	@ (8002b6c <HAL_SPI_RxCpltCallback+0xb0>)
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	eeb5 6b00 	vmov.f64	d6, #80	@ 0x3e800000  0.250
 8002b24:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002b28:	4a12      	ldr	r2, [pc, #72]	@ (8002b74 <HAL_SPI_RxCpltCallback+0xb8>)
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	4413      	add	r3, r2
 8002b2e:	ed83 7b00 	vstr	d7, [r3]

        idx_tc++;
 8002b32:	4b0e      	ldr	r3, [pc, #56]	@ (8002b6c <HAL_SPI_RxCpltCallback+0xb0>)
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	3301      	adds	r3, #1
 8002b38:	b2da      	uxtb	r2, r3
 8002b3a:	4b0c      	ldr	r3, [pc, #48]	@ (8002b6c <HAL_SPI_RxCpltCallback+0xb0>)
 8002b3c:	701a      	strb	r2, [r3, #0]

		if (idx_tc == MAX_TC_CH)
 8002b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8002b6c <HAL_SPI_RxCpltCallback+0xb0>)
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	2b04      	cmp	r3, #4
 8002b44:	d106      	bne.n	8002b54 <HAL_SPI_RxCpltCallback+0x98>
		{
			idx_tc = 0;
 8002b46:	4b09      	ldr	r3, [pc, #36]	@ (8002b6c <HAL_SPI_RxCpltCallback+0xb0>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	701a      	strb	r2, [r3, #0]
			fTemp = true;
 8002b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8002b78 <HAL_SPI_RxCpltCallback+0xbc>)
 8002b4e:	2201      	movs	r2, #1
 8002b50:	701a      	strb	r2, [r3, #0]
		else
		{
			MAX31855_ReadTemp_IT(idx_tc);
		}
    }
}
 8002b52:	e004      	b.n	8002b5e <HAL_SPI_RxCpltCallback+0xa2>
			MAX31855_ReadTemp_IT(idx_tc);
 8002b54:	4b05      	ldr	r3, [pc, #20]	@ (8002b6c <HAL_SPI_RxCpltCallback+0xb0>)
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7ff ff81 	bl	8002a60 <MAX31855_ReadTemp_IT>
}
 8002b5e:	bf00      	nop
 8002b60:	3718      	adds	r7, #24
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	40013000 	.word	0x40013000
 8002b6c:	240004dd 	.word	0x240004dd
 8002b70:	240004e0 	.word	0x240004e0
 8002b74:	240004e8 	.word	0x240004e8
 8002b78:	240004dc 	.word	0x240004dc

08002b7c <GetTemp>:



void GetTemp(double* Temp)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < MAX_TC_CH; i++)
 8002b84:	2300      	movs	r3, #0
 8002b86:	73fb      	strb	r3, [r7, #15]
 8002b88:	e00e      	b.n	8002ba8 <GetTemp+0x2c>
	{
		Temp[i] = tc[i];
 8002b8a:	7bfb      	ldrb	r3, [r7, #15]
 8002b8c:	7bfa      	ldrb	r2, [r7, #15]
 8002b8e:	00d2      	lsls	r2, r2, #3
 8002b90:	6879      	ldr	r1, [r7, #4]
 8002b92:	4411      	add	r1, r2
 8002b94:	4a09      	ldr	r2, [pc, #36]	@ (8002bbc <GetTemp+0x40>)
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	4413      	add	r3, r2
 8002b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b9e:	e9c1 2300 	strd	r2, r3, [r1]
	for (uint8_t i = 0; i < MAX_TC_CH; i++)
 8002ba2:	7bfb      	ldrb	r3, [r7, #15]
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	73fb      	strb	r3, [r7, #15]
 8002ba8:	7bfb      	ldrb	r3, [r7, #15]
 8002baa:	2b03      	cmp	r3, #3
 8002bac:	d9ed      	bls.n	8002b8a <GetTemp+0xe>
	}
}
 8002bae:	bf00      	nop
 8002bb0:	bf00      	nop
 8002bb2:	3714      	adds	r7, #20
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr
 8002bbc:	240004e8 	.word	0x240004e8

08002bc0 <HAL_UART_RxCpltCallback>:
uint8_t NRecv = 0;

extern void Error_Handler(void);

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == UART4)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a19      	ldr	r2, [pc, #100]	@ (8002c34 <HAL_UART_RxCpltCallback+0x74>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d12c      	bne.n	8002c2c <HAL_UART_RxCpltCallback+0x6c>
	{
		rx_buffer[rx_index++] = rx_data;
 8002bd2:	4b19      	ldr	r3, [pc, #100]	@ (8002c38 <HAL_UART_RxCpltCallback+0x78>)
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	1c5a      	adds	r2, r3, #1
 8002bd8:	b2d1      	uxtb	r1, r2
 8002bda:	4a17      	ldr	r2, [pc, #92]	@ (8002c38 <HAL_UART_RxCpltCallback+0x78>)
 8002bdc:	7011      	strb	r1, [r2, #0]
 8002bde:	461a      	mov	r2, r3
 8002be0:	4b16      	ldr	r3, [pc, #88]	@ (8002c3c <HAL_UART_RxCpltCallback+0x7c>)
 8002be2:	7819      	ldrb	r1, [r3, #0]
 8002be4:	4b16      	ldr	r3, [pc, #88]	@ (8002c40 <HAL_UART_RxCpltCallback+0x80>)
 8002be6:	5499      	strb	r1, [r3, r2]

		if (rx_data == 0x0A)
 8002be8:	4b14      	ldr	r3, [pc, #80]	@ (8002c3c <HAL_UART_RxCpltCallback+0x7c>)
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	2b0a      	cmp	r3, #10
 8002bee:	d110      	bne.n	8002c12 <HAL_UART_RxCpltCallback+0x52>
		{
			fTC = true;
 8002bf0:	4b14      	ldr	r3, [pc, #80]	@ (8002c44 <HAL_UART_RxCpltCallback+0x84>)
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	701a      	strb	r2, [r3, #0]
			memcpy((void*)tc_buffer, (void*)rx_buffer, sizeof(uint8_t)*rx_index);
 8002bf6:	4b10      	ldr	r3, [pc, #64]	@ (8002c38 <HAL_UART_RxCpltCallback+0x78>)
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	4910      	ldr	r1, [pc, #64]	@ (8002c40 <HAL_UART_RxCpltCallback+0x80>)
 8002bfe:	4812      	ldr	r0, [pc, #72]	@ (8002c48 <HAL_UART_RxCpltCallback+0x88>)
 8002c00:	f00d fe51 	bl	80108a6 <memcpy>
			NRecv = rx_index;
 8002c04:	4b0c      	ldr	r3, [pc, #48]	@ (8002c38 <HAL_UART_RxCpltCallback+0x78>)
 8002c06:	781a      	ldrb	r2, [r3, #0]
 8002c08:	4b10      	ldr	r3, [pc, #64]	@ (8002c4c <HAL_UART_RxCpltCallback+0x8c>)
 8002c0a:	701a      	strb	r2, [r3, #0]
			rx_index = 0;
 8002c0c:	4b0a      	ldr	r3, [pc, #40]	@ (8002c38 <HAL_UART_RxCpltCallback+0x78>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	701a      	strb	r2, [r3, #0]
		}

		// 순환 버퍼 또는 수신 종료 문자 조건으로 처리 가능
		if (rx_index >= MAX_TC_SIZE)
 8002c12:	4b09      	ldr	r3, [pc, #36]	@ (8002c38 <HAL_UART_RxCpltCallback+0x78>)
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	b25b      	sxtb	r3, r3
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	da02      	bge.n	8002c22 <HAL_UART_RxCpltCallback+0x62>
		{
			rx_index = 0; // 오버플로 방지
 8002c1c:	4b06      	ldr	r3, [pc, #24]	@ (8002c38 <HAL_UART_RxCpltCallback+0x78>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	701a      	strb	r2, [r3, #0]
		}

		// 다음 수신 재시작
		HAL_UART_Receive_IT(&huart4, &rx_data, 1);
 8002c22:	2201      	movs	r2, #1
 8002c24:	4905      	ldr	r1, [pc, #20]	@ (8002c3c <HAL_UART_RxCpltCallback+0x7c>)
 8002c26:	480a      	ldr	r0, [pc, #40]	@ (8002c50 <HAL_UART_RxCpltCallback+0x90>)
 8002c28:	f00a fb58 	bl	800d2dc <HAL_UART_Receive_IT>
	}
}
 8002c2c:	bf00      	nop
 8002c2e:	3708      	adds	r7, #8
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	40004c00 	.word	0x40004c00
 8002c38:	2400058c 	.word	0x2400058c
 8002c3c:	24000509 	.word	0x24000509
 8002c40:	2400050c 	.word	0x2400050c
 8002c44:	24000508 	.word	0x24000508
 8002c48:	24000590 	.word	0x24000590
 8002c4c:	24000610 	.word	0x24000610
 8002c50:	240003d8 	.word	0x240003d8

08002c54 <InitTMTC>:

void InitTMTC(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
	if (HAL_UART_Receive_IT(&huart4, &rx_data, 1) != HAL_OK)
 8002c58:	2201      	movs	r2, #1
 8002c5a:	4905      	ldr	r1, [pc, #20]	@ (8002c70 <InitTMTC+0x1c>)
 8002c5c:	4805      	ldr	r0, [pc, #20]	@ (8002c74 <InitTMTC+0x20>)
 8002c5e:	f00a fb3d 	bl	800d2dc <HAL_UART_Receive_IT>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d001      	beq.n	8002c6c <InitTMTC+0x18>
	{
		Error_Handler();
 8002c68:	f7fe fbc0 	bl	80013ec <Error_Handler>
	}
}
 8002c6c:	bf00      	nop
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	24000509 	.word	0x24000509
 8002c74:	240003d8 	.word	0x240003d8

08002c78 <GetTC>:

void GetTC(uint8_t* TC)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
	memcpy((void*)TC,(void*)tc_buffer,sizeof(uint8_t)*NRecv);
 8002c80:	4b05      	ldr	r3, [pc, #20]	@ (8002c98 <GetTC+0x20>)
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	461a      	mov	r2, r3
 8002c86:	4905      	ldr	r1, [pc, #20]	@ (8002c9c <GetTC+0x24>)
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f00d fe0c 	bl	80108a6 <memcpy>
}
 8002c8e:	bf00      	nop
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	24000610 	.word	0x24000610
 8002c9c:	24000590 	.word	0x24000590

08002ca0 <SendTM>:

void SendTM(uint8_t* TM)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
	uint8_t n_send = strlen((char*)TM);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f7fd fb79 	bl	80003a0 <strlen>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart4, (uint8_t*)TM, n_send, HAL_MAX_DELAY);
 8002cb2:	7bfb      	ldrb	r3, [r7, #15]
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8002cba:	6879      	ldr	r1, [r7, #4]
 8002cbc:	4803      	ldr	r0, [pc, #12]	@ (8002ccc <SendTM+0x2c>)
 8002cbe:	f00a fa7f 	bl	800d1c0 <HAL_UART_Transmit>
}
 8002cc2:	bf00      	nop
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	240003d8 	.word	0x240003d8

08002cd0 <SVCmdDecoding>:

void SVCmdDecoding(uint8_t* sv)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b0a6      	sub	sp, #152	@ 0x98
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
	uint8_t TC[MAX_TC_SIZE];
	GetTC(TC);
 8002cd8:	f107 030c 	add.w	r3, r7, #12
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7ff ffcb 	bl	8002c78 <GetTC>

	uint8_t sv_cnt = 0;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
	char* tok;
	tok = strtok((char*)TC,",");
 8002ce8:	f107 030c 	add.w	r3, r7, #12
 8002cec:	4921      	ldr	r1, [pc, #132]	@ (8002d74 <SVCmdDecoding+0xa4>)
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f00d fd06 	bl	8010700 <strtok>
 8002cf4:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
	if (strcmp(tok,"IGRVT") == 0)
 8002cf8:	491f      	ldr	r1, [pc, #124]	@ (8002d78 <SVCmdDecoding+0xa8>)
 8002cfa:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8002cfe:	f7fd faef 	bl	80002e0 <strcmp>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d131      	bne.n	8002d6c <SVCmdDecoding+0x9c>
	{
		tok = strtok(NULL,",");
 8002d08:	491a      	ldr	r1, [pc, #104]	@ (8002d74 <SVCmdDecoding+0xa4>)
 8002d0a:	2000      	movs	r0, #0
 8002d0c:	f00d fcf8 	bl	8010700 <strtok>
 8002d10:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
		while( tok != NULL)
 8002d14:	e024      	b.n	8002d60 <SVCmdDecoding+0x90>
		{
			uint8_t data = (uint8_t)atoi(tok);
 8002d16:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8002d1a:	f00c fe4d 	bl	800f9b8 <atoi>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
				if (data == 999)
				{
					sv_cnt = 0;
					break;
				}
				else if (data <= 1)
 8002d24:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d80a      	bhi.n	8002d42 <SVCmdDecoding+0x72>
				{
					sv[sv_cnt] = atoi(tok);
 8002d2c:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8002d30:	f00c fe42 	bl	800f9b8 <atoi>
 8002d34:	4601      	mov	r1, r0
 8002d36:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	b2ca      	uxtb	r2, r1
 8002d40:	701a      	strb	r2, [r3, #0]
				}
			}
			sv_cnt++;
 8002d42:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8002d46:	3301      	adds	r3, #1
 8002d48:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
			if (sv_cnt > MAX_SV_NUM)
 8002d4c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8002d50:	2b06      	cmp	r3, #6
 8002d52:	d80a      	bhi.n	8002d6a <SVCmdDecoding+0x9a>
			{
				break;
			}

			tok = strtok(NULL,",");
 8002d54:	4907      	ldr	r1, [pc, #28]	@ (8002d74 <SVCmdDecoding+0xa4>)
 8002d56:	2000      	movs	r0, #0
 8002d58:	f00d fcd2 	bl	8010700 <strtok>
 8002d5c:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
		while( tok != NULL)
 8002d60:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d1d6      	bne.n	8002d16 <SVCmdDecoding+0x46>
		}
	}
}
 8002d68:	e000      	b.n	8002d6c <SVCmdDecoding+0x9c>
				break;
 8002d6a:	bf00      	nop
}
 8002d6c:	bf00      	nop
 8002d6e:	3798      	adds	r7, #152	@ 0x98
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	0801278c 	.word	0x0801278c
 8002d78:	08012790 	.word	0x08012790

08002d7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002d7c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8002db8 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8002d80:	f7fd fd5a 	bl	8000838 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002d84:	f7fd fcaa 	bl	80006dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d88:	480c      	ldr	r0, [pc, #48]	@ (8002dbc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d8a:	490d      	ldr	r1, [pc, #52]	@ (8002dc0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d8c:	4a0d      	ldr	r2, [pc, #52]	@ (8002dc4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d90:	e002      	b.n	8002d98 <LoopCopyDataInit>

08002d92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d96:	3304      	adds	r3, #4

08002d98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d9c:	d3f9      	bcc.n	8002d92 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d9e:	4a0a      	ldr	r2, [pc, #40]	@ (8002dc8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002da0:	4c0a      	ldr	r4, [pc, #40]	@ (8002dcc <LoopFillZerobss+0x22>)
  movs r3, #0
 8002da2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002da4:	e001      	b.n	8002daa <LoopFillZerobss>

08002da6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002da6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002da8:	3204      	adds	r2, #4

08002daa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002daa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dac:	d3fb      	bcc.n	8002da6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002dae:	f00d fd53 	bl	8010858 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002db2:	f7fd fdb7 	bl	8000924 <main>
  bx  lr
 8002db6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002db8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002dbc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002dc0:	240001f4 	.word	0x240001f4
  ldr r2, =_sidata
 8002dc4:	08012bc0 	.word	0x08012bc0
  ldr r2, =_sbss
 8002dc8:	240001f8 	.word	0x240001f8
  ldr r4, =_ebss
 8002dcc:	24000804 	.word	0x24000804

08002dd0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002dd0:	e7fe      	b.n	8002dd0 <ADC3_IRQHandler>
	...

08002dd4 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b08c      	sub	sp, #48	@ 0x30
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	4603      	mov	r3, r0
 8002ddc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002dde:	2300      	movs	r3, #0
 8002de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8002de2:	79fb      	ldrb	r3, [r7, #7]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d009      	beq.n	8002dfc <BSP_LED_Init+0x28>
 8002de8:	79fb      	ldrb	r3, [r7, #7]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d006      	beq.n	8002dfc <BSP_LED_Init+0x28>
 8002dee:	79fb      	ldrb	r3, [r7, #7]
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d003      	beq.n	8002dfc <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002df4:	f06f 0301 	mvn.w	r3, #1
 8002df8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002dfa:	e055      	b.n	8002ea8 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8002dfc:	79fb      	ldrb	r3, [r7, #7]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d10f      	bne.n	8002e22 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8002e02:	4b2c      	ldr	r3, [pc, #176]	@ (8002eb4 <BSP_LED_Init+0xe0>)
 8002e04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e08:	4a2a      	ldr	r2, [pc, #168]	@ (8002eb4 <BSP_LED_Init+0xe0>)
 8002e0a:	f043 0302 	orr.w	r3, r3, #2
 8002e0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002e12:	4b28      	ldr	r3, [pc, #160]	@ (8002eb4 <BSP_LED_Init+0xe0>)
 8002e14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	617b      	str	r3, [r7, #20]
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	e021      	b.n	8002e66 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8002e22:	79fb      	ldrb	r3, [r7, #7]
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d10f      	bne.n	8002e48 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8002e28:	4b22      	ldr	r3, [pc, #136]	@ (8002eb4 <BSP_LED_Init+0xe0>)
 8002e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e2e:	4a21      	ldr	r2, [pc, #132]	@ (8002eb4 <BSP_LED_Init+0xe0>)
 8002e30:	f043 0310 	orr.w	r3, r3, #16
 8002e34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002e38:	4b1e      	ldr	r3, [pc, #120]	@ (8002eb4 <BSP_LED_Init+0xe0>)
 8002e3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e3e:	f003 0310 	and.w	r3, r3, #16
 8002e42:	613b      	str	r3, [r7, #16]
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	e00e      	b.n	8002e66 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8002e48:	4b1a      	ldr	r3, [pc, #104]	@ (8002eb4 <BSP_LED_Init+0xe0>)
 8002e4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e4e:	4a19      	ldr	r2, [pc, #100]	@ (8002eb4 <BSP_LED_Init+0xe0>)
 8002e50:	f043 0302 	orr.w	r3, r3, #2
 8002e54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002e58:	4b16      	ldr	r3, [pc, #88]	@ (8002eb4 <BSP_LED_Init+0xe0>)
 8002e5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	60fb      	str	r3, [r7, #12]
 8002e64:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8002e66:	79fb      	ldrb	r3, [r7, #7]
 8002e68:	4a13      	ldr	r2, [pc, #76]	@ (8002eb8 <BSP_LED_Init+0xe4>)
 8002e6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e6e:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002e70:	2301      	movs	r3, #1
 8002e72:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8002e74:	2300      	movs	r3, #0
 8002e76:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8002e7c:	79fb      	ldrb	r3, [r7, #7]
 8002e7e:	4a0f      	ldr	r2, [pc, #60]	@ (8002ebc <BSP_LED_Init+0xe8>)
 8002e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e84:	f107 0218 	add.w	r2, r7, #24
 8002e88:	4611      	mov	r1, r2
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f004 fff2 	bl	8007e74 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002e90:	79fb      	ldrb	r3, [r7, #7]
 8002e92:	4a0a      	ldr	r2, [pc, #40]	@ (8002ebc <BSP_LED_Init+0xe8>)
 8002e94:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002e98:	79fb      	ldrb	r3, [r7, #7]
 8002e9a:	4a07      	ldr	r2, [pc, #28]	@ (8002eb8 <BSP_LED_Init+0xe4>)
 8002e9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	f005 f996 	bl	80081d4 <HAL_GPIO_WritePin>
  }

  return ret;
 8002ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3730      	adds	r7, #48	@ 0x30
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	58024400 	.word	0x58024400
 8002eb8:	080127a8 	.word	0x080127a8
 8002ebc:	2400000c 	.word	0x2400000c

08002ec0 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8002ece:	79fb      	ldrb	r3, [r7, #7]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d009      	beq.n	8002ee8 <BSP_LED_On+0x28>
 8002ed4:	79fb      	ldrb	r3, [r7, #7]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d006      	beq.n	8002ee8 <BSP_LED_On+0x28>
 8002eda:	79fb      	ldrb	r3, [r7, #7]
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d003      	beq.n	8002ee8 <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002ee0:	f06f 0301 	mvn.w	r3, #1
 8002ee4:	60fb      	str	r3, [r7, #12]
 8002ee6:	e00b      	b.n	8002f00 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8002ee8:	79fb      	ldrb	r3, [r7, #7]
 8002eea:	4a08      	ldr	r2, [pc, #32]	@ (8002f0c <BSP_LED_On+0x4c>)
 8002eec:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002ef0:	79fb      	ldrb	r3, [r7, #7]
 8002ef2:	4a07      	ldr	r2, [pc, #28]	@ (8002f10 <BSP_LED_On+0x50>)
 8002ef4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	4619      	mov	r1, r3
 8002efc:	f005 f96a 	bl	80081d4 <HAL_GPIO_WritePin>
  }

  return ret;
 8002f00:	68fb      	ldr	r3, [r7, #12]
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3710      	adds	r7, #16
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	2400000c 	.word	0x2400000c
 8002f10:	080127a8 	.word	0x080127a8

08002f14 <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8002f22:	79fb      	ldrb	r3, [r7, #7]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d009      	beq.n	8002f3c <BSP_LED_Off+0x28>
 8002f28:	79fb      	ldrb	r3, [r7, #7]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d006      	beq.n	8002f3c <BSP_LED_Off+0x28>
 8002f2e:	79fb      	ldrb	r3, [r7, #7]
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d003      	beq.n	8002f3c <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002f34:	f06f 0301 	mvn.w	r3, #1
 8002f38:	60fb      	str	r3, [r7, #12]
 8002f3a:	e00b      	b.n	8002f54 <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002f3c:	79fb      	ldrb	r3, [r7, #7]
 8002f3e:	4a08      	ldr	r2, [pc, #32]	@ (8002f60 <BSP_LED_Off+0x4c>)
 8002f40:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002f44:	79fb      	ldrb	r3, [r7, #7]
 8002f46:	4a07      	ldr	r2, [pc, #28]	@ (8002f64 <BSP_LED_Off+0x50>)
 8002f48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	4619      	mov	r1, r3
 8002f50:	f005 f940 	bl	80081d4 <HAL_GPIO_WritePin>
  }

  return ret;
 8002f54:	68fb      	ldr	r3, [r7, #12]
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	2400000c 	.word	0x2400000c
 8002f64:	080127a8 	.word	0x080127a8

08002f68 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	4603      	mov	r3, r0
 8002f70:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002f72:	2300      	movs	r3, #0
 8002f74:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8002f76:	79fb      	ldrb	r3, [r7, #7]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d009      	beq.n	8002f90 <BSP_LED_Toggle+0x28>
 8002f7c:	79fb      	ldrb	r3, [r7, #7]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d006      	beq.n	8002f90 <BSP_LED_Toggle+0x28>
 8002f82:	79fb      	ldrb	r3, [r7, #7]
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d003      	beq.n	8002f90 <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002f88:	f06f 0301 	mvn.w	r3, #1
 8002f8c:	60fb      	str	r3, [r7, #12]
 8002f8e:	e00b      	b.n	8002fa8 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8002f90:	79fb      	ldrb	r3, [r7, #7]
 8002f92:	4a08      	ldr	r2, [pc, #32]	@ (8002fb4 <BSP_LED_Toggle+0x4c>)
 8002f94:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002f98:	79fb      	ldrb	r3, [r7, #7]
 8002f9a:	4907      	ldr	r1, [pc, #28]	@ (8002fb8 <BSP_LED_Toggle+0x50>)
 8002f9c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	4610      	mov	r0, r2
 8002fa4:	f005 f92f 	bl	8008206 <HAL_GPIO_TogglePin>
  }

  return ret;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	2400000c 	.word	0x2400000c
 8002fb8:	080127a8 	.word	0x080127a8

08002fbc <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b088      	sub	sp, #32
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	460a      	mov	r2, r1
 8002fc6:	71fb      	strb	r3, [r7, #7]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8002fcc:	4b2e      	ldr	r3, [pc, #184]	@ (8003088 <BSP_PB_Init+0xcc>)
 8002fce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002fd2:	4a2d      	ldr	r2, [pc, #180]	@ (8003088 <BSP_PB_Init+0xcc>)
 8002fd4:	f043 0304 	orr.w	r3, r3, #4
 8002fd8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002fdc:	4b2a      	ldr	r3, [pc, #168]	@ (8003088 <BSP_PB_Init+0xcc>)
 8002fde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002fe2:	f003 0304 	and.w	r3, r3, #4
 8002fe6:	60bb      	str	r3, [r7, #8]
 8002fe8:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8002fea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002fee:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8002ff0:	2302      	movs	r3, #2
 8002ff2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8002ff8:	79bb      	ldrb	r3, [r7, #6]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d10c      	bne.n	8003018 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002ffe:	2300      	movs	r3, #0
 8003000:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8003002:	79fb      	ldrb	r3, [r7, #7]
 8003004:	4a21      	ldr	r2, [pc, #132]	@ (800308c <BSP_PB_Init+0xd0>)
 8003006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800300a:	f107 020c 	add.w	r2, r7, #12
 800300e:	4611      	mov	r1, r2
 8003010:	4618      	mov	r0, r3
 8003012:	f004 ff2f 	bl	8007e74 <HAL_GPIO_Init>
 8003016:	e031      	b.n	800307c <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8003018:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800301c:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800301e:	79fb      	ldrb	r3, [r7, #7]
 8003020:	4a1a      	ldr	r2, [pc, #104]	@ (800308c <BSP_PB_Init+0xd0>)
 8003022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003026:	f107 020c 	add.w	r2, r7, #12
 800302a:	4611      	mov	r1, r2
 800302c:	4618      	mov	r0, r3
 800302e:	f004 ff21 	bl	8007e74 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8003032:	79fb      	ldrb	r3, [r7, #7]
 8003034:	00db      	lsls	r3, r3, #3
 8003036:	4a16      	ldr	r2, [pc, #88]	@ (8003090 <BSP_PB_Init+0xd4>)
 8003038:	441a      	add	r2, r3
 800303a:	79fb      	ldrb	r3, [r7, #7]
 800303c:	4915      	ldr	r1, [pc, #84]	@ (8003094 <BSP_PB_Init+0xd8>)
 800303e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003042:	4619      	mov	r1, r3
 8003044:	4610      	mov	r0, r2
 8003046:	f004 fec4 	bl	8007dd2 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 800304a:	79fb      	ldrb	r3, [r7, #7]
 800304c:	00db      	lsls	r3, r3, #3
 800304e:	4a10      	ldr	r2, [pc, #64]	@ (8003090 <BSP_PB_Init+0xd4>)
 8003050:	1898      	adds	r0, r3, r2
 8003052:	79fb      	ldrb	r3, [r7, #7]
 8003054:	4a10      	ldr	r2, [pc, #64]	@ (8003098 <BSP_PB_Init+0xdc>)
 8003056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800305a:	461a      	mov	r2, r3
 800305c:	2100      	movs	r1, #0
 800305e:	f004 fe99 	bl	8007d94 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8003062:	2028      	movs	r0, #40	@ 0x28
 8003064:	79fb      	ldrb	r3, [r7, #7]
 8003066:	4a0d      	ldr	r2, [pc, #52]	@ (800309c <BSP_PB_Init+0xe0>)
 8003068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800306c:	2200      	movs	r2, #0
 800306e:	4619      	mov	r1, r3
 8003070:	f002 f80d 	bl	800508e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8003074:	2328      	movs	r3, #40	@ 0x28
 8003076:	4618      	mov	r0, r3
 8003078:	f002 f823 	bl	80050c2 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3720      	adds	r7, #32
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	58024400 	.word	0x58024400
 800308c:	24000018 	.word	0x24000018
 8003090:	24000614 	.word	0x24000614
 8003094:	080127b0 	.word	0x080127b0
 8003098:	2400001c 	.word	0x2400001c
 800309c:	24000020 	.word	0x24000020

080030a0 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	4603      	mov	r3, r0
 80030a8:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 80030aa:	79fb      	ldrb	r3, [r7, #7]
 80030ac:	00db      	lsls	r3, r3, #3
 80030ae:	4a04      	ldr	r2, [pc, #16]	@ (80030c0 <BSP_PB_IRQHandler+0x20>)
 80030b0:	4413      	add	r3, r2
 80030b2:	4618      	mov	r0, r3
 80030b4:	f004 fea2 	bl	8007dfc <HAL_EXTI_IRQHandler>
}
 80030b8:	bf00      	nop
 80030ba:	3708      	adds	r7, #8
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	24000614 	.word	0x24000614

080030c4 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	4603      	mov	r3, r0
 80030cc:	6039      	str	r1, [r7, #0]
 80030ce:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80030d0:	2300      	movs	r3, #0
 80030d2:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 80030d4:	79fb      	ldrb	r3, [r7, #7]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d003      	beq.n	80030e2 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80030da:	f06f 0301 	mvn.w	r3, #1
 80030de:	60fb      	str	r3, [r7, #12]
 80030e0:	e018      	b.n	8003114 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 80030e2:	79fb      	ldrb	r3, [r7, #7]
 80030e4:	2294      	movs	r2, #148	@ 0x94
 80030e6:	fb02 f303 	mul.w	r3, r2, r3
 80030ea:	4a0d      	ldr	r2, [pc, #52]	@ (8003120 <BSP_COM_Init+0x5c>)
 80030ec:	4413      	add	r3, r2
 80030ee:	4618      	mov	r0, r3
 80030f0:	f000 f86e 	bl	80031d0 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80030f4:	79fb      	ldrb	r3, [r7, #7]
 80030f6:	2294      	movs	r2, #148	@ 0x94
 80030f8:	fb02 f303 	mul.w	r3, r2, r3
 80030fc:	4a08      	ldr	r2, [pc, #32]	@ (8003120 <BSP_COM_Init+0x5c>)
 80030fe:	4413      	add	r3, r2
 8003100:	6839      	ldr	r1, [r7, #0]
 8003102:	4618      	mov	r0, r3
 8003104:	f000 f80e 	bl	8003124 <MX_USART3_Init>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d002      	beq.n	8003114 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800310e:	f06f 0303 	mvn.w	r3, #3
 8003112:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8003114:	68fb      	ldr	r3, [r7, #12]
}
 8003116:	4618      	mov	r0, r3
 8003118:	3710      	adds	r7, #16
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	2400061c 	.word	0x2400061c

08003124 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 800312e:	4b15      	ldr	r3, [pc, #84]	@ (8003184 <MX_USART3_Init+0x60>)
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	220c      	movs	r2, #12
 8003142:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	895b      	ldrh	r3, [r3, #10]
 8003148:	461a      	mov	r2, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685a      	ldr	r2, [r3, #4]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	891b      	ldrh	r3, [r3, #8]
 800315a:	461a      	mov	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	899b      	ldrh	r3, [r3, #12]
 8003164:	461a      	mov	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003170:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f009 ffd4 	bl	800d120 <HAL_UART_Init>
 8003178:	4603      	mov	r3, r0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	24000008 	.word	0x24000008

08003188 <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8003190:	4b09      	ldr	r3, [pc, #36]	@ (80031b8 <__io_putchar+0x30>)
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	461a      	mov	r2, r3
 8003196:	2394      	movs	r3, #148	@ 0x94
 8003198:	fb02 f303 	mul.w	r3, r2, r3
 800319c:	4a07      	ldr	r2, [pc, #28]	@ (80031bc <__io_putchar+0x34>)
 800319e:	1898      	adds	r0, r3, r2
 80031a0:	1d39      	adds	r1, r7, #4
 80031a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80031a6:	2201      	movs	r2, #1
 80031a8:	f00a f80a 	bl	800d1c0 <HAL_UART_Transmit>
  return ch;
 80031ac:	687b      	ldr	r3, [r7, #4]
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3708      	adds	r7, #8
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	240006b0 	.word	0x240006b0
 80031bc:	2400061c 	.word	0x2400061c

080031c0 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80031c4:	2000      	movs	r0, #0
 80031c6:	f7fe f8fd 	bl	80013c4 <BSP_PB_Callback>
}
 80031ca:	bf00      	nop
 80031cc:	bd80      	pop	{r7, pc}
	...

080031d0 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b08a      	sub	sp, #40	@ 0x28
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 80031d8:	4b27      	ldr	r3, [pc, #156]	@ (8003278 <COM1_MspInit+0xa8>)
 80031da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031de:	4a26      	ldr	r2, [pc, #152]	@ (8003278 <COM1_MspInit+0xa8>)
 80031e0:	f043 0308 	orr.w	r3, r3, #8
 80031e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80031e8:	4b23      	ldr	r3, [pc, #140]	@ (8003278 <COM1_MspInit+0xa8>)
 80031ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031ee:	f003 0308 	and.w	r3, r3, #8
 80031f2:	613b      	str	r3, [r7, #16]
 80031f4:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 80031f6:	4b20      	ldr	r3, [pc, #128]	@ (8003278 <COM1_MspInit+0xa8>)
 80031f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031fc:	4a1e      	ldr	r2, [pc, #120]	@ (8003278 <COM1_MspInit+0xa8>)
 80031fe:	f043 0308 	orr.w	r3, r3, #8
 8003202:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003206:	4b1c      	ldr	r3, [pc, #112]	@ (8003278 <COM1_MspInit+0xa8>)
 8003208:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800320c:	f003 0308 	and.w	r3, r3, #8
 8003210:	60fb      	str	r3, [r7, #12]
 8003212:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8003214:	4b18      	ldr	r3, [pc, #96]	@ (8003278 <COM1_MspInit+0xa8>)
 8003216:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800321a:	4a17      	ldr	r2, [pc, #92]	@ (8003278 <COM1_MspInit+0xa8>)
 800321c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003220:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003224:	4b14      	ldr	r3, [pc, #80]	@ (8003278 <COM1_MspInit+0xa8>)
 8003226:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800322a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800322e:	60bb      	str	r3, [r7, #8]
 8003230:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 8003232:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003236:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003238:	2302      	movs	r3, #2
 800323a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800323c:	2302      	movs	r3, #2
 800323e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8003240:	2301      	movs	r3, #1
 8003242:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8003244:	2307      	movs	r3, #7
 8003246:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8003248:	f107 0314 	add.w	r3, r7, #20
 800324c:	4619      	mov	r1, r3
 800324e:	480b      	ldr	r0, [pc, #44]	@ (800327c <COM1_MspInit+0xac>)
 8003250:	f004 fe10 	bl	8007e74 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8003254:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003258:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800325a:	2302      	movs	r3, #2
 800325c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800325e:	2307      	movs	r3, #7
 8003260:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8003262:	f107 0314 	add.w	r3, r7, #20
 8003266:	4619      	mov	r1, r3
 8003268:	4804      	ldr	r0, [pc, #16]	@ (800327c <COM1_MspInit+0xac>)
 800326a:	f004 fe03 	bl	8007e74 <HAL_GPIO_Init>
}
 800326e:	bf00      	nop
 8003270:	3728      	adds	r7, #40	@ 0x28
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	58024400 	.word	0x58024400
 800327c:	58020c00 	.word	0x58020c00

08003280 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003286:	2003      	movs	r0, #3
 8003288:	f001 fef6 	bl	8005078 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800328c:	f005 fe6e 	bl	8008f6c <HAL_RCC_GetSysClockFreq>
 8003290:	4602      	mov	r2, r0
 8003292:	4b15      	ldr	r3, [pc, #84]	@ (80032e8 <HAL_Init+0x68>)
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	0a1b      	lsrs	r3, r3, #8
 8003298:	f003 030f 	and.w	r3, r3, #15
 800329c:	4913      	ldr	r1, [pc, #76]	@ (80032ec <HAL_Init+0x6c>)
 800329e:	5ccb      	ldrb	r3, [r1, r3]
 80032a0:	f003 031f 	and.w	r3, r3, #31
 80032a4:	fa22 f303 	lsr.w	r3, r2, r3
 80032a8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80032aa:	4b0f      	ldr	r3, [pc, #60]	@ (80032e8 <HAL_Init+0x68>)
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	f003 030f 	and.w	r3, r3, #15
 80032b2:	4a0e      	ldr	r2, [pc, #56]	@ (80032ec <HAL_Init+0x6c>)
 80032b4:	5cd3      	ldrb	r3, [r2, r3]
 80032b6:	f003 031f 	and.w	r3, r3, #31
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	fa22 f303 	lsr.w	r3, r2, r3
 80032c0:	4a0b      	ldr	r2, [pc, #44]	@ (80032f0 <HAL_Init+0x70>)
 80032c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80032c4:	4a0b      	ldr	r2, [pc, #44]	@ (80032f4 <HAL_Init+0x74>)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80032ca:	2000      	movs	r0, #0
 80032cc:	f000 f814 	bl	80032f8 <HAL_InitTick>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e002      	b.n	80032e0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80032da:	f7fe f9d1 	bl	8001680 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3708      	adds	r7, #8
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	58024400 	.word	0x58024400
 80032ec:	08012798 	.word	0x08012798
 80032f0:	24000004 	.word	0x24000004
 80032f4:	24000000 	.word	0x24000000

080032f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003300:	4b15      	ldr	r3, [pc, #84]	@ (8003358 <HAL_InitTick+0x60>)
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d101      	bne.n	800330c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e021      	b.n	8003350 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800330c:	4b13      	ldr	r3, [pc, #76]	@ (800335c <HAL_InitTick+0x64>)
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	4b11      	ldr	r3, [pc, #68]	@ (8003358 <HAL_InitTick+0x60>)
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	4619      	mov	r1, r3
 8003316:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800331a:	fbb3 f3f1 	udiv	r3, r3, r1
 800331e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003322:	4618      	mov	r0, r3
 8003324:	f001 fedb 	bl	80050de <HAL_SYSTICK_Config>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e00e      	b.n	8003350 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2b0f      	cmp	r3, #15
 8003336:	d80a      	bhi.n	800334e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003338:	2200      	movs	r2, #0
 800333a:	6879      	ldr	r1, [r7, #4]
 800333c:	f04f 30ff 	mov.w	r0, #4294967295
 8003340:	f001 fea5 	bl	800508e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003344:	4a06      	ldr	r2, [pc, #24]	@ (8003360 <HAL_InitTick+0x68>)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800334a:	2300      	movs	r3, #0
 800334c:	e000      	b.n	8003350 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
}
 8003350:	4618      	mov	r0, r3
 8003352:	3708      	adds	r7, #8
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	24000028 	.word	0x24000028
 800335c:	24000000 	.word	0x24000000
 8003360:	24000024 	.word	0x24000024

08003364 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003368:	4b06      	ldr	r3, [pc, #24]	@ (8003384 <HAL_IncTick+0x20>)
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	461a      	mov	r2, r3
 800336e:	4b06      	ldr	r3, [pc, #24]	@ (8003388 <HAL_IncTick+0x24>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4413      	add	r3, r2
 8003374:	4a04      	ldr	r2, [pc, #16]	@ (8003388 <HAL_IncTick+0x24>)
 8003376:	6013      	str	r3, [r2, #0]
}
 8003378:	bf00      	nop
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	24000028 	.word	0x24000028
 8003388:	240006b4 	.word	0x240006b4

0800338c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0
  return uwTick;
 8003390:	4b03      	ldr	r3, [pc, #12]	@ (80033a0 <HAL_GetTick+0x14>)
 8003392:	681b      	ldr	r3, [r3, #0]
}
 8003394:	4618      	mov	r0, r3
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	240006b4 	.word	0x240006b4

080033a4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80033a4:	b480      	push	{r7}
 80033a6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80033a8:	4b03      	ldr	r3, [pc, #12]	@ (80033b8 <HAL_GetREVID+0x14>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	0c1b      	lsrs	r3, r3, #16
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr
 80033b8:	5c001000 	.word	0x5c001000

080033bc <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 80033c4:	4b06      	ldr	r3, [pc, #24]	@ (80033e0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f023 0202 	bic.w	r2, r3, #2
 80033cc:	4904      	ldr	r1, [pc, #16]	@ (80033e0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	600b      	str	r3, [r1, #0]
}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr
 80033e0:	58003c00 	.word	0x58003c00

080033e4 <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 80033e4:	b480      	push	{r7}
 80033e6:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 80033e8:	4b05      	ldr	r3, [pc, #20]	@ (8003400 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a04      	ldr	r2, [pc, #16]	@ (8003400 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 80033ee:	f023 0301 	bic.w	r3, r3, #1
 80033f2:	6013      	str	r3, [r2, #0]
}
 80033f4:	bf00      	nop
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	58003c00 	.word	0x58003c00

08003404 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800340e:	4b07      	ldr	r3, [pc, #28]	@ (800342c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003410:	685a      	ldr	r2, [r3, #4]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	43db      	mvns	r3, r3
 8003416:	401a      	ands	r2, r3
 8003418:	4904      	ldr	r1, [pc, #16]	@ (800342c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	4313      	orrs	r3, r2
 800341e:	604b      	str	r3, [r1, #4]
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr
 800342c:	58000400 	.word	0x58000400

08003430 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	431a      	orrs	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	609a      	str	r2, [r3, #8]
}
 800344a:	bf00      	nop
 800344c:	370c      	adds	r7, #12
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr

08003456 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003456:	b480      	push	{r7}
 8003458:	b083      	sub	sp, #12
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
 800345e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	431a      	orrs	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	609a      	str	r2, [r3, #8]
}
 8003470:	bf00      	nop
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800348c:	4618      	mov	r0, r3
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003498:	b480      	push	{r7}
 800349a:	b087      	sub	sp, #28
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d107      	bne.n	80034bc <LL_ADC_SetChannelPreselection+0x24>
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	0e9b      	lsrs	r3, r3, #26
 80034b0:	f003 031f 	and.w	r3, r3, #31
 80034b4:	2201      	movs	r2, #1
 80034b6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ba:	e015      	b.n	80034e8 <LL_ADC_SetChannelPreselection+0x50>
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	fa93 f3a3 	rbit	r3, r3
 80034c6:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d101      	bne.n	80034d6 <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 80034d2:	2320      	movs	r3, #32
 80034d4:	e003      	b.n	80034de <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	fab3 f383 	clz	r3, r3
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	f003 031f 	and.w	r3, r3, #31
 80034e2:	2201      	movs	r2, #1
 80034e4:	fa02 f303 	lsl.w	r3, r2, r3
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	69d2      	ldr	r2, [r2, #28]
 80034ec:	431a      	orrs	r2, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 80034f2:	bf00      	nop
 80034f4:	371c      	adds	r7, #28
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr

080034fe <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80034fe:	b480      	push	{r7}
 8003500:	b087      	sub	sp, #28
 8003502:	af00      	add	r7, sp, #0
 8003504:	60f8      	str	r0, [r7, #12]
 8003506:	60b9      	str	r1, [r7, #8]
 8003508:	607a      	str	r2, [r7, #4]
 800350a:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	3360      	adds	r3, #96	@ 0x60
 8003510:	461a      	mov	r2, r3
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	4413      	add	r3, r2
 8003518:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	430b      	orrs	r3, r1
 800352c:	431a      	orrs	r2, r3
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003532:	bf00      	nop
 8003534:	371c      	adds	r7, #28
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr

0800353e <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800353e:	b480      	push	{r7}
 8003540:	b085      	sub	sp, #20
 8003542:	af00      	add	r7, sp, #0
 8003544:	60f8      	str	r0, [r7, #12]
 8003546:	60b9      	str	r1, [r7, #8]
 8003548:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	f003 031f 	and.w	r3, r3, #31
 8003558:	6879      	ldr	r1, [r7, #4]
 800355a:	fa01 f303 	lsl.w	r3, r1, r3
 800355e:	431a      	orrs	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	611a      	str	r2, [r3, #16]
}
 8003564:	bf00      	nop
 8003566:	3714      	adds	r7, #20
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003570:	b480      	push	{r7}
 8003572:	b087      	sub	sp, #28
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	3360      	adds	r3, #96	@ 0x60
 8003580:	461a      	mov	r2, r3
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	4413      	add	r3, r2
 8003588:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	431a      	orrs	r2, r3
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	601a      	str	r2, [r3, #0]
  }
}
 800359a:	bf00      	nop
 800359c:	371c      	adds	r7, #28
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr

080035a6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80035a6:	b480      	push	{r7}
 80035a8:	b083      	sub	sp, #12
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80035ba:	2301      	movs	r3, #1
 80035bc:	e000      	b.n	80035c0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80035be:	2300      	movs	r3, #0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	370c      	adds	r7, #12
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b087      	sub	sp, #28
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	3330      	adds	r3, #48	@ 0x30
 80035dc:	461a      	mov	r2, r3
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	0a1b      	lsrs	r3, r3, #8
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	f003 030c 	and.w	r3, r3, #12
 80035e8:	4413      	add	r3, r2
 80035ea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	f003 031f 	and.w	r3, r3, #31
 80035f6:	211f      	movs	r1, #31
 80035f8:	fa01 f303 	lsl.w	r3, r1, r3
 80035fc:	43db      	mvns	r3, r3
 80035fe:	401a      	ands	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	0e9b      	lsrs	r3, r3, #26
 8003604:	f003 011f 	and.w	r1, r3, #31
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	f003 031f 	and.w	r3, r3, #31
 800360e:	fa01 f303 	lsl.w	r3, r1, r3
 8003612:	431a      	orrs	r2, r3
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003618:	bf00      	nop
 800361a:	371c      	adds	r7, #28
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	f023 0203 	bic.w	r2, r3, #3
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	431a      	orrs	r2, r3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	60da      	str	r2, [r3, #12]
}
 800363e:	bf00      	nop
 8003640:	370c      	adds	r7, #12
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr

0800364a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800364a:	b480      	push	{r7}
 800364c:	b083      	sub	sp, #12
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003656:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800365a:	2b00      	cmp	r3, #0
 800365c:	d101      	bne.n	8003662 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800365e:	2301      	movs	r3, #1
 8003660:	e000      	b.n	8003664 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003670:	b480      	push	{r7}
 8003672:	b087      	sub	sp, #28
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	3314      	adds	r3, #20
 8003680:	461a      	mov	r2, r3
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	0e5b      	lsrs	r3, r3, #25
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	f003 0304 	and.w	r3, r3, #4
 800368c:	4413      	add	r3, r2
 800368e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	0d1b      	lsrs	r3, r3, #20
 8003698:	f003 031f 	and.w	r3, r3, #31
 800369c:	2107      	movs	r1, #7
 800369e:	fa01 f303 	lsl.w	r3, r1, r3
 80036a2:	43db      	mvns	r3, r3
 80036a4:	401a      	ands	r2, r3
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	0d1b      	lsrs	r3, r3, #20
 80036aa:	f003 031f 	and.w	r3, r3, #31
 80036ae:	6879      	ldr	r1, [r7, #4]
 80036b0:	fa01 f303 	lsl.w	r3, r1, r3
 80036b4:	431a      	orrs	r2, r3
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80036ba:	bf00      	nop
 80036bc:	371c      	adds	r7, #28
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
	...

080036c8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036e0:	43db      	mvns	r3, r3
 80036e2:	401a      	ands	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f003 0318 	and.w	r3, r3, #24
 80036ea:	4908      	ldr	r1, [pc, #32]	@ (800370c <LL_ADC_SetChannelSingleDiff+0x44>)
 80036ec:	40d9      	lsrs	r1, r3
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	400b      	ands	r3, r1
 80036f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036f6:	431a      	orrs	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80036fe:	bf00      	nop
 8003700:	3714      	adds	r7, #20
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	000fffff 	.word	0x000fffff

08003710 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f003 031f 	and.w	r3, r3, #31
}
 8003720:	4618      	mov	r0, r3
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 800373c:	4618      	mov	r0, r3
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689a      	ldr	r2, [r3, #8]
 8003754:	4b04      	ldr	r3, [pc, #16]	@ (8003768 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003756:	4013      	ands	r3, r2
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	6093      	str	r3, [r2, #8]
}
 800375c:	bf00      	nop
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr
 8003768:	5fffffc0 	.word	0x5fffffc0

0800376c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800377c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003780:	d101      	bne.n	8003786 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003782:	2301      	movs	r3, #1
 8003784:	e000      	b.n	8003788 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689a      	ldr	r2, [r3, #8]
 80037a0:	4b05      	ldr	r3, [pc, #20]	@ (80037b8 <LL_ADC_EnableInternalRegulator+0x24>)
 80037a2:	4013      	ands	r3, r2
 80037a4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr
 80037b8:	6fffffc0 	.word	0x6fffffc0

080037bc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80037d0:	d101      	bne.n	80037d6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80037d2:	2301      	movs	r3, #1
 80037d4:	e000      	b.n	80037d8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	689a      	ldr	r2, [r3, #8]
 80037f0:	4b05      	ldr	r3, [pc, #20]	@ (8003808 <LL_ADC_Enable+0x24>)
 80037f2:	4013      	ands	r3, r2
 80037f4:	f043 0201 	orr.w	r2, r3, #1
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80037fc:	bf00      	nop
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr
 8003808:	7fffffc0 	.word	0x7fffffc0

0800380c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f003 0301 	and.w	r3, r3, #1
 800381c:	2b01      	cmp	r3, #1
 800381e:	d101      	bne.n	8003824 <LL_ADC_IsEnabled+0x18>
 8003820:	2301      	movs	r3, #1
 8003822:	e000      	b.n	8003826 <LL_ADC_IsEnabled+0x1a>
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	370c      	adds	r7, #12
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
	...

08003834 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	689a      	ldr	r2, [r3, #8]
 8003840:	4b05      	ldr	r3, [pc, #20]	@ (8003858 <LL_ADC_REG_StartConversion+0x24>)
 8003842:	4013      	ands	r3, r2
 8003844:	f043 0204 	orr.w	r2, r3, #4
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800384c:	bf00      	nop
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr
 8003858:	7fffffc0 	.word	0x7fffffc0

0800385c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f003 0304 	and.w	r3, r3, #4
 800386c:	2b04      	cmp	r3, #4
 800386e:	d101      	bne.n	8003874 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003870:	2301      	movs	r3, #1
 8003872:	e000      	b.n	8003876 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr

08003882 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003882:	b480      	push	{r7}
 8003884:	b083      	sub	sp, #12
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f003 0308 	and.w	r3, r3, #8
 8003892:	2b08      	cmp	r3, #8
 8003894:	d101      	bne.n	800389a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003896:	2301      	movs	r3, #1
 8003898:	e000      	b.n	800389c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800389a:	2300      	movs	r3, #0
}
 800389c:	4618      	mov	r0, r3
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80038a8:	b590      	push	{r4, r7, lr}
 80038aa:	b089      	sub	sp, #36	@ 0x24
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038b0:	2300      	movs	r3, #0
 80038b2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80038b4:	2300      	movs	r3, #0
 80038b6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d101      	bne.n	80038c2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e18f      	b.n	8003be2 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d109      	bne.n	80038e4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f7fd ff01 	bl	80016d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7ff ff3f 	bl	800376c <LL_ADC_IsDeepPowerDownEnabled>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d004      	beq.n	80038fe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7ff ff25 	bl	8003748 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4618      	mov	r0, r3
 8003904:	f7ff ff5a 	bl	80037bc <LL_ADC_IsInternalRegulatorEnabled>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d114      	bne.n	8003938 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4618      	mov	r0, r3
 8003914:	f7ff ff3e 	bl	8003794 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003918:	4b87      	ldr	r3, [pc, #540]	@ (8003b38 <HAL_ADC_Init+0x290>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	099b      	lsrs	r3, r3, #6
 800391e:	4a87      	ldr	r2, [pc, #540]	@ (8003b3c <HAL_ADC_Init+0x294>)
 8003920:	fba2 2303 	umull	r2, r3, r2, r3
 8003924:	099b      	lsrs	r3, r3, #6
 8003926:	3301      	adds	r3, #1
 8003928:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800392a:	e002      	b.n	8003932 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	3b01      	subs	r3, #1
 8003930:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d1f9      	bne.n	800392c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4618      	mov	r0, r3
 800393e:	f7ff ff3d 	bl	80037bc <LL_ADC_IsInternalRegulatorEnabled>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d10d      	bne.n	8003964 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800394c:	f043 0210 	orr.w	r2, r3, #16
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003958:	f043 0201 	orr.w	r2, r3, #1
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4618      	mov	r0, r3
 800396a:	f7ff ff77 	bl	800385c <LL_ADC_REG_IsConversionOngoing>
 800396e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003974:	f003 0310 	and.w	r3, r3, #16
 8003978:	2b00      	cmp	r3, #0
 800397a:	f040 8129 	bne.w	8003bd0 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	2b00      	cmp	r3, #0
 8003982:	f040 8125 	bne.w	8003bd0 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800398a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800398e:	f043 0202 	orr.w	r2, r3, #2
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4618      	mov	r0, r3
 800399c:	f7ff ff36 	bl	800380c <LL_ADC_IsEnabled>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d136      	bne.n	8003a14 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a65      	ldr	r2, [pc, #404]	@ (8003b40 <HAL_ADC_Init+0x298>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d004      	beq.n	80039ba <HAL_ADC_Init+0x112>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a63      	ldr	r2, [pc, #396]	@ (8003b44 <HAL_ADC_Init+0x29c>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d10e      	bne.n	80039d8 <HAL_ADC_Init+0x130>
 80039ba:	4861      	ldr	r0, [pc, #388]	@ (8003b40 <HAL_ADC_Init+0x298>)
 80039bc:	f7ff ff26 	bl	800380c <LL_ADC_IsEnabled>
 80039c0:	4604      	mov	r4, r0
 80039c2:	4860      	ldr	r0, [pc, #384]	@ (8003b44 <HAL_ADC_Init+0x29c>)
 80039c4:	f7ff ff22 	bl	800380c <LL_ADC_IsEnabled>
 80039c8:	4603      	mov	r3, r0
 80039ca:	4323      	orrs	r3, r4
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	bf0c      	ite	eq
 80039d0:	2301      	moveq	r3, #1
 80039d2:	2300      	movne	r3, #0
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	e008      	b.n	80039ea <HAL_ADC_Init+0x142>
 80039d8:	485b      	ldr	r0, [pc, #364]	@ (8003b48 <HAL_ADC_Init+0x2a0>)
 80039da:	f7ff ff17 	bl	800380c <LL_ADC_IsEnabled>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	bf0c      	ite	eq
 80039e4:	2301      	moveq	r3, #1
 80039e6:	2300      	movne	r3, #0
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d012      	beq.n	8003a14 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a53      	ldr	r2, [pc, #332]	@ (8003b40 <HAL_ADC_Init+0x298>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d004      	beq.n	8003a02 <HAL_ADC_Init+0x15a>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a51      	ldr	r2, [pc, #324]	@ (8003b44 <HAL_ADC_Init+0x29c>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d101      	bne.n	8003a06 <HAL_ADC_Init+0x15e>
 8003a02:	4a52      	ldr	r2, [pc, #328]	@ (8003b4c <HAL_ADC_Init+0x2a4>)
 8003a04:	e000      	b.n	8003a08 <HAL_ADC_Init+0x160>
 8003a06:	4a52      	ldr	r2, [pc, #328]	@ (8003b50 <HAL_ADC_Init+0x2a8>)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	4610      	mov	r0, r2
 8003a10:	f7ff fd0e 	bl	8003430 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003a14:	f7ff fcc6 	bl	80033a4 <HAL_GetREVID>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d914      	bls.n	8003a4c <HAL_ADC_Init+0x1a4>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	2b10      	cmp	r3, #16
 8003a28:	d110      	bne.n	8003a4c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	7d5b      	ldrb	r3, [r3, #21]
 8003a2e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003a34:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003a3a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	7f1b      	ldrb	r3, [r3, #28]
 8003a40:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003a42:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003a44:	f043 030c 	orr.w	r3, r3, #12
 8003a48:	61bb      	str	r3, [r7, #24]
 8003a4a:	e00d      	b.n	8003a68 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	7d5b      	ldrb	r3, [r3, #21]
 8003a50:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003a56:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003a5c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	7f1b      	ldrb	r3, [r3, #28]
 8003a62:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003a64:	4313      	orrs	r3, r2
 8003a66:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	7f1b      	ldrb	r3, [r3, #28]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d106      	bne.n	8003a7e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a1b      	ldr	r3, [r3, #32]
 8003a74:	3b01      	subs	r3, #1
 8003a76:	045b      	lsls	r3, r3, #17
 8003a78:	69ba      	ldr	r2, [r7, #24]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d009      	beq.n	8003a9a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a8a:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a92:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003a94:	69ba      	ldr	r2, [r7, #24]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	68da      	ldr	r2, [r3, #12]
 8003aa0:	4b2c      	ldr	r3, [pc, #176]	@ (8003b54 <HAL_ADC_Init+0x2ac>)
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	6812      	ldr	r2, [r2, #0]
 8003aa8:	69b9      	ldr	r1, [r7, #24]
 8003aaa:	430b      	orrs	r3, r1
 8003aac:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7ff fed2 	bl	800385c <LL_ADC_REG_IsConversionOngoing>
 8003ab8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7ff fedf 	bl	8003882 <LL_ADC_INJ_IsConversionOngoing>
 8003ac4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d15f      	bne.n	8003b8c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d15c      	bne.n	8003b8c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	7d1b      	ldrb	r3, [r3, #20]
 8003ad6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8003adc:	4313      	orrs	r3, r2
 8003ade:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68da      	ldr	r2, [r3, #12]
 8003ae6:	4b1c      	ldr	r3, [pc, #112]	@ (8003b58 <HAL_ADC_Init+0x2b0>)
 8003ae8:	4013      	ands	r3, r2
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	6812      	ldr	r2, [r2, #0]
 8003aee:	69b9      	ldr	r1, [r7, #24]
 8003af0:	430b      	orrs	r3, r1
 8003af2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d130      	bne.n	8003b60 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b02:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	691a      	ldr	r2, [r3, #16]
 8003b0a:	4b14      	ldr	r3, [pc, #80]	@ (8003b5c <HAL_ADC_Init+0x2b4>)
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003b12:	3a01      	subs	r2, #1
 8003b14:	0411      	lsls	r1, r2, #16
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003b1a:	4311      	orrs	r1, r2
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003b20:	4311      	orrs	r1, r2
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003b26:	430a      	orrs	r2, r1
 8003b28:	431a      	orrs	r2, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f042 0201 	orr.w	r2, r2, #1
 8003b32:	611a      	str	r2, [r3, #16]
 8003b34:	e01c      	b.n	8003b70 <HAL_ADC_Init+0x2c8>
 8003b36:	bf00      	nop
 8003b38:	24000000 	.word	0x24000000
 8003b3c:	053e2d63 	.word	0x053e2d63
 8003b40:	40022000 	.word	0x40022000
 8003b44:	40022100 	.word	0x40022100
 8003b48:	58026000 	.word	0x58026000
 8003b4c:	40022300 	.word	0x40022300
 8003b50:	58026300 	.word	0x58026300
 8003b54:	fff0c003 	.word	0xfff0c003
 8003b58:	ffffbffc 	.word	0xffffbffc
 8003b5c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	691a      	ldr	r2, [r3, #16]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f022 0201 	bic.w	r2, r2, #1
 8003b6e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	430a      	orrs	r2, r1
 8003b84:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 ff64 	bl	8004a54 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d10c      	bne.n	8003bae <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b9a:	f023 010f 	bic.w	r1, r3, #15
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	699b      	ldr	r3, [r3, #24]
 8003ba2:	1e5a      	subs	r2, r3, #1
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	430a      	orrs	r2, r1
 8003baa:	631a      	str	r2, [r3, #48]	@ 0x30
 8003bac:	e007      	b.n	8003bbe <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f022 020f 	bic.w	r2, r2, #15
 8003bbc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bc2:	f023 0303 	bic.w	r3, r3, #3
 8003bc6:	f043 0201 	orr.w	r2, r3, #1
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	655a      	str	r2, [r3, #84]	@ 0x54
 8003bce:	e007      	b.n	8003be0 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bd4:	f043 0210 	orr.w	r2, r3, #16
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003be0:	7ffb      	ldrb	r3, [r7, #31]
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3724      	adds	r7, #36	@ 0x24
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd90      	pop	{r4, r7, pc}
 8003bea:	bf00      	nop

08003bec <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b086      	sub	sp, #24
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a55      	ldr	r2, [pc, #340]	@ (8003d54 <HAL_ADC_Start_DMA+0x168>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d004      	beq.n	8003c0c <HAL_ADC_Start_DMA+0x20>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a54      	ldr	r2, [pc, #336]	@ (8003d58 <HAL_ADC_Start_DMA+0x16c>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d101      	bne.n	8003c10 <HAL_ADC_Start_DMA+0x24>
 8003c0c:	4b53      	ldr	r3, [pc, #332]	@ (8003d5c <HAL_ADC_Start_DMA+0x170>)
 8003c0e:	e000      	b.n	8003c12 <HAL_ADC_Start_DMA+0x26>
 8003c10:	4b53      	ldr	r3, [pc, #332]	@ (8003d60 <HAL_ADC_Start_DMA+0x174>)
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7ff fd7c 	bl	8003710 <LL_ADC_GetMultimode>
 8003c18:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7ff fe1c 	bl	800385c <LL_ADC_REG_IsConversionOngoing>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	f040 808c 	bne.w	8003d44 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d101      	bne.n	8003c3a <HAL_ADC_Start_DMA+0x4e>
 8003c36:	2302      	movs	r3, #2
 8003c38:	e087      	b.n	8003d4a <HAL_ADC_Start_DMA+0x15e>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d005      	beq.n	8003c54 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	2b05      	cmp	r3, #5
 8003c4c:	d002      	beq.n	8003c54 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	2b09      	cmp	r3, #9
 8003c52:	d170      	bne.n	8003d36 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003c54:	68f8      	ldr	r0, [r7, #12]
 8003c56:	f000 fddf 	bl	8004818 <ADC_Enable>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003c5e:	7dfb      	ldrb	r3, [r7, #23]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d163      	bne.n	8003d2c <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003c68:	4b3e      	ldr	r3, [pc, #248]	@ (8003d64 <HAL_ADC_Start_DMA+0x178>)
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a37      	ldr	r2, [pc, #220]	@ (8003d58 <HAL_ADC_Start_DMA+0x16c>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d002      	beq.n	8003c84 <HAL_ADC_Start_DMA+0x98>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	e000      	b.n	8003c86 <HAL_ADC_Start_DMA+0x9a>
 8003c84:	4b33      	ldr	r3, [pc, #204]	@ (8003d54 <HAL_ADC_Start_DMA+0x168>)
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	6812      	ldr	r2, [r2, #0]
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d002      	beq.n	8003c94 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d105      	bne.n	8003ca0 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c98:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ca4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d006      	beq.n	8003cba <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cb0:	f023 0206 	bic.w	r2, r3, #6
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	659a      	str	r2, [r3, #88]	@ 0x58
 8003cb8:	e002      	b.n	8003cc0 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cc4:	4a28      	ldr	r2, [pc, #160]	@ (8003d68 <HAL_ADC_Start_DMA+0x17c>)
 8003cc6:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ccc:	4a27      	ldr	r2, [pc, #156]	@ (8003d6c <HAL_ADC_Start_DMA+0x180>)
 8003cce:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cd4:	4a26      	ldr	r2, [pc, #152]	@ (8003d70 <HAL_ADC_Start_DMA+0x184>)
 8003cd6:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	221c      	movs	r2, #28
 8003cde:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	685a      	ldr	r2, [r3, #4]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f042 0210 	orr.w	r2, r2, #16
 8003cf6:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d00:	4619      	mov	r1, r3
 8003d02:	4610      	mov	r0, r2
 8003d04:	f7ff fc8e 	bl	8003624 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	3340      	adds	r3, #64	@ 0x40
 8003d12:	4619      	mov	r1, r3
 8003d14:	68ba      	ldr	r2, [r7, #8]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f001 fd5c 	bl	80057d4 <HAL_DMA_Start_IT>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4618      	mov	r0, r3
 8003d26:	f7ff fd85 	bl	8003834 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003d2a:	e00d      	b.n	8003d48 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8003d34:	e008      	b.n	8003d48 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8003d42:	e001      	b.n	8003d48 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003d44:	2302      	movs	r3, #2
 8003d46:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003d48:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3718      	adds	r7, #24
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	40022000 	.word	0x40022000
 8003d58:	40022100 	.word	0x40022100
 8003d5c:	40022300 	.word	0x40022300
 8003d60:	58026300 	.word	0x58026300
 8003d64:	fffff0fe 	.word	0xfffff0fe
 8003d68:	0800492d 	.word	0x0800492d
 8003d6c:	08004a05 	.word	0x08004a05
 8003d70:	08004a21 	.word	0x08004a21

08003d74 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b08a      	sub	sp, #40	@ 0x28
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a87      	ldr	r2, [pc, #540]	@ (8003fb4 <HAL_ADC_IRQHandler+0x240>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d004      	beq.n	8003da4 <HAL_ADC_IRQHandler+0x30>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a86      	ldr	r2, [pc, #536]	@ (8003fb8 <HAL_ADC_IRQHandler+0x244>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d101      	bne.n	8003da8 <HAL_ADC_IRQHandler+0x34>
 8003da4:	4b85      	ldr	r3, [pc, #532]	@ (8003fbc <HAL_ADC_IRQHandler+0x248>)
 8003da6:	e000      	b.n	8003daa <HAL_ADC_IRQHandler+0x36>
 8003da8:	4b85      	ldr	r3, [pc, #532]	@ (8003fc0 <HAL_ADC_IRQHandler+0x24c>)
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7ff fcb0 	bl	8003710 <LL_ADC_GetMultimode>
 8003db0:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	f003 0302 	and.w	r3, r3, #2
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d017      	beq.n	8003dec <HAL_ADC_IRQHandler+0x78>
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	f003 0302 	and.w	r3, r3, #2
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d012      	beq.n	8003dec <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dca:	f003 0310 	and.w	r3, r3, #16
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d105      	bne.n	8003dde <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dd6:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 ff92 	bl	8004d08 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2202      	movs	r2, #2
 8003dea:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	f003 0304 	and.w	r3, r3, #4
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d004      	beq.n	8003e00 <HAL_ADC_IRQHandler+0x8c>
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	f003 0304 	and.w	r3, r3, #4
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d10a      	bne.n	8003e16 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	f000 8083 	beq.w	8003f12 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	f003 0308 	and.w	r3, r3, #8
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d07d      	beq.n	8003f12 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e1a:	f003 0310 	and.w	r3, r3, #16
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d105      	bne.n	8003e2e <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e26:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7ff fbb7 	bl	80035a6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d062      	beq.n	8003f04 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a5d      	ldr	r2, [pc, #372]	@ (8003fb8 <HAL_ADC_IRQHandler+0x244>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d002      	beq.n	8003e4e <HAL_ADC_IRQHandler+0xda>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	e000      	b.n	8003e50 <HAL_ADC_IRQHandler+0xdc>
 8003e4e:	4b59      	ldr	r3, [pc, #356]	@ (8003fb4 <HAL_ADC_IRQHandler+0x240>)
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	6812      	ldr	r2, [r2, #0]
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d008      	beq.n	8003e6a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d005      	beq.n	8003e6a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	2b05      	cmp	r3, #5
 8003e62:	d002      	beq.n	8003e6a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	2b09      	cmp	r3, #9
 8003e68:	d104      	bne.n	8003e74 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	623b      	str	r3, [r7, #32]
 8003e72:	e00c      	b.n	8003e8e <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a4f      	ldr	r2, [pc, #316]	@ (8003fb8 <HAL_ADC_IRQHandler+0x244>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d002      	beq.n	8003e84 <HAL_ADC_IRQHandler+0x110>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	e000      	b.n	8003e86 <HAL_ADC_IRQHandler+0x112>
 8003e84:	4b4b      	ldr	r3, [pc, #300]	@ (8003fb4 <HAL_ADC_IRQHandler+0x240>)
 8003e86:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003e8e:	6a3b      	ldr	r3, [r7, #32]
 8003e90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d135      	bne.n	8003f04 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0308 	and.w	r3, r3, #8
 8003ea2:	2b08      	cmp	r3, #8
 8003ea4:	d12e      	bne.n	8003f04 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f7ff fcd6 	bl	800385c <LL_ADC_REG_IsConversionOngoing>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d11a      	bne.n	8003eec <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	685a      	ldr	r2, [r3, #4]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f022 020c 	bic.w	r2, r2, #12
 8003ec4:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eca:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ed6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d112      	bne.n	8003f04 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ee2:	f043 0201 	orr.w	r2, r3, #1
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	655a      	str	r2, [r3, #84]	@ 0x54
 8003eea:	e00b      	b.n	8003f04 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ef0:	f043 0210 	orr.w	r2, r3, #16
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003efc:	f043 0201 	orr.w	r2, r3, #1
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 f96f 	bl	80041e8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	220c      	movs	r2, #12
 8003f10:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	f003 0320 	and.w	r3, r3, #32
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d004      	beq.n	8003f26 <HAL_ADC_IRQHandler+0x1b2>
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	f003 0320 	and.w	r3, r3, #32
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d10b      	bne.n	8003f3e <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f000 80a0 	beq.w	8004072 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	f000 809a 	beq.w	8004072 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f42:	f003 0310 	and.w	r3, r3, #16
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d105      	bne.n	8003f56 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f4e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7ff fb75 	bl	800364a <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003f60:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7ff fb1d 	bl	80035a6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003f6c:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a11      	ldr	r2, [pc, #68]	@ (8003fb8 <HAL_ADC_IRQHandler+0x244>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d002      	beq.n	8003f7e <HAL_ADC_IRQHandler+0x20a>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	e000      	b.n	8003f80 <HAL_ADC_IRQHandler+0x20c>
 8003f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8003fb4 <HAL_ADC_IRQHandler+0x240>)
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	6812      	ldr	r2, [r2, #0]
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d008      	beq.n	8003f9a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d005      	beq.n	8003f9a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	2b06      	cmp	r3, #6
 8003f92:	d002      	beq.n	8003f9a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	2b07      	cmp	r3, #7
 8003f98:	d104      	bne.n	8003fa4 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	623b      	str	r3, [r7, #32]
 8003fa2:	e014      	b.n	8003fce <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a03      	ldr	r2, [pc, #12]	@ (8003fb8 <HAL_ADC_IRQHandler+0x244>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d00a      	beq.n	8003fc4 <HAL_ADC_IRQHandler+0x250>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	e008      	b.n	8003fc6 <HAL_ADC_IRQHandler+0x252>
 8003fb4:	40022000 	.word	0x40022000
 8003fb8:	40022100 	.word	0x40022100
 8003fbc:	40022300 	.word	0x40022300
 8003fc0:	58026300 	.word	0x58026300
 8003fc4:	4b84      	ldr	r3, [pc, #528]	@ (80041d8 <HAL_ADC_IRQHandler+0x464>)
 8003fc6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d047      	beq.n	8004064 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003fd4:	6a3b      	ldr	r3, [r7, #32]
 8003fd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d007      	beq.n	8003fee <HAL_ADC_IRQHandler+0x27a>
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d03f      	beq.n	8004064 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003fe4:	6a3b      	ldr	r3, [r7, #32]
 8003fe6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d13a      	bne.n	8004064 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ff8:	2b40      	cmp	r3, #64	@ 0x40
 8003ffa:	d133      	bne.n	8004064 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003ffc:	6a3b      	ldr	r3, [r7, #32]
 8003ffe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d12e      	bne.n	8004064 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4618      	mov	r0, r3
 800400c:	f7ff fc39 	bl	8003882 <LL_ADC_INJ_IsConversionOngoing>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d11a      	bne.n	800404c <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	685a      	ldr	r2, [r3, #4]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004024:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800402a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004036:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800403a:	2b00      	cmp	r3, #0
 800403c:	d112      	bne.n	8004064 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004042:	f043 0201 	orr.w	r2, r3, #1
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	655a      	str	r2, [r3, #84]	@ 0x54
 800404a:	e00b      	b.n	8004064 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004050:	f043 0210 	orr.w	r2, r3, #16
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800405c:	f043 0201 	orr.w	r2, r3, #1
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f000 fe27 	bl	8004cb8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2260      	movs	r2, #96	@ 0x60
 8004070:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004078:	2b00      	cmp	r3, #0
 800407a:	d011      	beq.n	80040a0 <HAL_ADC_IRQHandler+0x32c>
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00c      	beq.n	80040a0 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800408a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 f8bc 	bl	8004210 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2280      	movs	r2, #128	@ 0x80
 800409e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d012      	beq.n	80040d0 <HAL_ADC_IRQHandler+0x35c>
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d00d      	beq.n	80040d0 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040b8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 fe0d 	bl	8004ce0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80040ce:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d012      	beq.n	8004100 <HAL_ADC_IRQHandler+0x38c>
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d00d      	beq.n	8004100 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040e8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f000 fdff 	bl	8004cf4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040fe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	f003 0310 	and.w	r3, r3, #16
 8004106:	2b00      	cmp	r3, #0
 8004108:	d043      	beq.n	8004192 <HAL_ADC_IRQHandler+0x41e>
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	f003 0310 	and.w	r3, r3, #16
 8004110:	2b00      	cmp	r3, #0
 8004112:	d03e      	beq.n	8004192 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004118:	2b00      	cmp	r3, #0
 800411a:	d102      	bne.n	8004122 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 800411c:	2301      	movs	r3, #1
 800411e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004120:	e021      	b.n	8004166 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d015      	beq.n	8004154 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a2a      	ldr	r2, [pc, #168]	@ (80041d8 <HAL_ADC_IRQHandler+0x464>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d004      	beq.n	800413c <HAL_ADC_IRQHandler+0x3c8>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a29      	ldr	r2, [pc, #164]	@ (80041dc <HAL_ADC_IRQHandler+0x468>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d101      	bne.n	8004140 <HAL_ADC_IRQHandler+0x3cc>
 800413c:	4b28      	ldr	r3, [pc, #160]	@ (80041e0 <HAL_ADC_IRQHandler+0x46c>)
 800413e:	e000      	b.n	8004142 <HAL_ADC_IRQHandler+0x3ce>
 8004140:	4b28      	ldr	r3, [pc, #160]	@ (80041e4 <HAL_ADC_IRQHandler+0x470>)
 8004142:	4618      	mov	r0, r3
 8004144:	f7ff faf2 	bl	800372c <LL_ADC_GetMultiDMATransfer>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00b      	beq.n	8004166 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800414e:	2301      	movs	r3, #1
 8004150:	627b      	str	r3, [r7, #36]	@ 0x24
 8004152:	e008      	b.n	8004166 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	f003 0303 	and.w	r3, r3, #3
 800415e:	2b00      	cmp	r3, #0
 8004160:	d001      	beq.n	8004166 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8004162:	2301      	movs	r3, #1
 8004164:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8004166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004168:	2b01      	cmp	r3, #1
 800416a:	d10e      	bne.n	800418a <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004170:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800417c:	f043 0202 	orr.w	r2, r3, #2
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f000 f84d 	bl	8004224 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2210      	movs	r2, #16
 8004190:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004198:	2b00      	cmp	r3, #0
 800419a:	d018      	beq.n	80041ce <HAL_ADC_IRQHandler+0x45a>
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d013      	beq.n	80041ce <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041aa:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041b6:	f043 0208 	orr.w	r2, r3, #8
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80041c6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 fd7f 	bl	8004ccc <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80041ce:	bf00      	nop
 80041d0:	3728      	adds	r7, #40	@ 0x28
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	40022000 	.word	0x40022000
 80041dc:	40022100 	.word	0x40022100
 80041e0:	40022300 	.word	0x40022300
 80041e4:	58026300 	.word	0x58026300

080041e8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80041f0:	bf00      	nop
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004204:	bf00      	nop
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004218:	bf00      	nop
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800422c:	bf00      	nop
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004238:	b590      	push	{r4, r7, lr}
 800423a:	b08d      	sub	sp, #52	@ 0x34
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004242:	2300      	movs	r3, #0
 8004244:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004248:	2300      	movs	r3, #0
 800424a:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	4a65      	ldr	r2, [pc, #404]	@ (80043e8 <HAL_ADC_ConfigChannel+0x1b0>)
 8004252:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800425a:	2b01      	cmp	r3, #1
 800425c:	d101      	bne.n	8004262 <HAL_ADC_ConfigChannel+0x2a>
 800425e:	2302      	movs	r3, #2
 8004260:	e2c7      	b.n	80047f2 <HAL_ADC_ConfigChannel+0x5ba>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2201      	movs	r2, #1
 8004266:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4618      	mov	r0, r3
 8004270:	f7ff faf4 	bl	800385c <LL_ADC_REG_IsConversionOngoing>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	f040 82ac 	bne.w	80047d4 <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	db2c      	blt.n	80042de <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800428c:	2b00      	cmp	r3, #0
 800428e:	d108      	bne.n	80042a2 <HAL_ADC_ConfigChannel+0x6a>
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	0e9b      	lsrs	r3, r3, #26
 8004296:	f003 031f 	and.w	r3, r3, #31
 800429a:	2201      	movs	r2, #1
 800429c:	fa02 f303 	lsl.w	r3, r2, r3
 80042a0:	e016      	b.n	80042d0 <HAL_ADC_ConfigChannel+0x98>
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	fa93 f3a3 	rbit	r3, r3
 80042ae:	613b      	str	r3, [r7, #16]
  return result;
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d101      	bne.n	80042be <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 80042ba:	2320      	movs	r3, #32
 80042bc:	e003      	b.n	80042c6 <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	fab3 f383 	clz	r3, r3
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	f003 031f 	and.w	r3, r3, #31
 80042ca:	2201      	movs	r2, #1
 80042cc:	fa02 f303 	lsl.w	r3, r2, r3
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	6812      	ldr	r2, [r2, #0]
 80042d4:	69d1      	ldr	r1, [r2, #28]
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	6812      	ldr	r2, [r2, #0]
 80042da:	430b      	orrs	r3, r1
 80042dc:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6818      	ldr	r0, [r3, #0]
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	6859      	ldr	r1, [r3, #4]
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	461a      	mov	r2, r3
 80042ec:	f7ff f96e 	bl	80035cc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7ff fab1 	bl	800385c <LL_ADC_REG_IsConversionOngoing>
 80042fa:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4618      	mov	r0, r3
 8004302:	f7ff fabe 	bl	8003882 <LL_ADC_INJ_IsConversionOngoing>
 8004306:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800430a:	2b00      	cmp	r3, #0
 800430c:	f040 80b8 	bne.w	8004480 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004312:	2b00      	cmp	r3, #0
 8004314:	f040 80b4 	bne.w	8004480 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6818      	ldr	r0, [r3, #0]
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	6819      	ldr	r1, [r3, #0]
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	461a      	mov	r2, r3
 8004326:	f7ff f9a3 	bl	8003670 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800432a:	4b30      	ldr	r3, [pc, #192]	@ (80043ec <HAL_ADC_ConfigChannel+0x1b4>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004332:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004336:	d10b      	bne.n	8004350 <HAL_ADC_ConfigChannel+0x118>
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	695a      	ldr	r2, [r3, #20]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	089b      	lsrs	r3, r3, #2
 8004344:	f003 0307 	and.w	r3, r3, #7
 8004348:	005b      	lsls	r3, r3, #1
 800434a:	fa02 f303 	lsl.w	r3, r2, r3
 800434e:	e01d      	b.n	800438c <HAL_ADC_ConfigChannel+0x154>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	f003 0310 	and.w	r3, r3, #16
 800435a:	2b00      	cmp	r3, #0
 800435c:	d10b      	bne.n	8004376 <HAL_ADC_ConfigChannel+0x13e>
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	695a      	ldr	r2, [r3, #20]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	089b      	lsrs	r3, r3, #2
 800436a:	f003 0307 	and.w	r3, r3, #7
 800436e:	005b      	lsls	r3, r3, #1
 8004370:	fa02 f303 	lsl.w	r3, r2, r3
 8004374:	e00a      	b.n	800438c <HAL_ADC_ConfigChannel+0x154>
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	695a      	ldr	r2, [r3, #20]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	089b      	lsrs	r3, r3, #2
 8004382:	f003 0304 	and.w	r3, r3, #4
 8004386:	005b      	lsls	r3, r3, #1
 8004388:	fa02 f303 	lsl.w	r3, r2, r3
 800438c:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	2b04      	cmp	r3, #4
 8004394:	d02c      	beq.n	80043f0 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6818      	ldr	r0, [r3, #0]
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	6919      	ldr	r1, [r3, #16]
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	6a3b      	ldr	r3, [r7, #32]
 80043a4:	f7ff f8ab 	bl	80034fe <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6818      	ldr	r0, [r3, #0]
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	6919      	ldr	r1, [r3, #16]
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	7e5b      	ldrb	r3, [r3, #25]
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d102      	bne.n	80043be <HAL_ADC_ConfigChannel+0x186>
 80043b8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80043bc:	e000      	b.n	80043c0 <HAL_ADC_ConfigChannel+0x188>
 80043be:	2300      	movs	r3, #0
 80043c0:	461a      	mov	r2, r3
 80043c2:	f7ff f8d5 	bl	8003570 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6818      	ldr	r0, [r3, #0]
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	6919      	ldr	r1, [r3, #16]
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	7e1b      	ldrb	r3, [r3, #24]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d102      	bne.n	80043dc <HAL_ADC_ConfigChannel+0x1a4>
 80043d6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80043da:	e000      	b.n	80043de <HAL_ADC_ConfigChannel+0x1a6>
 80043dc:	2300      	movs	r3, #0
 80043de:	461a      	mov	r2, r3
 80043e0:	f7ff f8ad 	bl	800353e <LL_ADC_SetDataRightShift>
 80043e4:	e04c      	b.n	8004480 <HAL_ADC_ConfigChannel+0x248>
 80043e6:	bf00      	nop
 80043e8:	47ff0000 	.word	0x47ff0000
 80043ec:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043f6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	069b      	lsls	r3, r3, #26
 8004400:	429a      	cmp	r2, r3
 8004402:	d107      	bne.n	8004414 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004412:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800441a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	069b      	lsls	r3, r3, #26
 8004424:	429a      	cmp	r2, r3
 8004426:	d107      	bne.n	8004438 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004436:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800443e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	069b      	lsls	r3, r3, #26
 8004448:	429a      	cmp	r2, r3
 800444a:	d107      	bne.n	800445c <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800445a:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004462:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	069b      	lsls	r3, r3, #26
 800446c:	429a      	cmp	r2, r3
 800446e:	d107      	bne.n	8004480 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800447e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4618      	mov	r0, r3
 8004486:	f7ff f9c1 	bl	800380c <LL_ADC_IsEnabled>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	f040 81aa 	bne.w	80047e6 <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6818      	ldr	r0, [r3, #0]
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	6819      	ldr	r1, [r3, #0]
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	461a      	mov	r2, r3
 80044a0:	f7ff f912 	bl	80036c8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	4a87      	ldr	r2, [pc, #540]	@ (80046c8 <HAL_ADC_ConfigChannel+0x490>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	f040 809a 	bne.w	80045e4 <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4984      	ldr	r1, [pc, #528]	@ (80046cc <HAL_ADC_ConfigChannel+0x494>)
 80044ba:	428b      	cmp	r3, r1
 80044bc:	d147      	bne.n	800454e <HAL_ADC_ConfigChannel+0x316>
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4983      	ldr	r1, [pc, #524]	@ (80046d0 <HAL_ADC_ConfigChannel+0x498>)
 80044c4:	428b      	cmp	r3, r1
 80044c6:	d040      	beq.n	800454a <HAL_ADC_ConfigChannel+0x312>
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4981      	ldr	r1, [pc, #516]	@ (80046d4 <HAL_ADC_ConfigChannel+0x49c>)
 80044ce:	428b      	cmp	r3, r1
 80044d0:	d039      	beq.n	8004546 <HAL_ADC_ConfigChannel+0x30e>
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4980      	ldr	r1, [pc, #512]	@ (80046d8 <HAL_ADC_ConfigChannel+0x4a0>)
 80044d8:	428b      	cmp	r3, r1
 80044da:	d032      	beq.n	8004542 <HAL_ADC_ConfigChannel+0x30a>
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	497e      	ldr	r1, [pc, #504]	@ (80046dc <HAL_ADC_ConfigChannel+0x4a4>)
 80044e2:	428b      	cmp	r3, r1
 80044e4:	d02b      	beq.n	800453e <HAL_ADC_ConfigChannel+0x306>
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	497d      	ldr	r1, [pc, #500]	@ (80046e0 <HAL_ADC_ConfigChannel+0x4a8>)
 80044ec:	428b      	cmp	r3, r1
 80044ee:	d024      	beq.n	800453a <HAL_ADC_ConfigChannel+0x302>
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	497b      	ldr	r1, [pc, #492]	@ (80046e4 <HAL_ADC_ConfigChannel+0x4ac>)
 80044f6:	428b      	cmp	r3, r1
 80044f8:	d01d      	beq.n	8004536 <HAL_ADC_ConfigChannel+0x2fe>
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	497a      	ldr	r1, [pc, #488]	@ (80046e8 <HAL_ADC_ConfigChannel+0x4b0>)
 8004500:	428b      	cmp	r3, r1
 8004502:	d016      	beq.n	8004532 <HAL_ADC_ConfigChannel+0x2fa>
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4978      	ldr	r1, [pc, #480]	@ (80046ec <HAL_ADC_ConfigChannel+0x4b4>)
 800450a:	428b      	cmp	r3, r1
 800450c:	d00f      	beq.n	800452e <HAL_ADC_ConfigChannel+0x2f6>
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4977      	ldr	r1, [pc, #476]	@ (80046f0 <HAL_ADC_ConfigChannel+0x4b8>)
 8004514:	428b      	cmp	r3, r1
 8004516:	d008      	beq.n	800452a <HAL_ADC_ConfigChannel+0x2f2>
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4975      	ldr	r1, [pc, #468]	@ (80046f4 <HAL_ADC_ConfigChannel+0x4bc>)
 800451e:	428b      	cmp	r3, r1
 8004520:	d101      	bne.n	8004526 <HAL_ADC_ConfigChannel+0x2ee>
 8004522:	4b75      	ldr	r3, [pc, #468]	@ (80046f8 <HAL_ADC_ConfigChannel+0x4c0>)
 8004524:	e05a      	b.n	80045dc <HAL_ADC_ConfigChannel+0x3a4>
 8004526:	2300      	movs	r3, #0
 8004528:	e058      	b.n	80045dc <HAL_ADC_ConfigChannel+0x3a4>
 800452a:	4b74      	ldr	r3, [pc, #464]	@ (80046fc <HAL_ADC_ConfigChannel+0x4c4>)
 800452c:	e056      	b.n	80045dc <HAL_ADC_ConfigChannel+0x3a4>
 800452e:	4b74      	ldr	r3, [pc, #464]	@ (8004700 <HAL_ADC_ConfigChannel+0x4c8>)
 8004530:	e054      	b.n	80045dc <HAL_ADC_ConfigChannel+0x3a4>
 8004532:	4b6e      	ldr	r3, [pc, #440]	@ (80046ec <HAL_ADC_ConfigChannel+0x4b4>)
 8004534:	e052      	b.n	80045dc <HAL_ADC_ConfigChannel+0x3a4>
 8004536:	4b6c      	ldr	r3, [pc, #432]	@ (80046e8 <HAL_ADC_ConfigChannel+0x4b0>)
 8004538:	e050      	b.n	80045dc <HAL_ADC_ConfigChannel+0x3a4>
 800453a:	4b72      	ldr	r3, [pc, #456]	@ (8004704 <HAL_ADC_ConfigChannel+0x4cc>)
 800453c:	e04e      	b.n	80045dc <HAL_ADC_ConfigChannel+0x3a4>
 800453e:	4b72      	ldr	r3, [pc, #456]	@ (8004708 <HAL_ADC_ConfigChannel+0x4d0>)
 8004540:	e04c      	b.n	80045dc <HAL_ADC_ConfigChannel+0x3a4>
 8004542:	4b72      	ldr	r3, [pc, #456]	@ (800470c <HAL_ADC_ConfigChannel+0x4d4>)
 8004544:	e04a      	b.n	80045dc <HAL_ADC_ConfigChannel+0x3a4>
 8004546:	4b72      	ldr	r3, [pc, #456]	@ (8004710 <HAL_ADC_ConfigChannel+0x4d8>)
 8004548:	e048      	b.n	80045dc <HAL_ADC_ConfigChannel+0x3a4>
 800454a:	2301      	movs	r3, #1
 800454c:	e046      	b.n	80045dc <HAL_ADC_ConfigChannel+0x3a4>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4970      	ldr	r1, [pc, #448]	@ (8004714 <HAL_ADC_ConfigChannel+0x4dc>)
 8004554:	428b      	cmp	r3, r1
 8004556:	d140      	bne.n	80045da <HAL_ADC_ConfigChannel+0x3a2>
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	495c      	ldr	r1, [pc, #368]	@ (80046d0 <HAL_ADC_ConfigChannel+0x498>)
 800455e:	428b      	cmp	r3, r1
 8004560:	d039      	beq.n	80045d6 <HAL_ADC_ConfigChannel+0x39e>
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	495b      	ldr	r1, [pc, #364]	@ (80046d4 <HAL_ADC_ConfigChannel+0x49c>)
 8004568:	428b      	cmp	r3, r1
 800456a:	d032      	beq.n	80045d2 <HAL_ADC_ConfigChannel+0x39a>
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4959      	ldr	r1, [pc, #356]	@ (80046d8 <HAL_ADC_ConfigChannel+0x4a0>)
 8004572:	428b      	cmp	r3, r1
 8004574:	d02b      	beq.n	80045ce <HAL_ADC_ConfigChannel+0x396>
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4958      	ldr	r1, [pc, #352]	@ (80046dc <HAL_ADC_ConfigChannel+0x4a4>)
 800457c:	428b      	cmp	r3, r1
 800457e:	d024      	beq.n	80045ca <HAL_ADC_ConfigChannel+0x392>
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4956      	ldr	r1, [pc, #344]	@ (80046e0 <HAL_ADC_ConfigChannel+0x4a8>)
 8004586:	428b      	cmp	r3, r1
 8004588:	d01d      	beq.n	80045c6 <HAL_ADC_ConfigChannel+0x38e>
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4955      	ldr	r1, [pc, #340]	@ (80046e4 <HAL_ADC_ConfigChannel+0x4ac>)
 8004590:	428b      	cmp	r3, r1
 8004592:	d016      	beq.n	80045c2 <HAL_ADC_ConfigChannel+0x38a>
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4953      	ldr	r1, [pc, #332]	@ (80046e8 <HAL_ADC_ConfigChannel+0x4b0>)
 800459a:	428b      	cmp	r3, r1
 800459c:	d00f      	beq.n	80045be <HAL_ADC_ConfigChannel+0x386>
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4952      	ldr	r1, [pc, #328]	@ (80046ec <HAL_ADC_ConfigChannel+0x4b4>)
 80045a4:	428b      	cmp	r3, r1
 80045a6:	d008      	beq.n	80045ba <HAL_ADC_ConfigChannel+0x382>
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4951      	ldr	r1, [pc, #324]	@ (80046f4 <HAL_ADC_ConfigChannel+0x4bc>)
 80045ae:	428b      	cmp	r3, r1
 80045b0:	d101      	bne.n	80045b6 <HAL_ADC_ConfigChannel+0x37e>
 80045b2:	4b51      	ldr	r3, [pc, #324]	@ (80046f8 <HAL_ADC_ConfigChannel+0x4c0>)
 80045b4:	e012      	b.n	80045dc <HAL_ADC_ConfigChannel+0x3a4>
 80045b6:	2300      	movs	r3, #0
 80045b8:	e010      	b.n	80045dc <HAL_ADC_ConfigChannel+0x3a4>
 80045ba:	4b51      	ldr	r3, [pc, #324]	@ (8004700 <HAL_ADC_ConfigChannel+0x4c8>)
 80045bc:	e00e      	b.n	80045dc <HAL_ADC_ConfigChannel+0x3a4>
 80045be:	4b4b      	ldr	r3, [pc, #300]	@ (80046ec <HAL_ADC_ConfigChannel+0x4b4>)
 80045c0:	e00c      	b.n	80045dc <HAL_ADC_ConfigChannel+0x3a4>
 80045c2:	4b49      	ldr	r3, [pc, #292]	@ (80046e8 <HAL_ADC_ConfigChannel+0x4b0>)
 80045c4:	e00a      	b.n	80045dc <HAL_ADC_ConfigChannel+0x3a4>
 80045c6:	4b4f      	ldr	r3, [pc, #316]	@ (8004704 <HAL_ADC_ConfigChannel+0x4cc>)
 80045c8:	e008      	b.n	80045dc <HAL_ADC_ConfigChannel+0x3a4>
 80045ca:	4b4f      	ldr	r3, [pc, #316]	@ (8004708 <HAL_ADC_ConfigChannel+0x4d0>)
 80045cc:	e006      	b.n	80045dc <HAL_ADC_ConfigChannel+0x3a4>
 80045ce:	4b4f      	ldr	r3, [pc, #316]	@ (800470c <HAL_ADC_ConfigChannel+0x4d4>)
 80045d0:	e004      	b.n	80045dc <HAL_ADC_ConfigChannel+0x3a4>
 80045d2:	4b4f      	ldr	r3, [pc, #316]	@ (8004710 <HAL_ADC_ConfigChannel+0x4d8>)
 80045d4:	e002      	b.n	80045dc <HAL_ADC_ConfigChannel+0x3a4>
 80045d6:	2301      	movs	r3, #1
 80045d8:	e000      	b.n	80045dc <HAL_ADC_ConfigChannel+0x3a4>
 80045da:	2300      	movs	r3, #0
 80045dc:	4619      	mov	r1, r3
 80045de:	4610      	mov	r0, r2
 80045e0:	f7fe ff5a 	bl	8003498 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f280 80fc 	bge.w	80047e6 <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a36      	ldr	r2, [pc, #216]	@ (80046cc <HAL_ADC_ConfigChannel+0x494>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d004      	beq.n	8004602 <HAL_ADC_ConfigChannel+0x3ca>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a45      	ldr	r2, [pc, #276]	@ (8004714 <HAL_ADC_ConfigChannel+0x4dc>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d101      	bne.n	8004606 <HAL_ADC_ConfigChannel+0x3ce>
 8004602:	4b45      	ldr	r3, [pc, #276]	@ (8004718 <HAL_ADC_ConfigChannel+0x4e0>)
 8004604:	e000      	b.n	8004608 <HAL_ADC_ConfigChannel+0x3d0>
 8004606:	4b45      	ldr	r3, [pc, #276]	@ (800471c <HAL_ADC_ConfigChannel+0x4e4>)
 8004608:	4618      	mov	r0, r3
 800460a:	f7fe ff37 	bl	800347c <LL_ADC_GetCommonPathInternalCh>
 800460e:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a2d      	ldr	r2, [pc, #180]	@ (80046cc <HAL_ADC_ConfigChannel+0x494>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d004      	beq.n	8004624 <HAL_ADC_ConfigChannel+0x3ec>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a3d      	ldr	r2, [pc, #244]	@ (8004714 <HAL_ADC_ConfigChannel+0x4dc>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d10e      	bne.n	8004642 <HAL_ADC_ConfigChannel+0x40a>
 8004624:	4829      	ldr	r0, [pc, #164]	@ (80046cc <HAL_ADC_ConfigChannel+0x494>)
 8004626:	f7ff f8f1 	bl	800380c <LL_ADC_IsEnabled>
 800462a:	4604      	mov	r4, r0
 800462c:	4839      	ldr	r0, [pc, #228]	@ (8004714 <HAL_ADC_ConfigChannel+0x4dc>)
 800462e:	f7ff f8ed 	bl	800380c <LL_ADC_IsEnabled>
 8004632:	4603      	mov	r3, r0
 8004634:	4323      	orrs	r3, r4
 8004636:	2b00      	cmp	r3, #0
 8004638:	bf0c      	ite	eq
 800463a:	2301      	moveq	r3, #1
 800463c:	2300      	movne	r3, #0
 800463e:	b2db      	uxtb	r3, r3
 8004640:	e008      	b.n	8004654 <HAL_ADC_ConfigChannel+0x41c>
 8004642:	4837      	ldr	r0, [pc, #220]	@ (8004720 <HAL_ADC_ConfigChannel+0x4e8>)
 8004644:	f7ff f8e2 	bl	800380c <LL_ADC_IsEnabled>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	bf0c      	ite	eq
 800464e:	2301      	moveq	r3, #1
 8004650:	2300      	movne	r3, #0
 8004652:	b2db      	uxtb	r3, r3
 8004654:	2b00      	cmp	r3, #0
 8004656:	f000 80b3 	beq.w	80047c0 <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a31      	ldr	r2, [pc, #196]	@ (8004724 <HAL_ADC_ConfigChannel+0x4ec>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d165      	bne.n	8004730 <HAL_ADC_ConfigChannel+0x4f8>
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d160      	bne.n	8004730 <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a2b      	ldr	r2, [pc, #172]	@ (8004720 <HAL_ADC_ConfigChannel+0x4e8>)
 8004674:	4293      	cmp	r3, r2
 8004676:	f040 80b6 	bne.w	80047e6 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a13      	ldr	r2, [pc, #76]	@ (80046cc <HAL_ADC_ConfigChannel+0x494>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d004      	beq.n	800468e <HAL_ADC_ConfigChannel+0x456>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a22      	ldr	r2, [pc, #136]	@ (8004714 <HAL_ADC_ConfigChannel+0x4dc>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d101      	bne.n	8004692 <HAL_ADC_ConfigChannel+0x45a>
 800468e:	4a22      	ldr	r2, [pc, #136]	@ (8004718 <HAL_ADC_ConfigChannel+0x4e0>)
 8004690:	e000      	b.n	8004694 <HAL_ADC_ConfigChannel+0x45c>
 8004692:	4a22      	ldr	r2, [pc, #136]	@ (800471c <HAL_ADC_ConfigChannel+0x4e4>)
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800469a:	4619      	mov	r1, r3
 800469c:	4610      	mov	r0, r2
 800469e:	f7fe feda 	bl	8003456 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80046a2:	4b21      	ldr	r3, [pc, #132]	@ (8004728 <HAL_ADC_ConfigChannel+0x4f0>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	099b      	lsrs	r3, r3, #6
 80046a8:	4a20      	ldr	r2, [pc, #128]	@ (800472c <HAL_ADC_ConfigChannel+0x4f4>)
 80046aa:	fba2 2303 	umull	r2, r3, r2, r3
 80046ae:	099b      	lsrs	r3, r3, #6
 80046b0:	3301      	adds	r3, #1
 80046b2:	005b      	lsls	r3, r3, #1
 80046b4:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 80046b6:	e002      	b.n	80046be <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	3b01      	subs	r3, #1
 80046bc:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d1f9      	bne.n	80046b8 <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80046c4:	e08f      	b.n	80047e6 <HAL_ADC_ConfigChannel+0x5ae>
 80046c6:	bf00      	nop
 80046c8:	47ff0000 	.word	0x47ff0000
 80046cc:	40022000 	.word	0x40022000
 80046d0:	04300002 	.word	0x04300002
 80046d4:	08600004 	.word	0x08600004
 80046d8:	0c900008 	.word	0x0c900008
 80046dc:	10c00010 	.word	0x10c00010
 80046e0:	14f00020 	.word	0x14f00020
 80046e4:	2a000400 	.word	0x2a000400
 80046e8:	2e300800 	.word	0x2e300800
 80046ec:	32601000 	.word	0x32601000
 80046f0:	43210000 	.word	0x43210000
 80046f4:	4b840000 	.word	0x4b840000
 80046f8:	4fb80000 	.word	0x4fb80000
 80046fc:	47520000 	.word	0x47520000
 8004700:	36902000 	.word	0x36902000
 8004704:	25b00200 	.word	0x25b00200
 8004708:	21800100 	.word	0x21800100
 800470c:	1d500080 	.word	0x1d500080
 8004710:	19200040 	.word	0x19200040
 8004714:	40022100 	.word	0x40022100
 8004718:	40022300 	.word	0x40022300
 800471c:	58026300 	.word	0x58026300
 8004720:	58026000 	.word	0x58026000
 8004724:	cb840000 	.word	0xcb840000
 8004728:	24000000 	.word	0x24000000
 800472c:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a31      	ldr	r2, [pc, #196]	@ (80047fc <HAL_ADC_ConfigChannel+0x5c4>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d11e      	bne.n	8004778 <HAL_ADC_ConfigChannel+0x540>
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d119      	bne.n	8004778 <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a2d      	ldr	r2, [pc, #180]	@ (8004800 <HAL_ADC_ConfigChannel+0x5c8>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d14b      	bne.n	80047e6 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a2c      	ldr	r2, [pc, #176]	@ (8004804 <HAL_ADC_ConfigChannel+0x5cc>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d004      	beq.n	8004762 <HAL_ADC_ConfigChannel+0x52a>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a2a      	ldr	r2, [pc, #168]	@ (8004808 <HAL_ADC_ConfigChannel+0x5d0>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d101      	bne.n	8004766 <HAL_ADC_ConfigChannel+0x52e>
 8004762:	4a2a      	ldr	r2, [pc, #168]	@ (800480c <HAL_ADC_ConfigChannel+0x5d4>)
 8004764:	e000      	b.n	8004768 <HAL_ADC_ConfigChannel+0x530>
 8004766:	4a2a      	ldr	r2, [pc, #168]	@ (8004810 <HAL_ADC_ConfigChannel+0x5d8>)
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800476e:	4619      	mov	r1, r3
 8004770:	4610      	mov	r0, r2
 8004772:	f7fe fe70 	bl	8003456 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004776:	e036      	b.n	80047e6 <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a25      	ldr	r2, [pc, #148]	@ (8004814 <HAL_ADC_ConfigChannel+0x5dc>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d131      	bne.n	80047e6 <HAL_ADC_ConfigChannel+0x5ae>
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d12c      	bne.n	80047e6 <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a1b      	ldr	r2, [pc, #108]	@ (8004800 <HAL_ADC_ConfigChannel+0x5c8>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d127      	bne.n	80047e6 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a1a      	ldr	r2, [pc, #104]	@ (8004804 <HAL_ADC_ConfigChannel+0x5cc>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d004      	beq.n	80047aa <HAL_ADC_ConfigChannel+0x572>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a18      	ldr	r2, [pc, #96]	@ (8004808 <HAL_ADC_ConfigChannel+0x5d0>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d101      	bne.n	80047ae <HAL_ADC_ConfigChannel+0x576>
 80047aa:	4a18      	ldr	r2, [pc, #96]	@ (800480c <HAL_ADC_ConfigChannel+0x5d4>)
 80047ac:	e000      	b.n	80047b0 <HAL_ADC_ConfigChannel+0x578>
 80047ae:	4a18      	ldr	r2, [pc, #96]	@ (8004810 <HAL_ADC_ConfigChannel+0x5d8>)
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80047b6:	4619      	mov	r1, r3
 80047b8:	4610      	mov	r0, r2
 80047ba:	f7fe fe4c 	bl	8003456 <LL_ADC_SetCommonPathInternalCh>
 80047be:	e012      	b.n	80047e6 <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047c4:	f043 0220 	orr.w	r2, r3, #32
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80047d2:	e008      	b.n	80047e6 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047d8:	f043 0220 	orr.w	r2, r3, #32
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80047ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3734      	adds	r7, #52	@ 0x34
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd90      	pop	{r4, r7, pc}
 80047fa:	bf00      	nop
 80047fc:	c7520000 	.word	0xc7520000
 8004800:	58026000 	.word	0x58026000
 8004804:	40022000 	.word	0x40022000
 8004808:	40022100 	.word	0x40022100
 800480c:	40022300 	.word	0x40022300
 8004810:	58026300 	.word	0x58026300
 8004814:	cfb80000 	.word	0xcfb80000

08004818 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4618      	mov	r0, r3
 8004826:	f7fe fff1 	bl	800380c <LL_ADC_IsEnabled>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d16e      	bne.n	800490e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	689a      	ldr	r2, [r3, #8]
 8004836:	4b38      	ldr	r3, [pc, #224]	@ (8004918 <ADC_Enable+0x100>)
 8004838:	4013      	ands	r3, r2
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00d      	beq.n	800485a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004842:	f043 0210 	orr.w	r2, r3, #16
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800484e:	f043 0201 	orr.w	r2, r3, #1
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e05a      	b.n	8004910 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4618      	mov	r0, r3
 8004860:	f7fe ffc0 	bl	80037e4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004864:	f7fe fd92 	bl	800338c <HAL_GetTick>
 8004868:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a2b      	ldr	r2, [pc, #172]	@ (800491c <ADC_Enable+0x104>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d004      	beq.n	800487e <ADC_Enable+0x66>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a29      	ldr	r2, [pc, #164]	@ (8004920 <ADC_Enable+0x108>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d101      	bne.n	8004882 <ADC_Enable+0x6a>
 800487e:	4b29      	ldr	r3, [pc, #164]	@ (8004924 <ADC_Enable+0x10c>)
 8004880:	e000      	b.n	8004884 <ADC_Enable+0x6c>
 8004882:	4b29      	ldr	r3, [pc, #164]	@ (8004928 <ADC_Enable+0x110>)
 8004884:	4618      	mov	r0, r3
 8004886:	f7fe ff43 	bl	8003710 <LL_ADC_GetMultimode>
 800488a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a23      	ldr	r2, [pc, #140]	@ (8004920 <ADC_Enable+0x108>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d002      	beq.n	800489c <ADC_Enable+0x84>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	e000      	b.n	800489e <ADC_Enable+0x86>
 800489c:	4b1f      	ldr	r3, [pc, #124]	@ (800491c <ADC_Enable+0x104>)
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	6812      	ldr	r2, [r2, #0]
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d02c      	beq.n	8004900 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d130      	bne.n	800490e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80048ac:	e028      	b.n	8004900 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7fe ffaa 	bl	800380c <LL_ADC_IsEnabled>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d104      	bne.n	80048c8 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4618      	mov	r0, r3
 80048c4:	f7fe ff8e 	bl	80037e4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80048c8:	f7fe fd60 	bl	800338c <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d914      	bls.n	8004900 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0301 	and.w	r3, r3, #1
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d00d      	beq.n	8004900 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048e8:	f043 0210 	orr.w	r2, r3, #16
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048f4:	f043 0201 	orr.w	r2, r3, #1
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e007      	b.n	8004910 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0301 	and.w	r3, r3, #1
 800490a:	2b01      	cmp	r3, #1
 800490c:	d1cf      	bne.n	80048ae <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	4618      	mov	r0, r3
 8004912:	3710      	adds	r7, #16
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	8000003f 	.word	0x8000003f
 800491c:	40022000 	.word	0x40022000
 8004920:	40022100 	.word	0x40022100
 8004924:	40022300 	.word	0x40022300
 8004928:	58026300 	.word	0x58026300

0800492c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004938:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800493e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004942:	2b00      	cmp	r3, #0
 8004944:	d14b      	bne.n	80049de <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800494a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0308 	and.w	r3, r3, #8
 800495c:	2b00      	cmp	r3, #0
 800495e:	d021      	beq.n	80049a4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4618      	mov	r0, r3
 8004966:	f7fe fe1e 	bl	80035a6 <LL_ADC_REG_IsTriggerSourceSWStart>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d032      	beq.n	80049d6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d12b      	bne.n	80049d6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004982:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800498e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d11f      	bne.n	80049d6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800499a:	f043 0201 	orr.w	r2, r3, #1
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	655a      	str	r2, [r3, #84]	@ 0x54
 80049a2:	e018      	b.n	80049d6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	f003 0303 	and.w	r3, r3, #3
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d111      	bne.n	80049d6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049b6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d105      	bne.n	80049d6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049ce:	f043 0201 	orr.w	r2, r3, #1
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80049d6:	68f8      	ldr	r0, [r7, #12]
 80049d8:	f7ff fc06 	bl	80041e8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80049dc:	e00e      	b.n	80049fc <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049e2:	f003 0310 	and.w	r3, r3, #16
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d003      	beq.n	80049f2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80049ea:	68f8      	ldr	r0, [r7, #12]
 80049ec:	f7ff fc1a 	bl	8004224 <HAL_ADC_ErrorCallback>
}
 80049f0:	e004      	b.n	80049fc <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	4798      	blx	r3
}
 80049fc:	bf00      	nop
 80049fe:	3710      	adds	r7, #16
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a10:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004a12:	68f8      	ldr	r0, [r7, #12]
 8004a14:	f7ff fbf2 	bl	80041fc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004a18:	bf00      	nop
 8004a1a:	3710      	adds	r7, #16
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a2c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a32:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a3e:	f043 0204 	orr.w	r2, r3, #4
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004a46:	68f8      	ldr	r0, [r7, #12]
 8004a48:	f7ff fbec 	bl	8004224 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004a4c:	bf00      	nop
 8004a4e:	3710      	adds	r7, #16
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a7a      	ldr	r2, [pc, #488]	@ (8004c4c <ADC_ConfigureBoostMode+0x1f8>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d004      	beq.n	8004a70 <ADC_ConfigureBoostMode+0x1c>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a79      	ldr	r2, [pc, #484]	@ (8004c50 <ADC_ConfigureBoostMode+0x1fc>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d109      	bne.n	8004a84 <ADC_ConfigureBoostMode+0x30>
 8004a70:	4b78      	ldr	r3, [pc, #480]	@ (8004c54 <ADC_ConfigureBoostMode+0x200>)
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	bf14      	ite	ne
 8004a7c:	2301      	movne	r3, #1
 8004a7e:	2300      	moveq	r3, #0
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	e008      	b.n	8004a96 <ADC_ConfigureBoostMode+0x42>
 8004a84:	4b74      	ldr	r3, [pc, #464]	@ (8004c58 <ADC_ConfigureBoostMode+0x204>)
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	bf14      	ite	ne
 8004a90:	2301      	movne	r3, #1
 8004a92:	2300      	moveq	r3, #0
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d01c      	beq.n	8004ad4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004a9a:	f004 fbe1 	bl	8009260 <HAL_RCC_GetHCLKFreq>
 8004a9e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004aa8:	d010      	beq.n	8004acc <ADC_ConfigureBoostMode+0x78>
 8004aaa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004aae:	d873      	bhi.n	8004b98 <ADC_ConfigureBoostMode+0x144>
 8004ab0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ab4:	d002      	beq.n	8004abc <ADC_ConfigureBoostMode+0x68>
 8004ab6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004aba:	d16d      	bne.n	8004b98 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	0c1b      	lsrs	r3, r3, #16
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac8:	60fb      	str	r3, [r7, #12]
        break;
 8004aca:	e068      	b.n	8004b9e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	089b      	lsrs	r3, r3, #2
 8004ad0:	60fb      	str	r3, [r7, #12]
        break;
 8004ad2:	e064      	b.n	8004b9e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004ad4:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004ad8:	f04f 0100 	mov.w	r1, #0
 8004adc:	f005 fe26 	bl	800a72c <HAL_RCCEx_GetPeriphCLKFreq>
 8004ae0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004aea:	d051      	beq.n	8004b90 <ADC_ConfigureBoostMode+0x13c>
 8004aec:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004af0:	d854      	bhi.n	8004b9c <ADC_ConfigureBoostMode+0x148>
 8004af2:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004af6:	d047      	beq.n	8004b88 <ADC_ConfigureBoostMode+0x134>
 8004af8:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004afc:	d84e      	bhi.n	8004b9c <ADC_ConfigureBoostMode+0x148>
 8004afe:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004b02:	d03d      	beq.n	8004b80 <ADC_ConfigureBoostMode+0x12c>
 8004b04:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004b08:	d848      	bhi.n	8004b9c <ADC_ConfigureBoostMode+0x148>
 8004b0a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004b0e:	d033      	beq.n	8004b78 <ADC_ConfigureBoostMode+0x124>
 8004b10:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004b14:	d842      	bhi.n	8004b9c <ADC_ConfigureBoostMode+0x148>
 8004b16:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004b1a:	d029      	beq.n	8004b70 <ADC_ConfigureBoostMode+0x11c>
 8004b1c:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004b20:	d83c      	bhi.n	8004b9c <ADC_ConfigureBoostMode+0x148>
 8004b22:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004b26:	d01a      	beq.n	8004b5e <ADC_ConfigureBoostMode+0x10a>
 8004b28:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004b2c:	d836      	bhi.n	8004b9c <ADC_ConfigureBoostMode+0x148>
 8004b2e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004b32:	d014      	beq.n	8004b5e <ADC_ConfigureBoostMode+0x10a>
 8004b34:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004b38:	d830      	bhi.n	8004b9c <ADC_ConfigureBoostMode+0x148>
 8004b3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b3e:	d00e      	beq.n	8004b5e <ADC_ConfigureBoostMode+0x10a>
 8004b40:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b44:	d82a      	bhi.n	8004b9c <ADC_ConfigureBoostMode+0x148>
 8004b46:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004b4a:	d008      	beq.n	8004b5e <ADC_ConfigureBoostMode+0x10a>
 8004b4c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004b50:	d824      	bhi.n	8004b9c <ADC_ConfigureBoostMode+0x148>
 8004b52:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004b56:	d002      	beq.n	8004b5e <ADC_ConfigureBoostMode+0x10a>
 8004b58:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004b5c:	d11e      	bne.n	8004b9c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	0c9b      	lsrs	r3, r3, #18
 8004b64:	005b      	lsls	r3, r3, #1
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b6c:	60fb      	str	r3, [r7, #12]
        break;
 8004b6e:	e016      	b.n	8004b9e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	091b      	lsrs	r3, r3, #4
 8004b74:	60fb      	str	r3, [r7, #12]
        break;
 8004b76:	e012      	b.n	8004b9e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	095b      	lsrs	r3, r3, #5
 8004b7c:	60fb      	str	r3, [r7, #12]
        break;
 8004b7e:	e00e      	b.n	8004b9e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	099b      	lsrs	r3, r3, #6
 8004b84:	60fb      	str	r3, [r7, #12]
        break;
 8004b86:	e00a      	b.n	8004b9e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	09db      	lsrs	r3, r3, #7
 8004b8c:	60fb      	str	r3, [r7, #12]
        break;
 8004b8e:	e006      	b.n	8004b9e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	0a1b      	lsrs	r3, r3, #8
 8004b94:	60fb      	str	r3, [r7, #12]
        break;
 8004b96:	e002      	b.n	8004b9e <ADC_ConfigureBoostMode+0x14a>
        break;
 8004b98:	bf00      	nop
 8004b9a:	e000      	b.n	8004b9e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004b9c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004b9e:	f7fe fc01 	bl	80033a4 <HAL_GetREVID>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d815      	bhi.n	8004bd8 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	4a2b      	ldr	r2, [pc, #172]	@ (8004c5c <ADC_ConfigureBoostMode+0x208>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d908      	bls.n	8004bc6 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	689a      	ldr	r2, [r3, #8]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004bc2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004bc4:	e03e      	b.n	8004c44 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	689a      	ldr	r2, [r3, #8]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004bd4:	609a      	str	r2, [r3, #8]
}
 8004bd6:	e035      	b.n	8004c44 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	085b      	lsrs	r3, r3, #1
 8004bdc:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	4a1f      	ldr	r2, [pc, #124]	@ (8004c60 <ADC_ConfigureBoostMode+0x20c>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d808      	bhi.n	8004bf8 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	689a      	ldr	r2, [r3, #8]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004bf4:	609a      	str	r2, [r3, #8]
}
 8004bf6:	e025      	b.n	8004c44 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	4a1a      	ldr	r2, [pc, #104]	@ (8004c64 <ADC_ConfigureBoostMode+0x210>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d80a      	bhi.n	8004c16 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c12:	609a      	str	r2, [r3, #8]
}
 8004c14:	e016      	b.n	8004c44 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	4a13      	ldr	r2, [pc, #76]	@ (8004c68 <ADC_ConfigureBoostMode+0x214>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d80a      	bhi.n	8004c34 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c30:	609a      	str	r2, [r3, #8]
}
 8004c32:	e007      	b.n	8004c44 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	689a      	ldr	r2, [r3, #8]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004c42:	609a      	str	r2, [r3, #8]
}
 8004c44:	bf00      	nop
 8004c46:	3710      	adds	r7, #16
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	40022000 	.word	0x40022000
 8004c50:	40022100 	.word	0x40022100
 8004c54:	40022300 	.word	0x40022300
 8004c58:	58026300 	.word	0x58026300
 8004c5c:	01312d00 	.word	0x01312d00
 8004c60:	005f5e10 	.word	0x005f5e10
 8004c64:	00bebc20 	.word	0x00bebc20
 8004c68:	017d7840 	.word	0x017d7840

08004c6c <LL_ADC_IsEnabled>:
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f003 0301 	and.w	r3, r3, #1
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d101      	bne.n	8004c84 <LL_ADC_IsEnabled+0x18>
 8004c80:	2301      	movs	r3, #1
 8004c82:	e000      	b.n	8004c86 <LL_ADC_IsEnabled+0x1a>
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	370c      	adds	r7, #12
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr

08004c92 <LL_ADC_REG_IsConversionOngoing>:
{
 8004c92:	b480      	push	{r7}
 8004c94:	b083      	sub	sp, #12
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	f003 0304 	and.w	r3, r3, #4
 8004ca2:	2b04      	cmp	r3, #4
 8004ca4:	d101      	bne.n	8004caa <LL_ADC_REG_IsConversionOngoing+0x18>
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e000      	b.n	8004cac <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004caa:	2300      	movs	r3, #0
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004cc0:	bf00      	nop
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004cd4:	bf00      	nop
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004ce8:	bf00      	nop
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004cfc:	bf00      	nop
 8004cfe:	370c      	adds	r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004d10:	bf00      	nop
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004d1c:	b590      	push	{r4, r7, lr}
 8004d1e:	b09f      	sub	sp, #124	@ 0x7c
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d26:	2300      	movs	r3, #0
 8004d28:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d101      	bne.n	8004d3a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004d36:	2302      	movs	r3, #2
 8004d38:	e0be      	b.n	8004eb8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004d42:	2300      	movs	r3, #0
 8004d44:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004d46:	2300      	movs	r3, #0
 8004d48:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a5c      	ldr	r2, [pc, #368]	@ (8004ec0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d102      	bne.n	8004d5a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004d54:	4b5b      	ldr	r3, [pc, #364]	@ (8004ec4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004d56:	60bb      	str	r3, [r7, #8]
 8004d58:	e001      	b.n	8004d5e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d10b      	bne.n	8004d7c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d68:	f043 0220 	orr.w	r2, r3, #32
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e09d      	b.n	8004eb8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f7ff ff87 	bl	8004c92 <LL_ADC_REG_IsConversionOngoing>
 8004d84:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f7ff ff81 	bl	8004c92 <LL_ADC_REG_IsConversionOngoing>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d17f      	bne.n	8004e96 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004d96:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d17c      	bne.n	8004e96 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a47      	ldr	r2, [pc, #284]	@ (8004ec0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d004      	beq.n	8004db0 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a46      	ldr	r2, [pc, #280]	@ (8004ec4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d101      	bne.n	8004db4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004db0:	4b45      	ldr	r3, [pc, #276]	@ (8004ec8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004db2:	e000      	b.n	8004db6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004db4:	4b45      	ldr	r3, [pc, #276]	@ (8004ecc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004db6:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d039      	beq.n	8004e34 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004dc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	431a      	orrs	r2, r3
 8004dce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004dd0:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a3a      	ldr	r2, [pc, #232]	@ (8004ec0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d004      	beq.n	8004de6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a38      	ldr	r2, [pc, #224]	@ (8004ec4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d10e      	bne.n	8004e04 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004de6:	4836      	ldr	r0, [pc, #216]	@ (8004ec0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004de8:	f7ff ff40 	bl	8004c6c <LL_ADC_IsEnabled>
 8004dec:	4604      	mov	r4, r0
 8004dee:	4835      	ldr	r0, [pc, #212]	@ (8004ec4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004df0:	f7ff ff3c 	bl	8004c6c <LL_ADC_IsEnabled>
 8004df4:	4603      	mov	r3, r0
 8004df6:	4323      	orrs	r3, r4
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	bf0c      	ite	eq
 8004dfc:	2301      	moveq	r3, #1
 8004dfe:	2300      	movne	r3, #0
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	e008      	b.n	8004e16 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004e04:	4832      	ldr	r0, [pc, #200]	@ (8004ed0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004e06:	f7ff ff31 	bl	8004c6c <LL_ADC_IsEnabled>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	bf0c      	ite	eq
 8004e10:	2301      	moveq	r3, #1
 8004e12:	2300      	movne	r3, #0
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d047      	beq.n	8004eaa <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004e1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e1c:	689a      	ldr	r2, [r3, #8]
 8004e1e:	4b2d      	ldr	r3, [pc, #180]	@ (8004ed4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004e20:	4013      	ands	r3, r2
 8004e22:	683a      	ldr	r2, [r7, #0]
 8004e24:	6811      	ldr	r1, [r2, #0]
 8004e26:	683a      	ldr	r2, [r7, #0]
 8004e28:	6892      	ldr	r2, [r2, #8]
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	431a      	orrs	r2, r3
 8004e2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e30:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004e32:	e03a      	b.n	8004eaa <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004e34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004e3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e3e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a1e      	ldr	r2, [pc, #120]	@ (8004ec0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d004      	beq.n	8004e54 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a1d      	ldr	r2, [pc, #116]	@ (8004ec4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d10e      	bne.n	8004e72 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004e54:	481a      	ldr	r0, [pc, #104]	@ (8004ec0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004e56:	f7ff ff09 	bl	8004c6c <LL_ADC_IsEnabled>
 8004e5a:	4604      	mov	r4, r0
 8004e5c:	4819      	ldr	r0, [pc, #100]	@ (8004ec4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004e5e:	f7ff ff05 	bl	8004c6c <LL_ADC_IsEnabled>
 8004e62:	4603      	mov	r3, r0
 8004e64:	4323      	orrs	r3, r4
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	bf0c      	ite	eq
 8004e6a:	2301      	moveq	r3, #1
 8004e6c:	2300      	movne	r3, #0
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	e008      	b.n	8004e84 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004e72:	4817      	ldr	r0, [pc, #92]	@ (8004ed0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004e74:	f7ff fefa 	bl	8004c6c <LL_ADC_IsEnabled>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	bf0c      	ite	eq
 8004e7e:	2301      	moveq	r3, #1
 8004e80:	2300      	movne	r3, #0
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d010      	beq.n	8004eaa <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004e88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e8a:	689a      	ldr	r2, [r3, #8]
 8004e8c:	4b11      	ldr	r3, [pc, #68]	@ (8004ed4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004e8e:	4013      	ands	r3, r2
 8004e90:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004e92:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004e94:	e009      	b.n	8004eaa <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e9a:	f043 0220 	orr.w	r2, r3, #32
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8004ea8:	e000      	b.n	8004eac <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004eaa:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004eb4:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	377c      	adds	r7, #124	@ 0x7c
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd90      	pop	{r4, r7, pc}
 8004ec0:	40022000 	.word	0x40022000
 8004ec4:	40022100 	.word	0x40022100
 8004ec8:	40022300 	.word	0x40022300
 8004ecc:	58026300 	.word	0x58026300
 8004ed0:	58026000 	.word	0x58026000
 8004ed4:	fffff0e0 	.word	0xfffff0e0

08004ed8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b085      	sub	sp, #20
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f003 0307 	and.w	r3, r3, #7
 8004ee6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8004f18 <__NVIC_SetPriorityGrouping+0x40>)
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004eee:	68ba      	ldr	r2, [r7, #8]
 8004ef0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004f00:	4b06      	ldr	r3, [pc, #24]	@ (8004f1c <__NVIC_SetPriorityGrouping+0x44>)
 8004f02:	4313      	orrs	r3, r2
 8004f04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f06:	4a04      	ldr	r2, [pc, #16]	@ (8004f18 <__NVIC_SetPriorityGrouping+0x40>)
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	60d3      	str	r3, [r2, #12]
}
 8004f0c:	bf00      	nop
 8004f0e:	3714      	adds	r7, #20
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr
 8004f18:	e000ed00 	.word	0xe000ed00
 8004f1c:	05fa0000 	.word	0x05fa0000

08004f20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f20:	b480      	push	{r7}
 8004f22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f24:	4b04      	ldr	r3, [pc, #16]	@ (8004f38 <__NVIC_GetPriorityGrouping+0x18>)
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	0a1b      	lsrs	r3, r3, #8
 8004f2a:	f003 0307 	and.w	r3, r3, #7
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr
 8004f38:	e000ed00 	.word	0xe000ed00

08004f3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	4603      	mov	r3, r0
 8004f44:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004f46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	db0b      	blt.n	8004f66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f4e:	88fb      	ldrh	r3, [r7, #6]
 8004f50:	f003 021f 	and.w	r2, r3, #31
 8004f54:	4907      	ldr	r1, [pc, #28]	@ (8004f74 <__NVIC_EnableIRQ+0x38>)
 8004f56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f5a:	095b      	lsrs	r3, r3, #5
 8004f5c:	2001      	movs	r0, #1
 8004f5e:	fa00 f202 	lsl.w	r2, r0, r2
 8004f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004f66:	bf00      	nop
 8004f68:	370c      	adds	r7, #12
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr
 8004f72:	bf00      	nop
 8004f74:	e000e100 	.word	0xe000e100

08004f78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	4603      	mov	r3, r0
 8004f80:	6039      	str	r1, [r7, #0]
 8004f82:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004f84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	db0a      	blt.n	8004fa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	b2da      	uxtb	r2, r3
 8004f90:	490c      	ldr	r1, [pc, #48]	@ (8004fc4 <__NVIC_SetPriority+0x4c>)
 8004f92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f96:	0112      	lsls	r2, r2, #4
 8004f98:	b2d2      	uxtb	r2, r2
 8004f9a:	440b      	add	r3, r1
 8004f9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004fa0:	e00a      	b.n	8004fb8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	b2da      	uxtb	r2, r3
 8004fa6:	4908      	ldr	r1, [pc, #32]	@ (8004fc8 <__NVIC_SetPriority+0x50>)
 8004fa8:	88fb      	ldrh	r3, [r7, #6]
 8004faa:	f003 030f 	and.w	r3, r3, #15
 8004fae:	3b04      	subs	r3, #4
 8004fb0:	0112      	lsls	r2, r2, #4
 8004fb2:	b2d2      	uxtb	r2, r2
 8004fb4:	440b      	add	r3, r1
 8004fb6:	761a      	strb	r2, [r3, #24]
}
 8004fb8:	bf00      	nop
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr
 8004fc4:	e000e100 	.word	0xe000e100
 8004fc8:	e000ed00 	.word	0xe000ed00

08004fcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b089      	sub	sp, #36	@ 0x24
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f003 0307 	and.w	r3, r3, #7
 8004fde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	f1c3 0307 	rsb	r3, r3, #7
 8004fe6:	2b04      	cmp	r3, #4
 8004fe8:	bf28      	it	cs
 8004fea:	2304      	movcs	r3, #4
 8004fec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	3304      	adds	r3, #4
 8004ff2:	2b06      	cmp	r3, #6
 8004ff4:	d902      	bls.n	8004ffc <NVIC_EncodePriority+0x30>
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	3b03      	subs	r3, #3
 8004ffa:	e000      	b.n	8004ffe <NVIC_EncodePriority+0x32>
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005000:	f04f 32ff 	mov.w	r2, #4294967295
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	fa02 f303 	lsl.w	r3, r2, r3
 800500a:	43da      	mvns	r2, r3
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	401a      	ands	r2, r3
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005014:	f04f 31ff 	mov.w	r1, #4294967295
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	fa01 f303 	lsl.w	r3, r1, r3
 800501e:	43d9      	mvns	r1, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005024:	4313      	orrs	r3, r2
         );
}
 8005026:	4618      	mov	r0, r3
 8005028:	3724      	adds	r7, #36	@ 0x24
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
	...

08005034 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	3b01      	subs	r3, #1
 8005040:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005044:	d301      	bcc.n	800504a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005046:	2301      	movs	r3, #1
 8005048:	e00f      	b.n	800506a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800504a:	4a0a      	ldr	r2, [pc, #40]	@ (8005074 <SysTick_Config+0x40>)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	3b01      	subs	r3, #1
 8005050:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005052:	210f      	movs	r1, #15
 8005054:	f04f 30ff 	mov.w	r0, #4294967295
 8005058:	f7ff ff8e 	bl	8004f78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800505c:	4b05      	ldr	r3, [pc, #20]	@ (8005074 <SysTick_Config+0x40>)
 800505e:	2200      	movs	r2, #0
 8005060:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005062:	4b04      	ldr	r3, [pc, #16]	@ (8005074 <SysTick_Config+0x40>)
 8005064:	2207      	movs	r2, #7
 8005066:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3708      	adds	r7, #8
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	e000e010 	.word	0xe000e010

08005078 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f7ff ff29 	bl	8004ed8 <__NVIC_SetPriorityGrouping>
}
 8005086:	bf00      	nop
 8005088:	3708      	adds	r7, #8
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}

0800508e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800508e:	b580      	push	{r7, lr}
 8005090:	b086      	sub	sp, #24
 8005092:	af00      	add	r7, sp, #0
 8005094:	4603      	mov	r3, r0
 8005096:	60b9      	str	r1, [r7, #8]
 8005098:	607a      	str	r2, [r7, #4]
 800509a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800509c:	f7ff ff40 	bl	8004f20 <__NVIC_GetPriorityGrouping>
 80050a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	68b9      	ldr	r1, [r7, #8]
 80050a6:	6978      	ldr	r0, [r7, #20]
 80050a8:	f7ff ff90 	bl	8004fcc <NVIC_EncodePriority>
 80050ac:	4602      	mov	r2, r0
 80050ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80050b2:	4611      	mov	r1, r2
 80050b4:	4618      	mov	r0, r3
 80050b6:	f7ff ff5f 	bl	8004f78 <__NVIC_SetPriority>
}
 80050ba:	bf00      	nop
 80050bc:	3718      	adds	r7, #24
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}

080050c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050c2:	b580      	push	{r7, lr}
 80050c4:	b082      	sub	sp, #8
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	4603      	mov	r3, r0
 80050ca:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80050cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80050d0:	4618      	mov	r0, r3
 80050d2:	f7ff ff33 	bl	8004f3c <__NVIC_EnableIRQ>
}
 80050d6:	bf00      	nop
 80050d8:	3708      	adds	r7, #8
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}

080050de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80050de:	b580      	push	{r7, lr}
 80050e0:	b082      	sub	sp, #8
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f7ff ffa4 	bl	8005034 <SysTick_Config>
 80050ec:	4603      	mov	r3, r0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3708      	adds	r7, #8
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
	...

080050f8 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 80050f8:	b480      	push	{r7}
 80050fa:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 80050fc:	4b06      	ldr	r3, [pc, #24]	@ (8005118 <HAL_GetCurrentCPUID+0x20>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005104:	2b70      	cmp	r3, #112	@ 0x70
 8005106:	d101      	bne.n	800510c <HAL_GetCurrentCPUID+0x14>
  {
    return  CM7_CPUID;
 8005108:	2303      	movs	r3, #3
 800510a:	e000      	b.n	800510e <HAL_GetCurrentCPUID+0x16>
  }
  else
  {
    return CM4_CPUID;
 800510c:	2301      	movs	r3, #1
  }
}
 800510e:	4618      	mov	r0, r3
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr
 8005118:	e000ed00 	.word	0xe000ed00

0800511c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b086      	sub	sp, #24
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005124:	f7fe f932 	bl	800338c <HAL_GetTick>
 8005128:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d101      	bne.n	8005134 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e316      	b.n	8005762 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a66      	ldr	r2, [pc, #408]	@ (80052d4 <HAL_DMA_Init+0x1b8>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d04a      	beq.n	80051d4 <HAL_DMA_Init+0xb8>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a65      	ldr	r2, [pc, #404]	@ (80052d8 <HAL_DMA_Init+0x1bc>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d045      	beq.n	80051d4 <HAL_DMA_Init+0xb8>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a63      	ldr	r2, [pc, #396]	@ (80052dc <HAL_DMA_Init+0x1c0>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d040      	beq.n	80051d4 <HAL_DMA_Init+0xb8>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a62      	ldr	r2, [pc, #392]	@ (80052e0 <HAL_DMA_Init+0x1c4>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d03b      	beq.n	80051d4 <HAL_DMA_Init+0xb8>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a60      	ldr	r2, [pc, #384]	@ (80052e4 <HAL_DMA_Init+0x1c8>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d036      	beq.n	80051d4 <HAL_DMA_Init+0xb8>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a5f      	ldr	r2, [pc, #380]	@ (80052e8 <HAL_DMA_Init+0x1cc>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d031      	beq.n	80051d4 <HAL_DMA_Init+0xb8>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a5d      	ldr	r2, [pc, #372]	@ (80052ec <HAL_DMA_Init+0x1d0>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d02c      	beq.n	80051d4 <HAL_DMA_Init+0xb8>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a5c      	ldr	r2, [pc, #368]	@ (80052f0 <HAL_DMA_Init+0x1d4>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d027      	beq.n	80051d4 <HAL_DMA_Init+0xb8>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a5a      	ldr	r2, [pc, #360]	@ (80052f4 <HAL_DMA_Init+0x1d8>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d022      	beq.n	80051d4 <HAL_DMA_Init+0xb8>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a59      	ldr	r2, [pc, #356]	@ (80052f8 <HAL_DMA_Init+0x1dc>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d01d      	beq.n	80051d4 <HAL_DMA_Init+0xb8>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a57      	ldr	r2, [pc, #348]	@ (80052fc <HAL_DMA_Init+0x1e0>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d018      	beq.n	80051d4 <HAL_DMA_Init+0xb8>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a56      	ldr	r2, [pc, #344]	@ (8005300 <HAL_DMA_Init+0x1e4>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d013      	beq.n	80051d4 <HAL_DMA_Init+0xb8>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a54      	ldr	r2, [pc, #336]	@ (8005304 <HAL_DMA_Init+0x1e8>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d00e      	beq.n	80051d4 <HAL_DMA_Init+0xb8>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a53      	ldr	r2, [pc, #332]	@ (8005308 <HAL_DMA_Init+0x1ec>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d009      	beq.n	80051d4 <HAL_DMA_Init+0xb8>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a51      	ldr	r2, [pc, #324]	@ (800530c <HAL_DMA_Init+0x1f0>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d004      	beq.n	80051d4 <HAL_DMA_Init+0xb8>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a50      	ldr	r2, [pc, #320]	@ (8005310 <HAL_DMA_Init+0x1f4>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d101      	bne.n	80051d8 <HAL_DMA_Init+0xbc>
 80051d4:	2301      	movs	r3, #1
 80051d6:	e000      	b.n	80051da <HAL_DMA_Init+0xbe>
 80051d8:	2300      	movs	r3, #0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	f000 813b 	beq.w	8005456 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2202      	movs	r2, #2
 80051e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a37      	ldr	r2, [pc, #220]	@ (80052d4 <HAL_DMA_Init+0x1b8>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d04a      	beq.n	8005290 <HAL_DMA_Init+0x174>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a36      	ldr	r2, [pc, #216]	@ (80052d8 <HAL_DMA_Init+0x1bc>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d045      	beq.n	8005290 <HAL_DMA_Init+0x174>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a34      	ldr	r2, [pc, #208]	@ (80052dc <HAL_DMA_Init+0x1c0>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d040      	beq.n	8005290 <HAL_DMA_Init+0x174>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a33      	ldr	r2, [pc, #204]	@ (80052e0 <HAL_DMA_Init+0x1c4>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d03b      	beq.n	8005290 <HAL_DMA_Init+0x174>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a31      	ldr	r2, [pc, #196]	@ (80052e4 <HAL_DMA_Init+0x1c8>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d036      	beq.n	8005290 <HAL_DMA_Init+0x174>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a30      	ldr	r2, [pc, #192]	@ (80052e8 <HAL_DMA_Init+0x1cc>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d031      	beq.n	8005290 <HAL_DMA_Init+0x174>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a2e      	ldr	r2, [pc, #184]	@ (80052ec <HAL_DMA_Init+0x1d0>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d02c      	beq.n	8005290 <HAL_DMA_Init+0x174>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a2d      	ldr	r2, [pc, #180]	@ (80052f0 <HAL_DMA_Init+0x1d4>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d027      	beq.n	8005290 <HAL_DMA_Init+0x174>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a2b      	ldr	r2, [pc, #172]	@ (80052f4 <HAL_DMA_Init+0x1d8>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d022      	beq.n	8005290 <HAL_DMA_Init+0x174>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a2a      	ldr	r2, [pc, #168]	@ (80052f8 <HAL_DMA_Init+0x1dc>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d01d      	beq.n	8005290 <HAL_DMA_Init+0x174>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a28      	ldr	r2, [pc, #160]	@ (80052fc <HAL_DMA_Init+0x1e0>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d018      	beq.n	8005290 <HAL_DMA_Init+0x174>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a27      	ldr	r2, [pc, #156]	@ (8005300 <HAL_DMA_Init+0x1e4>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d013      	beq.n	8005290 <HAL_DMA_Init+0x174>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a25      	ldr	r2, [pc, #148]	@ (8005304 <HAL_DMA_Init+0x1e8>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d00e      	beq.n	8005290 <HAL_DMA_Init+0x174>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a24      	ldr	r2, [pc, #144]	@ (8005308 <HAL_DMA_Init+0x1ec>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d009      	beq.n	8005290 <HAL_DMA_Init+0x174>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a22      	ldr	r2, [pc, #136]	@ (800530c <HAL_DMA_Init+0x1f0>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d004      	beq.n	8005290 <HAL_DMA_Init+0x174>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a21      	ldr	r2, [pc, #132]	@ (8005310 <HAL_DMA_Init+0x1f4>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d108      	bne.n	80052a2 <HAL_DMA_Init+0x186>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f022 0201 	bic.w	r2, r2, #1
 800529e:	601a      	str	r2, [r3, #0]
 80052a0:	e007      	b.n	80052b2 <HAL_DMA_Init+0x196>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f022 0201 	bic.w	r2, r2, #1
 80052b0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80052b2:	e02f      	b.n	8005314 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80052b4:	f7fe f86a 	bl	800338c <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	2b05      	cmp	r3, #5
 80052c0:	d928      	bls.n	8005314 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2220      	movs	r2, #32
 80052c6:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2203      	movs	r2, #3
 80052cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	e246      	b.n	8005762 <HAL_DMA_Init+0x646>
 80052d4:	40020010 	.word	0x40020010
 80052d8:	40020028 	.word	0x40020028
 80052dc:	40020040 	.word	0x40020040
 80052e0:	40020058 	.word	0x40020058
 80052e4:	40020070 	.word	0x40020070
 80052e8:	40020088 	.word	0x40020088
 80052ec:	400200a0 	.word	0x400200a0
 80052f0:	400200b8 	.word	0x400200b8
 80052f4:	40020410 	.word	0x40020410
 80052f8:	40020428 	.word	0x40020428
 80052fc:	40020440 	.word	0x40020440
 8005300:	40020458 	.word	0x40020458
 8005304:	40020470 	.word	0x40020470
 8005308:	40020488 	.word	0x40020488
 800530c:	400204a0 	.word	0x400204a0
 8005310:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 0301 	and.w	r3, r3, #1
 800531e:	2b00      	cmp	r3, #0
 8005320:	d1c8      	bne.n	80052b4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800532a:	697a      	ldr	r2, [r7, #20]
 800532c:	4b83      	ldr	r3, [pc, #524]	@ (800553c <HAL_DMA_Init+0x420>)
 800532e:	4013      	ands	r3, r2
 8005330:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800533a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	691b      	ldr	r3, [r3, #16]
 8005340:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005346:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	699b      	ldr	r3, [r3, #24]
 800534c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005352:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a1b      	ldr	r3, [r3, #32]
 8005358:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800535a:	697a      	ldr	r2, [r7, #20]
 800535c:	4313      	orrs	r3, r2
 800535e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005364:	2b04      	cmp	r3, #4
 8005366:	d107      	bne.n	8005378 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005370:	4313      	orrs	r3, r2
 8005372:	697a      	ldr	r2, [r7, #20]
 8005374:	4313      	orrs	r3, r2
 8005376:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005378:	4b71      	ldr	r3, [pc, #452]	@ (8005540 <HAL_DMA_Init+0x424>)
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	4b71      	ldr	r3, [pc, #452]	@ (8005544 <HAL_DMA_Init+0x428>)
 800537e:	4013      	ands	r3, r2
 8005380:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005384:	d328      	bcc.n	80053d8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	2b28      	cmp	r3, #40	@ 0x28
 800538c:	d903      	bls.n	8005396 <HAL_DMA_Init+0x27a>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	2b2e      	cmp	r3, #46	@ 0x2e
 8005394:	d917      	bls.n	80053c6 <HAL_DMA_Init+0x2aa>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	2b3e      	cmp	r3, #62	@ 0x3e
 800539c:	d903      	bls.n	80053a6 <HAL_DMA_Init+0x28a>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	2b42      	cmp	r3, #66	@ 0x42
 80053a4:	d90f      	bls.n	80053c6 <HAL_DMA_Init+0x2aa>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	2b46      	cmp	r3, #70	@ 0x46
 80053ac:	d903      	bls.n	80053b6 <HAL_DMA_Init+0x29a>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	2b48      	cmp	r3, #72	@ 0x48
 80053b4:	d907      	bls.n	80053c6 <HAL_DMA_Init+0x2aa>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	2b4e      	cmp	r3, #78	@ 0x4e
 80053bc:	d905      	bls.n	80053ca <HAL_DMA_Init+0x2ae>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	2b52      	cmp	r3, #82	@ 0x52
 80053c4:	d801      	bhi.n	80053ca <HAL_DMA_Init+0x2ae>
 80053c6:	2301      	movs	r3, #1
 80053c8:	e000      	b.n	80053cc <HAL_DMA_Init+0x2b0>
 80053ca:	2300      	movs	r3, #0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d003      	beq.n	80053d8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80053d6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	697a      	ldr	r2, [r7, #20]
 80053de:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	695b      	ldr	r3, [r3, #20]
 80053e6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	f023 0307 	bic.w	r3, r3, #7
 80053ee:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053f4:	697a      	ldr	r2, [r7, #20]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053fe:	2b04      	cmp	r3, #4
 8005400:	d117      	bne.n	8005432 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005406:	697a      	ldr	r2, [r7, #20]
 8005408:	4313      	orrs	r3, r2
 800540a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005410:	2b00      	cmp	r3, #0
 8005412:	d00e      	beq.n	8005432 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f002 fb33 	bl	8007a80 <DMA_CheckFifoParam>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d008      	beq.n	8005432 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2240      	movs	r2, #64	@ 0x40
 8005424:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2201      	movs	r2, #1
 800542a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e197      	b.n	8005762 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	697a      	ldr	r2, [r7, #20]
 8005438:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f002 fa6e 	bl	800791c <DMA_CalcBaseAndBitshift>
 8005440:	4603      	mov	r3, r0
 8005442:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005448:	f003 031f 	and.w	r3, r3, #31
 800544c:	223f      	movs	r2, #63	@ 0x3f
 800544e:	409a      	lsls	r2, r3
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	609a      	str	r2, [r3, #8]
 8005454:	e0cd      	b.n	80055f2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a3b      	ldr	r2, [pc, #236]	@ (8005548 <HAL_DMA_Init+0x42c>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d022      	beq.n	80054a6 <HAL_DMA_Init+0x38a>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a39      	ldr	r2, [pc, #228]	@ (800554c <HAL_DMA_Init+0x430>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d01d      	beq.n	80054a6 <HAL_DMA_Init+0x38a>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a38      	ldr	r2, [pc, #224]	@ (8005550 <HAL_DMA_Init+0x434>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d018      	beq.n	80054a6 <HAL_DMA_Init+0x38a>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a36      	ldr	r2, [pc, #216]	@ (8005554 <HAL_DMA_Init+0x438>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d013      	beq.n	80054a6 <HAL_DMA_Init+0x38a>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a35      	ldr	r2, [pc, #212]	@ (8005558 <HAL_DMA_Init+0x43c>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d00e      	beq.n	80054a6 <HAL_DMA_Init+0x38a>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a33      	ldr	r2, [pc, #204]	@ (800555c <HAL_DMA_Init+0x440>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d009      	beq.n	80054a6 <HAL_DMA_Init+0x38a>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a32      	ldr	r2, [pc, #200]	@ (8005560 <HAL_DMA_Init+0x444>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d004      	beq.n	80054a6 <HAL_DMA_Init+0x38a>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a30      	ldr	r2, [pc, #192]	@ (8005564 <HAL_DMA_Init+0x448>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d101      	bne.n	80054aa <HAL_DMA_Init+0x38e>
 80054a6:	2301      	movs	r3, #1
 80054a8:	e000      	b.n	80054ac <HAL_DMA_Init+0x390>
 80054aa:	2300      	movs	r3, #0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	f000 8097 	beq.w	80055e0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a24      	ldr	r2, [pc, #144]	@ (8005548 <HAL_DMA_Init+0x42c>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d021      	beq.n	8005500 <HAL_DMA_Init+0x3e4>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a22      	ldr	r2, [pc, #136]	@ (800554c <HAL_DMA_Init+0x430>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d01c      	beq.n	8005500 <HAL_DMA_Init+0x3e4>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a21      	ldr	r2, [pc, #132]	@ (8005550 <HAL_DMA_Init+0x434>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d017      	beq.n	8005500 <HAL_DMA_Init+0x3e4>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a1f      	ldr	r2, [pc, #124]	@ (8005554 <HAL_DMA_Init+0x438>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d012      	beq.n	8005500 <HAL_DMA_Init+0x3e4>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a1e      	ldr	r2, [pc, #120]	@ (8005558 <HAL_DMA_Init+0x43c>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d00d      	beq.n	8005500 <HAL_DMA_Init+0x3e4>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a1c      	ldr	r2, [pc, #112]	@ (800555c <HAL_DMA_Init+0x440>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d008      	beq.n	8005500 <HAL_DMA_Init+0x3e4>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a1b      	ldr	r2, [pc, #108]	@ (8005560 <HAL_DMA_Init+0x444>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d003      	beq.n	8005500 <HAL_DMA_Init+0x3e4>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a19      	ldr	r2, [pc, #100]	@ (8005564 <HAL_DMA_Init+0x448>)
 80054fe:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2202      	movs	r2, #2
 8005504:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005518:	697a      	ldr	r2, [r7, #20]
 800551a:	4b13      	ldr	r3, [pc, #76]	@ (8005568 <HAL_DMA_Init+0x44c>)
 800551c:	4013      	ands	r3, r2
 800551e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	2b40      	cmp	r3, #64	@ 0x40
 8005526:	d021      	beq.n	800556c <HAL_DMA_Init+0x450>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	2b80      	cmp	r3, #128	@ 0x80
 800552e:	d102      	bne.n	8005536 <HAL_DMA_Init+0x41a>
 8005530:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005534:	e01b      	b.n	800556e <HAL_DMA_Init+0x452>
 8005536:	2300      	movs	r3, #0
 8005538:	e019      	b.n	800556e <HAL_DMA_Init+0x452>
 800553a:	bf00      	nop
 800553c:	fe10803f 	.word	0xfe10803f
 8005540:	5c001000 	.word	0x5c001000
 8005544:	ffff0000 	.word	0xffff0000
 8005548:	58025408 	.word	0x58025408
 800554c:	5802541c 	.word	0x5802541c
 8005550:	58025430 	.word	0x58025430
 8005554:	58025444 	.word	0x58025444
 8005558:	58025458 	.word	0x58025458
 800555c:	5802546c 	.word	0x5802546c
 8005560:	58025480 	.word	0x58025480
 8005564:	58025494 	.word	0x58025494
 8005568:	fffe000f 	.word	0xfffe000f
 800556c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	68d2      	ldr	r2, [r2, #12]
 8005572:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005574:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800557c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	695b      	ldr	r3, [r3, #20]
 8005582:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005584:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	699b      	ldr	r3, [r3, #24]
 800558a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800558c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	69db      	ldr	r3, [r3, #28]
 8005592:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005594:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a1b      	ldr	r3, [r3, #32]
 800559a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800559c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800559e:	697a      	ldr	r2, [r7, #20]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	697a      	ldr	r2, [r7, #20]
 80055aa:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	461a      	mov	r2, r3
 80055b2:	4b6e      	ldr	r3, [pc, #440]	@ (800576c <HAL_DMA_Init+0x650>)
 80055b4:	4413      	add	r3, r2
 80055b6:	4a6e      	ldr	r2, [pc, #440]	@ (8005770 <HAL_DMA_Init+0x654>)
 80055b8:	fba2 2303 	umull	r2, r3, r2, r3
 80055bc:	091b      	lsrs	r3, r3, #4
 80055be:	009a      	lsls	r2, r3, #2
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f002 f9a9 	bl	800791c <DMA_CalcBaseAndBitshift>
 80055ca:	4603      	mov	r3, r0
 80055cc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055d2:	f003 031f 	and.w	r3, r3, #31
 80055d6:	2201      	movs	r2, #1
 80055d8:	409a      	lsls	r2, r3
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	605a      	str	r2, [r3, #4]
 80055de:	e008      	b.n	80055f2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2240      	movs	r2, #64	@ 0x40
 80055e4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2203      	movs	r2, #3
 80055ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e0b7      	b.n	8005762 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a5f      	ldr	r2, [pc, #380]	@ (8005774 <HAL_DMA_Init+0x658>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d072      	beq.n	80056e2 <HAL_DMA_Init+0x5c6>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a5d      	ldr	r2, [pc, #372]	@ (8005778 <HAL_DMA_Init+0x65c>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d06d      	beq.n	80056e2 <HAL_DMA_Init+0x5c6>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a5c      	ldr	r2, [pc, #368]	@ (800577c <HAL_DMA_Init+0x660>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d068      	beq.n	80056e2 <HAL_DMA_Init+0x5c6>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a5a      	ldr	r2, [pc, #360]	@ (8005780 <HAL_DMA_Init+0x664>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d063      	beq.n	80056e2 <HAL_DMA_Init+0x5c6>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a59      	ldr	r2, [pc, #356]	@ (8005784 <HAL_DMA_Init+0x668>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d05e      	beq.n	80056e2 <HAL_DMA_Init+0x5c6>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a57      	ldr	r2, [pc, #348]	@ (8005788 <HAL_DMA_Init+0x66c>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d059      	beq.n	80056e2 <HAL_DMA_Init+0x5c6>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a56      	ldr	r2, [pc, #344]	@ (800578c <HAL_DMA_Init+0x670>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d054      	beq.n	80056e2 <HAL_DMA_Init+0x5c6>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a54      	ldr	r2, [pc, #336]	@ (8005790 <HAL_DMA_Init+0x674>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d04f      	beq.n	80056e2 <HAL_DMA_Init+0x5c6>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a53      	ldr	r2, [pc, #332]	@ (8005794 <HAL_DMA_Init+0x678>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d04a      	beq.n	80056e2 <HAL_DMA_Init+0x5c6>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a51      	ldr	r2, [pc, #324]	@ (8005798 <HAL_DMA_Init+0x67c>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d045      	beq.n	80056e2 <HAL_DMA_Init+0x5c6>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a50      	ldr	r2, [pc, #320]	@ (800579c <HAL_DMA_Init+0x680>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d040      	beq.n	80056e2 <HAL_DMA_Init+0x5c6>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a4e      	ldr	r2, [pc, #312]	@ (80057a0 <HAL_DMA_Init+0x684>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d03b      	beq.n	80056e2 <HAL_DMA_Init+0x5c6>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a4d      	ldr	r2, [pc, #308]	@ (80057a4 <HAL_DMA_Init+0x688>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d036      	beq.n	80056e2 <HAL_DMA_Init+0x5c6>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a4b      	ldr	r2, [pc, #300]	@ (80057a8 <HAL_DMA_Init+0x68c>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d031      	beq.n	80056e2 <HAL_DMA_Init+0x5c6>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a4a      	ldr	r2, [pc, #296]	@ (80057ac <HAL_DMA_Init+0x690>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d02c      	beq.n	80056e2 <HAL_DMA_Init+0x5c6>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a48      	ldr	r2, [pc, #288]	@ (80057b0 <HAL_DMA_Init+0x694>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d027      	beq.n	80056e2 <HAL_DMA_Init+0x5c6>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a47      	ldr	r2, [pc, #284]	@ (80057b4 <HAL_DMA_Init+0x698>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d022      	beq.n	80056e2 <HAL_DMA_Init+0x5c6>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a45      	ldr	r2, [pc, #276]	@ (80057b8 <HAL_DMA_Init+0x69c>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d01d      	beq.n	80056e2 <HAL_DMA_Init+0x5c6>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a44      	ldr	r2, [pc, #272]	@ (80057bc <HAL_DMA_Init+0x6a0>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d018      	beq.n	80056e2 <HAL_DMA_Init+0x5c6>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a42      	ldr	r2, [pc, #264]	@ (80057c0 <HAL_DMA_Init+0x6a4>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d013      	beq.n	80056e2 <HAL_DMA_Init+0x5c6>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a41      	ldr	r2, [pc, #260]	@ (80057c4 <HAL_DMA_Init+0x6a8>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d00e      	beq.n	80056e2 <HAL_DMA_Init+0x5c6>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a3f      	ldr	r2, [pc, #252]	@ (80057c8 <HAL_DMA_Init+0x6ac>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d009      	beq.n	80056e2 <HAL_DMA_Init+0x5c6>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a3e      	ldr	r2, [pc, #248]	@ (80057cc <HAL_DMA_Init+0x6b0>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d004      	beq.n	80056e2 <HAL_DMA_Init+0x5c6>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a3c      	ldr	r2, [pc, #240]	@ (80057d0 <HAL_DMA_Init+0x6b4>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d101      	bne.n	80056e6 <HAL_DMA_Init+0x5ca>
 80056e2:	2301      	movs	r3, #1
 80056e4:	e000      	b.n	80056e8 <HAL_DMA_Init+0x5cc>
 80056e6:	2300      	movs	r3, #0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d032      	beq.n	8005752 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f002 fa43 	bl	8007b78 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	2b80      	cmp	r3, #128	@ 0x80
 80056f8:	d102      	bne.n	8005700 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	685a      	ldr	r2, [r3, #4]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005708:	b2d2      	uxtb	r2, r2
 800570a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005714:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d010      	beq.n	8005740 <HAL_DMA_Init+0x624>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	2b08      	cmp	r3, #8
 8005724:	d80c      	bhi.n	8005740 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f002 fac0 	bl	8007cac <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005730:	2200      	movs	r2, #0
 8005732:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800573c:	605a      	str	r2, [r3, #4]
 800573e:	e008      	b.n	8005752 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3718      	adds	r7, #24
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop
 800576c:	a7fdabf8 	.word	0xa7fdabf8
 8005770:	cccccccd 	.word	0xcccccccd
 8005774:	40020010 	.word	0x40020010
 8005778:	40020028 	.word	0x40020028
 800577c:	40020040 	.word	0x40020040
 8005780:	40020058 	.word	0x40020058
 8005784:	40020070 	.word	0x40020070
 8005788:	40020088 	.word	0x40020088
 800578c:	400200a0 	.word	0x400200a0
 8005790:	400200b8 	.word	0x400200b8
 8005794:	40020410 	.word	0x40020410
 8005798:	40020428 	.word	0x40020428
 800579c:	40020440 	.word	0x40020440
 80057a0:	40020458 	.word	0x40020458
 80057a4:	40020470 	.word	0x40020470
 80057a8:	40020488 	.word	0x40020488
 80057ac:	400204a0 	.word	0x400204a0
 80057b0:	400204b8 	.word	0x400204b8
 80057b4:	58025408 	.word	0x58025408
 80057b8:	5802541c 	.word	0x5802541c
 80057bc:	58025430 	.word	0x58025430
 80057c0:	58025444 	.word	0x58025444
 80057c4:	58025458 	.word	0x58025458
 80057c8:	5802546c 	.word	0x5802546c
 80057cc:	58025480 	.word	0x58025480
 80057d0:	58025494 	.word	0x58025494

080057d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b086      	sub	sp, #24
 80057d8:	af00      	add	r7, sp, #0
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	607a      	str	r2, [r7, #4]
 80057e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057e2:	2300      	movs	r3, #0
 80057e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d101      	bne.n	80057f0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e226      	b.n	8005c3e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d101      	bne.n	80057fe <HAL_DMA_Start_IT+0x2a>
 80057fa:	2302      	movs	r3, #2
 80057fc:	e21f      	b.n	8005c3e <HAL_DMA_Start_IT+0x46a>
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2201      	movs	r2, #1
 8005802:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800580c:	b2db      	uxtb	r3, r3
 800580e:	2b01      	cmp	r3, #1
 8005810:	f040 820a 	bne.w	8005c28 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2202      	movs	r2, #2
 8005818:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2200      	movs	r2, #0
 8005820:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a68      	ldr	r2, [pc, #416]	@ (80059c8 <HAL_DMA_Start_IT+0x1f4>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d04a      	beq.n	80058c2 <HAL_DMA_Start_IT+0xee>
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a66      	ldr	r2, [pc, #408]	@ (80059cc <HAL_DMA_Start_IT+0x1f8>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d045      	beq.n	80058c2 <HAL_DMA_Start_IT+0xee>
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a65      	ldr	r2, [pc, #404]	@ (80059d0 <HAL_DMA_Start_IT+0x1fc>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d040      	beq.n	80058c2 <HAL_DMA_Start_IT+0xee>
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a63      	ldr	r2, [pc, #396]	@ (80059d4 <HAL_DMA_Start_IT+0x200>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d03b      	beq.n	80058c2 <HAL_DMA_Start_IT+0xee>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a62      	ldr	r2, [pc, #392]	@ (80059d8 <HAL_DMA_Start_IT+0x204>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d036      	beq.n	80058c2 <HAL_DMA_Start_IT+0xee>
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a60      	ldr	r2, [pc, #384]	@ (80059dc <HAL_DMA_Start_IT+0x208>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d031      	beq.n	80058c2 <HAL_DMA_Start_IT+0xee>
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a5f      	ldr	r2, [pc, #380]	@ (80059e0 <HAL_DMA_Start_IT+0x20c>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d02c      	beq.n	80058c2 <HAL_DMA_Start_IT+0xee>
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a5d      	ldr	r2, [pc, #372]	@ (80059e4 <HAL_DMA_Start_IT+0x210>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d027      	beq.n	80058c2 <HAL_DMA_Start_IT+0xee>
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a5c      	ldr	r2, [pc, #368]	@ (80059e8 <HAL_DMA_Start_IT+0x214>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d022      	beq.n	80058c2 <HAL_DMA_Start_IT+0xee>
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a5a      	ldr	r2, [pc, #360]	@ (80059ec <HAL_DMA_Start_IT+0x218>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d01d      	beq.n	80058c2 <HAL_DMA_Start_IT+0xee>
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a59      	ldr	r2, [pc, #356]	@ (80059f0 <HAL_DMA_Start_IT+0x21c>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d018      	beq.n	80058c2 <HAL_DMA_Start_IT+0xee>
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a57      	ldr	r2, [pc, #348]	@ (80059f4 <HAL_DMA_Start_IT+0x220>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d013      	beq.n	80058c2 <HAL_DMA_Start_IT+0xee>
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a56      	ldr	r2, [pc, #344]	@ (80059f8 <HAL_DMA_Start_IT+0x224>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d00e      	beq.n	80058c2 <HAL_DMA_Start_IT+0xee>
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a54      	ldr	r2, [pc, #336]	@ (80059fc <HAL_DMA_Start_IT+0x228>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d009      	beq.n	80058c2 <HAL_DMA_Start_IT+0xee>
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a53      	ldr	r2, [pc, #332]	@ (8005a00 <HAL_DMA_Start_IT+0x22c>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d004      	beq.n	80058c2 <HAL_DMA_Start_IT+0xee>
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a51      	ldr	r2, [pc, #324]	@ (8005a04 <HAL_DMA_Start_IT+0x230>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d108      	bne.n	80058d4 <HAL_DMA_Start_IT+0x100>
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f022 0201 	bic.w	r2, r2, #1
 80058d0:	601a      	str	r2, [r3, #0]
 80058d2:	e007      	b.n	80058e4 <HAL_DMA_Start_IT+0x110>
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f022 0201 	bic.w	r2, r2, #1
 80058e2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	68b9      	ldr	r1, [r7, #8]
 80058ea:	68f8      	ldr	r0, [r7, #12]
 80058ec:	f001 fe6a 	bl	80075c4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a34      	ldr	r2, [pc, #208]	@ (80059c8 <HAL_DMA_Start_IT+0x1f4>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d04a      	beq.n	8005990 <HAL_DMA_Start_IT+0x1bc>
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a33      	ldr	r2, [pc, #204]	@ (80059cc <HAL_DMA_Start_IT+0x1f8>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d045      	beq.n	8005990 <HAL_DMA_Start_IT+0x1bc>
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a31      	ldr	r2, [pc, #196]	@ (80059d0 <HAL_DMA_Start_IT+0x1fc>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d040      	beq.n	8005990 <HAL_DMA_Start_IT+0x1bc>
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a30      	ldr	r2, [pc, #192]	@ (80059d4 <HAL_DMA_Start_IT+0x200>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d03b      	beq.n	8005990 <HAL_DMA_Start_IT+0x1bc>
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a2e      	ldr	r2, [pc, #184]	@ (80059d8 <HAL_DMA_Start_IT+0x204>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d036      	beq.n	8005990 <HAL_DMA_Start_IT+0x1bc>
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a2d      	ldr	r2, [pc, #180]	@ (80059dc <HAL_DMA_Start_IT+0x208>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d031      	beq.n	8005990 <HAL_DMA_Start_IT+0x1bc>
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a2b      	ldr	r2, [pc, #172]	@ (80059e0 <HAL_DMA_Start_IT+0x20c>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d02c      	beq.n	8005990 <HAL_DMA_Start_IT+0x1bc>
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a2a      	ldr	r2, [pc, #168]	@ (80059e4 <HAL_DMA_Start_IT+0x210>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d027      	beq.n	8005990 <HAL_DMA_Start_IT+0x1bc>
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a28      	ldr	r2, [pc, #160]	@ (80059e8 <HAL_DMA_Start_IT+0x214>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d022      	beq.n	8005990 <HAL_DMA_Start_IT+0x1bc>
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a27      	ldr	r2, [pc, #156]	@ (80059ec <HAL_DMA_Start_IT+0x218>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d01d      	beq.n	8005990 <HAL_DMA_Start_IT+0x1bc>
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a25      	ldr	r2, [pc, #148]	@ (80059f0 <HAL_DMA_Start_IT+0x21c>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d018      	beq.n	8005990 <HAL_DMA_Start_IT+0x1bc>
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a24      	ldr	r2, [pc, #144]	@ (80059f4 <HAL_DMA_Start_IT+0x220>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d013      	beq.n	8005990 <HAL_DMA_Start_IT+0x1bc>
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a22      	ldr	r2, [pc, #136]	@ (80059f8 <HAL_DMA_Start_IT+0x224>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d00e      	beq.n	8005990 <HAL_DMA_Start_IT+0x1bc>
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a21      	ldr	r2, [pc, #132]	@ (80059fc <HAL_DMA_Start_IT+0x228>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d009      	beq.n	8005990 <HAL_DMA_Start_IT+0x1bc>
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a1f      	ldr	r2, [pc, #124]	@ (8005a00 <HAL_DMA_Start_IT+0x22c>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d004      	beq.n	8005990 <HAL_DMA_Start_IT+0x1bc>
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a1e      	ldr	r2, [pc, #120]	@ (8005a04 <HAL_DMA_Start_IT+0x230>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d101      	bne.n	8005994 <HAL_DMA_Start_IT+0x1c0>
 8005990:	2301      	movs	r3, #1
 8005992:	e000      	b.n	8005996 <HAL_DMA_Start_IT+0x1c2>
 8005994:	2300      	movs	r3, #0
 8005996:	2b00      	cmp	r3, #0
 8005998:	d036      	beq.n	8005a08 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f023 021e 	bic.w	r2, r3, #30
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f042 0216 	orr.w	r2, r2, #22
 80059ac:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d03e      	beq.n	8005a34 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f042 0208 	orr.w	r2, r2, #8
 80059c4:	601a      	str	r2, [r3, #0]
 80059c6:	e035      	b.n	8005a34 <HAL_DMA_Start_IT+0x260>
 80059c8:	40020010 	.word	0x40020010
 80059cc:	40020028 	.word	0x40020028
 80059d0:	40020040 	.word	0x40020040
 80059d4:	40020058 	.word	0x40020058
 80059d8:	40020070 	.word	0x40020070
 80059dc:	40020088 	.word	0x40020088
 80059e0:	400200a0 	.word	0x400200a0
 80059e4:	400200b8 	.word	0x400200b8
 80059e8:	40020410 	.word	0x40020410
 80059ec:	40020428 	.word	0x40020428
 80059f0:	40020440 	.word	0x40020440
 80059f4:	40020458 	.word	0x40020458
 80059f8:	40020470 	.word	0x40020470
 80059fc:	40020488 	.word	0x40020488
 8005a00:	400204a0 	.word	0x400204a0
 8005a04:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f023 020e 	bic.w	r2, r3, #14
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f042 020a 	orr.w	r2, r2, #10
 8005a1a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d007      	beq.n	8005a34 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f042 0204 	orr.w	r2, r2, #4
 8005a32:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a83      	ldr	r2, [pc, #524]	@ (8005c48 <HAL_DMA_Start_IT+0x474>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d072      	beq.n	8005b24 <HAL_DMA_Start_IT+0x350>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a82      	ldr	r2, [pc, #520]	@ (8005c4c <HAL_DMA_Start_IT+0x478>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d06d      	beq.n	8005b24 <HAL_DMA_Start_IT+0x350>
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a80      	ldr	r2, [pc, #512]	@ (8005c50 <HAL_DMA_Start_IT+0x47c>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d068      	beq.n	8005b24 <HAL_DMA_Start_IT+0x350>
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a7f      	ldr	r2, [pc, #508]	@ (8005c54 <HAL_DMA_Start_IT+0x480>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d063      	beq.n	8005b24 <HAL_DMA_Start_IT+0x350>
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a7d      	ldr	r2, [pc, #500]	@ (8005c58 <HAL_DMA_Start_IT+0x484>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d05e      	beq.n	8005b24 <HAL_DMA_Start_IT+0x350>
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a7c      	ldr	r2, [pc, #496]	@ (8005c5c <HAL_DMA_Start_IT+0x488>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d059      	beq.n	8005b24 <HAL_DMA_Start_IT+0x350>
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a7a      	ldr	r2, [pc, #488]	@ (8005c60 <HAL_DMA_Start_IT+0x48c>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d054      	beq.n	8005b24 <HAL_DMA_Start_IT+0x350>
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a79      	ldr	r2, [pc, #484]	@ (8005c64 <HAL_DMA_Start_IT+0x490>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d04f      	beq.n	8005b24 <HAL_DMA_Start_IT+0x350>
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a77      	ldr	r2, [pc, #476]	@ (8005c68 <HAL_DMA_Start_IT+0x494>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d04a      	beq.n	8005b24 <HAL_DMA_Start_IT+0x350>
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a76      	ldr	r2, [pc, #472]	@ (8005c6c <HAL_DMA_Start_IT+0x498>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d045      	beq.n	8005b24 <HAL_DMA_Start_IT+0x350>
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a74      	ldr	r2, [pc, #464]	@ (8005c70 <HAL_DMA_Start_IT+0x49c>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d040      	beq.n	8005b24 <HAL_DMA_Start_IT+0x350>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a73      	ldr	r2, [pc, #460]	@ (8005c74 <HAL_DMA_Start_IT+0x4a0>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d03b      	beq.n	8005b24 <HAL_DMA_Start_IT+0x350>
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a71      	ldr	r2, [pc, #452]	@ (8005c78 <HAL_DMA_Start_IT+0x4a4>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d036      	beq.n	8005b24 <HAL_DMA_Start_IT+0x350>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a70      	ldr	r2, [pc, #448]	@ (8005c7c <HAL_DMA_Start_IT+0x4a8>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d031      	beq.n	8005b24 <HAL_DMA_Start_IT+0x350>
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a6e      	ldr	r2, [pc, #440]	@ (8005c80 <HAL_DMA_Start_IT+0x4ac>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d02c      	beq.n	8005b24 <HAL_DMA_Start_IT+0x350>
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a6d      	ldr	r2, [pc, #436]	@ (8005c84 <HAL_DMA_Start_IT+0x4b0>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d027      	beq.n	8005b24 <HAL_DMA_Start_IT+0x350>
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a6b      	ldr	r2, [pc, #428]	@ (8005c88 <HAL_DMA_Start_IT+0x4b4>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d022      	beq.n	8005b24 <HAL_DMA_Start_IT+0x350>
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a6a      	ldr	r2, [pc, #424]	@ (8005c8c <HAL_DMA_Start_IT+0x4b8>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d01d      	beq.n	8005b24 <HAL_DMA_Start_IT+0x350>
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a68      	ldr	r2, [pc, #416]	@ (8005c90 <HAL_DMA_Start_IT+0x4bc>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d018      	beq.n	8005b24 <HAL_DMA_Start_IT+0x350>
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a67      	ldr	r2, [pc, #412]	@ (8005c94 <HAL_DMA_Start_IT+0x4c0>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d013      	beq.n	8005b24 <HAL_DMA_Start_IT+0x350>
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a65      	ldr	r2, [pc, #404]	@ (8005c98 <HAL_DMA_Start_IT+0x4c4>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d00e      	beq.n	8005b24 <HAL_DMA_Start_IT+0x350>
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a64      	ldr	r2, [pc, #400]	@ (8005c9c <HAL_DMA_Start_IT+0x4c8>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d009      	beq.n	8005b24 <HAL_DMA_Start_IT+0x350>
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a62      	ldr	r2, [pc, #392]	@ (8005ca0 <HAL_DMA_Start_IT+0x4cc>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d004      	beq.n	8005b24 <HAL_DMA_Start_IT+0x350>
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a61      	ldr	r2, [pc, #388]	@ (8005ca4 <HAL_DMA_Start_IT+0x4d0>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d101      	bne.n	8005b28 <HAL_DMA_Start_IT+0x354>
 8005b24:	2301      	movs	r3, #1
 8005b26:	e000      	b.n	8005b2a <HAL_DMA_Start_IT+0x356>
 8005b28:	2300      	movs	r3, #0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d01a      	beq.n	8005b64 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d007      	beq.n	8005b4c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b46:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005b4a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d007      	beq.n	8005b64 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b5e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005b62:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a37      	ldr	r2, [pc, #220]	@ (8005c48 <HAL_DMA_Start_IT+0x474>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d04a      	beq.n	8005c04 <HAL_DMA_Start_IT+0x430>
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a36      	ldr	r2, [pc, #216]	@ (8005c4c <HAL_DMA_Start_IT+0x478>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d045      	beq.n	8005c04 <HAL_DMA_Start_IT+0x430>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a34      	ldr	r2, [pc, #208]	@ (8005c50 <HAL_DMA_Start_IT+0x47c>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d040      	beq.n	8005c04 <HAL_DMA_Start_IT+0x430>
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a33      	ldr	r2, [pc, #204]	@ (8005c54 <HAL_DMA_Start_IT+0x480>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d03b      	beq.n	8005c04 <HAL_DMA_Start_IT+0x430>
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a31      	ldr	r2, [pc, #196]	@ (8005c58 <HAL_DMA_Start_IT+0x484>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d036      	beq.n	8005c04 <HAL_DMA_Start_IT+0x430>
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a30      	ldr	r2, [pc, #192]	@ (8005c5c <HAL_DMA_Start_IT+0x488>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d031      	beq.n	8005c04 <HAL_DMA_Start_IT+0x430>
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a2e      	ldr	r2, [pc, #184]	@ (8005c60 <HAL_DMA_Start_IT+0x48c>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d02c      	beq.n	8005c04 <HAL_DMA_Start_IT+0x430>
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a2d      	ldr	r2, [pc, #180]	@ (8005c64 <HAL_DMA_Start_IT+0x490>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d027      	beq.n	8005c04 <HAL_DMA_Start_IT+0x430>
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a2b      	ldr	r2, [pc, #172]	@ (8005c68 <HAL_DMA_Start_IT+0x494>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d022      	beq.n	8005c04 <HAL_DMA_Start_IT+0x430>
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a2a      	ldr	r2, [pc, #168]	@ (8005c6c <HAL_DMA_Start_IT+0x498>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d01d      	beq.n	8005c04 <HAL_DMA_Start_IT+0x430>
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a28      	ldr	r2, [pc, #160]	@ (8005c70 <HAL_DMA_Start_IT+0x49c>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d018      	beq.n	8005c04 <HAL_DMA_Start_IT+0x430>
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a27      	ldr	r2, [pc, #156]	@ (8005c74 <HAL_DMA_Start_IT+0x4a0>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d013      	beq.n	8005c04 <HAL_DMA_Start_IT+0x430>
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a25      	ldr	r2, [pc, #148]	@ (8005c78 <HAL_DMA_Start_IT+0x4a4>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d00e      	beq.n	8005c04 <HAL_DMA_Start_IT+0x430>
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a24      	ldr	r2, [pc, #144]	@ (8005c7c <HAL_DMA_Start_IT+0x4a8>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d009      	beq.n	8005c04 <HAL_DMA_Start_IT+0x430>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a22      	ldr	r2, [pc, #136]	@ (8005c80 <HAL_DMA_Start_IT+0x4ac>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d004      	beq.n	8005c04 <HAL_DMA_Start_IT+0x430>
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a21      	ldr	r2, [pc, #132]	@ (8005c84 <HAL_DMA_Start_IT+0x4b0>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d108      	bne.n	8005c16 <HAL_DMA_Start_IT+0x442>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f042 0201 	orr.w	r2, r2, #1
 8005c12:	601a      	str	r2, [r3, #0]
 8005c14:	e012      	b.n	8005c3c <HAL_DMA_Start_IT+0x468>
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f042 0201 	orr.w	r2, r2, #1
 8005c24:	601a      	str	r2, [r3, #0]
 8005c26:	e009      	b.n	8005c3c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005c2e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005c3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3718      	adds	r7, #24
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	40020010 	.word	0x40020010
 8005c4c:	40020028 	.word	0x40020028
 8005c50:	40020040 	.word	0x40020040
 8005c54:	40020058 	.word	0x40020058
 8005c58:	40020070 	.word	0x40020070
 8005c5c:	40020088 	.word	0x40020088
 8005c60:	400200a0 	.word	0x400200a0
 8005c64:	400200b8 	.word	0x400200b8
 8005c68:	40020410 	.word	0x40020410
 8005c6c:	40020428 	.word	0x40020428
 8005c70:	40020440 	.word	0x40020440
 8005c74:	40020458 	.word	0x40020458
 8005c78:	40020470 	.word	0x40020470
 8005c7c:	40020488 	.word	0x40020488
 8005c80:	400204a0 	.word	0x400204a0
 8005c84:	400204b8 	.word	0x400204b8
 8005c88:	58025408 	.word	0x58025408
 8005c8c:	5802541c 	.word	0x5802541c
 8005c90:	58025430 	.word	0x58025430
 8005c94:	58025444 	.word	0x58025444
 8005c98:	58025458 	.word	0x58025458
 8005c9c:	5802546c 	.word	0x5802546c
 8005ca0:	58025480 	.word	0x58025480
 8005ca4:	58025494 	.word	0x58025494

08005ca8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b086      	sub	sp, #24
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005cb0:	f7fd fb6c 	bl	800338c <HAL_GetTick>
 8005cb4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d101      	bne.n	8005cc0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e2dc      	b.n	800627a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	2b02      	cmp	r3, #2
 8005cca:	d008      	beq.n	8005cde <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2280      	movs	r2, #128	@ 0x80
 8005cd0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e2cd      	b.n	800627a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a76      	ldr	r2, [pc, #472]	@ (8005ebc <HAL_DMA_Abort+0x214>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d04a      	beq.n	8005d7e <HAL_DMA_Abort+0xd6>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a74      	ldr	r2, [pc, #464]	@ (8005ec0 <HAL_DMA_Abort+0x218>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d045      	beq.n	8005d7e <HAL_DMA_Abort+0xd6>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a73      	ldr	r2, [pc, #460]	@ (8005ec4 <HAL_DMA_Abort+0x21c>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d040      	beq.n	8005d7e <HAL_DMA_Abort+0xd6>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a71      	ldr	r2, [pc, #452]	@ (8005ec8 <HAL_DMA_Abort+0x220>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d03b      	beq.n	8005d7e <HAL_DMA_Abort+0xd6>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a70      	ldr	r2, [pc, #448]	@ (8005ecc <HAL_DMA_Abort+0x224>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d036      	beq.n	8005d7e <HAL_DMA_Abort+0xd6>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a6e      	ldr	r2, [pc, #440]	@ (8005ed0 <HAL_DMA_Abort+0x228>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d031      	beq.n	8005d7e <HAL_DMA_Abort+0xd6>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a6d      	ldr	r2, [pc, #436]	@ (8005ed4 <HAL_DMA_Abort+0x22c>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d02c      	beq.n	8005d7e <HAL_DMA_Abort+0xd6>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a6b      	ldr	r2, [pc, #428]	@ (8005ed8 <HAL_DMA_Abort+0x230>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d027      	beq.n	8005d7e <HAL_DMA_Abort+0xd6>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a6a      	ldr	r2, [pc, #424]	@ (8005edc <HAL_DMA_Abort+0x234>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d022      	beq.n	8005d7e <HAL_DMA_Abort+0xd6>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a68      	ldr	r2, [pc, #416]	@ (8005ee0 <HAL_DMA_Abort+0x238>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d01d      	beq.n	8005d7e <HAL_DMA_Abort+0xd6>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a67      	ldr	r2, [pc, #412]	@ (8005ee4 <HAL_DMA_Abort+0x23c>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d018      	beq.n	8005d7e <HAL_DMA_Abort+0xd6>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a65      	ldr	r2, [pc, #404]	@ (8005ee8 <HAL_DMA_Abort+0x240>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d013      	beq.n	8005d7e <HAL_DMA_Abort+0xd6>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a64      	ldr	r2, [pc, #400]	@ (8005eec <HAL_DMA_Abort+0x244>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d00e      	beq.n	8005d7e <HAL_DMA_Abort+0xd6>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a62      	ldr	r2, [pc, #392]	@ (8005ef0 <HAL_DMA_Abort+0x248>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d009      	beq.n	8005d7e <HAL_DMA_Abort+0xd6>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a61      	ldr	r2, [pc, #388]	@ (8005ef4 <HAL_DMA_Abort+0x24c>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d004      	beq.n	8005d7e <HAL_DMA_Abort+0xd6>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a5f      	ldr	r2, [pc, #380]	@ (8005ef8 <HAL_DMA_Abort+0x250>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d101      	bne.n	8005d82 <HAL_DMA_Abort+0xda>
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e000      	b.n	8005d84 <HAL_DMA_Abort+0xdc>
 8005d82:	2300      	movs	r3, #0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d013      	beq.n	8005db0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f022 021e 	bic.w	r2, r2, #30
 8005d96:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	695a      	ldr	r2, [r3, #20]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005da6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	617b      	str	r3, [r7, #20]
 8005dae:	e00a      	b.n	8005dc6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f022 020e 	bic.w	r2, r2, #14
 8005dbe:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a3c      	ldr	r2, [pc, #240]	@ (8005ebc <HAL_DMA_Abort+0x214>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d072      	beq.n	8005eb6 <HAL_DMA_Abort+0x20e>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a3a      	ldr	r2, [pc, #232]	@ (8005ec0 <HAL_DMA_Abort+0x218>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d06d      	beq.n	8005eb6 <HAL_DMA_Abort+0x20e>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a39      	ldr	r2, [pc, #228]	@ (8005ec4 <HAL_DMA_Abort+0x21c>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d068      	beq.n	8005eb6 <HAL_DMA_Abort+0x20e>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a37      	ldr	r2, [pc, #220]	@ (8005ec8 <HAL_DMA_Abort+0x220>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d063      	beq.n	8005eb6 <HAL_DMA_Abort+0x20e>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a36      	ldr	r2, [pc, #216]	@ (8005ecc <HAL_DMA_Abort+0x224>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d05e      	beq.n	8005eb6 <HAL_DMA_Abort+0x20e>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a34      	ldr	r2, [pc, #208]	@ (8005ed0 <HAL_DMA_Abort+0x228>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d059      	beq.n	8005eb6 <HAL_DMA_Abort+0x20e>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a33      	ldr	r2, [pc, #204]	@ (8005ed4 <HAL_DMA_Abort+0x22c>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d054      	beq.n	8005eb6 <HAL_DMA_Abort+0x20e>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a31      	ldr	r2, [pc, #196]	@ (8005ed8 <HAL_DMA_Abort+0x230>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d04f      	beq.n	8005eb6 <HAL_DMA_Abort+0x20e>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a30      	ldr	r2, [pc, #192]	@ (8005edc <HAL_DMA_Abort+0x234>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d04a      	beq.n	8005eb6 <HAL_DMA_Abort+0x20e>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a2e      	ldr	r2, [pc, #184]	@ (8005ee0 <HAL_DMA_Abort+0x238>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d045      	beq.n	8005eb6 <HAL_DMA_Abort+0x20e>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a2d      	ldr	r2, [pc, #180]	@ (8005ee4 <HAL_DMA_Abort+0x23c>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d040      	beq.n	8005eb6 <HAL_DMA_Abort+0x20e>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a2b      	ldr	r2, [pc, #172]	@ (8005ee8 <HAL_DMA_Abort+0x240>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d03b      	beq.n	8005eb6 <HAL_DMA_Abort+0x20e>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a2a      	ldr	r2, [pc, #168]	@ (8005eec <HAL_DMA_Abort+0x244>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d036      	beq.n	8005eb6 <HAL_DMA_Abort+0x20e>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a28      	ldr	r2, [pc, #160]	@ (8005ef0 <HAL_DMA_Abort+0x248>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d031      	beq.n	8005eb6 <HAL_DMA_Abort+0x20e>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a27      	ldr	r2, [pc, #156]	@ (8005ef4 <HAL_DMA_Abort+0x24c>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d02c      	beq.n	8005eb6 <HAL_DMA_Abort+0x20e>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a25      	ldr	r2, [pc, #148]	@ (8005ef8 <HAL_DMA_Abort+0x250>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d027      	beq.n	8005eb6 <HAL_DMA_Abort+0x20e>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a24      	ldr	r2, [pc, #144]	@ (8005efc <HAL_DMA_Abort+0x254>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d022      	beq.n	8005eb6 <HAL_DMA_Abort+0x20e>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a22      	ldr	r2, [pc, #136]	@ (8005f00 <HAL_DMA_Abort+0x258>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d01d      	beq.n	8005eb6 <HAL_DMA_Abort+0x20e>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a21      	ldr	r2, [pc, #132]	@ (8005f04 <HAL_DMA_Abort+0x25c>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d018      	beq.n	8005eb6 <HAL_DMA_Abort+0x20e>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a1f      	ldr	r2, [pc, #124]	@ (8005f08 <HAL_DMA_Abort+0x260>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d013      	beq.n	8005eb6 <HAL_DMA_Abort+0x20e>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a1e      	ldr	r2, [pc, #120]	@ (8005f0c <HAL_DMA_Abort+0x264>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d00e      	beq.n	8005eb6 <HAL_DMA_Abort+0x20e>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a1c      	ldr	r2, [pc, #112]	@ (8005f10 <HAL_DMA_Abort+0x268>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d009      	beq.n	8005eb6 <HAL_DMA_Abort+0x20e>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a1b      	ldr	r2, [pc, #108]	@ (8005f14 <HAL_DMA_Abort+0x26c>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d004      	beq.n	8005eb6 <HAL_DMA_Abort+0x20e>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a19      	ldr	r2, [pc, #100]	@ (8005f18 <HAL_DMA_Abort+0x270>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d132      	bne.n	8005f1c <HAL_DMA_Abort+0x274>
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e031      	b.n	8005f1e <HAL_DMA_Abort+0x276>
 8005eba:	bf00      	nop
 8005ebc:	40020010 	.word	0x40020010
 8005ec0:	40020028 	.word	0x40020028
 8005ec4:	40020040 	.word	0x40020040
 8005ec8:	40020058 	.word	0x40020058
 8005ecc:	40020070 	.word	0x40020070
 8005ed0:	40020088 	.word	0x40020088
 8005ed4:	400200a0 	.word	0x400200a0
 8005ed8:	400200b8 	.word	0x400200b8
 8005edc:	40020410 	.word	0x40020410
 8005ee0:	40020428 	.word	0x40020428
 8005ee4:	40020440 	.word	0x40020440
 8005ee8:	40020458 	.word	0x40020458
 8005eec:	40020470 	.word	0x40020470
 8005ef0:	40020488 	.word	0x40020488
 8005ef4:	400204a0 	.word	0x400204a0
 8005ef8:	400204b8 	.word	0x400204b8
 8005efc:	58025408 	.word	0x58025408
 8005f00:	5802541c 	.word	0x5802541c
 8005f04:	58025430 	.word	0x58025430
 8005f08:	58025444 	.word	0x58025444
 8005f0c:	58025458 	.word	0x58025458
 8005f10:	5802546c 	.word	0x5802546c
 8005f14:	58025480 	.word	0x58025480
 8005f18:	58025494 	.word	0x58025494
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d007      	beq.n	8005f32 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f2c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005f30:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a6d      	ldr	r2, [pc, #436]	@ (80060ec <HAL_DMA_Abort+0x444>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d04a      	beq.n	8005fd2 <HAL_DMA_Abort+0x32a>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a6b      	ldr	r2, [pc, #428]	@ (80060f0 <HAL_DMA_Abort+0x448>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d045      	beq.n	8005fd2 <HAL_DMA_Abort+0x32a>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a6a      	ldr	r2, [pc, #424]	@ (80060f4 <HAL_DMA_Abort+0x44c>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d040      	beq.n	8005fd2 <HAL_DMA_Abort+0x32a>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a68      	ldr	r2, [pc, #416]	@ (80060f8 <HAL_DMA_Abort+0x450>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d03b      	beq.n	8005fd2 <HAL_DMA_Abort+0x32a>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a67      	ldr	r2, [pc, #412]	@ (80060fc <HAL_DMA_Abort+0x454>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d036      	beq.n	8005fd2 <HAL_DMA_Abort+0x32a>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a65      	ldr	r2, [pc, #404]	@ (8006100 <HAL_DMA_Abort+0x458>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d031      	beq.n	8005fd2 <HAL_DMA_Abort+0x32a>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a64      	ldr	r2, [pc, #400]	@ (8006104 <HAL_DMA_Abort+0x45c>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d02c      	beq.n	8005fd2 <HAL_DMA_Abort+0x32a>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a62      	ldr	r2, [pc, #392]	@ (8006108 <HAL_DMA_Abort+0x460>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d027      	beq.n	8005fd2 <HAL_DMA_Abort+0x32a>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a61      	ldr	r2, [pc, #388]	@ (800610c <HAL_DMA_Abort+0x464>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d022      	beq.n	8005fd2 <HAL_DMA_Abort+0x32a>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a5f      	ldr	r2, [pc, #380]	@ (8006110 <HAL_DMA_Abort+0x468>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d01d      	beq.n	8005fd2 <HAL_DMA_Abort+0x32a>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a5e      	ldr	r2, [pc, #376]	@ (8006114 <HAL_DMA_Abort+0x46c>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d018      	beq.n	8005fd2 <HAL_DMA_Abort+0x32a>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a5c      	ldr	r2, [pc, #368]	@ (8006118 <HAL_DMA_Abort+0x470>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d013      	beq.n	8005fd2 <HAL_DMA_Abort+0x32a>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a5b      	ldr	r2, [pc, #364]	@ (800611c <HAL_DMA_Abort+0x474>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d00e      	beq.n	8005fd2 <HAL_DMA_Abort+0x32a>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a59      	ldr	r2, [pc, #356]	@ (8006120 <HAL_DMA_Abort+0x478>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d009      	beq.n	8005fd2 <HAL_DMA_Abort+0x32a>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a58      	ldr	r2, [pc, #352]	@ (8006124 <HAL_DMA_Abort+0x47c>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d004      	beq.n	8005fd2 <HAL_DMA_Abort+0x32a>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a56      	ldr	r2, [pc, #344]	@ (8006128 <HAL_DMA_Abort+0x480>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d108      	bne.n	8005fe4 <HAL_DMA_Abort+0x33c>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f022 0201 	bic.w	r2, r2, #1
 8005fe0:	601a      	str	r2, [r3, #0]
 8005fe2:	e007      	b.n	8005ff4 <HAL_DMA_Abort+0x34c>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f022 0201 	bic.w	r2, r2, #1
 8005ff2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005ff4:	e013      	b.n	800601e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005ff6:	f7fd f9c9 	bl	800338c <HAL_GetTick>
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	1ad3      	subs	r3, r2, r3
 8006000:	2b05      	cmp	r3, #5
 8006002:	d90c      	bls.n	800601e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2220      	movs	r2, #32
 8006008:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2203      	movs	r2, #3
 800600e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	e12d      	b.n	800627a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f003 0301 	and.w	r3, r3, #1
 8006026:	2b00      	cmp	r3, #0
 8006028:	d1e5      	bne.n	8005ff6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a2f      	ldr	r2, [pc, #188]	@ (80060ec <HAL_DMA_Abort+0x444>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d04a      	beq.n	80060ca <HAL_DMA_Abort+0x422>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a2d      	ldr	r2, [pc, #180]	@ (80060f0 <HAL_DMA_Abort+0x448>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d045      	beq.n	80060ca <HAL_DMA_Abort+0x422>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a2c      	ldr	r2, [pc, #176]	@ (80060f4 <HAL_DMA_Abort+0x44c>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d040      	beq.n	80060ca <HAL_DMA_Abort+0x422>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a2a      	ldr	r2, [pc, #168]	@ (80060f8 <HAL_DMA_Abort+0x450>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d03b      	beq.n	80060ca <HAL_DMA_Abort+0x422>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a29      	ldr	r2, [pc, #164]	@ (80060fc <HAL_DMA_Abort+0x454>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d036      	beq.n	80060ca <HAL_DMA_Abort+0x422>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a27      	ldr	r2, [pc, #156]	@ (8006100 <HAL_DMA_Abort+0x458>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d031      	beq.n	80060ca <HAL_DMA_Abort+0x422>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a26      	ldr	r2, [pc, #152]	@ (8006104 <HAL_DMA_Abort+0x45c>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d02c      	beq.n	80060ca <HAL_DMA_Abort+0x422>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a24      	ldr	r2, [pc, #144]	@ (8006108 <HAL_DMA_Abort+0x460>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d027      	beq.n	80060ca <HAL_DMA_Abort+0x422>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a23      	ldr	r2, [pc, #140]	@ (800610c <HAL_DMA_Abort+0x464>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d022      	beq.n	80060ca <HAL_DMA_Abort+0x422>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a21      	ldr	r2, [pc, #132]	@ (8006110 <HAL_DMA_Abort+0x468>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d01d      	beq.n	80060ca <HAL_DMA_Abort+0x422>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a20      	ldr	r2, [pc, #128]	@ (8006114 <HAL_DMA_Abort+0x46c>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d018      	beq.n	80060ca <HAL_DMA_Abort+0x422>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a1e      	ldr	r2, [pc, #120]	@ (8006118 <HAL_DMA_Abort+0x470>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d013      	beq.n	80060ca <HAL_DMA_Abort+0x422>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a1d      	ldr	r2, [pc, #116]	@ (800611c <HAL_DMA_Abort+0x474>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d00e      	beq.n	80060ca <HAL_DMA_Abort+0x422>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a1b      	ldr	r2, [pc, #108]	@ (8006120 <HAL_DMA_Abort+0x478>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d009      	beq.n	80060ca <HAL_DMA_Abort+0x422>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a1a      	ldr	r2, [pc, #104]	@ (8006124 <HAL_DMA_Abort+0x47c>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d004      	beq.n	80060ca <HAL_DMA_Abort+0x422>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a18      	ldr	r2, [pc, #96]	@ (8006128 <HAL_DMA_Abort+0x480>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d101      	bne.n	80060ce <HAL_DMA_Abort+0x426>
 80060ca:	2301      	movs	r3, #1
 80060cc:	e000      	b.n	80060d0 <HAL_DMA_Abort+0x428>
 80060ce:	2300      	movs	r3, #0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d02b      	beq.n	800612c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060d8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060de:	f003 031f 	and.w	r3, r3, #31
 80060e2:	223f      	movs	r2, #63	@ 0x3f
 80060e4:	409a      	lsls	r2, r3
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	609a      	str	r2, [r3, #8]
 80060ea:	e02a      	b.n	8006142 <HAL_DMA_Abort+0x49a>
 80060ec:	40020010 	.word	0x40020010
 80060f0:	40020028 	.word	0x40020028
 80060f4:	40020040 	.word	0x40020040
 80060f8:	40020058 	.word	0x40020058
 80060fc:	40020070 	.word	0x40020070
 8006100:	40020088 	.word	0x40020088
 8006104:	400200a0 	.word	0x400200a0
 8006108:	400200b8 	.word	0x400200b8
 800610c:	40020410 	.word	0x40020410
 8006110:	40020428 	.word	0x40020428
 8006114:	40020440 	.word	0x40020440
 8006118:	40020458 	.word	0x40020458
 800611c:	40020470 	.word	0x40020470
 8006120:	40020488 	.word	0x40020488
 8006124:	400204a0 	.word	0x400204a0
 8006128:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006130:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006136:	f003 031f 	and.w	r3, r3, #31
 800613a:	2201      	movs	r2, #1
 800613c:	409a      	lsls	r2, r3
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a4f      	ldr	r2, [pc, #316]	@ (8006284 <HAL_DMA_Abort+0x5dc>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d072      	beq.n	8006232 <HAL_DMA_Abort+0x58a>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a4d      	ldr	r2, [pc, #308]	@ (8006288 <HAL_DMA_Abort+0x5e0>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d06d      	beq.n	8006232 <HAL_DMA_Abort+0x58a>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a4c      	ldr	r2, [pc, #304]	@ (800628c <HAL_DMA_Abort+0x5e4>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d068      	beq.n	8006232 <HAL_DMA_Abort+0x58a>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a4a      	ldr	r2, [pc, #296]	@ (8006290 <HAL_DMA_Abort+0x5e8>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d063      	beq.n	8006232 <HAL_DMA_Abort+0x58a>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a49      	ldr	r2, [pc, #292]	@ (8006294 <HAL_DMA_Abort+0x5ec>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d05e      	beq.n	8006232 <HAL_DMA_Abort+0x58a>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a47      	ldr	r2, [pc, #284]	@ (8006298 <HAL_DMA_Abort+0x5f0>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d059      	beq.n	8006232 <HAL_DMA_Abort+0x58a>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a46      	ldr	r2, [pc, #280]	@ (800629c <HAL_DMA_Abort+0x5f4>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d054      	beq.n	8006232 <HAL_DMA_Abort+0x58a>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a44      	ldr	r2, [pc, #272]	@ (80062a0 <HAL_DMA_Abort+0x5f8>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d04f      	beq.n	8006232 <HAL_DMA_Abort+0x58a>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a43      	ldr	r2, [pc, #268]	@ (80062a4 <HAL_DMA_Abort+0x5fc>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d04a      	beq.n	8006232 <HAL_DMA_Abort+0x58a>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a41      	ldr	r2, [pc, #260]	@ (80062a8 <HAL_DMA_Abort+0x600>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d045      	beq.n	8006232 <HAL_DMA_Abort+0x58a>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a40      	ldr	r2, [pc, #256]	@ (80062ac <HAL_DMA_Abort+0x604>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d040      	beq.n	8006232 <HAL_DMA_Abort+0x58a>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a3e      	ldr	r2, [pc, #248]	@ (80062b0 <HAL_DMA_Abort+0x608>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d03b      	beq.n	8006232 <HAL_DMA_Abort+0x58a>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a3d      	ldr	r2, [pc, #244]	@ (80062b4 <HAL_DMA_Abort+0x60c>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d036      	beq.n	8006232 <HAL_DMA_Abort+0x58a>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a3b      	ldr	r2, [pc, #236]	@ (80062b8 <HAL_DMA_Abort+0x610>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d031      	beq.n	8006232 <HAL_DMA_Abort+0x58a>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a3a      	ldr	r2, [pc, #232]	@ (80062bc <HAL_DMA_Abort+0x614>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d02c      	beq.n	8006232 <HAL_DMA_Abort+0x58a>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a38      	ldr	r2, [pc, #224]	@ (80062c0 <HAL_DMA_Abort+0x618>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d027      	beq.n	8006232 <HAL_DMA_Abort+0x58a>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a37      	ldr	r2, [pc, #220]	@ (80062c4 <HAL_DMA_Abort+0x61c>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d022      	beq.n	8006232 <HAL_DMA_Abort+0x58a>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a35      	ldr	r2, [pc, #212]	@ (80062c8 <HAL_DMA_Abort+0x620>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d01d      	beq.n	8006232 <HAL_DMA_Abort+0x58a>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a34      	ldr	r2, [pc, #208]	@ (80062cc <HAL_DMA_Abort+0x624>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d018      	beq.n	8006232 <HAL_DMA_Abort+0x58a>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a32      	ldr	r2, [pc, #200]	@ (80062d0 <HAL_DMA_Abort+0x628>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d013      	beq.n	8006232 <HAL_DMA_Abort+0x58a>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a31      	ldr	r2, [pc, #196]	@ (80062d4 <HAL_DMA_Abort+0x62c>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d00e      	beq.n	8006232 <HAL_DMA_Abort+0x58a>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a2f      	ldr	r2, [pc, #188]	@ (80062d8 <HAL_DMA_Abort+0x630>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d009      	beq.n	8006232 <HAL_DMA_Abort+0x58a>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a2e      	ldr	r2, [pc, #184]	@ (80062dc <HAL_DMA_Abort+0x634>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d004      	beq.n	8006232 <HAL_DMA_Abort+0x58a>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a2c      	ldr	r2, [pc, #176]	@ (80062e0 <HAL_DMA_Abort+0x638>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d101      	bne.n	8006236 <HAL_DMA_Abort+0x58e>
 8006232:	2301      	movs	r3, #1
 8006234:	e000      	b.n	8006238 <HAL_DMA_Abort+0x590>
 8006236:	2300      	movs	r3, #0
 8006238:	2b00      	cmp	r3, #0
 800623a:	d015      	beq.n	8006268 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006244:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800624a:	2b00      	cmp	r3, #0
 800624c:	d00c      	beq.n	8006268 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006258:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800625c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006266:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	3718      	adds	r7, #24
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop
 8006284:	40020010 	.word	0x40020010
 8006288:	40020028 	.word	0x40020028
 800628c:	40020040 	.word	0x40020040
 8006290:	40020058 	.word	0x40020058
 8006294:	40020070 	.word	0x40020070
 8006298:	40020088 	.word	0x40020088
 800629c:	400200a0 	.word	0x400200a0
 80062a0:	400200b8 	.word	0x400200b8
 80062a4:	40020410 	.word	0x40020410
 80062a8:	40020428 	.word	0x40020428
 80062ac:	40020440 	.word	0x40020440
 80062b0:	40020458 	.word	0x40020458
 80062b4:	40020470 	.word	0x40020470
 80062b8:	40020488 	.word	0x40020488
 80062bc:	400204a0 	.word	0x400204a0
 80062c0:	400204b8 	.word	0x400204b8
 80062c4:	58025408 	.word	0x58025408
 80062c8:	5802541c 	.word	0x5802541c
 80062cc:	58025430 	.word	0x58025430
 80062d0:	58025444 	.word	0x58025444
 80062d4:	58025458 	.word	0x58025458
 80062d8:	5802546c 	.word	0x5802546c
 80062dc:	58025480 	.word	0x58025480
 80062e0:	58025494 	.word	0x58025494

080062e4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b084      	sub	sp, #16
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d101      	bne.n	80062f6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e237      	b.n	8006766 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	2b02      	cmp	r3, #2
 8006300:	d004      	beq.n	800630c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2280      	movs	r2, #128	@ 0x80
 8006306:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	e22c      	b.n	8006766 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a5c      	ldr	r2, [pc, #368]	@ (8006484 <HAL_DMA_Abort_IT+0x1a0>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d04a      	beq.n	80063ac <HAL_DMA_Abort_IT+0xc8>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a5b      	ldr	r2, [pc, #364]	@ (8006488 <HAL_DMA_Abort_IT+0x1a4>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d045      	beq.n	80063ac <HAL_DMA_Abort_IT+0xc8>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a59      	ldr	r2, [pc, #356]	@ (800648c <HAL_DMA_Abort_IT+0x1a8>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d040      	beq.n	80063ac <HAL_DMA_Abort_IT+0xc8>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a58      	ldr	r2, [pc, #352]	@ (8006490 <HAL_DMA_Abort_IT+0x1ac>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d03b      	beq.n	80063ac <HAL_DMA_Abort_IT+0xc8>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a56      	ldr	r2, [pc, #344]	@ (8006494 <HAL_DMA_Abort_IT+0x1b0>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d036      	beq.n	80063ac <HAL_DMA_Abort_IT+0xc8>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a55      	ldr	r2, [pc, #340]	@ (8006498 <HAL_DMA_Abort_IT+0x1b4>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d031      	beq.n	80063ac <HAL_DMA_Abort_IT+0xc8>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a53      	ldr	r2, [pc, #332]	@ (800649c <HAL_DMA_Abort_IT+0x1b8>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d02c      	beq.n	80063ac <HAL_DMA_Abort_IT+0xc8>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a52      	ldr	r2, [pc, #328]	@ (80064a0 <HAL_DMA_Abort_IT+0x1bc>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d027      	beq.n	80063ac <HAL_DMA_Abort_IT+0xc8>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a50      	ldr	r2, [pc, #320]	@ (80064a4 <HAL_DMA_Abort_IT+0x1c0>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d022      	beq.n	80063ac <HAL_DMA_Abort_IT+0xc8>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a4f      	ldr	r2, [pc, #316]	@ (80064a8 <HAL_DMA_Abort_IT+0x1c4>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d01d      	beq.n	80063ac <HAL_DMA_Abort_IT+0xc8>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a4d      	ldr	r2, [pc, #308]	@ (80064ac <HAL_DMA_Abort_IT+0x1c8>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d018      	beq.n	80063ac <HAL_DMA_Abort_IT+0xc8>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a4c      	ldr	r2, [pc, #304]	@ (80064b0 <HAL_DMA_Abort_IT+0x1cc>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d013      	beq.n	80063ac <HAL_DMA_Abort_IT+0xc8>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a4a      	ldr	r2, [pc, #296]	@ (80064b4 <HAL_DMA_Abort_IT+0x1d0>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d00e      	beq.n	80063ac <HAL_DMA_Abort_IT+0xc8>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a49      	ldr	r2, [pc, #292]	@ (80064b8 <HAL_DMA_Abort_IT+0x1d4>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d009      	beq.n	80063ac <HAL_DMA_Abort_IT+0xc8>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a47      	ldr	r2, [pc, #284]	@ (80064bc <HAL_DMA_Abort_IT+0x1d8>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d004      	beq.n	80063ac <HAL_DMA_Abort_IT+0xc8>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a46      	ldr	r2, [pc, #280]	@ (80064c0 <HAL_DMA_Abort_IT+0x1dc>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d101      	bne.n	80063b0 <HAL_DMA_Abort_IT+0xcc>
 80063ac:	2301      	movs	r3, #1
 80063ae:	e000      	b.n	80063b2 <HAL_DMA_Abort_IT+0xce>
 80063b0:	2300      	movs	r3, #0
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	f000 8086 	beq.w	80064c4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2204      	movs	r2, #4
 80063bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a2f      	ldr	r2, [pc, #188]	@ (8006484 <HAL_DMA_Abort_IT+0x1a0>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d04a      	beq.n	8006460 <HAL_DMA_Abort_IT+0x17c>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a2e      	ldr	r2, [pc, #184]	@ (8006488 <HAL_DMA_Abort_IT+0x1a4>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d045      	beq.n	8006460 <HAL_DMA_Abort_IT+0x17c>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a2c      	ldr	r2, [pc, #176]	@ (800648c <HAL_DMA_Abort_IT+0x1a8>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d040      	beq.n	8006460 <HAL_DMA_Abort_IT+0x17c>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a2b      	ldr	r2, [pc, #172]	@ (8006490 <HAL_DMA_Abort_IT+0x1ac>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d03b      	beq.n	8006460 <HAL_DMA_Abort_IT+0x17c>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a29      	ldr	r2, [pc, #164]	@ (8006494 <HAL_DMA_Abort_IT+0x1b0>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d036      	beq.n	8006460 <HAL_DMA_Abort_IT+0x17c>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a28      	ldr	r2, [pc, #160]	@ (8006498 <HAL_DMA_Abort_IT+0x1b4>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d031      	beq.n	8006460 <HAL_DMA_Abort_IT+0x17c>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a26      	ldr	r2, [pc, #152]	@ (800649c <HAL_DMA_Abort_IT+0x1b8>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d02c      	beq.n	8006460 <HAL_DMA_Abort_IT+0x17c>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a25      	ldr	r2, [pc, #148]	@ (80064a0 <HAL_DMA_Abort_IT+0x1bc>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d027      	beq.n	8006460 <HAL_DMA_Abort_IT+0x17c>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a23      	ldr	r2, [pc, #140]	@ (80064a4 <HAL_DMA_Abort_IT+0x1c0>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d022      	beq.n	8006460 <HAL_DMA_Abort_IT+0x17c>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a22      	ldr	r2, [pc, #136]	@ (80064a8 <HAL_DMA_Abort_IT+0x1c4>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d01d      	beq.n	8006460 <HAL_DMA_Abort_IT+0x17c>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a20      	ldr	r2, [pc, #128]	@ (80064ac <HAL_DMA_Abort_IT+0x1c8>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d018      	beq.n	8006460 <HAL_DMA_Abort_IT+0x17c>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a1f      	ldr	r2, [pc, #124]	@ (80064b0 <HAL_DMA_Abort_IT+0x1cc>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d013      	beq.n	8006460 <HAL_DMA_Abort_IT+0x17c>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a1d      	ldr	r2, [pc, #116]	@ (80064b4 <HAL_DMA_Abort_IT+0x1d0>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d00e      	beq.n	8006460 <HAL_DMA_Abort_IT+0x17c>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a1c      	ldr	r2, [pc, #112]	@ (80064b8 <HAL_DMA_Abort_IT+0x1d4>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d009      	beq.n	8006460 <HAL_DMA_Abort_IT+0x17c>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a1a      	ldr	r2, [pc, #104]	@ (80064bc <HAL_DMA_Abort_IT+0x1d8>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d004      	beq.n	8006460 <HAL_DMA_Abort_IT+0x17c>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a19      	ldr	r2, [pc, #100]	@ (80064c0 <HAL_DMA_Abort_IT+0x1dc>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d108      	bne.n	8006472 <HAL_DMA_Abort_IT+0x18e>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f022 0201 	bic.w	r2, r2, #1
 800646e:	601a      	str	r2, [r3, #0]
 8006470:	e178      	b.n	8006764 <HAL_DMA_Abort_IT+0x480>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f022 0201 	bic.w	r2, r2, #1
 8006480:	601a      	str	r2, [r3, #0]
 8006482:	e16f      	b.n	8006764 <HAL_DMA_Abort_IT+0x480>
 8006484:	40020010 	.word	0x40020010
 8006488:	40020028 	.word	0x40020028
 800648c:	40020040 	.word	0x40020040
 8006490:	40020058 	.word	0x40020058
 8006494:	40020070 	.word	0x40020070
 8006498:	40020088 	.word	0x40020088
 800649c:	400200a0 	.word	0x400200a0
 80064a0:	400200b8 	.word	0x400200b8
 80064a4:	40020410 	.word	0x40020410
 80064a8:	40020428 	.word	0x40020428
 80064ac:	40020440 	.word	0x40020440
 80064b0:	40020458 	.word	0x40020458
 80064b4:	40020470 	.word	0x40020470
 80064b8:	40020488 	.word	0x40020488
 80064bc:	400204a0 	.word	0x400204a0
 80064c0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f022 020e 	bic.w	r2, r2, #14
 80064d2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a6c      	ldr	r2, [pc, #432]	@ (800668c <HAL_DMA_Abort_IT+0x3a8>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d04a      	beq.n	8006574 <HAL_DMA_Abort_IT+0x290>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a6b      	ldr	r2, [pc, #428]	@ (8006690 <HAL_DMA_Abort_IT+0x3ac>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d045      	beq.n	8006574 <HAL_DMA_Abort_IT+0x290>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a69      	ldr	r2, [pc, #420]	@ (8006694 <HAL_DMA_Abort_IT+0x3b0>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d040      	beq.n	8006574 <HAL_DMA_Abort_IT+0x290>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a68      	ldr	r2, [pc, #416]	@ (8006698 <HAL_DMA_Abort_IT+0x3b4>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d03b      	beq.n	8006574 <HAL_DMA_Abort_IT+0x290>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a66      	ldr	r2, [pc, #408]	@ (800669c <HAL_DMA_Abort_IT+0x3b8>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d036      	beq.n	8006574 <HAL_DMA_Abort_IT+0x290>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a65      	ldr	r2, [pc, #404]	@ (80066a0 <HAL_DMA_Abort_IT+0x3bc>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d031      	beq.n	8006574 <HAL_DMA_Abort_IT+0x290>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a63      	ldr	r2, [pc, #396]	@ (80066a4 <HAL_DMA_Abort_IT+0x3c0>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d02c      	beq.n	8006574 <HAL_DMA_Abort_IT+0x290>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a62      	ldr	r2, [pc, #392]	@ (80066a8 <HAL_DMA_Abort_IT+0x3c4>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d027      	beq.n	8006574 <HAL_DMA_Abort_IT+0x290>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a60      	ldr	r2, [pc, #384]	@ (80066ac <HAL_DMA_Abort_IT+0x3c8>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d022      	beq.n	8006574 <HAL_DMA_Abort_IT+0x290>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a5f      	ldr	r2, [pc, #380]	@ (80066b0 <HAL_DMA_Abort_IT+0x3cc>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d01d      	beq.n	8006574 <HAL_DMA_Abort_IT+0x290>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a5d      	ldr	r2, [pc, #372]	@ (80066b4 <HAL_DMA_Abort_IT+0x3d0>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d018      	beq.n	8006574 <HAL_DMA_Abort_IT+0x290>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a5c      	ldr	r2, [pc, #368]	@ (80066b8 <HAL_DMA_Abort_IT+0x3d4>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d013      	beq.n	8006574 <HAL_DMA_Abort_IT+0x290>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a5a      	ldr	r2, [pc, #360]	@ (80066bc <HAL_DMA_Abort_IT+0x3d8>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d00e      	beq.n	8006574 <HAL_DMA_Abort_IT+0x290>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a59      	ldr	r2, [pc, #356]	@ (80066c0 <HAL_DMA_Abort_IT+0x3dc>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d009      	beq.n	8006574 <HAL_DMA_Abort_IT+0x290>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a57      	ldr	r2, [pc, #348]	@ (80066c4 <HAL_DMA_Abort_IT+0x3e0>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d004      	beq.n	8006574 <HAL_DMA_Abort_IT+0x290>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a56      	ldr	r2, [pc, #344]	@ (80066c8 <HAL_DMA_Abort_IT+0x3e4>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d108      	bne.n	8006586 <HAL_DMA_Abort_IT+0x2a2>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f022 0201 	bic.w	r2, r2, #1
 8006582:	601a      	str	r2, [r3, #0]
 8006584:	e007      	b.n	8006596 <HAL_DMA_Abort_IT+0x2b2>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f022 0201 	bic.w	r2, r2, #1
 8006594:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a3c      	ldr	r2, [pc, #240]	@ (800668c <HAL_DMA_Abort_IT+0x3a8>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d072      	beq.n	8006686 <HAL_DMA_Abort_IT+0x3a2>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a3a      	ldr	r2, [pc, #232]	@ (8006690 <HAL_DMA_Abort_IT+0x3ac>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d06d      	beq.n	8006686 <HAL_DMA_Abort_IT+0x3a2>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a39      	ldr	r2, [pc, #228]	@ (8006694 <HAL_DMA_Abort_IT+0x3b0>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d068      	beq.n	8006686 <HAL_DMA_Abort_IT+0x3a2>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a37      	ldr	r2, [pc, #220]	@ (8006698 <HAL_DMA_Abort_IT+0x3b4>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d063      	beq.n	8006686 <HAL_DMA_Abort_IT+0x3a2>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a36      	ldr	r2, [pc, #216]	@ (800669c <HAL_DMA_Abort_IT+0x3b8>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d05e      	beq.n	8006686 <HAL_DMA_Abort_IT+0x3a2>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a34      	ldr	r2, [pc, #208]	@ (80066a0 <HAL_DMA_Abort_IT+0x3bc>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d059      	beq.n	8006686 <HAL_DMA_Abort_IT+0x3a2>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a33      	ldr	r2, [pc, #204]	@ (80066a4 <HAL_DMA_Abort_IT+0x3c0>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d054      	beq.n	8006686 <HAL_DMA_Abort_IT+0x3a2>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a31      	ldr	r2, [pc, #196]	@ (80066a8 <HAL_DMA_Abort_IT+0x3c4>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d04f      	beq.n	8006686 <HAL_DMA_Abort_IT+0x3a2>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a30      	ldr	r2, [pc, #192]	@ (80066ac <HAL_DMA_Abort_IT+0x3c8>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d04a      	beq.n	8006686 <HAL_DMA_Abort_IT+0x3a2>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a2e      	ldr	r2, [pc, #184]	@ (80066b0 <HAL_DMA_Abort_IT+0x3cc>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d045      	beq.n	8006686 <HAL_DMA_Abort_IT+0x3a2>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a2d      	ldr	r2, [pc, #180]	@ (80066b4 <HAL_DMA_Abort_IT+0x3d0>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d040      	beq.n	8006686 <HAL_DMA_Abort_IT+0x3a2>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a2b      	ldr	r2, [pc, #172]	@ (80066b8 <HAL_DMA_Abort_IT+0x3d4>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d03b      	beq.n	8006686 <HAL_DMA_Abort_IT+0x3a2>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a2a      	ldr	r2, [pc, #168]	@ (80066bc <HAL_DMA_Abort_IT+0x3d8>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d036      	beq.n	8006686 <HAL_DMA_Abort_IT+0x3a2>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a28      	ldr	r2, [pc, #160]	@ (80066c0 <HAL_DMA_Abort_IT+0x3dc>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d031      	beq.n	8006686 <HAL_DMA_Abort_IT+0x3a2>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a27      	ldr	r2, [pc, #156]	@ (80066c4 <HAL_DMA_Abort_IT+0x3e0>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d02c      	beq.n	8006686 <HAL_DMA_Abort_IT+0x3a2>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a25      	ldr	r2, [pc, #148]	@ (80066c8 <HAL_DMA_Abort_IT+0x3e4>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d027      	beq.n	8006686 <HAL_DMA_Abort_IT+0x3a2>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a24      	ldr	r2, [pc, #144]	@ (80066cc <HAL_DMA_Abort_IT+0x3e8>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d022      	beq.n	8006686 <HAL_DMA_Abort_IT+0x3a2>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a22      	ldr	r2, [pc, #136]	@ (80066d0 <HAL_DMA_Abort_IT+0x3ec>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d01d      	beq.n	8006686 <HAL_DMA_Abort_IT+0x3a2>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a21      	ldr	r2, [pc, #132]	@ (80066d4 <HAL_DMA_Abort_IT+0x3f0>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d018      	beq.n	8006686 <HAL_DMA_Abort_IT+0x3a2>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a1f      	ldr	r2, [pc, #124]	@ (80066d8 <HAL_DMA_Abort_IT+0x3f4>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d013      	beq.n	8006686 <HAL_DMA_Abort_IT+0x3a2>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a1e      	ldr	r2, [pc, #120]	@ (80066dc <HAL_DMA_Abort_IT+0x3f8>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d00e      	beq.n	8006686 <HAL_DMA_Abort_IT+0x3a2>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a1c      	ldr	r2, [pc, #112]	@ (80066e0 <HAL_DMA_Abort_IT+0x3fc>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d009      	beq.n	8006686 <HAL_DMA_Abort_IT+0x3a2>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a1b      	ldr	r2, [pc, #108]	@ (80066e4 <HAL_DMA_Abort_IT+0x400>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d004      	beq.n	8006686 <HAL_DMA_Abort_IT+0x3a2>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a19      	ldr	r2, [pc, #100]	@ (80066e8 <HAL_DMA_Abort_IT+0x404>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d132      	bne.n	80066ec <HAL_DMA_Abort_IT+0x408>
 8006686:	2301      	movs	r3, #1
 8006688:	e031      	b.n	80066ee <HAL_DMA_Abort_IT+0x40a>
 800668a:	bf00      	nop
 800668c:	40020010 	.word	0x40020010
 8006690:	40020028 	.word	0x40020028
 8006694:	40020040 	.word	0x40020040
 8006698:	40020058 	.word	0x40020058
 800669c:	40020070 	.word	0x40020070
 80066a0:	40020088 	.word	0x40020088
 80066a4:	400200a0 	.word	0x400200a0
 80066a8:	400200b8 	.word	0x400200b8
 80066ac:	40020410 	.word	0x40020410
 80066b0:	40020428 	.word	0x40020428
 80066b4:	40020440 	.word	0x40020440
 80066b8:	40020458 	.word	0x40020458
 80066bc:	40020470 	.word	0x40020470
 80066c0:	40020488 	.word	0x40020488
 80066c4:	400204a0 	.word	0x400204a0
 80066c8:	400204b8 	.word	0x400204b8
 80066cc:	58025408 	.word	0x58025408
 80066d0:	5802541c 	.word	0x5802541c
 80066d4:	58025430 	.word	0x58025430
 80066d8:	58025444 	.word	0x58025444
 80066dc:	58025458 	.word	0x58025458
 80066e0:	5802546c 	.word	0x5802546c
 80066e4:	58025480 	.word	0x58025480
 80066e8:	58025494 	.word	0x58025494
 80066ec:	2300      	movs	r3, #0
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d028      	beq.n	8006744 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006700:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006706:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800670c:	f003 031f 	and.w	r3, r3, #31
 8006710:	2201      	movs	r2, #1
 8006712:	409a      	lsls	r2, r3
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006720:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006726:	2b00      	cmp	r3, #0
 8006728:	d00c      	beq.n	8006744 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006734:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006738:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006742:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2201      	movs	r2, #1
 8006748:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006758:	2b00      	cmp	r3, #0
 800675a:	d003      	beq.n	8006764 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006764:	2300      	movs	r3, #0
}
 8006766:	4618      	mov	r0, r3
 8006768:	3710      	adds	r7, #16
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop

08006770 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b08a      	sub	sp, #40	@ 0x28
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006778:	2300      	movs	r3, #0
 800677a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800677c:	4b67      	ldr	r3, [pc, #412]	@ (800691c <HAL_DMA_IRQHandler+0x1ac>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a67      	ldr	r2, [pc, #412]	@ (8006920 <HAL_DMA_IRQHandler+0x1b0>)
 8006782:	fba2 2303 	umull	r2, r3, r2, r3
 8006786:	0a9b      	lsrs	r3, r3, #10
 8006788:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800678e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006794:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006796:	6a3b      	ldr	r3, [r7, #32]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800679c:	69fb      	ldr	r3, [r7, #28]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a5f      	ldr	r2, [pc, #380]	@ (8006924 <HAL_DMA_IRQHandler+0x1b4>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d04a      	beq.n	8006842 <HAL_DMA_IRQHandler+0xd2>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a5d      	ldr	r2, [pc, #372]	@ (8006928 <HAL_DMA_IRQHandler+0x1b8>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d045      	beq.n	8006842 <HAL_DMA_IRQHandler+0xd2>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a5c      	ldr	r2, [pc, #368]	@ (800692c <HAL_DMA_IRQHandler+0x1bc>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d040      	beq.n	8006842 <HAL_DMA_IRQHandler+0xd2>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a5a      	ldr	r2, [pc, #360]	@ (8006930 <HAL_DMA_IRQHandler+0x1c0>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d03b      	beq.n	8006842 <HAL_DMA_IRQHandler+0xd2>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a59      	ldr	r2, [pc, #356]	@ (8006934 <HAL_DMA_IRQHandler+0x1c4>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d036      	beq.n	8006842 <HAL_DMA_IRQHandler+0xd2>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a57      	ldr	r2, [pc, #348]	@ (8006938 <HAL_DMA_IRQHandler+0x1c8>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d031      	beq.n	8006842 <HAL_DMA_IRQHandler+0xd2>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a56      	ldr	r2, [pc, #344]	@ (800693c <HAL_DMA_IRQHandler+0x1cc>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d02c      	beq.n	8006842 <HAL_DMA_IRQHandler+0xd2>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a54      	ldr	r2, [pc, #336]	@ (8006940 <HAL_DMA_IRQHandler+0x1d0>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d027      	beq.n	8006842 <HAL_DMA_IRQHandler+0xd2>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a53      	ldr	r2, [pc, #332]	@ (8006944 <HAL_DMA_IRQHandler+0x1d4>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d022      	beq.n	8006842 <HAL_DMA_IRQHandler+0xd2>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a51      	ldr	r2, [pc, #324]	@ (8006948 <HAL_DMA_IRQHandler+0x1d8>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d01d      	beq.n	8006842 <HAL_DMA_IRQHandler+0xd2>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a50      	ldr	r2, [pc, #320]	@ (800694c <HAL_DMA_IRQHandler+0x1dc>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d018      	beq.n	8006842 <HAL_DMA_IRQHandler+0xd2>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a4e      	ldr	r2, [pc, #312]	@ (8006950 <HAL_DMA_IRQHandler+0x1e0>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d013      	beq.n	8006842 <HAL_DMA_IRQHandler+0xd2>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a4d      	ldr	r2, [pc, #308]	@ (8006954 <HAL_DMA_IRQHandler+0x1e4>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d00e      	beq.n	8006842 <HAL_DMA_IRQHandler+0xd2>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a4b      	ldr	r2, [pc, #300]	@ (8006958 <HAL_DMA_IRQHandler+0x1e8>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d009      	beq.n	8006842 <HAL_DMA_IRQHandler+0xd2>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a4a      	ldr	r2, [pc, #296]	@ (800695c <HAL_DMA_IRQHandler+0x1ec>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d004      	beq.n	8006842 <HAL_DMA_IRQHandler+0xd2>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a48      	ldr	r2, [pc, #288]	@ (8006960 <HAL_DMA_IRQHandler+0x1f0>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d101      	bne.n	8006846 <HAL_DMA_IRQHandler+0xd6>
 8006842:	2301      	movs	r3, #1
 8006844:	e000      	b.n	8006848 <HAL_DMA_IRQHandler+0xd8>
 8006846:	2300      	movs	r3, #0
 8006848:	2b00      	cmp	r3, #0
 800684a:	f000 842b 	beq.w	80070a4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006852:	f003 031f 	and.w	r3, r3, #31
 8006856:	2208      	movs	r2, #8
 8006858:	409a      	lsls	r2, r3
 800685a:	69bb      	ldr	r3, [r7, #24]
 800685c:	4013      	ands	r3, r2
 800685e:	2b00      	cmp	r3, #0
 8006860:	f000 80a2 	beq.w	80069a8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a2e      	ldr	r2, [pc, #184]	@ (8006924 <HAL_DMA_IRQHandler+0x1b4>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d04a      	beq.n	8006904 <HAL_DMA_IRQHandler+0x194>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a2d      	ldr	r2, [pc, #180]	@ (8006928 <HAL_DMA_IRQHandler+0x1b8>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d045      	beq.n	8006904 <HAL_DMA_IRQHandler+0x194>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a2b      	ldr	r2, [pc, #172]	@ (800692c <HAL_DMA_IRQHandler+0x1bc>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d040      	beq.n	8006904 <HAL_DMA_IRQHandler+0x194>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a2a      	ldr	r2, [pc, #168]	@ (8006930 <HAL_DMA_IRQHandler+0x1c0>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d03b      	beq.n	8006904 <HAL_DMA_IRQHandler+0x194>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a28      	ldr	r2, [pc, #160]	@ (8006934 <HAL_DMA_IRQHandler+0x1c4>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d036      	beq.n	8006904 <HAL_DMA_IRQHandler+0x194>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a27      	ldr	r2, [pc, #156]	@ (8006938 <HAL_DMA_IRQHandler+0x1c8>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d031      	beq.n	8006904 <HAL_DMA_IRQHandler+0x194>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a25      	ldr	r2, [pc, #148]	@ (800693c <HAL_DMA_IRQHandler+0x1cc>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d02c      	beq.n	8006904 <HAL_DMA_IRQHandler+0x194>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a24      	ldr	r2, [pc, #144]	@ (8006940 <HAL_DMA_IRQHandler+0x1d0>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d027      	beq.n	8006904 <HAL_DMA_IRQHandler+0x194>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a22      	ldr	r2, [pc, #136]	@ (8006944 <HAL_DMA_IRQHandler+0x1d4>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d022      	beq.n	8006904 <HAL_DMA_IRQHandler+0x194>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a21      	ldr	r2, [pc, #132]	@ (8006948 <HAL_DMA_IRQHandler+0x1d8>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d01d      	beq.n	8006904 <HAL_DMA_IRQHandler+0x194>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a1f      	ldr	r2, [pc, #124]	@ (800694c <HAL_DMA_IRQHandler+0x1dc>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d018      	beq.n	8006904 <HAL_DMA_IRQHandler+0x194>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a1e      	ldr	r2, [pc, #120]	@ (8006950 <HAL_DMA_IRQHandler+0x1e0>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d013      	beq.n	8006904 <HAL_DMA_IRQHandler+0x194>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a1c      	ldr	r2, [pc, #112]	@ (8006954 <HAL_DMA_IRQHandler+0x1e4>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d00e      	beq.n	8006904 <HAL_DMA_IRQHandler+0x194>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a1b      	ldr	r2, [pc, #108]	@ (8006958 <HAL_DMA_IRQHandler+0x1e8>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d009      	beq.n	8006904 <HAL_DMA_IRQHandler+0x194>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a19      	ldr	r2, [pc, #100]	@ (800695c <HAL_DMA_IRQHandler+0x1ec>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d004      	beq.n	8006904 <HAL_DMA_IRQHandler+0x194>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a18      	ldr	r2, [pc, #96]	@ (8006960 <HAL_DMA_IRQHandler+0x1f0>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d12f      	bne.n	8006964 <HAL_DMA_IRQHandler+0x1f4>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f003 0304 	and.w	r3, r3, #4
 800690e:	2b00      	cmp	r3, #0
 8006910:	bf14      	ite	ne
 8006912:	2301      	movne	r3, #1
 8006914:	2300      	moveq	r3, #0
 8006916:	b2db      	uxtb	r3, r3
 8006918:	e02e      	b.n	8006978 <HAL_DMA_IRQHandler+0x208>
 800691a:	bf00      	nop
 800691c:	24000000 	.word	0x24000000
 8006920:	1b4e81b5 	.word	0x1b4e81b5
 8006924:	40020010 	.word	0x40020010
 8006928:	40020028 	.word	0x40020028
 800692c:	40020040 	.word	0x40020040
 8006930:	40020058 	.word	0x40020058
 8006934:	40020070 	.word	0x40020070
 8006938:	40020088 	.word	0x40020088
 800693c:	400200a0 	.word	0x400200a0
 8006940:	400200b8 	.word	0x400200b8
 8006944:	40020410 	.word	0x40020410
 8006948:	40020428 	.word	0x40020428
 800694c:	40020440 	.word	0x40020440
 8006950:	40020458 	.word	0x40020458
 8006954:	40020470 	.word	0x40020470
 8006958:	40020488 	.word	0x40020488
 800695c:	400204a0 	.word	0x400204a0
 8006960:	400204b8 	.word	0x400204b8
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f003 0308 	and.w	r3, r3, #8
 800696e:	2b00      	cmp	r3, #0
 8006970:	bf14      	ite	ne
 8006972:	2301      	movne	r3, #1
 8006974:	2300      	moveq	r3, #0
 8006976:	b2db      	uxtb	r3, r3
 8006978:	2b00      	cmp	r3, #0
 800697a:	d015      	beq.n	80069a8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f022 0204 	bic.w	r2, r2, #4
 800698a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006990:	f003 031f 	and.w	r3, r3, #31
 8006994:	2208      	movs	r2, #8
 8006996:	409a      	lsls	r2, r3
 8006998:	6a3b      	ldr	r3, [r7, #32]
 800699a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069a0:	f043 0201 	orr.w	r2, r3, #1
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069ac:	f003 031f 	and.w	r3, r3, #31
 80069b0:	69ba      	ldr	r2, [r7, #24]
 80069b2:	fa22 f303 	lsr.w	r3, r2, r3
 80069b6:	f003 0301 	and.w	r3, r3, #1
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d06e      	beq.n	8006a9c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a69      	ldr	r2, [pc, #420]	@ (8006b68 <HAL_DMA_IRQHandler+0x3f8>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d04a      	beq.n	8006a5e <HAL_DMA_IRQHandler+0x2ee>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a67      	ldr	r2, [pc, #412]	@ (8006b6c <HAL_DMA_IRQHandler+0x3fc>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d045      	beq.n	8006a5e <HAL_DMA_IRQHandler+0x2ee>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a66      	ldr	r2, [pc, #408]	@ (8006b70 <HAL_DMA_IRQHandler+0x400>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d040      	beq.n	8006a5e <HAL_DMA_IRQHandler+0x2ee>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a64      	ldr	r2, [pc, #400]	@ (8006b74 <HAL_DMA_IRQHandler+0x404>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d03b      	beq.n	8006a5e <HAL_DMA_IRQHandler+0x2ee>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a63      	ldr	r2, [pc, #396]	@ (8006b78 <HAL_DMA_IRQHandler+0x408>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d036      	beq.n	8006a5e <HAL_DMA_IRQHandler+0x2ee>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a61      	ldr	r2, [pc, #388]	@ (8006b7c <HAL_DMA_IRQHandler+0x40c>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d031      	beq.n	8006a5e <HAL_DMA_IRQHandler+0x2ee>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a60      	ldr	r2, [pc, #384]	@ (8006b80 <HAL_DMA_IRQHandler+0x410>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d02c      	beq.n	8006a5e <HAL_DMA_IRQHandler+0x2ee>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a5e      	ldr	r2, [pc, #376]	@ (8006b84 <HAL_DMA_IRQHandler+0x414>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d027      	beq.n	8006a5e <HAL_DMA_IRQHandler+0x2ee>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a5d      	ldr	r2, [pc, #372]	@ (8006b88 <HAL_DMA_IRQHandler+0x418>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d022      	beq.n	8006a5e <HAL_DMA_IRQHandler+0x2ee>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a5b      	ldr	r2, [pc, #364]	@ (8006b8c <HAL_DMA_IRQHandler+0x41c>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d01d      	beq.n	8006a5e <HAL_DMA_IRQHandler+0x2ee>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a5a      	ldr	r2, [pc, #360]	@ (8006b90 <HAL_DMA_IRQHandler+0x420>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d018      	beq.n	8006a5e <HAL_DMA_IRQHandler+0x2ee>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a58      	ldr	r2, [pc, #352]	@ (8006b94 <HAL_DMA_IRQHandler+0x424>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d013      	beq.n	8006a5e <HAL_DMA_IRQHandler+0x2ee>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a57      	ldr	r2, [pc, #348]	@ (8006b98 <HAL_DMA_IRQHandler+0x428>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d00e      	beq.n	8006a5e <HAL_DMA_IRQHandler+0x2ee>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a55      	ldr	r2, [pc, #340]	@ (8006b9c <HAL_DMA_IRQHandler+0x42c>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d009      	beq.n	8006a5e <HAL_DMA_IRQHandler+0x2ee>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a54      	ldr	r2, [pc, #336]	@ (8006ba0 <HAL_DMA_IRQHandler+0x430>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d004      	beq.n	8006a5e <HAL_DMA_IRQHandler+0x2ee>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a52      	ldr	r2, [pc, #328]	@ (8006ba4 <HAL_DMA_IRQHandler+0x434>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d10a      	bne.n	8006a74 <HAL_DMA_IRQHandler+0x304>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	695b      	ldr	r3, [r3, #20]
 8006a64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	bf14      	ite	ne
 8006a6c:	2301      	movne	r3, #1
 8006a6e:	2300      	moveq	r3, #0
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	e003      	b.n	8006a7c <HAL_DMA_IRQHandler+0x30c>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d00d      	beq.n	8006a9c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a84:	f003 031f 	and.w	r3, r3, #31
 8006a88:	2201      	movs	r2, #1
 8006a8a:	409a      	lsls	r2, r3
 8006a8c:	6a3b      	ldr	r3, [r7, #32]
 8006a8e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a94:	f043 0202 	orr.w	r2, r3, #2
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006aa0:	f003 031f 	and.w	r3, r3, #31
 8006aa4:	2204      	movs	r2, #4
 8006aa6:	409a      	lsls	r2, r3
 8006aa8:	69bb      	ldr	r3, [r7, #24]
 8006aaa:	4013      	ands	r3, r2
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	f000 808f 	beq.w	8006bd0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a2c      	ldr	r2, [pc, #176]	@ (8006b68 <HAL_DMA_IRQHandler+0x3f8>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d04a      	beq.n	8006b52 <HAL_DMA_IRQHandler+0x3e2>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a2a      	ldr	r2, [pc, #168]	@ (8006b6c <HAL_DMA_IRQHandler+0x3fc>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d045      	beq.n	8006b52 <HAL_DMA_IRQHandler+0x3e2>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a29      	ldr	r2, [pc, #164]	@ (8006b70 <HAL_DMA_IRQHandler+0x400>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d040      	beq.n	8006b52 <HAL_DMA_IRQHandler+0x3e2>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a27      	ldr	r2, [pc, #156]	@ (8006b74 <HAL_DMA_IRQHandler+0x404>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d03b      	beq.n	8006b52 <HAL_DMA_IRQHandler+0x3e2>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a26      	ldr	r2, [pc, #152]	@ (8006b78 <HAL_DMA_IRQHandler+0x408>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d036      	beq.n	8006b52 <HAL_DMA_IRQHandler+0x3e2>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a24      	ldr	r2, [pc, #144]	@ (8006b7c <HAL_DMA_IRQHandler+0x40c>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d031      	beq.n	8006b52 <HAL_DMA_IRQHandler+0x3e2>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a23      	ldr	r2, [pc, #140]	@ (8006b80 <HAL_DMA_IRQHandler+0x410>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d02c      	beq.n	8006b52 <HAL_DMA_IRQHandler+0x3e2>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a21      	ldr	r2, [pc, #132]	@ (8006b84 <HAL_DMA_IRQHandler+0x414>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d027      	beq.n	8006b52 <HAL_DMA_IRQHandler+0x3e2>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a20      	ldr	r2, [pc, #128]	@ (8006b88 <HAL_DMA_IRQHandler+0x418>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d022      	beq.n	8006b52 <HAL_DMA_IRQHandler+0x3e2>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a1e      	ldr	r2, [pc, #120]	@ (8006b8c <HAL_DMA_IRQHandler+0x41c>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d01d      	beq.n	8006b52 <HAL_DMA_IRQHandler+0x3e2>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a1d      	ldr	r2, [pc, #116]	@ (8006b90 <HAL_DMA_IRQHandler+0x420>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d018      	beq.n	8006b52 <HAL_DMA_IRQHandler+0x3e2>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a1b      	ldr	r2, [pc, #108]	@ (8006b94 <HAL_DMA_IRQHandler+0x424>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d013      	beq.n	8006b52 <HAL_DMA_IRQHandler+0x3e2>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a1a      	ldr	r2, [pc, #104]	@ (8006b98 <HAL_DMA_IRQHandler+0x428>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d00e      	beq.n	8006b52 <HAL_DMA_IRQHandler+0x3e2>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a18      	ldr	r2, [pc, #96]	@ (8006b9c <HAL_DMA_IRQHandler+0x42c>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d009      	beq.n	8006b52 <HAL_DMA_IRQHandler+0x3e2>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a17      	ldr	r2, [pc, #92]	@ (8006ba0 <HAL_DMA_IRQHandler+0x430>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d004      	beq.n	8006b52 <HAL_DMA_IRQHandler+0x3e2>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a15      	ldr	r2, [pc, #84]	@ (8006ba4 <HAL_DMA_IRQHandler+0x434>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d12a      	bne.n	8006ba8 <HAL_DMA_IRQHandler+0x438>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f003 0302 	and.w	r3, r3, #2
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	bf14      	ite	ne
 8006b60:	2301      	movne	r3, #1
 8006b62:	2300      	moveq	r3, #0
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	e023      	b.n	8006bb0 <HAL_DMA_IRQHandler+0x440>
 8006b68:	40020010 	.word	0x40020010
 8006b6c:	40020028 	.word	0x40020028
 8006b70:	40020040 	.word	0x40020040
 8006b74:	40020058 	.word	0x40020058
 8006b78:	40020070 	.word	0x40020070
 8006b7c:	40020088 	.word	0x40020088
 8006b80:	400200a0 	.word	0x400200a0
 8006b84:	400200b8 	.word	0x400200b8
 8006b88:	40020410 	.word	0x40020410
 8006b8c:	40020428 	.word	0x40020428
 8006b90:	40020440 	.word	0x40020440
 8006b94:	40020458 	.word	0x40020458
 8006b98:	40020470 	.word	0x40020470
 8006b9c:	40020488 	.word	0x40020488
 8006ba0:	400204a0 	.word	0x400204a0
 8006ba4:	400204b8 	.word	0x400204b8
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	2300      	movs	r3, #0
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d00d      	beq.n	8006bd0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bb8:	f003 031f 	and.w	r3, r3, #31
 8006bbc:	2204      	movs	r2, #4
 8006bbe:	409a      	lsls	r2, r3
 8006bc0:	6a3b      	ldr	r3, [r7, #32]
 8006bc2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bc8:	f043 0204 	orr.w	r2, r3, #4
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bd4:	f003 031f 	and.w	r3, r3, #31
 8006bd8:	2210      	movs	r2, #16
 8006bda:	409a      	lsls	r2, r3
 8006bdc:	69bb      	ldr	r3, [r7, #24]
 8006bde:	4013      	ands	r3, r2
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	f000 80a6 	beq.w	8006d32 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a85      	ldr	r2, [pc, #532]	@ (8006e00 <HAL_DMA_IRQHandler+0x690>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d04a      	beq.n	8006c86 <HAL_DMA_IRQHandler+0x516>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a83      	ldr	r2, [pc, #524]	@ (8006e04 <HAL_DMA_IRQHandler+0x694>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d045      	beq.n	8006c86 <HAL_DMA_IRQHandler+0x516>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a82      	ldr	r2, [pc, #520]	@ (8006e08 <HAL_DMA_IRQHandler+0x698>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d040      	beq.n	8006c86 <HAL_DMA_IRQHandler+0x516>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a80      	ldr	r2, [pc, #512]	@ (8006e0c <HAL_DMA_IRQHandler+0x69c>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d03b      	beq.n	8006c86 <HAL_DMA_IRQHandler+0x516>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a7f      	ldr	r2, [pc, #508]	@ (8006e10 <HAL_DMA_IRQHandler+0x6a0>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d036      	beq.n	8006c86 <HAL_DMA_IRQHandler+0x516>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a7d      	ldr	r2, [pc, #500]	@ (8006e14 <HAL_DMA_IRQHandler+0x6a4>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d031      	beq.n	8006c86 <HAL_DMA_IRQHandler+0x516>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a7c      	ldr	r2, [pc, #496]	@ (8006e18 <HAL_DMA_IRQHandler+0x6a8>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d02c      	beq.n	8006c86 <HAL_DMA_IRQHandler+0x516>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a7a      	ldr	r2, [pc, #488]	@ (8006e1c <HAL_DMA_IRQHandler+0x6ac>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d027      	beq.n	8006c86 <HAL_DMA_IRQHandler+0x516>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a79      	ldr	r2, [pc, #484]	@ (8006e20 <HAL_DMA_IRQHandler+0x6b0>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d022      	beq.n	8006c86 <HAL_DMA_IRQHandler+0x516>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a77      	ldr	r2, [pc, #476]	@ (8006e24 <HAL_DMA_IRQHandler+0x6b4>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d01d      	beq.n	8006c86 <HAL_DMA_IRQHandler+0x516>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a76      	ldr	r2, [pc, #472]	@ (8006e28 <HAL_DMA_IRQHandler+0x6b8>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d018      	beq.n	8006c86 <HAL_DMA_IRQHandler+0x516>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a74      	ldr	r2, [pc, #464]	@ (8006e2c <HAL_DMA_IRQHandler+0x6bc>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d013      	beq.n	8006c86 <HAL_DMA_IRQHandler+0x516>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a73      	ldr	r2, [pc, #460]	@ (8006e30 <HAL_DMA_IRQHandler+0x6c0>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d00e      	beq.n	8006c86 <HAL_DMA_IRQHandler+0x516>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a71      	ldr	r2, [pc, #452]	@ (8006e34 <HAL_DMA_IRQHandler+0x6c4>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d009      	beq.n	8006c86 <HAL_DMA_IRQHandler+0x516>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a70      	ldr	r2, [pc, #448]	@ (8006e38 <HAL_DMA_IRQHandler+0x6c8>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d004      	beq.n	8006c86 <HAL_DMA_IRQHandler+0x516>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a6e      	ldr	r2, [pc, #440]	@ (8006e3c <HAL_DMA_IRQHandler+0x6cc>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d10a      	bne.n	8006c9c <HAL_DMA_IRQHandler+0x52c>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f003 0308 	and.w	r3, r3, #8
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	bf14      	ite	ne
 8006c94:	2301      	movne	r3, #1
 8006c96:	2300      	moveq	r3, #0
 8006c98:	b2db      	uxtb	r3, r3
 8006c9a:	e009      	b.n	8006cb0 <HAL_DMA_IRQHandler+0x540>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f003 0304 	and.w	r3, r3, #4
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	bf14      	ite	ne
 8006caa:	2301      	movne	r3, #1
 8006cac:	2300      	moveq	r3, #0
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d03e      	beq.n	8006d32 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cb8:	f003 031f 	and.w	r3, r3, #31
 8006cbc:	2210      	movs	r2, #16
 8006cbe:	409a      	lsls	r2, r3
 8006cc0:	6a3b      	ldr	r3, [r7, #32]
 8006cc2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d018      	beq.n	8006d04 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d108      	bne.n	8006cf2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d024      	beq.n	8006d32 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	4798      	blx	r3
 8006cf0:	e01f      	b.n	8006d32 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d01b      	beq.n	8006d32 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	4798      	blx	r3
 8006d02:	e016      	b.n	8006d32 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d107      	bne.n	8006d22 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f022 0208 	bic.w	r2, r2, #8
 8006d20:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d003      	beq.n	8006d32 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d36:	f003 031f 	and.w	r3, r3, #31
 8006d3a:	2220      	movs	r2, #32
 8006d3c:	409a      	lsls	r2, r3
 8006d3e:	69bb      	ldr	r3, [r7, #24]
 8006d40:	4013      	ands	r3, r2
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	f000 8110 	beq.w	8006f68 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a2c      	ldr	r2, [pc, #176]	@ (8006e00 <HAL_DMA_IRQHandler+0x690>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d04a      	beq.n	8006de8 <HAL_DMA_IRQHandler+0x678>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a2b      	ldr	r2, [pc, #172]	@ (8006e04 <HAL_DMA_IRQHandler+0x694>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d045      	beq.n	8006de8 <HAL_DMA_IRQHandler+0x678>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a29      	ldr	r2, [pc, #164]	@ (8006e08 <HAL_DMA_IRQHandler+0x698>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d040      	beq.n	8006de8 <HAL_DMA_IRQHandler+0x678>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a28      	ldr	r2, [pc, #160]	@ (8006e0c <HAL_DMA_IRQHandler+0x69c>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d03b      	beq.n	8006de8 <HAL_DMA_IRQHandler+0x678>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a26      	ldr	r2, [pc, #152]	@ (8006e10 <HAL_DMA_IRQHandler+0x6a0>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d036      	beq.n	8006de8 <HAL_DMA_IRQHandler+0x678>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a25      	ldr	r2, [pc, #148]	@ (8006e14 <HAL_DMA_IRQHandler+0x6a4>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d031      	beq.n	8006de8 <HAL_DMA_IRQHandler+0x678>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a23      	ldr	r2, [pc, #140]	@ (8006e18 <HAL_DMA_IRQHandler+0x6a8>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d02c      	beq.n	8006de8 <HAL_DMA_IRQHandler+0x678>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a22      	ldr	r2, [pc, #136]	@ (8006e1c <HAL_DMA_IRQHandler+0x6ac>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d027      	beq.n	8006de8 <HAL_DMA_IRQHandler+0x678>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a20      	ldr	r2, [pc, #128]	@ (8006e20 <HAL_DMA_IRQHandler+0x6b0>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d022      	beq.n	8006de8 <HAL_DMA_IRQHandler+0x678>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a1f      	ldr	r2, [pc, #124]	@ (8006e24 <HAL_DMA_IRQHandler+0x6b4>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d01d      	beq.n	8006de8 <HAL_DMA_IRQHandler+0x678>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a1d      	ldr	r2, [pc, #116]	@ (8006e28 <HAL_DMA_IRQHandler+0x6b8>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d018      	beq.n	8006de8 <HAL_DMA_IRQHandler+0x678>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a1c      	ldr	r2, [pc, #112]	@ (8006e2c <HAL_DMA_IRQHandler+0x6bc>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d013      	beq.n	8006de8 <HAL_DMA_IRQHandler+0x678>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a1a      	ldr	r2, [pc, #104]	@ (8006e30 <HAL_DMA_IRQHandler+0x6c0>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d00e      	beq.n	8006de8 <HAL_DMA_IRQHandler+0x678>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a19      	ldr	r2, [pc, #100]	@ (8006e34 <HAL_DMA_IRQHandler+0x6c4>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d009      	beq.n	8006de8 <HAL_DMA_IRQHandler+0x678>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a17      	ldr	r2, [pc, #92]	@ (8006e38 <HAL_DMA_IRQHandler+0x6c8>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d004      	beq.n	8006de8 <HAL_DMA_IRQHandler+0x678>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a16      	ldr	r2, [pc, #88]	@ (8006e3c <HAL_DMA_IRQHandler+0x6cc>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d12b      	bne.n	8006e40 <HAL_DMA_IRQHandler+0x6d0>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f003 0310 	and.w	r3, r3, #16
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	bf14      	ite	ne
 8006df6:	2301      	movne	r3, #1
 8006df8:	2300      	moveq	r3, #0
 8006dfa:	b2db      	uxtb	r3, r3
 8006dfc:	e02a      	b.n	8006e54 <HAL_DMA_IRQHandler+0x6e4>
 8006dfe:	bf00      	nop
 8006e00:	40020010 	.word	0x40020010
 8006e04:	40020028 	.word	0x40020028
 8006e08:	40020040 	.word	0x40020040
 8006e0c:	40020058 	.word	0x40020058
 8006e10:	40020070 	.word	0x40020070
 8006e14:	40020088 	.word	0x40020088
 8006e18:	400200a0 	.word	0x400200a0
 8006e1c:	400200b8 	.word	0x400200b8
 8006e20:	40020410 	.word	0x40020410
 8006e24:	40020428 	.word	0x40020428
 8006e28:	40020440 	.word	0x40020440
 8006e2c:	40020458 	.word	0x40020458
 8006e30:	40020470 	.word	0x40020470
 8006e34:	40020488 	.word	0x40020488
 8006e38:	400204a0 	.word	0x400204a0
 8006e3c:	400204b8 	.word	0x400204b8
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f003 0302 	and.w	r3, r3, #2
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	bf14      	ite	ne
 8006e4e:	2301      	movne	r3, #1
 8006e50:	2300      	moveq	r3, #0
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	f000 8087 	beq.w	8006f68 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e5e:	f003 031f 	and.w	r3, r3, #31
 8006e62:	2220      	movs	r2, #32
 8006e64:	409a      	lsls	r2, r3
 8006e66:	6a3b      	ldr	r3, [r7, #32]
 8006e68:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	2b04      	cmp	r3, #4
 8006e74:	d139      	bne.n	8006eea <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f022 0216 	bic.w	r2, r2, #22
 8006e84:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	695a      	ldr	r2, [r3, #20]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006e94:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d103      	bne.n	8006ea6 <HAL_DMA_IRQHandler+0x736>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d007      	beq.n	8006eb6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f022 0208 	bic.w	r2, r2, #8
 8006eb4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006eba:	f003 031f 	and.w	r3, r3, #31
 8006ebe:	223f      	movs	r2, #63	@ 0x3f
 8006ec0:	409a      	lsls	r2, r3
 8006ec2:	6a3b      	ldr	r3, [r7, #32]
 8006ec4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	f000 834a 	beq.w	8007574 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	4798      	blx	r3
          }
          return;
 8006ee8:	e344      	b.n	8007574 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d018      	beq.n	8006f2a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d108      	bne.n	8006f18 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d02c      	beq.n	8006f68 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	4798      	blx	r3
 8006f16:	e027      	b.n	8006f68 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d023      	beq.n	8006f68 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	4798      	blx	r3
 8006f28:	e01e      	b.n	8006f68 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d10f      	bne.n	8006f58 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f022 0210 	bic.w	r2, r2, #16
 8006f46:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d003      	beq.n	8006f68 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	f000 8306 	beq.w	800757e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f76:	f003 0301 	and.w	r3, r3, #1
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	f000 8088 	beq.w	8007090 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2204      	movs	r2, #4
 8006f84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a7a      	ldr	r2, [pc, #488]	@ (8007178 <HAL_DMA_IRQHandler+0xa08>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d04a      	beq.n	8007028 <HAL_DMA_IRQHandler+0x8b8>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a79      	ldr	r2, [pc, #484]	@ (800717c <HAL_DMA_IRQHandler+0xa0c>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d045      	beq.n	8007028 <HAL_DMA_IRQHandler+0x8b8>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a77      	ldr	r2, [pc, #476]	@ (8007180 <HAL_DMA_IRQHandler+0xa10>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d040      	beq.n	8007028 <HAL_DMA_IRQHandler+0x8b8>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a76      	ldr	r2, [pc, #472]	@ (8007184 <HAL_DMA_IRQHandler+0xa14>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d03b      	beq.n	8007028 <HAL_DMA_IRQHandler+0x8b8>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a74      	ldr	r2, [pc, #464]	@ (8007188 <HAL_DMA_IRQHandler+0xa18>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d036      	beq.n	8007028 <HAL_DMA_IRQHandler+0x8b8>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a73      	ldr	r2, [pc, #460]	@ (800718c <HAL_DMA_IRQHandler+0xa1c>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d031      	beq.n	8007028 <HAL_DMA_IRQHandler+0x8b8>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a71      	ldr	r2, [pc, #452]	@ (8007190 <HAL_DMA_IRQHandler+0xa20>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d02c      	beq.n	8007028 <HAL_DMA_IRQHandler+0x8b8>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a70      	ldr	r2, [pc, #448]	@ (8007194 <HAL_DMA_IRQHandler+0xa24>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d027      	beq.n	8007028 <HAL_DMA_IRQHandler+0x8b8>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a6e      	ldr	r2, [pc, #440]	@ (8007198 <HAL_DMA_IRQHandler+0xa28>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d022      	beq.n	8007028 <HAL_DMA_IRQHandler+0x8b8>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a6d      	ldr	r2, [pc, #436]	@ (800719c <HAL_DMA_IRQHandler+0xa2c>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d01d      	beq.n	8007028 <HAL_DMA_IRQHandler+0x8b8>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a6b      	ldr	r2, [pc, #428]	@ (80071a0 <HAL_DMA_IRQHandler+0xa30>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d018      	beq.n	8007028 <HAL_DMA_IRQHandler+0x8b8>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a6a      	ldr	r2, [pc, #424]	@ (80071a4 <HAL_DMA_IRQHandler+0xa34>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d013      	beq.n	8007028 <HAL_DMA_IRQHandler+0x8b8>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a68      	ldr	r2, [pc, #416]	@ (80071a8 <HAL_DMA_IRQHandler+0xa38>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d00e      	beq.n	8007028 <HAL_DMA_IRQHandler+0x8b8>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a67      	ldr	r2, [pc, #412]	@ (80071ac <HAL_DMA_IRQHandler+0xa3c>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d009      	beq.n	8007028 <HAL_DMA_IRQHandler+0x8b8>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a65      	ldr	r2, [pc, #404]	@ (80071b0 <HAL_DMA_IRQHandler+0xa40>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d004      	beq.n	8007028 <HAL_DMA_IRQHandler+0x8b8>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a64      	ldr	r2, [pc, #400]	@ (80071b4 <HAL_DMA_IRQHandler+0xa44>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d108      	bne.n	800703a <HAL_DMA_IRQHandler+0x8ca>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f022 0201 	bic.w	r2, r2, #1
 8007036:	601a      	str	r2, [r3, #0]
 8007038:	e007      	b.n	800704a <HAL_DMA_IRQHandler+0x8da>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f022 0201 	bic.w	r2, r2, #1
 8007048:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	3301      	adds	r3, #1
 800704e:	60fb      	str	r3, [r7, #12]
 8007050:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007052:	429a      	cmp	r2, r3
 8007054:	d307      	bcc.n	8007066 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f003 0301 	and.w	r3, r3, #1
 8007060:	2b00      	cmp	r3, #0
 8007062:	d1f2      	bne.n	800704a <HAL_DMA_IRQHandler+0x8da>
 8007064:	e000      	b.n	8007068 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007066:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f003 0301 	and.w	r3, r3, #1
 8007072:	2b00      	cmp	r3, #0
 8007074:	d004      	beq.n	8007080 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2203      	movs	r2, #3
 800707a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800707e:	e003      	b.n	8007088 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2201      	movs	r2, #1
 8007084:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2200      	movs	r2, #0
 800708c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007094:	2b00      	cmp	r3, #0
 8007096:	f000 8272 	beq.w	800757e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	4798      	blx	r3
 80070a2:	e26c      	b.n	800757e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a43      	ldr	r2, [pc, #268]	@ (80071b8 <HAL_DMA_IRQHandler+0xa48>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d022      	beq.n	80070f4 <HAL_DMA_IRQHandler+0x984>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a42      	ldr	r2, [pc, #264]	@ (80071bc <HAL_DMA_IRQHandler+0xa4c>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d01d      	beq.n	80070f4 <HAL_DMA_IRQHandler+0x984>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a40      	ldr	r2, [pc, #256]	@ (80071c0 <HAL_DMA_IRQHandler+0xa50>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d018      	beq.n	80070f4 <HAL_DMA_IRQHandler+0x984>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a3f      	ldr	r2, [pc, #252]	@ (80071c4 <HAL_DMA_IRQHandler+0xa54>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d013      	beq.n	80070f4 <HAL_DMA_IRQHandler+0x984>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a3d      	ldr	r2, [pc, #244]	@ (80071c8 <HAL_DMA_IRQHandler+0xa58>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d00e      	beq.n	80070f4 <HAL_DMA_IRQHandler+0x984>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a3c      	ldr	r2, [pc, #240]	@ (80071cc <HAL_DMA_IRQHandler+0xa5c>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d009      	beq.n	80070f4 <HAL_DMA_IRQHandler+0x984>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a3a      	ldr	r2, [pc, #232]	@ (80071d0 <HAL_DMA_IRQHandler+0xa60>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d004      	beq.n	80070f4 <HAL_DMA_IRQHandler+0x984>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a39      	ldr	r2, [pc, #228]	@ (80071d4 <HAL_DMA_IRQHandler+0xa64>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d101      	bne.n	80070f8 <HAL_DMA_IRQHandler+0x988>
 80070f4:	2301      	movs	r3, #1
 80070f6:	e000      	b.n	80070fa <HAL_DMA_IRQHandler+0x98a>
 80070f8:	2300      	movs	r3, #0
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	f000 823f 	beq.w	800757e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800710c:	f003 031f 	and.w	r3, r3, #31
 8007110:	2204      	movs	r2, #4
 8007112:	409a      	lsls	r2, r3
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	4013      	ands	r3, r2
 8007118:	2b00      	cmp	r3, #0
 800711a:	f000 80cd 	beq.w	80072b8 <HAL_DMA_IRQHandler+0xb48>
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	f003 0304 	and.w	r3, r3, #4
 8007124:	2b00      	cmp	r3, #0
 8007126:	f000 80c7 	beq.w	80072b8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800712e:	f003 031f 	and.w	r3, r3, #31
 8007132:	2204      	movs	r2, #4
 8007134:	409a      	lsls	r2, r3
 8007136:	69fb      	ldr	r3, [r7, #28]
 8007138:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007140:	2b00      	cmp	r3, #0
 8007142:	d049      	beq.n	80071d8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800714a:	2b00      	cmp	r3, #0
 800714c:	d109      	bne.n	8007162 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007152:	2b00      	cmp	r3, #0
 8007154:	f000 8210 	beq.w	8007578 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007160:	e20a      	b.n	8007578 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007166:	2b00      	cmp	r3, #0
 8007168:	f000 8206 	beq.w	8007578 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007174:	e200      	b.n	8007578 <HAL_DMA_IRQHandler+0xe08>
 8007176:	bf00      	nop
 8007178:	40020010 	.word	0x40020010
 800717c:	40020028 	.word	0x40020028
 8007180:	40020040 	.word	0x40020040
 8007184:	40020058 	.word	0x40020058
 8007188:	40020070 	.word	0x40020070
 800718c:	40020088 	.word	0x40020088
 8007190:	400200a0 	.word	0x400200a0
 8007194:	400200b8 	.word	0x400200b8
 8007198:	40020410 	.word	0x40020410
 800719c:	40020428 	.word	0x40020428
 80071a0:	40020440 	.word	0x40020440
 80071a4:	40020458 	.word	0x40020458
 80071a8:	40020470 	.word	0x40020470
 80071ac:	40020488 	.word	0x40020488
 80071b0:	400204a0 	.word	0x400204a0
 80071b4:	400204b8 	.word	0x400204b8
 80071b8:	58025408 	.word	0x58025408
 80071bc:	5802541c 	.word	0x5802541c
 80071c0:	58025430 	.word	0x58025430
 80071c4:	58025444 	.word	0x58025444
 80071c8:	58025458 	.word	0x58025458
 80071cc:	5802546c 	.word	0x5802546c
 80071d0:	58025480 	.word	0x58025480
 80071d4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	f003 0320 	and.w	r3, r3, #32
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d160      	bne.n	80072a4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a7f      	ldr	r2, [pc, #508]	@ (80073e4 <HAL_DMA_IRQHandler+0xc74>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d04a      	beq.n	8007282 <HAL_DMA_IRQHandler+0xb12>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a7d      	ldr	r2, [pc, #500]	@ (80073e8 <HAL_DMA_IRQHandler+0xc78>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d045      	beq.n	8007282 <HAL_DMA_IRQHandler+0xb12>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a7c      	ldr	r2, [pc, #496]	@ (80073ec <HAL_DMA_IRQHandler+0xc7c>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d040      	beq.n	8007282 <HAL_DMA_IRQHandler+0xb12>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a7a      	ldr	r2, [pc, #488]	@ (80073f0 <HAL_DMA_IRQHandler+0xc80>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d03b      	beq.n	8007282 <HAL_DMA_IRQHandler+0xb12>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a79      	ldr	r2, [pc, #484]	@ (80073f4 <HAL_DMA_IRQHandler+0xc84>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d036      	beq.n	8007282 <HAL_DMA_IRQHandler+0xb12>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a77      	ldr	r2, [pc, #476]	@ (80073f8 <HAL_DMA_IRQHandler+0xc88>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d031      	beq.n	8007282 <HAL_DMA_IRQHandler+0xb12>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a76      	ldr	r2, [pc, #472]	@ (80073fc <HAL_DMA_IRQHandler+0xc8c>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d02c      	beq.n	8007282 <HAL_DMA_IRQHandler+0xb12>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a74      	ldr	r2, [pc, #464]	@ (8007400 <HAL_DMA_IRQHandler+0xc90>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d027      	beq.n	8007282 <HAL_DMA_IRQHandler+0xb12>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a73      	ldr	r2, [pc, #460]	@ (8007404 <HAL_DMA_IRQHandler+0xc94>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d022      	beq.n	8007282 <HAL_DMA_IRQHandler+0xb12>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a71      	ldr	r2, [pc, #452]	@ (8007408 <HAL_DMA_IRQHandler+0xc98>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d01d      	beq.n	8007282 <HAL_DMA_IRQHandler+0xb12>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a70      	ldr	r2, [pc, #448]	@ (800740c <HAL_DMA_IRQHandler+0xc9c>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d018      	beq.n	8007282 <HAL_DMA_IRQHandler+0xb12>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a6e      	ldr	r2, [pc, #440]	@ (8007410 <HAL_DMA_IRQHandler+0xca0>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d013      	beq.n	8007282 <HAL_DMA_IRQHandler+0xb12>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a6d      	ldr	r2, [pc, #436]	@ (8007414 <HAL_DMA_IRQHandler+0xca4>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d00e      	beq.n	8007282 <HAL_DMA_IRQHandler+0xb12>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a6b      	ldr	r2, [pc, #428]	@ (8007418 <HAL_DMA_IRQHandler+0xca8>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d009      	beq.n	8007282 <HAL_DMA_IRQHandler+0xb12>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a6a      	ldr	r2, [pc, #424]	@ (800741c <HAL_DMA_IRQHandler+0xcac>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d004      	beq.n	8007282 <HAL_DMA_IRQHandler+0xb12>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a68      	ldr	r2, [pc, #416]	@ (8007420 <HAL_DMA_IRQHandler+0xcb0>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d108      	bne.n	8007294 <HAL_DMA_IRQHandler+0xb24>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f022 0208 	bic.w	r2, r2, #8
 8007290:	601a      	str	r2, [r3, #0]
 8007292:	e007      	b.n	80072a4 <HAL_DMA_IRQHandler+0xb34>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f022 0204 	bic.w	r2, r2, #4
 80072a2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	f000 8165 	beq.w	8007578 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80072b6:	e15f      	b.n	8007578 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072bc:	f003 031f 	and.w	r3, r3, #31
 80072c0:	2202      	movs	r2, #2
 80072c2:	409a      	lsls	r2, r3
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	4013      	ands	r3, r2
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	f000 80c5 	beq.w	8007458 <HAL_DMA_IRQHandler+0xce8>
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	f003 0302 	and.w	r3, r3, #2
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	f000 80bf 	beq.w	8007458 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072de:	f003 031f 	and.w	r3, r3, #31
 80072e2:	2202      	movs	r2, #2
 80072e4:	409a      	lsls	r2, r3
 80072e6:	69fb      	ldr	r3, [r7, #28]
 80072e8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d018      	beq.n	8007326 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d109      	bne.n	8007312 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007302:	2b00      	cmp	r3, #0
 8007304:	f000 813a 	beq.w	800757c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007310:	e134      	b.n	800757c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007316:	2b00      	cmp	r3, #0
 8007318:	f000 8130 	beq.w	800757c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007324:	e12a      	b.n	800757c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	f003 0320 	and.w	r3, r3, #32
 800732c:	2b00      	cmp	r3, #0
 800732e:	f040 8089 	bne.w	8007444 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a2b      	ldr	r2, [pc, #172]	@ (80073e4 <HAL_DMA_IRQHandler+0xc74>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d04a      	beq.n	80073d2 <HAL_DMA_IRQHandler+0xc62>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a29      	ldr	r2, [pc, #164]	@ (80073e8 <HAL_DMA_IRQHandler+0xc78>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d045      	beq.n	80073d2 <HAL_DMA_IRQHandler+0xc62>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a28      	ldr	r2, [pc, #160]	@ (80073ec <HAL_DMA_IRQHandler+0xc7c>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d040      	beq.n	80073d2 <HAL_DMA_IRQHandler+0xc62>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a26      	ldr	r2, [pc, #152]	@ (80073f0 <HAL_DMA_IRQHandler+0xc80>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d03b      	beq.n	80073d2 <HAL_DMA_IRQHandler+0xc62>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a25      	ldr	r2, [pc, #148]	@ (80073f4 <HAL_DMA_IRQHandler+0xc84>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d036      	beq.n	80073d2 <HAL_DMA_IRQHandler+0xc62>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a23      	ldr	r2, [pc, #140]	@ (80073f8 <HAL_DMA_IRQHandler+0xc88>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d031      	beq.n	80073d2 <HAL_DMA_IRQHandler+0xc62>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a22      	ldr	r2, [pc, #136]	@ (80073fc <HAL_DMA_IRQHandler+0xc8c>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d02c      	beq.n	80073d2 <HAL_DMA_IRQHandler+0xc62>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a20      	ldr	r2, [pc, #128]	@ (8007400 <HAL_DMA_IRQHandler+0xc90>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d027      	beq.n	80073d2 <HAL_DMA_IRQHandler+0xc62>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a1f      	ldr	r2, [pc, #124]	@ (8007404 <HAL_DMA_IRQHandler+0xc94>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d022      	beq.n	80073d2 <HAL_DMA_IRQHandler+0xc62>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a1d      	ldr	r2, [pc, #116]	@ (8007408 <HAL_DMA_IRQHandler+0xc98>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d01d      	beq.n	80073d2 <HAL_DMA_IRQHandler+0xc62>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a1c      	ldr	r2, [pc, #112]	@ (800740c <HAL_DMA_IRQHandler+0xc9c>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d018      	beq.n	80073d2 <HAL_DMA_IRQHandler+0xc62>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a1a      	ldr	r2, [pc, #104]	@ (8007410 <HAL_DMA_IRQHandler+0xca0>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d013      	beq.n	80073d2 <HAL_DMA_IRQHandler+0xc62>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a19      	ldr	r2, [pc, #100]	@ (8007414 <HAL_DMA_IRQHandler+0xca4>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d00e      	beq.n	80073d2 <HAL_DMA_IRQHandler+0xc62>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a17      	ldr	r2, [pc, #92]	@ (8007418 <HAL_DMA_IRQHandler+0xca8>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d009      	beq.n	80073d2 <HAL_DMA_IRQHandler+0xc62>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a16      	ldr	r2, [pc, #88]	@ (800741c <HAL_DMA_IRQHandler+0xcac>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d004      	beq.n	80073d2 <HAL_DMA_IRQHandler+0xc62>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a14      	ldr	r2, [pc, #80]	@ (8007420 <HAL_DMA_IRQHandler+0xcb0>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d128      	bne.n	8007424 <HAL_DMA_IRQHandler+0xcb4>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	681a      	ldr	r2, [r3, #0]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f022 0214 	bic.w	r2, r2, #20
 80073e0:	601a      	str	r2, [r3, #0]
 80073e2:	e027      	b.n	8007434 <HAL_DMA_IRQHandler+0xcc4>
 80073e4:	40020010 	.word	0x40020010
 80073e8:	40020028 	.word	0x40020028
 80073ec:	40020040 	.word	0x40020040
 80073f0:	40020058 	.word	0x40020058
 80073f4:	40020070 	.word	0x40020070
 80073f8:	40020088 	.word	0x40020088
 80073fc:	400200a0 	.word	0x400200a0
 8007400:	400200b8 	.word	0x400200b8
 8007404:	40020410 	.word	0x40020410
 8007408:	40020428 	.word	0x40020428
 800740c:	40020440 	.word	0x40020440
 8007410:	40020458 	.word	0x40020458
 8007414:	40020470 	.word	0x40020470
 8007418:	40020488 	.word	0x40020488
 800741c:	400204a0 	.word	0x400204a0
 8007420:	400204b8 	.word	0x400204b8
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f022 020a 	bic.w	r2, r2, #10
 8007432:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2201      	movs	r2, #1
 8007438:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2200      	movs	r2, #0
 8007440:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007448:	2b00      	cmp	r3, #0
 800744a:	f000 8097 	beq.w	800757c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007456:	e091      	b.n	800757c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800745c:	f003 031f 	and.w	r3, r3, #31
 8007460:	2208      	movs	r2, #8
 8007462:	409a      	lsls	r2, r3
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	4013      	ands	r3, r2
 8007468:	2b00      	cmp	r3, #0
 800746a:	f000 8088 	beq.w	800757e <HAL_DMA_IRQHandler+0xe0e>
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	f003 0308 	and.w	r3, r3, #8
 8007474:	2b00      	cmp	r3, #0
 8007476:	f000 8082 	beq.w	800757e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a41      	ldr	r2, [pc, #260]	@ (8007584 <HAL_DMA_IRQHandler+0xe14>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d04a      	beq.n	800751a <HAL_DMA_IRQHandler+0xdaa>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a3f      	ldr	r2, [pc, #252]	@ (8007588 <HAL_DMA_IRQHandler+0xe18>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d045      	beq.n	800751a <HAL_DMA_IRQHandler+0xdaa>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a3e      	ldr	r2, [pc, #248]	@ (800758c <HAL_DMA_IRQHandler+0xe1c>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d040      	beq.n	800751a <HAL_DMA_IRQHandler+0xdaa>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a3c      	ldr	r2, [pc, #240]	@ (8007590 <HAL_DMA_IRQHandler+0xe20>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d03b      	beq.n	800751a <HAL_DMA_IRQHandler+0xdaa>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a3b      	ldr	r2, [pc, #236]	@ (8007594 <HAL_DMA_IRQHandler+0xe24>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d036      	beq.n	800751a <HAL_DMA_IRQHandler+0xdaa>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a39      	ldr	r2, [pc, #228]	@ (8007598 <HAL_DMA_IRQHandler+0xe28>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d031      	beq.n	800751a <HAL_DMA_IRQHandler+0xdaa>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a38      	ldr	r2, [pc, #224]	@ (800759c <HAL_DMA_IRQHandler+0xe2c>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d02c      	beq.n	800751a <HAL_DMA_IRQHandler+0xdaa>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a36      	ldr	r2, [pc, #216]	@ (80075a0 <HAL_DMA_IRQHandler+0xe30>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d027      	beq.n	800751a <HAL_DMA_IRQHandler+0xdaa>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a35      	ldr	r2, [pc, #212]	@ (80075a4 <HAL_DMA_IRQHandler+0xe34>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d022      	beq.n	800751a <HAL_DMA_IRQHandler+0xdaa>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a33      	ldr	r2, [pc, #204]	@ (80075a8 <HAL_DMA_IRQHandler+0xe38>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d01d      	beq.n	800751a <HAL_DMA_IRQHandler+0xdaa>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a32      	ldr	r2, [pc, #200]	@ (80075ac <HAL_DMA_IRQHandler+0xe3c>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d018      	beq.n	800751a <HAL_DMA_IRQHandler+0xdaa>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a30      	ldr	r2, [pc, #192]	@ (80075b0 <HAL_DMA_IRQHandler+0xe40>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d013      	beq.n	800751a <HAL_DMA_IRQHandler+0xdaa>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a2f      	ldr	r2, [pc, #188]	@ (80075b4 <HAL_DMA_IRQHandler+0xe44>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d00e      	beq.n	800751a <HAL_DMA_IRQHandler+0xdaa>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a2d      	ldr	r2, [pc, #180]	@ (80075b8 <HAL_DMA_IRQHandler+0xe48>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d009      	beq.n	800751a <HAL_DMA_IRQHandler+0xdaa>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a2c      	ldr	r2, [pc, #176]	@ (80075bc <HAL_DMA_IRQHandler+0xe4c>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d004      	beq.n	800751a <HAL_DMA_IRQHandler+0xdaa>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a2a      	ldr	r2, [pc, #168]	@ (80075c0 <HAL_DMA_IRQHandler+0xe50>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d108      	bne.n	800752c <HAL_DMA_IRQHandler+0xdbc>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f022 021c 	bic.w	r2, r2, #28
 8007528:	601a      	str	r2, [r3, #0]
 800752a:	e007      	b.n	800753c <HAL_DMA_IRQHandler+0xdcc>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	681a      	ldr	r2, [r3, #0]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f022 020e 	bic.w	r2, r2, #14
 800753a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007540:	f003 031f 	and.w	r3, r3, #31
 8007544:	2201      	movs	r2, #1
 8007546:	409a      	lsls	r2, r3
 8007548:	69fb      	ldr	r3, [r7, #28]
 800754a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2201      	movs	r2, #1
 8007550:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2201      	movs	r2, #1
 8007556:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2200      	movs	r2, #0
 800755e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007566:	2b00      	cmp	r3, #0
 8007568:	d009      	beq.n	800757e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	4798      	blx	r3
 8007572:	e004      	b.n	800757e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007574:	bf00      	nop
 8007576:	e002      	b.n	800757e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007578:	bf00      	nop
 800757a:	e000      	b.n	800757e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800757c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800757e:	3728      	adds	r7, #40	@ 0x28
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}
 8007584:	40020010 	.word	0x40020010
 8007588:	40020028 	.word	0x40020028
 800758c:	40020040 	.word	0x40020040
 8007590:	40020058 	.word	0x40020058
 8007594:	40020070 	.word	0x40020070
 8007598:	40020088 	.word	0x40020088
 800759c:	400200a0 	.word	0x400200a0
 80075a0:	400200b8 	.word	0x400200b8
 80075a4:	40020410 	.word	0x40020410
 80075a8:	40020428 	.word	0x40020428
 80075ac:	40020440 	.word	0x40020440
 80075b0:	40020458 	.word	0x40020458
 80075b4:	40020470 	.word	0x40020470
 80075b8:	40020488 	.word	0x40020488
 80075bc:	400204a0 	.word	0x400204a0
 80075c0:	400204b8 	.word	0x400204b8

080075c4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b087      	sub	sp, #28
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	60b9      	str	r1, [r7, #8]
 80075ce:	607a      	str	r2, [r7, #4]
 80075d0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075d6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075dc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4a7f      	ldr	r2, [pc, #508]	@ (80077e0 <DMA_SetConfig+0x21c>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d072      	beq.n	80076ce <DMA_SetConfig+0x10a>
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a7d      	ldr	r2, [pc, #500]	@ (80077e4 <DMA_SetConfig+0x220>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d06d      	beq.n	80076ce <DMA_SetConfig+0x10a>
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a7c      	ldr	r2, [pc, #496]	@ (80077e8 <DMA_SetConfig+0x224>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d068      	beq.n	80076ce <DMA_SetConfig+0x10a>
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a7a      	ldr	r2, [pc, #488]	@ (80077ec <DMA_SetConfig+0x228>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d063      	beq.n	80076ce <DMA_SetConfig+0x10a>
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a79      	ldr	r2, [pc, #484]	@ (80077f0 <DMA_SetConfig+0x22c>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d05e      	beq.n	80076ce <DMA_SetConfig+0x10a>
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a77      	ldr	r2, [pc, #476]	@ (80077f4 <DMA_SetConfig+0x230>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d059      	beq.n	80076ce <DMA_SetConfig+0x10a>
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a76      	ldr	r2, [pc, #472]	@ (80077f8 <DMA_SetConfig+0x234>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d054      	beq.n	80076ce <DMA_SetConfig+0x10a>
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a74      	ldr	r2, [pc, #464]	@ (80077fc <DMA_SetConfig+0x238>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d04f      	beq.n	80076ce <DMA_SetConfig+0x10a>
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a73      	ldr	r2, [pc, #460]	@ (8007800 <DMA_SetConfig+0x23c>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d04a      	beq.n	80076ce <DMA_SetConfig+0x10a>
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a71      	ldr	r2, [pc, #452]	@ (8007804 <DMA_SetConfig+0x240>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d045      	beq.n	80076ce <DMA_SetConfig+0x10a>
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a70      	ldr	r2, [pc, #448]	@ (8007808 <DMA_SetConfig+0x244>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d040      	beq.n	80076ce <DMA_SetConfig+0x10a>
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a6e      	ldr	r2, [pc, #440]	@ (800780c <DMA_SetConfig+0x248>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d03b      	beq.n	80076ce <DMA_SetConfig+0x10a>
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a6d      	ldr	r2, [pc, #436]	@ (8007810 <DMA_SetConfig+0x24c>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d036      	beq.n	80076ce <DMA_SetConfig+0x10a>
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a6b      	ldr	r2, [pc, #428]	@ (8007814 <DMA_SetConfig+0x250>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d031      	beq.n	80076ce <DMA_SetConfig+0x10a>
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a6a      	ldr	r2, [pc, #424]	@ (8007818 <DMA_SetConfig+0x254>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d02c      	beq.n	80076ce <DMA_SetConfig+0x10a>
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a68      	ldr	r2, [pc, #416]	@ (800781c <DMA_SetConfig+0x258>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d027      	beq.n	80076ce <DMA_SetConfig+0x10a>
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a67      	ldr	r2, [pc, #412]	@ (8007820 <DMA_SetConfig+0x25c>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d022      	beq.n	80076ce <DMA_SetConfig+0x10a>
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a65      	ldr	r2, [pc, #404]	@ (8007824 <DMA_SetConfig+0x260>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d01d      	beq.n	80076ce <DMA_SetConfig+0x10a>
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a64      	ldr	r2, [pc, #400]	@ (8007828 <DMA_SetConfig+0x264>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d018      	beq.n	80076ce <DMA_SetConfig+0x10a>
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a62      	ldr	r2, [pc, #392]	@ (800782c <DMA_SetConfig+0x268>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d013      	beq.n	80076ce <DMA_SetConfig+0x10a>
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a61      	ldr	r2, [pc, #388]	@ (8007830 <DMA_SetConfig+0x26c>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d00e      	beq.n	80076ce <DMA_SetConfig+0x10a>
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a5f      	ldr	r2, [pc, #380]	@ (8007834 <DMA_SetConfig+0x270>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d009      	beq.n	80076ce <DMA_SetConfig+0x10a>
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a5e      	ldr	r2, [pc, #376]	@ (8007838 <DMA_SetConfig+0x274>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d004      	beq.n	80076ce <DMA_SetConfig+0x10a>
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a5c      	ldr	r2, [pc, #368]	@ (800783c <DMA_SetConfig+0x278>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d101      	bne.n	80076d2 <DMA_SetConfig+0x10e>
 80076ce:	2301      	movs	r3, #1
 80076d0:	e000      	b.n	80076d4 <DMA_SetConfig+0x110>
 80076d2:	2300      	movs	r3, #0
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d00d      	beq.n	80076f4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80076dc:	68fa      	ldr	r2, [r7, #12]
 80076de:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80076e0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d004      	beq.n	80076f4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076ee:	68fa      	ldr	r2, [r7, #12]
 80076f0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80076f2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a39      	ldr	r2, [pc, #228]	@ (80077e0 <DMA_SetConfig+0x21c>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d04a      	beq.n	8007794 <DMA_SetConfig+0x1d0>
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a38      	ldr	r2, [pc, #224]	@ (80077e4 <DMA_SetConfig+0x220>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d045      	beq.n	8007794 <DMA_SetConfig+0x1d0>
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a36      	ldr	r2, [pc, #216]	@ (80077e8 <DMA_SetConfig+0x224>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d040      	beq.n	8007794 <DMA_SetConfig+0x1d0>
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a35      	ldr	r2, [pc, #212]	@ (80077ec <DMA_SetConfig+0x228>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d03b      	beq.n	8007794 <DMA_SetConfig+0x1d0>
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a33      	ldr	r2, [pc, #204]	@ (80077f0 <DMA_SetConfig+0x22c>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d036      	beq.n	8007794 <DMA_SetConfig+0x1d0>
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a32      	ldr	r2, [pc, #200]	@ (80077f4 <DMA_SetConfig+0x230>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d031      	beq.n	8007794 <DMA_SetConfig+0x1d0>
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a30      	ldr	r2, [pc, #192]	@ (80077f8 <DMA_SetConfig+0x234>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d02c      	beq.n	8007794 <DMA_SetConfig+0x1d0>
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a2f      	ldr	r2, [pc, #188]	@ (80077fc <DMA_SetConfig+0x238>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d027      	beq.n	8007794 <DMA_SetConfig+0x1d0>
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a2d      	ldr	r2, [pc, #180]	@ (8007800 <DMA_SetConfig+0x23c>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d022      	beq.n	8007794 <DMA_SetConfig+0x1d0>
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a2c      	ldr	r2, [pc, #176]	@ (8007804 <DMA_SetConfig+0x240>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d01d      	beq.n	8007794 <DMA_SetConfig+0x1d0>
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a2a      	ldr	r2, [pc, #168]	@ (8007808 <DMA_SetConfig+0x244>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d018      	beq.n	8007794 <DMA_SetConfig+0x1d0>
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a29      	ldr	r2, [pc, #164]	@ (800780c <DMA_SetConfig+0x248>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d013      	beq.n	8007794 <DMA_SetConfig+0x1d0>
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a27      	ldr	r2, [pc, #156]	@ (8007810 <DMA_SetConfig+0x24c>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d00e      	beq.n	8007794 <DMA_SetConfig+0x1d0>
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a26      	ldr	r2, [pc, #152]	@ (8007814 <DMA_SetConfig+0x250>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d009      	beq.n	8007794 <DMA_SetConfig+0x1d0>
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a24      	ldr	r2, [pc, #144]	@ (8007818 <DMA_SetConfig+0x254>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d004      	beq.n	8007794 <DMA_SetConfig+0x1d0>
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a23      	ldr	r2, [pc, #140]	@ (800781c <DMA_SetConfig+0x258>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d101      	bne.n	8007798 <DMA_SetConfig+0x1d4>
 8007794:	2301      	movs	r3, #1
 8007796:	e000      	b.n	800779a <DMA_SetConfig+0x1d6>
 8007798:	2300      	movs	r3, #0
 800779a:	2b00      	cmp	r3, #0
 800779c:	d059      	beq.n	8007852 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077a2:	f003 031f 	and.w	r3, r3, #31
 80077a6:	223f      	movs	r2, #63	@ 0x3f
 80077a8:	409a      	lsls	r2, r3
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	681a      	ldr	r2, [r3, #0]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80077bc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	683a      	ldr	r2, [r7, #0]
 80077c4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	689b      	ldr	r3, [r3, #8]
 80077ca:	2b40      	cmp	r3, #64	@ 0x40
 80077cc:	d138      	bne.n	8007840 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	687a      	ldr	r2, [r7, #4]
 80077d4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	68ba      	ldr	r2, [r7, #8]
 80077dc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80077de:	e086      	b.n	80078ee <DMA_SetConfig+0x32a>
 80077e0:	40020010 	.word	0x40020010
 80077e4:	40020028 	.word	0x40020028
 80077e8:	40020040 	.word	0x40020040
 80077ec:	40020058 	.word	0x40020058
 80077f0:	40020070 	.word	0x40020070
 80077f4:	40020088 	.word	0x40020088
 80077f8:	400200a0 	.word	0x400200a0
 80077fc:	400200b8 	.word	0x400200b8
 8007800:	40020410 	.word	0x40020410
 8007804:	40020428 	.word	0x40020428
 8007808:	40020440 	.word	0x40020440
 800780c:	40020458 	.word	0x40020458
 8007810:	40020470 	.word	0x40020470
 8007814:	40020488 	.word	0x40020488
 8007818:	400204a0 	.word	0x400204a0
 800781c:	400204b8 	.word	0x400204b8
 8007820:	58025408 	.word	0x58025408
 8007824:	5802541c 	.word	0x5802541c
 8007828:	58025430 	.word	0x58025430
 800782c:	58025444 	.word	0x58025444
 8007830:	58025458 	.word	0x58025458
 8007834:	5802546c 	.word	0x5802546c
 8007838:	58025480 	.word	0x58025480
 800783c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	68ba      	ldr	r2, [r7, #8]
 8007846:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	687a      	ldr	r2, [r7, #4]
 800784e:	60da      	str	r2, [r3, #12]
}
 8007850:	e04d      	b.n	80078ee <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a29      	ldr	r2, [pc, #164]	@ (80078fc <DMA_SetConfig+0x338>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d022      	beq.n	80078a2 <DMA_SetConfig+0x2de>
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a27      	ldr	r2, [pc, #156]	@ (8007900 <DMA_SetConfig+0x33c>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d01d      	beq.n	80078a2 <DMA_SetConfig+0x2de>
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a26      	ldr	r2, [pc, #152]	@ (8007904 <DMA_SetConfig+0x340>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d018      	beq.n	80078a2 <DMA_SetConfig+0x2de>
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a24      	ldr	r2, [pc, #144]	@ (8007908 <DMA_SetConfig+0x344>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d013      	beq.n	80078a2 <DMA_SetConfig+0x2de>
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4a23      	ldr	r2, [pc, #140]	@ (800790c <DMA_SetConfig+0x348>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d00e      	beq.n	80078a2 <DMA_SetConfig+0x2de>
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a21      	ldr	r2, [pc, #132]	@ (8007910 <DMA_SetConfig+0x34c>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d009      	beq.n	80078a2 <DMA_SetConfig+0x2de>
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4a20      	ldr	r2, [pc, #128]	@ (8007914 <DMA_SetConfig+0x350>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d004      	beq.n	80078a2 <DMA_SetConfig+0x2de>
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a1e      	ldr	r2, [pc, #120]	@ (8007918 <DMA_SetConfig+0x354>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d101      	bne.n	80078a6 <DMA_SetConfig+0x2e2>
 80078a2:	2301      	movs	r3, #1
 80078a4:	e000      	b.n	80078a8 <DMA_SetConfig+0x2e4>
 80078a6:	2300      	movs	r3, #0
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d020      	beq.n	80078ee <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80078b0:	f003 031f 	and.w	r3, r3, #31
 80078b4:	2201      	movs	r2, #1
 80078b6:	409a      	lsls	r2, r3
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	683a      	ldr	r2, [r7, #0]
 80078c2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	689b      	ldr	r3, [r3, #8]
 80078c8:	2b40      	cmp	r3, #64	@ 0x40
 80078ca:	d108      	bne.n	80078de <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	687a      	ldr	r2, [r7, #4]
 80078d2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	68ba      	ldr	r2, [r7, #8]
 80078da:	60da      	str	r2, [r3, #12]
}
 80078dc:	e007      	b.n	80078ee <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	68ba      	ldr	r2, [r7, #8]
 80078e4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	687a      	ldr	r2, [r7, #4]
 80078ec:	60da      	str	r2, [r3, #12]
}
 80078ee:	bf00      	nop
 80078f0:	371c      	adds	r7, #28
 80078f2:	46bd      	mov	sp, r7
 80078f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f8:	4770      	bx	lr
 80078fa:	bf00      	nop
 80078fc:	58025408 	.word	0x58025408
 8007900:	5802541c 	.word	0x5802541c
 8007904:	58025430 	.word	0x58025430
 8007908:	58025444 	.word	0x58025444
 800790c:	58025458 	.word	0x58025458
 8007910:	5802546c 	.word	0x5802546c
 8007914:	58025480 	.word	0x58025480
 8007918:	58025494 	.word	0x58025494

0800791c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800791c:	b480      	push	{r7}
 800791e:	b085      	sub	sp, #20
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a42      	ldr	r2, [pc, #264]	@ (8007a34 <DMA_CalcBaseAndBitshift+0x118>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d04a      	beq.n	80079c4 <DMA_CalcBaseAndBitshift+0xa8>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a41      	ldr	r2, [pc, #260]	@ (8007a38 <DMA_CalcBaseAndBitshift+0x11c>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d045      	beq.n	80079c4 <DMA_CalcBaseAndBitshift+0xa8>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a3f      	ldr	r2, [pc, #252]	@ (8007a3c <DMA_CalcBaseAndBitshift+0x120>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d040      	beq.n	80079c4 <DMA_CalcBaseAndBitshift+0xa8>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a3e      	ldr	r2, [pc, #248]	@ (8007a40 <DMA_CalcBaseAndBitshift+0x124>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d03b      	beq.n	80079c4 <DMA_CalcBaseAndBitshift+0xa8>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a3c      	ldr	r2, [pc, #240]	@ (8007a44 <DMA_CalcBaseAndBitshift+0x128>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d036      	beq.n	80079c4 <DMA_CalcBaseAndBitshift+0xa8>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a3b      	ldr	r2, [pc, #236]	@ (8007a48 <DMA_CalcBaseAndBitshift+0x12c>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d031      	beq.n	80079c4 <DMA_CalcBaseAndBitshift+0xa8>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a39      	ldr	r2, [pc, #228]	@ (8007a4c <DMA_CalcBaseAndBitshift+0x130>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d02c      	beq.n	80079c4 <DMA_CalcBaseAndBitshift+0xa8>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a38      	ldr	r2, [pc, #224]	@ (8007a50 <DMA_CalcBaseAndBitshift+0x134>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d027      	beq.n	80079c4 <DMA_CalcBaseAndBitshift+0xa8>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a36      	ldr	r2, [pc, #216]	@ (8007a54 <DMA_CalcBaseAndBitshift+0x138>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d022      	beq.n	80079c4 <DMA_CalcBaseAndBitshift+0xa8>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a35      	ldr	r2, [pc, #212]	@ (8007a58 <DMA_CalcBaseAndBitshift+0x13c>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d01d      	beq.n	80079c4 <DMA_CalcBaseAndBitshift+0xa8>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a33      	ldr	r2, [pc, #204]	@ (8007a5c <DMA_CalcBaseAndBitshift+0x140>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d018      	beq.n	80079c4 <DMA_CalcBaseAndBitshift+0xa8>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a32      	ldr	r2, [pc, #200]	@ (8007a60 <DMA_CalcBaseAndBitshift+0x144>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d013      	beq.n	80079c4 <DMA_CalcBaseAndBitshift+0xa8>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a30      	ldr	r2, [pc, #192]	@ (8007a64 <DMA_CalcBaseAndBitshift+0x148>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d00e      	beq.n	80079c4 <DMA_CalcBaseAndBitshift+0xa8>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a2f      	ldr	r2, [pc, #188]	@ (8007a68 <DMA_CalcBaseAndBitshift+0x14c>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d009      	beq.n	80079c4 <DMA_CalcBaseAndBitshift+0xa8>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4a2d      	ldr	r2, [pc, #180]	@ (8007a6c <DMA_CalcBaseAndBitshift+0x150>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d004      	beq.n	80079c4 <DMA_CalcBaseAndBitshift+0xa8>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a2c      	ldr	r2, [pc, #176]	@ (8007a70 <DMA_CalcBaseAndBitshift+0x154>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d101      	bne.n	80079c8 <DMA_CalcBaseAndBitshift+0xac>
 80079c4:	2301      	movs	r3, #1
 80079c6:	e000      	b.n	80079ca <DMA_CalcBaseAndBitshift+0xae>
 80079c8:	2300      	movs	r3, #0
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d024      	beq.n	8007a18 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	b2db      	uxtb	r3, r3
 80079d4:	3b10      	subs	r3, #16
 80079d6:	4a27      	ldr	r2, [pc, #156]	@ (8007a74 <DMA_CalcBaseAndBitshift+0x158>)
 80079d8:	fba2 2303 	umull	r2, r3, r2, r3
 80079dc:	091b      	lsrs	r3, r3, #4
 80079de:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f003 0307 	and.w	r3, r3, #7
 80079e6:	4a24      	ldr	r2, [pc, #144]	@ (8007a78 <DMA_CalcBaseAndBitshift+0x15c>)
 80079e8:	5cd3      	ldrb	r3, [r2, r3]
 80079ea:	461a      	mov	r2, r3
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2b03      	cmp	r3, #3
 80079f4:	d908      	bls.n	8007a08 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	461a      	mov	r2, r3
 80079fc:	4b1f      	ldr	r3, [pc, #124]	@ (8007a7c <DMA_CalcBaseAndBitshift+0x160>)
 80079fe:	4013      	ands	r3, r2
 8007a00:	1d1a      	adds	r2, r3, #4
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	659a      	str	r2, [r3, #88]	@ 0x58
 8007a06:	e00d      	b.n	8007a24 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	4b1b      	ldr	r3, [pc, #108]	@ (8007a7c <DMA_CalcBaseAndBitshift+0x160>)
 8007a10:	4013      	ands	r3, r2
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	6593      	str	r3, [r2, #88]	@ 0x58
 8007a16:	e005      	b.n	8007a24 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3714      	adds	r7, #20
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a32:	4770      	bx	lr
 8007a34:	40020010 	.word	0x40020010
 8007a38:	40020028 	.word	0x40020028
 8007a3c:	40020040 	.word	0x40020040
 8007a40:	40020058 	.word	0x40020058
 8007a44:	40020070 	.word	0x40020070
 8007a48:	40020088 	.word	0x40020088
 8007a4c:	400200a0 	.word	0x400200a0
 8007a50:	400200b8 	.word	0x400200b8
 8007a54:	40020410 	.word	0x40020410
 8007a58:	40020428 	.word	0x40020428
 8007a5c:	40020440 	.word	0x40020440
 8007a60:	40020458 	.word	0x40020458
 8007a64:	40020470 	.word	0x40020470
 8007a68:	40020488 	.word	0x40020488
 8007a6c:	400204a0 	.word	0x400204a0
 8007a70:	400204b8 	.word	0x400204b8
 8007a74:	aaaaaaab 	.word	0xaaaaaaab
 8007a78:	080127b4 	.word	0x080127b4
 8007a7c:	fffffc00 	.word	0xfffffc00

08007a80 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b085      	sub	sp, #20
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	699b      	ldr	r3, [r3, #24]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d120      	bne.n	8007ad6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a98:	2b03      	cmp	r3, #3
 8007a9a:	d858      	bhi.n	8007b4e <DMA_CheckFifoParam+0xce>
 8007a9c:	a201      	add	r2, pc, #4	@ (adr r2, 8007aa4 <DMA_CheckFifoParam+0x24>)
 8007a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aa2:	bf00      	nop
 8007aa4:	08007ab5 	.word	0x08007ab5
 8007aa8:	08007ac7 	.word	0x08007ac7
 8007aac:	08007ab5 	.word	0x08007ab5
 8007ab0:	08007b4f 	.word	0x08007b4f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ab8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d048      	beq.n	8007b52 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007ac4:	e045      	b.n	8007b52 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aca:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007ace:	d142      	bne.n	8007b56 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007ad4:	e03f      	b.n	8007b56 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	699b      	ldr	r3, [r3, #24]
 8007ada:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ade:	d123      	bne.n	8007b28 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ae4:	2b03      	cmp	r3, #3
 8007ae6:	d838      	bhi.n	8007b5a <DMA_CheckFifoParam+0xda>
 8007ae8:	a201      	add	r2, pc, #4	@ (adr r2, 8007af0 <DMA_CheckFifoParam+0x70>)
 8007aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aee:	bf00      	nop
 8007af0:	08007b01 	.word	0x08007b01
 8007af4:	08007b07 	.word	0x08007b07
 8007af8:	08007b01 	.word	0x08007b01
 8007afc:	08007b19 	.word	0x08007b19
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007b00:	2301      	movs	r3, #1
 8007b02:	73fb      	strb	r3, [r7, #15]
        break;
 8007b04:	e030      	b.n	8007b68 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b0a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d025      	beq.n	8007b5e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007b12:	2301      	movs	r3, #1
 8007b14:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007b16:	e022      	b.n	8007b5e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b1c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007b20:	d11f      	bne.n	8007b62 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007b22:	2301      	movs	r3, #1
 8007b24:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007b26:	e01c      	b.n	8007b62 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b2c:	2b02      	cmp	r3, #2
 8007b2e:	d902      	bls.n	8007b36 <DMA_CheckFifoParam+0xb6>
 8007b30:	2b03      	cmp	r3, #3
 8007b32:	d003      	beq.n	8007b3c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007b34:	e018      	b.n	8007b68 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007b36:	2301      	movs	r3, #1
 8007b38:	73fb      	strb	r3, [r7, #15]
        break;
 8007b3a:	e015      	b.n	8007b68 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b40:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d00e      	beq.n	8007b66 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007b48:	2301      	movs	r3, #1
 8007b4a:	73fb      	strb	r3, [r7, #15]
    break;
 8007b4c:	e00b      	b.n	8007b66 <DMA_CheckFifoParam+0xe6>
        break;
 8007b4e:	bf00      	nop
 8007b50:	e00a      	b.n	8007b68 <DMA_CheckFifoParam+0xe8>
        break;
 8007b52:	bf00      	nop
 8007b54:	e008      	b.n	8007b68 <DMA_CheckFifoParam+0xe8>
        break;
 8007b56:	bf00      	nop
 8007b58:	e006      	b.n	8007b68 <DMA_CheckFifoParam+0xe8>
        break;
 8007b5a:	bf00      	nop
 8007b5c:	e004      	b.n	8007b68 <DMA_CheckFifoParam+0xe8>
        break;
 8007b5e:	bf00      	nop
 8007b60:	e002      	b.n	8007b68 <DMA_CheckFifoParam+0xe8>
        break;
 8007b62:	bf00      	nop
 8007b64:	e000      	b.n	8007b68 <DMA_CheckFifoParam+0xe8>
    break;
 8007b66:	bf00      	nop
    }
  }

  return status;
 8007b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3714      	adds	r7, #20
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr
 8007b76:	bf00      	nop

08007b78 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b085      	sub	sp, #20
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a38      	ldr	r2, [pc, #224]	@ (8007c6c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d022      	beq.n	8007bd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a36      	ldr	r2, [pc, #216]	@ (8007c70 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d01d      	beq.n	8007bd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a35      	ldr	r2, [pc, #212]	@ (8007c74 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d018      	beq.n	8007bd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a33      	ldr	r2, [pc, #204]	@ (8007c78 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d013      	beq.n	8007bd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a32      	ldr	r2, [pc, #200]	@ (8007c7c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d00e      	beq.n	8007bd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a30      	ldr	r2, [pc, #192]	@ (8007c80 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d009      	beq.n	8007bd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a2f      	ldr	r2, [pc, #188]	@ (8007c84 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d004      	beq.n	8007bd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a2d      	ldr	r2, [pc, #180]	@ (8007c88 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d101      	bne.n	8007bda <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	e000      	b.n	8007bdc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007bda:	2300      	movs	r3, #0
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d01a      	beq.n	8007c16 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	b2db      	uxtb	r3, r3
 8007be6:	3b08      	subs	r3, #8
 8007be8:	4a28      	ldr	r2, [pc, #160]	@ (8007c8c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007bea:	fba2 2303 	umull	r2, r3, r2, r3
 8007bee:	091b      	lsrs	r3, r3, #4
 8007bf0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007bf2:	68fa      	ldr	r2, [r7, #12]
 8007bf4:	4b26      	ldr	r3, [pc, #152]	@ (8007c90 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007bf6:	4413      	add	r3, r2
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	4a24      	ldr	r2, [pc, #144]	@ (8007c94 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007c04:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	f003 031f 	and.w	r3, r3, #31
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	409a      	lsls	r2, r3
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007c14:	e024      	b.n	8007c60 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	3b10      	subs	r3, #16
 8007c1e:	4a1e      	ldr	r2, [pc, #120]	@ (8007c98 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007c20:	fba2 2303 	umull	r2, r3, r2, r3
 8007c24:	091b      	lsrs	r3, r3, #4
 8007c26:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	4a1c      	ldr	r2, [pc, #112]	@ (8007c9c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d806      	bhi.n	8007c3e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	4a1b      	ldr	r2, [pc, #108]	@ (8007ca0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d902      	bls.n	8007c3e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	3308      	adds	r3, #8
 8007c3c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007c3e:	68fa      	ldr	r2, [r7, #12]
 8007c40:	4b18      	ldr	r3, [pc, #96]	@ (8007ca4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007c42:	4413      	add	r3, r2
 8007c44:	009b      	lsls	r3, r3, #2
 8007c46:	461a      	mov	r2, r3
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	4a16      	ldr	r2, [pc, #88]	@ (8007ca8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007c50:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f003 031f 	and.w	r3, r3, #31
 8007c58:	2201      	movs	r2, #1
 8007c5a:	409a      	lsls	r2, r3
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007c60:	bf00      	nop
 8007c62:	3714      	adds	r7, #20
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr
 8007c6c:	58025408 	.word	0x58025408
 8007c70:	5802541c 	.word	0x5802541c
 8007c74:	58025430 	.word	0x58025430
 8007c78:	58025444 	.word	0x58025444
 8007c7c:	58025458 	.word	0x58025458
 8007c80:	5802546c 	.word	0x5802546c
 8007c84:	58025480 	.word	0x58025480
 8007c88:	58025494 	.word	0x58025494
 8007c8c:	cccccccd 	.word	0xcccccccd
 8007c90:	16009600 	.word	0x16009600
 8007c94:	58025880 	.word	0x58025880
 8007c98:	aaaaaaab 	.word	0xaaaaaaab
 8007c9c:	400204b8 	.word	0x400204b8
 8007ca0:	4002040f 	.word	0x4002040f
 8007ca4:	10008200 	.word	0x10008200
 8007ca8:	40020880 	.word	0x40020880

08007cac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b085      	sub	sp, #20
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	b2db      	uxtb	r3, r3
 8007cba:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d04a      	beq.n	8007d58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2b08      	cmp	r3, #8
 8007cc6:	d847      	bhi.n	8007d58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a25      	ldr	r2, [pc, #148]	@ (8007d64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d022      	beq.n	8007d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a24      	ldr	r2, [pc, #144]	@ (8007d68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d01d      	beq.n	8007d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a22      	ldr	r2, [pc, #136]	@ (8007d6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d018      	beq.n	8007d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a21      	ldr	r2, [pc, #132]	@ (8007d70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d013      	beq.n	8007d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a1f      	ldr	r2, [pc, #124]	@ (8007d74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d00e      	beq.n	8007d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a1e      	ldr	r2, [pc, #120]	@ (8007d78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d009      	beq.n	8007d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a1c      	ldr	r2, [pc, #112]	@ (8007d7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d004      	beq.n	8007d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a1b      	ldr	r2, [pc, #108]	@ (8007d80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d101      	bne.n	8007d1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007d18:	2301      	movs	r3, #1
 8007d1a:	e000      	b.n	8007d1e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d00a      	beq.n	8007d38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007d22:	68fa      	ldr	r2, [r7, #12]
 8007d24:	4b17      	ldr	r3, [pc, #92]	@ (8007d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007d26:	4413      	add	r3, r2
 8007d28:	009b      	lsls	r3, r3, #2
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	4a15      	ldr	r2, [pc, #84]	@ (8007d88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007d34:	671a      	str	r2, [r3, #112]	@ 0x70
 8007d36:	e009      	b.n	8007d4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007d38:	68fa      	ldr	r2, [r7, #12]
 8007d3a:	4b14      	ldr	r3, [pc, #80]	@ (8007d8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007d3c:	4413      	add	r3, r2
 8007d3e:	009b      	lsls	r3, r3, #2
 8007d40:	461a      	mov	r2, r3
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	4a11      	ldr	r2, [pc, #68]	@ (8007d90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007d4a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	3b01      	subs	r3, #1
 8007d50:	2201      	movs	r2, #1
 8007d52:	409a      	lsls	r2, r3
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8007d58:	bf00      	nop
 8007d5a:	3714      	adds	r7, #20
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr
 8007d64:	58025408 	.word	0x58025408
 8007d68:	5802541c 	.word	0x5802541c
 8007d6c:	58025430 	.word	0x58025430
 8007d70:	58025444 	.word	0x58025444
 8007d74:	58025458 	.word	0x58025458
 8007d78:	5802546c 	.word	0x5802546c
 8007d7c:	58025480 	.word	0x58025480
 8007d80:	58025494 	.word	0x58025494
 8007d84:	1600963f 	.word	0x1600963f
 8007d88:	58025940 	.word	0x58025940
 8007d8c:	1000823f 	.word	0x1000823f
 8007d90:	40020940 	.word	0x40020940

08007d94 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8007d94:	b480      	push	{r7}
 8007d96:	b087      	sub	sp, #28
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	60f8      	str	r0, [r7, #12]
 8007d9c:	460b      	mov	r3, r1
 8007d9e:	607a      	str	r2, [r7, #4]
 8007da0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8007da2:	2300      	movs	r3, #0
 8007da4:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d101      	bne.n	8007db0 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8007dac:	2301      	movs	r3, #1
 8007dae:	e00a      	b.n	8007dc6 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8007db0:	7afb      	ldrb	r3, [r7, #11]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d103      	bne.n	8007dbe <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	687a      	ldr	r2, [r7, #4]
 8007dba:	605a      	str	r2, [r3, #4]
      break;
 8007dbc:	e002      	b.n	8007dc4 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	75fb      	strb	r3, [r7, #23]
      break;
 8007dc2:	bf00      	nop
  }

  return status;
 8007dc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	371c      	adds	r7, #28
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr

08007dd2 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8007dd2:	b480      	push	{r7}
 8007dd4:	b083      	sub	sp, #12
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
 8007dda:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d101      	bne.n	8007de6 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8007de2:	2301      	movs	r3, #1
 8007de4:	e003      	b.n	8007dee <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	683a      	ldr	r2, [r7, #0]
 8007dea:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8007dec:	2300      	movs	r3, #0
  }
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	370c      	adds	r7, #12
 8007df2:	46bd      	mov	sp, r7
 8007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df8:	4770      	bx	lr
	...

08007dfc <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b086      	sub	sp, #24
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	0c1b      	lsrs	r3, r3, #16
 8007e0a:	f003 0303 	and.w	r3, r3, #3
 8007e0e:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f003 031f 	and.w	r3, r3, #31
 8007e18:	2201      	movs	r2, #1
 8007e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e1e:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8007e20:	f7fd f96a 	bl	80050f8 <HAL_GetCurrentCPUID>
 8007e24:	4603      	mov	r3, r0
 8007e26:	2b03      	cmp	r3, #3
 8007e28:	d105      	bne.n	8007e36 <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	011a      	lsls	r2, r3, #4
 8007e2e:	4b0f      	ldr	r3, [pc, #60]	@ (8007e6c <HAL_EXTI_IRQHandler+0x70>)
 8007e30:	4413      	add	r3, r2
 8007e32:	617b      	str	r3, [r7, #20]
 8007e34:	e004      	b.n	8007e40 <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	011a      	lsls	r2, r3, #4
 8007e3a:	4b0d      	ldr	r3, [pc, #52]	@ (8007e70 <HAL_EXTI_IRQHandler+0x74>)
 8007e3c:	4413      	add	r3, r2
 8007e3e:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	68fa      	ldr	r2, [r7, #12]
 8007e46:	4013      	ands	r3, r2
 8007e48:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d009      	beq.n	8007e64 <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	68fa      	ldr	r2, [r7, #12]
 8007e54:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d002      	beq.n	8007e64 <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	4798      	blx	r3
    }
  }
}
 8007e64:	bf00      	nop
 8007e66:	3718      	adds	r7, #24
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}
 8007e6c:	58000088 	.word	0x58000088
 8007e70:	580000c8 	.word	0x580000c8

08007e74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b089      	sub	sp, #36	@ 0x24
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007e82:	4b89      	ldr	r3, [pc, #548]	@ (80080a8 <HAL_GPIO_Init+0x234>)
 8007e84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007e86:	e194      	b.n	80081b2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	681a      	ldr	r2, [r3, #0]
 8007e8c:	2101      	movs	r1, #1
 8007e8e:	69fb      	ldr	r3, [r7, #28]
 8007e90:	fa01 f303 	lsl.w	r3, r1, r3
 8007e94:	4013      	ands	r3, r2
 8007e96:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	f000 8186 	beq.w	80081ac <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	f003 0303 	and.w	r3, r3, #3
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	d005      	beq.n	8007eb8 <HAL_GPIO_Init+0x44>
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	f003 0303 	and.w	r3, r3, #3
 8007eb4:	2b02      	cmp	r3, #2
 8007eb6:	d130      	bne.n	8007f1a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	689b      	ldr	r3, [r3, #8]
 8007ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007ebe:	69fb      	ldr	r3, [r7, #28]
 8007ec0:	005b      	lsls	r3, r3, #1
 8007ec2:	2203      	movs	r2, #3
 8007ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ec8:	43db      	mvns	r3, r3
 8007eca:	69ba      	ldr	r2, [r7, #24]
 8007ecc:	4013      	ands	r3, r2
 8007ece:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	68da      	ldr	r2, [r3, #12]
 8007ed4:	69fb      	ldr	r3, [r7, #28]
 8007ed6:	005b      	lsls	r3, r3, #1
 8007ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8007edc:	69ba      	ldr	r2, [r7, #24]
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	69ba      	ldr	r2, [r7, #24]
 8007ee6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007eee:	2201      	movs	r2, #1
 8007ef0:	69fb      	ldr	r3, [r7, #28]
 8007ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ef6:	43db      	mvns	r3, r3
 8007ef8:	69ba      	ldr	r2, [r7, #24]
 8007efa:	4013      	ands	r3, r2
 8007efc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	091b      	lsrs	r3, r3, #4
 8007f04:	f003 0201 	and.w	r2, r3, #1
 8007f08:	69fb      	ldr	r3, [r7, #28]
 8007f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f0e:	69ba      	ldr	r2, [r7, #24]
 8007f10:	4313      	orrs	r3, r2
 8007f12:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	69ba      	ldr	r2, [r7, #24]
 8007f18:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	f003 0303 	and.w	r3, r3, #3
 8007f22:	2b03      	cmp	r3, #3
 8007f24:	d017      	beq.n	8007f56 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	68db      	ldr	r3, [r3, #12]
 8007f2a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007f2c:	69fb      	ldr	r3, [r7, #28]
 8007f2e:	005b      	lsls	r3, r3, #1
 8007f30:	2203      	movs	r2, #3
 8007f32:	fa02 f303 	lsl.w	r3, r2, r3
 8007f36:	43db      	mvns	r3, r3
 8007f38:	69ba      	ldr	r2, [r7, #24]
 8007f3a:	4013      	ands	r3, r2
 8007f3c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	689a      	ldr	r2, [r3, #8]
 8007f42:	69fb      	ldr	r3, [r7, #28]
 8007f44:	005b      	lsls	r3, r3, #1
 8007f46:	fa02 f303 	lsl.w	r3, r2, r3
 8007f4a:	69ba      	ldr	r2, [r7, #24]
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	69ba      	ldr	r2, [r7, #24]
 8007f54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	f003 0303 	and.w	r3, r3, #3
 8007f5e:	2b02      	cmp	r3, #2
 8007f60:	d123      	bne.n	8007faa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007f62:	69fb      	ldr	r3, [r7, #28]
 8007f64:	08da      	lsrs	r2, r3, #3
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	3208      	adds	r2, #8
 8007f6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007f70:	69fb      	ldr	r3, [r7, #28]
 8007f72:	f003 0307 	and.w	r3, r3, #7
 8007f76:	009b      	lsls	r3, r3, #2
 8007f78:	220f      	movs	r2, #15
 8007f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f7e:	43db      	mvns	r3, r3
 8007f80:	69ba      	ldr	r2, [r7, #24]
 8007f82:	4013      	ands	r3, r2
 8007f84:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	691a      	ldr	r2, [r3, #16]
 8007f8a:	69fb      	ldr	r3, [r7, #28]
 8007f8c:	f003 0307 	and.w	r3, r3, #7
 8007f90:	009b      	lsls	r3, r3, #2
 8007f92:	fa02 f303 	lsl.w	r3, r2, r3
 8007f96:	69ba      	ldr	r2, [r7, #24]
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007f9c:	69fb      	ldr	r3, [r7, #28]
 8007f9e:	08da      	lsrs	r2, r3, #3
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	3208      	adds	r2, #8
 8007fa4:	69b9      	ldr	r1, [r7, #24]
 8007fa6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007fb0:	69fb      	ldr	r3, [r7, #28]
 8007fb2:	005b      	lsls	r3, r3, #1
 8007fb4:	2203      	movs	r2, #3
 8007fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8007fba:	43db      	mvns	r3, r3
 8007fbc:	69ba      	ldr	r2, [r7, #24]
 8007fbe:	4013      	ands	r3, r2
 8007fc0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	f003 0203 	and.w	r2, r3, #3
 8007fca:	69fb      	ldr	r3, [r7, #28]
 8007fcc:	005b      	lsls	r3, r3, #1
 8007fce:	fa02 f303 	lsl.w	r3, r2, r3
 8007fd2:	69ba      	ldr	r2, [r7, #24]
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	69ba      	ldr	r2, [r7, #24]
 8007fdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	f000 80e0 	beq.w	80081ac <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007fec:	4b2f      	ldr	r3, [pc, #188]	@ (80080ac <HAL_GPIO_Init+0x238>)
 8007fee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007ff2:	4a2e      	ldr	r2, [pc, #184]	@ (80080ac <HAL_GPIO_Init+0x238>)
 8007ff4:	f043 0302 	orr.w	r3, r3, #2
 8007ff8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8007ffc:	4b2b      	ldr	r3, [pc, #172]	@ (80080ac <HAL_GPIO_Init+0x238>)
 8007ffe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008002:	f003 0302 	and.w	r3, r3, #2
 8008006:	60fb      	str	r3, [r7, #12]
 8008008:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800800a:	4a29      	ldr	r2, [pc, #164]	@ (80080b0 <HAL_GPIO_Init+0x23c>)
 800800c:	69fb      	ldr	r3, [r7, #28]
 800800e:	089b      	lsrs	r3, r3, #2
 8008010:	3302      	adds	r3, #2
 8008012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008016:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008018:	69fb      	ldr	r3, [r7, #28]
 800801a:	f003 0303 	and.w	r3, r3, #3
 800801e:	009b      	lsls	r3, r3, #2
 8008020:	220f      	movs	r2, #15
 8008022:	fa02 f303 	lsl.w	r3, r2, r3
 8008026:	43db      	mvns	r3, r3
 8008028:	69ba      	ldr	r2, [r7, #24]
 800802a:	4013      	ands	r3, r2
 800802c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	4a20      	ldr	r2, [pc, #128]	@ (80080b4 <HAL_GPIO_Init+0x240>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d052      	beq.n	80080dc <HAL_GPIO_Init+0x268>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	4a1f      	ldr	r2, [pc, #124]	@ (80080b8 <HAL_GPIO_Init+0x244>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d031      	beq.n	80080a2 <HAL_GPIO_Init+0x22e>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	4a1e      	ldr	r2, [pc, #120]	@ (80080bc <HAL_GPIO_Init+0x248>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d02b      	beq.n	800809e <HAL_GPIO_Init+0x22a>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	4a1d      	ldr	r2, [pc, #116]	@ (80080c0 <HAL_GPIO_Init+0x24c>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d025      	beq.n	800809a <HAL_GPIO_Init+0x226>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	4a1c      	ldr	r2, [pc, #112]	@ (80080c4 <HAL_GPIO_Init+0x250>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d01f      	beq.n	8008096 <HAL_GPIO_Init+0x222>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	4a1b      	ldr	r2, [pc, #108]	@ (80080c8 <HAL_GPIO_Init+0x254>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d019      	beq.n	8008092 <HAL_GPIO_Init+0x21e>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	4a1a      	ldr	r2, [pc, #104]	@ (80080cc <HAL_GPIO_Init+0x258>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d013      	beq.n	800808e <HAL_GPIO_Init+0x21a>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	4a19      	ldr	r2, [pc, #100]	@ (80080d0 <HAL_GPIO_Init+0x25c>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d00d      	beq.n	800808a <HAL_GPIO_Init+0x216>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	4a18      	ldr	r2, [pc, #96]	@ (80080d4 <HAL_GPIO_Init+0x260>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d007      	beq.n	8008086 <HAL_GPIO_Init+0x212>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	4a17      	ldr	r2, [pc, #92]	@ (80080d8 <HAL_GPIO_Init+0x264>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d101      	bne.n	8008082 <HAL_GPIO_Init+0x20e>
 800807e:	2309      	movs	r3, #9
 8008080:	e02d      	b.n	80080de <HAL_GPIO_Init+0x26a>
 8008082:	230a      	movs	r3, #10
 8008084:	e02b      	b.n	80080de <HAL_GPIO_Init+0x26a>
 8008086:	2308      	movs	r3, #8
 8008088:	e029      	b.n	80080de <HAL_GPIO_Init+0x26a>
 800808a:	2307      	movs	r3, #7
 800808c:	e027      	b.n	80080de <HAL_GPIO_Init+0x26a>
 800808e:	2306      	movs	r3, #6
 8008090:	e025      	b.n	80080de <HAL_GPIO_Init+0x26a>
 8008092:	2305      	movs	r3, #5
 8008094:	e023      	b.n	80080de <HAL_GPIO_Init+0x26a>
 8008096:	2304      	movs	r3, #4
 8008098:	e021      	b.n	80080de <HAL_GPIO_Init+0x26a>
 800809a:	2303      	movs	r3, #3
 800809c:	e01f      	b.n	80080de <HAL_GPIO_Init+0x26a>
 800809e:	2302      	movs	r3, #2
 80080a0:	e01d      	b.n	80080de <HAL_GPIO_Init+0x26a>
 80080a2:	2301      	movs	r3, #1
 80080a4:	e01b      	b.n	80080de <HAL_GPIO_Init+0x26a>
 80080a6:	bf00      	nop
 80080a8:	58000080 	.word	0x58000080
 80080ac:	58024400 	.word	0x58024400
 80080b0:	58000400 	.word	0x58000400
 80080b4:	58020000 	.word	0x58020000
 80080b8:	58020400 	.word	0x58020400
 80080bc:	58020800 	.word	0x58020800
 80080c0:	58020c00 	.word	0x58020c00
 80080c4:	58021000 	.word	0x58021000
 80080c8:	58021400 	.word	0x58021400
 80080cc:	58021800 	.word	0x58021800
 80080d0:	58021c00 	.word	0x58021c00
 80080d4:	58022000 	.word	0x58022000
 80080d8:	58022400 	.word	0x58022400
 80080dc:	2300      	movs	r3, #0
 80080de:	69fa      	ldr	r2, [r7, #28]
 80080e0:	f002 0203 	and.w	r2, r2, #3
 80080e4:	0092      	lsls	r2, r2, #2
 80080e6:	4093      	lsls	r3, r2
 80080e8:	69ba      	ldr	r2, [r7, #24]
 80080ea:	4313      	orrs	r3, r2
 80080ec:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80080ee:	4938      	ldr	r1, [pc, #224]	@ (80081d0 <HAL_GPIO_Init+0x35c>)
 80080f0:	69fb      	ldr	r3, [r7, #28]
 80080f2:	089b      	lsrs	r3, r3, #2
 80080f4:	3302      	adds	r3, #2
 80080f6:	69ba      	ldr	r2, [r7, #24]
 80080f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80080fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	43db      	mvns	r3, r3
 8008108:	69ba      	ldr	r2, [r7, #24]
 800810a:	4013      	ands	r3, r2
 800810c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008116:	2b00      	cmp	r3, #0
 8008118:	d003      	beq.n	8008122 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800811a:	69ba      	ldr	r2, [r7, #24]
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	4313      	orrs	r3, r2
 8008120:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008122:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008126:	69bb      	ldr	r3, [r7, #24]
 8008128:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800812a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	43db      	mvns	r3, r3
 8008136:	69ba      	ldr	r2, [r7, #24]
 8008138:	4013      	ands	r3, r2
 800813a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	685b      	ldr	r3, [r3, #4]
 8008140:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008144:	2b00      	cmp	r3, #0
 8008146:	d003      	beq.n	8008150 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008148:	69ba      	ldr	r2, [r7, #24]
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	4313      	orrs	r3, r2
 800814e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008150:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008154:	69bb      	ldr	r3, [r7, #24]
 8008156:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	43db      	mvns	r3, r3
 8008162:	69ba      	ldr	r2, [r7, #24]
 8008164:	4013      	ands	r3, r2
 8008166:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008170:	2b00      	cmp	r3, #0
 8008172:	d003      	beq.n	800817c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008174:	69ba      	ldr	r2, [r7, #24]
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	4313      	orrs	r3, r2
 800817a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	69ba      	ldr	r2, [r7, #24]
 8008180:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	43db      	mvns	r3, r3
 800818c:	69ba      	ldr	r2, [r7, #24]
 800818e:	4013      	ands	r3, r2
 8008190:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800819a:	2b00      	cmp	r3, #0
 800819c:	d003      	beq.n	80081a6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800819e:	69ba      	ldr	r2, [r7, #24]
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	4313      	orrs	r3, r2
 80081a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	69ba      	ldr	r2, [r7, #24]
 80081aa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80081ac:	69fb      	ldr	r3, [r7, #28]
 80081ae:	3301      	adds	r3, #1
 80081b0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	69fb      	ldr	r3, [r7, #28]
 80081b8:	fa22 f303 	lsr.w	r3, r2, r3
 80081bc:	2b00      	cmp	r3, #0
 80081be:	f47f ae63 	bne.w	8007e88 <HAL_GPIO_Init+0x14>
  }
}
 80081c2:	bf00      	nop
 80081c4:	bf00      	nop
 80081c6:	3724      	adds	r7, #36	@ 0x24
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr
 80081d0:	58000400 	.word	0x58000400

080081d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b083      	sub	sp, #12
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	460b      	mov	r3, r1
 80081de:	807b      	strh	r3, [r7, #2]
 80081e0:	4613      	mov	r3, r2
 80081e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80081e4:	787b      	ldrb	r3, [r7, #1]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d003      	beq.n	80081f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80081ea:	887a      	ldrh	r2, [r7, #2]
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80081f0:	e003      	b.n	80081fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80081f2:	887b      	ldrh	r3, [r7, #2]
 80081f4:	041a      	lsls	r2, r3, #16
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	619a      	str	r2, [r3, #24]
}
 80081fa:	bf00      	nop
 80081fc:	370c      	adds	r7, #12
 80081fe:	46bd      	mov	sp, r7
 8008200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008204:	4770      	bx	lr

08008206 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008206:	b480      	push	{r7}
 8008208:	b085      	sub	sp, #20
 800820a:	af00      	add	r7, sp, #0
 800820c:	6078      	str	r0, [r7, #4]
 800820e:	460b      	mov	r3, r1
 8008210:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	695b      	ldr	r3, [r3, #20]
 8008216:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008218:	887a      	ldrh	r2, [r7, #2]
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	4013      	ands	r3, r2
 800821e:	041a      	lsls	r2, r3, #16
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	43d9      	mvns	r1, r3
 8008224:	887b      	ldrh	r3, [r7, #2]
 8008226:	400b      	ands	r3, r1
 8008228:	431a      	orrs	r2, r3
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	619a      	str	r2, [r3, #24]
}
 800822e:	bf00      	nop
 8008230:	3714      	adds	r7, #20
 8008232:	46bd      	mov	sp, r7
 8008234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008238:	4770      	bx	lr
	...

0800823c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800823c:	b480      	push	{r7}
 800823e:	b083      	sub	sp, #12
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8008244:	4a08      	ldr	r2, [pc, #32]	@ (8008268 <HAL_HSEM_FastTake+0x2c>)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	3320      	adds	r3, #32
 800824a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800824e:	4a07      	ldr	r2, [pc, #28]	@ (800826c <HAL_HSEM_FastTake+0x30>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d101      	bne.n	8008258 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8008254:	2300      	movs	r3, #0
 8008256:	e000      	b.n	800825a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8008258:	2301      	movs	r3, #1
}
 800825a:	4618      	mov	r0, r3
 800825c:	370c      	adds	r7, #12
 800825e:	46bd      	mov	sp, r7
 8008260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008264:	4770      	bx	lr
 8008266:	bf00      	nop
 8008268:	58026400 	.word	0x58026400
 800826c:	80000300 	.word	0x80000300

08008270 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8008270:	b480      	push	{r7}
 8008272:	b083      	sub	sp, #12
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800827a:	4906      	ldr	r1, [pc, #24]	@ (8008294 <HAL_HSEM_Release+0x24>)
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8008288:	bf00      	nop
 800828a:	370c      	adds	r7, #12
 800828c:	46bd      	mov	sp, r7
 800828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008292:	4770      	bx	lr
 8008294:	58026400 	.word	0x58026400

08008298 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b084      	sub	sp, #16
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80082a0:	4b29      	ldr	r3, [pc, #164]	@ (8008348 <HAL_PWREx_ConfigSupply+0xb0>)
 80082a2:	68db      	ldr	r3, [r3, #12]
 80082a4:	f003 0307 	and.w	r3, r3, #7
 80082a8:	2b06      	cmp	r3, #6
 80082aa:	d00a      	beq.n	80082c2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80082ac:	4b26      	ldr	r3, [pc, #152]	@ (8008348 <HAL_PWREx_ConfigSupply+0xb0>)
 80082ae:	68db      	ldr	r3, [r3, #12]
 80082b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80082b4:	687a      	ldr	r2, [r7, #4]
 80082b6:	429a      	cmp	r2, r3
 80082b8:	d001      	beq.n	80082be <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80082ba:	2301      	movs	r3, #1
 80082bc:	e040      	b.n	8008340 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80082be:	2300      	movs	r3, #0
 80082c0:	e03e      	b.n	8008340 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80082c2:	4b21      	ldr	r3, [pc, #132]	@ (8008348 <HAL_PWREx_ConfigSupply+0xb0>)
 80082c4:	68db      	ldr	r3, [r3, #12]
 80082c6:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80082ca:	491f      	ldr	r1, [pc, #124]	@ (8008348 <HAL_PWREx_ConfigSupply+0xb0>)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	4313      	orrs	r3, r2
 80082d0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80082d2:	f7fb f85b 	bl	800338c <HAL_GetTick>
 80082d6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80082d8:	e009      	b.n	80082ee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80082da:	f7fb f857 	bl	800338c <HAL_GetTick>
 80082de:	4602      	mov	r2, r0
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	1ad3      	subs	r3, r2, r3
 80082e4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80082e8:	d901      	bls.n	80082ee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80082ea:	2301      	movs	r3, #1
 80082ec:	e028      	b.n	8008340 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80082ee:	4b16      	ldr	r3, [pc, #88]	@ (8008348 <HAL_PWREx_ConfigSupply+0xb0>)
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80082f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80082fa:	d1ee      	bne.n	80082da <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2b1e      	cmp	r3, #30
 8008300:	d008      	beq.n	8008314 <HAL_PWREx_ConfigSupply+0x7c>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2b2e      	cmp	r3, #46	@ 0x2e
 8008306:	d005      	beq.n	8008314 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2b1d      	cmp	r3, #29
 800830c:	d002      	beq.n	8008314 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2b2d      	cmp	r3, #45	@ 0x2d
 8008312:	d114      	bne.n	800833e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8008314:	f7fb f83a 	bl	800338c <HAL_GetTick>
 8008318:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800831a:	e009      	b.n	8008330 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800831c:	f7fb f836 	bl	800338c <HAL_GetTick>
 8008320:	4602      	mov	r2, r0
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	1ad3      	subs	r3, r2, r3
 8008326:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800832a:	d901      	bls.n	8008330 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800832c:	2301      	movs	r3, #1
 800832e:	e007      	b.n	8008340 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8008330:	4b05      	ldr	r3, [pc, #20]	@ (8008348 <HAL_PWREx_ConfigSupply+0xb0>)
 8008332:	68db      	ldr	r3, [r3, #12]
 8008334:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008338:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800833c:	d1ee      	bne.n	800831c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800833e:	2300      	movs	r3, #0
}
 8008340:	4618      	mov	r0, r3
 8008342:	3710      	adds	r7, #16
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}
 8008348:	58024800 	.word	0x58024800

0800834c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b08c      	sub	sp, #48	@ 0x30
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d102      	bne.n	8008360 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800835a:	2301      	movs	r3, #1
 800835c:	f000 bc48 	b.w	8008bf0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f003 0301 	and.w	r3, r3, #1
 8008368:	2b00      	cmp	r3, #0
 800836a:	f000 8088 	beq.w	800847e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800836e:	4b99      	ldr	r3, [pc, #612]	@ (80085d4 <HAL_RCC_OscConfig+0x288>)
 8008370:	691b      	ldr	r3, [r3, #16]
 8008372:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008376:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008378:	4b96      	ldr	r3, [pc, #600]	@ (80085d4 <HAL_RCC_OscConfig+0x288>)
 800837a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800837c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800837e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008380:	2b10      	cmp	r3, #16
 8008382:	d007      	beq.n	8008394 <HAL_RCC_OscConfig+0x48>
 8008384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008386:	2b18      	cmp	r3, #24
 8008388:	d111      	bne.n	80083ae <HAL_RCC_OscConfig+0x62>
 800838a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800838c:	f003 0303 	and.w	r3, r3, #3
 8008390:	2b02      	cmp	r3, #2
 8008392:	d10c      	bne.n	80083ae <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008394:	4b8f      	ldr	r3, [pc, #572]	@ (80085d4 <HAL_RCC_OscConfig+0x288>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800839c:	2b00      	cmp	r3, #0
 800839e:	d06d      	beq.n	800847c <HAL_RCC_OscConfig+0x130>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d169      	bne.n	800847c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80083a8:	2301      	movs	r3, #1
 80083aa:	f000 bc21 	b.w	8008bf0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083b6:	d106      	bne.n	80083c6 <HAL_RCC_OscConfig+0x7a>
 80083b8:	4b86      	ldr	r3, [pc, #536]	@ (80085d4 <HAL_RCC_OscConfig+0x288>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4a85      	ldr	r2, [pc, #532]	@ (80085d4 <HAL_RCC_OscConfig+0x288>)
 80083be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80083c2:	6013      	str	r3, [r2, #0]
 80083c4:	e02e      	b.n	8008424 <HAL_RCC_OscConfig+0xd8>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	685b      	ldr	r3, [r3, #4]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d10c      	bne.n	80083e8 <HAL_RCC_OscConfig+0x9c>
 80083ce:	4b81      	ldr	r3, [pc, #516]	@ (80085d4 <HAL_RCC_OscConfig+0x288>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4a80      	ldr	r2, [pc, #512]	@ (80085d4 <HAL_RCC_OscConfig+0x288>)
 80083d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80083d8:	6013      	str	r3, [r2, #0]
 80083da:	4b7e      	ldr	r3, [pc, #504]	@ (80085d4 <HAL_RCC_OscConfig+0x288>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4a7d      	ldr	r2, [pc, #500]	@ (80085d4 <HAL_RCC_OscConfig+0x288>)
 80083e0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80083e4:	6013      	str	r3, [r2, #0]
 80083e6:	e01d      	b.n	8008424 <HAL_RCC_OscConfig+0xd8>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	685b      	ldr	r3, [r3, #4]
 80083ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80083f0:	d10c      	bne.n	800840c <HAL_RCC_OscConfig+0xc0>
 80083f2:	4b78      	ldr	r3, [pc, #480]	@ (80085d4 <HAL_RCC_OscConfig+0x288>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4a77      	ldr	r2, [pc, #476]	@ (80085d4 <HAL_RCC_OscConfig+0x288>)
 80083f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80083fc:	6013      	str	r3, [r2, #0]
 80083fe:	4b75      	ldr	r3, [pc, #468]	@ (80085d4 <HAL_RCC_OscConfig+0x288>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4a74      	ldr	r2, [pc, #464]	@ (80085d4 <HAL_RCC_OscConfig+0x288>)
 8008404:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008408:	6013      	str	r3, [r2, #0]
 800840a:	e00b      	b.n	8008424 <HAL_RCC_OscConfig+0xd8>
 800840c:	4b71      	ldr	r3, [pc, #452]	@ (80085d4 <HAL_RCC_OscConfig+0x288>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4a70      	ldr	r2, [pc, #448]	@ (80085d4 <HAL_RCC_OscConfig+0x288>)
 8008412:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008416:	6013      	str	r3, [r2, #0]
 8008418:	4b6e      	ldr	r3, [pc, #440]	@ (80085d4 <HAL_RCC_OscConfig+0x288>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a6d      	ldr	r2, [pc, #436]	@ (80085d4 <HAL_RCC_OscConfig+0x288>)
 800841e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008422:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d013      	beq.n	8008454 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800842c:	f7fa ffae 	bl	800338c <HAL_GetTick>
 8008430:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008432:	e008      	b.n	8008446 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008434:	f7fa ffaa 	bl	800338c <HAL_GetTick>
 8008438:	4602      	mov	r2, r0
 800843a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800843c:	1ad3      	subs	r3, r2, r3
 800843e:	2b64      	cmp	r3, #100	@ 0x64
 8008440:	d901      	bls.n	8008446 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008442:	2303      	movs	r3, #3
 8008444:	e3d4      	b.n	8008bf0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008446:	4b63      	ldr	r3, [pc, #396]	@ (80085d4 <HAL_RCC_OscConfig+0x288>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800844e:	2b00      	cmp	r3, #0
 8008450:	d0f0      	beq.n	8008434 <HAL_RCC_OscConfig+0xe8>
 8008452:	e014      	b.n	800847e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008454:	f7fa ff9a 	bl	800338c <HAL_GetTick>
 8008458:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800845a:	e008      	b.n	800846e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800845c:	f7fa ff96 	bl	800338c <HAL_GetTick>
 8008460:	4602      	mov	r2, r0
 8008462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008464:	1ad3      	subs	r3, r2, r3
 8008466:	2b64      	cmp	r3, #100	@ 0x64
 8008468:	d901      	bls.n	800846e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800846a:	2303      	movs	r3, #3
 800846c:	e3c0      	b.n	8008bf0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800846e:	4b59      	ldr	r3, [pc, #356]	@ (80085d4 <HAL_RCC_OscConfig+0x288>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008476:	2b00      	cmp	r3, #0
 8008478:	d1f0      	bne.n	800845c <HAL_RCC_OscConfig+0x110>
 800847a:	e000      	b.n	800847e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800847c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f003 0302 	and.w	r3, r3, #2
 8008486:	2b00      	cmp	r3, #0
 8008488:	f000 80ca 	beq.w	8008620 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800848c:	4b51      	ldr	r3, [pc, #324]	@ (80085d4 <HAL_RCC_OscConfig+0x288>)
 800848e:	691b      	ldr	r3, [r3, #16]
 8008490:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008494:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008496:	4b4f      	ldr	r3, [pc, #316]	@ (80085d4 <HAL_RCC_OscConfig+0x288>)
 8008498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800849a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800849c:	6a3b      	ldr	r3, [r7, #32]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d007      	beq.n	80084b2 <HAL_RCC_OscConfig+0x166>
 80084a2:	6a3b      	ldr	r3, [r7, #32]
 80084a4:	2b18      	cmp	r3, #24
 80084a6:	d156      	bne.n	8008556 <HAL_RCC_OscConfig+0x20a>
 80084a8:	69fb      	ldr	r3, [r7, #28]
 80084aa:	f003 0303 	and.w	r3, r3, #3
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d151      	bne.n	8008556 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80084b2:	4b48      	ldr	r3, [pc, #288]	@ (80085d4 <HAL_RCC_OscConfig+0x288>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f003 0304 	and.w	r3, r3, #4
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d005      	beq.n	80084ca <HAL_RCC_OscConfig+0x17e>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	68db      	ldr	r3, [r3, #12]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d101      	bne.n	80084ca <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80084c6:	2301      	movs	r3, #1
 80084c8:	e392      	b.n	8008bf0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80084ca:	4b42      	ldr	r3, [pc, #264]	@ (80085d4 <HAL_RCC_OscConfig+0x288>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f023 0219 	bic.w	r2, r3, #25
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	68db      	ldr	r3, [r3, #12]
 80084d6:	493f      	ldr	r1, [pc, #252]	@ (80085d4 <HAL_RCC_OscConfig+0x288>)
 80084d8:	4313      	orrs	r3, r2
 80084da:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084dc:	f7fa ff56 	bl	800338c <HAL_GetTick>
 80084e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80084e2:	e008      	b.n	80084f6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80084e4:	f7fa ff52 	bl	800338c <HAL_GetTick>
 80084e8:	4602      	mov	r2, r0
 80084ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ec:	1ad3      	subs	r3, r2, r3
 80084ee:	2b02      	cmp	r3, #2
 80084f0:	d901      	bls.n	80084f6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80084f2:	2303      	movs	r3, #3
 80084f4:	e37c      	b.n	8008bf0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80084f6:	4b37      	ldr	r3, [pc, #220]	@ (80085d4 <HAL_RCC_OscConfig+0x288>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f003 0304 	and.w	r3, r3, #4
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d0f0      	beq.n	80084e4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008502:	f7fa ff4f 	bl	80033a4 <HAL_GetREVID>
 8008506:	4603      	mov	r3, r0
 8008508:	f241 0203 	movw	r2, #4099	@ 0x1003
 800850c:	4293      	cmp	r3, r2
 800850e:	d817      	bhi.n	8008540 <HAL_RCC_OscConfig+0x1f4>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	691b      	ldr	r3, [r3, #16]
 8008514:	2b40      	cmp	r3, #64	@ 0x40
 8008516:	d108      	bne.n	800852a <HAL_RCC_OscConfig+0x1de>
 8008518:	4b2e      	ldr	r3, [pc, #184]	@ (80085d4 <HAL_RCC_OscConfig+0x288>)
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8008520:	4a2c      	ldr	r2, [pc, #176]	@ (80085d4 <HAL_RCC_OscConfig+0x288>)
 8008522:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008526:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008528:	e07a      	b.n	8008620 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800852a:	4b2a      	ldr	r3, [pc, #168]	@ (80085d4 <HAL_RCC_OscConfig+0x288>)
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	691b      	ldr	r3, [r3, #16]
 8008536:	031b      	lsls	r3, r3, #12
 8008538:	4926      	ldr	r1, [pc, #152]	@ (80085d4 <HAL_RCC_OscConfig+0x288>)
 800853a:	4313      	orrs	r3, r2
 800853c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800853e:	e06f      	b.n	8008620 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008540:	4b24      	ldr	r3, [pc, #144]	@ (80085d4 <HAL_RCC_OscConfig+0x288>)
 8008542:	685b      	ldr	r3, [r3, #4]
 8008544:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	691b      	ldr	r3, [r3, #16]
 800854c:	061b      	lsls	r3, r3, #24
 800854e:	4921      	ldr	r1, [pc, #132]	@ (80085d4 <HAL_RCC_OscConfig+0x288>)
 8008550:	4313      	orrs	r3, r2
 8008552:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008554:	e064      	b.n	8008620 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	68db      	ldr	r3, [r3, #12]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d047      	beq.n	80085ee <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800855e:	4b1d      	ldr	r3, [pc, #116]	@ (80085d4 <HAL_RCC_OscConfig+0x288>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f023 0219 	bic.w	r2, r3, #25
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	68db      	ldr	r3, [r3, #12]
 800856a:	491a      	ldr	r1, [pc, #104]	@ (80085d4 <HAL_RCC_OscConfig+0x288>)
 800856c:	4313      	orrs	r3, r2
 800856e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008570:	f7fa ff0c 	bl	800338c <HAL_GetTick>
 8008574:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008576:	e008      	b.n	800858a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008578:	f7fa ff08 	bl	800338c <HAL_GetTick>
 800857c:	4602      	mov	r2, r0
 800857e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008580:	1ad3      	subs	r3, r2, r3
 8008582:	2b02      	cmp	r3, #2
 8008584:	d901      	bls.n	800858a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8008586:	2303      	movs	r3, #3
 8008588:	e332      	b.n	8008bf0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800858a:	4b12      	ldr	r3, [pc, #72]	@ (80085d4 <HAL_RCC_OscConfig+0x288>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f003 0304 	and.w	r3, r3, #4
 8008592:	2b00      	cmp	r3, #0
 8008594:	d0f0      	beq.n	8008578 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008596:	f7fa ff05 	bl	80033a4 <HAL_GetREVID>
 800859a:	4603      	mov	r3, r0
 800859c:	f241 0203 	movw	r2, #4099	@ 0x1003
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d819      	bhi.n	80085d8 <HAL_RCC_OscConfig+0x28c>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	691b      	ldr	r3, [r3, #16]
 80085a8:	2b40      	cmp	r3, #64	@ 0x40
 80085aa:	d108      	bne.n	80085be <HAL_RCC_OscConfig+0x272>
 80085ac:	4b09      	ldr	r3, [pc, #36]	@ (80085d4 <HAL_RCC_OscConfig+0x288>)
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80085b4:	4a07      	ldr	r2, [pc, #28]	@ (80085d4 <HAL_RCC_OscConfig+0x288>)
 80085b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80085ba:	6053      	str	r3, [r2, #4]
 80085bc:	e030      	b.n	8008620 <HAL_RCC_OscConfig+0x2d4>
 80085be:	4b05      	ldr	r3, [pc, #20]	@ (80085d4 <HAL_RCC_OscConfig+0x288>)
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	691b      	ldr	r3, [r3, #16]
 80085ca:	031b      	lsls	r3, r3, #12
 80085cc:	4901      	ldr	r1, [pc, #4]	@ (80085d4 <HAL_RCC_OscConfig+0x288>)
 80085ce:	4313      	orrs	r3, r2
 80085d0:	604b      	str	r3, [r1, #4]
 80085d2:	e025      	b.n	8008620 <HAL_RCC_OscConfig+0x2d4>
 80085d4:	58024400 	.word	0x58024400
 80085d8:	4b9a      	ldr	r3, [pc, #616]	@ (8008844 <HAL_RCC_OscConfig+0x4f8>)
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	691b      	ldr	r3, [r3, #16]
 80085e4:	061b      	lsls	r3, r3, #24
 80085e6:	4997      	ldr	r1, [pc, #604]	@ (8008844 <HAL_RCC_OscConfig+0x4f8>)
 80085e8:	4313      	orrs	r3, r2
 80085ea:	604b      	str	r3, [r1, #4]
 80085ec:	e018      	b.n	8008620 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80085ee:	4b95      	ldr	r3, [pc, #596]	@ (8008844 <HAL_RCC_OscConfig+0x4f8>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4a94      	ldr	r2, [pc, #592]	@ (8008844 <HAL_RCC_OscConfig+0x4f8>)
 80085f4:	f023 0301 	bic.w	r3, r3, #1
 80085f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085fa:	f7fa fec7 	bl	800338c <HAL_GetTick>
 80085fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008600:	e008      	b.n	8008614 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008602:	f7fa fec3 	bl	800338c <HAL_GetTick>
 8008606:	4602      	mov	r2, r0
 8008608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800860a:	1ad3      	subs	r3, r2, r3
 800860c:	2b02      	cmp	r3, #2
 800860e:	d901      	bls.n	8008614 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8008610:	2303      	movs	r3, #3
 8008612:	e2ed      	b.n	8008bf0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008614:	4b8b      	ldr	r3, [pc, #556]	@ (8008844 <HAL_RCC_OscConfig+0x4f8>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f003 0304 	and.w	r3, r3, #4
 800861c:	2b00      	cmp	r3, #0
 800861e:	d1f0      	bne.n	8008602 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f003 0310 	and.w	r3, r3, #16
 8008628:	2b00      	cmp	r3, #0
 800862a:	f000 80a9 	beq.w	8008780 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800862e:	4b85      	ldr	r3, [pc, #532]	@ (8008844 <HAL_RCC_OscConfig+0x4f8>)
 8008630:	691b      	ldr	r3, [r3, #16]
 8008632:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008636:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008638:	4b82      	ldr	r3, [pc, #520]	@ (8008844 <HAL_RCC_OscConfig+0x4f8>)
 800863a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800863c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800863e:	69bb      	ldr	r3, [r7, #24]
 8008640:	2b08      	cmp	r3, #8
 8008642:	d007      	beq.n	8008654 <HAL_RCC_OscConfig+0x308>
 8008644:	69bb      	ldr	r3, [r7, #24]
 8008646:	2b18      	cmp	r3, #24
 8008648:	d13a      	bne.n	80086c0 <HAL_RCC_OscConfig+0x374>
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	f003 0303 	and.w	r3, r3, #3
 8008650:	2b01      	cmp	r3, #1
 8008652:	d135      	bne.n	80086c0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008654:	4b7b      	ldr	r3, [pc, #492]	@ (8008844 <HAL_RCC_OscConfig+0x4f8>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800865c:	2b00      	cmp	r3, #0
 800865e:	d005      	beq.n	800866c <HAL_RCC_OscConfig+0x320>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	69db      	ldr	r3, [r3, #28]
 8008664:	2b80      	cmp	r3, #128	@ 0x80
 8008666:	d001      	beq.n	800866c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008668:	2301      	movs	r3, #1
 800866a:	e2c1      	b.n	8008bf0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800866c:	f7fa fe9a 	bl	80033a4 <HAL_GetREVID>
 8008670:	4603      	mov	r3, r0
 8008672:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008676:	4293      	cmp	r3, r2
 8008678:	d817      	bhi.n	80086aa <HAL_RCC_OscConfig+0x35e>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6a1b      	ldr	r3, [r3, #32]
 800867e:	2b20      	cmp	r3, #32
 8008680:	d108      	bne.n	8008694 <HAL_RCC_OscConfig+0x348>
 8008682:	4b70      	ldr	r3, [pc, #448]	@ (8008844 <HAL_RCC_OscConfig+0x4f8>)
 8008684:	685b      	ldr	r3, [r3, #4]
 8008686:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800868a:	4a6e      	ldr	r2, [pc, #440]	@ (8008844 <HAL_RCC_OscConfig+0x4f8>)
 800868c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008690:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008692:	e075      	b.n	8008780 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008694:	4b6b      	ldr	r3, [pc, #428]	@ (8008844 <HAL_RCC_OscConfig+0x4f8>)
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6a1b      	ldr	r3, [r3, #32]
 80086a0:	069b      	lsls	r3, r3, #26
 80086a2:	4968      	ldr	r1, [pc, #416]	@ (8008844 <HAL_RCC_OscConfig+0x4f8>)
 80086a4:	4313      	orrs	r3, r2
 80086a6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80086a8:	e06a      	b.n	8008780 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80086aa:	4b66      	ldr	r3, [pc, #408]	@ (8008844 <HAL_RCC_OscConfig+0x4f8>)
 80086ac:	68db      	ldr	r3, [r3, #12]
 80086ae:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6a1b      	ldr	r3, [r3, #32]
 80086b6:	061b      	lsls	r3, r3, #24
 80086b8:	4962      	ldr	r1, [pc, #392]	@ (8008844 <HAL_RCC_OscConfig+0x4f8>)
 80086ba:	4313      	orrs	r3, r2
 80086bc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80086be:	e05f      	b.n	8008780 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	69db      	ldr	r3, [r3, #28]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d042      	beq.n	800874e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80086c8:	4b5e      	ldr	r3, [pc, #376]	@ (8008844 <HAL_RCC_OscConfig+0x4f8>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a5d      	ldr	r2, [pc, #372]	@ (8008844 <HAL_RCC_OscConfig+0x4f8>)
 80086ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086d4:	f7fa fe5a 	bl	800338c <HAL_GetTick>
 80086d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80086da:	e008      	b.n	80086ee <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80086dc:	f7fa fe56 	bl	800338c <HAL_GetTick>
 80086e0:	4602      	mov	r2, r0
 80086e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086e4:	1ad3      	subs	r3, r2, r3
 80086e6:	2b02      	cmp	r3, #2
 80086e8:	d901      	bls.n	80086ee <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80086ea:	2303      	movs	r3, #3
 80086ec:	e280      	b.n	8008bf0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80086ee:	4b55      	ldr	r3, [pc, #340]	@ (8008844 <HAL_RCC_OscConfig+0x4f8>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d0f0      	beq.n	80086dc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80086fa:	f7fa fe53 	bl	80033a4 <HAL_GetREVID>
 80086fe:	4603      	mov	r3, r0
 8008700:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008704:	4293      	cmp	r3, r2
 8008706:	d817      	bhi.n	8008738 <HAL_RCC_OscConfig+0x3ec>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6a1b      	ldr	r3, [r3, #32]
 800870c:	2b20      	cmp	r3, #32
 800870e:	d108      	bne.n	8008722 <HAL_RCC_OscConfig+0x3d6>
 8008710:	4b4c      	ldr	r3, [pc, #304]	@ (8008844 <HAL_RCC_OscConfig+0x4f8>)
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8008718:	4a4a      	ldr	r2, [pc, #296]	@ (8008844 <HAL_RCC_OscConfig+0x4f8>)
 800871a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800871e:	6053      	str	r3, [r2, #4]
 8008720:	e02e      	b.n	8008780 <HAL_RCC_OscConfig+0x434>
 8008722:	4b48      	ldr	r3, [pc, #288]	@ (8008844 <HAL_RCC_OscConfig+0x4f8>)
 8008724:	685b      	ldr	r3, [r3, #4]
 8008726:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6a1b      	ldr	r3, [r3, #32]
 800872e:	069b      	lsls	r3, r3, #26
 8008730:	4944      	ldr	r1, [pc, #272]	@ (8008844 <HAL_RCC_OscConfig+0x4f8>)
 8008732:	4313      	orrs	r3, r2
 8008734:	604b      	str	r3, [r1, #4]
 8008736:	e023      	b.n	8008780 <HAL_RCC_OscConfig+0x434>
 8008738:	4b42      	ldr	r3, [pc, #264]	@ (8008844 <HAL_RCC_OscConfig+0x4f8>)
 800873a:	68db      	ldr	r3, [r3, #12]
 800873c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6a1b      	ldr	r3, [r3, #32]
 8008744:	061b      	lsls	r3, r3, #24
 8008746:	493f      	ldr	r1, [pc, #252]	@ (8008844 <HAL_RCC_OscConfig+0x4f8>)
 8008748:	4313      	orrs	r3, r2
 800874a:	60cb      	str	r3, [r1, #12]
 800874c:	e018      	b.n	8008780 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800874e:	4b3d      	ldr	r3, [pc, #244]	@ (8008844 <HAL_RCC_OscConfig+0x4f8>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	4a3c      	ldr	r2, [pc, #240]	@ (8008844 <HAL_RCC_OscConfig+0x4f8>)
 8008754:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008758:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800875a:	f7fa fe17 	bl	800338c <HAL_GetTick>
 800875e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008760:	e008      	b.n	8008774 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008762:	f7fa fe13 	bl	800338c <HAL_GetTick>
 8008766:	4602      	mov	r2, r0
 8008768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800876a:	1ad3      	subs	r3, r2, r3
 800876c:	2b02      	cmp	r3, #2
 800876e:	d901      	bls.n	8008774 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008770:	2303      	movs	r3, #3
 8008772:	e23d      	b.n	8008bf0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008774:	4b33      	ldr	r3, [pc, #204]	@ (8008844 <HAL_RCC_OscConfig+0x4f8>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800877c:	2b00      	cmp	r3, #0
 800877e:	d1f0      	bne.n	8008762 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f003 0308 	and.w	r3, r3, #8
 8008788:	2b00      	cmp	r3, #0
 800878a:	d036      	beq.n	80087fa <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	695b      	ldr	r3, [r3, #20]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d019      	beq.n	80087c8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008794:	4b2b      	ldr	r3, [pc, #172]	@ (8008844 <HAL_RCC_OscConfig+0x4f8>)
 8008796:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008798:	4a2a      	ldr	r2, [pc, #168]	@ (8008844 <HAL_RCC_OscConfig+0x4f8>)
 800879a:	f043 0301 	orr.w	r3, r3, #1
 800879e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087a0:	f7fa fdf4 	bl	800338c <HAL_GetTick>
 80087a4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80087a6:	e008      	b.n	80087ba <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80087a8:	f7fa fdf0 	bl	800338c <HAL_GetTick>
 80087ac:	4602      	mov	r2, r0
 80087ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087b0:	1ad3      	subs	r3, r2, r3
 80087b2:	2b02      	cmp	r3, #2
 80087b4:	d901      	bls.n	80087ba <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80087b6:	2303      	movs	r3, #3
 80087b8:	e21a      	b.n	8008bf0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80087ba:	4b22      	ldr	r3, [pc, #136]	@ (8008844 <HAL_RCC_OscConfig+0x4f8>)
 80087bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087be:	f003 0302 	and.w	r3, r3, #2
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d0f0      	beq.n	80087a8 <HAL_RCC_OscConfig+0x45c>
 80087c6:	e018      	b.n	80087fa <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80087c8:	4b1e      	ldr	r3, [pc, #120]	@ (8008844 <HAL_RCC_OscConfig+0x4f8>)
 80087ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087cc:	4a1d      	ldr	r2, [pc, #116]	@ (8008844 <HAL_RCC_OscConfig+0x4f8>)
 80087ce:	f023 0301 	bic.w	r3, r3, #1
 80087d2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087d4:	f7fa fdda 	bl	800338c <HAL_GetTick>
 80087d8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80087da:	e008      	b.n	80087ee <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80087dc:	f7fa fdd6 	bl	800338c <HAL_GetTick>
 80087e0:	4602      	mov	r2, r0
 80087e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087e4:	1ad3      	subs	r3, r2, r3
 80087e6:	2b02      	cmp	r3, #2
 80087e8:	d901      	bls.n	80087ee <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80087ea:	2303      	movs	r3, #3
 80087ec:	e200      	b.n	8008bf0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80087ee:	4b15      	ldr	r3, [pc, #84]	@ (8008844 <HAL_RCC_OscConfig+0x4f8>)
 80087f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087f2:	f003 0302 	and.w	r3, r3, #2
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d1f0      	bne.n	80087dc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f003 0320 	and.w	r3, r3, #32
 8008802:	2b00      	cmp	r3, #0
 8008804:	d039      	beq.n	800887a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	699b      	ldr	r3, [r3, #24]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d01c      	beq.n	8008848 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800880e:	4b0d      	ldr	r3, [pc, #52]	@ (8008844 <HAL_RCC_OscConfig+0x4f8>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4a0c      	ldr	r2, [pc, #48]	@ (8008844 <HAL_RCC_OscConfig+0x4f8>)
 8008814:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008818:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800881a:	f7fa fdb7 	bl	800338c <HAL_GetTick>
 800881e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008820:	e008      	b.n	8008834 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008822:	f7fa fdb3 	bl	800338c <HAL_GetTick>
 8008826:	4602      	mov	r2, r0
 8008828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800882a:	1ad3      	subs	r3, r2, r3
 800882c:	2b02      	cmp	r3, #2
 800882e:	d901      	bls.n	8008834 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008830:	2303      	movs	r3, #3
 8008832:	e1dd      	b.n	8008bf0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008834:	4b03      	ldr	r3, [pc, #12]	@ (8008844 <HAL_RCC_OscConfig+0x4f8>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800883c:	2b00      	cmp	r3, #0
 800883e:	d0f0      	beq.n	8008822 <HAL_RCC_OscConfig+0x4d6>
 8008840:	e01b      	b.n	800887a <HAL_RCC_OscConfig+0x52e>
 8008842:	bf00      	nop
 8008844:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008848:	4b9b      	ldr	r3, [pc, #620]	@ (8008ab8 <HAL_RCC_OscConfig+0x76c>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4a9a      	ldr	r2, [pc, #616]	@ (8008ab8 <HAL_RCC_OscConfig+0x76c>)
 800884e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008852:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008854:	f7fa fd9a 	bl	800338c <HAL_GetTick>
 8008858:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800885a:	e008      	b.n	800886e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800885c:	f7fa fd96 	bl	800338c <HAL_GetTick>
 8008860:	4602      	mov	r2, r0
 8008862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008864:	1ad3      	subs	r3, r2, r3
 8008866:	2b02      	cmp	r3, #2
 8008868:	d901      	bls.n	800886e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800886a:	2303      	movs	r3, #3
 800886c:	e1c0      	b.n	8008bf0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800886e:	4b92      	ldr	r3, [pc, #584]	@ (8008ab8 <HAL_RCC_OscConfig+0x76c>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008876:	2b00      	cmp	r3, #0
 8008878:	d1f0      	bne.n	800885c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f003 0304 	and.w	r3, r3, #4
 8008882:	2b00      	cmp	r3, #0
 8008884:	f000 8081 	beq.w	800898a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008888:	4b8c      	ldr	r3, [pc, #560]	@ (8008abc <HAL_RCC_OscConfig+0x770>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4a8b      	ldr	r2, [pc, #556]	@ (8008abc <HAL_RCC_OscConfig+0x770>)
 800888e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008892:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008894:	f7fa fd7a 	bl	800338c <HAL_GetTick>
 8008898:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800889a:	e008      	b.n	80088ae <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800889c:	f7fa fd76 	bl	800338c <HAL_GetTick>
 80088a0:	4602      	mov	r2, r0
 80088a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088a4:	1ad3      	subs	r3, r2, r3
 80088a6:	2b64      	cmp	r3, #100	@ 0x64
 80088a8:	d901      	bls.n	80088ae <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80088aa:	2303      	movs	r3, #3
 80088ac:	e1a0      	b.n	8008bf0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80088ae:	4b83      	ldr	r3, [pc, #524]	@ (8008abc <HAL_RCC_OscConfig+0x770>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d0f0      	beq.n	800889c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	689b      	ldr	r3, [r3, #8]
 80088be:	2b01      	cmp	r3, #1
 80088c0:	d106      	bne.n	80088d0 <HAL_RCC_OscConfig+0x584>
 80088c2:	4b7d      	ldr	r3, [pc, #500]	@ (8008ab8 <HAL_RCC_OscConfig+0x76c>)
 80088c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088c6:	4a7c      	ldr	r2, [pc, #496]	@ (8008ab8 <HAL_RCC_OscConfig+0x76c>)
 80088c8:	f043 0301 	orr.w	r3, r3, #1
 80088cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80088ce:	e02d      	b.n	800892c <HAL_RCC_OscConfig+0x5e0>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	689b      	ldr	r3, [r3, #8]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d10c      	bne.n	80088f2 <HAL_RCC_OscConfig+0x5a6>
 80088d8:	4b77      	ldr	r3, [pc, #476]	@ (8008ab8 <HAL_RCC_OscConfig+0x76c>)
 80088da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088dc:	4a76      	ldr	r2, [pc, #472]	@ (8008ab8 <HAL_RCC_OscConfig+0x76c>)
 80088de:	f023 0301 	bic.w	r3, r3, #1
 80088e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80088e4:	4b74      	ldr	r3, [pc, #464]	@ (8008ab8 <HAL_RCC_OscConfig+0x76c>)
 80088e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088e8:	4a73      	ldr	r2, [pc, #460]	@ (8008ab8 <HAL_RCC_OscConfig+0x76c>)
 80088ea:	f023 0304 	bic.w	r3, r3, #4
 80088ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80088f0:	e01c      	b.n	800892c <HAL_RCC_OscConfig+0x5e0>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	689b      	ldr	r3, [r3, #8]
 80088f6:	2b05      	cmp	r3, #5
 80088f8:	d10c      	bne.n	8008914 <HAL_RCC_OscConfig+0x5c8>
 80088fa:	4b6f      	ldr	r3, [pc, #444]	@ (8008ab8 <HAL_RCC_OscConfig+0x76c>)
 80088fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088fe:	4a6e      	ldr	r2, [pc, #440]	@ (8008ab8 <HAL_RCC_OscConfig+0x76c>)
 8008900:	f043 0304 	orr.w	r3, r3, #4
 8008904:	6713      	str	r3, [r2, #112]	@ 0x70
 8008906:	4b6c      	ldr	r3, [pc, #432]	@ (8008ab8 <HAL_RCC_OscConfig+0x76c>)
 8008908:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800890a:	4a6b      	ldr	r2, [pc, #428]	@ (8008ab8 <HAL_RCC_OscConfig+0x76c>)
 800890c:	f043 0301 	orr.w	r3, r3, #1
 8008910:	6713      	str	r3, [r2, #112]	@ 0x70
 8008912:	e00b      	b.n	800892c <HAL_RCC_OscConfig+0x5e0>
 8008914:	4b68      	ldr	r3, [pc, #416]	@ (8008ab8 <HAL_RCC_OscConfig+0x76c>)
 8008916:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008918:	4a67      	ldr	r2, [pc, #412]	@ (8008ab8 <HAL_RCC_OscConfig+0x76c>)
 800891a:	f023 0301 	bic.w	r3, r3, #1
 800891e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008920:	4b65      	ldr	r3, [pc, #404]	@ (8008ab8 <HAL_RCC_OscConfig+0x76c>)
 8008922:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008924:	4a64      	ldr	r2, [pc, #400]	@ (8008ab8 <HAL_RCC_OscConfig+0x76c>)
 8008926:	f023 0304 	bic.w	r3, r3, #4
 800892a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	689b      	ldr	r3, [r3, #8]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d015      	beq.n	8008960 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008934:	f7fa fd2a 	bl	800338c <HAL_GetTick>
 8008938:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800893a:	e00a      	b.n	8008952 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800893c:	f7fa fd26 	bl	800338c <HAL_GetTick>
 8008940:	4602      	mov	r2, r0
 8008942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008944:	1ad3      	subs	r3, r2, r3
 8008946:	f241 3288 	movw	r2, #5000	@ 0x1388
 800894a:	4293      	cmp	r3, r2
 800894c:	d901      	bls.n	8008952 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800894e:	2303      	movs	r3, #3
 8008950:	e14e      	b.n	8008bf0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008952:	4b59      	ldr	r3, [pc, #356]	@ (8008ab8 <HAL_RCC_OscConfig+0x76c>)
 8008954:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008956:	f003 0302 	and.w	r3, r3, #2
 800895a:	2b00      	cmp	r3, #0
 800895c:	d0ee      	beq.n	800893c <HAL_RCC_OscConfig+0x5f0>
 800895e:	e014      	b.n	800898a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008960:	f7fa fd14 	bl	800338c <HAL_GetTick>
 8008964:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008966:	e00a      	b.n	800897e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008968:	f7fa fd10 	bl	800338c <HAL_GetTick>
 800896c:	4602      	mov	r2, r0
 800896e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008970:	1ad3      	subs	r3, r2, r3
 8008972:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008976:	4293      	cmp	r3, r2
 8008978:	d901      	bls.n	800897e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800897a:	2303      	movs	r3, #3
 800897c:	e138      	b.n	8008bf0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800897e:	4b4e      	ldr	r3, [pc, #312]	@ (8008ab8 <HAL_RCC_OscConfig+0x76c>)
 8008980:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008982:	f003 0302 	and.w	r3, r3, #2
 8008986:	2b00      	cmp	r3, #0
 8008988:	d1ee      	bne.n	8008968 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800898e:	2b00      	cmp	r3, #0
 8008990:	f000 812d 	beq.w	8008bee <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008994:	4b48      	ldr	r3, [pc, #288]	@ (8008ab8 <HAL_RCC_OscConfig+0x76c>)
 8008996:	691b      	ldr	r3, [r3, #16]
 8008998:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800899c:	2b18      	cmp	r3, #24
 800899e:	f000 80bd 	beq.w	8008b1c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089a6:	2b02      	cmp	r3, #2
 80089a8:	f040 809e 	bne.w	8008ae8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80089ac:	4b42      	ldr	r3, [pc, #264]	@ (8008ab8 <HAL_RCC_OscConfig+0x76c>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4a41      	ldr	r2, [pc, #260]	@ (8008ab8 <HAL_RCC_OscConfig+0x76c>)
 80089b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80089b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089b8:	f7fa fce8 	bl	800338c <HAL_GetTick>
 80089bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80089be:	e008      	b.n	80089d2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80089c0:	f7fa fce4 	bl	800338c <HAL_GetTick>
 80089c4:	4602      	mov	r2, r0
 80089c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089c8:	1ad3      	subs	r3, r2, r3
 80089ca:	2b02      	cmp	r3, #2
 80089cc:	d901      	bls.n	80089d2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80089ce:	2303      	movs	r3, #3
 80089d0:	e10e      	b.n	8008bf0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80089d2:	4b39      	ldr	r3, [pc, #228]	@ (8008ab8 <HAL_RCC_OscConfig+0x76c>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d1f0      	bne.n	80089c0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80089de:	4b36      	ldr	r3, [pc, #216]	@ (8008ab8 <HAL_RCC_OscConfig+0x76c>)
 80089e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80089e2:	4b37      	ldr	r3, [pc, #220]	@ (8008ac0 <HAL_RCC_OscConfig+0x774>)
 80089e4:	4013      	ands	r3, r2
 80089e6:	687a      	ldr	r2, [r7, #4]
 80089e8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80089ea:	687a      	ldr	r2, [r7, #4]
 80089ec:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80089ee:	0112      	lsls	r2, r2, #4
 80089f0:	430a      	orrs	r2, r1
 80089f2:	4931      	ldr	r1, [pc, #196]	@ (8008ab8 <HAL_RCC_OscConfig+0x76c>)
 80089f4:	4313      	orrs	r3, r2
 80089f6:	628b      	str	r3, [r1, #40]	@ 0x28
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089fc:	3b01      	subs	r3, #1
 80089fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a06:	3b01      	subs	r3, #1
 8008a08:	025b      	lsls	r3, r3, #9
 8008a0a:	b29b      	uxth	r3, r3
 8008a0c:	431a      	orrs	r2, r3
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a12:	3b01      	subs	r3, #1
 8008a14:	041b      	lsls	r3, r3, #16
 8008a16:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008a1a:	431a      	orrs	r2, r3
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a20:	3b01      	subs	r3, #1
 8008a22:	061b      	lsls	r3, r3, #24
 8008a24:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008a28:	4923      	ldr	r1, [pc, #140]	@ (8008ab8 <HAL_RCC_OscConfig+0x76c>)
 8008a2a:	4313      	orrs	r3, r2
 8008a2c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008a2e:	4b22      	ldr	r3, [pc, #136]	@ (8008ab8 <HAL_RCC_OscConfig+0x76c>)
 8008a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a32:	4a21      	ldr	r2, [pc, #132]	@ (8008ab8 <HAL_RCC_OscConfig+0x76c>)
 8008a34:	f023 0301 	bic.w	r3, r3, #1
 8008a38:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008a3a:	4b1f      	ldr	r3, [pc, #124]	@ (8008ab8 <HAL_RCC_OscConfig+0x76c>)
 8008a3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a3e:	4b21      	ldr	r3, [pc, #132]	@ (8008ac4 <HAL_RCC_OscConfig+0x778>)
 8008a40:	4013      	ands	r3, r2
 8008a42:	687a      	ldr	r2, [r7, #4]
 8008a44:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008a46:	00d2      	lsls	r2, r2, #3
 8008a48:	491b      	ldr	r1, [pc, #108]	@ (8008ab8 <HAL_RCC_OscConfig+0x76c>)
 8008a4a:	4313      	orrs	r3, r2
 8008a4c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008a4e:	4b1a      	ldr	r3, [pc, #104]	@ (8008ab8 <HAL_RCC_OscConfig+0x76c>)
 8008a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a52:	f023 020c 	bic.w	r2, r3, #12
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a5a:	4917      	ldr	r1, [pc, #92]	@ (8008ab8 <HAL_RCC_OscConfig+0x76c>)
 8008a5c:	4313      	orrs	r3, r2
 8008a5e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008a60:	4b15      	ldr	r3, [pc, #84]	@ (8008ab8 <HAL_RCC_OscConfig+0x76c>)
 8008a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a64:	f023 0202 	bic.w	r2, r3, #2
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a6c:	4912      	ldr	r1, [pc, #72]	@ (8008ab8 <HAL_RCC_OscConfig+0x76c>)
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008a72:	4b11      	ldr	r3, [pc, #68]	@ (8008ab8 <HAL_RCC_OscConfig+0x76c>)
 8008a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a76:	4a10      	ldr	r2, [pc, #64]	@ (8008ab8 <HAL_RCC_OscConfig+0x76c>)
 8008a78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008a7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a7e:	4b0e      	ldr	r3, [pc, #56]	@ (8008ab8 <HAL_RCC_OscConfig+0x76c>)
 8008a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a82:	4a0d      	ldr	r2, [pc, #52]	@ (8008ab8 <HAL_RCC_OscConfig+0x76c>)
 8008a84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008a88:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008a8a:	4b0b      	ldr	r3, [pc, #44]	@ (8008ab8 <HAL_RCC_OscConfig+0x76c>)
 8008a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a8e:	4a0a      	ldr	r2, [pc, #40]	@ (8008ab8 <HAL_RCC_OscConfig+0x76c>)
 8008a90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008a94:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008a96:	4b08      	ldr	r3, [pc, #32]	@ (8008ab8 <HAL_RCC_OscConfig+0x76c>)
 8008a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a9a:	4a07      	ldr	r2, [pc, #28]	@ (8008ab8 <HAL_RCC_OscConfig+0x76c>)
 8008a9c:	f043 0301 	orr.w	r3, r3, #1
 8008aa0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008aa2:	4b05      	ldr	r3, [pc, #20]	@ (8008ab8 <HAL_RCC_OscConfig+0x76c>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4a04      	ldr	r2, [pc, #16]	@ (8008ab8 <HAL_RCC_OscConfig+0x76c>)
 8008aa8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008aac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008aae:	f7fa fc6d 	bl	800338c <HAL_GetTick>
 8008ab2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008ab4:	e011      	b.n	8008ada <HAL_RCC_OscConfig+0x78e>
 8008ab6:	bf00      	nop
 8008ab8:	58024400 	.word	0x58024400
 8008abc:	58024800 	.word	0x58024800
 8008ac0:	fffffc0c 	.word	0xfffffc0c
 8008ac4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ac8:	f7fa fc60 	bl	800338c <HAL_GetTick>
 8008acc:	4602      	mov	r2, r0
 8008ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ad0:	1ad3      	subs	r3, r2, r3
 8008ad2:	2b02      	cmp	r3, #2
 8008ad4:	d901      	bls.n	8008ada <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008ad6:	2303      	movs	r3, #3
 8008ad8:	e08a      	b.n	8008bf0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008ada:	4b47      	ldr	r3, [pc, #284]	@ (8008bf8 <HAL_RCC_OscConfig+0x8ac>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d0f0      	beq.n	8008ac8 <HAL_RCC_OscConfig+0x77c>
 8008ae6:	e082      	b.n	8008bee <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ae8:	4b43      	ldr	r3, [pc, #268]	@ (8008bf8 <HAL_RCC_OscConfig+0x8ac>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4a42      	ldr	r2, [pc, #264]	@ (8008bf8 <HAL_RCC_OscConfig+0x8ac>)
 8008aee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008af2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008af4:	f7fa fc4a 	bl	800338c <HAL_GetTick>
 8008af8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008afa:	e008      	b.n	8008b0e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008afc:	f7fa fc46 	bl	800338c <HAL_GetTick>
 8008b00:	4602      	mov	r2, r0
 8008b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b04:	1ad3      	subs	r3, r2, r3
 8008b06:	2b02      	cmp	r3, #2
 8008b08:	d901      	bls.n	8008b0e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008b0a:	2303      	movs	r3, #3
 8008b0c:	e070      	b.n	8008bf0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008b0e:	4b3a      	ldr	r3, [pc, #232]	@ (8008bf8 <HAL_RCC_OscConfig+0x8ac>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d1f0      	bne.n	8008afc <HAL_RCC_OscConfig+0x7b0>
 8008b1a:	e068      	b.n	8008bee <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008b1c:	4b36      	ldr	r3, [pc, #216]	@ (8008bf8 <HAL_RCC_OscConfig+0x8ac>)
 8008b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b20:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008b22:	4b35      	ldr	r3, [pc, #212]	@ (8008bf8 <HAL_RCC_OscConfig+0x8ac>)
 8008b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b26:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b2c:	2b01      	cmp	r3, #1
 8008b2e:	d031      	beq.n	8008b94 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	f003 0203 	and.w	r2, r3, #3
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b3a:	429a      	cmp	r2, r3
 8008b3c:	d12a      	bne.n	8008b94 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008b3e:	693b      	ldr	r3, [r7, #16]
 8008b40:	091b      	lsrs	r3, r3, #4
 8008b42:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b4a:	429a      	cmp	r2, r3
 8008b4c:	d122      	bne.n	8008b94 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b58:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008b5a:	429a      	cmp	r2, r3
 8008b5c:	d11a      	bne.n	8008b94 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	0a5b      	lsrs	r3, r3, #9
 8008b62:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b6a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	d111      	bne.n	8008b94 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	0c1b      	lsrs	r3, r3, #16
 8008b74:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b7c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008b7e:	429a      	cmp	r2, r3
 8008b80:	d108      	bne.n	8008b94 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	0e1b      	lsrs	r3, r3, #24
 8008b86:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b8e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008b90:	429a      	cmp	r2, r3
 8008b92:	d001      	beq.n	8008b98 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008b94:	2301      	movs	r3, #1
 8008b96:	e02b      	b.n	8008bf0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008b98:	4b17      	ldr	r3, [pc, #92]	@ (8008bf8 <HAL_RCC_OscConfig+0x8ac>)
 8008b9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b9c:	08db      	lsrs	r3, r3, #3
 8008b9e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008ba2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ba8:	693a      	ldr	r2, [r7, #16]
 8008baa:	429a      	cmp	r2, r3
 8008bac:	d01f      	beq.n	8008bee <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008bae:	4b12      	ldr	r3, [pc, #72]	@ (8008bf8 <HAL_RCC_OscConfig+0x8ac>)
 8008bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bb2:	4a11      	ldr	r2, [pc, #68]	@ (8008bf8 <HAL_RCC_OscConfig+0x8ac>)
 8008bb4:	f023 0301 	bic.w	r3, r3, #1
 8008bb8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008bba:	f7fa fbe7 	bl	800338c <HAL_GetTick>
 8008bbe:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008bc0:	bf00      	nop
 8008bc2:	f7fa fbe3 	bl	800338c <HAL_GetTick>
 8008bc6:	4602      	mov	r2, r0
 8008bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d0f9      	beq.n	8008bc2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008bce:	4b0a      	ldr	r3, [pc, #40]	@ (8008bf8 <HAL_RCC_OscConfig+0x8ac>)
 8008bd0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8008bfc <HAL_RCC_OscConfig+0x8b0>)
 8008bd4:	4013      	ands	r3, r2
 8008bd6:	687a      	ldr	r2, [r7, #4]
 8008bd8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008bda:	00d2      	lsls	r2, r2, #3
 8008bdc:	4906      	ldr	r1, [pc, #24]	@ (8008bf8 <HAL_RCC_OscConfig+0x8ac>)
 8008bde:	4313      	orrs	r3, r2
 8008be0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008be2:	4b05      	ldr	r3, [pc, #20]	@ (8008bf8 <HAL_RCC_OscConfig+0x8ac>)
 8008be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008be6:	4a04      	ldr	r2, [pc, #16]	@ (8008bf8 <HAL_RCC_OscConfig+0x8ac>)
 8008be8:	f043 0301 	orr.w	r3, r3, #1
 8008bec:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008bee:	2300      	movs	r3, #0
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3730      	adds	r7, #48	@ 0x30
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}
 8008bf8:	58024400 	.word	0x58024400
 8008bfc:	ffff0007 	.word	0xffff0007

08008c00 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b086      	sub	sp, #24
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d101      	bne.n	8008c14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008c10:	2301      	movs	r3, #1
 8008c12:	e19c      	b.n	8008f4e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008c14:	4b8a      	ldr	r3, [pc, #552]	@ (8008e40 <HAL_RCC_ClockConfig+0x240>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f003 030f 	and.w	r3, r3, #15
 8008c1c:	683a      	ldr	r2, [r7, #0]
 8008c1e:	429a      	cmp	r2, r3
 8008c20:	d910      	bls.n	8008c44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c22:	4b87      	ldr	r3, [pc, #540]	@ (8008e40 <HAL_RCC_ClockConfig+0x240>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f023 020f 	bic.w	r2, r3, #15
 8008c2a:	4985      	ldr	r1, [pc, #532]	@ (8008e40 <HAL_RCC_ClockConfig+0x240>)
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	4313      	orrs	r3, r2
 8008c30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c32:	4b83      	ldr	r3, [pc, #524]	@ (8008e40 <HAL_RCC_ClockConfig+0x240>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f003 030f 	and.w	r3, r3, #15
 8008c3a:	683a      	ldr	r2, [r7, #0]
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d001      	beq.n	8008c44 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008c40:	2301      	movs	r3, #1
 8008c42:	e184      	b.n	8008f4e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f003 0304 	and.w	r3, r3, #4
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d010      	beq.n	8008c72 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	691a      	ldr	r2, [r3, #16]
 8008c54:	4b7b      	ldr	r3, [pc, #492]	@ (8008e44 <HAL_RCC_ClockConfig+0x244>)
 8008c56:	699b      	ldr	r3, [r3, #24]
 8008c58:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	d908      	bls.n	8008c72 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008c60:	4b78      	ldr	r3, [pc, #480]	@ (8008e44 <HAL_RCC_ClockConfig+0x244>)
 8008c62:	699b      	ldr	r3, [r3, #24]
 8008c64:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	691b      	ldr	r3, [r3, #16]
 8008c6c:	4975      	ldr	r1, [pc, #468]	@ (8008e44 <HAL_RCC_ClockConfig+0x244>)
 8008c6e:	4313      	orrs	r3, r2
 8008c70:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f003 0308 	and.w	r3, r3, #8
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d010      	beq.n	8008ca0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	695a      	ldr	r2, [r3, #20]
 8008c82:	4b70      	ldr	r3, [pc, #448]	@ (8008e44 <HAL_RCC_ClockConfig+0x244>)
 8008c84:	69db      	ldr	r3, [r3, #28]
 8008c86:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008c8a:	429a      	cmp	r2, r3
 8008c8c:	d908      	bls.n	8008ca0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008c8e:	4b6d      	ldr	r3, [pc, #436]	@ (8008e44 <HAL_RCC_ClockConfig+0x244>)
 8008c90:	69db      	ldr	r3, [r3, #28]
 8008c92:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	695b      	ldr	r3, [r3, #20]
 8008c9a:	496a      	ldr	r1, [pc, #424]	@ (8008e44 <HAL_RCC_ClockConfig+0x244>)
 8008c9c:	4313      	orrs	r3, r2
 8008c9e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f003 0310 	and.w	r3, r3, #16
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d010      	beq.n	8008cce <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	699a      	ldr	r2, [r3, #24]
 8008cb0:	4b64      	ldr	r3, [pc, #400]	@ (8008e44 <HAL_RCC_ClockConfig+0x244>)
 8008cb2:	69db      	ldr	r3, [r3, #28]
 8008cb4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008cb8:	429a      	cmp	r2, r3
 8008cba:	d908      	bls.n	8008cce <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008cbc:	4b61      	ldr	r3, [pc, #388]	@ (8008e44 <HAL_RCC_ClockConfig+0x244>)
 8008cbe:	69db      	ldr	r3, [r3, #28]
 8008cc0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	699b      	ldr	r3, [r3, #24]
 8008cc8:	495e      	ldr	r1, [pc, #376]	@ (8008e44 <HAL_RCC_ClockConfig+0x244>)
 8008cca:	4313      	orrs	r3, r2
 8008ccc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f003 0320 	and.w	r3, r3, #32
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d010      	beq.n	8008cfc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	69da      	ldr	r2, [r3, #28]
 8008cde:	4b59      	ldr	r3, [pc, #356]	@ (8008e44 <HAL_RCC_ClockConfig+0x244>)
 8008ce0:	6a1b      	ldr	r3, [r3, #32]
 8008ce2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008ce6:	429a      	cmp	r2, r3
 8008ce8:	d908      	bls.n	8008cfc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008cea:	4b56      	ldr	r3, [pc, #344]	@ (8008e44 <HAL_RCC_ClockConfig+0x244>)
 8008cec:	6a1b      	ldr	r3, [r3, #32]
 8008cee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	69db      	ldr	r3, [r3, #28]
 8008cf6:	4953      	ldr	r1, [pc, #332]	@ (8008e44 <HAL_RCC_ClockConfig+0x244>)
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f003 0302 	and.w	r3, r3, #2
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d010      	beq.n	8008d2a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	68da      	ldr	r2, [r3, #12]
 8008d0c:	4b4d      	ldr	r3, [pc, #308]	@ (8008e44 <HAL_RCC_ClockConfig+0x244>)
 8008d0e:	699b      	ldr	r3, [r3, #24]
 8008d10:	f003 030f 	and.w	r3, r3, #15
 8008d14:	429a      	cmp	r2, r3
 8008d16:	d908      	bls.n	8008d2a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d18:	4b4a      	ldr	r3, [pc, #296]	@ (8008e44 <HAL_RCC_ClockConfig+0x244>)
 8008d1a:	699b      	ldr	r3, [r3, #24]
 8008d1c:	f023 020f 	bic.w	r2, r3, #15
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	68db      	ldr	r3, [r3, #12]
 8008d24:	4947      	ldr	r1, [pc, #284]	@ (8008e44 <HAL_RCC_ClockConfig+0x244>)
 8008d26:	4313      	orrs	r3, r2
 8008d28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f003 0301 	and.w	r3, r3, #1
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d055      	beq.n	8008de2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008d36:	4b43      	ldr	r3, [pc, #268]	@ (8008e44 <HAL_RCC_ClockConfig+0x244>)
 8008d38:	699b      	ldr	r3, [r3, #24]
 8008d3a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	689b      	ldr	r3, [r3, #8]
 8008d42:	4940      	ldr	r1, [pc, #256]	@ (8008e44 <HAL_RCC_ClockConfig+0x244>)
 8008d44:	4313      	orrs	r3, r2
 8008d46:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	685b      	ldr	r3, [r3, #4]
 8008d4c:	2b02      	cmp	r3, #2
 8008d4e:	d107      	bne.n	8008d60 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008d50:	4b3c      	ldr	r3, [pc, #240]	@ (8008e44 <HAL_RCC_ClockConfig+0x244>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d121      	bne.n	8008da0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	e0f6      	b.n	8008f4e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	2b03      	cmp	r3, #3
 8008d66:	d107      	bne.n	8008d78 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008d68:	4b36      	ldr	r3, [pc, #216]	@ (8008e44 <HAL_RCC_ClockConfig+0x244>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d115      	bne.n	8008da0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008d74:	2301      	movs	r3, #1
 8008d76:	e0ea      	b.n	8008f4e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	685b      	ldr	r3, [r3, #4]
 8008d7c:	2b01      	cmp	r3, #1
 8008d7e:	d107      	bne.n	8008d90 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008d80:	4b30      	ldr	r3, [pc, #192]	@ (8008e44 <HAL_RCC_ClockConfig+0x244>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d109      	bne.n	8008da0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	e0de      	b.n	8008f4e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008d90:	4b2c      	ldr	r3, [pc, #176]	@ (8008e44 <HAL_RCC_ClockConfig+0x244>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f003 0304 	and.w	r3, r3, #4
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d101      	bne.n	8008da0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	e0d6      	b.n	8008f4e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008da0:	4b28      	ldr	r3, [pc, #160]	@ (8008e44 <HAL_RCC_ClockConfig+0x244>)
 8008da2:	691b      	ldr	r3, [r3, #16]
 8008da4:	f023 0207 	bic.w	r2, r3, #7
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	4925      	ldr	r1, [pc, #148]	@ (8008e44 <HAL_RCC_ClockConfig+0x244>)
 8008dae:	4313      	orrs	r3, r2
 8008db0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008db2:	f7fa faeb 	bl	800338c <HAL_GetTick>
 8008db6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008db8:	e00a      	b.n	8008dd0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008dba:	f7fa fae7 	bl	800338c <HAL_GetTick>
 8008dbe:	4602      	mov	r2, r0
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	1ad3      	subs	r3, r2, r3
 8008dc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d901      	bls.n	8008dd0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008dcc:	2303      	movs	r3, #3
 8008dce:	e0be      	b.n	8008f4e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008dd0:	4b1c      	ldr	r3, [pc, #112]	@ (8008e44 <HAL_RCC_ClockConfig+0x244>)
 8008dd2:	691b      	ldr	r3, [r3, #16]
 8008dd4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	685b      	ldr	r3, [r3, #4]
 8008ddc:	00db      	lsls	r3, r3, #3
 8008dde:	429a      	cmp	r2, r3
 8008de0:	d1eb      	bne.n	8008dba <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f003 0302 	and.w	r3, r3, #2
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d010      	beq.n	8008e10 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	68da      	ldr	r2, [r3, #12]
 8008df2:	4b14      	ldr	r3, [pc, #80]	@ (8008e44 <HAL_RCC_ClockConfig+0x244>)
 8008df4:	699b      	ldr	r3, [r3, #24]
 8008df6:	f003 030f 	and.w	r3, r3, #15
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	d208      	bcs.n	8008e10 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008dfe:	4b11      	ldr	r3, [pc, #68]	@ (8008e44 <HAL_RCC_ClockConfig+0x244>)
 8008e00:	699b      	ldr	r3, [r3, #24]
 8008e02:	f023 020f 	bic.w	r2, r3, #15
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	68db      	ldr	r3, [r3, #12]
 8008e0a:	490e      	ldr	r1, [pc, #56]	@ (8008e44 <HAL_RCC_ClockConfig+0x244>)
 8008e0c:	4313      	orrs	r3, r2
 8008e0e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008e10:	4b0b      	ldr	r3, [pc, #44]	@ (8008e40 <HAL_RCC_ClockConfig+0x240>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f003 030f 	and.w	r3, r3, #15
 8008e18:	683a      	ldr	r2, [r7, #0]
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	d214      	bcs.n	8008e48 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e1e:	4b08      	ldr	r3, [pc, #32]	@ (8008e40 <HAL_RCC_ClockConfig+0x240>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f023 020f 	bic.w	r2, r3, #15
 8008e26:	4906      	ldr	r1, [pc, #24]	@ (8008e40 <HAL_RCC_ClockConfig+0x240>)
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	4313      	orrs	r3, r2
 8008e2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e2e:	4b04      	ldr	r3, [pc, #16]	@ (8008e40 <HAL_RCC_ClockConfig+0x240>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f003 030f 	and.w	r3, r3, #15
 8008e36:	683a      	ldr	r2, [r7, #0]
 8008e38:	429a      	cmp	r2, r3
 8008e3a:	d005      	beq.n	8008e48 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	e086      	b.n	8008f4e <HAL_RCC_ClockConfig+0x34e>
 8008e40:	52002000 	.word	0x52002000
 8008e44:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f003 0304 	and.w	r3, r3, #4
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d010      	beq.n	8008e76 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	691a      	ldr	r2, [r3, #16]
 8008e58:	4b3f      	ldr	r3, [pc, #252]	@ (8008f58 <HAL_RCC_ClockConfig+0x358>)
 8008e5a:	699b      	ldr	r3, [r3, #24]
 8008e5c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008e60:	429a      	cmp	r2, r3
 8008e62:	d208      	bcs.n	8008e76 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008e64:	4b3c      	ldr	r3, [pc, #240]	@ (8008f58 <HAL_RCC_ClockConfig+0x358>)
 8008e66:	699b      	ldr	r3, [r3, #24]
 8008e68:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	691b      	ldr	r3, [r3, #16]
 8008e70:	4939      	ldr	r1, [pc, #228]	@ (8008f58 <HAL_RCC_ClockConfig+0x358>)
 8008e72:	4313      	orrs	r3, r2
 8008e74:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f003 0308 	and.w	r3, r3, #8
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d010      	beq.n	8008ea4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	695a      	ldr	r2, [r3, #20]
 8008e86:	4b34      	ldr	r3, [pc, #208]	@ (8008f58 <HAL_RCC_ClockConfig+0x358>)
 8008e88:	69db      	ldr	r3, [r3, #28]
 8008e8a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008e8e:	429a      	cmp	r2, r3
 8008e90:	d208      	bcs.n	8008ea4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008e92:	4b31      	ldr	r3, [pc, #196]	@ (8008f58 <HAL_RCC_ClockConfig+0x358>)
 8008e94:	69db      	ldr	r3, [r3, #28]
 8008e96:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	695b      	ldr	r3, [r3, #20]
 8008e9e:	492e      	ldr	r1, [pc, #184]	@ (8008f58 <HAL_RCC_ClockConfig+0x358>)
 8008ea0:	4313      	orrs	r3, r2
 8008ea2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f003 0310 	and.w	r3, r3, #16
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d010      	beq.n	8008ed2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	699a      	ldr	r2, [r3, #24]
 8008eb4:	4b28      	ldr	r3, [pc, #160]	@ (8008f58 <HAL_RCC_ClockConfig+0x358>)
 8008eb6:	69db      	ldr	r3, [r3, #28]
 8008eb8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008ebc:	429a      	cmp	r2, r3
 8008ebe:	d208      	bcs.n	8008ed2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008ec0:	4b25      	ldr	r3, [pc, #148]	@ (8008f58 <HAL_RCC_ClockConfig+0x358>)
 8008ec2:	69db      	ldr	r3, [r3, #28]
 8008ec4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	699b      	ldr	r3, [r3, #24]
 8008ecc:	4922      	ldr	r1, [pc, #136]	@ (8008f58 <HAL_RCC_ClockConfig+0x358>)
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f003 0320 	and.w	r3, r3, #32
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d010      	beq.n	8008f00 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	69da      	ldr	r2, [r3, #28]
 8008ee2:	4b1d      	ldr	r3, [pc, #116]	@ (8008f58 <HAL_RCC_ClockConfig+0x358>)
 8008ee4:	6a1b      	ldr	r3, [r3, #32]
 8008ee6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008eea:	429a      	cmp	r2, r3
 8008eec:	d208      	bcs.n	8008f00 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008eee:	4b1a      	ldr	r3, [pc, #104]	@ (8008f58 <HAL_RCC_ClockConfig+0x358>)
 8008ef0:	6a1b      	ldr	r3, [r3, #32]
 8008ef2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	69db      	ldr	r3, [r3, #28]
 8008efa:	4917      	ldr	r1, [pc, #92]	@ (8008f58 <HAL_RCC_ClockConfig+0x358>)
 8008efc:	4313      	orrs	r3, r2
 8008efe:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008f00:	f000 f834 	bl	8008f6c <HAL_RCC_GetSysClockFreq>
 8008f04:	4602      	mov	r2, r0
 8008f06:	4b14      	ldr	r3, [pc, #80]	@ (8008f58 <HAL_RCC_ClockConfig+0x358>)
 8008f08:	699b      	ldr	r3, [r3, #24]
 8008f0a:	0a1b      	lsrs	r3, r3, #8
 8008f0c:	f003 030f 	and.w	r3, r3, #15
 8008f10:	4912      	ldr	r1, [pc, #72]	@ (8008f5c <HAL_RCC_ClockConfig+0x35c>)
 8008f12:	5ccb      	ldrb	r3, [r1, r3]
 8008f14:	f003 031f 	and.w	r3, r3, #31
 8008f18:	fa22 f303 	lsr.w	r3, r2, r3
 8008f1c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8008f58 <HAL_RCC_ClockConfig+0x358>)
 8008f20:	699b      	ldr	r3, [r3, #24]
 8008f22:	f003 030f 	and.w	r3, r3, #15
 8008f26:	4a0d      	ldr	r2, [pc, #52]	@ (8008f5c <HAL_RCC_ClockConfig+0x35c>)
 8008f28:	5cd3      	ldrb	r3, [r2, r3]
 8008f2a:	f003 031f 	and.w	r3, r3, #31
 8008f2e:	693a      	ldr	r2, [r7, #16]
 8008f30:	fa22 f303 	lsr.w	r3, r2, r3
 8008f34:	4a0a      	ldr	r2, [pc, #40]	@ (8008f60 <HAL_RCC_ClockConfig+0x360>)
 8008f36:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008f38:	4a0a      	ldr	r2, [pc, #40]	@ (8008f64 <HAL_RCC_ClockConfig+0x364>)
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008f3e:	4b0a      	ldr	r3, [pc, #40]	@ (8008f68 <HAL_RCC_ClockConfig+0x368>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4618      	mov	r0, r3
 8008f44:	f7fa f9d8 	bl	80032f8 <HAL_InitTick>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3718      	adds	r7, #24
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}
 8008f56:	bf00      	nop
 8008f58:	58024400 	.word	0x58024400
 8008f5c:	08012798 	.word	0x08012798
 8008f60:	24000004 	.word	0x24000004
 8008f64:	24000000 	.word	0x24000000
 8008f68:	24000024 	.word	0x24000024

08008f6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b089      	sub	sp, #36	@ 0x24
 8008f70:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008f72:	4bb3      	ldr	r3, [pc, #716]	@ (8009240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f74:	691b      	ldr	r3, [r3, #16]
 8008f76:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008f7a:	2b18      	cmp	r3, #24
 8008f7c:	f200 8155 	bhi.w	800922a <HAL_RCC_GetSysClockFreq+0x2be>
 8008f80:	a201      	add	r2, pc, #4	@ (adr r2, 8008f88 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f86:	bf00      	nop
 8008f88:	08008fed 	.word	0x08008fed
 8008f8c:	0800922b 	.word	0x0800922b
 8008f90:	0800922b 	.word	0x0800922b
 8008f94:	0800922b 	.word	0x0800922b
 8008f98:	0800922b 	.word	0x0800922b
 8008f9c:	0800922b 	.word	0x0800922b
 8008fa0:	0800922b 	.word	0x0800922b
 8008fa4:	0800922b 	.word	0x0800922b
 8008fa8:	08009013 	.word	0x08009013
 8008fac:	0800922b 	.word	0x0800922b
 8008fb0:	0800922b 	.word	0x0800922b
 8008fb4:	0800922b 	.word	0x0800922b
 8008fb8:	0800922b 	.word	0x0800922b
 8008fbc:	0800922b 	.word	0x0800922b
 8008fc0:	0800922b 	.word	0x0800922b
 8008fc4:	0800922b 	.word	0x0800922b
 8008fc8:	08009019 	.word	0x08009019
 8008fcc:	0800922b 	.word	0x0800922b
 8008fd0:	0800922b 	.word	0x0800922b
 8008fd4:	0800922b 	.word	0x0800922b
 8008fd8:	0800922b 	.word	0x0800922b
 8008fdc:	0800922b 	.word	0x0800922b
 8008fe0:	0800922b 	.word	0x0800922b
 8008fe4:	0800922b 	.word	0x0800922b
 8008fe8:	0800901f 	.word	0x0800901f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008fec:	4b94      	ldr	r3, [pc, #592]	@ (8009240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f003 0320 	and.w	r3, r3, #32
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d009      	beq.n	800900c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ff8:	4b91      	ldr	r3, [pc, #580]	@ (8009240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	08db      	lsrs	r3, r3, #3
 8008ffe:	f003 0303 	and.w	r3, r3, #3
 8009002:	4a90      	ldr	r2, [pc, #576]	@ (8009244 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009004:	fa22 f303 	lsr.w	r3, r2, r3
 8009008:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800900a:	e111      	b.n	8009230 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800900c:	4b8d      	ldr	r3, [pc, #564]	@ (8009244 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800900e:	61bb      	str	r3, [r7, #24]
      break;
 8009010:	e10e      	b.n	8009230 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8009012:	4b8d      	ldr	r3, [pc, #564]	@ (8009248 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009014:	61bb      	str	r3, [r7, #24]
      break;
 8009016:	e10b      	b.n	8009230 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009018:	4b8c      	ldr	r3, [pc, #560]	@ (800924c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800901a:	61bb      	str	r3, [r7, #24]
      break;
 800901c:	e108      	b.n	8009230 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800901e:	4b88      	ldr	r3, [pc, #544]	@ (8009240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009022:	f003 0303 	and.w	r3, r3, #3
 8009026:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009028:	4b85      	ldr	r3, [pc, #532]	@ (8009240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800902a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800902c:	091b      	lsrs	r3, r3, #4
 800902e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009032:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009034:	4b82      	ldr	r3, [pc, #520]	@ (8009240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009038:	f003 0301 	and.w	r3, r3, #1
 800903c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800903e:	4b80      	ldr	r3, [pc, #512]	@ (8009240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009040:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009042:	08db      	lsrs	r3, r3, #3
 8009044:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009048:	68fa      	ldr	r2, [r7, #12]
 800904a:	fb02 f303 	mul.w	r3, r2, r3
 800904e:	ee07 3a90 	vmov	s15, r3
 8009052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009056:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800905a:	693b      	ldr	r3, [r7, #16]
 800905c:	2b00      	cmp	r3, #0
 800905e:	f000 80e1 	beq.w	8009224 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	2b02      	cmp	r3, #2
 8009066:	f000 8083 	beq.w	8009170 <HAL_RCC_GetSysClockFreq+0x204>
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	2b02      	cmp	r3, #2
 800906e:	f200 80a1 	bhi.w	80091b4 <HAL_RCC_GetSysClockFreq+0x248>
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d003      	beq.n	8009080 <HAL_RCC_GetSysClockFreq+0x114>
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	2b01      	cmp	r3, #1
 800907c:	d056      	beq.n	800912c <HAL_RCC_GetSysClockFreq+0x1c0>
 800907e:	e099      	b.n	80091b4 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009080:	4b6f      	ldr	r3, [pc, #444]	@ (8009240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f003 0320 	and.w	r3, r3, #32
 8009088:	2b00      	cmp	r3, #0
 800908a:	d02d      	beq.n	80090e8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800908c:	4b6c      	ldr	r3, [pc, #432]	@ (8009240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	08db      	lsrs	r3, r3, #3
 8009092:	f003 0303 	and.w	r3, r3, #3
 8009096:	4a6b      	ldr	r2, [pc, #428]	@ (8009244 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009098:	fa22 f303 	lsr.w	r3, r2, r3
 800909c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	ee07 3a90 	vmov	s15, r3
 80090a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090a8:	693b      	ldr	r3, [r7, #16]
 80090aa:	ee07 3a90 	vmov	s15, r3
 80090ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090b6:	4b62      	ldr	r3, [pc, #392]	@ (8009240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090be:	ee07 3a90 	vmov	s15, r3
 80090c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80090ca:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8009250 <HAL_RCC_GetSysClockFreq+0x2e4>
 80090ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80090da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090e2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80090e6:	e087      	b.n	80091f8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80090e8:	693b      	ldr	r3, [r7, #16]
 80090ea:	ee07 3a90 	vmov	s15, r3
 80090ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090f2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8009254 <HAL_RCC_GetSysClockFreq+0x2e8>
 80090f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090fa:	4b51      	ldr	r3, [pc, #324]	@ (8009240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009102:	ee07 3a90 	vmov	s15, r3
 8009106:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800910a:	ed97 6a02 	vldr	s12, [r7, #8]
 800910e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8009250 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009112:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009116:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800911a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800911e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009122:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009126:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800912a:	e065      	b.n	80091f8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	ee07 3a90 	vmov	s15, r3
 8009132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009136:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8009258 <HAL_RCC_GetSysClockFreq+0x2ec>
 800913a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800913e:	4b40      	ldr	r3, [pc, #256]	@ (8009240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009146:	ee07 3a90 	vmov	s15, r3
 800914a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800914e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009152:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8009250 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009156:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800915a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800915e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009162:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800916a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800916e:	e043      	b.n	80091f8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	ee07 3a90 	vmov	s15, r3
 8009176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800917a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800925c <HAL_RCC_GetSysClockFreq+0x2f0>
 800917e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009182:	4b2f      	ldr	r3, [pc, #188]	@ (8009240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800918a:	ee07 3a90 	vmov	s15, r3
 800918e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009192:	ed97 6a02 	vldr	s12, [r7, #8]
 8009196:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8009250 <HAL_RCC_GetSysClockFreq+0x2e4>
 800919a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800919e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80091b2:	e021      	b.n	80091f8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	ee07 3a90 	vmov	s15, r3
 80091ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091be:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8009258 <HAL_RCC_GetSysClockFreq+0x2ec>
 80091c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091c6:	4b1e      	ldr	r3, [pc, #120]	@ (8009240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091ce:	ee07 3a90 	vmov	s15, r3
 80091d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80091da:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8009250 <HAL_RCC_GetSysClockFreq+0x2e4>
 80091de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80091f6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80091f8:	4b11      	ldr	r3, [pc, #68]	@ (8009240 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091fc:	0a5b      	lsrs	r3, r3, #9
 80091fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009202:	3301      	adds	r3, #1
 8009204:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	ee07 3a90 	vmov	s15, r3
 800920c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009210:	edd7 6a07 	vldr	s13, [r7, #28]
 8009214:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009218:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800921c:	ee17 3a90 	vmov	r3, s15
 8009220:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009222:	e005      	b.n	8009230 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009224:	2300      	movs	r3, #0
 8009226:	61bb      	str	r3, [r7, #24]
      break;
 8009228:	e002      	b.n	8009230 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800922a:	4b07      	ldr	r3, [pc, #28]	@ (8009248 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800922c:	61bb      	str	r3, [r7, #24]
      break;
 800922e:	bf00      	nop
  }

  return sysclockfreq;
 8009230:	69bb      	ldr	r3, [r7, #24]
}
 8009232:	4618      	mov	r0, r3
 8009234:	3724      	adds	r7, #36	@ 0x24
 8009236:	46bd      	mov	sp, r7
 8009238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923c:	4770      	bx	lr
 800923e:	bf00      	nop
 8009240:	58024400 	.word	0x58024400
 8009244:	03d09000 	.word	0x03d09000
 8009248:	003d0900 	.word	0x003d0900
 800924c:	017d7840 	.word	0x017d7840
 8009250:	46000000 	.word	0x46000000
 8009254:	4c742400 	.word	0x4c742400
 8009258:	4a742400 	.word	0x4a742400
 800925c:	4bbebc20 	.word	0x4bbebc20

08009260 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b082      	sub	sp, #8
 8009264:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009266:	f7ff fe81 	bl	8008f6c <HAL_RCC_GetSysClockFreq>
 800926a:	4602      	mov	r2, r0
 800926c:	4b10      	ldr	r3, [pc, #64]	@ (80092b0 <HAL_RCC_GetHCLKFreq+0x50>)
 800926e:	699b      	ldr	r3, [r3, #24]
 8009270:	0a1b      	lsrs	r3, r3, #8
 8009272:	f003 030f 	and.w	r3, r3, #15
 8009276:	490f      	ldr	r1, [pc, #60]	@ (80092b4 <HAL_RCC_GetHCLKFreq+0x54>)
 8009278:	5ccb      	ldrb	r3, [r1, r3]
 800927a:	f003 031f 	and.w	r3, r3, #31
 800927e:	fa22 f303 	lsr.w	r3, r2, r3
 8009282:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009284:	4b0a      	ldr	r3, [pc, #40]	@ (80092b0 <HAL_RCC_GetHCLKFreq+0x50>)
 8009286:	699b      	ldr	r3, [r3, #24]
 8009288:	f003 030f 	and.w	r3, r3, #15
 800928c:	4a09      	ldr	r2, [pc, #36]	@ (80092b4 <HAL_RCC_GetHCLKFreq+0x54>)
 800928e:	5cd3      	ldrb	r3, [r2, r3]
 8009290:	f003 031f 	and.w	r3, r3, #31
 8009294:	687a      	ldr	r2, [r7, #4]
 8009296:	fa22 f303 	lsr.w	r3, r2, r3
 800929a:	4a07      	ldr	r2, [pc, #28]	@ (80092b8 <HAL_RCC_GetHCLKFreq+0x58>)
 800929c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800929e:	4a07      	ldr	r2, [pc, #28]	@ (80092bc <HAL_RCC_GetHCLKFreq+0x5c>)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80092a4:	4b04      	ldr	r3, [pc, #16]	@ (80092b8 <HAL_RCC_GetHCLKFreq+0x58>)
 80092a6:	681b      	ldr	r3, [r3, #0]
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	3708      	adds	r7, #8
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}
 80092b0:	58024400 	.word	0x58024400
 80092b4:	08012798 	.word	0x08012798
 80092b8:	24000004 	.word	0x24000004
 80092bc:	24000000 	.word	0x24000000

080092c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80092c4:	f7ff ffcc 	bl	8009260 <HAL_RCC_GetHCLKFreq>
 80092c8:	4602      	mov	r2, r0
 80092ca:	4b06      	ldr	r3, [pc, #24]	@ (80092e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80092cc:	69db      	ldr	r3, [r3, #28]
 80092ce:	091b      	lsrs	r3, r3, #4
 80092d0:	f003 0307 	and.w	r3, r3, #7
 80092d4:	4904      	ldr	r1, [pc, #16]	@ (80092e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80092d6:	5ccb      	ldrb	r3, [r1, r3]
 80092d8:	f003 031f 	and.w	r3, r3, #31
 80092dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	bd80      	pop	{r7, pc}
 80092e4:	58024400 	.word	0x58024400
 80092e8:	08012798 	.word	0x08012798

080092ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80092f0:	f7ff ffb6 	bl	8009260 <HAL_RCC_GetHCLKFreq>
 80092f4:	4602      	mov	r2, r0
 80092f6:	4b06      	ldr	r3, [pc, #24]	@ (8009310 <HAL_RCC_GetPCLK2Freq+0x24>)
 80092f8:	69db      	ldr	r3, [r3, #28]
 80092fa:	0a1b      	lsrs	r3, r3, #8
 80092fc:	f003 0307 	and.w	r3, r3, #7
 8009300:	4904      	ldr	r1, [pc, #16]	@ (8009314 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009302:	5ccb      	ldrb	r3, [r1, r3]
 8009304:	f003 031f 	and.w	r3, r3, #31
 8009308:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800930c:	4618      	mov	r0, r3
 800930e:	bd80      	pop	{r7, pc}
 8009310:	58024400 	.word	0x58024400
 8009314:	08012798 	.word	0x08012798

08009318 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009318:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800931c:	b0ca      	sub	sp, #296	@ 0x128
 800931e:	af00      	add	r7, sp, #0
 8009320:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009324:	2300      	movs	r3, #0
 8009326:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800932a:	2300      	movs	r3, #0
 800932c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009330:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009338:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800933c:	2500      	movs	r5, #0
 800933e:	ea54 0305 	orrs.w	r3, r4, r5
 8009342:	d049      	beq.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009344:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009348:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800934a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800934e:	d02f      	beq.n	80093b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009350:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009354:	d828      	bhi.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009356:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800935a:	d01a      	beq.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800935c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009360:	d822      	bhi.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009362:	2b00      	cmp	r3, #0
 8009364:	d003      	beq.n	800936e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009366:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800936a:	d007      	beq.n	800937c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800936c:	e01c      	b.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800936e:	4bb8      	ldr	r3, [pc, #736]	@ (8009650 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009372:	4ab7      	ldr	r2, [pc, #732]	@ (8009650 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009374:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009378:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800937a:	e01a      	b.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800937c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009380:	3308      	adds	r3, #8
 8009382:	2102      	movs	r1, #2
 8009384:	4618      	mov	r0, r3
 8009386:	f002 fb61 	bl	800ba4c <RCCEx_PLL2_Config>
 800938a:	4603      	mov	r3, r0
 800938c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009390:	e00f      	b.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009392:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009396:	3328      	adds	r3, #40	@ 0x28
 8009398:	2102      	movs	r1, #2
 800939a:	4618      	mov	r0, r3
 800939c:	f002 fc08 	bl	800bbb0 <RCCEx_PLL3_Config>
 80093a0:	4603      	mov	r3, r0
 80093a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80093a6:	e004      	b.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80093a8:	2301      	movs	r3, #1
 80093aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80093ae:	e000      	b.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80093b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d10a      	bne.n	80093d0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80093ba:	4ba5      	ldr	r3, [pc, #660]	@ (8009650 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80093bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093be:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80093c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80093c8:	4aa1      	ldr	r2, [pc, #644]	@ (8009650 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80093ca:	430b      	orrs	r3, r1
 80093cc:	6513      	str	r3, [r2, #80]	@ 0x50
 80093ce:	e003      	b.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80093d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80093e4:	f04f 0900 	mov.w	r9, #0
 80093e8:	ea58 0309 	orrs.w	r3, r8, r9
 80093ec:	d047      	beq.n	800947e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80093ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093f4:	2b04      	cmp	r3, #4
 80093f6:	d82a      	bhi.n	800944e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80093f8:	a201      	add	r2, pc, #4	@ (adr r2, 8009400 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80093fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093fe:	bf00      	nop
 8009400:	08009415 	.word	0x08009415
 8009404:	08009423 	.word	0x08009423
 8009408:	08009439 	.word	0x08009439
 800940c:	08009457 	.word	0x08009457
 8009410:	08009457 	.word	0x08009457
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009414:	4b8e      	ldr	r3, [pc, #568]	@ (8009650 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009418:	4a8d      	ldr	r2, [pc, #564]	@ (8009650 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800941a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800941e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009420:	e01a      	b.n	8009458 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009422:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009426:	3308      	adds	r3, #8
 8009428:	2100      	movs	r1, #0
 800942a:	4618      	mov	r0, r3
 800942c:	f002 fb0e 	bl	800ba4c <RCCEx_PLL2_Config>
 8009430:	4603      	mov	r3, r0
 8009432:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009436:	e00f      	b.n	8009458 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009438:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800943c:	3328      	adds	r3, #40	@ 0x28
 800943e:	2100      	movs	r1, #0
 8009440:	4618      	mov	r0, r3
 8009442:	f002 fbb5 	bl	800bbb0 <RCCEx_PLL3_Config>
 8009446:	4603      	mov	r3, r0
 8009448:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800944c:	e004      	b.n	8009458 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800944e:	2301      	movs	r3, #1
 8009450:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009454:	e000      	b.n	8009458 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009456:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009458:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800945c:	2b00      	cmp	r3, #0
 800945e:	d10a      	bne.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009460:	4b7b      	ldr	r3, [pc, #492]	@ (8009650 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009462:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009464:	f023 0107 	bic.w	r1, r3, #7
 8009468:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800946c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800946e:	4a78      	ldr	r2, [pc, #480]	@ (8009650 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009470:	430b      	orrs	r3, r1
 8009472:	6513      	str	r3, [r2, #80]	@ 0x50
 8009474:	e003      	b.n	800947e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009476:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800947a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800947e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009486:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800948a:	f04f 0b00 	mov.w	fp, #0
 800948e:	ea5a 030b 	orrs.w	r3, sl, fp
 8009492:	d04c      	beq.n	800952e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8009494:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009498:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800949a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800949e:	d030      	beq.n	8009502 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80094a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80094a4:	d829      	bhi.n	80094fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80094a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80094a8:	d02d      	beq.n	8009506 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80094aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80094ac:	d825      	bhi.n	80094fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80094ae:	2b80      	cmp	r3, #128	@ 0x80
 80094b0:	d018      	beq.n	80094e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80094b2:	2b80      	cmp	r3, #128	@ 0x80
 80094b4:	d821      	bhi.n	80094fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d002      	beq.n	80094c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80094ba:	2b40      	cmp	r3, #64	@ 0x40
 80094bc:	d007      	beq.n	80094ce <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80094be:	e01c      	b.n	80094fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094c0:	4b63      	ldr	r3, [pc, #396]	@ (8009650 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80094c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094c4:	4a62      	ldr	r2, [pc, #392]	@ (8009650 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80094c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80094ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80094cc:	e01c      	b.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80094ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094d2:	3308      	adds	r3, #8
 80094d4:	2100      	movs	r1, #0
 80094d6:	4618      	mov	r0, r3
 80094d8:	f002 fab8 	bl	800ba4c <RCCEx_PLL2_Config>
 80094dc:	4603      	mov	r3, r0
 80094de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80094e2:	e011      	b.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80094e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094e8:	3328      	adds	r3, #40	@ 0x28
 80094ea:	2100      	movs	r1, #0
 80094ec:	4618      	mov	r0, r3
 80094ee:	f002 fb5f 	bl	800bbb0 <RCCEx_PLL3_Config>
 80094f2:	4603      	mov	r3, r0
 80094f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80094f8:	e006      	b.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80094fa:	2301      	movs	r3, #1
 80094fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009500:	e002      	b.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009502:	bf00      	nop
 8009504:	e000      	b.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009506:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009508:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800950c:	2b00      	cmp	r3, #0
 800950e:	d10a      	bne.n	8009526 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009510:	4b4f      	ldr	r3, [pc, #316]	@ (8009650 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009512:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009514:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8009518:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800951c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800951e:	4a4c      	ldr	r2, [pc, #304]	@ (8009650 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009520:	430b      	orrs	r3, r1
 8009522:	6513      	str	r3, [r2, #80]	@ 0x50
 8009524:	e003      	b.n	800952e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009526:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800952a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800952e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009536:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800953a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800953e:	2300      	movs	r3, #0
 8009540:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8009544:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8009548:	460b      	mov	r3, r1
 800954a:	4313      	orrs	r3, r2
 800954c:	d053      	beq.n	80095f6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800954e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009552:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009556:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800955a:	d035      	beq.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800955c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009560:	d82e      	bhi.n	80095c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009562:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009566:	d031      	beq.n	80095cc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8009568:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800956c:	d828      	bhi.n	80095c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800956e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009572:	d01a      	beq.n	80095aa <HAL_RCCEx_PeriphCLKConfig+0x292>
 8009574:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009578:	d822      	bhi.n	80095c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800957a:	2b00      	cmp	r3, #0
 800957c:	d003      	beq.n	8009586 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800957e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009582:	d007      	beq.n	8009594 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8009584:	e01c      	b.n	80095c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009586:	4b32      	ldr	r3, [pc, #200]	@ (8009650 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800958a:	4a31      	ldr	r2, [pc, #196]	@ (8009650 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800958c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009590:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009592:	e01c      	b.n	80095ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009594:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009598:	3308      	adds	r3, #8
 800959a:	2100      	movs	r1, #0
 800959c:	4618      	mov	r0, r3
 800959e:	f002 fa55 	bl	800ba4c <RCCEx_PLL2_Config>
 80095a2:	4603      	mov	r3, r0
 80095a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80095a8:	e011      	b.n	80095ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80095aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095ae:	3328      	adds	r3, #40	@ 0x28
 80095b0:	2100      	movs	r1, #0
 80095b2:	4618      	mov	r0, r3
 80095b4:	f002 fafc 	bl	800bbb0 <RCCEx_PLL3_Config>
 80095b8:	4603      	mov	r3, r0
 80095ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80095be:	e006      	b.n	80095ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80095c0:	2301      	movs	r3, #1
 80095c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80095c6:	e002      	b.n	80095ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80095c8:	bf00      	nop
 80095ca:	e000      	b.n	80095ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80095cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d10b      	bne.n	80095ee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80095d6:	4b1e      	ldr	r3, [pc, #120]	@ (8009650 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80095d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095da:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80095de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80095e6:	4a1a      	ldr	r2, [pc, #104]	@ (8009650 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80095e8:	430b      	orrs	r3, r1
 80095ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80095ec:	e003      	b.n	80095f6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80095f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80095f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095fe:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8009602:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009606:	2300      	movs	r3, #0
 8009608:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800960c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8009610:	460b      	mov	r3, r1
 8009612:	4313      	orrs	r3, r2
 8009614:	d056      	beq.n	80096c4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009616:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800961a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800961e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009622:	d038      	beq.n	8009696 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009624:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009628:	d831      	bhi.n	800968e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800962a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800962e:	d034      	beq.n	800969a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8009630:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009634:	d82b      	bhi.n	800968e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009636:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800963a:	d01d      	beq.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800963c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009640:	d825      	bhi.n	800968e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009642:	2b00      	cmp	r3, #0
 8009644:	d006      	beq.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009646:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800964a:	d00a      	beq.n	8009662 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800964c:	e01f      	b.n	800968e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800964e:	bf00      	nop
 8009650:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009654:	4ba2      	ldr	r3, [pc, #648]	@ (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009658:	4aa1      	ldr	r2, [pc, #644]	@ (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800965a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800965e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009660:	e01c      	b.n	800969c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009662:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009666:	3308      	adds	r3, #8
 8009668:	2100      	movs	r1, #0
 800966a:	4618      	mov	r0, r3
 800966c:	f002 f9ee 	bl	800ba4c <RCCEx_PLL2_Config>
 8009670:	4603      	mov	r3, r0
 8009672:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009676:	e011      	b.n	800969c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009678:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800967c:	3328      	adds	r3, #40	@ 0x28
 800967e:	2100      	movs	r1, #0
 8009680:	4618      	mov	r0, r3
 8009682:	f002 fa95 	bl	800bbb0 <RCCEx_PLL3_Config>
 8009686:	4603      	mov	r3, r0
 8009688:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800968c:	e006      	b.n	800969c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800968e:	2301      	movs	r3, #1
 8009690:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009694:	e002      	b.n	800969c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009696:	bf00      	nop
 8009698:	e000      	b.n	800969c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800969a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800969c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d10b      	bne.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80096a4:	4b8e      	ldr	r3, [pc, #568]	@ (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80096a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096a8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80096ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096b0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80096b4:	4a8a      	ldr	r2, [pc, #552]	@ (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80096b6:	430b      	orrs	r3, r1
 80096b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80096ba:	e003      	b.n	80096c4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80096c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80096c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096cc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80096d0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80096d4:	2300      	movs	r3, #0
 80096d6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80096da:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80096de:	460b      	mov	r3, r1
 80096e0:	4313      	orrs	r3, r2
 80096e2:	d03a      	beq.n	800975a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80096e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80096ea:	2b30      	cmp	r3, #48	@ 0x30
 80096ec:	d01f      	beq.n	800972e <HAL_RCCEx_PeriphCLKConfig+0x416>
 80096ee:	2b30      	cmp	r3, #48	@ 0x30
 80096f0:	d819      	bhi.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80096f2:	2b20      	cmp	r3, #32
 80096f4:	d00c      	beq.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80096f6:	2b20      	cmp	r3, #32
 80096f8:	d815      	bhi.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d019      	beq.n	8009732 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80096fe:	2b10      	cmp	r3, #16
 8009700:	d111      	bne.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009702:	4b77      	ldr	r3, [pc, #476]	@ (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009706:	4a76      	ldr	r2, [pc, #472]	@ (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009708:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800970c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800970e:	e011      	b.n	8009734 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009710:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009714:	3308      	adds	r3, #8
 8009716:	2102      	movs	r1, #2
 8009718:	4618      	mov	r0, r3
 800971a:	f002 f997 	bl	800ba4c <RCCEx_PLL2_Config>
 800971e:	4603      	mov	r3, r0
 8009720:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009724:	e006      	b.n	8009734 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009726:	2301      	movs	r3, #1
 8009728:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800972c:	e002      	b.n	8009734 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800972e:	bf00      	nop
 8009730:	e000      	b.n	8009734 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009732:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009734:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009738:	2b00      	cmp	r3, #0
 800973a:	d10a      	bne.n	8009752 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800973c:	4b68      	ldr	r3, [pc, #416]	@ (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800973e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009740:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8009744:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800974a:	4a65      	ldr	r2, [pc, #404]	@ (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800974c:	430b      	orrs	r3, r1
 800974e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009750:	e003      	b.n	800975a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009752:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009756:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800975a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800975e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009762:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8009766:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800976a:	2300      	movs	r3, #0
 800976c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009770:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8009774:	460b      	mov	r3, r1
 8009776:	4313      	orrs	r3, r2
 8009778:	d051      	beq.n	800981e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800977a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800977e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009780:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009784:	d035      	beq.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8009786:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800978a:	d82e      	bhi.n	80097ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800978c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009790:	d031      	beq.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8009792:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009796:	d828      	bhi.n	80097ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009798:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800979c:	d01a      	beq.n	80097d4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800979e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80097a2:	d822      	bhi.n	80097ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d003      	beq.n	80097b0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80097a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80097ac:	d007      	beq.n	80097be <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80097ae:	e01c      	b.n	80097ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097b0:	4b4b      	ldr	r3, [pc, #300]	@ (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80097b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097b4:	4a4a      	ldr	r2, [pc, #296]	@ (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80097b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80097ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80097bc:	e01c      	b.n	80097f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80097be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097c2:	3308      	adds	r3, #8
 80097c4:	2100      	movs	r1, #0
 80097c6:	4618      	mov	r0, r3
 80097c8:	f002 f940 	bl	800ba4c <RCCEx_PLL2_Config>
 80097cc:	4603      	mov	r3, r0
 80097ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80097d2:	e011      	b.n	80097f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80097d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097d8:	3328      	adds	r3, #40	@ 0x28
 80097da:	2100      	movs	r1, #0
 80097dc:	4618      	mov	r0, r3
 80097de:	f002 f9e7 	bl	800bbb0 <RCCEx_PLL3_Config>
 80097e2:	4603      	mov	r3, r0
 80097e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80097e8:	e006      	b.n	80097f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80097ea:	2301      	movs	r3, #1
 80097ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80097f0:	e002      	b.n	80097f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80097f2:	bf00      	nop
 80097f4:	e000      	b.n	80097f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80097f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d10a      	bne.n	8009816 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009800:	4b37      	ldr	r3, [pc, #220]	@ (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009802:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009804:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8009808:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800980c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800980e:	4a34      	ldr	r2, [pc, #208]	@ (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009810:	430b      	orrs	r3, r1
 8009812:	6513      	str	r3, [r2, #80]	@ 0x50
 8009814:	e003      	b.n	800981e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009816:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800981a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800981e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009826:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800982a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800982e:	2300      	movs	r3, #0
 8009830:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009834:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8009838:	460b      	mov	r3, r1
 800983a:	4313      	orrs	r3, r2
 800983c:	d056      	beq.n	80098ec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800983e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009842:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009844:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009848:	d033      	beq.n	80098b2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800984a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800984e:	d82c      	bhi.n	80098aa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009850:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009854:	d02f      	beq.n	80098b6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8009856:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800985a:	d826      	bhi.n	80098aa <HAL_RCCEx_PeriphCLKConfig+0x592>
 800985c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009860:	d02b      	beq.n	80098ba <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8009862:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009866:	d820      	bhi.n	80098aa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009868:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800986c:	d012      	beq.n	8009894 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800986e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009872:	d81a      	bhi.n	80098aa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009874:	2b00      	cmp	r3, #0
 8009876:	d022      	beq.n	80098be <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009878:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800987c:	d115      	bne.n	80098aa <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800987e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009882:	3308      	adds	r3, #8
 8009884:	2101      	movs	r1, #1
 8009886:	4618      	mov	r0, r3
 8009888:	f002 f8e0 	bl	800ba4c <RCCEx_PLL2_Config>
 800988c:	4603      	mov	r3, r0
 800988e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009892:	e015      	b.n	80098c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009894:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009898:	3328      	adds	r3, #40	@ 0x28
 800989a:	2101      	movs	r1, #1
 800989c:	4618      	mov	r0, r3
 800989e:	f002 f987 	bl	800bbb0 <RCCEx_PLL3_Config>
 80098a2:	4603      	mov	r3, r0
 80098a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80098a8:	e00a      	b.n	80098c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098aa:	2301      	movs	r3, #1
 80098ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80098b0:	e006      	b.n	80098c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80098b2:	bf00      	nop
 80098b4:	e004      	b.n	80098c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80098b6:	bf00      	nop
 80098b8:	e002      	b.n	80098c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80098ba:	bf00      	nop
 80098bc:	e000      	b.n	80098c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80098be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d10d      	bne.n	80098e4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80098c8:	4b05      	ldr	r3, [pc, #20]	@ (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80098ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098cc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80098d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80098d6:	4a02      	ldr	r2, [pc, #8]	@ (80098e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80098d8:	430b      	orrs	r3, r1
 80098da:	6513      	str	r3, [r2, #80]	@ 0x50
 80098dc:	e006      	b.n	80098ec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80098de:	bf00      	nop
 80098e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80098e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80098ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80098f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80098fc:	2300      	movs	r3, #0
 80098fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009902:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8009906:	460b      	mov	r3, r1
 8009908:	4313      	orrs	r3, r2
 800990a:	d055      	beq.n	80099b8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800990c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009910:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009914:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009918:	d033      	beq.n	8009982 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800991a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800991e:	d82c      	bhi.n	800997a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009920:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009924:	d02f      	beq.n	8009986 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8009926:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800992a:	d826      	bhi.n	800997a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800992c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009930:	d02b      	beq.n	800998a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8009932:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009936:	d820      	bhi.n	800997a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009938:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800993c:	d012      	beq.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800993e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009942:	d81a      	bhi.n	800997a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009944:	2b00      	cmp	r3, #0
 8009946:	d022      	beq.n	800998e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8009948:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800994c:	d115      	bne.n	800997a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800994e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009952:	3308      	adds	r3, #8
 8009954:	2101      	movs	r1, #1
 8009956:	4618      	mov	r0, r3
 8009958:	f002 f878 	bl	800ba4c <RCCEx_PLL2_Config>
 800995c:	4603      	mov	r3, r0
 800995e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009962:	e015      	b.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009964:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009968:	3328      	adds	r3, #40	@ 0x28
 800996a:	2101      	movs	r1, #1
 800996c:	4618      	mov	r0, r3
 800996e:	f002 f91f 	bl	800bbb0 <RCCEx_PLL3_Config>
 8009972:	4603      	mov	r3, r0
 8009974:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009978:	e00a      	b.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800997a:	2301      	movs	r3, #1
 800997c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009980:	e006      	b.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009982:	bf00      	nop
 8009984:	e004      	b.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009986:	bf00      	nop
 8009988:	e002      	b.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800998a:	bf00      	nop
 800998c:	e000      	b.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800998e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009990:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009994:	2b00      	cmp	r3, #0
 8009996:	d10b      	bne.n	80099b0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009998:	4ba3      	ldr	r3, [pc, #652]	@ (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800999a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800999c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80099a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80099a8:	4a9f      	ldr	r2, [pc, #636]	@ (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80099aa:	430b      	orrs	r3, r1
 80099ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80099ae:	e003      	b.n	80099b8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80099b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80099b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80099c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80099c8:	2300      	movs	r3, #0
 80099ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80099ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80099d2:	460b      	mov	r3, r1
 80099d4:	4313      	orrs	r3, r2
 80099d6:	d037      	beq.n	8009a48 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80099d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80099de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099e2:	d00e      	beq.n	8009a02 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80099e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099e8:	d816      	bhi.n	8009a18 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d018      	beq.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80099ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80099f2:	d111      	bne.n	8009a18 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099f4:	4b8c      	ldr	r3, [pc, #560]	@ (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80099f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099f8:	4a8b      	ldr	r2, [pc, #556]	@ (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80099fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80099fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009a00:	e00f      	b.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a06:	3308      	adds	r3, #8
 8009a08:	2101      	movs	r1, #1
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	f002 f81e 	bl	800ba4c <RCCEx_PLL2_Config>
 8009a10:	4603      	mov	r3, r0
 8009a12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009a16:	e004      	b.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a18:	2301      	movs	r3, #1
 8009a1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009a1e:	e000      	b.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8009a20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d10a      	bne.n	8009a40 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009a2a:	4b7f      	ldr	r3, [pc, #508]	@ (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a2e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a38:	4a7b      	ldr	r2, [pc, #492]	@ (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a3a:	430b      	orrs	r3, r1
 8009a3c:	6513      	str	r3, [r2, #80]	@ 0x50
 8009a3e:	e003      	b.n	8009a48 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a44:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a50:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8009a54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009a58:	2300      	movs	r3, #0
 8009a5a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009a5e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8009a62:	460b      	mov	r3, r1
 8009a64:	4313      	orrs	r3, r2
 8009a66:	d039      	beq.n	8009adc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009a68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009a6e:	2b03      	cmp	r3, #3
 8009a70:	d81c      	bhi.n	8009aac <HAL_RCCEx_PeriphCLKConfig+0x794>
 8009a72:	a201      	add	r2, pc, #4	@ (adr r2, 8009a78 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a78:	08009ab5 	.word	0x08009ab5
 8009a7c:	08009a89 	.word	0x08009a89
 8009a80:	08009a97 	.word	0x08009a97
 8009a84:	08009ab5 	.word	0x08009ab5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a88:	4b67      	ldr	r3, [pc, #412]	@ (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a8c:	4a66      	ldr	r2, [pc, #408]	@ (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009a92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009a94:	e00f      	b.n	8009ab6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a9a:	3308      	adds	r3, #8
 8009a9c:	2102      	movs	r1, #2
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f001 ffd4 	bl	800ba4c <RCCEx_PLL2_Config>
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009aaa:	e004      	b.n	8009ab6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009aac:	2301      	movs	r3, #1
 8009aae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009ab2:	e000      	b.n	8009ab6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8009ab4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ab6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d10a      	bne.n	8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009abe:	4b5a      	ldr	r3, [pc, #360]	@ (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ac0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009ac2:	f023 0103 	bic.w	r1, r3, #3
 8009ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009aca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009acc:	4a56      	ldr	r2, [pc, #344]	@ (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ace:	430b      	orrs	r3, r1
 8009ad0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009ad2:	e003      	b.n	8009adc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ad4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ad8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ae4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8009ae8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009aec:	2300      	movs	r3, #0
 8009aee:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009af2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8009af6:	460b      	mov	r3, r1
 8009af8:	4313      	orrs	r3, r2
 8009afa:	f000 809f 	beq.w	8009c3c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009afe:	4b4b      	ldr	r3, [pc, #300]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	4a4a      	ldr	r2, [pc, #296]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009b04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009b08:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009b0a:	f7f9 fc3f 	bl	800338c <HAL_GetTick>
 8009b0e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009b12:	e00b      	b.n	8009b2c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009b14:	f7f9 fc3a 	bl	800338c <HAL_GetTick>
 8009b18:	4602      	mov	r2, r0
 8009b1a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009b1e:	1ad3      	subs	r3, r2, r3
 8009b20:	2b64      	cmp	r3, #100	@ 0x64
 8009b22:	d903      	bls.n	8009b2c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8009b24:	2303      	movs	r3, #3
 8009b26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009b2a:	e005      	b.n	8009b38 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009b2c:	4b3f      	ldr	r3, [pc, #252]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d0ed      	beq.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8009b38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d179      	bne.n	8009c34 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009b40:	4b39      	ldr	r3, [pc, #228]	@ (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b42:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b48:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009b4c:	4053      	eors	r3, r2
 8009b4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d015      	beq.n	8009b82 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009b56:	4b34      	ldr	r3, [pc, #208]	@ (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009b5e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009b62:	4b31      	ldr	r3, [pc, #196]	@ (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b66:	4a30      	ldr	r2, [pc, #192]	@ (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009b6c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009b6e:	4b2e      	ldr	r3, [pc, #184]	@ (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b72:	4a2d      	ldr	r2, [pc, #180]	@ (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009b78:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009b7a:	4a2b      	ldr	r2, [pc, #172]	@ (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009b80:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b86:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009b8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b8e:	d118      	bne.n	8009bc2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b90:	f7f9 fbfc 	bl	800338c <HAL_GetTick>
 8009b94:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009b98:	e00d      	b.n	8009bb6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009b9a:	f7f9 fbf7 	bl	800338c <HAL_GetTick>
 8009b9e:	4602      	mov	r2, r0
 8009ba0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009ba4:	1ad2      	subs	r2, r2, r3
 8009ba6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009baa:	429a      	cmp	r2, r3
 8009bac:	d903      	bls.n	8009bb6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8009bae:	2303      	movs	r3, #3
 8009bb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8009bb4:	e005      	b.n	8009bc2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009bb6:	4b1c      	ldr	r3, [pc, #112]	@ (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009bb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009bba:	f003 0302 	and.w	r3, r3, #2
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d0eb      	beq.n	8009b9a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8009bc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d129      	bne.n	8009c1e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009bd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009bd6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009bda:	d10e      	bne.n	8009bfa <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8009bdc:	4b12      	ldr	r3, [pc, #72]	@ (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009bde:	691b      	ldr	r3, [r3, #16]
 8009be0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8009be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009be8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009bec:	091a      	lsrs	r2, r3, #4
 8009bee:	4b10      	ldr	r3, [pc, #64]	@ (8009c30 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8009bf0:	4013      	ands	r3, r2
 8009bf2:	4a0d      	ldr	r2, [pc, #52]	@ (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009bf4:	430b      	orrs	r3, r1
 8009bf6:	6113      	str	r3, [r2, #16]
 8009bf8:	e005      	b.n	8009c06 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8009bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009bfc:	691b      	ldr	r3, [r3, #16]
 8009bfe:	4a0a      	ldr	r2, [pc, #40]	@ (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009c00:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009c04:	6113      	str	r3, [r2, #16]
 8009c06:	4b08      	ldr	r3, [pc, #32]	@ (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009c08:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8009c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c0e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009c12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009c16:	4a04      	ldr	r2, [pc, #16]	@ (8009c28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009c18:	430b      	orrs	r3, r1
 8009c1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8009c1c:	e00e      	b.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009c1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8009c26:	e009      	b.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8009c28:	58024400 	.word	0x58024400
 8009c2c:	58024800 	.word	0x58024800
 8009c30:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c44:	f002 0301 	and.w	r3, r2, #1
 8009c48:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009c52:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009c56:	460b      	mov	r3, r1
 8009c58:	4313      	orrs	r3, r2
 8009c5a:	f000 8089 	beq.w	8009d70 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c62:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009c64:	2b28      	cmp	r3, #40	@ 0x28
 8009c66:	d86b      	bhi.n	8009d40 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8009c68:	a201      	add	r2, pc, #4	@ (adr r2, 8009c70 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c6e:	bf00      	nop
 8009c70:	08009d49 	.word	0x08009d49
 8009c74:	08009d41 	.word	0x08009d41
 8009c78:	08009d41 	.word	0x08009d41
 8009c7c:	08009d41 	.word	0x08009d41
 8009c80:	08009d41 	.word	0x08009d41
 8009c84:	08009d41 	.word	0x08009d41
 8009c88:	08009d41 	.word	0x08009d41
 8009c8c:	08009d41 	.word	0x08009d41
 8009c90:	08009d15 	.word	0x08009d15
 8009c94:	08009d41 	.word	0x08009d41
 8009c98:	08009d41 	.word	0x08009d41
 8009c9c:	08009d41 	.word	0x08009d41
 8009ca0:	08009d41 	.word	0x08009d41
 8009ca4:	08009d41 	.word	0x08009d41
 8009ca8:	08009d41 	.word	0x08009d41
 8009cac:	08009d41 	.word	0x08009d41
 8009cb0:	08009d2b 	.word	0x08009d2b
 8009cb4:	08009d41 	.word	0x08009d41
 8009cb8:	08009d41 	.word	0x08009d41
 8009cbc:	08009d41 	.word	0x08009d41
 8009cc0:	08009d41 	.word	0x08009d41
 8009cc4:	08009d41 	.word	0x08009d41
 8009cc8:	08009d41 	.word	0x08009d41
 8009ccc:	08009d41 	.word	0x08009d41
 8009cd0:	08009d49 	.word	0x08009d49
 8009cd4:	08009d41 	.word	0x08009d41
 8009cd8:	08009d41 	.word	0x08009d41
 8009cdc:	08009d41 	.word	0x08009d41
 8009ce0:	08009d41 	.word	0x08009d41
 8009ce4:	08009d41 	.word	0x08009d41
 8009ce8:	08009d41 	.word	0x08009d41
 8009cec:	08009d41 	.word	0x08009d41
 8009cf0:	08009d49 	.word	0x08009d49
 8009cf4:	08009d41 	.word	0x08009d41
 8009cf8:	08009d41 	.word	0x08009d41
 8009cfc:	08009d41 	.word	0x08009d41
 8009d00:	08009d41 	.word	0x08009d41
 8009d04:	08009d41 	.word	0x08009d41
 8009d08:	08009d41 	.word	0x08009d41
 8009d0c:	08009d41 	.word	0x08009d41
 8009d10:	08009d49 	.word	0x08009d49
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009d14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d18:	3308      	adds	r3, #8
 8009d1a:	2101      	movs	r1, #1
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f001 fe95 	bl	800ba4c <RCCEx_PLL2_Config>
 8009d22:	4603      	mov	r3, r0
 8009d24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009d28:	e00f      	b.n	8009d4a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d2e:	3328      	adds	r3, #40	@ 0x28
 8009d30:	2101      	movs	r1, #1
 8009d32:	4618      	mov	r0, r3
 8009d34:	f001 ff3c 	bl	800bbb0 <RCCEx_PLL3_Config>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009d3e:	e004      	b.n	8009d4a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d40:	2301      	movs	r3, #1
 8009d42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009d46:	e000      	b.n	8009d4a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8009d48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d10a      	bne.n	8009d68 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009d52:	4bbf      	ldr	r3, [pc, #764]	@ (800a050 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009d54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d56:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8009d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d5e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009d60:	4abb      	ldr	r2, [pc, #748]	@ (800a050 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009d62:	430b      	orrs	r3, r1
 8009d64:	6553      	str	r3, [r2, #84]	@ 0x54
 8009d66:	e003      	b.n	8009d70 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d78:	f002 0302 	and.w	r3, r2, #2
 8009d7c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009d80:	2300      	movs	r3, #0
 8009d82:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009d86:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8009d8a:	460b      	mov	r3, r1
 8009d8c:	4313      	orrs	r3, r2
 8009d8e:	d041      	beq.n	8009e14 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009d90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d94:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009d96:	2b05      	cmp	r3, #5
 8009d98:	d824      	bhi.n	8009de4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8009d9a:	a201      	add	r2, pc, #4	@ (adr r2, 8009da0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8009d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009da0:	08009ded 	.word	0x08009ded
 8009da4:	08009db9 	.word	0x08009db9
 8009da8:	08009dcf 	.word	0x08009dcf
 8009dac:	08009ded 	.word	0x08009ded
 8009db0:	08009ded 	.word	0x08009ded
 8009db4:	08009ded 	.word	0x08009ded
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dbc:	3308      	adds	r3, #8
 8009dbe:	2101      	movs	r1, #1
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f001 fe43 	bl	800ba4c <RCCEx_PLL2_Config>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009dcc:	e00f      	b.n	8009dee <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dd2:	3328      	adds	r3, #40	@ 0x28
 8009dd4:	2101      	movs	r1, #1
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f001 feea 	bl	800bbb0 <RCCEx_PLL3_Config>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009de2:	e004      	b.n	8009dee <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009de4:	2301      	movs	r3, #1
 8009de6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009dea:	e000      	b.n	8009dee <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8009dec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009dee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d10a      	bne.n	8009e0c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009df6:	4b96      	ldr	r3, [pc, #600]	@ (800a050 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009df8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009dfa:	f023 0107 	bic.w	r1, r3, #7
 8009dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e02:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009e04:	4a92      	ldr	r2, [pc, #584]	@ (800a050 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009e06:	430b      	orrs	r3, r1
 8009e08:	6553      	str	r3, [r2, #84]	@ 0x54
 8009e0a:	e003      	b.n	8009e14 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e10:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e1c:	f002 0304 	and.w	r3, r2, #4
 8009e20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009e24:	2300      	movs	r3, #0
 8009e26:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009e2a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009e2e:	460b      	mov	r3, r1
 8009e30:	4313      	orrs	r3, r2
 8009e32:	d044      	beq.n	8009ebe <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009e34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009e3c:	2b05      	cmp	r3, #5
 8009e3e:	d825      	bhi.n	8009e8c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8009e40:	a201      	add	r2, pc, #4	@ (adr r2, 8009e48 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8009e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e46:	bf00      	nop
 8009e48:	08009e95 	.word	0x08009e95
 8009e4c:	08009e61 	.word	0x08009e61
 8009e50:	08009e77 	.word	0x08009e77
 8009e54:	08009e95 	.word	0x08009e95
 8009e58:	08009e95 	.word	0x08009e95
 8009e5c:	08009e95 	.word	0x08009e95
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e64:	3308      	adds	r3, #8
 8009e66:	2101      	movs	r1, #1
 8009e68:	4618      	mov	r0, r3
 8009e6a:	f001 fdef 	bl	800ba4c <RCCEx_PLL2_Config>
 8009e6e:	4603      	mov	r3, r0
 8009e70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009e74:	e00f      	b.n	8009e96 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e7a:	3328      	adds	r3, #40	@ 0x28
 8009e7c:	2101      	movs	r1, #1
 8009e7e:	4618      	mov	r0, r3
 8009e80:	f001 fe96 	bl	800bbb0 <RCCEx_PLL3_Config>
 8009e84:	4603      	mov	r3, r0
 8009e86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009e8a:	e004      	b.n	8009e96 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009e92:	e000      	b.n	8009e96 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8009e94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d10b      	bne.n	8009eb6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009e9e:	4b6c      	ldr	r3, [pc, #432]	@ (800a050 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009ea0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ea2:	f023 0107 	bic.w	r1, r3, #7
 8009ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009eaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009eae:	4a68      	ldr	r2, [pc, #416]	@ (800a050 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009eb0:	430b      	orrs	r3, r1
 8009eb2:	6593      	str	r3, [r2, #88]	@ 0x58
 8009eb4:	e003      	b.n	8009ebe <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009eb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009eba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec6:	f002 0320 	and.w	r3, r2, #32
 8009eca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009ece:	2300      	movs	r3, #0
 8009ed0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009ed4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009ed8:	460b      	mov	r3, r1
 8009eda:	4313      	orrs	r3, r2
 8009edc:	d055      	beq.n	8009f8a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ee6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009eea:	d033      	beq.n	8009f54 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8009eec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009ef0:	d82c      	bhi.n	8009f4c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ef6:	d02f      	beq.n	8009f58 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8009ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009efc:	d826      	bhi.n	8009f4c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009efe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009f02:	d02b      	beq.n	8009f5c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8009f04:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009f08:	d820      	bhi.n	8009f4c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009f0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009f0e:	d012      	beq.n	8009f36 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009f10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009f14:	d81a      	bhi.n	8009f4c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d022      	beq.n	8009f60 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8009f1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009f1e:	d115      	bne.n	8009f4c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f24:	3308      	adds	r3, #8
 8009f26:	2100      	movs	r1, #0
 8009f28:	4618      	mov	r0, r3
 8009f2a:	f001 fd8f 	bl	800ba4c <RCCEx_PLL2_Config>
 8009f2e:	4603      	mov	r3, r0
 8009f30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009f34:	e015      	b.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f3a:	3328      	adds	r3, #40	@ 0x28
 8009f3c:	2102      	movs	r1, #2
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f001 fe36 	bl	800bbb0 <RCCEx_PLL3_Config>
 8009f44:	4603      	mov	r3, r0
 8009f46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009f4a:	e00a      	b.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009f52:	e006      	b.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009f54:	bf00      	nop
 8009f56:	e004      	b.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009f58:	bf00      	nop
 8009f5a:	e002      	b.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009f5c:	bf00      	nop
 8009f5e:	e000      	b.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009f60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d10b      	bne.n	8009f82 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009f6a:	4b39      	ldr	r3, [pc, #228]	@ (800a050 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009f6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f6e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f7a:	4a35      	ldr	r2, [pc, #212]	@ (800a050 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009f7c:	430b      	orrs	r3, r1
 8009f7e:	6553      	str	r3, [r2, #84]	@ 0x54
 8009f80:	e003      	b.n	8009f8a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f92:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8009f96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009fa0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8009fa4:	460b      	mov	r3, r1
 8009fa6:	4313      	orrs	r3, r2
 8009fa8:	d058      	beq.n	800a05c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009fb2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009fb6:	d033      	beq.n	800a020 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009fb8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009fbc:	d82c      	bhi.n	800a018 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009fbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009fc2:	d02f      	beq.n	800a024 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8009fc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009fc8:	d826      	bhi.n	800a018 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009fca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009fce:	d02b      	beq.n	800a028 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8009fd0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009fd4:	d820      	bhi.n	800a018 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009fd6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009fda:	d012      	beq.n	800a002 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009fdc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009fe0:	d81a      	bhi.n	800a018 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d022      	beq.n	800a02c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8009fe6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009fea:	d115      	bne.n	800a018 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ff0:	3308      	adds	r3, #8
 8009ff2:	2100      	movs	r1, #0
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	f001 fd29 	bl	800ba4c <RCCEx_PLL2_Config>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a000:	e015      	b.n	800a02e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a006:	3328      	adds	r3, #40	@ 0x28
 800a008:	2102      	movs	r1, #2
 800a00a:	4618      	mov	r0, r3
 800a00c:	f001 fdd0 	bl	800bbb0 <RCCEx_PLL3_Config>
 800a010:	4603      	mov	r3, r0
 800a012:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a016:	e00a      	b.n	800a02e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a018:	2301      	movs	r3, #1
 800a01a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a01e:	e006      	b.n	800a02e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a020:	bf00      	nop
 800a022:	e004      	b.n	800a02e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a024:	bf00      	nop
 800a026:	e002      	b.n	800a02e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a028:	bf00      	nop
 800a02a:	e000      	b.n	800a02e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a02c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a02e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a032:	2b00      	cmp	r3, #0
 800a034:	d10e      	bne.n	800a054 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a036:	4b06      	ldr	r3, [pc, #24]	@ (800a050 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a038:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a03a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800a03e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a042:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a046:	4a02      	ldr	r2, [pc, #8]	@ (800a050 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a048:	430b      	orrs	r3, r1
 800a04a:	6593      	str	r3, [r2, #88]	@ 0x58
 800a04c:	e006      	b.n	800a05c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800a04e:	bf00      	nop
 800a050:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a054:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a058:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a05c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a060:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a064:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800a068:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a06c:	2300      	movs	r3, #0
 800a06e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a072:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800a076:	460b      	mov	r3, r1
 800a078:	4313      	orrs	r3, r2
 800a07a:	d055      	beq.n	800a128 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a07c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a080:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a084:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a088:	d033      	beq.n	800a0f2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800a08a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a08e:	d82c      	bhi.n	800a0ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a090:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a094:	d02f      	beq.n	800a0f6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800a096:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a09a:	d826      	bhi.n	800a0ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a09c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a0a0:	d02b      	beq.n	800a0fa <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800a0a2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a0a6:	d820      	bhi.n	800a0ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a0a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a0ac:	d012      	beq.n	800a0d4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800a0ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a0b2:	d81a      	bhi.n	800a0ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d022      	beq.n	800a0fe <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800a0b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a0bc:	d115      	bne.n	800a0ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a0be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0c2:	3308      	adds	r3, #8
 800a0c4:	2100      	movs	r1, #0
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f001 fcc0 	bl	800ba4c <RCCEx_PLL2_Config>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a0d2:	e015      	b.n	800a100 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a0d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0d8:	3328      	adds	r3, #40	@ 0x28
 800a0da:	2102      	movs	r1, #2
 800a0dc:	4618      	mov	r0, r3
 800a0de:	f001 fd67 	bl	800bbb0 <RCCEx_PLL3_Config>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a0e8:	e00a      	b.n	800a100 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a0f0:	e006      	b.n	800a100 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a0f2:	bf00      	nop
 800a0f4:	e004      	b.n	800a100 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a0f6:	bf00      	nop
 800a0f8:	e002      	b.n	800a100 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a0fa:	bf00      	nop
 800a0fc:	e000      	b.n	800a100 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a0fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a100:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a104:	2b00      	cmp	r3, #0
 800a106:	d10b      	bne.n	800a120 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a108:	4ba1      	ldr	r3, [pc, #644]	@ (800a390 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a10a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a10c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800a110:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a114:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a118:	4a9d      	ldr	r2, [pc, #628]	@ (800a390 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a11a:	430b      	orrs	r3, r1
 800a11c:	6593      	str	r3, [r2, #88]	@ 0x58
 800a11e:	e003      	b.n	800a128 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a120:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a124:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a128:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a12c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a130:	f002 0308 	and.w	r3, r2, #8
 800a134:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a138:	2300      	movs	r3, #0
 800a13a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a13e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800a142:	460b      	mov	r3, r1
 800a144:	4313      	orrs	r3, r2
 800a146:	d01e      	beq.n	800a186 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a148:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a14c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a150:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a154:	d10c      	bne.n	800a170 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a156:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a15a:	3328      	adds	r3, #40	@ 0x28
 800a15c:	2102      	movs	r1, #2
 800a15e:	4618      	mov	r0, r3
 800a160:	f001 fd26 	bl	800bbb0 <RCCEx_PLL3_Config>
 800a164:	4603      	mov	r3, r0
 800a166:	2b00      	cmp	r3, #0
 800a168:	d002      	beq.n	800a170 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800a16a:	2301      	movs	r3, #1
 800a16c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a170:	4b87      	ldr	r3, [pc, #540]	@ (800a390 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a172:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a174:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a178:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a17c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a180:	4a83      	ldr	r2, [pc, #524]	@ (800a390 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a182:	430b      	orrs	r3, r1
 800a184:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a186:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a18a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a18e:	f002 0310 	and.w	r3, r2, #16
 800a192:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a196:	2300      	movs	r3, #0
 800a198:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a19c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800a1a0:	460b      	mov	r3, r1
 800a1a2:	4313      	orrs	r3, r2
 800a1a4:	d01e      	beq.n	800a1e4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a1a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a1ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a1b2:	d10c      	bne.n	800a1ce <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a1b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1b8:	3328      	adds	r3, #40	@ 0x28
 800a1ba:	2102      	movs	r1, #2
 800a1bc:	4618      	mov	r0, r3
 800a1be:	f001 fcf7 	bl	800bbb0 <RCCEx_PLL3_Config>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d002      	beq.n	800a1ce <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800a1c8:	2301      	movs	r3, #1
 800a1ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a1ce:	4b70      	ldr	r3, [pc, #448]	@ (800a390 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a1d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a1d2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a1d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a1de:	4a6c      	ldr	r2, [pc, #432]	@ (800a390 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a1e0:	430b      	orrs	r3, r1
 800a1e2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a1e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ec:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800a1f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a1fa:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800a1fe:	460b      	mov	r3, r1
 800a200:	4313      	orrs	r3, r2
 800a202:	d03e      	beq.n	800a282 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a204:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a208:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a20c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a210:	d022      	beq.n	800a258 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800a212:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a216:	d81b      	bhi.n	800a250 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d003      	beq.n	800a224 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800a21c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a220:	d00b      	beq.n	800a23a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800a222:	e015      	b.n	800a250 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a224:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a228:	3308      	adds	r3, #8
 800a22a:	2100      	movs	r1, #0
 800a22c:	4618      	mov	r0, r3
 800a22e:	f001 fc0d 	bl	800ba4c <RCCEx_PLL2_Config>
 800a232:	4603      	mov	r3, r0
 800a234:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a238:	e00f      	b.n	800a25a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a23a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a23e:	3328      	adds	r3, #40	@ 0x28
 800a240:	2102      	movs	r1, #2
 800a242:	4618      	mov	r0, r3
 800a244:	f001 fcb4 	bl	800bbb0 <RCCEx_PLL3_Config>
 800a248:	4603      	mov	r3, r0
 800a24a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a24e:	e004      	b.n	800a25a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a250:	2301      	movs	r3, #1
 800a252:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a256:	e000      	b.n	800a25a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800a258:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a25a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d10b      	bne.n	800a27a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a262:	4b4b      	ldr	r3, [pc, #300]	@ (800a390 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a264:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a266:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800a26a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a26e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a272:	4a47      	ldr	r2, [pc, #284]	@ (800a390 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a274:	430b      	orrs	r3, r1
 800a276:	6593      	str	r3, [r2, #88]	@ 0x58
 800a278:	e003      	b.n	800a282 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a27a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a27e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a282:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a28a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800a28e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a290:	2300      	movs	r3, #0
 800a292:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a294:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800a298:	460b      	mov	r3, r1
 800a29a:	4313      	orrs	r3, r2
 800a29c:	d03b      	beq.n	800a316 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a29e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a2a6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a2aa:	d01f      	beq.n	800a2ec <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800a2ac:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a2b0:	d818      	bhi.n	800a2e4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800a2b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a2b6:	d003      	beq.n	800a2c0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800a2b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a2bc:	d007      	beq.n	800a2ce <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800a2be:	e011      	b.n	800a2e4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2c0:	4b33      	ldr	r3, [pc, #204]	@ (800a390 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a2c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2c4:	4a32      	ldr	r2, [pc, #200]	@ (800a390 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a2c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a2ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a2cc:	e00f      	b.n	800a2ee <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a2ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2d2:	3328      	adds	r3, #40	@ 0x28
 800a2d4:	2101      	movs	r1, #1
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f001 fc6a 	bl	800bbb0 <RCCEx_PLL3_Config>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800a2e2:	e004      	b.n	800a2ee <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a2e4:	2301      	movs	r3, #1
 800a2e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a2ea:	e000      	b.n	800a2ee <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800a2ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d10b      	bne.n	800a30e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a2f6:	4b26      	ldr	r3, [pc, #152]	@ (800a390 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a2f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2fa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a2fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a302:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a306:	4a22      	ldr	r2, [pc, #136]	@ (800a390 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a308:	430b      	orrs	r3, r1
 800a30a:	6553      	str	r3, [r2, #84]	@ 0x54
 800a30c:	e003      	b.n	800a316 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a30e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a312:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a31e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800a322:	673b      	str	r3, [r7, #112]	@ 0x70
 800a324:	2300      	movs	r3, #0
 800a326:	677b      	str	r3, [r7, #116]	@ 0x74
 800a328:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800a32c:	460b      	mov	r3, r1
 800a32e:	4313      	orrs	r3, r2
 800a330:	d034      	beq.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a332:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a336:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d003      	beq.n	800a344 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800a33c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a340:	d007      	beq.n	800a352 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800a342:	e011      	b.n	800a368 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a344:	4b12      	ldr	r3, [pc, #72]	@ (800a390 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a348:	4a11      	ldr	r2, [pc, #68]	@ (800a390 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a34a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a34e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a350:	e00e      	b.n	800a370 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a352:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a356:	3308      	adds	r3, #8
 800a358:	2102      	movs	r1, #2
 800a35a:	4618      	mov	r0, r3
 800a35c:	f001 fb76 	bl	800ba4c <RCCEx_PLL2_Config>
 800a360:	4603      	mov	r3, r0
 800a362:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a366:	e003      	b.n	800a370 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800a368:	2301      	movs	r3, #1
 800a36a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a36e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a370:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a374:	2b00      	cmp	r3, #0
 800a376:	d10d      	bne.n	800a394 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a378:	4b05      	ldr	r3, [pc, #20]	@ (800a390 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a37a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a37c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a380:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a384:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a386:	4a02      	ldr	r2, [pc, #8]	@ (800a390 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a388:	430b      	orrs	r3, r1
 800a38a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a38c:	e006      	b.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800a38e:	bf00      	nop
 800a390:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a394:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a398:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a39c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800a3a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a3ae:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800a3b2:	460b      	mov	r3, r1
 800a3b4:	4313      	orrs	r3, r2
 800a3b6:	d00c      	beq.n	800a3d2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a3b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3bc:	3328      	adds	r3, #40	@ 0x28
 800a3be:	2102      	movs	r1, #2
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f001 fbf5 	bl	800bbb0 <RCCEx_PLL3_Config>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d002      	beq.n	800a3d2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a3d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3da:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800a3de:	663b      	str	r3, [r7, #96]	@ 0x60
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	667b      	str	r3, [r7, #100]	@ 0x64
 800a3e4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800a3e8:	460b      	mov	r3, r1
 800a3ea:	4313      	orrs	r3, r2
 800a3ec:	d038      	beq.n	800a460 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a3ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a3fa:	d018      	beq.n	800a42e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800a3fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a400:	d811      	bhi.n	800a426 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a402:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a406:	d014      	beq.n	800a432 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800a408:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a40c:	d80b      	bhi.n	800a426 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d011      	beq.n	800a436 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800a412:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a416:	d106      	bne.n	800a426 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a418:	4bc3      	ldr	r3, [pc, #780]	@ (800a728 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a41a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a41c:	4ac2      	ldr	r2, [pc, #776]	@ (800a728 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a41e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a422:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a424:	e008      	b.n	800a438 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a426:	2301      	movs	r3, #1
 800a428:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a42c:	e004      	b.n	800a438 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a42e:	bf00      	nop
 800a430:	e002      	b.n	800a438 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a432:	bf00      	nop
 800a434:	e000      	b.n	800a438 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a436:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a438:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d10b      	bne.n	800a458 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a440:	4bb9      	ldr	r3, [pc, #740]	@ (800a728 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a442:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a444:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a448:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a44c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a450:	4ab5      	ldr	r2, [pc, #724]	@ (800a728 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a452:	430b      	orrs	r3, r1
 800a454:	6553      	str	r3, [r2, #84]	@ 0x54
 800a456:	e003      	b.n	800a460 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a458:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a45c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a460:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a464:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a468:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800a46c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a46e:	2300      	movs	r3, #0
 800a470:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a472:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800a476:	460b      	mov	r3, r1
 800a478:	4313      	orrs	r3, r2
 800a47a:	d009      	beq.n	800a490 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a47c:	4baa      	ldr	r3, [pc, #680]	@ (800a728 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a47e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a480:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a484:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a488:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a48a:	4aa7      	ldr	r2, [pc, #668]	@ (800a728 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a48c:	430b      	orrs	r3, r1
 800a48e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a490:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a494:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a498:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800a49c:	653b      	str	r3, [r7, #80]	@ 0x50
 800a49e:	2300      	movs	r3, #0
 800a4a0:	657b      	str	r3, [r7, #84]	@ 0x54
 800a4a2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800a4a6:	460b      	mov	r3, r1
 800a4a8:	4313      	orrs	r3, r2
 800a4aa:	d00a      	beq.n	800a4c2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a4ac:	4b9e      	ldr	r3, [pc, #632]	@ (800a728 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a4ae:	691b      	ldr	r3, [r3, #16]
 800a4b0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800a4b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4b8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a4bc:	4a9a      	ldr	r2, [pc, #616]	@ (800a728 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a4be:	430b      	orrs	r3, r1
 800a4c0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a4c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ca:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800a4ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a4d4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800a4d8:	460b      	mov	r3, r1
 800a4da:	4313      	orrs	r3, r2
 800a4dc:	d009      	beq.n	800a4f2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a4de:	4b92      	ldr	r3, [pc, #584]	@ (800a728 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a4e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a4e2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800a4e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a4ec:	4a8e      	ldr	r2, [pc, #568]	@ (800a728 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a4ee:	430b      	orrs	r3, r1
 800a4f0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a4f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4fa:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800a4fe:	643b      	str	r3, [r7, #64]	@ 0x40
 800a500:	2300      	movs	r3, #0
 800a502:	647b      	str	r3, [r7, #68]	@ 0x44
 800a504:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800a508:	460b      	mov	r3, r1
 800a50a:	4313      	orrs	r3, r2
 800a50c:	d00e      	beq.n	800a52c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a50e:	4b86      	ldr	r3, [pc, #536]	@ (800a728 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a510:	691b      	ldr	r3, [r3, #16]
 800a512:	4a85      	ldr	r2, [pc, #532]	@ (800a728 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a514:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a518:	6113      	str	r3, [r2, #16]
 800a51a:	4b83      	ldr	r3, [pc, #524]	@ (800a728 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a51c:	6919      	ldr	r1, [r3, #16]
 800a51e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a522:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a526:	4a80      	ldr	r2, [pc, #512]	@ (800a728 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a528:	430b      	orrs	r3, r1
 800a52a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a52c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a530:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a534:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800a538:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a53a:	2300      	movs	r3, #0
 800a53c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a53e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800a542:	460b      	mov	r3, r1
 800a544:	4313      	orrs	r3, r2
 800a546:	d009      	beq.n	800a55c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a548:	4b77      	ldr	r3, [pc, #476]	@ (800a728 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a54a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a54c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a550:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a554:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a556:	4a74      	ldr	r2, [pc, #464]	@ (800a728 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a558:	430b      	orrs	r3, r1
 800a55a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a55c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a560:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a564:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800a568:	633b      	str	r3, [r7, #48]	@ 0x30
 800a56a:	2300      	movs	r3, #0
 800a56c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a56e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800a572:	460b      	mov	r3, r1
 800a574:	4313      	orrs	r3, r2
 800a576:	d00a      	beq.n	800a58e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a578:	4b6b      	ldr	r3, [pc, #428]	@ (800a728 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a57a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a57c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800a580:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a584:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a588:	4a67      	ldr	r2, [pc, #412]	@ (800a728 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a58a:	430b      	orrs	r3, r1
 800a58c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a58e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a592:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a596:	2100      	movs	r1, #0
 800a598:	62b9      	str	r1, [r7, #40]	@ 0x28
 800a59a:	f003 0301 	and.w	r3, r3, #1
 800a59e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a5a0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800a5a4:	460b      	mov	r3, r1
 800a5a6:	4313      	orrs	r3, r2
 800a5a8:	d011      	beq.n	800a5ce <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a5aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5ae:	3308      	adds	r3, #8
 800a5b0:	2100      	movs	r1, #0
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	f001 fa4a 	bl	800ba4c <RCCEx_PLL2_Config>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a5be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d003      	beq.n	800a5ce <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a5ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a5ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5d6:	2100      	movs	r1, #0
 800a5d8:	6239      	str	r1, [r7, #32]
 800a5da:	f003 0302 	and.w	r3, r3, #2
 800a5de:	627b      	str	r3, [r7, #36]	@ 0x24
 800a5e0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a5e4:	460b      	mov	r3, r1
 800a5e6:	4313      	orrs	r3, r2
 800a5e8:	d011      	beq.n	800a60e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a5ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5ee:	3308      	adds	r3, #8
 800a5f0:	2101      	movs	r1, #1
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f001 fa2a 	bl	800ba4c <RCCEx_PLL2_Config>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a5fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a602:	2b00      	cmp	r3, #0
 800a604:	d003      	beq.n	800a60e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a606:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a60a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a60e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a612:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a616:	2100      	movs	r1, #0
 800a618:	61b9      	str	r1, [r7, #24]
 800a61a:	f003 0304 	and.w	r3, r3, #4
 800a61e:	61fb      	str	r3, [r7, #28]
 800a620:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a624:	460b      	mov	r3, r1
 800a626:	4313      	orrs	r3, r2
 800a628:	d011      	beq.n	800a64e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a62a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a62e:	3308      	adds	r3, #8
 800a630:	2102      	movs	r1, #2
 800a632:	4618      	mov	r0, r3
 800a634:	f001 fa0a 	bl	800ba4c <RCCEx_PLL2_Config>
 800a638:	4603      	mov	r3, r0
 800a63a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a63e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a642:	2b00      	cmp	r3, #0
 800a644:	d003      	beq.n	800a64e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a646:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a64a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a64e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a652:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a656:	2100      	movs	r1, #0
 800a658:	6139      	str	r1, [r7, #16]
 800a65a:	f003 0308 	and.w	r3, r3, #8
 800a65e:	617b      	str	r3, [r7, #20]
 800a660:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a664:	460b      	mov	r3, r1
 800a666:	4313      	orrs	r3, r2
 800a668:	d011      	beq.n	800a68e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a66a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a66e:	3328      	adds	r3, #40	@ 0x28
 800a670:	2100      	movs	r1, #0
 800a672:	4618      	mov	r0, r3
 800a674:	f001 fa9c 	bl	800bbb0 <RCCEx_PLL3_Config>
 800a678:	4603      	mov	r3, r0
 800a67a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800a67e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a682:	2b00      	cmp	r3, #0
 800a684:	d003      	beq.n	800a68e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a686:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a68a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a68e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a692:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a696:	2100      	movs	r1, #0
 800a698:	60b9      	str	r1, [r7, #8]
 800a69a:	f003 0310 	and.w	r3, r3, #16
 800a69e:	60fb      	str	r3, [r7, #12]
 800a6a0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a6a4:	460b      	mov	r3, r1
 800a6a6:	4313      	orrs	r3, r2
 800a6a8:	d011      	beq.n	800a6ce <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a6aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6ae:	3328      	adds	r3, #40	@ 0x28
 800a6b0:	2101      	movs	r1, #1
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	f001 fa7c 	bl	800bbb0 <RCCEx_PLL3_Config>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a6be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d003      	beq.n	800a6ce <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a6ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a6ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6d6:	2100      	movs	r1, #0
 800a6d8:	6039      	str	r1, [r7, #0]
 800a6da:	f003 0320 	and.w	r3, r3, #32
 800a6de:	607b      	str	r3, [r7, #4]
 800a6e0:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a6e4:	460b      	mov	r3, r1
 800a6e6:	4313      	orrs	r3, r2
 800a6e8:	d011      	beq.n	800a70e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a6ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6ee:	3328      	adds	r3, #40	@ 0x28
 800a6f0:	2102      	movs	r1, #2
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	f001 fa5c 	bl	800bbb0 <RCCEx_PLL3_Config>
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a6fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a702:	2b00      	cmp	r3, #0
 800a704:	d003      	beq.n	800a70e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a706:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a70a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800a70e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800a712:	2b00      	cmp	r3, #0
 800a714:	d101      	bne.n	800a71a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800a716:	2300      	movs	r3, #0
 800a718:	e000      	b.n	800a71c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800a71a:	2301      	movs	r3, #1
}
 800a71c:	4618      	mov	r0, r3
 800a71e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800a722:	46bd      	mov	sp, r7
 800a724:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a728:	58024400 	.word	0x58024400

0800a72c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b090      	sub	sp, #64	@ 0x40
 800a730:	af00      	add	r7, sp, #0
 800a732:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a736:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a73a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800a73e:	430b      	orrs	r3, r1
 800a740:	f040 8094 	bne.w	800a86c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a744:	4b9e      	ldr	r3, [pc, #632]	@ (800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a746:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a748:	f003 0307 	and.w	r3, r3, #7
 800a74c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a74e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a750:	2b04      	cmp	r3, #4
 800a752:	f200 8087 	bhi.w	800a864 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a756:	a201      	add	r2, pc, #4	@ (adr r2, 800a75c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a75c:	0800a771 	.word	0x0800a771
 800a760:	0800a799 	.word	0x0800a799
 800a764:	0800a7c1 	.word	0x0800a7c1
 800a768:	0800a85d 	.word	0x0800a85d
 800a76c:	0800a7e9 	.word	0x0800a7e9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a770:	4b93      	ldr	r3, [pc, #588]	@ (800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a778:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a77c:	d108      	bne.n	800a790 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a77e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a782:	4618      	mov	r0, r3
 800a784:	f001 f810 	bl	800b7a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a78a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a78c:	f000 bd45 	b.w	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a790:	2300      	movs	r3, #0
 800a792:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a794:	f000 bd41 	b.w	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a798:	4b89      	ldr	r3, [pc, #548]	@ (800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a7a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a7a4:	d108      	bne.n	800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a7a6:	f107 0318 	add.w	r3, r7, #24
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	f000 fd54 	bl	800b258 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a7b0:	69bb      	ldr	r3, [r7, #24]
 800a7b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7b4:	f000 bd31 	b.w	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7bc:	f000 bd2d 	b.w	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a7c0:	4b7f      	ldr	r3, [pc, #508]	@ (800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a7c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7cc:	d108      	bne.n	800a7e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a7ce:	f107 030c 	add.w	r3, r7, #12
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	f000 fe94 	bl	800b500 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7dc:	f000 bd1d 	b.w	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7e4:	f000 bd19 	b.w	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a7e8:	4b75      	ldr	r3, [pc, #468]	@ (800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a7ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a7ec:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a7f0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a7f2:	4b73      	ldr	r3, [pc, #460]	@ (800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f003 0304 	and.w	r3, r3, #4
 800a7fa:	2b04      	cmp	r3, #4
 800a7fc:	d10c      	bne.n	800a818 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a7fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a800:	2b00      	cmp	r3, #0
 800a802:	d109      	bne.n	800a818 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a804:	4b6e      	ldr	r3, [pc, #440]	@ (800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	08db      	lsrs	r3, r3, #3
 800a80a:	f003 0303 	and.w	r3, r3, #3
 800a80e:	4a6d      	ldr	r2, [pc, #436]	@ (800a9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a810:	fa22 f303 	lsr.w	r3, r2, r3
 800a814:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a816:	e01f      	b.n	800a858 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a818:	4b69      	ldr	r3, [pc, #420]	@ (800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a820:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a824:	d106      	bne.n	800a834 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a826:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a828:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a82c:	d102      	bne.n	800a834 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a82e:	4b66      	ldr	r3, [pc, #408]	@ (800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a830:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a832:	e011      	b.n	800a858 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a834:	4b62      	ldr	r3, [pc, #392]	@ (800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a83c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a840:	d106      	bne.n	800a850 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a842:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a844:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a848:	d102      	bne.n	800a850 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a84a:	4b60      	ldr	r3, [pc, #384]	@ (800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a84c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a84e:	e003      	b.n	800a858 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a850:	2300      	movs	r3, #0
 800a852:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a854:	f000 bce1 	b.w	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a858:	f000 bcdf 	b.w	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a85c:	4b5c      	ldr	r3, [pc, #368]	@ (800a9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a85e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a860:	f000 bcdb 	b.w	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a864:	2300      	movs	r3, #0
 800a866:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a868:	f000 bcd7 	b.w	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a86c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a870:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800a874:	430b      	orrs	r3, r1
 800a876:	f040 80ad 	bne.w	800a9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800a87a:	4b51      	ldr	r3, [pc, #324]	@ (800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a87c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a87e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800a882:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a886:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a88a:	d056      	beq.n	800a93a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800a88c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a88e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a892:	f200 8090 	bhi.w	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a898:	2bc0      	cmp	r3, #192	@ 0xc0
 800a89a:	f000 8088 	beq.w	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800a89e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8a0:	2bc0      	cmp	r3, #192	@ 0xc0
 800a8a2:	f200 8088 	bhi.w	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a8a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8a8:	2b80      	cmp	r3, #128	@ 0x80
 800a8aa:	d032      	beq.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a8ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8ae:	2b80      	cmp	r3, #128	@ 0x80
 800a8b0:	f200 8081 	bhi.w	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a8b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d003      	beq.n	800a8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800a8ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8bc:	2b40      	cmp	r3, #64	@ 0x40
 800a8be:	d014      	beq.n	800a8ea <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800a8c0:	e079      	b.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a8c2:	4b3f      	ldr	r3, [pc, #252]	@ (800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a8ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a8ce:	d108      	bne.n	800a8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a8d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f000 ff67 	bl	800b7a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a8da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8de:	f000 bc9c 	b.w	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8e6:	f000 bc98 	b.w	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a8ea:	4b35      	ldr	r3, [pc, #212]	@ (800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a8f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a8f6:	d108      	bne.n	800a90a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8f8:	f107 0318 	add.w	r3, r7, #24
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	f000 fcab 	bl	800b258 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a902:	69bb      	ldr	r3, [r7, #24]
 800a904:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a906:	f000 bc88 	b.w	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a90a:	2300      	movs	r3, #0
 800a90c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a90e:	f000 bc84 	b.w	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a912:	4b2b      	ldr	r3, [pc, #172]	@ (800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a91a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a91e:	d108      	bne.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a920:	f107 030c 	add.w	r3, r7, #12
 800a924:	4618      	mov	r0, r3
 800a926:	f000 fdeb 	bl	800b500 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a92e:	f000 bc74 	b.w	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a932:	2300      	movs	r3, #0
 800a934:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a936:	f000 bc70 	b.w	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a93a:	4b21      	ldr	r3, [pc, #132]	@ (800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a93c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a93e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a942:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a944:	4b1e      	ldr	r3, [pc, #120]	@ (800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	f003 0304 	and.w	r3, r3, #4
 800a94c:	2b04      	cmp	r3, #4
 800a94e:	d10c      	bne.n	800a96a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800a950:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a952:	2b00      	cmp	r3, #0
 800a954:	d109      	bne.n	800a96a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a956:	4b1a      	ldr	r3, [pc, #104]	@ (800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	08db      	lsrs	r3, r3, #3
 800a95c:	f003 0303 	and.w	r3, r3, #3
 800a960:	4a18      	ldr	r2, [pc, #96]	@ (800a9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a962:	fa22 f303 	lsr.w	r3, r2, r3
 800a966:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a968:	e01f      	b.n	800a9aa <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a96a:	4b15      	ldr	r3, [pc, #84]	@ (800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a972:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a976:	d106      	bne.n	800a986 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800a978:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a97a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a97e:	d102      	bne.n	800a986 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a980:	4b11      	ldr	r3, [pc, #68]	@ (800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a982:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a984:	e011      	b.n	800a9aa <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a986:	4b0e      	ldr	r3, [pc, #56]	@ (800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a98e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a992:	d106      	bne.n	800a9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800a994:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a996:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a99a:	d102      	bne.n	800a9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a99c:	4b0b      	ldr	r3, [pc, #44]	@ (800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a99e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a9a0:	e003      	b.n	800a9aa <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a9a6:	f000 bc38 	b.w	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a9aa:	f000 bc36 	b.w	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a9ae:	4b08      	ldr	r3, [pc, #32]	@ (800a9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a9b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9b2:	f000 bc32 	b.w	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9ba:	f000 bc2e 	b.w	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a9be:	bf00      	nop
 800a9c0:	58024400 	.word	0x58024400
 800a9c4:	03d09000 	.word	0x03d09000
 800a9c8:	003d0900 	.word	0x003d0900
 800a9cc:	017d7840 	.word	0x017d7840
 800a9d0:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a9d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9d8:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800a9dc:	430b      	orrs	r3, r1
 800a9de:	f040 809c 	bne.w	800ab1a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a9e2:	4b9e      	ldr	r3, [pc, #632]	@ (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a9e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a9e6:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a9ea:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a9ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9ee:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a9f2:	d054      	beq.n	800aa9e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800a9f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9f6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a9fa:	f200 808b 	bhi.w	800ab14 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a9fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa00:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800aa04:	f000 8083 	beq.w	800ab0e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800aa08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa0a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800aa0e:	f200 8081 	bhi.w	800ab14 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800aa12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa14:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800aa18:	d02f      	beq.n	800aa7a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800aa1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa1c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800aa20:	d878      	bhi.n	800ab14 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800aa22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d004      	beq.n	800aa32 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800aa28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa2a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800aa2e:	d012      	beq.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800aa30:	e070      	b.n	800ab14 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aa32:	4b8a      	ldr	r3, [pc, #552]	@ (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aa3a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aa3e:	d107      	bne.n	800aa50 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aa40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aa44:	4618      	mov	r0, r3
 800aa46:	f000 feaf 	bl	800b7a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aa4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa4e:	e3e4      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa50:	2300      	movs	r3, #0
 800aa52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa54:	e3e1      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aa56:	4b81      	ldr	r3, [pc, #516]	@ (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aa5e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aa62:	d107      	bne.n	800aa74 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa64:	f107 0318 	add.w	r3, r7, #24
 800aa68:	4618      	mov	r0, r3
 800aa6a:	f000 fbf5 	bl	800b258 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aa6e:	69bb      	ldr	r3, [r7, #24]
 800aa70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa72:	e3d2      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa74:	2300      	movs	r3, #0
 800aa76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa78:	e3cf      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aa7a:	4b78      	ldr	r3, [pc, #480]	@ (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aa82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa86:	d107      	bne.n	800aa98 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa88:	f107 030c 	add.w	r3, r7, #12
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	f000 fd37 	bl	800b500 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa96:	e3c0      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa9c:	e3bd      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aa9e:	4b6f      	ldr	r3, [pc, #444]	@ (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aaa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aaa2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800aaa6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aaa8:	4b6c      	ldr	r3, [pc, #432]	@ (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	f003 0304 	and.w	r3, r3, #4
 800aab0:	2b04      	cmp	r3, #4
 800aab2:	d10c      	bne.n	800aace <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800aab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d109      	bne.n	800aace <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aaba:	4b68      	ldr	r3, [pc, #416]	@ (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	08db      	lsrs	r3, r3, #3
 800aac0:	f003 0303 	and.w	r3, r3, #3
 800aac4:	4a66      	ldr	r2, [pc, #408]	@ (800ac60 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800aac6:	fa22 f303 	lsr.w	r3, r2, r3
 800aaca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aacc:	e01e      	b.n	800ab0c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aace:	4b63      	ldr	r3, [pc, #396]	@ (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aad6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aada:	d106      	bne.n	800aaea <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800aadc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aade:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aae2:	d102      	bne.n	800aaea <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800aae4:	4b5f      	ldr	r3, [pc, #380]	@ (800ac64 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800aae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aae8:	e010      	b.n	800ab0c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aaea:	4b5c      	ldr	r3, [pc, #368]	@ (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aaf2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aaf6:	d106      	bne.n	800ab06 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800aaf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aafa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aafe:	d102      	bne.n	800ab06 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ab00:	4b59      	ldr	r3, [pc, #356]	@ (800ac68 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800ab02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ab04:	e002      	b.n	800ab0c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ab06:	2300      	movs	r3, #0
 800ab08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ab0a:	e386      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ab0c:	e385      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ab0e:	4b57      	ldr	r3, [pc, #348]	@ (800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800ab10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab12:	e382      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ab14:	2300      	movs	r3, #0
 800ab16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab18:	e37f      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800ab1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab1e:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800ab22:	430b      	orrs	r3, r1
 800ab24:	f040 80a7 	bne.w	800ac76 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800ab28:	4b4c      	ldr	r3, [pc, #304]	@ (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ab2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab2c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800ab30:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800ab32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab34:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ab38:	d055      	beq.n	800abe6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800ab3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab3c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ab40:	f200 8096 	bhi.w	800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800ab44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab46:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ab4a:	f000 8084 	beq.w	800ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800ab4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab50:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ab54:	f200 808c 	bhi.w	800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800ab58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab5a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ab5e:	d030      	beq.n	800abc2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800ab60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab62:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ab66:	f200 8083 	bhi.w	800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800ab6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d004      	beq.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800ab70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab72:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ab76:	d012      	beq.n	800ab9e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800ab78:	e07a      	b.n	800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ab7a:	4b38      	ldr	r3, [pc, #224]	@ (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ab82:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ab86:	d107      	bne.n	800ab98 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ab88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	f000 fe0b 	bl	800b7a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ab92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab96:	e340      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab98:	2300      	movs	r3, #0
 800ab9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab9c:	e33d      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab9e:	4b2f      	ldr	r3, [pc, #188]	@ (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aba6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800abaa:	d107      	bne.n	800abbc <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800abac:	f107 0318 	add.w	r3, r7, #24
 800abb0:	4618      	mov	r0, r3
 800abb2:	f000 fb51 	bl	800b258 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800abb6:	69bb      	ldr	r3, [r7, #24]
 800abb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abba:	e32e      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abbc:	2300      	movs	r3, #0
 800abbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abc0:	e32b      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800abc2:	4b26      	ldr	r3, [pc, #152]	@ (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800abca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800abce:	d107      	bne.n	800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800abd0:	f107 030c 	add.w	r3, r7, #12
 800abd4:	4618      	mov	r0, r3
 800abd6:	f000 fc93 	bl	800b500 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abde:	e31c      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abe0:	2300      	movs	r3, #0
 800abe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abe4:	e319      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800abe6:	4b1d      	ldr	r3, [pc, #116]	@ (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800abe8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800abea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800abee:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800abf0:	4b1a      	ldr	r3, [pc, #104]	@ (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	f003 0304 	and.w	r3, r3, #4
 800abf8:	2b04      	cmp	r3, #4
 800abfa:	d10c      	bne.n	800ac16 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800abfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d109      	bne.n	800ac16 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac02:	4b16      	ldr	r3, [pc, #88]	@ (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	08db      	lsrs	r3, r3, #3
 800ac08:	f003 0303 	and.w	r3, r3, #3
 800ac0c:	4a14      	ldr	r2, [pc, #80]	@ (800ac60 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800ac0e:	fa22 f303 	lsr.w	r3, r2, r3
 800ac12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac14:	e01e      	b.n	800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ac16:	4b11      	ldr	r3, [pc, #68]	@ (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac22:	d106      	bne.n	800ac32 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800ac24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ac2a:	d102      	bne.n	800ac32 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ac2c:	4b0d      	ldr	r3, [pc, #52]	@ (800ac64 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800ac2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac30:	e010      	b.n	800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ac32:	4b0a      	ldr	r3, [pc, #40]	@ (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ac3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac3e:	d106      	bne.n	800ac4e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800ac40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac46:	d102      	bne.n	800ac4e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ac48:	4b07      	ldr	r3, [pc, #28]	@ (800ac68 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800ac4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac4c:	e002      	b.n	800ac54 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ac52:	e2e2      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ac54:	e2e1      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ac56:	4b05      	ldr	r3, [pc, #20]	@ (800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800ac58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac5a:	e2de      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ac5c:	58024400 	.word	0x58024400
 800ac60:	03d09000 	.word	0x03d09000
 800ac64:	003d0900 	.word	0x003d0900
 800ac68:	017d7840 	.word	0x017d7840
 800ac6c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800ac70:	2300      	movs	r3, #0
 800ac72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac74:	e2d1      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800ac76:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac7a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800ac7e:	430b      	orrs	r3, r1
 800ac80:	f040 809c 	bne.w	800adbc <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800ac84:	4b93      	ldr	r3, [pc, #588]	@ (800aed4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ac86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac88:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800ac8c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ac8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac90:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ac94:	d054      	beq.n	800ad40 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800ac96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac98:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ac9c:	f200 808b 	bhi.w	800adb6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800aca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aca2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800aca6:	f000 8083 	beq.w	800adb0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800acaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acac:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800acb0:	f200 8081 	bhi.w	800adb6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800acb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acb6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800acba:	d02f      	beq.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800acbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acbe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800acc2:	d878      	bhi.n	800adb6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800acc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d004      	beq.n	800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800acca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800accc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800acd0:	d012      	beq.n	800acf8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800acd2:	e070      	b.n	800adb6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800acd4:	4b7f      	ldr	r3, [pc, #508]	@ (800aed4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800acdc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ace0:	d107      	bne.n	800acf2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ace2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ace6:	4618      	mov	r0, r3
 800ace8:	f000 fd5e 	bl	800b7a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800acec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acf0:	e293      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800acf2:	2300      	movs	r3, #0
 800acf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acf6:	e290      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800acf8:	4b76      	ldr	r3, [pc, #472]	@ (800aed4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ad00:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ad04:	d107      	bne.n	800ad16 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad06:	f107 0318 	add.w	r3, r7, #24
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	f000 faa4 	bl	800b258 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ad10:	69bb      	ldr	r3, [r7, #24]
 800ad12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad14:	e281      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad16:	2300      	movs	r3, #0
 800ad18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad1a:	e27e      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ad1c:	4b6d      	ldr	r3, [pc, #436]	@ (800aed4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ad24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ad28:	d107      	bne.n	800ad3a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad2a:	f107 030c 	add.w	r3, r7, #12
 800ad2e:	4618      	mov	r0, r3
 800ad30:	f000 fbe6 	bl	800b500 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad38:	e26f      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad3e:	e26c      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ad40:	4b64      	ldr	r3, [pc, #400]	@ (800aed4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ad42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ad44:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ad48:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ad4a:	4b62      	ldr	r3, [pc, #392]	@ (800aed4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	f003 0304 	and.w	r3, r3, #4
 800ad52:	2b04      	cmp	r3, #4
 800ad54:	d10c      	bne.n	800ad70 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800ad56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d109      	bne.n	800ad70 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad5c:	4b5d      	ldr	r3, [pc, #372]	@ (800aed4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	08db      	lsrs	r3, r3, #3
 800ad62:	f003 0303 	and.w	r3, r3, #3
 800ad66:	4a5c      	ldr	r2, [pc, #368]	@ (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800ad68:	fa22 f303 	lsr.w	r3, r2, r3
 800ad6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ad6e:	e01e      	b.n	800adae <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ad70:	4b58      	ldr	r3, [pc, #352]	@ (800aed4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ad7c:	d106      	bne.n	800ad8c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800ad7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ad84:	d102      	bne.n	800ad8c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ad86:	4b55      	ldr	r3, [pc, #340]	@ (800aedc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ad88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ad8a:	e010      	b.n	800adae <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ad8c:	4b51      	ldr	r3, [pc, #324]	@ (800aed4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ad94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad98:	d106      	bne.n	800ada8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800ad9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ada0:	d102      	bne.n	800ada8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ada2:	4b4f      	ldr	r3, [pc, #316]	@ (800aee0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800ada4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ada6:	e002      	b.n	800adae <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ada8:	2300      	movs	r3, #0
 800adaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800adac:	e235      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800adae:	e234      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800adb0:	4b4c      	ldr	r3, [pc, #304]	@ (800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800adb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800adb4:	e231      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800adb6:	2300      	movs	r3, #0
 800adb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800adba:	e22e      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800adbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800adc0:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800adc4:	430b      	orrs	r3, r1
 800adc6:	f040 808f 	bne.w	800aee8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800adca:	4b42      	ldr	r3, [pc, #264]	@ (800aed4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800adcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800adce:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800add2:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800add4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800add6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800adda:	d06b      	beq.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800addc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adde:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ade2:	d874      	bhi.n	800aece <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ade4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ade6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800adea:	d056      	beq.n	800ae9a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800adec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800adf2:	d86c      	bhi.n	800aece <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800adf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adf6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800adfa:	d03b      	beq.n	800ae74 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800adfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adfe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ae02:	d864      	bhi.n	800aece <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ae04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae06:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ae0a:	d021      	beq.n	800ae50 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800ae0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae0e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ae12:	d85c      	bhi.n	800aece <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ae14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d004      	beq.n	800ae24 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800ae1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae20:	d004      	beq.n	800ae2c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800ae22:	e054      	b.n	800aece <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800ae24:	f7fe fa4c 	bl	80092c0 <HAL_RCC_GetPCLK1Freq>
 800ae28:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ae2a:	e1f6      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ae2c:	4b29      	ldr	r3, [pc, #164]	@ (800aed4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ae34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ae38:	d107      	bne.n	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae3a:	f107 0318 	add.w	r3, r7, #24
 800ae3e:	4618      	mov	r0, r3
 800ae40:	f000 fa0a 	bl	800b258 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ae44:	69fb      	ldr	r3, [r7, #28]
 800ae46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae48:	e1e7      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae4e:	e1e4      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ae50:	4b20      	ldr	r3, [pc, #128]	@ (800aed4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ae58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae5c:	d107      	bne.n	800ae6e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae5e:	f107 030c 	add.w	r3, r7, #12
 800ae62:	4618      	mov	r0, r3
 800ae64:	f000 fb4c 	bl	800b500 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ae68:	693b      	ldr	r3, [r7, #16]
 800ae6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae6c:	e1d5      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae72:	e1d2      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ae74:	4b17      	ldr	r3, [pc, #92]	@ (800aed4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	f003 0304 	and.w	r3, r3, #4
 800ae7c:	2b04      	cmp	r3, #4
 800ae7e:	d109      	bne.n	800ae94 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae80:	4b14      	ldr	r3, [pc, #80]	@ (800aed4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	08db      	lsrs	r3, r3, #3
 800ae86:	f003 0303 	and.w	r3, r3, #3
 800ae8a:	4a13      	ldr	r2, [pc, #76]	@ (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800ae8c:	fa22 f303 	lsr.w	r3, r2, r3
 800ae90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae92:	e1c2      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae94:	2300      	movs	r3, #0
 800ae96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae98:	e1bf      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ae9a:	4b0e      	ldr	r3, [pc, #56]	@ (800aed4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aea2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aea6:	d102      	bne.n	800aeae <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800aea8:	4b0c      	ldr	r3, [pc, #48]	@ (800aedc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800aeaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aeac:	e1b5      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aeae:	2300      	movs	r3, #0
 800aeb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aeb2:	e1b2      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800aeb4:	4b07      	ldr	r3, [pc, #28]	@ (800aed4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aebc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aec0:	d102      	bne.n	800aec8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800aec2:	4b07      	ldr	r3, [pc, #28]	@ (800aee0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800aec4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aec6:	e1a8      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aec8:	2300      	movs	r3, #0
 800aeca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aecc:	e1a5      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800aece:	2300      	movs	r3, #0
 800aed0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aed2:	e1a2      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aed4:	58024400 	.word	0x58024400
 800aed8:	03d09000 	.word	0x03d09000
 800aedc:	003d0900 	.word	0x003d0900
 800aee0:	017d7840 	.word	0x017d7840
 800aee4:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800aee8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aeec:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800aef0:	430b      	orrs	r3, r1
 800aef2:	d173      	bne.n	800afdc <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800aef4:	4b9c      	ldr	r3, [pc, #624]	@ (800b168 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aef6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aef8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800aefc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800aefe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800af04:	d02f      	beq.n	800af66 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800af06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af08:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800af0c:	d863      	bhi.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800af0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af10:	2b00      	cmp	r3, #0
 800af12:	d004      	beq.n	800af1e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800af14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800af1a:	d012      	beq.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800af1c:	e05b      	b.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800af1e:	4b92      	ldr	r3, [pc, #584]	@ (800b168 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800af26:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800af2a:	d107      	bne.n	800af3c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af2c:	f107 0318 	add.w	r3, r7, #24
 800af30:	4618      	mov	r0, r3
 800af32:	f000 f991 	bl	800b258 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800af36:	69bb      	ldr	r3, [r7, #24]
 800af38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af3a:	e16e      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af3c:	2300      	movs	r3, #0
 800af3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af40:	e16b      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800af42:	4b89      	ldr	r3, [pc, #548]	@ (800b168 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800af4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800af4e:	d107      	bne.n	800af60 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af50:	f107 030c 	add.w	r3, r7, #12
 800af54:	4618      	mov	r0, r3
 800af56:	f000 fad3 	bl	800b500 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800af5a:	697b      	ldr	r3, [r7, #20]
 800af5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af5e:	e15c      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af60:	2300      	movs	r3, #0
 800af62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af64:	e159      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800af66:	4b80      	ldr	r3, [pc, #512]	@ (800b168 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800af68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800af6a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800af6e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800af70:	4b7d      	ldr	r3, [pc, #500]	@ (800b168 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	f003 0304 	and.w	r3, r3, #4
 800af78:	2b04      	cmp	r3, #4
 800af7a:	d10c      	bne.n	800af96 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800af7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d109      	bne.n	800af96 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800af82:	4b79      	ldr	r3, [pc, #484]	@ (800b168 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	08db      	lsrs	r3, r3, #3
 800af88:	f003 0303 	and.w	r3, r3, #3
 800af8c:	4a77      	ldr	r2, [pc, #476]	@ (800b16c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800af8e:	fa22 f303 	lsr.w	r3, r2, r3
 800af92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800af94:	e01e      	b.n	800afd4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800af96:	4b74      	ldr	r3, [pc, #464]	@ (800b168 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800afa2:	d106      	bne.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800afa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afa6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800afaa:	d102      	bne.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800afac:	4b70      	ldr	r3, [pc, #448]	@ (800b170 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800afae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800afb0:	e010      	b.n	800afd4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800afb2:	4b6d      	ldr	r3, [pc, #436]	@ (800b168 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800afba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800afbe:	d106      	bne.n	800afce <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800afc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afc2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800afc6:	d102      	bne.n	800afce <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800afc8:	4b6a      	ldr	r3, [pc, #424]	@ (800b174 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800afca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800afcc:	e002      	b.n	800afd4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800afce:	2300      	movs	r3, #0
 800afd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800afd2:	e122      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800afd4:	e121      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800afd6:	2300      	movs	r3, #0
 800afd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800afda:	e11e      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800afdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800afe0:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800afe4:	430b      	orrs	r3, r1
 800afe6:	d133      	bne.n	800b050 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800afe8:	4b5f      	ldr	r3, [pc, #380]	@ (800b168 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800afea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800afec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800aff0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800aff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d004      	beq.n	800b002 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800aff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800affa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800affe:	d012      	beq.n	800b026 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800b000:	e023      	b.n	800b04a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b002:	4b59      	ldr	r3, [pc, #356]	@ (800b168 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b00a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b00e:	d107      	bne.n	800b020 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b010:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b014:	4618      	mov	r0, r3
 800b016:	f000 fbc7 	bl	800b7a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b01a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b01c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b01e:	e0fc      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b020:	2300      	movs	r3, #0
 800b022:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b024:	e0f9      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b026:	4b50      	ldr	r3, [pc, #320]	@ (800b168 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b02e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b032:	d107      	bne.n	800b044 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b034:	f107 0318 	add.w	r3, r7, #24
 800b038:	4618      	mov	r0, r3
 800b03a:	f000 f90d 	bl	800b258 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b03e:	6a3b      	ldr	r3, [r7, #32]
 800b040:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b042:	e0ea      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b044:	2300      	movs	r3, #0
 800b046:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b048:	e0e7      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b04a:	2300      	movs	r3, #0
 800b04c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b04e:	e0e4      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b050:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b054:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800b058:	430b      	orrs	r3, r1
 800b05a:	f040 808d 	bne.w	800b178 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b05e:	4b42      	ldr	r3, [pc, #264]	@ (800b168 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b062:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800b066:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b06a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b06e:	d06b      	beq.n	800b148 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800b070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b072:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b076:	d874      	bhi.n	800b162 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b07a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b07e:	d056      	beq.n	800b12e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800b080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b082:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b086:	d86c      	bhi.n	800b162 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b08a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b08e:	d03b      	beq.n	800b108 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800b090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b092:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b096:	d864      	bhi.n	800b162 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b09a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b09e:	d021      	beq.n	800b0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800b0a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b0a6:	d85c      	bhi.n	800b162 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b0a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d004      	beq.n	800b0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800b0ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b0b4:	d004      	beq.n	800b0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800b0b6:	e054      	b.n	800b162 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b0b8:	f000 f8b8 	bl	800b22c <HAL_RCCEx_GetD3PCLK1Freq>
 800b0bc:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b0be:	e0ac      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b0c0:	4b29      	ldr	r3, [pc, #164]	@ (800b168 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b0c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b0cc:	d107      	bne.n	800b0de <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b0ce:	f107 0318 	add.w	r3, r7, #24
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	f000 f8c0 	bl	800b258 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b0d8:	69fb      	ldr	r3, [r7, #28]
 800b0da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0dc:	e09d      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b0de:	2300      	movs	r3, #0
 800b0e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0e2:	e09a      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b0e4:	4b20      	ldr	r3, [pc, #128]	@ (800b168 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b0ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b0f0:	d107      	bne.n	800b102 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b0f2:	f107 030c 	add.w	r3, r7, #12
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	f000 fa02 	bl	800b500 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b0fc:	693b      	ldr	r3, [r7, #16]
 800b0fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b100:	e08b      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b102:	2300      	movs	r3, #0
 800b104:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b106:	e088      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b108:	4b17      	ldr	r3, [pc, #92]	@ (800b168 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	f003 0304 	and.w	r3, r3, #4
 800b110:	2b04      	cmp	r3, #4
 800b112:	d109      	bne.n	800b128 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b114:	4b14      	ldr	r3, [pc, #80]	@ (800b168 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	08db      	lsrs	r3, r3, #3
 800b11a:	f003 0303 	and.w	r3, r3, #3
 800b11e:	4a13      	ldr	r2, [pc, #76]	@ (800b16c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b120:	fa22 f303 	lsr.w	r3, r2, r3
 800b124:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b126:	e078      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b128:	2300      	movs	r3, #0
 800b12a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b12c:	e075      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b12e:	4b0e      	ldr	r3, [pc, #56]	@ (800b168 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b136:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b13a:	d102      	bne.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800b13c:	4b0c      	ldr	r3, [pc, #48]	@ (800b170 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b13e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b140:	e06b      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b142:	2300      	movs	r3, #0
 800b144:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b146:	e068      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b148:	4b07      	ldr	r3, [pc, #28]	@ (800b168 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b150:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b154:	d102      	bne.n	800b15c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800b156:	4b07      	ldr	r3, [pc, #28]	@ (800b174 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b158:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b15a:	e05e      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b15c:	2300      	movs	r3, #0
 800b15e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b160:	e05b      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800b162:	2300      	movs	r3, #0
 800b164:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b166:	e058      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b168:	58024400 	.word	0x58024400
 800b16c:	03d09000 	.word	0x03d09000
 800b170:	003d0900 	.word	0x003d0900
 800b174:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b178:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b17c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800b180:	430b      	orrs	r3, r1
 800b182:	d148      	bne.n	800b216 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b184:	4b27      	ldr	r3, [pc, #156]	@ (800b224 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b186:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b188:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b18c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b18e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b190:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b194:	d02a      	beq.n	800b1ec <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800b196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b198:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b19c:	d838      	bhi.n	800b210 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800b19e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d004      	beq.n	800b1ae <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800b1a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b1aa:	d00d      	beq.n	800b1c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800b1ac:	e030      	b.n	800b210 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b1ae:	4b1d      	ldr	r3, [pc, #116]	@ (800b224 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b1b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b1ba:	d102      	bne.n	800b1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800b1bc:	4b1a      	ldr	r3, [pc, #104]	@ (800b228 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800b1be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1c0:	e02b      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1c6:	e028      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b1c8:	4b16      	ldr	r3, [pc, #88]	@ (800b224 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b1d0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b1d4:	d107      	bne.n	800b1e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b1d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b1da:	4618      	mov	r0, r3
 800b1dc:	f000 fae4 	bl	800b7a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b1e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1e4:	e019      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1ea:	e016      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b1ec:	4b0d      	ldr	r3, [pc, #52]	@ (800b224 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b1f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b1f8:	d107      	bne.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b1fa:	f107 0318 	add.w	r3, r7, #24
 800b1fe:	4618      	mov	r0, r3
 800b200:	f000 f82a 	bl	800b258 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b204:	69fb      	ldr	r3, [r7, #28]
 800b206:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b208:	e007      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b20a:	2300      	movs	r3, #0
 800b20c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b20e:	e004      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b210:	2300      	movs	r3, #0
 800b212:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b214:	e001      	b.n	800b21a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800b216:	2300      	movs	r3, #0
 800b218:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800b21a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b21c:	4618      	mov	r0, r3
 800b21e:	3740      	adds	r7, #64	@ 0x40
 800b220:	46bd      	mov	sp, r7
 800b222:	bd80      	pop	{r7, pc}
 800b224:	58024400 	.word	0x58024400
 800b228:	017d7840 	.word	0x017d7840

0800b22c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b230:	f7fe f816 	bl	8009260 <HAL_RCC_GetHCLKFreq>
 800b234:	4602      	mov	r2, r0
 800b236:	4b06      	ldr	r3, [pc, #24]	@ (800b250 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b238:	6a1b      	ldr	r3, [r3, #32]
 800b23a:	091b      	lsrs	r3, r3, #4
 800b23c:	f003 0307 	and.w	r3, r3, #7
 800b240:	4904      	ldr	r1, [pc, #16]	@ (800b254 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b242:	5ccb      	ldrb	r3, [r1, r3]
 800b244:	f003 031f 	and.w	r3, r3, #31
 800b248:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b24c:	4618      	mov	r0, r3
 800b24e:	bd80      	pop	{r7, pc}
 800b250:	58024400 	.word	0x58024400
 800b254:	08012798 	.word	0x08012798

0800b258 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b258:	b480      	push	{r7}
 800b25a:	b089      	sub	sp, #36	@ 0x24
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b260:	4ba1      	ldr	r3, [pc, #644]	@ (800b4e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b264:	f003 0303 	and.w	r3, r3, #3
 800b268:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b26a:	4b9f      	ldr	r3, [pc, #636]	@ (800b4e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b26c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b26e:	0b1b      	lsrs	r3, r3, #12
 800b270:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b274:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b276:	4b9c      	ldr	r3, [pc, #624]	@ (800b4e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b27a:	091b      	lsrs	r3, r3, #4
 800b27c:	f003 0301 	and.w	r3, r3, #1
 800b280:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b282:	4b99      	ldr	r3, [pc, #612]	@ (800b4e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b284:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b286:	08db      	lsrs	r3, r3, #3
 800b288:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b28c:	693a      	ldr	r2, [r7, #16]
 800b28e:	fb02 f303 	mul.w	r3, r2, r3
 800b292:	ee07 3a90 	vmov	s15, r3
 800b296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b29a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b29e:	697b      	ldr	r3, [r7, #20]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	f000 8111 	beq.w	800b4c8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b2a6:	69bb      	ldr	r3, [r7, #24]
 800b2a8:	2b02      	cmp	r3, #2
 800b2aa:	f000 8083 	beq.w	800b3b4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b2ae:	69bb      	ldr	r3, [r7, #24]
 800b2b0:	2b02      	cmp	r3, #2
 800b2b2:	f200 80a1 	bhi.w	800b3f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b2b6:	69bb      	ldr	r3, [r7, #24]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d003      	beq.n	800b2c4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b2bc:	69bb      	ldr	r3, [r7, #24]
 800b2be:	2b01      	cmp	r3, #1
 800b2c0:	d056      	beq.n	800b370 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b2c2:	e099      	b.n	800b3f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b2c4:	4b88      	ldr	r3, [pc, #544]	@ (800b4e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	f003 0320 	and.w	r3, r3, #32
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d02d      	beq.n	800b32c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b2d0:	4b85      	ldr	r3, [pc, #532]	@ (800b4e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	08db      	lsrs	r3, r3, #3
 800b2d6:	f003 0303 	and.w	r3, r3, #3
 800b2da:	4a84      	ldr	r2, [pc, #528]	@ (800b4ec <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b2dc:	fa22 f303 	lsr.w	r3, r2, r3
 800b2e0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b2e2:	68bb      	ldr	r3, [r7, #8]
 800b2e4:	ee07 3a90 	vmov	s15, r3
 800b2e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2ec:	697b      	ldr	r3, [r7, #20]
 800b2ee:	ee07 3a90 	vmov	s15, r3
 800b2f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2fa:	4b7b      	ldr	r3, [pc, #492]	@ (800b4e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b2fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b302:	ee07 3a90 	vmov	s15, r3
 800b306:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b30a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b30e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b4f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b312:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b316:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b31a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b31e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b322:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b326:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b32a:	e087      	b.n	800b43c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b32c:	697b      	ldr	r3, [r7, #20]
 800b32e:	ee07 3a90 	vmov	s15, r3
 800b332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b336:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b4f4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b33a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b33e:	4b6a      	ldr	r3, [pc, #424]	@ (800b4e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b346:	ee07 3a90 	vmov	s15, r3
 800b34a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b34e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b352:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b4f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b35a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b35e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b36a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b36e:	e065      	b.n	800b43c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b370:	697b      	ldr	r3, [r7, #20]
 800b372:	ee07 3a90 	vmov	s15, r3
 800b376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b37a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b4f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b37e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b382:	4b59      	ldr	r3, [pc, #356]	@ (800b4e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b384:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b38a:	ee07 3a90 	vmov	s15, r3
 800b38e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b392:	ed97 6a03 	vldr	s12, [r7, #12]
 800b396:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b4f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b39a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b39e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b3a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b3b2:	e043      	b.n	800b43c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b3b4:	697b      	ldr	r3, [r7, #20]
 800b3b6:	ee07 3a90 	vmov	s15, r3
 800b3ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3be:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b4fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b3c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3c6:	4b48      	ldr	r3, [pc, #288]	@ (800b4e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b3c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3ce:	ee07 3a90 	vmov	s15, r3
 800b3d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3da:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b4f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b3de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b3ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b3f6:	e021      	b.n	800b43c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b3f8:	697b      	ldr	r3, [r7, #20]
 800b3fa:	ee07 3a90 	vmov	s15, r3
 800b3fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b402:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b4f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b40a:	4b37      	ldr	r3, [pc, #220]	@ (800b4e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b40c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b40e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b412:	ee07 3a90 	vmov	s15, r3
 800b416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b41a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b41e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b4f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b42a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b42e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b432:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b436:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b43a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b43c:	4b2a      	ldr	r3, [pc, #168]	@ (800b4e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b43e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b440:	0a5b      	lsrs	r3, r3, #9
 800b442:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b446:	ee07 3a90 	vmov	s15, r3
 800b44a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b44e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b452:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b456:	edd7 6a07 	vldr	s13, [r7, #28]
 800b45a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b45e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b462:	ee17 2a90 	vmov	r2, s15
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b46a:	4b1f      	ldr	r3, [pc, #124]	@ (800b4e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b46c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b46e:	0c1b      	lsrs	r3, r3, #16
 800b470:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b474:	ee07 3a90 	vmov	s15, r3
 800b478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b47c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b480:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b484:	edd7 6a07 	vldr	s13, [r7, #28]
 800b488:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b48c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b490:	ee17 2a90 	vmov	r2, s15
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b498:	4b13      	ldr	r3, [pc, #76]	@ (800b4e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b49a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b49c:	0e1b      	lsrs	r3, r3, #24
 800b49e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b4a2:	ee07 3a90 	vmov	s15, r3
 800b4a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b4ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b4b2:	edd7 6a07 	vldr	s13, [r7, #28]
 800b4b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b4ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b4be:	ee17 2a90 	vmov	r2, s15
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b4c6:	e008      	b.n	800b4da <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	609a      	str	r2, [r3, #8]
}
 800b4da:	bf00      	nop
 800b4dc:	3724      	adds	r7, #36	@ 0x24
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e4:	4770      	bx	lr
 800b4e6:	bf00      	nop
 800b4e8:	58024400 	.word	0x58024400
 800b4ec:	03d09000 	.word	0x03d09000
 800b4f0:	46000000 	.word	0x46000000
 800b4f4:	4c742400 	.word	0x4c742400
 800b4f8:	4a742400 	.word	0x4a742400
 800b4fc:	4bbebc20 	.word	0x4bbebc20

0800b500 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b500:	b480      	push	{r7}
 800b502:	b089      	sub	sp, #36	@ 0x24
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b508:	4ba1      	ldr	r3, [pc, #644]	@ (800b790 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b50a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b50c:	f003 0303 	and.w	r3, r3, #3
 800b510:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b512:	4b9f      	ldr	r3, [pc, #636]	@ (800b790 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b516:	0d1b      	lsrs	r3, r3, #20
 800b518:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b51c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b51e:	4b9c      	ldr	r3, [pc, #624]	@ (800b790 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b522:	0a1b      	lsrs	r3, r3, #8
 800b524:	f003 0301 	and.w	r3, r3, #1
 800b528:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b52a:	4b99      	ldr	r3, [pc, #612]	@ (800b790 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b52c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b52e:	08db      	lsrs	r3, r3, #3
 800b530:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b534:	693a      	ldr	r2, [r7, #16]
 800b536:	fb02 f303 	mul.w	r3, r2, r3
 800b53a:	ee07 3a90 	vmov	s15, r3
 800b53e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b542:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b546:	697b      	ldr	r3, [r7, #20]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	f000 8111 	beq.w	800b770 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b54e:	69bb      	ldr	r3, [r7, #24]
 800b550:	2b02      	cmp	r3, #2
 800b552:	f000 8083 	beq.w	800b65c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b556:	69bb      	ldr	r3, [r7, #24]
 800b558:	2b02      	cmp	r3, #2
 800b55a:	f200 80a1 	bhi.w	800b6a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b55e:	69bb      	ldr	r3, [r7, #24]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d003      	beq.n	800b56c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b564:	69bb      	ldr	r3, [r7, #24]
 800b566:	2b01      	cmp	r3, #1
 800b568:	d056      	beq.n	800b618 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b56a:	e099      	b.n	800b6a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b56c:	4b88      	ldr	r3, [pc, #544]	@ (800b790 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	f003 0320 	and.w	r3, r3, #32
 800b574:	2b00      	cmp	r3, #0
 800b576:	d02d      	beq.n	800b5d4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b578:	4b85      	ldr	r3, [pc, #532]	@ (800b790 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	08db      	lsrs	r3, r3, #3
 800b57e:	f003 0303 	and.w	r3, r3, #3
 800b582:	4a84      	ldr	r2, [pc, #528]	@ (800b794 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b584:	fa22 f303 	lsr.w	r3, r2, r3
 800b588:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b58a:	68bb      	ldr	r3, [r7, #8]
 800b58c:	ee07 3a90 	vmov	s15, r3
 800b590:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b594:	697b      	ldr	r3, [r7, #20]
 800b596:	ee07 3a90 	vmov	s15, r3
 800b59a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b59e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5a2:	4b7b      	ldr	r3, [pc, #492]	@ (800b790 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b5a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5aa:	ee07 3a90 	vmov	s15, r3
 800b5ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5b2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5b6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b798 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b5ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b5c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5ce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b5d2:	e087      	b.n	800b6e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b5d4:	697b      	ldr	r3, [r7, #20]
 800b5d6:	ee07 3a90 	vmov	s15, r3
 800b5da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5de:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b79c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b5e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5e6:	4b6a      	ldr	r3, [pc, #424]	@ (800b790 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b5e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5ee:	ee07 3a90 	vmov	s15, r3
 800b5f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5f6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5fa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b798 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b5fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b602:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b606:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b60a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b60e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b612:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b616:	e065      	b.n	800b6e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b618:	697b      	ldr	r3, [r7, #20]
 800b61a:	ee07 3a90 	vmov	s15, r3
 800b61e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b622:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b7a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b626:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b62a:	4b59      	ldr	r3, [pc, #356]	@ (800b790 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b62c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b62e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b632:	ee07 3a90 	vmov	s15, r3
 800b636:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b63a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b63e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b798 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b642:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b646:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b64a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b64e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b652:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b656:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b65a:	e043      	b.n	800b6e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b65c:	697b      	ldr	r3, [r7, #20]
 800b65e:	ee07 3a90 	vmov	s15, r3
 800b662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b666:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b7a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b66a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b66e:	4b48      	ldr	r3, [pc, #288]	@ (800b790 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b672:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b676:	ee07 3a90 	vmov	s15, r3
 800b67a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b67e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b682:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b798 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b686:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b68a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b68e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b692:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b696:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b69a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b69e:	e021      	b.n	800b6e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b6a0:	697b      	ldr	r3, [r7, #20]
 800b6a2:	ee07 3a90 	vmov	s15, r3
 800b6a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6aa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b7a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b6ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6b2:	4b37      	ldr	r3, [pc, #220]	@ (800b790 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b6b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6ba:	ee07 3a90 	vmov	s15, r3
 800b6be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6c2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b6c6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b798 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b6ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b6d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b6e2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b6e4:	4b2a      	ldr	r3, [pc, #168]	@ (800b790 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b6e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6e8:	0a5b      	lsrs	r3, r3, #9
 800b6ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b6ee:	ee07 3a90 	vmov	s15, r3
 800b6f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b6fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b6fe:	edd7 6a07 	vldr	s13, [r7, #28]
 800b702:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b706:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b70a:	ee17 2a90 	vmov	r2, s15
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b712:	4b1f      	ldr	r3, [pc, #124]	@ (800b790 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b716:	0c1b      	lsrs	r3, r3, #16
 800b718:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b71c:	ee07 3a90 	vmov	s15, r3
 800b720:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b724:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b728:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b72c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b730:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b734:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b738:	ee17 2a90 	vmov	r2, s15
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b740:	4b13      	ldr	r3, [pc, #76]	@ (800b790 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b744:	0e1b      	lsrs	r3, r3, #24
 800b746:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b74a:	ee07 3a90 	vmov	s15, r3
 800b74e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b752:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b756:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b75a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b75e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b762:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b766:	ee17 2a90 	vmov	r2, s15
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b76e:	e008      	b.n	800b782 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2200      	movs	r2, #0
 800b774:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2200      	movs	r2, #0
 800b77a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2200      	movs	r2, #0
 800b780:	609a      	str	r2, [r3, #8]
}
 800b782:	bf00      	nop
 800b784:	3724      	adds	r7, #36	@ 0x24
 800b786:	46bd      	mov	sp, r7
 800b788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78c:	4770      	bx	lr
 800b78e:	bf00      	nop
 800b790:	58024400 	.word	0x58024400
 800b794:	03d09000 	.word	0x03d09000
 800b798:	46000000 	.word	0x46000000
 800b79c:	4c742400 	.word	0x4c742400
 800b7a0:	4a742400 	.word	0x4a742400
 800b7a4:	4bbebc20 	.word	0x4bbebc20

0800b7a8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	b089      	sub	sp, #36	@ 0x24
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b7b0:	4ba0      	ldr	r3, [pc, #640]	@ (800ba34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b7b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7b4:	f003 0303 	and.w	r3, r3, #3
 800b7b8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b7ba:	4b9e      	ldr	r3, [pc, #632]	@ (800ba34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b7bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7be:	091b      	lsrs	r3, r3, #4
 800b7c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b7c4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b7c6:	4b9b      	ldr	r3, [pc, #620]	@ (800ba34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b7c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7ca:	f003 0301 	and.w	r3, r3, #1
 800b7ce:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b7d0:	4b98      	ldr	r3, [pc, #608]	@ (800ba34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b7d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b7d4:	08db      	lsrs	r3, r3, #3
 800b7d6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b7da:	693a      	ldr	r2, [r7, #16]
 800b7dc:	fb02 f303 	mul.w	r3, r2, r3
 800b7e0:	ee07 3a90 	vmov	s15, r3
 800b7e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7e8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b7ec:	697b      	ldr	r3, [r7, #20]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	f000 8111 	beq.w	800ba16 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b7f4:	69bb      	ldr	r3, [r7, #24]
 800b7f6:	2b02      	cmp	r3, #2
 800b7f8:	f000 8083 	beq.w	800b902 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b7fc:	69bb      	ldr	r3, [r7, #24]
 800b7fe:	2b02      	cmp	r3, #2
 800b800:	f200 80a1 	bhi.w	800b946 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b804:	69bb      	ldr	r3, [r7, #24]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d003      	beq.n	800b812 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b80a:	69bb      	ldr	r3, [r7, #24]
 800b80c:	2b01      	cmp	r3, #1
 800b80e:	d056      	beq.n	800b8be <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b810:	e099      	b.n	800b946 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b812:	4b88      	ldr	r3, [pc, #544]	@ (800ba34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	f003 0320 	and.w	r3, r3, #32
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d02d      	beq.n	800b87a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b81e:	4b85      	ldr	r3, [pc, #532]	@ (800ba34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	08db      	lsrs	r3, r3, #3
 800b824:	f003 0303 	and.w	r3, r3, #3
 800b828:	4a83      	ldr	r2, [pc, #524]	@ (800ba38 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b82a:	fa22 f303 	lsr.w	r3, r2, r3
 800b82e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b830:	68bb      	ldr	r3, [r7, #8]
 800b832:	ee07 3a90 	vmov	s15, r3
 800b836:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b83a:	697b      	ldr	r3, [r7, #20]
 800b83c:	ee07 3a90 	vmov	s15, r3
 800b840:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b844:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b848:	4b7a      	ldr	r3, [pc, #488]	@ (800ba34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b84a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b84c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b850:	ee07 3a90 	vmov	s15, r3
 800b854:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b858:	ed97 6a03 	vldr	s12, [r7, #12]
 800b85c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800ba3c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b860:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b864:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b868:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b86c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b870:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b874:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b878:	e087      	b.n	800b98a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b87a:	697b      	ldr	r3, [r7, #20]
 800b87c:	ee07 3a90 	vmov	s15, r3
 800b880:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b884:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800ba40 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b888:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b88c:	4b69      	ldr	r3, [pc, #420]	@ (800ba34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b88e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b890:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b894:	ee07 3a90 	vmov	s15, r3
 800b898:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b89c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b8a0:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800ba3c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b8a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b8a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8ac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b8b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8b8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b8bc:	e065      	b.n	800b98a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b8be:	697b      	ldr	r3, [r7, #20]
 800b8c0:	ee07 3a90 	vmov	s15, r3
 800b8c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8c8:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800ba44 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b8cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b8d0:	4b58      	ldr	r3, [pc, #352]	@ (800ba34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b8d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b8d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8d8:	ee07 3a90 	vmov	s15, r3
 800b8dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8e0:	ed97 6a03 	vldr	s12, [r7, #12]
 800b8e4:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800ba3c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b8e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b8ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8f0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b8f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8fc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b900:	e043      	b.n	800b98a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b902:	697b      	ldr	r3, [r7, #20]
 800b904:	ee07 3a90 	vmov	s15, r3
 800b908:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b90c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800ba48 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b910:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b914:	4b47      	ldr	r3, [pc, #284]	@ (800ba34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b918:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b91c:	ee07 3a90 	vmov	s15, r3
 800b920:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b924:	ed97 6a03 	vldr	s12, [r7, #12]
 800b928:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800ba3c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b92c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b930:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b934:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b938:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b93c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b940:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b944:	e021      	b.n	800b98a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b946:	697b      	ldr	r3, [r7, #20]
 800b948:	ee07 3a90 	vmov	s15, r3
 800b94c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b950:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800ba40 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b954:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b958:	4b36      	ldr	r3, [pc, #216]	@ (800ba34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b95a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b95c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b960:	ee07 3a90 	vmov	s15, r3
 800b964:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b968:	ed97 6a03 	vldr	s12, [r7, #12]
 800b96c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800ba3c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b970:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b974:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b978:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b97c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b980:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b984:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b988:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b98a:	4b2a      	ldr	r3, [pc, #168]	@ (800ba34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b98c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b98e:	0a5b      	lsrs	r3, r3, #9
 800b990:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b994:	ee07 3a90 	vmov	s15, r3
 800b998:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b99c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b9a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b9a4:	edd7 6a07 	vldr	s13, [r7, #28]
 800b9a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b9ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b9b0:	ee17 2a90 	vmov	r2, s15
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b9b8:	4b1e      	ldr	r3, [pc, #120]	@ (800ba34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b9ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9bc:	0c1b      	lsrs	r3, r3, #16
 800b9be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b9c2:	ee07 3a90 	vmov	s15, r3
 800b9c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b9ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b9d2:	edd7 6a07 	vldr	s13, [r7, #28]
 800b9d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b9da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b9de:	ee17 2a90 	vmov	r2, s15
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b9e6:	4b13      	ldr	r3, [pc, #76]	@ (800ba34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b9e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9ea:	0e1b      	lsrs	r3, r3, #24
 800b9ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b9f0:	ee07 3a90 	vmov	s15, r3
 800b9f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b9fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ba00:	edd7 6a07 	vldr	s13, [r7, #28]
 800ba04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ba08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba0c:	ee17 2a90 	vmov	r2, s15
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800ba14:	e008      	b.n	800ba28 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	2200      	movs	r2, #0
 800ba1a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2200      	movs	r2, #0
 800ba20:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	2200      	movs	r2, #0
 800ba26:	609a      	str	r2, [r3, #8]
}
 800ba28:	bf00      	nop
 800ba2a:	3724      	adds	r7, #36	@ 0x24
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba32:	4770      	bx	lr
 800ba34:	58024400 	.word	0x58024400
 800ba38:	03d09000 	.word	0x03d09000
 800ba3c:	46000000 	.word	0x46000000
 800ba40:	4c742400 	.word	0x4c742400
 800ba44:	4a742400 	.word	0x4a742400
 800ba48:	4bbebc20 	.word	0x4bbebc20

0800ba4c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b084      	sub	sp, #16
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
 800ba54:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ba56:	2300      	movs	r3, #0
 800ba58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ba5a:	4b53      	ldr	r3, [pc, #332]	@ (800bba8 <RCCEx_PLL2_Config+0x15c>)
 800ba5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba5e:	f003 0303 	and.w	r3, r3, #3
 800ba62:	2b03      	cmp	r3, #3
 800ba64:	d101      	bne.n	800ba6a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ba66:	2301      	movs	r3, #1
 800ba68:	e099      	b.n	800bb9e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ba6a:	4b4f      	ldr	r3, [pc, #316]	@ (800bba8 <RCCEx_PLL2_Config+0x15c>)
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	4a4e      	ldr	r2, [pc, #312]	@ (800bba8 <RCCEx_PLL2_Config+0x15c>)
 800ba70:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ba74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ba76:	f7f7 fc89 	bl	800338c <HAL_GetTick>
 800ba7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ba7c:	e008      	b.n	800ba90 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ba7e:	f7f7 fc85 	bl	800338c <HAL_GetTick>
 800ba82:	4602      	mov	r2, r0
 800ba84:	68bb      	ldr	r3, [r7, #8]
 800ba86:	1ad3      	subs	r3, r2, r3
 800ba88:	2b02      	cmp	r3, #2
 800ba8a:	d901      	bls.n	800ba90 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ba8c:	2303      	movs	r3, #3
 800ba8e:	e086      	b.n	800bb9e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ba90:	4b45      	ldr	r3, [pc, #276]	@ (800bba8 <RCCEx_PLL2_Config+0x15c>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d1f0      	bne.n	800ba7e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ba9c:	4b42      	ldr	r3, [pc, #264]	@ (800bba8 <RCCEx_PLL2_Config+0x15c>)
 800ba9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800baa0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	031b      	lsls	r3, r3, #12
 800baaa:	493f      	ldr	r1, [pc, #252]	@ (800bba8 <RCCEx_PLL2_Config+0x15c>)
 800baac:	4313      	orrs	r3, r2
 800baae:	628b      	str	r3, [r1, #40]	@ 0x28
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	685b      	ldr	r3, [r3, #4]
 800bab4:	3b01      	subs	r3, #1
 800bab6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	689b      	ldr	r3, [r3, #8]
 800babe:	3b01      	subs	r3, #1
 800bac0:	025b      	lsls	r3, r3, #9
 800bac2:	b29b      	uxth	r3, r3
 800bac4:	431a      	orrs	r2, r3
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	68db      	ldr	r3, [r3, #12]
 800baca:	3b01      	subs	r3, #1
 800bacc:	041b      	lsls	r3, r3, #16
 800bace:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800bad2:	431a      	orrs	r2, r3
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	691b      	ldr	r3, [r3, #16]
 800bad8:	3b01      	subs	r3, #1
 800bada:	061b      	lsls	r3, r3, #24
 800badc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800bae0:	4931      	ldr	r1, [pc, #196]	@ (800bba8 <RCCEx_PLL2_Config+0x15c>)
 800bae2:	4313      	orrs	r3, r2
 800bae4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800bae6:	4b30      	ldr	r3, [pc, #192]	@ (800bba8 <RCCEx_PLL2_Config+0x15c>)
 800bae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800baea:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	695b      	ldr	r3, [r3, #20]
 800baf2:	492d      	ldr	r1, [pc, #180]	@ (800bba8 <RCCEx_PLL2_Config+0x15c>)
 800baf4:	4313      	orrs	r3, r2
 800baf6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800baf8:	4b2b      	ldr	r3, [pc, #172]	@ (800bba8 <RCCEx_PLL2_Config+0x15c>)
 800bafa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bafc:	f023 0220 	bic.w	r2, r3, #32
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	699b      	ldr	r3, [r3, #24]
 800bb04:	4928      	ldr	r1, [pc, #160]	@ (800bba8 <RCCEx_PLL2_Config+0x15c>)
 800bb06:	4313      	orrs	r3, r2
 800bb08:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800bb0a:	4b27      	ldr	r3, [pc, #156]	@ (800bba8 <RCCEx_PLL2_Config+0x15c>)
 800bb0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb0e:	4a26      	ldr	r2, [pc, #152]	@ (800bba8 <RCCEx_PLL2_Config+0x15c>)
 800bb10:	f023 0310 	bic.w	r3, r3, #16
 800bb14:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800bb16:	4b24      	ldr	r3, [pc, #144]	@ (800bba8 <RCCEx_PLL2_Config+0x15c>)
 800bb18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bb1a:	4b24      	ldr	r3, [pc, #144]	@ (800bbac <RCCEx_PLL2_Config+0x160>)
 800bb1c:	4013      	ands	r3, r2
 800bb1e:	687a      	ldr	r2, [r7, #4]
 800bb20:	69d2      	ldr	r2, [r2, #28]
 800bb22:	00d2      	lsls	r2, r2, #3
 800bb24:	4920      	ldr	r1, [pc, #128]	@ (800bba8 <RCCEx_PLL2_Config+0x15c>)
 800bb26:	4313      	orrs	r3, r2
 800bb28:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800bb2a:	4b1f      	ldr	r3, [pc, #124]	@ (800bba8 <RCCEx_PLL2_Config+0x15c>)
 800bb2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb2e:	4a1e      	ldr	r2, [pc, #120]	@ (800bba8 <RCCEx_PLL2_Config+0x15c>)
 800bb30:	f043 0310 	orr.w	r3, r3, #16
 800bb34:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d106      	bne.n	800bb4a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800bb3c:	4b1a      	ldr	r3, [pc, #104]	@ (800bba8 <RCCEx_PLL2_Config+0x15c>)
 800bb3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb40:	4a19      	ldr	r2, [pc, #100]	@ (800bba8 <RCCEx_PLL2_Config+0x15c>)
 800bb42:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bb46:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bb48:	e00f      	b.n	800bb6a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	2b01      	cmp	r3, #1
 800bb4e:	d106      	bne.n	800bb5e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800bb50:	4b15      	ldr	r3, [pc, #84]	@ (800bba8 <RCCEx_PLL2_Config+0x15c>)
 800bb52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb54:	4a14      	ldr	r2, [pc, #80]	@ (800bba8 <RCCEx_PLL2_Config+0x15c>)
 800bb56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bb5a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bb5c:	e005      	b.n	800bb6a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800bb5e:	4b12      	ldr	r3, [pc, #72]	@ (800bba8 <RCCEx_PLL2_Config+0x15c>)
 800bb60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb62:	4a11      	ldr	r2, [pc, #68]	@ (800bba8 <RCCEx_PLL2_Config+0x15c>)
 800bb64:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800bb68:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800bb6a:	4b0f      	ldr	r3, [pc, #60]	@ (800bba8 <RCCEx_PLL2_Config+0x15c>)
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	4a0e      	ldr	r2, [pc, #56]	@ (800bba8 <RCCEx_PLL2_Config+0x15c>)
 800bb70:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800bb74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bb76:	f7f7 fc09 	bl	800338c <HAL_GetTick>
 800bb7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bb7c:	e008      	b.n	800bb90 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bb7e:	f7f7 fc05 	bl	800338c <HAL_GetTick>
 800bb82:	4602      	mov	r2, r0
 800bb84:	68bb      	ldr	r3, [r7, #8]
 800bb86:	1ad3      	subs	r3, r2, r3
 800bb88:	2b02      	cmp	r3, #2
 800bb8a:	d901      	bls.n	800bb90 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bb8c:	2303      	movs	r3, #3
 800bb8e:	e006      	b.n	800bb9e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bb90:	4b05      	ldr	r3, [pc, #20]	@ (800bba8 <RCCEx_PLL2_Config+0x15c>)
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d0f0      	beq.n	800bb7e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800bb9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb9e:	4618      	mov	r0, r3
 800bba0:	3710      	adds	r7, #16
 800bba2:	46bd      	mov	sp, r7
 800bba4:	bd80      	pop	{r7, pc}
 800bba6:	bf00      	nop
 800bba8:	58024400 	.word	0x58024400
 800bbac:	ffff0007 	.word	0xffff0007

0800bbb0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b084      	sub	sp, #16
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
 800bbb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bbba:	2300      	movs	r3, #0
 800bbbc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bbbe:	4b53      	ldr	r3, [pc, #332]	@ (800bd0c <RCCEx_PLL3_Config+0x15c>)
 800bbc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbc2:	f003 0303 	and.w	r3, r3, #3
 800bbc6:	2b03      	cmp	r3, #3
 800bbc8:	d101      	bne.n	800bbce <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800bbca:	2301      	movs	r3, #1
 800bbcc:	e099      	b.n	800bd02 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800bbce:	4b4f      	ldr	r3, [pc, #316]	@ (800bd0c <RCCEx_PLL3_Config+0x15c>)
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	4a4e      	ldr	r2, [pc, #312]	@ (800bd0c <RCCEx_PLL3_Config+0x15c>)
 800bbd4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bbd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bbda:	f7f7 fbd7 	bl	800338c <HAL_GetTick>
 800bbde:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bbe0:	e008      	b.n	800bbf4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bbe2:	f7f7 fbd3 	bl	800338c <HAL_GetTick>
 800bbe6:	4602      	mov	r2, r0
 800bbe8:	68bb      	ldr	r3, [r7, #8]
 800bbea:	1ad3      	subs	r3, r2, r3
 800bbec:	2b02      	cmp	r3, #2
 800bbee:	d901      	bls.n	800bbf4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bbf0:	2303      	movs	r3, #3
 800bbf2:	e086      	b.n	800bd02 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bbf4:	4b45      	ldr	r3, [pc, #276]	@ (800bd0c <RCCEx_PLL3_Config+0x15c>)
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d1f0      	bne.n	800bbe2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800bc00:	4b42      	ldr	r3, [pc, #264]	@ (800bd0c <RCCEx_PLL3_Config+0x15c>)
 800bc02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc04:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	051b      	lsls	r3, r3, #20
 800bc0e:	493f      	ldr	r1, [pc, #252]	@ (800bd0c <RCCEx_PLL3_Config+0x15c>)
 800bc10:	4313      	orrs	r3, r2
 800bc12:	628b      	str	r3, [r1, #40]	@ 0x28
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	685b      	ldr	r3, [r3, #4]
 800bc18:	3b01      	subs	r3, #1
 800bc1a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	689b      	ldr	r3, [r3, #8]
 800bc22:	3b01      	subs	r3, #1
 800bc24:	025b      	lsls	r3, r3, #9
 800bc26:	b29b      	uxth	r3, r3
 800bc28:	431a      	orrs	r2, r3
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	68db      	ldr	r3, [r3, #12]
 800bc2e:	3b01      	subs	r3, #1
 800bc30:	041b      	lsls	r3, r3, #16
 800bc32:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800bc36:	431a      	orrs	r2, r3
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	691b      	ldr	r3, [r3, #16]
 800bc3c:	3b01      	subs	r3, #1
 800bc3e:	061b      	lsls	r3, r3, #24
 800bc40:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800bc44:	4931      	ldr	r1, [pc, #196]	@ (800bd0c <RCCEx_PLL3_Config+0x15c>)
 800bc46:	4313      	orrs	r3, r2
 800bc48:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800bc4a:	4b30      	ldr	r3, [pc, #192]	@ (800bd0c <RCCEx_PLL3_Config+0x15c>)
 800bc4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc4e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	695b      	ldr	r3, [r3, #20]
 800bc56:	492d      	ldr	r1, [pc, #180]	@ (800bd0c <RCCEx_PLL3_Config+0x15c>)
 800bc58:	4313      	orrs	r3, r2
 800bc5a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800bc5c:	4b2b      	ldr	r3, [pc, #172]	@ (800bd0c <RCCEx_PLL3_Config+0x15c>)
 800bc5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc60:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	699b      	ldr	r3, [r3, #24]
 800bc68:	4928      	ldr	r1, [pc, #160]	@ (800bd0c <RCCEx_PLL3_Config+0x15c>)
 800bc6a:	4313      	orrs	r3, r2
 800bc6c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800bc6e:	4b27      	ldr	r3, [pc, #156]	@ (800bd0c <RCCEx_PLL3_Config+0x15c>)
 800bc70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc72:	4a26      	ldr	r2, [pc, #152]	@ (800bd0c <RCCEx_PLL3_Config+0x15c>)
 800bc74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bc78:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800bc7a:	4b24      	ldr	r3, [pc, #144]	@ (800bd0c <RCCEx_PLL3_Config+0x15c>)
 800bc7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bc7e:	4b24      	ldr	r3, [pc, #144]	@ (800bd10 <RCCEx_PLL3_Config+0x160>)
 800bc80:	4013      	ands	r3, r2
 800bc82:	687a      	ldr	r2, [r7, #4]
 800bc84:	69d2      	ldr	r2, [r2, #28]
 800bc86:	00d2      	lsls	r2, r2, #3
 800bc88:	4920      	ldr	r1, [pc, #128]	@ (800bd0c <RCCEx_PLL3_Config+0x15c>)
 800bc8a:	4313      	orrs	r3, r2
 800bc8c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800bc8e:	4b1f      	ldr	r3, [pc, #124]	@ (800bd0c <RCCEx_PLL3_Config+0x15c>)
 800bc90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc92:	4a1e      	ldr	r2, [pc, #120]	@ (800bd0c <RCCEx_PLL3_Config+0x15c>)
 800bc94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bc98:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d106      	bne.n	800bcae <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800bca0:	4b1a      	ldr	r3, [pc, #104]	@ (800bd0c <RCCEx_PLL3_Config+0x15c>)
 800bca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bca4:	4a19      	ldr	r2, [pc, #100]	@ (800bd0c <RCCEx_PLL3_Config+0x15c>)
 800bca6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800bcaa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bcac:	e00f      	b.n	800bcce <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bcae:	683b      	ldr	r3, [r7, #0]
 800bcb0:	2b01      	cmp	r3, #1
 800bcb2:	d106      	bne.n	800bcc2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800bcb4:	4b15      	ldr	r3, [pc, #84]	@ (800bd0c <RCCEx_PLL3_Config+0x15c>)
 800bcb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcb8:	4a14      	ldr	r2, [pc, #80]	@ (800bd0c <RCCEx_PLL3_Config+0x15c>)
 800bcba:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800bcbe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bcc0:	e005      	b.n	800bcce <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800bcc2:	4b12      	ldr	r3, [pc, #72]	@ (800bd0c <RCCEx_PLL3_Config+0x15c>)
 800bcc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcc6:	4a11      	ldr	r2, [pc, #68]	@ (800bd0c <RCCEx_PLL3_Config+0x15c>)
 800bcc8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bccc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800bcce:	4b0f      	ldr	r3, [pc, #60]	@ (800bd0c <RCCEx_PLL3_Config+0x15c>)
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	4a0e      	ldr	r2, [pc, #56]	@ (800bd0c <RCCEx_PLL3_Config+0x15c>)
 800bcd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bcd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bcda:	f7f7 fb57 	bl	800338c <HAL_GetTick>
 800bcde:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bce0:	e008      	b.n	800bcf4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bce2:	f7f7 fb53 	bl	800338c <HAL_GetTick>
 800bce6:	4602      	mov	r2, r0
 800bce8:	68bb      	ldr	r3, [r7, #8]
 800bcea:	1ad3      	subs	r3, r2, r3
 800bcec:	2b02      	cmp	r3, #2
 800bcee:	d901      	bls.n	800bcf4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bcf0:	2303      	movs	r3, #3
 800bcf2:	e006      	b.n	800bd02 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bcf4:	4b05      	ldr	r3, [pc, #20]	@ (800bd0c <RCCEx_PLL3_Config+0x15c>)
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d0f0      	beq.n	800bce2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800bd00:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd02:	4618      	mov	r0, r3
 800bd04:	3710      	adds	r7, #16
 800bd06:	46bd      	mov	sp, r7
 800bd08:	bd80      	pop	{r7, pc}
 800bd0a:	bf00      	nop
 800bd0c:	58024400 	.word	0x58024400
 800bd10:	ffff0007 	.word	0xffff0007

0800bd14 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b084      	sub	sp, #16
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d101      	bne.n	800bd26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bd22:	2301      	movs	r3, #1
 800bd24:	e10f      	b.n	800bf46 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	2200      	movs	r2, #0
 800bd2a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	4a87      	ldr	r2, [pc, #540]	@ (800bf50 <HAL_SPI_Init+0x23c>)
 800bd32:	4293      	cmp	r3, r2
 800bd34:	d00f      	beq.n	800bd56 <HAL_SPI_Init+0x42>
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	4a86      	ldr	r2, [pc, #536]	@ (800bf54 <HAL_SPI_Init+0x240>)
 800bd3c:	4293      	cmp	r3, r2
 800bd3e:	d00a      	beq.n	800bd56 <HAL_SPI_Init+0x42>
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	4a84      	ldr	r2, [pc, #528]	@ (800bf58 <HAL_SPI_Init+0x244>)
 800bd46:	4293      	cmp	r3, r2
 800bd48:	d005      	beq.n	800bd56 <HAL_SPI_Init+0x42>
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	68db      	ldr	r3, [r3, #12]
 800bd4e:	2b0f      	cmp	r3, #15
 800bd50:	d901      	bls.n	800bd56 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800bd52:	2301      	movs	r3, #1
 800bd54:	e0f7      	b.n	800bf46 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800bd56:	6878      	ldr	r0, [r7, #4]
 800bd58:	f000 fce6 	bl	800c728 <SPI_GetPacketSize>
 800bd5c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	4a7b      	ldr	r2, [pc, #492]	@ (800bf50 <HAL_SPI_Init+0x23c>)
 800bd64:	4293      	cmp	r3, r2
 800bd66:	d00c      	beq.n	800bd82 <HAL_SPI_Init+0x6e>
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	4a79      	ldr	r2, [pc, #484]	@ (800bf54 <HAL_SPI_Init+0x240>)
 800bd6e:	4293      	cmp	r3, r2
 800bd70:	d007      	beq.n	800bd82 <HAL_SPI_Init+0x6e>
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	4a78      	ldr	r2, [pc, #480]	@ (800bf58 <HAL_SPI_Init+0x244>)
 800bd78:	4293      	cmp	r3, r2
 800bd7a:	d002      	beq.n	800bd82 <HAL_SPI_Init+0x6e>
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	2b08      	cmp	r3, #8
 800bd80:	d811      	bhi.n	800bda6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800bd86:	4a72      	ldr	r2, [pc, #456]	@ (800bf50 <HAL_SPI_Init+0x23c>)
 800bd88:	4293      	cmp	r3, r2
 800bd8a:	d009      	beq.n	800bda0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	4a70      	ldr	r2, [pc, #448]	@ (800bf54 <HAL_SPI_Init+0x240>)
 800bd92:	4293      	cmp	r3, r2
 800bd94:	d004      	beq.n	800bda0 <HAL_SPI_Init+0x8c>
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	4a6f      	ldr	r2, [pc, #444]	@ (800bf58 <HAL_SPI_Init+0x244>)
 800bd9c:	4293      	cmp	r3, r2
 800bd9e:	d104      	bne.n	800bdaa <HAL_SPI_Init+0x96>
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	2b10      	cmp	r3, #16
 800bda4:	d901      	bls.n	800bdaa <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800bda6:	2301      	movs	r3, #1
 800bda8:	e0cd      	b.n	800bf46 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bdb0:	b2db      	uxtb	r3, r3
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d106      	bne.n	800bdc4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2200      	movs	r2, #0
 800bdba:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bdbe:	6878      	ldr	r0, [r7, #4]
 800bdc0:	f7f5 fd7c 	bl	80018bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2202      	movs	r2, #2
 800bdc8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	681a      	ldr	r2, [r3, #0]
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	f022 0201 	bic.w	r2, r2, #1
 800bdda:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	689b      	ldr	r3, [r3, #8]
 800bde2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800bde6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	699b      	ldr	r3, [r3, #24]
 800bdec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bdf0:	d119      	bne.n	800be26 <HAL_SPI_Init+0x112>
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	685b      	ldr	r3, [r3, #4]
 800bdf6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bdfa:	d103      	bne.n	800be04 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800be00:	2b00      	cmp	r3, #0
 800be02:	d008      	beq.n	800be16 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d10c      	bne.n	800be26 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800be10:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800be14:	d107      	bne.n	800be26 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	681a      	ldr	r2, [r3, #0]
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800be24:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	685b      	ldr	r3, [r3, #4]
 800be2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d00f      	beq.n	800be52 <HAL_SPI_Init+0x13e>
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	68db      	ldr	r3, [r3, #12]
 800be36:	2b06      	cmp	r3, #6
 800be38:	d90b      	bls.n	800be52 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	430a      	orrs	r2, r1
 800be4e:	601a      	str	r2, [r3, #0]
 800be50:	e007      	b.n	800be62 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	681a      	ldr	r2, [r3, #0]
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800be60:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	69da      	ldr	r2, [r3, #28]
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be6a:	431a      	orrs	r2, r3
 800be6c:	68bb      	ldr	r3, [r7, #8]
 800be6e:	431a      	orrs	r2, r3
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be74:	ea42 0103 	orr.w	r1, r2, r3
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	68da      	ldr	r2, [r3, #12]
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	430a      	orrs	r2, r1
 800be82:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be8c:	431a      	orrs	r2, r3
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be92:	431a      	orrs	r2, r3
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	699b      	ldr	r3, [r3, #24]
 800be98:	431a      	orrs	r2, r3
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	691b      	ldr	r3, [r3, #16]
 800be9e:	431a      	orrs	r2, r3
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	695b      	ldr	r3, [r3, #20]
 800bea4:	431a      	orrs	r2, r3
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	6a1b      	ldr	r3, [r3, #32]
 800beaa:	431a      	orrs	r2, r3
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	685b      	ldr	r3, [r3, #4]
 800beb0:	431a      	orrs	r2, r3
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800beb6:	431a      	orrs	r2, r3
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	689b      	ldr	r3, [r3, #8]
 800bebc:	431a      	orrs	r2, r3
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bec2:	ea42 0103 	orr.w	r1, r2, r3
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	430a      	orrs	r2, r1
 800bed0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	685b      	ldr	r3, [r3, #4]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d113      	bne.n	800bf02 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	689b      	ldr	r3, [r3, #8]
 800bee0:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800beec:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	689b      	ldr	r3, [r3, #8]
 800bef4:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800bf00:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	f022 0201 	bic.w	r2, r2, #1
 800bf10:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	685b      	ldr	r3, [r3, #4]
 800bf16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d00a      	beq.n	800bf34 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	68db      	ldr	r3, [r3, #12]
 800bf24:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	430a      	orrs	r2, r1
 800bf32:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2200      	movs	r2, #0
 800bf38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2201      	movs	r2, #1
 800bf40:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800bf44:	2300      	movs	r3, #0
}
 800bf46:	4618      	mov	r0, r3
 800bf48:	3710      	adds	r7, #16
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bd80      	pop	{r7, pc}
 800bf4e:	bf00      	nop
 800bf50:	40013000 	.word	0x40013000
 800bf54:	40003800 	.word	0x40003800
 800bf58:	40003c00 	.word	0x40003c00

0800bf5c <HAL_SPI_Receive_IT>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800bf5c:	b480      	push	{r7}
 800bf5e:	b085      	sub	sp, #20
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	60f8      	str	r0, [r7, #12]
 800bf64:	60b9      	str	r1, [r7, #8]
 800bf66:	4613      	mov	r3, r2
 800bf68:	80fb      	strh	r3, [r7, #6]
  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bf70:	b2db      	uxtb	r3, r3
 800bf72:	2b01      	cmp	r3, #1
 800bf74:	d001      	beq.n	800bf7a <HAL_SPI_Receive_IT+0x1e>
  {
    return HAL_BUSY;
 800bf76:	2302      	movs	r3, #2
 800bf78:	e08b      	b.n	800c092 <HAL_SPI_Receive_IT+0x136>
  }

  if ((pData == NULL) || (Size == 0UL))
 800bf7a:	68bb      	ldr	r3, [r7, #8]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d002      	beq.n	800bf86 <HAL_SPI_Receive_IT+0x2a>
 800bf80:	88fb      	ldrh	r3, [r7, #6]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d101      	bne.n	800bf8a <HAL_SPI_Receive_IT+0x2e>
  {
    return HAL_ERROR;
 800bf86:	2301      	movs	r3, #1
 800bf88:	e083      	b.n	800c092 <HAL_SPI_Receive_IT+0x136>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800bf90:	2b01      	cmp	r3, #1
 800bf92:	d101      	bne.n	800bf98 <HAL_SPI_Receive_IT+0x3c>
 800bf94:	2302      	movs	r3, #2
 800bf96:	e07c      	b.n	800c092 <HAL_SPI_Receive_IT+0x136>
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	2201      	movs	r2, #1
 800bf9c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	2204      	movs	r2, #4
 800bfa4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	2200      	movs	r2, #0
 800bfac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	68ba      	ldr	r2, [r7, #8]
 800bfb4:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	88fa      	ldrh	r2, [r7, #6]
 800bfba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	88fa      	ldrh	r2, [r7, #6]
 800bfc2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	2200      	movs	r2, #0
 800bfca:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	2200      	movs	r2, #0
 800bfd0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxISR       = NULL;
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	2200      	movs	r2, #0
 800bfe0:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->Reload.pRxBuffPtr  = NULL;
  hspi->Reload.RxXferSize  = NULL;
#endif /* USE_SPI_RELOAD_TRANSFER */

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	68db      	ldr	r3, [r3, #12]
 800bfe6:	2b0f      	cmp	r3, #15
 800bfe8:	d903      	bls.n	800bff2 <HAL_SPI_Receive_IT+0x96>
  {
    hspi->RxISR = SPI_RxISR_32BIT;
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	4a2c      	ldr	r2, [pc, #176]	@ (800c0a0 <HAL_SPI_Receive_IT+0x144>)
 800bfee:	671a      	str	r2, [r3, #112]	@ 0x70
 800bff0:	e00a      	b.n	800c008 <HAL_SPI_Receive_IT+0xac>
  }
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	68db      	ldr	r3, [r3, #12]
 800bff6:	2b07      	cmp	r3, #7
 800bff8:	d903      	bls.n	800c002 <HAL_SPI_Receive_IT+0xa6>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	4a29      	ldr	r2, [pc, #164]	@ (800c0a4 <HAL_SPI_Receive_IT+0x148>)
 800bffe:	671a      	str	r2, [r3, #112]	@ 0x70
 800c000:	e002      	b.n	800c008 <HAL_SPI_Receive_IT+0xac>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	4a28      	ldr	r2, [pc, #160]	@ (800c0a8 <HAL_SPI_Receive_IT+0x14c>)
 800c006:	671a      	str	r2, [r3, #112]	@ 0x70
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	689b      	ldr	r3, [r3, #8]
 800c00c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800c010:	d108      	bne.n	800c024 <HAL_SPI_Receive_IT+0xc8>
  {
    SPI_1LINE_RX(hspi);
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	681a      	ldr	r2, [r3, #0]
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c020:	601a      	str	r2, [r3, #0]
 800c022:	e009      	b.n	800c038 <HAL_SPI_Receive_IT+0xdc>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	68db      	ldr	r3, [r3, #12]
 800c02a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800c036:	60da      	str	r2, [r3, #12]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	685a      	ldr	r2, [r3, #4]
 800c03e:	4b1b      	ldr	r3, [pc, #108]	@ (800c0ac <HAL_SPI_Receive_IT+0x150>)
 800c040:	4013      	ands	r3, r2
 800c042:	88f9      	ldrh	r1, [r7, #6]
 800c044:	68fa      	ldr	r2, [r7, #12]
 800c046:	6812      	ldr	r2, [r2, #0]
 800c048:	430b      	orrs	r3, r1
 800c04a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	681a      	ldr	r2, [r3, #0]
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	f042 0201 	orr.w	r2, r2, #1
 800c05a:	601a      	str	r2, [r3, #0]

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	2200      	movs	r2, #0
 800c060:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Enable EOT, RXP, OVR, FRE, MODF and TSERF interrupts */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF | SPI_IT_TSERF));
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	6919      	ldr	r1, [r3, #16]
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	681a      	ldr	r2, [r3, #0]
 800c06e:	f240 7349 	movw	r3, #1865	@ 0x749
 800c072:	430b      	orrs	r3, r1
 800c074:	6113      	str	r3, [r2, #16]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	685b      	ldr	r3, [r3, #4]
 800c07a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c07e:	d107      	bne.n	800c090 <HAL_SPI_Receive_IT+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	681a      	ldr	r2, [r3, #0]
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c08e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800c090:	2300      	movs	r3, #0
}
 800c092:	4618      	mov	r0, r3
 800c094:	3714      	adds	r7, #20
 800c096:	46bd      	mov	sp, r7
 800c098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09c:	4770      	bx	lr
 800c09e:	bf00      	nop
 800c0a0:	0800c58f 	.word	0x0800c58f
 800c0a4:	0800c52f 	.word	0x0800c52f
 800c0a8:	0800c4d1 	.word	0x0800c4d1
 800c0ac:	ffff0000 	.word	0xffff0000

0800c0b0 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b08a      	sub	sp, #40	@ 0x28
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	691b      	ldr	r3, [r3, #16]
 800c0be:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	695b      	ldr	r3, [r3, #20]
 800c0c6:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800c0c8:	6a3a      	ldr	r2, [r7, #32]
 800c0ca:	69fb      	ldr	r3, [r7, #28]
 800c0cc:	4013      	ands	r3, r2
 800c0ce:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	689b      	ldr	r3, [r3, #8]
 800c0d6:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800c0d8:	2300      	movs	r3, #0
 800c0da:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c0e2:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	3330      	adds	r3, #48	@ 0x30
 800c0ea:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800c0ec:	69fb      	ldr	r3, [r7, #28]
 800c0ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d010      	beq.n	800c118 <HAL_SPI_IRQHandler+0x68>
 800c0f6:	6a3b      	ldr	r3, [r7, #32]
 800c0f8:	f003 0308 	and.w	r3, r3, #8
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d00b      	beq.n	800c118 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	699a      	ldr	r2, [r3, #24]
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c10e:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800c110:	6878      	ldr	r0, [r7, #4]
 800c112:	f000 f9b9 	bl	800c488 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800c116:	e192      	b.n	800c43e <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800c118:	69bb      	ldr	r3, [r7, #24]
 800c11a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d113      	bne.n	800c14a <HAL_SPI_IRQHandler+0x9a>
 800c122:	69bb      	ldr	r3, [r7, #24]
 800c124:	f003 0320 	and.w	r3, r3, #32
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d10e      	bne.n	800c14a <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800c12c:	69bb      	ldr	r3, [r7, #24]
 800c12e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800c132:	2b00      	cmp	r3, #0
 800c134:	d009      	beq.n	800c14a <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c13a:	6878      	ldr	r0, [r7, #4]
 800c13c:	4798      	blx	r3
    hspi->RxISR(hspi);
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c142:	6878      	ldr	r0, [r7, #4]
 800c144:	4798      	blx	r3
    handled = 1UL;
 800c146:	2301      	movs	r3, #1
 800c148:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800c14a:	69bb      	ldr	r3, [r7, #24]
 800c14c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c150:	2b00      	cmp	r3, #0
 800c152:	d10f      	bne.n	800c174 <HAL_SPI_IRQHandler+0xc4>
 800c154:	69bb      	ldr	r3, [r7, #24]
 800c156:	f003 0301 	and.w	r3, r3, #1
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d00a      	beq.n	800c174 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800c15e:	69bb      	ldr	r3, [r7, #24]
 800c160:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800c164:	2b00      	cmp	r3, #0
 800c166:	d105      	bne.n	800c174 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c16c:	6878      	ldr	r0, [r7, #4]
 800c16e:	4798      	blx	r3
    handled = 1UL;
 800c170:	2301      	movs	r3, #1
 800c172:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800c174:	69bb      	ldr	r3, [r7, #24]
 800c176:	f003 0320 	and.w	r3, r3, #32
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d10f      	bne.n	800c19e <HAL_SPI_IRQHandler+0xee>
 800c17e:	69bb      	ldr	r3, [r7, #24]
 800c180:	f003 0302 	and.w	r3, r3, #2
 800c184:	2b00      	cmp	r3, #0
 800c186:	d00a      	beq.n	800c19e <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800c188:	69bb      	ldr	r3, [r7, #24]
 800c18a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d105      	bne.n	800c19e <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c196:	6878      	ldr	r0, [r7, #4]
 800c198:	4798      	blx	r3
    handled = 1UL;
 800c19a:	2301      	movs	r3, #1
 800c19c:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800c19e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	f040 8147 	bne.w	800c434 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800c1a6:	69bb      	ldr	r3, [r7, #24]
 800c1a8:	f003 0308 	and.w	r3, r3, #8
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	f000 808b 	beq.w	800c2c8 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	699a      	ldr	r2, [r3, #24]
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	f042 0208 	orr.w	r2, r2, #8
 800c1c0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	699a      	ldr	r2, [r3, #24]
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	f042 0210 	orr.w	r2, r2, #16
 800c1d0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	699a      	ldr	r2, [r3, #24]
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c1e0:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	691a      	ldr	r2, [r3, #16]
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	f022 0208 	bic.w	r2, r2, #8
 800c1f0:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	689b      	ldr	r3, [r3, #8]
 800c1f8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d13d      	bne.n	800c27c <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800c200:	e036      	b.n	800c270 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	68db      	ldr	r3, [r3, #12]
 800c206:	2b0f      	cmp	r3, #15
 800c208:	d90b      	bls.n	800c222 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681a      	ldr	r2, [r3, #0]
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c212:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800c214:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c21a:	1d1a      	adds	r2, r3, #4
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	665a      	str	r2, [r3, #100]	@ 0x64
 800c220:	e01d      	b.n	800c25e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	68db      	ldr	r3, [r3, #12]
 800c226:	2b07      	cmp	r3, #7
 800c228:	d90b      	bls.n	800c242 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c22e:	68fa      	ldr	r2, [r7, #12]
 800c230:	8812      	ldrh	r2, [r2, #0]
 800c232:	b292      	uxth	r2, r2
 800c234:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c23a:	1c9a      	adds	r2, r3, #2
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	665a      	str	r2, [r3, #100]	@ 0x64
 800c240:	e00d      	b.n	800c25e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c24e:	7812      	ldrb	r2, [r2, #0]
 800c250:	b2d2      	uxtb	r2, r2
 800c252:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c258:	1c5a      	adds	r2, r3, #1
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c264:	b29b      	uxth	r3, r3
 800c266:	3b01      	subs	r3, #1
 800c268:	b29a      	uxth	r2, r3
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c276:	b29b      	uxth	r3, r3
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d1c2      	bne.n	800c202 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800c27c:	6878      	ldr	r0, [r7, #4]
 800c27e:	f000 f9b3 	bl	800c5e8 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	2201      	movs	r2, #1
 800c286:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c290:	2b00      	cmp	r3, #0
 800c292:	d003      	beq.n	800c29c <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800c294:	6878      	ldr	r0, [r7, #4]
 800c296:	f000 f8ed 	bl	800c474 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800c29a:	e0d0      	b.n	800c43e <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800c29c:	7cfb      	ldrb	r3, [r7, #19]
 800c29e:	2b05      	cmp	r3, #5
 800c2a0:	d103      	bne.n	800c2aa <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800c2a2:	6878      	ldr	r0, [r7, #4]
 800c2a4:	f000 f8dc 	bl	800c460 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800c2a8:	e0c6      	b.n	800c438 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800c2aa:	7cfb      	ldrb	r3, [r7, #19]
 800c2ac:	2b04      	cmp	r3, #4
 800c2ae:	d103      	bne.n	800c2b8 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800c2b0:	6878      	ldr	r0, [r7, #4]
 800c2b2:	f7f6 fc03 	bl	8002abc <HAL_SPI_RxCpltCallback>
    return;
 800c2b6:	e0bf      	b.n	800c438 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800c2b8:	7cfb      	ldrb	r3, [r7, #19]
 800c2ba:	2b03      	cmp	r3, #3
 800c2bc:	f040 80bc 	bne.w	800c438 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800c2c0:	6878      	ldr	r0, [r7, #4]
 800c2c2:	f000 f8c3 	bl	800c44c <HAL_SPI_TxCpltCallback>
    return;
 800c2c6:	e0b7      	b.n	800c438 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800c2c8:	69bb      	ldr	r3, [r7, #24]
 800c2ca:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	f000 80b5 	beq.w	800c43e <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800c2d4:	69bb      	ldr	r3, [r7, #24]
 800c2d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d00f      	beq.n	800c2fe <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c2e4:	f043 0204 	orr.w	r2, r3, #4
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	699a      	ldr	r2, [r3, #24]
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c2fc:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800c2fe:	69bb      	ldr	r3, [r7, #24]
 800c300:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c304:	2b00      	cmp	r3, #0
 800c306:	d00f      	beq.n	800c328 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c30e:	f043 0201 	orr.w	r2, r3, #1
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	699a      	ldr	r2, [r3, #24]
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c326:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800c328:	69bb      	ldr	r3, [r7, #24]
 800c32a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d00f      	beq.n	800c352 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c338:	f043 0208 	orr.w	r2, r3, #8
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	699a      	ldr	r2, [r3, #24]
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c350:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800c352:	69bb      	ldr	r3, [r7, #24]
 800c354:	f003 0320 	and.w	r3, r3, #32
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d00f      	beq.n	800c37c <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c362:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	699a      	ldr	r2, [r3, #24]
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	f042 0220 	orr.w	r2, r2, #32
 800c37a:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c382:	2b00      	cmp	r3, #0
 800c384:	d05a      	beq.n	800c43c <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	681a      	ldr	r2, [r3, #0]
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	f022 0201 	bic.w	r2, r2, #1
 800c394:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	6919      	ldr	r1, [r3, #16]
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681a      	ldr	r2, [r3, #0]
 800c3a0:	4b28      	ldr	r3, [pc, #160]	@ (800c444 <HAL_SPI_IRQHandler+0x394>)
 800c3a2:	400b      	ands	r3, r1
 800c3a4:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800c3a6:	697b      	ldr	r3, [r7, #20]
 800c3a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800c3ac:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800c3b0:	d138      	bne.n	800c424 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	689a      	ldr	r2, [r3, #8]
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800c3c0:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d013      	beq.n	800c3f2 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c3ce:	4a1e      	ldr	r2, [pc, #120]	@ (800c448 <HAL_SPI_IRQHandler+0x398>)
 800c3d0:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	f7f9 ff84 	bl	80062e4 <HAL_DMA_Abort_IT>
 800c3dc:	4603      	mov	r3, r0
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d007      	beq.n	800c3f2 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c3e8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d020      	beq.n	800c43c <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c3fe:	4a12      	ldr	r2, [pc, #72]	@ (800c448 <HAL_SPI_IRQHandler+0x398>)
 800c400:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c406:	4618      	mov	r0, r3
 800c408:	f7f9 ff6c 	bl	80062e4 <HAL_DMA_Abort_IT>
 800c40c:	4603      	mov	r3, r0
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d014      	beq.n	800c43c <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c418:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800c422:	e00b      	b.n	800c43c <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	2201      	movs	r2, #1
 800c428:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 800c42c:	6878      	ldr	r0, [r7, #4]
 800c42e:	f000 f821 	bl	800c474 <HAL_SPI_ErrorCallback>
    return;
 800c432:	e003      	b.n	800c43c <HAL_SPI_IRQHandler+0x38c>
    return;
 800c434:	bf00      	nop
 800c436:	e002      	b.n	800c43e <HAL_SPI_IRQHandler+0x38e>
    return;
 800c438:	bf00      	nop
 800c43a:	e000      	b.n	800c43e <HAL_SPI_IRQHandler+0x38e>
    return;
 800c43c:	bf00      	nop
  }
}
 800c43e:	3728      	adds	r7, #40	@ 0x28
 800c440:	46bd      	mov	sp, r7
 800c442:	bd80      	pop	{r7, pc}
 800c444:	fffffc94 	.word	0xfffffc94
 800c448:	0800c49d 	.word	0x0800c49d

0800c44c <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800c44c:	b480      	push	{r7}
 800c44e:	b083      	sub	sp, #12
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800c454:	bf00      	nop
 800c456:	370c      	adds	r7, #12
 800c458:	46bd      	mov	sp, r7
 800c45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45e:	4770      	bx	lr

0800c460 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800c460:	b480      	push	{r7}
 800c462:	b083      	sub	sp, #12
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800c468:	bf00      	nop
 800c46a:	370c      	adds	r7, #12
 800c46c:	46bd      	mov	sp, r7
 800c46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c472:	4770      	bx	lr

0800c474 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800c474:	b480      	push	{r7}
 800c476:	b083      	sub	sp, #12
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800c47c:	bf00      	nop
 800c47e:	370c      	adds	r7, #12
 800c480:	46bd      	mov	sp, r7
 800c482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c486:	4770      	bx	lr

0800c488 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800c488:	b480      	push	{r7}
 800c48a:	b083      	sub	sp, #12
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800c490:	bf00      	nop
 800c492:	370c      	adds	r7, #12
 800c494:	46bd      	mov	sp, r7
 800c496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49a:	4770      	bx	lr

0800c49c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b084      	sub	sp, #16
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c4a8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	2201      	movs	r2, #1
 800c4be:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800c4c2:	68f8      	ldr	r0, [r7, #12]
 800c4c4:	f7ff ffd6 	bl	800c474 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c4c8:	bf00      	nop
 800c4ca:	3710      	adds	r7, #16
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	bd80      	pop	{r7, pc}

0800c4d0 <SPI_RxISR_8BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(SPI_HandleTypeDef *hspi)
{
 800c4d0:	b480      	push	{r7}
 800c4d2:	b083      	sub	sp, #12
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
  /* Receive data in 8 Bit mode */
  *((uint8_t *)hspi->pRxBuffPtr) = (*(__IO uint8_t *)&hspi->Instance->RXDR);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c4e4:	7812      	ldrb	r2, [r2, #0]
 800c4e6:	b2d2      	uxtb	r2, r2
 800c4e8:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint8_t);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c4ee:	1c5a      	adds	r2, r3, #1
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount--;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c4fa:	b29b      	uxth	r3, r3
 800c4fc:	3b01      	subs	r3, #1
 800c4fe:	b29a      	uxth	r2, r3
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c50c:	b29b      	uxth	r3, r3
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d107      	bne.n	800c522 <SPI_RxISR_8BIT+0x52>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	691a      	ldr	r2, [r3, #16]
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	f022 0201 	bic.w	r2, r2, #1
 800c520:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800c522:	bf00      	nop
 800c524:	370c      	adds	r7, #12
 800c526:	46bd      	mov	sp, r7
 800c528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52c:	4770      	bx	lr

0800c52e <SPI_RxISR_16BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(SPI_HandleTypeDef *hspi)
{
 800c52e:	b480      	push	{r7}
 800c530:	b085      	sub	sp, #20
 800c532:	af00      	add	r7, sp, #0
 800c534:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	3330      	adds	r3, #48	@ 0x30
 800c53c:	60fb      	str	r3, [r7, #12]

  *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c542:	68fa      	ldr	r2, [r7, #12]
 800c544:	8812      	ldrh	r2, [r2, #0]
 800c546:	b292      	uxth	r2, r2
 800c548:	801a      	strh	r2, [r3, #0]
#else
  *((uint16_t *)hspi->pRxBuffPtr) = (*(__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c54e:	1c9a      	adds	r2, r3, #2
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount--;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c55a:	b29b      	uxth	r3, r3
 800c55c:	3b01      	subs	r3, #1
 800c55e:	b29a      	uxth	r2, r3
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c56c:	b29b      	uxth	r3, r3
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d107      	bne.n	800c582 <SPI_RxISR_16BIT+0x54>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	691a      	ldr	r2, [r3, #16]
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	f022 0201 	bic.w	r2, r2, #1
 800c580:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800c582:	bf00      	nop
 800c584:	3714      	adds	r7, #20
 800c586:	46bd      	mov	sp, r7
 800c588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58c:	4770      	bx	lr

0800c58e <SPI_RxISR_32BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_32BIT(SPI_HandleTypeDef *hspi)
{
 800c58e:	b480      	push	{r7}
 800c590:	b083      	sub	sp, #12
 800c592:	af00      	add	r7, sp, #0
 800c594:	6078      	str	r0, [r7, #4]
  /* Receive data in 32 Bit mode */
  *((uint32_t *)hspi->pRxBuffPtr) = (*(__IO uint32_t *)&hspi->Instance->RXDR);
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	681a      	ldr	r2, [r3, #0]
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c59e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800c5a0:	601a      	str	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint32_t);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c5a6:	1d1a      	adds	r2, r3, #4
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount--;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c5b2:	b29b      	uxth	r3, r3
 800c5b4:	3b01      	subs	r3, #1
 800c5b6:	b29a      	uxth	r2, r3
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c5c4:	b29b      	uxth	r3, r3
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d107      	bne.n	800c5da <SPI_RxISR_32BIT+0x4c>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	691a      	ldr	r2, [r3, #16]
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	f022 0201 	bic.w	r2, r2, #1
 800c5d8:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 800c5da:	bf00      	nop
 800c5dc:	370c      	adds	r7, #12
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e4:	4770      	bx	lr
	...

0800c5e8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800c5e8:	b480      	push	{r7}
 800c5ea:	b085      	sub	sp, #20
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	695b      	ldr	r3, [r3, #20]
 800c5f6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	699a      	ldr	r2, [r3, #24]
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	f042 0208 	orr.w	r2, r2, #8
 800c606:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	699a      	ldr	r2, [r3, #24]
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	f042 0210 	orr.w	r2, r2, #16
 800c616:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	681a      	ldr	r2, [r3, #0]
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	f022 0201 	bic.w	r2, r2, #1
 800c626:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	6919      	ldr	r1, [r3, #16]
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	681a      	ldr	r2, [r3, #0]
 800c632:	4b3c      	ldr	r3, [pc, #240]	@ (800c724 <SPI_CloseTransfer+0x13c>)
 800c634:	400b      	ands	r3, r1
 800c636:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	689a      	ldr	r2, [r3, #8]
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800c646:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c64e:	b2db      	uxtb	r3, r3
 800c650:	2b04      	cmp	r3, #4
 800c652:	d014      	beq.n	800c67e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	f003 0320 	and.w	r3, r3, #32
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d00f      	beq.n	800c67e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c664:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	699a      	ldr	r2, [r3, #24]
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	f042 0220 	orr.w	r2, r2, #32
 800c67c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c684:	b2db      	uxtb	r3, r3
 800c686:	2b03      	cmp	r3, #3
 800c688:	d014      	beq.n	800c6b4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c690:	2b00      	cmp	r3, #0
 800c692:	d00f      	beq.n	800c6b4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c69a:	f043 0204 	orr.w	r2, r3, #4
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	699a      	ldr	r2, [r3, #24]
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c6b2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d00f      	beq.n	800c6de <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c6c4:	f043 0201 	orr.w	r2, r3, #1
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	699a      	ldr	r2, [r3, #24]
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c6dc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d00f      	beq.n	800c708 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c6ee:	f043 0208 	orr.w	r2, r3, #8
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	699a      	ldr	r2, [r3, #24]
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c706:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	2200      	movs	r2, #0
 800c70c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2200      	movs	r2, #0
 800c714:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800c718:	bf00      	nop
 800c71a:	3714      	adds	r7, #20
 800c71c:	46bd      	mov	sp, r7
 800c71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c722:	4770      	bx	lr
 800c724:	fffffc90 	.word	0xfffffc90

0800c728 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800c728:	b480      	push	{r7}
 800c72a:	b085      	sub	sp, #20
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c734:	095b      	lsrs	r3, r3, #5
 800c736:	3301      	adds	r3, #1
 800c738:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	68db      	ldr	r3, [r3, #12]
 800c73e:	3301      	adds	r3, #1
 800c740:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c742:	68bb      	ldr	r3, [r7, #8]
 800c744:	3307      	adds	r3, #7
 800c746:	08db      	lsrs	r3, r3, #3
 800c748:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c74a:	68bb      	ldr	r3, [r7, #8]
 800c74c:	68fa      	ldr	r2, [r7, #12]
 800c74e:	fb02 f303 	mul.w	r3, r2, r3
}
 800c752:	4618      	mov	r0, r3
 800c754:	3714      	adds	r7, #20
 800c756:	46bd      	mov	sp, r7
 800c758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75c:	4770      	bx	lr

0800c75e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c75e:	b580      	push	{r7, lr}
 800c760:	b082      	sub	sp, #8
 800c762:	af00      	add	r7, sp, #0
 800c764:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d101      	bne.n	800c770 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c76c:	2301      	movs	r3, #1
 800c76e:	e049      	b.n	800c804 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c776:	b2db      	uxtb	r3, r3
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d106      	bne.n	800c78a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	2200      	movs	r2, #0
 800c780:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c784:	6878      	ldr	r0, [r7, #4]
 800c786:	f7f5 f92f 	bl	80019e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	2202      	movs	r2, #2
 800c78e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681a      	ldr	r2, [r3, #0]
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	3304      	adds	r3, #4
 800c79a:	4619      	mov	r1, r3
 800c79c:	4610      	mov	r0, r2
 800c79e:	f000 fad5 	bl	800cd4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	2201      	movs	r2, #1
 800c7a6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	2201      	movs	r2, #1
 800c7ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	2201      	movs	r2, #1
 800c7b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	2201      	movs	r2, #1
 800c7be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	2201      	movs	r2, #1
 800c7c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	2201      	movs	r2, #1
 800c7ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	2201      	movs	r2, #1
 800c7d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	2201      	movs	r2, #1
 800c7de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	2201      	movs	r2, #1
 800c7e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	2201      	movs	r2, #1
 800c7ee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	2201      	movs	r2, #1
 800c7f6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	2201      	movs	r2, #1
 800c7fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c802:	2300      	movs	r3, #0
}
 800c804:	4618      	mov	r0, r3
 800c806:	3708      	adds	r7, #8
 800c808:	46bd      	mov	sp, r7
 800c80a:	bd80      	pop	{r7, pc}

0800c80c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c80c:	b480      	push	{r7}
 800c80e:	b085      	sub	sp, #20
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c81a:	b2db      	uxtb	r3, r3
 800c81c:	2b01      	cmp	r3, #1
 800c81e:	d001      	beq.n	800c824 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c820:	2301      	movs	r3, #1
 800c822:	e054      	b.n	800c8ce <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	2202      	movs	r2, #2
 800c828:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	68da      	ldr	r2, [r3, #12]
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	f042 0201 	orr.w	r2, r2, #1
 800c83a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	4a26      	ldr	r2, [pc, #152]	@ (800c8dc <HAL_TIM_Base_Start_IT+0xd0>)
 800c842:	4293      	cmp	r3, r2
 800c844:	d022      	beq.n	800c88c <HAL_TIM_Base_Start_IT+0x80>
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c84e:	d01d      	beq.n	800c88c <HAL_TIM_Base_Start_IT+0x80>
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	4a22      	ldr	r2, [pc, #136]	@ (800c8e0 <HAL_TIM_Base_Start_IT+0xd4>)
 800c856:	4293      	cmp	r3, r2
 800c858:	d018      	beq.n	800c88c <HAL_TIM_Base_Start_IT+0x80>
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	4a21      	ldr	r2, [pc, #132]	@ (800c8e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800c860:	4293      	cmp	r3, r2
 800c862:	d013      	beq.n	800c88c <HAL_TIM_Base_Start_IT+0x80>
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	4a1f      	ldr	r2, [pc, #124]	@ (800c8e8 <HAL_TIM_Base_Start_IT+0xdc>)
 800c86a:	4293      	cmp	r3, r2
 800c86c:	d00e      	beq.n	800c88c <HAL_TIM_Base_Start_IT+0x80>
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	4a1e      	ldr	r2, [pc, #120]	@ (800c8ec <HAL_TIM_Base_Start_IT+0xe0>)
 800c874:	4293      	cmp	r3, r2
 800c876:	d009      	beq.n	800c88c <HAL_TIM_Base_Start_IT+0x80>
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	4a1c      	ldr	r2, [pc, #112]	@ (800c8f0 <HAL_TIM_Base_Start_IT+0xe4>)
 800c87e:	4293      	cmp	r3, r2
 800c880:	d004      	beq.n	800c88c <HAL_TIM_Base_Start_IT+0x80>
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	4a1b      	ldr	r2, [pc, #108]	@ (800c8f4 <HAL_TIM_Base_Start_IT+0xe8>)
 800c888:	4293      	cmp	r3, r2
 800c88a:	d115      	bne.n	800c8b8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	689a      	ldr	r2, [r3, #8]
 800c892:	4b19      	ldr	r3, [pc, #100]	@ (800c8f8 <HAL_TIM_Base_Start_IT+0xec>)
 800c894:	4013      	ands	r3, r2
 800c896:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	2b06      	cmp	r3, #6
 800c89c:	d015      	beq.n	800c8ca <HAL_TIM_Base_Start_IT+0xbe>
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c8a4:	d011      	beq.n	800c8ca <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	681a      	ldr	r2, [r3, #0]
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	f042 0201 	orr.w	r2, r2, #1
 800c8b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c8b6:	e008      	b.n	800c8ca <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	681a      	ldr	r2, [r3, #0]
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	f042 0201 	orr.w	r2, r2, #1
 800c8c6:	601a      	str	r2, [r3, #0]
 800c8c8:	e000      	b.n	800c8cc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c8ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c8cc:	2300      	movs	r3, #0
}
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	3714      	adds	r7, #20
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d8:	4770      	bx	lr
 800c8da:	bf00      	nop
 800c8dc:	40010000 	.word	0x40010000
 800c8e0:	40000400 	.word	0x40000400
 800c8e4:	40000800 	.word	0x40000800
 800c8e8:	40000c00 	.word	0x40000c00
 800c8ec:	40010400 	.word	0x40010400
 800c8f0:	40001800 	.word	0x40001800
 800c8f4:	40014000 	.word	0x40014000
 800c8f8:	00010007 	.word	0x00010007

0800c8fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b084      	sub	sp, #16
 800c900:	af00      	add	r7, sp, #0
 800c902:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	68db      	ldr	r3, [r3, #12]
 800c90a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	691b      	ldr	r3, [r3, #16]
 800c912:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c914:	68bb      	ldr	r3, [r7, #8]
 800c916:	f003 0302 	and.w	r3, r3, #2
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d020      	beq.n	800c960 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	f003 0302 	and.w	r3, r3, #2
 800c924:	2b00      	cmp	r3, #0
 800c926:	d01b      	beq.n	800c960 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	f06f 0202 	mvn.w	r2, #2
 800c930:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	2201      	movs	r2, #1
 800c936:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	699b      	ldr	r3, [r3, #24]
 800c93e:	f003 0303 	and.w	r3, r3, #3
 800c942:	2b00      	cmp	r3, #0
 800c944:	d003      	beq.n	800c94e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c946:	6878      	ldr	r0, [r7, #4]
 800c948:	f000 f9e2 	bl	800cd10 <HAL_TIM_IC_CaptureCallback>
 800c94c:	e005      	b.n	800c95a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c94e:	6878      	ldr	r0, [r7, #4]
 800c950:	f000 f9d4 	bl	800ccfc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c954:	6878      	ldr	r0, [r7, #4]
 800c956:	f000 f9e5 	bl	800cd24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	2200      	movs	r2, #0
 800c95e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c960:	68bb      	ldr	r3, [r7, #8]
 800c962:	f003 0304 	and.w	r3, r3, #4
 800c966:	2b00      	cmp	r3, #0
 800c968:	d020      	beq.n	800c9ac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	f003 0304 	and.w	r3, r3, #4
 800c970:	2b00      	cmp	r3, #0
 800c972:	d01b      	beq.n	800c9ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	f06f 0204 	mvn.w	r2, #4
 800c97c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	2202      	movs	r2, #2
 800c982:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	699b      	ldr	r3, [r3, #24]
 800c98a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d003      	beq.n	800c99a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c992:	6878      	ldr	r0, [r7, #4]
 800c994:	f000 f9bc 	bl	800cd10 <HAL_TIM_IC_CaptureCallback>
 800c998:	e005      	b.n	800c9a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c99a:	6878      	ldr	r0, [r7, #4]
 800c99c:	f000 f9ae 	bl	800ccfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c9a0:	6878      	ldr	r0, [r7, #4]
 800c9a2:	f000 f9bf 	bl	800cd24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c9ac:	68bb      	ldr	r3, [r7, #8]
 800c9ae:	f003 0308 	and.w	r3, r3, #8
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d020      	beq.n	800c9f8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	f003 0308 	and.w	r3, r3, #8
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d01b      	beq.n	800c9f8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	f06f 0208 	mvn.w	r2, #8
 800c9c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	2204      	movs	r2, #4
 800c9ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	69db      	ldr	r3, [r3, #28]
 800c9d6:	f003 0303 	and.w	r3, r3, #3
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d003      	beq.n	800c9e6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c9de:	6878      	ldr	r0, [r7, #4]
 800c9e0:	f000 f996 	bl	800cd10 <HAL_TIM_IC_CaptureCallback>
 800c9e4:	e005      	b.n	800c9f2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c9e6:	6878      	ldr	r0, [r7, #4]
 800c9e8:	f000 f988 	bl	800ccfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c9ec:	6878      	ldr	r0, [r7, #4]
 800c9ee:	f000 f999 	bl	800cd24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c9f8:	68bb      	ldr	r3, [r7, #8]
 800c9fa:	f003 0310 	and.w	r3, r3, #16
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d020      	beq.n	800ca44 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	f003 0310 	and.w	r3, r3, #16
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d01b      	beq.n	800ca44 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	f06f 0210 	mvn.w	r2, #16
 800ca14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	2208      	movs	r2, #8
 800ca1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	69db      	ldr	r3, [r3, #28]
 800ca22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d003      	beq.n	800ca32 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ca2a:	6878      	ldr	r0, [r7, #4]
 800ca2c:	f000 f970 	bl	800cd10 <HAL_TIM_IC_CaptureCallback>
 800ca30:	e005      	b.n	800ca3e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ca32:	6878      	ldr	r0, [r7, #4]
 800ca34:	f000 f962 	bl	800ccfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ca38:	6878      	ldr	r0, [r7, #4]
 800ca3a:	f000 f973 	bl	800cd24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	2200      	movs	r2, #0
 800ca42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ca44:	68bb      	ldr	r3, [r7, #8]
 800ca46:	f003 0301 	and.w	r3, r3, #1
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d00c      	beq.n	800ca68 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	f003 0301 	and.w	r3, r3, #1
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d007      	beq.n	800ca68 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	f06f 0201 	mvn.w	r2, #1
 800ca60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ca62:	6878      	ldr	r0, [r7, #4]
 800ca64:	f7f3 ff00 	bl	8000868 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ca68:	68bb      	ldr	r3, [r7, #8]
 800ca6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d104      	bne.n	800ca7c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800ca72:	68bb      	ldr	r3, [r7, #8]
 800ca74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d00c      	beq.n	800ca96 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d007      	beq.n	800ca96 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800ca8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ca90:	6878      	ldr	r0, [r7, #4]
 800ca92:	f000 fb31 	bl	800d0f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ca96:	68bb      	ldr	r3, [r7, #8]
 800ca98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d00c      	beq.n	800caba <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d007      	beq.n	800caba <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800cab2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800cab4:	6878      	ldr	r0, [r7, #4]
 800cab6:	f000 fb29 	bl	800d10c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800caba:	68bb      	ldr	r3, [r7, #8]
 800cabc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d00c      	beq.n	800cade <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d007      	beq.n	800cade <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800cad6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cad8:	6878      	ldr	r0, [r7, #4]
 800cada:	f000 f92d 	bl	800cd38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800cade:	68bb      	ldr	r3, [r7, #8]
 800cae0:	f003 0320 	and.w	r3, r3, #32
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d00c      	beq.n	800cb02 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	f003 0320 	and.w	r3, r3, #32
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d007      	beq.n	800cb02 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	f06f 0220 	mvn.w	r2, #32
 800cafa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cafc:	6878      	ldr	r0, [r7, #4]
 800cafe:	f000 faf1 	bl	800d0e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cb02:	bf00      	nop
 800cb04:	3710      	adds	r7, #16
 800cb06:	46bd      	mov	sp, r7
 800cb08:	bd80      	pop	{r7, pc}
	...

0800cb0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b084      	sub	sp, #16
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
 800cb14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cb16:	2300      	movs	r3, #0
 800cb18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cb20:	2b01      	cmp	r3, #1
 800cb22:	d101      	bne.n	800cb28 <HAL_TIM_ConfigClockSource+0x1c>
 800cb24:	2302      	movs	r3, #2
 800cb26:	e0dc      	b.n	800cce2 <HAL_TIM_ConfigClockSource+0x1d6>
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	2201      	movs	r2, #1
 800cb2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	2202      	movs	r2, #2
 800cb34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	689b      	ldr	r3, [r3, #8]
 800cb3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800cb40:	68ba      	ldr	r2, [r7, #8]
 800cb42:	4b6a      	ldr	r3, [pc, #424]	@ (800ccec <HAL_TIM_ConfigClockSource+0x1e0>)
 800cb44:	4013      	ands	r3, r2
 800cb46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cb48:	68bb      	ldr	r3, [r7, #8]
 800cb4a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800cb4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	68ba      	ldr	r2, [r7, #8]
 800cb56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800cb58:	683b      	ldr	r3, [r7, #0]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	4a64      	ldr	r2, [pc, #400]	@ (800ccf0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800cb5e:	4293      	cmp	r3, r2
 800cb60:	f000 80a9 	beq.w	800ccb6 <HAL_TIM_ConfigClockSource+0x1aa>
 800cb64:	4a62      	ldr	r2, [pc, #392]	@ (800ccf0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800cb66:	4293      	cmp	r3, r2
 800cb68:	f200 80ae 	bhi.w	800ccc8 <HAL_TIM_ConfigClockSource+0x1bc>
 800cb6c:	4a61      	ldr	r2, [pc, #388]	@ (800ccf4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800cb6e:	4293      	cmp	r3, r2
 800cb70:	f000 80a1 	beq.w	800ccb6 <HAL_TIM_ConfigClockSource+0x1aa>
 800cb74:	4a5f      	ldr	r2, [pc, #380]	@ (800ccf4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800cb76:	4293      	cmp	r3, r2
 800cb78:	f200 80a6 	bhi.w	800ccc8 <HAL_TIM_ConfigClockSource+0x1bc>
 800cb7c:	4a5e      	ldr	r2, [pc, #376]	@ (800ccf8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800cb7e:	4293      	cmp	r3, r2
 800cb80:	f000 8099 	beq.w	800ccb6 <HAL_TIM_ConfigClockSource+0x1aa>
 800cb84:	4a5c      	ldr	r2, [pc, #368]	@ (800ccf8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800cb86:	4293      	cmp	r3, r2
 800cb88:	f200 809e 	bhi.w	800ccc8 <HAL_TIM_ConfigClockSource+0x1bc>
 800cb8c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800cb90:	f000 8091 	beq.w	800ccb6 <HAL_TIM_ConfigClockSource+0x1aa>
 800cb94:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800cb98:	f200 8096 	bhi.w	800ccc8 <HAL_TIM_ConfigClockSource+0x1bc>
 800cb9c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cba0:	f000 8089 	beq.w	800ccb6 <HAL_TIM_ConfigClockSource+0x1aa>
 800cba4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cba8:	f200 808e 	bhi.w	800ccc8 <HAL_TIM_ConfigClockSource+0x1bc>
 800cbac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cbb0:	d03e      	beq.n	800cc30 <HAL_TIM_ConfigClockSource+0x124>
 800cbb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cbb6:	f200 8087 	bhi.w	800ccc8 <HAL_TIM_ConfigClockSource+0x1bc>
 800cbba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cbbe:	f000 8086 	beq.w	800ccce <HAL_TIM_ConfigClockSource+0x1c2>
 800cbc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cbc6:	d87f      	bhi.n	800ccc8 <HAL_TIM_ConfigClockSource+0x1bc>
 800cbc8:	2b70      	cmp	r3, #112	@ 0x70
 800cbca:	d01a      	beq.n	800cc02 <HAL_TIM_ConfigClockSource+0xf6>
 800cbcc:	2b70      	cmp	r3, #112	@ 0x70
 800cbce:	d87b      	bhi.n	800ccc8 <HAL_TIM_ConfigClockSource+0x1bc>
 800cbd0:	2b60      	cmp	r3, #96	@ 0x60
 800cbd2:	d050      	beq.n	800cc76 <HAL_TIM_ConfigClockSource+0x16a>
 800cbd4:	2b60      	cmp	r3, #96	@ 0x60
 800cbd6:	d877      	bhi.n	800ccc8 <HAL_TIM_ConfigClockSource+0x1bc>
 800cbd8:	2b50      	cmp	r3, #80	@ 0x50
 800cbda:	d03c      	beq.n	800cc56 <HAL_TIM_ConfigClockSource+0x14a>
 800cbdc:	2b50      	cmp	r3, #80	@ 0x50
 800cbde:	d873      	bhi.n	800ccc8 <HAL_TIM_ConfigClockSource+0x1bc>
 800cbe0:	2b40      	cmp	r3, #64	@ 0x40
 800cbe2:	d058      	beq.n	800cc96 <HAL_TIM_ConfigClockSource+0x18a>
 800cbe4:	2b40      	cmp	r3, #64	@ 0x40
 800cbe6:	d86f      	bhi.n	800ccc8 <HAL_TIM_ConfigClockSource+0x1bc>
 800cbe8:	2b30      	cmp	r3, #48	@ 0x30
 800cbea:	d064      	beq.n	800ccb6 <HAL_TIM_ConfigClockSource+0x1aa>
 800cbec:	2b30      	cmp	r3, #48	@ 0x30
 800cbee:	d86b      	bhi.n	800ccc8 <HAL_TIM_ConfigClockSource+0x1bc>
 800cbf0:	2b20      	cmp	r3, #32
 800cbf2:	d060      	beq.n	800ccb6 <HAL_TIM_ConfigClockSource+0x1aa>
 800cbf4:	2b20      	cmp	r3, #32
 800cbf6:	d867      	bhi.n	800ccc8 <HAL_TIM_ConfigClockSource+0x1bc>
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d05c      	beq.n	800ccb6 <HAL_TIM_ConfigClockSource+0x1aa>
 800cbfc:	2b10      	cmp	r3, #16
 800cbfe:	d05a      	beq.n	800ccb6 <HAL_TIM_ConfigClockSource+0x1aa>
 800cc00:	e062      	b.n	800ccc8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cc06:	683b      	ldr	r3, [r7, #0]
 800cc08:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cc0a:	683b      	ldr	r3, [r7, #0]
 800cc0c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cc0e:	683b      	ldr	r3, [r7, #0]
 800cc10:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800cc12:	f000 f9b9 	bl	800cf88 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	689b      	ldr	r3, [r3, #8]
 800cc1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cc1e:	68bb      	ldr	r3, [r7, #8]
 800cc20:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800cc24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	68ba      	ldr	r2, [r7, #8]
 800cc2c:	609a      	str	r2, [r3, #8]
      break;
 800cc2e:	e04f      	b.n	800ccd0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cc34:	683b      	ldr	r3, [r7, #0]
 800cc36:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cc3c:	683b      	ldr	r3, [r7, #0]
 800cc3e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800cc40:	f000 f9a2 	bl	800cf88 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	689a      	ldr	r2, [r3, #8]
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800cc52:	609a      	str	r2, [r3, #8]
      break;
 800cc54:	e03c      	b.n	800ccd0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cc5e:	683b      	ldr	r3, [r7, #0]
 800cc60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cc62:	461a      	mov	r2, r3
 800cc64:	f000 f912 	bl	800ce8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	2150      	movs	r1, #80	@ 0x50
 800cc6e:	4618      	mov	r0, r3
 800cc70:	f000 f96c 	bl	800cf4c <TIM_ITRx_SetConfig>
      break;
 800cc74:	e02c      	b.n	800ccd0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cc7a:	683b      	ldr	r3, [r7, #0]
 800cc7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cc7e:	683b      	ldr	r3, [r7, #0]
 800cc80:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800cc82:	461a      	mov	r2, r3
 800cc84:	f000 f931 	bl	800ceea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	2160      	movs	r1, #96	@ 0x60
 800cc8e:	4618      	mov	r0, r3
 800cc90:	f000 f95c 	bl	800cf4c <TIM_ITRx_SetConfig>
      break;
 800cc94:	e01c      	b.n	800ccd0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cc9e:	683b      	ldr	r3, [r7, #0]
 800cca0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cca2:	461a      	mov	r2, r3
 800cca4:	f000 f8f2 	bl	800ce8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	2140      	movs	r1, #64	@ 0x40
 800ccae:	4618      	mov	r0, r3
 800ccb0:	f000 f94c 	bl	800cf4c <TIM_ITRx_SetConfig>
      break;
 800ccb4:	e00c      	b.n	800ccd0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	681a      	ldr	r2, [r3, #0]
 800ccba:	683b      	ldr	r3, [r7, #0]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	4619      	mov	r1, r3
 800ccc0:	4610      	mov	r0, r2
 800ccc2:	f000 f943 	bl	800cf4c <TIM_ITRx_SetConfig>
      break;
 800ccc6:	e003      	b.n	800ccd0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800ccc8:	2301      	movs	r3, #1
 800ccca:	73fb      	strb	r3, [r7, #15]
      break;
 800cccc:	e000      	b.n	800ccd0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800ccce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	2201      	movs	r2, #1
 800ccd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	2200      	movs	r2, #0
 800ccdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800cce0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cce2:	4618      	mov	r0, r3
 800cce4:	3710      	adds	r7, #16
 800cce6:	46bd      	mov	sp, r7
 800cce8:	bd80      	pop	{r7, pc}
 800ccea:	bf00      	nop
 800ccec:	ffceff88 	.word	0xffceff88
 800ccf0:	00100040 	.word	0x00100040
 800ccf4:	00100030 	.word	0x00100030
 800ccf8:	00100020 	.word	0x00100020

0800ccfc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ccfc:	b480      	push	{r7}
 800ccfe:	b083      	sub	sp, #12
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cd04:	bf00      	nop
 800cd06:	370c      	adds	r7, #12
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0e:	4770      	bx	lr

0800cd10 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cd10:	b480      	push	{r7}
 800cd12:	b083      	sub	sp, #12
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cd18:	bf00      	nop
 800cd1a:	370c      	adds	r7, #12
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd22:	4770      	bx	lr

0800cd24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cd24:	b480      	push	{r7}
 800cd26:	b083      	sub	sp, #12
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cd2c:	bf00      	nop
 800cd2e:	370c      	adds	r7, #12
 800cd30:	46bd      	mov	sp, r7
 800cd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd36:	4770      	bx	lr

0800cd38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cd38:	b480      	push	{r7}
 800cd3a:	b083      	sub	sp, #12
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cd40:	bf00      	nop
 800cd42:	370c      	adds	r7, #12
 800cd44:	46bd      	mov	sp, r7
 800cd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4a:	4770      	bx	lr

0800cd4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800cd4c:	b480      	push	{r7}
 800cd4e:	b085      	sub	sp, #20
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
 800cd54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	4a43      	ldr	r2, [pc, #268]	@ (800ce6c <TIM_Base_SetConfig+0x120>)
 800cd60:	4293      	cmp	r3, r2
 800cd62:	d013      	beq.n	800cd8c <TIM_Base_SetConfig+0x40>
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cd6a:	d00f      	beq.n	800cd8c <TIM_Base_SetConfig+0x40>
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	4a40      	ldr	r2, [pc, #256]	@ (800ce70 <TIM_Base_SetConfig+0x124>)
 800cd70:	4293      	cmp	r3, r2
 800cd72:	d00b      	beq.n	800cd8c <TIM_Base_SetConfig+0x40>
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	4a3f      	ldr	r2, [pc, #252]	@ (800ce74 <TIM_Base_SetConfig+0x128>)
 800cd78:	4293      	cmp	r3, r2
 800cd7a:	d007      	beq.n	800cd8c <TIM_Base_SetConfig+0x40>
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	4a3e      	ldr	r2, [pc, #248]	@ (800ce78 <TIM_Base_SetConfig+0x12c>)
 800cd80:	4293      	cmp	r3, r2
 800cd82:	d003      	beq.n	800cd8c <TIM_Base_SetConfig+0x40>
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	4a3d      	ldr	r2, [pc, #244]	@ (800ce7c <TIM_Base_SetConfig+0x130>)
 800cd88:	4293      	cmp	r3, r2
 800cd8a:	d108      	bne.n	800cd9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cd92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cd94:	683b      	ldr	r3, [r7, #0]
 800cd96:	685b      	ldr	r3, [r3, #4]
 800cd98:	68fa      	ldr	r2, [r7, #12]
 800cd9a:	4313      	orrs	r3, r2
 800cd9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	4a32      	ldr	r2, [pc, #200]	@ (800ce6c <TIM_Base_SetConfig+0x120>)
 800cda2:	4293      	cmp	r3, r2
 800cda4:	d01f      	beq.n	800cde6 <TIM_Base_SetConfig+0x9a>
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cdac:	d01b      	beq.n	800cde6 <TIM_Base_SetConfig+0x9a>
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	4a2f      	ldr	r2, [pc, #188]	@ (800ce70 <TIM_Base_SetConfig+0x124>)
 800cdb2:	4293      	cmp	r3, r2
 800cdb4:	d017      	beq.n	800cde6 <TIM_Base_SetConfig+0x9a>
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	4a2e      	ldr	r2, [pc, #184]	@ (800ce74 <TIM_Base_SetConfig+0x128>)
 800cdba:	4293      	cmp	r3, r2
 800cdbc:	d013      	beq.n	800cde6 <TIM_Base_SetConfig+0x9a>
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	4a2d      	ldr	r2, [pc, #180]	@ (800ce78 <TIM_Base_SetConfig+0x12c>)
 800cdc2:	4293      	cmp	r3, r2
 800cdc4:	d00f      	beq.n	800cde6 <TIM_Base_SetConfig+0x9a>
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	4a2c      	ldr	r2, [pc, #176]	@ (800ce7c <TIM_Base_SetConfig+0x130>)
 800cdca:	4293      	cmp	r3, r2
 800cdcc:	d00b      	beq.n	800cde6 <TIM_Base_SetConfig+0x9a>
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	4a2b      	ldr	r2, [pc, #172]	@ (800ce80 <TIM_Base_SetConfig+0x134>)
 800cdd2:	4293      	cmp	r3, r2
 800cdd4:	d007      	beq.n	800cde6 <TIM_Base_SetConfig+0x9a>
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	4a2a      	ldr	r2, [pc, #168]	@ (800ce84 <TIM_Base_SetConfig+0x138>)
 800cdda:	4293      	cmp	r3, r2
 800cddc:	d003      	beq.n	800cde6 <TIM_Base_SetConfig+0x9a>
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	4a29      	ldr	r2, [pc, #164]	@ (800ce88 <TIM_Base_SetConfig+0x13c>)
 800cde2:	4293      	cmp	r3, r2
 800cde4:	d108      	bne.n	800cdf8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cdec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cdee:	683b      	ldr	r3, [r7, #0]
 800cdf0:	68db      	ldr	r3, [r3, #12]
 800cdf2:	68fa      	ldr	r2, [r7, #12]
 800cdf4:	4313      	orrs	r3, r2
 800cdf6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800cdfe:	683b      	ldr	r3, [r7, #0]
 800ce00:	695b      	ldr	r3, [r3, #20]
 800ce02:	4313      	orrs	r3, r2
 800ce04:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ce06:	683b      	ldr	r3, [r7, #0]
 800ce08:	689a      	ldr	r2, [r3, #8]
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ce0e:	683b      	ldr	r3, [r7, #0]
 800ce10:	681a      	ldr	r2, [r3, #0]
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	4a14      	ldr	r2, [pc, #80]	@ (800ce6c <TIM_Base_SetConfig+0x120>)
 800ce1a:	4293      	cmp	r3, r2
 800ce1c:	d00f      	beq.n	800ce3e <TIM_Base_SetConfig+0xf2>
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	4a16      	ldr	r2, [pc, #88]	@ (800ce7c <TIM_Base_SetConfig+0x130>)
 800ce22:	4293      	cmp	r3, r2
 800ce24:	d00b      	beq.n	800ce3e <TIM_Base_SetConfig+0xf2>
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	4a15      	ldr	r2, [pc, #84]	@ (800ce80 <TIM_Base_SetConfig+0x134>)
 800ce2a:	4293      	cmp	r3, r2
 800ce2c:	d007      	beq.n	800ce3e <TIM_Base_SetConfig+0xf2>
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	4a14      	ldr	r2, [pc, #80]	@ (800ce84 <TIM_Base_SetConfig+0x138>)
 800ce32:	4293      	cmp	r3, r2
 800ce34:	d003      	beq.n	800ce3e <TIM_Base_SetConfig+0xf2>
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	4a13      	ldr	r2, [pc, #76]	@ (800ce88 <TIM_Base_SetConfig+0x13c>)
 800ce3a:	4293      	cmp	r3, r2
 800ce3c:	d103      	bne.n	800ce46 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ce3e:	683b      	ldr	r3, [r7, #0]
 800ce40:	691a      	ldr	r2, [r3, #16]
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	f043 0204 	orr.w	r2, r3, #4
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	2201      	movs	r2, #1
 800ce56:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	68fa      	ldr	r2, [r7, #12]
 800ce5c:	601a      	str	r2, [r3, #0]
}
 800ce5e:	bf00      	nop
 800ce60:	3714      	adds	r7, #20
 800ce62:	46bd      	mov	sp, r7
 800ce64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce68:	4770      	bx	lr
 800ce6a:	bf00      	nop
 800ce6c:	40010000 	.word	0x40010000
 800ce70:	40000400 	.word	0x40000400
 800ce74:	40000800 	.word	0x40000800
 800ce78:	40000c00 	.word	0x40000c00
 800ce7c:	40010400 	.word	0x40010400
 800ce80:	40014000 	.word	0x40014000
 800ce84:	40014400 	.word	0x40014400
 800ce88:	40014800 	.word	0x40014800

0800ce8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ce8c:	b480      	push	{r7}
 800ce8e:	b087      	sub	sp, #28
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	60f8      	str	r0, [r7, #12]
 800ce94:	60b9      	str	r1, [r7, #8]
 800ce96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	6a1b      	ldr	r3, [r3, #32]
 800ce9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	6a1b      	ldr	r3, [r3, #32]
 800cea2:	f023 0201 	bic.w	r2, r3, #1
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	699b      	ldr	r3, [r3, #24]
 800ceae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ceb0:	693b      	ldr	r3, [r7, #16]
 800ceb2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ceb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	011b      	lsls	r3, r3, #4
 800cebc:	693a      	ldr	r2, [r7, #16]
 800cebe:	4313      	orrs	r3, r2
 800cec0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cec2:	697b      	ldr	r3, [r7, #20]
 800cec4:	f023 030a 	bic.w	r3, r3, #10
 800cec8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ceca:	697a      	ldr	r2, [r7, #20]
 800cecc:	68bb      	ldr	r3, [r7, #8]
 800cece:	4313      	orrs	r3, r2
 800ced0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	693a      	ldr	r2, [r7, #16]
 800ced6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	697a      	ldr	r2, [r7, #20]
 800cedc:	621a      	str	r2, [r3, #32]
}
 800cede:	bf00      	nop
 800cee0:	371c      	adds	r7, #28
 800cee2:	46bd      	mov	sp, r7
 800cee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee8:	4770      	bx	lr

0800ceea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ceea:	b480      	push	{r7}
 800ceec:	b087      	sub	sp, #28
 800ceee:	af00      	add	r7, sp, #0
 800cef0:	60f8      	str	r0, [r7, #12]
 800cef2:	60b9      	str	r1, [r7, #8]
 800cef4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	6a1b      	ldr	r3, [r3, #32]
 800cefa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	6a1b      	ldr	r3, [r3, #32]
 800cf00:	f023 0210 	bic.w	r2, r3, #16
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	699b      	ldr	r3, [r3, #24]
 800cf0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cf0e:	693b      	ldr	r3, [r7, #16]
 800cf10:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800cf14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	031b      	lsls	r3, r3, #12
 800cf1a:	693a      	ldr	r2, [r7, #16]
 800cf1c:	4313      	orrs	r3, r2
 800cf1e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cf20:	697b      	ldr	r3, [r7, #20]
 800cf22:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800cf26:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cf28:	68bb      	ldr	r3, [r7, #8]
 800cf2a:	011b      	lsls	r3, r3, #4
 800cf2c:	697a      	ldr	r2, [r7, #20]
 800cf2e:	4313      	orrs	r3, r2
 800cf30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	693a      	ldr	r2, [r7, #16]
 800cf36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	697a      	ldr	r2, [r7, #20]
 800cf3c:	621a      	str	r2, [r3, #32]
}
 800cf3e:	bf00      	nop
 800cf40:	371c      	adds	r7, #28
 800cf42:	46bd      	mov	sp, r7
 800cf44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf48:	4770      	bx	lr
	...

0800cf4c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cf4c:	b480      	push	{r7}
 800cf4e:	b085      	sub	sp, #20
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	6078      	str	r0, [r7, #4]
 800cf54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	689b      	ldr	r3, [r3, #8]
 800cf5a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cf5c:	68fa      	ldr	r2, [r7, #12]
 800cf5e:	4b09      	ldr	r3, [pc, #36]	@ (800cf84 <TIM_ITRx_SetConfig+0x38>)
 800cf60:	4013      	ands	r3, r2
 800cf62:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cf64:	683a      	ldr	r2, [r7, #0]
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	4313      	orrs	r3, r2
 800cf6a:	f043 0307 	orr.w	r3, r3, #7
 800cf6e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	68fa      	ldr	r2, [r7, #12]
 800cf74:	609a      	str	r2, [r3, #8]
}
 800cf76:	bf00      	nop
 800cf78:	3714      	adds	r7, #20
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf80:	4770      	bx	lr
 800cf82:	bf00      	nop
 800cf84:	ffcfff8f 	.word	0xffcfff8f

0800cf88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cf88:	b480      	push	{r7}
 800cf8a:	b087      	sub	sp, #28
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	60f8      	str	r0, [r7, #12]
 800cf90:	60b9      	str	r1, [r7, #8]
 800cf92:	607a      	str	r2, [r7, #4]
 800cf94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	689b      	ldr	r3, [r3, #8]
 800cf9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cf9c:	697b      	ldr	r3, [r7, #20]
 800cf9e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800cfa2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cfa4:	683b      	ldr	r3, [r7, #0]
 800cfa6:	021a      	lsls	r2, r3, #8
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	431a      	orrs	r2, r3
 800cfac:	68bb      	ldr	r3, [r7, #8]
 800cfae:	4313      	orrs	r3, r2
 800cfb0:	697a      	ldr	r2, [r7, #20]
 800cfb2:	4313      	orrs	r3, r2
 800cfb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	697a      	ldr	r2, [r7, #20]
 800cfba:	609a      	str	r2, [r3, #8]
}
 800cfbc:	bf00      	nop
 800cfbe:	371c      	adds	r7, #28
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc6:	4770      	bx	lr

0800cfc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cfc8:	b480      	push	{r7}
 800cfca:	b085      	sub	sp, #20
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	6078      	str	r0, [r7, #4]
 800cfd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cfd8:	2b01      	cmp	r3, #1
 800cfda:	d101      	bne.n	800cfe0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cfdc:	2302      	movs	r3, #2
 800cfde:	e06d      	b.n	800d0bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	2201      	movs	r2, #1
 800cfe4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	2202      	movs	r2, #2
 800cfec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	685b      	ldr	r3, [r3, #4]
 800cff6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	689b      	ldr	r3, [r3, #8]
 800cffe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	4a30      	ldr	r2, [pc, #192]	@ (800d0c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d006:	4293      	cmp	r3, r2
 800d008:	d004      	beq.n	800d014 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	4a2f      	ldr	r2, [pc, #188]	@ (800d0cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d010:	4293      	cmp	r3, r2
 800d012:	d108      	bne.n	800d026 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800d01a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d01c:	683b      	ldr	r3, [r7, #0]
 800d01e:	685b      	ldr	r3, [r3, #4]
 800d020:	68fa      	ldr	r2, [r7, #12]
 800d022:	4313      	orrs	r3, r2
 800d024:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d02c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	68fa      	ldr	r2, [r7, #12]
 800d034:	4313      	orrs	r3, r2
 800d036:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	68fa      	ldr	r2, [r7, #12]
 800d03e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	4a20      	ldr	r2, [pc, #128]	@ (800d0c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d046:	4293      	cmp	r3, r2
 800d048:	d022      	beq.n	800d090 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d052:	d01d      	beq.n	800d090 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	4a1d      	ldr	r2, [pc, #116]	@ (800d0d0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d05a:	4293      	cmp	r3, r2
 800d05c:	d018      	beq.n	800d090 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	4a1c      	ldr	r2, [pc, #112]	@ (800d0d4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d064:	4293      	cmp	r3, r2
 800d066:	d013      	beq.n	800d090 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	4a1a      	ldr	r2, [pc, #104]	@ (800d0d8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d06e:	4293      	cmp	r3, r2
 800d070:	d00e      	beq.n	800d090 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	4a15      	ldr	r2, [pc, #84]	@ (800d0cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d078:	4293      	cmp	r3, r2
 800d07a:	d009      	beq.n	800d090 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	4a16      	ldr	r2, [pc, #88]	@ (800d0dc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d082:	4293      	cmp	r3, r2
 800d084:	d004      	beq.n	800d090 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	4a15      	ldr	r2, [pc, #84]	@ (800d0e0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d08c:	4293      	cmp	r3, r2
 800d08e:	d10c      	bne.n	800d0aa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d090:	68bb      	ldr	r3, [r7, #8]
 800d092:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d096:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d098:	683b      	ldr	r3, [r7, #0]
 800d09a:	689b      	ldr	r3, [r3, #8]
 800d09c:	68ba      	ldr	r2, [r7, #8]
 800d09e:	4313      	orrs	r3, r2
 800d0a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	68ba      	ldr	r2, [r7, #8]
 800d0a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	2201      	movs	r2, #1
 800d0ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	2200      	movs	r2, #0
 800d0b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d0ba:	2300      	movs	r3, #0
}
 800d0bc:	4618      	mov	r0, r3
 800d0be:	3714      	adds	r7, #20
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c6:	4770      	bx	lr
 800d0c8:	40010000 	.word	0x40010000
 800d0cc:	40010400 	.word	0x40010400
 800d0d0:	40000400 	.word	0x40000400
 800d0d4:	40000800 	.word	0x40000800
 800d0d8:	40000c00 	.word	0x40000c00
 800d0dc:	40001800 	.word	0x40001800
 800d0e0:	40014000 	.word	0x40014000

0800d0e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d0e4:	b480      	push	{r7}
 800d0e6:	b083      	sub	sp, #12
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d0ec:	bf00      	nop
 800d0ee:	370c      	adds	r7, #12
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f6:	4770      	bx	lr

0800d0f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d0f8:	b480      	push	{r7}
 800d0fa:	b083      	sub	sp, #12
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d100:	bf00      	nop
 800d102:	370c      	adds	r7, #12
 800d104:	46bd      	mov	sp, r7
 800d106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10a:	4770      	bx	lr

0800d10c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d10c:	b480      	push	{r7}
 800d10e:	b083      	sub	sp, #12
 800d110:	af00      	add	r7, sp, #0
 800d112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d114:	bf00      	nop
 800d116:	370c      	adds	r7, #12
 800d118:	46bd      	mov	sp, r7
 800d11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11e:	4770      	bx	lr

0800d120 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b082      	sub	sp, #8
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d101      	bne.n	800d132 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d12e:	2301      	movs	r3, #1
 800d130:	e042      	b.n	800d1b8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d106      	bne.n	800d14a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	2200      	movs	r2, #0
 800d140:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d144:	6878      	ldr	r0, [r7, #4]
 800d146:	f7f4 fc75 	bl	8001a34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	2224      	movs	r2, #36	@ 0x24
 800d14e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	681a      	ldr	r2, [r3, #0]
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	f022 0201 	bic.w	r2, r2, #1
 800d160:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d166:	2b00      	cmp	r3, #0
 800d168:	d002      	beq.n	800d170 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800d16a:	6878      	ldr	r0, [r7, #4]
 800d16c:	f001 fa60 	bl	800e630 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d170:	6878      	ldr	r0, [r7, #4]
 800d172:	f000 fcf5 	bl	800db60 <UART_SetConfig>
 800d176:	4603      	mov	r3, r0
 800d178:	2b01      	cmp	r3, #1
 800d17a:	d101      	bne.n	800d180 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800d17c:	2301      	movs	r3, #1
 800d17e:	e01b      	b.n	800d1b8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	685a      	ldr	r2, [r3, #4]
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d18e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	689a      	ldr	r2, [r3, #8]
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d19e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	681a      	ldr	r2, [r3, #0]
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	f042 0201 	orr.w	r2, r2, #1
 800d1ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d1b0:	6878      	ldr	r0, [r7, #4]
 800d1b2:	f001 fadf 	bl	800e774 <UART_CheckIdleState>
 800d1b6:	4603      	mov	r3, r0
}
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	3708      	adds	r7, #8
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	bd80      	pop	{r7, pc}

0800d1c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b08a      	sub	sp, #40	@ 0x28
 800d1c4:	af02      	add	r7, sp, #8
 800d1c6:	60f8      	str	r0, [r7, #12]
 800d1c8:	60b9      	str	r1, [r7, #8]
 800d1ca:	603b      	str	r3, [r7, #0]
 800d1cc:	4613      	mov	r3, r2
 800d1ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d1d6:	2b20      	cmp	r3, #32
 800d1d8:	d17b      	bne.n	800d2d2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800d1da:	68bb      	ldr	r3, [r7, #8]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d002      	beq.n	800d1e6 <HAL_UART_Transmit+0x26>
 800d1e0:	88fb      	ldrh	r3, [r7, #6]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d101      	bne.n	800d1ea <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800d1e6:	2301      	movs	r3, #1
 800d1e8:	e074      	b.n	800d2d4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	2200      	movs	r2, #0
 800d1ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	2221      	movs	r2, #33	@ 0x21
 800d1f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d1fa:	f7f6 f8c7 	bl	800338c <HAL_GetTick>
 800d1fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	88fa      	ldrh	r2, [r7, #6]
 800d204:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	88fa      	ldrh	r2, [r7, #6]
 800d20c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	689b      	ldr	r3, [r3, #8]
 800d214:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d218:	d108      	bne.n	800d22c <HAL_UART_Transmit+0x6c>
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	691b      	ldr	r3, [r3, #16]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d104      	bne.n	800d22c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800d222:	2300      	movs	r3, #0
 800d224:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d226:	68bb      	ldr	r3, [r7, #8]
 800d228:	61bb      	str	r3, [r7, #24]
 800d22a:	e003      	b.n	800d234 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800d22c:	68bb      	ldr	r3, [r7, #8]
 800d22e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d230:	2300      	movs	r3, #0
 800d232:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d234:	e030      	b.n	800d298 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d236:	683b      	ldr	r3, [r7, #0]
 800d238:	9300      	str	r3, [sp, #0]
 800d23a:	697b      	ldr	r3, [r7, #20]
 800d23c:	2200      	movs	r2, #0
 800d23e:	2180      	movs	r1, #128	@ 0x80
 800d240:	68f8      	ldr	r0, [r7, #12]
 800d242:	f001 fb41 	bl	800e8c8 <UART_WaitOnFlagUntilTimeout>
 800d246:	4603      	mov	r3, r0
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d005      	beq.n	800d258 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	2220      	movs	r2, #32
 800d250:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800d254:	2303      	movs	r3, #3
 800d256:	e03d      	b.n	800d2d4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800d258:	69fb      	ldr	r3, [r7, #28]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d10b      	bne.n	800d276 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d25e:	69bb      	ldr	r3, [r7, #24]
 800d260:	881b      	ldrh	r3, [r3, #0]
 800d262:	461a      	mov	r2, r3
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d26c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800d26e:	69bb      	ldr	r3, [r7, #24]
 800d270:	3302      	adds	r3, #2
 800d272:	61bb      	str	r3, [r7, #24]
 800d274:	e007      	b.n	800d286 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d276:	69fb      	ldr	r3, [r7, #28]
 800d278:	781a      	ldrb	r2, [r3, #0]
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800d280:	69fb      	ldr	r3, [r7, #28]
 800d282:	3301      	adds	r3, #1
 800d284:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d28c:	b29b      	uxth	r3, r3
 800d28e:	3b01      	subs	r3, #1
 800d290:	b29a      	uxth	r2, r3
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d29e:	b29b      	uxth	r3, r3
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d1c8      	bne.n	800d236 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d2a4:	683b      	ldr	r3, [r7, #0]
 800d2a6:	9300      	str	r3, [sp, #0]
 800d2a8:	697b      	ldr	r3, [r7, #20]
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	2140      	movs	r1, #64	@ 0x40
 800d2ae:	68f8      	ldr	r0, [r7, #12]
 800d2b0:	f001 fb0a 	bl	800e8c8 <UART_WaitOnFlagUntilTimeout>
 800d2b4:	4603      	mov	r3, r0
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d005      	beq.n	800d2c6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	2220      	movs	r2, #32
 800d2be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800d2c2:	2303      	movs	r3, #3
 800d2c4:	e006      	b.n	800d2d4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	2220      	movs	r2, #32
 800d2ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	e000      	b.n	800d2d4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800d2d2:	2302      	movs	r3, #2
  }
}
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	3720      	adds	r7, #32
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	bd80      	pop	{r7, pc}

0800d2dc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	b08a      	sub	sp, #40	@ 0x28
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	60f8      	str	r0, [r7, #12]
 800d2e4:	60b9      	str	r1, [r7, #8]
 800d2e6:	4613      	mov	r3, r2
 800d2e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d2f0:	2b20      	cmp	r3, #32
 800d2f2:	d137      	bne.n	800d364 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800d2f4:	68bb      	ldr	r3, [r7, #8]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d002      	beq.n	800d300 <HAL_UART_Receive_IT+0x24>
 800d2fa:	88fb      	ldrh	r3, [r7, #6]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d101      	bne.n	800d304 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800d300:	2301      	movs	r3, #1
 800d302:	e030      	b.n	800d366 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	2200      	movs	r2, #0
 800d308:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	4a18      	ldr	r2, [pc, #96]	@ (800d370 <HAL_UART_Receive_IT+0x94>)
 800d310:	4293      	cmp	r3, r2
 800d312:	d01f      	beq.n	800d354 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	685b      	ldr	r3, [r3, #4]
 800d31a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d018      	beq.n	800d354 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d328:	697b      	ldr	r3, [r7, #20]
 800d32a:	e853 3f00 	ldrex	r3, [r3]
 800d32e:	613b      	str	r3, [r7, #16]
   return(result);
 800d330:	693b      	ldr	r3, [r7, #16]
 800d332:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800d336:	627b      	str	r3, [r7, #36]	@ 0x24
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	461a      	mov	r2, r3
 800d33e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d340:	623b      	str	r3, [r7, #32]
 800d342:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d344:	69f9      	ldr	r1, [r7, #28]
 800d346:	6a3a      	ldr	r2, [r7, #32]
 800d348:	e841 2300 	strex	r3, r2, [r1]
 800d34c:	61bb      	str	r3, [r7, #24]
   return(result);
 800d34e:	69bb      	ldr	r3, [r7, #24]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d1e6      	bne.n	800d322 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800d354:	88fb      	ldrh	r3, [r7, #6]
 800d356:	461a      	mov	r2, r3
 800d358:	68b9      	ldr	r1, [r7, #8]
 800d35a:	68f8      	ldr	r0, [r7, #12]
 800d35c:	f001 fb22 	bl	800e9a4 <UART_Start_Receive_IT>
 800d360:	4603      	mov	r3, r0
 800d362:	e000      	b.n	800d366 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d364:	2302      	movs	r3, #2
  }
}
 800d366:	4618      	mov	r0, r3
 800d368:	3728      	adds	r7, #40	@ 0x28
 800d36a:	46bd      	mov	sp, r7
 800d36c:	bd80      	pop	{r7, pc}
 800d36e:	bf00      	nop
 800d370:	58000c00 	.word	0x58000c00

0800d374 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d374:	b580      	push	{r7, lr}
 800d376:	b0ba      	sub	sp, #232	@ 0xe8
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	69db      	ldr	r3, [r3, #28]
 800d382:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	689b      	ldr	r3, [r3, #8]
 800d396:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d39a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800d39e:	f640 030f 	movw	r3, #2063	@ 0x80f
 800d3a2:	4013      	ands	r3, r2
 800d3a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800d3a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d11b      	bne.n	800d3e8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d3b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d3b4:	f003 0320 	and.w	r3, r3, #32
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d015      	beq.n	800d3e8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d3bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d3c0:	f003 0320 	and.w	r3, r3, #32
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d105      	bne.n	800d3d4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d3c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d3cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d009      	beq.n	800d3e8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	f000 8393 	beq.w	800db04 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d3e2:	6878      	ldr	r0, [r7, #4]
 800d3e4:	4798      	blx	r3
      }
      return;
 800d3e6:	e38d      	b.n	800db04 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d3e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	f000 8123 	beq.w	800d638 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d3f2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800d3f6:	4b8d      	ldr	r3, [pc, #564]	@ (800d62c <HAL_UART_IRQHandler+0x2b8>)
 800d3f8:	4013      	ands	r3, r2
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d106      	bne.n	800d40c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d3fe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800d402:	4b8b      	ldr	r3, [pc, #556]	@ (800d630 <HAL_UART_IRQHandler+0x2bc>)
 800d404:	4013      	ands	r3, r2
 800d406:	2b00      	cmp	r3, #0
 800d408:	f000 8116 	beq.w	800d638 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d40c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d410:	f003 0301 	and.w	r3, r3, #1
 800d414:	2b00      	cmp	r3, #0
 800d416:	d011      	beq.n	800d43c <HAL_UART_IRQHandler+0xc8>
 800d418:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d41c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d420:	2b00      	cmp	r3, #0
 800d422:	d00b      	beq.n	800d43c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	2201      	movs	r2, #1
 800d42a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d432:	f043 0201 	orr.w	r2, r3, #1
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d43c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d440:	f003 0302 	and.w	r3, r3, #2
 800d444:	2b00      	cmp	r3, #0
 800d446:	d011      	beq.n	800d46c <HAL_UART_IRQHandler+0xf8>
 800d448:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d44c:	f003 0301 	and.w	r3, r3, #1
 800d450:	2b00      	cmp	r3, #0
 800d452:	d00b      	beq.n	800d46c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	2202      	movs	r2, #2
 800d45a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d462:	f043 0204 	orr.w	r2, r3, #4
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d46c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d470:	f003 0304 	and.w	r3, r3, #4
 800d474:	2b00      	cmp	r3, #0
 800d476:	d011      	beq.n	800d49c <HAL_UART_IRQHandler+0x128>
 800d478:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d47c:	f003 0301 	and.w	r3, r3, #1
 800d480:	2b00      	cmp	r3, #0
 800d482:	d00b      	beq.n	800d49c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	2204      	movs	r2, #4
 800d48a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d492:	f043 0202 	orr.w	r2, r3, #2
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d49c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d4a0:	f003 0308 	and.w	r3, r3, #8
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d017      	beq.n	800d4d8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d4a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d4ac:	f003 0320 	and.w	r3, r3, #32
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d105      	bne.n	800d4c0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d4b4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800d4b8:	4b5c      	ldr	r3, [pc, #368]	@ (800d62c <HAL_UART_IRQHandler+0x2b8>)
 800d4ba:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d00b      	beq.n	800d4d8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	2208      	movs	r2, #8
 800d4c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d4ce:	f043 0208 	orr.w	r2, r3, #8
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d4d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d4dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d012      	beq.n	800d50a <HAL_UART_IRQHandler+0x196>
 800d4e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d4e8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d00c      	beq.n	800d50a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d4f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d500:	f043 0220 	orr.w	r2, r3, #32
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d510:	2b00      	cmp	r3, #0
 800d512:	f000 82f9 	beq.w	800db08 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d51a:	f003 0320 	and.w	r3, r3, #32
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d013      	beq.n	800d54a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d522:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d526:	f003 0320 	and.w	r3, r3, #32
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d105      	bne.n	800d53a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d52e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d532:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d536:	2b00      	cmp	r3, #0
 800d538:	d007      	beq.n	800d54a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d003      	beq.n	800d54a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d546:	6878      	ldr	r0, [r7, #4]
 800d548:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d550:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	689b      	ldr	r3, [r3, #8]
 800d55a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d55e:	2b40      	cmp	r3, #64	@ 0x40
 800d560:	d005      	beq.n	800d56e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d562:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d566:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d054      	beq.n	800d618 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d56e:	6878      	ldr	r0, [r7, #4]
 800d570:	f001 fb3a 	bl	800ebe8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	689b      	ldr	r3, [r3, #8]
 800d57a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d57e:	2b40      	cmp	r3, #64	@ 0x40
 800d580:	d146      	bne.n	800d610 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	3308      	adds	r3, #8
 800d588:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d58c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d590:	e853 3f00 	ldrex	r3, [r3]
 800d594:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800d598:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d59c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d5a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	3308      	adds	r3, #8
 800d5aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800d5ae:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800d5b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800d5ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800d5be:	e841 2300 	strex	r3, r2, [r1]
 800d5c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800d5c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d1d9      	bne.n	800d582 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d017      	beq.n	800d608 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5de:	4a15      	ldr	r2, [pc, #84]	@ (800d634 <HAL_UART_IRQHandler+0x2c0>)
 800d5e0:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	f7f8 fe7b 	bl	80062e4 <HAL_DMA_Abort_IT>
 800d5ee:	4603      	mov	r3, r0
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d019      	beq.n	800d628 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d5fc:	687a      	ldr	r2, [r7, #4]
 800d5fe:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800d602:	4610      	mov	r0, r2
 800d604:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d606:	e00f      	b.n	800d628 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d608:	6878      	ldr	r0, [r7, #4]
 800d60a:	f000 fa93 	bl	800db34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d60e:	e00b      	b.n	800d628 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d610:	6878      	ldr	r0, [r7, #4]
 800d612:	f000 fa8f 	bl	800db34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d616:	e007      	b.n	800d628 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d618:	6878      	ldr	r0, [r7, #4]
 800d61a:	f000 fa8b 	bl	800db34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	2200      	movs	r2, #0
 800d622:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800d626:	e26f      	b.n	800db08 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d628:	bf00      	nop
    return;
 800d62a:	e26d      	b.n	800db08 <HAL_UART_IRQHandler+0x794>
 800d62c:	10000001 	.word	0x10000001
 800d630:	04000120 	.word	0x04000120
 800d634:	0800ecb5 	.word	0x0800ecb5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d63c:	2b01      	cmp	r3, #1
 800d63e:	f040 8203 	bne.w	800da48 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d646:	f003 0310 	and.w	r3, r3, #16
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	f000 81fc 	beq.w	800da48 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d654:	f003 0310 	and.w	r3, r3, #16
 800d658:	2b00      	cmp	r3, #0
 800d65a:	f000 81f5 	beq.w	800da48 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	2210      	movs	r2, #16
 800d664:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	689b      	ldr	r3, [r3, #8]
 800d66c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d670:	2b40      	cmp	r3, #64	@ 0x40
 800d672:	f040 816d 	bne.w	800d950 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	4aa4      	ldr	r2, [pc, #656]	@ (800d910 <HAL_UART_IRQHandler+0x59c>)
 800d680:	4293      	cmp	r3, r2
 800d682:	d068      	beq.n	800d756 <HAL_UART_IRQHandler+0x3e2>
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	4aa1      	ldr	r2, [pc, #644]	@ (800d914 <HAL_UART_IRQHandler+0x5a0>)
 800d68e:	4293      	cmp	r3, r2
 800d690:	d061      	beq.n	800d756 <HAL_UART_IRQHandler+0x3e2>
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	4a9f      	ldr	r2, [pc, #636]	@ (800d918 <HAL_UART_IRQHandler+0x5a4>)
 800d69c:	4293      	cmp	r3, r2
 800d69e:	d05a      	beq.n	800d756 <HAL_UART_IRQHandler+0x3e2>
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	4a9c      	ldr	r2, [pc, #624]	@ (800d91c <HAL_UART_IRQHandler+0x5a8>)
 800d6aa:	4293      	cmp	r3, r2
 800d6ac:	d053      	beq.n	800d756 <HAL_UART_IRQHandler+0x3e2>
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	4a9a      	ldr	r2, [pc, #616]	@ (800d920 <HAL_UART_IRQHandler+0x5ac>)
 800d6b8:	4293      	cmp	r3, r2
 800d6ba:	d04c      	beq.n	800d756 <HAL_UART_IRQHandler+0x3e2>
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	4a97      	ldr	r2, [pc, #604]	@ (800d924 <HAL_UART_IRQHandler+0x5b0>)
 800d6c6:	4293      	cmp	r3, r2
 800d6c8:	d045      	beq.n	800d756 <HAL_UART_IRQHandler+0x3e2>
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	4a95      	ldr	r2, [pc, #596]	@ (800d928 <HAL_UART_IRQHandler+0x5b4>)
 800d6d4:	4293      	cmp	r3, r2
 800d6d6:	d03e      	beq.n	800d756 <HAL_UART_IRQHandler+0x3e2>
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	4a92      	ldr	r2, [pc, #584]	@ (800d92c <HAL_UART_IRQHandler+0x5b8>)
 800d6e2:	4293      	cmp	r3, r2
 800d6e4:	d037      	beq.n	800d756 <HAL_UART_IRQHandler+0x3e2>
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	4a90      	ldr	r2, [pc, #576]	@ (800d930 <HAL_UART_IRQHandler+0x5bc>)
 800d6f0:	4293      	cmp	r3, r2
 800d6f2:	d030      	beq.n	800d756 <HAL_UART_IRQHandler+0x3e2>
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	4a8d      	ldr	r2, [pc, #564]	@ (800d934 <HAL_UART_IRQHandler+0x5c0>)
 800d6fe:	4293      	cmp	r3, r2
 800d700:	d029      	beq.n	800d756 <HAL_UART_IRQHandler+0x3e2>
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	4a8b      	ldr	r2, [pc, #556]	@ (800d938 <HAL_UART_IRQHandler+0x5c4>)
 800d70c:	4293      	cmp	r3, r2
 800d70e:	d022      	beq.n	800d756 <HAL_UART_IRQHandler+0x3e2>
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	4a88      	ldr	r2, [pc, #544]	@ (800d93c <HAL_UART_IRQHandler+0x5c8>)
 800d71a:	4293      	cmp	r3, r2
 800d71c:	d01b      	beq.n	800d756 <HAL_UART_IRQHandler+0x3e2>
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	4a86      	ldr	r2, [pc, #536]	@ (800d940 <HAL_UART_IRQHandler+0x5cc>)
 800d728:	4293      	cmp	r3, r2
 800d72a:	d014      	beq.n	800d756 <HAL_UART_IRQHandler+0x3e2>
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	4a83      	ldr	r2, [pc, #524]	@ (800d944 <HAL_UART_IRQHandler+0x5d0>)
 800d736:	4293      	cmp	r3, r2
 800d738:	d00d      	beq.n	800d756 <HAL_UART_IRQHandler+0x3e2>
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	4a81      	ldr	r2, [pc, #516]	@ (800d948 <HAL_UART_IRQHandler+0x5d4>)
 800d744:	4293      	cmp	r3, r2
 800d746:	d006      	beq.n	800d756 <HAL_UART_IRQHandler+0x3e2>
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	4a7e      	ldr	r2, [pc, #504]	@ (800d94c <HAL_UART_IRQHandler+0x5d8>)
 800d752:	4293      	cmp	r3, r2
 800d754:	d106      	bne.n	800d764 <HAL_UART_IRQHandler+0x3f0>
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	685b      	ldr	r3, [r3, #4]
 800d760:	b29b      	uxth	r3, r3
 800d762:	e005      	b.n	800d770 <HAL_UART_IRQHandler+0x3fc>
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	685b      	ldr	r3, [r3, #4]
 800d76e:	b29b      	uxth	r3, r3
 800d770:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d774:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800d778:	2b00      	cmp	r3, #0
 800d77a:	f000 80ad 	beq.w	800d8d8 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d784:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d788:	429a      	cmp	r2, r3
 800d78a:	f080 80a5 	bcs.w	800d8d8 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d794:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d79e:	69db      	ldr	r3, [r3, #28]
 800d7a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d7a4:	f000 8087 	beq.w	800d8b6 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d7b4:	e853 3f00 	ldrex	r3, [r3]
 800d7b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800d7bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d7c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d7c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	461a      	mov	r2, r3
 800d7ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d7d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d7d6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7da:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d7de:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d7e2:	e841 2300 	strex	r3, r2, [r1]
 800d7e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800d7ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d1da      	bne.n	800d7a8 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	3308      	adds	r3, #8
 800d7f8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d7fc:	e853 3f00 	ldrex	r3, [r3]
 800d800:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d802:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d804:	f023 0301 	bic.w	r3, r3, #1
 800d808:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	3308      	adds	r3, #8
 800d812:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d816:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800d81a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d81c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d81e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d822:	e841 2300 	strex	r3, r2, [r1]
 800d826:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d828:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d1e1      	bne.n	800d7f2 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	3308      	adds	r3, #8
 800d834:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d836:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d838:	e853 3f00 	ldrex	r3, [r3]
 800d83c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d83e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d840:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d844:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	3308      	adds	r3, #8
 800d84e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d852:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d854:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d856:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d858:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d85a:	e841 2300 	strex	r3, r2, [r1]
 800d85e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d860:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d862:	2b00      	cmp	r3, #0
 800d864:	d1e3      	bne.n	800d82e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	2220      	movs	r2, #32
 800d86a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	2200      	movs	r2, #0
 800d872:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d87a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d87c:	e853 3f00 	ldrex	r3, [r3]
 800d880:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d882:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d884:	f023 0310 	bic.w	r3, r3, #16
 800d888:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	461a      	mov	r2, r3
 800d892:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d896:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d898:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d89a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d89c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d89e:	e841 2300 	strex	r3, r2, [r1]
 800d8a2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d8a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d1e4      	bne.n	800d874 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	f7f8 f9f9 	bl	8005ca8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	2202      	movs	r2, #2
 800d8ba:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d8c8:	b29b      	uxth	r3, r3
 800d8ca:	1ad3      	subs	r3, r2, r3
 800d8cc:	b29b      	uxth	r3, r3
 800d8ce:	4619      	mov	r1, r3
 800d8d0:	6878      	ldr	r0, [r7, #4]
 800d8d2:	f000 f939 	bl	800db48 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800d8d6:	e119      	b.n	800db0c <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d8de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d8e2:	429a      	cmp	r2, r3
 800d8e4:	f040 8112 	bne.w	800db0c <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d8ee:	69db      	ldr	r3, [r3, #28]
 800d8f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d8f4:	f040 810a 	bne.w	800db0c <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	2202      	movs	r2, #2
 800d8fc:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d904:	4619      	mov	r1, r3
 800d906:	6878      	ldr	r0, [r7, #4]
 800d908:	f000 f91e 	bl	800db48 <HAL_UARTEx_RxEventCallback>
      return;
 800d90c:	e0fe      	b.n	800db0c <HAL_UART_IRQHandler+0x798>
 800d90e:	bf00      	nop
 800d910:	40020010 	.word	0x40020010
 800d914:	40020028 	.word	0x40020028
 800d918:	40020040 	.word	0x40020040
 800d91c:	40020058 	.word	0x40020058
 800d920:	40020070 	.word	0x40020070
 800d924:	40020088 	.word	0x40020088
 800d928:	400200a0 	.word	0x400200a0
 800d92c:	400200b8 	.word	0x400200b8
 800d930:	40020410 	.word	0x40020410
 800d934:	40020428 	.word	0x40020428
 800d938:	40020440 	.word	0x40020440
 800d93c:	40020458 	.word	0x40020458
 800d940:	40020470 	.word	0x40020470
 800d944:	40020488 	.word	0x40020488
 800d948:	400204a0 	.word	0x400204a0
 800d94c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d95c:	b29b      	uxth	r3, r3
 800d95e:	1ad3      	subs	r3, r2, r3
 800d960:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d96a:	b29b      	uxth	r3, r3
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	f000 80cf 	beq.w	800db10 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 800d972:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d976:	2b00      	cmp	r3, #0
 800d978:	f000 80ca 	beq.w	800db10 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d984:	e853 3f00 	ldrex	r3, [r3]
 800d988:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d98a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d98c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d990:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	461a      	mov	r2, r3
 800d99a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d99e:	647b      	str	r3, [r7, #68]	@ 0x44
 800d9a0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9a2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d9a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d9a6:	e841 2300 	strex	r3, r2, [r1]
 800d9aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d9ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d1e4      	bne.n	800d97c <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	3308      	adds	r3, #8
 800d9b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9bc:	e853 3f00 	ldrex	r3, [r3]
 800d9c0:	623b      	str	r3, [r7, #32]
   return(result);
 800d9c2:	6a3a      	ldr	r2, [r7, #32]
 800d9c4:	4b55      	ldr	r3, [pc, #340]	@ (800db1c <HAL_UART_IRQHandler+0x7a8>)
 800d9c6:	4013      	ands	r3, r2
 800d9c8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	3308      	adds	r3, #8
 800d9d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d9d6:	633a      	str	r2, [r7, #48]	@ 0x30
 800d9d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d9dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d9de:	e841 2300 	strex	r3, r2, [r1]
 800d9e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d9e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d1e3      	bne.n	800d9b2 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	2220      	movs	r2, #32
 800d9ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	2200      	movs	r2, #0
 800d9f6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	2200      	movs	r2, #0
 800d9fc:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da04:	693b      	ldr	r3, [r7, #16]
 800da06:	e853 3f00 	ldrex	r3, [r3]
 800da0a:	60fb      	str	r3, [r7, #12]
   return(result);
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	f023 0310 	bic.w	r3, r3, #16
 800da12:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	461a      	mov	r2, r3
 800da1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800da20:	61fb      	str	r3, [r7, #28]
 800da22:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da24:	69b9      	ldr	r1, [r7, #24]
 800da26:	69fa      	ldr	r2, [r7, #28]
 800da28:	e841 2300 	strex	r3, r2, [r1]
 800da2c:	617b      	str	r3, [r7, #20]
   return(result);
 800da2e:	697b      	ldr	r3, [r7, #20]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d1e4      	bne.n	800d9fe <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	2202      	movs	r2, #2
 800da38:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800da3a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800da3e:	4619      	mov	r1, r3
 800da40:	6878      	ldr	r0, [r7, #4]
 800da42:	f000 f881 	bl	800db48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800da46:	e063      	b.n	800db10 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800da48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800da4c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800da50:	2b00      	cmp	r3, #0
 800da52:	d00e      	beq.n	800da72 <HAL_UART_IRQHandler+0x6fe>
 800da54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800da58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d008      	beq.n	800da72 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800da68:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800da6a:	6878      	ldr	r0, [r7, #4]
 800da6c:	f001 fe80 	bl	800f770 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800da70:	e051      	b.n	800db16 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800da72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800da76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d014      	beq.n	800daa8 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800da7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800da82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800da86:	2b00      	cmp	r3, #0
 800da88:	d105      	bne.n	800da96 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800da8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800da8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800da92:	2b00      	cmp	r3, #0
 800da94:	d008      	beq.n	800daa8 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d03a      	beq.n	800db14 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800daa2:	6878      	ldr	r0, [r7, #4]
 800daa4:	4798      	blx	r3
    }
    return;
 800daa6:	e035      	b.n	800db14 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800daa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800daac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d009      	beq.n	800dac8 <HAL_UART_IRQHandler+0x754>
 800dab4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dab8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d003      	beq.n	800dac8 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 800dac0:	6878      	ldr	r0, [r7, #4]
 800dac2:	f001 f909 	bl	800ecd8 <UART_EndTransmit_IT>
    return;
 800dac6:	e026      	b.n	800db16 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800dac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dacc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d009      	beq.n	800dae8 <HAL_UART_IRQHandler+0x774>
 800dad4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dad8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d003      	beq.n	800dae8 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800dae0:	6878      	ldr	r0, [r7, #4]
 800dae2:	f001 fe59 	bl	800f798 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dae6:	e016      	b.n	800db16 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800dae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800daec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d010      	beq.n	800db16 <HAL_UART_IRQHandler+0x7a2>
 800daf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	da0c      	bge.n	800db16 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800dafc:	6878      	ldr	r0, [r7, #4]
 800dafe:	f001 fe41 	bl	800f784 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800db02:	e008      	b.n	800db16 <HAL_UART_IRQHandler+0x7a2>
      return;
 800db04:	bf00      	nop
 800db06:	e006      	b.n	800db16 <HAL_UART_IRQHandler+0x7a2>
    return;
 800db08:	bf00      	nop
 800db0a:	e004      	b.n	800db16 <HAL_UART_IRQHandler+0x7a2>
      return;
 800db0c:	bf00      	nop
 800db0e:	e002      	b.n	800db16 <HAL_UART_IRQHandler+0x7a2>
      return;
 800db10:	bf00      	nop
 800db12:	e000      	b.n	800db16 <HAL_UART_IRQHandler+0x7a2>
    return;
 800db14:	bf00      	nop
  }
}
 800db16:	37e8      	adds	r7, #232	@ 0xe8
 800db18:	46bd      	mov	sp, r7
 800db1a:	bd80      	pop	{r7, pc}
 800db1c:	effffffe 	.word	0xeffffffe

0800db20 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800db20:	b480      	push	{r7}
 800db22:	b083      	sub	sp, #12
 800db24:	af00      	add	r7, sp, #0
 800db26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800db28:	bf00      	nop
 800db2a:	370c      	adds	r7, #12
 800db2c:	46bd      	mov	sp, r7
 800db2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db32:	4770      	bx	lr

0800db34 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800db34:	b480      	push	{r7}
 800db36:	b083      	sub	sp, #12
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800db3c:	bf00      	nop
 800db3e:	370c      	adds	r7, #12
 800db40:	46bd      	mov	sp, r7
 800db42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db46:	4770      	bx	lr

0800db48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800db48:	b480      	push	{r7}
 800db4a:	b083      	sub	sp, #12
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]
 800db50:	460b      	mov	r3, r1
 800db52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800db54:	bf00      	nop
 800db56:	370c      	adds	r7, #12
 800db58:	46bd      	mov	sp, r7
 800db5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db5e:	4770      	bx	lr

0800db60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800db60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800db64:	b092      	sub	sp, #72	@ 0x48
 800db66:	af00      	add	r7, sp, #0
 800db68:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800db6a:	2300      	movs	r3, #0
 800db6c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800db70:	697b      	ldr	r3, [r7, #20]
 800db72:	689a      	ldr	r2, [r3, #8]
 800db74:	697b      	ldr	r3, [r7, #20]
 800db76:	691b      	ldr	r3, [r3, #16]
 800db78:	431a      	orrs	r2, r3
 800db7a:	697b      	ldr	r3, [r7, #20]
 800db7c:	695b      	ldr	r3, [r3, #20]
 800db7e:	431a      	orrs	r2, r3
 800db80:	697b      	ldr	r3, [r7, #20]
 800db82:	69db      	ldr	r3, [r3, #28]
 800db84:	4313      	orrs	r3, r2
 800db86:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800db88:	697b      	ldr	r3, [r7, #20]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	681a      	ldr	r2, [r3, #0]
 800db8e:	4bbe      	ldr	r3, [pc, #760]	@ (800de88 <UART_SetConfig+0x328>)
 800db90:	4013      	ands	r3, r2
 800db92:	697a      	ldr	r2, [r7, #20]
 800db94:	6812      	ldr	r2, [r2, #0]
 800db96:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800db98:	430b      	orrs	r3, r1
 800db9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800db9c:	697b      	ldr	r3, [r7, #20]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	685b      	ldr	r3, [r3, #4]
 800dba2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800dba6:	697b      	ldr	r3, [r7, #20]
 800dba8:	68da      	ldr	r2, [r3, #12]
 800dbaa:	697b      	ldr	r3, [r7, #20]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	430a      	orrs	r2, r1
 800dbb0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800dbb2:	697b      	ldr	r3, [r7, #20]
 800dbb4:	699b      	ldr	r3, [r3, #24]
 800dbb6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800dbb8:	697b      	ldr	r3, [r7, #20]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	4ab3      	ldr	r2, [pc, #716]	@ (800de8c <UART_SetConfig+0x32c>)
 800dbbe:	4293      	cmp	r3, r2
 800dbc0:	d004      	beq.n	800dbcc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800dbc2:	697b      	ldr	r3, [r7, #20]
 800dbc4:	6a1b      	ldr	r3, [r3, #32]
 800dbc6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dbc8:	4313      	orrs	r3, r2
 800dbca:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800dbcc:	697b      	ldr	r3, [r7, #20]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	689a      	ldr	r2, [r3, #8]
 800dbd2:	4baf      	ldr	r3, [pc, #700]	@ (800de90 <UART_SetConfig+0x330>)
 800dbd4:	4013      	ands	r3, r2
 800dbd6:	697a      	ldr	r2, [r7, #20]
 800dbd8:	6812      	ldr	r2, [r2, #0]
 800dbda:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800dbdc:	430b      	orrs	r3, r1
 800dbde:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800dbe0:	697b      	ldr	r3, [r7, #20]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbe6:	f023 010f 	bic.w	r1, r3, #15
 800dbea:	697b      	ldr	r3, [r7, #20]
 800dbec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dbee:	697b      	ldr	r3, [r7, #20]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	430a      	orrs	r2, r1
 800dbf4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800dbf6:	697b      	ldr	r3, [r7, #20]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	4aa6      	ldr	r2, [pc, #664]	@ (800de94 <UART_SetConfig+0x334>)
 800dbfc:	4293      	cmp	r3, r2
 800dbfe:	d177      	bne.n	800dcf0 <UART_SetConfig+0x190>
 800dc00:	4ba5      	ldr	r3, [pc, #660]	@ (800de98 <UART_SetConfig+0x338>)
 800dc02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc04:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800dc08:	2b28      	cmp	r3, #40	@ 0x28
 800dc0a:	d86d      	bhi.n	800dce8 <UART_SetConfig+0x188>
 800dc0c:	a201      	add	r2, pc, #4	@ (adr r2, 800dc14 <UART_SetConfig+0xb4>)
 800dc0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc12:	bf00      	nop
 800dc14:	0800dcb9 	.word	0x0800dcb9
 800dc18:	0800dce9 	.word	0x0800dce9
 800dc1c:	0800dce9 	.word	0x0800dce9
 800dc20:	0800dce9 	.word	0x0800dce9
 800dc24:	0800dce9 	.word	0x0800dce9
 800dc28:	0800dce9 	.word	0x0800dce9
 800dc2c:	0800dce9 	.word	0x0800dce9
 800dc30:	0800dce9 	.word	0x0800dce9
 800dc34:	0800dcc1 	.word	0x0800dcc1
 800dc38:	0800dce9 	.word	0x0800dce9
 800dc3c:	0800dce9 	.word	0x0800dce9
 800dc40:	0800dce9 	.word	0x0800dce9
 800dc44:	0800dce9 	.word	0x0800dce9
 800dc48:	0800dce9 	.word	0x0800dce9
 800dc4c:	0800dce9 	.word	0x0800dce9
 800dc50:	0800dce9 	.word	0x0800dce9
 800dc54:	0800dcc9 	.word	0x0800dcc9
 800dc58:	0800dce9 	.word	0x0800dce9
 800dc5c:	0800dce9 	.word	0x0800dce9
 800dc60:	0800dce9 	.word	0x0800dce9
 800dc64:	0800dce9 	.word	0x0800dce9
 800dc68:	0800dce9 	.word	0x0800dce9
 800dc6c:	0800dce9 	.word	0x0800dce9
 800dc70:	0800dce9 	.word	0x0800dce9
 800dc74:	0800dcd1 	.word	0x0800dcd1
 800dc78:	0800dce9 	.word	0x0800dce9
 800dc7c:	0800dce9 	.word	0x0800dce9
 800dc80:	0800dce9 	.word	0x0800dce9
 800dc84:	0800dce9 	.word	0x0800dce9
 800dc88:	0800dce9 	.word	0x0800dce9
 800dc8c:	0800dce9 	.word	0x0800dce9
 800dc90:	0800dce9 	.word	0x0800dce9
 800dc94:	0800dcd9 	.word	0x0800dcd9
 800dc98:	0800dce9 	.word	0x0800dce9
 800dc9c:	0800dce9 	.word	0x0800dce9
 800dca0:	0800dce9 	.word	0x0800dce9
 800dca4:	0800dce9 	.word	0x0800dce9
 800dca8:	0800dce9 	.word	0x0800dce9
 800dcac:	0800dce9 	.word	0x0800dce9
 800dcb0:	0800dce9 	.word	0x0800dce9
 800dcb4:	0800dce1 	.word	0x0800dce1
 800dcb8:	2301      	movs	r3, #1
 800dcba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcbe:	e222      	b.n	800e106 <UART_SetConfig+0x5a6>
 800dcc0:	2304      	movs	r3, #4
 800dcc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcc6:	e21e      	b.n	800e106 <UART_SetConfig+0x5a6>
 800dcc8:	2308      	movs	r3, #8
 800dcca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcce:	e21a      	b.n	800e106 <UART_SetConfig+0x5a6>
 800dcd0:	2310      	movs	r3, #16
 800dcd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcd6:	e216      	b.n	800e106 <UART_SetConfig+0x5a6>
 800dcd8:	2320      	movs	r3, #32
 800dcda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcde:	e212      	b.n	800e106 <UART_SetConfig+0x5a6>
 800dce0:	2340      	movs	r3, #64	@ 0x40
 800dce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dce6:	e20e      	b.n	800e106 <UART_SetConfig+0x5a6>
 800dce8:	2380      	movs	r3, #128	@ 0x80
 800dcea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dcee:	e20a      	b.n	800e106 <UART_SetConfig+0x5a6>
 800dcf0:	697b      	ldr	r3, [r7, #20]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	4a69      	ldr	r2, [pc, #420]	@ (800de9c <UART_SetConfig+0x33c>)
 800dcf6:	4293      	cmp	r3, r2
 800dcf8:	d130      	bne.n	800dd5c <UART_SetConfig+0x1fc>
 800dcfa:	4b67      	ldr	r3, [pc, #412]	@ (800de98 <UART_SetConfig+0x338>)
 800dcfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dcfe:	f003 0307 	and.w	r3, r3, #7
 800dd02:	2b05      	cmp	r3, #5
 800dd04:	d826      	bhi.n	800dd54 <UART_SetConfig+0x1f4>
 800dd06:	a201      	add	r2, pc, #4	@ (adr r2, 800dd0c <UART_SetConfig+0x1ac>)
 800dd08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd0c:	0800dd25 	.word	0x0800dd25
 800dd10:	0800dd2d 	.word	0x0800dd2d
 800dd14:	0800dd35 	.word	0x0800dd35
 800dd18:	0800dd3d 	.word	0x0800dd3d
 800dd1c:	0800dd45 	.word	0x0800dd45
 800dd20:	0800dd4d 	.word	0x0800dd4d
 800dd24:	2300      	movs	r3, #0
 800dd26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd2a:	e1ec      	b.n	800e106 <UART_SetConfig+0x5a6>
 800dd2c:	2304      	movs	r3, #4
 800dd2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd32:	e1e8      	b.n	800e106 <UART_SetConfig+0x5a6>
 800dd34:	2308      	movs	r3, #8
 800dd36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd3a:	e1e4      	b.n	800e106 <UART_SetConfig+0x5a6>
 800dd3c:	2310      	movs	r3, #16
 800dd3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd42:	e1e0      	b.n	800e106 <UART_SetConfig+0x5a6>
 800dd44:	2320      	movs	r3, #32
 800dd46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd4a:	e1dc      	b.n	800e106 <UART_SetConfig+0x5a6>
 800dd4c:	2340      	movs	r3, #64	@ 0x40
 800dd4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd52:	e1d8      	b.n	800e106 <UART_SetConfig+0x5a6>
 800dd54:	2380      	movs	r3, #128	@ 0x80
 800dd56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd5a:	e1d4      	b.n	800e106 <UART_SetConfig+0x5a6>
 800dd5c:	697b      	ldr	r3, [r7, #20]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	4a4f      	ldr	r2, [pc, #316]	@ (800dea0 <UART_SetConfig+0x340>)
 800dd62:	4293      	cmp	r3, r2
 800dd64:	d130      	bne.n	800ddc8 <UART_SetConfig+0x268>
 800dd66:	4b4c      	ldr	r3, [pc, #304]	@ (800de98 <UART_SetConfig+0x338>)
 800dd68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dd6a:	f003 0307 	and.w	r3, r3, #7
 800dd6e:	2b05      	cmp	r3, #5
 800dd70:	d826      	bhi.n	800ddc0 <UART_SetConfig+0x260>
 800dd72:	a201      	add	r2, pc, #4	@ (adr r2, 800dd78 <UART_SetConfig+0x218>)
 800dd74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd78:	0800dd91 	.word	0x0800dd91
 800dd7c:	0800dd99 	.word	0x0800dd99
 800dd80:	0800dda1 	.word	0x0800dda1
 800dd84:	0800dda9 	.word	0x0800dda9
 800dd88:	0800ddb1 	.word	0x0800ddb1
 800dd8c:	0800ddb9 	.word	0x0800ddb9
 800dd90:	2300      	movs	r3, #0
 800dd92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd96:	e1b6      	b.n	800e106 <UART_SetConfig+0x5a6>
 800dd98:	2304      	movs	r3, #4
 800dd9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dd9e:	e1b2      	b.n	800e106 <UART_SetConfig+0x5a6>
 800dda0:	2308      	movs	r3, #8
 800dda2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dda6:	e1ae      	b.n	800e106 <UART_SetConfig+0x5a6>
 800dda8:	2310      	movs	r3, #16
 800ddaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ddae:	e1aa      	b.n	800e106 <UART_SetConfig+0x5a6>
 800ddb0:	2320      	movs	r3, #32
 800ddb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ddb6:	e1a6      	b.n	800e106 <UART_SetConfig+0x5a6>
 800ddb8:	2340      	movs	r3, #64	@ 0x40
 800ddba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ddbe:	e1a2      	b.n	800e106 <UART_SetConfig+0x5a6>
 800ddc0:	2380      	movs	r3, #128	@ 0x80
 800ddc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ddc6:	e19e      	b.n	800e106 <UART_SetConfig+0x5a6>
 800ddc8:	697b      	ldr	r3, [r7, #20]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	4a35      	ldr	r2, [pc, #212]	@ (800dea4 <UART_SetConfig+0x344>)
 800ddce:	4293      	cmp	r3, r2
 800ddd0:	d130      	bne.n	800de34 <UART_SetConfig+0x2d4>
 800ddd2:	4b31      	ldr	r3, [pc, #196]	@ (800de98 <UART_SetConfig+0x338>)
 800ddd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ddd6:	f003 0307 	and.w	r3, r3, #7
 800ddda:	2b05      	cmp	r3, #5
 800dddc:	d826      	bhi.n	800de2c <UART_SetConfig+0x2cc>
 800ddde:	a201      	add	r2, pc, #4	@ (adr r2, 800dde4 <UART_SetConfig+0x284>)
 800dde0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dde4:	0800ddfd 	.word	0x0800ddfd
 800dde8:	0800de05 	.word	0x0800de05
 800ddec:	0800de0d 	.word	0x0800de0d
 800ddf0:	0800de15 	.word	0x0800de15
 800ddf4:	0800de1d 	.word	0x0800de1d
 800ddf8:	0800de25 	.word	0x0800de25
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de02:	e180      	b.n	800e106 <UART_SetConfig+0x5a6>
 800de04:	2304      	movs	r3, #4
 800de06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de0a:	e17c      	b.n	800e106 <UART_SetConfig+0x5a6>
 800de0c:	2308      	movs	r3, #8
 800de0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de12:	e178      	b.n	800e106 <UART_SetConfig+0x5a6>
 800de14:	2310      	movs	r3, #16
 800de16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de1a:	e174      	b.n	800e106 <UART_SetConfig+0x5a6>
 800de1c:	2320      	movs	r3, #32
 800de1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de22:	e170      	b.n	800e106 <UART_SetConfig+0x5a6>
 800de24:	2340      	movs	r3, #64	@ 0x40
 800de26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de2a:	e16c      	b.n	800e106 <UART_SetConfig+0x5a6>
 800de2c:	2380      	movs	r3, #128	@ 0x80
 800de2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de32:	e168      	b.n	800e106 <UART_SetConfig+0x5a6>
 800de34:	697b      	ldr	r3, [r7, #20]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	4a1b      	ldr	r2, [pc, #108]	@ (800dea8 <UART_SetConfig+0x348>)
 800de3a:	4293      	cmp	r3, r2
 800de3c:	d142      	bne.n	800dec4 <UART_SetConfig+0x364>
 800de3e:	4b16      	ldr	r3, [pc, #88]	@ (800de98 <UART_SetConfig+0x338>)
 800de40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800de42:	f003 0307 	and.w	r3, r3, #7
 800de46:	2b05      	cmp	r3, #5
 800de48:	d838      	bhi.n	800debc <UART_SetConfig+0x35c>
 800de4a:	a201      	add	r2, pc, #4	@ (adr r2, 800de50 <UART_SetConfig+0x2f0>)
 800de4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de50:	0800de69 	.word	0x0800de69
 800de54:	0800de71 	.word	0x0800de71
 800de58:	0800de79 	.word	0x0800de79
 800de5c:	0800de81 	.word	0x0800de81
 800de60:	0800dead 	.word	0x0800dead
 800de64:	0800deb5 	.word	0x0800deb5
 800de68:	2300      	movs	r3, #0
 800de6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de6e:	e14a      	b.n	800e106 <UART_SetConfig+0x5a6>
 800de70:	2304      	movs	r3, #4
 800de72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de76:	e146      	b.n	800e106 <UART_SetConfig+0x5a6>
 800de78:	2308      	movs	r3, #8
 800de7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de7e:	e142      	b.n	800e106 <UART_SetConfig+0x5a6>
 800de80:	2310      	movs	r3, #16
 800de82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800de86:	e13e      	b.n	800e106 <UART_SetConfig+0x5a6>
 800de88:	cfff69f3 	.word	0xcfff69f3
 800de8c:	58000c00 	.word	0x58000c00
 800de90:	11fff4ff 	.word	0x11fff4ff
 800de94:	40011000 	.word	0x40011000
 800de98:	58024400 	.word	0x58024400
 800de9c:	40004400 	.word	0x40004400
 800dea0:	40004800 	.word	0x40004800
 800dea4:	40004c00 	.word	0x40004c00
 800dea8:	40005000 	.word	0x40005000
 800deac:	2320      	movs	r3, #32
 800deae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800deb2:	e128      	b.n	800e106 <UART_SetConfig+0x5a6>
 800deb4:	2340      	movs	r3, #64	@ 0x40
 800deb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800deba:	e124      	b.n	800e106 <UART_SetConfig+0x5a6>
 800debc:	2380      	movs	r3, #128	@ 0x80
 800debe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dec2:	e120      	b.n	800e106 <UART_SetConfig+0x5a6>
 800dec4:	697b      	ldr	r3, [r7, #20]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	4acb      	ldr	r2, [pc, #812]	@ (800e1f8 <UART_SetConfig+0x698>)
 800deca:	4293      	cmp	r3, r2
 800decc:	d176      	bne.n	800dfbc <UART_SetConfig+0x45c>
 800dece:	4bcb      	ldr	r3, [pc, #812]	@ (800e1fc <UART_SetConfig+0x69c>)
 800ded0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ded2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ded6:	2b28      	cmp	r3, #40	@ 0x28
 800ded8:	d86c      	bhi.n	800dfb4 <UART_SetConfig+0x454>
 800deda:	a201      	add	r2, pc, #4	@ (adr r2, 800dee0 <UART_SetConfig+0x380>)
 800dedc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dee0:	0800df85 	.word	0x0800df85
 800dee4:	0800dfb5 	.word	0x0800dfb5
 800dee8:	0800dfb5 	.word	0x0800dfb5
 800deec:	0800dfb5 	.word	0x0800dfb5
 800def0:	0800dfb5 	.word	0x0800dfb5
 800def4:	0800dfb5 	.word	0x0800dfb5
 800def8:	0800dfb5 	.word	0x0800dfb5
 800defc:	0800dfb5 	.word	0x0800dfb5
 800df00:	0800df8d 	.word	0x0800df8d
 800df04:	0800dfb5 	.word	0x0800dfb5
 800df08:	0800dfb5 	.word	0x0800dfb5
 800df0c:	0800dfb5 	.word	0x0800dfb5
 800df10:	0800dfb5 	.word	0x0800dfb5
 800df14:	0800dfb5 	.word	0x0800dfb5
 800df18:	0800dfb5 	.word	0x0800dfb5
 800df1c:	0800dfb5 	.word	0x0800dfb5
 800df20:	0800df95 	.word	0x0800df95
 800df24:	0800dfb5 	.word	0x0800dfb5
 800df28:	0800dfb5 	.word	0x0800dfb5
 800df2c:	0800dfb5 	.word	0x0800dfb5
 800df30:	0800dfb5 	.word	0x0800dfb5
 800df34:	0800dfb5 	.word	0x0800dfb5
 800df38:	0800dfb5 	.word	0x0800dfb5
 800df3c:	0800dfb5 	.word	0x0800dfb5
 800df40:	0800df9d 	.word	0x0800df9d
 800df44:	0800dfb5 	.word	0x0800dfb5
 800df48:	0800dfb5 	.word	0x0800dfb5
 800df4c:	0800dfb5 	.word	0x0800dfb5
 800df50:	0800dfb5 	.word	0x0800dfb5
 800df54:	0800dfb5 	.word	0x0800dfb5
 800df58:	0800dfb5 	.word	0x0800dfb5
 800df5c:	0800dfb5 	.word	0x0800dfb5
 800df60:	0800dfa5 	.word	0x0800dfa5
 800df64:	0800dfb5 	.word	0x0800dfb5
 800df68:	0800dfb5 	.word	0x0800dfb5
 800df6c:	0800dfb5 	.word	0x0800dfb5
 800df70:	0800dfb5 	.word	0x0800dfb5
 800df74:	0800dfb5 	.word	0x0800dfb5
 800df78:	0800dfb5 	.word	0x0800dfb5
 800df7c:	0800dfb5 	.word	0x0800dfb5
 800df80:	0800dfad 	.word	0x0800dfad
 800df84:	2301      	movs	r3, #1
 800df86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df8a:	e0bc      	b.n	800e106 <UART_SetConfig+0x5a6>
 800df8c:	2304      	movs	r3, #4
 800df8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df92:	e0b8      	b.n	800e106 <UART_SetConfig+0x5a6>
 800df94:	2308      	movs	r3, #8
 800df96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800df9a:	e0b4      	b.n	800e106 <UART_SetConfig+0x5a6>
 800df9c:	2310      	movs	r3, #16
 800df9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dfa2:	e0b0      	b.n	800e106 <UART_SetConfig+0x5a6>
 800dfa4:	2320      	movs	r3, #32
 800dfa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dfaa:	e0ac      	b.n	800e106 <UART_SetConfig+0x5a6>
 800dfac:	2340      	movs	r3, #64	@ 0x40
 800dfae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dfb2:	e0a8      	b.n	800e106 <UART_SetConfig+0x5a6>
 800dfb4:	2380      	movs	r3, #128	@ 0x80
 800dfb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dfba:	e0a4      	b.n	800e106 <UART_SetConfig+0x5a6>
 800dfbc:	697b      	ldr	r3, [r7, #20]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	4a8f      	ldr	r2, [pc, #572]	@ (800e200 <UART_SetConfig+0x6a0>)
 800dfc2:	4293      	cmp	r3, r2
 800dfc4:	d130      	bne.n	800e028 <UART_SetConfig+0x4c8>
 800dfc6:	4b8d      	ldr	r3, [pc, #564]	@ (800e1fc <UART_SetConfig+0x69c>)
 800dfc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dfca:	f003 0307 	and.w	r3, r3, #7
 800dfce:	2b05      	cmp	r3, #5
 800dfd0:	d826      	bhi.n	800e020 <UART_SetConfig+0x4c0>
 800dfd2:	a201      	add	r2, pc, #4	@ (adr r2, 800dfd8 <UART_SetConfig+0x478>)
 800dfd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfd8:	0800dff1 	.word	0x0800dff1
 800dfdc:	0800dff9 	.word	0x0800dff9
 800dfe0:	0800e001 	.word	0x0800e001
 800dfe4:	0800e009 	.word	0x0800e009
 800dfe8:	0800e011 	.word	0x0800e011
 800dfec:	0800e019 	.word	0x0800e019
 800dff0:	2300      	movs	r3, #0
 800dff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dff6:	e086      	b.n	800e106 <UART_SetConfig+0x5a6>
 800dff8:	2304      	movs	r3, #4
 800dffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800dffe:	e082      	b.n	800e106 <UART_SetConfig+0x5a6>
 800e000:	2308      	movs	r3, #8
 800e002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e006:	e07e      	b.n	800e106 <UART_SetConfig+0x5a6>
 800e008:	2310      	movs	r3, #16
 800e00a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e00e:	e07a      	b.n	800e106 <UART_SetConfig+0x5a6>
 800e010:	2320      	movs	r3, #32
 800e012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e016:	e076      	b.n	800e106 <UART_SetConfig+0x5a6>
 800e018:	2340      	movs	r3, #64	@ 0x40
 800e01a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e01e:	e072      	b.n	800e106 <UART_SetConfig+0x5a6>
 800e020:	2380      	movs	r3, #128	@ 0x80
 800e022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e026:	e06e      	b.n	800e106 <UART_SetConfig+0x5a6>
 800e028:	697b      	ldr	r3, [r7, #20]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	4a75      	ldr	r2, [pc, #468]	@ (800e204 <UART_SetConfig+0x6a4>)
 800e02e:	4293      	cmp	r3, r2
 800e030:	d130      	bne.n	800e094 <UART_SetConfig+0x534>
 800e032:	4b72      	ldr	r3, [pc, #456]	@ (800e1fc <UART_SetConfig+0x69c>)
 800e034:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e036:	f003 0307 	and.w	r3, r3, #7
 800e03a:	2b05      	cmp	r3, #5
 800e03c:	d826      	bhi.n	800e08c <UART_SetConfig+0x52c>
 800e03e:	a201      	add	r2, pc, #4	@ (adr r2, 800e044 <UART_SetConfig+0x4e4>)
 800e040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e044:	0800e05d 	.word	0x0800e05d
 800e048:	0800e065 	.word	0x0800e065
 800e04c:	0800e06d 	.word	0x0800e06d
 800e050:	0800e075 	.word	0x0800e075
 800e054:	0800e07d 	.word	0x0800e07d
 800e058:	0800e085 	.word	0x0800e085
 800e05c:	2300      	movs	r3, #0
 800e05e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e062:	e050      	b.n	800e106 <UART_SetConfig+0x5a6>
 800e064:	2304      	movs	r3, #4
 800e066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e06a:	e04c      	b.n	800e106 <UART_SetConfig+0x5a6>
 800e06c:	2308      	movs	r3, #8
 800e06e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e072:	e048      	b.n	800e106 <UART_SetConfig+0x5a6>
 800e074:	2310      	movs	r3, #16
 800e076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e07a:	e044      	b.n	800e106 <UART_SetConfig+0x5a6>
 800e07c:	2320      	movs	r3, #32
 800e07e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e082:	e040      	b.n	800e106 <UART_SetConfig+0x5a6>
 800e084:	2340      	movs	r3, #64	@ 0x40
 800e086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e08a:	e03c      	b.n	800e106 <UART_SetConfig+0x5a6>
 800e08c:	2380      	movs	r3, #128	@ 0x80
 800e08e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e092:	e038      	b.n	800e106 <UART_SetConfig+0x5a6>
 800e094:	697b      	ldr	r3, [r7, #20]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	4a5b      	ldr	r2, [pc, #364]	@ (800e208 <UART_SetConfig+0x6a8>)
 800e09a:	4293      	cmp	r3, r2
 800e09c:	d130      	bne.n	800e100 <UART_SetConfig+0x5a0>
 800e09e:	4b57      	ldr	r3, [pc, #348]	@ (800e1fc <UART_SetConfig+0x69c>)
 800e0a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e0a2:	f003 0307 	and.w	r3, r3, #7
 800e0a6:	2b05      	cmp	r3, #5
 800e0a8:	d826      	bhi.n	800e0f8 <UART_SetConfig+0x598>
 800e0aa:	a201      	add	r2, pc, #4	@ (adr r2, 800e0b0 <UART_SetConfig+0x550>)
 800e0ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0b0:	0800e0c9 	.word	0x0800e0c9
 800e0b4:	0800e0d1 	.word	0x0800e0d1
 800e0b8:	0800e0d9 	.word	0x0800e0d9
 800e0bc:	0800e0e1 	.word	0x0800e0e1
 800e0c0:	0800e0e9 	.word	0x0800e0e9
 800e0c4:	0800e0f1 	.word	0x0800e0f1
 800e0c8:	2302      	movs	r3, #2
 800e0ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e0ce:	e01a      	b.n	800e106 <UART_SetConfig+0x5a6>
 800e0d0:	2304      	movs	r3, #4
 800e0d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e0d6:	e016      	b.n	800e106 <UART_SetConfig+0x5a6>
 800e0d8:	2308      	movs	r3, #8
 800e0da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e0de:	e012      	b.n	800e106 <UART_SetConfig+0x5a6>
 800e0e0:	2310      	movs	r3, #16
 800e0e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e0e6:	e00e      	b.n	800e106 <UART_SetConfig+0x5a6>
 800e0e8:	2320      	movs	r3, #32
 800e0ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e0ee:	e00a      	b.n	800e106 <UART_SetConfig+0x5a6>
 800e0f0:	2340      	movs	r3, #64	@ 0x40
 800e0f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e0f6:	e006      	b.n	800e106 <UART_SetConfig+0x5a6>
 800e0f8:	2380      	movs	r3, #128	@ 0x80
 800e0fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800e0fe:	e002      	b.n	800e106 <UART_SetConfig+0x5a6>
 800e100:	2380      	movs	r3, #128	@ 0x80
 800e102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e106:	697b      	ldr	r3, [r7, #20]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	4a3f      	ldr	r2, [pc, #252]	@ (800e208 <UART_SetConfig+0x6a8>)
 800e10c:	4293      	cmp	r3, r2
 800e10e:	f040 80f8 	bne.w	800e302 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e112:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e116:	2b20      	cmp	r3, #32
 800e118:	dc46      	bgt.n	800e1a8 <UART_SetConfig+0x648>
 800e11a:	2b02      	cmp	r3, #2
 800e11c:	f2c0 8082 	blt.w	800e224 <UART_SetConfig+0x6c4>
 800e120:	3b02      	subs	r3, #2
 800e122:	2b1e      	cmp	r3, #30
 800e124:	d87e      	bhi.n	800e224 <UART_SetConfig+0x6c4>
 800e126:	a201      	add	r2, pc, #4	@ (adr r2, 800e12c <UART_SetConfig+0x5cc>)
 800e128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e12c:	0800e1af 	.word	0x0800e1af
 800e130:	0800e225 	.word	0x0800e225
 800e134:	0800e1b7 	.word	0x0800e1b7
 800e138:	0800e225 	.word	0x0800e225
 800e13c:	0800e225 	.word	0x0800e225
 800e140:	0800e225 	.word	0x0800e225
 800e144:	0800e1c7 	.word	0x0800e1c7
 800e148:	0800e225 	.word	0x0800e225
 800e14c:	0800e225 	.word	0x0800e225
 800e150:	0800e225 	.word	0x0800e225
 800e154:	0800e225 	.word	0x0800e225
 800e158:	0800e225 	.word	0x0800e225
 800e15c:	0800e225 	.word	0x0800e225
 800e160:	0800e225 	.word	0x0800e225
 800e164:	0800e1d7 	.word	0x0800e1d7
 800e168:	0800e225 	.word	0x0800e225
 800e16c:	0800e225 	.word	0x0800e225
 800e170:	0800e225 	.word	0x0800e225
 800e174:	0800e225 	.word	0x0800e225
 800e178:	0800e225 	.word	0x0800e225
 800e17c:	0800e225 	.word	0x0800e225
 800e180:	0800e225 	.word	0x0800e225
 800e184:	0800e225 	.word	0x0800e225
 800e188:	0800e225 	.word	0x0800e225
 800e18c:	0800e225 	.word	0x0800e225
 800e190:	0800e225 	.word	0x0800e225
 800e194:	0800e225 	.word	0x0800e225
 800e198:	0800e225 	.word	0x0800e225
 800e19c:	0800e225 	.word	0x0800e225
 800e1a0:	0800e225 	.word	0x0800e225
 800e1a4:	0800e217 	.word	0x0800e217
 800e1a8:	2b40      	cmp	r3, #64	@ 0x40
 800e1aa:	d037      	beq.n	800e21c <UART_SetConfig+0x6bc>
 800e1ac:	e03a      	b.n	800e224 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e1ae:	f7fd f83d 	bl	800b22c <HAL_RCCEx_GetD3PCLK1Freq>
 800e1b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e1b4:	e03c      	b.n	800e230 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e1b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	f7fd f84c 	bl	800b258 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e1c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e1c4:	e034      	b.n	800e230 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e1c6:	f107 0318 	add.w	r3, r7, #24
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	f7fd f998 	bl	800b500 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e1d0:	69fb      	ldr	r3, [r7, #28]
 800e1d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e1d4:	e02c      	b.n	800e230 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e1d6:	4b09      	ldr	r3, [pc, #36]	@ (800e1fc <UART_SetConfig+0x69c>)
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	f003 0320 	and.w	r3, r3, #32
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d016      	beq.n	800e210 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e1e2:	4b06      	ldr	r3, [pc, #24]	@ (800e1fc <UART_SetConfig+0x69c>)
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	08db      	lsrs	r3, r3, #3
 800e1e8:	f003 0303 	and.w	r3, r3, #3
 800e1ec:	4a07      	ldr	r2, [pc, #28]	@ (800e20c <UART_SetConfig+0x6ac>)
 800e1ee:	fa22 f303 	lsr.w	r3, r2, r3
 800e1f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e1f4:	e01c      	b.n	800e230 <UART_SetConfig+0x6d0>
 800e1f6:	bf00      	nop
 800e1f8:	40011400 	.word	0x40011400
 800e1fc:	58024400 	.word	0x58024400
 800e200:	40007800 	.word	0x40007800
 800e204:	40007c00 	.word	0x40007c00
 800e208:	58000c00 	.word	0x58000c00
 800e20c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800e210:	4b9d      	ldr	r3, [pc, #628]	@ (800e488 <UART_SetConfig+0x928>)
 800e212:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e214:	e00c      	b.n	800e230 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e216:	4b9d      	ldr	r3, [pc, #628]	@ (800e48c <UART_SetConfig+0x92c>)
 800e218:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e21a:	e009      	b.n	800e230 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e21c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e220:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e222:	e005      	b.n	800e230 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800e224:	2300      	movs	r3, #0
 800e226:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800e228:	2301      	movs	r3, #1
 800e22a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800e22e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e230:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e232:	2b00      	cmp	r3, #0
 800e234:	f000 81de 	beq.w	800e5f4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e238:	697b      	ldr	r3, [r7, #20]
 800e23a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e23c:	4a94      	ldr	r2, [pc, #592]	@ (800e490 <UART_SetConfig+0x930>)
 800e23e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e242:	461a      	mov	r2, r3
 800e244:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e246:	fbb3 f3f2 	udiv	r3, r3, r2
 800e24a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e24c:	697b      	ldr	r3, [r7, #20]
 800e24e:	685a      	ldr	r2, [r3, #4]
 800e250:	4613      	mov	r3, r2
 800e252:	005b      	lsls	r3, r3, #1
 800e254:	4413      	add	r3, r2
 800e256:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e258:	429a      	cmp	r2, r3
 800e25a:	d305      	bcc.n	800e268 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e25c:	697b      	ldr	r3, [r7, #20]
 800e25e:	685b      	ldr	r3, [r3, #4]
 800e260:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e262:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e264:	429a      	cmp	r2, r3
 800e266:	d903      	bls.n	800e270 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800e268:	2301      	movs	r3, #1
 800e26a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e26e:	e1c1      	b.n	800e5f4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e270:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e272:	2200      	movs	r2, #0
 800e274:	60bb      	str	r3, [r7, #8]
 800e276:	60fa      	str	r2, [r7, #12]
 800e278:	697b      	ldr	r3, [r7, #20]
 800e27a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e27c:	4a84      	ldr	r2, [pc, #528]	@ (800e490 <UART_SetConfig+0x930>)
 800e27e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e282:	b29b      	uxth	r3, r3
 800e284:	2200      	movs	r2, #0
 800e286:	603b      	str	r3, [r7, #0]
 800e288:	607a      	str	r2, [r7, #4]
 800e28a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e28e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e292:	f7f2 f88d 	bl	80003b0 <__aeabi_uldivmod>
 800e296:	4602      	mov	r2, r0
 800e298:	460b      	mov	r3, r1
 800e29a:	4610      	mov	r0, r2
 800e29c:	4619      	mov	r1, r3
 800e29e:	f04f 0200 	mov.w	r2, #0
 800e2a2:	f04f 0300 	mov.w	r3, #0
 800e2a6:	020b      	lsls	r3, r1, #8
 800e2a8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e2ac:	0202      	lsls	r2, r0, #8
 800e2ae:	6979      	ldr	r1, [r7, #20]
 800e2b0:	6849      	ldr	r1, [r1, #4]
 800e2b2:	0849      	lsrs	r1, r1, #1
 800e2b4:	2000      	movs	r0, #0
 800e2b6:	460c      	mov	r4, r1
 800e2b8:	4605      	mov	r5, r0
 800e2ba:	eb12 0804 	adds.w	r8, r2, r4
 800e2be:	eb43 0905 	adc.w	r9, r3, r5
 800e2c2:	697b      	ldr	r3, [r7, #20]
 800e2c4:	685b      	ldr	r3, [r3, #4]
 800e2c6:	2200      	movs	r2, #0
 800e2c8:	469a      	mov	sl, r3
 800e2ca:	4693      	mov	fp, r2
 800e2cc:	4652      	mov	r2, sl
 800e2ce:	465b      	mov	r3, fp
 800e2d0:	4640      	mov	r0, r8
 800e2d2:	4649      	mov	r1, r9
 800e2d4:	f7f2 f86c 	bl	80003b0 <__aeabi_uldivmod>
 800e2d8:	4602      	mov	r2, r0
 800e2da:	460b      	mov	r3, r1
 800e2dc:	4613      	mov	r3, r2
 800e2de:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e2e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e2e6:	d308      	bcc.n	800e2fa <UART_SetConfig+0x79a>
 800e2e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e2ee:	d204      	bcs.n	800e2fa <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800e2f0:	697b      	ldr	r3, [r7, #20]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e2f6:	60da      	str	r2, [r3, #12]
 800e2f8:	e17c      	b.n	800e5f4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800e2fa:	2301      	movs	r3, #1
 800e2fc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e300:	e178      	b.n	800e5f4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e302:	697b      	ldr	r3, [r7, #20]
 800e304:	69db      	ldr	r3, [r3, #28]
 800e306:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e30a:	f040 80c5 	bne.w	800e498 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800e30e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e312:	2b20      	cmp	r3, #32
 800e314:	dc48      	bgt.n	800e3a8 <UART_SetConfig+0x848>
 800e316:	2b00      	cmp	r3, #0
 800e318:	db7b      	blt.n	800e412 <UART_SetConfig+0x8b2>
 800e31a:	2b20      	cmp	r3, #32
 800e31c:	d879      	bhi.n	800e412 <UART_SetConfig+0x8b2>
 800e31e:	a201      	add	r2, pc, #4	@ (adr r2, 800e324 <UART_SetConfig+0x7c4>)
 800e320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e324:	0800e3af 	.word	0x0800e3af
 800e328:	0800e3b7 	.word	0x0800e3b7
 800e32c:	0800e413 	.word	0x0800e413
 800e330:	0800e413 	.word	0x0800e413
 800e334:	0800e3bf 	.word	0x0800e3bf
 800e338:	0800e413 	.word	0x0800e413
 800e33c:	0800e413 	.word	0x0800e413
 800e340:	0800e413 	.word	0x0800e413
 800e344:	0800e3cf 	.word	0x0800e3cf
 800e348:	0800e413 	.word	0x0800e413
 800e34c:	0800e413 	.word	0x0800e413
 800e350:	0800e413 	.word	0x0800e413
 800e354:	0800e413 	.word	0x0800e413
 800e358:	0800e413 	.word	0x0800e413
 800e35c:	0800e413 	.word	0x0800e413
 800e360:	0800e413 	.word	0x0800e413
 800e364:	0800e3df 	.word	0x0800e3df
 800e368:	0800e413 	.word	0x0800e413
 800e36c:	0800e413 	.word	0x0800e413
 800e370:	0800e413 	.word	0x0800e413
 800e374:	0800e413 	.word	0x0800e413
 800e378:	0800e413 	.word	0x0800e413
 800e37c:	0800e413 	.word	0x0800e413
 800e380:	0800e413 	.word	0x0800e413
 800e384:	0800e413 	.word	0x0800e413
 800e388:	0800e413 	.word	0x0800e413
 800e38c:	0800e413 	.word	0x0800e413
 800e390:	0800e413 	.word	0x0800e413
 800e394:	0800e413 	.word	0x0800e413
 800e398:	0800e413 	.word	0x0800e413
 800e39c:	0800e413 	.word	0x0800e413
 800e3a0:	0800e413 	.word	0x0800e413
 800e3a4:	0800e405 	.word	0x0800e405
 800e3a8:	2b40      	cmp	r3, #64	@ 0x40
 800e3aa:	d02e      	beq.n	800e40a <UART_SetConfig+0x8aa>
 800e3ac:	e031      	b.n	800e412 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e3ae:	f7fa ff87 	bl	80092c0 <HAL_RCC_GetPCLK1Freq>
 800e3b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e3b4:	e033      	b.n	800e41e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e3b6:	f7fa ff99 	bl	80092ec <HAL_RCC_GetPCLK2Freq>
 800e3ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e3bc:	e02f      	b.n	800e41e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e3be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	f7fc ff48 	bl	800b258 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e3c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e3cc:	e027      	b.n	800e41e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e3ce:	f107 0318 	add.w	r3, r7, #24
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	f7fd f894 	bl	800b500 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e3d8:	69fb      	ldr	r3, [r7, #28]
 800e3da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e3dc:	e01f      	b.n	800e41e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e3de:	4b2d      	ldr	r3, [pc, #180]	@ (800e494 <UART_SetConfig+0x934>)
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	f003 0320 	and.w	r3, r3, #32
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d009      	beq.n	800e3fe <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e3ea:	4b2a      	ldr	r3, [pc, #168]	@ (800e494 <UART_SetConfig+0x934>)
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	08db      	lsrs	r3, r3, #3
 800e3f0:	f003 0303 	and.w	r3, r3, #3
 800e3f4:	4a24      	ldr	r2, [pc, #144]	@ (800e488 <UART_SetConfig+0x928>)
 800e3f6:	fa22 f303 	lsr.w	r3, r2, r3
 800e3fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e3fc:	e00f      	b.n	800e41e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e3fe:	4b22      	ldr	r3, [pc, #136]	@ (800e488 <UART_SetConfig+0x928>)
 800e400:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e402:	e00c      	b.n	800e41e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e404:	4b21      	ldr	r3, [pc, #132]	@ (800e48c <UART_SetConfig+0x92c>)
 800e406:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e408:	e009      	b.n	800e41e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e40a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e40e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e410:	e005      	b.n	800e41e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e412:	2300      	movs	r3, #0
 800e414:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800e416:	2301      	movs	r3, #1
 800e418:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800e41c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e41e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e420:	2b00      	cmp	r3, #0
 800e422:	f000 80e7 	beq.w	800e5f4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e426:	697b      	ldr	r3, [r7, #20]
 800e428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e42a:	4a19      	ldr	r2, [pc, #100]	@ (800e490 <UART_SetConfig+0x930>)
 800e42c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e430:	461a      	mov	r2, r3
 800e432:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e434:	fbb3 f3f2 	udiv	r3, r3, r2
 800e438:	005a      	lsls	r2, r3, #1
 800e43a:	697b      	ldr	r3, [r7, #20]
 800e43c:	685b      	ldr	r3, [r3, #4]
 800e43e:	085b      	lsrs	r3, r3, #1
 800e440:	441a      	add	r2, r3
 800e442:	697b      	ldr	r3, [r7, #20]
 800e444:	685b      	ldr	r3, [r3, #4]
 800e446:	fbb2 f3f3 	udiv	r3, r2, r3
 800e44a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e44c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e44e:	2b0f      	cmp	r3, #15
 800e450:	d916      	bls.n	800e480 <UART_SetConfig+0x920>
 800e452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e454:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e458:	d212      	bcs.n	800e480 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e45a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e45c:	b29b      	uxth	r3, r3
 800e45e:	f023 030f 	bic.w	r3, r3, #15
 800e462:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e466:	085b      	lsrs	r3, r3, #1
 800e468:	b29b      	uxth	r3, r3
 800e46a:	f003 0307 	and.w	r3, r3, #7
 800e46e:	b29a      	uxth	r2, r3
 800e470:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e472:	4313      	orrs	r3, r2
 800e474:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800e476:	697b      	ldr	r3, [r7, #20]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800e47c:	60da      	str	r2, [r3, #12]
 800e47e:	e0b9      	b.n	800e5f4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e480:	2301      	movs	r3, #1
 800e482:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800e486:	e0b5      	b.n	800e5f4 <UART_SetConfig+0xa94>
 800e488:	03d09000 	.word	0x03d09000
 800e48c:	003d0900 	.word	0x003d0900
 800e490:	080127bc 	.word	0x080127bc
 800e494:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800e498:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e49c:	2b20      	cmp	r3, #32
 800e49e:	dc49      	bgt.n	800e534 <UART_SetConfig+0x9d4>
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	db7c      	blt.n	800e59e <UART_SetConfig+0xa3e>
 800e4a4:	2b20      	cmp	r3, #32
 800e4a6:	d87a      	bhi.n	800e59e <UART_SetConfig+0xa3e>
 800e4a8:	a201      	add	r2, pc, #4	@ (adr r2, 800e4b0 <UART_SetConfig+0x950>)
 800e4aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4ae:	bf00      	nop
 800e4b0:	0800e53b 	.word	0x0800e53b
 800e4b4:	0800e543 	.word	0x0800e543
 800e4b8:	0800e59f 	.word	0x0800e59f
 800e4bc:	0800e59f 	.word	0x0800e59f
 800e4c0:	0800e54b 	.word	0x0800e54b
 800e4c4:	0800e59f 	.word	0x0800e59f
 800e4c8:	0800e59f 	.word	0x0800e59f
 800e4cc:	0800e59f 	.word	0x0800e59f
 800e4d0:	0800e55b 	.word	0x0800e55b
 800e4d4:	0800e59f 	.word	0x0800e59f
 800e4d8:	0800e59f 	.word	0x0800e59f
 800e4dc:	0800e59f 	.word	0x0800e59f
 800e4e0:	0800e59f 	.word	0x0800e59f
 800e4e4:	0800e59f 	.word	0x0800e59f
 800e4e8:	0800e59f 	.word	0x0800e59f
 800e4ec:	0800e59f 	.word	0x0800e59f
 800e4f0:	0800e56b 	.word	0x0800e56b
 800e4f4:	0800e59f 	.word	0x0800e59f
 800e4f8:	0800e59f 	.word	0x0800e59f
 800e4fc:	0800e59f 	.word	0x0800e59f
 800e500:	0800e59f 	.word	0x0800e59f
 800e504:	0800e59f 	.word	0x0800e59f
 800e508:	0800e59f 	.word	0x0800e59f
 800e50c:	0800e59f 	.word	0x0800e59f
 800e510:	0800e59f 	.word	0x0800e59f
 800e514:	0800e59f 	.word	0x0800e59f
 800e518:	0800e59f 	.word	0x0800e59f
 800e51c:	0800e59f 	.word	0x0800e59f
 800e520:	0800e59f 	.word	0x0800e59f
 800e524:	0800e59f 	.word	0x0800e59f
 800e528:	0800e59f 	.word	0x0800e59f
 800e52c:	0800e59f 	.word	0x0800e59f
 800e530:	0800e591 	.word	0x0800e591
 800e534:	2b40      	cmp	r3, #64	@ 0x40
 800e536:	d02e      	beq.n	800e596 <UART_SetConfig+0xa36>
 800e538:	e031      	b.n	800e59e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e53a:	f7fa fec1 	bl	80092c0 <HAL_RCC_GetPCLK1Freq>
 800e53e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e540:	e033      	b.n	800e5aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e542:	f7fa fed3 	bl	80092ec <HAL_RCC_GetPCLK2Freq>
 800e546:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800e548:	e02f      	b.n	800e5aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e54a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e54e:	4618      	mov	r0, r3
 800e550:	f7fc fe82 	bl	800b258 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e556:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e558:	e027      	b.n	800e5aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e55a:	f107 0318 	add.w	r3, r7, #24
 800e55e:	4618      	mov	r0, r3
 800e560:	f7fc ffce 	bl	800b500 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e564:	69fb      	ldr	r3, [r7, #28]
 800e566:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e568:	e01f      	b.n	800e5aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e56a:	4b2d      	ldr	r3, [pc, #180]	@ (800e620 <UART_SetConfig+0xac0>)
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	f003 0320 	and.w	r3, r3, #32
 800e572:	2b00      	cmp	r3, #0
 800e574:	d009      	beq.n	800e58a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e576:	4b2a      	ldr	r3, [pc, #168]	@ (800e620 <UART_SetConfig+0xac0>)
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	08db      	lsrs	r3, r3, #3
 800e57c:	f003 0303 	and.w	r3, r3, #3
 800e580:	4a28      	ldr	r2, [pc, #160]	@ (800e624 <UART_SetConfig+0xac4>)
 800e582:	fa22 f303 	lsr.w	r3, r2, r3
 800e586:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e588:	e00f      	b.n	800e5aa <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800e58a:	4b26      	ldr	r3, [pc, #152]	@ (800e624 <UART_SetConfig+0xac4>)
 800e58c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e58e:	e00c      	b.n	800e5aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e590:	4b25      	ldr	r3, [pc, #148]	@ (800e628 <UART_SetConfig+0xac8>)
 800e592:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e594:	e009      	b.n	800e5aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e596:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e59a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e59c:	e005      	b.n	800e5aa <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800e59e:	2300      	movs	r3, #0
 800e5a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800e5a2:	2301      	movs	r3, #1
 800e5a4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800e5a8:	bf00      	nop
    }

    if (pclk != 0U)
 800e5aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d021      	beq.n	800e5f4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e5b0:	697b      	ldr	r3, [r7, #20]
 800e5b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e5b4:	4a1d      	ldr	r2, [pc, #116]	@ (800e62c <UART_SetConfig+0xacc>)
 800e5b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e5ba:	461a      	mov	r2, r3
 800e5bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e5be:	fbb3 f2f2 	udiv	r2, r3, r2
 800e5c2:	697b      	ldr	r3, [r7, #20]
 800e5c4:	685b      	ldr	r3, [r3, #4]
 800e5c6:	085b      	lsrs	r3, r3, #1
 800e5c8:	441a      	add	r2, r3
 800e5ca:	697b      	ldr	r3, [r7, #20]
 800e5cc:	685b      	ldr	r3, [r3, #4]
 800e5ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800e5d2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e5d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5d6:	2b0f      	cmp	r3, #15
 800e5d8:	d909      	bls.n	800e5ee <UART_SetConfig+0xa8e>
 800e5da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e5e0:	d205      	bcs.n	800e5ee <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e5e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5e4:	b29a      	uxth	r2, r3
 800e5e6:	697b      	ldr	r3, [r7, #20]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	60da      	str	r2, [r3, #12]
 800e5ec:	e002      	b.n	800e5f4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e5ee:	2301      	movs	r3, #1
 800e5f0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e5f4:	697b      	ldr	r3, [r7, #20]
 800e5f6:	2201      	movs	r2, #1
 800e5f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800e5fc:	697b      	ldr	r3, [r7, #20]
 800e5fe:	2201      	movs	r2, #1
 800e600:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e604:	697b      	ldr	r3, [r7, #20]
 800e606:	2200      	movs	r2, #0
 800e608:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800e60a:	697b      	ldr	r3, [r7, #20]
 800e60c:	2200      	movs	r2, #0
 800e60e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800e610:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800e614:	4618      	mov	r0, r3
 800e616:	3748      	adds	r7, #72	@ 0x48
 800e618:	46bd      	mov	sp, r7
 800e61a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e61e:	bf00      	nop
 800e620:	58024400 	.word	0x58024400
 800e624:	03d09000 	.word	0x03d09000
 800e628:	003d0900 	.word	0x003d0900
 800e62c:	080127bc 	.word	0x080127bc

0800e630 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e630:	b480      	push	{r7}
 800e632:	b083      	sub	sp, #12
 800e634:	af00      	add	r7, sp, #0
 800e636:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e63c:	f003 0308 	and.w	r3, r3, #8
 800e640:	2b00      	cmp	r3, #0
 800e642:	d00a      	beq.n	800e65a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	685b      	ldr	r3, [r3, #4]
 800e64a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	430a      	orrs	r2, r1
 800e658:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e65e:	f003 0301 	and.w	r3, r3, #1
 800e662:	2b00      	cmp	r3, #0
 800e664:	d00a      	beq.n	800e67c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	685b      	ldr	r3, [r3, #4]
 800e66c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	430a      	orrs	r2, r1
 800e67a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e680:	f003 0302 	and.w	r3, r3, #2
 800e684:	2b00      	cmp	r3, #0
 800e686:	d00a      	beq.n	800e69e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	685b      	ldr	r3, [r3, #4]
 800e68e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	430a      	orrs	r2, r1
 800e69c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e6a2:	f003 0304 	and.w	r3, r3, #4
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d00a      	beq.n	800e6c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	685b      	ldr	r3, [r3, #4]
 800e6b0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	430a      	orrs	r2, r1
 800e6be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e6c4:	f003 0310 	and.w	r3, r3, #16
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d00a      	beq.n	800e6e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	689b      	ldr	r3, [r3, #8]
 800e6d2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	430a      	orrs	r2, r1
 800e6e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e6e6:	f003 0320 	and.w	r3, r3, #32
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d00a      	beq.n	800e704 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	689b      	ldr	r3, [r3, #8]
 800e6f4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	430a      	orrs	r2, r1
 800e702:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e708:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d01a      	beq.n	800e746 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	685b      	ldr	r3, [r3, #4]
 800e716:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	430a      	orrs	r2, r1
 800e724:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e72a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e72e:	d10a      	bne.n	800e746 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	685b      	ldr	r3, [r3, #4]
 800e736:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	430a      	orrs	r2, r1
 800e744:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e74a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d00a      	beq.n	800e768 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	685b      	ldr	r3, [r3, #4]
 800e758:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	430a      	orrs	r2, r1
 800e766:	605a      	str	r2, [r3, #4]
  }
}
 800e768:	bf00      	nop
 800e76a:	370c      	adds	r7, #12
 800e76c:	46bd      	mov	sp, r7
 800e76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e772:	4770      	bx	lr

0800e774 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e774:	b580      	push	{r7, lr}
 800e776:	b098      	sub	sp, #96	@ 0x60
 800e778:	af02      	add	r7, sp, #8
 800e77a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	2200      	movs	r2, #0
 800e780:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e784:	f7f4 fe02 	bl	800338c <HAL_GetTick>
 800e788:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	f003 0308 	and.w	r3, r3, #8
 800e794:	2b08      	cmp	r3, #8
 800e796:	d12f      	bne.n	800e7f8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e798:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e79c:	9300      	str	r3, [sp, #0]
 800e79e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e7a0:	2200      	movs	r2, #0
 800e7a2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800e7a6:	6878      	ldr	r0, [r7, #4]
 800e7a8:	f000 f88e 	bl	800e8c8 <UART_WaitOnFlagUntilTimeout>
 800e7ac:	4603      	mov	r3, r0
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d022      	beq.n	800e7f8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7ba:	e853 3f00 	ldrex	r3, [r3]
 800e7be:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e7c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e7c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e7c6:	653b      	str	r3, [r7, #80]	@ 0x50
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	461a      	mov	r2, r3
 800e7ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e7d0:	647b      	str	r3, [r7, #68]	@ 0x44
 800e7d2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e7d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e7d8:	e841 2300 	strex	r3, r2, [r1]
 800e7dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e7de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d1e6      	bne.n	800e7b2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	2220      	movs	r2, #32
 800e7e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	2200      	movs	r2, #0
 800e7f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e7f4:	2303      	movs	r3, #3
 800e7f6:	e063      	b.n	800e8c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	f003 0304 	and.w	r3, r3, #4
 800e802:	2b04      	cmp	r3, #4
 800e804:	d149      	bne.n	800e89a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e806:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e80a:	9300      	str	r3, [sp, #0]
 800e80c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e80e:	2200      	movs	r2, #0
 800e810:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800e814:	6878      	ldr	r0, [r7, #4]
 800e816:	f000 f857 	bl	800e8c8 <UART_WaitOnFlagUntilTimeout>
 800e81a:	4603      	mov	r3, r0
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d03c      	beq.n	800e89a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e828:	e853 3f00 	ldrex	r3, [r3]
 800e82c:	623b      	str	r3, [r7, #32]
   return(result);
 800e82e:	6a3b      	ldr	r3, [r7, #32]
 800e830:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e834:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	461a      	mov	r2, r3
 800e83c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e83e:	633b      	str	r3, [r7, #48]	@ 0x30
 800e840:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e842:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e844:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e846:	e841 2300 	strex	r3, r2, [r1]
 800e84a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e84c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d1e6      	bne.n	800e820 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	3308      	adds	r3, #8
 800e858:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e85a:	693b      	ldr	r3, [r7, #16]
 800e85c:	e853 3f00 	ldrex	r3, [r3]
 800e860:	60fb      	str	r3, [r7, #12]
   return(result);
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	f023 0301 	bic.w	r3, r3, #1
 800e868:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	3308      	adds	r3, #8
 800e870:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e872:	61fa      	str	r2, [r7, #28]
 800e874:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e876:	69b9      	ldr	r1, [r7, #24]
 800e878:	69fa      	ldr	r2, [r7, #28]
 800e87a:	e841 2300 	strex	r3, r2, [r1]
 800e87e:	617b      	str	r3, [r7, #20]
   return(result);
 800e880:	697b      	ldr	r3, [r7, #20]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d1e5      	bne.n	800e852 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	2220      	movs	r2, #32
 800e88a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	2200      	movs	r2, #0
 800e892:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e896:	2303      	movs	r3, #3
 800e898:	e012      	b.n	800e8c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	2220      	movs	r2, #32
 800e89e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	2220      	movs	r2, #32
 800e8a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	2200      	movs	r2, #0
 800e8ae:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e8be:	2300      	movs	r3, #0
}
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	3758      	adds	r7, #88	@ 0x58
 800e8c4:	46bd      	mov	sp, r7
 800e8c6:	bd80      	pop	{r7, pc}

0800e8c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	b084      	sub	sp, #16
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	60f8      	str	r0, [r7, #12]
 800e8d0:	60b9      	str	r1, [r7, #8]
 800e8d2:	603b      	str	r3, [r7, #0]
 800e8d4:	4613      	mov	r3, r2
 800e8d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e8d8:	e04f      	b.n	800e97a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e8da:	69bb      	ldr	r3, [r7, #24]
 800e8dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8e0:	d04b      	beq.n	800e97a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e8e2:	f7f4 fd53 	bl	800338c <HAL_GetTick>
 800e8e6:	4602      	mov	r2, r0
 800e8e8:	683b      	ldr	r3, [r7, #0]
 800e8ea:	1ad3      	subs	r3, r2, r3
 800e8ec:	69ba      	ldr	r2, [r7, #24]
 800e8ee:	429a      	cmp	r2, r3
 800e8f0:	d302      	bcc.n	800e8f8 <UART_WaitOnFlagUntilTimeout+0x30>
 800e8f2:	69bb      	ldr	r3, [r7, #24]
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d101      	bne.n	800e8fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e8f8:	2303      	movs	r3, #3
 800e8fa:	e04e      	b.n	800e99a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	f003 0304 	and.w	r3, r3, #4
 800e906:	2b00      	cmp	r3, #0
 800e908:	d037      	beq.n	800e97a <UART_WaitOnFlagUntilTimeout+0xb2>
 800e90a:	68bb      	ldr	r3, [r7, #8]
 800e90c:	2b80      	cmp	r3, #128	@ 0x80
 800e90e:	d034      	beq.n	800e97a <UART_WaitOnFlagUntilTimeout+0xb2>
 800e910:	68bb      	ldr	r3, [r7, #8]
 800e912:	2b40      	cmp	r3, #64	@ 0x40
 800e914:	d031      	beq.n	800e97a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	69db      	ldr	r3, [r3, #28]
 800e91c:	f003 0308 	and.w	r3, r3, #8
 800e920:	2b08      	cmp	r3, #8
 800e922:	d110      	bne.n	800e946 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	2208      	movs	r2, #8
 800e92a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e92c:	68f8      	ldr	r0, [r7, #12]
 800e92e:	f000 f95b 	bl	800ebe8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	2208      	movs	r2, #8
 800e936:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	2200      	movs	r2, #0
 800e93e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800e942:	2301      	movs	r3, #1
 800e944:	e029      	b.n	800e99a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	69db      	ldr	r3, [r3, #28]
 800e94c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e950:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e954:	d111      	bne.n	800e97a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e95e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e960:	68f8      	ldr	r0, [r7, #12]
 800e962:	f000 f941 	bl	800ebe8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	2220      	movs	r2, #32
 800e96a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	2200      	movs	r2, #0
 800e972:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800e976:	2303      	movs	r3, #3
 800e978:	e00f      	b.n	800e99a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	69da      	ldr	r2, [r3, #28]
 800e980:	68bb      	ldr	r3, [r7, #8]
 800e982:	4013      	ands	r3, r2
 800e984:	68ba      	ldr	r2, [r7, #8]
 800e986:	429a      	cmp	r2, r3
 800e988:	bf0c      	ite	eq
 800e98a:	2301      	moveq	r3, #1
 800e98c:	2300      	movne	r3, #0
 800e98e:	b2db      	uxtb	r3, r3
 800e990:	461a      	mov	r2, r3
 800e992:	79fb      	ldrb	r3, [r7, #7]
 800e994:	429a      	cmp	r2, r3
 800e996:	d0a0      	beq.n	800e8da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e998:	2300      	movs	r3, #0
}
 800e99a:	4618      	mov	r0, r3
 800e99c:	3710      	adds	r7, #16
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	bd80      	pop	{r7, pc}
	...

0800e9a4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e9a4:	b480      	push	{r7}
 800e9a6:	b0a3      	sub	sp, #140	@ 0x8c
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	60f8      	str	r0, [r7, #12]
 800e9ac:	60b9      	str	r1, [r7, #8]
 800e9ae:	4613      	mov	r3, r2
 800e9b0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	68ba      	ldr	r2, [r7, #8]
 800e9b6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	88fa      	ldrh	r2, [r7, #6]
 800e9bc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	88fa      	ldrh	r2, [r7, #6]
 800e9c4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	2200      	movs	r2, #0
 800e9cc:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	689b      	ldr	r3, [r3, #8]
 800e9d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e9d6:	d10e      	bne.n	800e9f6 <UART_Start_Receive_IT+0x52>
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	691b      	ldr	r3, [r3, #16]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d105      	bne.n	800e9ec <UART_Start_Receive_IT+0x48>
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800e9e6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e9ea:	e02d      	b.n	800ea48 <UART_Start_Receive_IT+0xa4>
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	22ff      	movs	r2, #255	@ 0xff
 800e9f0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e9f4:	e028      	b.n	800ea48 <UART_Start_Receive_IT+0xa4>
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	689b      	ldr	r3, [r3, #8]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d10d      	bne.n	800ea1a <UART_Start_Receive_IT+0x76>
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	691b      	ldr	r3, [r3, #16]
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d104      	bne.n	800ea10 <UART_Start_Receive_IT+0x6c>
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	22ff      	movs	r2, #255	@ 0xff
 800ea0a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ea0e:	e01b      	b.n	800ea48 <UART_Start_Receive_IT+0xa4>
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	227f      	movs	r2, #127	@ 0x7f
 800ea14:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ea18:	e016      	b.n	800ea48 <UART_Start_Receive_IT+0xa4>
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	689b      	ldr	r3, [r3, #8]
 800ea1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ea22:	d10d      	bne.n	800ea40 <UART_Start_Receive_IT+0x9c>
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	691b      	ldr	r3, [r3, #16]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d104      	bne.n	800ea36 <UART_Start_Receive_IT+0x92>
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	227f      	movs	r2, #127	@ 0x7f
 800ea30:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ea34:	e008      	b.n	800ea48 <UART_Start_Receive_IT+0xa4>
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	223f      	movs	r2, #63	@ 0x3f
 800ea3a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ea3e:	e003      	b.n	800ea48 <UART_Start_Receive_IT+0xa4>
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	2200      	movs	r2, #0
 800ea44:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	2200      	movs	r2, #0
 800ea4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	2222      	movs	r2, #34	@ 0x22
 800ea54:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	3308      	adds	r3, #8
 800ea5e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea60:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ea62:	e853 3f00 	ldrex	r3, [r3]
 800ea66:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800ea68:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ea6a:	f043 0301 	orr.w	r3, r3, #1
 800ea6e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	3308      	adds	r3, #8
 800ea78:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800ea7c:	673a      	str	r2, [r7, #112]	@ 0x70
 800ea7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea80:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800ea82:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800ea84:	e841 2300 	strex	r3, r2, [r1]
 800ea88:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800ea8a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d1e3      	bne.n	800ea58 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ea94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ea98:	d14f      	bne.n	800eb3a <UART_Start_Receive_IT+0x196>
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800eaa0:	88fa      	ldrh	r2, [r7, #6]
 800eaa2:	429a      	cmp	r2, r3
 800eaa4:	d349      	bcc.n	800eb3a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	689b      	ldr	r3, [r3, #8]
 800eaaa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800eaae:	d107      	bne.n	800eac0 <UART_Start_Receive_IT+0x11c>
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	691b      	ldr	r3, [r3, #16]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d103      	bne.n	800eac0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	4a47      	ldr	r2, [pc, #284]	@ (800ebd8 <UART_Start_Receive_IT+0x234>)
 800eabc:	675a      	str	r2, [r3, #116]	@ 0x74
 800eabe:	e002      	b.n	800eac6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	4a46      	ldr	r2, [pc, #280]	@ (800ebdc <UART_Start_Receive_IT+0x238>)
 800eac4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	691b      	ldr	r3, [r3, #16]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d01a      	beq.n	800eb04 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ead4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ead6:	e853 3f00 	ldrex	r3, [r3]
 800eada:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800eadc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eade:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800eae2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	461a      	mov	r2, r3
 800eaec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800eaf0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800eaf2:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eaf4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800eaf6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800eaf8:	e841 2300 	strex	r3, r2, [r1]
 800eafc:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800eafe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d1e4      	bne.n	800eace <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	3308      	adds	r3, #8
 800eb0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eb0e:	e853 3f00 	ldrex	r3, [r3]
 800eb12:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800eb14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800eb1a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	3308      	adds	r3, #8
 800eb22:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800eb24:	64ba      	str	r2, [r7, #72]	@ 0x48
 800eb26:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb28:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800eb2a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800eb2c:	e841 2300 	strex	r3, r2, [r1]
 800eb30:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800eb32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d1e5      	bne.n	800eb04 <UART_Start_Receive_IT+0x160>
 800eb38:	e046      	b.n	800ebc8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	689b      	ldr	r3, [r3, #8]
 800eb3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800eb42:	d107      	bne.n	800eb54 <UART_Start_Receive_IT+0x1b0>
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	691b      	ldr	r3, [r3, #16]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d103      	bne.n	800eb54 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	4a24      	ldr	r2, [pc, #144]	@ (800ebe0 <UART_Start_Receive_IT+0x23c>)
 800eb50:	675a      	str	r2, [r3, #116]	@ 0x74
 800eb52:	e002      	b.n	800eb5a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	4a23      	ldr	r2, [pc, #140]	@ (800ebe4 <UART_Start_Receive_IT+0x240>)
 800eb58:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	691b      	ldr	r3, [r3, #16]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d019      	beq.n	800eb96 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb6a:	e853 3f00 	ldrex	r3, [r3]
 800eb6e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800eb70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb72:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800eb76:	677b      	str	r3, [r7, #116]	@ 0x74
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	461a      	mov	r2, r3
 800eb7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800eb80:	637b      	str	r3, [r7, #52]	@ 0x34
 800eb82:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb84:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800eb86:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800eb88:	e841 2300 	strex	r3, r2, [r1]
 800eb8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800eb8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d1e6      	bne.n	800eb62 <UART_Start_Receive_IT+0x1be>
 800eb94:	e018      	b.n	800ebc8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb9c:	697b      	ldr	r3, [r7, #20]
 800eb9e:	e853 3f00 	ldrex	r3, [r3]
 800eba2:	613b      	str	r3, [r7, #16]
   return(result);
 800eba4:	693b      	ldr	r3, [r7, #16]
 800eba6:	f043 0320 	orr.w	r3, r3, #32
 800ebaa:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	461a      	mov	r2, r3
 800ebb2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ebb4:	623b      	str	r3, [r7, #32]
 800ebb6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebb8:	69f9      	ldr	r1, [r7, #28]
 800ebba:	6a3a      	ldr	r2, [r7, #32]
 800ebbc:	e841 2300 	strex	r3, r2, [r1]
 800ebc0:	61bb      	str	r3, [r7, #24]
   return(result);
 800ebc2:	69bb      	ldr	r3, [r7, #24]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d1e6      	bne.n	800eb96 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800ebc8:	2300      	movs	r3, #0
}
 800ebca:	4618      	mov	r0, r3
 800ebcc:	378c      	adds	r7, #140	@ 0x8c
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd4:	4770      	bx	lr
 800ebd6:	bf00      	nop
 800ebd8:	0800f405 	.word	0x0800f405
 800ebdc:	0800f0a1 	.word	0x0800f0a1
 800ebe0:	0800eee9 	.word	0x0800eee9
 800ebe4:	0800ed31 	.word	0x0800ed31

0800ebe8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ebe8:	b480      	push	{r7}
 800ebea:	b095      	sub	sp, #84	@ 0x54
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ebf8:	e853 3f00 	ldrex	r3, [r3]
 800ebfc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ebfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ec04:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	461a      	mov	r2, r3
 800ec0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ec0e:	643b      	str	r3, [r7, #64]	@ 0x40
 800ec10:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec12:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ec14:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ec16:	e841 2300 	strex	r3, r2, [r1]
 800ec1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ec1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d1e6      	bne.n	800ebf0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	3308      	adds	r3, #8
 800ec28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec2a:	6a3b      	ldr	r3, [r7, #32]
 800ec2c:	e853 3f00 	ldrex	r3, [r3]
 800ec30:	61fb      	str	r3, [r7, #28]
   return(result);
 800ec32:	69fa      	ldr	r2, [r7, #28]
 800ec34:	4b1e      	ldr	r3, [pc, #120]	@ (800ecb0 <UART_EndRxTransfer+0xc8>)
 800ec36:	4013      	ands	r3, r2
 800ec38:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	3308      	adds	r3, #8
 800ec40:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ec42:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ec44:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ec48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ec4a:	e841 2300 	strex	r3, r2, [r1]
 800ec4e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ec50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d1e5      	bne.n	800ec22 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ec5a:	2b01      	cmp	r3, #1
 800ec5c:	d118      	bne.n	800ec90 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	e853 3f00 	ldrex	r3, [r3]
 800ec6a:	60bb      	str	r3, [r7, #8]
   return(result);
 800ec6c:	68bb      	ldr	r3, [r7, #8]
 800ec6e:	f023 0310 	bic.w	r3, r3, #16
 800ec72:	647b      	str	r3, [r7, #68]	@ 0x44
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	461a      	mov	r2, r3
 800ec7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ec7c:	61bb      	str	r3, [r7, #24]
 800ec7e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec80:	6979      	ldr	r1, [r7, #20]
 800ec82:	69ba      	ldr	r2, [r7, #24]
 800ec84:	e841 2300 	strex	r3, r2, [r1]
 800ec88:	613b      	str	r3, [r7, #16]
   return(result);
 800ec8a:	693b      	ldr	r3, [r7, #16]
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d1e6      	bne.n	800ec5e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	2220      	movs	r2, #32
 800ec94:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	2200      	movs	r2, #0
 800ec9c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	2200      	movs	r2, #0
 800eca2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800eca4:	bf00      	nop
 800eca6:	3754      	adds	r7, #84	@ 0x54
 800eca8:	46bd      	mov	sp, r7
 800ecaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecae:	4770      	bx	lr
 800ecb0:	effffffe 	.word	0xeffffffe

0800ecb4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ecb4:	b580      	push	{r7, lr}
 800ecb6:	b084      	sub	sp, #16
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ecc0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	2200      	movs	r2, #0
 800ecc6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ecca:	68f8      	ldr	r0, [r7, #12]
 800eccc:	f7fe ff32 	bl	800db34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ecd0:	bf00      	nop
 800ecd2:	3710      	adds	r7, #16
 800ecd4:	46bd      	mov	sp, r7
 800ecd6:	bd80      	pop	{r7, pc}

0800ecd8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ecd8:	b580      	push	{r7, lr}
 800ecda:	b088      	sub	sp, #32
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	e853 3f00 	ldrex	r3, [r3]
 800ecec:	60bb      	str	r3, [r7, #8]
   return(result);
 800ecee:	68bb      	ldr	r3, [r7, #8]
 800ecf0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ecf4:	61fb      	str	r3, [r7, #28]
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	461a      	mov	r2, r3
 800ecfc:	69fb      	ldr	r3, [r7, #28]
 800ecfe:	61bb      	str	r3, [r7, #24]
 800ed00:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed02:	6979      	ldr	r1, [r7, #20]
 800ed04:	69ba      	ldr	r2, [r7, #24]
 800ed06:	e841 2300 	strex	r3, r2, [r1]
 800ed0a:	613b      	str	r3, [r7, #16]
   return(result);
 800ed0c:	693b      	ldr	r3, [r7, #16]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d1e6      	bne.n	800ece0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	2220      	movs	r2, #32
 800ed16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	2200      	movs	r2, #0
 800ed1e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ed20:	6878      	ldr	r0, [r7, #4]
 800ed22:	f7fe fefd 	bl	800db20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ed26:	bf00      	nop
 800ed28:	3720      	adds	r7, #32
 800ed2a:	46bd      	mov	sp, r7
 800ed2c:	bd80      	pop	{r7, pc}
	...

0800ed30 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ed30:	b580      	push	{r7, lr}
 800ed32:	b09c      	sub	sp, #112	@ 0x70
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ed3e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ed48:	2b22      	cmp	r3, #34	@ 0x22
 800ed4a:	f040 80be 	bne.w	800eeca <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed54:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ed58:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800ed5c:	b2d9      	uxtb	r1, r3
 800ed5e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800ed62:	b2da      	uxtb	r2, r3
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ed68:	400a      	ands	r2, r1
 800ed6a:	b2d2      	uxtb	r2, r2
 800ed6c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ed72:	1c5a      	adds	r2, r3, #1
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ed7e:	b29b      	uxth	r3, r3
 800ed80:	3b01      	subs	r3, #1
 800ed82:	b29a      	uxth	r2, r3
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ed90:	b29b      	uxth	r3, r3
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	f040 80a1 	bne.w	800eeda <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eda0:	e853 3f00 	ldrex	r3, [r3]
 800eda4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800eda6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800eda8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800edac:	66bb      	str	r3, [r7, #104]	@ 0x68
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	461a      	mov	r2, r3
 800edb4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800edb6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800edb8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800edbc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800edbe:	e841 2300 	strex	r3, r2, [r1]
 800edc2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800edc4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d1e6      	bne.n	800ed98 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	3308      	adds	r3, #8
 800edd0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800edd4:	e853 3f00 	ldrex	r3, [r3]
 800edd8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800edda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eddc:	f023 0301 	bic.w	r3, r3, #1
 800ede0:	667b      	str	r3, [r7, #100]	@ 0x64
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	3308      	adds	r3, #8
 800ede8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800edea:	647a      	str	r2, [r7, #68]	@ 0x44
 800edec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800edf0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800edf2:	e841 2300 	strex	r3, r2, [r1]
 800edf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800edf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d1e5      	bne.n	800edca <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	2220      	movs	r2, #32
 800ee02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	2200      	movs	r2, #0
 800ee0a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	2200      	movs	r2, #0
 800ee10:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	4a33      	ldr	r2, [pc, #204]	@ (800eee4 <UART_RxISR_8BIT+0x1b4>)
 800ee18:	4293      	cmp	r3, r2
 800ee1a:	d01f      	beq.n	800ee5c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	685b      	ldr	r3, [r3, #4]
 800ee22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d018      	beq.n	800ee5c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee32:	e853 3f00 	ldrex	r3, [r3]
 800ee36:	623b      	str	r3, [r7, #32]
   return(result);
 800ee38:	6a3b      	ldr	r3, [r7, #32]
 800ee3a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ee3e:	663b      	str	r3, [r7, #96]	@ 0x60
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	461a      	mov	r2, r3
 800ee46:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ee48:	633b      	str	r3, [r7, #48]	@ 0x30
 800ee4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee4c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ee4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ee50:	e841 2300 	strex	r3, r2, [r1]
 800ee54:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ee56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d1e6      	bne.n	800ee2a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ee60:	2b01      	cmp	r3, #1
 800ee62:	d12e      	bne.n	800eec2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	2200      	movs	r2, #0
 800ee68:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee70:	693b      	ldr	r3, [r7, #16]
 800ee72:	e853 3f00 	ldrex	r3, [r3]
 800ee76:	60fb      	str	r3, [r7, #12]
   return(result);
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	f023 0310 	bic.w	r3, r3, #16
 800ee7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	461a      	mov	r2, r3
 800ee86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ee88:	61fb      	str	r3, [r7, #28]
 800ee8a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee8c:	69b9      	ldr	r1, [r7, #24]
 800ee8e:	69fa      	ldr	r2, [r7, #28]
 800ee90:	e841 2300 	strex	r3, r2, [r1]
 800ee94:	617b      	str	r3, [r7, #20]
   return(result);
 800ee96:	697b      	ldr	r3, [r7, #20]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d1e6      	bne.n	800ee6a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	69db      	ldr	r3, [r3, #28]
 800eea2:	f003 0310 	and.w	r3, r3, #16
 800eea6:	2b10      	cmp	r3, #16
 800eea8:	d103      	bne.n	800eeb2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	2210      	movs	r2, #16
 800eeb0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800eeb8:	4619      	mov	r1, r3
 800eeba:	6878      	ldr	r0, [r7, #4]
 800eebc:	f7fe fe44 	bl	800db48 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800eec0:	e00b      	b.n	800eeda <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800eec2:	6878      	ldr	r0, [r7, #4]
 800eec4:	f7f3 fe7c 	bl	8002bc0 <HAL_UART_RxCpltCallback>
}
 800eec8:	e007      	b.n	800eeda <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	699a      	ldr	r2, [r3, #24]
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	f042 0208 	orr.w	r2, r2, #8
 800eed8:	619a      	str	r2, [r3, #24]
}
 800eeda:	bf00      	nop
 800eedc:	3770      	adds	r7, #112	@ 0x70
 800eede:	46bd      	mov	sp, r7
 800eee0:	bd80      	pop	{r7, pc}
 800eee2:	bf00      	nop
 800eee4:	58000c00 	.word	0x58000c00

0800eee8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800eee8:	b580      	push	{r7, lr}
 800eeea:	b09c      	sub	sp, #112	@ 0x70
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800eef6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ef00:	2b22      	cmp	r3, #34	@ 0x22
 800ef02:	f040 80be 	bne.w	800f082 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef0c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ef14:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800ef16:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800ef1a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800ef1e:	4013      	ands	r3, r2
 800ef20:	b29a      	uxth	r2, r3
 800ef22:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ef24:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ef2a:	1c9a      	adds	r2, r3, #2
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ef36:	b29b      	uxth	r3, r3
 800ef38:	3b01      	subs	r3, #1
 800ef3a:	b29a      	uxth	r2, r3
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ef48:	b29b      	uxth	r3, r3
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	f040 80a1 	bne.w	800f092 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ef58:	e853 3f00 	ldrex	r3, [r3]
 800ef5c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ef5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ef60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ef64:	667b      	str	r3, [r7, #100]	@ 0x64
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	461a      	mov	r2, r3
 800ef6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ef6e:	657b      	str	r3, [r7, #84]	@ 0x54
 800ef70:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef72:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ef74:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ef76:	e841 2300 	strex	r3, r2, [r1]
 800ef7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ef7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d1e6      	bne.n	800ef50 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	3308      	adds	r3, #8
 800ef88:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef8c:	e853 3f00 	ldrex	r3, [r3]
 800ef90:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ef92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef94:	f023 0301 	bic.w	r3, r3, #1
 800ef98:	663b      	str	r3, [r7, #96]	@ 0x60
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	3308      	adds	r3, #8
 800efa0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800efa2:	643a      	str	r2, [r7, #64]	@ 0x40
 800efa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efa6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800efa8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800efaa:	e841 2300 	strex	r3, r2, [r1]
 800efae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800efb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d1e5      	bne.n	800ef82 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	2220      	movs	r2, #32
 800efba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	2200      	movs	r2, #0
 800efc2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	2200      	movs	r2, #0
 800efc8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	4a33      	ldr	r2, [pc, #204]	@ (800f09c <UART_RxISR_16BIT+0x1b4>)
 800efd0:	4293      	cmp	r3, r2
 800efd2:	d01f      	beq.n	800f014 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	685b      	ldr	r3, [r3, #4]
 800efda:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d018      	beq.n	800f014 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efe8:	6a3b      	ldr	r3, [r7, #32]
 800efea:	e853 3f00 	ldrex	r3, [r3]
 800efee:	61fb      	str	r3, [r7, #28]
   return(result);
 800eff0:	69fb      	ldr	r3, [r7, #28]
 800eff2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800eff6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	461a      	mov	r2, r3
 800effe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f000:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f002:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f004:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f006:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f008:	e841 2300 	strex	r3, r2, [r1]
 800f00c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f00e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f010:	2b00      	cmp	r3, #0
 800f012:	d1e6      	bne.n	800efe2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f018:	2b01      	cmp	r3, #1
 800f01a:	d12e      	bne.n	800f07a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	2200      	movs	r2, #0
 800f020:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	e853 3f00 	ldrex	r3, [r3]
 800f02e:	60bb      	str	r3, [r7, #8]
   return(result);
 800f030:	68bb      	ldr	r3, [r7, #8]
 800f032:	f023 0310 	bic.w	r3, r3, #16
 800f036:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	461a      	mov	r2, r3
 800f03e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f040:	61bb      	str	r3, [r7, #24]
 800f042:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f044:	6979      	ldr	r1, [r7, #20]
 800f046:	69ba      	ldr	r2, [r7, #24]
 800f048:	e841 2300 	strex	r3, r2, [r1]
 800f04c:	613b      	str	r3, [r7, #16]
   return(result);
 800f04e:	693b      	ldr	r3, [r7, #16]
 800f050:	2b00      	cmp	r3, #0
 800f052:	d1e6      	bne.n	800f022 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	69db      	ldr	r3, [r3, #28]
 800f05a:	f003 0310 	and.w	r3, r3, #16
 800f05e:	2b10      	cmp	r3, #16
 800f060:	d103      	bne.n	800f06a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	2210      	movs	r2, #16
 800f068:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f070:	4619      	mov	r1, r3
 800f072:	6878      	ldr	r0, [r7, #4]
 800f074:	f7fe fd68 	bl	800db48 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f078:	e00b      	b.n	800f092 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800f07a:	6878      	ldr	r0, [r7, #4]
 800f07c:	f7f3 fda0 	bl	8002bc0 <HAL_UART_RxCpltCallback>
}
 800f080:	e007      	b.n	800f092 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	699a      	ldr	r2, [r3, #24]
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	f042 0208 	orr.w	r2, r2, #8
 800f090:	619a      	str	r2, [r3, #24]
}
 800f092:	bf00      	nop
 800f094:	3770      	adds	r7, #112	@ 0x70
 800f096:	46bd      	mov	sp, r7
 800f098:	bd80      	pop	{r7, pc}
 800f09a:	bf00      	nop
 800f09c:	58000c00 	.word	0x58000c00

0800f0a0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f0a0:	b580      	push	{r7, lr}
 800f0a2:	b0ac      	sub	sp, #176	@ 0xb0
 800f0a4:	af00      	add	r7, sp, #0
 800f0a6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f0ae:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	69db      	ldr	r3, [r3, #28]
 800f0b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	689b      	ldr	r3, [r3, #8]
 800f0cc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f0d6:	2b22      	cmp	r3, #34	@ 0x22
 800f0d8:	f040 8181 	bne.w	800f3de <UART_RxISR_8BIT_FIFOEN+0x33e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800f0e2:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f0e6:	e124      	b.n	800f332 <UART_RxISR_8BIT_FIFOEN+0x292>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f0ee:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f0f2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800f0f6:	b2d9      	uxtb	r1, r3
 800f0f8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800f0fc:	b2da      	uxtb	r2, r3
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f102:	400a      	ands	r2, r1
 800f104:	b2d2      	uxtb	r2, r2
 800f106:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f10c:	1c5a      	adds	r2, r3, #1
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f118:	b29b      	uxth	r3, r3
 800f11a:	3b01      	subs	r3, #1
 800f11c:	b29a      	uxth	r2, r3
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	69db      	ldr	r3, [r3, #28]
 800f12a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f12e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f132:	f003 0307 	and.w	r3, r3, #7
 800f136:	2b00      	cmp	r3, #0
 800f138:	d053      	beq.n	800f1e2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f13a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f13e:	f003 0301 	and.w	r3, r3, #1
 800f142:	2b00      	cmp	r3, #0
 800f144:	d011      	beq.n	800f16a <UART_RxISR_8BIT_FIFOEN+0xca>
 800f146:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800f14a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d00b      	beq.n	800f16a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	2201      	movs	r2, #1
 800f158:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f160:	f043 0201 	orr.w	r2, r3, #1
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f16a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f16e:	f003 0302 	and.w	r3, r3, #2
 800f172:	2b00      	cmp	r3, #0
 800f174:	d011      	beq.n	800f19a <UART_RxISR_8BIT_FIFOEN+0xfa>
 800f176:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f17a:	f003 0301 	and.w	r3, r3, #1
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d00b      	beq.n	800f19a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	2202      	movs	r2, #2
 800f188:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f190:	f043 0204 	orr.w	r2, r3, #4
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f19a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f19e:	f003 0304 	and.w	r3, r3, #4
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d011      	beq.n	800f1ca <UART_RxISR_8BIT_FIFOEN+0x12a>
 800f1a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f1aa:	f003 0301 	and.w	r3, r3, #1
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d00b      	beq.n	800f1ca <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	2204      	movs	r2, #4
 800f1b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f1c0:	f043 0202 	orr.w	r2, r3, #2
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d006      	beq.n	800f1e2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f1d4:	6878      	ldr	r0, [r7, #4]
 800f1d6:	f7fe fcad 	bl	800db34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	2200      	movs	r2, #0
 800f1de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f1e8:	b29b      	uxth	r3, r3
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	f040 80a1 	bne.w	800f332 <UART_RxISR_8BIT_FIFOEN+0x292>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f1f8:	e853 3f00 	ldrex	r3, [r3]
 800f1fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800f1fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f200:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f204:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	461a      	mov	r2, r3
 800f20e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f212:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f214:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f216:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800f218:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800f21a:	e841 2300 	strex	r3, r2, [r1]
 800f21e:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800f220:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f222:	2b00      	cmp	r3, #0
 800f224:	d1e4      	bne.n	800f1f0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	3308      	adds	r3, #8
 800f22c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f22e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f230:	e853 3f00 	ldrex	r3, [r3]
 800f234:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800f236:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f238:	4b6f      	ldr	r3, [pc, #444]	@ (800f3f8 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800f23a:	4013      	ands	r3, r2
 800f23c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	3308      	adds	r3, #8
 800f246:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800f24a:	66ba      	str	r2, [r7, #104]	@ 0x68
 800f24c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f24e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800f250:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800f252:	e841 2300 	strex	r3, r2, [r1]
 800f256:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800f258:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d1e3      	bne.n	800f226 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	2220      	movs	r2, #32
 800f262:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	2200      	movs	r2, #0
 800f26a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	2200      	movs	r2, #0
 800f270:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	4a61      	ldr	r2, [pc, #388]	@ (800f3fc <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800f278:	4293      	cmp	r3, r2
 800f27a:	d021      	beq.n	800f2c0 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	685b      	ldr	r3, [r3, #4]
 800f282:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f286:	2b00      	cmp	r3, #0
 800f288:	d01a      	beq.n	800f2c0 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f290:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f292:	e853 3f00 	ldrex	r3, [r3]
 800f296:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800f298:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f29a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800f29e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	461a      	mov	r2, r3
 800f2a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800f2ac:	657b      	str	r3, [r7, #84]	@ 0x54
 800f2ae:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2b0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f2b2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800f2b4:	e841 2300 	strex	r3, r2, [r1]
 800f2b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800f2ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d1e4      	bne.n	800f28a <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f2c4:	2b01      	cmp	r3, #1
 800f2c6:	d130      	bne.n	800f32a <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	2200      	movs	r2, #0
 800f2cc:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f2d6:	e853 3f00 	ldrex	r3, [r3]
 800f2da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f2dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2de:	f023 0310 	bic.w	r3, r3, #16
 800f2e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	461a      	mov	r2, r3
 800f2ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f2f0:	643b      	str	r3, [r7, #64]	@ 0x40
 800f2f2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f2f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f2f8:	e841 2300 	strex	r3, r2, [r1]
 800f2fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f2fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f300:	2b00      	cmp	r3, #0
 800f302:	d1e4      	bne.n	800f2ce <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	69db      	ldr	r3, [r3, #28]
 800f30a:	f003 0310 	and.w	r3, r3, #16
 800f30e:	2b10      	cmp	r3, #16
 800f310:	d103      	bne.n	800f31a <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	2210      	movs	r2, #16
 800f318:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f320:	4619      	mov	r1, r3
 800f322:	6878      	ldr	r0, [r7, #4]
 800f324:	f7fe fc10 	bl	800db48 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800f328:	e00e      	b.n	800f348 <UART_RxISR_8BIT_FIFOEN+0x2a8>
          HAL_UART_RxCpltCallback(huart);
 800f32a:	6878      	ldr	r0, [r7, #4]
 800f32c:	f7f3 fc48 	bl	8002bc0 <HAL_UART_RxCpltCallback>
        break;
 800f330:	e00a      	b.n	800f348 <UART_RxISR_8BIT_FIFOEN+0x2a8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f332:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800f336:	2b00      	cmp	r3, #0
 800f338:	d006      	beq.n	800f348 <UART_RxISR_8BIT_FIFOEN+0x2a8>
 800f33a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f33e:	f003 0320 	and.w	r3, r3, #32
 800f342:	2b00      	cmp	r3, #0
 800f344:	f47f aed0 	bne.w	800f0e8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f34e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f352:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800f356:	2b00      	cmp	r3, #0
 800f358:	d049      	beq.n	800f3ee <UART_RxISR_8BIT_FIFOEN+0x34e>
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800f360:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800f364:	429a      	cmp	r2, r3
 800f366:	d242      	bcs.n	800f3ee <UART_RxISR_8BIT_FIFOEN+0x34e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	3308      	adds	r3, #8
 800f36e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f370:	6a3b      	ldr	r3, [r7, #32]
 800f372:	e853 3f00 	ldrex	r3, [r3]
 800f376:	61fb      	str	r3, [r7, #28]
   return(result);
 800f378:	69fb      	ldr	r3, [r7, #28]
 800f37a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f37e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	3308      	adds	r3, #8
 800f388:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800f38c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f38e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f390:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f392:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f394:	e841 2300 	strex	r3, r2, [r1]
 800f398:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f39a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d1e3      	bne.n	800f368 <UART_RxISR_8BIT_FIFOEN+0x2c8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	4a17      	ldr	r2, [pc, #92]	@ (800f400 <UART_RxISR_8BIT_FIFOEN+0x360>)
 800f3a4:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	e853 3f00 	ldrex	r3, [r3]
 800f3b2:	60bb      	str	r3, [r7, #8]
   return(result);
 800f3b4:	68bb      	ldr	r3, [r7, #8]
 800f3b6:	f043 0320 	orr.w	r3, r3, #32
 800f3ba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	461a      	mov	r2, r3
 800f3c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800f3c8:	61bb      	str	r3, [r7, #24]
 800f3ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3cc:	6979      	ldr	r1, [r7, #20]
 800f3ce:	69ba      	ldr	r2, [r7, #24]
 800f3d0:	e841 2300 	strex	r3, r2, [r1]
 800f3d4:	613b      	str	r3, [r7, #16]
   return(result);
 800f3d6:	693b      	ldr	r3, [r7, #16]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d1e4      	bne.n	800f3a6 <UART_RxISR_8BIT_FIFOEN+0x306>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f3dc:	e007      	b.n	800f3ee <UART_RxISR_8BIT_FIFOEN+0x34e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	699a      	ldr	r2, [r3, #24]
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	f042 0208 	orr.w	r2, r2, #8
 800f3ec:	619a      	str	r2, [r3, #24]
}
 800f3ee:	bf00      	nop
 800f3f0:	37b0      	adds	r7, #176	@ 0xb0
 800f3f2:	46bd      	mov	sp, r7
 800f3f4:	bd80      	pop	{r7, pc}
 800f3f6:	bf00      	nop
 800f3f8:	effffffe 	.word	0xeffffffe
 800f3fc:	58000c00 	.word	0x58000c00
 800f400:	0800ed31 	.word	0x0800ed31

0800f404 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f404:	b580      	push	{r7, lr}
 800f406:	b0ae      	sub	sp, #184	@ 0xb8
 800f408:	af00      	add	r7, sp, #0
 800f40a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f412:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	69db      	ldr	r3, [r3, #28]
 800f41c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	689b      	ldr	r3, [r3, #8]
 800f430:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f43a:	2b22      	cmp	r3, #34	@ 0x22
 800f43c:	f040 8185 	bne.w	800f74a <UART_RxISR_16BIT_FIFOEN+0x346>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800f446:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f44a:	e128      	b.n	800f69e <UART_RxISR_16BIT_FIFOEN+0x29a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f452:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f45a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800f45e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800f462:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800f466:	4013      	ands	r3, r2
 800f468:	b29a      	uxth	r2, r3
 800f46a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f46e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f474:	1c9a      	adds	r2, r3, #2
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f480:	b29b      	uxth	r3, r3
 800f482:	3b01      	subs	r3, #1
 800f484:	b29a      	uxth	r2, r3
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	69db      	ldr	r3, [r3, #28]
 800f492:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f496:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f49a:	f003 0307 	and.w	r3, r3, #7
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d053      	beq.n	800f54a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f4a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f4a6:	f003 0301 	and.w	r3, r3, #1
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d011      	beq.n	800f4d2 <UART_RxISR_16BIT_FIFOEN+0xce>
 800f4ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f4b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d00b      	beq.n	800f4d2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	2201      	movs	r2, #1
 800f4c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f4c8:	f043 0201 	orr.w	r2, r3, #1
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f4d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f4d6:	f003 0302 	and.w	r3, r3, #2
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d011      	beq.n	800f502 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800f4de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f4e2:	f003 0301 	and.w	r3, r3, #1
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d00b      	beq.n	800f502 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	2202      	movs	r2, #2
 800f4f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f4f8:	f043 0204 	orr.w	r2, r3, #4
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f502:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f506:	f003 0304 	and.w	r3, r3, #4
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d011      	beq.n	800f532 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800f50e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f512:	f003 0301 	and.w	r3, r3, #1
 800f516:	2b00      	cmp	r3, #0
 800f518:	d00b      	beq.n	800f532 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	2204      	movs	r2, #4
 800f520:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f528:	f043 0202 	orr.w	r2, r3, #2
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d006      	beq.n	800f54a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f53c:	6878      	ldr	r0, [r7, #4]
 800f53e:	f7fe faf9 	bl	800db34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	2200      	movs	r2, #0
 800f546:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f550:	b29b      	uxth	r3, r3
 800f552:	2b00      	cmp	r3, #0
 800f554:	f040 80a3 	bne.w	800f69e <UART_RxISR_16BIT_FIFOEN+0x29a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f55e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f560:	e853 3f00 	ldrex	r3, [r3]
 800f564:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800f566:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f568:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f56c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	461a      	mov	r2, r3
 800f576:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f57a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f57e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f580:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800f582:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f586:	e841 2300 	strex	r3, r2, [r1]
 800f58a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800f58c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d1e2      	bne.n	800f558 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	3308      	adds	r3, #8
 800f598:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f59a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f59c:	e853 3f00 	ldrex	r3, [r3]
 800f5a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800f5a2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800f5a4:	4b6f      	ldr	r3, [pc, #444]	@ (800f764 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800f5a6:	4013      	ands	r3, r2
 800f5a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	3308      	adds	r3, #8
 800f5b2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800f5b6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800f5b8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5ba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800f5bc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800f5be:	e841 2300 	strex	r3, r2, [r1]
 800f5c2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800f5c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d1e3      	bne.n	800f592 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	2220      	movs	r2, #32
 800f5ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	2200      	movs	r2, #0
 800f5d6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	2200      	movs	r2, #0
 800f5dc:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	4a61      	ldr	r2, [pc, #388]	@ (800f768 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800f5e4:	4293      	cmp	r3, r2
 800f5e6:	d021      	beq.n	800f62c <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	685b      	ldr	r3, [r3, #4]
 800f5ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d01a      	beq.n	800f62c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f5fe:	e853 3f00 	ldrex	r3, [r3]
 800f602:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f604:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f606:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800f60a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	461a      	mov	r2, r3
 800f614:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800f618:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f61a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f61c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f61e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f620:	e841 2300 	strex	r3, r2, [r1]
 800f624:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f626:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d1e4      	bne.n	800f5f6 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f630:	2b01      	cmp	r3, #1
 800f632:	d130      	bne.n	800f696 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	2200      	movs	r2, #0
 800f638:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f642:	e853 3f00 	ldrex	r3, [r3]
 800f646:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f64a:	f023 0310 	bic.w	r3, r3, #16
 800f64e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	461a      	mov	r2, r3
 800f658:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800f65c:	647b      	str	r3, [r7, #68]	@ 0x44
 800f65e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f660:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f662:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f664:	e841 2300 	strex	r3, r2, [r1]
 800f668:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f66a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d1e4      	bne.n	800f63a <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	69db      	ldr	r3, [r3, #28]
 800f676:	f003 0310 	and.w	r3, r3, #16
 800f67a:	2b10      	cmp	r3, #16
 800f67c:	d103      	bne.n	800f686 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	2210      	movs	r2, #16
 800f684:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f68c:	4619      	mov	r1, r3
 800f68e:	6878      	ldr	r0, [r7, #4]
 800f690:	f7fe fa5a 	bl	800db48 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800f694:	e00e      	b.n	800f6b4 <UART_RxISR_16BIT_FIFOEN+0x2b0>
          HAL_UART_RxCpltCallback(huart);
 800f696:	6878      	ldr	r0, [r7, #4]
 800f698:	f7f3 fa92 	bl	8002bc0 <HAL_UART_RxCpltCallback>
        break;
 800f69c:	e00a      	b.n	800f6b4 <UART_RxISR_16BIT_FIFOEN+0x2b0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f69e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d006      	beq.n	800f6b4 <UART_RxISR_16BIT_FIFOEN+0x2b0>
 800f6a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f6aa:	f003 0320 	and.w	r3, r3, #32
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	f47f aecc 	bne.w	800f44c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f6ba:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f6be:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d049      	beq.n	800f75a <UART_RxISR_16BIT_FIFOEN+0x356>
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800f6cc:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800f6d0:	429a      	cmp	r2, r3
 800f6d2:	d242      	bcs.n	800f75a <UART_RxISR_16BIT_FIFOEN+0x356>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	3308      	adds	r3, #8
 800f6da:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6de:	e853 3f00 	ldrex	r3, [r3]
 800f6e2:	623b      	str	r3, [r7, #32]
   return(result);
 800f6e4:	6a3b      	ldr	r3, [r7, #32]
 800f6e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f6ea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	3308      	adds	r3, #8
 800f6f4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800f6f8:	633a      	str	r2, [r7, #48]	@ 0x30
 800f6fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f6fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f700:	e841 2300 	strex	r3, r2, [r1]
 800f704:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d1e3      	bne.n	800f6d4 <UART_RxISR_16BIT_FIFOEN+0x2d0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	4a17      	ldr	r2, [pc, #92]	@ (800f76c <UART_RxISR_16BIT_FIFOEN+0x368>)
 800f710:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f718:	693b      	ldr	r3, [r7, #16]
 800f71a:	e853 3f00 	ldrex	r3, [r3]
 800f71e:	60fb      	str	r3, [r7, #12]
   return(result);
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	f043 0320 	orr.w	r3, r3, #32
 800f726:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	461a      	mov	r2, r3
 800f730:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f734:	61fb      	str	r3, [r7, #28]
 800f736:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f738:	69b9      	ldr	r1, [r7, #24]
 800f73a:	69fa      	ldr	r2, [r7, #28]
 800f73c:	e841 2300 	strex	r3, r2, [r1]
 800f740:	617b      	str	r3, [r7, #20]
   return(result);
 800f742:	697b      	ldr	r3, [r7, #20]
 800f744:	2b00      	cmp	r3, #0
 800f746:	d1e4      	bne.n	800f712 <UART_RxISR_16BIT_FIFOEN+0x30e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f748:	e007      	b.n	800f75a <UART_RxISR_16BIT_FIFOEN+0x356>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	699a      	ldr	r2, [r3, #24]
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	f042 0208 	orr.w	r2, r2, #8
 800f758:	619a      	str	r2, [r3, #24]
}
 800f75a:	bf00      	nop
 800f75c:	37b8      	adds	r7, #184	@ 0xb8
 800f75e:	46bd      	mov	sp, r7
 800f760:	bd80      	pop	{r7, pc}
 800f762:	bf00      	nop
 800f764:	effffffe 	.word	0xeffffffe
 800f768:	58000c00 	.word	0x58000c00
 800f76c:	0800eee9 	.word	0x0800eee9

0800f770 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f770:	b480      	push	{r7}
 800f772:	b083      	sub	sp, #12
 800f774:	af00      	add	r7, sp, #0
 800f776:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f778:	bf00      	nop
 800f77a:	370c      	adds	r7, #12
 800f77c:	46bd      	mov	sp, r7
 800f77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f782:	4770      	bx	lr

0800f784 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f784:	b480      	push	{r7}
 800f786:	b083      	sub	sp, #12
 800f788:	af00      	add	r7, sp, #0
 800f78a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f78c:	bf00      	nop
 800f78e:	370c      	adds	r7, #12
 800f790:	46bd      	mov	sp, r7
 800f792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f796:	4770      	bx	lr

0800f798 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f798:	b480      	push	{r7}
 800f79a:	b083      	sub	sp, #12
 800f79c:	af00      	add	r7, sp, #0
 800f79e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f7a0:	bf00      	nop
 800f7a2:	370c      	adds	r7, #12
 800f7a4:	46bd      	mov	sp, r7
 800f7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7aa:	4770      	bx	lr

0800f7ac <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800f7ac:	b580      	push	{r7, lr}
 800f7ae:	b084      	sub	sp, #16
 800f7b0:	af00      	add	r7, sp, #0
 800f7b2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f7ba:	2b01      	cmp	r3, #1
 800f7bc:	d101      	bne.n	800f7c2 <HAL_UARTEx_EnableFifoMode+0x16>
 800f7be:	2302      	movs	r3, #2
 800f7c0:	e02b      	b.n	800f81a <HAL_UARTEx_EnableFifoMode+0x6e>
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	2201      	movs	r2, #1
 800f7c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	2224      	movs	r2, #36	@ 0x24
 800f7ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	681a      	ldr	r2, [r3, #0]
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	f022 0201 	bic.w	r2, r2, #1
 800f7e8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800f7f0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800f7f8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	68fa      	ldr	r2, [r7, #12]
 800f800:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f802:	6878      	ldr	r0, [r7, #4]
 800f804:	f000 f88a 	bl	800f91c <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	2220      	movs	r2, #32
 800f80c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	2200      	movs	r2, #0
 800f814:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f818:	2300      	movs	r3, #0
}
 800f81a:	4618      	mov	r0, r3
 800f81c:	3710      	adds	r7, #16
 800f81e:	46bd      	mov	sp, r7
 800f820:	bd80      	pop	{r7, pc}

0800f822 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f822:	b580      	push	{r7, lr}
 800f824:	b084      	sub	sp, #16
 800f826:	af00      	add	r7, sp, #0
 800f828:	6078      	str	r0, [r7, #4]
 800f82a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f832:	2b01      	cmp	r3, #1
 800f834:	d101      	bne.n	800f83a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f836:	2302      	movs	r3, #2
 800f838:	e02d      	b.n	800f896 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	2201      	movs	r2, #1
 800f83e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	2224      	movs	r2, #36	@ 0x24
 800f846:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	681a      	ldr	r2, [r3, #0]
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	f022 0201 	bic.w	r2, r2, #1
 800f860:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	689b      	ldr	r3, [r3, #8]
 800f868:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	683a      	ldr	r2, [r7, #0]
 800f872:	430a      	orrs	r2, r1
 800f874:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f876:	6878      	ldr	r0, [r7, #4]
 800f878:	f000 f850 	bl	800f91c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	68fa      	ldr	r2, [r7, #12]
 800f882:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	2220      	movs	r2, #32
 800f888:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	2200      	movs	r2, #0
 800f890:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f894:	2300      	movs	r3, #0
}
 800f896:	4618      	mov	r0, r3
 800f898:	3710      	adds	r7, #16
 800f89a:	46bd      	mov	sp, r7
 800f89c:	bd80      	pop	{r7, pc}

0800f89e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f89e:	b580      	push	{r7, lr}
 800f8a0:	b084      	sub	sp, #16
 800f8a2:	af00      	add	r7, sp, #0
 800f8a4:	6078      	str	r0, [r7, #4]
 800f8a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f8ae:	2b01      	cmp	r3, #1
 800f8b0:	d101      	bne.n	800f8b6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f8b2:	2302      	movs	r3, #2
 800f8b4:	e02d      	b.n	800f912 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	2201      	movs	r2, #1
 800f8ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	2224      	movs	r2, #36	@ 0x24
 800f8c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	681a      	ldr	r2, [r3, #0]
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	f022 0201 	bic.w	r2, r2, #1
 800f8dc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	689b      	ldr	r3, [r3, #8]
 800f8e4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	683a      	ldr	r2, [r7, #0]
 800f8ee:	430a      	orrs	r2, r1
 800f8f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f8f2:	6878      	ldr	r0, [r7, #4]
 800f8f4:	f000 f812 	bl	800f91c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	68fa      	ldr	r2, [r7, #12]
 800f8fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	2220      	movs	r2, #32
 800f904:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	2200      	movs	r2, #0
 800f90c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f910:	2300      	movs	r3, #0
}
 800f912:	4618      	mov	r0, r3
 800f914:	3710      	adds	r7, #16
 800f916:	46bd      	mov	sp, r7
 800f918:	bd80      	pop	{r7, pc}
	...

0800f91c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f91c:	b480      	push	{r7}
 800f91e:	b085      	sub	sp, #20
 800f920:	af00      	add	r7, sp, #0
 800f922:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d108      	bne.n	800f93e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	2201      	movs	r2, #1
 800f930:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	2201      	movs	r2, #1
 800f938:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f93c:	e031      	b.n	800f9a2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f93e:	2310      	movs	r3, #16
 800f940:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f942:	2310      	movs	r3, #16
 800f944:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	689b      	ldr	r3, [r3, #8]
 800f94c:	0e5b      	lsrs	r3, r3, #25
 800f94e:	b2db      	uxtb	r3, r3
 800f950:	f003 0307 	and.w	r3, r3, #7
 800f954:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	689b      	ldr	r3, [r3, #8]
 800f95c:	0f5b      	lsrs	r3, r3, #29
 800f95e:	b2db      	uxtb	r3, r3
 800f960:	f003 0307 	and.w	r3, r3, #7
 800f964:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f966:	7bbb      	ldrb	r3, [r7, #14]
 800f968:	7b3a      	ldrb	r2, [r7, #12]
 800f96a:	4911      	ldr	r1, [pc, #68]	@ (800f9b0 <UARTEx_SetNbDataToProcess+0x94>)
 800f96c:	5c8a      	ldrb	r2, [r1, r2]
 800f96e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f972:	7b3a      	ldrb	r2, [r7, #12]
 800f974:	490f      	ldr	r1, [pc, #60]	@ (800f9b4 <UARTEx_SetNbDataToProcess+0x98>)
 800f976:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f978:	fb93 f3f2 	sdiv	r3, r3, r2
 800f97c:	b29a      	uxth	r2, r3
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f984:	7bfb      	ldrb	r3, [r7, #15]
 800f986:	7b7a      	ldrb	r2, [r7, #13]
 800f988:	4909      	ldr	r1, [pc, #36]	@ (800f9b0 <UARTEx_SetNbDataToProcess+0x94>)
 800f98a:	5c8a      	ldrb	r2, [r1, r2]
 800f98c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f990:	7b7a      	ldrb	r2, [r7, #13]
 800f992:	4908      	ldr	r1, [pc, #32]	@ (800f9b4 <UARTEx_SetNbDataToProcess+0x98>)
 800f994:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f996:	fb93 f3f2 	sdiv	r3, r3, r2
 800f99a:	b29a      	uxth	r2, r3
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800f9a2:	bf00      	nop
 800f9a4:	3714      	adds	r7, #20
 800f9a6:	46bd      	mov	sp, r7
 800f9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ac:	4770      	bx	lr
 800f9ae:	bf00      	nop
 800f9b0:	080127d4 	.word	0x080127d4
 800f9b4:	080127dc 	.word	0x080127dc

0800f9b8 <atoi>:
 800f9b8:	220a      	movs	r2, #10
 800f9ba:	2100      	movs	r1, #0
 800f9bc:	f000 b87a 	b.w	800fab4 <strtol>

0800f9c0 <_strtol_l.isra.0>:
 800f9c0:	2b24      	cmp	r3, #36	@ 0x24
 800f9c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f9c6:	4686      	mov	lr, r0
 800f9c8:	4690      	mov	r8, r2
 800f9ca:	d801      	bhi.n	800f9d0 <_strtol_l.isra.0+0x10>
 800f9cc:	2b01      	cmp	r3, #1
 800f9ce:	d106      	bne.n	800f9de <_strtol_l.isra.0+0x1e>
 800f9d0:	f000 ff3c 	bl	801084c <__errno>
 800f9d4:	2316      	movs	r3, #22
 800f9d6:	6003      	str	r3, [r0, #0]
 800f9d8:	2000      	movs	r0, #0
 800f9da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f9de:	4834      	ldr	r0, [pc, #208]	@ (800fab0 <_strtol_l.isra.0+0xf0>)
 800f9e0:	460d      	mov	r5, r1
 800f9e2:	462a      	mov	r2, r5
 800f9e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f9e8:	5d06      	ldrb	r6, [r0, r4]
 800f9ea:	f016 0608 	ands.w	r6, r6, #8
 800f9ee:	d1f8      	bne.n	800f9e2 <_strtol_l.isra.0+0x22>
 800f9f0:	2c2d      	cmp	r4, #45	@ 0x2d
 800f9f2:	d110      	bne.n	800fa16 <_strtol_l.isra.0+0x56>
 800f9f4:	782c      	ldrb	r4, [r5, #0]
 800f9f6:	2601      	movs	r6, #1
 800f9f8:	1c95      	adds	r5, r2, #2
 800f9fa:	f033 0210 	bics.w	r2, r3, #16
 800f9fe:	d115      	bne.n	800fa2c <_strtol_l.isra.0+0x6c>
 800fa00:	2c30      	cmp	r4, #48	@ 0x30
 800fa02:	d10d      	bne.n	800fa20 <_strtol_l.isra.0+0x60>
 800fa04:	782a      	ldrb	r2, [r5, #0]
 800fa06:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800fa0a:	2a58      	cmp	r2, #88	@ 0x58
 800fa0c:	d108      	bne.n	800fa20 <_strtol_l.isra.0+0x60>
 800fa0e:	786c      	ldrb	r4, [r5, #1]
 800fa10:	3502      	adds	r5, #2
 800fa12:	2310      	movs	r3, #16
 800fa14:	e00a      	b.n	800fa2c <_strtol_l.isra.0+0x6c>
 800fa16:	2c2b      	cmp	r4, #43	@ 0x2b
 800fa18:	bf04      	itt	eq
 800fa1a:	782c      	ldrbeq	r4, [r5, #0]
 800fa1c:	1c95      	addeq	r5, r2, #2
 800fa1e:	e7ec      	b.n	800f9fa <_strtol_l.isra.0+0x3a>
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d1f6      	bne.n	800fa12 <_strtol_l.isra.0+0x52>
 800fa24:	2c30      	cmp	r4, #48	@ 0x30
 800fa26:	bf14      	ite	ne
 800fa28:	230a      	movne	r3, #10
 800fa2a:	2308      	moveq	r3, #8
 800fa2c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800fa30:	f10c 3cff 	add.w	ip, ip, #4294967295
 800fa34:	2200      	movs	r2, #0
 800fa36:	fbbc f9f3 	udiv	r9, ip, r3
 800fa3a:	4610      	mov	r0, r2
 800fa3c:	fb03 ca19 	mls	sl, r3, r9, ip
 800fa40:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800fa44:	2f09      	cmp	r7, #9
 800fa46:	d80f      	bhi.n	800fa68 <_strtol_l.isra.0+0xa8>
 800fa48:	463c      	mov	r4, r7
 800fa4a:	42a3      	cmp	r3, r4
 800fa4c:	dd1b      	ble.n	800fa86 <_strtol_l.isra.0+0xc6>
 800fa4e:	1c57      	adds	r7, r2, #1
 800fa50:	d007      	beq.n	800fa62 <_strtol_l.isra.0+0xa2>
 800fa52:	4581      	cmp	r9, r0
 800fa54:	d314      	bcc.n	800fa80 <_strtol_l.isra.0+0xc0>
 800fa56:	d101      	bne.n	800fa5c <_strtol_l.isra.0+0x9c>
 800fa58:	45a2      	cmp	sl, r4
 800fa5a:	db11      	blt.n	800fa80 <_strtol_l.isra.0+0xc0>
 800fa5c:	fb00 4003 	mla	r0, r0, r3, r4
 800fa60:	2201      	movs	r2, #1
 800fa62:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fa66:	e7eb      	b.n	800fa40 <_strtol_l.isra.0+0x80>
 800fa68:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800fa6c:	2f19      	cmp	r7, #25
 800fa6e:	d801      	bhi.n	800fa74 <_strtol_l.isra.0+0xb4>
 800fa70:	3c37      	subs	r4, #55	@ 0x37
 800fa72:	e7ea      	b.n	800fa4a <_strtol_l.isra.0+0x8a>
 800fa74:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800fa78:	2f19      	cmp	r7, #25
 800fa7a:	d804      	bhi.n	800fa86 <_strtol_l.isra.0+0xc6>
 800fa7c:	3c57      	subs	r4, #87	@ 0x57
 800fa7e:	e7e4      	b.n	800fa4a <_strtol_l.isra.0+0x8a>
 800fa80:	f04f 32ff 	mov.w	r2, #4294967295
 800fa84:	e7ed      	b.n	800fa62 <_strtol_l.isra.0+0xa2>
 800fa86:	1c53      	adds	r3, r2, #1
 800fa88:	d108      	bne.n	800fa9c <_strtol_l.isra.0+0xdc>
 800fa8a:	2322      	movs	r3, #34	@ 0x22
 800fa8c:	f8ce 3000 	str.w	r3, [lr]
 800fa90:	4660      	mov	r0, ip
 800fa92:	f1b8 0f00 	cmp.w	r8, #0
 800fa96:	d0a0      	beq.n	800f9da <_strtol_l.isra.0+0x1a>
 800fa98:	1e69      	subs	r1, r5, #1
 800fa9a:	e006      	b.n	800faaa <_strtol_l.isra.0+0xea>
 800fa9c:	b106      	cbz	r6, 800faa0 <_strtol_l.isra.0+0xe0>
 800fa9e:	4240      	negs	r0, r0
 800faa0:	f1b8 0f00 	cmp.w	r8, #0
 800faa4:	d099      	beq.n	800f9da <_strtol_l.isra.0+0x1a>
 800faa6:	2a00      	cmp	r2, #0
 800faa8:	d1f6      	bne.n	800fa98 <_strtol_l.isra.0+0xd8>
 800faaa:	f8c8 1000 	str.w	r1, [r8]
 800faae:	e794      	b.n	800f9da <_strtol_l.isra.0+0x1a>
 800fab0:	080127e5 	.word	0x080127e5

0800fab4 <strtol>:
 800fab4:	4613      	mov	r3, r2
 800fab6:	460a      	mov	r2, r1
 800fab8:	4601      	mov	r1, r0
 800faba:	4802      	ldr	r0, [pc, #8]	@ (800fac4 <strtol+0x10>)
 800fabc:	6800      	ldr	r0, [r0, #0]
 800fabe:	f7ff bf7f 	b.w	800f9c0 <_strtol_l.isra.0>
 800fac2:	bf00      	nop
 800fac4:	24000038 	.word	0x24000038

0800fac8 <__cvt>:
 800fac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800faca:	ed2d 8b02 	vpush	{d8}
 800face:	eeb0 8b40 	vmov.f64	d8, d0
 800fad2:	b085      	sub	sp, #20
 800fad4:	4617      	mov	r7, r2
 800fad6:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800fad8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800fada:	ee18 2a90 	vmov	r2, s17
 800fade:	f025 0520 	bic.w	r5, r5, #32
 800fae2:	2a00      	cmp	r2, #0
 800fae4:	bfb6      	itet	lt
 800fae6:	222d      	movlt	r2, #45	@ 0x2d
 800fae8:	2200      	movge	r2, #0
 800faea:	eeb1 8b40 	vneglt.f64	d8, d0
 800faee:	2d46      	cmp	r5, #70	@ 0x46
 800faf0:	460c      	mov	r4, r1
 800faf2:	701a      	strb	r2, [r3, #0]
 800faf4:	d004      	beq.n	800fb00 <__cvt+0x38>
 800faf6:	2d45      	cmp	r5, #69	@ 0x45
 800faf8:	d100      	bne.n	800fafc <__cvt+0x34>
 800fafa:	3401      	adds	r4, #1
 800fafc:	2102      	movs	r1, #2
 800fafe:	e000      	b.n	800fb02 <__cvt+0x3a>
 800fb00:	2103      	movs	r1, #3
 800fb02:	ab03      	add	r3, sp, #12
 800fb04:	9301      	str	r3, [sp, #4]
 800fb06:	ab02      	add	r3, sp, #8
 800fb08:	9300      	str	r3, [sp, #0]
 800fb0a:	4622      	mov	r2, r4
 800fb0c:	4633      	mov	r3, r6
 800fb0e:	eeb0 0b48 	vmov.f64	d0, d8
 800fb12:	f000 ff7d 	bl	8010a10 <_dtoa_r>
 800fb16:	2d47      	cmp	r5, #71	@ 0x47
 800fb18:	d114      	bne.n	800fb44 <__cvt+0x7c>
 800fb1a:	07fb      	lsls	r3, r7, #31
 800fb1c:	d50a      	bpl.n	800fb34 <__cvt+0x6c>
 800fb1e:	1902      	adds	r2, r0, r4
 800fb20:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800fb24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb28:	bf08      	it	eq
 800fb2a:	9203      	streq	r2, [sp, #12]
 800fb2c:	2130      	movs	r1, #48	@ 0x30
 800fb2e:	9b03      	ldr	r3, [sp, #12]
 800fb30:	4293      	cmp	r3, r2
 800fb32:	d319      	bcc.n	800fb68 <__cvt+0xa0>
 800fb34:	9b03      	ldr	r3, [sp, #12]
 800fb36:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fb38:	1a1b      	subs	r3, r3, r0
 800fb3a:	6013      	str	r3, [r2, #0]
 800fb3c:	b005      	add	sp, #20
 800fb3e:	ecbd 8b02 	vpop	{d8}
 800fb42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb44:	2d46      	cmp	r5, #70	@ 0x46
 800fb46:	eb00 0204 	add.w	r2, r0, r4
 800fb4a:	d1e9      	bne.n	800fb20 <__cvt+0x58>
 800fb4c:	7803      	ldrb	r3, [r0, #0]
 800fb4e:	2b30      	cmp	r3, #48	@ 0x30
 800fb50:	d107      	bne.n	800fb62 <__cvt+0x9a>
 800fb52:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800fb56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb5a:	bf1c      	itt	ne
 800fb5c:	f1c4 0401 	rsbne	r4, r4, #1
 800fb60:	6034      	strne	r4, [r6, #0]
 800fb62:	6833      	ldr	r3, [r6, #0]
 800fb64:	441a      	add	r2, r3
 800fb66:	e7db      	b.n	800fb20 <__cvt+0x58>
 800fb68:	1c5c      	adds	r4, r3, #1
 800fb6a:	9403      	str	r4, [sp, #12]
 800fb6c:	7019      	strb	r1, [r3, #0]
 800fb6e:	e7de      	b.n	800fb2e <__cvt+0x66>

0800fb70 <__exponent>:
 800fb70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fb72:	2900      	cmp	r1, #0
 800fb74:	bfba      	itte	lt
 800fb76:	4249      	neglt	r1, r1
 800fb78:	232d      	movlt	r3, #45	@ 0x2d
 800fb7a:	232b      	movge	r3, #43	@ 0x2b
 800fb7c:	2909      	cmp	r1, #9
 800fb7e:	7002      	strb	r2, [r0, #0]
 800fb80:	7043      	strb	r3, [r0, #1]
 800fb82:	dd29      	ble.n	800fbd8 <__exponent+0x68>
 800fb84:	f10d 0307 	add.w	r3, sp, #7
 800fb88:	461d      	mov	r5, r3
 800fb8a:	270a      	movs	r7, #10
 800fb8c:	461a      	mov	r2, r3
 800fb8e:	fbb1 f6f7 	udiv	r6, r1, r7
 800fb92:	fb07 1416 	mls	r4, r7, r6, r1
 800fb96:	3430      	adds	r4, #48	@ 0x30
 800fb98:	f802 4c01 	strb.w	r4, [r2, #-1]
 800fb9c:	460c      	mov	r4, r1
 800fb9e:	2c63      	cmp	r4, #99	@ 0x63
 800fba0:	f103 33ff 	add.w	r3, r3, #4294967295
 800fba4:	4631      	mov	r1, r6
 800fba6:	dcf1      	bgt.n	800fb8c <__exponent+0x1c>
 800fba8:	3130      	adds	r1, #48	@ 0x30
 800fbaa:	1e94      	subs	r4, r2, #2
 800fbac:	f803 1c01 	strb.w	r1, [r3, #-1]
 800fbb0:	1c41      	adds	r1, r0, #1
 800fbb2:	4623      	mov	r3, r4
 800fbb4:	42ab      	cmp	r3, r5
 800fbb6:	d30a      	bcc.n	800fbce <__exponent+0x5e>
 800fbb8:	f10d 0309 	add.w	r3, sp, #9
 800fbbc:	1a9b      	subs	r3, r3, r2
 800fbbe:	42ac      	cmp	r4, r5
 800fbc0:	bf88      	it	hi
 800fbc2:	2300      	movhi	r3, #0
 800fbc4:	3302      	adds	r3, #2
 800fbc6:	4403      	add	r3, r0
 800fbc8:	1a18      	subs	r0, r3, r0
 800fbca:	b003      	add	sp, #12
 800fbcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fbce:	f813 6b01 	ldrb.w	r6, [r3], #1
 800fbd2:	f801 6f01 	strb.w	r6, [r1, #1]!
 800fbd6:	e7ed      	b.n	800fbb4 <__exponent+0x44>
 800fbd8:	2330      	movs	r3, #48	@ 0x30
 800fbda:	3130      	adds	r1, #48	@ 0x30
 800fbdc:	7083      	strb	r3, [r0, #2]
 800fbde:	70c1      	strb	r1, [r0, #3]
 800fbe0:	1d03      	adds	r3, r0, #4
 800fbe2:	e7f1      	b.n	800fbc8 <__exponent+0x58>
 800fbe4:	0000      	movs	r0, r0
	...

0800fbe8 <_printf_float>:
 800fbe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbec:	b08d      	sub	sp, #52	@ 0x34
 800fbee:	460c      	mov	r4, r1
 800fbf0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800fbf4:	4616      	mov	r6, r2
 800fbf6:	461f      	mov	r7, r3
 800fbf8:	4605      	mov	r5, r0
 800fbfa:	f000 fddd 	bl	80107b8 <_localeconv_r>
 800fbfe:	f8d0 b000 	ldr.w	fp, [r0]
 800fc02:	4658      	mov	r0, fp
 800fc04:	f7f0 fbcc 	bl	80003a0 <strlen>
 800fc08:	2300      	movs	r3, #0
 800fc0a:	930a      	str	r3, [sp, #40]	@ 0x28
 800fc0c:	f8d8 3000 	ldr.w	r3, [r8]
 800fc10:	f894 9018 	ldrb.w	r9, [r4, #24]
 800fc14:	6822      	ldr	r2, [r4, #0]
 800fc16:	9005      	str	r0, [sp, #20]
 800fc18:	3307      	adds	r3, #7
 800fc1a:	f023 0307 	bic.w	r3, r3, #7
 800fc1e:	f103 0108 	add.w	r1, r3, #8
 800fc22:	f8c8 1000 	str.w	r1, [r8]
 800fc26:	ed93 0b00 	vldr	d0, [r3]
 800fc2a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800fe88 <_printf_float+0x2a0>
 800fc2e:	eeb0 7bc0 	vabs.f64	d7, d0
 800fc32:	eeb4 7b46 	vcmp.f64	d7, d6
 800fc36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc3a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800fc3e:	dd24      	ble.n	800fc8a <_printf_float+0xa2>
 800fc40:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800fc44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc48:	d502      	bpl.n	800fc50 <_printf_float+0x68>
 800fc4a:	232d      	movs	r3, #45	@ 0x2d
 800fc4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fc50:	498f      	ldr	r1, [pc, #572]	@ (800fe90 <_printf_float+0x2a8>)
 800fc52:	4b90      	ldr	r3, [pc, #576]	@ (800fe94 <_printf_float+0x2ac>)
 800fc54:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800fc58:	bf8c      	ite	hi
 800fc5a:	4688      	movhi	r8, r1
 800fc5c:	4698      	movls	r8, r3
 800fc5e:	f022 0204 	bic.w	r2, r2, #4
 800fc62:	2303      	movs	r3, #3
 800fc64:	6123      	str	r3, [r4, #16]
 800fc66:	6022      	str	r2, [r4, #0]
 800fc68:	f04f 0a00 	mov.w	sl, #0
 800fc6c:	9700      	str	r7, [sp, #0]
 800fc6e:	4633      	mov	r3, r6
 800fc70:	aa0b      	add	r2, sp, #44	@ 0x2c
 800fc72:	4621      	mov	r1, r4
 800fc74:	4628      	mov	r0, r5
 800fc76:	f000 f9d1 	bl	801001c <_printf_common>
 800fc7a:	3001      	adds	r0, #1
 800fc7c:	f040 8089 	bne.w	800fd92 <_printf_float+0x1aa>
 800fc80:	f04f 30ff 	mov.w	r0, #4294967295
 800fc84:	b00d      	add	sp, #52	@ 0x34
 800fc86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc8a:	eeb4 0b40 	vcmp.f64	d0, d0
 800fc8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc92:	d709      	bvc.n	800fca8 <_printf_float+0xc0>
 800fc94:	ee10 3a90 	vmov	r3, s1
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	bfbc      	itt	lt
 800fc9c:	232d      	movlt	r3, #45	@ 0x2d
 800fc9e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800fca2:	497d      	ldr	r1, [pc, #500]	@ (800fe98 <_printf_float+0x2b0>)
 800fca4:	4b7d      	ldr	r3, [pc, #500]	@ (800fe9c <_printf_float+0x2b4>)
 800fca6:	e7d5      	b.n	800fc54 <_printf_float+0x6c>
 800fca8:	6863      	ldr	r3, [r4, #4]
 800fcaa:	1c59      	adds	r1, r3, #1
 800fcac:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800fcb0:	d139      	bne.n	800fd26 <_printf_float+0x13e>
 800fcb2:	2306      	movs	r3, #6
 800fcb4:	6063      	str	r3, [r4, #4]
 800fcb6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800fcba:	2300      	movs	r3, #0
 800fcbc:	6022      	str	r2, [r4, #0]
 800fcbe:	9303      	str	r3, [sp, #12]
 800fcc0:	ab0a      	add	r3, sp, #40	@ 0x28
 800fcc2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800fcc6:	ab09      	add	r3, sp, #36	@ 0x24
 800fcc8:	9300      	str	r3, [sp, #0]
 800fcca:	6861      	ldr	r1, [r4, #4]
 800fccc:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800fcd0:	4628      	mov	r0, r5
 800fcd2:	f7ff fef9 	bl	800fac8 <__cvt>
 800fcd6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800fcda:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fcdc:	4680      	mov	r8, r0
 800fcde:	d129      	bne.n	800fd34 <_printf_float+0x14c>
 800fce0:	1cc8      	adds	r0, r1, #3
 800fce2:	db02      	blt.n	800fcea <_printf_float+0x102>
 800fce4:	6863      	ldr	r3, [r4, #4]
 800fce6:	4299      	cmp	r1, r3
 800fce8:	dd41      	ble.n	800fd6e <_printf_float+0x186>
 800fcea:	f1a9 0902 	sub.w	r9, r9, #2
 800fcee:	fa5f f989 	uxtb.w	r9, r9
 800fcf2:	3901      	subs	r1, #1
 800fcf4:	464a      	mov	r2, r9
 800fcf6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800fcfa:	9109      	str	r1, [sp, #36]	@ 0x24
 800fcfc:	f7ff ff38 	bl	800fb70 <__exponent>
 800fd00:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fd02:	1813      	adds	r3, r2, r0
 800fd04:	2a01      	cmp	r2, #1
 800fd06:	4682      	mov	sl, r0
 800fd08:	6123      	str	r3, [r4, #16]
 800fd0a:	dc02      	bgt.n	800fd12 <_printf_float+0x12a>
 800fd0c:	6822      	ldr	r2, [r4, #0]
 800fd0e:	07d2      	lsls	r2, r2, #31
 800fd10:	d501      	bpl.n	800fd16 <_printf_float+0x12e>
 800fd12:	3301      	adds	r3, #1
 800fd14:	6123      	str	r3, [r4, #16]
 800fd16:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d0a6      	beq.n	800fc6c <_printf_float+0x84>
 800fd1e:	232d      	movs	r3, #45	@ 0x2d
 800fd20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fd24:	e7a2      	b.n	800fc6c <_printf_float+0x84>
 800fd26:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800fd2a:	d1c4      	bne.n	800fcb6 <_printf_float+0xce>
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d1c2      	bne.n	800fcb6 <_printf_float+0xce>
 800fd30:	2301      	movs	r3, #1
 800fd32:	e7bf      	b.n	800fcb4 <_printf_float+0xcc>
 800fd34:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800fd38:	d9db      	bls.n	800fcf2 <_printf_float+0x10a>
 800fd3a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800fd3e:	d118      	bne.n	800fd72 <_printf_float+0x18a>
 800fd40:	2900      	cmp	r1, #0
 800fd42:	6863      	ldr	r3, [r4, #4]
 800fd44:	dd0b      	ble.n	800fd5e <_printf_float+0x176>
 800fd46:	6121      	str	r1, [r4, #16]
 800fd48:	b913      	cbnz	r3, 800fd50 <_printf_float+0x168>
 800fd4a:	6822      	ldr	r2, [r4, #0]
 800fd4c:	07d0      	lsls	r0, r2, #31
 800fd4e:	d502      	bpl.n	800fd56 <_printf_float+0x16e>
 800fd50:	3301      	adds	r3, #1
 800fd52:	440b      	add	r3, r1
 800fd54:	6123      	str	r3, [r4, #16]
 800fd56:	65a1      	str	r1, [r4, #88]	@ 0x58
 800fd58:	f04f 0a00 	mov.w	sl, #0
 800fd5c:	e7db      	b.n	800fd16 <_printf_float+0x12e>
 800fd5e:	b913      	cbnz	r3, 800fd66 <_printf_float+0x17e>
 800fd60:	6822      	ldr	r2, [r4, #0]
 800fd62:	07d2      	lsls	r2, r2, #31
 800fd64:	d501      	bpl.n	800fd6a <_printf_float+0x182>
 800fd66:	3302      	adds	r3, #2
 800fd68:	e7f4      	b.n	800fd54 <_printf_float+0x16c>
 800fd6a:	2301      	movs	r3, #1
 800fd6c:	e7f2      	b.n	800fd54 <_printf_float+0x16c>
 800fd6e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800fd72:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fd74:	4299      	cmp	r1, r3
 800fd76:	db05      	blt.n	800fd84 <_printf_float+0x19c>
 800fd78:	6823      	ldr	r3, [r4, #0]
 800fd7a:	6121      	str	r1, [r4, #16]
 800fd7c:	07d8      	lsls	r0, r3, #31
 800fd7e:	d5ea      	bpl.n	800fd56 <_printf_float+0x16e>
 800fd80:	1c4b      	adds	r3, r1, #1
 800fd82:	e7e7      	b.n	800fd54 <_printf_float+0x16c>
 800fd84:	2900      	cmp	r1, #0
 800fd86:	bfd4      	ite	le
 800fd88:	f1c1 0202 	rsble	r2, r1, #2
 800fd8c:	2201      	movgt	r2, #1
 800fd8e:	4413      	add	r3, r2
 800fd90:	e7e0      	b.n	800fd54 <_printf_float+0x16c>
 800fd92:	6823      	ldr	r3, [r4, #0]
 800fd94:	055a      	lsls	r2, r3, #21
 800fd96:	d407      	bmi.n	800fda8 <_printf_float+0x1c0>
 800fd98:	6923      	ldr	r3, [r4, #16]
 800fd9a:	4642      	mov	r2, r8
 800fd9c:	4631      	mov	r1, r6
 800fd9e:	4628      	mov	r0, r5
 800fda0:	47b8      	blx	r7
 800fda2:	3001      	adds	r0, #1
 800fda4:	d12a      	bne.n	800fdfc <_printf_float+0x214>
 800fda6:	e76b      	b.n	800fc80 <_printf_float+0x98>
 800fda8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800fdac:	f240 80e0 	bls.w	800ff70 <_printf_float+0x388>
 800fdb0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800fdb4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fdb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdbc:	d133      	bne.n	800fe26 <_printf_float+0x23e>
 800fdbe:	4a38      	ldr	r2, [pc, #224]	@ (800fea0 <_printf_float+0x2b8>)
 800fdc0:	2301      	movs	r3, #1
 800fdc2:	4631      	mov	r1, r6
 800fdc4:	4628      	mov	r0, r5
 800fdc6:	47b8      	blx	r7
 800fdc8:	3001      	adds	r0, #1
 800fdca:	f43f af59 	beq.w	800fc80 <_printf_float+0x98>
 800fdce:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800fdd2:	4543      	cmp	r3, r8
 800fdd4:	db02      	blt.n	800fddc <_printf_float+0x1f4>
 800fdd6:	6823      	ldr	r3, [r4, #0]
 800fdd8:	07d8      	lsls	r0, r3, #31
 800fdda:	d50f      	bpl.n	800fdfc <_printf_float+0x214>
 800fddc:	9b05      	ldr	r3, [sp, #20]
 800fdde:	465a      	mov	r2, fp
 800fde0:	4631      	mov	r1, r6
 800fde2:	4628      	mov	r0, r5
 800fde4:	47b8      	blx	r7
 800fde6:	3001      	adds	r0, #1
 800fde8:	f43f af4a 	beq.w	800fc80 <_printf_float+0x98>
 800fdec:	f04f 0900 	mov.w	r9, #0
 800fdf0:	f108 38ff 	add.w	r8, r8, #4294967295
 800fdf4:	f104 0a1a 	add.w	sl, r4, #26
 800fdf8:	45c8      	cmp	r8, r9
 800fdfa:	dc09      	bgt.n	800fe10 <_printf_float+0x228>
 800fdfc:	6823      	ldr	r3, [r4, #0]
 800fdfe:	079b      	lsls	r3, r3, #30
 800fe00:	f100 8107 	bmi.w	8010012 <_printf_float+0x42a>
 800fe04:	68e0      	ldr	r0, [r4, #12]
 800fe06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fe08:	4298      	cmp	r0, r3
 800fe0a:	bfb8      	it	lt
 800fe0c:	4618      	movlt	r0, r3
 800fe0e:	e739      	b.n	800fc84 <_printf_float+0x9c>
 800fe10:	2301      	movs	r3, #1
 800fe12:	4652      	mov	r2, sl
 800fe14:	4631      	mov	r1, r6
 800fe16:	4628      	mov	r0, r5
 800fe18:	47b8      	blx	r7
 800fe1a:	3001      	adds	r0, #1
 800fe1c:	f43f af30 	beq.w	800fc80 <_printf_float+0x98>
 800fe20:	f109 0901 	add.w	r9, r9, #1
 800fe24:	e7e8      	b.n	800fdf8 <_printf_float+0x210>
 800fe26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	dc3b      	bgt.n	800fea4 <_printf_float+0x2bc>
 800fe2c:	4a1c      	ldr	r2, [pc, #112]	@ (800fea0 <_printf_float+0x2b8>)
 800fe2e:	2301      	movs	r3, #1
 800fe30:	4631      	mov	r1, r6
 800fe32:	4628      	mov	r0, r5
 800fe34:	47b8      	blx	r7
 800fe36:	3001      	adds	r0, #1
 800fe38:	f43f af22 	beq.w	800fc80 <_printf_float+0x98>
 800fe3c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800fe40:	ea59 0303 	orrs.w	r3, r9, r3
 800fe44:	d102      	bne.n	800fe4c <_printf_float+0x264>
 800fe46:	6823      	ldr	r3, [r4, #0]
 800fe48:	07d9      	lsls	r1, r3, #31
 800fe4a:	d5d7      	bpl.n	800fdfc <_printf_float+0x214>
 800fe4c:	9b05      	ldr	r3, [sp, #20]
 800fe4e:	465a      	mov	r2, fp
 800fe50:	4631      	mov	r1, r6
 800fe52:	4628      	mov	r0, r5
 800fe54:	47b8      	blx	r7
 800fe56:	3001      	adds	r0, #1
 800fe58:	f43f af12 	beq.w	800fc80 <_printf_float+0x98>
 800fe5c:	f04f 0a00 	mov.w	sl, #0
 800fe60:	f104 0b1a 	add.w	fp, r4, #26
 800fe64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe66:	425b      	negs	r3, r3
 800fe68:	4553      	cmp	r3, sl
 800fe6a:	dc01      	bgt.n	800fe70 <_printf_float+0x288>
 800fe6c:	464b      	mov	r3, r9
 800fe6e:	e794      	b.n	800fd9a <_printf_float+0x1b2>
 800fe70:	2301      	movs	r3, #1
 800fe72:	465a      	mov	r2, fp
 800fe74:	4631      	mov	r1, r6
 800fe76:	4628      	mov	r0, r5
 800fe78:	47b8      	blx	r7
 800fe7a:	3001      	adds	r0, #1
 800fe7c:	f43f af00 	beq.w	800fc80 <_printf_float+0x98>
 800fe80:	f10a 0a01 	add.w	sl, sl, #1
 800fe84:	e7ee      	b.n	800fe64 <_printf_float+0x27c>
 800fe86:	bf00      	nop
 800fe88:	ffffffff 	.word	0xffffffff
 800fe8c:	7fefffff 	.word	0x7fefffff
 800fe90:	080128e9 	.word	0x080128e9
 800fe94:	080128e5 	.word	0x080128e5
 800fe98:	080128f1 	.word	0x080128f1
 800fe9c:	080128ed 	.word	0x080128ed
 800fea0:	080128f5 	.word	0x080128f5
 800fea4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800fea6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800feaa:	4553      	cmp	r3, sl
 800feac:	bfa8      	it	ge
 800feae:	4653      	movge	r3, sl
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	4699      	mov	r9, r3
 800feb4:	dc37      	bgt.n	800ff26 <_printf_float+0x33e>
 800feb6:	2300      	movs	r3, #0
 800feb8:	9307      	str	r3, [sp, #28]
 800feba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800febe:	f104 021a 	add.w	r2, r4, #26
 800fec2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800fec4:	9907      	ldr	r1, [sp, #28]
 800fec6:	9306      	str	r3, [sp, #24]
 800fec8:	eba3 0309 	sub.w	r3, r3, r9
 800fecc:	428b      	cmp	r3, r1
 800fece:	dc31      	bgt.n	800ff34 <_printf_float+0x34c>
 800fed0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fed2:	459a      	cmp	sl, r3
 800fed4:	dc3b      	bgt.n	800ff4e <_printf_float+0x366>
 800fed6:	6823      	ldr	r3, [r4, #0]
 800fed8:	07da      	lsls	r2, r3, #31
 800feda:	d438      	bmi.n	800ff4e <_printf_float+0x366>
 800fedc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fede:	ebaa 0903 	sub.w	r9, sl, r3
 800fee2:	9b06      	ldr	r3, [sp, #24]
 800fee4:	ebaa 0303 	sub.w	r3, sl, r3
 800fee8:	4599      	cmp	r9, r3
 800feea:	bfa8      	it	ge
 800feec:	4699      	movge	r9, r3
 800feee:	f1b9 0f00 	cmp.w	r9, #0
 800fef2:	dc34      	bgt.n	800ff5e <_printf_float+0x376>
 800fef4:	f04f 0800 	mov.w	r8, #0
 800fef8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fefc:	f104 0b1a 	add.w	fp, r4, #26
 800ff00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ff02:	ebaa 0303 	sub.w	r3, sl, r3
 800ff06:	eba3 0309 	sub.w	r3, r3, r9
 800ff0a:	4543      	cmp	r3, r8
 800ff0c:	f77f af76 	ble.w	800fdfc <_printf_float+0x214>
 800ff10:	2301      	movs	r3, #1
 800ff12:	465a      	mov	r2, fp
 800ff14:	4631      	mov	r1, r6
 800ff16:	4628      	mov	r0, r5
 800ff18:	47b8      	blx	r7
 800ff1a:	3001      	adds	r0, #1
 800ff1c:	f43f aeb0 	beq.w	800fc80 <_printf_float+0x98>
 800ff20:	f108 0801 	add.w	r8, r8, #1
 800ff24:	e7ec      	b.n	800ff00 <_printf_float+0x318>
 800ff26:	4642      	mov	r2, r8
 800ff28:	4631      	mov	r1, r6
 800ff2a:	4628      	mov	r0, r5
 800ff2c:	47b8      	blx	r7
 800ff2e:	3001      	adds	r0, #1
 800ff30:	d1c1      	bne.n	800feb6 <_printf_float+0x2ce>
 800ff32:	e6a5      	b.n	800fc80 <_printf_float+0x98>
 800ff34:	2301      	movs	r3, #1
 800ff36:	4631      	mov	r1, r6
 800ff38:	4628      	mov	r0, r5
 800ff3a:	9206      	str	r2, [sp, #24]
 800ff3c:	47b8      	blx	r7
 800ff3e:	3001      	adds	r0, #1
 800ff40:	f43f ae9e 	beq.w	800fc80 <_printf_float+0x98>
 800ff44:	9b07      	ldr	r3, [sp, #28]
 800ff46:	9a06      	ldr	r2, [sp, #24]
 800ff48:	3301      	adds	r3, #1
 800ff4a:	9307      	str	r3, [sp, #28]
 800ff4c:	e7b9      	b.n	800fec2 <_printf_float+0x2da>
 800ff4e:	9b05      	ldr	r3, [sp, #20]
 800ff50:	465a      	mov	r2, fp
 800ff52:	4631      	mov	r1, r6
 800ff54:	4628      	mov	r0, r5
 800ff56:	47b8      	blx	r7
 800ff58:	3001      	adds	r0, #1
 800ff5a:	d1bf      	bne.n	800fedc <_printf_float+0x2f4>
 800ff5c:	e690      	b.n	800fc80 <_printf_float+0x98>
 800ff5e:	9a06      	ldr	r2, [sp, #24]
 800ff60:	464b      	mov	r3, r9
 800ff62:	4442      	add	r2, r8
 800ff64:	4631      	mov	r1, r6
 800ff66:	4628      	mov	r0, r5
 800ff68:	47b8      	blx	r7
 800ff6a:	3001      	adds	r0, #1
 800ff6c:	d1c2      	bne.n	800fef4 <_printf_float+0x30c>
 800ff6e:	e687      	b.n	800fc80 <_printf_float+0x98>
 800ff70:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800ff74:	f1b9 0f01 	cmp.w	r9, #1
 800ff78:	dc01      	bgt.n	800ff7e <_printf_float+0x396>
 800ff7a:	07db      	lsls	r3, r3, #31
 800ff7c:	d536      	bpl.n	800ffec <_printf_float+0x404>
 800ff7e:	2301      	movs	r3, #1
 800ff80:	4642      	mov	r2, r8
 800ff82:	4631      	mov	r1, r6
 800ff84:	4628      	mov	r0, r5
 800ff86:	47b8      	blx	r7
 800ff88:	3001      	adds	r0, #1
 800ff8a:	f43f ae79 	beq.w	800fc80 <_printf_float+0x98>
 800ff8e:	9b05      	ldr	r3, [sp, #20]
 800ff90:	465a      	mov	r2, fp
 800ff92:	4631      	mov	r1, r6
 800ff94:	4628      	mov	r0, r5
 800ff96:	47b8      	blx	r7
 800ff98:	3001      	adds	r0, #1
 800ff9a:	f43f ae71 	beq.w	800fc80 <_printf_float+0x98>
 800ff9e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800ffa2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ffa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffaa:	f109 39ff 	add.w	r9, r9, #4294967295
 800ffae:	d018      	beq.n	800ffe2 <_printf_float+0x3fa>
 800ffb0:	464b      	mov	r3, r9
 800ffb2:	f108 0201 	add.w	r2, r8, #1
 800ffb6:	4631      	mov	r1, r6
 800ffb8:	4628      	mov	r0, r5
 800ffba:	47b8      	blx	r7
 800ffbc:	3001      	adds	r0, #1
 800ffbe:	d10c      	bne.n	800ffda <_printf_float+0x3f2>
 800ffc0:	e65e      	b.n	800fc80 <_printf_float+0x98>
 800ffc2:	2301      	movs	r3, #1
 800ffc4:	465a      	mov	r2, fp
 800ffc6:	4631      	mov	r1, r6
 800ffc8:	4628      	mov	r0, r5
 800ffca:	47b8      	blx	r7
 800ffcc:	3001      	adds	r0, #1
 800ffce:	f43f ae57 	beq.w	800fc80 <_printf_float+0x98>
 800ffd2:	f108 0801 	add.w	r8, r8, #1
 800ffd6:	45c8      	cmp	r8, r9
 800ffd8:	dbf3      	blt.n	800ffc2 <_printf_float+0x3da>
 800ffda:	4653      	mov	r3, sl
 800ffdc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ffe0:	e6dc      	b.n	800fd9c <_printf_float+0x1b4>
 800ffe2:	f04f 0800 	mov.w	r8, #0
 800ffe6:	f104 0b1a 	add.w	fp, r4, #26
 800ffea:	e7f4      	b.n	800ffd6 <_printf_float+0x3ee>
 800ffec:	2301      	movs	r3, #1
 800ffee:	4642      	mov	r2, r8
 800fff0:	e7e1      	b.n	800ffb6 <_printf_float+0x3ce>
 800fff2:	2301      	movs	r3, #1
 800fff4:	464a      	mov	r2, r9
 800fff6:	4631      	mov	r1, r6
 800fff8:	4628      	mov	r0, r5
 800fffa:	47b8      	blx	r7
 800fffc:	3001      	adds	r0, #1
 800fffe:	f43f ae3f 	beq.w	800fc80 <_printf_float+0x98>
 8010002:	f108 0801 	add.w	r8, r8, #1
 8010006:	68e3      	ldr	r3, [r4, #12]
 8010008:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801000a:	1a5b      	subs	r3, r3, r1
 801000c:	4543      	cmp	r3, r8
 801000e:	dcf0      	bgt.n	800fff2 <_printf_float+0x40a>
 8010010:	e6f8      	b.n	800fe04 <_printf_float+0x21c>
 8010012:	f04f 0800 	mov.w	r8, #0
 8010016:	f104 0919 	add.w	r9, r4, #25
 801001a:	e7f4      	b.n	8010006 <_printf_float+0x41e>

0801001c <_printf_common>:
 801001c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010020:	4616      	mov	r6, r2
 8010022:	4698      	mov	r8, r3
 8010024:	688a      	ldr	r2, [r1, #8]
 8010026:	690b      	ldr	r3, [r1, #16]
 8010028:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801002c:	4293      	cmp	r3, r2
 801002e:	bfb8      	it	lt
 8010030:	4613      	movlt	r3, r2
 8010032:	6033      	str	r3, [r6, #0]
 8010034:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010038:	4607      	mov	r7, r0
 801003a:	460c      	mov	r4, r1
 801003c:	b10a      	cbz	r2, 8010042 <_printf_common+0x26>
 801003e:	3301      	adds	r3, #1
 8010040:	6033      	str	r3, [r6, #0]
 8010042:	6823      	ldr	r3, [r4, #0]
 8010044:	0699      	lsls	r1, r3, #26
 8010046:	bf42      	ittt	mi
 8010048:	6833      	ldrmi	r3, [r6, #0]
 801004a:	3302      	addmi	r3, #2
 801004c:	6033      	strmi	r3, [r6, #0]
 801004e:	6825      	ldr	r5, [r4, #0]
 8010050:	f015 0506 	ands.w	r5, r5, #6
 8010054:	d106      	bne.n	8010064 <_printf_common+0x48>
 8010056:	f104 0a19 	add.w	sl, r4, #25
 801005a:	68e3      	ldr	r3, [r4, #12]
 801005c:	6832      	ldr	r2, [r6, #0]
 801005e:	1a9b      	subs	r3, r3, r2
 8010060:	42ab      	cmp	r3, r5
 8010062:	dc26      	bgt.n	80100b2 <_printf_common+0x96>
 8010064:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010068:	6822      	ldr	r2, [r4, #0]
 801006a:	3b00      	subs	r3, #0
 801006c:	bf18      	it	ne
 801006e:	2301      	movne	r3, #1
 8010070:	0692      	lsls	r2, r2, #26
 8010072:	d42b      	bmi.n	80100cc <_printf_common+0xb0>
 8010074:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010078:	4641      	mov	r1, r8
 801007a:	4638      	mov	r0, r7
 801007c:	47c8      	blx	r9
 801007e:	3001      	adds	r0, #1
 8010080:	d01e      	beq.n	80100c0 <_printf_common+0xa4>
 8010082:	6823      	ldr	r3, [r4, #0]
 8010084:	6922      	ldr	r2, [r4, #16]
 8010086:	f003 0306 	and.w	r3, r3, #6
 801008a:	2b04      	cmp	r3, #4
 801008c:	bf02      	ittt	eq
 801008e:	68e5      	ldreq	r5, [r4, #12]
 8010090:	6833      	ldreq	r3, [r6, #0]
 8010092:	1aed      	subeq	r5, r5, r3
 8010094:	68a3      	ldr	r3, [r4, #8]
 8010096:	bf0c      	ite	eq
 8010098:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801009c:	2500      	movne	r5, #0
 801009e:	4293      	cmp	r3, r2
 80100a0:	bfc4      	itt	gt
 80100a2:	1a9b      	subgt	r3, r3, r2
 80100a4:	18ed      	addgt	r5, r5, r3
 80100a6:	2600      	movs	r6, #0
 80100a8:	341a      	adds	r4, #26
 80100aa:	42b5      	cmp	r5, r6
 80100ac:	d11a      	bne.n	80100e4 <_printf_common+0xc8>
 80100ae:	2000      	movs	r0, #0
 80100b0:	e008      	b.n	80100c4 <_printf_common+0xa8>
 80100b2:	2301      	movs	r3, #1
 80100b4:	4652      	mov	r2, sl
 80100b6:	4641      	mov	r1, r8
 80100b8:	4638      	mov	r0, r7
 80100ba:	47c8      	blx	r9
 80100bc:	3001      	adds	r0, #1
 80100be:	d103      	bne.n	80100c8 <_printf_common+0xac>
 80100c0:	f04f 30ff 	mov.w	r0, #4294967295
 80100c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100c8:	3501      	adds	r5, #1
 80100ca:	e7c6      	b.n	801005a <_printf_common+0x3e>
 80100cc:	18e1      	adds	r1, r4, r3
 80100ce:	1c5a      	adds	r2, r3, #1
 80100d0:	2030      	movs	r0, #48	@ 0x30
 80100d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80100d6:	4422      	add	r2, r4
 80100d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80100dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80100e0:	3302      	adds	r3, #2
 80100e2:	e7c7      	b.n	8010074 <_printf_common+0x58>
 80100e4:	2301      	movs	r3, #1
 80100e6:	4622      	mov	r2, r4
 80100e8:	4641      	mov	r1, r8
 80100ea:	4638      	mov	r0, r7
 80100ec:	47c8      	blx	r9
 80100ee:	3001      	adds	r0, #1
 80100f0:	d0e6      	beq.n	80100c0 <_printf_common+0xa4>
 80100f2:	3601      	adds	r6, #1
 80100f4:	e7d9      	b.n	80100aa <_printf_common+0x8e>
	...

080100f8 <_printf_i>:
 80100f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80100fc:	7e0f      	ldrb	r7, [r1, #24]
 80100fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010100:	2f78      	cmp	r7, #120	@ 0x78
 8010102:	4691      	mov	r9, r2
 8010104:	4680      	mov	r8, r0
 8010106:	460c      	mov	r4, r1
 8010108:	469a      	mov	sl, r3
 801010a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801010e:	d807      	bhi.n	8010120 <_printf_i+0x28>
 8010110:	2f62      	cmp	r7, #98	@ 0x62
 8010112:	d80a      	bhi.n	801012a <_printf_i+0x32>
 8010114:	2f00      	cmp	r7, #0
 8010116:	f000 80d1 	beq.w	80102bc <_printf_i+0x1c4>
 801011a:	2f58      	cmp	r7, #88	@ 0x58
 801011c:	f000 80b8 	beq.w	8010290 <_printf_i+0x198>
 8010120:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010124:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010128:	e03a      	b.n	80101a0 <_printf_i+0xa8>
 801012a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801012e:	2b15      	cmp	r3, #21
 8010130:	d8f6      	bhi.n	8010120 <_printf_i+0x28>
 8010132:	a101      	add	r1, pc, #4	@ (adr r1, 8010138 <_printf_i+0x40>)
 8010134:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010138:	08010191 	.word	0x08010191
 801013c:	080101a5 	.word	0x080101a5
 8010140:	08010121 	.word	0x08010121
 8010144:	08010121 	.word	0x08010121
 8010148:	08010121 	.word	0x08010121
 801014c:	08010121 	.word	0x08010121
 8010150:	080101a5 	.word	0x080101a5
 8010154:	08010121 	.word	0x08010121
 8010158:	08010121 	.word	0x08010121
 801015c:	08010121 	.word	0x08010121
 8010160:	08010121 	.word	0x08010121
 8010164:	080102a3 	.word	0x080102a3
 8010168:	080101cf 	.word	0x080101cf
 801016c:	0801025d 	.word	0x0801025d
 8010170:	08010121 	.word	0x08010121
 8010174:	08010121 	.word	0x08010121
 8010178:	080102c5 	.word	0x080102c5
 801017c:	08010121 	.word	0x08010121
 8010180:	080101cf 	.word	0x080101cf
 8010184:	08010121 	.word	0x08010121
 8010188:	08010121 	.word	0x08010121
 801018c:	08010265 	.word	0x08010265
 8010190:	6833      	ldr	r3, [r6, #0]
 8010192:	1d1a      	adds	r2, r3, #4
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	6032      	str	r2, [r6, #0]
 8010198:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801019c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80101a0:	2301      	movs	r3, #1
 80101a2:	e09c      	b.n	80102de <_printf_i+0x1e6>
 80101a4:	6833      	ldr	r3, [r6, #0]
 80101a6:	6820      	ldr	r0, [r4, #0]
 80101a8:	1d19      	adds	r1, r3, #4
 80101aa:	6031      	str	r1, [r6, #0]
 80101ac:	0606      	lsls	r6, r0, #24
 80101ae:	d501      	bpl.n	80101b4 <_printf_i+0xbc>
 80101b0:	681d      	ldr	r5, [r3, #0]
 80101b2:	e003      	b.n	80101bc <_printf_i+0xc4>
 80101b4:	0645      	lsls	r5, r0, #25
 80101b6:	d5fb      	bpl.n	80101b0 <_printf_i+0xb8>
 80101b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80101bc:	2d00      	cmp	r5, #0
 80101be:	da03      	bge.n	80101c8 <_printf_i+0xd0>
 80101c0:	232d      	movs	r3, #45	@ 0x2d
 80101c2:	426d      	negs	r5, r5
 80101c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80101c8:	4858      	ldr	r0, [pc, #352]	@ (801032c <_printf_i+0x234>)
 80101ca:	230a      	movs	r3, #10
 80101cc:	e011      	b.n	80101f2 <_printf_i+0xfa>
 80101ce:	6821      	ldr	r1, [r4, #0]
 80101d0:	6833      	ldr	r3, [r6, #0]
 80101d2:	0608      	lsls	r0, r1, #24
 80101d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80101d8:	d402      	bmi.n	80101e0 <_printf_i+0xe8>
 80101da:	0649      	lsls	r1, r1, #25
 80101dc:	bf48      	it	mi
 80101de:	b2ad      	uxthmi	r5, r5
 80101e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80101e2:	4852      	ldr	r0, [pc, #328]	@ (801032c <_printf_i+0x234>)
 80101e4:	6033      	str	r3, [r6, #0]
 80101e6:	bf14      	ite	ne
 80101e8:	230a      	movne	r3, #10
 80101ea:	2308      	moveq	r3, #8
 80101ec:	2100      	movs	r1, #0
 80101ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80101f2:	6866      	ldr	r6, [r4, #4]
 80101f4:	60a6      	str	r6, [r4, #8]
 80101f6:	2e00      	cmp	r6, #0
 80101f8:	db05      	blt.n	8010206 <_printf_i+0x10e>
 80101fa:	6821      	ldr	r1, [r4, #0]
 80101fc:	432e      	orrs	r6, r5
 80101fe:	f021 0104 	bic.w	r1, r1, #4
 8010202:	6021      	str	r1, [r4, #0]
 8010204:	d04b      	beq.n	801029e <_printf_i+0x1a6>
 8010206:	4616      	mov	r6, r2
 8010208:	fbb5 f1f3 	udiv	r1, r5, r3
 801020c:	fb03 5711 	mls	r7, r3, r1, r5
 8010210:	5dc7      	ldrb	r7, [r0, r7]
 8010212:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010216:	462f      	mov	r7, r5
 8010218:	42bb      	cmp	r3, r7
 801021a:	460d      	mov	r5, r1
 801021c:	d9f4      	bls.n	8010208 <_printf_i+0x110>
 801021e:	2b08      	cmp	r3, #8
 8010220:	d10b      	bne.n	801023a <_printf_i+0x142>
 8010222:	6823      	ldr	r3, [r4, #0]
 8010224:	07df      	lsls	r7, r3, #31
 8010226:	d508      	bpl.n	801023a <_printf_i+0x142>
 8010228:	6923      	ldr	r3, [r4, #16]
 801022a:	6861      	ldr	r1, [r4, #4]
 801022c:	4299      	cmp	r1, r3
 801022e:	bfde      	ittt	le
 8010230:	2330      	movle	r3, #48	@ 0x30
 8010232:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010236:	f106 36ff 	addle.w	r6, r6, #4294967295
 801023a:	1b92      	subs	r2, r2, r6
 801023c:	6122      	str	r2, [r4, #16]
 801023e:	f8cd a000 	str.w	sl, [sp]
 8010242:	464b      	mov	r3, r9
 8010244:	aa03      	add	r2, sp, #12
 8010246:	4621      	mov	r1, r4
 8010248:	4640      	mov	r0, r8
 801024a:	f7ff fee7 	bl	801001c <_printf_common>
 801024e:	3001      	adds	r0, #1
 8010250:	d14a      	bne.n	80102e8 <_printf_i+0x1f0>
 8010252:	f04f 30ff 	mov.w	r0, #4294967295
 8010256:	b004      	add	sp, #16
 8010258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801025c:	6823      	ldr	r3, [r4, #0]
 801025e:	f043 0320 	orr.w	r3, r3, #32
 8010262:	6023      	str	r3, [r4, #0]
 8010264:	4832      	ldr	r0, [pc, #200]	@ (8010330 <_printf_i+0x238>)
 8010266:	2778      	movs	r7, #120	@ 0x78
 8010268:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801026c:	6823      	ldr	r3, [r4, #0]
 801026e:	6831      	ldr	r1, [r6, #0]
 8010270:	061f      	lsls	r7, r3, #24
 8010272:	f851 5b04 	ldr.w	r5, [r1], #4
 8010276:	d402      	bmi.n	801027e <_printf_i+0x186>
 8010278:	065f      	lsls	r7, r3, #25
 801027a:	bf48      	it	mi
 801027c:	b2ad      	uxthmi	r5, r5
 801027e:	6031      	str	r1, [r6, #0]
 8010280:	07d9      	lsls	r1, r3, #31
 8010282:	bf44      	itt	mi
 8010284:	f043 0320 	orrmi.w	r3, r3, #32
 8010288:	6023      	strmi	r3, [r4, #0]
 801028a:	b11d      	cbz	r5, 8010294 <_printf_i+0x19c>
 801028c:	2310      	movs	r3, #16
 801028e:	e7ad      	b.n	80101ec <_printf_i+0xf4>
 8010290:	4826      	ldr	r0, [pc, #152]	@ (801032c <_printf_i+0x234>)
 8010292:	e7e9      	b.n	8010268 <_printf_i+0x170>
 8010294:	6823      	ldr	r3, [r4, #0]
 8010296:	f023 0320 	bic.w	r3, r3, #32
 801029a:	6023      	str	r3, [r4, #0]
 801029c:	e7f6      	b.n	801028c <_printf_i+0x194>
 801029e:	4616      	mov	r6, r2
 80102a0:	e7bd      	b.n	801021e <_printf_i+0x126>
 80102a2:	6833      	ldr	r3, [r6, #0]
 80102a4:	6825      	ldr	r5, [r4, #0]
 80102a6:	6961      	ldr	r1, [r4, #20]
 80102a8:	1d18      	adds	r0, r3, #4
 80102aa:	6030      	str	r0, [r6, #0]
 80102ac:	062e      	lsls	r6, r5, #24
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	d501      	bpl.n	80102b6 <_printf_i+0x1be>
 80102b2:	6019      	str	r1, [r3, #0]
 80102b4:	e002      	b.n	80102bc <_printf_i+0x1c4>
 80102b6:	0668      	lsls	r0, r5, #25
 80102b8:	d5fb      	bpl.n	80102b2 <_printf_i+0x1ba>
 80102ba:	8019      	strh	r1, [r3, #0]
 80102bc:	2300      	movs	r3, #0
 80102be:	6123      	str	r3, [r4, #16]
 80102c0:	4616      	mov	r6, r2
 80102c2:	e7bc      	b.n	801023e <_printf_i+0x146>
 80102c4:	6833      	ldr	r3, [r6, #0]
 80102c6:	1d1a      	adds	r2, r3, #4
 80102c8:	6032      	str	r2, [r6, #0]
 80102ca:	681e      	ldr	r6, [r3, #0]
 80102cc:	6862      	ldr	r2, [r4, #4]
 80102ce:	2100      	movs	r1, #0
 80102d0:	4630      	mov	r0, r6
 80102d2:	f7f0 f815 	bl	8000300 <memchr>
 80102d6:	b108      	cbz	r0, 80102dc <_printf_i+0x1e4>
 80102d8:	1b80      	subs	r0, r0, r6
 80102da:	6060      	str	r0, [r4, #4]
 80102dc:	6863      	ldr	r3, [r4, #4]
 80102de:	6123      	str	r3, [r4, #16]
 80102e0:	2300      	movs	r3, #0
 80102e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80102e6:	e7aa      	b.n	801023e <_printf_i+0x146>
 80102e8:	6923      	ldr	r3, [r4, #16]
 80102ea:	4632      	mov	r2, r6
 80102ec:	4649      	mov	r1, r9
 80102ee:	4640      	mov	r0, r8
 80102f0:	47d0      	blx	sl
 80102f2:	3001      	adds	r0, #1
 80102f4:	d0ad      	beq.n	8010252 <_printf_i+0x15a>
 80102f6:	6823      	ldr	r3, [r4, #0]
 80102f8:	079b      	lsls	r3, r3, #30
 80102fa:	d413      	bmi.n	8010324 <_printf_i+0x22c>
 80102fc:	68e0      	ldr	r0, [r4, #12]
 80102fe:	9b03      	ldr	r3, [sp, #12]
 8010300:	4298      	cmp	r0, r3
 8010302:	bfb8      	it	lt
 8010304:	4618      	movlt	r0, r3
 8010306:	e7a6      	b.n	8010256 <_printf_i+0x15e>
 8010308:	2301      	movs	r3, #1
 801030a:	4632      	mov	r2, r6
 801030c:	4649      	mov	r1, r9
 801030e:	4640      	mov	r0, r8
 8010310:	47d0      	blx	sl
 8010312:	3001      	adds	r0, #1
 8010314:	d09d      	beq.n	8010252 <_printf_i+0x15a>
 8010316:	3501      	adds	r5, #1
 8010318:	68e3      	ldr	r3, [r4, #12]
 801031a:	9903      	ldr	r1, [sp, #12]
 801031c:	1a5b      	subs	r3, r3, r1
 801031e:	42ab      	cmp	r3, r5
 8010320:	dcf2      	bgt.n	8010308 <_printf_i+0x210>
 8010322:	e7eb      	b.n	80102fc <_printf_i+0x204>
 8010324:	2500      	movs	r5, #0
 8010326:	f104 0619 	add.w	r6, r4, #25
 801032a:	e7f5      	b.n	8010318 <_printf_i+0x220>
 801032c:	080128f7 	.word	0x080128f7
 8010330:	08012908 	.word	0x08012908

08010334 <std>:
 8010334:	2300      	movs	r3, #0
 8010336:	b510      	push	{r4, lr}
 8010338:	4604      	mov	r4, r0
 801033a:	e9c0 3300 	strd	r3, r3, [r0]
 801033e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010342:	6083      	str	r3, [r0, #8]
 8010344:	8181      	strh	r1, [r0, #12]
 8010346:	6643      	str	r3, [r0, #100]	@ 0x64
 8010348:	81c2      	strh	r2, [r0, #14]
 801034a:	6183      	str	r3, [r0, #24]
 801034c:	4619      	mov	r1, r3
 801034e:	2208      	movs	r2, #8
 8010350:	305c      	adds	r0, #92	@ 0x5c
 8010352:	f000 f9bd 	bl	80106d0 <memset>
 8010356:	4b0d      	ldr	r3, [pc, #52]	@ (801038c <std+0x58>)
 8010358:	6263      	str	r3, [r4, #36]	@ 0x24
 801035a:	4b0d      	ldr	r3, [pc, #52]	@ (8010390 <std+0x5c>)
 801035c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801035e:	4b0d      	ldr	r3, [pc, #52]	@ (8010394 <std+0x60>)
 8010360:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010362:	4b0d      	ldr	r3, [pc, #52]	@ (8010398 <std+0x64>)
 8010364:	6323      	str	r3, [r4, #48]	@ 0x30
 8010366:	4b0d      	ldr	r3, [pc, #52]	@ (801039c <std+0x68>)
 8010368:	6224      	str	r4, [r4, #32]
 801036a:	429c      	cmp	r4, r3
 801036c:	d006      	beq.n	801037c <std+0x48>
 801036e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010372:	4294      	cmp	r4, r2
 8010374:	d002      	beq.n	801037c <std+0x48>
 8010376:	33d0      	adds	r3, #208	@ 0xd0
 8010378:	429c      	cmp	r4, r3
 801037a:	d105      	bne.n	8010388 <std+0x54>
 801037c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010384:	f000 ba8c 	b.w	80108a0 <__retarget_lock_init_recursive>
 8010388:	bd10      	pop	{r4, pc}
 801038a:	bf00      	nop
 801038c:	08010521 	.word	0x08010521
 8010390:	08010543 	.word	0x08010543
 8010394:	0801057b 	.word	0x0801057b
 8010398:	0801059f 	.word	0x0801059f
 801039c:	240006b8 	.word	0x240006b8

080103a0 <stdio_exit_handler>:
 80103a0:	4a02      	ldr	r2, [pc, #8]	@ (80103ac <stdio_exit_handler+0xc>)
 80103a2:	4903      	ldr	r1, [pc, #12]	@ (80103b0 <stdio_exit_handler+0x10>)
 80103a4:	4803      	ldr	r0, [pc, #12]	@ (80103b4 <stdio_exit_handler+0x14>)
 80103a6:	f000 b869 	b.w	801047c <_fwalk_sglue>
 80103aa:	bf00      	nop
 80103ac:	2400002c 	.word	0x2400002c
 80103b0:	080123fd 	.word	0x080123fd
 80103b4:	2400003c 	.word	0x2400003c

080103b8 <cleanup_stdio>:
 80103b8:	6841      	ldr	r1, [r0, #4]
 80103ba:	4b0c      	ldr	r3, [pc, #48]	@ (80103ec <cleanup_stdio+0x34>)
 80103bc:	4299      	cmp	r1, r3
 80103be:	b510      	push	{r4, lr}
 80103c0:	4604      	mov	r4, r0
 80103c2:	d001      	beq.n	80103c8 <cleanup_stdio+0x10>
 80103c4:	f002 f81a 	bl	80123fc <_fflush_r>
 80103c8:	68a1      	ldr	r1, [r4, #8]
 80103ca:	4b09      	ldr	r3, [pc, #36]	@ (80103f0 <cleanup_stdio+0x38>)
 80103cc:	4299      	cmp	r1, r3
 80103ce:	d002      	beq.n	80103d6 <cleanup_stdio+0x1e>
 80103d0:	4620      	mov	r0, r4
 80103d2:	f002 f813 	bl	80123fc <_fflush_r>
 80103d6:	68e1      	ldr	r1, [r4, #12]
 80103d8:	4b06      	ldr	r3, [pc, #24]	@ (80103f4 <cleanup_stdio+0x3c>)
 80103da:	4299      	cmp	r1, r3
 80103dc:	d004      	beq.n	80103e8 <cleanup_stdio+0x30>
 80103de:	4620      	mov	r0, r4
 80103e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80103e4:	f002 b80a 	b.w	80123fc <_fflush_r>
 80103e8:	bd10      	pop	{r4, pc}
 80103ea:	bf00      	nop
 80103ec:	240006b8 	.word	0x240006b8
 80103f0:	24000720 	.word	0x24000720
 80103f4:	24000788 	.word	0x24000788

080103f8 <global_stdio_init.part.0>:
 80103f8:	b510      	push	{r4, lr}
 80103fa:	4b0b      	ldr	r3, [pc, #44]	@ (8010428 <global_stdio_init.part.0+0x30>)
 80103fc:	4c0b      	ldr	r4, [pc, #44]	@ (801042c <global_stdio_init.part.0+0x34>)
 80103fe:	4a0c      	ldr	r2, [pc, #48]	@ (8010430 <global_stdio_init.part.0+0x38>)
 8010400:	601a      	str	r2, [r3, #0]
 8010402:	4620      	mov	r0, r4
 8010404:	2200      	movs	r2, #0
 8010406:	2104      	movs	r1, #4
 8010408:	f7ff ff94 	bl	8010334 <std>
 801040c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010410:	2201      	movs	r2, #1
 8010412:	2109      	movs	r1, #9
 8010414:	f7ff ff8e 	bl	8010334 <std>
 8010418:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801041c:	2202      	movs	r2, #2
 801041e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010422:	2112      	movs	r1, #18
 8010424:	f7ff bf86 	b.w	8010334 <std>
 8010428:	240007f0 	.word	0x240007f0
 801042c:	240006b8 	.word	0x240006b8
 8010430:	080103a1 	.word	0x080103a1

08010434 <__sfp_lock_acquire>:
 8010434:	4801      	ldr	r0, [pc, #4]	@ (801043c <__sfp_lock_acquire+0x8>)
 8010436:	f000 ba34 	b.w	80108a2 <__retarget_lock_acquire_recursive>
 801043a:	bf00      	nop
 801043c:	240007f9 	.word	0x240007f9

08010440 <__sfp_lock_release>:
 8010440:	4801      	ldr	r0, [pc, #4]	@ (8010448 <__sfp_lock_release+0x8>)
 8010442:	f000 ba2f 	b.w	80108a4 <__retarget_lock_release_recursive>
 8010446:	bf00      	nop
 8010448:	240007f9 	.word	0x240007f9

0801044c <__sinit>:
 801044c:	b510      	push	{r4, lr}
 801044e:	4604      	mov	r4, r0
 8010450:	f7ff fff0 	bl	8010434 <__sfp_lock_acquire>
 8010454:	6a23      	ldr	r3, [r4, #32]
 8010456:	b11b      	cbz	r3, 8010460 <__sinit+0x14>
 8010458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801045c:	f7ff bff0 	b.w	8010440 <__sfp_lock_release>
 8010460:	4b04      	ldr	r3, [pc, #16]	@ (8010474 <__sinit+0x28>)
 8010462:	6223      	str	r3, [r4, #32]
 8010464:	4b04      	ldr	r3, [pc, #16]	@ (8010478 <__sinit+0x2c>)
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	2b00      	cmp	r3, #0
 801046a:	d1f5      	bne.n	8010458 <__sinit+0xc>
 801046c:	f7ff ffc4 	bl	80103f8 <global_stdio_init.part.0>
 8010470:	e7f2      	b.n	8010458 <__sinit+0xc>
 8010472:	bf00      	nop
 8010474:	080103b9 	.word	0x080103b9
 8010478:	240007f0 	.word	0x240007f0

0801047c <_fwalk_sglue>:
 801047c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010480:	4607      	mov	r7, r0
 8010482:	4688      	mov	r8, r1
 8010484:	4614      	mov	r4, r2
 8010486:	2600      	movs	r6, #0
 8010488:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801048c:	f1b9 0901 	subs.w	r9, r9, #1
 8010490:	d505      	bpl.n	801049e <_fwalk_sglue+0x22>
 8010492:	6824      	ldr	r4, [r4, #0]
 8010494:	2c00      	cmp	r4, #0
 8010496:	d1f7      	bne.n	8010488 <_fwalk_sglue+0xc>
 8010498:	4630      	mov	r0, r6
 801049a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801049e:	89ab      	ldrh	r3, [r5, #12]
 80104a0:	2b01      	cmp	r3, #1
 80104a2:	d907      	bls.n	80104b4 <_fwalk_sglue+0x38>
 80104a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80104a8:	3301      	adds	r3, #1
 80104aa:	d003      	beq.n	80104b4 <_fwalk_sglue+0x38>
 80104ac:	4629      	mov	r1, r5
 80104ae:	4638      	mov	r0, r7
 80104b0:	47c0      	blx	r8
 80104b2:	4306      	orrs	r6, r0
 80104b4:	3568      	adds	r5, #104	@ 0x68
 80104b6:	e7e9      	b.n	801048c <_fwalk_sglue+0x10>

080104b8 <iprintf>:
 80104b8:	b40f      	push	{r0, r1, r2, r3}
 80104ba:	b507      	push	{r0, r1, r2, lr}
 80104bc:	4906      	ldr	r1, [pc, #24]	@ (80104d8 <iprintf+0x20>)
 80104be:	ab04      	add	r3, sp, #16
 80104c0:	6808      	ldr	r0, [r1, #0]
 80104c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80104c6:	6881      	ldr	r1, [r0, #8]
 80104c8:	9301      	str	r3, [sp, #4]
 80104ca:	f001 fdfb 	bl	80120c4 <_vfiprintf_r>
 80104ce:	b003      	add	sp, #12
 80104d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80104d4:	b004      	add	sp, #16
 80104d6:	4770      	bx	lr
 80104d8:	24000038 	.word	0x24000038

080104dc <siprintf>:
 80104dc:	b40e      	push	{r1, r2, r3}
 80104de:	b510      	push	{r4, lr}
 80104e0:	b09d      	sub	sp, #116	@ 0x74
 80104e2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80104e4:	9002      	str	r0, [sp, #8]
 80104e6:	9006      	str	r0, [sp, #24]
 80104e8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80104ec:	480a      	ldr	r0, [pc, #40]	@ (8010518 <siprintf+0x3c>)
 80104ee:	9107      	str	r1, [sp, #28]
 80104f0:	9104      	str	r1, [sp, #16]
 80104f2:	490a      	ldr	r1, [pc, #40]	@ (801051c <siprintf+0x40>)
 80104f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80104f8:	9105      	str	r1, [sp, #20]
 80104fa:	2400      	movs	r4, #0
 80104fc:	a902      	add	r1, sp, #8
 80104fe:	6800      	ldr	r0, [r0, #0]
 8010500:	9301      	str	r3, [sp, #4]
 8010502:	941b      	str	r4, [sp, #108]	@ 0x6c
 8010504:	f001 fcb8 	bl	8011e78 <_svfiprintf_r>
 8010508:	9b02      	ldr	r3, [sp, #8]
 801050a:	701c      	strb	r4, [r3, #0]
 801050c:	b01d      	add	sp, #116	@ 0x74
 801050e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010512:	b003      	add	sp, #12
 8010514:	4770      	bx	lr
 8010516:	bf00      	nop
 8010518:	24000038 	.word	0x24000038
 801051c:	ffff0208 	.word	0xffff0208

08010520 <__sread>:
 8010520:	b510      	push	{r4, lr}
 8010522:	460c      	mov	r4, r1
 8010524:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010528:	f000 f96c 	bl	8010804 <_read_r>
 801052c:	2800      	cmp	r0, #0
 801052e:	bfab      	itete	ge
 8010530:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010532:	89a3      	ldrhlt	r3, [r4, #12]
 8010534:	181b      	addge	r3, r3, r0
 8010536:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801053a:	bfac      	ite	ge
 801053c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801053e:	81a3      	strhlt	r3, [r4, #12]
 8010540:	bd10      	pop	{r4, pc}

08010542 <__swrite>:
 8010542:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010546:	461f      	mov	r7, r3
 8010548:	898b      	ldrh	r3, [r1, #12]
 801054a:	05db      	lsls	r3, r3, #23
 801054c:	4605      	mov	r5, r0
 801054e:	460c      	mov	r4, r1
 8010550:	4616      	mov	r6, r2
 8010552:	d505      	bpl.n	8010560 <__swrite+0x1e>
 8010554:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010558:	2302      	movs	r3, #2
 801055a:	2200      	movs	r2, #0
 801055c:	f000 f940 	bl	80107e0 <_lseek_r>
 8010560:	89a3      	ldrh	r3, [r4, #12]
 8010562:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010566:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801056a:	81a3      	strh	r3, [r4, #12]
 801056c:	4632      	mov	r2, r6
 801056e:	463b      	mov	r3, r7
 8010570:	4628      	mov	r0, r5
 8010572:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010576:	f000 b957 	b.w	8010828 <_write_r>

0801057a <__sseek>:
 801057a:	b510      	push	{r4, lr}
 801057c:	460c      	mov	r4, r1
 801057e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010582:	f000 f92d 	bl	80107e0 <_lseek_r>
 8010586:	1c43      	adds	r3, r0, #1
 8010588:	89a3      	ldrh	r3, [r4, #12]
 801058a:	bf15      	itete	ne
 801058c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801058e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010592:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010596:	81a3      	strheq	r3, [r4, #12]
 8010598:	bf18      	it	ne
 801059a:	81a3      	strhne	r3, [r4, #12]
 801059c:	bd10      	pop	{r4, pc}

0801059e <__sclose>:
 801059e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80105a2:	f000 b90d 	b.w	80107c0 <_close_r>

080105a6 <__swbuf_r>:
 80105a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105a8:	460e      	mov	r6, r1
 80105aa:	4614      	mov	r4, r2
 80105ac:	4605      	mov	r5, r0
 80105ae:	b118      	cbz	r0, 80105b8 <__swbuf_r+0x12>
 80105b0:	6a03      	ldr	r3, [r0, #32]
 80105b2:	b90b      	cbnz	r3, 80105b8 <__swbuf_r+0x12>
 80105b4:	f7ff ff4a 	bl	801044c <__sinit>
 80105b8:	69a3      	ldr	r3, [r4, #24]
 80105ba:	60a3      	str	r3, [r4, #8]
 80105bc:	89a3      	ldrh	r3, [r4, #12]
 80105be:	071a      	lsls	r2, r3, #28
 80105c0:	d501      	bpl.n	80105c6 <__swbuf_r+0x20>
 80105c2:	6923      	ldr	r3, [r4, #16]
 80105c4:	b943      	cbnz	r3, 80105d8 <__swbuf_r+0x32>
 80105c6:	4621      	mov	r1, r4
 80105c8:	4628      	mov	r0, r5
 80105ca:	f000 f82b 	bl	8010624 <__swsetup_r>
 80105ce:	b118      	cbz	r0, 80105d8 <__swbuf_r+0x32>
 80105d0:	f04f 37ff 	mov.w	r7, #4294967295
 80105d4:	4638      	mov	r0, r7
 80105d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80105d8:	6823      	ldr	r3, [r4, #0]
 80105da:	6922      	ldr	r2, [r4, #16]
 80105dc:	1a98      	subs	r0, r3, r2
 80105de:	6963      	ldr	r3, [r4, #20]
 80105e0:	b2f6      	uxtb	r6, r6
 80105e2:	4283      	cmp	r3, r0
 80105e4:	4637      	mov	r7, r6
 80105e6:	dc05      	bgt.n	80105f4 <__swbuf_r+0x4e>
 80105e8:	4621      	mov	r1, r4
 80105ea:	4628      	mov	r0, r5
 80105ec:	f001 ff06 	bl	80123fc <_fflush_r>
 80105f0:	2800      	cmp	r0, #0
 80105f2:	d1ed      	bne.n	80105d0 <__swbuf_r+0x2a>
 80105f4:	68a3      	ldr	r3, [r4, #8]
 80105f6:	3b01      	subs	r3, #1
 80105f8:	60a3      	str	r3, [r4, #8]
 80105fa:	6823      	ldr	r3, [r4, #0]
 80105fc:	1c5a      	adds	r2, r3, #1
 80105fe:	6022      	str	r2, [r4, #0]
 8010600:	701e      	strb	r6, [r3, #0]
 8010602:	6962      	ldr	r2, [r4, #20]
 8010604:	1c43      	adds	r3, r0, #1
 8010606:	429a      	cmp	r2, r3
 8010608:	d004      	beq.n	8010614 <__swbuf_r+0x6e>
 801060a:	89a3      	ldrh	r3, [r4, #12]
 801060c:	07db      	lsls	r3, r3, #31
 801060e:	d5e1      	bpl.n	80105d4 <__swbuf_r+0x2e>
 8010610:	2e0a      	cmp	r6, #10
 8010612:	d1df      	bne.n	80105d4 <__swbuf_r+0x2e>
 8010614:	4621      	mov	r1, r4
 8010616:	4628      	mov	r0, r5
 8010618:	f001 fef0 	bl	80123fc <_fflush_r>
 801061c:	2800      	cmp	r0, #0
 801061e:	d0d9      	beq.n	80105d4 <__swbuf_r+0x2e>
 8010620:	e7d6      	b.n	80105d0 <__swbuf_r+0x2a>
	...

08010624 <__swsetup_r>:
 8010624:	b538      	push	{r3, r4, r5, lr}
 8010626:	4b29      	ldr	r3, [pc, #164]	@ (80106cc <__swsetup_r+0xa8>)
 8010628:	4605      	mov	r5, r0
 801062a:	6818      	ldr	r0, [r3, #0]
 801062c:	460c      	mov	r4, r1
 801062e:	b118      	cbz	r0, 8010638 <__swsetup_r+0x14>
 8010630:	6a03      	ldr	r3, [r0, #32]
 8010632:	b90b      	cbnz	r3, 8010638 <__swsetup_r+0x14>
 8010634:	f7ff ff0a 	bl	801044c <__sinit>
 8010638:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801063c:	0719      	lsls	r1, r3, #28
 801063e:	d422      	bmi.n	8010686 <__swsetup_r+0x62>
 8010640:	06da      	lsls	r2, r3, #27
 8010642:	d407      	bmi.n	8010654 <__swsetup_r+0x30>
 8010644:	2209      	movs	r2, #9
 8010646:	602a      	str	r2, [r5, #0]
 8010648:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801064c:	81a3      	strh	r3, [r4, #12]
 801064e:	f04f 30ff 	mov.w	r0, #4294967295
 8010652:	e033      	b.n	80106bc <__swsetup_r+0x98>
 8010654:	0758      	lsls	r0, r3, #29
 8010656:	d512      	bpl.n	801067e <__swsetup_r+0x5a>
 8010658:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801065a:	b141      	cbz	r1, 801066e <__swsetup_r+0x4a>
 801065c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010660:	4299      	cmp	r1, r3
 8010662:	d002      	beq.n	801066a <__swsetup_r+0x46>
 8010664:	4628      	mov	r0, r5
 8010666:	f000 ff31 	bl	80114cc <_free_r>
 801066a:	2300      	movs	r3, #0
 801066c:	6363      	str	r3, [r4, #52]	@ 0x34
 801066e:	89a3      	ldrh	r3, [r4, #12]
 8010670:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010674:	81a3      	strh	r3, [r4, #12]
 8010676:	2300      	movs	r3, #0
 8010678:	6063      	str	r3, [r4, #4]
 801067a:	6923      	ldr	r3, [r4, #16]
 801067c:	6023      	str	r3, [r4, #0]
 801067e:	89a3      	ldrh	r3, [r4, #12]
 8010680:	f043 0308 	orr.w	r3, r3, #8
 8010684:	81a3      	strh	r3, [r4, #12]
 8010686:	6923      	ldr	r3, [r4, #16]
 8010688:	b94b      	cbnz	r3, 801069e <__swsetup_r+0x7a>
 801068a:	89a3      	ldrh	r3, [r4, #12]
 801068c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010690:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010694:	d003      	beq.n	801069e <__swsetup_r+0x7a>
 8010696:	4621      	mov	r1, r4
 8010698:	4628      	mov	r0, r5
 801069a:	f001 ff0f 	bl	80124bc <__smakebuf_r>
 801069e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80106a2:	f013 0201 	ands.w	r2, r3, #1
 80106a6:	d00a      	beq.n	80106be <__swsetup_r+0x9a>
 80106a8:	2200      	movs	r2, #0
 80106aa:	60a2      	str	r2, [r4, #8]
 80106ac:	6962      	ldr	r2, [r4, #20]
 80106ae:	4252      	negs	r2, r2
 80106b0:	61a2      	str	r2, [r4, #24]
 80106b2:	6922      	ldr	r2, [r4, #16]
 80106b4:	b942      	cbnz	r2, 80106c8 <__swsetup_r+0xa4>
 80106b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80106ba:	d1c5      	bne.n	8010648 <__swsetup_r+0x24>
 80106bc:	bd38      	pop	{r3, r4, r5, pc}
 80106be:	0799      	lsls	r1, r3, #30
 80106c0:	bf58      	it	pl
 80106c2:	6962      	ldrpl	r2, [r4, #20]
 80106c4:	60a2      	str	r2, [r4, #8]
 80106c6:	e7f4      	b.n	80106b2 <__swsetup_r+0x8e>
 80106c8:	2000      	movs	r0, #0
 80106ca:	e7f7      	b.n	80106bc <__swsetup_r+0x98>
 80106cc:	24000038 	.word	0x24000038

080106d0 <memset>:
 80106d0:	4402      	add	r2, r0
 80106d2:	4603      	mov	r3, r0
 80106d4:	4293      	cmp	r3, r2
 80106d6:	d100      	bne.n	80106da <memset+0xa>
 80106d8:	4770      	bx	lr
 80106da:	f803 1b01 	strb.w	r1, [r3], #1
 80106de:	e7f9      	b.n	80106d4 <memset+0x4>

080106e0 <strcat>:
 80106e0:	b510      	push	{r4, lr}
 80106e2:	4602      	mov	r2, r0
 80106e4:	7814      	ldrb	r4, [r2, #0]
 80106e6:	4613      	mov	r3, r2
 80106e8:	3201      	adds	r2, #1
 80106ea:	2c00      	cmp	r4, #0
 80106ec:	d1fa      	bne.n	80106e4 <strcat+0x4>
 80106ee:	3b01      	subs	r3, #1
 80106f0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80106f4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80106f8:	2a00      	cmp	r2, #0
 80106fa:	d1f9      	bne.n	80106f0 <strcat+0x10>
 80106fc:	bd10      	pop	{r4, pc}
	...

08010700 <strtok>:
 8010700:	4b16      	ldr	r3, [pc, #88]	@ (801075c <strtok+0x5c>)
 8010702:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010706:	681f      	ldr	r7, [r3, #0]
 8010708:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 801070a:	4605      	mov	r5, r0
 801070c:	460e      	mov	r6, r1
 801070e:	b9ec      	cbnz	r4, 801074c <strtok+0x4c>
 8010710:	2050      	movs	r0, #80	@ 0x50
 8010712:	f000 ff25 	bl	8011560 <malloc>
 8010716:	4602      	mov	r2, r0
 8010718:	6478      	str	r0, [r7, #68]	@ 0x44
 801071a:	b920      	cbnz	r0, 8010726 <strtok+0x26>
 801071c:	4b10      	ldr	r3, [pc, #64]	@ (8010760 <strtok+0x60>)
 801071e:	4811      	ldr	r0, [pc, #68]	@ (8010764 <strtok+0x64>)
 8010720:	215b      	movs	r1, #91	@ 0x5b
 8010722:	f000 f8cf 	bl	80108c4 <__assert_func>
 8010726:	e9c0 4400 	strd	r4, r4, [r0]
 801072a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801072e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8010732:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8010736:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 801073a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 801073e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8010742:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8010746:	6184      	str	r4, [r0, #24]
 8010748:	7704      	strb	r4, [r0, #28]
 801074a:	6244      	str	r4, [r0, #36]	@ 0x24
 801074c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801074e:	4631      	mov	r1, r6
 8010750:	4628      	mov	r0, r5
 8010752:	2301      	movs	r3, #1
 8010754:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010758:	f000 b806 	b.w	8010768 <__strtok_r>
 801075c:	24000038 	.word	0x24000038
 8010760:	08012919 	.word	0x08012919
 8010764:	08012930 	.word	0x08012930

08010768 <__strtok_r>:
 8010768:	b5f0      	push	{r4, r5, r6, r7, lr}
 801076a:	4604      	mov	r4, r0
 801076c:	b908      	cbnz	r0, 8010772 <__strtok_r+0xa>
 801076e:	6814      	ldr	r4, [r2, #0]
 8010770:	b144      	cbz	r4, 8010784 <__strtok_r+0x1c>
 8010772:	4620      	mov	r0, r4
 8010774:	f814 5b01 	ldrb.w	r5, [r4], #1
 8010778:	460f      	mov	r7, r1
 801077a:	f817 6b01 	ldrb.w	r6, [r7], #1
 801077e:	b91e      	cbnz	r6, 8010788 <__strtok_r+0x20>
 8010780:	b965      	cbnz	r5, 801079c <__strtok_r+0x34>
 8010782:	6015      	str	r5, [r2, #0]
 8010784:	2000      	movs	r0, #0
 8010786:	e005      	b.n	8010794 <__strtok_r+0x2c>
 8010788:	42b5      	cmp	r5, r6
 801078a:	d1f6      	bne.n	801077a <__strtok_r+0x12>
 801078c:	2b00      	cmp	r3, #0
 801078e:	d1f0      	bne.n	8010772 <__strtok_r+0xa>
 8010790:	6014      	str	r4, [r2, #0]
 8010792:	7003      	strb	r3, [r0, #0]
 8010794:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010796:	461c      	mov	r4, r3
 8010798:	e00c      	b.n	80107b4 <__strtok_r+0x4c>
 801079a:	b91d      	cbnz	r5, 80107a4 <__strtok_r+0x3c>
 801079c:	4627      	mov	r7, r4
 801079e:	f814 3b01 	ldrb.w	r3, [r4], #1
 80107a2:	460e      	mov	r6, r1
 80107a4:	f816 5b01 	ldrb.w	r5, [r6], #1
 80107a8:	42ab      	cmp	r3, r5
 80107aa:	d1f6      	bne.n	801079a <__strtok_r+0x32>
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d0f2      	beq.n	8010796 <__strtok_r+0x2e>
 80107b0:	2300      	movs	r3, #0
 80107b2:	703b      	strb	r3, [r7, #0]
 80107b4:	6014      	str	r4, [r2, #0]
 80107b6:	e7ed      	b.n	8010794 <__strtok_r+0x2c>

080107b8 <_localeconv_r>:
 80107b8:	4800      	ldr	r0, [pc, #0]	@ (80107bc <_localeconv_r+0x4>)
 80107ba:	4770      	bx	lr
 80107bc:	24000178 	.word	0x24000178

080107c0 <_close_r>:
 80107c0:	b538      	push	{r3, r4, r5, lr}
 80107c2:	4d06      	ldr	r5, [pc, #24]	@ (80107dc <_close_r+0x1c>)
 80107c4:	2300      	movs	r3, #0
 80107c6:	4604      	mov	r4, r0
 80107c8:	4608      	mov	r0, r1
 80107ca:	602b      	str	r3, [r5, #0]
 80107cc:	f7f1 fa6a 	bl	8001ca4 <_close>
 80107d0:	1c43      	adds	r3, r0, #1
 80107d2:	d102      	bne.n	80107da <_close_r+0x1a>
 80107d4:	682b      	ldr	r3, [r5, #0]
 80107d6:	b103      	cbz	r3, 80107da <_close_r+0x1a>
 80107d8:	6023      	str	r3, [r4, #0]
 80107da:	bd38      	pop	{r3, r4, r5, pc}
 80107dc:	240007f4 	.word	0x240007f4

080107e0 <_lseek_r>:
 80107e0:	b538      	push	{r3, r4, r5, lr}
 80107e2:	4d07      	ldr	r5, [pc, #28]	@ (8010800 <_lseek_r+0x20>)
 80107e4:	4604      	mov	r4, r0
 80107e6:	4608      	mov	r0, r1
 80107e8:	4611      	mov	r1, r2
 80107ea:	2200      	movs	r2, #0
 80107ec:	602a      	str	r2, [r5, #0]
 80107ee:	461a      	mov	r2, r3
 80107f0:	f7f1 fa7f 	bl	8001cf2 <_lseek>
 80107f4:	1c43      	adds	r3, r0, #1
 80107f6:	d102      	bne.n	80107fe <_lseek_r+0x1e>
 80107f8:	682b      	ldr	r3, [r5, #0]
 80107fa:	b103      	cbz	r3, 80107fe <_lseek_r+0x1e>
 80107fc:	6023      	str	r3, [r4, #0]
 80107fe:	bd38      	pop	{r3, r4, r5, pc}
 8010800:	240007f4 	.word	0x240007f4

08010804 <_read_r>:
 8010804:	b538      	push	{r3, r4, r5, lr}
 8010806:	4d07      	ldr	r5, [pc, #28]	@ (8010824 <_read_r+0x20>)
 8010808:	4604      	mov	r4, r0
 801080a:	4608      	mov	r0, r1
 801080c:	4611      	mov	r1, r2
 801080e:	2200      	movs	r2, #0
 8010810:	602a      	str	r2, [r5, #0]
 8010812:	461a      	mov	r2, r3
 8010814:	f7f1 fa0d 	bl	8001c32 <_read>
 8010818:	1c43      	adds	r3, r0, #1
 801081a:	d102      	bne.n	8010822 <_read_r+0x1e>
 801081c:	682b      	ldr	r3, [r5, #0]
 801081e:	b103      	cbz	r3, 8010822 <_read_r+0x1e>
 8010820:	6023      	str	r3, [r4, #0]
 8010822:	bd38      	pop	{r3, r4, r5, pc}
 8010824:	240007f4 	.word	0x240007f4

08010828 <_write_r>:
 8010828:	b538      	push	{r3, r4, r5, lr}
 801082a:	4d07      	ldr	r5, [pc, #28]	@ (8010848 <_write_r+0x20>)
 801082c:	4604      	mov	r4, r0
 801082e:	4608      	mov	r0, r1
 8010830:	4611      	mov	r1, r2
 8010832:	2200      	movs	r2, #0
 8010834:	602a      	str	r2, [r5, #0]
 8010836:	461a      	mov	r2, r3
 8010838:	f7f1 fa18 	bl	8001c6c <_write>
 801083c:	1c43      	adds	r3, r0, #1
 801083e:	d102      	bne.n	8010846 <_write_r+0x1e>
 8010840:	682b      	ldr	r3, [r5, #0]
 8010842:	b103      	cbz	r3, 8010846 <_write_r+0x1e>
 8010844:	6023      	str	r3, [r4, #0]
 8010846:	bd38      	pop	{r3, r4, r5, pc}
 8010848:	240007f4 	.word	0x240007f4

0801084c <__errno>:
 801084c:	4b01      	ldr	r3, [pc, #4]	@ (8010854 <__errno+0x8>)
 801084e:	6818      	ldr	r0, [r3, #0]
 8010850:	4770      	bx	lr
 8010852:	bf00      	nop
 8010854:	24000038 	.word	0x24000038

08010858 <__libc_init_array>:
 8010858:	b570      	push	{r4, r5, r6, lr}
 801085a:	4d0d      	ldr	r5, [pc, #52]	@ (8010890 <__libc_init_array+0x38>)
 801085c:	4c0d      	ldr	r4, [pc, #52]	@ (8010894 <__libc_init_array+0x3c>)
 801085e:	1b64      	subs	r4, r4, r5
 8010860:	10a4      	asrs	r4, r4, #2
 8010862:	2600      	movs	r6, #0
 8010864:	42a6      	cmp	r6, r4
 8010866:	d109      	bne.n	801087c <__libc_init_array+0x24>
 8010868:	4d0b      	ldr	r5, [pc, #44]	@ (8010898 <__libc_init_array+0x40>)
 801086a:	4c0c      	ldr	r4, [pc, #48]	@ (801089c <__libc_init_array+0x44>)
 801086c:	f001 ff62 	bl	8012734 <_init>
 8010870:	1b64      	subs	r4, r4, r5
 8010872:	10a4      	asrs	r4, r4, #2
 8010874:	2600      	movs	r6, #0
 8010876:	42a6      	cmp	r6, r4
 8010878:	d105      	bne.n	8010886 <__libc_init_array+0x2e>
 801087a:	bd70      	pop	{r4, r5, r6, pc}
 801087c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010880:	4798      	blx	r3
 8010882:	3601      	adds	r6, #1
 8010884:	e7ee      	b.n	8010864 <__libc_init_array+0xc>
 8010886:	f855 3b04 	ldr.w	r3, [r5], #4
 801088a:	4798      	blx	r3
 801088c:	3601      	adds	r6, #1
 801088e:	e7f2      	b.n	8010876 <__libc_init_array+0x1e>
 8010890:	08012bb8 	.word	0x08012bb8
 8010894:	08012bb8 	.word	0x08012bb8
 8010898:	08012bb8 	.word	0x08012bb8
 801089c:	08012bbc 	.word	0x08012bbc

080108a0 <__retarget_lock_init_recursive>:
 80108a0:	4770      	bx	lr

080108a2 <__retarget_lock_acquire_recursive>:
 80108a2:	4770      	bx	lr

080108a4 <__retarget_lock_release_recursive>:
 80108a4:	4770      	bx	lr

080108a6 <memcpy>:
 80108a6:	440a      	add	r2, r1
 80108a8:	4291      	cmp	r1, r2
 80108aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80108ae:	d100      	bne.n	80108b2 <memcpy+0xc>
 80108b0:	4770      	bx	lr
 80108b2:	b510      	push	{r4, lr}
 80108b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80108b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80108bc:	4291      	cmp	r1, r2
 80108be:	d1f9      	bne.n	80108b4 <memcpy+0xe>
 80108c0:	bd10      	pop	{r4, pc}
	...

080108c4 <__assert_func>:
 80108c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80108c6:	4614      	mov	r4, r2
 80108c8:	461a      	mov	r2, r3
 80108ca:	4b09      	ldr	r3, [pc, #36]	@ (80108f0 <__assert_func+0x2c>)
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	4605      	mov	r5, r0
 80108d0:	68d8      	ldr	r0, [r3, #12]
 80108d2:	b14c      	cbz	r4, 80108e8 <__assert_func+0x24>
 80108d4:	4b07      	ldr	r3, [pc, #28]	@ (80108f4 <__assert_func+0x30>)
 80108d6:	9100      	str	r1, [sp, #0]
 80108d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80108dc:	4906      	ldr	r1, [pc, #24]	@ (80108f8 <__assert_func+0x34>)
 80108de:	462b      	mov	r3, r5
 80108e0:	f001 fdb4 	bl	801244c <fiprintf>
 80108e4:	f001 fe72 	bl	80125cc <abort>
 80108e8:	4b04      	ldr	r3, [pc, #16]	@ (80108fc <__assert_func+0x38>)
 80108ea:	461c      	mov	r4, r3
 80108ec:	e7f3      	b.n	80108d6 <__assert_func+0x12>
 80108ee:	bf00      	nop
 80108f0:	24000038 	.word	0x24000038
 80108f4:	0801298a 	.word	0x0801298a
 80108f8:	08012997 	.word	0x08012997
 80108fc:	080129c5 	.word	0x080129c5

08010900 <quorem>:
 8010900:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010904:	6903      	ldr	r3, [r0, #16]
 8010906:	690c      	ldr	r4, [r1, #16]
 8010908:	42a3      	cmp	r3, r4
 801090a:	4607      	mov	r7, r0
 801090c:	db7e      	blt.n	8010a0c <quorem+0x10c>
 801090e:	3c01      	subs	r4, #1
 8010910:	f101 0814 	add.w	r8, r1, #20
 8010914:	00a3      	lsls	r3, r4, #2
 8010916:	f100 0514 	add.w	r5, r0, #20
 801091a:	9300      	str	r3, [sp, #0]
 801091c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010920:	9301      	str	r3, [sp, #4]
 8010922:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010926:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801092a:	3301      	adds	r3, #1
 801092c:	429a      	cmp	r2, r3
 801092e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010932:	fbb2 f6f3 	udiv	r6, r2, r3
 8010936:	d32e      	bcc.n	8010996 <quorem+0x96>
 8010938:	f04f 0a00 	mov.w	sl, #0
 801093c:	46c4      	mov	ip, r8
 801093e:	46ae      	mov	lr, r5
 8010940:	46d3      	mov	fp, sl
 8010942:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010946:	b298      	uxth	r0, r3
 8010948:	fb06 a000 	mla	r0, r6, r0, sl
 801094c:	0c02      	lsrs	r2, r0, #16
 801094e:	0c1b      	lsrs	r3, r3, #16
 8010950:	fb06 2303 	mla	r3, r6, r3, r2
 8010954:	f8de 2000 	ldr.w	r2, [lr]
 8010958:	b280      	uxth	r0, r0
 801095a:	b292      	uxth	r2, r2
 801095c:	1a12      	subs	r2, r2, r0
 801095e:	445a      	add	r2, fp
 8010960:	f8de 0000 	ldr.w	r0, [lr]
 8010964:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010968:	b29b      	uxth	r3, r3
 801096a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801096e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8010972:	b292      	uxth	r2, r2
 8010974:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8010978:	45e1      	cmp	r9, ip
 801097a:	f84e 2b04 	str.w	r2, [lr], #4
 801097e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8010982:	d2de      	bcs.n	8010942 <quorem+0x42>
 8010984:	9b00      	ldr	r3, [sp, #0]
 8010986:	58eb      	ldr	r3, [r5, r3]
 8010988:	b92b      	cbnz	r3, 8010996 <quorem+0x96>
 801098a:	9b01      	ldr	r3, [sp, #4]
 801098c:	3b04      	subs	r3, #4
 801098e:	429d      	cmp	r5, r3
 8010990:	461a      	mov	r2, r3
 8010992:	d32f      	bcc.n	80109f4 <quorem+0xf4>
 8010994:	613c      	str	r4, [r7, #16]
 8010996:	4638      	mov	r0, r7
 8010998:	f001 f90a 	bl	8011bb0 <__mcmp>
 801099c:	2800      	cmp	r0, #0
 801099e:	db25      	blt.n	80109ec <quorem+0xec>
 80109a0:	4629      	mov	r1, r5
 80109a2:	2000      	movs	r0, #0
 80109a4:	f858 2b04 	ldr.w	r2, [r8], #4
 80109a8:	f8d1 c000 	ldr.w	ip, [r1]
 80109ac:	fa1f fe82 	uxth.w	lr, r2
 80109b0:	fa1f f38c 	uxth.w	r3, ip
 80109b4:	eba3 030e 	sub.w	r3, r3, lr
 80109b8:	4403      	add	r3, r0
 80109ba:	0c12      	lsrs	r2, r2, #16
 80109bc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80109c0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80109c4:	b29b      	uxth	r3, r3
 80109c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80109ca:	45c1      	cmp	r9, r8
 80109cc:	f841 3b04 	str.w	r3, [r1], #4
 80109d0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80109d4:	d2e6      	bcs.n	80109a4 <quorem+0xa4>
 80109d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80109da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80109de:	b922      	cbnz	r2, 80109ea <quorem+0xea>
 80109e0:	3b04      	subs	r3, #4
 80109e2:	429d      	cmp	r5, r3
 80109e4:	461a      	mov	r2, r3
 80109e6:	d30b      	bcc.n	8010a00 <quorem+0x100>
 80109e8:	613c      	str	r4, [r7, #16]
 80109ea:	3601      	adds	r6, #1
 80109ec:	4630      	mov	r0, r6
 80109ee:	b003      	add	sp, #12
 80109f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109f4:	6812      	ldr	r2, [r2, #0]
 80109f6:	3b04      	subs	r3, #4
 80109f8:	2a00      	cmp	r2, #0
 80109fa:	d1cb      	bne.n	8010994 <quorem+0x94>
 80109fc:	3c01      	subs	r4, #1
 80109fe:	e7c6      	b.n	801098e <quorem+0x8e>
 8010a00:	6812      	ldr	r2, [r2, #0]
 8010a02:	3b04      	subs	r3, #4
 8010a04:	2a00      	cmp	r2, #0
 8010a06:	d1ef      	bne.n	80109e8 <quorem+0xe8>
 8010a08:	3c01      	subs	r4, #1
 8010a0a:	e7ea      	b.n	80109e2 <quorem+0xe2>
 8010a0c:	2000      	movs	r0, #0
 8010a0e:	e7ee      	b.n	80109ee <quorem+0xee>

08010a10 <_dtoa_r>:
 8010a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a14:	ed2d 8b02 	vpush	{d8}
 8010a18:	69c7      	ldr	r7, [r0, #28]
 8010a1a:	b091      	sub	sp, #68	@ 0x44
 8010a1c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010a20:	ec55 4b10 	vmov	r4, r5, d0
 8010a24:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8010a26:	9107      	str	r1, [sp, #28]
 8010a28:	4681      	mov	r9, r0
 8010a2a:	9209      	str	r2, [sp, #36]	@ 0x24
 8010a2c:	930d      	str	r3, [sp, #52]	@ 0x34
 8010a2e:	b97f      	cbnz	r7, 8010a50 <_dtoa_r+0x40>
 8010a30:	2010      	movs	r0, #16
 8010a32:	f000 fd95 	bl	8011560 <malloc>
 8010a36:	4602      	mov	r2, r0
 8010a38:	f8c9 001c 	str.w	r0, [r9, #28]
 8010a3c:	b920      	cbnz	r0, 8010a48 <_dtoa_r+0x38>
 8010a3e:	4ba0      	ldr	r3, [pc, #640]	@ (8010cc0 <_dtoa_r+0x2b0>)
 8010a40:	21ef      	movs	r1, #239	@ 0xef
 8010a42:	48a0      	ldr	r0, [pc, #640]	@ (8010cc4 <_dtoa_r+0x2b4>)
 8010a44:	f7ff ff3e 	bl	80108c4 <__assert_func>
 8010a48:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010a4c:	6007      	str	r7, [r0, #0]
 8010a4e:	60c7      	str	r7, [r0, #12]
 8010a50:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010a54:	6819      	ldr	r1, [r3, #0]
 8010a56:	b159      	cbz	r1, 8010a70 <_dtoa_r+0x60>
 8010a58:	685a      	ldr	r2, [r3, #4]
 8010a5a:	604a      	str	r2, [r1, #4]
 8010a5c:	2301      	movs	r3, #1
 8010a5e:	4093      	lsls	r3, r2
 8010a60:	608b      	str	r3, [r1, #8]
 8010a62:	4648      	mov	r0, r9
 8010a64:	f000 fe72 	bl	801174c <_Bfree>
 8010a68:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010a6c:	2200      	movs	r2, #0
 8010a6e:	601a      	str	r2, [r3, #0]
 8010a70:	1e2b      	subs	r3, r5, #0
 8010a72:	bfbb      	ittet	lt
 8010a74:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8010a78:	9303      	strlt	r3, [sp, #12]
 8010a7a:	2300      	movge	r3, #0
 8010a7c:	2201      	movlt	r2, #1
 8010a7e:	bfac      	ite	ge
 8010a80:	6033      	strge	r3, [r6, #0]
 8010a82:	6032      	strlt	r2, [r6, #0]
 8010a84:	4b90      	ldr	r3, [pc, #576]	@ (8010cc8 <_dtoa_r+0x2b8>)
 8010a86:	9e03      	ldr	r6, [sp, #12]
 8010a88:	43b3      	bics	r3, r6
 8010a8a:	d110      	bne.n	8010aae <_dtoa_r+0x9e>
 8010a8c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010a8e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8010a92:	6013      	str	r3, [r2, #0]
 8010a94:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8010a98:	4323      	orrs	r3, r4
 8010a9a:	f000 84e6 	beq.w	801146a <_dtoa_r+0xa5a>
 8010a9e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010aa0:	4f8a      	ldr	r7, [pc, #552]	@ (8010ccc <_dtoa_r+0x2bc>)
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	f000 84e8 	beq.w	8011478 <_dtoa_r+0xa68>
 8010aa8:	1cfb      	adds	r3, r7, #3
 8010aaa:	f000 bce3 	b.w	8011474 <_dtoa_r+0xa64>
 8010aae:	ed9d 8b02 	vldr	d8, [sp, #8]
 8010ab2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010aba:	d10a      	bne.n	8010ad2 <_dtoa_r+0xc2>
 8010abc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010abe:	2301      	movs	r3, #1
 8010ac0:	6013      	str	r3, [r2, #0]
 8010ac2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010ac4:	b113      	cbz	r3, 8010acc <_dtoa_r+0xbc>
 8010ac6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8010ac8:	4b81      	ldr	r3, [pc, #516]	@ (8010cd0 <_dtoa_r+0x2c0>)
 8010aca:	6013      	str	r3, [r2, #0]
 8010acc:	4f81      	ldr	r7, [pc, #516]	@ (8010cd4 <_dtoa_r+0x2c4>)
 8010ace:	f000 bcd3 	b.w	8011478 <_dtoa_r+0xa68>
 8010ad2:	aa0e      	add	r2, sp, #56	@ 0x38
 8010ad4:	a90f      	add	r1, sp, #60	@ 0x3c
 8010ad6:	4648      	mov	r0, r9
 8010ad8:	eeb0 0b48 	vmov.f64	d0, d8
 8010adc:	f001 f918 	bl	8011d10 <__d2b>
 8010ae0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8010ae4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010ae6:	9001      	str	r0, [sp, #4]
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d045      	beq.n	8010b78 <_dtoa_r+0x168>
 8010aec:	eeb0 7b48 	vmov.f64	d7, d8
 8010af0:	ee18 1a90 	vmov	r1, s17
 8010af4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8010af8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8010afc:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8010b00:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8010b04:	2500      	movs	r5, #0
 8010b06:	ee07 1a90 	vmov	s15, r1
 8010b0a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8010b0e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8010ca8 <_dtoa_r+0x298>
 8010b12:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010b16:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8010cb0 <_dtoa_r+0x2a0>
 8010b1a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8010b1e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8010cb8 <_dtoa_r+0x2a8>
 8010b22:	ee07 3a90 	vmov	s15, r3
 8010b26:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8010b2a:	eeb0 7b46 	vmov.f64	d7, d6
 8010b2e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8010b32:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8010b36:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8010b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b3e:	ee16 8a90 	vmov	r8, s13
 8010b42:	d508      	bpl.n	8010b56 <_dtoa_r+0x146>
 8010b44:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8010b48:	eeb4 6b47 	vcmp.f64	d6, d7
 8010b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b50:	bf18      	it	ne
 8010b52:	f108 38ff 	addne.w	r8, r8, #4294967295
 8010b56:	f1b8 0f16 	cmp.w	r8, #22
 8010b5a:	d82b      	bhi.n	8010bb4 <_dtoa_r+0x1a4>
 8010b5c:	495e      	ldr	r1, [pc, #376]	@ (8010cd8 <_dtoa_r+0x2c8>)
 8010b5e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8010b62:	ed91 7b00 	vldr	d7, [r1]
 8010b66:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8010b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b6e:	d501      	bpl.n	8010b74 <_dtoa_r+0x164>
 8010b70:	f108 38ff 	add.w	r8, r8, #4294967295
 8010b74:	2100      	movs	r1, #0
 8010b76:	e01e      	b.n	8010bb6 <_dtoa_r+0x1a6>
 8010b78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010b7a:	4413      	add	r3, r2
 8010b7c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8010b80:	2920      	cmp	r1, #32
 8010b82:	bfc1      	itttt	gt
 8010b84:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8010b88:	408e      	lslgt	r6, r1
 8010b8a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8010b8e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8010b92:	bfd6      	itet	le
 8010b94:	f1c1 0120 	rsble	r1, r1, #32
 8010b98:	4331      	orrgt	r1, r6
 8010b9a:	fa04 f101 	lslle.w	r1, r4, r1
 8010b9e:	ee07 1a90 	vmov	s15, r1
 8010ba2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8010ba6:	3b01      	subs	r3, #1
 8010ba8:	ee17 1a90 	vmov	r1, s15
 8010bac:	2501      	movs	r5, #1
 8010bae:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8010bb2:	e7a8      	b.n	8010b06 <_dtoa_r+0xf6>
 8010bb4:	2101      	movs	r1, #1
 8010bb6:	1ad2      	subs	r2, r2, r3
 8010bb8:	1e53      	subs	r3, r2, #1
 8010bba:	9306      	str	r3, [sp, #24]
 8010bbc:	bf45      	ittet	mi
 8010bbe:	f1c2 0301 	rsbmi	r3, r2, #1
 8010bc2:	9304      	strmi	r3, [sp, #16]
 8010bc4:	2300      	movpl	r3, #0
 8010bc6:	2300      	movmi	r3, #0
 8010bc8:	bf4c      	ite	mi
 8010bca:	9306      	strmi	r3, [sp, #24]
 8010bcc:	9304      	strpl	r3, [sp, #16]
 8010bce:	f1b8 0f00 	cmp.w	r8, #0
 8010bd2:	910c      	str	r1, [sp, #48]	@ 0x30
 8010bd4:	db18      	blt.n	8010c08 <_dtoa_r+0x1f8>
 8010bd6:	9b06      	ldr	r3, [sp, #24]
 8010bd8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8010bdc:	4443      	add	r3, r8
 8010bde:	9306      	str	r3, [sp, #24]
 8010be0:	2300      	movs	r3, #0
 8010be2:	9a07      	ldr	r2, [sp, #28]
 8010be4:	2a09      	cmp	r2, #9
 8010be6:	d845      	bhi.n	8010c74 <_dtoa_r+0x264>
 8010be8:	2a05      	cmp	r2, #5
 8010bea:	bfc4      	itt	gt
 8010bec:	3a04      	subgt	r2, #4
 8010bee:	9207      	strgt	r2, [sp, #28]
 8010bf0:	9a07      	ldr	r2, [sp, #28]
 8010bf2:	f1a2 0202 	sub.w	r2, r2, #2
 8010bf6:	bfcc      	ite	gt
 8010bf8:	2400      	movgt	r4, #0
 8010bfa:	2401      	movle	r4, #1
 8010bfc:	2a03      	cmp	r2, #3
 8010bfe:	d844      	bhi.n	8010c8a <_dtoa_r+0x27a>
 8010c00:	e8df f002 	tbb	[pc, r2]
 8010c04:	0b173634 	.word	0x0b173634
 8010c08:	9b04      	ldr	r3, [sp, #16]
 8010c0a:	2200      	movs	r2, #0
 8010c0c:	eba3 0308 	sub.w	r3, r3, r8
 8010c10:	9304      	str	r3, [sp, #16]
 8010c12:	920a      	str	r2, [sp, #40]	@ 0x28
 8010c14:	f1c8 0300 	rsb	r3, r8, #0
 8010c18:	e7e3      	b.n	8010be2 <_dtoa_r+0x1d2>
 8010c1a:	2201      	movs	r2, #1
 8010c1c:	9208      	str	r2, [sp, #32]
 8010c1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010c20:	eb08 0b02 	add.w	fp, r8, r2
 8010c24:	f10b 0a01 	add.w	sl, fp, #1
 8010c28:	4652      	mov	r2, sl
 8010c2a:	2a01      	cmp	r2, #1
 8010c2c:	bfb8      	it	lt
 8010c2e:	2201      	movlt	r2, #1
 8010c30:	e006      	b.n	8010c40 <_dtoa_r+0x230>
 8010c32:	2201      	movs	r2, #1
 8010c34:	9208      	str	r2, [sp, #32]
 8010c36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010c38:	2a00      	cmp	r2, #0
 8010c3a:	dd29      	ble.n	8010c90 <_dtoa_r+0x280>
 8010c3c:	4693      	mov	fp, r2
 8010c3e:	4692      	mov	sl, r2
 8010c40:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8010c44:	2100      	movs	r1, #0
 8010c46:	2004      	movs	r0, #4
 8010c48:	f100 0614 	add.w	r6, r0, #20
 8010c4c:	4296      	cmp	r6, r2
 8010c4e:	d926      	bls.n	8010c9e <_dtoa_r+0x28e>
 8010c50:	6079      	str	r1, [r7, #4]
 8010c52:	4648      	mov	r0, r9
 8010c54:	9305      	str	r3, [sp, #20]
 8010c56:	f000 fd39 	bl	80116cc <_Balloc>
 8010c5a:	9b05      	ldr	r3, [sp, #20]
 8010c5c:	4607      	mov	r7, r0
 8010c5e:	2800      	cmp	r0, #0
 8010c60:	d13e      	bne.n	8010ce0 <_dtoa_r+0x2d0>
 8010c62:	4b1e      	ldr	r3, [pc, #120]	@ (8010cdc <_dtoa_r+0x2cc>)
 8010c64:	4602      	mov	r2, r0
 8010c66:	f240 11af 	movw	r1, #431	@ 0x1af
 8010c6a:	e6ea      	b.n	8010a42 <_dtoa_r+0x32>
 8010c6c:	2200      	movs	r2, #0
 8010c6e:	e7e1      	b.n	8010c34 <_dtoa_r+0x224>
 8010c70:	2200      	movs	r2, #0
 8010c72:	e7d3      	b.n	8010c1c <_dtoa_r+0x20c>
 8010c74:	2401      	movs	r4, #1
 8010c76:	2200      	movs	r2, #0
 8010c78:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8010c7c:	f04f 3bff 	mov.w	fp, #4294967295
 8010c80:	2100      	movs	r1, #0
 8010c82:	46da      	mov	sl, fp
 8010c84:	2212      	movs	r2, #18
 8010c86:	9109      	str	r1, [sp, #36]	@ 0x24
 8010c88:	e7da      	b.n	8010c40 <_dtoa_r+0x230>
 8010c8a:	2201      	movs	r2, #1
 8010c8c:	9208      	str	r2, [sp, #32]
 8010c8e:	e7f5      	b.n	8010c7c <_dtoa_r+0x26c>
 8010c90:	f04f 0b01 	mov.w	fp, #1
 8010c94:	46da      	mov	sl, fp
 8010c96:	465a      	mov	r2, fp
 8010c98:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8010c9c:	e7d0      	b.n	8010c40 <_dtoa_r+0x230>
 8010c9e:	3101      	adds	r1, #1
 8010ca0:	0040      	lsls	r0, r0, #1
 8010ca2:	e7d1      	b.n	8010c48 <_dtoa_r+0x238>
 8010ca4:	f3af 8000 	nop.w
 8010ca8:	636f4361 	.word	0x636f4361
 8010cac:	3fd287a7 	.word	0x3fd287a7
 8010cb0:	8b60c8b3 	.word	0x8b60c8b3
 8010cb4:	3fc68a28 	.word	0x3fc68a28
 8010cb8:	509f79fb 	.word	0x509f79fb
 8010cbc:	3fd34413 	.word	0x3fd34413
 8010cc0:	08012919 	.word	0x08012919
 8010cc4:	080129d3 	.word	0x080129d3
 8010cc8:	7ff00000 	.word	0x7ff00000
 8010ccc:	080129cf 	.word	0x080129cf
 8010cd0:	080128f6 	.word	0x080128f6
 8010cd4:	080128f5 	.word	0x080128f5
 8010cd8:	08012ae8 	.word	0x08012ae8
 8010cdc:	08012a2b 	.word	0x08012a2b
 8010ce0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8010ce4:	f1ba 0f0e 	cmp.w	sl, #14
 8010ce8:	6010      	str	r0, [r2, #0]
 8010cea:	d86e      	bhi.n	8010dca <_dtoa_r+0x3ba>
 8010cec:	2c00      	cmp	r4, #0
 8010cee:	d06c      	beq.n	8010dca <_dtoa_r+0x3ba>
 8010cf0:	f1b8 0f00 	cmp.w	r8, #0
 8010cf4:	f340 80b4 	ble.w	8010e60 <_dtoa_r+0x450>
 8010cf8:	4ac8      	ldr	r2, [pc, #800]	@ (801101c <_dtoa_r+0x60c>)
 8010cfa:	f008 010f 	and.w	r1, r8, #15
 8010cfe:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8010d02:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8010d06:	ed92 7b00 	vldr	d7, [r2]
 8010d0a:	ea4f 1128 	mov.w	r1, r8, asr #4
 8010d0e:	f000 809b 	beq.w	8010e48 <_dtoa_r+0x438>
 8010d12:	4ac3      	ldr	r2, [pc, #780]	@ (8011020 <_dtoa_r+0x610>)
 8010d14:	ed92 6b08 	vldr	d6, [r2, #32]
 8010d18:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8010d1c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8010d20:	f001 010f 	and.w	r1, r1, #15
 8010d24:	2203      	movs	r2, #3
 8010d26:	48be      	ldr	r0, [pc, #760]	@ (8011020 <_dtoa_r+0x610>)
 8010d28:	2900      	cmp	r1, #0
 8010d2a:	f040 808f 	bne.w	8010e4c <_dtoa_r+0x43c>
 8010d2e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010d32:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8010d36:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010d3a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8010d3c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010d40:	2900      	cmp	r1, #0
 8010d42:	f000 80b3 	beq.w	8010eac <_dtoa_r+0x49c>
 8010d46:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8010d4a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d52:	f140 80ab 	bpl.w	8010eac <_dtoa_r+0x49c>
 8010d56:	f1ba 0f00 	cmp.w	sl, #0
 8010d5a:	f000 80a7 	beq.w	8010eac <_dtoa_r+0x49c>
 8010d5e:	f1bb 0f00 	cmp.w	fp, #0
 8010d62:	dd30      	ble.n	8010dc6 <_dtoa_r+0x3b6>
 8010d64:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8010d68:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010d6c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010d70:	f108 31ff 	add.w	r1, r8, #4294967295
 8010d74:	9105      	str	r1, [sp, #20]
 8010d76:	3201      	adds	r2, #1
 8010d78:	465c      	mov	r4, fp
 8010d7a:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010d7e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8010d82:	ee07 2a90 	vmov	s15, r2
 8010d86:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010d8a:	eea7 5b06 	vfma.f64	d5, d7, d6
 8010d8e:	ee15 2a90 	vmov	r2, s11
 8010d92:	ec51 0b15 	vmov	r0, r1, d5
 8010d96:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8010d9a:	2c00      	cmp	r4, #0
 8010d9c:	f040 808a 	bne.w	8010eb4 <_dtoa_r+0x4a4>
 8010da0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8010da4:	ee36 6b47 	vsub.f64	d6, d6, d7
 8010da8:	ec41 0b17 	vmov	d7, r0, r1
 8010dac:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010db4:	f300 826a 	bgt.w	801128c <_dtoa_r+0x87c>
 8010db8:	eeb1 7b47 	vneg.f64	d7, d7
 8010dbc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dc4:	d423      	bmi.n	8010e0e <_dtoa_r+0x3fe>
 8010dc6:	ed8d 8b02 	vstr	d8, [sp, #8]
 8010dca:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010dcc:	2a00      	cmp	r2, #0
 8010dce:	f2c0 8129 	blt.w	8011024 <_dtoa_r+0x614>
 8010dd2:	f1b8 0f0e 	cmp.w	r8, #14
 8010dd6:	f300 8125 	bgt.w	8011024 <_dtoa_r+0x614>
 8010dda:	4b90      	ldr	r3, [pc, #576]	@ (801101c <_dtoa_r+0x60c>)
 8010ddc:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8010de0:	ed93 6b00 	vldr	d6, [r3]
 8010de4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	f280 80c8 	bge.w	8010f7c <_dtoa_r+0x56c>
 8010dec:	f1ba 0f00 	cmp.w	sl, #0
 8010df0:	f300 80c4 	bgt.w	8010f7c <_dtoa_r+0x56c>
 8010df4:	d10b      	bne.n	8010e0e <_dtoa_r+0x3fe>
 8010df6:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8010dfa:	ee26 6b07 	vmul.f64	d6, d6, d7
 8010dfe:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010e02:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e0a:	f2c0 823c 	blt.w	8011286 <_dtoa_r+0x876>
 8010e0e:	2400      	movs	r4, #0
 8010e10:	4625      	mov	r5, r4
 8010e12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010e14:	43db      	mvns	r3, r3
 8010e16:	9305      	str	r3, [sp, #20]
 8010e18:	463e      	mov	r6, r7
 8010e1a:	f04f 0800 	mov.w	r8, #0
 8010e1e:	4621      	mov	r1, r4
 8010e20:	4648      	mov	r0, r9
 8010e22:	f000 fc93 	bl	801174c <_Bfree>
 8010e26:	2d00      	cmp	r5, #0
 8010e28:	f000 80a2 	beq.w	8010f70 <_dtoa_r+0x560>
 8010e2c:	f1b8 0f00 	cmp.w	r8, #0
 8010e30:	d005      	beq.n	8010e3e <_dtoa_r+0x42e>
 8010e32:	45a8      	cmp	r8, r5
 8010e34:	d003      	beq.n	8010e3e <_dtoa_r+0x42e>
 8010e36:	4641      	mov	r1, r8
 8010e38:	4648      	mov	r0, r9
 8010e3a:	f000 fc87 	bl	801174c <_Bfree>
 8010e3e:	4629      	mov	r1, r5
 8010e40:	4648      	mov	r0, r9
 8010e42:	f000 fc83 	bl	801174c <_Bfree>
 8010e46:	e093      	b.n	8010f70 <_dtoa_r+0x560>
 8010e48:	2202      	movs	r2, #2
 8010e4a:	e76c      	b.n	8010d26 <_dtoa_r+0x316>
 8010e4c:	07cc      	lsls	r4, r1, #31
 8010e4e:	d504      	bpl.n	8010e5a <_dtoa_r+0x44a>
 8010e50:	ed90 6b00 	vldr	d6, [r0]
 8010e54:	3201      	adds	r2, #1
 8010e56:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010e5a:	1049      	asrs	r1, r1, #1
 8010e5c:	3008      	adds	r0, #8
 8010e5e:	e763      	b.n	8010d28 <_dtoa_r+0x318>
 8010e60:	d022      	beq.n	8010ea8 <_dtoa_r+0x498>
 8010e62:	f1c8 0100 	rsb	r1, r8, #0
 8010e66:	4a6d      	ldr	r2, [pc, #436]	@ (801101c <_dtoa_r+0x60c>)
 8010e68:	f001 000f 	and.w	r0, r1, #15
 8010e6c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8010e70:	ed92 7b00 	vldr	d7, [r2]
 8010e74:	ee28 7b07 	vmul.f64	d7, d8, d7
 8010e78:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010e7c:	4868      	ldr	r0, [pc, #416]	@ (8011020 <_dtoa_r+0x610>)
 8010e7e:	1109      	asrs	r1, r1, #4
 8010e80:	2400      	movs	r4, #0
 8010e82:	2202      	movs	r2, #2
 8010e84:	b929      	cbnz	r1, 8010e92 <_dtoa_r+0x482>
 8010e86:	2c00      	cmp	r4, #0
 8010e88:	f43f af57 	beq.w	8010d3a <_dtoa_r+0x32a>
 8010e8c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010e90:	e753      	b.n	8010d3a <_dtoa_r+0x32a>
 8010e92:	07ce      	lsls	r6, r1, #31
 8010e94:	d505      	bpl.n	8010ea2 <_dtoa_r+0x492>
 8010e96:	ed90 6b00 	vldr	d6, [r0]
 8010e9a:	3201      	adds	r2, #1
 8010e9c:	2401      	movs	r4, #1
 8010e9e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010ea2:	1049      	asrs	r1, r1, #1
 8010ea4:	3008      	adds	r0, #8
 8010ea6:	e7ed      	b.n	8010e84 <_dtoa_r+0x474>
 8010ea8:	2202      	movs	r2, #2
 8010eaa:	e746      	b.n	8010d3a <_dtoa_r+0x32a>
 8010eac:	f8cd 8014 	str.w	r8, [sp, #20]
 8010eb0:	4654      	mov	r4, sl
 8010eb2:	e762      	b.n	8010d7a <_dtoa_r+0x36a>
 8010eb4:	4a59      	ldr	r2, [pc, #356]	@ (801101c <_dtoa_r+0x60c>)
 8010eb6:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8010eba:	ed12 4b02 	vldr	d4, [r2, #-8]
 8010ebe:	9a08      	ldr	r2, [sp, #32]
 8010ec0:	ec41 0b17 	vmov	d7, r0, r1
 8010ec4:	443c      	add	r4, r7
 8010ec6:	b34a      	cbz	r2, 8010f1c <_dtoa_r+0x50c>
 8010ec8:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8010ecc:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8010ed0:	463e      	mov	r6, r7
 8010ed2:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8010ed6:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8010eda:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010ede:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010ee2:	ee14 2a90 	vmov	r2, s9
 8010ee6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010eea:	3230      	adds	r2, #48	@ 0x30
 8010eec:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010ef0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ef8:	f806 2b01 	strb.w	r2, [r6], #1
 8010efc:	d438      	bmi.n	8010f70 <_dtoa_r+0x560>
 8010efe:	ee32 5b46 	vsub.f64	d5, d2, d6
 8010f02:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8010f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f0a:	d46e      	bmi.n	8010fea <_dtoa_r+0x5da>
 8010f0c:	42a6      	cmp	r6, r4
 8010f0e:	f43f af5a 	beq.w	8010dc6 <_dtoa_r+0x3b6>
 8010f12:	ee27 7b03 	vmul.f64	d7, d7, d3
 8010f16:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010f1a:	e7e0      	b.n	8010ede <_dtoa_r+0x4ce>
 8010f1c:	4621      	mov	r1, r4
 8010f1e:	463e      	mov	r6, r7
 8010f20:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010f24:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8010f28:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010f2c:	ee14 2a90 	vmov	r2, s9
 8010f30:	3230      	adds	r2, #48	@ 0x30
 8010f32:	f806 2b01 	strb.w	r2, [r6], #1
 8010f36:	42a6      	cmp	r6, r4
 8010f38:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010f3c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010f40:	d119      	bne.n	8010f76 <_dtoa_r+0x566>
 8010f42:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8010f46:	ee37 4b05 	vadd.f64	d4, d7, d5
 8010f4a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8010f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f52:	dc4a      	bgt.n	8010fea <_dtoa_r+0x5da>
 8010f54:	ee35 5b47 	vsub.f64	d5, d5, d7
 8010f58:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8010f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f60:	f57f af31 	bpl.w	8010dc6 <_dtoa_r+0x3b6>
 8010f64:	460e      	mov	r6, r1
 8010f66:	3901      	subs	r1, #1
 8010f68:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010f6c:	2b30      	cmp	r3, #48	@ 0x30
 8010f6e:	d0f9      	beq.n	8010f64 <_dtoa_r+0x554>
 8010f70:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8010f74:	e027      	b.n	8010fc6 <_dtoa_r+0x5b6>
 8010f76:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010f7a:	e7d5      	b.n	8010f28 <_dtoa_r+0x518>
 8010f7c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010f80:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8010f84:	463e      	mov	r6, r7
 8010f86:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8010f8a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8010f8e:	ee15 3a10 	vmov	r3, s10
 8010f92:	3330      	adds	r3, #48	@ 0x30
 8010f94:	f806 3b01 	strb.w	r3, [r6], #1
 8010f98:	1bf3      	subs	r3, r6, r7
 8010f9a:	459a      	cmp	sl, r3
 8010f9c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8010fa0:	eea3 7b46 	vfms.f64	d7, d3, d6
 8010fa4:	d132      	bne.n	801100c <_dtoa_r+0x5fc>
 8010fa6:	ee37 7b07 	vadd.f64	d7, d7, d7
 8010faa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fb2:	dc18      	bgt.n	8010fe6 <_dtoa_r+0x5d6>
 8010fb4:	eeb4 7b46 	vcmp.f64	d7, d6
 8010fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fbc:	d103      	bne.n	8010fc6 <_dtoa_r+0x5b6>
 8010fbe:	ee15 3a10 	vmov	r3, s10
 8010fc2:	07db      	lsls	r3, r3, #31
 8010fc4:	d40f      	bmi.n	8010fe6 <_dtoa_r+0x5d6>
 8010fc6:	9901      	ldr	r1, [sp, #4]
 8010fc8:	4648      	mov	r0, r9
 8010fca:	f000 fbbf 	bl	801174c <_Bfree>
 8010fce:	2300      	movs	r3, #0
 8010fd0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010fd2:	7033      	strb	r3, [r6, #0]
 8010fd4:	f108 0301 	add.w	r3, r8, #1
 8010fd8:	6013      	str	r3, [r2, #0]
 8010fda:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	f000 824b 	beq.w	8011478 <_dtoa_r+0xa68>
 8010fe2:	601e      	str	r6, [r3, #0]
 8010fe4:	e248      	b.n	8011478 <_dtoa_r+0xa68>
 8010fe6:	f8cd 8014 	str.w	r8, [sp, #20]
 8010fea:	4633      	mov	r3, r6
 8010fec:	461e      	mov	r6, r3
 8010fee:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010ff2:	2a39      	cmp	r2, #57	@ 0x39
 8010ff4:	d106      	bne.n	8011004 <_dtoa_r+0x5f4>
 8010ff6:	429f      	cmp	r7, r3
 8010ff8:	d1f8      	bne.n	8010fec <_dtoa_r+0x5dc>
 8010ffa:	9a05      	ldr	r2, [sp, #20]
 8010ffc:	3201      	adds	r2, #1
 8010ffe:	9205      	str	r2, [sp, #20]
 8011000:	2230      	movs	r2, #48	@ 0x30
 8011002:	703a      	strb	r2, [r7, #0]
 8011004:	781a      	ldrb	r2, [r3, #0]
 8011006:	3201      	adds	r2, #1
 8011008:	701a      	strb	r2, [r3, #0]
 801100a:	e7b1      	b.n	8010f70 <_dtoa_r+0x560>
 801100c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011010:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011018:	d1b5      	bne.n	8010f86 <_dtoa_r+0x576>
 801101a:	e7d4      	b.n	8010fc6 <_dtoa_r+0x5b6>
 801101c:	08012ae8 	.word	0x08012ae8
 8011020:	08012ac0 	.word	0x08012ac0
 8011024:	9908      	ldr	r1, [sp, #32]
 8011026:	2900      	cmp	r1, #0
 8011028:	f000 80e9 	beq.w	80111fe <_dtoa_r+0x7ee>
 801102c:	9907      	ldr	r1, [sp, #28]
 801102e:	2901      	cmp	r1, #1
 8011030:	f300 80cb 	bgt.w	80111ca <_dtoa_r+0x7ba>
 8011034:	2d00      	cmp	r5, #0
 8011036:	f000 80c4 	beq.w	80111c2 <_dtoa_r+0x7b2>
 801103a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801103e:	9e04      	ldr	r6, [sp, #16]
 8011040:	461c      	mov	r4, r3
 8011042:	9305      	str	r3, [sp, #20]
 8011044:	9b04      	ldr	r3, [sp, #16]
 8011046:	4413      	add	r3, r2
 8011048:	9304      	str	r3, [sp, #16]
 801104a:	9b06      	ldr	r3, [sp, #24]
 801104c:	2101      	movs	r1, #1
 801104e:	4413      	add	r3, r2
 8011050:	4648      	mov	r0, r9
 8011052:	9306      	str	r3, [sp, #24]
 8011054:	f000 fc2e 	bl	80118b4 <__i2b>
 8011058:	9b05      	ldr	r3, [sp, #20]
 801105a:	4605      	mov	r5, r0
 801105c:	b166      	cbz	r6, 8011078 <_dtoa_r+0x668>
 801105e:	9a06      	ldr	r2, [sp, #24]
 8011060:	2a00      	cmp	r2, #0
 8011062:	dd09      	ble.n	8011078 <_dtoa_r+0x668>
 8011064:	42b2      	cmp	r2, r6
 8011066:	9904      	ldr	r1, [sp, #16]
 8011068:	bfa8      	it	ge
 801106a:	4632      	movge	r2, r6
 801106c:	1a89      	subs	r1, r1, r2
 801106e:	9104      	str	r1, [sp, #16]
 8011070:	9906      	ldr	r1, [sp, #24]
 8011072:	1ab6      	subs	r6, r6, r2
 8011074:	1a8a      	subs	r2, r1, r2
 8011076:	9206      	str	r2, [sp, #24]
 8011078:	b30b      	cbz	r3, 80110be <_dtoa_r+0x6ae>
 801107a:	9a08      	ldr	r2, [sp, #32]
 801107c:	2a00      	cmp	r2, #0
 801107e:	f000 80c5 	beq.w	801120c <_dtoa_r+0x7fc>
 8011082:	2c00      	cmp	r4, #0
 8011084:	f000 80bf 	beq.w	8011206 <_dtoa_r+0x7f6>
 8011088:	4629      	mov	r1, r5
 801108a:	4622      	mov	r2, r4
 801108c:	4648      	mov	r0, r9
 801108e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011090:	f000 fcc8 	bl	8011a24 <__pow5mult>
 8011094:	9a01      	ldr	r2, [sp, #4]
 8011096:	4601      	mov	r1, r0
 8011098:	4605      	mov	r5, r0
 801109a:	4648      	mov	r0, r9
 801109c:	f000 fc20 	bl	80118e0 <__multiply>
 80110a0:	9901      	ldr	r1, [sp, #4]
 80110a2:	9005      	str	r0, [sp, #20]
 80110a4:	4648      	mov	r0, r9
 80110a6:	f000 fb51 	bl	801174c <_Bfree>
 80110aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80110ac:	1b1b      	subs	r3, r3, r4
 80110ae:	f000 80b0 	beq.w	8011212 <_dtoa_r+0x802>
 80110b2:	9905      	ldr	r1, [sp, #20]
 80110b4:	461a      	mov	r2, r3
 80110b6:	4648      	mov	r0, r9
 80110b8:	f000 fcb4 	bl	8011a24 <__pow5mult>
 80110bc:	9001      	str	r0, [sp, #4]
 80110be:	2101      	movs	r1, #1
 80110c0:	4648      	mov	r0, r9
 80110c2:	f000 fbf7 	bl	80118b4 <__i2b>
 80110c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80110c8:	4604      	mov	r4, r0
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	f000 81da 	beq.w	8011484 <_dtoa_r+0xa74>
 80110d0:	461a      	mov	r2, r3
 80110d2:	4601      	mov	r1, r0
 80110d4:	4648      	mov	r0, r9
 80110d6:	f000 fca5 	bl	8011a24 <__pow5mult>
 80110da:	9b07      	ldr	r3, [sp, #28]
 80110dc:	2b01      	cmp	r3, #1
 80110de:	4604      	mov	r4, r0
 80110e0:	f300 80a0 	bgt.w	8011224 <_dtoa_r+0x814>
 80110e4:	9b02      	ldr	r3, [sp, #8]
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	f040 8096 	bne.w	8011218 <_dtoa_r+0x808>
 80110ec:	9b03      	ldr	r3, [sp, #12]
 80110ee:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80110f2:	2a00      	cmp	r2, #0
 80110f4:	f040 8092 	bne.w	801121c <_dtoa_r+0x80c>
 80110f8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80110fc:	0d12      	lsrs	r2, r2, #20
 80110fe:	0512      	lsls	r2, r2, #20
 8011100:	2a00      	cmp	r2, #0
 8011102:	f000 808d 	beq.w	8011220 <_dtoa_r+0x810>
 8011106:	9b04      	ldr	r3, [sp, #16]
 8011108:	3301      	adds	r3, #1
 801110a:	9304      	str	r3, [sp, #16]
 801110c:	9b06      	ldr	r3, [sp, #24]
 801110e:	3301      	adds	r3, #1
 8011110:	9306      	str	r3, [sp, #24]
 8011112:	2301      	movs	r3, #1
 8011114:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011116:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011118:	2b00      	cmp	r3, #0
 801111a:	f000 81b9 	beq.w	8011490 <_dtoa_r+0xa80>
 801111e:	6922      	ldr	r2, [r4, #16]
 8011120:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8011124:	6910      	ldr	r0, [r2, #16]
 8011126:	f000 fb79 	bl	801181c <__hi0bits>
 801112a:	f1c0 0020 	rsb	r0, r0, #32
 801112e:	9b06      	ldr	r3, [sp, #24]
 8011130:	4418      	add	r0, r3
 8011132:	f010 001f 	ands.w	r0, r0, #31
 8011136:	f000 8081 	beq.w	801123c <_dtoa_r+0x82c>
 801113a:	f1c0 0220 	rsb	r2, r0, #32
 801113e:	2a04      	cmp	r2, #4
 8011140:	dd73      	ble.n	801122a <_dtoa_r+0x81a>
 8011142:	9b04      	ldr	r3, [sp, #16]
 8011144:	f1c0 001c 	rsb	r0, r0, #28
 8011148:	4403      	add	r3, r0
 801114a:	9304      	str	r3, [sp, #16]
 801114c:	9b06      	ldr	r3, [sp, #24]
 801114e:	4406      	add	r6, r0
 8011150:	4403      	add	r3, r0
 8011152:	9306      	str	r3, [sp, #24]
 8011154:	9b04      	ldr	r3, [sp, #16]
 8011156:	2b00      	cmp	r3, #0
 8011158:	dd05      	ble.n	8011166 <_dtoa_r+0x756>
 801115a:	9901      	ldr	r1, [sp, #4]
 801115c:	461a      	mov	r2, r3
 801115e:	4648      	mov	r0, r9
 8011160:	f000 fcba 	bl	8011ad8 <__lshift>
 8011164:	9001      	str	r0, [sp, #4]
 8011166:	9b06      	ldr	r3, [sp, #24]
 8011168:	2b00      	cmp	r3, #0
 801116a:	dd05      	ble.n	8011178 <_dtoa_r+0x768>
 801116c:	4621      	mov	r1, r4
 801116e:	461a      	mov	r2, r3
 8011170:	4648      	mov	r0, r9
 8011172:	f000 fcb1 	bl	8011ad8 <__lshift>
 8011176:	4604      	mov	r4, r0
 8011178:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801117a:	2b00      	cmp	r3, #0
 801117c:	d060      	beq.n	8011240 <_dtoa_r+0x830>
 801117e:	9801      	ldr	r0, [sp, #4]
 8011180:	4621      	mov	r1, r4
 8011182:	f000 fd15 	bl	8011bb0 <__mcmp>
 8011186:	2800      	cmp	r0, #0
 8011188:	da5a      	bge.n	8011240 <_dtoa_r+0x830>
 801118a:	f108 33ff 	add.w	r3, r8, #4294967295
 801118e:	9305      	str	r3, [sp, #20]
 8011190:	9901      	ldr	r1, [sp, #4]
 8011192:	2300      	movs	r3, #0
 8011194:	220a      	movs	r2, #10
 8011196:	4648      	mov	r0, r9
 8011198:	f000 fafa 	bl	8011790 <__multadd>
 801119c:	9b08      	ldr	r3, [sp, #32]
 801119e:	9001      	str	r0, [sp, #4]
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	f000 8177 	beq.w	8011494 <_dtoa_r+0xa84>
 80111a6:	4629      	mov	r1, r5
 80111a8:	2300      	movs	r3, #0
 80111aa:	220a      	movs	r2, #10
 80111ac:	4648      	mov	r0, r9
 80111ae:	f000 faef 	bl	8011790 <__multadd>
 80111b2:	f1bb 0f00 	cmp.w	fp, #0
 80111b6:	4605      	mov	r5, r0
 80111b8:	dc6e      	bgt.n	8011298 <_dtoa_r+0x888>
 80111ba:	9b07      	ldr	r3, [sp, #28]
 80111bc:	2b02      	cmp	r3, #2
 80111be:	dc48      	bgt.n	8011252 <_dtoa_r+0x842>
 80111c0:	e06a      	b.n	8011298 <_dtoa_r+0x888>
 80111c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80111c4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80111c8:	e739      	b.n	801103e <_dtoa_r+0x62e>
 80111ca:	f10a 34ff 	add.w	r4, sl, #4294967295
 80111ce:	42a3      	cmp	r3, r4
 80111d0:	db07      	blt.n	80111e2 <_dtoa_r+0x7d2>
 80111d2:	f1ba 0f00 	cmp.w	sl, #0
 80111d6:	eba3 0404 	sub.w	r4, r3, r4
 80111da:	db0b      	blt.n	80111f4 <_dtoa_r+0x7e4>
 80111dc:	9e04      	ldr	r6, [sp, #16]
 80111de:	4652      	mov	r2, sl
 80111e0:	e72f      	b.n	8011042 <_dtoa_r+0x632>
 80111e2:	1ae2      	subs	r2, r4, r3
 80111e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80111e6:	9e04      	ldr	r6, [sp, #16]
 80111e8:	4413      	add	r3, r2
 80111ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80111ec:	4652      	mov	r2, sl
 80111ee:	4623      	mov	r3, r4
 80111f0:	2400      	movs	r4, #0
 80111f2:	e726      	b.n	8011042 <_dtoa_r+0x632>
 80111f4:	9a04      	ldr	r2, [sp, #16]
 80111f6:	eba2 060a 	sub.w	r6, r2, sl
 80111fa:	2200      	movs	r2, #0
 80111fc:	e721      	b.n	8011042 <_dtoa_r+0x632>
 80111fe:	9e04      	ldr	r6, [sp, #16]
 8011200:	9d08      	ldr	r5, [sp, #32]
 8011202:	461c      	mov	r4, r3
 8011204:	e72a      	b.n	801105c <_dtoa_r+0x64c>
 8011206:	9a01      	ldr	r2, [sp, #4]
 8011208:	9205      	str	r2, [sp, #20]
 801120a:	e752      	b.n	80110b2 <_dtoa_r+0x6a2>
 801120c:	9901      	ldr	r1, [sp, #4]
 801120e:	461a      	mov	r2, r3
 8011210:	e751      	b.n	80110b6 <_dtoa_r+0x6a6>
 8011212:	9b05      	ldr	r3, [sp, #20]
 8011214:	9301      	str	r3, [sp, #4]
 8011216:	e752      	b.n	80110be <_dtoa_r+0x6ae>
 8011218:	2300      	movs	r3, #0
 801121a:	e77b      	b.n	8011114 <_dtoa_r+0x704>
 801121c:	9b02      	ldr	r3, [sp, #8]
 801121e:	e779      	b.n	8011114 <_dtoa_r+0x704>
 8011220:	920b      	str	r2, [sp, #44]	@ 0x2c
 8011222:	e778      	b.n	8011116 <_dtoa_r+0x706>
 8011224:	2300      	movs	r3, #0
 8011226:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011228:	e779      	b.n	801111e <_dtoa_r+0x70e>
 801122a:	d093      	beq.n	8011154 <_dtoa_r+0x744>
 801122c:	9b04      	ldr	r3, [sp, #16]
 801122e:	321c      	adds	r2, #28
 8011230:	4413      	add	r3, r2
 8011232:	9304      	str	r3, [sp, #16]
 8011234:	9b06      	ldr	r3, [sp, #24]
 8011236:	4416      	add	r6, r2
 8011238:	4413      	add	r3, r2
 801123a:	e78a      	b.n	8011152 <_dtoa_r+0x742>
 801123c:	4602      	mov	r2, r0
 801123e:	e7f5      	b.n	801122c <_dtoa_r+0x81c>
 8011240:	f1ba 0f00 	cmp.w	sl, #0
 8011244:	f8cd 8014 	str.w	r8, [sp, #20]
 8011248:	46d3      	mov	fp, sl
 801124a:	dc21      	bgt.n	8011290 <_dtoa_r+0x880>
 801124c:	9b07      	ldr	r3, [sp, #28]
 801124e:	2b02      	cmp	r3, #2
 8011250:	dd1e      	ble.n	8011290 <_dtoa_r+0x880>
 8011252:	f1bb 0f00 	cmp.w	fp, #0
 8011256:	f47f addc 	bne.w	8010e12 <_dtoa_r+0x402>
 801125a:	4621      	mov	r1, r4
 801125c:	465b      	mov	r3, fp
 801125e:	2205      	movs	r2, #5
 8011260:	4648      	mov	r0, r9
 8011262:	f000 fa95 	bl	8011790 <__multadd>
 8011266:	4601      	mov	r1, r0
 8011268:	4604      	mov	r4, r0
 801126a:	9801      	ldr	r0, [sp, #4]
 801126c:	f000 fca0 	bl	8011bb0 <__mcmp>
 8011270:	2800      	cmp	r0, #0
 8011272:	f77f adce 	ble.w	8010e12 <_dtoa_r+0x402>
 8011276:	463e      	mov	r6, r7
 8011278:	2331      	movs	r3, #49	@ 0x31
 801127a:	f806 3b01 	strb.w	r3, [r6], #1
 801127e:	9b05      	ldr	r3, [sp, #20]
 8011280:	3301      	adds	r3, #1
 8011282:	9305      	str	r3, [sp, #20]
 8011284:	e5c9      	b.n	8010e1a <_dtoa_r+0x40a>
 8011286:	f8cd 8014 	str.w	r8, [sp, #20]
 801128a:	4654      	mov	r4, sl
 801128c:	4625      	mov	r5, r4
 801128e:	e7f2      	b.n	8011276 <_dtoa_r+0x866>
 8011290:	9b08      	ldr	r3, [sp, #32]
 8011292:	2b00      	cmp	r3, #0
 8011294:	f000 8102 	beq.w	801149c <_dtoa_r+0xa8c>
 8011298:	2e00      	cmp	r6, #0
 801129a:	dd05      	ble.n	80112a8 <_dtoa_r+0x898>
 801129c:	4629      	mov	r1, r5
 801129e:	4632      	mov	r2, r6
 80112a0:	4648      	mov	r0, r9
 80112a2:	f000 fc19 	bl	8011ad8 <__lshift>
 80112a6:	4605      	mov	r5, r0
 80112a8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d058      	beq.n	8011360 <_dtoa_r+0x950>
 80112ae:	6869      	ldr	r1, [r5, #4]
 80112b0:	4648      	mov	r0, r9
 80112b2:	f000 fa0b 	bl	80116cc <_Balloc>
 80112b6:	4606      	mov	r6, r0
 80112b8:	b928      	cbnz	r0, 80112c6 <_dtoa_r+0x8b6>
 80112ba:	4b82      	ldr	r3, [pc, #520]	@ (80114c4 <_dtoa_r+0xab4>)
 80112bc:	4602      	mov	r2, r0
 80112be:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80112c2:	f7ff bbbe 	b.w	8010a42 <_dtoa_r+0x32>
 80112c6:	692a      	ldr	r2, [r5, #16]
 80112c8:	3202      	adds	r2, #2
 80112ca:	0092      	lsls	r2, r2, #2
 80112cc:	f105 010c 	add.w	r1, r5, #12
 80112d0:	300c      	adds	r0, #12
 80112d2:	f7ff fae8 	bl	80108a6 <memcpy>
 80112d6:	2201      	movs	r2, #1
 80112d8:	4631      	mov	r1, r6
 80112da:	4648      	mov	r0, r9
 80112dc:	f000 fbfc 	bl	8011ad8 <__lshift>
 80112e0:	1c7b      	adds	r3, r7, #1
 80112e2:	9304      	str	r3, [sp, #16]
 80112e4:	eb07 030b 	add.w	r3, r7, fp
 80112e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80112ea:	9b02      	ldr	r3, [sp, #8]
 80112ec:	f003 0301 	and.w	r3, r3, #1
 80112f0:	46a8      	mov	r8, r5
 80112f2:	9308      	str	r3, [sp, #32]
 80112f4:	4605      	mov	r5, r0
 80112f6:	9b04      	ldr	r3, [sp, #16]
 80112f8:	9801      	ldr	r0, [sp, #4]
 80112fa:	4621      	mov	r1, r4
 80112fc:	f103 3bff 	add.w	fp, r3, #4294967295
 8011300:	f7ff fafe 	bl	8010900 <quorem>
 8011304:	4641      	mov	r1, r8
 8011306:	9002      	str	r0, [sp, #8]
 8011308:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801130c:	9801      	ldr	r0, [sp, #4]
 801130e:	f000 fc4f 	bl	8011bb0 <__mcmp>
 8011312:	462a      	mov	r2, r5
 8011314:	9006      	str	r0, [sp, #24]
 8011316:	4621      	mov	r1, r4
 8011318:	4648      	mov	r0, r9
 801131a:	f000 fc65 	bl	8011be8 <__mdiff>
 801131e:	68c2      	ldr	r2, [r0, #12]
 8011320:	4606      	mov	r6, r0
 8011322:	b9fa      	cbnz	r2, 8011364 <_dtoa_r+0x954>
 8011324:	4601      	mov	r1, r0
 8011326:	9801      	ldr	r0, [sp, #4]
 8011328:	f000 fc42 	bl	8011bb0 <__mcmp>
 801132c:	4602      	mov	r2, r0
 801132e:	4631      	mov	r1, r6
 8011330:	4648      	mov	r0, r9
 8011332:	920a      	str	r2, [sp, #40]	@ 0x28
 8011334:	f000 fa0a 	bl	801174c <_Bfree>
 8011338:	9b07      	ldr	r3, [sp, #28]
 801133a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801133c:	9e04      	ldr	r6, [sp, #16]
 801133e:	ea42 0103 	orr.w	r1, r2, r3
 8011342:	9b08      	ldr	r3, [sp, #32]
 8011344:	4319      	orrs	r1, r3
 8011346:	d10f      	bne.n	8011368 <_dtoa_r+0x958>
 8011348:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801134c:	d028      	beq.n	80113a0 <_dtoa_r+0x990>
 801134e:	9b06      	ldr	r3, [sp, #24]
 8011350:	2b00      	cmp	r3, #0
 8011352:	dd02      	ble.n	801135a <_dtoa_r+0x94a>
 8011354:	9b02      	ldr	r3, [sp, #8]
 8011356:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 801135a:	f88b a000 	strb.w	sl, [fp]
 801135e:	e55e      	b.n	8010e1e <_dtoa_r+0x40e>
 8011360:	4628      	mov	r0, r5
 8011362:	e7bd      	b.n	80112e0 <_dtoa_r+0x8d0>
 8011364:	2201      	movs	r2, #1
 8011366:	e7e2      	b.n	801132e <_dtoa_r+0x91e>
 8011368:	9b06      	ldr	r3, [sp, #24]
 801136a:	2b00      	cmp	r3, #0
 801136c:	db04      	blt.n	8011378 <_dtoa_r+0x968>
 801136e:	9907      	ldr	r1, [sp, #28]
 8011370:	430b      	orrs	r3, r1
 8011372:	9908      	ldr	r1, [sp, #32]
 8011374:	430b      	orrs	r3, r1
 8011376:	d120      	bne.n	80113ba <_dtoa_r+0x9aa>
 8011378:	2a00      	cmp	r2, #0
 801137a:	ddee      	ble.n	801135a <_dtoa_r+0x94a>
 801137c:	9901      	ldr	r1, [sp, #4]
 801137e:	2201      	movs	r2, #1
 8011380:	4648      	mov	r0, r9
 8011382:	f000 fba9 	bl	8011ad8 <__lshift>
 8011386:	4621      	mov	r1, r4
 8011388:	9001      	str	r0, [sp, #4]
 801138a:	f000 fc11 	bl	8011bb0 <__mcmp>
 801138e:	2800      	cmp	r0, #0
 8011390:	dc03      	bgt.n	801139a <_dtoa_r+0x98a>
 8011392:	d1e2      	bne.n	801135a <_dtoa_r+0x94a>
 8011394:	f01a 0f01 	tst.w	sl, #1
 8011398:	d0df      	beq.n	801135a <_dtoa_r+0x94a>
 801139a:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801139e:	d1d9      	bne.n	8011354 <_dtoa_r+0x944>
 80113a0:	2339      	movs	r3, #57	@ 0x39
 80113a2:	f88b 3000 	strb.w	r3, [fp]
 80113a6:	4633      	mov	r3, r6
 80113a8:	461e      	mov	r6, r3
 80113aa:	3b01      	subs	r3, #1
 80113ac:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80113b0:	2a39      	cmp	r2, #57	@ 0x39
 80113b2:	d052      	beq.n	801145a <_dtoa_r+0xa4a>
 80113b4:	3201      	adds	r2, #1
 80113b6:	701a      	strb	r2, [r3, #0]
 80113b8:	e531      	b.n	8010e1e <_dtoa_r+0x40e>
 80113ba:	2a00      	cmp	r2, #0
 80113bc:	dd07      	ble.n	80113ce <_dtoa_r+0x9be>
 80113be:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80113c2:	d0ed      	beq.n	80113a0 <_dtoa_r+0x990>
 80113c4:	f10a 0301 	add.w	r3, sl, #1
 80113c8:	f88b 3000 	strb.w	r3, [fp]
 80113cc:	e527      	b.n	8010e1e <_dtoa_r+0x40e>
 80113ce:	9b04      	ldr	r3, [sp, #16]
 80113d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80113d2:	f803 ac01 	strb.w	sl, [r3, #-1]
 80113d6:	4293      	cmp	r3, r2
 80113d8:	d029      	beq.n	801142e <_dtoa_r+0xa1e>
 80113da:	9901      	ldr	r1, [sp, #4]
 80113dc:	2300      	movs	r3, #0
 80113de:	220a      	movs	r2, #10
 80113e0:	4648      	mov	r0, r9
 80113e2:	f000 f9d5 	bl	8011790 <__multadd>
 80113e6:	45a8      	cmp	r8, r5
 80113e8:	9001      	str	r0, [sp, #4]
 80113ea:	f04f 0300 	mov.w	r3, #0
 80113ee:	f04f 020a 	mov.w	r2, #10
 80113f2:	4641      	mov	r1, r8
 80113f4:	4648      	mov	r0, r9
 80113f6:	d107      	bne.n	8011408 <_dtoa_r+0x9f8>
 80113f8:	f000 f9ca 	bl	8011790 <__multadd>
 80113fc:	4680      	mov	r8, r0
 80113fe:	4605      	mov	r5, r0
 8011400:	9b04      	ldr	r3, [sp, #16]
 8011402:	3301      	adds	r3, #1
 8011404:	9304      	str	r3, [sp, #16]
 8011406:	e776      	b.n	80112f6 <_dtoa_r+0x8e6>
 8011408:	f000 f9c2 	bl	8011790 <__multadd>
 801140c:	4629      	mov	r1, r5
 801140e:	4680      	mov	r8, r0
 8011410:	2300      	movs	r3, #0
 8011412:	220a      	movs	r2, #10
 8011414:	4648      	mov	r0, r9
 8011416:	f000 f9bb 	bl	8011790 <__multadd>
 801141a:	4605      	mov	r5, r0
 801141c:	e7f0      	b.n	8011400 <_dtoa_r+0x9f0>
 801141e:	f1bb 0f00 	cmp.w	fp, #0
 8011422:	bfcc      	ite	gt
 8011424:	465e      	movgt	r6, fp
 8011426:	2601      	movle	r6, #1
 8011428:	443e      	add	r6, r7
 801142a:	f04f 0800 	mov.w	r8, #0
 801142e:	9901      	ldr	r1, [sp, #4]
 8011430:	2201      	movs	r2, #1
 8011432:	4648      	mov	r0, r9
 8011434:	f000 fb50 	bl	8011ad8 <__lshift>
 8011438:	4621      	mov	r1, r4
 801143a:	9001      	str	r0, [sp, #4]
 801143c:	f000 fbb8 	bl	8011bb0 <__mcmp>
 8011440:	2800      	cmp	r0, #0
 8011442:	dcb0      	bgt.n	80113a6 <_dtoa_r+0x996>
 8011444:	d102      	bne.n	801144c <_dtoa_r+0xa3c>
 8011446:	f01a 0f01 	tst.w	sl, #1
 801144a:	d1ac      	bne.n	80113a6 <_dtoa_r+0x996>
 801144c:	4633      	mov	r3, r6
 801144e:	461e      	mov	r6, r3
 8011450:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011454:	2a30      	cmp	r2, #48	@ 0x30
 8011456:	d0fa      	beq.n	801144e <_dtoa_r+0xa3e>
 8011458:	e4e1      	b.n	8010e1e <_dtoa_r+0x40e>
 801145a:	429f      	cmp	r7, r3
 801145c:	d1a4      	bne.n	80113a8 <_dtoa_r+0x998>
 801145e:	9b05      	ldr	r3, [sp, #20]
 8011460:	3301      	adds	r3, #1
 8011462:	9305      	str	r3, [sp, #20]
 8011464:	2331      	movs	r3, #49	@ 0x31
 8011466:	703b      	strb	r3, [r7, #0]
 8011468:	e4d9      	b.n	8010e1e <_dtoa_r+0x40e>
 801146a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801146c:	4f16      	ldr	r7, [pc, #88]	@ (80114c8 <_dtoa_r+0xab8>)
 801146e:	b11b      	cbz	r3, 8011478 <_dtoa_r+0xa68>
 8011470:	f107 0308 	add.w	r3, r7, #8
 8011474:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8011476:	6013      	str	r3, [r2, #0]
 8011478:	4638      	mov	r0, r7
 801147a:	b011      	add	sp, #68	@ 0x44
 801147c:	ecbd 8b02 	vpop	{d8}
 8011480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011484:	9b07      	ldr	r3, [sp, #28]
 8011486:	2b01      	cmp	r3, #1
 8011488:	f77f ae2c 	ble.w	80110e4 <_dtoa_r+0x6d4>
 801148c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801148e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011490:	2001      	movs	r0, #1
 8011492:	e64c      	b.n	801112e <_dtoa_r+0x71e>
 8011494:	f1bb 0f00 	cmp.w	fp, #0
 8011498:	f77f aed8 	ble.w	801124c <_dtoa_r+0x83c>
 801149c:	463e      	mov	r6, r7
 801149e:	9801      	ldr	r0, [sp, #4]
 80114a0:	4621      	mov	r1, r4
 80114a2:	f7ff fa2d 	bl	8010900 <quorem>
 80114a6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80114aa:	f806 ab01 	strb.w	sl, [r6], #1
 80114ae:	1bf2      	subs	r2, r6, r7
 80114b0:	4593      	cmp	fp, r2
 80114b2:	ddb4      	ble.n	801141e <_dtoa_r+0xa0e>
 80114b4:	9901      	ldr	r1, [sp, #4]
 80114b6:	2300      	movs	r3, #0
 80114b8:	220a      	movs	r2, #10
 80114ba:	4648      	mov	r0, r9
 80114bc:	f000 f968 	bl	8011790 <__multadd>
 80114c0:	9001      	str	r0, [sp, #4]
 80114c2:	e7ec      	b.n	801149e <_dtoa_r+0xa8e>
 80114c4:	08012a2b 	.word	0x08012a2b
 80114c8:	080129c6 	.word	0x080129c6

080114cc <_free_r>:
 80114cc:	b538      	push	{r3, r4, r5, lr}
 80114ce:	4605      	mov	r5, r0
 80114d0:	2900      	cmp	r1, #0
 80114d2:	d041      	beq.n	8011558 <_free_r+0x8c>
 80114d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80114d8:	1f0c      	subs	r4, r1, #4
 80114da:	2b00      	cmp	r3, #0
 80114dc:	bfb8      	it	lt
 80114de:	18e4      	addlt	r4, r4, r3
 80114e0:	f000 f8e8 	bl	80116b4 <__malloc_lock>
 80114e4:	4a1d      	ldr	r2, [pc, #116]	@ (801155c <_free_r+0x90>)
 80114e6:	6813      	ldr	r3, [r2, #0]
 80114e8:	b933      	cbnz	r3, 80114f8 <_free_r+0x2c>
 80114ea:	6063      	str	r3, [r4, #4]
 80114ec:	6014      	str	r4, [r2, #0]
 80114ee:	4628      	mov	r0, r5
 80114f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80114f4:	f000 b8e4 	b.w	80116c0 <__malloc_unlock>
 80114f8:	42a3      	cmp	r3, r4
 80114fa:	d908      	bls.n	801150e <_free_r+0x42>
 80114fc:	6820      	ldr	r0, [r4, #0]
 80114fe:	1821      	adds	r1, r4, r0
 8011500:	428b      	cmp	r3, r1
 8011502:	bf01      	itttt	eq
 8011504:	6819      	ldreq	r1, [r3, #0]
 8011506:	685b      	ldreq	r3, [r3, #4]
 8011508:	1809      	addeq	r1, r1, r0
 801150a:	6021      	streq	r1, [r4, #0]
 801150c:	e7ed      	b.n	80114ea <_free_r+0x1e>
 801150e:	461a      	mov	r2, r3
 8011510:	685b      	ldr	r3, [r3, #4]
 8011512:	b10b      	cbz	r3, 8011518 <_free_r+0x4c>
 8011514:	42a3      	cmp	r3, r4
 8011516:	d9fa      	bls.n	801150e <_free_r+0x42>
 8011518:	6811      	ldr	r1, [r2, #0]
 801151a:	1850      	adds	r0, r2, r1
 801151c:	42a0      	cmp	r0, r4
 801151e:	d10b      	bne.n	8011538 <_free_r+0x6c>
 8011520:	6820      	ldr	r0, [r4, #0]
 8011522:	4401      	add	r1, r0
 8011524:	1850      	adds	r0, r2, r1
 8011526:	4283      	cmp	r3, r0
 8011528:	6011      	str	r1, [r2, #0]
 801152a:	d1e0      	bne.n	80114ee <_free_r+0x22>
 801152c:	6818      	ldr	r0, [r3, #0]
 801152e:	685b      	ldr	r3, [r3, #4]
 8011530:	6053      	str	r3, [r2, #4]
 8011532:	4408      	add	r0, r1
 8011534:	6010      	str	r0, [r2, #0]
 8011536:	e7da      	b.n	80114ee <_free_r+0x22>
 8011538:	d902      	bls.n	8011540 <_free_r+0x74>
 801153a:	230c      	movs	r3, #12
 801153c:	602b      	str	r3, [r5, #0]
 801153e:	e7d6      	b.n	80114ee <_free_r+0x22>
 8011540:	6820      	ldr	r0, [r4, #0]
 8011542:	1821      	adds	r1, r4, r0
 8011544:	428b      	cmp	r3, r1
 8011546:	bf04      	itt	eq
 8011548:	6819      	ldreq	r1, [r3, #0]
 801154a:	685b      	ldreq	r3, [r3, #4]
 801154c:	6063      	str	r3, [r4, #4]
 801154e:	bf04      	itt	eq
 8011550:	1809      	addeq	r1, r1, r0
 8011552:	6021      	streq	r1, [r4, #0]
 8011554:	6054      	str	r4, [r2, #4]
 8011556:	e7ca      	b.n	80114ee <_free_r+0x22>
 8011558:	bd38      	pop	{r3, r4, r5, pc}
 801155a:	bf00      	nop
 801155c:	24000800 	.word	0x24000800

08011560 <malloc>:
 8011560:	4b02      	ldr	r3, [pc, #8]	@ (801156c <malloc+0xc>)
 8011562:	4601      	mov	r1, r0
 8011564:	6818      	ldr	r0, [r3, #0]
 8011566:	f000 b825 	b.w	80115b4 <_malloc_r>
 801156a:	bf00      	nop
 801156c:	24000038 	.word	0x24000038

08011570 <sbrk_aligned>:
 8011570:	b570      	push	{r4, r5, r6, lr}
 8011572:	4e0f      	ldr	r6, [pc, #60]	@ (80115b0 <sbrk_aligned+0x40>)
 8011574:	460c      	mov	r4, r1
 8011576:	6831      	ldr	r1, [r6, #0]
 8011578:	4605      	mov	r5, r0
 801157a:	b911      	cbnz	r1, 8011582 <sbrk_aligned+0x12>
 801157c:	f001 f816 	bl	80125ac <_sbrk_r>
 8011580:	6030      	str	r0, [r6, #0]
 8011582:	4621      	mov	r1, r4
 8011584:	4628      	mov	r0, r5
 8011586:	f001 f811 	bl	80125ac <_sbrk_r>
 801158a:	1c43      	adds	r3, r0, #1
 801158c:	d103      	bne.n	8011596 <sbrk_aligned+0x26>
 801158e:	f04f 34ff 	mov.w	r4, #4294967295
 8011592:	4620      	mov	r0, r4
 8011594:	bd70      	pop	{r4, r5, r6, pc}
 8011596:	1cc4      	adds	r4, r0, #3
 8011598:	f024 0403 	bic.w	r4, r4, #3
 801159c:	42a0      	cmp	r0, r4
 801159e:	d0f8      	beq.n	8011592 <sbrk_aligned+0x22>
 80115a0:	1a21      	subs	r1, r4, r0
 80115a2:	4628      	mov	r0, r5
 80115a4:	f001 f802 	bl	80125ac <_sbrk_r>
 80115a8:	3001      	adds	r0, #1
 80115aa:	d1f2      	bne.n	8011592 <sbrk_aligned+0x22>
 80115ac:	e7ef      	b.n	801158e <sbrk_aligned+0x1e>
 80115ae:	bf00      	nop
 80115b0:	240007fc 	.word	0x240007fc

080115b4 <_malloc_r>:
 80115b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80115b8:	1ccd      	adds	r5, r1, #3
 80115ba:	f025 0503 	bic.w	r5, r5, #3
 80115be:	3508      	adds	r5, #8
 80115c0:	2d0c      	cmp	r5, #12
 80115c2:	bf38      	it	cc
 80115c4:	250c      	movcc	r5, #12
 80115c6:	2d00      	cmp	r5, #0
 80115c8:	4606      	mov	r6, r0
 80115ca:	db01      	blt.n	80115d0 <_malloc_r+0x1c>
 80115cc:	42a9      	cmp	r1, r5
 80115ce:	d904      	bls.n	80115da <_malloc_r+0x26>
 80115d0:	230c      	movs	r3, #12
 80115d2:	6033      	str	r3, [r6, #0]
 80115d4:	2000      	movs	r0, #0
 80115d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80115da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80116b0 <_malloc_r+0xfc>
 80115de:	f000 f869 	bl	80116b4 <__malloc_lock>
 80115e2:	f8d8 3000 	ldr.w	r3, [r8]
 80115e6:	461c      	mov	r4, r3
 80115e8:	bb44      	cbnz	r4, 801163c <_malloc_r+0x88>
 80115ea:	4629      	mov	r1, r5
 80115ec:	4630      	mov	r0, r6
 80115ee:	f7ff ffbf 	bl	8011570 <sbrk_aligned>
 80115f2:	1c43      	adds	r3, r0, #1
 80115f4:	4604      	mov	r4, r0
 80115f6:	d158      	bne.n	80116aa <_malloc_r+0xf6>
 80115f8:	f8d8 4000 	ldr.w	r4, [r8]
 80115fc:	4627      	mov	r7, r4
 80115fe:	2f00      	cmp	r7, #0
 8011600:	d143      	bne.n	801168a <_malloc_r+0xd6>
 8011602:	2c00      	cmp	r4, #0
 8011604:	d04b      	beq.n	801169e <_malloc_r+0xea>
 8011606:	6823      	ldr	r3, [r4, #0]
 8011608:	4639      	mov	r1, r7
 801160a:	4630      	mov	r0, r6
 801160c:	eb04 0903 	add.w	r9, r4, r3
 8011610:	f000 ffcc 	bl	80125ac <_sbrk_r>
 8011614:	4581      	cmp	r9, r0
 8011616:	d142      	bne.n	801169e <_malloc_r+0xea>
 8011618:	6821      	ldr	r1, [r4, #0]
 801161a:	1a6d      	subs	r5, r5, r1
 801161c:	4629      	mov	r1, r5
 801161e:	4630      	mov	r0, r6
 8011620:	f7ff ffa6 	bl	8011570 <sbrk_aligned>
 8011624:	3001      	adds	r0, #1
 8011626:	d03a      	beq.n	801169e <_malloc_r+0xea>
 8011628:	6823      	ldr	r3, [r4, #0]
 801162a:	442b      	add	r3, r5
 801162c:	6023      	str	r3, [r4, #0]
 801162e:	f8d8 3000 	ldr.w	r3, [r8]
 8011632:	685a      	ldr	r2, [r3, #4]
 8011634:	bb62      	cbnz	r2, 8011690 <_malloc_r+0xdc>
 8011636:	f8c8 7000 	str.w	r7, [r8]
 801163a:	e00f      	b.n	801165c <_malloc_r+0xa8>
 801163c:	6822      	ldr	r2, [r4, #0]
 801163e:	1b52      	subs	r2, r2, r5
 8011640:	d420      	bmi.n	8011684 <_malloc_r+0xd0>
 8011642:	2a0b      	cmp	r2, #11
 8011644:	d917      	bls.n	8011676 <_malloc_r+0xc2>
 8011646:	1961      	adds	r1, r4, r5
 8011648:	42a3      	cmp	r3, r4
 801164a:	6025      	str	r5, [r4, #0]
 801164c:	bf18      	it	ne
 801164e:	6059      	strne	r1, [r3, #4]
 8011650:	6863      	ldr	r3, [r4, #4]
 8011652:	bf08      	it	eq
 8011654:	f8c8 1000 	streq.w	r1, [r8]
 8011658:	5162      	str	r2, [r4, r5]
 801165a:	604b      	str	r3, [r1, #4]
 801165c:	4630      	mov	r0, r6
 801165e:	f000 f82f 	bl	80116c0 <__malloc_unlock>
 8011662:	f104 000b 	add.w	r0, r4, #11
 8011666:	1d23      	adds	r3, r4, #4
 8011668:	f020 0007 	bic.w	r0, r0, #7
 801166c:	1ac2      	subs	r2, r0, r3
 801166e:	bf1c      	itt	ne
 8011670:	1a1b      	subne	r3, r3, r0
 8011672:	50a3      	strne	r3, [r4, r2]
 8011674:	e7af      	b.n	80115d6 <_malloc_r+0x22>
 8011676:	6862      	ldr	r2, [r4, #4]
 8011678:	42a3      	cmp	r3, r4
 801167a:	bf0c      	ite	eq
 801167c:	f8c8 2000 	streq.w	r2, [r8]
 8011680:	605a      	strne	r2, [r3, #4]
 8011682:	e7eb      	b.n	801165c <_malloc_r+0xa8>
 8011684:	4623      	mov	r3, r4
 8011686:	6864      	ldr	r4, [r4, #4]
 8011688:	e7ae      	b.n	80115e8 <_malloc_r+0x34>
 801168a:	463c      	mov	r4, r7
 801168c:	687f      	ldr	r7, [r7, #4]
 801168e:	e7b6      	b.n	80115fe <_malloc_r+0x4a>
 8011690:	461a      	mov	r2, r3
 8011692:	685b      	ldr	r3, [r3, #4]
 8011694:	42a3      	cmp	r3, r4
 8011696:	d1fb      	bne.n	8011690 <_malloc_r+0xdc>
 8011698:	2300      	movs	r3, #0
 801169a:	6053      	str	r3, [r2, #4]
 801169c:	e7de      	b.n	801165c <_malloc_r+0xa8>
 801169e:	230c      	movs	r3, #12
 80116a0:	6033      	str	r3, [r6, #0]
 80116a2:	4630      	mov	r0, r6
 80116a4:	f000 f80c 	bl	80116c0 <__malloc_unlock>
 80116a8:	e794      	b.n	80115d4 <_malloc_r+0x20>
 80116aa:	6005      	str	r5, [r0, #0]
 80116ac:	e7d6      	b.n	801165c <_malloc_r+0xa8>
 80116ae:	bf00      	nop
 80116b0:	24000800 	.word	0x24000800

080116b4 <__malloc_lock>:
 80116b4:	4801      	ldr	r0, [pc, #4]	@ (80116bc <__malloc_lock+0x8>)
 80116b6:	f7ff b8f4 	b.w	80108a2 <__retarget_lock_acquire_recursive>
 80116ba:	bf00      	nop
 80116bc:	240007f8 	.word	0x240007f8

080116c0 <__malloc_unlock>:
 80116c0:	4801      	ldr	r0, [pc, #4]	@ (80116c8 <__malloc_unlock+0x8>)
 80116c2:	f7ff b8ef 	b.w	80108a4 <__retarget_lock_release_recursive>
 80116c6:	bf00      	nop
 80116c8:	240007f8 	.word	0x240007f8

080116cc <_Balloc>:
 80116cc:	b570      	push	{r4, r5, r6, lr}
 80116ce:	69c6      	ldr	r6, [r0, #28]
 80116d0:	4604      	mov	r4, r0
 80116d2:	460d      	mov	r5, r1
 80116d4:	b976      	cbnz	r6, 80116f4 <_Balloc+0x28>
 80116d6:	2010      	movs	r0, #16
 80116d8:	f7ff ff42 	bl	8011560 <malloc>
 80116dc:	4602      	mov	r2, r0
 80116de:	61e0      	str	r0, [r4, #28]
 80116e0:	b920      	cbnz	r0, 80116ec <_Balloc+0x20>
 80116e2:	4b18      	ldr	r3, [pc, #96]	@ (8011744 <_Balloc+0x78>)
 80116e4:	4818      	ldr	r0, [pc, #96]	@ (8011748 <_Balloc+0x7c>)
 80116e6:	216b      	movs	r1, #107	@ 0x6b
 80116e8:	f7ff f8ec 	bl	80108c4 <__assert_func>
 80116ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80116f0:	6006      	str	r6, [r0, #0]
 80116f2:	60c6      	str	r6, [r0, #12]
 80116f4:	69e6      	ldr	r6, [r4, #28]
 80116f6:	68f3      	ldr	r3, [r6, #12]
 80116f8:	b183      	cbz	r3, 801171c <_Balloc+0x50>
 80116fa:	69e3      	ldr	r3, [r4, #28]
 80116fc:	68db      	ldr	r3, [r3, #12]
 80116fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011702:	b9b8      	cbnz	r0, 8011734 <_Balloc+0x68>
 8011704:	2101      	movs	r1, #1
 8011706:	fa01 f605 	lsl.w	r6, r1, r5
 801170a:	1d72      	adds	r2, r6, #5
 801170c:	0092      	lsls	r2, r2, #2
 801170e:	4620      	mov	r0, r4
 8011710:	f000 ff63 	bl	80125da <_calloc_r>
 8011714:	b160      	cbz	r0, 8011730 <_Balloc+0x64>
 8011716:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801171a:	e00e      	b.n	801173a <_Balloc+0x6e>
 801171c:	2221      	movs	r2, #33	@ 0x21
 801171e:	2104      	movs	r1, #4
 8011720:	4620      	mov	r0, r4
 8011722:	f000 ff5a 	bl	80125da <_calloc_r>
 8011726:	69e3      	ldr	r3, [r4, #28]
 8011728:	60f0      	str	r0, [r6, #12]
 801172a:	68db      	ldr	r3, [r3, #12]
 801172c:	2b00      	cmp	r3, #0
 801172e:	d1e4      	bne.n	80116fa <_Balloc+0x2e>
 8011730:	2000      	movs	r0, #0
 8011732:	bd70      	pop	{r4, r5, r6, pc}
 8011734:	6802      	ldr	r2, [r0, #0]
 8011736:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801173a:	2300      	movs	r3, #0
 801173c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011740:	e7f7      	b.n	8011732 <_Balloc+0x66>
 8011742:	bf00      	nop
 8011744:	08012919 	.word	0x08012919
 8011748:	08012a3c 	.word	0x08012a3c

0801174c <_Bfree>:
 801174c:	b570      	push	{r4, r5, r6, lr}
 801174e:	69c6      	ldr	r6, [r0, #28]
 8011750:	4605      	mov	r5, r0
 8011752:	460c      	mov	r4, r1
 8011754:	b976      	cbnz	r6, 8011774 <_Bfree+0x28>
 8011756:	2010      	movs	r0, #16
 8011758:	f7ff ff02 	bl	8011560 <malloc>
 801175c:	4602      	mov	r2, r0
 801175e:	61e8      	str	r0, [r5, #28]
 8011760:	b920      	cbnz	r0, 801176c <_Bfree+0x20>
 8011762:	4b09      	ldr	r3, [pc, #36]	@ (8011788 <_Bfree+0x3c>)
 8011764:	4809      	ldr	r0, [pc, #36]	@ (801178c <_Bfree+0x40>)
 8011766:	218f      	movs	r1, #143	@ 0x8f
 8011768:	f7ff f8ac 	bl	80108c4 <__assert_func>
 801176c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011770:	6006      	str	r6, [r0, #0]
 8011772:	60c6      	str	r6, [r0, #12]
 8011774:	b13c      	cbz	r4, 8011786 <_Bfree+0x3a>
 8011776:	69eb      	ldr	r3, [r5, #28]
 8011778:	6862      	ldr	r2, [r4, #4]
 801177a:	68db      	ldr	r3, [r3, #12]
 801177c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011780:	6021      	str	r1, [r4, #0]
 8011782:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011786:	bd70      	pop	{r4, r5, r6, pc}
 8011788:	08012919 	.word	0x08012919
 801178c:	08012a3c 	.word	0x08012a3c

08011790 <__multadd>:
 8011790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011794:	690d      	ldr	r5, [r1, #16]
 8011796:	4607      	mov	r7, r0
 8011798:	460c      	mov	r4, r1
 801179a:	461e      	mov	r6, r3
 801179c:	f101 0c14 	add.w	ip, r1, #20
 80117a0:	2000      	movs	r0, #0
 80117a2:	f8dc 3000 	ldr.w	r3, [ip]
 80117a6:	b299      	uxth	r1, r3
 80117a8:	fb02 6101 	mla	r1, r2, r1, r6
 80117ac:	0c1e      	lsrs	r6, r3, #16
 80117ae:	0c0b      	lsrs	r3, r1, #16
 80117b0:	fb02 3306 	mla	r3, r2, r6, r3
 80117b4:	b289      	uxth	r1, r1
 80117b6:	3001      	adds	r0, #1
 80117b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80117bc:	4285      	cmp	r5, r0
 80117be:	f84c 1b04 	str.w	r1, [ip], #4
 80117c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80117c6:	dcec      	bgt.n	80117a2 <__multadd+0x12>
 80117c8:	b30e      	cbz	r6, 801180e <__multadd+0x7e>
 80117ca:	68a3      	ldr	r3, [r4, #8]
 80117cc:	42ab      	cmp	r3, r5
 80117ce:	dc19      	bgt.n	8011804 <__multadd+0x74>
 80117d0:	6861      	ldr	r1, [r4, #4]
 80117d2:	4638      	mov	r0, r7
 80117d4:	3101      	adds	r1, #1
 80117d6:	f7ff ff79 	bl	80116cc <_Balloc>
 80117da:	4680      	mov	r8, r0
 80117dc:	b928      	cbnz	r0, 80117ea <__multadd+0x5a>
 80117de:	4602      	mov	r2, r0
 80117e0:	4b0c      	ldr	r3, [pc, #48]	@ (8011814 <__multadd+0x84>)
 80117e2:	480d      	ldr	r0, [pc, #52]	@ (8011818 <__multadd+0x88>)
 80117e4:	21ba      	movs	r1, #186	@ 0xba
 80117e6:	f7ff f86d 	bl	80108c4 <__assert_func>
 80117ea:	6922      	ldr	r2, [r4, #16]
 80117ec:	3202      	adds	r2, #2
 80117ee:	f104 010c 	add.w	r1, r4, #12
 80117f2:	0092      	lsls	r2, r2, #2
 80117f4:	300c      	adds	r0, #12
 80117f6:	f7ff f856 	bl	80108a6 <memcpy>
 80117fa:	4621      	mov	r1, r4
 80117fc:	4638      	mov	r0, r7
 80117fe:	f7ff ffa5 	bl	801174c <_Bfree>
 8011802:	4644      	mov	r4, r8
 8011804:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011808:	3501      	adds	r5, #1
 801180a:	615e      	str	r6, [r3, #20]
 801180c:	6125      	str	r5, [r4, #16]
 801180e:	4620      	mov	r0, r4
 8011810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011814:	08012a2b 	.word	0x08012a2b
 8011818:	08012a3c 	.word	0x08012a3c

0801181c <__hi0bits>:
 801181c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011820:	4603      	mov	r3, r0
 8011822:	bf36      	itet	cc
 8011824:	0403      	lslcc	r3, r0, #16
 8011826:	2000      	movcs	r0, #0
 8011828:	2010      	movcc	r0, #16
 801182a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801182e:	bf3c      	itt	cc
 8011830:	021b      	lslcc	r3, r3, #8
 8011832:	3008      	addcc	r0, #8
 8011834:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011838:	bf3c      	itt	cc
 801183a:	011b      	lslcc	r3, r3, #4
 801183c:	3004      	addcc	r0, #4
 801183e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011842:	bf3c      	itt	cc
 8011844:	009b      	lslcc	r3, r3, #2
 8011846:	3002      	addcc	r0, #2
 8011848:	2b00      	cmp	r3, #0
 801184a:	db05      	blt.n	8011858 <__hi0bits+0x3c>
 801184c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8011850:	f100 0001 	add.w	r0, r0, #1
 8011854:	bf08      	it	eq
 8011856:	2020      	moveq	r0, #32
 8011858:	4770      	bx	lr

0801185a <__lo0bits>:
 801185a:	6803      	ldr	r3, [r0, #0]
 801185c:	4602      	mov	r2, r0
 801185e:	f013 0007 	ands.w	r0, r3, #7
 8011862:	d00b      	beq.n	801187c <__lo0bits+0x22>
 8011864:	07d9      	lsls	r1, r3, #31
 8011866:	d421      	bmi.n	80118ac <__lo0bits+0x52>
 8011868:	0798      	lsls	r0, r3, #30
 801186a:	bf49      	itett	mi
 801186c:	085b      	lsrmi	r3, r3, #1
 801186e:	089b      	lsrpl	r3, r3, #2
 8011870:	2001      	movmi	r0, #1
 8011872:	6013      	strmi	r3, [r2, #0]
 8011874:	bf5c      	itt	pl
 8011876:	6013      	strpl	r3, [r2, #0]
 8011878:	2002      	movpl	r0, #2
 801187a:	4770      	bx	lr
 801187c:	b299      	uxth	r1, r3
 801187e:	b909      	cbnz	r1, 8011884 <__lo0bits+0x2a>
 8011880:	0c1b      	lsrs	r3, r3, #16
 8011882:	2010      	movs	r0, #16
 8011884:	b2d9      	uxtb	r1, r3
 8011886:	b909      	cbnz	r1, 801188c <__lo0bits+0x32>
 8011888:	3008      	adds	r0, #8
 801188a:	0a1b      	lsrs	r3, r3, #8
 801188c:	0719      	lsls	r1, r3, #28
 801188e:	bf04      	itt	eq
 8011890:	091b      	lsreq	r3, r3, #4
 8011892:	3004      	addeq	r0, #4
 8011894:	0799      	lsls	r1, r3, #30
 8011896:	bf04      	itt	eq
 8011898:	089b      	lsreq	r3, r3, #2
 801189a:	3002      	addeq	r0, #2
 801189c:	07d9      	lsls	r1, r3, #31
 801189e:	d403      	bmi.n	80118a8 <__lo0bits+0x4e>
 80118a0:	085b      	lsrs	r3, r3, #1
 80118a2:	f100 0001 	add.w	r0, r0, #1
 80118a6:	d003      	beq.n	80118b0 <__lo0bits+0x56>
 80118a8:	6013      	str	r3, [r2, #0]
 80118aa:	4770      	bx	lr
 80118ac:	2000      	movs	r0, #0
 80118ae:	4770      	bx	lr
 80118b0:	2020      	movs	r0, #32
 80118b2:	4770      	bx	lr

080118b4 <__i2b>:
 80118b4:	b510      	push	{r4, lr}
 80118b6:	460c      	mov	r4, r1
 80118b8:	2101      	movs	r1, #1
 80118ba:	f7ff ff07 	bl	80116cc <_Balloc>
 80118be:	4602      	mov	r2, r0
 80118c0:	b928      	cbnz	r0, 80118ce <__i2b+0x1a>
 80118c2:	4b05      	ldr	r3, [pc, #20]	@ (80118d8 <__i2b+0x24>)
 80118c4:	4805      	ldr	r0, [pc, #20]	@ (80118dc <__i2b+0x28>)
 80118c6:	f240 1145 	movw	r1, #325	@ 0x145
 80118ca:	f7fe fffb 	bl	80108c4 <__assert_func>
 80118ce:	2301      	movs	r3, #1
 80118d0:	6144      	str	r4, [r0, #20]
 80118d2:	6103      	str	r3, [r0, #16]
 80118d4:	bd10      	pop	{r4, pc}
 80118d6:	bf00      	nop
 80118d8:	08012a2b 	.word	0x08012a2b
 80118dc:	08012a3c 	.word	0x08012a3c

080118e0 <__multiply>:
 80118e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118e4:	4617      	mov	r7, r2
 80118e6:	690a      	ldr	r2, [r1, #16]
 80118e8:	693b      	ldr	r3, [r7, #16]
 80118ea:	429a      	cmp	r2, r3
 80118ec:	bfa8      	it	ge
 80118ee:	463b      	movge	r3, r7
 80118f0:	4689      	mov	r9, r1
 80118f2:	bfa4      	itt	ge
 80118f4:	460f      	movge	r7, r1
 80118f6:	4699      	movge	r9, r3
 80118f8:	693d      	ldr	r5, [r7, #16]
 80118fa:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80118fe:	68bb      	ldr	r3, [r7, #8]
 8011900:	6879      	ldr	r1, [r7, #4]
 8011902:	eb05 060a 	add.w	r6, r5, sl
 8011906:	42b3      	cmp	r3, r6
 8011908:	b085      	sub	sp, #20
 801190a:	bfb8      	it	lt
 801190c:	3101      	addlt	r1, #1
 801190e:	f7ff fedd 	bl	80116cc <_Balloc>
 8011912:	b930      	cbnz	r0, 8011922 <__multiply+0x42>
 8011914:	4602      	mov	r2, r0
 8011916:	4b41      	ldr	r3, [pc, #260]	@ (8011a1c <__multiply+0x13c>)
 8011918:	4841      	ldr	r0, [pc, #260]	@ (8011a20 <__multiply+0x140>)
 801191a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801191e:	f7fe ffd1 	bl	80108c4 <__assert_func>
 8011922:	f100 0414 	add.w	r4, r0, #20
 8011926:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 801192a:	4623      	mov	r3, r4
 801192c:	2200      	movs	r2, #0
 801192e:	4573      	cmp	r3, lr
 8011930:	d320      	bcc.n	8011974 <__multiply+0x94>
 8011932:	f107 0814 	add.w	r8, r7, #20
 8011936:	f109 0114 	add.w	r1, r9, #20
 801193a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801193e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8011942:	9302      	str	r3, [sp, #8]
 8011944:	1beb      	subs	r3, r5, r7
 8011946:	3b15      	subs	r3, #21
 8011948:	f023 0303 	bic.w	r3, r3, #3
 801194c:	3304      	adds	r3, #4
 801194e:	3715      	adds	r7, #21
 8011950:	42bd      	cmp	r5, r7
 8011952:	bf38      	it	cc
 8011954:	2304      	movcc	r3, #4
 8011956:	9301      	str	r3, [sp, #4]
 8011958:	9b02      	ldr	r3, [sp, #8]
 801195a:	9103      	str	r1, [sp, #12]
 801195c:	428b      	cmp	r3, r1
 801195e:	d80c      	bhi.n	801197a <__multiply+0x9a>
 8011960:	2e00      	cmp	r6, #0
 8011962:	dd03      	ble.n	801196c <__multiply+0x8c>
 8011964:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8011968:	2b00      	cmp	r3, #0
 801196a:	d055      	beq.n	8011a18 <__multiply+0x138>
 801196c:	6106      	str	r6, [r0, #16]
 801196e:	b005      	add	sp, #20
 8011970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011974:	f843 2b04 	str.w	r2, [r3], #4
 8011978:	e7d9      	b.n	801192e <__multiply+0x4e>
 801197a:	f8b1 a000 	ldrh.w	sl, [r1]
 801197e:	f1ba 0f00 	cmp.w	sl, #0
 8011982:	d01f      	beq.n	80119c4 <__multiply+0xe4>
 8011984:	46c4      	mov	ip, r8
 8011986:	46a1      	mov	r9, r4
 8011988:	2700      	movs	r7, #0
 801198a:	f85c 2b04 	ldr.w	r2, [ip], #4
 801198e:	f8d9 3000 	ldr.w	r3, [r9]
 8011992:	fa1f fb82 	uxth.w	fp, r2
 8011996:	b29b      	uxth	r3, r3
 8011998:	fb0a 330b 	mla	r3, sl, fp, r3
 801199c:	443b      	add	r3, r7
 801199e:	f8d9 7000 	ldr.w	r7, [r9]
 80119a2:	0c12      	lsrs	r2, r2, #16
 80119a4:	0c3f      	lsrs	r7, r7, #16
 80119a6:	fb0a 7202 	mla	r2, sl, r2, r7
 80119aa:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80119ae:	b29b      	uxth	r3, r3
 80119b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80119b4:	4565      	cmp	r5, ip
 80119b6:	f849 3b04 	str.w	r3, [r9], #4
 80119ba:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80119be:	d8e4      	bhi.n	801198a <__multiply+0xaa>
 80119c0:	9b01      	ldr	r3, [sp, #4]
 80119c2:	50e7      	str	r7, [r4, r3]
 80119c4:	9b03      	ldr	r3, [sp, #12]
 80119c6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80119ca:	3104      	adds	r1, #4
 80119cc:	f1b9 0f00 	cmp.w	r9, #0
 80119d0:	d020      	beq.n	8011a14 <__multiply+0x134>
 80119d2:	6823      	ldr	r3, [r4, #0]
 80119d4:	4647      	mov	r7, r8
 80119d6:	46a4      	mov	ip, r4
 80119d8:	f04f 0a00 	mov.w	sl, #0
 80119dc:	f8b7 b000 	ldrh.w	fp, [r7]
 80119e0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80119e4:	fb09 220b 	mla	r2, r9, fp, r2
 80119e8:	4452      	add	r2, sl
 80119ea:	b29b      	uxth	r3, r3
 80119ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80119f0:	f84c 3b04 	str.w	r3, [ip], #4
 80119f4:	f857 3b04 	ldr.w	r3, [r7], #4
 80119f8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80119fc:	f8bc 3000 	ldrh.w	r3, [ip]
 8011a00:	fb09 330a 	mla	r3, r9, sl, r3
 8011a04:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8011a08:	42bd      	cmp	r5, r7
 8011a0a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011a0e:	d8e5      	bhi.n	80119dc <__multiply+0xfc>
 8011a10:	9a01      	ldr	r2, [sp, #4]
 8011a12:	50a3      	str	r3, [r4, r2]
 8011a14:	3404      	adds	r4, #4
 8011a16:	e79f      	b.n	8011958 <__multiply+0x78>
 8011a18:	3e01      	subs	r6, #1
 8011a1a:	e7a1      	b.n	8011960 <__multiply+0x80>
 8011a1c:	08012a2b 	.word	0x08012a2b
 8011a20:	08012a3c 	.word	0x08012a3c

08011a24 <__pow5mult>:
 8011a24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a28:	4615      	mov	r5, r2
 8011a2a:	f012 0203 	ands.w	r2, r2, #3
 8011a2e:	4607      	mov	r7, r0
 8011a30:	460e      	mov	r6, r1
 8011a32:	d007      	beq.n	8011a44 <__pow5mult+0x20>
 8011a34:	4c25      	ldr	r4, [pc, #148]	@ (8011acc <__pow5mult+0xa8>)
 8011a36:	3a01      	subs	r2, #1
 8011a38:	2300      	movs	r3, #0
 8011a3a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011a3e:	f7ff fea7 	bl	8011790 <__multadd>
 8011a42:	4606      	mov	r6, r0
 8011a44:	10ad      	asrs	r5, r5, #2
 8011a46:	d03d      	beq.n	8011ac4 <__pow5mult+0xa0>
 8011a48:	69fc      	ldr	r4, [r7, #28]
 8011a4a:	b97c      	cbnz	r4, 8011a6c <__pow5mult+0x48>
 8011a4c:	2010      	movs	r0, #16
 8011a4e:	f7ff fd87 	bl	8011560 <malloc>
 8011a52:	4602      	mov	r2, r0
 8011a54:	61f8      	str	r0, [r7, #28]
 8011a56:	b928      	cbnz	r0, 8011a64 <__pow5mult+0x40>
 8011a58:	4b1d      	ldr	r3, [pc, #116]	@ (8011ad0 <__pow5mult+0xac>)
 8011a5a:	481e      	ldr	r0, [pc, #120]	@ (8011ad4 <__pow5mult+0xb0>)
 8011a5c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8011a60:	f7fe ff30 	bl	80108c4 <__assert_func>
 8011a64:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011a68:	6004      	str	r4, [r0, #0]
 8011a6a:	60c4      	str	r4, [r0, #12]
 8011a6c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011a70:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011a74:	b94c      	cbnz	r4, 8011a8a <__pow5mult+0x66>
 8011a76:	f240 2171 	movw	r1, #625	@ 0x271
 8011a7a:	4638      	mov	r0, r7
 8011a7c:	f7ff ff1a 	bl	80118b4 <__i2b>
 8011a80:	2300      	movs	r3, #0
 8011a82:	f8c8 0008 	str.w	r0, [r8, #8]
 8011a86:	4604      	mov	r4, r0
 8011a88:	6003      	str	r3, [r0, #0]
 8011a8a:	f04f 0900 	mov.w	r9, #0
 8011a8e:	07eb      	lsls	r3, r5, #31
 8011a90:	d50a      	bpl.n	8011aa8 <__pow5mult+0x84>
 8011a92:	4631      	mov	r1, r6
 8011a94:	4622      	mov	r2, r4
 8011a96:	4638      	mov	r0, r7
 8011a98:	f7ff ff22 	bl	80118e0 <__multiply>
 8011a9c:	4631      	mov	r1, r6
 8011a9e:	4680      	mov	r8, r0
 8011aa0:	4638      	mov	r0, r7
 8011aa2:	f7ff fe53 	bl	801174c <_Bfree>
 8011aa6:	4646      	mov	r6, r8
 8011aa8:	106d      	asrs	r5, r5, #1
 8011aaa:	d00b      	beq.n	8011ac4 <__pow5mult+0xa0>
 8011aac:	6820      	ldr	r0, [r4, #0]
 8011aae:	b938      	cbnz	r0, 8011ac0 <__pow5mult+0x9c>
 8011ab0:	4622      	mov	r2, r4
 8011ab2:	4621      	mov	r1, r4
 8011ab4:	4638      	mov	r0, r7
 8011ab6:	f7ff ff13 	bl	80118e0 <__multiply>
 8011aba:	6020      	str	r0, [r4, #0]
 8011abc:	f8c0 9000 	str.w	r9, [r0]
 8011ac0:	4604      	mov	r4, r0
 8011ac2:	e7e4      	b.n	8011a8e <__pow5mult+0x6a>
 8011ac4:	4630      	mov	r0, r6
 8011ac6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011aca:	bf00      	nop
 8011acc:	08012ab0 	.word	0x08012ab0
 8011ad0:	08012919 	.word	0x08012919
 8011ad4:	08012a3c 	.word	0x08012a3c

08011ad8 <__lshift>:
 8011ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011adc:	460c      	mov	r4, r1
 8011ade:	6849      	ldr	r1, [r1, #4]
 8011ae0:	6923      	ldr	r3, [r4, #16]
 8011ae2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011ae6:	68a3      	ldr	r3, [r4, #8]
 8011ae8:	4607      	mov	r7, r0
 8011aea:	4691      	mov	r9, r2
 8011aec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011af0:	f108 0601 	add.w	r6, r8, #1
 8011af4:	42b3      	cmp	r3, r6
 8011af6:	db0b      	blt.n	8011b10 <__lshift+0x38>
 8011af8:	4638      	mov	r0, r7
 8011afa:	f7ff fde7 	bl	80116cc <_Balloc>
 8011afe:	4605      	mov	r5, r0
 8011b00:	b948      	cbnz	r0, 8011b16 <__lshift+0x3e>
 8011b02:	4602      	mov	r2, r0
 8011b04:	4b28      	ldr	r3, [pc, #160]	@ (8011ba8 <__lshift+0xd0>)
 8011b06:	4829      	ldr	r0, [pc, #164]	@ (8011bac <__lshift+0xd4>)
 8011b08:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011b0c:	f7fe feda 	bl	80108c4 <__assert_func>
 8011b10:	3101      	adds	r1, #1
 8011b12:	005b      	lsls	r3, r3, #1
 8011b14:	e7ee      	b.n	8011af4 <__lshift+0x1c>
 8011b16:	2300      	movs	r3, #0
 8011b18:	f100 0114 	add.w	r1, r0, #20
 8011b1c:	f100 0210 	add.w	r2, r0, #16
 8011b20:	4618      	mov	r0, r3
 8011b22:	4553      	cmp	r3, sl
 8011b24:	db33      	blt.n	8011b8e <__lshift+0xb6>
 8011b26:	6920      	ldr	r0, [r4, #16]
 8011b28:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011b2c:	f104 0314 	add.w	r3, r4, #20
 8011b30:	f019 091f 	ands.w	r9, r9, #31
 8011b34:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011b38:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011b3c:	d02b      	beq.n	8011b96 <__lshift+0xbe>
 8011b3e:	f1c9 0e20 	rsb	lr, r9, #32
 8011b42:	468a      	mov	sl, r1
 8011b44:	2200      	movs	r2, #0
 8011b46:	6818      	ldr	r0, [r3, #0]
 8011b48:	fa00 f009 	lsl.w	r0, r0, r9
 8011b4c:	4310      	orrs	r0, r2
 8011b4e:	f84a 0b04 	str.w	r0, [sl], #4
 8011b52:	f853 2b04 	ldr.w	r2, [r3], #4
 8011b56:	459c      	cmp	ip, r3
 8011b58:	fa22 f20e 	lsr.w	r2, r2, lr
 8011b5c:	d8f3      	bhi.n	8011b46 <__lshift+0x6e>
 8011b5e:	ebac 0304 	sub.w	r3, ip, r4
 8011b62:	3b15      	subs	r3, #21
 8011b64:	f023 0303 	bic.w	r3, r3, #3
 8011b68:	3304      	adds	r3, #4
 8011b6a:	f104 0015 	add.w	r0, r4, #21
 8011b6e:	4560      	cmp	r0, ip
 8011b70:	bf88      	it	hi
 8011b72:	2304      	movhi	r3, #4
 8011b74:	50ca      	str	r2, [r1, r3]
 8011b76:	b10a      	cbz	r2, 8011b7c <__lshift+0xa4>
 8011b78:	f108 0602 	add.w	r6, r8, #2
 8011b7c:	3e01      	subs	r6, #1
 8011b7e:	4638      	mov	r0, r7
 8011b80:	612e      	str	r6, [r5, #16]
 8011b82:	4621      	mov	r1, r4
 8011b84:	f7ff fde2 	bl	801174c <_Bfree>
 8011b88:	4628      	mov	r0, r5
 8011b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b8e:	f842 0f04 	str.w	r0, [r2, #4]!
 8011b92:	3301      	adds	r3, #1
 8011b94:	e7c5      	b.n	8011b22 <__lshift+0x4a>
 8011b96:	3904      	subs	r1, #4
 8011b98:	f853 2b04 	ldr.w	r2, [r3], #4
 8011b9c:	f841 2f04 	str.w	r2, [r1, #4]!
 8011ba0:	459c      	cmp	ip, r3
 8011ba2:	d8f9      	bhi.n	8011b98 <__lshift+0xc0>
 8011ba4:	e7ea      	b.n	8011b7c <__lshift+0xa4>
 8011ba6:	bf00      	nop
 8011ba8:	08012a2b 	.word	0x08012a2b
 8011bac:	08012a3c 	.word	0x08012a3c

08011bb0 <__mcmp>:
 8011bb0:	690a      	ldr	r2, [r1, #16]
 8011bb2:	4603      	mov	r3, r0
 8011bb4:	6900      	ldr	r0, [r0, #16]
 8011bb6:	1a80      	subs	r0, r0, r2
 8011bb8:	b530      	push	{r4, r5, lr}
 8011bba:	d10e      	bne.n	8011bda <__mcmp+0x2a>
 8011bbc:	3314      	adds	r3, #20
 8011bbe:	3114      	adds	r1, #20
 8011bc0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011bc4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011bc8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011bcc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011bd0:	4295      	cmp	r5, r2
 8011bd2:	d003      	beq.n	8011bdc <__mcmp+0x2c>
 8011bd4:	d205      	bcs.n	8011be2 <__mcmp+0x32>
 8011bd6:	f04f 30ff 	mov.w	r0, #4294967295
 8011bda:	bd30      	pop	{r4, r5, pc}
 8011bdc:	42a3      	cmp	r3, r4
 8011bde:	d3f3      	bcc.n	8011bc8 <__mcmp+0x18>
 8011be0:	e7fb      	b.n	8011bda <__mcmp+0x2a>
 8011be2:	2001      	movs	r0, #1
 8011be4:	e7f9      	b.n	8011bda <__mcmp+0x2a>
	...

08011be8 <__mdiff>:
 8011be8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bec:	4689      	mov	r9, r1
 8011bee:	4606      	mov	r6, r0
 8011bf0:	4611      	mov	r1, r2
 8011bf2:	4648      	mov	r0, r9
 8011bf4:	4614      	mov	r4, r2
 8011bf6:	f7ff ffdb 	bl	8011bb0 <__mcmp>
 8011bfa:	1e05      	subs	r5, r0, #0
 8011bfc:	d112      	bne.n	8011c24 <__mdiff+0x3c>
 8011bfe:	4629      	mov	r1, r5
 8011c00:	4630      	mov	r0, r6
 8011c02:	f7ff fd63 	bl	80116cc <_Balloc>
 8011c06:	4602      	mov	r2, r0
 8011c08:	b928      	cbnz	r0, 8011c16 <__mdiff+0x2e>
 8011c0a:	4b3f      	ldr	r3, [pc, #252]	@ (8011d08 <__mdiff+0x120>)
 8011c0c:	f240 2137 	movw	r1, #567	@ 0x237
 8011c10:	483e      	ldr	r0, [pc, #248]	@ (8011d0c <__mdiff+0x124>)
 8011c12:	f7fe fe57 	bl	80108c4 <__assert_func>
 8011c16:	2301      	movs	r3, #1
 8011c18:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011c1c:	4610      	mov	r0, r2
 8011c1e:	b003      	add	sp, #12
 8011c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c24:	bfbc      	itt	lt
 8011c26:	464b      	movlt	r3, r9
 8011c28:	46a1      	movlt	r9, r4
 8011c2a:	4630      	mov	r0, r6
 8011c2c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011c30:	bfba      	itte	lt
 8011c32:	461c      	movlt	r4, r3
 8011c34:	2501      	movlt	r5, #1
 8011c36:	2500      	movge	r5, #0
 8011c38:	f7ff fd48 	bl	80116cc <_Balloc>
 8011c3c:	4602      	mov	r2, r0
 8011c3e:	b918      	cbnz	r0, 8011c48 <__mdiff+0x60>
 8011c40:	4b31      	ldr	r3, [pc, #196]	@ (8011d08 <__mdiff+0x120>)
 8011c42:	f240 2145 	movw	r1, #581	@ 0x245
 8011c46:	e7e3      	b.n	8011c10 <__mdiff+0x28>
 8011c48:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011c4c:	6926      	ldr	r6, [r4, #16]
 8011c4e:	60c5      	str	r5, [r0, #12]
 8011c50:	f109 0310 	add.w	r3, r9, #16
 8011c54:	f109 0514 	add.w	r5, r9, #20
 8011c58:	f104 0e14 	add.w	lr, r4, #20
 8011c5c:	f100 0b14 	add.w	fp, r0, #20
 8011c60:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011c64:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011c68:	9301      	str	r3, [sp, #4]
 8011c6a:	46d9      	mov	r9, fp
 8011c6c:	f04f 0c00 	mov.w	ip, #0
 8011c70:	9b01      	ldr	r3, [sp, #4]
 8011c72:	f85e 0b04 	ldr.w	r0, [lr], #4
 8011c76:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011c7a:	9301      	str	r3, [sp, #4]
 8011c7c:	fa1f f38a 	uxth.w	r3, sl
 8011c80:	4619      	mov	r1, r3
 8011c82:	b283      	uxth	r3, r0
 8011c84:	1acb      	subs	r3, r1, r3
 8011c86:	0c00      	lsrs	r0, r0, #16
 8011c88:	4463      	add	r3, ip
 8011c8a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8011c8e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8011c92:	b29b      	uxth	r3, r3
 8011c94:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011c98:	4576      	cmp	r6, lr
 8011c9a:	f849 3b04 	str.w	r3, [r9], #4
 8011c9e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011ca2:	d8e5      	bhi.n	8011c70 <__mdiff+0x88>
 8011ca4:	1b33      	subs	r3, r6, r4
 8011ca6:	3b15      	subs	r3, #21
 8011ca8:	f023 0303 	bic.w	r3, r3, #3
 8011cac:	3415      	adds	r4, #21
 8011cae:	3304      	adds	r3, #4
 8011cb0:	42a6      	cmp	r6, r4
 8011cb2:	bf38      	it	cc
 8011cb4:	2304      	movcc	r3, #4
 8011cb6:	441d      	add	r5, r3
 8011cb8:	445b      	add	r3, fp
 8011cba:	461e      	mov	r6, r3
 8011cbc:	462c      	mov	r4, r5
 8011cbe:	4544      	cmp	r4, r8
 8011cc0:	d30e      	bcc.n	8011ce0 <__mdiff+0xf8>
 8011cc2:	f108 0103 	add.w	r1, r8, #3
 8011cc6:	1b49      	subs	r1, r1, r5
 8011cc8:	f021 0103 	bic.w	r1, r1, #3
 8011ccc:	3d03      	subs	r5, #3
 8011cce:	45a8      	cmp	r8, r5
 8011cd0:	bf38      	it	cc
 8011cd2:	2100      	movcc	r1, #0
 8011cd4:	440b      	add	r3, r1
 8011cd6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011cda:	b191      	cbz	r1, 8011d02 <__mdiff+0x11a>
 8011cdc:	6117      	str	r7, [r2, #16]
 8011cde:	e79d      	b.n	8011c1c <__mdiff+0x34>
 8011ce0:	f854 1b04 	ldr.w	r1, [r4], #4
 8011ce4:	46e6      	mov	lr, ip
 8011ce6:	0c08      	lsrs	r0, r1, #16
 8011ce8:	fa1c fc81 	uxtah	ip, ip, r1
 8011cec:	4471      	add	r1, lr
 8011cee:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8011cf2:	b289      	uxth	r1, r1
 8011cf4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011cf8:	f846 1b04 	str.w	r1, [r6], #4
 8011cfc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011d00:	e7dd      	b.n	8011cbe <__mdiff+0xd6>
 8011d02:	3f01      	subs	r7, #1
 8011d04:	e7e7      	b.n	8011cd6 <__mdiff+0xee>
 8011d06:	bf00      	nop
 8011d08:	08012a2b 	.word	0x08012a2b
 8011d0c:	08012a3c 	.word	0x08012a3c

08011d10 <__d2b>:
 8011d10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011d14:	460f      	mov	r7, r1
 8011d16:	2101      	movs	r1, #1
 8011d18:	ec59 8b10 	vmov	r8, r9, d0
 8011d1c:	4616      	mov	r6, r2
 8011d1e:	f7ff fcd5 	bl	80116cc <_Balloc>
 8011d22:	4604      	mov	r4, r0
 8011d24:	b930      	cbnz	r0, 8011d34 <__d2b+0x24>
 8011d26:	4602      	mov	r2, r0
 8011d28:	4b23      	ldr	r3, [pc, #140]	@ (8011db8 <__d2b+0xa8>)
 8011d2a:	4824      	ldr	r0, [pc, #144]	@ (8011dbc <__d2b+0xac>)
 8011d2c:	f240 310f 	movw	r1, #783	@ 0x30f
 8011d30:	f7fe fdc8 	bl	80108c4 <__assert_func>
 8011d34:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011d38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011d3c:	b10d      	cbz	r5, 8011d42 <__d2b+0x32>
 8011d3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011d42:	9301      	str	r3, [sp, #4]
 8011d44:	f1b8 0300 	subs.w	r3, r8, #0
 8011d48:	d023      	beq.n	8011d92 <__d2b+0x82>
 8011d4a:	4668      	mov	r0, sp
 8011d4c:	9300      	str	r3, [sp, #0]
 8011d4e:	f7ff fd84 	bl	801185a <__lo0bits>
 8011d52:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011d56:	b1d0      	cbz	r0, 8011d8e <__d2b+0x7e>
 8011d58:	f1c0 0320 	rsb	r3, r0, #32
 8011d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8011d60:	430b      	orrs	r3, r1
 8011d62:	40c2      	lsrs	r2, r0
 8011d64:	6163      	str	r3, [r4, #20]
 8011d66:	9201      	str	r2, [sp, #4]
 8011d68:	9b01      	ldr	r3, [sp, #4]
 8011d6a:	61a3      	str	r3, [r4, #24]
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	bf0c      	ite	eq
 8011d70:	2201      	moveq	r2, #1
 8011d72:	2202      	movne	r2, #2
 8011d74:	6122      	str	r2, [r4, #16]
 8011d76:	b1a5      	cbz	r5, 8011da2 <__d2b+0x92>
 8011d78:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011d7c:	4405      	add	r5, r0
 8011d7e:	603d      	str	r5, [r7, #0]
 8011d80:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011d84:	6030      	str	r0, [r6, #0]
 8011d86:	4620      	mov	r0, r4
 8011d88:	b003      	add	sp, #12
 8011d8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011d8e:	6161      	str	r1, [r4, #20]
 8011d90:	e7ea      	b.n	8011d68 <__d2b+0x58>
 8011d92:	a801      	add	r0, sp, #4
 8011d94:	f7ff fd61 	bl	801185a <__lo0bits>
 8011d98:	9b01      	ldr	r3, [sp, #4]
 8011d9a:	6163      	str	r3, [r4, #20]
 8011d9c:	3020      	adds	r0, #32
 8011d9e:	2201      	movs	r2, #1
 8011da0:	e7e8      	b.n	8011d74 <__d2b+0x64>
 8011da2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011da6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011daa:	6038      	str	r0, [r7, #0]
 8011dac:	6918      	ldr	r0, [r3, #16]
 8011dae:	f7ff fd35 	bl	801181c <__hi0bits>
 8011db2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011db6:	e7e5      	b.n	8011d84 <__d2b+0x74>
 8011db8:	08012a2b 	.word	0x08012a2b
 8011dbc:	08012a3c 	.word	0x08012a3c

08011dc0 <__ssputs_r>:
 8011dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011dc4:	688e      	ldr	r6, [r1, #8]
 8011dc6:	461f      	mov	r7, r3
 8011dc8:	42be      	cmp	r6, r7
 8011dca:	680b      	ldr	r3, [r1, #0]
 8011dcc:	4682      	mov	sl, r0
 8011dce:	460c      	mov	r4, r1
 8011dd0:	4690      	mov	r8, r2
 8011dd2:	d82d      	bhi.n	8011e30 <__ssputs_r+0x70>
 8011dd4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011dd8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011ddc:	d026      	beq.n	8011e2c <__ssputs_r+0x6c>
 8011dde:	6965      	ldr	r5, [r4, #20]
 8011de0:	6909      	ldr	r1, [r1, #16]
 8011de2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011de6:	eba3 0901 	sub.w	r9, r3, r1
 8011dea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011dee:	1c7b      	adds	r3, r7, #1
 8011df0:	444b      	add	r3, r9
 8011df2:	106d      	asrs	r5, r5, #1
 8011df4:	429d      	cmp	r5, r3
 8011df6:	bf38      	it	cc
 8011df8:	461d      	movcc	r5, r3
 8011dfa:	0553      	lsls	r3, r2, #21
 8011dfc:	d527      	bpl.n	8011e4e <__ssputs_r+0x8e>
 8011dfe:	4629      	mov	r1, r5
 8011e00:	f7ff fbd8 	bl	80115b4 <_malloc_r>
 8011e04:	4606      	mov	r6, r0
 8011e06:	b360      	cbz	r0, 8011e62 <__ssputs_r+0xa2>
 8011e08:	6921      	ldr	r1, [r4, #16]
 8011e0a:	464a      	mov	r2, r9
 8011e0c:	f7fe fd4b 	bl	80108a6 <memcpy>
 8011e10:	89a3      	ldrh	r3, [r4, #12]
 8011e12:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011e16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011e1a:	81a3      	strh	r3, [r4, #12]
 8011e1c:	6126      	str	r6, [r4, #16]
 8011e1e:	6165      	str	r5, [r4, #20]
 8011e20:	444e      	add	r6, r9
 8011e22:	eba5 0509 	sub.w	r5, r5, r9
 8011e26:	6026      	str	r6, [r4, #0]
 8011e28:	60a5      	str	r5, [r4, #8]
 8011e2a:	463e      	mov	r6, r7
 8011e2c:	42be      	cmp	r6, r7
 8011e2e:	d900      	bls.n	8011e32 <__ssputs_r+0x72>
 8011e30:	463e      	mov	r6, r7
 8011e32:	6820      	ldr	r0, [r4, #0]
 8011e34:	4632      	mov	r2, r6
 8011e36:	4641      	mov	r1, r8
 8011e38:	f000 fb7c 	bl	8012534 <memmove>
 8011e3c:	68a3      	ldr	r3, [r4, #8]
 8011e3e:	1b9b      	subs	r3, r3, r6
 8011e40:	60a3      	str	r3, [r4, #8]
 8011e42:	6823      	ldr	r3, [r4, #0]
 8011e44:	4433      	add	r3, r6
 8011e46:	6023      	str	r3, [r4, #0]
 8011e48:	2000      	movs	r0, #0
 8011e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e4e:	462a      	mov	r2, r5
 8011e50:	f000 fbe9 	bl	8012626 <_realloc_r>
 8011e54:	4606      	mov	r6, r0
 8011e56:	2800      	cmp	r0, #0
 8011e58:	d1e0      	bne.n	8011e1c <__ssputs_r+0x5c>
 8011e5a:	6921      	ldr	r1, [r4, #16]
 8011e5c:	4650      	mov	r0, sl
 8011e5e:	f7ff fb35 	bl	80114cc <_free_r>
 8011e62:	230c      	movs	r3, #12
 8011e64:	f8ca 3000 	str.w	r3, [sl]
 8011e68:	89a3      	ldrh	r3, [r4, #12]
 8011e6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011e6e:	81a3      	strh	r3, [r4, #12]
 8011e70:	f04f 30ff 	mov.w	r0, #4294967295
 8011e74:	e7e9      	b.n	8011e4a <__ssputs_r+0x8a>
	...

08011e78 <_svfiprintf_r>:
 8011e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e7c:	4698      	mov	r8, r3
 8011e7e:	898b      	ldrh	r3, [r1, #12]
 8011e80:	061b      	lsls	r3, r3, #24
 8011e82:	b09d      	sub	sp, #116	@ 0x74
 8011e84:	4607      	mov	r7, r0
 8011e86:	460d      	mov	r5, r1
 8011e88:	4614      	mov	r4, r2
 8011e8a:	d510      	bpl.n	8011eae <_svfiprintf_r+0x36>
 8011e8c:	690b      	ldr	r3, [r1, #16]
 8011e8e:	b973      	cbnz	r3, 8011eae <_svfiprintf_r+0x36>
 8011e90:	2140      	movs	r1, #64	@ 0x40
 8011e92:	f7ff fb8f 	bl	80115b4 <_malloc_r>
 8011e96:	6028      	str	r0, [r5, #0]
 8011e98:	6128      	str	r0, [r5, #16]
 8011e9a:	b930      	cbnz	r0, 8011eaa <_svfiprintf_r+0x32>
 8011e9c:	230c      	movs	r3, #12
 8011e9e:	603b      	str	r3, [r7, #0]
 8011ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8011ea4:	b01d      	add	sp, #116	@ 0x74
 8011ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011eaa:	2340      	movs	r3, #64	@ 0x40
 8011eac:	616b      	str	r3, [r5, #20]
 8011eae:	2300      	movs	r3, #0
 8011eb0:	9309      	str	r3, [sp, #36]	@ 0x24
 8011eb2:	2320      	movs	r3, #32
 8011eb4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011eb8:	f8cd 800c 	str.w	r8, [sp, #12]
 8011ebc:	2330      	movs	r3, #48	@ 0x30
 8011ebe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801205c <_svfiprintf_r+0x1e4>
 8011ec2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011ec6:	f04f 0901 	mov.w	r9, #1
 8011eca:	4623      	mov	r3, r4
 8011ecc:	469a      	mov	sl, r3
 8011ece:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011ed2:	b10a      	cbz	r2, 8011ed8 <_svfiprintf_r+0x60>
 8011ed4:	2a25      	cmp	r2, #37	@ 0x25
 8011ed6:	d1f9      	bne.n	8011ecc <_svfiprintf_r+0x54>
 8011ed8:	ebba 0b04 	subs.w	fp, sl, r4
 8011edc:	d00b      	beq.n	8011ef6 <_svfiprintf_r+0x7e>
 8011ede:	465b      	mov	r3, fp
 8011ee0:	4622      	mov	r2, r4
 8011ee2:	4629      	mov	r1, r5
 8011ee4:	4638      	mov	r0, r7
 8011ee6:	f7ff ff6b 	bl	8011dc0 <__ssputs_r>
 8011eea:	3001      	adds	r0, #1
 8011eec:	f000 80a7 	beq.w	801203e <_svfiprintf_r+0x1c6>
 8011ef0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011ef2:	445a      	add	r2, fp
 8011ef4:	9209      	str	r2, [sp, #36]	@ 0x24
 8011ef6:	f89a 3000 	ldrb.w	r3, [sl]
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	f000 809f 	beq.w	801203e <_svfiprintf_r+0x1c6>
 8011f00:	2300      	movs	r3, #0
 8011f02:	f04f 32ff 	mov.w	r2, #4294967295
 8011f06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011f0a:	f10a 0a01 	add.w	sl, sl, #1
 8011f0e:	9304      	str	r3, [sp, #16]
 8011f10:	9307      	str	r3, [sp, #28]
 8011f12:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011f16:	931a      	str	r3, [sp, #104]	@ 0x68
 8011f18:	4654      	mov	r4, sl
 8011f1a:	2205      	movs	r2, #5
 8011f1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f20:	484e      	ldr	r0, [pc, #312]	@ (801205c <_svfiprintf_r+0x1e4>)
 8011f22:	f7ee f9ed 	bl	8000300 <memchr>
 8011f26:	9a04      	ldr	r2, [sp, #16]
 8011f28:	b9d8      	cbnz	r0, 8011f62 <_svfiprintf_r+0xea>
 8011f2a:	06d0      	lsls	r0, r2, #27
 8011f2c:	bf44      	itt	mi
 8011f2e:	2320      	movmi	r3, #32
 8011f30:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011f34:	0711      	lsls	r1, r2, #28
 8011f36:	bf44      	itt	mi
 8011f38:	232b      	movmi	r3, #43	@ 0x2b
 8011f3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011f3e:	f89a 3000 	ldrb.w	r3, [sl]
 8011f42:	2b2a      	cmp	r3, #42	@ 0x2a
 8011f44:	d015      	beq.n	8011f72 <_svfiprintf_r+0xfa>
 8011f46:	9a07      	ldr	r2, [sp, #28]
 8011f48:	4654      	mov	r4, sl
 8011f4a:	2000      	movs	r0, #0
 8011f4c:	f04f 0c0a 	mov.w	ip, #10
 8011f50:	4621      	mov	r1, r4
 8011f52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011f56:	3b30      	subs	r3, #48	@ 0x30
 8011f58:	2b09      	cmp	r3, #9
 8011f5a:	d94b      	bls.n	8011ff4 <_svfiprintf_r+0x17c>
 8011f5c:	b1b0      	cbz	r0, 8011f8c <_svfiprintf_r+0x114>
 8011f5e:	9207      	str	r2, [sp, #28]
 8011f60:	e014      	b.n	8011f8c <_svfiprintf_r+0x114>
 8011f62:	eba0 0308 	sub.w	r3, r0, r8
 8011f66:	fa09 f303 	lsl.w	r3, r9, r3
 8011f6a:	4313      	orrs	r3, r2
 8011f6c:	9304      	str	r3, [sp, #16]
 8011f6e:	46a2      	mov	sl, r4
 8011f70:	e7d2      	b.n	8011f18 <_svfiprintf_r+0xa0>
 8011f72:	9b03      	ldr	r3, [sp, #12]
 8011f74:	1d19      	adds	r1, r3, #4
 8011f76:	681b      	ldr	r3, [r3, #0]
 8011f78:	9103      	str	r1, [sp, #12]
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	bfbb      	ittet	lt
 8011f7e:	425b      	neglt	r3, r3
 8011f80:	f042 0202 	orrlt.w	r2, r2, #2
 8011f84:	9307      	strge	r3, [sp, #28]
 8011f86:	9307      	strlt	r3, [sp, #28]
 8011f88:	bfb8      	it	lt
 8011f8a:	9204      	strlt	r2, [sp, #16]
 8011f8c:	7823      	ldrb	r3, [r4, #0]
 8011f8e:	2b2e      	cmp	r3, #46	@ 0x2e
 8011f90:	d10a      	bne.n	8011fa8 <_svfiprintf_r+0x130>
 8011f92:	7863      	ldrb	r3, [r4, #1]
 8011f94:	2b2a      	cmp	r3, #42	@ 0x2a
 8011f96:	d132      	bne.n	8011ffe <_svfiprintf_r+0x186>
 8011f98:	9b03      	ldr	r3, [sp, #12]
 8011f9a:	1d1a      	adds	r2, r3, #4
 8011f9c:	681b      	ldr	r3, [r3, #0]
 8011f9e:	9203      	str	r2, [sp, #12]
 8011fa0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011fa4:	3402      	adds	r4, #2
 8011fa6:	9305      	str	r3, [sp, #20]
 8011fa8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801206c <_svfiprintf_r+0x1f4>
 8011fac:	7821      	ldrb	r1, [r4, #0]
 8011fae:	2203      	movs	r2, #3
 8011fb0:	4650      	mov	r0, sl
 8011fb2:	f7ee f9a5 	bl	8000300 <memchr>
 8011fb6:	b138      	cbz	r0, 8011fc8 <_svfiprintf_r+0x150>
 8011fb8:	9b04      	ldr	r3, [sp, #16]
 8011fba:	eba0 000a 	sub.w	r0, r0, sl
 8011fbe:	2240      	movs	r2, #64	@ 0x40
 8011fc0:	4082      	lsls	r2, r0
 8011fc2:	4313      	orrs	r3, r2
 8011fc4:	3401      	adds	r4, #1
 8011fc6:	9304      	str	r3, [sp, #16]
 8011fc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011fcc:	4824      	ldr	r0, [pc, #144]	@ (8012060 <_svfiprintf_r+0x1e8>)
 8011fce:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011fd2:	2206      	movs	r2, #6
 8011fd4:	f7ee f994 	bl	8000300 <memchr>
 8011fd8:	2800      	cmp	r0, #0
 8011fda:	d036      	beq.n	801204a <_svfiprintf_r+0x1d2>
 8011fdc:	4b21      	ldr	r3, [pc, #132]	@ (8012064 <_svfiprintf_r+0x1ec>)
 8011fde:	bb1b      	cbnz	r3, 8012028 <_svfiprintf_r+0x1b0>
 8011fe0:	9b03      	ldr	r3, [sp, #12]
 8011fe2:	3307      	adds	r3, #7
 8011fe4:	f023 0307 	bic.w	r3, r3, #7
 8011fe8:	3308      	adds	r3, #8
 8011fea:	9303      	str	r3, [sp, #12]
 8011fec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011fee:	4433      	add	r3, r6
 8011ff0:	9309      	str	r3, [sp, #36]	@ 0x24
 8011ff2:	e76a      	b.n	8011eca <_svfiprintf_r+0x52>
 8011ff4:	fb0c 3202 	mla	r2, ip, r2, r3
 8011ff8:	460c      	mov	r4, r1
 8011ffa:	2001      	movs	r0, #1
 8011ffc:	e7a8      	b.n	8011f50 <_svfiprintf_r+0xd8>
 8011ffe:	2300      	movs	r3, #0
 8012000:	3401      	adds	r4, #1
 8012002:	9305      	str	r3, [sp, #20]
 8012004:	4619      	mov	r1, r3
 8012006:	f04f 0c0a 	mov.w	ip, #10
 801200a:	4620      	mov	r0, r4
 801200c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012010:	3a30      	subs	r2, #48	@ 0x30
 8012012:	2a09      	cmp	r2, #9
 8012014:	d903      	bls.n	801201e <_svfiprintf_r+0x1a6>
 8012016:	2b00      	cmp	r3, #0
 8012018:	d0c6      	beq.n	8011fa8 <_svfiprintf_r+0x130>
 801201a:	9105      	str	r1, [sp, #20]
 801201c:	e7c4      	b.n	8011fa8 <_svfiprintf_r+0x130>
 801201e:	fb0c 2101 	mla	r1, ip, r1, r2
 8012022:	4604      	mov	r4, r0
 8012024:	2301      	movs	r3, #1
 8012026:	e7f0      	b.n	801200a <_svfiprintf_r+0x192>
 8012028:	ab03      	add	r3, sp, #12
 801202a:	9300      	str	r3, [sp, #0]
 801202c:	462a      	mov	r2, r5
 801202e:	4b0e      	ldr	r3, [pc, #56]	@ (8012068 <_svfiprintf_r+0x1f0>)
 8012030:	a904      	add	r1, sp, #16
 8012032:	4638      	mov	r0, r7
 8012034:	f7fd fdd8 	bl	800fbe8 <_printf_float>
 8012038:	1c42      	adds	r2, r0, #1
 801203a:	4606      	mov	r6, r0
 801203c:	d1d6      	bne.n	8011fec <_svfiprintf_r+0x174>
 801203e:	89ab      	ldrh	r3, [r5, #12]
 8012040:	065b      	lsls	r3, r3, #25
 8012042:	f53f af2d 	bmi.w	8011ea0 <_svfiprintf_r+0x28>
 8012046:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012048:	e72c      	b.n	8011ea4 <_svfiprintf_r+0x2c>
 801204a:	ab03      	add	r3, sp, #12
 801204c:	9300      	str	r3, [sp, #0]
 801204e:	462a      	mov	r2, r5
 8012050:	4b05      	ldr	r3, [pc, #20]	@ (8012068 <_svfiprintf_r+0x1f0>)
 8012052:	a904      	add	r1, sp, #16
 8012054:	4638      	mov	r0, r7
 8012056:	f7fe f84f 	bl	80100f8 <_printf_i>
 801205a:	e7ed      	b.n	8012038 <_svfiprintf_r+0x1c0>
 801205c:	08012a95 	.word	0x08012a95
 8012060:	08012a9f 	.word	0x08012a9f
 8012064:	0800fbe9 	.word	0x0800fbe9
 8012068:	08011dc1 	.word	0x08011dc1
 801206c:	08012a9b 	.word	0x08012a9b

08012070 <__sfputc_r>:
 8012070:	6893      	ldr	r3, [r2, #8]
 8012072:	3b01      	subs	r3, #1
 8012074:	2b00      	cmp	r3, #0
 8012076:	b410      	push	{r4}
 8012078:	6093      	str	r3, [r2, #8]
 801207a:	da08      	bge.n	801208e <__sfputc_r+0x1e>
 801207c:	6994      	ldr	r4, [r2, #24]
 801207e:	42a3      	cmp	r3, r4
 8012080:	db01      	blt.n	8012086 <__sfputc_r+0x16>
 8012082:	290a      	cmp	r1, #10
 8012084:	d103      	bne.n	801208e <__sfputc_r+0x1e>
 8012086:	f85d 4b04 	ldr.w	r4, [sp], #4
 801208a:	f7fe ba8c 	b.w	80105a6 <__swbuf_r>
 801208e:	6813      	ldr	r3, [r2, #0]
 8012090:	1c58      	adds	r0, r3, #1
 8012092:	6010      	str	r0, [r2, #0]
 8012094:	7019      	strb	r1, [r3, #0]
 8012096:	4608      	mov	r0, r1
 8012098:	f85d 4b04 	ldr.w	r4, [sp], #4
 801209c:	4770      	bx	lr

0801209e <__sfputs_r>:
 801209e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120a0:	4606      	mov	r6, r0
 80120a2:	460f      	mov	r7, r1
 80120a4:	4614      	mov	r4, r2
 80120a6:	18d5      	adds	r5, r2, r3
 80120a8:	42ac      	cmp	r4, r5
 80120aa:	d101      	bne.n	80120b0 <__sfputs_r+0x12>
 80120ac:	2000      	movs	r0, #0
 80120ae:	e007      	b.n	80120c0 <__sfputs_r+0x22>
 80120b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80120b4:	463a      	mov	r2, r7
 80120b6:	4630      	mov	r0, r6
 80120b8:	f7ff ffda 	bl	8012070 <__sfputc_r>
 80120bc:	1c43      	adds	r3, r0, #1
 80120be:	d1f3      	bne.n	80120a8 <__sfputs_r+0xa>
 80120c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080120c4 <_vfiprintf_r>:
 80120c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120c8:	460d      	mov	r5, r1
 80120ca:	b09d      	sub	sp, #116	@ 0x74
 80120cc:	4614      	mov	r4, r2
 80120ce:	4698      	mov	r8, r3
 80120d0:	4606      	mov	r6, r0
 80120d2:	b118      	cbz	r0, 80120dc <_vfiprintf_r+0x18>
 80120d4:	6a03      	ldr	r3, [r0, #32]
 80120d6:	b90b      	cbnz	r3, 80120dc <_vfiprintf_r+0x18>
 80120d8:	f7fe f9b8 	bl	801044c <__sinit>
 80120dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80120de:	07d9      	lsls	r1, r3, #31
 80120e0:	d405      	bmi.n	80120ee <_vfiprintf_r+0x2a>
 80120e2:	89ab      	ldrh	r3, [r5, #12]
 80120e4:	059a      	lsls	r2, r3, #22
 80120e6:	d402      	bmi.n	80120ee <_vfiprintf_r+0x2a>
 80120e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80120ea:	f7fe fbda 	bl	80108a2 <__retarget_lock_acquire_recursive>
 80120ee:	89ab      	ldrh	r3, [r5, #12]
 80120f0:	071b      	lsls	r3, r3, #28
 80120f2:	d501      	bpl.n	80120f8 <_vfiprintf_r+0x34>
 80120f4:	692b      	ldr	r3, [r5, #16]
 80120f6:	b99b      	cbnz	r3, 8012120 <_vfiprintf_r+0x5c>
 80120f8:	4629      	mov	r1, r5
 80120fa:	4630      	mov	r0, r6
 80120fc:	f7fe fa92 	bl	8010624 <__swsetup_r>
 8012100:	b170      	cbz	r0, 8012120 <_vfiprintf_r+0x5c>
 8012102:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012104:	07dc      	lsls	r4, r3, #31
 8012106:	d504      	bpl.n	8012112 <_vfiprintf_r+0x4e>
 8012108:	f04f 30ff 	mov.w	r0, #4294967295
 801210c:	b01d      	add	sp, #116	@ 0x74
 801210e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012112:	89ab      	ldrh	r3, [r5, #12]
 8012114:	0598      	lsls	r0, r3, #22
 8012116:	d4f7      	bmi.n	8012108 <_vfiprintf_r+0x44>
 8012118:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801211a:	f7fe fbc3 	bl	80108a4 <__retarget_lock_release_recursive>
 801211e:	e7f3      	b.n	8012108 <_vfiprintf_r+0x44>
 8012120:	2300      	movs	r3, #0
 8012122:	9309      	str	r3, [sp, #36]	@ 0x24
 8012124:	2320      	movs	r3, #32
 8012126:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801212a:	f8cd 800c 	str.w	r8, [sp, #12]
 801212e:	2330      	movs	r3, #48	@ 0x30
 8012130:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80122e0 <_vfiprintf_r+0x21c>
 8012134:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012138:	f04f 0901 	mov.w	r9, #1
 801213c:	4623      	mov	r3, r4
 801213e:	469a      	mov	sl, r3
 8012140:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012144:	b10a      	cbz	r2, 801214a <_vfiprintf_r+0x86>
 8012146:	2a25      	cmp	r2, #37	@ 0x25
 8012148:	d1f9      	bne.n	801213e <_vfiprintf_r+0x7a>
 801214a:	ebba 0b04 	subs.w	fp, sl, r4
 801214e:	d00b      	beq.n	8012168 <_vfiprintf_r+0xa4>
 8012150:	465b      	mov	r3, fp
 8012152:	4622      	mov	r2, r4
 8012154:	4629      	mov	r1, r5
 8012156:	4630      	mov	r0, r6
 8012158:	f7ff ffa1 	bl	801209e <__sfputs_r>
 801215c:	3001      	adds	r0, #1
 801215e:	f000 80a7 	beq.w	80122b0 <_vfiprintf_r+0x1ec>
 8012162:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012164:	445a      	add	r2, fp
 8012166:	9209      	str	r2, [sp, #36]	@ 0x24
 8012168:	f89a 3000 	ldrb.w	r3, [sl]
 801216c:	2b00      	cmp	r3, #0
 801216e:	f000 809f 	beq.w	80122b0 <_vfiprintf_r+0x1ec>
 8012172:	2300      	movs	r3, #0
 8012174:	f04f 32ff 	mov.w	r2, #4294967295
 8012178:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801217c:	f10a 0a01 	add.w	sl, sl, #1
 8012180:	9304      	str	r3, [sp, #16]
 8012182:	9307      	str	r3, [sp, #28]
 8012184:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012188:	931a      	str	r3, [sp, #104]	@ 0x68
 801218a:	4654      	mov	r4, sl
 801218c:	2205      	movs	r2, #5
 801218e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012192:	4853      	ldr	r0, [pc, #332]	@ (80122e0 <_vfiprintf_r+0x21c>)
 8012194:	f7ee f8b4 	bl	8000300 <memchr>
 8012198:	9a04      	ldr	r2, [sp, #16]
 801219a:	b9d8      	cbnz	r0, 80121d4 <_vfiprintf_r+0x110>
 801219c:	06d1      	lsls	r1, r2, #27
 801219e:	bf44      	itt	mi
 80121a0:	2320      	movmi	r3, #32
 80121a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80121a6:	0713      	lsls	r3, r2, #28
 80121a8:	bf44      	itt	mi
 80121aa:	232b      	movmi	r3, #43	@ 0x2b
 80121ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80121b0:	f89a 3000 	ldrb.w	r3, [sl]
 80121b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80121b6:	d015      	beq.n	80121e4 <_vfiprintf_r+0x120>
 80121b8:	9a07      	ldr	r2, [sp, #28]
 80121ba:	4654      	mov	r4, sl
 80121bc:	2000      	movs	r0, #0
 80121be:	f04f 0c0a 	mov.w	ip, #10
 80121c2:	4621      	mov	r1, r4
 80121c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80121c8:	3b30      	subs	r3, #48	@ 0x30
 80121ca:	2b09      	cmp	r3, #9
 80121cc:	d94b      	bls.n	8012266 <_vfiprintf_r+0x1a2>
 80121ce:	b1b0      	cbz	r0, 80121fe <_vfiprintf_r+0x13a>
 80121d0:	9207      	str	r2, [sp, #28]
 80121d2:	e014      	b.n	80121fe <_vfiprintf_r+0x13a>
 80121d4:	eba0 0308 	sub.w	r3, r0, r8
 80121d8:	fa09 f303 	lsl.w	r3, r9, r3
 80121dc:	4313      	orrs	r3, r2
 80121de:	9304      	str	r3, [sp, #16]
 80121e0:	46a2      	mov	sl, r4
 80121e2:	e7d2      	b.n	801218a <_vfiprintf_r+0xc6>
 80121e4:	9b03      	ldr	r3, [sp, #12]
 80121e6:	1d19      	adds	r1, r3, #4
 80121e8:	681b      	ldr	r3, [r3, #0]
 80121ea:	9103      	str	r1, [sp, #12]
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	bfbb      	ittet	lt
 80121f0:	425b      	neglt	r3, r3
 80121f2:	f042 0202 	orrlt.w	r2, r2, #2
 80121f6:	9307      	strge	r3, [sp, #28]
 80121f8:	9307      	strlt	r3, [sp, #28]
 80121fa:	bfb8      	it	lt
 80121fc:	9204      	strlt	r2, [sp, #16]
 80121fe:	7823      	ldrb	r3, [r4, #0]
 8012200:	2b2e      	cmp	r3, #46	@ 0x2e
 8012202:	d10a      	bne.n	801221a <_vfiprintf_r+0x156>
 8012204:	7863      	ldrb	r3, [r4, #1]
 8012206:	2b2a      	cmp	r3, #42	@ 0x2a
 8012208:	d132      	bne.n	8012270 <_vfiprintf_r+0x1ac>
 801220a:	9b03      	ldr	r3, [sp, #12]
 801220c:	1d1a      	adds	r2, r3, #4
 801220e:	681b      	ldr	r3, [r3, #0]
 8012210:	9203      	str	r2, [sp, #12]
 8012212:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012216:	3402      	adds	r4, #2
 8012218:	9305      	str	r3, [sp, #20]
 801221a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80122f0 <_vfiprintf_r+0x22c>
 801221e:	7821      	ldrb	r1, [r4, #0]
 8012220:	2203      	movs	r2, #3
 8012222:	4650      	mov	r0, sl
 8012224:	f7ee f86c 	bl	8000300 <memchr>
 8012228:	b138      	cbz	r0, 801223a <_vfiprintf_r+0x176>
 801222a:	9b04      	ldr	r3, [sp, #16]
 801222c:	eba0 000a 	sub.w	r0, r0, sl
 8012230:	2240      	movs	r2, #64	@ 0x40
 8012232:	4082      	lsls	r2, r0
 8012234:	4313      	orrs	r3, r2
 8012236:	3401      	adds	r4, #1
 8012238:	9304      	str	r3, [sp, #16]
 801223a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801223e:	4829      	ldr	r0, [pc, #164]	@ (80122e4 <_vfiprintf_r+0x220>)
 8012240:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012244:	2206      	movs	r2, #6
 8012246:	f7ee f85b 	bl	8000300 <memchr>
 801224a:	2800      	cmp	r0, #0
 801224c:	d03f      	beq.n	80122ce <_vfiprintf_r+0x20a>
 801224e:	4b26      	ldr	r3, [pc, #152]	@ (80122e8 <_vfiprintf_r+0x224>)
 8012250:	bb1b      	cbnz	r3, 801229a <_vfiprintf_r+0x1d6>
 8012252:	9b03      	ldr	r3, [sp, #12]
 8012254:	3307      	adds	r3, #7
 8012256:	f023 0307 	bic.w	r3, r3, #7
 801225a:	3308      	adds	r3, #8
 801225c:	9303      	str	r3, [sp, #12]
 801225e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012260:	443b      	add	r3, r7
 8012262:	9309      	str	r3, [sp, #36]	@ 0x24
 8012264:	e76a      	b.n	801213c <_vfiprintf_r+0x78>
 8012266:	fb0c 3202 	mla	r2, ip, r2, r3
 801226a:	460c      	mov	r4, r1
 801226c:	2001      	movs	r0, #1
 801226e:	e7a8      	b.n	80121c2 <_vfiprintf_r+0xfe>
 8012270:	2300      	movs	r3, #0
 8012272:	3401      	adds	r4, #1
 8012274:	9305      	str	r3, [sp, #20]
 8012276:	4619      	mov	r1, r3
 8012278:	f04f 0c0a 	mov.w	ip, #10
 801227c:	4620      	mov	r0, r4
 801227e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012282:	3a30      	subs	r2, #48	@ 0x30
 8012284:	2a09      	cmp	r2, #9
 8012286:	d903      	bls.n	8012290 <_vfiprintf_r+0x1cc>
 8012288:	2b00      	cmp	r3, #0
 801228a:	d0c6      	beq.n	801221a <_vfiprintf_r+0x156>
 801228c:	9105      	str	r1, [sp, #20]
 801228e:	e7c4      	b.n	801221a <_vfiprintf_r+0x156>
 8012290:	fb0c 2101 	mla	r1, ip, r1, r2
 8012294:	4604      	mov	r4, r0
 8012296:	2301      	movs	r3, #1
 8012298:	e7f0      	b.n	801227c <_vfiprintf_r+0x1b8>
 801229a:	ab03      	add	r3, sp, #12
 801229c:	9300      	str	r3, [sp, #0]
 801229e:	462a      	mov	r2, r5
 80122a0:	4b12      	ldr	r3, [pc, #72]	@ (80122ec <_vfiprintf_r+0x228>)
 80122a2:	a904      	add	r1, sp, #16
 80122a4:	4630      	mov	r0, r6
 80122a6:	f7fd fc9f 	bl	800fbe8 <_printf_float>
 80122aa:	4607      	mov	r7, r0
 80122ac:	1c78      	adds	r0, r7, #1
 80122ae:	d1d6      	bne.n	801225e <_vfiprintf_r+0x19a>
 80122b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80122b2:	07d9      	lsls	r1, r3, #31
 80122b4:	d405      	bmi.n	80122c2 <_vfiprintf_r+0x1fe>
 80122b6:	89ab      	ldrh	r3, [r5, #12]
 80122b8:	059a      	lsls	r2, r3, #22
 80122ba:	d402      	bmi.n	80122c2 <_vfiprintf_r+0x1fe>
 80122bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80122be:	f7fe faf1 	bl	80108a4 <__retarget_lock_release_recursive>
 80122c2:	89ab      	ldrh	r3, [r5, #12]
 80122c4:	065b      	lsls	r3, r3, #25
 80122c6:	f53f af1f 	bmi.w	8012108 <_vfiprintf_r+0x44>
 80122ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80122cc:	e71e      	b.n	801210c <_vfiprintf_r+0x48>
 80122ce:	ab03      	add	r3, sp, #12
 80122d0:	9300      	str	r3, [sp, #0]
 80122d2:	462a      	mov	r2, r5
 80122d4:	4b05      	ldr	r3, [pc, #20]	@ (80122ec <_vfiprintf_r+0x228>)
 80122d6:	a904      	add	r1, sp, #16
 80122d8:	4630      	mov	r0, r6
 80122da:	f7fd ff0d 	bl	80100f8 <_printf_i>
 80122de:	e7e4      	b.n	80122aa <_vfiprintf_r+0x1e6>
 80122e0:	08012a95 	.word	0x08012a95
 80122e4:	08012a9f 	.word	0x08012a9f
 80122e8:	0800fbe9 	.word	0x0800fbe9
 80122ec:	0801209f 	.word	0x0801209f
 80122f0:	08012a9b 	.word	0x08012a9b

080122f4 <__sflush_r>:
 80122f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80122f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122fc:	0716      	lsls	r6, r2, #28
 80122fe:	4605      	mov	r5, r0
 8012300:	460c      	mov	r4, r1
 8012302:	d454      	bmi.n	80123ae <__sflush_r+0xba>
 8012304:	684b      	ldr	r3, [r1, #4]
 8012306:	2b00      	cmp	r3, #0
 8012308:	dc02      	bgt.n	8012310 <__sflush_r+0x1c>
 801230a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801230c:	2b00      	cmp	r3, #0
 801230e:	dd48      	ble.n	80123a2 <__sflush_r+0xae>
 8012310:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012312:	2e00      	cmp	r6, #0
 8012314:	d045      	beq.n	80123a2 <__sflush_r+0xae>
 8012316:	2300      	movs	r3, #0
 8012318:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801231c:	682f      	ldr	r7, [r5, #0]
 801231e:	6a21      	ldr	r1, [r4, #32]
 8012320:	602b      	str	r3, [r5, #0]
 8012322:	d030      	beq.n	8012386 <__sflush_r+0x92>
 8012324:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012326:	89a3      	ldrh	r3, [r4, #12]
 8012328:	0759      	lsls	r1, r3, #29
 801232a:	d505      	bpl.n	8012338 <__sflush_r+0x44>
 801232c:	6863      	ldr	r3, [r4, #4]
 801232e:	1ad2      	subs	r2, r2, r3
 8012330:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012332:	b10b      	cbz	r3, 8012338 <__sflush_r+0x44>
 8012334:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012336:	1ad2      	subs	r2, r2, r3
 8012338:	2300      	movs	r3, #0
 801233a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801233c:	6a21      	ldr	r1, [r4, #32]
 801233e:	4628      	mov	r0, r5
 8012340:	47b0      	blx	r6
 8012342:	1c43      	adds	r3, r0, #1
 8012344:	89a3      	ldrh	r3, [r4, #12]
 8012346:	d106      	bne.n	8012356 <__sflush_r+0x62>
 8012348:	6829      	ldr	r1, [r5, #0]
 801234a:	291d      	cmp	r1, #29
 801234c:	d82b      	bhi.n	80123a6 <__sflush_r+0xb2>
 801234e:	4a2a      	ldr	r2, [pc, #168]	@ (80123f8 <__sflush_r+0x104>)
 8012350:	40ca      	lsrs	r2, r1
 8012352:	07d6      	lsls	r6, r2, #31
 8012354:	d527      	bpl.n	80123a6 <__sflush_r+0xb2>
 8012356:	2200      	movs	r2, #0
 8012358:	6062      	str	r2, [r4, #4]
 801235a:	04d9      	lsls	r1, r3, #19
 801235c:	6922      	ldr	r2, [r4, #16]
 801235e:	6022      	str	r2, [r4, #0]
 8012360:	d504      	bpl.n	801236c <__sflush_r+0x78>
 8012362:	1c42      	adds	r2, r0, #1
 8012364:	d101      	bne.n	801236a <__sflush_r+0x76>
 8012366:	682b      	ldr	r3, [r5, #0]
 8012368:	b903      	cbnz	r3, 801236c <__sflush_r+0x78>
 801236a:	6560      	str	r0, [r4, #84]	@ 0x54
 801236c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801236e:	602f      	str	r7, [r5, #0]
 8012370:	b1b9      	cbz	r1, 80123a2 <__sflush_r+0xae>
 8012372:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012376:	4299      	cmp	r1, r3
 8012378:	d002      	beq.n	8012380 <__sflush_r+0x8c>
 801237a:	4628      	mov	r0, r5
 801237c:	f7ff f8a6 	bl	80114cc <_free_r>
 8012380:	2300      	movs	r3, #0
 8012382:	6363      	str	r3, [r4, #52]	@ 0x34
 8012384:	e00d      	b.n	80123a2 <__sflush_r+0xae>
 8012386:	2301      	movs	r3, #1
 8012388:	4628      	mov	r0, r5
 801238a:	47b0      	blx	r6
 801238c:	4602      	mov	r2, r0
 801238e:	1c50      	adds	r0, r2, #1
 8012390:	d1c9      	bne.n	8012326 <__sflush_r+0x32>
 8012392:	682b      	ldr	r3, [r5, #0]
 8012394:	2b00      	cmp	r3, #0
 8012396:	d0c6      	beq.n	8012326 <__sflush_r+0x32>
 8012398:	2b1d      	cmp	r3, #29
 801239a:	d001      	beq.n	80123a0 <__sflush_r+0xac>
 801239c:	2b16      	cmp	r3, #22
 801239e:	d11e      	bne.n	80123de <__sflush_r+0xea>
 80123a0:	602f      	str	r7, [r5, #0]
 80123a2:	2000      	movs	r0, #0
 80123a4:	e022      	b.n	80123ec <__sflush_r+0xf8>
 80123a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80123aa:	b21b      	sxth	r3, r3
 80123ac:	e01b      	b.n	80123e6 <__sflush_r+0xf2>
 80123ae:	690f      	ldr	r7, [r1, #16]
 80123b0:	2f00      	cmp	r7, #0
 80123b2:	d0f6      	beq.n	80123a2 <__sflush_r+0xae>
 80123b4:	0793      	lsls	r3, r2, #30
 80123b6:	680e      	ldr	r6, [r1, #0]
 80123b8:	bf08      	it	eq
 80123ba:	694b      	ldreq	r3, [r1, #20]
 80123bc:	600f      	str	r7, [r1, #0]
 80123be:	bf18      	it	ne
 80123c0:	2300      	movne	r3, #0
 80123c2:	eba6 0807 	sub.w	r8, r6, r7
 80123c6:	608b      	str	r3, [r1, #8]
 80123c8:	f1b8 0f00 	cmp.w	r8, #0
 80123cc:	dde9      	ble.n	80123a2 <__sflush_r+0xae>
 80123ce:	6a21      	ldr	r1, [r4, #32]
 80123d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80123d2:	4643      	mov	r3, r8
 80123d4:	463a      	mov	r2, r7
 80123d6:	4628      	mov	r0, r5
 80123d8:	47b0      	blx	r6
 80123da:	2800      	cmp	r0, #0
 80123dc:	dc08      	bgt.n	80123f0 <__sflush_r+0xfc>
 80123de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80123e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80123e6:	81a3      	strh	r3, [r4, #12]
 80123e8:	f04f 30ff 	mov.w	r0, #4294967295
 80123ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123f0:	4407      	add	r7, r0
 80123f2:	eba8 0800 	sub.w	r8, r8, r0
 80123f6:	e7e7      	b.n	80123c8 <__sflush_r+0xd4>
 80123f8:	20400001 	.word	0x20400001

080123fc <_fflush_r>:
 80123fc:	b538      	push	{r3, r4, r5, lr}
 80123fe:	690b      	ldr	r3, [r1, #16]
 8012400:	4605      	mov	r5, r0
 8012402:	460c      	mov	r4, r1
 8012404:	b913      	cbnz	r3, 801240c <_fflush_r+0x10>
 8012406:	2500      	movs	r5, #0
 8012408:	4628      	mov	r0, r5
 801240a:	bd38      	pop	{r3, r4, r5, pc}
 801240c:	b118      	cbz	r0, 8012416 <_fflush_r+0x1a>
 801240e:	6a03      	ldr	r3, [r0, #32]
 8012410:	b90b      	cbnz	r3, 8012416 <_fflush_r+0x1a>
 8012412:	f7fe f81b 	bl	801044c <__sinit>
 8012416:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801241a:	2b00      	cmp	r3, #0
 801241c:	d0f3      	beq.n	8012406 <_fflush_r+0xa>
 801241e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012420:	07d0      	lsls	r0, r2, #31
 8012422:	d404      	bmi.n	801242e <_fflush_r+0x32>
 8012424:	0599      	lsls	r1, r3, #22
 8012426:	d402      	bmi.n	801242e <_fflush_r+0x32>
 8012428:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801242a:	f7fe fa3a 	bl	80108a2 <__retarget_lock_acquire_recursive>
 801242e:	4628      	mov	r0, r5
 8012430:	4621      	mov	r1, r4
 8012432:	f7ff ff5f 	bl	80122f4 <__sflush_r>
 8012436:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012438:	07da      	lsls	r2, r3, #31
 801243a:	4605      	mov	r5, r0
 801243c:	d4e4      	bmi.n	8012408 <_fflush_r+0xc>
 801243e:	89a3      	ldrh	r3, [r4, #12]
 8012440:	059b      	lsls	r3, r3, #22
 8012442:	d4e1      	bmi.n	8012408 <_fflush_r+0xc>
 8012444:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012446:	f7fe fa2d 	bl	80108a4 <__retarget_lock_release_recursive>
 801244a:	e7dd      	b.n	8012408 <_fflush_r+0xc>

0801244c <fiprintf>:
 801244c:	b40e      	push	{r1, r2, r3}
 801244e:	b503      	push	{r0, r1, lr}
 8012450:	4601      	mov	r1, r0
 8012452:	ab03      	add	r3, sp, #12
 8012454:	4805      	ldr	r0, [pc, #20]	@ (801246c <fiprintf+0x20>)
 8012456:	f853 2b04 	ldr.w	r2, [r3], #4
 801245a:	6800      	ldr	r0, [r0, #0]
 801245c:	9301      	str	r3, [sp, #4]
 801245e:	f7ff fe31 	bl	80120c4 <_vfiprintf_r>
 8012462:	b002      	add	sp, #8
 8012464:	f85d eb04 	ldr.w	lr, [sp], #4
 8012468:	b003      	add	sp, #12
 801246a:	4770      	bx	lr
 801246c:	24000038 	.word	0x24000038

08012470 <__swhatbuf_r>:
 8012470:	b570      	push	{r4, r5, r6, lr}
 8012472:	460c      	mov	r4, r1
 8012474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012478:	2900      	cmp	r1, #0
 801247a:	b096      	sub	sp, #88	@ 0x58
 801247c:	4615      	mov	r5, r2
 801247e:	461e      	mov	r6, r3
 8012480:	da0d      	bge.n	801249e <__swhatbuf_r+0x2e>
 8012482:	89a3      	ldrh	r3, [r4, #12]
 8012484:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012488:	f04f 0100 	mov.w	r1, #0
 801248c:	bf14      	ite	ne
 801248e:	2340      	movne	r3, #64	@ 0x40
 8012490:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012494:	2000      	movs	r0, #0
 8012496:	6031      	str	r1, [r6, #0]
 8012498:	602b      	str	r3, [r5, #0]
 801249a:	b016      	add	sp, #88	@ 0x58
 801249c:	bd70      	pop	{r4, r5, r6, pc}
 801249e:	466a      	mov	r2, sp
 80124a0:	f000 f862 	bl	8012568 <_fstat_r>
 80124a4:	2800      	cmp	r0, #0
 80124a6:	dbec      	blt.n	8012482 <__swhatbuf_r+0x12>
 80124a8:	9901      	ldr	r1, [sp, #4]
 80124aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80124ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80124b2:	4259      	negs	r1, r3
 80124b4:	4159      	adcs	r1, r3
 80124b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80124ba:	e7eb      	b.n	8012494 <__swhatbuf_r+0x24>

080124bc <__smakebuf_r>:
 80124bc:	898b      	ldrh	r3, [r1, #12]
 80124be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80124c0:	079d      	lsls	r5, r3, #30
 80124c2:	4606      	mov	r6, r0
 80124c4:	460c      	mov	r4, r1
 80124c6:	d507      	bpl.n	80124d8 <__smakebuf_r+0x1c>
 80124c8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80124cc:	6023      	str	r3, [r4, #0]
 80124ce:	6123      	str	r3, [r4, #16]
 80124d0:	2301      	movs	r3, #1
 80124d2:	6163      	str	r3, [r4, #20]
 80124d4:	b003      	add	sp, #12
 80124d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80124d8:	ab01      	add	r3, sp, #4
 80124da:	466a      	mov	r2, sp
 80124dc:	f7ff ffc8 	bl	8012470 <__swhatbuf_r>
 80124e0:	9f00      	ldr	r7, [sp, #0]
 80124e2:	4605      	mov	r5, r0
 80124e4:	4639      	mov	r1, r7
 80124e6:	4630      	mov	r0, r6
 80124e8:	f7ff f864 	bl	80115b4 <_malloc_r>
 80124ec:	b948      	cbnz	r0, 8012502 <__smakebuf_r+0x46>
 80124ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80124f2:	059a      	lsls	r2, r3, #22
 80124f4:	d4ee      	bmi.n	80124d4 <__smakebuf_r+0x18>
 80124f6:	f023 0303 	bic.w	r3, r3, #3
 80124fa:	f043 0302 	orr.w	r3, r3, #2
 80124fe:	81a3      	strh	r3, [r4, #12]
 8012500:	e7e2      	b.n	80124c8 <__smakebuf_r+0xc>
 8012502:	89a3      	ldrh	r3, [r4, #12]
 8012504:	6020      	str	r0, [r4, #0]
 8012506:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801250a:	81a3      	strh	r3, [r4, #12]
 801250c:	9b01      	ldr	r3, [sp, #4]
 801250e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012512:	b15b      	cbz	r3, 801252c <__smakebuf_r+0x70>
 8012514:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012518:	4630      	mov	r0, r6
 801251a:	f000 f837 	bl	801258c <_isatty_r>
 801251e:	b128      	cbz	r0, 801252c <__smakebuf_r+0x70>
 8012520:	89a3      	ldrh	r3, [r4, #12]
 8012522:	f023 0303 	bic.w	r3, r3, #3
 8012526:	f043 0301 	orr.w	r3, r3, #1
 801252a:	81a3      	strh	r3, [r4, #12]
 801252c:	89a3      	ldrh	r3, [r4, #12]
 801252e:	431d      	orrs	r5, r3
 8012530:	81a5      	strh	r5, [r4, #12]
 8012532:	e7cf      	b.n	80124d4 <__smakebuf_r+0x18>

08012534 <memmove>:
 8012534:	4288      	cmp	r0, r1
 8012536:	b510      	push	{r4, lr}
 8012538:	eb01 0402 	add.w	r4, r1, r2
 801253c:	d902      	bls.n	8012544 <memmove+0x10>
 801253e:	4284      	cmp	r4, r0
 8012540:	4623      	mov	r3, r4
 8012542:	d807      	bhi.n	8012554 <memmove+0x20>
 8012544:	1e43      	subs	r3, r0, #1
 8012546:	42a1      	cmp	r1, r4
 8012548:	d008      	beq.n	801255c <memmove+0x28>
 801254a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801254e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012552:	e7f8      	b.n	8012546 <memmove+0x12>
 8012554:	4402      	add	r2, r0
 8012556:	4601      	mov	r1, r0
 8012558:	428a      	cmp	r2, r1
 801255a:	d100      	bne.n	801255e <memmove+0x2a>
 801255c:	bd10      	pop	{r4, pc}
 801255e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012562:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012566:	e7f7      	b.n	8012558 <memmove+0x24>

08012568 <_fstat_r>:
 8012568:	b538      	push	{r3, r4, r5, lr}
 801256a:	4d07      	ldr	r5, [pc, #28]	@ (8012588 <_fstat_r+0x20>)
 801256c:	2300      	movs	r3, #0
 801256e:	4604      	mov	r4, r0
 8012570:	4608      	mov	r0, r1
 8012572:	4611      	mov	r1, r2
 8012574:	602b      	str	r3, [r5, #0]
 8012576:	f7ef fba1 	bl	8001cbc <_fstat>
 801257a:	1c43      	adds	r3, r0, #1
 801257c:	d102      	bne.n	8012584 <_fstat_r+0x1c>
 801257e:	682b      	ldr	r3, [r5, #0]
 8012580:	b103      	cbz	r3, 8012584 <_fstat_r+0x1c>
 8012582:	6023      	str	r3, [r4, #0]
 8012584:	bd38      	pop	{r3, r4, r5, pc}
 8012586:	bf00      	nop
 8012588:	240007f4 	.word	0x240007f4

0801258c <_isatty_r>:
 801258c:	b538      	push	{r3, r4, r5, lr}
 801258e:	4d06      	ldr	r5, [pc, #24]	@ (80125a8 <_isatty_r+0x1c>)
 8012590:	2300      	movs	r3, #0
 8012592:	4604      	mov	r4, r0
 8012594:	4608      	mov	r0, r1
 8012596:	602b      	str	r3, [r5, #0]
 8012598:	f7ef fba0 	bl	8001cdc <_isatty>
 801259c:	1c43      	adds	r3, r0, #1
 801259e:	d102      	bne.n	80125a6 <_isatty_r+0x1a>
 80125a0:	682b      	ldr	r3, [r5, #0]
 80125a2:	b103      	cbz	r3, 80125a6 <_isatty_r+0x1a>
 80125a4:	6023      	str	r3, [r4, #0]
 80125a6:	bd38      	pop	{r3, r4, r5, pc}
 80125a8:	240007f4 	.word	0x240007f4

080125ac <_sbrk_r>:
 80125ac:	b538      	push	{r3, r4, r5, lr}
 80125ae:	4d06      	ldr	r5, [pc, #24]	@ (80125c8 <_sbrk_r+0x1c>)
 80125b0:	2300      	movs	r3, #0
 80125b2:	4604      	mov	r4, r0
 80125b4:	4608      	mov	r0, r1
 80125b6:	602b      	str	r3, [r5, #0]
 80125b8:	f7ef fba8 	bl	8001d0c <_sbrk>
 80125bc:	1c43      	adds	r3, r0, #1
 80125be:	d102      	bne.n	80125c6 <_sbrk_r+0x1a>
 80125c0:	682b      	ldr	r3, [r5, #0]
 80125c2:	b103      	cbz	r3, 80125c6 <_sbrk_r+0x1a>
 80125c4:	6023      	str	r3, [r4, #0]
 80125c6:	bd38      	pop	{r3, r4, r5, pc}
 80125c8:	240007f4 	.word	0x240007f4

080125cc <abort>:
 80125cc:	b508      	push	{r3, lr}
 80125ce:	2006      	movs	r0, #6
 80125d0:	f000 f88c 	bl	80126ec <raise>
 80125d4:	2001      	movs	r0, #1
 80125d6:	f7ef fb21 	bl	8001c1c <_exit>

080125da <_calloc_r>:
 80125da:	b570      	push	{r4, r5, r6, lr}
 80125dc:	fba1 5402 	umull	r5, r4, r1, r2
 80125e0:	b934      	cbnz	r4, 80125f0 <_calloc_r+0x16>
 80125e2:	4629      	mov	r1, r5
 80125e4:	f7fe ffe6 	bl	80115b4 <_malloc_r>
 80125e8:	4606      	mov	r6, r0
 80125ea:	b928      	cbnz	r0, 80125f8 <_calloc_r+0x1e>
 80125ec:	4630      	mov	r0, r6
 80125ee:	bd70      	pop	{r4, r5, r6, pc}
 80125f0:	220c      	movs	r2, #12
 80125f2:	6002      	str	r2, [r0, #0]
 80125f4:	2600      	movs	r6, #0
 80125f6:	e7f9      	b.n	80125ec <_calloc_r+0x12>
 80125f8:	462a      	mov	r2, r5
 80125fa:	4621      	mov	r1, r4
 80125fc:	f7fe f868 	bl	80106d0 <memset>
 8012600:	e7f4      	b.n	80125ec <_calloc_r+0x12>

08012602 <__ascii_mbtowc>:
 8012602:	b082      	sub	sp, #8
 8012604:	b901      	cbnz	r1, 8012608 <__ascii_mbtowc+0x6>
 8012606:	a901      	add	r1, sp, #4
 8012608:	b142      	cbz	r2, 801261c <__ascii_mbtowc+0x1a>
 801260a:	b14b      	cbz	r3, 8012620 <__ascii_mbtowc+0x1e>
 801260c:	7813      	ldrb	r3, [r2, #0]
 801260e:	600b      	str	r3, [r1, #0]
 8012610:	7812      	ldrb	r2, [r2, #0]
 8012612:	1e10      	subs	r0, r2, #0
 8012614:	bf18      	it	ne
 8012616:	2001      	movne	r0, #1
 8012618:	b002      	add	sp, #8
 801261a:	4770      	bx	lr
 801261c:	4610      	mov	r0, r2
 801261e:	e7fb      	b.n	8012618 <__ascii_mbtowc+0x16>
 8012620:	f06f 0001 	mvn.w	r0, #1
 8012624:	e7f8      	b.n	8012618 <__ascii_mbtowc+0x16>

08012626 <_realloc_r>:
 8012626:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801262a:	4607      	mov	r7, r0
 801262c:	4614      	mov	r4, r2
 801262e:	460d      	mov	r5, r1
 8012630:	b921      	cbnz	r1, 801263c <_realloc_r+0x16>
 8012632:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012636:	4611      	mov	r1, r2
 8012638:	f7fe bfbc 	b.w	80115b4 <_malloc_r>
 801263c:	b92a      	cbnz	r2, 801264a <_realloc_r+0x24>
 801263e:	f7fe ff45 	bl	80114cc <_free_r>
 8012642:	4625      	mov	r5, r4
 8012644:	4628      	mov	r0, r5
 8012646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801264a:	f000 f86b 	bl	8012724 <_malloc_usable_size_r>
 801264e:	4284      	cmp	r4, r0
 8012650:	4606      	mov	r6, r0
 8012652:	d802      	bhi.n	801265a <_realloc_r+0x34>
 8012654:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012658:	d8f4      	bhi.n	8012644 <_realloc_r+0x1e>
 801265a:	4621      	mov	r1, r4
 801265c:	4638      	mov	r0, r7
 801265e:	f7fe ffa9 	bl	80115b4 <_malloc_r>
 8012662:	4680      	mov	r8, r0
 8012664:	b908      	cbnz	r0, 801266a <_realloc_r+0x44>
 8012666:	4645      	mov	r5, r8
 8012668:	e7ec      	b.n	8012644 <_realloc_r+0x1e>
 801266a:	42b4      	cmp	r4, r6
 801266c:	4622      	mov	r2, r4
 801266e:	4629      	mov	r1, r5
 8012670:	bf28      	it	cs
 8012672:	4632      	movcs	r2, r6
 8012674:	f7fe f917 	bl	80108a6 <memcpy>
 8012678:	4629      	mov	r1, r5
 801267a:	4638      	mov	r0, r7
 801267c:	f7fe ff26 	bl	80114cc <_free_r>
 8012680:	e7f1      	b.n	8012666 <_realloc_r+0x40>

08012682 <__ascii_wctomb>:
 8012682:	4603      	mov	r3, r0
 8012684:	4608      	mov	r0, r1
 8012686:	b141      	cbz	r1, 801269a <__ascii_wctomb+0x18>
 8012688:	2aff      	cmp	r2, #255	@ 0xff
 801268a:	d904      	bls.n	8012696 <__ascii_wctomb+0x14>
 801268c:	228a      	movs	r2, #138	@ 0x8a
 801268e:	601a      	str	r2, [r3, #0]
 8012690:	f04f 30ff 	mov.w	r0, #4294967295
 8012694:	4770      	bx	lr
 8012696:	700a      	strb	r2, [r1, #0]
 8012698:	2001      	movs	r0, #1
 801269a:	4770      	bx	lr

0801269c <_raise_r>:
 801269c:	291f      	cmp	r1, #31
 801269e:	b538      	push	{r3, r4, r5, lr}
 80126a0:	4605      	mov	r5, r0
 80126a2:	460c      	mov	r4, r1
 80126a4:	d904      	bls.n	80126b0 <_raise_r+0x14>
 80126a6:	2316      	movs	r3, #22
 80126a8:	6003      	str	r3, [r0, #0]
 80126aa:	f04f 30ff 	mov.w	r0, #4294967295
 80126ae:	bd38      	pop	{r3, r4, r5, pc}
 80126b0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80126b2:	b112      	cbz	r2, 80126ba <_raise_r+0x1e>
 80126b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80126b8:	b94b      	cbnz	r3, 80126ce <_raise_r+0x32>
 80126ba:	4628      	mov	r0, r5
 80126bc:	f000 f830 	bl	8012720 <_getpid_r>
 80126c0:	4622      	mov	r2, r4
 80126c2:	4601      	mov	r1, r0
 80126c4:	4628      	mov	r0, r5
 80126c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80126ca:	f000 b817 	b.w	80126fc <_kill_r>
 80126ce:	2b01      	cmp	r3, #1
 80126d0:	d00a      	beq.n	80126e8 <_raise_r+0x4c>
 80126d2:	1c59      	adds	r1, r3, #1
 80126d4:	d103      	bne.n	80126de <_raise_r+0x42>
 80126d6:	2316      	movs	r3, #22
 80126d8:	6003      	str	r3, [r0, #0]
 80126da:	2001      	movs	r0, #1
 80126dc:	e7e7      	b.n	80126ae <_raise_r+0x12>
 80126de:	2100      	movs	r1, #0
 80126e0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80126e4:	4620      	mov	r0, r4
 80126e6:	4798      	blx	r3
 80126e8:	2000      	movs	r0, #0
 80126ea:	e7e0      	b.n	80126ae <_raise_r+0x12>

080126ec <raise>:
 80126ec:	4b02      	ldr	r3, [pc, #8]	@ (80126f8 <raise+0xc>)
 80126ee:	4601      	mov	r1, r0
 80126f0:	6818      	ldr	r0, [r3, #0]
 80126f2:	f7ff bfd3 	b.w	801269c <_raise_r>
 80126f6:	bf00      	nop
 80126f8:	24000038 	.word	0x24000038

080126fc <_kill_r>:
 80126fc:	b538      	push	{r3, r4, r5, lr}
 80126fe:	4d07      	ldr	r5, [pc, #28]	@ (801271c <_kill_r+0x20>)
 8012700:	2300      	movs	r3, #0
 8012702:	4604      	mov	r4, r0
 8012704:	4608      	mov	r0, r1
 8012706:	4611      	mov	r1, r2
 8012708:	602b      	str	r3, [r5, #0]
 801270a:	f7ef fa77 	bl	8001bfc <_kill>
 801270e:	1c43      	adds	r3, r0, #1
 8012710:	d102      	bne.n	8012718 <_kill_r+0x1c>
 8012712:	682b      	ldr	r3, [r5, #0]
 8012714:	b103      	cbz	r3, 8012718 <_kill_r+0x1c>
 8012716:	6023      	str	r3, [r4, #0]
 8012718:	bd38      	pop	{r3, r4, r5, pc}
 801271a:	bf00      	nop
 801271c:	240007f4 	.word	0x240007f4

08012720 <_getpid_r>:
 8012720:	f7ef ba64 	b.w	8001bec <_getpid>

08012724 <_malloc_usable_size_r>:
 8012724:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012728:	1f18      	subs	r0, r3, #4
 801272a:	2b00      	cmp	r3, #0
 801272c:	bfbc      	itt	lt
 801272e:	580b      	ldrlt	r3, [r1, r0]
 8012730:	18c0      	addlt	r0, r0, r3
 8012732:	4770      	bx	lr

08012734 <_init>:
 8012734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012736:	bf00      	nop
 8012738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801273a:	bc08      	pop	{r3}
 801273c:	469e      	mov	lr, r3
 801273e:	4770      	bx	lr

08012740 <_fini>:
 8012740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012742:	bf00      	nop
 8012744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012746:	bc08      	pop	{r3}
 8012748:	469e      	mov	lr, r3
 801274a:	4770      	bx	lr
